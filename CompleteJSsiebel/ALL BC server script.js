function BusComp_PreQuery ()
{
	var SearchStr;
	var AccType;
	try{
			AccType=TheApplication().GetProfileAttr(""STCAccountTypeAcc"");
			if(AccType != null && AccType != """")
			{	
				SearchStr=this.GetSearchExpr();
				if (SearchStr == null || SearchStr == """")
					SearchStr = ""[Type]='"" + AccType + ""'"";
				else	
					SearchStr = SearchStr + "" AND [Type]='"" + AccType + ""'"";			
				this.SetSearchExpr(SearchStr);	
				// The profile Attribute is set to blank so that the regular searches on Account data work as reqd.
				TheApplication().SetProfileAttr(""STCAccountTypeAcc"","""");
			}	
			return (ContinueOperation);	
	}
	catch(e)
	{	
		throw(e);
	}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{
try
{
	if (FieldName == ""STC MSISDN Campaign"")
	{
			this.ActivateField(""STC MSISDN Campaign"");
				if (this.GetFieldValue(""STC MSISDN Campaign"") != """")
		{
			var	psInputs = TheApplication().NewPropertySet();
			var	psOutputs = TheApplication().NewPropertySet();
			var svcbsService = TheApplication().GetService(""Workflow Process Manager"");
			with (psInputs)
			{
					SetProperty(""ProcessName"", ""STC Fiber CVM MSISDN Update Sub_Inv WF"");
					SetProperty(""Object Id"", this.GetFieldValue(""Id""));
			}
				svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
		}
	}
}
catch(e)
{
}
finally
{
}

}
function BusComp_PreInvokeMethod (MethodName)
{	
	return(ContinueOperation);
}
function BusComp_PreQuery ()
{
	var SearchStr;
	var AccType;
	try{
			AccType=TheApplication().GetProfileAttr(""STCAccountTypeAcc"");
			if(AccType != null && AccType != """")
			{	
				var searchID = this.GetSearchSpec(""Tax ID Number"");
				var searchIDytpe = this.GetSearchSpec(""Survey Type"");
				if(searchIDytpe == """")
				{
					TheApplication().RaiseErrorText(""ID Type is a mandatory field"");
					return(CancelOperation);
				}
				else if(searchID == """")
				{
					TheApplication().RaiseErrorText(""ID# is a mandatory field"");
					return(CancelOperation);
				}
				else if (isNaN(searchID.substring(3,searchID.length)))
				{
					TheApplication().RaiseErrorText(""ID# should be Numeric only"");
					return(CancelOperation);
				}				
				else
				{
					if(searchID.substring(3,searchID.length).length < 9 || searchID.substring(3,searchID.length).length > 9 )
					{
						TheApplication().RaiseErrorText(""ID# should be of 9 digits only"");
						return(CancelOperation);
					}// CPR Length ends
					if(searchID.substring(3,searchID.length).length == 9)
					{				
						SearchStr=this.GetSearchExpr();				
						if (SearchStr == null || SearchStr == """")
							SearchStr = ""[Type]='"" + AccType + ""'"";
						else	
							SearchStr = SearchStr + "" AND [Type]='"" + AccType + ""'"";			
							this.SetSearchExpr(SearchStr);	
							// The profile Attribute is set to blank so that the regular searches on Account data work as reqd.
							TheApplication().SetProfileAttr(""STCAccountTypeAcc"","""");
					}
				} // isNaN ends
			}	
			return (ContinueOperation);	
	}
	catch(e)
	{	
		throw(e);
	}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
/*try
{
if(FieldName ==""STC Num of Lines"" ||FieldName ==""STC Compare Num Lines"") 
 	{ 
 	
 	var ActiveView = TheApplication().ActiveViewName();
 	if(ActiveView ==""STC Customer Account Summary View"" || ActiveView ==""All Accounts across Organizations"")
 	{
	 	//var sCreateAct = TheApplication().GetProfileAttr(""CreateAct"");
	 	//if(sCreateAct !=""Yes"" || sCreateAct =="""")
	 	//{ 
	 		var appObj = TheApplication();			
		    var currLoginId =appObj.LoginName();
			var foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_SUPER_CSRS"",currLoginId);
			var foundCSRSubstr = foundCSR.substring(0,5);  
			if(foundCSRSubstr != ""SUPER"")// && sCreateAct)		
			{
			TheApplication().RaiseErrorText(""Your Not Autorized person to change the Value"");
			}
		  //}	
	 	}
	 }	
	return (ContinueOperation); 
	}
	catch(e)
	{
		throw(e)
	}

	finally
	{
	}*/
}
function BusComp_WriteRecord ()
{//[NAVIN:23Jul2020:Modified for Collection Barring]
	with(this)
	{
		var vAgencyName, vAgentName, vLegalCase, vFeedback, vDialed1, vOverdueAmt, vPTPAmt;
		ActivateField(""STC ReadOnly"");
		var ReadFlag = GetFieldValue(""STC ReadOnly"");
		
		if(ReadFlag != ""Y"")
		{
			ActivateField(""STC Agency Name"");
			ActivateField(""STC Agent Name"");
			ActivateField(""STC Legal Case"");
			ActivateField(""STC Feedback"");
			ActivateField(""STC Dailed#1"");
			ActivateField(""STC Overdue Outstanding Amount"");
			ActivateField(""STC PTP Amount"");
	
			vAgencyName = GetFieldValue(""STC Agency Name"");
			vAgentName = GetFieldValue(""STC Agent Name"");
			vLegalCase = GetFieldValue(""STC Legal Case"");
			vFeedback = GetFieldValue(""STC Feedback"");
			vDialed1 = GetFieldValue(""STC Dailed#1"");
			vOverdueAmt = GetFieldValue(""STC Overdue Outstanding Amount"");
			vPTPAmt = GetFieldValue(""STC PTP Amount"");
			if((vAgencyName == null || vAgencyName == """") && (vAgentName == null || vAgentName == """") && (vLegalCase == null || vLegalCase == """") && (vFeedback == null || vFeedback == """") && (vDialed1 == null || vDialed1 == """") && (vOverdueAmt == null || vOverdueAmt == """") && (vPTPAmt == null || vPTPAmt == """"))
			{//[NAVIN:23Jul2020:Modified for Collection Barring]
				SetFieldValue(""STC ReadOnly"", ""Y"");
				WriteRecord();
			}
		}
	}
}
"//Your public declarations go here... 
var callBackFlg=""N""; 
var sStatusScheduled = """"; //ABS
var sNewCallFollowFlag="""";		//Indrasen
var sNewCallFollowCalc="""";		//Indrasen
var TypeChanged=""N"";			//Indrasen
var sNewCallFollowResolved="""";	//Indrasen"
function BusComp_ChangeRecord ()
{

}
function BusComp_PreGetFieldValue (FieldName, &FieldValue)
{
	return (ContinueOperation);
}
function BusComp_PreInvokeMethod (MethodName)
{
try{
	switch (MethodName)
	{
		case ""WriteCallRecord"" :
			if (this.GetFieldValue(""STC End Time"") == """")
			{
			   this.ActivateField(""End Time Set"");
			   this.SetFieldValue(""End Time Set"",""Y"");
				//var CTime = Clib.time();
				//var DtTmObj = Date.fromSystem(CTime);
			/*	var DtTmObj = new Date();
		   		var KeyMon = ToString(DtTmObj.getMonth() + 1);	
		   		var KeyDate = ToString(DtTmObj.getDate());	
		   		var keyHrs = ToString(DtTmObj.getHours());
		   		var keyMin = ToString(DtTmObj.getMinutes());
		   		var keySec = ToString(DtTmObj.getSeconds());
		
		   		if (Clib.strlen(KeyMon) == 1) 
		   			KeyMon = '0'+ KeyMon; 
		   		if (Clib.strlen(keyHrs) == 1) 
					keyHrs = '0'+ keyHrs; 
		   		if (Clib.strlen(keyMin) == 1) 
					keyMin = '0'+ keyMin; 
			   if (Clib.strlen(keySec) == 1)
						 keySec = '0'+ keySec;
			   if (Clib.strlen(KeyDate) == 1) 
						KeyDate = '0'+ KeyDate;
		
			   var dtDatum = (KeyMon +""/""+ (KeyDate) +""/""+ DtTmObj.getFullYear() +"" ""+ keyHrs +"":""+ keyMin +"":""+ keySec);
		    
			this.SetFieldValue(""End Time"",dtDatum); */  			
			}	
			//this.WriteRecord();
			return (CancelOperation);
			break;	
		default:
			return (ContinueOperation);
	}		
	return (ContinueOperation);
}
catch(e)
{
	throw(e);
}	
}
function BusComp_PreQuery ()
{
	var SearchStr;
	try{
			var ActiveView = TheApplication().ActiveViewName();
			if(ActiveView == ""STC SIP Activity List View"")
			{	
				SearchStr=this.GetSearchExpr();
				if (SearchStr == null || SearchStr == """")
					SearchStr = ""([Type]='Pilot Network Provisioning' OR [Type]='Modify Order Provisioning' OR [Type]='DID Network Provisioning' OR [Type]='DID Network Deprovisioning' OR [Type]='Pilot Network Deprovisioning' OR [Type] = 'FNP Provision' OR [Type]='FNP Service Deactivation' OR [Type] = 'Tollfree Network Provisioning' OR [Type]='Tollfree DeProvisioning')"";
				else	
					SearchStr = SearchStr + "" AND ([Type]='Pilot Network Provisioning' OR [Type]='Modify Order Provisioning' OR [Type]='DID Network Provisioning' OR [Type]='DID Network Deprovisioning' OR [Type]='Pilot Network Deprovisioning' OR [Type] = 'FNP Provision' OR [Type]='FNP Service Deactivation' OR [Type] = 'Tollfree Network Provisioning' OR [Type]='Tollfree DeProvisioning')"";			
				this.SetSearchExpr(SearchStr);	
			}	
			return (ContinueOperation);	
	}
	catch(e)
	{	
		throw(e);
	}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
			
	try
	{	
		switch(FieldName)
		{
			//[MANUJ] : [Auomated Call Back Feature]
			case ""Type"":
			if(FieldValue == ""Call Back"")
			{
			var AlarmTime = TheApplication().InvokeMethod(""LookupValue"",""STC_CALL_BACK_ALARM"",""Min"");
			this.SetFieldValue(""Type"", """");
			this.SetFieldValue(""Status"",""Scheduled"");
			this.SetFieldValue(""Type"", ""Call Back"");
			this.SetFieldValue(""Alarm"",""Y"" );
			var ActivityId = this.GetFieldValue(""Id"");
			ActivityId = ""Activity #: "" + ActivityId;
			this.SetFieldValue(""Comment"", ActivityId);
			
			}
			case ""Done Flag"":
			if(FieldValue == ""Y"" && this.GetFieldValue(""Type"") == ""Call Back"")
			{
			var CallCode = this.GetFieldValue(""STC Call Code"");
			if (CallCode == '' || CallCode == """")
			{
			TheApplication().RaiseErrorText(""Selection of Call Code is mandatory before completing activity"");
			}
	
			this.SetFieldValue(""Status"",""Done"");
			this.ActivateField(""BC Read Only Flag"");
			var ROnly = this.GetFieldValue(""BC Read Only Flag"");
			var Alarm = this.GetFieldValue(""Alarm"");
				if(ROnly == ""N"" && Alarm == ""Y"")
			{
			this.SetFieldValue(""Alarm"",""N"" );
			}
			}
			break;
			case ""Status"":

			if(FieldValue == ""Done"" && this.GetFieldValue(""Type"") == ""Call Back"")
			{
			var CallCode1 = this.GetFieldValue(""STC Call Code"");
			if (CallCode1 == '' || CallCode1 == """")
			{
			TheApplication().RaiseErrorText(""Selection of Call Code is mandatory before completing activity"");
			}
			this.ActivateField(""BC Read Only Flag"");
			var ROnly = this.GetFieldValue(""BC Read Only Flag"");
			this.SetFieldValue(""Done Flag"",""Y"");
			var Alarm = this.GetFieldValue(""Alarm"");
			if(ROnly == ""N"" && Alarm == ""Y"")
			{
			this.SetFieldValue(""Alarm"",""N"" );
			}
			}
			break;

			case ""No Sooner Than Date"": // Jithin: ABS SD
				var sEarliestDate = FieldValue;
				if(sEarliestDate!=null && sEarliestDate!="""")
				{
					var sHourDiff = TheApplication().InvokeMethod(""LookupValue"",""STC_ABS_HOURS"",""ABS"");
					//var sUser = this.GetFieldValue(""Primary Owned By"")
					var sUser = TheApplication().LoginName();
					var sSuperUser = TheApplication().InvokeMethod(""LookupValue"",""STC_ABS_HOURS"", sUser);
					var sDate = new Date(sEarliestDate);
					//var sCreatedDate = this.GetFieldValue(""Created"");
					var sCurrDate = new Date();
					var sHourDiffMilliSec = ToNumber(sHourDiff*3600*1000);
					var sDateMilliSec = sDate.getTime();
					var sCurrDateMilliSec = sCurrDate.getTime();
					var sDateDiffMilliSec = ToNumber(sDateMilliSec - sCurrDateMilliSec);					 
					if(sUser == sSuperUser)
					{
						break;
					}
					else
					{	if(sDateDiffMilliSec <= sHourDiffMilliSec)
						{
							TheApplication().RaiseErrorText(""Earliest Start Date should not be before 24 hours"");
						}
					} 
				}
			break;
			
			//Abuzar:17082021:Start:Created for SD ABS AM Enhancement
			case ""STC Installation Type"":
			if(FieldValue == ""Complaint"")
			{
				var strActViewName= TheApplication().ActiveViewName();
				if(strActViewName != null && strActViewName == ""STC Order Entry - Order Appointment View"")
				{
					TheApplication().RaiseErrorText(""You are not allowed to select 'Type Of Installation' as 'Complaint' for Orders. Please select appropriate 'Type Of Installation'."");
				}
			}
			break;
			//Abuzar:17082021:End:Created for SD ABS AM Enhancement

			default:
			break;
	}
	return (ContinueOperation);
	}
	catch(e)
	{ 
		throw(e)
	}
	finally
	{
	}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
			
	try
	{	
		switch(FieldName)
		{
			//[MANUJ] : [Auomated Call Back Feature]
			case ""Type"":
			if(FieldValue == ""Call Back"")
			{
			var AlarmTime = TheApplication().InvokeMethod(""LookupValue"",""STC_CALL_BACK_ALARM"",""Min"");
			this.SetFieldValue(""Type"", """");
			if(this.GetFieldValue(""STC New CallBack Activity Calc"") != ""Y"") //Indrasen:Fy21_R19:Added check for existing Code of status update
				this.SetFieldValue(""Status"",""Scheduled"");
			this.SetFieldValue(""Type"", ""Call Back"");
			this.SetFieldValue(""Alarm"",""Y"" );
			var ActivityId = this.GetFieldValue(""Id"");
			ActivityId = ""Activity #: "" + ActivityId;
			this.SetFieldValue(""Comment"", ActivityId);
			
			}
			case ""Done Flag"":
			if(FieldValue == ""Y"" && this.GetFieldValue(""Type"") == ""Call Back"")
			{
			var CallCode = this.GetFieldValue(""STC Call Code"");
			if (CallCode == '' || CallCode == """")
			{
			TheApplication().RaiseErrorText(""Selection of Call Code is mandatory before completing activity"");
			}
	
			this.SetFieldValue(""Status"",""Done"");
			this.ActivateField(""BC Read Only Flag"");
			var ROnly = this.GetFieldValue(""BC Read Only Flag"");
			var Alarm = this.GetFieldValue(""Alarm"");
				if(ROnly == ""N"" && Alarm == ""Y"")
			{
			this.SetFieldValue(""Alarm"",""N"" );
			}
			}
			break;
			case ""Status"":

			if(FieldValue == ""Done"" && this.GetFieldValue(""Type"") == ""Call Back"")
			{
			var CallCode1 = this.GetFieldValue(""STC Call Code"");
			if (CallCode1 == '' || CallCode1 == """")
			{
			TheApplication().RaiseErrorText(""Selection of Call Code is mandatory before completing activity"");
			}
			this.ActivateField(""BC Read Only Flag"");
			var ROnly = this.GetFieldValue(""BC Read Only Flag"");
			this.SetFieldValue(""Done Flag"",""Y"");
			var Alarm = this.GetFieldValue(""Alarm"");
			if(ROnly == ""N"" && Alarm == ""Y"")
			{
			this.SetFieldValue(""Alarm"",""N"" );
			}
			}
			break;

			case ""No Sooner Than Date"": // Jithin: ABS SD
				var sEarliestDate = FieldValue;
				if(sEarliestDate!=null && sEarliestDate!="""")
				{
					var sHourDiff = TheApplication().InvokeMethod(""LookupValue"",""STC_ABS_HOURS"",""ABS"");
					//var sUser = this.GetFieldValue(""Primary Owned By"")
					var sUser = TheApplication().LoginName();
					var sSuperUser = TheApplication().InvokeMethod(""LookupValue"",""STC_ABS_HOURS"", sUser);
					var sDate = new Date(sEarliestDate);
					//var sCreatedDate = this.GetFieldValue(""Created"");
					var sCurrDate = new Date();
					var sHourDiffMilliSec = ToNumber(sHourDiff*3600*1000);
					var sDateMilliSec = sDate.getTime();
					var sCurrDateMilliSec = sCurrDate.getTime();
					var sDateDiffMilliSec = ToNumber(sDateMilliSec - sCurrDateMilliSec);					 
					if(sUser == sSuperUser)
					{
						break;
					}
					else
					{	if(sDateDiffMilliSec <= sHourDiffMilliSec)
						{
							TheApplication().RaiseErrorText(""Earliest Start Date should not be before 24 hours"");
						}
					} 
				}
			break;
			
			//Abuzar:17082021:Start:Created for SD ABS AM Enhancement
			case ""STC Installation Type"":
			if(FieldValue == ""Complaint"")
			{
				var strActViewName= TheApplication().ActiveViewName();
				if(strActViewName != null && strActViewName == ""STC Order Entry - Order Appointment View"")
				{
					TheApplication().RaiseErrorText(""You are not allowed to select 'Type Of Installation' as 'Complaint' for Orders. Please select appropriate 'Type Of Installation'."");
				}
			}
			break;
			//Abuzar:17082021:End:Created for SD ABS AM Enhancement

			default:
			break;
	}
	return (ContinueOperation);
	}
	catch(e)
	{ 
		throw(e)
	}
	finally
	{
	}
}
function BusComp_PreWriteRecord ()
{
	sStatusScheduled = this.InvokeMethod(""GetOldFieldValue"", ""Status"");
	
	//Indrasen: FY21_R19:CallBack Revamp



	var isCallBack = """", CallBackTeamLead="""", CallBackTeamLeadEmail="""" , PostnPrimEmpid="""";
	isCallBack			= this.GetFieldValue(""STC New CallBack Activity Calc"");
	CallBackTeamLead	= this.GetFieldValue(""STC CallBack TeamLead"");
	PostnPrimEmpid		= this.GetFieldValue(""Position Primary Emp Id"");
	if(isCallBack == ""Y"")
	{
		if(TypeChanged == ""Y"") // && (sNewCallFollowFlag ==""N"" || sNewCallFollowFlag == """"))
		{	
			TypeChanged="""";
			this.SetFieldValue(""STC New CallBack Activity Flag"",isCallBack);
		}
		
		if(	this.GetFieldValue(""STC CallBack OP Mngr Name"") == """" || this.GetFieldValue(""STC CallBack OP Mngr Email"") == """")
		{
			TheApplication().RaiseErrorText(""Operations Manager/Operations Manager Email can not be Null. "");
		}
	}
	
	
	return (ContinueOperation);


}
function BusComp_SetFieldValue (FieldName)
{
	if (FieldName == ""Status"" )
	{
		this.ActivateField(""Status"");
		this.ActivateField(""Type"");
		var sStatus = this.GetFieldValue(""Status"");
		var sType = this.GetFieldValue(""Type"");
		//[MANUJ] : [Avaya_Reprice]
		var sTypeVal = TheApplication().InvokeMethod(""LookupValue"", ""STC_CPBX_APPROVAL_ACT"", sType);
		var sub_strng = sTypeVal.substr( 0,6 );
		if(sub_strng == ""TARGET"" && sStatus == ""Completed"")
		//if((sType == ""Add Extension"" || sType == ""Plan Change"" || sType == ""CMPLS Plan Config Level 1"" || sType == ""Pilot Number Modification"") && sStatus == ""Completed"")
		{
			var vActId = this.GetFieldValue(""Id"");
			var inputPS2:PropertySet = TheApplication().NewPropertySet();
			var outputPS2:PropertySet = TheApplication().NewPropertySet();
			var BSAdjAppRef: Service = TheApplication().GetService(""Workflow Process Manager"");
			inputPS2.SetProperty(""ProcessName"", ""STC Avaya Add Extension Activity Completion Parent WF"");
			inputPS2.SetProperty(""Object Id"", vActId);
			BSAdjAppRef.InvokeMethod(""RunProcess"",inputPS2,outputPS2);
		}
		if(sType == ""Call Back"")
		{
			
			if (sStatus == ""Completed"" || sStatus ==""Non-contactable"" || sStatus ==""Done"")
			{
				callBackFlg=""Y"";
				this.WriteRecord();
				
			}
		}
		if(sType == ""Call Back"" || sType == ""Follow-Up"")
		{
			sNewCallFollowResolved=""Y"";
			
		}
	}
	if(FieldName == ""Type"")
	{
		TypeChanged = ""Y"";
	}

	
}
function BusComp_WriteRecord ()
{
	try
	{
	//Indrasen.FY21_R19: Call Back Revamp
	var isCallBack = """", CallBackTeamLead="""", CallBackTeamLeadEmail="""" , PostnPrimEmpid="""";
	isCallBack			= this.GetFieldValue(""STC New CallBack Activity Calc"");
	CallBackTeamLead	= this.GetFieldValue(""STC CallBack TeamLead"");
	PostnPrimEmpid		= this.GetFieldValue(""Position Primary Emp Id"");
	var sStatus			= this.GetFieldValue(""Status"");
	var CallBackFlg		= this.GetFieldValue(""STC New CallBack Activity Flag"");
	if(isCallBack == ""Y"")
	{
	/*	if(CallBackTeamLead == """" && PostnPrimEmpid != """")
		{
		
			var	BC = TheApplication().GetBusObject(""Employee"").GetBusComp(""Employee"");
			with(BC)
			{
				ActivateField(""EMail Addr"");
				ActivateField(""Login Name"");
				ActivateField(""Full Name"");
				ClearToQuery();
				SetViewMode(AllView);
				var strExpr = ""[Id] = '""+ PostnPrimEmpid +""'"";
				SetSearchExpr(strExpr);
				ExecuteQuery(ForwardOnly);       
				if(FirstRecord())
				{
					CallBackTeamLead = GetFieldValue(""Login Name"");
					CallBackTeamLeadEmail = GetFieldValue(""EMail Addr"");
				}
			}
			this.SetFieldValue(""STC CallBack TeamLead"", CallBackTeamLead);
			this.SetFieldValue(""STC CallBack TeamLead Email"", CallBackTeamLeadEmail);
			this.WriteRecord();
		}*/
	}
	if(CallBackFlg == ""Y"" && sNewCallFollowResolved == ""Y"" && (sStatus == ""Completed"" || sStatus ==""Non-contactable"" || sStatus ==""Done"" || sStatus == ""Closed""))
	{
		//TheApplication().RaiseErrorText(""Inside Code"");
		var vActId = this.GetFieldValue(""Id"");
		var input = TheApplication().NewPropertySet();
		var output  = TheApplication().NewPropertySet();
		var vBS = TheApplication().GetService(""Workflow Process Manager"");
		input.SetProperty(""ProcessName"", ""STC CallBack Activity Operations WF"");
		input.SetProperty(""Object Id"", vActId);
		input.SetProperty(""ActivityId"", vActId);
		input.SetProperty(""Operation"", ""Resolved"");
		vBS.InvokeMethod(""RunProcess"",input,output);
			
	}
	//end-Indrasen
	if(callBackFlg ==""Y"")
	{
			var vActId = this.GetFieldValue(""Id"");
			var input = TheApplication().NewPropertySet();
			var output  = TheApplication().NewPropertySet();
			var vBS = TheApplication().GetService(""Workflow Process Manager"");
			input.SetProperty(""ProcessName"", ""STC CBR Send SMS WF"");
			input.SetProperty(""Object Id"", vActId);
			vBS.InvokeMethod(""RunProcess"",input,output);
			
	}
	//ABS
	var sStatusCancelled = this.GetFieldValue(""Status"");
	if(sStatusScheduled == ""Scheduled"" && sStatusCancelled == ""Cancelled"")
	{
		this.ActivateField(""Order Id"");
		var sId = this.GetFieldValue(""Id"");
		var sOrderId = this.GetFieldValue(""Order Id"");
		var sInputs = TheApplication().NewPropertySet();
		var sOutputs = TheApplication().NewPropertySet();
		var sBS = TheApplication().GetService(""Workflow Process Manager"");
		sInputs.SetProperty(""ProcessName"", ""STC ABS Create Retention TT WF"") 
		sInputs.SetProperty(""Object Id"", sOrderId);
		sInputs.SetProperty(""ActivityId"", sId);
		sBS.InvokeMethod(""RunProcess"", sInputs, sOutputs);
	}

	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		callBackFlg=""N"";
		//ABS
		sInputs = null;
		sOutputs = null;
		sBS = null;
	}
}
function BusComp_PreInvokeMethod (MethodName)
{

try
{

  switch(MethodName)
  {
     case ""FetchData"" :
         FetchData();     
	     return(CancelOperation);
	     break;
	     
	default:
	     return (ContinueOperation);
    
   }
   
   return(ContinueOperation);
}

catch(e)
{
throw(e);
}
finally
{
}
	
	
}
function FetchData()
{
var appObj;
var startTime;
var endTime;
var accId;
var input;
var output;
var svc;
var psInput;
var psOutput;
var PSInput;
var Child;
var SVCprocessmgr;


try
{
          
          
		  appObj = TheApplication();
          startTime = this.GetFieldValue(""StartTime"");
          endTime = this.GetFieldValue(""EndTime"");
          ValidateDates(startTime,endTime);                 
          accId = appObj.GetProfileAttr(""AccountId"");
          psInput = appObj.NewPropertySet();
          psOutput = appObj.NewPropertySet();
          
          with(appObj)
          {
	         
              input = NewPropertySet();
		      output = NewPropertySet();
		      svc = GetService(""Workflow Process Manager"");
		      input.SetProperty(""ProcessName"",""STC Adjustment History Workflow"");
		      input.SetProperty(""Object Id"",accId);
		      input.SetProperty(""StartTime"",startTime);
		      input.SetProperty(""EndTime"",endTime);
		      svc.InvokeMethod(""RunProcess"",input,output);
		 }  
        
}

catch(e)
{
throw(e);
}
finally
{
    input = null;
	output= null;
	svc = null;
	appObj = null;
}  
}
function ValidateDates(startTime,endTime)
{
var sErrorMsg =""""; 
var sErrorCode ="""";
var startTimeObj;
var endTimeObj;
var compareStartDt;
var compareEndDt;
var CurrDate;
var Sysdate;
var appObj;

try
{
          appObj = TheApplication();
          with(appObj)
          {  
			          if (startTime == """" || startTime == null)
			          {
			             sErrorMsg += LookupMessage(""User Defined Errors"",""AM0021"") +"","";
			             sErrorCode += ""AM0021 \n"";
			            // TheApplication().RaiseErrorText(""Enter Start Date"");
			          }
			          
			          if (endTime == """" || endTime == null)
			          {   
			             sErrorMsg += LookupMessage(""User Defined Errors"",""AM0022"") +"","";
			             sErrorCode += ""AM0022 \n"";
			          } 
			          
			           if ((startTime != """" && startTime != null) && (endTime != """" && endTime != null))
			           {
			              startTimeObj = new Date(startTime);
			              compareStartDt = startTimeObj.getTime();
			              endTimeObj =  new Date(endTime);
			              compareEndDt = endTimeObj.getTime();
			              CurrDate = new Date();
					      Sysdate = CurrDate.getTime();
			              
			              if (compareStartDt > compareEndDt)
			             { 
			               sErrorMsg += LookupMessage(""User Defined Errors"",""AM0023"") +"","";
			               sErrorCode += ""AM0023 \n"";
			             }  
			             // TheApplication().RaiseErrorText(""Start Date should be less than End Date"");
			              
			              if (compareStartDt > Sysdate)  
			              {
			               sErrorMsg += LookupMessage(""User Defined Errors"",""AM0024"") +"","";
			               sErrorCode += ""AM0024 \n"";
			              } 
			            //  TheApplication().RaiseErrorText(""Start Date should be less than Today"");
			              
			              if (compareEndDt > Sysdate)
			              {
			               sErrorMsg += LookupMessage(""User Defined Errors"",""AM0025"") +"","";
			               sErrorCode += ""AM0025 \n"";
			              } 
			             // TheApplication().RaiseErrorText(""End Date should be less than Today"");
			                  
			            }
			            
			            if(sErrorCode !="""" && sErrorCode != null)
						{
						   var len = sErrorMsg.length -1;
						   var Msg = sErrorMsg.substring(0,len);						   				   
						   RaiseErrorText(Msg);
						}
			}			
}
catch(e)
{
  throw(e);
}
finally
{
}  			
         

}
function BusComp_PreInvokeMethod (MethodName)
{
//Added by Navin
//Author: Navin Rai
//Release: 
//Date: 20-Oct-2010	
try
{
	switch(MethodName)
	{
 		case ""ModifyProdSvc"":
 		case ""SuspendProdSvc"":
 		case ""ResumeProdSvc"":
 		case ""TempSuspendSvc"":
 		case ""MigrationProdSvc"":
 		case ""ServiceMigrationSvc"":
 		case ""DisconnectProdSvc"":	
		{
			ValidateCSR();
		//	return (CancelOperation);
		}
	}
}
finally
{

}

//Navin Edit Ends

	return (ContinueOperation);
	
}
"//***********************************************************************************************************//
//Purpose: 1)To validate whether the current user(CSR) has the rights to modify the order or not 
//Inputs: 
//Outputs: Will give an error message if the CSR is not authorised
//Author: Navin Rai
//Release: 
//Date: 20-Oct-2010
//*************************************************************************************************************//
function ValidateCSR()
{

var appObj;
var currLoginId;
var custType;
var foundCSR, foundCSRSubstr;
var isRecord;
var boSR, bcSR;

try
{

	currLoginId = null;
	appObj = TheApplication();
			
			with(appObj)
			{
				currLoginId = LoginName();
			}
	
			bcSR = this.ParentBusComp();
	
	if(bcSR != null)
	{
			bcSR.ActivateField(""Type"");
			custType = bcSR.GetFieldValue(""Type"");
				
			if(custType == ""Corporate"")
			{
				foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_CORPORATE_CSRS"",currLoginId);
				
				foundCSRSubstr = foundCSR.substring(0,3);
				if(foundCSRSubstr != ""CSR"")
				{
					appObj.RaiseErrorText(""Sorry! You do not have the privilege to modify the order"");
					return (CancelOperation);
				}
			}
			
				if(custType == ""SME"")
			   {
			    foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_SMB_CSRS"",currLoginId);
			    
			    foundCSRSubstr = foundCSR.substring(0,3);
			    if(foundCSRSubstr != ""SMB"")
			    {
			     appObj.RaiseErrorText(""Sorry! You do not have the privilege to modify the order"");
			     return (CancelOperation);
			    }
			   }

		}
	}
finally
	{
		bcSR = null;
		appObj = null;
	}
}
function BusComp_PreInvokeMethod (MethodName)
{
try{
	switch (MethodName)
	{
		case ""WriteCallRecord"" :
			if (this.GetFieldValue(""STC End Time"") == """")
			{
			   this.ActivateField(""End Time Set"");
			   this.SetFieldValue(""End Time Set"",""Y"");
				//var CTime = Clib.time();
				//var DtTmObj = Date.fromSystem(CTime);
			/*	var DtTmObj = new Date();
		   		var KeyMon = ToString(DtTmObj.getMonth() + 1);	
		   		var KeyDate = ToString(DtTmObj.getDate());	
		   		var keyHrs = ToString(DtTmObj.getHours());
		   		var keyMin = ToString(DtTmObj.getMinutes());
		   		var keySec = ToString(DtTmObj.getSeconds());
		
		   		if (Clib.strlen(KeyMon) == 1) 
		   			KeyMon = '0'+ KeyMon; 
		   		if (Clib.strlen(keyHrs) == 1) 
					keyHrs = '0'+ keyHrs; 
		   		if (Clib.strlen(keyMin) == 1) 
					keyMin = '0'+ keyMin; 
			   if (Clib.strlen(keySec) == 1)
						 keySec = '0'+ keySec;
			   if (Clib.strlen(KeyDate) == 1) 
						KeyDate = '0'+ KeyDate;
		
			   var dtDatum = (KeyMon +""/""+ (KeyDate) +""/""+ DtTmObj.getFullYear() +"" ""+ keyHrs +"":""+ keyMin +"":""+ keySec);
		    
			this.SetFieldValue(""End Time"",dtDatum); */  			
			}	
			//this.WriteRecord();
			return (CancelOperation);
			break;	
		default:
			return (ContinueOperation);
	}		
	return (ContinueOperation);
}
catch(e)
{
	throw(e);
}	
}
function BusComp_PreNewRecord ()
{
/*	var vView = TheApplication().GetProfileAttr(""ActiveViewName"");
	if(vView == ""STC Avaya Cloud PBX Bulk Extension View"")
	{
		var vID = null;
		vID = this.CountRecords();
		if(vID > 0)
		TheApplication().RaiseErrorText(""Not allowed to create multiple Attachments."");
	}*/
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_PreInvokeMethod (MethodName,Inputs,Outputs)
{	
	
	return (ContinueOperation);
}
function BusComp_PreQuery ()
{
/*var appObj;
var ServAccId;
 try
 {           
	 if (this.ParentBusComp().Name() == ""CUT Service Sub Accounts"")
 	    {
	        ServAccId = this.ParentBusComp().GetFieldValue(""Id"");
            //This ProfileAttr ""ChargeId"" is been used in BS ""STC Unbillled Usage Items Charge BS"" Query method to restrict the data shown.
             appObj = TheApplication();
             if(ServAccId != """")
             appObj.SetProfileAttr(""ServAccId"",ServAccId);
             else
             appObj.SetProfileAttr(""ServAccId"","""");
        }
            return (ContinueOperation);
  }
 catch(e)
 {
 	//throw(e.toString());
 	LogException(e);
 }
 finally
 {
    appObj = null;
 }    */
}
function LogException(e)
{
	var appObj;
  	var Input;
  	var Output;
  	var CallMessageHandler; 
	try
 	{
		  appObj = TheApplication();
		  Input = appObj.NewPropertySet();
		  Output = appObj.NewPropertySet();
		  CallMessageHandler = appObj.GetService(""STC Generic Error Handler""); 
		  Input.SetProperty(""Error Code"", e.errCode);
		  Input.SetProperty(""Error Message"", e.errText);
		  Input.SetProperty(""Object Name"", ""VBC STC Commitment Amt BS"");
		  Input.SetProperty(""Object Type"", ""Buisness Service"");
		  CallMessageHandler.InvokeMethod(""Log Message"", Input, Output);
 	}
 	catch(e)
 	{
  		
 	}
 	finally
 	{
 
		  CallMessageHandler = null;
		  Output = null;
		  Input = null;
		  appObj = null;
 	}
 	
}
function BusComp_PreQuery ()
{
var appObj;
var sChargeId;
 try
 {           
	 if (this.ParentBusComp().Name() == ""CMU Unbilled Item Charges VBC"")
 	    {
	        sChargeId = this.ParentBusComp().GetFieldValue(""Unbilled Item Charges Id"");
            //This ProfileAttr ""ChargeId"" is been used in BS ""STC Unbillled Usage Items Charge BS"" Query method to restrict the data shown.
             appObj = TheApplication();
             if(sChargeId != """")
             appObj.SetProfileAttr(""ChargeId"",sChargeId);
             else
             appObj.SetProfileAttr(""ChargeId"","""");
        }
            return (ContinueOperation);
  }
 catch(e)
 {
 	//throw(e.toString());
 	LogException(e);
 }
 finally
 {
    appObj = null;
 }        
}
function LogException(e)
{

	var appObj;
  	var Input;
  	var Output;
  	var CallMessageHandler; 
	try
 	{
		  appObj = TheApplication();
		  Input = appObj.NewPropertySet();
		  Output = appObj.NewPropertySet();
		  CallMessageHandler = appObj.GetService(""STC Generic Error Handler""); 
		  Input.SetProperty(""Error Code"", e.errCode);
		  Input.SetProperty(""Error Message"", e.errText);
		  Input.SetProperty(""Object Name"", ""CMU Unbilled Item Charges Details VBC"");
		  Input.SetProperty(""Object Type"", ""Buisness Component"");
		  CallMessageHandler.InvokeMethod(""Log Message"", Input, Output);
 	}
 	catch(e)
 	{
  		
 	}
 	finally
 	{
 
		  CallMessageHandler = null;
		  Output = null;
		  Input = null;
		  appObj = null;
 	}
}
function BusComp_PreQuery ()
{
var appObj;
var sServiceId;
 try
 {           
	 if (this.ParentBusComp().Name() == ""CMU Unbilled Usage VBC"")
 	    {
	        sServiceId = this.ParentBusComp().GetFieldValue(""Unbilled Usage Service Id"");
            //This ProfileAttr ""ServiceId"" is been used in BS ""STC Unbilled Usage Items BS"" Query method to restrict the data shown.
             appObj = TheApplication();
             if(sServiceId!= """")
             appObj.SetProfileAttr(""ServiceId"",sServiceId);
             else
             appObj.SetProfileAttr(""ServiceId"","""");
        }
            return (ContinueOperation);
  }
 catch(e)
 {
 	//throw(e.toString());
 	LogException(e);
 }
 finally
 {
    appObj = null;
 }        
}
function LogException(e)
{

	var appObj;
  	var Input;
  	var Output;
  	var CallMessageHandler; 
	try
 	{
		  appObj = TheApplication();
		  Input = appObj.NewPropertySet();
		  Output = appObj.NewPropertySet();
		  CallMessageHandler = appObj.GetService(""STC Generic Error Handler""); 
		  Input.SetProperty(""Error Code"", e.errCode);
		  Input.SetProperty(""Error Message"", e.errText);
		  Input.SetProperty(""Object Name"", ""CMU Unbilled Item Charges VBC"");
		  Input.SetProperty(""Object Type"", ""Buisness Component"");
		  CallMessageHandler.InvokeMethod(""Log Message"", Input, Output);
 	}
 	catch(e)
 	{
  		
 	}
 	finally
 	{
 
		  CallMessageHandler = null;
		  Output = null;
		  Input = null;
		  appObj = null;
 	}
}
function BusComp_NewRecord ()
{
this.ActivateField(""Desc Text"");
this.SetFieldValue(""Desc Text"", ""New Record"");
}
function BusComp_PreWriteRecord ()
{
	return (ContinueOperation);
}
function BusComp_NewRecord ()
{
this.ActivateField(""Desc Text"");
this.SetFieldValue(""Desc Text"", ""New Record"");
}
function BusComp_PreWriteRecord ()
{
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
var isNewRecord = this.InvokeMethod(""IsNewRecordPending"");

if(isNewRecord == ""TRUE"" && TheApplication().GetProfileAttr(""ApplicationName"") == ""Siebel eChannel for CME"")

{
	this.SetFieldValue(""SSA Primary Field"",""Y"");
}

return (ContinueOperation);
/*	var strPostalCode = this.GetFieldValue(""Postal Code"");
	var returnval = ContinueOperation;
	if(strPostalCode.length != 0)
	{
		if(strPostalCode.length != 6)
		{
			TheApplication().RaiseErrorText(""The Postal Code should be numeric."");
			returnval = CancelOperation;
		}
		else
		{
			if(!TheApplication().GetService(""TDNFormatValidations"").check_zipcode(strPostalCode,""India""))
			{
				TheApplication().RaiseErrorText(""The Zip Code should be numeric."");
				returnval = CancelOperation;
			}
			
		 }
	 
	 }

	
	return (returnval);
	*/
}
function BusComp_NewRecord ()
{
var sApp = TheApplication();
var CurrentLogin = sApp.LoginName();
var FName,LName,Dept,LoginName;
var foundTestCSR = sApp.InvokeMethod(""LookupValue"",""STC_TEST_PROV"",CurrentLogin);
var Purpose = sApp.InvokeMethod(""LookupValue"",""STC_ADMIN"",""TESTLINEPURPOSE"");
var TestLine = sApp.InvokeMethod(""LookupValue"",""STC_ADMIN"",""TESTLINEVAL""); 
var foundTestCSRSubstr = foundTestCSR.substring(0,3);
if(foundTestCSRSubstr == ""CSR"")
{
	
	var EmpBC:BusComp = sApp.GetBusObject(""Employee"").GetBusComp(""Employee"");
	with(EmpBC)
	{
		ActivateField(""STC Department"");
		ActivateField(""First Name"");
		ActivateField(""Last Name"");
		SetViewMode(AllView);
		ClearToQuery();
		SetSearchSpec(""Login Name"",CurrentLogin);
		ExecuteQuery();
		var EmpRec = FirstRecord();
		if(EmpRec)
		{
			FName = GetFieldValue(""First Name"");
			LName = GetFieldValue(""Last Name"");
			Dept = GetFieldValue(""STC Department"");
		}
		LoginName = LName+"" ""+FName;
		with(this)
		{
		SetFieldValue(""STC Line Category"",TestLine);
		SetFieldValue(""STC Test Line Dept"",Dept);
		SetFieldValue(""STC Test Line Reqstr Name"", LoginName);
		SetFieldValue(""STC Test Line Purpose"", Purpose);
		SetFieldValue(""STC Invoice Exclusiion Flag"", ""Y"");
		}//end of with(this)
	}
	
}


}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	switch(FieldName)
	{
		case ""STC Billing Acc Segment"":
		{
			var BillAccId = this.GetFieldValue(""Id"");
			var vCreditLmt = """";
			var vCreditScoreFlg = """";
			var vBillValidationBS = TheApplication().GetService(""STC Billing Account Validation BS"");
			var InpPS = TheApplication().NewPropertySet();
			var OutPS = TheApplication().NewPropertySet();
			InpPS.SetProperty(""BillAccId"", BillAccId);
			InpPS.SetProperty(""FieldName"", FieldName);
			InpPS.SetProperty(""FieldValue"", FieldValue);
			vBillValidationBS.InvokeMethod(""FieldValidations"",InpPS,OutPS);
			vCreditScoreFlg = OutPS.GetProperty(""vCreditScoreChange"");
			var vBillSegmentRelative = OutPS.GetProperty(""vBillSegmentRelative"");
			
			if(vCreditScoreFlg == ""Y"")
			{
						if ( vBillSegmentRelative == ""Y""){
				this.ActivateField(""STC Contract Category"");
				SetFieldValue(""STC Contract Category"",""Employee Relative"");
			
			}
			vCreditLmt = OutPS.GetProperty(""CreditLimit"");
			this.ActivateField(""Credit Score"");
			this.SetFieldValue(""Credit Score"", vCreditLmt);
			this.WriteRecord();
			}
		}
		break;
		
		case ""STC Split Billing Flag"":
		{
			if(FieldValue != ""Y"")
			{
				var sSplitSvcTyp = GetFieldValue(""STC Split Bill Service Type"");
				var sSplitEmpName = GetFieldValue(""STC Split Employee Name"");
				var sSplitOcpTyp = GetFieldValue(""STC Split Occupation Type"");
				var sSplitCPR = GetFieldValue(""STC Split Employee CPR"");
				if(sSplitSvcTyp != """" && sSplitSvcTyp != null)
				{
					this.SetFieldValue(""STC Split Bill Service Type"", """");
				}
				if(sSplitEmpName != """" && sSplitEmpName != null)
				{
					this.SetFieldValue(""STC Split Employee Name"", """");
				}
				if(sSplitOcpTyp != """" && sSplitOcpTyp != null)
				{
					this.SetFieldValue(""STC Split Occupation Type"", """");
				}
				if(sSplitCPR != """" && sSplitCPR != null)
				{
					this.SetFieldValue(""STC Split Employee CPR"", """");
				}
			}
		}
		break;
		
		case ""STC Split Employee CPR"":
		{	
			var SIDNew, SIDNewext;
			if(FieldValue != """" && FieldValue != null)
			{
				if(FieldValue.length>9)
				{
					TheApplication().RaiseErrorText(TheApplication().LookupMessage(""User Defined Errors"", ""AM0063""));
				}
				else if(FieldValue.length<9)
				{
					TheApplication().RaiseErrorText(TheApplication().LookupMessage(""User Defined Errors"", ""AM0063""));	
				}
				else if(FieldValue.length==""9"")
				{
					var sID0 = FieldValue.charAt(0);//a  
					var sID1 = FieldValue.charAt(1); //b
					var sID2 = FieldValue.charAt(2); //c            
					var sID3 = FieldValue.charAt(3);//d
					var sID4 = FieldValue.charAt(4);//e
					var sID5 = FieldValue.charAt(5);//f
					var sID6 = FieldValue.charAt(6);//g
					var sID7 = FieldValue.charAt(7);//h
					
					var sID8 = FieldValue.charAt(8);  //i                   
					var Valid =((sID7*2+sID6*3+sID5*4+sID4*5+sID3*6+sID2*7+sID1*8+sID0*9)%11);
					var Valid1=(11-Valid);
					
					if(Valid == ""0""|| Valid == ""1"")
					{
						SIDNew = ""0"";
					}
					else
					{
						SIDNewext = Valid1;
					}
					if(SIDNew != sID8)
					{
						if(SIDNewext != sID8)
						{
							TheApplication().RaiseErrorText(TheApplication().LookupMessage(""User Defined Errors"", ""AM0062""));
						}
					}//end of if(SIDNew != sID8)
				}//end of else if(FieldValue.length==""9"")
			}//end of if(FieldValue != """" && FieldValue != null)
		}
		break;
		
		default :
         		break;
	}//end switch
	
	return (ContinueOperation);
}
"//GJENA_22Dec12 added to Set the Risk Level 

function BusComp_WriteRecord ()
{
try
{
 var BillAccId = this.GetFieldValue(""Id"");
 this.ActivateField(""STC Risk Level"");
 this.ActivateField(""Occupation"");
 var vOccupation = this.GetFieldValue(""Occupation"");
	
  var STCCreditLimitBO = TheApplication().GetBusObject(""STC Credit Limit"");
  var STCCreditLimitBC = STCCreditLimitBO.GetBusComp(""STC Credit Limit"");
  with(STCCreditLimitBC)
    {
  ActivateField(""Current Occupation"");
  ActivateField(""Risk Level"");
  SetViewMode(AllView);
  ClearToQuery();
  var searchstr = ""[Current Occupation] = '"" + vOccupation + ""' AND [Customer Class] = 'Bahraini'"";
  SetSearchExpr(searchstr);
  ExecuteQuery(ForwardOnly);
    
    if (FirstRecord())
    {
    
    var vRiskLevel = GetFieldValue(""Risk Level"");
     }//end if
		
	}//end with
	this.SetFieldValue(""STC Risk Level"",vRiskLevel);
	this.WriteRecord();
	//}
	}
	
	catch(e)
	{
	throw(e);
	}
	
	finally
	{
	STCCreditLimitBC=null;
	STCCreditLimitBO=null;
	
	}
}
function BusComp_NewRecord ()
{
var sApp = TheApplication();
var CurrentLogin = sApp.LoginName();
var FName,LName,Dept,LoginName;
var foundTestCSR = sApp.InvokeMethod(""LookupValue"",""STC_TEST_PROV"",CurrentLogin);
var Purpose = sApp.InvokeMethod(""LookupValue"",""STC_ADMIN"",""TESTLINEPURPOSE"");
var foundTestCSRSubstr = foundTestCSR.substring(0,3);
if(foundTestCSRSubstr == ""CSR"")
{
	
	var EmpBC:BusComp = sApp.GetBusObject(""Employee"").GetBusComp(""Employee"");
	with(EmpBC)
	{
		ActivateField(""STC Department"");
		ActivateField(""First Name"");
		ActivateField(""Last Name"");
		SetViewMode(AllView);
		ClearToQuery();
		SetSearchSpec(""Login Name"",CurrentLogin);
		ExecuteQuery();
		var EmpRec = FirstRecord();
		if(EmpRec)
		{
			FName = GetFieldValue(""First Name"");
			LName = GetFieldValue(""Last Name"");
			Dept = GetFieldValue(""STC Department"");
		}
		LoginName = LName+"" ""+FName;
		with(this)
		{
		SetFieldValue(""STC Line Category"",""Test Line"");
		SetFieldValue(""STC Test Line Dept"",Dept);
		SetFieldValue(""STC Test Line Reqstr Name"", LoginName);
		SetFieldValue(""STC Test Line Purpose"", Purpose);
		SetFieldValue(""STC Invoice Exclusiion Flag"", ""Y"");
	
		
		}//end of with(this)
	}
	
}


}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	switch(FieldName)
	{
		case ""STC Billing Acc Segment"":
		{
			var BillAccId = this.GetFieldValue(""Id"");
			var vCreditLmt = """";
			var vCreditScoreFlg = """";
			var vBillValidationBS = TheApplication().GetService(""STC Billing Account Validation BS"");
			var InpPS = TheApplication().NewPropertySet();
			var OutPS = TheApplication().NewPropertySet();
			InpPS.SetProperty(""BillAccId"", BillAccId);
			InpPS.SetProperty(""FieldName"", FieldName);
			InpPS.SetProperty(""FieldValue"", FieldValue);
			vBillValidationBS.InvokeMethod(""FieldValidations"",InpPS,OutPS);
			vCreditScoreFlg = OutPS.GetProperty(""vCreditScoreChange"");
			if(vCreditScoreFlg == ""Y"")
			{
			vCreditLmt = OutPS.GetProperty(""CreditLimit"");
			this.ActivateField(""Credit Score"");
			this.SetFieldValue(""Credit Score"", vCreditLmt);
			this.WriteRecord();
			}
		}
		break;
		
		default :
         		break;
	}//end switch
	
	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{
try
{
 var BillAccId = this.GetFieldValue(""Id"");
 this.ActivateField(""STC Risk Level"");
 this.ActivateField(""Occupation"");
 var vOccupation = this.GetFieldValue(""Occupation"");
	
  var STCCreditLimitBO = TheApplication().GetBusObject(""STC Credit Limit"");
  var STCCreditLimitBC = STCCreditLimitBO.GetBusComp(""STC Credit Limit"");
  with(STCCreditLimitBC)
    {
  ActivateField(""Current Occupation"");
  ActivateField(""Risk Level"");
  SetViewMode(AllView);
  ClearToQuery();
  var searchstr = ""[Current Occupation] = '"" + vOccupation + ""' AND [Customer Class] = 'Bahraini'"";
  SetSearchExpr(searchstr);
  ExecuteQuery(ForwardOnly);
    
    if (FirstRecord())
    {
    
    var vRiskLevel = GetFieldValue(""Risk Level"");
     }//end if
		
	}//end with
	this.SetFieldValue(""STC Risk Level"",vRiskLevel);
	this.WriteRecord();
	//}
	}
	
	catch(e)
	{
	throw(e);
	}
	
	finally
	{
	STCCreditLimitBC=null;
	STCCreditLimitBO=null;
	
	}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
/*	switch(FieldName)
	{
		case ""STC Billing Acc Segment"":
		{
			var BillAccId = this.GetFieldValue(""Id"");
			var vCreditLmt = """";
			var vCreditScoreFlg = """";
			var vBillValidationBS = TheApplication().GetService(""STC Billing Account Validation BS"");
			var InpPS = TheApplication().NewPropertySet();
			var OutPS = TheApplication().NewPropertySet();
			InpPS.SetProperty(""BillAccId"", BillAccId);
			InpPS.SetProperty(""FieldName"", FieldName);
			InpPS.SetProperty(""FieldValue"", FieldValue);
			vBillValidationBS.InvokeMethod(""FieldValidations"",InpPS,OutPS);
			vCreditScoreFlg = OutPS.GetProperty(""vCreditScoreChange"");
			if(vCreditScoreFlg == ""Y"")
			{
			vCreditLmt = OutPS.GetProperty(""CreditLimit"");
			this.ActivateField(""Credit Score"");
			this.SetFieldValue(""Credit Score"", vCreditLmt);
			this.WriteRecord();
			}
		}
		break;
		
		default :
         		break;
	}//end switch
	
	return (ContinueOperation);*/
}
var strIsBS = false;
function BusComp_ChangeRecord ()
{
	TheApplication().SetProfileAttr(""STCCustometTypeConHistory"",this.GetFieldValue(""STC Customer Type""));
}
function BusComp_NewRecord ()
{
//	strIsBS = true;
}
function BusComp_NewRecord ()
{
//	strIsBS = true;
}
function BusComp_PreQuery ()
{
	var SearchStr;
	var AccType;
	try{
			AccType=TheApplication().GetProfileAttr(""STCAccountTypeServAcc"");
			if(AccType != null && AccType != """")
			{	
				SearchStr=this.GetSearchExpr();
				if (SearchStr == null || SearchStr == """")
					SearchStr = ""[Type]='"" + AccType + ""'"";
				else	
					SearchStr = SearchStr + "" AND [Type]='"" + AccType + ""'"";			
				this.SetSearchExpr(SearchStr);	
				// The profile Attribute is set to blank so that the searches on Sunscription data work as reqd.
				TheApplication().SetProfileAttr(""STCAccountTypeServAcc"","""");
			}	
			return (ContinueOperation);	
	}
	catch(e)
	{	
		throw(e);
	}	
}
"/*20-12-2010 For Migration Validation*/
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{/*
	var billId = null;
	var parBillId = null;
	var ppBillId = null;
	var serviceId = null;
	var msisdn;
	var appObj;
	var appBO;
	var appBC;
	var name;
	var status;
	var parentBC;
	var childBillBC;
	var MigType;
	try
	{
	
	 switch(FieldName)
	 {
	  case ""STC Postpaid Cust MSISDN"":
	  	
	  	msisdn = this.GetFieldValue(""STC Postpaid Cust MSISDN"");
		appObj = TheApplication();
		appBO = appObj.GetBusObject(""STC Billing Account"");
		appBC = appBO.GetBusComp(""CUT Service Sub Accounts"");
		childBillBC = appBO.GetBusComp(""STC Child Billing Accounts"");
		parentBC = this.ParentBusComp();
		
		
		
		with(appBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Parent Account Id"");
			SetSearchSpec(""DUNS Number"", msisdn);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				serviceId = GetFieldValue(""Id"");
				billId = GetFieldValue(""Parent Account Id"");
			}
			
		}
		
		
		with(parentBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Account Status"");
			SetSearchSpec(""Id"", billId);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				parBillId = GetFieldValue(""Parent Account Id"");
			}	
		}
		
		with(parentBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Account Status"");
			SetSearchSpec(""Id"", parBillId);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				ppBillId = GetFieldValue(""Parent Account Id"");
				status = GetFieldValue(""Account Status"");
			}	
		}
		
		this.SetFieldValue(""STC Stores BillId"", ppBillId);
		var billd = this.GetFieldValue(""STC Stores BillId"");
		WriteRecord();
		
		break;
		
		//Added by SushantE 20 Dec 2010 for Migration Validation

		
		default :
			break;
	  
	  }
			return (ContinueOperation);
			
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{}*/
	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{/*try
{
    if(strIsBS == true)
	{
		var strAccntId = this.GetFieldValue(""Id"");            
		var IsRecord1;
		var strConPriAddrId;
		var strContactId;
		var objCurrBO = TheApplication().ActiveBusObject();
		if (objCurrBO == ""STC Service Account"") // || objCurrBO == ""Service Request"")
		{
			strConPriAddrId = this.GetFieldValue(""Primary Address Id"");
			strContactId = this.GetFieldValue(""Primary Contact Id"");
		}
		else
		{
			strConPriAddrId = this.ParentBusComp().GetFieldValue(""Primary Address Id"");
			strContactId = this.ParentBusComp().GetFieldValue(""Primary Contact Id"");
		}

		var objAddMVGBC = GetMVGBusComp(""Street Address"").GetAssocBusComp();
		with(objAddMVGBC)
		{
			SetViewMode(AllView);
			ActivateField(""Row Id"");
			ActivateField(""Address Type"");
			ClearToQuery();
			SetSearchSpec(""Row Id"",strConPriAddrId);
			ExecuteQuery(ForwardOnly);
			IsRecord1 = FirstRecord();                                                                             
			if(IsRecord1)
			{
				try
				{
					Associate(NewAfter);
					WriteRecord();
				}
				catch (e)
				{
					null;
				}
			}
		}
//		var BOContact = TheApplication().GetBusObject(""Contact"");
//		var BCContact = BOContact.GetBusComp(""Contact"");		
		var objConMVGBC = GetMVGBusComp(""Primary Contact Last Name"").GetAssocBusComp();
		with(objConMVGBC)
		{
			SetViewMode(AllView);
			ActivateField(""Row Id"");
			ActivateField(""Parent Account Id"");
			ActivateField(""Account Id"");
			ClearToQuery();
			SetSearchSpec(""Row Id"",strContactId);
			ExecuteQuery(ForwardOnly);
			IsRecord1 = FirstRecord();                                                                             
			if(IsRecord1)
			{
				try
				{
					Associate(NewAfter);
					WriteRecord();
				}
				catch (e)
				{
					null;
				}                                                              
			}
		}
	this.SetFieldValue(""Primary Address Id"",strConPriAddrId);		
	this.SetFieldValue(""Primary Contact Id"",strContactId);
	WriteRecord();
	}
}
catch(e)
{
/*	var vErr = e.toString();
	var vErrCode = e.errCode;
	var vObjName = ""CUT Invoice Sub Accounts"";
	var vFunc = ""BusComp_WriteRecord"";
	var vObjType = ""Business Component"";
	var RowId = this.GetFieldValue(""Id"");
                                                                
	logexception(vErr,vErrCode,RowId,vObjName,vFunc,vObjType);
	throw(e);
}
finally
{
}
return (ContinueOperation);*/

}
function BusComp_WriteRecord ()
{/*try
{
    if(strIsBS == true)
	{
		var strAccntId = this.GetFieldValue(""Id"");            
		var IsRecord1;
		var strConPriAddrId;
		var strContactId;
		var objCurrBO = TheApplication().ActiveBusObject();
		if (objCurrBO == ""STC Service Account"") // || objCurrBO == ""Service Request"")
		{
			strConPriAddrId = this.GetFieldValue(""Primary Address Id"");
			strContactId = this.GetFieldValue(""Primary Contact Id"");
		}
		else
		{
			strConPriAddrId = this.ParentBusComp().GetFieldValue(""Primary Address Id"");
			strContactId = this.ParentBusComp().GetFieldValue(""Primary Contact Id"");
		}

		var objAddMVGBC = GetMVGBusComp(""Street Address"").GetAssocBusComp();
		with(objAddMVGBC)
		{
			SetViewMode(AllView);
			ActivateField(""Row Id"");
			ActivateField(""Address Type"");
			ClearToQuery();
			SetSearchSpec(""Row Id"",strConPriAddrId);
			ExecuteQuery(ForwardOnly);
			IsRecord1 = FirstRecord();                                                                             
			if(IsRecord1)
			{
				try
				{
					Associate(NewAfter);
					WriteRecord();
				}
				catch (e)
				{
					null;
				}
			}
		}
//		var BOContact = TheApplication().GetBusObject(""Contact"");
//		var BCContact = BOContact.GetBusComp(""Contact"");		
		var objConMVGBC = GetMVGBusComp(""Primary Contact Last Name"").GetAssocBusComp();
		with(objConMVGBC)
		{
			SetViewMode(AllView);
			ActivateField(""Row Id"");
			ActivateField(""Parent Account Id"");
			ActivateField(""Account Id"");
			ClearToQuery();
			SetSearchSpec(""Row Id"",strContactId);
			ExecuteQuery(ForwardOnly);
			IsRecord1 = FirstRecord();                                                                             
			if(IsRecord1)
			{
				try
				{
					Associate(NewAfter);
					WriteRecord();
				}
				catch (e)
				{
					null;
				}                                                              
			}
		}
	this.SetFieldValue(""Primary Address Id"",strConPriAddrId);		
	this.SetFieldValue(""Primary Contact Id"",strContactId);
	WriteRecord();
	}
}
catch(e)
{
/*	var vErr = e.toString();
	var vErrCode = e.errCode;
	var vObjName = ""CUT Invoice Sub Accounts"";
	var vFunc = ""BusComp_WriteRecord"";
	var vObjType = ""Business Component"";
	var RowId = this.GetFieldValue(""Id"");
                                                                
	logexception(vErr,vErrCode,RowId,vObjName,vFunc,vObjType);
	throw(e);
}
finally
{
}
return (ContinueOperation);*/

}
var strIsBS = false;
function BusComp_NewRecord ()
{
//	strIsBS = true;
}
"/*20-12-2010 For Migration Validation*/
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{/*
	var billId = null;
	var parBillId = null;
	var ppBillId = null;
	var serviceId = null;
	var msisdn;
	var appObj;
	var appBO;
	var appBC;
	var name;
	var status;
	var parentBC;
	var childBillBC;
	var MigType;
	try
	{
	
	 switch(FieldName)
	 {
	  case ""STC Postpaid Cust MSISDN"":
	  	
	  	msisdn = this.GetFieldValue(""STC Postpaid Cust MSISDN"");
		appObj = TheApplication();
		appBO = appObj.GetBusObject(""STC Billing Account"");
		appBC = appBO.GetBusComp(""CUT Service Sub Accounts"");
		childBillBC = appBO.GetBusComp(""STC Child Billing Accounts"");
		parentBC = this.ParentBusComp();
		
		
		
		with(appBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Parent Account Id"");
			SetSearchSpec(""DUNS Number"", msisdn);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				serviceId = GetFieldValue(""Id"");
				billId = GetFieldValue(""Parent Account Id"");
			}
			
		}
		
		
		with(parentBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Account Status"");
			SetSearchSpec(""Id"", billId);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				parBillId = GetFieldValue(""Parent Account Id"");
			}	
		}
		
		with(parentBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Account Status"");
			SetSearchSpec(""Id"", parBillId);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				ppBillId = GetFieldValue(""Parent Account Id"");
				status = GetFieldValue(""Account Status"");
			}	
		}
		
		this.SetFieldValue(""STC Stores BillId"", ppBillId);
		var billd = this.GetFieldValue(""STC Stores BillId"");
		WriteRecord();
		
		break;
		
		//Added by SushantE 20 Dec 2010 for Migration Validation

		
		default :
			break;
	  
	  }
			return (ContinueOperation);
			
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{}*/
	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{/*try
{
    if(strIsBS == true)
	{
		var strAccntId = this.GetFieldValue(""Id"");            
		var IsRecord1;
		var strConPriAddrId;
		var strContactId;
		var objCurrBO = TheApplication().ActiveBusObject();
		if (objCurrBO == ""STC Service Account"") // || objCurrBO == ""Service Request"")
		{
			strConPriAddrId = this.GetFieldValue(""Primary Address Id"");
			strContactId = this.GetFieldValue(""Primary Contact Id"");
		}
		else
		{
			strConPriAddrId = this.ParentBusComp().GetFieldValue(""Primary Address Id"");
			strContactId = this.ParentBusComp().GetFieldValue(""Primary Contact Id"");
		}

		var objAddMVGBC = GetMVGBusComp(""Street Address"").GetAssocBusComp();
		with(objAddMVGBC)
		{
			SetViewMode(AllView);
			ActivateField(""Row Id"");
			ActivateField(""Address Type"");
			ClearToQuery();
			SetSearchSpec(""Row Id"",strConPriAddrId);
			ExecuteQuery(ForwardOnly);
			IsRecord1 = FirstRecord();                                                                             
			if(IsRecord1)
			{
				try
				{
					Associate(NewAfter);
					WriteRecord();
				}
				catch (e)
				{
					null;
				}
			}
		}
//		var BOContact = TheApplication().GetBusObject(""Contact"");
//		var BCContact = BOContact.GetBusComp(""Contact"");		
		var objConMVGBC = GetMVGBusComp(""Primary Contact Last Name"").GetAssocBusComp();
		with(objConMVGBC)
		{
			SetViewMode(AllView);
			ActivateField(""Row Id"");
			ActivateField(""Parent Account Id"");
			ActivateField(""Account Id"");
			ClearToQuery();
			SetSearchSpec(""Row Id"",strContactId);
			ExecuteQuery(ForwardOnly);
			IsRecord1 = FirstRecord();                                                                             
			if(IsRecord1)
			{
				try
				{
					Associate(NewAfter);
					WriteRecord();
				}
				catch (e)
				{
					null;
				}                                                              
			}
		}
	this.SetFieldValue(""Primary Address Id"",strConPriAddrId);		
	this.SetFieldValue(""Primary Contact Id"",strContactId);
	WriteRecord();
	}
}
catch(e)
{
/*	var vErr = e.toString();
	var vErrCode = e.errCode;
	var vObjName = ""CUT Invoice Sub Accounts"";
	var vFunc = ""BusComp_WriteRecord"";
	var vObjType = ""Business Component"";
	var RowId = this.GetFieldValue(""Id"");
                                                                
	logexception(vErr,vErrCode,RowId,vObjName,vFunc,vObjType);
	throw(e);
}
finally
{
}
return (ContinueOperation);*/

}
var strIsBS = false;
function BusComp_NewRecord ()
{
//	strIsBS = true;
}
function BusComp_PreQuery ()
{
	var SearchStr;
	var AccType;
	try{
			AccType=TheApplication().GetProfileAttr(""STCAccountTypeServAcc"");
			if(AccType != null && AccType != """")
			{	
				SearchStr=this.GetSearchExpr();
				if (SearchStr == null || SearchStr == """")
					SearchStr = ""[Type]='"" + AccType + ""'"";
				else	
					SearchStr = SearchStr + "" AND [Type]='"" + AccType + ""'"";			
				this.SetSearchExpr(SearchStr);	
				// The profile Attribute is set to blank so that the searches on Sunscription data work as reqd.
				TheApplication().SetProfileAttr(""STCAccountTypeServAcc"","""");
			}	
			return (ContinueOperation);	
	}
	catch(e)
	{	
		throw(e);
	}	
}
"/*20-12-2010 For Migration Validation*/
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{/*
	var billId = null;
	var parBillId = null;
	var ppBillId = null;
	var serviceId = null;
	var msisdn;
	var appObj;
	var appBO;
	var appBC;
	var name;
	var status;
	var parentBC;
	var childBillBC;
	var MigType;
	try
	{
	
	 switch(FieldName)
	 {
	  case ""STC Postpaid Cust MSISDN"":
	  	
	  	msisdn = this.GetFieldValue(""STC Postpaid Cust MSISDN"");
		appObj = TheApplication();
		appBO = appObj.GetBusObject(""STC Billing Account"");
		appBC = appBO.GetBusComp(""CUT Service Sub Accounts"");
		childBillBC = appBO.GetBusComp(""STC Child Billing Accounts"");
		parentBC = this.ParentBusComp();
		
		
		
		with(appBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Parent Account Id"");
			SetSearchSpec(""DUNS Number"", msisdn);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				serviceId = GetFieldValue(""Id"");
				billId = GetFieldValue(""Parent Account Id"");
			}
			
		}
		
		
		with(parentBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Account Status"");
			SetSearchSpec(""Id"", billId);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				parBillId = GetFieldValue(""Parent Account Id"");
			}	
		}
		
		with(parentBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Account Status"");
			SetSearchSpec(""Id"", parBillId);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				ppBillId = GetFieldValue(""Parent Account Id"");
				status = GetFieldValue(""Account Status"");
			}	
		}
		
		this.SetFieldValue(""STC Stores BillId"", ppBillId);
		var billd = this.GetFieldValue(""STC Stores BillId"");
		WriteRecord();
		
		break;
		
		//Added by SushantE 20 Dec 2010 for Migration Validation

		
		default :
			break;
	  
	  }
			return (ContinueOperation);
			
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{}*/
	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{/*try
{
    if(strIsBS == true)
	{
		var strAccntId = this.GetFieldValue(""Id"");            
		var IsRecord1;
		var strConPriAddrId;
		var strContactId;
		var objCurrBO = TheApplication().ActiveBusObject();
		if (objCurrBO == ""STC Service Account"") // || objCurrBO == ""Service Request"")
		{
			strConPriAddrId = this.GetFieldValue(""Primary Address Id"");
			strContactId = this.GetFieldValue(""Primary Contact Id"");
		}
		else
		{
			strConPriAddrId = this.ParentBusComp().GetFieldValue(""Primary Address Id"");
			strContactId = this.ParentBusComp().GetFieldValue(""Primary Contact Id"");
		}

		var objAddMVGBC = GetMVGBusComp(""Street Address"").GetAssocBusComp();
		with(objAddMVGBC)
		{
			SetViewMode(AllView);
			ActivateField(""Row Id"");
			ActivateField(""Address Type"");
			ClearToQuery();
			SetSearchSpec(""Row Id"",strConPriAddrId);
			ExecuteQuery(ForwardOnly);
			IsRecord1 = FirstRecord();                                                                             
			if(IsRecord1)
			{
				try
				{
					Associate(NewAfter);
					WriteRecord();
				}
				catch (e)
				{
					null;
				}
			}
		}
//		var BOContact = TheApplication().GetBusObject(""Contact"");
//		var BCContact = BOContact.GetBusComp(""Contact"");		
		var objConMVGBC = GetMVGBusComp(""Primary Contact Last Name"").GetAssocBusComp();
		with(objConMVGBC)
		{
			SetViewMode(AllView);
			ActivateField(""Row Id"");
			ActivateField(""Parent Account Id"");
			ActivateField(""Account Id"");
			ClearToQuery();
			SetSearchSpec(""Row Id"",strContactId);
			ExecuteQuery(ForwardOnly);
			IsRecord1 = FirstRecord();                                                                             
			if(IsRecord1)
			{
				try
				{
					Associate(NewAfter);
					WriteRecord();
				}
				catch (e)
				{
					null;
				}                                                              
			}
		}
	this.SetFieldValue(""Primary Address Id"",strConPriAddrId);		
	this.SetFieldValue(""Primary Contact Id"",strContactId);
	WriteRecord();
	}
}
catch(e)
{
/*	var vErr = e.toString();
	var vErrCode = e.errCode;
	var vObjName = ""CUT Invoice Sub Accounts"";
	var vFunc = ""BusComp_WriteRecord"";
	var vObjType = ""Business Component"";
	var RowId = this.GetFieldValue(""Id"");
                                                                
	logexception(vErr,vErrCode,RowId,vObjName,vFunc,vObjType);
	throw(e);
}
finally
{
}
return (ContinueOperation);*/

}
var strIsBS = false;
function BusComp_NewRecord ()
{
//	strIsBS = true;
}
function BusComp_PreQuery ()
{
	var SearchStr;
	var AccType;
	try{
			AccType=TheApplication().GetProfileAttr(""STCAccountTypeServAcc"");
			if(AccType != null && AccType != """")
			{	
				SearchStr=this.GetSearchExpr();
				if (SearchStr == null || SearchStr == """")
					SearchStr = ""[Type]='"" + AccType + ""'"";
				else	
					SearchStr = SearchStr + "" AND [Type]='"" + AccType + ""'"";			
				this.SetSearchExpr(SearchStr);	
				// The profile Attribute is set to blank so that the searches on Sunscription data work as reqd.
				TheApplication().SetProfileAttr(""STCAccountTypeServAcc"","""");
			}	
			return (ContinueOperation);	
	}
	catch(e)
	{	
		throw(e);
	}	
}
"/*20-12-2010 For Migration Validation*/
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{/*
	var billId = null;
	var parBillId = null;
	var ppBillId = null;
	var serviceId = null;
	var msisdn;
	var appObj;
	var appBO;
	var appBC;
	var name;
	var status;
	var parentBC;
	var childBillBC;
	var MigType;
	try
	{
	
	 switch(FieldName)
	 {
	  case ""STC Postpaid Cust MSISDN"":
	  	
	  	msisdn = this.GetFieldValue(""STC Postpaid Cust MSISDN"");
		appObj = TheApplication();
		appBO = appObj.GetBusObject(""STC Billing Account"");
		appBC = appBO.GetBusComp(""CUT Service Sub Accounts"");
		childBillBC = appBO.GetBusComp(""STC Child Billing Accounts"");
		parentBC = this.ParentBusComp();
		
		
		
		with(appBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Parent Account Id"");
			SetSearchSpec(""DUNS Number"", msisdn);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				serviceId = GetFieldValue(""Id"");
				billId = GetFieldValue(""Parent Account Id"");
			}
			
		}
		
		
		with(parentBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Account Status"");
			SetSearchSpec(""Id"", billId);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				parBillId = GetFieldValue(""Parent Account Id"");
			}	
		}
		
		with(parentBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Account Status"");
			SetSearchSpec(""Id"", parBillId);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				ppBillId = GetFieldValue(""Parent Account Id"");
				status = GetFieldValue(""Account Status"");
			}	
		}
		
		this.SetFieldValue(""STC Stores BillId"", ppBillId);
		var billd = this.GetFieldValue(""STC Stores BillId"");
		WriteRecord();
		
		break;
		
		//Added by SushantE 20 Dec 2010 for Migration Validation

		
		default :
			break;
	  
	  }
			return (ContinueOperation);
			
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{}*/
	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{/*try
{
    if(strIsBS == true)
	{
		var strAccntId = this.GetFieldValue(""Id"");            
		var IsRecord1;
		var strConPriAddrId;
		var strContactId;
		var objCurrBO = TheApplication().ActiveBusObject();
		if (objCurrBO == ""STC Service Account"") // || objCurrBO == ""Service Request"")
		{
			strConPriAddrId = this.GetFieldValue(""Primary Address Id"");
			strContactId = this.GetFieldValue(""Primary Contact Id"");
		}
		else
		{
			strConPriAddrId = this.ParentBusComp().GetFieldValue(""Primary Address Id"");
			strContactId = this.ParentBusComp().GetFieldValue(""Primary Contact Id"");
		}

		var objAddMVGBC = GetMVGBusComp(""Street Address"").GetAssocBusComp();
		with(objAddMVGBC)
		{
			SetViewMode(AllView);
			ActivateField(""Row Id"");
			ActivateField(""Address Type"");
			ClearToQuery();
			SetSearchSpec(""Row Id"",strConPriAddrId);
			ExecuteQuery(ForwardOnly);
			IsRecord1 = FirstRecord();                                                                             
			if(IsRecord1)
			{
				try
				{
					Associate(NewAfter);
					WriteRecord();
				}
				catch (e)
				{
					null;
				}
			}
		}
//		var BOContact = TheApplication().GetBusObject(""Contact"");
//		var BCContact = BOContact.GetBusComp(""Contact"");		
		var objConMVGBC = GetMVGBusComp(""Primary Contact Last Name"").GetAssocBusComp();
		with(objConMVGBC)
		{
			SetViewMode(AllView);
			ActivateField(""Row Id"");
			ActivateField(""Parent Account Id"");
			ActivateField(""Account Id"");
			ClearToQuery();
			SetSearchSpec(""Row Id"",strContactId);
			ExecuteQuery(ForwardOnly);
			IsRecord1 = FirstRecord();                                                                             
			if(IsRecord1)
			{
				try
				{
					Associate(NewAfter);
					WriteRecord();
				}
				catch (e)
				{
					null;
				}                                                              
			}
		}
	this.SetFieldValue(""Primary Address Id"",strConPriAddrId);		
	this.SetFieldValue(""Primary Contact Id"",strContactId);
	WriteRecord();
	}
}
catch(e)
{
/*	var vErr = e.toString();
	var vErrCode = e.errCode;
	var vObjName = ""CUT Invoice Sub Accounts"";
	var vFunc = ""BusComp_WriteRecord"";
	var vObjType = ""Business Component"";
	var RowId = this.GetFieldValue(""Id"");
                                                                
	logexception(vErr,vErrCode,RowId,vObjName,vFunc,vObjType);
	throw(e);
}
finally
{
}
return (ContinueOperation);*/

}
var strIsBS = false;
function BusComp_NewRecord ()
{
//	strIsBS = true;
}
function BusComp_PreQuery ()
{
	var SearchStr;
	var AccType;
	try{
			AccType=TheApplication().GetProfileAttr(""STCAccountTypeServAcc"");
			if(AccType != null && AccType != """")
			{	
				SearchStr=this.GetSearchExpr();
				if (SearchStr == null || SearchStr == """")
					SearchStr = ""[Type]='"" + AccType + ""'"";
				else	
					SearchStr = SearchStr + "" AND [Type]='"" + AccType + ""'"";			
				this.SetSearchExpr(SearchStr);	
				// The profile Attribute is set to blank so that the searches on Sunscription data work as reqd.
				TheApplication().SetProfileAttr(""STCAccountTypeServAcc"","""");
			}	
			return (ContinueOperation);	
	}
	catch(e)
	{	
		throw(e);
	}	
}
"/*20-12-2010 For Migration Validation*/
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{/*
	var billId = null;
	var parBillId = null;
	var ppBillId = null;
	var serviceId = null;
	var msisdn;
	var appObj;
	var appBO;
	var appBC;
	var name;
	var status;
	var parentBC;
	var childBillBC;
	var MigType;
	try
	{
	
	 switch(FieldName)
	 {
	  case ""STC Postpaid Cust MSISDN"":
	  	
	  	msisdn = this.GetFieldValue(""STC Postpaid Cust MSISDN"");
		appObj = TheApplication();
		appBO = appObj.GetBusObject(""STC Billing Account"");
		appBC = appBO.GetBusComp(""CUT Service Sub Accounts"");
		childBillBC = appBO.GetBusComp(""STC Child Billing Accounts"");
		parentBC = this.ParentBusComp();
		
		
		
		with(appBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Parent Account Id"");
			SetSearchSpec(""DUNS Number"", msisdn);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				serviceId = GetFieldValue(""Id"");
				billId = GetFieldValue(""Parent Account Id"");
			}
			
		}
		
		
		with(parentBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Account Status"");
			SetSearchSpec(""Id"", billId);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				parBillId = GetFieldValue(""Parent Account Id"");
			}	
		}
		
		with(parentBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Account Status"");
			SetSearchSpec(""Id"", parBillId);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				ppBillId = GetFieldValue(""Parent Account Id"");
				status = GetFieldValue(""Account Status"");
			}	
		}
		
		this.SetFieldValue(""STC Stores BillId"", ppBillId);
		var billd = this.GetFieldValue(""STC Stores BillId"");
		WriteRecord();
		
		break;
		
		//Added by SushantE 20 Dec 2010 for Migration Validation

		
		default :
			break;
	  
	  }
			return (ContinueOperation);
			
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{}*/
	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{/*try
{
    if(strIsBS == true)
	{
		var strAccntId = this.GetFieldValue(""Id"");            
		var IsRecord1;
		var strConPriAddrId;
		var strContactId;
		var objCurrBO = TheApplication().ActiveBusObject();
		if (objCurrBO == ""STC Service Account"") // || objCurrBO == ""Service Request"")
		{
			strConPriAddrId = this.GetFieldValue(""Primary Address Id"");
			strContactId = this.GetFieldValue(""Primary Contact Id"");
		}
		else
		{
			strConPriAddrId = this.ParentBusComp().GetFieldValue(""Primary Address Id"");
			strContactId = this.ParentBusComp().GetFieldValue(""Primary Contact Id"");
		}

		var objAddMVGBC = GetMVGBusComp(""Street Address"").GetAssocBusComp();
		with(objAddMVGBC)
		{
			SetViewMode(AllView);
			ActivateField(""Row Id"");
			ActivateField(""Address Type"");
			ClearToQuery();
			SetSearchSpec(""Row Id"",strConPriAddrId);
			ExecuteQuery(ForwardOnly);
			IsRecord1 = FirstRecord();                                                                             
			if(IsRecord1)
			{
				try
				{
					Associate(NewAfter);
					WriteRecord();
				}
				catch (e)
				{
					null;
				}
			}
		}
//		var BOContact = TheApplication().GetBusObject(""Contact"");
//		var BCContact = BOContact.GetBusComp(""Contact"");		
		var objConMVGBC = GetMVGBusComp(""Primary Contact Last Name"").GetAssocBusComp();
		with(objConMVGBC)
		{
			SetViewMode(AllView);
			ActivateField(""Row Id"");
			ActivateField(""Parent Account Id"");
			ActivateField(""Account Id"");
			ClearToQuery();
			SetSearchSpec(""Row Id"",strContactId);
			ExecuteQuery(ForwardOnly);
			IsRecord1 = FirstRecord();                                                                             
			if(IsRecord1)
			{
				try
				{
					Associate(NewAfter);
					WriteRecord();
				}
				catch (e)
				{
					null;
				}                                                              
			}
		}
	this.SetFieldValue(""Primary Address Id"",strConPriAddrId);		
	this.SetFieldValue(""Primary Contact Id"",strContactId);
	WriteRecord();
	}
}
catch(e)
{
/*	var vErr = e.toString();
	var vErrCode = e.errCode;
	var vObjName = ""CUT Invoice Sub Accounts"";
	var vFunc = ""BusComp_WriteRecord"";
	var vObjType = ""Business Component"";
	var RowId = this.GetFieldValue(""Id"");
                                                                
	logexception(vErr,vErrCode,RowId,vObjName,vFunc,vObjType);
	throw(e);
}
finally
{
}
return (ContinueOperation);*/

}
function BusComp_PreInvokeMethod (MethodName)
{
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{


	/*if(FieldName == ""Approval Status"")
    {
            var ApprStatus = this.GetFieldValue(""Approval Status"");
            var vId = this.GetFieldValue(""Id"");
            var vName = this.GetFieldValue(""Name"");
            var sId = TheApplication().LoginId();

            if(ApprStatus == ""Submitted"")
            { 
				var svc1 = TheApplication().GetService(""Campaign Approval Process"");
				var Input = TheApplication().NewPropertySet();
				var Output = TheApplication().NewPropertySet();
				Input.SetProperty(""CampaignId"",vId); // Input Agruments
				Input.SetProperty(""CampaignName"",vName); // Input Agruments
				Input.SetProperty(""LoginId"",sId); // Input Agruments
				svc1.InvokeMethod(""Approval"", Input, Output);  
            }

            return(CancelOperation);
     }*/

                                   
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	if(FieldName == ""Status"")
	{
		if(FieldValue == ""Bounced"")
		{
			var ContactId;
			var ProspectId = this.GetFieldValue(""Prospect Id"");
			var sApp:Application = TheApplication();
			var vBCMarketingProspect = sApp.GetBusObject(""Marketing Prospect"").GetBusComp(""Marketing Prospect"");
			var vBCContact = sApp.GetBusObject(""Contact"").GetBusComp(""Contact"");			
				with(vBCMarketingProspect)
					{
					SetViewMode(3);
					ActivateField(""Prospect Id"");
					ActivateField(""STC Contact Id"");
					ClearToQuery();
					SetSearchSpec(""Id"",ProspectId);
					ExecuteQuery(ForwardOnly);
					var ProspRec = FirstRecord();
					if(ProspRec)
					{
						ContactId = GetFieldValue(""STC Contact Id"");
					}		
				}//with(vBCMarketingProspect)
			if(ContactId != """" && ContactId != '' && ContactId != null)
			{
				with(vBCContact)
				{
					SetViewMode(3);
					ActivateField(""STC Email Verification Status"");
					ClearToQuery();
					SetSearchSpec(""Id"",ContactId);
					ExecuteQuery(ForwardOnly);
					var ContactRec = FirstRecord();
					if(ContactRec)
					{
						SetFieldValue(""STC Email Verification Status"",""Invalid"");
						WriteRecord();
					}	
				
				}//	with(vBCContact)
			}//if(ContactId != """" && ContactId != '' && ContactId != null)
						
			
		}//if(FieldValue == ""Bounced"")
	}//if(FieldName == ""Status"")
	
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{

}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_CopyRecord ()
{

}
function BusComp_DeleteRecord ()
{

}
function BusComp_InvokeMethod (MethodName)
{

}
function BusComp_NewRecord ()
{

   var val = TheApplication().InvokeMethod(""LookupValue"", ""REMOTE_NODE_TYPE"", ""Siebel Mobile"");
   if (TheApplication().ActiveViewName() == ""Remote Client List"")
   {
      val = TheApplication().InvokeMethod(""LookupValue"", ""REMOTE_NODE_TYPE"", ""Siebel Remote"");
	  this.SetFieldValue (""Mobile Client Type"",val);
   }
   else if (TheApplication().ActiveViewName() == ""Mobile Client List"")
   {
      val = TheApplication().InvokeMethod(""LookupValue"", ""REMOTE_NODE_TYPE"", ""Siebel Mobile"");
	  this.SetFieldValue (""Mobile Client Type"",val);
   }

}
function BusComp_PreAssociate ()
{
	return (ContinueOperation);
}
function BusComp_PreCopyRecord ()
{
	return (ContinueOperation);
}
function BusComp_PreDeleteRecord ()
{
	return (ContinueOperation);
}
function BusComp_PreGetFieldValue (FieldName, &FieldValue)
{
	return (ContinueOperation);
}
function BusComp_PreInvokeMethod (MethodName)
{
	return (ContinueOperation);
}
function BusComp_PreNewRecord ()
{
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{

}
function BusComp_PreWriteRecord ()
{
	this.ActivateField(""Email Bill To"");
	var sEmailAddrs = this.GetFieldValue(""Email Bill To"");
	if(sEmailAddrs == ""NA"" || sEmailAddrs == ""na""){
		this.SetFieldValue(""Email Bill To"","""");
		//this.WriteRecord();
	}
	return (ContinueOperation);
}
var sNewRecord = "N";//Mayank: Added for Lead To Cashe
function BusComp_NewRecord ()
{
 try
 {
    var appObj = TheApplication();
    var oParentBusObj = this.BusObject();
    var oParentBusComp;
    var oAssocBusComp;
    var strParentBusObj = oParentBusObj.Name();
    var strAccountId;
	sNewRecord = ""Y"";
	var sView = appObj.GetProfileAttr(""ActiveViewName"");
	if(sView == ""Lead Details View"")
	{
		var sCPR = """",sEmail = """",sFirstName = """",sLastName = """",sPhone = """";
		var sLeadId = TheApplication().GetProfileAttr(""LEADID"");
		var sLeadBC = TheApplication().GetBusObject(""Lead"").GetBusComp(""Lead"");
		with(sLeadBC)
		{
			ActivateField(""STC Lead CPR"");
			ActivateField(""STC Lead Email"");
			ActivateField(""STC Lead First Name"");
			ActivateField(""STC Lead Last Name"");
			ActivateField(""STC Lead Phone Number"");
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(""Id"",sLeadId);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				sCPR = GetFieldValue(""STC Lead CPR"");
				sEmail = GetFieldValue(""STC Lead Email"");
				sFirstName = GetFieldValue(""STC Lead First Name"");
				sLastName = GetFieldValue(""STC Lead Last Name"");
				sPhone = GetFieldValue(""STC Lead Phone Number"");
			}
		}
		this.ActivateField(""STC ID #"");
		this.SetFieldValue(""STC ID #"", sCPR);
		this.ActivateField(""Email Address"");
		this.SetFieldValue(""Email Address"", sEmail);
		this.ActivateField(""First Name"");
		this.SetFieldValue(""First Name"", sFirstName);
		this.ActivateField(""Last Name"");
		this.SetFieldValue(""Last Name"", sLastName);
		this.ActivateField(""Work Phone #"");
		this.SetFieldValue(""Work Phone #"", sPhone);
	}
	if(sView == ""STC Service Request Required Info View"" || sView == ""STC Subscription SR Detailed View"")
	{
		var sSanId = TheApplication().GetProfileAttr(""SANContactBANId"");
		var sSANBC = TheApplication().GetBusObject(""STC Service Account"").GetBusComp(""CUT Service Sub Accounts"");
		with(sSANBC)
		{
			ActivateField(""Master Account Id"");
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(""Id"",sSanId);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				var sCANId = GetFieldValue(""Master Account Id"");
			}
		}
		var sCANBC = TheApplication().GetBusObject(""Account"").GetBusComp(""Account"");
		with(sCANBC)
		{
			ActivateField(""Survey Type"");
			ActivateField(""Tax ID Number"");
			ActivateField(""STC GCC Country Code"");
			ActivateField(""Contact Citizenship"");
			ActivateField(""Type""); //Mayank: Added for Prod Issue
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(""Id"",sCANId);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				var sCustomerType = GetFieldValue(""Type"");//Mayank: Added for Prod Issue
				var sCPRType = GetFieldValue(""Survey Type"");
				var sCPRNumber = GetFieldValue(""Tax ID Number"");
				var sGCCCode = GetFieldValue(""STC GCC Country Code"");
				var sNationality = GetFieldValue(""Contact Citizenship"");
			}
		}
		if(sCustomerType == ""Individual"")//Mayank: Added for Prod Issue
		{//Mayank: Added for Prod Issue
			this.SetFieldValue(""STC ID Type"", sCPRType);
			this.SetFieldValue(""STC ID #"", sCPRNumber);
			this.SetFieldValue(""STC GCC Country Code"", sGCCCode);
			this.SetFieldValue(""Citizenship"", sNationality);
		}//Mayank: Added for Prod Issue
	}
    switch(strParentBusObj)
    {

       case ""Order Entry (Sales)"":
                oParentBusComp = oParentBusObj.GetBusComp(""Order Entry - Orders"");
	        	strAccountId = oParentBusComp.GetFieldValue(""Billing Account Id"");
	        	if (strAccountId != """")
	        	{
		        	oAssocBusComp = this.GetMVGBusComp(""Account"").GetAssocBusComp();
		      	     with (oAssocBusComp)
		        	{
		      	    	SetViewMode(AllView);
			        	ActivateField(""Id"");
			    		ClearToQuery();
			    		SetSearchSpec(""Id"", strAccountId);
			    		ExecuteQuery(ForwardOnly);
			    		Associate(NewAfter);
		    	     }
				}			
	        	break;
       default:
	        	break;
    }
   } 
    catch(e)
    {
	      throw e;
    }

    finally
     {
     
	oAssocBusComp = null;
	oParentBusComp = null;
	oParentBusObj = null;
	strAccountId = null;
	appObj = null;

     }

}
function BusComp_PreNewRecord ()
{
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	//Mayank: Added for Email Data Capture ----------------- START--------------
	try
	{
		switch(FieldName)
		{
			case ""Email Address"":
			{
				if(sNewRecord == ""N"")
				{
					if(FieldValue != """" && FieldValue != null)
					{
						var sEmail = this.GetFieldValue(""Email Address"");
						var pattern = /(\s)/g;
						sEmail = sEmail.replace(pattern, """");
						FieldValue = FieldValue.replace(pattern, """");
						if(FieldValue == ""NA"" || FieldValue == ""na"")
						{
							if(sEmail != FieldValue)
							{
								this.ActivateField(""STC Email Verification Status"");
								this.SetFieldValue(""STC Email Verification Status"",""Not Verified"");
							}
							//this.SetFieldValue(""Email Address"",FieldValue);
						}
						else
						{
							if(sEmail != FieldValue)
							{
								this.ActivateField(""STC Email Verification Status"");
								this.SetFieldValue(""STC Email Verification Status"",""Not Verified"");
							}
						}
					}
				}
			}

			case ""STC New Email Address Reason""://[manuj]:[Email Data Enhancements]
			
			if(FieldValue == ""Not Available"")
			{
			if(this.GetFieldValue(""STC New Email Address"") != ""NA"")
			{
				this.SetFieldValue(""STC New Email Address"",""NA"");
				//this.InvokeMethod(""RefreshBusComp"");
			}	
			}
			break;
		}
		return(ContinueOperation);
	}
	catch(e)
	{
		throw(e);
		
	}
	finally
	{
	}//Mayank: Added for Email Data Capture ----------------- STOP--------------
}
function BusComp_PreWriteRecord ()
{

 var sViewName;
 var psInputs;
 var psOutputs;
 var appObj;
 try
{
		appObj = TheApplication();
		sViewName = appObj.ActiveViewName();
		//if(sViewName == ""Order Entry - Line Items Detail View (Sales)"" || sViewName == ""STC Billing Account Detail - Contacts View"" || sViewName == ""Account Detail - Contacts View"")
		if(sViewName == ""Order Entry - Line Items Detail View (Sales)"" || sViewName == ""STC Billing Account Detail - Contacts View"" || sViewName == ""Account Detail - Contacts View"" || sViewName == ""Lead Details View"")// Mayank: Updated Condion for Lead To Cashe
		{   
		
		psInputs = appObj.NewPropertySet();
		with(psInputs)
		{
		   this.ActivateField(""First Name"");//[MANUJ] : [Email Data Capture Enhancement]
		   this.ActivateField(""Middle Name"");//[MANUJ] : [Email Data Capture Enhancement]
		   this.ActivateField(""Last Name"");//[MANUJ] : [Email Data Capture Enhancement]
		   this.ActivateField(""Work Phone #"");//[MANUJ] : [Email Data Capture Enhancement]
		   this.ActivateField(""Email Address"");//[MANUJ] : [Email Data Capture Enhancement]
		   this.ActivateField(""Birth Date"");//[MANUJ] : [Email Data Capture Enhancement]
		   this.ActivateField(""STC ID Type"");//[MANUJ] : [Email Data Capture Enhancement]
		   this.ActivateField(""STC ID #"");//[MANUJ] : [Email Data Capture Enhancement]
		   SetProperty(""FirstName"",this.GetFieldValue(""First Name""));
		   SetProperty(""MiddleName"",this.GetFieldValue(""Middle Name""));
		   SetProperty(""LastName"",this.GetFieldValue(""Last Name""));
		  // SetProperty(sMotherMaidenName,this.GetFieldValue(""Mother Maiden Name""));
		   SetProperty(""Phone"",this.GetFieldValue(""Work Phone #""));
		   SetProperty(""EmailId"",this.GetFieldValue(""Email Address""));
		 //  SetProperty(sMobile,this.GetFieldValue(""Cellular Phone #""));
		   SetProperty(""DateOfBirth"",this.GetFieldValue(""Birth Date""));
		 //  SetProperty(sTitle,this.GetFieldValue(""M/M""));
		  //SetProperty(sMaritalStatus,this.GetFieldValue(""Marital Status""));
		 //  SetProperty(sGender,this.GetFieldValue(""M/F""));
		   SetProperty(""IDType"",this.GetFieldValue(""STC ID Type""));
		   SetProperty(""ID"",this.GetFieldValue(""STC ID #""));
		  // SetProperty(""IDExpiryDate"",this.GetFieldValue(""ID Expiry Date""));
	    }  
		 
		 psOutputs = appObj.NewPropertySet();
		 //[MANUJ] : [EMail Data Enhancement]
		 var ActView = TheApplication().ActiveViewName();
		 if (ActView != ""Order Entry - Line Items Detail View (Sales)"")
		 {
		 ValidateCustomerDetails(psInputs,psOutputs);
		 }
		} 
		
		var isNewRecord = this.InvokeMethod(""IsNewRecordPending"");
		if(isNewRecord == ""TRUE"" && TheApplication().GetProfileAttr(""ApplicationName"") == ""Siebel eChannel for CME"")
		{
			this.SetFieldValue(""SSA Primary Field"",""Y"");
		}
		return (ContinueOperation);
	 }
	 
	 catch(e)
	 {
		//TheApplication().RaiseErrorText(e.errText);
		throw(e);
	 }
	 finally
	 {
	 }
}
function BusComp_SetFieldValue (FieldName)
{
	//Mayank: Added for Email Data Capture ----------------- START--------------
	if(FieldName == ""Email Address"")
	{	
		var sEmail = this.GetFieldValue(""Email Address"");
		if(sEmail != """" && sEmail != null)
		{
			var pattern = /(\s)/g;
			sEmail = sEmail.replace(pattern, """");
			this.SetFieldValue(""Email Address"",sEmail);
			//this.WriteRecord();
		}
	}//Mayank: Added for Email Data Capture ----------------- STOP--------------
}
function ValidateCustomerDetails(psInputs,psOutputs)
{
	var appObj;
	var bsValidCustomer;
	var sErrorCode;
	var sErrorMsg;
	try
	{
		appObj = TheApplication();
		with(appObj)
		{
			bsValidCustomer = GetService(""STC New Contact Validation"");
			bsValidCustomer.InvokeMethod(""ValidateCustomer"",psInputs, psOutputs);
		
			sErrorCode = psOutputs.GetProperty(""Error Code"");
			sErrorMsg = psOutputs.GetProperty(""Error Message"");
			if(sErrorCode !="""" && sErrorCode != null)
			{
				TheApplication().RaiseErrorText(sErrorMsg);
			}
			
		} 
		return(ContinueOperation);
	
	}
	catch(e)
	{
		//TheApplication().RaiseErrorText(e.errText);
		throw(e);
	}
	finally
	{
		psInputs = null;
		psOutputs = null;
		bsValidCustomer = null;
	}
}
function BusComp_WriteRecord ()
{
	var sViewName ='';
	try
	{	
		if(TheApplication().ActiveViewName() == ""Product Detail Administration Cost Lists View"")
		{
			
			var Inputs  = TheApplication().NewPropertySet();
			var Outputs = TheApplication().NewPropertySet();
			var svcbsService = TheApplication().GetService(""Workflow Process Manager"");
			Inputs.SetProperty(""ProcessName"", ""STC RRP Update Eshop_Mcommerce Wrapper WF"");
			Inputs.SetProperty(""CostPriceId"",this.GetFieldValue(""Id""));
			Inputs.SetProperty(""DeviceName"",this.GetFieldValue(""Product Name""));
			Inputs.SetProperty(""DeviceProdId"",this.GetFieldValue(""Product Id""));
			Inputs.SetProperty(""RRP"",this.GetFieldValue(""Standard Cost""));				
			svcbsService.InvokeMethod(""RunProcess"", Inputs, Outputs);
		}	
	}
	catch(e)
	{
		
	}
	finally
	{		
		svcbsService = null;
		Inputs = null;
		Outputs = null;		
	}
}
function BusComp_PreInvokeMethod (MethodName)
{
if (MethodName == ""GetGuardianDetails"")
{
return(CancelOperation);
}
	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{

with(this)
{
ActivateField(""STC Read Only Flg"");
var ReadFlg = GetFieldValue(""STC Read Only Flg"");
	if(ReadFlg != ""Y"")
	{
		SetFieldValue(""STC Read Only Flg"", ""Y"");
		WriteRecord();
	}
}
this.SetSortSpec(""Created(DESCENDING)"");
this.ExecuteQuery(1);
}
function BusComp_PreInvokeMethod (MethodName)
{
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_InvokeMethod (MethodName)
{

   
    return (ContinueOperation);

}
function BusComp_WriteRecord ()
{
	var sApp = TheApplication();
	var sQuestion = this.GetFieldValue(""STC Question Details"");
	var sAnswr = this.GetFieldValue(""STC Answer Details"");
	
	if(sQuestion == ""Customer agreed for LTE Add-On Upgrade?""){
		var sID = this.GetFieldValue(""Id"");		
		with(this){
			ActivateField(""Activity Id"");
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchSpec(""Id"",sID);
			ExecuteQuery(ForwardOnly);
			var IsActStepRec = FirstRecord();
			if(IsActStepRec){
				var sActId = this.GetFieldValue(""Activity Id"");
			}//endifIsActStepRec			
		}//endWith this
	if(sActId != """"){
		var sBoActivityPlanAction = TheApplication().GetBusObject(""STC Activity Plan Action"");
		var sBcActivityPlanAction  = sBoActivityPlanAction.GetBusComp(""Activity Plan Action"");
		with(sBcActivityPlanAction){
			ActivateField(""Parent Activity Id"");
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchSpec(""Id"",sActId);
			ExecuteQuery(ForwardOnly);
			var IsRec = FirstRecord();
			if(IsRec){
				var sActPlanId = GetFieldValue(""Parent Activity Id"");
				var sBoActPlan = TheApplication().GetBusObject(""STC Activity Plan"");
				var sBcActPlan = sBoActPlan.GetBusComp(""Activity Plan"");
				with(sBcActPlan){
					ActivateField(""Account Id"");
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchSpec(""Id"",sActPlanId);
					ExecuteQuery(ForwardOnly);
					var IsFRec = FirstRecord();
					if(IsFRec){
						var sSrvcActId = GetFieldValue(""Account Id"");
						var sBoSerAccnt = TheApplication().GetBusObject(""STC Service Account"");
						var sBcSerAccnt = sBoSerAccnt.GetBusComp(""CUT Service Sub Accounts"");
						with(sBcSerAccnt){
							ActivateField(""STC LTE Upgrade Flag"");
							SetViewMode(AllView);
							ClearToQuery();
							SetSearchSpec(""Id"",sSrvcActId);
							ExecuteQuery(ForwardOnly);
							var IsSerAcc = FirstRecord();
							if(IsSerAcc){
								SetFieldValue(""STC LTE Upgrade Flag"",sAnswr);
								WriteRecord();
							}
							
						}//endiwth sBcSerAccnt	
					}//endif IsFRec					
				}//endwith	sBcActPlan			
			}//endif IsRec
		}//endwith sBcActivityPlanAction
	}//endif sActId != """"
	}//endif sQuestion

}
//Your public declarations go here...
function BusComp_ChangeRecord ()
{

}
function BusComp_InvokeMethod (MethodName)
{

}
function BusComp_PreGetFieldValue (FieldName, &FieldValue)
{
	return (ContinueOperation);
}
function BusComp_PreInvokeMethod (MethodName)
{
	return (ContinueOperation);
}
function BusComp_PreNewRecord ()
{
	var vView = TheApplication().GetProfileAttr(""ActiveViewName"");
	if(vView == ""STC TT Billing Adjustment View"" || vView == ""STC Adjustment Approval - History View"")
	{
		var vID = null;
		var SearchSpec = ""[Status] <> 'Cancelled'"";
		with(this)
		{
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchExpr(SearchSpec);
			ExecuteQuery(ForwardOnly);
			vID = CountRecords();
		}

		if(vID > 0)
		TheApplication().RaiseErrorText(""Not allowed to create multiple Active Adjustment Request. Please cancel the current Adjustment Header."");
	}
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	var appObj = TheApplication();//BillingTT
	var vView = appObj.GetProfileAttr(""ActiveViewName"");
	try
	{
	switch(FieldName)
	{
		
		//---------------BillingTT--------------------
		case ""Status"":
		var vViews = appObj.GetProfileAttr(""ActiveViewName"");
		var OldStatus = this.GetFieldValue(""Status"");
		if(OldStatus == ""Failure"" && FieldValue == ""Success"" && vViews == ""STC TT Billing Adjustment View"")
		{
		var vAdjId = this.GetFieldValue(""Id"");
		var boAjust = appObj.ActiveBusObject();
        var bcAdjustLine = boAjust.GetBusComp(""FS Invoice Adjustment Items"");
        with(bcAdjustLine)
        {
        SetViewMode(AllView);
		ClearToQuery();
		ActivateField(""Invoice Adj ID"");
		ActivateField(""Status"");
		var searchst = ""[Invoice Adj ID] = '"" + vAdjId + ""' AND [Status] = 'Open'"";
		SetSearchExpr(searchst);
		ExecuteQuery(ForwardOnly);
		var sIsRec = FirstRecord();
		if(sIsRec == ""true"")
		{
		appObj.RaiseErrorText(""Please Close The Adjustment Items First"");
		}
		}
		
		}//---------------BillingTT--------------------
		break;
		//[MANUJ Adjustment Automation Phase 3] : [Adj Header Editing]
		case ""Description"":
		//case ""Financial Impact"":
		case ""Reason For Request"":
		case ""STC Attachment Link"":
		case ""STC Adj Excl Flag"":
		case ""STC Department"":
		case ""Type"":
		case ""Adjustment Sub Type"":
		//case ""Adjustment Type"":
		var EditTriggered = TheApplication().GetProfileAttr(""EditTriggered"");
		
		if(vView == ""STC TT Billing Adjustment View"" && EditTriggered == ""Y"")
		{
		TheApplication().SetProfileAttr(""HeaderChange"",""Y"");
		}
		break;
		//[MANUJ] : [Adj Header Editing]
		default:
		break;
	}
	return (ContinueOperation);
}
catch(e)
{
	throw(e);
}
finally
{
	bcAdjustLine = null;
	boAjust = null;
	appObj = null;
} 
}
function BusComp_PreWriteRecord ()
{
	var vView = TheApplication().GetProfileAttr(""ActiveViewName"");
		if(vView == ""STC TT Billing Adjustment View"")
		{
		TheApplication().SetProfileAttr(""STCEditRequestFlag"",""N"");//Make Form ReadOnly
		this.InvokeMethod(""RefreshBusComp"");
		}
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{
	
	return (ContinueOperation);

}
function BusComp_WriteRecord ()
{
	var vView = TheApplication().GetProfileAttr(""ActiveViewName"");
	if(vView == ""STC TT Billing Adjustment View"")
	{	
		TheApplication().SetProfileAttr(""STCEditRequestFlag"",""N"");
		this.InvokeMethod(""RefreshBusComp"");
	}
}
"var vAmountSetFlag = false;
var vNewRec = false;
var vMSISDNSetFlag =false;"
function BusComp_ChangeRecord ()
{

}
function BusComp_CopyRecord ()
{

}
function BusComp_DeleteRecord ()
{

}
function BusComp_NewRecord ()
{
	
	vNewRec = true;
}
function BusComp_PreAssociate ()
{
	return (ContinueOperation);
}
function BusComp_PreCopyRecord ()
{
	return (ContinueOperation);
}
function BusComp_PreDeleteRecord ()
{
	return (ContinueOperation);
}
function BusComp_PreGetFieldValue (FieldName, &FieldValue)
{
	return (ContinueOperation);
}
function BusComp_PreNewRecord ()
{
TheApplication().SetProfileAttr(""AdjItemNew"",""Y"");
	return (ContinueOperation);
}
function BusComp_PreQuery ()
{
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{

	//******[MANUJ] : [Automation Adjustment]****
	var appObj = TheApplication();//BillingTT
	var vView = appObj.GetProfileAttr(""ActiveViewName"");
	//******[MANUJ] : [Automation Adjustment]****
	switch(FieldName)
	{
	/*	case ""Request Amt"":
		vAmountSetFlag = true;		
		break;
		
		case ""STC MSISDN"":
		vMSISDNSetFlag = true;	
		break;
	*/	
		case ""Status"":
		var LoginUser = TheApplication().GetProfileAttr(""Login Name"");
		var vLoginLookUp = TheApplication().InvokeMethod(""LookupValue"",""STC_ADJ_IT_USER"",LoginUser);
		if((vLoginLookUp == LoginUser) && (FieldValue != ""Success"" && FieldValue != ""Failure""))
		{
			TheApplication().RaiseErrorText(""Selected status change is not allowed."");
		}
		break;
		
		//******[MANUJ] : [Automation Adjustment]****
		case ""Billing Account Number"":
		case ""Charging Type"":
		case ""Request Amt"":
		case ""Adjustment Type""://[MANUJ] : [Adjustment Automation Phase 3]
		case ""Financial Impact""://[MANUJ] : [Adjustment Automation Phase 3]
		var EditTriggered = TheApplication().GetProfileAttr(""EditTriggered"");
		if(vView == ""STC TT Billing Adjustment View"" && EditTriggered == ""Y"" )//Editing thru EditForm Button
		{
		TheApplication().SetProfileAttr(""LineItemChange"",""Y"");
		}
		break;
		//******[MANUJ] : [Automation Adjustment]****
		default:
		break;
	}
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
	var vView = TheApplication().GetProfileAttr(""ActiveViewName"");
	var vCheckImportProcess = TheApplication().GetProfileAttr(""STCAdjustmentFileImport"");
	if(vCheckImportProcess != ""Y"" && vView == ""STC TT Billing Adjustment View"")
	{	
	/*	if(vAmountSetFlag == true)
		{	
			ValidateAmount();
			vAmountSetFlag = false;	
		}*/
		if(vMSISDNSetFlag ==  true)
		{
			var vStatus = this.GetFieldValue(""Status"");
			if(vStatus == ""Success"")
			TheApplication().RaiseErrorText(""Not allowed to modify adjustment processed successfully."");
		}
		//ValidateFields();		
/*		if(vNewRec == false)
		{
			var vImportStatus = this.GetFieldValue(""STC Import Status"");
			if(vImportStatus == TheApplication().InvokeMethod(""LookupValue"",""STC_ADJ_IMP_STAT"",""Validated""))
			TheApplication().RaiseErrorText(""Not allowed to modify a record validated successfully."");
		}
*/
	}	
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{
	var appObj = TheApplication();//BillingTT
	var vView = appObj.GetProfileAttr(""ActiveViewName"");
		switch(FieldName)
	{
		case ""Billing Account Number"":
		case ""Charging Type"":
		case ""Request Amt"":
		case ""Adjustment Type""://[MANUJ] : [Adjustment Automation Phase 3]
		case ""Financial Impact""://[MANUJ] : [Adjustment Automation Phase 3]
		var AdHeaderStatus = """";
		var	oBusObj = TheApplication().ActiveBusObject();
		var AdjHeaderBC = oBusObj.GetBusComp(""FS Invoice Adjustment"");
			with(AdjHeaderBC)
		{
		AdHeaderStatus = GetFieldValue(""STC Approval Status"");
		}
		var EditTriggered = TheApplication().GetProfileAttr(""EditTriggered"");
		var AdjItemNew = TheApplication().GetProfileAttr(""AdjItemNew"");
		//if(vView == ""STC TT Billing Adjustment View"" && (EditTriggered == ""Y"" && (AdHeaderStatus == ""Approval Pending"" || AdHeaderStatus == ""Approved"")))//Editing thru EditForm Button On Line Items 
		if(vView == ""STC TT Billing Adjustment View"" && (AdHeaderStatus == ""Approval Pending"" || AdHeaderStatus == ""Approved""))
		{
		TheApplication().SetProfileAttr(""LineItemChange"",""Y"");
		if(AdjItemNew == ""N""){
		this.SetFieldValue(""Adj Item Change"",""Y"");
		this.WriteRecord();
		this.InvokeMethod(""RefreshRecord"");
		}
		
		with(AdjHeaderBC)
		{
			TheApplication().SetProfileAttr(""STCEditRequestFlag"",""Y"");
			InvokeMethod(""RefreshRecord"");
			SetFieldValue(""Adj Item Editted"",""Y"");
			WriteRecord();
			TheApplication().SetProfileAttr(""STCEditRequestFlag"",""N"");
			InvokeMethod(""RefreshRecord"");
			
		}
		}
		break;
		//******[MANUJ] : [Automation Adjustment]****
		default:
		break;
	}
}
function BusComp_WriteRecord ()
{

TheApplication().SetProfileAttr(""AdjItemNew"",""N"");
TheApplication().SetProfileAttr(""STCEditRequestFlag"",""N"");
var vView = TheApplication().GetProfileAttr(""ActiveViewName"");
if(vView == ""STC TT Billing Adjustment View"")
{
this.InvokeMethod(""RefreshRecord"");
}
/*	var vView = TheApplication().GetProfileAttr(""ActiveViewName"");
	var vCheckImportProcess = TheApplication().GetProfileAttr(""STCAdjustmentFileImport"");
	if(vCheckImportProcess != ""Y"" && vView == ""STC TT Billing Adjustment View"")
	{	
		TheApplication().SetProfileAttr(""STCEditRequestFlag"",""N"");
		this.ParentBusComp().InvokeMethod(""RefreshBusComp"");
	}
*/
}
function ValidateAmount()
{
/*	try
	{
		var vCurrBC: BusComp = this;
		var vMasterAccId = vCurrBC.ParentBusComp().GetFieldValue(""STC Master Account Id"");
		var vType = vCurrBC.ParentBusComp().GetFieldValue(""Type"");		
		var vApp: Application = TheApplication();
		var vBO: BusObject = vApp.GetBusObject(""STC Account Thin"");
		var vBC: BusComp = vBO.GetBusComp(""STC Account Thin"");
		var vCustCategory = """";
		var vCustomerType = """";
		var vRequestAmount = vCurrBC.GetFieldValue(""Request Amt"");
		var vStatus = vCurrBC.GetFieldValue(""Status"");
		var vAmount: Number = ToNumber(vRequestAmount);
		if(vStatus == ""Success"")
		vApp.RaiseErrorText(""Amount cant be updated for Successfully processed adjustments."");
		with(vBC)
		{
			ClearToQuery();
			ActivateField(""STC Contract Category"");
			ActivateField(""Type"");
			SetSearchSpec(""Id"",vMasterAccId);
			ExecuteQuery(ForwardBackward);
			if(FirstRecord())
			{
				vCustCategory = GetFieldValue(""STC Contract Category"");
				vCustomerType = GetFieldValue(""Type"");
				var vLimit_High: Number = ToNumber(vApp.InvokeMethod(""LookupValue"",""STC_ADJ_AMT_VAL"",""LIMIT_HIGH""));
				var vLimit_High_SME: Number = ToNumber(vApp.InvokeMethod(""LookupValue"",""STC_ADJ_AMT_VAL"",""LIMIT_HIGH_SME""));
				var vGood_WillLOV = vApp.InvokeMethod(""LookupValue"",""INVC_ADJ_REQ_TYPE_CD"",""Goodwill Gesture"");
				if(vType == vGood_WillLOV && (vCustCategory == ""A"" || vCustCategory == ""B"" || vCustCategory == ""C"" || vCustCategory == ""D"" || vCustCategory == ""Individual"") && (vAmount > vLimit_High))
				vApp.RaiseErrorText(""Entered amount has exceeded the Goodwill Gesture limit for Individual Customer."");	
				else if(vType == vGood_WillLOV && vCustomerType != ""Individual"" && vAmount > vLimit_High_SME)
				vApp.RaiseErrorText(""Entered amount has exceeded the Goodwill Gesture limit for SME/Corporate/Organization Customer."");
			}
		}
	}
	catch(e)
{
	throw(e);
	this.ParentBusComp().InvokeMethod(""RefreshBusComp"");
}
	finally
	{
		vCurrBC = null;
		vApp = null;
		vBC = null;
		vBO = null;
	}
	*/
}
function ValidateFields()
{
/*	var vAmount = this.GetFieldValue(""Request Amt"");
	var vMSISDN = this.GetFieldValue(""STC MSISDN"");
	if(vAmount == """" || vAmount == null)
	TheApplication().RaiseErrorText(""Amount is mandatory."");
	if(vMSISDN == """" || vMSISDN == null)
	TheApplication().RaiseErrorText(""MSISDN is mandatory"");*/
}
function BusComp_DeleteRecord ()
{

}
function BusComp_PreInvokeMethod (MethodName)
{
	try
	 {
	  
	   switch(MethodName)
		{     
			  case ""GetSmartCardDetails"":
			  {
				GetSmartCardDetails();
				return (CancelOperation);
			    break;	
			  }
			  default:
			    break;
		 } 
		return (ContinueOperation);
	  }
	 catch(e)
	 {
		throw(e);
	 }
	 finally
	 {
	
	 }
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	if(FieldName == ""Labour Charges"" && FieldValue < 0)
		{
			if(this.GetFieldValue(""Billable Flag"") == ""Y"" )
			{
				TheApplication().RaiseErrorText(""Labour charge  cannot be less than 0 if Chargeable flag is selected."");
			}
		}

		if((FieldName == ""Product Name"") || (FieldName == ""Charge""))
		{
			if(this.GetFieldValue(""Product Warranty Flag"") == ""Y"")//if warranty already selected
			{
				this.SetFieldValue(""Charge"","""");
			}
		}
/*
	if(FieldName == ""Product Warranty Flag"" && FieldValue == ""Y"")
		{
			if(this.GetFieldValue(""Sub-Status"") == ""Replaced"" )
			{
			     var WarrantyCharge = TheApplication().InvokeMethod(""LookupValue"", ""STC_JOB_CARD_ADMIN"", ""WarrantyCharge"");
			     this.SetFieldValue(""Labour Charges"",WarrantyCharge);
			}
		}
		*/
		/*
	if(FieldName == ""Sub-Status"" && FieldValue == ""Under Repair"")
		{
			if(this.GetFieldValue(""Sub-Status"") == ""Pending"" )
			{
			     SendSMS();
			}
		}*/

	return (ContinueOperation);
}
function FindCustomer(CPR)
{

		var appObj=TheApplication();
		with(this)
		{ 				
						
						var CustomerFound = """";
						var svcbsServiceSMS = appObj.GetService(""Workflow Process Manager"");
						var psiPSSMS = appObj.NewPropertySet();
						var psoPSSMS = appObj.NewPropertySet();
						psiPSSMS.SetProperty(""ProcessName"", ""STC Job Card Operations WF"");
						psiPSSMS.SetProperty(""Operation"",""Find Customer"");
						psiPSSMS.SetProperty(""AccntType"",""Customer"");
						psiPSSMS.SetProperty(""IDType"",""Bahraini ID"");
						psiPSSMS.SetProperty(""CPR"",CPR);
						svcbsServiceSMS.InvokeMethod(""RunProcess"", psiPSSMS, psoPSSMS);
						CustomerFound = psoPSSMS.GetProperty(""CustomerFound"");	
					
						
		}//end of with(this) 
		return (CustomerFound);
		
}
function GetSmartCardDetails()
{
	try
	{
		WriteRecord();
		InvokeMethod(""RefreshRecord"");
		var CheckExist = """";
		var CPR = """", CustomerFound = 0;
		var ExisCust = this.GetFieldValue(""Customer Existing Flag"");
		var sId = this.GetFieldValue(""Id"");
		var sSrv = TheApplication().GetService(""STC Card Reader BS"");
		var Inputs = TheApplication().NewPropertySet();
		var Outputs = TheApplication().NewPropertySet();
		var InputsPick = TheApplication().NewPropertySet();
		var OutputsPick = TheApplication().NewPropertySet();
		var InputsSet = TheApplication().NewPropertySet();
		var OutputsSet = TheApplication().NewPropertySet();
		var sSiebMsg = this.GetFieldValue(""SiebelMessage"");
		Inputs.SetProperty(""SiebelMessage"", sSiebMsg);
		Inputs.SetProperty(""RowId"", sId);
		sSrv.InvokeMethod(""ReadSmartCard"", Inputs, Outputs);
		CPR = Outputs.GetProperty(""CPR"")
		CustomerFound = FindCustomer(CPR);
		InputsPick.SetProperty(""CPR"", CPR);
		InputsPick.SetProperty(""JobCardId"", sId);
		 
		if(ExisCust == ""N"" || ExisCust == """")
		{
		if(CustomerFound > 0)
		{//Pick 
			PickExistingCustomer(InputsPick, OutputsPick);
			InvokeMethod(""RefreshRecord"");

			
		}
		else
		{
		SetFieldValue(""ID Number"", Outputs.GetProperty(""CPR""));
		SetFieldValue(""ID Type"", ""Bahraini ID"");
		SetFieldValue(""First Name"", Outputs.GetProperty(""FName""));
		SetFieldValue(""Last Name"", Outputs.GetProperty(""LName""));
		SetFieldValue(""Middle Name"", Outputs.GetProperty(""MiddleName""));
		WriteRecord();
		InvokeMethod(""RefreshRecord"");
		}
		TheApplication().GetService(""FINS Teller UI Navigation"").InvokeMethod(""RefreshCurrentApplet"", TheApplication().NewPropertySet(), TheApplication().NewPropertySet());
		}
		else
		{
		if(CustomerFound > 0)
		{//Pick 
			PickExistingCustomerPostNullify(InputsPick, OutputsPick);	
			InvokeMethod(""RefreshRecord"");
		}
		else
		{
		//InputsSet.SetProperty(""JobCardId"", sId);
		//SetFieldY(InputsSet, OutputsSet);
		SetFieldValue(""Customer Existing Flag"", ""N"");
		SetFieldValue(""ID Number"", Outputs.GetProperty(""CPR""));
		SetFieldValue(""ID Type"", ""Bahraini ID"");
		SetFieldValue(""First Name"", Outputs.GetProperty(""FName""));
		SetFieldValue(""Last Name"", Outputs.GetProperty(""LName""));
		SetFieldValue(""Middle Name"", Outputs.GetProperty(""MiddleName""));
	
		
		/*
		SetFieldValue(""Customer Account Id"", """");
		SetFieldValue(""Customer Account Num"", """");
		SetFieldValue(""Email Address"", """");
		SetFieldValue(""MSISDN"", """");
		SetFieldValue(""STC GCC Country Code"", """");*/
		WriteRecord();
		InvokeMethod(""RefreshRecord"");
		
		}



		}
		
		
	
	}
	catch(e)
	{
		TheApplication().RaiseErrorText(e.errText);
	}
	finally
	{
		Inputs = null;
		Outputs = null;
		sSrv = null;
	}
}
function LogException(e)
{

	var appObj;
  	var Input;
  	var Output;
  	var CallMessageHandler; 
	try
 	{
		  appObj = TheApplication();
		  Input = appObj.NewPropertySet();
		  Output = appObj.NewPropertySet();
		  CallMessageHandler = appObj.GetService(""STC Generic Error Handler""); 
		  Input.SetProperty(""Error Code"", e.errCode);
		  Input.SetProperty(""Error Message"", e.errText);
		  Input.SetProperty(""Object Name"", ""FS Repair"");
		  Input.SetProperty(""Object Type"", ""Buisness Component"");
		  CallMessageHandler.InvokeMethod(""Log Message"", Input, Output);
 	}
 	catch(e)
 	{
  		
 	}
 	finally
 	{
 
		  CallMessageHandler = null;
		  Output = null;
		  Input = null;
		  appObj = null;
 	}
}
function PickExistingCustomer(Inputs, Outputs)
{
var CPR = Inputs.GetProperty(""CPR"");
var JobCardId = Inputs.GetProperty(""JobCardId"");
var JobCardBC = TheApplication().GetBusObject(""FS Repair"").GetBusComp(""FS Repair Thin"");

with(JobCardBC)
{
		ActivateField(""Customer Account Num"");
		ActivateField(""Customer Existing Flag"");
		SetViewMode(AllView);
		ClearToQuery();
		SetSearchSpec(""Id"", JobCardId);
		ExecuteQuery(ForwardOnly);
		var SRRec = FirstRecord();
		if(SRRec)
		{
			var PickBC = GetPicklistBusComp(""Customer Account Num"");
			with (PickBC) 
			{
			ActivateField(""Tax ID Number"");
			ActivateField(""Survey Type"");
			ActivateField(""Account Type Code"");
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(""Tax ID Number"", CPR);
			SetSearchSpec(""Survey Type"", ""Bahraini ID"");
			SetSearchSpec(""Account Type Code"", ""Customer"");
			ExecuteQuery(ForwardOnly);
			if(FirstRecord()) 
			{
				Pick();
			}
			
			}
			SetFieldValue(""Customer Existing Flag"", ""Y"");
			WriteRecord();
		//	InvokeMethod(""RefreshRecord"");
		}
}
}
function PickExistingCustomerPostNullify(Inputs, Outputs)
{
var CPR = Inputs.GetProperty(""CPR"");
var JobCardId = Inputs.GetProperty(""JobCardId"");
var JobCardBC = TheApplication().GetBusObject(""FS Repair"").GetBusComp(""FS Repair Thin"");

with(JobCardBC)
{
		ActivateField(""Customer Account Num"");
		ActivateField(""Customer Existing Flag"");
		SetViewMode(AllView);
		ClearToQuery();
		SetSearchSpec(""Id"", JobCardId);
		ExecuteQuery(ForwardOnly);
		var SRRec = FirstRecord();
		if(SRRec)
		{
		    SetFieldValue(""Customer Existing Flag"", ""N"");
			var PickBC = GetPicklistBusComp(""Customer Account Num"");
			with (PickBC) 
			{
			ActivateField(""Tax ID Number"");
			ActivateField(""Survey Type"");
			ActivateField(""Account Type Code"");
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(""Tax ID Number"", CPR);
			SetSearchSpec(""Survey Type"", ""Bahraini ID"");
			SetSearchSpec(""Account Type Code"", ""Customer"");
			ExecuteQuery(ForwardOnly);
			if(FirstRecord()) 
			{
				Pick();
			}
			
			}
			SetFieldValue(""Customer Existing Flag"", ""Y"");
			WriteRecord();
			//InvokeMethod(""RefreshRecord"");
		}
}
}
function SendSMS()
{
	try
	{
		var appObj=TheApplication();
		with(this)
		{ 				
						
						var JobId = GetFieldValue(""Id"");
						var svcbsServiceSMS = appObj.GetService(""Workflow Process Manager"");
						var psiPSSMS = appObj.NewPropertySet();
						var psoPSSMS = appObj.NewPropertySet();
						psiPSSMS.SetProperty(""ProcessName"", ""STC Send SMS SR WF"");
						psiPSSMS.SetProperty(""Object Id"", JobId);
						psiPSSMS.SetProperty(""TTNotificationType"",""SendSMS"");
						svcbsServiceSMS.InvokeMethod(""RunProcess"", psiPSSMS, psoPSSMS);
						
		}//end of with(this) 
	}//end of try
	catch(e)
	{
		LogException(e);
	}
	finally
	{
		psiPSSMS = null;
		psoPSSMS = null;
		svcbsServiceSMS = null;
		appObj = null;
	}
}
function SetFieldY(Inputs, Outputs)
{

var JobCardId = Inputs.GetProperty(""JobCardId"");
var JobCardBC = TheApplication().GetBusObject(""FS Repair"").GetBusComp(""FS Repair Thin"");

with(JobCardBC)
{
		ActivateField(""Customer Account Num"");
		ActivateField(""Customer Existing Flag"");
		SetViewMode(AllView);
		ClearToQuery();
		SetSearchSpec(""Id"", JobCardId);
		ExecuteQuery(ForwardOnly);
		var SRRec = FirstRecord();
		if(SRRec)
		{
		SetFieldValue(""Customer Account Id"", """");
		SetFieldValue(""Customer Account Num"", """");
		SetFieldValue(""Email Address"", """");
		SetFieldValue(""MSISDN"", """");
		SetFieldValue(""STC GCC Country Code"", """");
		WriteRecord();
		}
}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
if (FieldName == ""Sales Stage"") {
		if (FieldValue == ""04 - Lost"") {
			this.SetFieldValue(""Primary Revenue Amount"", ""0"");
			return (ContinueOperation);
		}
		else {
			return (ContinueOperation);
		}	
	}
	else
	{
		return (ContinueOperation);
	}	 
}
function BusComp_PreQuery ()
{
	
	var vSearchExpr = this.GetSearchExpr();
	var vActiveView = TheApplication().ActiveViewName();
	var vViewName = TheApplication().InvokeMethod(""LookupValue"",""STC_REMOVE_CASE_INSENSITIVITY"",vActiveView);
	var isValidView = vViewName.substring(0,5);
	if(vSearchExpr!=null && vSearchExpr !="""")
	{
		 if(isValidView == ""ALLOW"")
		 {
			 vSearchExpr = vSearchExpr.replace(""[Name]"", ""[Name]~"");
			 this.SetViewMode(AllView);
			 this.SetSearchExpr(vSearchExpr);
	       	 this.ExecuteQuery(ForwardBackward);
		}
	}
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_PreInvokeMethod (MethodName) 
{ 

if(MethodName == ""RefreshWorkspace"") 
{
		//Creating the log file 
		var fp = Clib.fopen('c:\\log.txt', 'wt');
		Clib.fputs('Starting Invoke', fp);
   try
    {
    var sCallWF = TheApplication().GetService(""Workflow Process Manager"");
    var Inputs = TheApplication().NewPropertySet();
    var Outputs = TheApplication().NewPropertySet();
    Inputs.SetProperty(""ProcessName"", ""CRMIntegComplexProductOutboundFlow"");
	Clib.fputs('Object Id:'+this.GetFieldValue(""Configuration Model Id"")+""\n"", fp);
    Inputs.SetProperty(""Object Id"", this.GetFieldValue(""Configuration Model Id""));
    sCallWF.InvokeMethod(""RunProcess"", Inputs, Outputs);
    }
   catch (e)
    {
    throw (e);
    }
 
   finally
    {
    Inputs = null;
    Outputs = null;
    sCallWF = null;
    } 
		Clib.fputs('Complete Invoke', fp);
		Clib.fclose(fp);
 
   return (CancelOperation);    
  }
 return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{
var ActView = TheApplication().ActiveViewName();
	if(ActView == ""ISS Product Administration View"")
	{

	if(FieldName == ""Type"")
		{
			if(this.GetFieldValue(""Type"") == ""Equipment"")
			{
				this.SetFieldValue(""STC Device Category"",""1"");
				this.WriteRecord();
			}
		}

//SUMANK BELOW		
		if(FieldName == ""STC PCRF Package"")
		{
			var PCRFPackName = this.GetFieldValue(""STC PCRF Package"");
			if(PCRFPackName != null || PCRFPackName != """" || PCRFPackName != '')
			{
				var prod_id = this.GetFieldValue(""Id"");
				var InputPS  = TheApplication().NewPropertySet();
				var OutputPS = TheApplication().NewPropertySet();
				var WorkflowProcSvc = TheApplication().GetService(""Workflow Process Manager"");
				InputPS.SetProperty(""Object Id"",prod_id);
				InputPS.SetProperty(""PCRFPackage"",PCRFPackName);
				InputPS.SetProperty(""ProcessName"",""STCUpdatePCRFDetailsCMSWF"");
				WorkflowProcSvc.InvokeMethod(""RunProcess"", InputPS, OutputPS);
			}
		}
		
//SUMANK: ABOVE


	}
}
function BusComp_WriteRecord ()
{//Mayank: Added for Ecom
	try
	{
		var appObj = TheApplication();
		var sView = appObj.GetProfileAttr(""ActiveViewName"");
		if(sView == ""STC ISS Product Ecom Administration View"")
		{
			var sProdId = """",sPartCode = """",sItemCateg = """";
			var objPickBusComp = """", spec = """";
			var sDevAttribId = """";
			var sContractCode = """", sDeviceCode = """", sPlanCode = """", sPlanVariantCode = """", sDiscountCode = """", sRowId = """";
			sProdId = this.GetFieldValue(""Id"");
			sPartCode = this.GetFieldValue(""Part #"");
			this.ActivateField(""STC ECom Item Category"");
			sItemCateg = this.GetFieldValue(""STC ECom Item Category"");
			var sActiveStatus = appObj.InvokeMethod(""LookupValue"",""STC_ECOM_STATUS"",""Active"");
			var sInactiveStatus = appObj.InvokeMethod(""LookupValue"",""STC_ECOM_STATUS"",""Inactive"");
			if(sItemCateg != null && sItemCateg != """")
			{
				var sEcomMasterProd: BusComp = appObj.GetBusObject(""STC MCommerce BO"").GetBusComp(""STC MCommerce Product BC"");
				with(sEcomMasterProd)
				{
					ActivateField(""Plan Product Name"");
					ActivateField(""Contract Product Name"");
					ActivateField(""Product Name"");
					ActivateField(""Upfront Discount Product Name"");
					ActivateField(""Plan Variant Name"");
					ActivateField(""Contract Product Part Code"");
					ActivateField(""Plan Product Part Code"");
					ActivateField(""Product Part Code"");
					ActivateField(""Plan Variant Part Code"");
					ActivateField(""Upfront Discount Product Code"");
					ActivateField(""Comments"");
					ActivateField(""Device Attribute Id"");
					ClearToQuery();
					SetViewMode(AllView);
					spec  = ""([Contract Product Part Code] = '"" + sPartCode + ""' OR [Plan Product Part Code] = '"" + sPartCode + ""' OR [Product Part Code] = '"" + sPartCode + ""' OR [Plan Variant Part Code] = '"" + sPartCode + ""' OR [Upfront Discount Product Code] = '"" + sPartCode + ""')"";// AND ([Status] = '"" + sActiveStatus + ""' OR [Status] = '"" + sInactiveStatus + ""')"";
					SetSearchExpr(spec);
					ExecuteQuery(ForwardOnly);
					var isRecord = FirstRecord(); 
					while (isRecord) 
					{
						sRowId = GetFieldValue(""Id"");
						sDevAttribId = GetFieldValue(""Device Attribute Id"");
						if(sDevAttribId != null && sDevAttribId != """")
						{
							var vComments = GetFieldValue(""Comments"");
							vComments = vComments+""."";
							SetFieldValue(""Comments"", vComments);
							WriteRecord();
						}
						isRecord = NextRecord();
					}
				}
			}
		}
	}
    catch(e)
    {
		throw e;
    }
    finally
	{
		objPickBusComp = null;
		spec = null;
		sEcomMasterProd = null;
		sView = null;
		appObj = null;
	}
}
function BusComp_NewRecord ()
{
	var curDt = new Date;
	curDt = ToNumber(curDt.getFullYear())+1;
	curDt = ""12/31/"" + curDt ;
	try
	{
		this.ActivateField(""Tier End Date"");
		this.SetFieldValue(""Tier End Date"", curDt ); 
	}
	catch(e)
	{
	}
}
"//Your public declarations go here...  
var bNewLead;
var gLeadRetireReject;
var gCustomerInteraction;"
function BusComp_NewRecord ()
{
	var strActiveView = """";
	strActiveView = TheApplication().ActiveViewName();
	
	if(strActiveView != null && strActiveView != """")
	{
		if(strActiveView != ""STC My Business Leads View"")
			{
				bNewLead = ""Y"";
			}
	}
}
function BusComp_NewRecord ()
{
	var strActiveView = """";
	strActiveView = TheApplication().ActiveViewName();
	
	if(strActiveView != null && strActiveView != """")
	{
		if(strActiveView != ""STC My Business Leads View"")
			{
				bNewLead = ""Y"";
			}
	}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	var appObj=TheApplication();
	var sApplicableType,sApplicableVal;
	try
	{

		
		switch(FieldName)
		{
			//Abuzar:09102021: SD Telesales WF - Start
			case ""STC Sales Attempt Status"":
			var strActiveView = appObj.ActiveViewName();
			if (strActiveView != null && strActiveView != """")
			{
				if(strActiveView != ""STC My Business Leads View"")
				{
					if(FieldValue != null && FieldValue != """")
					{
						var strSalesCampType = this.GetFieldValue(""STC Sales Campaign Type"");
						var strRejectReason = this.GetFieldValue(""Reject Comment"");
						var dtCallBack = this.GetFieldValue(""STC Customer Call Back Date"");
						if (strSalesCampType == ""Not Applicable"" || strSalesCampType == """" || strSalesCampType == null)
							appObj.RaiseErrorText(""Please provide appropriate 'Sales Campaign Type'!"");
						if (FieldValue == ""Rejected"" && (strRejectReason == null || strRejectReason == """"))
							appObj.RaiseErrorText(""Please provide appropriate 'Reject Reason'!"");
						if (FieldValue == ""Call Back Requested"" && (dtCallBack == null || dtCallBack == """"))
							appObj.RaiseErrorText(""Please provide appropriate 'Call Back Date'!"");
					}
				}
			}
			break;
			//Abuzar:09102021: SD Telesales WF - End

			case ""STC Lead Phone Number"":
			if(FieldValue != null && FieldValue != """")
			{
				var vCurrChar,i = 0;
				var sError= ""Success"";
				var vLegalChars = ""0123456789"";
				var sLenth = 0;
				for (i=0; i < FieldValue.length; i++)
				{
					sLenth = ToNumber(FieldValue.length);
					  vCurrChar = FieldValue.substring(i,i+1);
					  if (vLegalChars.indexOf(vCurrChar,0) < 0)
					  {
						sError = ""Only Numeric Values are allowed."";
						break;
					  }  
				}
				if(sError == ""Success"")
				{
					if(sLenth != 8  && sLenth != 11)
					{
						sError = ""Phone number Should be 11 Digit number,973 followed by 8 numbers. eg:- 973_ _ _ _ _ _ _ _"";
					}
				}
				if(sError != ""Success"")
				{
					appObj.RaiseErrorText(sError);
				}
			}
			break; //[MARK:7-Oct-2019 SD:: Business Products Bulk Activation – Phase II]
			case ""STC Lead CPR"":			
			var sActiveViewName = TheApplication().ActiveViewName();			
				if(FieldValue != null && FieldValue != """")
					{
						if (sActiveViewName == ""STC My Business Leads View"")
						{
						sApplicableVal = FieldValue;
						sApplicableType = ""CR"";
						ValidateID(sApplicableType,sApplicableVal);
						ValidateCR(sApplicableType,sApplicableVal);
						}
					}
				
			
			break;
			//[MARK:7-Oct-2019 SD:: Business Products Bulk Activation – Phase II]
				case ""STC Lead Type"":			
			var sActiveViewName = TheApplication().ActiveViewName();			
			if (sActiveViewName == ""STC My Business Leads View"" && FieldValue !=""Business Lead"")
			{
			appObj.RaiseErrorText(""Business Lead type can not be change"");
			}	
			break;				
				
		} 
		return(ContinueOperation);
	}
	catch(e)
	{ 
		throw(e)
	}
	finally
	{
	}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	var appObj=TheApplication();
	var sApplicableType,sApplicableVal;
	try
	{

		
		switch(FieldName)
		{
			//Abuzar:09102021: SD Telesales WF - Start
			case ""STC Sales Attempt Status"":
			var strActiveView = appObj.ActiveViewName();
			if (strActiveView != null && strActiveView != """")
			{
				if(strActiveView != ""STC My Business Leads View"")
				{
					if(FieldValue != null && FieldValue != """")
					{
						var strSalesCampType = this.GetFieldValue(""STC Sales Campaign Type"");
						var strRejectReason = this.GetFieldValue(""Reject Comment"");
						var dtCallBack = this.GetFieldValue(""STC Customer Call Back Date"");
						//if (strSalesCampType == ""Not Applicable"" || strSalesCampType == """" || strSalesCampType == null)
						if (strSalesCampType == """" || strSalesCampType == null)
							appObj.RaiseErrorText(""Please provide appropriate 'Sales Campaign Type'!"");
						if (FieldValue == ""Rejected"" && (strRejectReason == null || strRejectReason == """"))
							appObj.RaiseErrorText(""Please provide appropriate 'Reject Reason'!"");
						if (FieldValue == ""Call Back Requested"" && (dtCallBack == null || dtCallBack == """"))
							appObj.RaiseErrorText(""Please provide appropriate 'Call Back Date'!"");
					}
				}
			}
			break;
			//Abuzar:09102021: SD Telesales WF - End

			case ""STC Lead Phone Number"":
			if(FieldValue != null && FieldValue != """")
			{
				var vCurrChar,i = 0;
				var sError= ""Success"";
				var vLegalChars = ""0123456789"";
				var sLenth = 0;
				for (i=0; i < FieldValue.length; i++)
				{
					sLenth = ToNumber(FieldValue.length);
					  vCurrChar = FieldValue.substring(i,i+1);
					  if (vLegalChars.indexOf(vCurrChar,0) < 0)
					  {
						sError = ""Only Numeric Values are allowed."";
						break;
					  }  
				}
				if(sError == ""Success"")
				{
					if(sLenth != 8  && sLenth != 11)
					{
						sError = ""Phone number Should be 11 Digit number,973 followed by 8 numbers. eg:- 973_ _ _ _ _ _ _ _"";
					}
				}
				if(sError != ""Success"")
				{
					appObj.RaiseErrorText(sError);
				}
			}
			break; //[MARK:7-Oct-2019 SD:: Business Products Bulk Activation – Phase II]
			case ""STC Lead CPR"":			
			var sActiveViewName = TheApplication().ActiveViewName();			
				if(FieldValue != null && FieldValue != """")
					{
						if (sActiveViewName == ""STC My Business Leads View"")
						{
						sApplicableVal = FieldValue;
						sApplicableType = ""CR"";
						ValidateID(sApplicableType,sApplicableVal);
						ValidateCR(sApplicableType,sApplicableVal);
						}
					}
				
			
			break;
			//[MARK:7-Oct-2019 SD:: Business Products Bulk Activation – Phase II]
				case ""STC Lead Type"":			
			var sActiveViewName = TheApplication().ActiveViewName();			
			if (sActiveViewName == ""STC My Business Leads View"" && FieldValue !=""Business Lead"")
			{
			appObj.RaiseErrorText(""Business Lead type can not be change"");
			}	
			break;				
				
		} 
		return(ContinueOperation);
	}
	catch(e)
	{ 
		throw(e)
	}
	finally
	{
	}
}
function BusComp_PreWriteRecord ()
{
  //Indrasen:13122020: Lead fulfilment SD merging from old UATcode
  var sActiveViewName = TheApplication().ActiveViewName();
  if(sActiveViewName == ""Lead Details View"" || sActiveViewName == ""My Leads View"")
  {
  this.ActivateField(""STC Lead Type"");
  var sLeadType =this.GetFieldValue(""STC Lead Type"");
  this.ActivateField(""Contact Id"");
  var sContactId = this.GetFieldValue(""Contact Id"");
  var FiberLeadType = TheApplication().InvokeMethod(""LookupValue"",""LEAD_CONTACT_TYPE"",""Fiber Lead"");
  if(sContactId == """" && sLeadType == FiberLeadType)
  {
	//  TheApplication().RaiseErrorText(""Contact creation is mandatory to create lead for Fiber."");
  }		
  }
// Start[Hardik17June2020:Order Fullfilment Changes]
  if (sActiveViewName == ""All Leads View"" || sActiveViewName == ""My Leads View"" || sActiveViewName == ""Lead Details View"" || sActiveViewName == ""STC My Assigned Leads View"") // Abuzar: 2Feb21 - Added My Assigned Leads View
		{	
			this.ActivateField(""STC Existing Cust Flag"");
			this.ActivateField(""Account Id"");		
			if(this.GetFieldValue(""STC Existing Cust Flag"") == ""Y"")
			{
					if (this.GetFieldValue(""Account Id"") =="""" || this.GetFieldValue(""Account Id"") == null)
					{
						
						TheApplication().RaiseErrorText(""Please select the valid customer from 'Existing MSISDN' OR enter valid 'Id Number' value"");
					}
			}
	    }
 // End[Hardik17June2020:Order Fullfilment Changes]
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
  //Indrasen:13122020: Lead fulfilment SD merging from old UATcode
  var sActiveViewName = TheApplication().ActiveViewName();
  if(sActiveViewName == ""Lead Details View"" || sActiveViewName == ""My Leads View"")
  {
  this.ActivateField(""STC Lead Type"");
  var sLeadType =this.GetFieldValue(""STC Lead Type"");
  this.ActivateField(""Contact Id"");
  var sContactId = this.GetFieldValue(""Contact Id"");
  var FiberLeadType = TheApplication().InvokeMethod(""LookupValue"",""LEAD_CONTACT_TYPE"",""Fiber Lead"");
  if(sContactId == """" && sLeadType == FiberLeadType)
  {
	//  TheApplication().RaiseErrorText(""Contact creation is mandatory to create lead for Fiber."");
  }		
  }
// Start[Hardik17June2020:Order Fullfilment Changes]
  if (sActiveViewName == ""All Leads View"" || sActiveViewName == ""My Leads View"" || sActiveViewName == ""Lead Details View"" || sActiveViewName == ""STC My Assigned Leads View"") // Abuzar: 2Feb21 - Added My Assigned Leads View
		{	
			this.ActivateField(""STC Existing Cust Flag"");
			this.ActivateField(""Account Id"");		
			if(this.GetFieldValue(""STC Existing Cust Flag"") == ""Y"")
			{
					if (this.GetFieldValue(""Account Id"") =="""" || this.GetFieldValue(""Account Id"") == null)
					{
						
						TheApplication().RaiseErrorText(""Please select the valid customer from 'Existing MSISDN' OR enter valid 'Id Number' value"");
					}
			}
	    }
 // End[Hardik17June2020:Order Fullfilment Changes]

 //Abuzar:09102021: SD Telesale - Start
 var strActiveView = """";
 strActiveView = TheApplication().ActiveViewName();
 if(bNewLead != null && bNewLead != """" && bNewLead == ""Y"")
 {
 	if (strActiveView != null && strActiveView != """")
	{
		if(strActiveView != ""STC My Business Leads View"")
		{
			this.ActivateField(""STC Sales Campaign Type""); //Abuzar:09102021:Telesales SD Start
			var strCampType = this.GetFieldValue(""STC Sales Campaign Type"");
			if (strCampType == """" || strCampType == null)
				TheApplication().RaiseErrorText(""'Sales Campaign Type' is a required field!"");
		}
	}
 }
//Abuzar:09102021: SD Telesale - End

	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{

	var input, output, svcBS, sBSName="""";
	try
	{	

	// Abuzar:31Jan21 Set Global variable to Close Activity when Lead is Rejected or Retired.
	
		if (FieldName == ""Lead Status"")
		{
			this.ActivateField(""Lead Status"");
			var strLeadStatus = this.GetFieldValue(""Lead Status"");
			if((strLeadStatus == ""Rejected"" || strLeadStatus == ""Retired"") && strLeadStatus != null && strLeadStatus != """")
			{
				gLeadRetireReject = ""Y"";
			}

		}
	// Abuzar:31Jan21 Set Global variable to reset Activity SLA when Customer Interaction field is set to not null.
		if (FieldName == ""STC Customer Interaction"")
		{
			this.ActivateField(""STC Customer Interaction"");
			var strCustInteraction = this.GetFieldValue(""STC Customer Interaction"");
			if(strCustInteraction != null && strCustInteraction != """")
			{
				gCustomerInteraction = ""Y"";
			}

		}

		if (FieldName == ""STC Lead Phone Number"")
		{
			var sNumber = this.GetFieldValue(""STC Lead Phone Number"");
			var sLenth = ToNumber(sNumber.length);
			if (sLenth == 8)
			{
				this.ActivateField(""STC Lead Phone Number"");
				this.SetFieldValue(""STC Lead Phone Number"",""973""+sNumber);
				
			}
		}

		//[MANUJ] : [Optic Fiber] -- START
		if (FieldName == ""Account Id"")
		{
			var sActiveViewName = TheApplication().ActiveViewName();
			if(sActiveViewName == ""Lead Details View"" || sActiveViewName == ""My Leads View"" || sActiveViewName == ""STC My Assigned Leads View"") //Abuzar:2Feb21 - Add My Assigned View
			{
			//this.ActivateField(""STC Lead Type"");
			//var sLeadType = this.GetFieldValue(""STC Lead Type"");
			var	sLeadType = TheApplication().GetProfileAttr(""sLeadType"");
			
			var FiberLeadType = TheApplication().InvokeMethod(""LookupValue"",""LEAD_CONTACT_TYPE"",""Fiber Lead"");
			this.ActivateField(""Contact Id"");
			var sContactId = this.GetFieldValue(""Contact Id"");
			this.ActivateField(""Lead Address Id"");
			if(sLeadType == FiberLeadType && sContactId != """")
			{
			var ExistingAccountAddressPicked = TheApplication().GetProfileAttr(""ExistingAccountAddressPicked"");
			var ExistingAccountPriAddrId = TheApplication().GetProfileAttr(""ExistingAccountPriAddrId"");
			//this.ActivateField(""Primary Account Address Id"");
			//var ExistingAccountPriAddrId = this.GetFieldValue(""Primary Account Address Id"");
			if(ExistingAccountAddressPicked == ""Y"" && ExistingAccountPriAddrId != """")
			{

				var LeadAptNo, LeadRoadNo, LeadBlockNo, LeadState,LeadCity,LeadCountry, LeadPCode, LeadBuildNo;
				var CUTAddrBO = TheApplication().GetBusObject(""STC Account Address Thin BO"");
				var CUTAddrBC = CUTAddrBO.GetBusComp(""STC CUT Address Thin"");
				var count = 0;
				with(CUTAddrBC)
				{
				ActivateField(""Account Id"");
				ActivateField(""STC Address Type"");
				ActivateField(""Address Id"");
				ActivateField(""Apartment Number"");
				ActivateField(""STC Road No"");
				ActivateField(""Block No"");
				ActivateField(""State"");
				ActivateField(""City"");
				ActivateField(""Country"");
				ActivateField(""Postal Code"");
				ActivateField(""Building No"");
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(""Address Id"", ExistingAccountPriAddrId);
				ExecuteQuery(ForwardOnly);
				count = CountRecords();
				var isVATAddrAvailable = FirstRecord();
				if(isVATAddrAvailable)
				{
				 LeadAptNo=GetFieldValue(""Apartment Number"");
				 LeadRoadNo=GetFieldValue(""STC Road No"");
				 LeadBlockNo=GetFieldValue(""Block No"");
				 LeadState=GetFieldValue(""State"");
				 LeadCity=GetFieldValue(""City"");
				 LeadCountry=GetFieldValue(""Country"");
				 LeadPCode=GetFieldValue(""Postal Code"");
				 LeadBuildNo=GetFieldValue(""Building No"");
				
				}
				}
				if (count > 0)
				{
					this.SetFieldValue(""Lead Address Id"", ExistingAccountPriAddrId);
					this.SetFieldValue(""STC Lead Building"", LeadBuildNo);
					this.SetFieldValue(""STC Lead City"", LeadCity);
					this.SetFieldValue(""STC Lead Country"", LeadCountry);
					this.SetFieldValue(""STC Lead Flat Number"", LeadAptNo);
					this.SetFieldValue(""STC Lead Governorate"", LeadState);
					this.SetFieldValue(""STC Lead Road Number"", LeadRoadNo);
					this.SetFieldValue(""STC Block No"", LeadBlockNo);
					this.WriteRecord();
				}
			TheApplication().SetProfileAttr(""ExistingAccountAddressPicked"", ""N"");
			TheApplication().SetProfileAttr(""ExistingAccountPriAddrId"", """");
				
			}
			
			}
		}


		}
		//[MANUJ] : [Optic Fiber] -- END

		//if (FieldName == ""STC Lead Plan Name"")
		//[Hardik17June2020:Order Fullfilment Changes]
	    var sActiveViewName = TheApplication().ActiveViewName();
	    if (sActiveViewName == ""All Leads View"" || sActiveViewName == ""My Leads View"" || sActiveViewName == ""Lead Details View"" || sActiveViewName == ""STC My Assigned Leads View"") //Abuzar:2Feb21 - Add My Assigned View
		{			
		if(FieldName != null && FieldName != """")
		{
			if (FieldName == ""STC Existing Cust Flag"")
			{
				try
				{
					var sCustType = TheApplication().InvokeMethod(""LookupValue"",""CUT_ACCOUNT_TYPE"",""Customer"");//ROHITR:23122020:Fulfillment
					this.ActivateField(""Account Id"");
					this.ActivateField(""STC Existing Cust Flag"");
					if((this.GetFieldValue(""STC Existing Cust Flag"") == ""Y"")||(this.GetFieldValue(""Account Id"") == """" || this.GetFieldValue(""Account Id"") == null))
					{
						this.ActivateField(""STC Lead CPR"");
						var vCPR = this.GetFieldValue(""STC Lead CPR"");
						if(vCPR != null && vCPR != """")
						{
							var vBO = TheApplication().GetBusObject(""Account"");
							var vBC = vBO.GetBusComp(""Account"");
							with(vBC)
							{
								ActivateField(""Tax ID Number"");
								ActivateField(""Account Type Code"");
								ActivateField(""Primary Contact Id""); //Abuzar:09102021:SD Telesales - Autopopulate Contact
								ClearToQuery();
								SetViewMode(AllView);
								SetSearchSpec(""Tax ID Number"", this.GetFieldValue(""STC Lead CPR""));
								SetSearchSpec(""Account Type Code"", sCustType);//ROHITR:23122020:Fulfillment
								ExecuteQuery(ForwardOnly);
								if(FirstRecord())
								{
									
									// Abuzar:09102021:SD Telesales - Autopopulate Contact - Start
									var primConId = GetFieldValue(""Primary Contact Id"");
									var AccId =  GetFieldValue(""Master Account Id"");
									this.ActivateField(""Contact Id"");
									var LeadConId = this.GetFieldValue(""Contact Id"");
									if(primConId != null && primConId != """" && AccId != """" && AccId != null && (LeadConId == """" || LeadConId == null))
									{
										PickLeadContact(primConId);
									}
									// Abuzar:09102021:SD Telesales - Autopopulate Contact - End
									this.SetFieldValue(""Account Id"",GetFieldValue(""Master Account Id""));
								}
								else
								{
								 TheApplication().RaiseErrorText(""Customer doesn’t exists.Please uncheck the Existing Cust Flag"");
								}
							}//with
						}
					}//if((
				}
				catch(e)
				{	throw(e);
				}
				finally
				{}
			}
			if(FieldName == ""STC Lead Plan Name Id"")
			{
				try
				{
					this.ActivateField(""STC Lead Plan PartNum"");
					this.ActivateField(""STC Lead Plan Type"");
					input = TheApplication().NewPropertySet();
					output = TheApplication().NewPropertySet();
					var PlanPart = this.GetFieldValue(""STC Lead Plan PartNum"");
					var Plantype = this.GetFieldValue(""STC Lead Plan Type"");
					var LOVType ="""";
					var PlanMRC = 0;
					//PlanMRC = TheApplication().InvokeMethod(""LookupValue"",""STC_VREV_PLAN_MRC"",PlanPart);
					PlanMRC = this.GetFieldValue(""STC Lead Plan MRC""); 
					input.SetProperty(""LOV Type"",""PLAN_LEVEL_CATEGORY"");
					if(Plantype == ""Voice"")
					{
						LOVType	= ""PLAN_LEVEL_CATEGORY"";
					}
					else
					{
						LOVType	= ""PLAN_LEVEL_CATEGORY_BB"";
					}
					
					SetPlanLevel(LOVType,PlanMRC);
				}
				catch(e)
				{ throw(e);
				}
				finally
				{}
			}
		}
		if(FieldName == ""STC Plan Device Name Id"") //Indrasen:12Jul2020 : added for Dispatch order Fulfillemtn Lead flow enhancement
		{
			 if(this.GetFieldValue(""STC Plan Device Name Id"") !=null)
			 {
				this.WriteRecord();
			 }
		}
		if(FieldName == ""STC Plan Device Name"") //Indrasen:12Jul2020 : added for Dispatch order Fulfillemtn Lead flow enhancement
		{
			 if(this.GetFieldValue(""STC Plan Device Name"") !=null)
			 {
				 this.ActivateField(""STC Accnt New Line"");
				 this.ActivateField(""STC Plan Device DI"");
				 this.ActivateField(""Account Id"");
				 this.ActivateField(""STC Existing Cust Flag"");
				 this.ActivateField(""Contact Id"");
				 this.ActivateField(""STC Lead Birth Date"");
				 this.ActivateField(""STC Lead CPR"");
				 this.ActivateField(""STC Lead ID Type"");
				 this.ActivateField(""STC Lead Nationality"");
				 this.ActivateField(""STC Lead Current Occupation"");				 
				 var NewFlineFlag = this.GetFieldValue(""STC Accnt New Line"");
				 var DIAmount = this.GetFieldValue(""STC Plan Device DI"");
				 var AccntId = this.GetFieldValue(""Account Id"");
				 var DeviceId = this.GetFieldValue(""STC Plan Device Name Id"");
				 var ExistingCust = this.GetFieldValue(""STC Existing Cust Flag"");
				 var ContactId = this.GetFieldValue(""Contact Id"");
				 var DateOfBirth = this.GetFieldValue(""STC Lead Birth Date"");
				 var CPR = this.GetFieldValue(""STC Lead CPR"");
				 var IdType =	this.GetFieldValue(""STC Lead ID Type"");
				 var vNationality = this.GetFieldValue(""STC Lead Nationality"");
				 var Occupation = this.GetFieldValue(""STC Lead Current Occupation"");
				
				 CallAgeonNetwork(NewFlineFlag,DIAmount,AccntId,DeviceId,ExistingCust,ContactId,DateOfBirth,CPR,vNationality,Occupation);
			 }
		
		 }
	}//ActiveView End [Hardik17June2020:Order Fullfilment Changes]

		return(ContinueOperation);
	}
	catch(e)
	{
	throw(e)
	}
	finally
	{
		input = null; output = null; svcBS = null;
	}
}
function BusComp_WriteRecord ()
{
/* Abuzar:27Jan2021 - To Call Lead Assignment Manager on Lead Write New Record */
try{
	var appobj;
	var sWfSvc;
	var psInputs;
	var psOutputs;
	var strActiveView = """";
	strActiveView = TheApplication().ActiveViewName();
 if(bNewLead != null && bNewLead != """" && bNewLead == ""Y"")
 {
 	if (strActiveView != null && strActiveView != """")
	{
		if(strActiveView != ""STC My Business Leads View"")
		{
			appobj = TheApplication();
			sWfSvc = appobj.GetService(""Workflow Process Manager"");
			psInputs  = appobj.NewPropertySet();
			psOutputs  = appobj.NewPropertySet();
			psInputs.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
			psInputs.SetProperty(""ProcessName"",""STC Assign Lead WF"");	
			sWfSvc.InvokeMethod(""RunProcess"", psInputs, psOutputs);
			bNewLead = ""N"";
		}
	}
 }
 /*Abuzar:31Jan2021 - Close Activity if Lead is Reitred or Rejected */
 if(gLeadRetireReject == ""Y"" && gLeadRetireReject != null && gLeadRetireReject != """")
 {
	if (strActiveView != null && strActiveView != """" && strActiveView != ""STC My Business Leads View"")
	{
			appobj = TheApplication();
			sWfSvc = appobj.GetService(""Workflow Process Manager"");
			psInputs  = appobj.NewPropertySet();
			psOutputs  = appobj.NewPropertySet();
			psInputs.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
			psInputs.SetProperty(""ProcessName"",""STC Lead Activity Cancel WF"");	
			sWfSvc.InvokeMethod(""RunProcess"", psInputs, psOutputs);
			gLeadRetireReject = ""N"";
	}
	
 }
 //gCustomerInteraction
 /*Abuzar:31Jan2021 - Reset Activity SLA if Customer Interaction is set on Lead */
 if(gCustomerInteraction == ""Y"" && gCustomerInteraction != null && gCustomerInteraction != """")
 {
	if (strActiveView != null && strActiveView != """" && strActiveView != ""STC My Business Leads View"")
	{
			appobj = TheApplication();
			sWfSvc = appobj.GetService(""Workflow Process Manager"");
			psInputs  = appobj.NewPropertySet();
			psOutputs  = appobj.NewPropertySet();
			psInputs.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
			psInputs.SetProperty(""ProcessName"",""STC Reset Activity SLA WF"");	
			sWfSvc.InvokeMethod(""RunProcess"", psInputs, psOutputs);
			gCustomerInteraction = ""N"";
	}
	
 }

}
catch(e){
}
finally{
psOutputs=null;
psInputs=null;
sWfSvc=null;
appobj=null;
}
}
function BusComp_WriteRecord ()
{
/* Abuzar:27Jan2021 - To Call Lead Assignment Manager on Lead Write New Record */
try{
	var appobj;
	var sWfSvc;
	var psInputs;
	var psOutputs;
	var strActiveView = """";
	strActiveView = TheApplication().ActiveViewName();
 if(bNewLead != null && bNewLead != """" && bNewLead == ""Y"")
 {
 	if (strActiveView != null && strActiveView != """")
	{
		if(strActiveView != ""STC My Business Leads View"")
		{
			this.ActivateField(""STC Sales Campaign Type""); //Abuzar:09102021:Telesales SD Start
			this.ActivateField(""STC Source""); 
			var strCampType = this.GetFieldValue(""STC Sales Campaign Type"");
			var strLeadSource = this.GetFieldValue(""STC Source"");
			appobj = TheApplication();
		
			if (strLeadSource == ""CRM"" && strLeadSource != """" && strLeadSource != null)
			{
				if(strCampType != null && strCampType != """" && strCampType == ""Not Applicable"") //Abuzar:09102021:Telesales SD End
				{
					sWfSvc = appobj.GetService(""Workflow Process Manager"");
					psInputs  = appobj.NewPropertySet();
					psOutputs  = appobj.NewPropertySet();
					psInputs.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
					psInputs.SetProperty(""ProcessName"",""STC Assign Lead WF"");	
					sWfSvc.InvokeMethod(""RunProcess"", psInputs, psOutputs);
					bNewLead = ""N"";
				}
			}
			else
			{
				sWfSvc = appobj.GetService(""Workflow Process Manager"");
				psInputs  = appobj.NewPropertySet();
				psOutputs  = appobj.NewPropertySet();
				psInputs.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
				psInputs.SetProperty(""ProcessName"",""STC Assign Lead WF"");	
				sWfSvc.InvokeMethod(""RunProcess"", psInputs, psOutputs);
				bNewLead = ""N"";
			}			
		}
	}
 }
 /*Abuzar:31Jan2021 - Close Activity if Lead is Reitred or Rejected */
 if(gLeadRetireReject == ""Y"" && gLeadRetireReject != null && gLeadRetireReject != """")
 {
	if (strActiveView != null && strActiveView != """" && strActiveView != ""STC My Business Leads View"")
	{
			appobj = TheApplication();
			sWfSvc = appobj.GetService(""Workflow Process Manager"");
			psInputs  = appobj.NewPropertySet();
			psOutputs  = appobj.NewPropertySet();
			psInputs.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
			psInputs.SetProperty(""ProcessName"",""STC Lead Activity Cancel WF"");	
			sWfSvc.InvokeMethod(""RunProcess"", psInputs, psOutputs);
			gLeadRetireReject = ""N"";
	}
	
 }
 //gCustomerInteraction
 /*Abuzar:31Jan2021 - Reset Activity SLA if Customer Interaction is set on Lead */
 if(gCustomerInteraction == ""Y"" && gCustomerInteraction != null && gCustomerInteraction != """")
 {
	if (strActiveView != null && strActiveView != """" && strActiveView != ""STC My Business Leads View"")
	{
			appobj = TheApplication();
			sWfSvc = appobj.GetService(""Workflow Process Manager"");
			psInputs  = appobj.NewPropertySet();
			psOutputs  = appobj.NewPropertySet();
			psInputs.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
			psInputs.SetProperty(""ProcessName"",""STC Reset Activity SLA WF"");	
			sWfSvc.InvokeMethod(""RunProcess"", psInputs, psOutputs);
			gCustomerInteraction = ""N"";
	}
	
 }

}
catch(e){
//throw(e);
}
finally{
psOutputs=null;
psInputs=null;
sWfSvc=null;
appobj=null;
}
}
function CallAgeonNetwork(NewFlineFlag,DIAmount,AccntId,DeviceId,ExistingCust,ContactId,DateOfBirth,CPR,vNationality,Occupation)
{
	//function CallAgeonNetwork(NewFlineFlag,DIAmount,AccntId,DeviceId)
	var NuOfInstall="""";
	var svcBS="""",input="""",output,ErrMsg = """",NewDeviceFlag="""",DevAllowed="""",ContractElig="""",AccAllowed="""";
	var EmployerCategory="""",Nationality="""",SystemOccupation="""",OccupationCategory="""",AON="""",BadPayeeStatus = """";
	var ExperianFlag ="""",EliteStatus="""",CustomerAge="""",DeviceRRP="""";
	var AdvancePayAmount="""";
	
	try
	{
		
		if (ExistingCust == ""N"")
		{
			if(ContactId != null && ContactId != """")
			{
				
					
				input = TheApplication().NewPropertySet();
				output = TheApplication().NewPropertySet();
				input.SetProperty(""BirthDate"", DateOfBirth);
				input.SetProperty(""Nationality"", vNationality);
				input.SetProperty(""CardOccupation"", Occupation);
				//input.SetProperty(""CPR"", CPR);
				input.SetProperty(""Device Id"",DeviceId);
				//input.SetProperty(""EshopFlag"",""Y"");
				svcBS = TheApplication().GetService(""STC Customer Age on Network BS"");
				svcBS.InvokeMethod(""AgeOnNetwork_New"",input, output);
				NewDeviceFlag = output.GetProperty(""NewDeviceFlag"");
				DevAllowed = output.GetProperty(""DevAllowed"");
				ContractElig = output.GetProperty(""ContractElig"");
				AccAllowed =  output.GetProperty(""AccAllowed"");
				NuOfInstall = output.GetProperty(""NumOfInstalment"");
			
				EmployerCategory= output.GetProperty(""EmployerCategory"");
				SystemOccupation = output.GetProperty(""SystemOccupation"");
				OccupationCategory = output.GetProperty(""Occupation Category"");
				AON = output.GetProperty(""AON"");
				BadPayeeStatus = output.GetProperty(""Bad Payee Status"");
				EliteStatus = output.GetProperty(""Elite Status"");
				CustomerAge = output.GetProperty(""Customer Age"");
				DeviceRRP = output.GetProperty(""DeviceRRP"");
				ExperianFlag = output.GetProperty(""ExperianFlag"");
				
				if(ToNumber(NuOfInstall) >0)
			   {
				
				 AdvancePayAmount = ToNumber(NuOfInstall)*ToNumber(DIAmount);
				this.ActivateField(""STC Plan Device Advance Pay"");
				this.SetFieldValue(""STC Plan Device Advance Pay"", AdvancePayAmount);
				
			   }

			}
			
			//NuOfInstall = 1;
		}
		else
		{
				if(AccntId == null || AccntId == """")
					TheApplication().RaiseErrorText(""Please associate an Account to this Lead to procedd with Device Eligibility check"");
				input = TheApplication().NewPropertySet();
				output = TheApplication().NewPropertySet();
				input.SetProperty(""AccountId"", AccntId);
				input.SetProperty(""Device Id"",DeviceId);
				//input.SetProperty(""EshopFlag"",""Y"");
				svcBS = TheApplication().GetService(""STC Customer Age on Network BS"");
				svcBS.InvokeMethod(""AgeOnNetwork_New"",input, output);
				NewDeviceFlag = output.GetProperty(""NewDeviceFlag"");
				DevAllowed = output.GetProperty(""DevAllowed"");
				ContractElig = output.GetProperty(""ContractElig"");
				AccAllowed =  output.GetProperty(""AccAllowed"");
				NuOfInstall = output.GetProperty(""NumOfInstalment"");
				Nationality = output.GetProperty(""Nationality"");
				EmployerCategory= output.GetProperty(""EmployerCategory"");
				SystemOccupation = output.GetProperty(""SystemOccupation"");
				OccupationCategory = output.GetProperty(""Occupation Category"");
				AON = output.GetProperty(""AON"");
				BadPayeeStatus = output.GetProperty(""Bad Payee Status"");
				EliteStatus = output.GetProperty(""Elite Status"");
				CustomerAge = output.GetProperty(""Customer Age"");
				DeviceRRP = output.GetProperty(""DeviceRRP"");
				ExperianFlag = output.GetProperty(""ExperianFlag"");
				
		 
			if(ToNumber(NuOfInstall) >0)
			{
				 AdvancePayAmount = ToNumber(NuOfInstall)*ToNumber(DIAmount);
				this.ActivateField(""STC Plan Device Advance Pay"");
				this.SetFieldValue(""STC Plan Device Advance Pay"", AdvancePayAmount);
				
			}
		}
    this.WriteRecord();
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{

	}
}
function PickLeadContact(ContactId)
{
try{
	this.ActivateField(""Contact Last Name"");	
	var pickBC = this.GetPicklistBusComp(""Contact Last Name"");
	if (ContactId != null && ContactId != """")
	{
		with(pickBC)
		{
			//ActivateField();
			ClearToQuery();
			SetViewMode(AllView);			
			SetSearchSpec(""Id"", ContactId)
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				Pick();
			}
			
		}
	}
}
catch(e){
//throw(e);
}
finally{
}

	
}
function SetPlanLevel(LOVType,PlanMRC)
{
	try
	{
	
		   var ListBO = TheApplication().GetBusObject(""List Of Values"");
		   var ListBC = ListBO.GetBusComp(""List Of Values"");
		   var vType = LOVType;
		   var vPlanMRC = PlanMRC;
		   var vDisplayValue ="""";
		   var vLangIndptCode ="""";
		   var vDescription ="""";
		   var vTargetHigh = 0;
		   var vTargetLow ="""";
		   var vHigh ="""";
		   var vLow ="""";
		   var vParentLIC ="""";  
		   var vDesc="""";    
		   with(ListBC)
		   {
		   ActivateField(""Type""); //Type
		   ActivateField(""Active"");
		   ActivateField(""Value""); //Display Value
		   ActivateField(""Name""); //Language Independent Code
		   ActivateField(""Parent""); // Parent LIC
		   ActivateField(""High""); // High
		   ActivateField(""Low""); // Low
		   ActivateField(""Target High""); // Target High
		   ActivateField(""Target Low""); // Target Low
		   ActivateField(""Description"");// Description
		   SetViewMode(AllView);
		   ClearToQuery();
		   var vSeachExpr = ""[Type] = '""+vType+""' AND [Target High] IS NOT NULL AND [Active]='Y'"";
		 
		   //SetSearchSpec(""Target High"",);
		   SetSearchExpr(vSeachExpr);
		   ExecuteQuery(ForwardOnly);
		   var isRecord = FirstRecord();
		   while(isRecord)
		   {
			    vType = GetFieldValue(""Type"");
			    vDisplayValue = GetFieldValue(""Value"");
			    vLangIndptCode = GetFieldValue(""Name"");
				vTargetLow = GetFieldValue(""Target Low"");
			    vTargetHigh = GetFieldValue(""Target High"");
		
				
				if ((ToNumber(vTargetHigh) >= ToNumber(vPlanMRC)) && (vTargetHigh !=null && vTargetHigh!="""") && (ToNumber(vTargetLow) <= ToNumber(vPlanMRC)))
				{
					
					this.ActivateField(""STC Plan Level"");
					this.SetFieldValue(""STC Plan Level"",vDisplayValue);
					this.WriteRecord();
					
				}
			    
		    
		      isRecord = NextRecord();
		   }
		}
    } //try
	catch(e)
	{
		throw(e);
	}
	finally
	{
		ListBC="""";
		ListBO="""";

	}
}
"
function SetPlanLevel(LOVType,PlanMRC)
{
	try
	{
	
		   var ListBO = TheApplication().GetBusObject(""List Of Values"");
		   var ListBC = ListBO.GetBusComp(""List Of Values"");
		   var vType = LOVType;
		   var vPlanMRC = PlanMRC;
		   var vDisplayValue ="""";
		   var vLangIndptCode ="""";
		   var vDescription ="""";
		   var vTargetHigh = 0;
		   var vTargetLow ="""";
		   var vHigh ="""";
		   var vLow ="""";
		   var vParentLIC ="""";  
		   var vDesc="""";    
		   with(ListBC)
		   {
		   ActivateField(""Type""); //Type
		   ActivateField(""Active"");
		   ActivateField(""Value""); //Display Value
		   ActivateField(""Name""); //Language Independent Code
		   ActivateField(""Parent""); // Parent LIC
		   ActivateField(""High""); // High
		   ActivateField(""Low""); // Low
		   ActivateField(""Target High""); // Target High
		   ActivateField(""Target Low""); // Target Low
		   ActivateField(""Description"");// Description
		   SetViewMode(AllView);
		   ClearToQuery();
		   var vSeachExpr = ""[Type] = '""+vType+""' AND [Target High] IS NOT NULL AND [Active]='Y'"";
		 
		   //SetSearchSpec(""Target High"",);
		   SetSearchExpr(vSeachExpr);
		   ExecuteQuery(ForwardOnly);
		   var isRecord = FirstRecord();
		   while(isRecord)
		   {
			    vType = GetFieldValue(""Type"");
			    vDisplayValue = GetFieldValue(""Value"");
			    vLangIndptCode = GetFieldValue(""Name"");
				vTargetLow = GetFieldValue(""Target Low"");
			    vTargetHigh = GetFieldValue(""Target High"");
		
				
				if ((ToNumber(vTargetHigh) >= ToNumber(vPlanMRC)) && (vTargetHigh !=null && vTargetHigh!="""") && (ToNumber(vTargetLow) <= ToNumber(vPlanMRC)))
				{
					
					this.ActivateField(""STC Plan Level"");
					this.SetFieldValue(""STC Plan Level"",vDisplayValue);
					this.WriteRecord();
					
				}
			    
		    
		      isRecord = NextRecord();
		   }
		}
    } //try
	catch(e)
	{
		throw(e);
	}
	finally
	{
		ListBC="""";
		ListBO="""";

	}
}
"
function ValidateCR(sApplicableType,sApplicableVal)
{
	var sApps = TheApplication();
	var sAccountBO,sAccountBC;
	var sSearchExpr;
	var icode;
	var CRNumLen = 0;
	var CRNumRegLen = 0;
	var Delim = ""/"";
	var sErrorMsg = """";
	var sErrorCode = """";
	var sIDLen = """";
	var i,j,k;
	try
	{
		if(sApplicableType == ""CR"")
		{
 		if (sApplicableVal != """" && sApplicableVal != null)
   			{
			var IdIndex = sApplicableVal.indexOf(""/"",0);
			var SDArr = sApplicableVal.split(Delim);
	
		if(IdIndex == -1)
		{
				sApps.RaiseErrorText(""Please enter valid CR number."");
		} 
				else if(IdIndex != -1)
				{
			 	var CRNum = SDArr[0];
				var CRNumReg = SDArr[1];
				 sIDLen = sApplicableVal.length;
				 CRNumLen = CRNum.length;
				 CRNumRegLen = CRNumReg.length;
		}
		if(sIDLen != """" || sIDLen != null)
		{
        	 if(sIDLen != ""10"")
			{
				sApps.RaiseErrorText(""CR Number format should be Seven Digits followed by forward slash and followed by two digits."");
			}


			else if(CRNumLen != ""7"")
			{
			sApps.RaiseErrorText(""CR Number should contain 7 digits before forward slash."");

			} 
			
				else if(CRNumRegLen != ""2"")
				{
				sApps.RaiseErrorText(""CR Number should contain 2 digits after forward slash."");

				}	

     else if(sIDLen == ""10"" && IdIndex != -1)
     {
			 CRNumLen = CRNum.length;
		if(CRNum != """" && CRNum != null)
		{
			for (i =0;i<CRNum.length;i++)
			{
				icode = CRNum.charCodeAt(i);
			
				if (!((icode >= 48) && (icode <=57)))
				{
				sApps.RaiseErrorText(""First 7 characters should be numeric."");
					break;
				}
			}//end For
			}
		if(CRNumReg != """" && CRNumReg != null)
     	CRNumRegLen = CRNumReg.length;
			for (i =0;i<CRNumReg.length;i++)
			{
				icode = CRNumReg.charCodeAt(i);
				
				if (!((icode >= 48) && (icode <=57)))
				{
				sApps.RaiseErrorText(""Last 2 characters should be numeric."");
					break;
				}
			}//end For   
		}	
     }        

   }  
}

	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		sApps = null;
		sAccountBC = null;
		sAccountBO = null;
	}
}
function ValidateID(sApplicableType,sApplicableVal)
{
	var sApps;
	var sAccountBO,sAccountBC;
	var sSearchExpr;
	var msAccType;
	var sleadBC;
	var sLeadBO;
	 msAccType == TheApplication().InvokeMethod(""LookupValue"",""STC_LEAD_CUST_TYPE"",""SME"");
	 msAccType == TheApplication().InvokeMethod(""LookupValue"",""STC_LEAD_CUST_TYPE"",""Corporate"");
		try
	{
		sApps = TheApplication();
		sAccountBO = sApps.GetBusObject(""STC Account Thin BO"");
		sAccountBC = sAccountBO.GetBusComp(""STC Account Thin"");
		sLeadBO = TheApplication().GetBusObject(""Lead"");
		sleadBC = sLeadBO.GetBusComp(""Lead"");	
		
		with(sAccountBC)
		{	sSearchExpr=null;
			ActivateField(""Tax ID Number"");
			ActivateField(""DUNS Number"");
			ActivateField(""Account Status"");
			ActivateField(""Account Type Code"");
			ClearToQuery();
			SetViewMode(AllView);
			if (sApplicableType == ""CPR"" || sApplicableType == ""CR"")
			{
				sSearchExpr = ""[Tax ID Number] = '""+sApplicableVal+""' AND ([Account Status] = 'Active' OR [Account Status] = 'New')"";
			}
			SetSearchExpr(sSearchExpr);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				sApps.RaiseErrorText(""Enter CR number is already exist in system."",sApplicableType,sApplicableVal);
			}

		with(sleadBC)
			{
				sSearchExpr=null;
			ActivateField(""STC Lead CPR"");
			ActivateField(""STC Lead Cust Type"");
			//ActivateField(""Account Status"");
		//	ActivateField(""Account Type Code"");
			ClearToQuery();
			SetViewMode(AllView);
			if (sApplicableType == ""CPR"" || sApplicableType == ""CR"")
			{
				sSearchExpr = ""[STC Lead CPR] = '""+sApplicableVal+""' AND [Account Id] IS NOT NULL"";
			}
			SetSearchExpr(sSearchExpr);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				sApps.RaiseErrorText(""Enter CR number is already exist in Lead system."",sApplicableType,sApplicableVal);
			}
			}


		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		sApps = null;
		sAccountBC = null;
		sAccountBO = null;
		sleadBC = null;
		sLeadBO = null;
	}
}
function ValidateID(sApplicableType,sApplicableVal)
{
	var sApps;
	var sAccountBO,sAccountBC;
	var sSearchExpr;
	var msAccType;
	var sleadBC;
	var sLeadBO;
	 msAccType == TheApplication().InvokeMethod(""LookupValue"",""STC_LEAD_CUST_TYPE"",""SME"");
	 msAccType == TheApplication().InvokeMethod(""LookupValue"",""STC_LEAD_CUST_TYPE"",""Corporate"");
		try
	{
		sApps = TheApplication();
		sAccountBO = sApps.GetBusObject(""STC Account Thin BO"");
		sAccountBC = sAccountBO.GetBusComp(""STC Account Thin"");
		sLeadBO = TheApplication().GetBusObject(""Lead"");
		sleadBC = sLeadBO.GetBusComp(""Lead"");	
		
		with(sAccountBC)
		{	sSearchExpr=null;
			ActivateField(""Tax ID Number"");
			ActivateField(""DUNS Number"");
			ActivateField(""Account Status"");
			ActivateField(""Account Type Code"");
			ClearToQuery();
			SetViewMode(AllView);
			if (sApplicableType == ""CPR"" || sApplicableType == ""CR"")
			{
				sSearchExpr = ""[Tax ID Number] = '""+sApplicableVal+""' AND ([Account Status] = 'Active' OR [Account Status] = 'New')"";
			}
			SetSearchExpr(sSearchExpr);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				sApps.RaiseErrorText(""Enter CR number is already exist in system."",sApplicableType,sApplicableVal);
			}

		with(sleadBC)
			{
				sSearchExpr=null;
			ActivateField(""STC Lead CPR"");
			ActivateField(""STC Lead Cust Type"");
			//ActivateField(""Account Status"");
		//	ActivateField(""Account Type Code"");
			ClearToQuery();
			SetViewMode(AllView);
			if (sApplicableType == ""CPR"" || sApplicableType == ""CR"")
			{
				sSearchExpr = ""[STC Lead CPR] = '""+sApplicableVal+""' AND [Account Id] IS NOT NULL"";
			}
			SetSearchExpr(sSearchExpr);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				sApps.RaiseErrorText(""Enter CR number is already exist in Lead system."",sApplicableType,sApplicableVal);
			}
			}


		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		sApps = null;
		sAccountBC = null;
		sAccountBO = null;
		sleadBC = null;
		sLeadBO = null;
	}
}
function BusComp_NewRecord ()
{
		var sViewName = TheApplication().ActiveViewName();
		if(sViewName == ""Prospects List View"")
		{
			this.ActivateField(""Source Type"");
			this.SetFieldValue(""Source Type"",TheApplication().InvokeMethod(""LookupValue"",""LISTMGMT_SOURCE_TYPE"",""Call Center""));
			
		}//end of if view	
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	var sMesg = """";	
	var semailAddr;
	var sfirstChar;
	var slastChar;
	var sNot_First_Last;
	var srequiredChars;
	var sillegalChars;
	var scurrent_char;
	var iIndex;
	var ipindex;
	var sMessg;
	var sErrorMsg;
	var sErrorCode;
   
   	var i;
   	var AppObj = TheApplication();

	switch(FieldName)

    {   
    case ""Email Address"":
    	var sEmailId = FieldValue;	
		if(sEmailId != """" && sEmailId != null && sEmailId != ""NA"" && sEmailId != ""na"")
		{
			   semailAddr = sEmailId;
			   sfirstChar = semailAddr.substring(0,1);
			   slastChar = semailAddr.substring(semailAddr.length-1,semailAddr.length);
			   sNot_First_Last = ""@."";
			   srequiredChars = "".@"";
			   sillegalChars = "",:; <>[]{}!£$%^*()#/+~|"";
			   iIndex = semailAddr.indexOf(""@"");
			   ipindex = semailAddr.lastIndexOf(""."");
			   
			    if (semailAddr.length < 6)
			    {
			    	sMesg = ""Error"";
			   	 AppObj.RaiseErrorText(""Invalid Email format. Please recheck."");
				 }
				 else if (sNot_First_Last.indexOf(sfirstChar,0) != -1)
				 {
					  sMesg = ""Error"";
					  AppObj.RaiseErrorText(""Invalid Email format. Please recheck."");
				 }
				 else if (sNot_First_Last.indexOf(slastChar,0) != -1)
                 {
							sMesg = ""Error"";
		                  AppObj.RaiseErrorText(""Invalid Email format. Please recheck."");
				 }
				 else if(iIndex > ipindex)
				 { 
				 	sMesg = ""Error"";
					  AppObj.RaiseErrorText(""Invalid Email format. Please recheck."");
				 }
                 else if (sMesg == """")
                 {
                       //Process Required Chars
                       for (i=0;i<srequiredChars.length;i++)
                       {
                             scurrent_char = srequiredChars.substring(i,i+1);
                             if (semailAddr.indexOf(scurrent_char,0) == -1)
                             {
	                              AppObj.RaiseErrorText(""Invalid Email format. Please recheck."");
					               break;
			             	 }
			           }  	 
			           
			            for (i=0;i<sillegalChars.length;i++)
                       {
                              scurrent_char = sillegalChars.substring(i,i+1);
                              if (semailAddr.indexOf(scurrent_char,0) != -1)
                              {
	                               AppObj.RaiseErrorText(""Invalid Email format. Please recheck."");
					                break;
				              }  
				        }
			     }
			                  
		     	}//if(sEmailId != """" && sEmailId != null)
	break;
	
	
	   default : 
         break;
         
         
	}// end of switch
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
	
}
"//Your public declarations go here... 
var vTotalflg = ""N"";"
function BusComp_SetFieldValue (FieldName)
{
if (FieldName == ""Total Requested"")
{
 vTotalflg = ""Y"";
}

}
function BusComp_WriteRecord ()
{

try
{
if(vTotalflg == ""Y"")
{
		this.ActivateField(""Approval Level"");
		this.ActivateField(""Total Requested Calc"");
        var vTotal = this.GetFieldValue(""Total Requested Calc"");
  
		var svc1:Service = TheApplication().GetService(""STC Campaign Budget Approval"");
		var Input:PropertySet = TheApplication().NewPropertySet();
		var Output:PropertySet = TheApplication().NewPropertySet();
		
		Input.SetProperty(""RequestedAmount"",vTotal); // Input Agruments
		
		svc1.InvokeMethod(""BudgetApproval"", Input, Output);  
        //this.InvokeMethod(""RefreshRecord"");

		var vLevel = Output.GetProperty(""vAppLevel"");
		this.SetFieldValue(""Approval Level"",vLevel);

		vTotalflg = ""N"";
}
}

catch(e)
{
throw(e);
}

finally
{
}
return (ContinueOperation);

}
function BusComp_NewRecord ()
{
 try
 {
    var appObj = TheApplication();
    var oParentBusObj = this.BusObject();
    var oParentBusComp;
    var oAssocBusComp;
    var strParentBusObj = oParentBusObj.Name();
    var strAccountId;

    switch(strParentBusObj)
    {

       case ""Order Entry (Sales)"":
                oParentBusComp = oParentBusObj.GetBusComp(""Order Entry - Orders"");
	        	strAccountId = oParentBusComp.GetFieldValue(""Billing Account Id"");
	        	if (strAccountId != """")
	        	{
                       // get the AssocBc for the Account Field in Contact
		        	oAssocBusComp = this.GetMVGBusComp(""Account"").GetAssocBusComp();
		      	     with (oAssocBusComp)
		        	{
		      	    	SetViewMode(AllView);
			        	ActivateField(""Id"");
			    		ClearToQuery();
			    		SetSearchSpec(""Id"", strAccountId);
			    		ExecuteQuery(ForwardOnly);
			    		Associate(NewAfter);
		    	     }
				}			
	        	break;
       default:
	        	break;
    }
   } 
    catch(e)
    {
	      throw e;
    }

    finally
     {
     
	oAssocBusComp = null;
	oParentBusComp = null;
	oParentBusObj = null;
	strAccountId = null;
	appObj = null;

     }

}
function BusComp_PreWriteRecord ()
{

 var sViewName;
 var psInputs;
 var psOutputs;
 var appObj;
 try
{
		appObj = TheApplication();
		sViewName = appObj.ActiveViewName();
		if(sViewName == ""Order Entry - Line Items Detail View (Sales)"" || sViewName == ""STC Billing Account Detail - Contacts View"" || sViewName == ""Account Detail - Contacts View"")
		{   
		
		psInputs = appObj.NewPropertySet();
		with(psInputs)
		{
		   SetProperty(""FirstName"",this.GetFieldValue(""First Name""));
		   SetProperty(""MiddleName"",this.GetFieldValue(""Middle Name""));
		   SetProperty(""LastName"",this.GetFieldValue(""Last Name""));
		  // SetProperty(sMotherMaidenName,this.GetFieldValue(""Mother Maiden Name""));
		   SetProperty(""Phone"",this.GetFieldValue(""Work Phone #""));
		   SetProperty(""EmailId"",this.GetFieldValue(""Email Address""));
		 //  SetProperty(sMobile,this.GetFieldValue(""Cellular Phone #""));
		   SetProperty(""DateOfBirth"",this.GetFieldValue(""Birth Date""));
		 //  SetProperty(sTitle,this.GetFieldValue(""M/M""));
		  //SetProperty(sMaritalStatus,this.GetFieldValue(""Marital Status""));
		 //  SetProperty(sGender,this.GetFieldValue(""M/F""));
		   SetProperty(""IDType"",this.GetFieldValue(""STC ID Type""));
		   SetProperty(""ID"",this.GetFieldValue(""STC ID #""));
		  // SetProperty(""IDExpiryDate"",this.GetFieldValue(""ID Expiry Date""));
	    }  
		 
		 psOutputs = appObj.NewPropertySet();
		 ValidateCustomerDetails(psInputs,psOutputs);
		} 
		
		var isNewRecord = this.InvokeMethod(""IsNewRecordPending"");
		if(isNewRecord == ""TRUE"" && TheApplication().GetProfileAttr(""ApplicationName"") == ""Siebel eChannel for CME"")
		{
			this.SetFieldValue(""SSA Primary Field"",""Y"");
		}
		return (ContinueOperation);
	 }
	 
	 catch(e)
	 {
		//TheApplication().RaiseErrorText(e.errText);
		throw(e);
	 }
	 finally
	 {
	 }
}
function ValidateCustomerDetails(psInputs,psOutputs)
{
	var appObj;
	var bsValidCustomer;
	var sErrorCode;
	var sErrorMsg;
	try
	{
		appObj = TheApplication();
		with(appObj)
		{
			bsValidCustomer = GetService(""STC New Contact Validation"");
			bsValidCustomer.InvokeMethod(""ValidateCustomer"",psInputs, psOutputs);
		
			sErrorCode = psOutputs.GetProperty(""Error Code"");
			sErrorMsg = psOutputs.GetProperty(""Error Message"");
			if(sErrorCode !="""" && sErrorCode != null)
			{
				TheApplication().RaiseErrorText(sErrorMsg);
			}
			
		} 
		return(ContinueOperation);
	
	}
	catch(e)
	{
		//TheApplication().RaiseErrorText(e.errText);
		throw(e);
	}
	finally
	{
		psInputs = null;
		psOutputs = null;
		bsValidCustomer = null;
	}
}
function BusComp_WriteRecord ()
{
var AccManager;
var STCAccManager;
var AccountId;
var AccBC = TheApplication().GetBusObject(""Account"").GetBusComp(""Account"");
with(this)
{
	ActivateField(""Account Manager"");
	ActivateField(""Account Id"");
	AccManager = GetFieldValue(""Account Manager"");
	AccountId = GetFieldValue(""Account Id"");
	if(AccManager == """" || AccManager == null)
	{
		with(AccBC)
		{
			ActivateField(""STC Account Manager Name"");
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchSpec(""Id"",AccountId);
			ExecuteQuery(ForwardOnly);
			var isAccRec = FirstRecord();
			if(isAccRec)
			{
				STCAccManager = GetFieldValue(""STC Account Manager Name"");
			}
		}
		
		SetFieldValue(""Account Manager"", STCAccManager);
		WriteRecord();
	}	
}




}
function BusComp_WriteRecord ()
{
with(this)
{
	if(GetFieldValue(""STC Read Only"") != ""Y"")
	{
		SetFieldValue(""STC Read Only"", ""Y"");
		WriteRecord();
	}
}

}
"var vOldMSISDN = """";
var vOldSIM = """";"
function BlockRe_selection (OldValue,NewValue)
{
	try
	{
	var appObj;
	var psInputs,psOutputs,bsBlockNumber;
	appObj = TheApplication();
	
	ActivateField(""Record Blocked For"");
	ActivateField(""Billing Account Id"");
	
		var vBlockedServiceNumber = this.GetFieldValue(""Record Blocked For"");
        var vServiceNumber = this.GetFieldValue(""Billing Account Id"");
            
            if (vBlockedServiceNumber != """" && vBlockedServiceNumber != null) //RMS
            {
                 if(vBlockedServiceNumber != vServiceNumber)
                 {
                  appObj.RaiseErrorText(""The selected MSISDN/SIM is reserved for another. Please select alternate number"");
                  return (CancelOperation);
                 }
            }
                                    
            bsBlockNumber = appObj.GetService(""RMS RMS Block Number"") ;
            psInputs = appObj.NewPropertySet();
            psOutputs = appObj.NewPropertySet();
            //var vNewValue = this.GetFieldValue(""<mapped field in OLI for storing MSISDN/SIM number>"");         
            var vBlockedFor = this.GetFieldValue(""Billing Account Id"");
            psInputs.SetProperty(""BlockNumber"",NewValue);
            psInputs.SetProperty(""BlockedFor"",vBlockedFor);
            psInputs.SetProperty(""ReleaseNumber"",OldValue); // variable set at PreSetFieldValue
                        
            bsBlockNumber.InvokeMethod(""BlockNumber"",psInputs,psOutputs);
            
 

	}
	catch(e)
	{
	throw(e.errText);
	}
	finally
	{
	psInputs = null;
    psOutputs = null;
    bsBlockNumber = null;
    appObj = null;
	}
}
function BusComp_PreDeleteRecord ()
{	
	var appObj, sVoucherPromotionFlag;
	try
	{	appObj = TheApplication();
		var temp = this.GetFieldValue(""Id"");
		//this.ActivateField(""STC Voucher Promotion Flag"");
		sVoucherPromotionFlag = this.GetFieldValue(""STC Voucher Promotion Flag"");
		if (sVoucherPromotionFlag ==""Y"")
		{
			var bsService,bsin,bsout;
			bsService = appObj.GetService(""Workflow Process Manager"");
			bsin = appObj.NewPropertySet();
			bsout = appObj.NewPropertySet();
			bsin.SetProperty(""ProcessName"", ""STC Promotion Mgmt Delete Eligible Product WF"");
			bsin.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
			bsService.InvokeMethod(""RunProcess"", bsin, bsout);
		}
		this.InvokeMethod(""RefreshBusComp"");
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		return (ContinueOperation);
	}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	try
	{
		var OrderSubstatus;
		var OrderAccType;
		var OrderLOVSubstatus;
		var OrdernewSubstatus;
		var appObj;
		var oldAuthorityCode;
		var OrderHeaderId;
		var partNum;
		var Order;
		var OrderSubStr;
		var boOrder;
		var bcOrder;
		var sBillId;
		var boBilling;
		var bcBilling;
		var sVivaFlag;
		var sPartNum;
		var sErrorMsg;
		var CorpDealer;
		var sErrorMsg = """";
		var sErrorCode = """";
		var sRootId;
		var sId; 
		var sCardType = """",sCardCategory = """",sSTCSIMCalc = """",sCardCategoryCalc = """";
		var gNewReserveId = """", gPrevReserveId = """", gAstIntgId = """"; //Indrasen
		var ProdIdentifier = """",ParAssetIntegId = """",strExpr = """",bRecordExists="""";
		var bcOliSimple;
		switch(FieldName)
		{   
			case ""Part Number"":
			appObj = TheApplication();
			this.ActivateField(""Billing Account Id"");
			sBillId = this.GetFieldValue(""Billing Account Id"");
			sPartNum = appObj. InvokeMethod(""LookupValue"",""STC_SIM_TYPE"",""STCPKGCLUB"");
			boBilling =appObj.GetBusObject(""STC Billing Account"");
			bcBilling = boBilling.GetBusComp(""CUT Invoice Sub Accounts"");
			with(bcBilling)
			{
				SetViewMode(AllView);
				ActivateField(""STC Club Viva Flag"");
				ClearToQuery();
				SetSearchSpec(""Id"",sBillId);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					sVivaFlag = GetFieldValue(""STC Club Viva Flag"");
				}
				if (sVivaFlag == ""Y"")
				{
					if (sPartNum != FieldValue)
					{
						appObj.RaiseErrorText(""Please select VIVA Club Package"");
						return (CancelOperation);
					}
				}
			} // end of with       
			bcBilling = null;
			boBilling = null;    
			appObj = null;
			break;

			case ""Discount Amount"":
			var DiscPerDislay = this.GetFieldValue(""Discount Amount"");
			this.ActivateField(""Part Number"");
			partNum = this.GetFieldValue(""Part Number"");
			if( FieldValue != DiscPerDislay)
			{
				var View = TheApplication().ActiveViewName();
				if(View == ""Order Entry - Line Items Detail View (Sales)"")
				{
					Order = TheApplication().InvokeMethod(""LookupValue"",""STC_PRI_OVERRIDE"",partNum);
					OrderSubStr = Order.substring(3,0);
					if ( OrderSubStr == ""PRI"")
					{
						TheApplication().RaiseErrorText(""Manual Price override is not allowed for this product"");
					}
				}
			}
			break;
			case ""Discount Percent"":
			var DiscAmtDislay = this.GetFieldValue(""Discount Percent"");
			this.ActivateField(""Part Number"");
			partNum = this.GetFieldValue(""Part Number"");
			if( FieldValue != DiscAmtDislay)
			{
			var View = TheApplication().ActiveViewName();
			if(View == ""Order Entry - Line Items Detail View (Sales)"")
			{
							Order = TheApplication().InvokeMethod(""LookupValue"",""STC_PRI_OVERRIDE"",partNum);
					OrderSubStr = Order.substring(3,0);
					if ( OrderSubStr == ""PRI"")
					{
						TheApplication().RaiseErrorText(""Manual Price override is not allowed for this product"");
					}
			}
			}
			
			break;

			case ""Unit Price"":
			var DisUnitPriceDislay = this.GetFieldValue(""Unit Price"");
			this.ActivateField(""Part Number"");
			partNum = this.GetFieldValue(""Part Number"");
			if( FieldValue != DisUnitPriceDislay)
			{
			var View = TheApplication().ActiveViewName();
			if(View == ""Order Entry - Line Items Detail View (Sales)"")
			{
								Order = TheApplication().InvokeMethod(""LookupValue"",""STC_PRI_OVERRIDE"",partNum);
					OrderSubStr = Order.substring(3,0);
					if ( OrderSubStr == ""PRI"")
					{
						TheApplication().RaiseErrorText(""Manual Price override is not allowed for this product"");
					}
			}
			}

			break;

			case ""STC MNP MSISDN"":
			if(FieldValue != """" || FieldValue != null)
			{
				if(!isNaN(FieldValue))
				{
					if(FieldValue.length != 11)
					{
						TheApplication().RaiseErrorText(""Please enter 11 digits for MSISDN"");
					}
					var vMNPMSISDN = FieldValue.substring(3,0);
					if(vMNPMSISDN != '973')
					{
						TheApplication().RaiseErrorText(""MSISDN should start with '973'"");
					}
				}
				else
				{
					TheApplication().RaiseErrorText(""Please enter Numericals for MSISDN"");
				}
			}
			break;
			case ""Service Id"":
			ActivateField(""Root Account Id"");//[MANUJ] : [Avaya]
			ActivateField(""Service Id"");
			vOldMSISDN = this.GetFieldValue(""Service Id"");
			var vCanId = this.GetFieldValue(""Root Account Id"");
			appObj = TheApplication();
			this.ActivateField(""Root Order Item Id""); 
			sRootId = this.GetFieldValue(""Root Order Item Id"");
			sId = this.GetFieldValue(""Id""); 
			if(sRootId == sId)
			{
				var PartNumber = this.GetFieldValue(""Part Number"");//Start: Anchal	 		  
				var vMessage = CallMSISDNPackageCheck(FieldValue,PartNumber);
				if(vMessage != null && vMessage != """")
				TheApplication().RaiseErrorText(vMessage);//End: Anchal
			}
			OrderHeaderId = GetFieldValue(""Order Header Id"");
			boOrder = appObj.GetBusObject(""Order Entry (Sales)"");
			bcOrder = boOrder.GetBusComp(""Order Entry - Orders"");
			with(bcOrder)
			{
				SetViewMode(AllView);
				ActivateField(""STC Order Sub Status"");
				ClearToQuery();
				SetSearchSpec(""Id"",OrderHeaderId);
				ExecuteQuery(ForwardOnly);	
				if (FirstRecord())
				{
					OrderSubstatus = GetFieldValue(""STC Order Sub Status"");
				}
				OrderLOVSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Order Validated"");
				OrdernewSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Raised"");
				if (vOldMSISDN != FieldValue)
				{
					if((OrderLOVSubstatus == OrderSubstatus) && (sRootId == sId))
					{
						SetFieldValue(""STC Order Sub Status"",OrdernewSubstatus);
						WriteRecord();
					}     
				}       
			}
			if(FieldValue != """" && FieldValue != null)
			{
				var sRMSNumbo = appObj.GetBusObject(""RMS NM Number Enquiry"");
				var sRMSNumbc = sRMSNumbo.GetBusComp(""RMS NM Number Enquiry"");                                  
				with(sRMSNumbc)
				{
					ActivateField(""Number String"");
					ActivateField(""Record Blocked For"");
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchSpec(""Number String"",FieldValue);
					ExecuteQuery(ForwardOnly); 
					if(FirstRecord())
					{
						var sBlockedFor = GetFieldValue(""Record Blocked For"");
						var vBillingAccount = this.GetFieldValue(""Billing Account Id"");
						if (sBlockedFor != """" && sBlockedFor != null)
						{
							if((sBlockedFor != vBillingAccount) && sBlockedFor !=  vCanId)//[MANUJ] : [Avaya]
							{
								TheApplication().RaiseErrorText(""The Selected MSISDN is Reserved for Another Customer (as part of Migration). Please Select Another Number"");
								return (CancelOperation);
							}
						}
					}
				}
			}  //end if Fieldvalue null	
			sRMSNumbc = null;
			sRMSNumbo = null;
			bcOrder = null;
			boOrder = null;
			appObj = null;
			break;

			case ""STC ICCID"":
			vOldSIM = this.GetFieldValue(""STC ICCID"");
			appObj = TheApplication();
			this.ActivateField(""Root Order Item Id""); 
			this.ActivateField(""STC SIM Calc"");
			this.ActivateField(""Card Category Calc"");
			sRootId = this.GetFieldValue(""Root Order Item Id"");
			sId = this.GetFieldValue(""Id"");
			sSTCSIMCalc = this.GetFieldValue(""STC SIM Calc"");
			sCardCategoryCalc = this.GetFieldValue(""Card Category Calc"");
			OrderHeaderId = GetFieldValue(""Order Header Id"");
			boOrder = appObj.GetBusObject(""Order Entry (Sales)"");
			bcOrder = boOrder.GetBusComp(""Order Entry - Orders"");
			with(bcOrder)
			{
				SetViewMode(AllView);
				ActivateField(""STC Order Sub Status"");
				ActivateField(""Order Account Type"");
				ClearToQuery();
				SetSearchSpec(""Id"",OrderHeaderId);
				ExecuteQuery(ForwardOnly);	
				if (FirstRecord())
				{
					OrderSubstatus = GetFieldValue(""STC Order Sub Status"");
					OrderAccType = GetFieldValue(""Order Account Type"");
				}
				OrderLOVSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Order Validated"");
				OrdernewSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Raised"");
				if (vOldSIM != FieldValue)
				{
					if((OrderLOVSubstatus == OrderSubstatus) && (sRootId == sId))
					{
						SetFieldValue(""STC Order Sub Status"",OrdernewSubstatus);
						WriteRecord();
					}     
				}       
			}  
			if (FieldValue != """")
			{
				var sRMSNumberbo = appObj.GetBusObject(""RMS NM Number Enquiry"");
				var sRMSNumberbc = sRMSNumberbo.GetBusComp(""RMS NM Number Enquiry"");                                  
				with(sRMSNumberbc)
				{
					ActivateField(""Num Mstr Number String"");
					ActivateField(""Record Blocked For"");
					ActivateField(""Record Blocked For"");
					ActivateField(""Allocated To"");
					ActivateField(""STC SIM Card Type"");
					ActivateField(""Card Category"");
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchSpec(""Num Mstr Number String"",FieldValue);
					ExecuteQuery(ForwardOnly); 
					if(FirstRecord())
					{
						var sBlockFor = GetFieldValue(""Record Blocked For"");
						CorpDealer = GetFieldValue(""Allocated To"");
						var CorpDealerLOV = appObj.InvokeMethod(""LookupValue"",""STC_CORP_DEALER"",CorpDealer);
						sCardType = GetFieldValue(""STC SIM Card Type"");
						sCardCategory = GetFieldValue(""Card Category"");
						if(sCardCategory == ""Postpaid"")
						{
							sCardCategory = ""POSTPAID"";
						}
						if(sCardCategory == ""Prepaid"")
						{
							sCardCategory = ""PREPAID"";
						}
						if(sCardCategory != ""UNIFIED"" && sCardType != ""UNIFIED"")
						{
							if(sCardCategoryCalc != sCardCategory)
							{
								if((sCardCategoryCalc == null || sCardCategoryCalc == """") && sSTCSIMCalc == ""Data"")
								{
									var a = 1;
								}
								else
								{
									TheApplication().RaiseErrorText(""Selected SIM Card Category doesn't match with the Package."");
									return(CancelOperation);	
								}
							}
							if(sSTCSIMCalc != sCardType)
							{
								TheApplication().RaiseErrorText(""Selected SIM Card Type doesn't match with the Package."");
								return(CancelOperation);
							}
						}
						if(OrderAccType == ""Corporate"")
						{
							if (sBlockFor == """" || sBlockFor == null)
							{
								var CorpDealerStr = CorpDealerLOV.substring(0,3);
								if(CorpDealerStr != ""CSR"")
								{
									TheApplication().RaiseErrorText(""Selected SIM is not under corporate pool"");
									return(CancelOperation);
								}
							}
						}// if(OrderAccType == ""Corporate"")
						var IndDealerLOV = appObj.InvokeMethod(""LookupValue"",""STC_IND_DEALER"",CorpDealer);
						if(OrderAccType != ""Corporate"")
						{
							if (sBlockFor == """" || sBlockFor == null)
							{
								var IndDealerStr = IndDealerLOV.substring(0,3);
								if(IndDealerStr != ""CSR"")
								{
									TheApplication().RaiseErrorText(""Selected SIM is under corporate pool"");
									return(CancelOperation);
								}
							} 
						}// if(OrderAccType != ""Corporate"")
						var vBillingAccnt = this.GetFieldValue(""Billing Account Id"");
						if (sBlockFor != """" && sBlockFor != null)
						{
							if(sBlockFor != vBillingAccnt)
							{
								TheApplication().RaiseErrorText(""The Selected SIM is Reserved for Another Customer (as part of Migration). Please Select Another SIM"");
								return (CancelOperation);
							}
						}
					}
				}	
				sRMSNumberbc = null;
				sRMSNumberbo = null;
			}
			bcOrder = null;
			boOrder = null;
			appObj = null;
			break;

			case ""STC Authorization Code"":
			oldAuthorityCode = this.GetFieldValue(""STC Authorization Code"");
			appObj = TheApplication();
			this.ActivateField(""Root Order Item Id""); 
			sRootId = this.GetFieldValue(""Root Order Item Id"");
			sId = this.GetFieldValue(""Id"");
			OrderHeaderId = GetFieldValue(""Order Header Id"");
			boOrder = appObj.GetBusObject(""Order Entry (Sales)"");
			bcOrder = boOrder.GetBusComp(""Order Entry - Orders"");
			with(bcOrder)
			{
				SetViewMode(AllView);
				ActivateField(""STC Order Sub Status"");
				ClearToQuery();
				SetSearchSpec(""Id"",OrderHeaderId);
				ExecuteQuery(ForwardOnly);	
				if (FirstRecord())
				{
					OrderSubstatus = GetFieldValue(""STC Order Sub Status"");
				}
				//OrderSubstatus = this.ParentBusComp().GetFieldValue(""STC Order Sub Status"");
				OrderLOVSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Order Validated"");
				OrdernewSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Raised"");
				if (oldAuthorityCode != FieldValue)
				{
					if((OrderLOVSubstatus == OrderSubstatus) && (sRootId == sId))
					{
						SetFieldValue(""STC Order Sub Status"",OrdernewSubstatus);
						WriteRecord();
					}     
				}       
			}  
			bcOrder = null;
			boOrder = null;
			appObj = null;
			break;

			//Indrasen: added this for revamp Outbound Stock
			case ""Reservation Id"":
				gPrevReserveId = this.GetFieldValue(""Reservation Id"");
				gNewReserveId = FieldValue;
				this.ActivateField(""Asset Integration Id"");
				gAstIntgId = this.GetFieldValue(""Asset Integration Id"");
				
				var input = TheApplication().NewPropertySet();
				var output = TheApplication().NewPropertySet();
				input.SetProperty(""gPrevReserveId"",gPrevReserveId);
				input.SetProperty(""gNewReserveId"",gNewReserveId);
				input.SetProperty(""gAstIntgId"",gAstIntgId);
				input.SetProperty(""gOrderId"", this.GetFieldValue(""Order Header Id""));
				input.SetProperty(""EventName"",""OLI BC pickWrite"");	
				input.SetProperty(""ProcessName"",""STC OutboundStock Reservation Utility WF"");

				TheApplication().GetService(""Workflow Process Manager"").InvokeMethod(""RunProcess"", input, output);
				break;

			//Sharath: Added to replace the code for Device Insurance on pick applet and make it generic	
			case ""STC Contract Par Asset Integ Id"":
			appObj = TheApplication();
			this.ActivateField(""STC Product Identifier"");
			ProdIdentifier = this.GetFieldValue(""STC Product Identifier"");
			ParAssetIntegId = FieldValue;
			OrderHeaderId = GetFieldValue(""Order Header Id"");
			boOrder = appObj.GetBusObject(""Order Entry (Sales)"");
			bcOrder = boOrder.GetBusComp(""Order Entry - Orders"");
			bcOliSimple = boOrder.GetBusComp(""Order Entry - Line Items (Simple)"");
			var ParDevMapCheck = appObj.InvokeMethod(""LookupValue"",""STC_PAR_DEV_MAP_CHECK"",ProdIdentifier);
			ParDevMapCheck = ParDevMapCheck.substring(0, 5);
			var CurView = TheApplication().ActiveViewName();
			
			if ((ParAssetIntegId != """" && ParAssetIntegId != null))
			{
				if(CurView == ""Order Entry - Line Items Detail View (Sales)"" && ParDevMapCheck == ""CHECK"")
				{
					with(bcOrder)
			       {
				   SetViewMode(AllView);
				   ClearToQuery();
				   SetSearchSpec(""Id"",OrderHeaderId);
				   ExecuteQuery(ForwardOnly);	
				    if (FirstRecord())
				     {
				        with(bcOliSimple)
				        {  
				          strExpr=""[Order Header Id]='""+OrderHeaderId+""' AND [Action Code]='Add' AND [STC Product Identifier]='""+ProdIdentifier+""' AND [STC Contract Par Asset Integ Id]='""+ParAssetIntegId+""'"";
				         SetViewMode(AllView);
					     ClearToQuery();
					     SetSearchExpr(strExpr);
					     ExecuteQuery(ForwardOnly);   
					     bRecordExists = FirstRecord();
						  if(bRecordExists)
					      {
							appObj.RaiseErrorText(""Device already selected for ""+GetFieldValue(""Product"")+"" use clear to de-select"");
						    return(CancelOperation);
					      }
				        }//end of with(bcOliSimple)				  
					
				     }
			        }// End of with	bcOrder
					
				}// end of if view
				
			}
				
					
			
			
			bcOliSimple = null;
			bcOrder = null;
			boOrder = null;    
			appObj = null;
			break;

			default : 
				break;
		}
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	} 
}
function BusComp_PreWriteRecord ()
{
//Mayank: Added for Mena
	try
	{
		var sView = TheApplication().GetProfileAttr(""ActiveViewName"");
		if(sView != null && sView != """")
		{

		if(sView != ""STC Order Dispatch Line Items View"")
		{
			with(this)
			{
				ActivateField(""STC IMEI"");
				ActivateField(""Part Number"");
				ActivateField(""Action Code"");
				ActivateField(""Product"");
				var sActionCode = GetFieldValue(""Action Code"");
				var sPartNum = GetFieldValue(""Part Number"");
				var sProdName = GetFieldValue(""Product"");
				var sIMEI = GetFieldValue(""STC IMEI"");
				var sLen = 0;
				if(sIMEI != null && sIMEI != """")
				{
					sLen = sIMEI.length;
					sPartNum = sPartNum.substring(0,15);
					var TDDMainPart = sPartNum.substring(0,12);
					/*if(sPartNum == ""MNCAT6DEVICEADD"" && sLen < 15 && sActionCode == ""Add"")
					{
						TheApplication().RaiseErrorText(""Please enter voucher serial number greater than 15 digit for Product: ""+sProdName+"" in Device IMEI Number."");
					}*/
					//else 
					if(sPartNum != ""MNCAT6DEVICEADD"" && sPartNum != ""MENADEVICE1"" && TDDMainPart != ""TDDMAINOUEQU"" && sActionCode == ""Add"")
					{
						var sNotNumber = isNaN(sIMEI);
						if (sNotNumber)
						{
							TheApplication().RaiseErrorText(""IMEI number should be numeric."");
						}
						if(sLen != 15)
						{
							TheApplication().RaiseErrorText(""Please enter 15 digit IMEI."");
						}
					}
				} 
			}
		}
	  }	
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	}
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{
	try
	{
		var sSIMbc;  
		var sSIMno;
		var sAssocId;
		var sType;
		var sSpec;
		var appObj;
		var sRMSbo;
		var sRMSbc;
		var sMSISDN;
		var newMSISDN;
		var sSIMId;
		var sSIMType;
		var sStatus;
		var sAssNumber;
		var sAssId;
		var sRMSBO;
		var sRMSBC;
		var sConfig;
		var sCngName;
		var sSysBO;
		var sSysBC;
		var sArrCng = new Array;
		var i=0,j=0,SimFlag=0;
		var sParentBC;
		var sMigType;
		var sOrderId;
		var sMigration;
		var sMigration2,sMigration1,sMigration3,sMigration4;
		var sysname,sRetainFlag=0;
		var isSimRetain,sActionCode;
		var strIsBS,sAllocatd;
		var sRMSNumbc,sRMSNumbo,bcOrder,boOrder;
		var sOrderType,sOrderTypeLOV;
		switch(FieldName)
		{
			case ""STC ICCID"":
			this.SetFieldValue(""STC MSISDN Paired"",""N"");
			WriteRecord();
			sSIMno = this.GetFieldValue(""STC ICCID"");
			appObj = TheApplication();
			sRMSbo = appObj.GetBusObject(""RMS NM Number Enquiry"");
			sRMSbc = sRMSbo.GetBusComp(""RMS NM Number Enquiry""); 
			sParentBC = this.ParentBusComp();
			sOrderId = this.GetFieldValue(""Order Header Id"");
			sActionCode = this.GetFieldValue(""Action Code"");
			isSimRetain = TheApplication().GetProfileAttr(""SimRetain"");
			sMigType = TheApplication().GetProfileAttr(""MigType"");
			var sCpsFlag = sParentBC.GetFieldValue(""STC Billing CPS Flag"");
			var sChannel = sParentBC.GetFieldValue(""STC Channel"");//Mayank: Added for Ecom
			var sChannelLOV = TheApplication().InvokeMethod(""LookupValue"",""STC_ORDER_CHANNEL"", ""eCommerce"");//Mayank: Added for Ecom
			if (this.GetFieldValue(""STC POS Flag"") == ""Y"" && this.GetFieldValue(""STC ICCID"") != """")
			{
				var bsService,bsin,bsout;
				bsService = appObj.GetService(""Workflow Process Manager"");
				bsin = appObj.NewPropertySet();
				bsout = appObj.NewPropertySet();
				bsin.SetProperty(""ProcessName"", ""STC Send Order Details to POS"");
				bsin.SetProperty(""Object Id"",sOrderId);
				bsService.InvokeMethod(""RunProcess"", bsin, bsout);
			}
				var sParentBCName = this.ParentBusComp().Name();
				var sActiveViewName = TheApplication().ActiveViewName();
				if(sActiveViewName == ""STC Order Dispatch Line Items View"" && sParentBCName == ""STC Order Dispatch BC"") //Indrasen
				{
					sParentBC = TheApplication().GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Entry - Orders"");
				}
			with(sParentBC)
			{
				ActivateField(""STC Migration Type"");
				ActivateField(""SIM Retension Flag Calc Field"");
				ActivateField(""STC Billing CPS Flag"");	//Indrasen
				ActivateField(""STC Channel""); //Indrasen
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(""Id"",sOrderId);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
						var sCpsFlag = GetFieldValue(""STC Billing CPS Flag"");
						var sChannel = GetFieldValue(""STC Channel"");
				//	isSimRetain = ""N""; //remove this
				}
			}
			if(sChannel != sChannelLOV)//Mayank: Added for Ecom
			{//Mayank: Added for Ecom
				with(sRMSbc)
				{
					ActivateField(""Assoc Start Id"");
					ActivateField(""Num Mstr Number String"");
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchSpec(""Num Mstr Number String"",sSIMno);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
					{
						sAssocId = GetFieldValue(""Assoc Start Id"");
						ActivateField(""Assoc Start Id"");
						ActivateField(""Num Mstr Number String"");
						sType = TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"", ""MSISDN"");
						sSpec = ""[Assoc Start Id] = '"" + sAssocId + ""' AND [Number Type] ='"" + sType +""'"";
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchExpr(sSpec);
						ExecuteQuery(ForwardOnly);
						if(FirstRecord())
						{
							if(sCpsFlag == ""Y"")
							{
								this.SetFieldValue(""STC MSISDN Paired"",""N"");
							}
							else
							{
								sMSISDN = GetFieldValue(""Num Mstr Number String"");
								this.ActivateField(""Service Id"");
								this.SetFieldValue(""Service Id"",sMSISDN);
								BlockRe_selection (vOldMSISDN,sMSISDN);
								this.SetFieldValue(""STC MSISDN Paired"",""Y"");
							}
						}
						else
						{
							if(sCpsFlag == ""Y"")
							{
								this.SetFieldValue(""STC MSISDN Paired"",""N"");
							}
							else
							{
								this.SetFieldValue(""STC MSISDN Paired"",""N"");
								this.ActivateField(""Service Id"");
								this.SetFieldValue(""Service Id"","""");
							}
						}  
					}  
				} //Mayank: Added for Ecom 
			}  // end if 
			WriteRecord(); 
			BlockRe_selection (vOldSIM,sSIMno);
			break;

			case ""Service Id"":
			this.ActivateField(""Service Id"");
			this.ActivateField(""Order Header Id"");
			sOrderId = this.GetFieldValue(""Order Header Id"");
			newMSISDN = this.GetFieldValue(""Service Id"");  
			sRMSNumbo = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
			sRMSNumbc = sRMSNumbo.GetBusComp(""RMS NM Number Enquiry""); 
			sOrderTypeLOV = TheApplication().InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Provide"");
			boOrder = TheApplication().GetBusObject(""Order Entry (Sales)"");			
			bcOrder = boOrder.GetBusComp(""Order Entry - Orders"");	
			with (bcOrder)
			{
				SetViewMode(AllView);
				ActivateField(""STC Order SubType"");
				ClearToQuery();
				SetSearchSpec(""Id"",sOrderId);
				ExecuteQuery(ForwardOnly);	
				if(FirstRecord())		
				sOrderType = GetFieldValue(""STC Order SubType"");
				if(sOrderType == sOrderTypeLOV)
				{	                                           
					with(sRMSNumbc)
					{
						ActivateField(""Number String"");
						ActivateField(""Allocated To"");
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchSpec(""Number String"",newMSISDN);
						ExecuteQuery(ForwardOnly);    
						if(FirstRecord())
						{	
							sAllocatd = GetFieldValue(""Allocated To""); 
							strIsBS = TheApplication().GetProfileAttr(""STC GroupCode Id"");
							var loginname = TheApplication().GetProfileAttr(""Login Name""); // [Neha kasat][18092013][For SIP ISDN]
							if (strIsBS != sAllocatd && loginname!=""SADMIN"") // [Neha kasat][18092013][For SIP ISDN]
							{
								TheApplication().RaiseErrorText(""You do not have access to select this MSISDN"");
								return(CancelOperation);
							}//end of if
						}//end of if
					}//end of if
				}//end of with
			}
			BlockRe_selection (vOldMSISDN,newMSISDN);
			break;   		  

			default :
			break;
		}
		return (ContinueOperation); 
	}//end of try
	catch(e)
	{
		throw(e);
	}
	finally
	{

	}
}
function BusComp_SetFieldValue (FieldName)
{
	try
	{
		var sSIMbc;  
		var sSIMno;
		var sAssocId;
		var sType;
		var sSpec;
		var appObj;
		var sRMSbo;
		var sRMSbc;
		var sMSISDN;
		var newMSISDN;
		var sSIMId;
		var sSIMType;
		var sStatus;
		var sAssNumber;
		var sAssId;
		var sRMSBO;
		var sRMSBC;
		var sConfig;
		var sCngName;
		var sSysBO;
		var sSysBC;
		var sArrCng = new Array;
		var i=0,j=0,SimFlag=0;
		var sParentBC;
		var sMigType;
		var sOrderId;
		var sMigration;
		var sMigration2,sMigration1,sMigration3,sMigration4;
		var sysname,sRetainFlag=0;
		var isSimRetain,sActionCode;
		var strIsBS,sAllocatd;
		var sRMSNumbc,sRMSNumbo,bcOrder,boOrder;
		var sOrderType,sOrderTypeLOV;
		switch(FieldName)
		{
			case ""STC ICCID"":
			this.SetFieldValue(""STC MSISDN Paired"",""N"");
			WriteRecord();
			sSIMno = this.GetFieldValue(""STC ICCID"");
			appObj = TheApplication();
			sRMSbo = appObj.GetBusObject(""RMS NM Number Enquiry"");
			sRMSbc = sRMSbo.GetBusComp(""RMS NM Number Enquiry""); 
			sParentBC = this.ParentBusComp();
			sOrderId = this.GetFieldValue(""Order Header Id"");
			sActionCode = this.GetFieldValue(""Action Code"");
			isSimRetain = TheApplication().GetProfileAttr(""SimRetain"");
			sMigType = TheApplication().GetProfileAttr(""MigType"");
			var sCpsFlag = sParentBC.GetFieldValue(""STC Billing CPS Flag"");
			var sChannel = sParentBC.GetFieldValue(""STC Channel"");//Mayank: Added for Ecom
			var sChannelLOV = TheApplication().InvokeMethod(""LookupValue"",""STC_ORDER_CHANNEL"", ""eCommerce"");//Mayank: Added for Ecom
			if (this.GetFieldValue(""STC POS Flag"") == ""Y"" && this.GetFieldValue(""STC ICCID"") != """")
			{
				var bsService,bsin,bsout;
				bsService = appObj.GetService(""Workflow Process Manager"");
				bsin = appObj.NewPropertySet();
				bsout = appObj.NewPropertySet();
				bsin.SetProperty(""ProcessName"", ""STC Send Order Details to POS"");
				bsin.SetProperty(""Object Id"",sOrderId);
				bsService.InvokeMethod(""RunProcess"", bsin, bsout);
			}
				var sParentBCName = this.ParentBusComp().Name();
				var sActiveViewName = TheApplication().ActiveViewName();
				if(sActiveViewName == ""STC Order Dispatch Line Items View"" && sParentBCName == ""STC Order Dispatch BC"") //Indrasen
				{
					sParentBC = TheApplication().GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Entry - Orders"");
				}
			with(sParentBC)
			{
				ActivateField(""STC Migration Type"");
				ActivateField(""SIM Retension Flag Calc Field"");
				ActivateField(""STC Billing CPS Flag"");	//Indrasen
				ActivateField(""STC Channel""); //Indrasen
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(""Id"",sOrderId);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
						var sCpsFlag = GetFieldValue(""STC Billing CPS Flag"");
						var sChannel = GetFieldValue(""STC Channel"");
				//	isSimRetain = ""N""; //remove this
				}
			}
			if(sChannel != sChannelLOV)//Mayank: Added for Ecom
			{//Mayank: Added for Ecom
				with(sRMSbc)
				{
					ActivateField(""Assoc Start Id"");
					ActivateField(""Num Mstr Number String"");
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchSpec(""Num Mstr Number String"",sSIMno);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
					{
						sAssocId = GetFieldValue(""Assoc Start Id"");
						ActivateField(""Assoc Start Id"");
						ActivateField(""Num Mstr Number String"");
						sType = TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"", ""MSISDN"");
						sSpec = ""[Assoc Start Id] = '"" + sAssocId + ""' AND [Number Type] ='"" + sType +""'"";
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchExpr(sSpec);
						ExecuteQuery(ForwardOnly);
						if(FirstRecord())
						{
							if(sCpsFlag == ""Y"")
							{
								this.SetFieldValue(""STC MSISDN Paired"",""N"");
							}
							else
							{
								sMSISDN = GetFieldValue(""Num Mstr Number String"");
								this.ActivateField(""Service Id"");
								this.SetFieldValue(""Service Id"",sMSISDN);
								BlockRe_selection (vOldMSISDN,sMSISDN);
								this.SetFieldValue(""STC MSISDN Paired"",""Y"");
							}
						}
						else
						{
							if(sCpsFlag == ""Y"")
							{
								this.SetFieldValue(""STC MSISDN Paired"",""N"");
							}
							else
							{
								this.SetFieldValue(""STC MSISDN Paired"",""N"");
								this.ActivateField(""Service Id"");
								this.SetFieldValue(""Service Id"","""");
							}
						}  
					}  
				} //Mayank: Added for Ecom 
			}  // end if 
			WriteRecord(); 
			BlockRe_selection (vOldSIM,sSIMno);
			break;

			case ""Service Id"":
			this.ActivateField(""Service Id"");
			this.ActivateField(""Order Header Id"");
			sOrderId = this.GetFieldValue(""Order Header Id"");
			newMSISDN = this.GetFieldValue(""Service Id"");  
			sRMSNumbo = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
			sRMSNumbc = sRMSNumbo.GetBusComp(""RMS NM Number Enquiry""); 
			sOrderTypeLOV = TheApplication().InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Provide"");
			boOrder = TheApplication().GetBusObject(""Order Entry (Sales)"");			
			bcOrder = boOrder.GetBusComp(""Order Entry - Orders"");	
			with (bcOrder)
			{
				SetViewMode(AllView);
				ActivateField(""STC Order SubType"");
				ClearToQuery();
				SetSearchSpec(""Id"",sOrderId);
				ExecuteQuery(ForwardOnly);	
				if(FirstRecord())		
				sOrderType = GetFieldValue(""STC Order SubType"");
				if(sOrderType == sOrderTypeLOV)
				{	
				  if(newMSISDN !="""" && newMSISDN != null){
					with(sRMSNumbc)
					{
						ActivateField(""Number String"");
						ActivateField(""Allocated To"");
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchSpec(""Number String"",newMSISDN);
						ExecuteQuery(ForwardOnly);    
						if(FirstRecord())
						{	
							sAllocatd = GetFieldValue(""Allocated To""); 
							strIsBS = TheApplication().GetProfileAttr(""STC GroupCode Id"");
							var loginname = TheApplication().GetProfileAttr(""Login Name""); // [Neha kasat][18092013][For SIP ISDN]
							if (strIsBS != sAllocatd && loginname!=""SADMIN"") // [Neha kasat][18092013][For SIP ISDN]
							{
								TheApplication().RaiseErrorText(""You do not have access to select this MSISDN"");
								return(CancelOperation);
							}//end of if
						}//end of if
					}//end of if
				  }//end if new msisdn
				}//end of with
			}
			BlockRe_selection (vOldMSISDN,newMSISDN);
			break;   		  

			default :
			break;
		}
		return (ContinueOperation); 
	}//end of try
	catch(e)
	{
		throw(e);
	}
	finally
	{

	}
}
function CallMSISDNPackageCheck(ServiceId,PartNumber)
{
	try
	{
		var vAppObj: Application = TheApplication();
		var sBSService: Service = vAppObj.GetService(""Workflow Process Manager"");
		var vInPS: PropertySet = vAppObj.NewPropertySet();
		var vOutPS: PropertySet = vAppObj.NewPropertySet();
		vInPS.SetProperty(""ProcessName"", ""STC MSISDN Package Validation Workflow"");
		vInPS.SetProperty(""STC MSISDN"",ServiceId);
		vInPS.SetProperty(""STC Part Code"",PartNumber);
		sBSService.InvokeMethod(""RunProcess"", vInPS, vOutPS);
		var vMsg = vOutPS.GetProperty(""Error Message"");
		return vMsg;
	}
	finally
	{
		vAppObj = null;
		vInPS = null;
		vOutPS = null;
		sBSService = null;
	}
}
"var vOldMSISDN = """";
var vOldSIM = """";"
function BlockRe_selection (OldValue,NewValue)
{
	try
	{
	var appObj;
	var psInputs,psOutputs,bsBlockNumber;
	appObj = TheApplication();
	
	ActivateField(""Record Blocked For"");
	ActivateField(""Billing Account Id"");
	
		var vBlockedServiceNumber = this.GetFieldValue(""Record Blocked For"");
        var vServiceNumber = this.GetFieldValue(""Billing Account Id"");
            
            if (vBlockedServiceNumber != """" && vBlockedServiceNumber != null) //RMS
            {
                 if(vBlockedServiceNumber != vServiceNumber)
                 {
                  appObj.RaiseErrorText(""The selected MSISDN/SIM is reserved for another. Please select alternate number"");
                  return (CancelOperation);
                 }
            }
                                    
            bsBlockNumber = appObj.GetService(""RMS RMS Block Number"") ;
            psInputs = appObj.NewPropertySet();
            psOutputs = appObj.NewPropertySet();
            //var vNewValue = this.GetFieldValue(""<mapped field in OLI for storing MSISDN/SIM number>"");         
            var vBlockedFor = this.GetFieldValue(""Billing Account Id"");
            psInputs.SetProperty(""BlockNumber"",NewValue);
            psInputs.SetProperty(""BlockedFor"",vBlockedFor);
            psInputs.SetProperty(""ReleaseNumber"",OldValue); // variable set at PreSetFieldValue
                        
            bsBlockNumber.InvokeMethod(""BlockNumber"",psInputs,psOutputs);
            
 

	}
	catch(e)
	{
	throw(e.errText);
	}
	finally
	{
	psInputs = null;
    psOutputs = null;
    bsBlockNumber = null;
    appObj = null;
	}
}
function BusComp_PreDeleteRecord ()
{	
	var appObj, sVoucherPromotionFlag;
	try
	{	appObj = TheApplication();
		var temp = this.GetFieldValue(""Id"");
		//this.ActivateField(""STC Voucher Promotion Flag"");
		sVoucherPromotionFlag = this.GetFieldValue(""STC Voucher Promotion Flag"");
		if (sVoucherPromotionFlag ==""Y"")
		{
			var bsService,bsin,bsout;
			bsService = appObj.GetService(""Workflow Process Manager"");
			bsin = appObj.NewPropertySet();
			bsout = appObj.NewPropertySet();
			bsin.SetProperty(""ProcessName"", ""STC Promotion Mgmt Delete Eligible Product WF"");
			bsin.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
			bsService.InvokeMethod(""RunProcess"", bsin, bsout);
		}
		this.InvokeMethod(""RefreshBusComp"");
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		return (ContinueOperation);
	}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{

	try
	{
	   
//	var vOldMSISDN,vOldSIM;  /*Added this as global variable Dt - 23.03.10 PN*/
/*	var row_id_flag,sim_flag,msi_flag,profattr;

	ActivateField(""Calc Row Id"");
	ActivateField(""Calc SIM Read Only"");	
	ActivateField(""Calc MSISDN Read Only"");
	
	row_id_flag = this.GetFieldValue(""Calc Row Id"");
	sim_flag = this.GetFieldValue(""Calc SIM Read Only"");
	msi_flag = this.GetFieldValue(""Calc MSISDN Read Only"");
	profattr = TheApplication().GetProfileAttr(""ChildLineItemMSISDN"");*/
	
	var OrderSubstatus;
	var OrderAccType;
	var OrderLOVSubstatus;
	var OrdernewSubstatus;
	var appObj;
	var oldAuthorityCode;
	var OrderHeaderId;
	var boOrder;
	var bcOrder;
	var sBillId;
	var boBilling;
	var bcBilling;
	var sVivaFlag;
	var sPartNum;
	var sErrorMsg;
	var CorpDealer;
	var sErrorMsg = """";
var sErrorCode = """";
	var sRootId;
    var sId; 

		switch(FieldName)

    {   
         case ""Part Number"":
         
         appObj = TheApplication();
         this.ActivateField(""Billing Account Id"");
         sBillId = this.GetFieldValue(""Billing Account Id"");
         
         sPartNum = appObj. InvokeMethod(""LookupValue"",""STC_SIM_TYPE"",""STCPKGCLUB"");
                  
         boBilling =appObj.GetBusObject(""STC Billing Account"");
         bcBilling = boBilling.GetBusComp(""CUT Invoice Sub Accounts"");
         
         with(bcBilling)
         {
           SetViewMode(AllView);
           ActivateField(""STC Club Viva Flag"");
           ClearToQuery();
           SetSearchSpec(""Id"",sBillId);
           ExecuteQuery(ForwardOnly);
           if(FirstRecord())
           {
             sVivaFlag = GetFieldValue(""STC Club Viva Flag"");
           }
           if (sVivaFlag == ""Y"")
           {
              if (sPartNum != FieldValue)
              {
               // sErrorMsg = appObj.LookupMessage(""User Defined Errors"",""AM0015"") +""\n"";
              	appObj.RaiseErrorText(""Please select VIVA Club Package"");
              	return (CancelOperation);
              }
           }
          } // end of with       
          
         bcBilling = null;
         boBilling = null;    
         appObj = null;
        
       
         break;
         
         case ""STC MNP MSISDN"":
         if(FieldValue != """" || FieldValue != null)
         {
          if(!isNaN(FieldValue))
				{
					if(FieldValue.length != 11)
					{
						TheApplication().RaiseErrorText(""Please enter 11 digits for MNPMSISDN"");
					}
					var vMNPMSISDN = FieldValue.substring(3,0);
					if(vMNPMSISDN != '973')
						{
						TheApplication().RaiseErrorText(""MSISDN should start with '973'"");
						}
				}
				else
				{
				TheApplication().RaiseErrorText(""Please enter Numericals for MNPMSISDN"");
				}
         }
         break;
         
 		 case ""Service Id"":
 		  ActivateField(""Service Id"");
	      vOldMSISDN = this.GetFieldValue(""Service Id"");
	      appObj = TheApplication();
	  	  this.ActivateField(""Root Order Item Id""); 
	      sRootId = this.GetFieldValue(""Root Order Item Id"");
	      sId = this.GetFieldValue(""Id""); 
	      if(sRootId == sId)
 		   {
	 		  var PartNumber = this.GetFieldValue(""Part Number"");//Start: Anchal	 		  
	 		  var vMessage = CallMSISDNPackageCheck(FieldValue,PartNumber);
	 		  if(vMessage != null && vMessage != """")
	 		  TheApplication().RaiseErrorText(vMessage);//End: Anchal
	 	   }
	  	  OrderHeaderId = GetFieldValue(""Order Header Id"");
		  boOrder = appObj.GetBusObject(""Order Entry (Sales)"");
		  bcOrder = boOrder.GetBusComp(""Order Entry - Orders"");
		  with(bcOrder)
		  {
		  	SetViewMode(AllView);
		  	ActivateField(""STC Order Sub Status"");
  		    ClearToQuery();
			SetSearchSpec(""Id"",OrderHeaderId);
			ExecuteQuery(ForwardOnly);	

			if (FirstRecord())
			{
		        OrderSubstatus = GetFieldValue(""STC Order Sub Status"");
          	}
          
          	//OrderSubstatus = this.ParentBusComp().GetFieldValue(""STC Order Sub Status"");
          	OrderLOVSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Order Validated"");
          	OrdernewSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Raised"");
	        
		        if (vOldMSISDN != FieldValue)
		        {
	    	       if((OrderLOVSubstatus == OrderSubstatus) && (sRootId == sId))
	        	   {
	             	    
	            	    //this.ParentBusComp().SetFieldValue(""STC Order Sub Status"",OrdernewSubstatus);
                    	//this.ParentBusComp().WriteRecord();   
                    	
                    	SetFieldValue(""STC Order Sub Status"",OrdernewSubstatus);
                    	WriteRecord();
	               }     
    	        }       
	        }  
	        
	      	
	      	
	      	//PS 11/05/2010 for Viva Club Migration Validation 	      	
			var sRMSNumbo = appObj.GetBusObject(""RMS NM Number Enquiry"");
            var sRMSNumbc = sRMSNumbo.GetBusComp(""RMS NM Number Enquiry"");                                  
              
            with(sRMSNumbc)
            {
				ActivateField(""Number String"");
				ActivateField(""Record Blocked For"");
                SetViewMode(AllView);
                ClearToQuery();
                SetSearchSpec(""Number String"",FieldValue);
                ExecuteQuery(ForwardOnly); 
                 
                if(FirstRecord())
                {
                	var sBlockedFor = GetFieldValue(""Record Blocked For"");
                	//var vBlockedForBAN = this.GetFieldValue(""STC Migration Blocked For"");

	       			var vBillingAccount = this.GetFieldValue(""Billing Account Id"");
       				if (sBlockedFor != """" && sBlockedFor != null)
       				{
	               		if(sBlockedFor != vBillingAccount)
	               		{
                    		TheApplication().RaiseErrorText(""The Selected MSISDN is Reserved for Another Customer (as part of Migration). Please Select Another Number"");
                        	return (CancelOperation);
                    	}
       				}
                 
                 }
			  }	
	      	
	      	
	      	sRMSNumbc = null;
	      	sRMSNumbo = null;
	      	bcOrder = null;
	      	boOrder = null;
	      	appObj = null;
	      	
	       //Visa Club Migration Validation
	      
	        //vNewMSISDN = Val(FieldValue); 
	        
	        //Dt - 23.03.10 Commented the below code to move it to SetField Value
	     //  BlockRe_selection (vOldMSISDN,FieldValue);
         break;

         case ""STC ICCID"":
         //	ActivateField(""STC ICCID"");
        	vOldSIM = this.GetFieldValue(""STC ICCID"");
         	
          appObj = TheApplication();
          
          this.ActivateField(""Root Order Item Id""); 
	      sRootId = this.GetFieldValue(""Root Order Item Id"");
	      sId = this.GetFieldValue(""Id"");
          
	  	  OrderHeaderId = GetFieldValue(""Order Header Id"");
		  boOrder = appObj.GetBusObject(""Order Entry (Sales)"");
		  bcOrder = boOrder.GetBusComp(""Order Entry - Orders"");
		  
		  with(bcOrder)
		  {
		  	SetViewMode(AllView);
		  	ActivateField(""STC Order Sub Status"");
		  	ActivateField(""Order Account Type"");
  		    ClearToQuery();
			SetSearchSpec(""Id"",OrderHeaderId);
			ExecuteQuery(ForwardOnly);	

			if (FirstRecord())
			{
		        OrderSubstatus = GetFieldValue(""STC Order Sub Status"");
		        OrderAccType = GetFieldValue(""Order Account Type"");
          	}
          
          	//OrderSubstatus = this.ParentBusComp().GetFieldValue(""STC Order Sub Status"");
          	OrderLOVSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Order Validated"");
          	OrdernewSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Raised"");
	        
		        if (vOldSIM != FieldValue)
		        {
	    	       if((OrderLOVSubstatus == OrderSubstatus) && (sRootId == sId))
	        	   {
	             	    
	            	    //this.ParentBusComp().SetFieldValue(""STC Order Sub Status"",OrdernewSubstatus);
                    	//this.ParentBusComp().WriteRecord();   
                    	
                    	SetFieldValue(""STC Order Sub Status"",OrdernewSubstatus);
                    	WriteRecord();
	               }     
    	        }       
	        }  
	        //bcOrder = null;
	      	//boOrder = null;
	      	//appObj = null;
      


	      	//PS 10/07/2010 for PrePost Migration To Different Customer 	      	
	      	if (FieldValue != """")
		      	{
				var sRMSNumberbo = appObj.GetBusObject(""RMS NM Number Enquiry"");
	            var sRMSNumberbc = sRMSNumberbo.GetBusComp(""RMS NM Number Enquiry"");                                  
  
	            with(sRMSNumberbc)
	            {
					ActivateField(""Num Mstr Number String"");
					ActivateField(""Record Blocked For"");
					ActivateField(""Record Blocked For"");
					ActivateField(""Allocated To"");
	                SetViewMode(AllView);
	                ClearToQuery();
	                SetSearchSpec(""Num Mstr Number String"",FieldValue);
	                ExecuteQuery(ForwardOnly); 
	                 
	                if(FirstRecord())
	                {
	                	var sBlockFor = GetFieldValue(""Record Blocked For"");
	                	CorpDealer = GetFieldValue(""Allocated To"");
	                	
	                	var CorpDealerLOV = appObj.InvokeMethod(""LookupValue"",""STC_CORP_DEALER"",CorpDealer);
	                	//var vBlockedForBAN = this.GetFieldValue(""STC Migration Blocked For"");
	
		       			if(OrderAccType == ""Corporate"")
		       			{
		       				if (sBlockFor == """" || sBlockFor == null)
		       				{
		       				var CorpDealerStr = CorpDealerLOV.substring(0,3);
		       				if(CorpDealerStr != ""CSR"")
		       				{
		       					TheApplication().RaiseErrorText(""Selected SIM is not under corporate pool"");
		       					return(CancelOperation);
		       				}
		       			}
		       			 }// if(OrderAccType == ""Corporate"")
		       			var IndDealerLOV = appObj.InvokeMethod(""LookupValue"",""STC_IND_DEALER"",CorpDealer);
	                	//var vBlockedForBAN = this.GetFieldValue(""STC Migration Blocked For"");
	
		       			if(OrderAccType != ""Corporate"")
		       			{
		       				if (sBlockFor == """" || sBlockFor == null)
		       				{
		       				var IndDealerStr = IndDealerLOV.substring(0,3);
		       				if(IndDealerStr != ""CSR"")
		       				{
		       					TheApplication().RaiseErrorText(""Selected SIM is under corporate pool"");
		       					return(CancelOperation);
		       				}
		       				} 
		       			}// if(OrderAccType != ""Corporate"")
		       			
		       			
		       			
		       			var vBillingAccnt = this.GetFieldValue(""Billing Account Id"");
	       				if (sBlockFor != """" && sBlockFor != null)
	       				{
		               		if(sBlockFor != vBillingAccnt)
		               		{
	                    		TheApplication().RaiseErrorText(""The Selected SIM is Reserved for Another Customer (as part of Migration). Please Select Another SIM"");
	                        	return (CancelOperation);
	                    	}
	       				}
	                
	                 }
				  }	
		      	
		      	
		      	sRMSNumberbc = null;
		      	sRMSNumberbo = null;
	      	}
	      	bcOrder = null;
	      	boOrder = null;
	      	appObj = null;

         	
         //Dt - 23.03.10 Commented the below code to move it to SetField Value	
         //	BlockRe_selection (vOldSIM,FieldValue);
         	
         break;
         
         case ""STC Authorization Code"":
         
           oldAuthorityCode = this.GetFieldValue(""STC Authorization Code"");
           appObj = TheApplication();
          
  	  	  this.ActivateField(""Root Order Item Id""); 
	      sRootId = this.GetFieldValue(""Root Order Item Id"");
	      sId = this.GetFieldValue(""Id"");
           
	  	  OrderHeaderId = GetFieldValue(""Order Header Id"");
		  boOrder = appObj.GetBusObject(""Order Entry (Sales)"");
		  bcOrder = boOrder.GetBusComp(""Order Entry - Orders"");
		  
		  with(bcOrder)
		  {
		  	SetViewMode(AllView);
		  	ActivateField(""STC Order Sub Status"");
  		    ClearToQuery();
			SetSearchSpec(""Id"",OrderHeaderId);
			ExecuteQuery(ForwardOnly);	

			if (FirstRecord())
			{
		        OrderSubstatus = GetFieldValue(""STC Order Sub Status"");
          	}
          
          	//OrderSubstatus = this.ParentBusComp().GetFieldValue(""STC Order Sub Status"");
          	OrderLOVSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Order Validated"");
          	OrdernewSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Raised"");
	        
		        if (oldAuthorityCode != FieldValue)
		        {
	    	       if((OrderLOVSubstatus == OrderSubstatus) && (sRootId == sId))
	        	   {
	             	    
	            	    //this.ParentBusComp().SetFieldValue(""STC Order Sub Status"",OrdernewSubstatus);
                    	//this.ParentBusComp().WriteRecord();   
                    	
                    	SetFieldValue(""STC Order Sub Status"",OrdernewSubstatus);
                    	WriteRecord();
	               }     
    	        }       
	        }  
	        bcOrder = null;
	      	boOrder = null;
	      	appObj = null;

          break;
          
         default : 
         break;
	}

	return (ContinueOperation);
	}
	catch(e)
	{
	throw(e);
	}
	finally
	{
	} 
}
function BusComp_SetFieldValue (FieldName)
{

 try
 {
   var sSIMbc;  
   var sSIMno;
   var sAssocId;
   var sType;
   var sSpec;
   var appObj;
   var sRMSbo;
   var sRMSbc;
   var sMSISDN;
   var newMSISDN;
   var sSIMId;
   var sSIMType;
   var sStatus;
   var sAssNumber;
   var sAssId;
   var sRMSBO;
   var sRMSBC;
   var sConfig;
   var sCngName;
   var sSysBO;
   var sSysBC;
   var sArrCng = new Array;
   var i=0,j=0,SimFlag=0;
   var sParentBC;
   var sMigType;
   var sOrderId;
   var sMigration;
   var sMigration2,sMigration1,sMigration3,sMigration4;
   var sysname,sRetainFlag=0;
   var isSimRetain,sActionCode;
   var strIsBS,sAllocatd;
   var sRMSNumbc,sRMSNumbo,bcOrder,boOrder;
   var sOrderType,sOrderTypeLOV;
   
   switch(FieldName)
   {
      case ""STC ICCID"":
               
            this.SetFieldValue(""STC MSISDN Paired"",""N"");
            WriteRecord();
            sSIMno = this.GetFieldValue(""STC ICCID"");
            appObj = TheApplication();
            sRMSbo = appObj.GetBusObject(""RMS NM Number Enquiry"");
            sRMSbc = sRMSbo.GetBusComp(""RMS NM Number Enquiry""); 
            sParentBC = this.ParentBusComp();
            sOrderId = this.GetFieldValue(""Order Header Id"");
            sActionCode = this.GetFieldValue(""Action Code"");
            isSimRetain = TheApplication().GetProfileAttr(""SimRetain"");
            sMigType = TheApplication().GetProfileAttr(""MigType"");

            //Send To POS Order - After SIM Number Change
			if (this.GetFieldValue(""STC POS Flag"") == ""Y"" && this.GetFieldValue(""STC ICCID"") != """")
			{
				var bsService,bsin,bsout;
				bsService = appObj.GetService(""Workflow Process Manager"");
				bsin = appObj.NewPropertySet();
				bsout = appObj.NewPropertySet();
				bsin.SetProperty(""ProcessName"", ""STC Send Order Details to POS"");
				bsin.SetProperty(""Object Id"",sOrderId);
				bsService.InvokeMethod(""RunProcess"", bsin, bsout);
			}
			//End of Send To POS   

            with(sParentBC)
            {
            	ActivateField(""STC Migration Type"");
            	ActivateField(""SIM Retension Flag Calc Field"");
            	SetViewMode(AllView);
            	ClearToQuery();
            	SetSearchSpec(""Id"",sOrderId);
            	ExecuteQuery(ForwardOnly);
            	
            	if(FirstRecord())
            	{
            	//	sMigType = GetFieldValue(""STC Migration Type"");
            	//	isSimRetain = GetFieldValue(""SIM Retension Flag Calc Field"");
            	//	isSimRetain = ""N""; //remove this
            	}
            }
                                          
              
             with(sRMSbc)
             {
                 ActivateField(""Assoc Start Id"");
                 ActivateField(""Num Mstr Number String"");
                 SetViewMode(AllView);
                 ClearToQuery();
                 SetSearchSpec(""Num Mstr Number String"",sSIMno);
                 ExecuteQuery(ForwardOnly);
                 
                  if(FirstRecord())
                  {
                    sAssocId = GetFieldValue(""Assoc Start Id"");
                    ActivateField(""Assoc Start Id"");
                    ActivateField(""Num Mstr Number String"");
                    sType = TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"", ""MSISDN"");
                    sSpec = ""[Assoc Start Id] = '"" + sAssocId + ""' AND [Number Type] ='"" + sType +""'"";
                    SetViewMode(AllView);
                    ClearToQuery();
                    SetSearchExpr(sSpec);
                    ExecuteQuery(ForwardOnly);
                    
                    if(FirstRecord())
                    {
                      sMSISDN = GetFieldValue(""Num Mstr Number String"");
                      this.ActivateField(""Service Id"");
                      this.SetFieldValue(""Service Id"",sMSISDN);
                      BlockRe_selection (vOldMSISDN,sMSISDN);
                      this.SetFieldValue(""STC MSISDN Paired"",""Y"");
        
                    }
                    else
                    {
                      this.SetFieldValue(""STC MSISDN Paired"",""N"");
                      this.ActivateField(""Service Id"");
                      this.SetFieldValue(""Service Id"","""");   
                    }  
                  }   
 /*                 
 // Added by devender
                 ActivateField(""Parent Assoc Id"");
                 ActivateField(""Num Mstr Number String"");
                 ActivateField(""Type"");
                 ActivateField(""Status"");
                 SetViewMode(AllView);
                 ClearToQuery();
                 SetSearchSpec(""Num Mstr Number String"",sSIMno);
                 ExecuteQuery(ForwardOnly);   
                 
                 if(FirstRecord())
                 {
                 	sSIMId = GetFieldValue(""Id"");
                 	sSIMType = GetFieldValue(""Type"");
                 	sStatus = GetFieldValue(""Status"");
                 	sAssId = GetFieldValue(""Assoc Start Id"");
                 	
                 }
                    
          	} 
          	
          //	sMigType = ""Corp Post To Inv Pre"";  //remove this
          	
          	sMigration1 = TheApplication().InvokeMethod(""LookupValue"",""STC_MIGRATION_TYPE"",""Inv Post To Corp Post"");
          	sMigration2 = TheApplication().InvokeMethod(""LookupValue"",""STC_MIGRATION_TYPE"",""Inv Pre To Corp Post"");
          	sMigration3 = TheApplication().InvokeMethod(""LookupValue"",""STC_MIGRATION_TYPE"",""Corp Post To Inv Pre"");
          	sMigration4 = TheApplication().InvokeMethod(""LookupValue"",""STC_MIGRATION_TYPE"",""Corp Post To Inv Post"");
          
       		if((sMigType == sMigration3 || sMigType == sMigration4) && isSimRetain == ""Y"")
       		{
       			sRetainFlag = 1;
       		}
       
       		if(sMigType != sMigration1 && sMigType != sMigration2 && sMigType != sMigration3 && sMigType != sMigration4)
       		{
       			sRetainFlag = 2;
       		}
       		
       	  	if(sRetainFlag == ""0"" && sActionCode == ""Add"")
       	  	{
          			var sBC = sRMSbo.GetBusComp(""RMS NM Association Number Type Display"");
          	
          			with(sBC)
          			{
          				ActivateField(""Assoc Start Id"");
          				ActivateField(""Associated Number"");
          				ActivateField(""Associated Type"");
          				SetViewMode(AllView);
                		ClearToQuery();
                		SetSearchSpec(""Assoc Start Id"",sAssId);
                		ExecuteQuery(ForwardOnly);
                
                		if(FirstRecord())
                		{
                			sAssNumber = GetFieldValue(""Associated Number"");
                			var sAssType = GetFieldValue(""Associated Type"");
                		}
           			}
          	
          	
          			sRMSBO = TheApplication().GetBusObject(""RMS SIM Number"");
          			sRMSBC = sRMSBO.GetBusComp(""RMS SIM Number"");
          
   			
   					with(sRMSBC)
   					{
   						ActivateField(""Concatenated Number"");
   						ActivateField(""Sim Card Config Name"");
   						ActivateField(""Status"");
   						SetViewMode(AllView);
   						ClearToQuery();
   						SetSearchSpec(""Concatenated Number"", sAssNumber);
   						ExecuteQuery(ForwardOnly);
   				
   						if(FirstRecord())
   						{
   							sConfig = GetFieldValue(""Sim Card Config Name"");
   							var sSIMStatus = GetFieldValue(""Status"");
   						}
   				
   					}
   			
   					if(sMigType == sMigration1 || sMigType == sMigration2)
   					{
   						sysname = ""SIM_INV_CORP_TYPE"";
   					}
   					else
   					{
   						sysname = ""SIM_CORP_INV_TYPE"";
   					}
   			
   					sSysBO = TheApplication().GetBusObject(""System Preferences"");
   					sSysBC = sSysBO.GetBusComp(""System Preferences"");
   			
   					with(sSysBC)
   					{
   						ActivateField(""Name"");
   						ActivateField(""Value"");
   						SetViewMode(AllView);
   						ClearToQuery();
   						SetSearchSpec(""Name"",sysname);
   						ExecuteQuery(ForwardOnly);
   				
   						if(FirstRecord())
   						{
   							sCngName = GetFieldValue(""Value"");	
   						}
   				
   							sArrCng = sCngName.split("";"");
   				
   						for(i=0;i<=sArrCng.length;i++)
   						{
   							if(sArrCng[i]== sConfig)
   							{
   								SimFlag = 0;
   								break;
   							}
   							else
   							{
   								if(sMigType == sMigration1 || sMigType == sMigration2)
   								{
   									SimFlag = 1;
   								}
   								else
   								{
   									SimFlag = 2;	
   								}
   						
   							}
   						}
   			   
   					}
   				
   				/*	if(SimFlag == ""1"")  //changed to 1
   					{
   						this.SetFieldValue(""STC ICCID"", """");
   						TheApplication().RaiseErrorText(""Please select the Corporate SIM"");
   						return(CancelOperation);
   					}
   					else if(SimFlag == ""2"")
   					{
   						this.SetFieldValue(""STC ICCID"", """");
   						TheApplication().RaiseErrorText(""Please select the Individual SIM"");
   						return(CancelOperation);
   					}
   			
   		   			TheApplication().SetProfileAttr(""SimRetain"","""");
  					TheApplication().SetProfileAttr(""MigType"","""");	*/		
   			}  // end if 
   					
          	//end dev	 
               WriteRecord(); 
               
      
               
               
               	BlockRe_selection (vOldSIM,sSIMno);
                break;
                
         case ""Service Id"":
    		this.ActivateField(""Service Id"");
    		this.ActivateField(""Order Header Id"");
    		sOrderId = this.GetFieldValue(""Order Header Id"");
    		newMSISDN = this.GetFieldValue(""Service Id"");  
    	//	sOrderType = this.GetFieldValue(""STC Order Sub Type"");          		     	
			sRMSNumbo = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
			sRMSNumbc = sRMSNumbo.GetBusComp(""RMS NM Number Enquiry""); 
			sOrderTypeLOV = TheApplication().InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Provide"");
		
			boOrder = TheApplication().GetBusObject(""Order Entry (Sales)"");			
			bcOrder = boOrder.GetBusComp(""Order Entry - Orders"");	
			with (bcOrder)
				{
				
					SetViewMode(AllView);
					ActivateField(""STC Order SubType"");
					ClearToQuery();
					SetSearchSpec(""Id"",sOrderId);
					ExecuteQuery(ForwardOnly);	
					if(FirstRecord())		
					sOrderType = GetFieldValue(""STC Order SubType"");
					if(sOrderType == sOrderTypeLOV)
                	{	                                           
            			with(sRMSNumbc)
            			{
							ActivateField(""Number String"");
							ActivateField(""Allocated To"");
			                SetViewMode(AllView);
			                ClearToQuery();
			                SetSearchSpec(""Number String"",newMSISDN);
			                ExecuteQuery(ForwardOnly);    
                    
				                if(FirstRecord())
				                {	
									sAllocatd = GetFieldValue(""Allocated To""); 
					 				strIsBS = TheApplication().GetProfileAttr(""STC GroupCode Id"");
									var loginname = TheApplication().GetProfileAttr(""Login Name""); // [Neha kasat][18092013][For SIP ISDN]
									
					                	if (strIsBS != sAllocatd && loginname!=""SADMIN"") // [Neha kasat][18092013][For SIP ISDN]
					                	{
											TheApplication().RaiseErrorText(""You do not have access to select this MSISDN"");
						      				return(CancelOperation);
						       			}//end of if
			
										}//end of if
										}//end of if
									}//end of with
								}
    		BlockRe_selection (vOldMSISDN,newMSISDN);
       break;   		  
       		       
                
       default :
                break;
    }
    return (ContinueOperation); 
  }//end of try
  catch(e)
  {
    throw(e);
  }
  finally
  {
  	
  }
                           
          
   
}
function CallMSISDNPackageCheck(ServiceId,PartNumber)
{
	try
	{
		var vAppObj: Application = TheApplication();
		var sBSService: Service = vAppObj.GetService(""Workflow Process Manager"");
		var vInPS: PropertySet = vAppObj.NewPropertySet();
		var vOutPS: PropertySet = vAppObj.NewPropertySet();
		vInPS.SetProperty(""ProcessName"", ""STC MSISDN Package Validation Workflow"");
		vInPS.SetProperty(""STC MSISDN"",ServiceId);
		vInPS.SetProperty(""STC Part Code"",PartNumber);
		sBSService.InvokeMethod(""RunProcess"", vInPS, vOutPS);
		var vMsg = vOutPS.GetProperty(""Error Message"");
		return vMsg;
	}
	finally
	{
		vAppObj = null;
		vInPS = null;
		vOutPS = null;
		sBSService = null;
	}
}
var vNewRec = false; //9/10/14 Anchal: Created new as per SD_New BB
function BusComp_NewRecord ()
{
	vNewRec = true; //9/10/14 Anchal: Created new as per SD_New BB
	var bc_OrderTypes;
	try
	{
		bc_OrderTypes = this.GetPicklistBusComp(""Order Type"");
			 
			 bc_OrderTypes.ActivateField(""Order Type"");
			 with (bc_OrderTypes)
			 {
			  SetViewMode(AllView);
			  ClearToQuery();
			  SetSearchSpec(""Order Type"",""Sales Order"");
			  ExecuteQuery(ForwardOnly);
			  
			  if (FirstRecord())
			   Pick();
			 }
			 var strActiveView = TheApplication().ActiveViewName();
			 if(strActiveView == ""STC Billing Account Orders List Applet View"")
			 {
			 	var sCPSflg = ""N"";
			 	var sBillAcntId = this.ParentBusComp().GetFieldValue(""Id"");	
			 	var sCPSProfileAttr = TheApplication().GetProfileAttr(""NewOrderCPSFlag"");
			 	if(sCPSProfileAttr == ""Y"")
			 	{
			 		sCPSflg = ""Y"";
			 	}
			 	else
			 	{
			 		sCPSflg = ""N"";
			 	}
			 	if(sBillAcntId != """" && sBillAcntId != null)
			 	{
			 		fnUpdateCPSBillFlg(sBillAcntId, sCPSflg);
			 	}
			 	TheApplication().SetProfileAttr(""NewOrderCPSFlag"","""");
			 	this.ParentBusComp().ActivateField(""STC Split Billing Flag"");
				var splitFlag = this.ParentBusComp().GetFieldValue(""STC Split Billing Flag"");
			 	if(splitFlag != ""Y"")
			 	{
					this.ParentBusComp().InvokeMethod(""RefreshBusComp"");
				}
			}
			 
	}
	catch(e)
	{
	}
	finally
	{
		bc_OrderTypes = null;
	}
}
function BusComp_NewRecord ()
{
	vNewRec = true; //9/10/14 Anchal: Created new as per SD_New BB
	var bc_OrderTypes;
	try
	{
		bc_OrderTypes = this.GetPicklistBusComp(""Order Type"");
			 
			 bc_OrderTypes.ActivateField(""Order Type"");
			 with (bc_OrderTypes)
			 {
			  SetViewMode(AllView);
			  ClearToQuery();
			  SetSearchSpec(""Order Type"",""Sales Order"");
			  ExecuteQuery(ForwardOnly);
			  
			  if (FirstRecord())
			   Pick();
			 }
			 var strActiveView = TheApplication().ActiveViewName();
			 if(strActiveView == ""STC Billing Account Orders List Applet View"")
			 {
			 	var sCPSflg = ""N"";
			 	var sBillAcntId = this.ParentBusComp().GetFieldValue(""Id"");	
			 	var sCPSProfileAttr = TheApplication().GetProfileAttr(""NewOrderCPSFlag"");
			 	if(sCPSProfileAttr == ""Y"")
			 	{
			 		sCPSflg = ""Y"";
			 	}
			 	else
			 	{
			 		sCPSflg = ""N"";
			 	}
			 	if(sBillAcntId != """" && sBillAcntId != null)
			 	{
			 		fnUpdateCPSBillFlg(sBillAcntId, sCPSflg);
			 	}
			 	TheApplication().SetProfileAttr(""NewOrderCPSFlag"","""");
			 	this.ParentBusComp().ActivateField(""STC Split Billing Flag"");
				var splitFlag = this.ParentBusComp().GetFieldValue(""STC Split Billing Flag"");
				var sSaleTxnSwtch = TheApplication().InvokeMethod(""LookupValue"",""STC_SALE_TXN_SWCH"",""SWITCH"");//RohitR:17-04-21:Sales Txn Optimization
				if(splitFlag != ""Y"" && sSaleTxnSwtch != ""Y"")                                        //RohitR:17-04-21:Sales Txn Optimization:Changed condition
			 	{
					this.ParentBusComp().InvokeMethod(""RefreshBusComp"");
				}
			}
			 
	}
	catch(e)
	{
	}
	finally
	{
		bc_OrderTypes = null;
	}
}
function BusComp_PreInvokeMethod (MethodName)
{
var appObj = null;
var iReturn = null;
var boAccount = null;
var bcAccount = null;
var accntId = null;
var custType = null;
var dunningChangeService = null;
var input = null, output = null;

try
{
	iReturn = ContinueOperation;
	switch(MethodName)
	{
		case ""SubmitOrderSTC"":
		case ""ValidateOrder"":
		{
			appObj = TheApplication();
			this.ActivateField(""Account Id"");
			accntId = this.GetFieldValue(""Account Id"");
			
			boAccount = appObj.GetBusObject(""Account"");
			bcAccount = boAccount.GetBusComp(""Account"");
			if(bcAccount != null)
			{
				with(bcAccount)
				{
					SetViewMode(AllView);
					ActivateField(""Type"");
					ClearToQuery();
					SetSearchSpec(""Id"", accntId);
					ExecuteQuery(ForwardOnly);
					isRecord = FirstRecord();
					//count = CountRecords();	
					if(isRecord)//1
					{
						custType = GetFieldValue(""Type"");
							if(custType == ""Corporate"")
							{
								//Calling Business Service to validate the CSR:
									dunningChangeService = appObj.GetService(""STC Corp CSR Validation BS"");
									input = appObj.NewPropertySet();
									output = appObj.NewPropertySet();
									dunningChangeService.InvokeMethod(""ValidateCorporateCSR"", input, output);
							}
					}//end of if(isRecord)//1
				}//end of with(bcAccount)
			}//end of  if(bcAccount != null)
			iReturn	= CancelOperation;
			break;
		}
	}//end of switch(MethodName)
}	
catch(e)
{
	throw(e);
}
finally
{
	input = null;
	output = null;
	dunningChangeService = null;
	bcAccount = null;
	boAccount = null;
	appObj = null;
}	
	return (iReturn);

}
"//***********************************************************************************************************//
//Purpose: 1)To validate whether the current user(CSR) has the rights to modify the order or not 
//Inputs: 
//Outputs: Will give an error message if the CSR is not authorised
//Author: Navin Rai
//Release: 
//Date: 20-Oct-2010
//*************************************************************************************************************//
function BusComp_PreNewRecord ()
{
	var appObj;
	var currLoginId;
	var custType;
	var foundCSR, foundCSRSubstr;
	var parentBC;
	
	try
	{
	//Added by Navin
		appObj = TheApplication();
				
				with(appObj)
				{
					currLoginId = LoginName();	
				}		
			
				parentBC = this.ParentBusComp();
				
			if(parentBC != null)
			{
				parentBC.ActivateField(""Type"");
				custType = parentBC.GetFieldValue(""Type"");
				
				if(custType == ""Corporate"")
				{
					foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_CORPORATE_CSRS"",currLoginId);
					
					foundCSRSubstr = foundCSR.substring(0,3);
					
					if(foundCSRSubstr != ""CSR"")
					{
						appObj.RaiseErrorText(""Sorry! You do not have the privilege to create the order"");
						return (CancelOperation);
					}
				}
			}
		}
	finally
		{
			parentBC = null;
			appObj = null;
		}
	//Navin Edit Ends

	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	var sOrderSubTypeLOV;
	var appObj=TheApplication();
	var sStatusApprLOV=null;
	var sStatusRejLOV=null;
	var sStatusCanLOV=null;
	var sSystemdate;
	var sSuper="""";
	var sBHId;//CIO
	var sSubIdType;//CIO
	var sSubscriberCntry;
	var sActiveViewName = TheApplication().ActiveViewName();
	try
	{
		switch(FieldName)
		{
			case ""Delivery Block"":
				appObj = TheApplication();
				/*var SuspReason = appObj.InvokeMethod(""LookupValue"",""SAP_SO_HEADER_DELIV_BLOCK"",""Suspected Misuse"");
				if(FieldValue == SuspReason)
				{
					var sUser = appObj.LoginName();
					var isSuperUser = appObj.InvokeMethod(""LookupValue"", ""STC_RAFMS_USER"", sUser);
					var foundCSRSubstr = isSuperUser.substring(0,3);
					if(	foundCSRSubstr != ""CSR"")
					{
						appObj.RaiseErrorText(""Suspension Reason is not allowed. Please select another suspension reason."");
						return(CancelOperation);
					}
				}*/
				var vDisconnectReason = appObj.InvokeMethod(""LookupValue"",""SAP_SO_HEADER_DELIV_BLOCK"",""Migration to TDD Network"");
				if(FieldValue == vDisconnectReason)
				{
					var sUser1 = appObj.LoginName();
					var isSuperUser1 = appObj.InvokeMethod(""LookupValue"", ""STC_FDD_TO_TDD_USER"", sUser1);
					var foundCSRSubstr1 = isSuperUser1.substring(0,5);
					if(	foundCSRSubstr1 != ""ALLOW"")
					{
						appObj.RaiseErrorText(""You are not allowed to select 'Migration to TDD Network'. Please select another reason."");
						return(CancelOperation);
					}
				}
			break;
			case ""STC Lead Id"":
				var sLeadBC,sLeadStatus;
				var Spec;
				appObj = TheApplication();
				this.ActivateField(""STC Lead Id"");
				var sLeadId = this.GetFieldValue(""STC Lead Id"");
				if(sLeadId != """" && sLeadId != null)
				{
					sLeadBC = appObj.GetBusObject(""Lead"").GetBusComp(""Lead"");
					with(sLeadBC)
					{
						Spec =  ""[Id] = '"" + sLeadId + ""'"";
						ActivateField(""Lead Status"");
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchExpr(Spec);
						ExecuteQuery(ForwardOnly);
						if(FirstRecord())
						{
							sLeadStatus = appObj.InvokeMethod(""LookupValue"",""LEAD_STATUS"",""Awaiting Fulfilment"");
							SetFieldValue(""Lead Status"",sLeadStatus);
							WriteRecord();
						}
					}
				}
				if(FieldValue != sLeadId && FieldValue != null && FieldValue != """")
				{
					sLeadBC = appObj.GetBusObject(""Lead"").GetBusComp(""Lead"");
					with(sLeadBC)
					{
						Spec =  ""[Id] = '"" + FieldValue + ""'"";
						ActivateField(""Lead Status"");
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchExpr(Spec);
						ExecuteQuery(ForwardOnly);
						if(FirstRecord())
						{
							sLeadStatus = appObj.InvokeMethod(""LookupValue"",""LEAD_STATUS"",""Completed"");
							SetFieldValue(""Lead Status"",sLeadStatus);
							WriteRecord();
						}
					}
				}
				break;
			case ""STC Order SubType"":
				appObj = TheApplication();
				sOrderSubTypeLOV = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Disconnect"");
				if(FieldValue != sOrderSubTypeLOV)
				{
					this.SetFieldValue(""STC Refund Method"","""");
					this.SetFieldValue(""STC Customer Name"","""");
					this.SetFieldValue(""STC Account Number"","""");
				}
				break;
			case ""STC Subscriber Id Type"":				
				sBHId = TheApplication().InvokeMethod(""LookupValue"",""STC_CUST_ID_TYPE"",""Bahraini ID"");				
				if(FieldValue == sBHId){
					sSubscriberCntry = TheApplication().InvokeMethod(""LookupValue"",""STC_GCC_COUNTRY_CODE"",""BH"");
					this.SetFieldValue(""STC GCC Country Code"",sSubscriberCntry);
				}
				else
					this.SetFieldValue(""STC GCC Country Code"","""");
										
				break;
			case ""STC Individual Id Type"":
				sBHId = TheApplication().InvokeMethod(""LookupValue"",""STC_CUST_ID_TYPE"",""Bahraini ID"");
				if(FieldValue == sBHId){
					sSubscriberCntry = TheApplication().InvokeMethod(""LookupValue"",""STC_GCC_COUNTRY_CODE"",""BH"");
					this.SetFieldValue(""STC Indv GCC Country Code"",sSubscriberCntry);
				}
				else
					this.SetFieldValue(""STC Indv GCC Country Code"","""");					
				break;
				
			case ""STC GCC Country Code"":
				if(sActiveViewName == ""Order Entry - Line Items Detail View (Sales)""){
					sSubIdType = GetFieldValue(""STC Subscriber Id Type"");
					if(sSubIdType == ""Passport"")
						appObj.RaiseErrorText(""GCC Country is not allowed for Id Type 'Passport'"");
				}//endif sActiveViewName			
				break;
				
			case ""STC Indv GCC Country Code"":
				if(sActiveViewName == ""Order Entry - Line Items Detail View (Sales)""){
					sSubIdType = GetFieldValue(""STC Individual Id Type"");
					if(sSubIdType == ""Passport"")
						appObj.RaiseErrorText(""GCC Country is not allowed for Id Type 'Passport'"");
				}//endif sActiveViewName			
				break;		

			case ""Status"":
				appObj = TheApplication();
				with(appObj)
				{
					sStatusApprLOV = InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Approved"");
					sStatusRejLOV = InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Rejected"");
					sStatusCanLOV = InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Cancelled"");
				}
				switch(FieldValue)
				{
					case ""Approved"":
						this.SetFieldValue(""STC Order Sub Status"",sStatusApprLOV);
						this.ActivateField(""Approved"");
						this.SetFieldValue(""Approved"",""Y"");
						sSystemdate = this.GetFieldValue(""TimeStamp"");
						this.SetFieldValue(""Approved By Date"",sSystemdate);
						break;
					
					case ""Rejected"":
						this.SetFieldValue(""STC Order Sub Status"",sStatusRejLOV);
						this.ActivateField(""Approved"");
						this.SetFieldValue(""Approved"",""Y"");
						sSystemdate = this.GetFieldValue(""TimeStamp"");
						this.SetFieldValue(""Approved By Date"",sSystemdate);
						break;
						
					case ""Cancelled"":
						var sCancelUser = appObj.LoginName();
						ActivateField(""STC Order SubType"");
						this.ActivateField(""STC Channel"");
						var eComChannel = this.GetFieldValue(""STC Channel"");
						var sOrderType = this.GetFieldValue(""STC Order SubType"");
						var eComLOVChannel = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_CHANNEL"",""eCommerce"");
						var AllowUser = appObj.InvokeMethod(""LookupValue"",""STC_ECOM_CANCEL_USER"",sCancelUser);
						AllowUser = AllowUser.substring(0, 4);
						if(eComChannel == eComLOVChannel)
						{
							//if((sOrderType == ""Provide"" ||  sOrderType == ""Modify"") && AllowUser == ""USER"")
							if((sOrderType == ""Provide"" || sOrderType == ""Modify"" || sOrderType == ""Retail"") && AllowUser == ""USER"")//Mayank(08Nov2018): Added for Ecom Retail
							{
							 var a = 1;
							}
							else
							{
								appObj.RaiseErrorText(""You are not allowed to cancel eShop Order."");
							}
						}
						if (this.GetFieldValue(""STC Open DIA Activity Count"") > 0 )
							appObj.RaiseErrorText(""There is an open activity of type 'DIA Mobility Approval' against this order. This order cannot be cancelled."");
						else
						{
							var OrderId = this.GetFieldValue(""Id"");
							this.ActivateField(""STC Order SubType"");
							var OrderType = this.GetFieldValue(""STC Order SubType"");
							fn_CheckVoucherOLI(OrderId);
							if((OrderId != null || OrderId != '' || OrderId != """") && (OrderType == ""Modify"" || OrderType == ""Suspend""))
							{
								fn_CancelTT(OrderId);
							}
							//this.SetFieldValue(""STC Order Sub Status"",sStatusCanLOV);//Mayank: Added for Ecommerce Retail
							fn_RestrictPOSOrdCancel();
							this.SetFieldValue(""STC Order Sub Status"",sStatusCanLOV);//Mayank: Added for Ecommerce Retail
						}
						break;
					default:
				}
				break;
		}
		var sCreateAct = TheApplication().GetProfileAttr(""CreateAct"");
		if(FieldName ==""STC Num of Inst"")
		{ 		
			this.ActivateField(""STC Order Install Flag"");
			var ActiveView = TheApplication().ActiveViewName(); 
			var Cat =this.GetFieldValue(""STC Contract Category"");
			var InstallFlg = this.GetFieldValue(""STC Order Install Flag"");
			if(InstallFlg != ""N"")
			{
				if(Cat!=""Individual"")
				{
					appObj.RaiseErrorText(""Number of Installments is not Applicable other than Individual Segments"");
				}//if(Cat!=""Individual"")
			}//if(InstallFlg != ""N"")	
		} 
		return(ContinueOperation);
	}
	catch(e)
	{ 
		throw(e)
	}
	finally
	{
	}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	var sOrderSubTypeLOV;
	var appObj=TheApplication();
	var sStatusApprLOV=null;
	var sStatusRejLOV=null;
	var sStatusCanLOV=null;
	var sSystemdate;
	var sSuper="""";
	var sBHId;//CIO
	var sSubIdType;//CIO
	var sSubscriberCntry;
	var strCampType; //Abuzar:10102021: SD: Telesales
	var sActiveViewName = TheApplication().ActiveViewName();
	try
	{
		switch(FieldName)
		{
			case ""STC Amend Sales Reason"":

						var vInputs = TheApplication().NewPropertySet();
						var vOutputs = TheApplication().NewPropertySet();
						var vServiceWF = TheApplication().GetService(""Workflow Process Manager"");
						vInputs.SetProperty(""ProcessName"", ""STC Amend Sales Reason Validation WF"");
						vInputs.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
						vServiceWF.InvokeMethod(""RunProcess"", vInputs, vOutputs);
						with(vOutputs)
						{
							var WFerrCode = GetProperty(""Error Code"");
							var WFerrMsg = GetProperty(""Error Message"");
							if (WFerrCode != ""0"")
							{
								TheApplication().RaiseErrorText(WFerrMsg);
							}
						}
						var OrderSubType = this.GetFieldValue(""STC Order SubType"");
						var strCancelTransaction = TheApplication().InvokeMethod(""LookupValue"", ""SAP_SO_HEADER_DELIV_BLOCK"", ""Cancel Transaction"");
						if(FieldValue != """" && FieldValue != null && OrderSubType == ""Disconnect"")
						{
							SetFieldValue(""Delivery Block"", strCancelTransaction);
						}
			break;
			case ""Delivery Block"":
				appObj = TheApplication();
				/*var SuspReason = appObj.InvokeMethod(""LookupValue"",""SAP_SO_HEADER_DELIV_BLOCK"",""Suspected Misuse"");
				if(FieldValue == SuspReason)
				{
					var sUser = appObj.LoginName();
					var isSuperUser = appObj.InvokeMethod(""LookupValue"", ""STC_RAFMS_USER"", sUser);
					var foundCSRSubstr = isSuperUser.substring(0,3);
					if(	foundCSRSubstr != ""CSR"")
					{
						appObj.RaiseErrorText(""Suspension Reason is not allowed. Please select another suspension reason."");
						return(CancelOperation);
					}
				}*/
				var vDisconnectReason = appObj.InvokeMethod(""LookupValue"",""SAP_SO_HEADER_DELIV_BLOCK"",""Migration to TDD Network"");
				if(FieldValue == vDisconnectReason)
				{
					var sUser1 = appObj.LoginName();
					var isSuperUser1 = appObj.InvokeMethod(""LookupValue"", ""STC_FDD_TO_TDD_USER"", sUser1);
					var foundCSRSubstr1 = isSuperUser1.substring(0,5);
					if(	foundCSRSubstr1 != ""ALLOW"")
					{
						appObj.RaiseErrorText(""You are not allowed to select 'Migration to TDD Network'. Please select another reason."");
						return(CancelOperation);
					}
				}
			break;
			case ""STC Lead Id"":
				var sLeadBC,sLeadStatus;
				var Spec;
				appObj = TheApplication();
				this.ActivateField(""STC Lead Id"");
				var sLeadId = this.GetFieldValue(""STC Lead Id"");
				if(sLeadId != """" && sLeadId != null)
				{
					sLeadBC = appObj.GetBusObject(""Lead"").GetBusComp(""Lead"");
					with(sLeadBC)
					{
						Spec =  ""[Id] = '"" + sLeadId + ""'"";
						ActivateField(""Lead Status"");
						ActivateField(""STC Sales Campaign Type""); //Abuzar:10102021:SD Telesales
						ActivateField(""STC Order Id""); //Abuzar:10102021:SD Telesales
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchExpr(Spec);
						ExecuteQuery(ForwardOnly);
						if(FirstRecord())
						{
							strCampType = GetFieldValue(""STC Sales Campaign Type""); //Abuzar:10102021:SD Telesales - Start
							if (strCampType != """" && strCampType != """" && strCampType != ""Not Applicable"")
							{
								SetFieldValue(""STC Order Id"", """");
							}
							else
							{//Abuzar:10102021:SD Telesales - End
								sLeadStatus = appObj.InvokeMethod(""LookupValue"",""LEAD_STATUS"",""Awaiting Fulfilment"");
								SetFieldValue(""Lead Status"",sLeadStatus);
							}
							WriteRecord();
						}
					}
				}
				if(FieldValue != sLeadId && FieldValue != null && FieldValue != """")
				{
					sLeadBC = appObj.GetBusObject(""Lead"").GetBusComp(""Lead"");
					with(sLeadBC)
					{
						Spec =  ""[Id] = '"" + FieldValue + ""'"";
						ActivateField(""Lead Status"");
						ActivateField(""STC Sales Campaign Type""); //Abuzar:10102021:SD Telesales
						ActivateField(""STC Order Id""); //Abuzar:10102021:SD Telesales
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchExpr(Spec);
						ExecuteQuery(ForwardOnly);
						if(FirstRecord())
						{
							strCampType = GetFieldValue(""STC Sales Campaign Type""); //Abuzar:10102021:SD Telesales - Start
							if (strCampType != """" && strCampType != """" && strCampType != ""Not Applicable"")
							{
								SetFieldValue(""STC Order Id"", this.GetFieldValue(""Id""));
							}
							else
							{//Abuzar:10102021:SD Telesales - End
								sLeadStatus = appObj.InvokeMethod(""LookupValue"",""LEAD_STATUS"",""Completed"");
								SetFieldValue(""Lead Status"",sLeadStatus);
							}
							WriteRecord();
						}
					}
				}
				break;
			case ""STC Order SubType"":
				appObj = TheApplication();
				sOrderSubTypeLOV = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Disconnect"");
				if(FieldValue != sOrderSubTypeLOV)
				{
					this.SetFieldValue(""STC Refund Method"","""");
					this.SetFieldValue(""STC Customer Name"","""");
					this.SetFieldValue(""STC Account Number"","""");
				}
				break;
			case ""STC Subscriber Id Type"":				
				sBHId = TheApplication().InvokeMethod(""LookupValue"",""STC_CUST_ID_TYPE"",""Bahraini ID"");				
				if(FieldValue == sBHId){
					sSubscriberCntry = TheApplication().InvokeMethod(""LookupValue"",""STC_GCC_COUNTRY_CODE"",""BH"");
					this.SetFieldValue(""STC GCC Country Code"",sSubscriberCntry);
				}
				else
					this.SetFieldValue(""STC GCC Country Code"","""");
										
				break;
			case ""STC Individual Id Type"":
				sBHId = TheApplication().InvokeMethod(""LookupValue"",""STC_CUST_ID_TYPE"",""Bahraini ID"");
				if(FieldValue == sBHId){
					sSubscriberCntry = TheApplication().InvokeMethod(""LookupValue"",""STC_GCC_COUNTRY_CODE"",""BH"");
					this.SetFieldValue(""STC Indv GCC Country Code"",sSubscriberCntry);
				}
				else
					this.SetFieldValue(""STC Indv GCC Country Code"","""");					
				break;
				
			case ""STC GCC Country Code"":
				if(sActiveViewName == ""Order Entry - Line Items Detail View (Sales)""){
					sSubIdType = GetFieldValue(""STC Subscriber Id Type"");
					if(sSubIdType == ""Passport"")
						appObj.RaiseErrorText(""GCC Country is not allowed for Id Type 'Passport'"");
				}//endif sActiveViewName			
				break;
				
			case ""STC Indv GCC Country Code"":
				if(sActiveViewName == ""Order Entry - Line Items Detail View (Sales)""){
					sSubIdType = GetFieldValue(""STC Individual Id Type"");
					if(sSubIdType == ""Passport"")
						appObj.RaiseErrorText(""GCC Country is not allowed for Id Type 'Passport'"");
				}//endif sActiveViewName			
				break;		

			case ""Status"":
				appObj = TheApplication();
				with(appObj)
				{
					sStatusApprLOV = InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Approved"");
					sStatusRejLOV = InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Rejected"");
					sStatusCanLOV = InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Cancelled"");
				}
				switch(FieldValue)
				{
					case ""Approved"":
						this.SetFieldValue(""STC Order Sub Status"",sStatusApprLOV);
						this.ActivateField(""Approved"");
						this.SetFieldValue(""Approved"",""Y"");
						sSystemdate = this.GetFieldValue(""TimeStamp"");
						this.SetFieldValue(""Approved By Date"",sSystemdate);
						break;
					
					case ""Rejected"":
						this.SetFieldValue(""STC Order Sub Status"",sStatusRejLOV);
						this.ActivateField(""Approved"");
						this.SetFieldValue(""Approved"",""Y"");
						sSystemdate = this.GetFieldValue(""TimeStamp"");
						this.SetFieldValue(""Approved By Date"",sSystemdate);
						break;
						
					case ""Cancelled"":
						var sCancelUser = appObj.LoginName();
						ActivateField(""STC Order SubType"");
						this.ActivateField(""STC Channel"");
						var eComChannel = this.GetFieldValue(""STC Channel"");
						var sOrderType = this.GetFieldValue(""STC Order SubType"");
						var eComLOVChannel = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_CHANNEL"",""eCommerce"");
						var AllowUser = appObj.InvokeMethod(""LookupValue"",""STC_ECOM_CANCEL_USER"",sCancelUser);
						AllowUser = AllowUser.substring(0, 4);
						if(eComChannel == eComLOVChannel)
						{
							//if((sOrderType == ""Provide"" ||  sOrderType == ""Modify"") && AllowUser == ""USER"")
							if((sOrderType == ""Provide"" || sOrderType == ""Modify"" || sOrderType == ""Retail"") && AllowUser == ""USER"")//Mayank(08Nov2018): Added for Ecom Retail
							{
							 var a = 1;
							}
							else
							{
								appObj.RaiseErrorText(""You are not allowed to cancel eShop Order."");
							}
						}
						if (this.GetFieldValue(""STC Open DIA Activity Count"") > 0 )
							appObj.RaiseErrorText(""There is an open activity of type 'DIA Mobility Approval' against this order. This order cannot be cancelled."");
						else
						{
							var OrderId = this.GetFieldValue(""Id"");
							this.ActivateField(""STC Order SubType"");
							var OrderType = this.GetFieldValue(""STC Order SubType"");
							fn_CheckVoucherOLI(OrderId);
							if((OrderId != null || OrderId != '' || OrderId != """") && (OrderType == ""Modify"" || OrderType == ""Suspend""))
							{
								fn_CancelTT(OrderId);
							}
							//this.SetFieldValue(""STC Order Sub Status"",sStatusCanLOV);//Mayank: Added for Ecommerce Retail
							fn_RestrictPOSOrdCancel();
							this.SetFieldValue(""STC Order Sub Status"",sStatusCanLOV);//Mayank: Added for Ecommerce Retail
						}
						break;
					default:
				}
				break;
		}
		var sCreateAct = TheApplication().GetProfileAttr(""CreateAct"");
		if(FieldName ==""STC Num of Inst"")
		{ 		
			this.ActivateField(""STC Order Install Flag"");
			var ActiveView = TheApplication().ActiveViewName(); 
			var Cat =this.GetFieldValue(""STC Contract Category"");
			var InstallFlg = this.GetFieldValue(""STC Order Install Flag"");
			if(InstallFlg != ""N"")
			{
				if(Cat!=""Individual"")
				{
					appObj.RaiseErrorText(""Number of Installments is not Applicable other than Individual Segments"");
				}//if(Cat!=""Individual"")
			}//if(InstallFlg != ""N"")	
		} 
		return(ContinueOperation);
	}
	catch(e)
	{ 
		throw(e)
	}
	finally
	{
	}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	var sOrderSubTypeLOV;
	var appObj=TheApplication();
	var sStatusApprLOV=null;
	var sStatusRejLOV=null;
	var sStatusCanLOV=null;
	var sSystemdate;
	var sSuper="""";
	var sBHId;//CIO
	var sSubIdType;//CIO
	var sSubscriberCntry;
	var sActiveViewName = TheApplication().ActiveViewName();
	try
	{
		switch(FieldName)
		{
			case ""STC Amend Sales Reason"":

						var vInputs = TheApplication().NewPropertySet();
						var vOutputs = TheApplication().NewPropertySet();
						var vServiceWF = TheApplication().GetService(""Workflow Process Manager"");
						vInputs.SetProperty(""ProcessName"", ""STC Amend Sales Reason Validation WF"");
						vInputs.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
						vServiceWF.InvokeMethod(""RunProcess"", vInputs, vOutputs);
						with(vOutputs)
						{
							var WFerrCode = GetProperty(""Error Code"");
							var WFerrMsg = GetProperty(""Error Message"");
							if (WFerrCode != ""0"")
							{
								TheApplication().RaiseErrorText(WFerrMsg);
							}
						}
						var OrderSubType = this.GetFieldValue(""STC Order SubType"");
						var strCancelTransaction = TheApplication().InvokeMethod(""LookupValue"", ""SAP_SO_HEADER_DELIV_BLOCK"", ""Cancel Transaction"");
						if(FieldValue != """" && FieldValue != null && OrderSubType == ""Disconnect"")
						{
							SetFieldValue(""Delivery Block"", strCancelTransaction);
						}
			break;
			case ""Delivery Block"":
				appObj = TheApplication();
				/*var SuspReason = appObj.InvokeMethod(""LookupValue"",""SAP_SO_HEADER_DELIV_BLOCK"",""Suspected Misuse"");
				if(FieldValue == SuspReason)
				{
					var sUser = appObj.LoginName();
					var isSuperUser = appObj.InvokeMethod(""LookupValue"", ""STC_RAFMS_USER"", sUser);
					var foundCSRSubstr = isSuperUser.substring(0,3);
					if(	foundCSRSubstr != ""CSR"")
					{
						appObj.RaiseErrorText(""Suspension Reason is not allowed. Please select another suspension reason."");
						return(CancelOperation);
					}
				}*/
				var vDisconnectReason = appObj.InvokeMethod(""LookupValue"",""SAP_SO_HEADER_DELIV_BLOCK"",""Migration to TDD Network"");
				if(FieldValue == vDisconnectReason)
				{
					var sUser1 = appObj.LoginName();
					var isSuperUser1 = appObj.InvokeMethod(""LookupValue"", ""STC_FDD_TO_TDD_USER"", sUser1);
					var foundCSRSubstr1 = isSuperUser1.substring(0,5);
					if(	foundCSRSubstr1 != ""ALLOW"")
					{
						appObj.RaiseErrorText(""You are not allowed to select 'Migration to TDD Network'. Please select another reason."");
						return(CancelOperation);
					}
				}
			break;
			case ""STC Lead Id"":
				var sLeadBC,sLeadStatus;
				var Spec;
				appObj = TheApplication();
				this.ActivateField(""STC Lead Id"");
				var sLeadId = this.GetFieldValue(""STC Lead Id"");
				if(sLeadId != """" && sLeadId != null)
				{
					sLeadBC = appObj.GetBusObject(""Lead"").GetBusComp(""Lead"");
					with(sLeadBC)
					{
						Spec =  ""[Id] = '"" + sLeadId + ""'"";
						ActivateField(""Lead Status"");
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchExpr(Spec);
						ExecuteQuery(ForwardOnly);
						if(FirstRecord())
						{
							sLeadStatus = appObj.InvokeMethod(""LookupValue"",""LEAD_STATUS"",""Awaiting Fulfilment"");
							SetFieldValue(""Lead Status"",sLeadStatus);
							WriteRecord();
						}
					}
				}
				if(FieldValue != sLeadId && FieldValue != null && FieldValue != """")
				{
					sLeadBC = appObj.GetBusObject(""Lead"").GetBusComp(""Lead"");
					with(sLeadBC)
					{
						Spec =  ""[Id] = '"" + FieldValue + ""'"";
						ActivateField(""Lead Status"");
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchExpr(Spec);
						ExecuteQuery(ForwardOnly);
						if(FirstRecord())
						{
							sLeadStatus = appObj.InvokeMethod(""LookupValue"",""LEAD_STATUS"",""Completed"");
							SetFieldValue(""Lead Status"",sLeadStatus);
							WriteRecord();
						}
					}
				}
				break;
			case ""STC Order SubType"":
				appObj = TheApplication();
				sOrderSubTypeLOV = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Disconnect"");
				if(FieldValue != sOrderSubTypeLOV)
				{
					this.SetFieldValue(""STC Refund Method"","""");
					this.SetFieldValue(""STC Customer Name"","""");
					this.SetFieldValue(""STC Account Number"","""");
				}
				break;
			case ""STC Subscriber Id Type"":				
				sBHId = TheApplication().InvokeMethod(""LookupValue"",""STC_CUST_ID_TYPE"",""Bahraini ID"");				
				if(FieldValue == sBHId){
					sSubscriberCntry = TheApplication().InvokeMethod(""LookupValue"",""STC_GCC_COUNTRY_CODE"",""BH"");
					this.SetFieldValue(""STC GCC Country Code"",sSubscriberCntry);
				}
				else
					this.SetFieldValue(""STC GCC Country Code"","""");
										
				break;
			case ""STC Individual Id Type"":
				sBHId = TheApplication().InvokeMethod(""LookupValue"",""STC_CUST_ID_TYPE"",""Bahraini ID"");
				if(FieldValue == sBHId){
					sSubscriberCntry = TheApplication().InvokeMethod(""LookupValue"",""STC_GCC_COUNTRY_CODE"",""BH"");
					this.SetFieldValue(""STC Indv GCC Country Code"",sSubscriberCntry);
				}
				else
					this.SetFieldValue(""STC Indv GCC Country Code"","""");					
				break;
				
			case ""STC GCC Country Code"":
				if(sActiveViewName == ""Order Entry - Line Items Detail View (Sales)""){
					sSubIdType = GetFieldValue(""STC Subscriber Id Type"");
					if(sSubIdType == ""Passport"")
						appObj.RaiseErrorText(""GCC Country is not allowed for Id Type 'Passport'"");
				}//endif sActiveViewName			
				break;
				
			case ""STC Indv GCC Country Code"":
				if(sActiveViewName == ""Order Entry - Line Items Detail View (Sales)""){
					sSubIdType = GetFieldValue(""STC Individual Id Type"");
					if(sSubIdType == ""Passport"")
						appObj.RaiseErrorText(""GCC Country is not allowed for Id Type 'Passport'"");
				}//endif sActiveViewName			
				break;		

			case ""Status"":
				appObj = TheApplication();
				with(appObj)
				{
					sStatusApprLOV = InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Approved"");
					sStatusRejLOV = InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Rejected"");
					sStatusCanLOV = InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Cancelled"");
				}
				switch(FieldValue)
				{
					case ""Approved"":
						this.SetFieldValue(""STC Order Sub Status"",sStatusApprLOV);
						this.ActivateField(""Approved"");
						this.SetFieldValue(""Approved"",""Y"");
						sSystemdate = this.GetFieldValue(""TimeStamp"");
						this.SetFieldValue(""Approved By Date"",sSystemdate);
						break;
					
					case ""Rejected"":
						this.SetFieldValue(""STC Order Sub Status"",sStatusRejLOV);
						this.ActivateField(""Approved"");
						this.SetFieldValue(""Approved"",""Y"");
						sSystemdate = this.GetFieldValue(""TimeStamp"");
						this.SetFieldValue(""Approved By Date"",sSystemdate);
						break;
						
					case ""Cancelled"":
						var sCancelUser = appObj.LoginName();
						ActivateField(""STC Order SubType"");
						this.ActivateField(""STC Channel"");
						var eComChannel = this.GetFieldValue(""STC Channel"");
						var sOrderType = this.GetFieldValue(""STC Order SubType"");
						var eComLOVChannel = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_CHANNEL"",""eCommerce"");
						var AllowUser = appObj.InvokeMethod(""LookupValue"",""STC_ECOM_CANCEL_USER"",sCancelUser);
						AllowUser = AllowUser.substring(0, 4);
						if(eComChannel == eComLOVChannel)
						{
							//if((sOrderType == ""Provide"" ||  sOrderType == ""Modify"") && AllowUser == ""USER"")
							if((sOrderType == ""Provide"" || sOrderType == ""Modify"" || sOrderType == ""Retail"") && AllowUser == ""USER"")//Mayank(08Nov2018): Added for Ecom Retail
							{
							 var a = 1;
							}
							else
							{
								appObj.RaiseErrorText(""You are not allowed to cancel eShop Order."");
							}
						}
						if (this.GetFieldValue(""STC Open DIA Activity Count"") > 0 )
							appObj.RaiseErrorText(""There is an open activity of type 'DIA Mobility Approval' against this order. This order cannot be cancelled."");
						else
						{
							var OrderId = this.GetFieldValue(""Id"");
							this.ActivateField(""STC Order SubType"");
							var OrderType = this.GetFieldValue(""STC Order SubType"");
							fn_CheckVoucherOLI(OrderId);
							if((OrderId != null || OrderId != '' || OrderId != """") && (OrderType == ""Modify"" || OrderType == ""Suspend""))
							{
								fn_CancelTT(OrderId);
							}
							//this.SetFieldValue(""STC Order Sub Status"",sStatusCanLOV);//Mayank: Added for Ecommerce Retail
							fn_RestrictPOSOrdCancel();
							this.SetFieldValue(""STC Order Sub Status"",sStatusCanLOV);//Mayank: Added for Ecommerce Retail
						}
						break;
					default:
				}
				break;
		}
		var sCreateAct = TheApplication().GetProfileAttr(""CreateAct"");
		if(FieldName ==""STC Num of Inst"")
		{ 		
			this.ActivateField(""STC Order Install Flag"");
			var ActiveView = TheApplication().ActiveViewName(); 
			var Cat =this.GetFieldValue(""STC Contract Category"");
			var InstallFlg = this.GetFieldValue(""STC Order Install Flag"");
			if(InstallFlg != ""N"")
			{
				if(Cat!=""Individual"")
				{
					appObj.RaiseErrorText(""Number of Installments is not Applicable other than Individual Segments"");
				}//if(Cat!=""Individual"")
			}//if(InstallFlg != ""N"")	
		} 
		return(ContinueOperation);
	}
	catch(e)
	{ 
		throw(e)
	}
	finally
	{
	}
}
function BusComp_SetFieldValue (FieldName)
{
	try
	{	if (FieldName == ""STC Num of Inst"")
		{
			this.InvokeMethod(""RefreshBusComp"");
		}
		//Mayank 1Oct18: Added For Retail Digital Signature --------START-------
		if (FieldName == ""STC Send Contract On Email"")
		{
			this.WriteRecord();
		}
		//Mayank: Added For Retail Digital Signature --- STOP----
		if (FieldName == ""STC VOBB MSISDN Link"")
		{
			var VOBBMSISDN = this.GetFieldValue(""STC VOBB MSISDN Link"");
			if(VOBBMSISDN != null && VOBBMSISDN != """")
			{
				var PickBC = this.GetPicklistBusComp(""STC VOBB MSISDN Link"");
				with(PickBC)
				{
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchSpec(""Serial Number"", VOBBMSISDN);
					ExecuteQuery();
					if(FirstRecord())
					{
						Pick();
					}
				}
				this.WriteRecord();
			}
			else
			{
				this.ActivateField(""STC VOBB Plan Name"");
				this.SetFieldValue(""STC VOBB Plan Name"", """");
				this.WriteRecord();
			}
		}
		if (FieldName == ""Status"")
		{
			var sStatus = this.GetFieldValue(""Status"");
			var RecExists;
			var sCancelStatus = TheApplication().InvokeMethod(""LookupValue"",""FS_ORDER_STATUS"",""Cancelled"");
			if (sStatus == sCancelStatus)
			{
				var sOrderBO = TheApplication().GetBusObject(""Order Entry (Sales)"");
				var sOrderBC = sOrderBO.GetBusComp(""Order Entry - Orders"");
				var sOrderLineBC = sOrderBO.GetBusComp(""Order Entry - Line Items"");
				
				with (sOrderBC)
				{
					SetViewMode(AllView);
					ClearToQuery();
					var sOrderId = this.GetFieldValue(""Id"");
					ActivateField(""STC Channel"");
					ActivateField(""STC PreBooking Flag"");
					ActivateField(""STC Lead Id"");
					ActivateField(""STC Portal Order Number"");
					ActivateField(""STC Order SubType"");
					
					var eComLOVChannel = TheApplication().InvokeMethod(""LookupValue"",""STC_ORDER_CHANNEL"",""eCommerce"");
					SetSearchSpec(""Id"", sOrderId);
					ExecuteQuery(ForwardOnly);
					var PreBookingFlg = GetFieldValue(""STC PreBooking Flag"");
					var sLeadId = GetFieldValue(""STC Lead Id"");
					var eComChannel = GetFieldValue(""STC Channel"");
					var PortalOrderId = GetFieldValue(""STC Portal Order Number"");
					var OrderType = GetFieldValue(""STC Order SubType"");
					if(eComChannel == eComLOVChannel)// && (CancelButtonFlag == null || CancelButtonFlag == """"))
					{
						var vInputs = TheApplication().NewPropertySet();
						var vOutputs = TheApplication().NewPropertySet();
						var vServiceWF = TheApplication().GetService(""Workflow Process Manager"");
						vInputs.SetProperty(""ProcessName"", ""STCeCommerceCancellationWraperProcess"");
						vInputs.SetProperty(""Object Id"",sOrderId);
						vInputs.SetProperty(""PortalOrderId"",PortalOrderId);
						vInputs.SetProperty(""OrderType"",OrderType);
						vInputs.SetProperty(""Operation"",""SetField"");
						vInputs.SetProperty(""Channel"",eComChannel);
						vInputs.SetProperty(""PreBookFlag"",PreBookingFlg);
					    vServiceWF.InvokeMethod(""RunProcess"", vInputs, vOutputs);
					}
					if(sLeadId != null && sLeadId != """")
					{
						var sLeadBC = TheApplication().GetBusObject(""Lead"").GetBusComp(""Lead"");
						with(sLeadBC)
						{
							var Spec =  ""[Id] = '"" + sLeadId + ""'"";
							ActivateField(""Lead Status"");
							SetViewMode(AllView);
							ClearToQuery();
							SetSearchExpr(Spec);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
							{
								var sLeadStatus = TheApplication().InvokeMethod(""LookupValue"",""LEAD_STATUS"",""Awaiting Fulfilment"");
								SetFieldValue(""Lead Status"",sLeadStatus);
								WriteRecord();
							}
						}	
					}
					if(PreBookingFlg == ""Y"")
					{
						with(sOrderLineBC)
						{
							ActivateField(""Part Number"");
							ActivateField(""STC Portal Line Id"");
							SetViewMode(AllView);
							ClearToQuery();
							SetSearchSpec(""Part Number"", ""ECOMBOOKAMT2"");
							ExecuteQuery(ForwardOnly);
							var sCountDevice = CountRecords();
							if (sCountDevice > 0)
							{
								RecExists=FirstRecord();
								while(RecExists)
								{
									var PortalLineId = GetFieldValue(""STC Portal Line Id"");
									var DeviceBC = TheApplication().GetBusObject(""STC ECommerce PreBooking BO"").GetBusComp(""STC ECommerce PreBooking BC"");
									with(DeviceBC)
									{
										ActivateField(""STC Portal Line Item Id"");
										ClearToQuery();
										SetViewMode(AllView);
										SetSearchSpec(""STC Portal Line Item Id"",PortalLineId);
										ExecuteQuery();
										if(FirstRecord())
										{
											SetFieldValue(""Status"",""Pending"");
											SetFieldValue(""STC Select"",""N"");
											WriteRecord();
											var DummyItemBC = TheApplication().GetBusObject(""STC ECom Order BO"").GetBusComp(""STC ECom Order Item BC"");
											with(DummyItemBC)
											{
												ActivateField(""STC Status"");
												ClearToQuery();
												SetViewMode(AllView);
												SetSearchSpec(""Id"",PortalLineId);
												ExecuteQuery();
												if(FirstRecord())
												{
													SetFieldValue(""STC Status"",""Pending"");
													WriteRecord();
												}
											}
										}
									}
									RecExists=NextRecord();
								}
							}
						}	
					}
				}
			}
		}
		return(ContinueOperation);
	}
	catch(e)
	{
	throw(e)
	}
	finally
	{
	}
}
function BusComp_SetFieldValue (FieldName)
{
	try
	{

		if (FieldName == ""STC Num of Inst"")
		{
			this.InvokeMethod(""RefreshBusComp"");
		}
		//Mayank 1Oct18: Added For Retail Digital Signature --------START-------
		if (FieldName == ""STC Send Contract On Email"")
		{
			this.WriteRecord();
		}
		//Mayank: Added For Retail Digital Signature --- STOP----
		if (FieldName == ""STC VOBB MSISDN Link"")
		{
			var VOBBMSISDN = this.GetFieldValue(""STC VOBB MSISDN Link"");
			if(VOBBMSISDN != null && VOBBMSISDN != """")
			{
				var PickBC = this.GetPicklistBusComp(""STC VOBB MSISDN Link"");
				with(PickBC)
				{
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchSpec(""Serial Number"", VOBBMSISDN);
					ExecuteQuery();
					if(FirstRecord())
					{
						Pick();
					}
				}
				this.WriteRecord();
			}
			else
			{
				this.ActivateField(""STC VOBB Plan Name"");
				this.SetFieldValue(""STC VOBB Plan Name"", """");
				this.WriteRecord();
			}
		}
		if (FieldName == ""Status"")
		{
			var sStatus = this.GetFieldValue(""Status"");
			var RecExists;
			var sCancelStatus = TheApplication().InvokeMethod(""LookupValue"",""FS_ORDER_STATUS"",""Cancelled"");
			if (sStatus == sCancelStatus)
			{
				var sOrderBO = TheApplication().GetBusObject(""Order Entry (Sales)"");
				var sOrderBC = sOrderBO.GetBusComp(""Order Entry - Orders"");
				var sOrderLineBC = sOrderBO.GetBusComp(""Order Entry - Line Items"");
				
				with (sOrderBC)
				{
					SetViewMode(AllView);
					ClearToQuery();
					var sOrderId = this.GetFieldValue(""Id"");
					ActivateField(""STC Channel"");
					ActivateField(""STC PreBooking Flag"");
					ActivateField(""STC Lead Id"");
					ActivateField(""STC Portal Order Number"");
					ActivateField(""STC Order SubType"");
					
					var eComLOVChannel = TheApplication().InvokeMethod(""LookupValue"",""STC_ORDER_CHANNEL"",""eCommerce"");
					SetSearchSpec(""Id"", sOrderId);
					ExecuteQuery(ForwardOnly);
					var PreBookingFlg = GetFieldValue(""STC PreBooking Flag"");
					var sLeadId = GetFieldValue(""STC Lead Id"");
					var eComChannel = GetFieldValue(""STC Channel"");
					var PortalOrderId = GetFieldValue(""STC Portal Order Number"");
					var OrderType = GetFieldValue(""STC Order SubType"");
					if(eComChannel == eComLOVChannel)// && (CancelButtonFlag == null || CancelButtonFlag == """"))
					{
						var vInputs = TheApplication().NewPropertySet();
						var vOutputs = TheApplication().NewPropertySet();
						var vServiceWF = TheApplication().GetService(""Workflow Process Manager"");
						vInputs.SetProperty(""ProcessName"", ""STCeCommerceCancellationWraperProcess"");
						vInputs.SetProperty(""Object Id"",sOrderId);
						vInputs.SetProperty(""PortalOrderId"",PortalOrderId);
						vInputs.SetProperty(""OrderType"",OrderType);
						vInputs.SetProperty(""Operation"",""SetField"");
						vInputs.SetProperty(""Channel"",eComChannel);
						vInputs.SetProperty(""PreBookFlag"",PreBookingFlg);
					    vServiceWF.InvokeMethod(""RunProcess"", vInputs, vOutputs);
					}
					if(sLeadId != null && sLeadId != """")
					{
						var sLeadBC = TheApplication().GetBusObject(""Lead"").GetBusComp(""Lead"");
						with(sLeadBC)
						{
							var Spec =  ""[Id] = '"" + sLeadId + ""'"";
							ActivateField(""Lead Status"");
							ActivateField(""STC Sales Campaign Type""); //Abuzar:10102021:SD Telesales
							ActivateField(""STC Order Id""); //Abuzar:10102021:SD Telesales
							SetViewMode(AllView);
							ClearToQuery();
							SetSearchExpr(Spec);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
							{
								var strCampType = GetFieldValue(""STC Sales Campaign Type""); //Abuzar:10102021:SD Telesales - Start
								if (strCampType != """" && strCampType != """" && strCampType != ""Not Applicable"")
								{
									SetFieldValue(""STC Order Id"", """");
								}
								else
								{
									var sLeadStatus = TheApplication().InvokeMethod(""LookupValue"",""LEAD_STATUS"",""Awaiting Fulfilment"");
									SetFieldValue(""Lead Status"",sLeadStatus);									
								}
								WriteRecord();
							}
						}	
					}
					if(PreBookingFlg == ""Y"")
					{
						with(sOrderLineBC)
						{
							ActivateField(""Part Number"");
							ActivateField(""STC Portal Line Id"");
							SetViewMode(AllView);
							ClearToQuery();
							SetSearchSpec(""Part Number"", ""ECOMBOOKAMT2"");
							ExecuteQuery(ForwardOnly);
							var sCountDevice = CountRecords();
							if (sCountDevice > 0)
							{
								RecExists=FirstRecord();
								while(RecExists)
								{
									var PortalLineId = GetFieldValue(""STC Portal Line Id"");
									var DeviceBC = TheApplication().GetBusObject(""STC ECommerce PreBooking BO"").GetBusComp(""STC ECommerce PreBooking BC"");
									with(DeviceBC)
									{
										ActivateField(""STC Portal Line Item Id"");
										ClearToQuery();
										SetViewMode(AllView);
										SetSearchSpec(""STC Portal Line Item Id"",PortalLineId);
										ExecuteQuery();
										if(FirstRecord())
										{
											SetFieldValue(""Status"",""Pending"");
											SetFieldValue(""STC Select"",""N"");
											WriteRecord();
											var DummyItemBC = TheApplication().GetBusObject(""STC ECom Order BO"").GetBusComp(""STC ECom Order Item BC"");
											with(DummyItemBC)
											{
												ActivateField(""STC Status"");
												ClearToQuery();
												SetViewMode(AllView);
												SetSearchSpec(""Id"",PortalLineId);
												ExecuteQuery();
												if(FirstRecord())
												{
													SetFieldValue(""STC Status"",""Pending"");
													WriteRecord();
												}
											}
										}
									}
									RecExists=NextRecord();
								}
							}
						}	
					}
				}
			}
		}
		return(ContinueOperation);
	}
	catch(e)
	{
	throw(e)
	}
	finally
	{
	}
}
function BusComp_SetFieldValue (FieldName)
{
	try
	{

		if (FieldName == ""STC Num of Inst"")
		{
			this.InvokeMethod(""RefreshBusComp"");
		}
		//Mayank 1Oct18: Added For Retail Digital Signature --------START-------
		if (FieldName == ""STC Send Contract On Email"")
		{
			this.WriteRecord();
		}
		//Mayank: Added For Retail Digital Signature --- STOP----
		if (FieldName == ""STC VOBB MSISDN Link"")
		{
			var VOBBMSISDN = this.GetFieldValue(""STC VOBB MSISDN Link"");
			if(VOBBMSISDN != null && VOBBMSISDN != """")
			{
				var PickBC = this.GetPicklistBusComp(""STC VOBB MSISDN Link"");
				with(PickBC)
				{
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchSpec(""Serial Number"", VOBBMSISDN);
					ExecuteQuery();
					if(FirstRecord())
					{
						Pick();
					}
				}
				this.WriteRecord();
			}
			else
			{
				this.ActivateField(""STC VOBB Plan Name"");
				this.SetFieldValue(""STC VOBB Plan Name"", """");
				this.WriteRecord();
			}
		}
		if (FieldName == ""Status"")
		{
			var sStatus = this.GetFieldValue(""Status"");
			var RecExists;
			var sCancelStatus = TheApplication().InvokeMethod(""LookupValue"",""FS_ORDER_STATUS"",""Cancelled"");
			if (sStatus == sCancelStatus)
			{
				var sOrderBO = TheApplication().GetBusObject(""Order Entry (Sales)"");
				var sOrderBC = sOrderBO.GetBusComp(""Order Entry - Orders"");
				var sOrderLineBC = sOrderBO.GetBusComp(""Order Entry - Line Items"");
				
				with (sOrderBC)
				{
					SetViewMode(AllView);
					ClearToQuery();
					var sOrderId = this.GetFieldValue(""Id"");
					ActivateField(""STC Channel"");
					ActivateField(""STC PreBooking Flag"");
					ActivateField(""STC Lead Id"");
					ActivateField(""STC Portal Order Number"");
					ActivateField(""STC Order SubType"");
					
					var eComLOVChannel = TheApplication().InvokeMethod(""LookupValue"",""STC_ORDER_CHANNEL"",""eCommerce"");
					SetSearchSpec(""Id"", sOrderId);
					ExecuteQuery(ForwardOnly);
					var PreBookingFlg = GetFieldValue(""STC PreBooking Flag"");
					var sLeadId = GetFieldValue(""STC Lead Id"");
					var eComChannel = GetFieldValue(""STC Channel"");
					var PortalOrderId = GetFieldValue(""STC Portal Order Number"");
					var OrderType = GetFieldValue(""STC Order SubType"");
					if(eComChannel == eComLOVChannel)// && (CancelButtonFlag == null || CancelButtonFlag == """"))
					{
						var vInputs = TheApplication().NewPropertySet();
						var vOutputs = TheApplication().NewPropertySet();
						var vServiceWF = TheApplication().GetService(""Workflow Process Manager"");
						vInputs.SetProperty(""ProcessName"", ""STCeCommerceCancellationWraperProcess"");
						vInputs.SetProperty(""Object Id"",sOrderId);
						vInputs.SetProperty(""PortalOrderId"",PortalOrderId);
						vInputs.SetProperty(""OrderType"",OrderType);
						vInputs.SetProperty(""Operation"",""SetField"");
						vInputs.SetProperty(""Channel"",eComChannel);
						vInputs.SetProperty(""PreBookFlag"",PreBookingFlg);
					    vServiceWF.InvokeMethod(""RunProcess"", vInputs, vOutputs);
					}
					if(sLeadId != null && sLeadId != """")
					{
						var sLeadBC = TheApplication().GetBusObject(""Lead"").GetBusComp(""Lead"");
						with(sLeadBC)
						{
							var Spec =  ""[Id] = '"" + sLeadId + ""'"";
							ActivateField(""Lead Status"");
							SetViewMode(AllView);
							ClearToQuery();
							SetSearchExpr(Spec);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
							{
								var sLeadStatus = TheApplication().InvokeMethod(""LookupValue"",""LEAD_STATUS"",""Awaiting Fulfilment"");
								SetFieldValue(""Lead Status"",sLeadStatus);
								WriteRecord();
							}
						}	
					}
					if(PreBookingFlg == ""Y"")
					{
						with(sOrderLineBC)
						{
							ActivateField(""Part Number"");
							ActivateField(""STC Portal Line Id"");
							SetViewMode(AllView);
							ClearToQuery();
							SetSearchSpec(""Part Number"", ""ECOMBOOKAMT2"");
							ExecuteQuery(ForwardOnly);
							var sCountDevice = CountRecords();
							if (sCountDevice > 0)
							{
								RecExists=FirstRecord();
								while(RecExists)
								{
									var PortalLineId = GetFieldValue(""STC Portal Line Id"");
									var DeviceBC = TheApplication().GetBusObject(""STC ECommerce PreBooking BO"").GetBusComp(""STC ECommerce PreBooking BC"");
									with(DeviceBC)
									{
										ActivateField(""STC Portal Line Item Id"");
										ClearToQuery();
										SetViewMode(AllView);
										SetSearchSpec(""STC Portal Line Item Id"",PortalLineId);
										ExecuteQuery();
										if(FirstRecord())
										{
											SetFieldValue(""Status"",""Pending"");
											SetFieldValue(""STC Select"",""N"");
											WriteRecord();
											var DummyItemBC = TheApplication().GetBusObject(""STC ECom Order BO"").GetBusComp(""STC ECom Order Item BC"");
											with(DummyItemBC)
											{
												ActivateField(""STC Status"");
												ClearToQuery();
												SetViewMode(AllView);
												SetSearchSpec(""Id"",PortalLineId);
												ExecuteQuery();
												if(FirstRecord())
												{
													SetFieldValue(""STC Status"",""Pending"");
													WriteRecord();
												}
											}
										}
									}
									RecExists=NextRecord();
								}
							}
						}	
					}
				}
			}
		}
		return(ContinueOperation);
	}
	catch(e)
	{
	throw(e)
	}
	finally
	{
	}
}
function BusComp_WriteRecord ()
{
	var vInputs;
	var vOutputs;
	var vPortCanWF;
	var sApp = TheApplication(); // Suman Added for Removing BB5,10 Plan Validation.
	this.ActivateField(""STC Port In Flag"");
	this.ActivateField(""Status"");
	this.ActivateField(""STC MNP Port Out"");
	this.ActivateField(""STC Service Account Port In Flag"");
	this.ActivateField(""STC Order SubType"");
	this.ActivateField(""STC Order Sub Status"");
	this.ActivateField(""STC GPON Invt Id""); // Hardik for GPON
	var vPortIn = this.GetFieldValue(""STC Port In Flag"");
	var vStatus = this.GetFieldValue(""Status"");
	var vPortOut = this.GetFieldValue(""STC MNP Port Out"");
	var vId = this.GetFieldValue(""Id"");
	var vType = this.GetFieldValue(""STC Order SubType"");
//	var vServAccPInFlag = this.GetFieldValue(""STC Service Account Port In Flag"");
	var vSubStatus = this.GetFieldValue(""STC Order Sub Status"");
	
	//[27Feb2017:NAVIN:TRASIMREG_P1B]
	this.ActivateField(""STC Customer Type"");
	this.ActivateField(""STC Corporate Audit Id"");
	this.ActivateField(""Order Number"");
	var vCustType = this.GetFieldValue(""STC Customer Type"");
	var vAuditRecId = this.GetFieldValue(""STC Corporate Audit Id"");
	var vOrderNumber = this.GetFieldValue(""Order Number"");
	//[27Feb2017:NAVIN:TRASIMREG_P1B]

	if(vPortIn == ""Yes"" && vType == ""Provide"" && vStatus == ""Cancelled"" && vSubStatus == ""Cancelled"")
		{
			vInputs = TheApplication().NewPropertySet();
			vOutputs = TheApplication().NewPropertySet();
			vPortCanWF = TheApplication().GetService(""Workflow Process Manager"");
			vInputs.SetProperty(""ProcessName"", ""STC GenPortIn Cancel Request"");
			vInputs.SetProperty(""Object Id"",vId);
		    vPortCanWF.InvokeMethod(""RunProcess"", vInputs, vOutputs);
		}
	
	if(vType == ""Provide"" && vStatus == ""Cancelled"" && vSubStatus == ""Cancelled"" && (vAuditRecId != """" && vAuditRecId != null))
	{//[08Nov2016:NAVIN:TRASIMREG]
		fn_TRAOrderCancellation(vId, vOrderNumber, vAuditRecId, vCustType, vType);
	}
	//Hardik:Added for GPON
	if(vType == ""Provide"" && vStatus == ""Cancelled"" && vSubStatus == ""Cancelled"")
	{
		GPONInventoryUpdate(vId, vOrderNumber, vCustType, vType);
	}
		
	var CallBB10 = sApp.InvokeMethod(""LookupValue"",""STC_ADMIN"",""CHK_VALID_BB_10_5"");
	var CallBBValidation = CallBB10.substring(0,5);
	if(CallBBValidation == ""CHKBB""){
	if(vNewRec) //Anchal: Added for New BB Plans
	{
		var vOrderType = this.GetFieldValue(""STC Order SubType"");
		var vChannel = this.GetFieldValue(""STC Channel"");
		if((vOrderType == ""Provide"" || vOrderType == ""Modify"") && vChannel == ""CRM"")
		{
			CallWF();
		}
	}
	}// end of 	if(CallBB10 == """")
	if(vStatus == ""Cancelled"") // Indrased: Added is to perform required actions on post Order Cancelled (Genirci WF)
	{
		var input = TheApplication().NewPropertySet();
		var output = TheApplication().NewPropertySet();
		input.SetProperty(""Object Id"",vId);
		input.SetProperty(""ProcessName"", ""STC Order Cancellation Tasks WF"");
		TheApplication().GetService(""Workflow Process Manager"").InvokeMethod(""RunProcess"", input, output);
	}
}
function CallWF()
{
	try
	{	
		//9/10/14 Anchal: Created new as per SD_New BB
		var vBC:BusComp = this;	
		var Inputs: PropertySet   = TheApplication().NewPropertySet();
		var Outputs:PropertySet = TheApplication().NewPropertySet();
		var svcbsService: Service = TheApplication().GetService(""Workflow Process Manager"");
		Inputs.SetProperty(""ProcessName"", ""STC New BB Plans Validation WF"");
		Inputs.SetProperty(""Object Id"",vBC.GetFieldValue(""Id""));						
		svcbsService.InvokeMethod(""RunProcess"", Inputs, Outputs);		
	}
	finally
	{		
		svcbsService = null;
		vBC = null;
		Inputs = null;
		Outputs = null;		
	}
}
function GPONInventoryUpdate(vOrderId, vOrderNumber,vCustType,vOrderType)
{

	var bsWfIpArg=null, bsWfOpArg=null, bsWfProcMgr=null;
	var errCode="""", errMsg="""";
	try
	{
		bsWfProcMgr = TheApplication().GetService(""Workflow Process Manager"");
		bsWfIpArg = TheApplication().NewPropertySet();
		bsWfOpArg = TheApplication().NewPropertySet();
		with (bsWfIpArg)
		{
			SetProperty(""ProcessName"", ""STC Update GPON Inventory WF"");
			SetProperty(""Object Id"", vOrderId);
			SetProperty(""OrderNumber"", vOrderNumber);
			SetProperty(""CustomerType"", vCustType);
			SetProperty(""OrderType"", vOrderType);
		
		}
		bsWfProcMgr.InvokeMethod(""RunProcess"", bsWfIpArg, bsWfOpArg);
	
		errCode = bsWfOpArg.GetProperty(""Error Code"");
		errMsg = bsWfOpArg.GetProperty(""Error Message"");
		
	}
	catch(e){
	}
	finally{
		bsWfIpArg=null; bsWfOpArg=null;
		bsWfProcMgr=null;
	}
}
function fnUpdateCPSBillFlg(sCPSBillAcntId, strCPSflg)
{
try
{
	var boCPSBillAccnt = TheApplication().GetBusObject(""STC Business Billing BO"");
	var bcCPSBillAccnt = boCPSBillAccnt.GetBusComp(""CUT Invoice Sub Accounts Thin"");
	
	with(bcCPSBillAccnt)
	{
		SetViewMode(AllView);
		ClearToQuery();
		ActivateField(""STC Business CPS Flag"");
		SetSearchSpec(""Id"", sCPSBillAcntId);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord)
		{
			SetFieldValue(""STC Business CPS Flag"", strCPSflg);
			WriteRecord();
		}
	}
}
catch(e)
{
	throw(e);
}
finally
{
	bcCPSBillAccnt = null; boCPSBillAccnt = null;
}
}
function fn_CancelTT(OrderId)
{
	var appObj = TheApplication();
	var SRLightBO = appObj.GetBusObject(""Service Request - Lightweight"");
	var SRLightBC = SRLightBO.GetBusComp(""Service Request - Lightweight"");
	with(SRLightBC)
	{
			var Spec =  ""[STC Order Id] = '"" + OrderId + ""' AND [Status] <> 'Closed'"";
			ActivateField(""Status"");
			ActivateField(""Sub-Status"");
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(Spec);
			//SetSearchSpec(""STC Order Id"", OrderId);
			ExecuteQuery(ForwardOnly);
			var isRec = FirstRecord();
			while(isRec)
			{
				SetFieldValue(""Sub-Status"", appObj.InvokeMethod(""LookupValue"", ""SR_SUB_STATUS"", ""Completed""));
				SetFieldValue(""Status"", appObj.InvokeMethod(""LookupValue"", ""SR_STATUS"", ""Closed""));
				WriteRecord();
				isRec = NextRecord();
			}	
	}
}
function fn_CheckVoucherOLI(sOrderId)
{//[NAVIN: 10Sep2017: DeviceTradeInVouchers]
	var sOrderBO=null, sOrderBC=null, sOrderLineBC=null;
	sOrderBO = TheApplication().GetBusObject(""STC Order Entry - Line Items"");
	sOrderLineBC = sOrderBO.GetBusComp(""Order Entry - Line Items"");
	var sCount=0;
	
	with(sOrderLineBC)
	{
		ActivateField(""Order Header Id"");
		ActivateField(""STC Voucher Promotion Flag"");
		ActivateField(""Part Number"");
		SetViewMode(AllView);
		ClearToQuery();
		//SetSearchSpec(""Order Header Id"", sOrderId);
		
		//var Spec =  ""[Order Header Id] = '"" + sOrderId + ""' AND [STC Voucher Promotion Flag] = 'Y' AND ([Part Number] <> 'BBSWFEEWAIVER1' AND [Part Number] <> 'ECOMBOOKAMT2')"";
		var Spec =  ""[Order Header Id] = '"" + sOrderId + ""' AND [STC Voucher Promotion Flag] = 'Y' AND ([Part Number] <> 'BBSWFEEWAIVER1' AND [Part Number] <> 'ECOMBOOKAMT2' AND [Part Number] <> 'ECOMBOOKADJAMT2')"";
		SetSearchExpr(Spec);
		//SetSearchSpec(""STC Voucher Promotion Flag"", ""Y"");
		ExecuteQuery(ForwardOnly);
		sCount = CountRecords();
		if (sCount > 0)
			TheApplication().RaiseErrorText(""Please delete Voucher Promotions added by you and then proceed for Order Cancellation."");
	}
}
function fn_RestrictPOSOrdCancel()
{
	this.ActivateField(""STC POS Flag"");
	var sPOSValueFlg = this.GetFieldValue(""STC POS Flag"");
	if(sPOSValueFlg == ""Y"")
	{
		var sappObj = TheApplication();
		var sPOSUserLOV = """"; var sPOSUSerSubstr = """";
		var sUserName = sappObj.LoginName();
		sPOSUserLOV = sappObj.InvokeMethod(""LookupValue"",""STC_POS_USER_RESTRICT"",sUserName);
		sPOSUSerSubstr = sPOSUserLOV.substring(0,5);
		var sOrderInprog = sappObj.InvokeMethod(""LookupValue"",""FS_ORDER_STATUS"",""In Progress"");
		var sMNPPortIn = sappObj.InvokeMethod(""LookupValue"",""STC_PORT_FLAG"",""Yes"");
		var sOrderStat = this.GetFieldValue(""Status"");
		var sMNPOrder = this.GetFieldValue(""STC Port In Flag"");
		if(sPOSUSerSubstr != ""Allow"")
		{
			if(sOrderStat == sOrderInprog && sMNPOrder == sMNPPortIn)
			{
			}
			else
			{
				sappObj.RaiseErrorText(""Order is submitted to POS, you are not allowed to cancel this order"");
			}
		}
	}
	var sOrdCPSSubTypeLOV = TheApplication().InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Provide"");
	var sSplitFlag = this.GetFieldValue(""STC Split Billing Flag"");
	var sOrdSubTyp = this.GetFieldValue(""STC Order SubType"")
	if(sSplitFlag == ""Y"" && sOrdCPSSubTypeLOV == sOrdSubTyp)
	{
		this.ActivateField(""STC Split Ban Id"");
		var sSplitBanId = this.GetFieldValue(""STC Split Ban Id"");
		var sSVC = TheApplication().GetService(""Workflow Process Manager"");
		var psInputs   = TheApplication().NewPropertySet();
		var psOutputs = TheApplication().NewPropertySet();
		psInputs.SetProperty(""ProcessName"", ""STC Update Split Account WF"");
		psInputs.SetProperty(""Object Id"",sSplitBanId);
		psInputs.SetProperty(""SplitBanCheckFlg"",""N"");
		sSVC.InvokeMethod(""RunProcess"", psInputs, psOutputs);
		psInputs = null; psOutputs = null;
	}
}
function fn_TRAOrderCancellation(vOrderId, vOrderNumber, vAuditRecId, vCustType, vOrderType)
{//[08Nov2016:NAVIN:TRASIMREG]
	var bsWfIpArg=null, bsWfOpArg=null, bsWfProcMgr=null;
	var errCode="""", errMsg="""";
	try
	{
		bsWfProcMgr = TheApplication().GetService(""Workflow Process Manager"");
		bsWfIpArg = TheApplication().NewPropertySet();
		bsWfOpArg = TheApplication().NewPropertySet();
		with (bsWfIpArg)
		{
			SetProperty(""ProcessName"", ""STCISLSIMRegCancelVerificationWF"");
			SetProperty(""Object Id"", vOrderId);
			SetProperty(""OrderNumber"", vOrderNumber);
			SetProperty(""AuditRowId"", vAuditRecId);
			SetProperty(""CustomerType"", vCustType);
			SetProperty(""OrderType"", vOrderType);
		}
		bsWfProcMgr.InvokeMethod(""RunProcess"", bsWfIpArg, bsWfOpArg);
	
		errCode = bsWfOpArg.GetProperty(""Error Code"");
		errMsg = bsWfOpArg.GetProperty(""Error Message"");
		/*if (errCode != ""0"")
		{
			TheApplication().RaiseErrorText(errMsg);
		}*/
	}
	catch(e){
	}
	finally{
		bsWfIpArg=null; bsWfOpArg=null;
		bsWfProcMgr=null;
	}
}
var vNewRec = false; //9/10/14 Anchal: Created new as per SD_New BB
function BusComp_NewRecord ()
{
	vNewRec = true; //9/10/14 Anchal: Created new as per SD_New BB
	var bc_OrderTypes;
	try
	{
		bc_OrderTypes = this.GetPicklistBusComp(""Order Type"");
			 
			 bc_OrderTypes.ActivateField(""Order Type"");
			 with (bc_OrderTypes)
			 {
			  SetViewMode(AllView);
			  ClearToQuery();
			  SetSearchSpec(""Order Type"",""Sales Order"");
			  ExecuteQuery(ForwardOnly);
			  
			  if (FirstRecord())
			   Pick();
			 }
			 var strActiveView = TheApplication().ActiveViewName();
			 if(strActiveView == ""STC Billing Account Orders List Applet View"")
			 {
			 	var sCPSflg = ""N"";
			 	var sBillAcntId = this.ParentBusComp().GetFieldValue(""Id"");	
			 	var sCPSProfileAttr = TheApplication().GetProfileAttr(""NewOrderCPSFlag"");
			 	if(sCPSProfileAttr == ""Y"")
			 	{
			 		sCPSflg = ""Y"";
			 	}
			 	else
			 	{
			 		sCPSflg = ""N"";
			 	}
			 	if(sBillAcntId != """" && sBillAcntId != null)
			 	{
			 		fnUpdateCPSBillFlg(sBillAcntId, sCPSflg);
			 	}
			 	TheApplication().SetProfileAttr(""NewOrderCPSFlag"","""");
			 	this.ParentBusComp().ActivateField(""STC Split Billing Flag"");
				var splitFlag = this.ParentBusComp().GetFieldValue(""STC Split Billing Flag"");
			 	if(splitFlag != ""Y"")
			 	{
					this.ParentBusComp().InvokeMethod(""RefreshBusComp"");
				}
			}
			 
	}
	catch(e)
	{
	}
	finally
	{
		bc_OrderTypes = null;
	}
}
function BusComp_PreInvokeMethod (MethodName)
{
var appObj = null;
var iReturn = null;
var boAccount = null;
var bcAccount = null;
var accntId = null;
var custType = null;
var dunningChangeService = null;
var input = null, output = null;

try
{
	iReturn = ContinueOperation;
	switch(MethodName)
	{
		case ""SubmitOrderSTC"":
		case ""ValidateOrder"":
		{
			appObj = TheApplication();
			this.ActivateField(""Account Id"");
			accntId = this.GetFieldValue(""Account Id"");
			
			boAccount = appObj.GetBusObject(""Account"");
			bcAccount = boAccount.GetBusComp(""Account"");
			if(bcAccount != null)
			{
				with(bcAccount)
				{
					SetViewMode(AllView);
					ActivateField(""Type"");
					ClearToQuery();
					SetSearchSpec(""Id"", accntId);
					ExecuteQuery(ForwardOnly);
					isRecord = FirstRecord();
					//count = CountRecords();	
					if(isRecord)//1
					{
						custType = GetFieldValue(""Type"");
							if(custType == ""Corporate"")
							{
								//Calling Business Service to validate the CSR:
									dunningChangeService = appObj.GetService(""STC Corp CSR Validation BS"");
									input = appObj.NewPropertySet();
									output = appObj.NewPropertySet();
									dunningChangeService.InvokeMethod(""ValidateCorporateCSR"", input, output);
							}
					}//end of if(isRecord)//1
				}//end of with(bcAccount)
			}//end of  if(bcAccount != null)
			iReturn	= CancelOperation;
			break;
		}
	}//end of switch(MethodName)
}	
catch(e)
{
	throw(e);
}
finally
{
	input = null;
	output = null;
	dunningChangeService = null;
	bcAccount = null;
	boAccount = null;
	appObj = null;
}	
	return (iReturn);

}
"//***********************************************************************************************************//
//Purpose: 1)To validate whether the current user(CSR) has the rights to modify the order or not 
//Inputs: 
//Outputs: Will give an error message if the CSR is not authorised
//Author: Navin Rai
//Release: 
//Date: 20-Oct-2010
//*************************************************************************************************************//
function BusComp_PreNewRecord ()
{
	var appObj;
	var currLoginId;
	var custType;
	var foundCSR, foundCSRSubstr;
	var parentBC;
	
	try
	{
	//Added by Navin
		appObj = TheApplication();
				
				with(appObj)
				{
					currLoginId = LoginName();	
				}		
			
				parentBC = this.ParentBusComp();
				
			if(parentBC != null)
			{
				parentBC.ActivateField(""Type"");
				custType = parentBC.GetFieldValue(""Type"");
				
				if(custType == ""Corporate"")
				{
					foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_CORPORATE_CSRS"",currLoginId);
					
					foundCSRSubstr = foundCSR.substring(0,3);
					
					if(foundCSRSubstr != ""CSR"")
					{
						appObj.RaiseErrorText(""Sorry! You do not have the privilege to create the order"");
						return (CancelOperation);
					}
				}
			}
		}
	finally
		{
			parentBC = null;
			appObj = null;
		}
	//Navin Edit Ends

	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	var sOrderSubTypeLOV;
	//var appObj;
	var appObj=TheApplication();
	var sStatusApprLOV=null;
	var sStatusRejLOV=null;
	var sStatusCanLOV=null;
	var sSystemdate;
	var sSuper="""";
	var sBHId;//CIO
	var sSubIdType;//CIO
	var sSubscriberCntry;
	var sActiveViewName = TheApplication().ActiveViewName();
	try
	{
		switch(FieldName)
		{
			case ""STC Order SubType"":
				appObj = TheApplication();
				sOrderSubTypeLOV = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Disconnect"");
				if(FieldValue != sOrderSubTypeLOV)
				{
					this.SetFieldValue(""STC Refund Method"","""");
					this.SetFieldValue(""STC Customer Name"","""");
					this.SetFieldValue(""STC Account Number"","""");
				}
				break;
				//Added for CIO Software update SRINI:04032014 below
			case ""STC Subscriber Id Type"":				
				sBHId = TheApplication().InvokeMethod(""LookupValue"",""STC_CUST_ID_TYPE"",""Bahraini ID"");				
				if(FieldValue == sBHId){
					sSubscriberCntry = TheApplication().InvokeMethod(""LookupValue"",""STC_GCC_COUNTRY_CODE"",""BH"");
					this.SetFieldValue(""STC GCC Country Code"",sSubscriberCntry);
				}
				else
					this.SetFieldValue(""STC GCC Country Code"","""");
										
				break;
			case ""STC Individual Id Type"":
				sBHId = TheApplication().InvokeMethod(""LookupValue"",""STC_CUST_ID_TYPE"",""Bahraini ID"");
				if(FieldValue == sBHId){
					sSubscriberCntry = TheApplication().InvokeMethod(""LookupValue"",""STC_GCC_COUNTRY_CODE"",""BH"");
					this.SetFieldValue(""STC Indv GCC Country Code"",sSubscriberCntry);
				}
				else
					this.SetFieldValue(""STC Indv GCC Country Code"","""");					
				break;
				
			case ""STC GCC Country Code"":
				if(sActiveViewName == ""Order Entry - Line Items Detail View (Sales)""){
					sSubIdType = GetFieldValue(""STC Subscriber Id Type"");
					if(sSubIdType == ""Passport"")
						appObj.RaiseErrorText(""GCC Country is not allowed for Id Type 'Passport'"");
				}//endif sActiveViewName			
				break;
				
			case ""STC Indv GCC Country Code"":
				if(sActiveViewName == ""Order Entry - Line Items Detail View (Sales)""){
					sSubIdType = GetFieldValue(""STC Individual Id Type"");
					if(sSubIdType == ""Passport"")
						appObj.RaiseErrorText(""GCC Country is not allowed for Id Type 'Passport'"");
				}//endif sActiveViewName			
				break;		
					
			//Added for CIO Software update SRINI:04032014 above
			
			case ""Status"":
				appObj = TheApplication();
				with(appObj)
				{
					sStatusApprLOV = InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Approved"");
					sStatusRejLOV = InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Rejected"");
					sStatusCanLOV = InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Cancelled"");
				}
				switch(FieldValue)
				{
					case ""Approved"":
						this.SetFieldValue(""STC Order Sub Status"",sStatusApprLOV);
						this.ActivateField(""Approved"");
						this.SetFieldValue(""Approved"",""Y"");
						sSystemdate = this.GetFieldValue(""TimeStamp"");
						this.SetFieldValue(""Approved By Date"",sSystemdate);
						break;
					
					case ""Rejected"":
						this.SetFieldValue(""STC Order Sub Status"",sStatusRejLOV);
						this.ActivateField(""Approved"");
						this.SetFieldValue(""Approved"",""Y"");
						sSystemdate = this.GetFieldValue(""TimeStamp"");
						this.SetFieldValue(""Approved By Date"",sSystemdate);
						break;
						
					case ""Cancelled"":
						if (this.GetFieldValue(""STC Open DIA Activity Count"") > 0 )
							appObj.RaiseErrorText(""There is an open activity of type 'DIA Mobility Approval' against this order. This order cannot be cancelled."");
						else
						{
							this.SetFieldValue(""STC Order Sub Status"",sStatusCanLOV);
							fn_RestrictPOSOrdCancel();
						}
						break;
						
					default:
						
				}
				break;
				
		}
		var sCreateAct = TheApplication().GetProfileAttr(""CreateAct"");
		if(FieldName ==""STC Num of Inst"")// && (sCreateAct==""N"" || sCreateAct==""""))
		{ 		
		//this.ActivateField(""STC Install Flg"");
		this.ActivateField(""STC Order Install Flag"");
		var ActiveView = TheApplication().ActiveViewName(); 
		var Cat =this.GetFieldValue(""STC Contract Category"");
		var InstallFlg = this.GetFieldValue(""STC Order Install Flag"");
		//var Instflg=this.GetFieldValue(""STC Install Flg"");
		if(InstallFlg != ""N""){
		//	if(ActiveView ==""Order Entry - Payment View (Sales)"" || ActiveView ==""Order Entry - Line Items Detail View (Sales)"")
		//	{
			    var currLoginId =appObj.LoginName();
				var foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_SUPER_CSRS"",currLoginId);
				var foundCSRSubstr = foundCSR.substring(0,5);  
				if(foundCSRSubstr != ""SUPER"") 	   	
				{
				
				appObj.RaiseErrorText(""Your Not Autorized person to change the Value"");
				}	
				/*if(Instflg==""Y"")
				{
					appObj.RaiseErrorText(""Once Payment is Created your not suppose to change the Instalments"");
				}*/		    
			    if(Cat!=""Individual"")
			    {
			   
			    appObj.RaiseErrorText(""Number of Installments is not Applicable other than Individual Segments"");
			    }//if(Cat!=""Individual"")
			//	}//	if(ActiveView)
				}//if(InstallFlg != ""N"")	
		} 
		return(ContinueOperation);
	}
	catch(e)
	{ 
		throw(e)
	}
	finally
	{
	}
}
function BusComp_SetFieldValue (FieldName)
{
	try
	{	if (FieldName == ""STC Num of Inst"")
		{
			this.InvokeMethod(""RefreshBusComp"");
		}
		if (FieldName == ""Status"")
		{
			var sStatus = this.GetFieldValue(""Status"");
			var sCancelStatus = TheApplication().InvokeMethod(""LookupValue"",""FS_ORDER_STATUS"",""Cancelled"");
			if (sStatus == sCancelStatus)
			{
				var sOrderBO = TheApplication().GetBusObject(""Order Entry (Sales)"");
				var sOrderBC = sOrderBO.GetBusComp(""Order Entry - Orders"");
				var sOrderLineBC = sOrderBO.GetBusComp(""Order Entry - Line Items"");
				
				with (sOrderBC)
				{
					SetViewMode(AllView);
					ClearToQuery();
					var sOrderId = this.GetFieldValue(""Id"");
					SetSearchSpec(""Id"", sOrderId);
					ExecuteQuery(ForwardOnly);
					
					with(sOrderLineBC)
					{
						this.ActivateField(""STC Voucher Promotion Flag"");
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchSpec(""STC Voucher Promotion Flag"", ""Y"");
						ExecuteQuery(ForwardOnly);
						var sCount = CountRecords();
						if (sCount > 0)
							TheApplication().RaiseErrorText(""Please delete promotions added by you and then proceed for Order Cancellation."");
					}
				}
			}
		}
		return(ContinueOperation);
	}
	catch(e)
	{
	throw(e)
	}
	finally
	{
	}
}
function BusComp_WriteRecord ()
{
var vInputs;
	var vOutputs;
	var vPortCanWF;
	var sApp = TheApplication(); // Suman Added for Removing BB5,10 Plan Validation.
	this.ActivateField(""STC Port In Flag"");
	this.ActivateField(""Status"");
	this.ActivateField(""STC MNP Port Out"");
	this.ActivateField(""STC Service Account Port In Flag"");
	this.ActivateField(""STC Order SubType"");
	this.ActivateField(""STC Order Sub Status"");
	var vPortIn = this.GetFieldValue(""STC Port In Flag"");
	var vStatus = this.GetFieldValue(""Status"");
	var vPortOut = this.GetFieldValue(""STC MNP Port Out"");
	var vId = this.GetFieldValue(""Id"");
	var vType = this.GetFieldValue(""STC Order SubType"");
//	var vServAccPInFlag = this.GetFieldValue(""STC Service Account Port In Flag"");
	var vSubStatus = this.GetFieldValue(""STC Order Sub Status"");
	
	if(vPortIn == ""Yes"" && vType == ""Provide"" && vStatus == ""Cancelled"" && vSubStatus == ""Cancelled"")
		{
			vInputs = TheApplication().NewPropertySet();
			vOutputs = TheApplication().NewPropertySet();
			vPortCanWF = TheApplication().GetService(""Workflow Process Manager"");
			vInputs.SetProperty(""ProcessName"", ""STC GenPortIn Cancel Request"");
			vInputs.SetProperty(""Object Id"",vId);
		    vPortCanWF.InvokeMethod(""RunProcess"", vInputs, vOutputs);
		}
			
	var CallBB10 = sApp.InvokeMethod(""LookupValue"",""STC_ADMIN"",""CHK_VALID_BB_10_5"");
	var CallBBValidation = CallBB10.substring(0,5);
	if(CallBBValidation == ""CHKBB""){
	if(vNewRec) //Anchal: Added for New BB Plans
	{
		var vOrderType = this.GetFieldValue(""STC Order SubType"");
		var vChannel = this.GetFieldValue(""STC Channel"");
		if((vOrderType == ""Provide"" || vOrderType == ""Modify"") && vChannel == ""CRM"")
		{
			CallWF();
		}
	}
	}// end of 	if(CallBB10 == """")
}
function CallWF()
{
	try
	{	
		//9/10/14 Anchal: Created new as per SD_New BB
		var vBC:BusComp = this;	
		var Inputs: PropertySet   = TheApplication().NewPropertySet();
		var Outputs:PropertySet = TheApplication().NewPropertySet();
		var svcbsService: Service = TheApplication().GetService(""Workflow Process Manager"");
		Inputs.SetProperty(""ProcessName"", ""STC New BB Plans Validation WF"");
		Inputs.SetProperty(""Object Id"",vBC.GetFieldValue(""Id""));						
		svcbsService.InvokeMethod(""RunProcess"", Inputs, Outputs);		
	}
	finally
	{		
		svcbsService = null;
		vBC = null;
		Inputs = null;
		Outputs = null;		
	}
}
function fnUpdateCPSBillFlg(sCPSBillAcntId, strCPSflg)
{
try
{
	var boCPSBillAccnt = TheApplication().GetBusObject(""STC Business Billing BO"");
	var bcCPSBillAccnt = boCPSBillAccnt.GetBusComp(""CUT Invoice Sub Accounts Thin"");
	
	with(bcCPSBillAccnt)
	{
		SetViewMode(AllView);
		ClearToQuery();
		ActivateField(""STC Business CPS Flag"");
		SetSearchSpec(""Id"", sCPSBillAcntId);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord)
		{
			SetFieldValue(""STC Business CPS Flag"", strCPSflg);
			WriteRecord();
		}
	}
}
catch(e)
{
	throw(e);
}
finally
{
	bcCPSBillAccnt = null; boCPSBillAccnt = null;
}
}
function fn_RestrictPOSOrdCancel()
{
	this.ActivateField(""STC POS Flag"");
	var sPOSValueFlg = this.GetFieldValue(""STC POS Flag"");
	if(sPOSValueFlg == ""Y"")
	{
		var sappObj = TheApplication();
		var sPOSUserLOV = """"; var sPOSUSerSubstr = """";
		var sUserName = sappObj.LoginName();
		sPOSUserLOV = sappObj.InvokeMethod(""LookupValue"",""STC_POS_USER_RESTRICT"",sUserName);
		sPOSUSerSubstr = sPOSUserLOV.substring(0,5);
		var sOrderInprog = sappObj.InvokeMethod(""LookupValue"",""FS_ORDER_STATUS"",""In Progress"");
		var sMNPPortIn = sappObj.InvokeMethod(""LookupValue"",""STC_PORT_FLAG"",""Yes"");
		var sOrderStat = this.GetFieldValue(""Status"");
		var sMNPOrder = this.GetFieldValue(""STC Port In Flag"");
		if(sPOSUSerSubstr != ""Allow"")
		{
			if(sOrderStat == sOrderInprog && sMNPOrder == sMNPPortIn)
			{
			}
			else
			{
				sappObj.RaiseErrorText(""Order is submitted to POS, you are not allowed to cancel this order"");
			}
		}
	}
	var sOrdCPSSubTypeLOV = TheApplication().InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Provide"");
	var sSplitFlag = this.GetFieldValue(""STC Split Billing Flag"");
	var sOrdSubTyp = this.GetFieldValue(""STC Order SubType"")
	if(sSplitFlag == ""Y"" && sOrdCPSSubTypeLOV == sOrdSubTyp)
	{
		this.ActivateField(""STC Split Ban Id"");
		var sSplitBanId = this.GetFieldValue(""STC Split Ban Id"");
		var sSVC = TheApplication().GetService(""Workflow Process Manager"");
		var psInputs   = TheApplication().NewPropertySet();
		var psOutputs = TheApplication().NewPropertySet();
		psInputs.SetProperty(""ProcessName"", ""STC Update Split Account WF"");
		psInputs.SetProperty(""Object Id"",sSplitBanId);
		psInputs.SetProperty(""SplitBanCheckFlg"",""N"");
		sSVC.InvokeMethod(""RunProcess"", psInputs, psOutputs);
		psInputs = null; psOutputs = null;
	}
}
"
function BusComp_NewRecord ()
{
	var bc_OrderTypes;
	try
	{
		bc_OrderTypes = this.GetPicklistBusComp(""Order Type"");
			 
			 bc_OrderTypes.ActivateField(""Order Type"");
			 with (bc_OrderTypes)
			 {
			  SetViewMode(AllView);
			  ClearToQuery();
			  SetSearchSpec(""Order Type"",""Sales Order"");
			  ExecuteQuery(ForwardOnly);
			  
			  if (FirstRecord())
			   Pick();
			 }
			 
	}
	catch(e)
	{
	}
	finally
	{
		bc_OrderTypes = null;
	}
}
"
function BusComp_PreInvokeMethod (MethodName)
{
var appObj = null;
var iReturn = null;
var boAccount = null;
var bcAccount = null;
var accntId = null;
var custType = null;
var dunningChangeService = null;
var input = null, output = null;

try
{
	iReturn = ContinueOperation;
	switch(MethodName)
	{
		case ""SubmitOrderSTC"":
		case ""ValidateOrder"":
		{
			appObj = TheApplication();
			this.ActivateField(""Account Id"");
			accntId = this.GetFieldValue(""Account Id"");
			
			boAccount = appObj.GetBusObject(""Account"");
			bcAccount = boAccount.GetBusComp(""Account"");
			if(bcAccount != null)
			{
				with(bcAccount)
				{
					SetViewMode(AllView);
					ActivateField(""Type"");
					ClearToQuery();
					SetSearchSpec(""Id"", accntId);
					ExecuteQuery(ForwardOnly);
					isRecord = FirstRecord();
					//count = CountRecords();	
					if(isRecord)//1
					{
						custType = GetFieldValue(""Type"");
							if(custType == ""Corporate"")
							{
								//Calling Business Service to validate the CSR:
									dunningChangeService = appObj.GetService(""STC Corp CSR Validation BS"");
									input = appObj.NewPropertySet();
									output = appObj.NewPropertySet();
									dunningChangeService.InvokeMethod(""ValidateCorporateCSR"", input, output);
							}
					}//end of if(isRecord)//1
				}//end of with(bcAccount)
			}//end of  if(bcAccount != null)
			iReturn	= CancelOperation;
			break;
		}
	}//end of switch(MethodName)
}	
catch(e)
{
	throw(e);
}
finally
{
	input = null;
	output = null;
	dunningChangeService = null;
	bcAccount = null;
	boAccount = null;
	appObj = null;
}	
	return (iReturn);

}
"//***********************************************************************************************************//
//Purpose: 1)To validate whether the current user(CSR) has the rights to modify the order or not 
//Inputs: 
//Outputs: Will give an error message if the CSR is not authorised
//Author: Navin Rai
//Release: 
//Date: 20-Oct-2010
//*************************************************************************************************************//
function BusComp_PreNewRecord ()
{
	var appObj;
	var currLoginId;
	var custType;
	var foundCSR, foundCSRSubstr;
	var parentBC;
	
	try
	{
	//Added by Navin
		appObj = TheApplication();
				
				with(appObj)
				{
					currLoginId = LoginName();	
				}		
			
				parentBC = this.ParentBusComp();
				
			if(parentBC != null)
			{
				parentBC.ActivateField(""Type"");
				custType = parentBC.GetFieldValue(""Type"");
				
				if(custType == ""Corporate"")
				{
					foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_CORPORATE_CSRS"",currLoginId);
					
					foundCSRSubstr = foundCSR.substring(0,3);
					
					if(foundCSRSubstr != ""CSR"")
					{
						appObj.RaiseErrorText(""Sorry! You do not have the privilege to create the order"");
						return (CancelOperation);
					}
				}
			}
		}
	finally
		{
			parentBC = null;
			appObj = null;
		}
	//Navin Edit Ends

	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	var sOrderSubTypeLOV;
	var appObj;
	var sStatusApprLOV=null;
	var sStatusRejLOV=null;
	var sStatusCanLOV=null;
	var sSystemdate;
	try
	{
		switch(FieldName)
		{
			case ""STC Order SubType"":
				appObj = TheApplication();
				sOrderSubTypeLOV = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Disconnect"");
				if(FieldValue != sOrderSubTypeLOV)
				{
					this.SetFieldValue(""STC Refund Method"","""");
					this.SetFieldValue(""STC Customer Name"","""");
					this.SetFieldValue(""STC Account Number"","""");
				}
				break;
			
			case ""Status"":
				appObj = TheApplication();
				with(appObj)
				{
					sStatusApprLOV = InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Approved"");
					sStatusRejLOV = InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Rejected"");
					sStatusCanLOV = InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Cancelled"");
				}
				switch(FieldValue)
				{
					case ""Approved"":
						this.SetFieldValue(""STC Order Sub Status"",sStatusApprLOV);
						this.ActivateField(""Approved"");
						this.SetFieldValue(""Approved"",""Y"");
						sSystemdate = this.GetFieldValue(""TimeStamp"");
						this.SetFieldValue(""Approved By Date"",sSystemdate);
						break;
					
					case ""Rejected"":
						this.SetFieldValue(""STC Order Sub Status"",sStatusRejLOV);
						this.ActivateField(""Approved"");
						this.SetFieldValue(""Approved"",""Y"");
						sSystemdate = this.GetFieldValue(""TimeStamp"");
						this.SetFieldValue(""Approved By Date"",sSystemdate);
						break;
						
					case ""Cancelled"":
						this.SetFieldValue(""STC Order Sub Status"",sStatusCanLOV);
						break;
						
					default:
						
				}
				break;
		}
		return(ContinueOperation);
	}
	catch(e)
	{
	}
	finally
	{
	}
}
function BusComp_SetFieldValue (FieldName)
{//Mayank: Added for Ecom ----------------- START
	try
	{
		var appObj = TheApplication();
		var Id = GetFieldValue(""Id"");
		var vRuleName;
		switch(FieldName)
		{
			case ""Number Matrix Column 1"":
			with(this)
			{
				//ActivateField(""String Matrix Column 2"");
				//ActivateField(""String Matrix Column 3"");
				//ActivateField(""String Matrix Column 4"");
				//ActivateField(""Number Matrix Column 1"");
				ActivateField(""Dynamic Matrix Id"");	
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(""Id"",Id);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					//var ContractAttrib = GetFieldValue(""String Matrix Column 2"");
					//var DeviceAttrib = GetFieldValue(""String Matrix Column 3"");
					//var PlanAttrib = GetFieldValue(""String Matrix Column 4"");
					var DynMatId = GetFieldValue(""Dynamic Matrix Id"");
					var Price = GetFieldValue(""Number Matrix Column 1"");
					
					var sEcomMasterBC = appObj.GetBusObject(""STC MCommerce BO"").GetBusComp(""STC MCommerce Product BC"");
					with(sEcomMasterBC)
					{
						var sActiveStatus = appObj.InvokeMethod(""LookupValue"",""STC_ECOM_STATUS"",""Active"");
						var sInactiveStatus = appObj.InvokeMethod(""LookupValue"",""STC_ECOM_STATUS"",""Inactive"");
						ActivateField(""Device Attribute Id"");
						ActivateField(""Status"");
						ActivateField(""Comments"");
						SetViewMode(AllView);
						ClearToQuery();
						var spec  = ""[Device Attribute Id] = '"" + DynMatId + ""'  AND ([Status] = '"" + sActiveStatus + ""' OR [Status] = '"" + sInactiveStatus + ""')"";
						SetSearchExpr(spec);
						//SetSearchSpec(""Device Attribute Id"", DynMatId);
						ExecuteQuery(ForwardOnly);	
						var sCountDevice = CountRecords();
						var RecExists=FirstRecord();
						if (sCountDevice > 0)
						{
						//	var id = GetFieldValue(""Id"");
							var vComments = GetFieldValue(""Comments"");
							vComments = vComments+""."";
							while(RecExists)
							{
								SetFieldValue(""Comments"", vComments);
								WriteRecord();
								RecExists = NextRecord();
							}
						}
					}
				}
			}
			break;

			default : 
			break;
		}
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
		return (CancelOperation);
	}
	finally
	{
		appObj = null;
	} 
}//Mayank: Added for Ecom ----------------- STOP"
function BusComp_WriteRecord ()
{
	var sViewName ='';
		try
	{	
		if(TheApplication().ActiveViewName() == ""PSP Dynamic Matrix Rules View"")
		{
			var vBC:BusComp = this;	
			var Inputs: PropertySet   = TheApplication().NewPropertySet();
			var Outputs:PropertySet = TheApplication().NewPropertySet();
			var svcbsService: Service = TheApplication().GetService(""Workflow Process Manager"");
			Inputs.SetProperty(""ProcessName"", ""STC eShop Attribute Update WF"");
			Inputs.SetProperty(""RuleId"",vBC.GetFieldValue(""Id""));						
			svcbsService.InvokeMethod(""RunProcess"", Inputs, Outputs);
		}	
	}
	finally
	{		
		svcbsService = null;
		vBC = null;
		Inputs = null;
		Outputs = null;		
	}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{
	
	
		var AccId = """";
		var ParAccId = """";
		var App = TheApplication();
		var Paymentid = this.GetFieldValue(""Id"");
		var OrderEntryBC = App.GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Entry - Orders"");
	
		var OrderId = this.ParentBusComp().GetFieldValue(""Id"");
		
		if(OrderId != """" || OrderId != ""No Match Row Id"")
		{
			with(OrderEntryBC)
			{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchSpec(""Id"",OrderId);
			ExecuteQuery(ForwardOnly);
			var IsSRRec = FirstRecord()
					if(IsSRRec)
					{
					AccId = GetFieldValue(""Billing Account Id"");
                  	}
			}// end of with Service Request BC
		
	
	
	
		
	//	this.InvokeMethod(""RefreshRecord"");//needs to refresh ONLY the current record in the BC
		
	
		}
	with(this)
	{
		InvokeMethod(""SetAdminMode"",""TRUE"");
		ActivateField(""STC Link Account ID"");
		SetViewMode(AllView);
		ClearToQuery();
		SetSearchSpec(""Id"",Paymentid);
		ExecuteQuery();	
		var PayRec = FirstRecord()
		if(PayRec)
			{
				SetFieldValue(""STC Link Account ID"",AccId);
				WriteRecord();
			}
			this.ClearToQuery();
            this.ExecuteQuery();
	}
}
var DynmcMatIdchange = "N";// Mayank: Added for Ecom
function BusComp_PreSetFieldValue (FieldName, FieldValue)
//Mayank: Added for Ecom ------------- START--------------------
{
	try
	{
		switch(FieldName)
		{
			case ""Dynamic Matrix"":
			var sMatrixName = this.GetFieldValue(""Dynamic Matrix"");
			if(sMatrixName != null && sMatrixName != """")
			{
				if(sMatrixName != FieldValue)
				{
					DynmcMatIdchange = ""Y"";
				}
			}
			break;
			default:
			break;
		}
		return (ContinueOperation);
	}
	catch(e)
	{ 
		throw(e)
		return (CancelOperation);
	}
	finally
	{
	}
	//Mayank: Added for Ecom ------------- STOP--------------------
}
function BusComp_WriteRecord ()
//Mayank: Added for Ecom ------------- START--------------------
{
	try
	{
		var appObj = TheApplication();
		if(DynmcMatIdchange == ""Y"")
		{
			this.ActivateField(""Product Id"");
			var vProductId = this.GetFieldValue(""Product Id"");
			var sEcomMasterBC = appObj.GetBusObject(""STC MCommerce BO"").GetBusComp(""STC MCommerce Product BC"");
			with(sEcomMasterBC)
			{
				ActivateField(""Product Id"");
				ActivateField(""Comments"");
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(""Product Id"", vProductId);
				ExecuteQuery(ForwardOnly);	
				var sCountDevice = CountRecords();
				var RecExists=FirstRecord();
				if (sCountDevice > 0)
				{
					var vComments = GetFieldValue(""Comments"");
					vComments = vComments+""."";
					while(RecExists)
					{
						SetFieldValue(""Comments"", vComments);
						WriteRecord();
						RecExists = NextRecord();
					}
				}
			}
			DynmcMatIdchange = ""N"";
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	}
	//Mayank: Added for Ecom ------------- STOP--------------------
	return (ContinueOperation);
}
function BusComp_PreInvokeMethod (MethodName,Inputs,Outputs)
{	
	
	return (ContinueOperation);
}
"/*---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060628       | 1.1  | ARUNJ  | SiebelES#40 Incorporated condition
20060706       | 1.2  | Prasad | Siebel ES SCR1, Objects Destroyed
20060726       | 1.3  | Kalyana| Changed Cancel Operation sequence
---------------+------+--------+----------------------------------------------
*/

function BusComp_PreInvokeMethod (MethodName)
    {
// below 1.1
	var Action; // = this.GetFieldValue(""Action"");
    var psInput; // = TheApplication().NewPropertySet();
	var psOutput; // = TheApplication().NewPropertySet();
	var psinputs; //=TheApplication().NewPropertySet();
	var psoutputs; //=TheApplication().NewPropertySet();
	var bsPreactivate; //=TheApplication().GetService(""RMS PreActivated Numbers File"");
// above 1.1
    var StrErrVal ="""";
	
    if(MethodName == ""RegisterIMSI"")
	{
// below 1.1	    
		Action = this.GetFieldValue(""Action"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psinputs = TheApplication().NewPropertySet();
		psoutputs = TheApplication().NewPropertySet();
		bsPreactivate = TheApplication().GetService(""RMS PreActivated Numbers File"");
//above 1.1
		var bsAucReg  = TheApplication().GetService(""RMS AUC Registration"");

		if (Action == TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_ACTION"", ""REGISTER""))
        {
			this.WriteRecord();
			psInput.SetProperty(""RowId"",this.GetFieldValue(""Id""));
			bsAucReg.InvokeMethod(""RegisterIMSI"",psInput,psOutput);
//below 1.3
			//return(CancelOperation);
//above 1.3
        }
	    else if (Action == TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_ACTION"", ""PRE-ACTIVATE""))
        {
			this.WriteRecord();
			this.ActivateField(""STC Package Type"");
			psInput.SetProperty(""RowId"",this.GetFieldValue(""Id""));
			//3G Flg
			psInput.SetProperty(""3GFlg"",this.GetFieldValue(""3G FLG""));
            psInput.SetProperty(""PromotionCode"",this.GetFieldValue(""Promotion Code""));
			psInput.SetProperty(""PackageType"",this.GetFieldValue(""STC Package Type""));
			//
			var boSystemPref 	= TheApplication().GetBusObject(""System Preferences""); 		
		    var bcSystemPref 	= boSystemPref.GetBusComp(""System Preferences"");
		    var strSearchStr = ""[Name]='RMS_AUC_PRE_ACTIVATION_SYNC' AND [Value] ='Y'"";
		    bcSystemPref.ClearToQuery();
		    bcSystemPref.SetSearchExpr(strSearchStr);
		    bcSystemPref.ExecuteQuery(ForwardOnly);
			if(bcSystemPref.FirstRecord())
		    {
			//this.InvokeMethod(""RefreshRecord"");
		    //this.InvokeMethod(""UpdateLinks"");
			//this.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"", ""PROCESSING""));
			//this.WriteRecord();
			var boSysPref 	= TheApplication().GetBusObject(""System Preferences""); 	
			var bcSysPref 	= boSystemPref.GetBusComp(""System Preferences"");
		    var strSearchExp = ""[Name]='RMS_AUC_FIND_SYNC_END_NUMBER' AND [Value] ='Y'"";
		    bcSysPref.ClearToQuery();
		    bcSysPref.SetSearchExpr(strSearchExp);
		    bcSysPref.ExecuteQuery(ForwardOnly);
			if(bcSysPref.FirstRecord())
		    {
			bsAucReg.InvokeMethod(""ValidatePreactivation"",psInput,psOutput);
			StrErrVal = psOutput.GetProperty(""StrErrVal"");
			bcSysPref = null;
			boSysPref = null;
			if (StrErrVal != """")
			{
		     bcSystemPref = null;
			 boSystemPref = null;	
			 bsPreactivate = null;
	         bsAucReg      = null;
             psInput        = null;
	         psOutput       = null;
	         psinputs       = null;
	         psoutputs      = null;	
	 		 TheApplication().RaiseErrorText(StrErrVal); 
			}
		    }
			psInput.SetProperty(""RMSAUCPreActiavtionSync"",""Y"");
			bsAucReg.InvokeMethod(""PreActivateIMSI"",psInput,psOutput);
			psinputs.SetProperty(""Object Id"",this.GetFieldValue(""Id""));		 		
			//bsPreactivate.InvokeMethod(""GenerateFile"",psinputs,psoutputs);
			}
			else
			{
			bsAucReg.InvokeMethod(""ValidatePreactivation"",psInput,psOutput);
            StrErrVal = psOutput.GetProperty(""StrErrVal"");
		    if(StrErrVal != """")
			{
		     bcSystemPref = null;
			 boSystemPref = null;	
			 bsPreactivate = null;
	         bsAucReg      = null;
             psInput        = null;
	         psOutput       = null;
	         psinputs       = null;
	         psoutputs      = null;	
	 		 TheApplication().RaiseErrorText(StrErrVal); 
			}
			this.InvokeMethod(""RefreshRecord"");
		    this.InvokeMethod(""UpdateLinks"");
			this.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"", ""SUBMITTED""));
			this.WriteRecord();
			this.InvokeMethod(""RefreshRecord"");
		    this.InvokeMethod(""UpdateLinks"");
			}
			bcSystemPref = null;
			boSystemPref = null;
//below1.3  
			//return(CancelOperation);
//above1.3
	    }
// below 1.1
		bsPreactivate = null;
		bsAucReg      = null;
// above 1.1
//below  1.3
        psInput        = null;
	    psOutput       = null;
	    psinputs       = null;
	    psoutputs      = null;	
		return(CancelOperation);
//above  1.3
       }
    if(MethodName == ""Update NO Status"")
    {
// below 1.1
		Action = this.GetFieldValue(""Action"");
        psInput = TheApplication().NewPropertySet();
	    psOutput = TheApplication().NewPropertySet();
// above 1.1
	    if (Action == TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_ACTION"", ""REGISTER""))
        { 
          var bsAucEbc= TheApplication().GetService(""RMS AUC EBC"");
          psInput.SetProperty(""BatchNo"",this.GetFieldValue(""Id""));
	      bsAucEbc.InvokeMethod(""ChangeStatus"",psInput,psOutput);
//1.2 below
	      bsAucEbc = null;
//1.2 above
	      return(CancelOperation);
        }
        else if (Action == TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_ACTION"", ""PRE-ACTIVATE""))
        {
          var bsAucEbc= TheApplication().GetService(""RMS AUC Change Status"");
	      psInput.SetProperty(""BatchNo"",this.GetFieldValue(""Id""));
	      bsAucEbc.InvokeMethod(""ChangeStatus"",psInput,psOutput);
//1.2 below
	      bsAucEbc = null;
//1.2 above
          return(CancelOperation);
        }
    }
//1.2 below
	psInput  = null;
	psOutput = null;
	psinputs = null;
	psoutputs = null;
//1.2 above
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{
	if (FieldName == ""3G FLG"")
    {
     var flg = this.GetFieldValue(""3G FLG"");
     TheApplication().RaiseErrorText(""Are you sure you want this as a ""+flg+"" batch?"");
     }
	if (FieldName == ""Promotion Code"")
    {
    var vPromotionCode = this.GetFieldValue(""Promotion Code"");
    TheApplication().RaiseErrorText(""Are you sure you want promotion code as  ""+vPromotionCode+""?"");
    }
   
}
"/**************************************************************************************
* Name          : RMS Import MSISDN PreInvoke Method.					  			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS Import MSISDN Code File.                                 		  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
* 06/07/2005  	2.0   		MBT						   	Created      06/07/2005       *
**************************************************************************************/



function BusComp_PreInvokeMethod (MethodName)
{
	if(MethodName == ""ImportMSISDN"")
		return(CancelOperation)
	else	
		return (ContinueOperation);
}
function BusComp_PreQuery ()
{
	
/*	var boAlloc;
	var bcAlloc;
	var strCategoryName = """";
	boAlloc = TheApplication().ActiveBusObject();
	if(boAlloc.Name() == ""RMS NM Number Allocation"") {
		bcAlloc = boAlloc.GetBusComp(""RMS NM Number Allocation"");
		strCategoryName = bcAlloc.GetFieldValue(""Special Category Name"");
		if(strCategoryName == """")
			this.SetSearchSpec(""Category Id"",""= ''"");
		else
			this.SetSearchSpec(""Category Name"",strCategoryName);
	}
	bcAlloc = null
	boAlloc = null;	
*/
	return (ContinueOperation);
}
function BusComp_PreInvokeMethod (MethodName)
{
	if(MethodName == ""NewRecord"" || MethodName == ""EditRecord"") 
	{
		 return (CancelOperation);
	} 
	
	return (ContinueOperation);
}
function BusComp_PreInvokeMethod (MethodName)
{
	if(MethodName == ""NewRecord"" || MethodName == ""EditRecord"") 
	{
		 return (CancelOperation);
	} 
	
	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Association Rule BusComp Invoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Association Rule Code File            	                  *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/05/2004 	 1.0   		MBT						   	Created       28/05/2004	  *
**************************************************************************************/

function BusComp_InvokeMethod (MethodName){

	var psInput;
	var psOutput;

	var bsAssociationRule;
	var bsBCRefresh;

	if (MethodName == ""ValidateRule""){	
		
		
		bsBCRefresh = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();		
		psInput.SetProperty(""Business Component Name"",""RMS NM Number Format"");
		psInput.SetProperty(""Business Object Name"",""RMS NM Number Type"");
		bsBCRefresh.InvokeMethod(""Refresh Business Component"",psInput,psOutput);
		
		
		bsAssociationRule = TheApplication().GetService(""RMS NM Association Rule"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""ObjectId"",this.GetFieldValue(""Rule Id""));
		psInput.SetProperty(""RuleType"",this.GetFieldValue(""Rule Type""));
		bsAssociationRule.InvokeMethod(""ValidateRule"",psInput,psOutput);

		
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Business Component Name"",""RMS NM Association Rule Detail"");
		psInput.SetProperty(""Business Object Name"",""RMS NM Association Rule"");
		bsBCRefresh.InvokeMethod(""Refresh Business Component"",psInput,psOutput);
		
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Business Component Name"",""RMS NM Association Rule Master"");
		psInput.SetProperty(""Business Object Name"",""RMS NM Association Rule"");
		bsBCRefresh.InvokeMethod(""Refresh Business Component"",psInput,psOutput);
		
		psInput 			= null;
		psOutput			= null;
		bsAssociationRule 	= null;
		bsBCRefresh			= null;
		return(CancelOperation);
	}	
	
	return(ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Enquiry PreSetFieldValue Method.					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Enquiry Code File.                                   *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT						   	Created      14/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
20060720       | 1.2   |Kalyana| Commented entire code because it  is  not required
**************************************************************************************/

function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
//below 1.2	
/*var bsNMEnquiry;
	var psInputs;
	var psOutputs;
	if(FieldName == ""Available Date""){
		if(this.GetUserProperty(""SuppressScript"") != ""Y"") {
			psInputs   = TheApplication().NewPropertySet();
			psOutputs  = TheApplication().NewPropertySet();
		
			psInputs.SetProperty(""Scheme Id"",this.GetFieldValue(""Scheme Id""));
			psInputs.SetProperty(""Quarantine Date"",this.GetFieldValue(""Quarantine Date""));
			psInputs.SetProperty(""Available Date"",FieldValue);
			
			psInputs.SetProperty(""TerminationDismantle"",this.GetFieldValue(""Disconnect Type""));
			
			if(this.GetFieldValue(""Available Date"") != """"){							
				bsNMEnquiry = TheApplication().GetService(""RMS NM Number Enquiry"");
				bsNMEnquiry.InvokeMethod(""Available Date"",psInputs,psOutputs);
			}
		}
	}
//1.1 below
	psInputs = null;
	psOutputs = null;
	bsNMEnquiry = null;
//1.1 above*/
//above 1.2
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Enquiry PreSetFieldValue Method.					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Enquiry Code File.                                   *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT						   	Created      14/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
20060720       | 1.2   |Kalyana| Commented entire code because it  is  not required
**************************************************************************************/

function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
//below 1.2	
/*var bsNMEnquiry;
	var psInputs;
	var psOutputs;
	if(FieldName == ""Available Date""){
		if(this.GetUserProperty(""SuppressScript"") != ""Y"") {
			psInputs   = TheApplication().NewPropertySet();
			psOutputs  = TheApplication().NewPropertySet();
		
			psInputs.SetProperty(""Scheme Id"",this.GetFieldValue(""Scheme Id""));
			psInputs.SetProperty(""Quarantine Date"",this.GetFieldValue(""Quarantine Date""));
			psInputs.SetProperty(""Available Date"",FieldValue);
			
			psInputs.SetProperty(""TerminationDismantle"",this.GetFieldValue(""Disconnect Type""));
			
			if(this.GetFieldValue(""Available Date"") != """"){							
				bsNMEnquiry = TheApplication().GetService(""RMS NM Number Enquiry"");
				bsNMEnquiry.InvokeMethod(""Available Date"",psInputs,psOutputs);
			}
		}
	}
//1.1 below
	psInputs = null;
	psOutputs = null;
	bsNMEnquiry = null;
//1.1 above*/
//above 1.2
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Enquiry PreSetFieldValue Method.					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Enquiry Code File.                                   *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 12/12/2003     1.0   	MBT		 Created      14/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/

function BusComp_PreSetFieldValue (FieldName, FieldValue){

	var bsNMEnquiry;
	
	var psInputs;
	var psOutputs;
	
	if(FieldName == ""Available Date""){
		if(this.GetUserProperty(""SuppressScript"") != ""Y"") {
			psInputs   = TheApplication().NewPropertySet();
			psOutputs  = TheApplication().NewPropertySet();
		
			psInputs.SetProperty(""Scheme Id"",this.GetFieldValue(""Scheme Id""));
			psInputs.SetProperty(""Quarantine Date"",this.GetFieldValue(""Quarantine Date""));
			psInputs.SetProperty(""Available Date"",FieldValue);
			
			psInputs.SetProperty(""TerminationDismantle"",this.GetFieldValue(""Disconnect Type""));
			
			if(this.GetFieldValue(""Available Date"") != """"){							
				bsNMEnquiry = TheApplication().GetService(""RMS NM Number Enquiry"");
				bsNMEnquiry.InvokeMethod(""Available Date"",psInputs,psOutputs);
			}
		}
	}
//1.1 below
	psInputs = null;
	psOutputs = null;
	bsNMEnquiry = null;
//1.1 above
	
	return (ContinueOperation);
}
function BusComp_PreQuery ()
{
	
try{
		var aActive = TheApplication().ActiveBusObject();
		var bcBusComp = aActive.GetBusComp(""RMS NM Number Inventory Maintenance"");
		
		var strSearchSpec = bcBusComp.GetFieldValue(""From Status"");
		
		if(strSearchSpec != """") {
			this.SetSearchSpec(""Is Associated"","" = 'N' OR [Is Associated] IS NULL"");
		}
	} catch(e) {
		return (ContinueOperation);
	} 
	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Enquiry PreSetFieldValue Method.					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Enquiry Code File.                                   *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT						   	Created      14/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
20060720       | 1.2   |Kalyana| Commented entire code because it  is  not required
**************************************************************************************/

function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
//below 1.2	
/*var bsNMEnquiry;
	var psInputs;
	var psOutputs;
	if(FieldName == ""Available Date""){
		if(this.GetUserProperty(""SuppressScript"") != ""Y"") {
			psInputs   = TheApplication().NewPropertySet();
			psOutputs  = TheApplication().NewPropertySet();
		
			psInputs.SetProperty(""Scheme Id"",this.GetFieldValue(""Scheme Id""));
			psInputs.SetProperty(""Quarantine Date"",this.GetFieldValue(""Quarantine Date""));
			psInputs.SetProperty(""Available Date"",FieldValue);
			
			psInputs.SetProperty(""TerminationDismantle"",this.GetFieldValue(""Disconnect Type""));
			
			if(this.GetFieldValue(""Available Date"") != """"){							
				bsNMEnquiry = TheApplication().GetService(""RMS NM Number Enquiry"");
				bsNMEnquiry.InvokeMethod(""Available Date"",psInputs,psOutputs);
			}
		}
	}
//1.1 below
	psInputs = null;
	psOutputs = null;
	bsNMEnquiry = null;
//1.1 above*/
//above 1.2
	return (ContinueOperation);
}
function BusComp_PreInvokeMethod (MethodName)
{
	//try {
		
    	switch (MethodName) {
			case ""QueryMSISDN"" : 
				var NumberString = this.GetFieldValue(""MSISDN Number"");
				var strQty = this.GetFieldValue(""Quantity"");
				if (NumberString == """" || strQty == """"){
					TheApplication().RaiseErrorText(TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR017""));
				}
				for(var i=0;i<NumberString.length;i++){
					if((!(Clib.isdigit(NumberString.charAt(i)))) || (Clib.isspace(NumberString.charAt(i))))
						TheApplication().RaiseErrorText(TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR015""));
				}
				for(var i=0;i<strQty.length;i++){
					if((!(Clib.isdigit(strQty.charAt(i)))) || (Clib.isspace(strQty.charAt(i))))
						TheApplication().RaiseErrorText(TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR016""));
				}
		    	var CusBo = TheApplication().ActiveBusObject();
     			var CusBc = CusBo.GetBusComp(""RMS NM MSISDN Details"");
       			with (CusBc) {
       			    ActivateField(""Reserved To"");
		   	   		SetViewMode(AllView);
					ClearToQuery();
	     			SetSearchSpec(""Number String"", NumberString);
     	 			ExecuteQuery();
    			} 

				this.InvokeMethod(""UpdateLinks"");

				return(CancelOperation);
				break;
		    case ""Reserve"" :
		    case ""Cancel Reservation"" :
		    	
		    	var psInputs  = TheApplication().NewPropertySet();
		    	var psOutputs  = TheApplication().NewPropertySet();
		    	
		    	var CusBo = TheApplication().ActiveBusObject();
     			var CusBc = CusBo.GetBusComp(""RMS NM MSISDN Details"");
     			
     			var bsNMReserve = TheApplication().GetService(""RMS NM Number Reservation"");
     			
		    	var NumReservBO = TheApplication().GetBusObject(""RMS NM Number Reservation CSR"");
				var NumReservBC = NumReservBO.GetBusComp(""RMS NM Number Reservation CSR"");
				
				with(NumReservBC){
					InvokeMethod(""SetAdminMode"",""TRUE"");
					SetViewMode(AllView);
					
					ActivateField(""Operation"");
					ActivateField(""Scheme Id"");
					ActivateField(""Scheme Name"");
					ActivateField(""Type"");
					ActivateField(""SubType"");
					ActivateField(""Block Id"");
					ActivateField(""Block Name"");
					ActivateField(""Special Category,"");
					ActivateField(""Reserved Date"");
					ActivateField(""Status"");
					ActivateField(""Reserved By"");
					ActivateField(""ReservedFromCodeId"");
					ActivateField(""Reserved Partner Id"");
					ActivateField(""Reservation End Date"");
					ActivateField(""Reserved For"");
					ActivateField(""Reserved Partner Name"");
					ActivateField(""Customer Name"");
					ActivateField(""Customer Number"");
					ActivateField(""Customer Address"");
					ActivateField(""Customer Id"");
					ActivateField(""Start Num"");
					ActivateField(""Start Num String"");
					ActivateField(""End Num"");
					ActivateField(""End Num String"");
					ActivateField(""Qty"");
					ActivateField(""Is Sequence"");
					ActivateField(""AllocFromIdProfileAttr"");
					ActivateField(""HLR Id"");
					ActivateField(""Class"");
					ActivateField(""Number Id"");
					ActivateField(""Reserved To"");
					ActivateField(""HAppointment"");
	
					
					NewRecord(NewAfter);
					
					if (MethodName == ""Reserve""){
						SetFieldValue(""Operation"",TheApplication().InvokeMethod(""LookupValue"",""NM_RESERVE_OPERATION"",""RESERVE""));
						SetFieldValue(""Reserved To"",TheApplication().GetProfileAttr(""STC GroupCode Id""));
						
					
					}else{
						SetFieldValue(""Operation"",TheApplication().InvokeMethod(""LookupValue"",""NM_RESERVE_OPERATION"",""CANCEL RESERVATION""));
						SetFieldValue(""Reserved To"",CusBc.GetFieldValue(""Reserved To""));
					
					}
					SetFieldValue(""Scheme Name"",CusBc.GetFieldValue(""Scheme Name""));
					SetFieldValue(""Scheme Id"",CusBc.GetFieldValue(""Scheme Id""));
					SetFieldValue(""Block Name"",CusBc.GetFieldValue(""Block Name""));
					SetFieldValue(""Block Id"",CusBc.GetFieldValue(""Block Id""));
					SetFieldValue(""Special Category"",CusBc.GetFieldValue(""Special Category Type""));
					//SetFieldValue(""ReservedFromCodeId"",TheApplication().GetProfileAttr(""STC GroupCode""));
					SetFieldValue(""ReservedFromCode"",TheApplication().GetProfileAttr(""STC GroupCode Id""));
					//SetFieldValue(""Reserved Partner Id"",TheApplication().GetProfileAttr(""STC PartnerCode""));
				
					//SetFieldValue(""Reserved To"",TheApplication().GetProfileAttr(""STC PartnerCodeId""));
					//SetFieldValue(""Reserved To"",TheApplication().GetProfileAttr(""STC GroupCode Id""));

				
					SetFieldValue(""Start Num String"",CusBc.GetFieldValue(""Number String""));
				
					
					SetFieldValue(""Qty"",this.GetFieldValue(""Quantity""));
					SetFieldValue(""Customer Name"",this.GetFieldValue(""Customer Name""));
					SetFieldValue(""Customer Number"",this.GetFieldValue(""Customer Number""));
					SetFieldValue(""Customer Address"",this.GetFieldValue(""Customer Address""));
					SetFieldValue(""Customer Id"",this.GetFieldValue(""Customer Id""));
					
					psInputs.SetProperty(""Block Id"",GetFieldValue(""Block Id""));
					psInputs.SetProperty(""Scheme Id"",GetFieldValue(""Scheme Id""));
					psInputs.SetProperty(""Is Sequence"",GetFieldValue(""Is Sequence""));
					psInputs.SetProperty(""Start Num"",GetFieldValue(""Start Num""));
					psInputs.SetProperty(""Quantity"",GetFieldValue(""Qty""));
					psInputs.SetProperty(""HLR ID"",GetFieldValue(""HLR Id""));
					psInputs.SetProperty(""Class"",GetFieldValue(""Class""));
					psInputs.SetProperty(""Special Category"",GetFieldValue(""Special Category""));
					psInputs.SetProperty(""End Num"",GetFieldValue(""End Num""));
					psInputs.SetProperty(""End Num String"",GetFieldValue(""End Num String""));
					psInputs.SetProperty(""Number Id"",GetFieldValue(""Number Id""));
					psInputs.SetProperty(""ReservedFromCode"",GetFieldValue(""ReservedFromCode""));
					psInputs.SetProperty(""Reserved To"",GetFieldValue(""Reserved To""));
					psInputs.SetProperty(""Operation"",GetFieldValue(""Operation""));
					psInputs.SetProperty(""HAppointment"",GetFieldValue(""HAppointment""));
					psInputs.SetProperty(""Source"",TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""RMS""));
					
					bsNMReserve.InvokeMethod(""Validate"",psInputs,psOutputs);

					var strErrVal = psOutputs.GetProperty(""strErrVal"");
					if(strErrVal != """"){
						UndoRecord();
						TheApplication().RaiseErrorText(strErrVal);
					}else{
						SetFieldValue(""End Num"",psOutputs.GetProperty(""End Num""));
						SetFieldValue(""End Num String"",psOutputs.GetProperty(""End Num String""));
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));
						WriteRecord();
					}
					var psInput1 = TheApplication().NewPropertySet();
					var psOutput1 = TheApplication().NewPropertySet();
					psInput1.SetProperty(""Object Id"",GetFieldValue(""Id""));
					psInput1.SetProperty(""CheckCancelReservation"",""Y"");
					psInput1.SetProperty(""Source"",TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""RMS""));
					if (MethodName == ""Reserve""){
						bsNMReserve.InvokeMethod(""Reserve"",psInput1,psOutput1);
					}else if (MethodName == ""Cancel Reservation""){
						bsNMReserve.InvokeMethod(""CancelReservation"",psInput1,psOutput1);
					}
				
					strErrVal = psOutput1.GetProperty(""strErrVal"");
					if(strErrVal != """"){
						if((strErrVal == TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR010"")) || (strErrVal == TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR011""))){
							this.InvokeMethod(""UpdateLinks"");
							CusBc = null;
		                    CusBo = null;
							TheApplication().RaiseErrorText(strErrVal);
						}else{
							InvokeMethod(""RefreshRecord"");
							DeleteRecord();
							this.InvokeMethod(""UpdateLinks"");
							CusBc = null;
		                    CusBo = null;
							TheApplication().RaiseErrorText(strErrVal);
						}
					}
				}
		    	return(CancelOperation);
				break;
			default:
				return(CancelOperation);
				break;
		}
		return (ContinueOperation);
	/*}
	catch (e) {
		var vErr = e.toString();
		var vErrCode = e.errCode;
		var vObjName = ""RMS NM MSISDN Query-Reservation VBC"";
		var vFunc = ""BusComp_PreInvokeMethod"";
		var vObjType = ""Business Component"";
        var vObjId ="""";  
		//TheApplication().log_exception(""Exception"",vErr,vErrCode,vObjId,vObjName,vFunc,vObjType);
		throw(e.toString()); 
		return(CancelOperation);
	}
	finally {
		CusBc = null;
		CusBo = null;
	}*/
}
function BusComp_SetFieldValue (FieldName)
{

}
"/**************************************************************************************
* Name          : RMS NM Number Allocation BusComp Invoke Method				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Allocation Code File            	                  *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/05/2004 	 1.0   		MBT						   	Created       28/05/2004	  *
* 20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed				  *
* 30/11/2006	 | 1.2  | Amit Kr| Changed code to make process Asynchronous based on *
*									System Pref 									  *
* 16/12/2006	 | 1.3  | Manoj  | changed script to handel errorcode and errormessage*	
**************************************************************************************/

function BusComp_InvokeMethod (MethodName)
{
	//below 1.2		
	var psInput;
	var psOutput;
	var bsNumAlloc;
	var	intObjectId;
	//above 1.2
	if (""Allocate"" == MethodName || ""Deallocate"" == MethodName)
	{	
		//below 1.2
		
		this.WriteRecord();
		var boSystemPref 	= TheApplication().GetBusObject(""System Preferences""); 		
		var bcSystemPref 	= boSystemPref.GetBusComp(""System Preferences"");
		var strSearchStr = ""[Name]='RMS_ALLOCATE_SYNC' AND [Value] ='N'"";
		bcSystemPref.ClearToQuery();
		bcSystemPref.SetSearchExpr(strSearchStr);
		bcSystemPref.ExecuteQuery(ForwardOnly);
				
		if(bcSystemPref.FirstRecord())
		{
			this.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""SUBMITTED""));
			this.WriteRecord();
			psInput     = TheApplication().NewPropertySet();
			psOutput    = TheApplication().NewPropertySet();
			bsNumAlloc	= TheApplication().GetService(""Workflow Process Manager"");
			intObjectId = this.GetFieldValue(""Id"");
			psInput.SetProperty(""Object Id"",intObjectId);
			psInput.SetProperty(""RowId"",intObjectId);
			
			//if(MethodName == ""Allocate"")
				psInput.SetProperty(""ProcessName"",""RMS NM Number Allocation Async Main"");
			//else
			//	psInput.SetProperty(""ProcessName"",""RMS NM Number Deallocate Async"");
				bsNumAlloc.InvokeMethod(""RunProcess"",psInput,psOutput);
		
			}
		else
		{
			//above 1.2
			var bsNumAlloc = TheApplication().GetService(""RMS NM Number Allocation"");
			
			//below 1.2		
			psInput    = TheApplication().NewPropertySet();
			//var psInput    = TheApplication().NewPropertySet();
			psOutput   = TheApplication().NewPropertySet();
			//var psOutput   = TheApplication().NewPropertySet();
			//above 1.2
	
			psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
			bsNumAlloc.InvokeMethod(MethodName,psInput,psOutput);
			//below 1.2
			//above 1.3
			//need to handle raise errortexts as BS no longer raise erros
			if((psOutput.GetProperty(""Error Code"") != ""RMSALC006"") && (psOutput.GetProperty(""Error Code"") != ""RMSALC007""))
				TheApplication().RaiseErrorText(psOutput.GetProperty(""Error Message""));
			//below 1.3
		}
		//above 1.2
		
		psInput        = null;
		psOutput       = null;
		bsNumAlloc     = null;
		return(CancelOperation);
	}
	else	
		return(ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation BucComp PreWrite Method     		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Allocation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      05/12/2003       *
**************************************************************************************/

function BusComp_PreWriteRecord ()
{
	var psInputs;
	var psOutputs;
	var bsNMAllocate;
	var	boNMAlloc; 
	var bcNMAlloc;
	var Operation;	
	psInputs  		= TheApplication().NewPropertySet();
	psOutputs  		= TheApplication().NewPropertySet();
	bsNMAllocate	= TheApplication().GetService(""RMS NM Number Allocation"");	
//-------------------------------------------------------
// Populating the end number while saving the record
//-------------------------------------------------------
	if((this.GetFieldValue(""Start Num String"") != """") && (this.GetFieldValue(""End Num String"") == """") && this.GetUserProperty(""blnFromAllocation"") != ""Y"")
	{
		psInputs.SetProperty(""Operation"",this.GetFieldValue(""Operation""));
		psInputs.SetProperty(""Block Id"",this.GetFieldValue(""Block Id""));
		psInputs.SetProperty(""Scheme Id"",this.GetFieldValue(""Scheme Id""));
		psInputs.SetProperty(""Alloc From"",this.GetFieldValue(""Alloc From Id""));
		psInputs.SetProperty(""Alloc To"",this.GetFieldValue(""Alloc To Id""));		
		psInputs.SetProperty(""Is Sequence"",this.GetFieldValue(""Is Sequence""));
		psInputs.SetProperty(""Start Num"",this.GetFieldValue(""Start Num""));
		psInputs.SetProperty(""Quantity"",this.GetFieldValue(""Quantity""));
		psInputs.SetProperty(""End Num"",this.GetFieldValue(""End Num""));
		psInputs.SetProperty(""End Num String"",this.GetFieldValue(""End Num String""));
		psInputs.SetProperty(""SIM Artwork"",this.GetFieldValue(""SIM Artwork Id""));
		psInputs.SetProperty(""Number Id"",this.GetFieldValue(""Number Id""));
		psInputs.SetProperty(""Special Category Name"",this.GetFieldValue(""Special Category Name""));
		psInputs.SetProperty(""Is Paired"",this.GetFieldValue(""Is Paired""));
		bsNMAllocate.InvokeMethod(""Validate"",psInputs,psOutputs);
		
		if(psOutputs.GetProperty(""Error Code"") != ""00000"") {
			TheApplication().RaiseErrorText(psOutputs.GetProperty(""Error Message""));
		} else {
			this.SetFieldValue(""Quantity"",psOutputs.GetProperty(""Quantity""));
			this.SetFieldValue(""End Num"",psOutputs.GetProperty(""End Num""));
			this.SetFieldValue(""End Num String"",psOutputs.GetProperty(""End Num String""));
			this.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));
		}
	}
	this.SetUserProperty(""blnFromAllocation"",""N"");
	psInputs 	= null;
	psOutputs	= null;
	bsNMAllocate= null;
	return (ContinueOperation);
}
function BusComp_NewRecord ()
{
	var bsBSIFCOMMON:Service 	= TheApplication().GetService (""TECHM BS IF COMMON"");
	var mpsInp    = TheApplication().NewPropertySet();
	var mpsOp     = TheApplication().NewPropertySet();
	
	mpsInp.SetProperty(""Sub Type"",""SEQ"");
	mpsInp.SetProperty(""BC Short Name"",""NMASSOC"");
	mpsInp.SetProperty(""Prefix"","""");
	mpsInp.SetProperty(""Length"",""6"");
	mpsInp.SetProperty(""SysPrefPrefix"",""RMS"");
	
	bsBSIFCOMMON.InvokeMethod(""Get Next Id"", mpsInp, mpsOp);
	
	var msNextId = mpsOp.GetProperty(""Next Id"");
	
	//var msNextId = Math.round(Clib.rand());
	//var msNextId = 10000;

	this.SetFieldValue(""Assoc Seq"",msNextId);

	this.SetFieldValue(""Association Id"", ""ASSOC"" + ""-"" + msNextId); 

	mpsInp    	= null;
	mpsOp     	= null;
//	assocNextId = null;
	bsBSIFCOMMON		= null;
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	if (FieldName == ""Rule Name"") 
	{
		
		var vAssId = this.GetFieldValue(""Id"");
		var	boNumAssociation = TheApplication().GetBusObject(""RMS NM Number Association"");
		var bcNumAssociationStartNum = boNumAssociation.GetBusComp(""RMS NM Number Association Start Number"");
		
		with(bcNumAssociationStartNum) 
		{
			ActivateField(""Ass Id""); 
			ClearToQuery();
			SetSearchSpec(""Ass Id"",vAssId);
			ExecuteQuery(1);
			while (FirstRecord())
				DeleteRecord();
		}
		
		this.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""NEW""))
		bcNumAssociationStartNum = null;
		boNumAssociation = null;
	}
	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{
	if(this.GetFieldValue(""Rule Id"") == """")
	{
		TheApplication().RaiseError(""RMSASS016"");
	}
	else
	{
//------------------------------------------------------------
//Populating the Association Parameter AFTER saving the record
//------------------------------------------------------------ 	
		if((this.GetFieldValue(""Status"") == TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""NEW"")))
		{
			var psInputs;
			var psOutputs;
			var bsNMAssoc;
			var strErrCode = """";
			var strErrMessage = """";
			psInputs  		= TheApplication().NewPropertySet();
			psOutputs  		= TheApplication().NewPropertySet();
			bsNMAssoc	=	TheApplication().GetService(""RMS NM Number Association"");
			psInputs.SetProperty(""Rule Id"",this.GetFieldValue(""Rule Id""));
			psInputs.SetProperty(""AssociationId"",this.GetFieldValue(""Id""));
			bsNMAssoc.InvokeMethod(""UpdateAssocParameters"",psInputs,psOutputs);
			strErrCode      = psOutputs.GetProperty(""Error Code"");
			strErrMessage   = psOutputs.GetProperty(""Error Message"");
			this.InvokeMethod(""RefreshRecord"");//needs to refresh ONLY the current record in the BC
			this.InvokeMethod(""UpdateLinks"");//needs to be called if any child record was affected/modified
			psInputs 	= null;
			psOutputs	= null;
			bsNMAssoc   = null;
//only after most of the processing has been done, raise error, it could be actually for a status display as well
			if("""" != strErrCode)
				TheApplication().RaiseErrorText(strErrCode + ""\n"" + strErrMessage);
		}
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Association BusComp_NewRecord Method 			  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     Reviewed Date    *
***************************************************************************************
* 30/12/2003 	1.0   		MBT				Created      22/12/2003       *
20060620        1.1         Prasad TM       Changed the way to get nextid, uses a generic BS   
20060627        1.2         Prasad TM       Changed the length of generated ID to 6 so it will be of form ASSOC-000001
*************************************************************************************
*/
function BusComp_NewRecord () {
 /*-------------------------------------------------------------------------------
  Generates a new Association Id Sequence based on the value in the database or a 
  completely new value for the 1st time
 -------------------------------------------------------------------------------*/

//	var mbsNextId = TheApplication().GetService(""STC BS IF COMMON"");

	var sriNextId = TheApplication().GetService(""TECHM BS IF COMMON"");
	
	var mpsInp    = TheApplication().NewPropertySet();
	var mpsOp     = TheApplication().NewPropertySet();
	mpsInp.SetProperty(""Sub Type"",""SEQ"");
	mpsInp.SetProperty(""BC Short Name"",""NMASSOC"");
	mpsInp.SetProperty(""Prefix"","""");
	mpsInp.SetProperty(""Length"",""6"");

//	mbsNextId.InvokeMethod(""Get Next Id"",mpsInp,mpsOp);
	
	sriNextId.InvokeMethod(""Get Next Id"",mpsInp,mpsOp);

	var msNextId = mpsOp.GetProperty(""Next Id"");

	this.SetFieldValue(""Assoc Seq"",msNextId);
	this.SetFieldValue(""Association Id"", ""ASSOC"" + ""-"" + msNextId); 

	mpsInp    = null;
	mpsOp     = null;
	sriNextId = null;
//	mbsNextId = null;
	
}
"/**************************************************************************************
* Name          : RMS NM Number Association BusComp_PreSetFieldValue Method 	  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
* 30/12/2003 	 1.0   	MBT		 Created      22/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
02/02/2009	   | 1.2  | Ashu   | Changed Code from ActiveBO by taking BO Instance as New
								 Record couldn't be called from WF or Business Service
**************************************************************************************/

function BusComp_PreSetFieldValue (FieldName, FieldValue) 
{
	if (FieldName == ""Rule Name"") 
	{
//	below 1.2	
	/*	var	boNumAssociation = TheApplication().ActiveBusObject();
		var	bcNumAssociationMstr = boNumAssociation.GetBusComp(""RMS NM Number Association Master"");
		var bcNumAssociationStartNum = boNumAssociation.GetBusComp(""RMS NM Number Association Start Number"");
		with(bcNumAssociationStartNum) 
		{
			ActivateField(""Ass Id""); 
			ClearToQuery();
			SetSearchSpec(""Ass Id"",bcNumAssociationMstr.GetFieldValue(""Id""));
			ExecuteQuery(1);
			while (FirstRecord())
				DeleteRecord();
		}
		this.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""NEW""))
		//1.1 below - must not nullify the BO, it is activeBO
		bcNumAssociationStartNum = null;
		bcNumAssociationMstr = null;
		//1.1 above*/
		
		var vAssId = this.GetFieldValue(""Id"");
		var	boNumAssociation = TheApplication().GetBusObject(""RMS NM Number Association"");
		var bcNumAssociationStartNum = boNumAssociation.GetBusComp(""RMS NM Number Association Start Number"");
		
		with(bcNumAssociationStartNum) 
		{
			ActivateField(""Ass Id""); 
			ClearToQuery();
			SetSearchSpec(""Ass Id"",vAssId);
			ExecuteQuery(1);
			while (FirstRecord())
				DeleteRecord();
		}
		
		this.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""NEW""))
		bcNumAssociationStartNum = null;
		boNumAssociation = null;
	}
//	above 1.2
	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Association BusComp_WriteRecord Method 			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date     Version   By      Comments                                Reviewed Date    *
***************************************************************************************
* 30/12/2003 1.0     MBT     Created                                 22/12/2003       *
20060627     1.1     Prasad  SiebelES#4 RefreshRecord called rather than RefreshingBC which uses a BS Call
                             This code was earlier in PreWriteRecord and was causing writerecord in child BC
*************************************************************************************
*/
function BusComp_WriteRecord ()
{
	if(this.GetFieldValue(""Rule Id"") == """")
	{
		TheApplication().RaiseError(""RMSASS016"");
	}
	else
	{
//------------------------------------------------------------
//Populating the Association Parameter AFTER saving the record
//------------------------------------------------------------ 	
		if((this.GetFieldValue(""Status"") == TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""NEW"")))
		{
			var psInputs;
			var psOutputs;
			var bsNMAssoc;
			var strErrCode = """";
			var strErrMessage = """";
			psInputs  		= TheApplication().NewPropertySet();
			psOutputs  		= TheApplication().NewPropertySet();
			bsNMAssoc	=	TheApplication().GetService(""RMS NM Number Association"");
//			bsNMAssoc   	= TheApplication().GetService(""RMS NM Number Association"");
//			psInputs.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
			psInputs.SetProperty(""Rule Id"",this.GetFieldValue(""Rule Id""));
			psInputs.SetProperty(""AssociationId"",this.GetFieldValue(""Id""));
			bsNMAssoc.InvokeMethod(""UpdateAssocParameters"",psInputs,psOutputs);
			strErrCode      = psOutputs.GetProperty(""Error Code"");
			strErrMessage   = psOutputs.GetProperty(""Error Message"");
			this.InvokeMethod(""RefreshRecord"");//needs to refresh ONLY the current record in the BC
			this.InvokeMethod(""UpdateLinks"");//needs to be called if any child record was affected/modified
			psInputs 	= null;
			psOutputs	= null;
			bsNMAssoc   = null;
//only after most of the processing has been done, raise error, it could be actually for a status display as well
			if("""" != strErrCode)
				TheApplication().RaiseErrorText(strErrCode + ""\n"" + strErrMessage);
		}
	}

}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060627       | 1.1  | Prasad | SiebelES#3 Incorporated the check on returned error (if any) by the BS call.
20060702	   | 1.2  |Kalyana | To save  record implicitly  without  stepping out of  record 
20070905       | 1.3  |Kalyana | To Valdiate HLR Id of IMSI and MSISDN before association 
---------------+------+--------+----------------------------------------------
*/
function BusComp_PreInvokeMethod (MethodName)
{
	var intRetCode = ContinueOperation;
//1.2 below
	this.WriteRecord();
//1.2 above
	switch (MethodName)
	{
	case ""AssociateNumbers"":
//	case ""EstimateEndNumber"": 
//  There is no control on the applet [RMS NM Number Association Start Number List Applet]
//  which has this method invoked
	case ""DeassociateNumbers"":
//common init of variable here
		var psInputs  		  = TheApplication().NewPropertySet();
		var psOutputs  		  = TheApplication().NewPropertySet();
		var bsNMAssociate	  = TheApplication().GetService(""RMS NM Number Association"");
		var strMethodToInvoke = """";
		var strErrCode        = """";
		var strErrMessage     = """";
//pass the ROW_ID of the assoc master record
		psInputs.SetProperty(""AssociationId"",this.GetFieldValue(""Ass Id""));

//do method specific things below
		if(MethodName        == ""AssociateNumbers"")
		{
		//----GB 11/10/2006---------------------------------------------------------------------------
		//	var boNumAssociation = TheApplication().GetBusObject(""RMS NM Number Association"");
//			var bcNumAssociationMstr = this.ParentBusComp();//boNumAssociation.GetBusComp(""RMS NM Number Association Master"");

//			bcNumAssociationMstr.ActivateField(""Status"");
			
			var bsNumAssoc;
			var	intObjectId;
			var psInput;
			var psOutput;


			var boSystemPref 	= TheApplication().GetBusObject(""System Preferences""); 		
			var bcSystemPref 	= boSystemPref.GetBusComp(""System Preferences"");
			//below 1.3
			bcSystemPref.ClearToQuery();
			var strSearchStrHLR = ""[Name]='RMS_ASSOC_VALIDATE_HLR' AND [Value] ='Y'"";
			bcSystemPref.SetSearchExpr(strSearchStrHLR);
			bcSystemPref.ExecuteQuery(ForwardOnly);
			if(bcSystemPref.FirstRecord())
				{
					var	Inputs          = TheApplication().NewPropertySet();
					var	Outputs         = TheApplication().NewPropertySet();
//					var bsValidateHLR	= TheApplication().GetService(""RMS Validate HLR ID"");
					var bsValidHLR		= TheApplication().GetService(""RMS Validate HLR ID"");

					var ErrMessage      = """";
					Inputs.SetProperty(""AssociationId"",this.GetFieldValue(""Ass Id""));
//					bsValidateHLR.InvokeMethod(""Validate HLR"",Inputs,Outputs);

					bsValidHLR.InvokeMethod(""Validate HLR"",Inputs,Outputs);						
				    ErrMessage = Outputs.GetProperty(""ErrMessage"");
					if ("""" != ErrMessage)
					{
					  bcSystemPref    = null;
					  boSystemPref    = null;	
					  psInputs        = null;
		              psOutputs       = null;
		              bsNMAssociate   = null;
					  Inputs          = null;
					  Outputs         = null;
//					  bsValidateHLR   = null;
					  bsValidHLR	  = null;			
					  TheApplication().RaiseErrorText(ErrMessage);
					}
				 }
           //Above  1.3
			var strSearchStr = ""[Name]='RMS_ASSOC_SYNC' AND [Value] ='Y'"";
			bcSystemPref.ClearToQuery();
			bcSystemPref.SetSearchExpr(strSearchStr);
			bcSystemPref.ExecuteQuery(ForwardOnly);
				if(bcSystemPref.FirstRecord())
				{
						strMethodToInvoke = ""AssociateNumbers"";	

				}
				else
				{
//						bcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""SUBMITTED""));
//						bcNumAssociationMstr.WriteRecord();
						var bcNumAssociationMstr = this.ParentBusComp();
						bcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""SUBMITTED""));
						bcNumAssociationMstr.WriteRecord();
						
//						this.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
//						this.WriteRecord();
		
						psInput     = TheApplication().NewPropertySet();
						psOutput    = TheApplication().NewPropertySet();
						bsNumAssoc	= TheApplication().GetService(""Workflow Process Manager"");
						intObjectId = this.GetFieldValue(""Ass Id"");
						psInput.SetProperty(""Object Id"",intObjectId);
						psInput.SetProperty(""RowId"",intObjectId);
						psInput.SetProperty(""ProcessName"",""RMS NM Number Association"");
							
					bsNumAssoc.InvokeMethod(""RunProcess"",psInput,psOutput);


				}
	
	//-------------------------------------------------------------------------------
	
	

		}
		else if (MethodName  == ""DeassociateNumbers"")
			strMethodToInvoke = ""DeassociateNumbers"";
		else if (MethodName  == ""EstimateEndNumber"")
			strMethodToInvoke = ""EstimateEndNumber"";

//common method invoc statement and postprocessing here
	if (strMethodToInvoke != """")
		bsNMAssociate.InvokeMethod(strMethodToInvoke,psInputs,psOutputs);	

//Error Code - can mean an error or even a status message to be shown to user.
		strErrCode      = psOutputs.GetProperty(""Error Code"");
		strErrMessage   = psOutputs.GetProperty(""Error Message"");
		psInputs 		= null;
		psOutputs 		= null;
		bsNMAssociate 	= null;
		intRetCode = CancelOperation;

		var bcAssocMstr = this.ParentBusComp();	
		if(bcAssocMstr != null) 
		{
			bcAssocMstr.InvokeMethod(""RefreshRecord"");
			bcAssocMstr.InvokeMethod(""UpdateLinks""); 
			bcAssocMstr = null;
		}

		if("""" != strErrCode)//be the last statement so that all other processing would have happened.
			TheApplication().RaiseErrorText(strErrCode + ""\n"" + strErrMessage);
		break;	
	}
	return intRetCode;
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060627       | 1.1  | Prasad | SiebelES#4 RefreshRecord method of BC used rather than requery as in RefreshingBc
---------------+------+--------+----------------------------------------------
*/
function BusComp_WriteRecord ()
{
	if(this.GetFieldValue(""QuantityChk"") == ""Y"") 
	{
		var psInputs  		= TheApplication().NewPropertySet();
		var psOutputs  		= TheApplication().NewPropertySet();
//		var bsNMAssociate	= TheApplication().GetService(""RMS NM Number Association"");
		var bsNMAssoc		= TheApplication().GetService(""RMS NM Number Association"");
//1.1 below	
		var strErrCode      = """";
		var strErrMessage   = """";
//1.1 below		
		var AssocId = this.GetFieldValue(""Ass Id"");
		psInputs.SetProperty(""AssociationId"",AssocId);//pass the ROW_ID of the assoc master record
		psInputs.SetProperty(""Qty"",this.GetFieldValue(""Quantity""));
		psInputs.SetProperty(""RecSeq"",this.GetFieldValue(""Sequence""));

		bsNMAssoc.InvokeMethod(""UpdateQuantity"",psInputs,psOutputs);
//		bsNMAssociate.InvokeMethod(""UpdateQuantity"",psInputs,psOutputs);
		strErrCode      = psOutputs.GetProperty(""Error Code"");
		strErrMessage   = psOutputs.GetProperty(""Error Message"");
		
		var bcAssocMstr = this.ParentBusComp();	
//1.1 below		
		if(bcAssocMstr != null) 
		{
//			RefreshingBc(bcAssocMstr,AssocId)	
			bcAssocMstr.InvokeMethod(""RefreshRecord"");
			bcAssocMstr.InvokeMethod(""UpdateLinks""); 
		}
//1.1 below		
		psInputs = null;
		psOutputs = null;
//		bsNMAssociate = null;
		bsNMAssoc = null;
		bcAssocMstr	= null;	
//1.1 below		
//if any error returnerd by the BS, throw it now as last statement
		if("""" != strErrCode)
			TheApplication().RaiseErrorText(strErrCode + ""\n"" + strErrMessage);
//1.1 below		
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Block BusComp PreWrite Method				 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Block Code File            	                      *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By       Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	 1.0    MBT      Created       03/12/2003	  *
20060620         1.1    Prasad   Commented WriteRecord on this
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/

function BusComp_PreWriteRecord ()
{
	var bsNMScheme;
	var bcNumberScheme;
	var psInputs;
	var psOutputs;
	var strFieldName="""";
	var strErrVal;
	var strAbc;
	if(this.GetFieldValue(""Current Quantity"")>0)
		return (ContinueOperation);
	
	if(this.GetFieldValue(""Name"")=="""")
		strFieldName = TheApplication().InvokeMethod (""LookupValue"", ""NM_BLOCK_FIELD"", ""NAME"");
	else if(this.GetFieldValue(""Start String Number"")=="""")
		strFieldName = TheApplication().InvokeMethod (""LookupValue"", ""NM_BLOCK_FIELD"", ""START NUMBER"");
	else if(this.GetFieldValue(""End String Number"")=="""")
		strFieldName = TheApplication().InvokeMethod (""LookupValue"", ""NM_BLOCK_FIELD"", ""END NUMBER"");	
	

	if(strFieldName!=""""){
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC015"",strFieldName);
		TheApplication().RaiseErrorText(strErrVal);
	}
										
	bcNumberScheme  = this.ParentBusComp();
		
	psInputs        = TheApplication().NewPropertySet();
	psOutputs       = TheApplication().NewPropertySet();

//------------------------------------------------------------------------
// Passing the parameters of starting and ending numbers to the business 
// service to check for overlapping of numbers in a block.
//------------------------------------------------------------------------
								
	bsNMScheme = TheApplication().GetService(""RMS NM Number Scheme"");
	psInputs.SetProperty(""Name"",this.GetFieldValue(""Name""));
	psInputs.SetProperty(""Object Id"",bcNumberScheme.GetFieldValue(""Id""));
	psInputs.SetProperty(""Start Number"",this.GetFieldValue(""Start String Number""));
	psInputs.SetProperty(""End Number"",this.GetFieldValue(""End String Number""));
	psInputs.SetProperty(""Recieved Date"",this.GetFieldValue(""Received date""));
	psInputs.SetProperty(""BlkId"",this.GetFieldValue(""Id""));	
		
	bsNMScheme.InvokeMethod(""Validate Block"",psInputs,psOutputs);
										
	this.SetFieldValue(""Start String Number"",psOutputs.GetProperty(""Start String Number""));
	this.SetFieldValue(""End String Number"",psOutputs.GetProperty(""End String Number""));		
	this.SetFieldValue(""Start Number"",psOutputs.GetProperty(""Start Number""));		
	strAbc = psOutputs.GetProperty(""End Number"");
	this.SetFieldValue(""End Number"",psOutputs.GetProperty(""End Number""));		

//1.1 below
//	this.WriteRecord();
//1.1 above	
	bcNumberScheme = null;

//1.2 below
	psInputs = null;
	psOutputs = null;
	bsNMScheme = null;
//1.2 above	
					
	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Block BusComp Write Method				 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Block Code File            	                      *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 13/05/2004 	 1.0   		   MBT					   	Created       13/05/2004	  *
**************************************************************************************/

function BusComp_WriteRecord (){

	var bsNMScheme;
	
	var bcNumberScheme;

	var psInputs;
	var psOutputs;
	
	var strFieldName="""";
	var strErrVal;
	var intTotalCount;
	
	var strStart;
	var strEnd;
	
										
	bcNumberScheme  = this.ParentBusComp();
		
		
	strStart = this.GetFieldValue(""Start Number"");
	strEnd = this.GetFieldValue(""End Number"");	

	
	intTotalCount= GetTotalCount(bcNumberScheme.GetFieldValue(""Id""),strStart,strEnd);
					
	this.SetFieldValue(""Total Count"",intTotalCount);
	this.WriteRecord();
	
	bcNumberScheme = null;					
	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : Get Total Count Function									 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : Calculates the total count of numbers that can be generated		  *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 13/05/2004 	 1.0   		   MBT					   	Created       13/05/2004	  *
**************************************************************************************/

function GetTotalCount(strSchemeId,intStartNumber,intEndNumber){

	
	var boNumberScheme;
	var bcSchemeLevel;
	var strSearchExp;
	var strLevelType;
	var blnIsRecord;
	var strMaxLen = """";
	var intMaxLen;
	var intLen;
	var intBNValue;
	var intTotalCount;

	
	boNumberScheme = TheApplication().GetBusObject(""RMS NM Number Scheme"");
	bcSchemeLevel = boNumberScheme.GetBusComp(""RMS NM Scheme Level"");
	
	strLevelType =TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""BATCH COUNTER"");
	strSearchExp = ""[Scheme Id] ='"" + strSchemeId + ""' AND [Level Type] ='"" + strLevelType + ""'"";
		
	with(bcSchemeLevel){
		ActivateField(""Scheme Id"");
		ActivateField(""Length"");
		ActivateField(""Level Type"");
		ActivateField(""Value"");
		ClearToQuery();
		SetSearchExpr(strSearchExp);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}	
			
//---------------------------------------------------------------------
// If Batch Counter exists then calculate the total count accordingly.
//---------------------------------------------------------------------

	if(blnIsRecord){
		intLen = bcSchemeLevel.GetFieldValue(""Length"");
		intBNValue = bcSchemeLevel.GetFieldValue(""Value"");
			
		while(intLen){
			strMaxLen = strMaxLen +""9"";
	    	intLen--;			
		}
			
		intMaxLen = ToInteger(strMaxLen);
					
		intTotalCount = ((intMaxLen - intBNValue) + 1) * ((intEndNumber - intStartNumber) + 1);
	}
	else{
			
		intTotalCount = intEndNumber - intStartNumber + 1;
		
	}
			
	boNumberScheme = null;
	bcSchemeLevel = null;	
	return(intTotalCount);		
		
}
"/**************************************************************************************
* Name          : RMS NM Number Deployment Detail BusComp Invoke Method			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Deployment Detail Code File            	          *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By       Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/05/2004 	 1.0   	MBT		 Created       28/05/2004	  *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/

function BusComp_InvokeMethod (MethodName){

	var psInput;
	var psOutput;

	var bsNMTransfer;
	var bsBCRefresh;

	if (MethodName == ""UpdateNumbers""){	
		

		bsNMTransfer = TheApplication().GetService(""RMS NM Number Deployment Update Numbers"");
		
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Redeploy Id""));
		psInput.SetProperty(""Current Status"",this.GetFieldValue(""Current Status""));
		psInput.SetProperty(""Scheme Id"",this.GetFieldValue(""Scheme Id""));
		psInput.SetProperty(""Number"",this.GetFieldValue(""Number String""));
		
		bsNMTransfer.InvokeMethod(""UpdateNumbers"",psInput,psOutput);
		
		this.InvokeMethod(""RefreshRecord"");

		return(CancelOperation);
	}	
//1.1 below
	psInput = null;
	psOutput = null;
	bsNMTransfer = null;
//1.1 above
	return(ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Enquiry PreSetFieldValue Method.					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Enquiry Code File.                                   *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT						   	Created      14/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
20060720       | 1.2   |Kalyana| Commented entire code because it  is  not required
**************************************************************************************/

function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
//below 1.2	
/*var bsNMEnquiry;
	var psInputs;
	var psOutputs;
	if(FieldName == ""Available Date""){
		if(this.GetUserProperty(""SuppressScript"") != ""Y"") {
			psInputs   = TheApplication().NewPropertySet();
			psOutputs  = TheApplication().NewPropertySet();
		
			psInputs.SetProperty(""Scheme Id"",this.GetFieldValue(""Scheme Id""));
			psInputs.SetProperty(""Quarantine Date"",this.GetFieldValue(""Quarantine Date""));
			psInputs.SetProperty(""Available Date"",FieldValue);
			
			psInputs.SetProperty(""TerminationDismantle"",this.GetFieldValue(""Disconnect Type""));
			
			if(this.GetFieldValue(""Available Date"") != """"){							
				bsNMEnquiry = TheApplication().GetService(""RMS NM Number Enquiry"");
				bsNMEnquiry.InvokeMethod(""Available Date"",psInputs,psOutputs);
			}
		}
	}
//1.1 below
	psInputs = null;
	psOutputs = null;
	bsNMEnquiry = null;
//1.1 above*/
//above 1.2
	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Enquiry PreSetFieldValue Method.					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Enquiry Code File.                                   *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT						   	Created      14/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
20060720       | 1.2   |Kalyana| Commented entire code because it  is  not required
**************************************************************************************/

function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
//below 1.2	
/*var bsNMEnquiry;
	var psInputs;
	var psOutputs;
	if(FieldName == ""Available Date""){
		if(this.GetUserProperty(""SuppressScript"") != ""Y"") {
			psInputs   = TheApplication().NewPropertySet();
			psOutputs  = TheApplication().NewPropertySet();
		
			psInputs.SetProperty(""Scheme Id"",this.GetFieldValue(""Scheme Id""));
			psInputs.SetProperty(""Quarantine Date"",this.GetFieldValue(""Quarantine Date""));
			psInputs.SetProperty(""Available Date"",FieldValue);
			
			psInputs.SetProperty(""TerminationDismantle"",this.GetFieldValue(""Disconnect Type""));
			
			if(this.GetFieldValue(""Available Date"") != """"){							
				bsNMEnquiry = TheApplication().GetService(""RMS NM Number Enquiry"");
				bsNMEnquiry.InvokeMethod(""Available Date"",psInputs,psOutputs);
			}
		}
	}
//1.1 below
	psInputs = null;
	psOutputs = null;
	bsNMEnquiry = null;
//1.1 above*/
//above 1.2
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{

}
"/**************************************************************************************
* Name          : RMS NM Number Enquiry Interface BusComp PreQuery Method	 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : URMS NM Number Enquiry Interface	    		                          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 05/26/2005  	2.0   			MBT			   			Created      05/26/2005       *
**************************************************************************************/

function BusComp_PreQuery ()
{
	var mdtSysDate;
	var mdtSysDateObj;
	var mdtModSysDt;
	var mSysPrefMin;
	
//----------------------------------------------------------
//Accesing the blocking period set in the profile attribute.
//----------------------------------------------------------

	var mboSystemReference = TheApplication().GetBusObject(""System Preferences"");
	var mbcSystemReference = mboSystemReference.GetBusComp(""System Preferences"");
	
	with(mbcSystemReference) {
		ActivateField(""Value"");
		ClearToQuery();
		SetSearchSpec(""Name"",""RMS_BLOCKINGPERIOD"");
		ExecuteQuery(ForwardOnly);
		if(FirstRecord())
			mSysPrefMin = GetFieldValue(""Value"");
	}

	
	mdtSysDate    = Clib.time();
	mdtSysDateObj = Date.fromSystem(mdtSysDate);
	mdtSysDateObj.setTime(mdtSysDateObj.getTime());
	
	mdtSysDateObj.setMinutes(mdtSysDateObj.getMinutes() - mSysPrefMin);
	mdtModSysDt = DateToString(mdtSysDateObj);
	
	var mstrOrgId = TheApplication().GetProfileAttr(""Organization Id"");
	var mstrCommonPool = TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_TYPE"", ""Common Pool"");
	
	this.SetSearchSpec(""Record Blocking Date"", ""< \""""+mdtModSysDt+""\"" OR [Record Blocking Date] = ''"");
	this.SetSearchSpec(""Allocated To"",""= \""""+mstrOrgId+""\"" OR [Partner Type] = \""""+mstrCommonPool+"""");

// =========================== COMMENTED FOR FUTURE USE Ver 2.0 =============================/

/*(	if(this.GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"") 
		&&
	   this.GetFieldValue(""Special Category Id"") !=""""
	){
		var boNMScheme = TheApplication().GetBusObject();
		var bcNMScheme = boNMScheme.GetBusComp(""RMS NM Number Scheme"");
		var bcNMSpecCat = boNMScheme.GetBusComp(""RMS NM Scheme Special Category"");
		var bcNMSchPosition = boNMScheme.GetBusComp(""RMS Special Category Position"");  
		
		with(bcNMScheme){
			ClearToQuery();
			SetSearchSpec(""Id"",this.GetFieldValue(""Scheme Id""));		
			ExecuteQuery();
		}
		with(bcNMSpecCat){
			ClearToQuery();
			SetSearchSpec(""Id"",this.GetFieldValue(""Special Category Id""));		
			ExecuteQuery();
		}
		with(bcNMSchPosition){
			ClearToQuery()
			SetSearchSpec(""Id"",TheApplication().GetProfileAttr(""Primary Position Id""));
			ExecuteQuery();
			if(!FirstRecord())
				this.SetSearchSpec(""Id"",""<>""+this.GetFieldValue(""Id"")+"""");				
		}
	}*/
	mbcSystemReference = null;
	mboSystemReference = null;
	

	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : NM Number Reservation DateToString  Method		 	              * 
* Author        : Mahindra British Telecom                                            *
* Description   : DateToString Code File                      				          *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003	1.0   		Mahindra British Telecom   	Created       30/12/2003      *
**************************************************************************************/

//-------------------------------------------------------------------------------------
//Gets the 'Date','Month','Hours','Minutes','Second' and appends them to a string.
//-------------------------------------------------------------------------------------

function DateToString (intCDate)
{
	var dtDatum = ((intCDate.getMonth() + 1) + ""/"" + intCDate.getDate() + ""/"" + intCDate.getFullYear()
	+ "" "" + intCDate.getHours() + "":"" + intCDate.getMinutes()+ "":"" + intCDate.getSeconds());
	return dtDatum
}
"/**************************************************************************************
* Name          : RMS NM Number Enquiry PreSetFieldValue Method.					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Enquiry Code File.                                   *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   	MBT      Created      14/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	var bsNMEnquiry;
	var psInputs;
	var psOutputs;
	
	if(FieldName == ""Available Date""){
		if(this.GetUserProperty(""SuppressScript"") != ""Y"") {
			psInputs   = TheApplication().NewPropertySet();
			psOutputs  = TheApplication().NewPropertySet();
		
			psInputs.SetProperty(""Scheme Id"",this.GetFieldValue(""Scheme Id""));
			psInputs.SetProperty(""Quarantine Date"",this.GetFieldValue(""Quarantine Date""));
			psInputs.SetProperty(""Available Date"",FieldValue);
			
			psInputs.SetProperty(""TerminationDismantle"",this.GetFieldValue(""Disconnect Type""));
			
			if(this.GetFieldValue(""Available Date"") != """"){							
				bsNMEnquiry = TheApplication().GetService(""RMS NM Number Enquiry"");
				bsNMEnquiry.InvokeMethod(""Available Date"",psInputs,psOutputs);
			}
		}
	}
//1.1 below
	psInputs = null;
	psOutputs = null; 
	bsNMEnquiry = null;
//1.1 above
	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Format BusComp Invoke Method					 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Format Code File            	                      *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/05/2004 	 1.0   		MBT						   	Created       27/05/2004	  *
**************************************************************************************/

function BusComp_InvokeMethod (MethodName){

	var psInput;
	var psOutput;

	var bsValidateNumberFormat;
	var bsBCRefresh;

	if (MethodName == ""ValidateFormat""){	
		
		bsBCRefresh = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
		
		bsValidateNumberFormat = TheApplication().GetService(""RMS NM Number Format"");
	
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Type Id""));
		bsValidateNumberFormat.InvokeMethod(""CheckFormat"",psInput,psOutput);

		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();		
		
		psInput.SetProperty(""Business Component Name"",""RMS NM Number Format"");
		psInput.SetProperty(""Business Object Name"",""RMS NM Number Type"");
		bsBCRefresh.InvokeMethod(""Refresh Business Component"",psInput,psOutput);

		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();		

		
		psInput.SetProperty(""Business Component Name"",""RMS NM Number Type"");
		psInput.SetProperty(""Business Object Name"",""RMS NM Number Type"");
		bsBCRefresh.InvokeMethod(""Refresh Business Component"",psInput,psOutput);
		
		psInput 				= null;
		psOutput 				= null;
		bsValidateNumberFormat 	= null;
		bsBCRefresh				= null;
		return(CancelOperation);
	}	
	
	return(ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Generation BusComp PreInvoke Method				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation Code File            	                  *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
* 06/05/2005 	 2.0   	MBT		 Kadali Srinivas       			  *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed, needed some re-organization
**************************************************************************************/

function BusComp_PreInvokeMethod (MethodName)
{
	var psInput;
	var psOutput;
	var bsNumGen;
	var	intObjectId;
	var intRetCode = ContinueOperation;

if (MethodName == ""GenerateNumbers"")
	{	
		this.WriteRecord();
//		this.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));

//----GB 07/06/2006---------------------------------------------------------------------------
		var boSystemPref 	= TheApplication().GetBusObject(""System Preferences""); 		
		var bcSystemPref 	= boSystemPref.GetBusComp(""System Preferences"");
		var strSearchStr = ""[Name]='RMS_GENERATE_SYNC' AND [Value] ='Y'"";
		bcSystemPref.ClearToQuery();
		bcSystemPref.SetSearchExpr(strSearchStr);
		bcSystemPref.ExecuteQuery(ForwardOnly);
		if(bcSystemPref.FirstRecord())
		{
				this.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
				this.WriteRecord();

				psInput     = TheApplication().NewPropertySet();
				psOutput    = TheApplication().NewPropertySet();
				bsNumGen	= TheApplication().GetService(""Workflow Process Manager"");
				intObjectId = this.GetFieldValue(""Id"");
				psInput.SetProperty(""RowId"",intObjectId);
				psInput.SetProperty(""ProcessName"",""RMS NM Number Generation Sub Process"");
				//psInput.SetProperty(""ProcessName"",""RMS Test"");	
			    bsNumGen.InvokeMethod(""RunProcess"",psInput,psOutput);
				this.InvokeMethod(""RefreshRecord"");
				this.InvokeMethod(""UpdateLinks"");
		}
		else
		{
				this.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""SUBMITTED""));
				this.WriteRecord();
		}

//-------------------------------------------------------------------------------
		bcSystemPref = null;
		boSystemPref = null;
		intRetCode = CancelOperation; 
	}
	else if (MethodName == ""CancelGeneratedNumbers"")
	{		
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		bsNumGen = TheApplication().GetService(""RMS NM Number Generation"");
		intObjectId = this.GetFieldValue(""Id"");
		psInput.SetProperty(""Object Id"", intObjectId);
		bsNumGen.InvokeMethod(""CancelGeneratedNumbers"",psInput,psOutput);
		intRetCode = CancelOperation;
	}
else if(MethodName == ""Special_Numbers"")
	{
		psInput		= 	TheApplication().NewPropertySet();
		psOutput 	= 	TheApplication().NewPropertySet();
		bsNumGen 	= 	TheApplication().GetService(""RMS NM Number Generation"");

		intObjectId = 	this.GetFieldValue(""Id"");

		psInput.SetProperty(""Object Id"", intObjectId);
		bsNumGen.InvokeMethod(""Special_Numbers"",psInput,psOutput);
		intRetCode = CancelOperation;
	
	}
//1.1 below
	psInput = null;
	psOutput = null;
	bsNumGen = null;
	return intRetCode;
//1.1 above
}
"/**************************************************************************************
* Name          : RMS NM Number Generation BusComp PreWriteRecord Method         	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
* 22/01/2006    1.1         Kalyana             commented  code as per ES review#10
**************************************************************************************/

function BusComp_PreWriteRecord (){

	var psInputs;
	var psOutputs;
	var bsNMGenerate;

	psInputs  		= TheApplication().NewPropertySet();
	psOutputs  		= TheApplication().NewPropertySet();
	bsNMGenerate	= TheApplication().GetService(""RMS NM Number Generation"");
	
/*---------------------------------------------------------------------------------------
vesion 1.1  KT 22-06-06
---------------------------------------------------------------------------------------*/


	/*this.ActivateField(""Block Id"");
	this.ActivateField(""Scheme Id"");
	this.ActivateField(""Quantity Str"");
	this.ActivateField(""Start String Number"");
	this.ActivateField(""Block Starting String Number"");
	this.ActivateField(""End Number Str"");
	this.ActivateField(""Id"");
	this.ActivateField(""Block Starting Number"");
	this.ActivateField(""Block Ending Number"");
	this.ActivateField(""Checksum Required"");*/
// End of 	vesion 1.1
//-----------------------------------------------------
//Populating the end number while saving the record
//-----------------------------------------------------
	if(this.GetFieldValue(""Scheme Id"") != """" &&  this.GetFieldValue(""Block Id"") != """"){	
		if((this.GetFieldValue(""Start String Number"") != """") && (this.GetFieldValue(""End Number Str"") == """")){
			
			psInputs.SetProperty(""Block Id"",this.GetFieldValue(""Block Id""));
			psInputs.SetProperty(""Scheme Id"",this.GetFieldValue(""Scheme Id""));
			psInputs.SetProperty(""Quantity Str"",this.GetFieldValue(""Quantity Str""));
			psInputs.SetProperty(""Start String Number"",this.GetFieldValue(""Start String Number""));
			psInputs.SetProperty(""Block Starting String Number"",this.GetFieldValue(""Block Starting String Number""));
			psInputs.SetProperty(""End Number Str"",this.GetFieldValue(""End Number Str""));
			psInputs.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
			psInputs.SetProperty(""Block Start Num"",this.GetFieldValue(""Block Starting Number""));
			psInputs.SetProperty(""Block End Num"",this.GetFieldValue(""Block Ending Number""));

			bsNMGenerate.InvokeMethod(""ValidateRecord"",psInputs,psOutputs);
			
			this.SetFieldValue(""Start Number"",ToInteger(this.GetFieldValue(""Start String Number"")));
			this.SetFieldValue(""Start String Number"",psOutputs.GetProperty(""Start String Number""));
			this.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));
			this.SetFieldValue(""Quantity Str"",psOutputs.GetProperty(""Quantity Str""));
			this.SetFieldValue(""End Number Str"",psOutputs.GetProperty(""End Number Str""));
			this.SetFieldValue(""End Number"",ToInteger(psOutputs.GetProperty(""End Number Str"")));
			this.SetFieldValue(""Checksum Required"",this.GetFieldValue(""Checksum Required""));			
			
		}
	}	
	
	psInputs 	 = null;
	psOutputs	 = null;
	bsNMGenerate = null;
	
	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Inventory Maintenance BusComp Invoke Method	          * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Inventory Maintenance Code File            	          *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/05/2004 	 1.0   	MBT		 Created       28/05/2004	  *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function BusComp_InvokeMethod (MethodName)
{
	if (MethodName == ""Change Inventory"")
	{	
		var psInput;
		var psOutput;
		var bsNumInv;
		var bsBCRefresh;
		bsNumInv = TheApplication().GetService(""RMS NM Number Inventory"");
//		var temp1= this.GetFieldValue(""Scheme Id"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
		psInput.SetProperty(""FromStatus"",this.GetFieldValue(""From Status""));
		psInput.SetProperty(""SchemeId"",this.GetFieldValue(""Scheme Id""));
		psInput.SetProperty(""Price"",this.GetFieldValue(""From Price""));
		psInput.SetProperty(""Type"",this.GetFieldValue(""From Type""));
//		psInput.SetProperty(""Class"",this.GetFieldValue(""From Class""));
		psInput.SetProperty(""StartNumber"",this.GetFieldValue(""Start Number""));
		psInput.SetProperty(""HLRId"",this.GetFieldValue(""HLR Id""));
		psInput.SetProperty(""Quantity"",this.GetFieldValue(""Quantity""));
		psInput.SetProperty(""EndNumber"",this.GetFieldValue(""End Number""));
		
		bsNumInv.InvokeMethod(""ChangeInventory"",psInput,psOutput);
		bsBCRefresh = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();		
		psInput.SetProperty(""Business Component Name"",""RMS NM Number Inventory Maintenance"");
		psInput.SetProperty(""Business Object Name"",""RMS NM Number Inventory Maintenance"");
		bsBCRefresh.InvokeMethod(""Refresh Business Component"",psInput,psOutput);
//1.1 below
		bsBCRefresh = null;
		bsNumInv = null;
		psInput = null;
		psOutput = null; 
//1.1 above
		return(CancelOperation);
	}
	else
		return(ContinueOperation);
}
"/**************************************************************************************
* Name          : NM Number Inventory Maintenance Pre WriteRecord Method			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Inventory Maintenance Code File            	                          *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     			Comments     Reviewed Date        *
***************************************************************************************
*                                                                                     *
* 10/12/2003 	 1.0   		MBT   					Created       12/12/2003	      *
**************************************************************************************/

function BusComp_PreWriteRecord (){
		
	var psInputs;
	var psOutputs;
	var bsNMInventory;
	var strErrVal;
	
	psInputs  		= TheApplication().NewPropertySet();
	psOutputs  		= TheApplication().NewPropertySet();
	bsNMInventory	= TheApplication().GetService(""RMS NM Number Inventory"");
	
//------------------------------------------------------
// Populating the end number while saving the record.
//------------------------------------------------------

if((this.GetFieldValue(""Start Number String"") != """") && (this.GetFieldValue(""End Number String"") == """"))
	{
					
		psInputs.SetProperty(""Action"",this.GetFieldValue(""Action""));
 		psInputs.SetProperty(""FromStatus"",this.GetFieldValue(""From Status""));
 		psInputs.SetProperty(""SchemeId"",this.GetFieldValue(""Scheme Id""));
 		psInputs.SetProperty(""Price"",this.GetFieldValue(""From Price""));
 		psInputs.SetProperty(""Type"",this.GetFieldValue(""From Type""));
 		psInputs.SetProperty(""Quantity"",this.GetFieldValue(""Quantity""));
 		psInputs.SetProperty(""HLRId"",this.GetFieldValue(""HLR Id""));
 		psInputs.SetProperty(""StartNumber"",this.GetFieldValue(""Start Number""));
//		psInputs.SetProperty(""Class"",this.GetFieldValue(""From Class""));
//		psInputs.SetProperty(""From Inventory Format"",this.GetFieldValue(""From Inventory Format""));
//		psInputs.SetProperty(""To Inventory Format"",this.GetFieldValue(""To Inventory Format""));
				
		bsNMInventory.InvokeMethod(""PopulateEndNum"",psInputs,psOutputs);
		this.SetFieldValue(""End Number"",psOutputs.GetProperty(""EndNumber""));
		this.SetFieldValue(""End Number String"",psOutputs.GetProperty(""EndNumberString""));
		
		
	}
	
	psInputs 	= null;
	psOutputs	= null;
	bsNMInventory= null;
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName){

	if(FieldName == ""Reserved To""){
		if(this.GetFieldValue(""Reserved To"") == """")
			this.SetFieldValue(""Reservation End Date"","""");
	}		
}
function BusComp_PreWriteRecord ()
{
/*var bcSchme  = this.ParentBusComp();
var blnIsRecord = false;
this.ActivateField(""Scheme Id"");
var SchemeId = this.GetFieldValue(""Scheme Id"");
//Quarantine UOM
//Quarantine Period
var StrQuarantineEvent = this.GetFieldValue(""Quarantine Event"");
if(StrQuarantineEvent == TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Default""))
{

with(bcSchme)
{
InvokeMethod(""SetAdminMode"",""TRUE"");
SetViewMode(AllView);
ClearToQuery();
SetSearchSpec(""Id"",SchemeId);  
ExecuteQuery(ForwardOnly);
blnIsRecord = FirstRecord();
if(blnIsRecord)//must find a record
	{
	SetFieldValue(""Quarantine UOM"",this.GetFieldValue(""Quarantine UOM""));
	SetFieldValue(""Quarantine Period"",this.GetFieldValue(""Quarantine Period""));
	WriteRecord();
	}
InvokeMethod(""SetAdminMode"",""FALSE"");
}
}
bcSchme = null;*/
return (ContinueOperation);
}
function BusComp_WriteRecord ()
{
var bcSchme  = this.ParentBusComp();
var blnIsRecord = false;
this.ActivateField(""Scheme Id"");
var SchemeId = this.GetFieldValue(""Scheme Id"");
//Quarantine UOM
//Quarantine Period
var StrQuarantineEvent = this.GetFieldValue(""Quarantine Event"");
if(StrQuarantineEvent == TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Default""))
{
with(bcSchme)
{
ActivateField(""Quarantine UOM"");
ActivateField(""Quarantine Period"");
InvokeMethod(""SetAdminMode"",""TRUE"");
SetViewMode(AllView);
ClearToQuery();
SetSearchSpec(""Id"",SchemeId);  
ExecuteQuery(ForwardOnly);
blnIsRecord = FirstRecord();
if(blnIsRecord)//must find a record
	{
	SetFieldValue(""Quarantine UOM"",this.GetFieldValue(""Quarantine UOM""));
	SetFieldValue(""Quarantine Period"",this.GetFieldValue(""Quarantine Period""));
	WriteRecord();
	}
InvokeMethod(""SetAdminMode"",""FALSE"");
//refreshing record
ClearToQuery();
SetSearchSpec(""Id"",SchemeId);  
ExecuteQuery(ForwardOnly);
}
}
bcSchme = null;
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation BusComp Invoke Method				  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS SIM Order Code File            	                  			  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
* 31/05/2004 	 1.0    MBT		 Created       31/05/2004	  *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function BusComp_InvokeMethod (MethodName)
{
	var intRetCode = ContinueOperation;
	var psInput;
	var psOutput;
	var bsNumResrv;
	var bsBCRefresh;
	var bsNumResrvExp;
	bsBCRefresh = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
	bsNumResrv = TheApplication().GetService(""RMS NM Number Reservation"");
	if (MethodName == ""Reserve"")
	{	
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
		psInput.SetProperty(""Source"",TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""RMS""));
//below 1.1
		psInput.SetProperty(""CheckCancelReservation"",""Y"");
//above 1.1
		bsNumResrv.InvokeMethod(""Reserve"",psInput,psOutput);
//below 1.1
		var strErrVal = psOutput.GetProperty(""strErrVal"");
		if(strErrVal != """"){
			TheApplication().RaiseErrorText(strErrVal);
		}
//above 1.1
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Business Component Name"",""RMS NM Number Reservation"");
		psInput.SetProperty(""Business Object Name"",""RMS NM Number Reservation"");
		bsBCRefresh.InvokeMethod(""Refresh Business Component"",psInput,psOutput);
		intRetCode = CancelOperation;
	}
	else if (MethodName == ""CancelReservation"")
	{	
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
		psInput.SetProperty(""Source"",TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""RMS""));
//below 1.1
		psInput.SetProperty(""CheckCancelReservation"",""Y"");
//above 1.1
		bsNumResrv.InvokeMethod(""CancelReservation"",psInput,psOutput);
//below 1.1
		var strErrVal = psOutput.GetProperty(""strErrVal"");
		if(strErrVal != """"){
			TheApplication().RaiseErrorText(strErrVal);
		}
//above 1.1
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Business Component Name"",""RMS NM Number Reservation"");
		psInput.SetProperty(""Business Object Name"",""RMS NM Number Reservation"");
		bsBCRefresh.InvokeMethod(""Refresh Business Component"",psInput,psOutput);
		intRetCode = CancelOperation;
	}
	else if (MethodName == ""ReservedExport"")
	{		
		bsNumResrvExp = TheApplication().GetService(""RMS NM ReservedExport"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		
		psInput.SetProperty(""ReservationId"",this.GetFieldValue(""Id""));
		psInput.SetProperty(""FilePathName"",this.GetFieldValue(""Message""));
		bsNumResrvExp.InvokeMethod(""ExportNumbers"",psInput,psOutput);
		intRetCode = CancelOperation;
	}
//1.1 below
	bsBCRefresh = null;
	bsNumResrv = null;
	bsNumResrvExp = null;
	psInput = null;
	psOutput = null; 
	return intRetCode;
//1.1 above
}
function BusComp_NewRecord ()
{
	/*var blnIsRecord="""";
	var blnIsRecord1="""";
	var strReservedTo = this.GetFieldValue(""Reserved To"");
	var PtrBO = TheApplication().GetBusObject(""Channel Partner"");
	var PtrBC = PtrBO.GetBusComp(""Channel Partner"");
	var IntDivBO = TheApplication().GetBusObject(""Internal Division"");
	var IntDivBC = IntDivBO.GetBusComp(""Internal Division"");
		
	with(PtrBC){
	ActivateField(""CSN"");
	ActivateField(""Division"");
	ClearToQuery();
	SetSearchSpec(""Id"",strReservedTo);
	ExecuteQuery();
	blnIsRecord = FirstRecord();
	}//end with
	if(blnIsRecord){
	
		var strDivision = PtrBC.GetFieldValue(""Division"");
	
	
		with(IntDivBC){
		ActivateField(""Name"");
		ActivateField(""STC Grp Partner Code"");
		ActivateField(""STC Grp Partner Id"");
		ClearToQuery();
		SetSearchSpec(""Name"",strDivision);
		ExecuteQuery();
		blnIsRecord1 = FirstRecord();
		}//end with
		if(blnIsRecord1){
			var test=IntDivBC.GetFieldValue(""STC Grp Partner Id"");
			var test1=IntDivBC.GetFieldValue(""STC Grp Partner Code"");
			this.SetFieldValue(""ReservedFromCode"",IntDivBC.GetFieldValue(""STC Grp Partner Id""));
		}
	}*/
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation BusComp PreSetFieldValue Method		  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS SIM Order Code File            	                  			  *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/05/2004 	 1.0   		MBT						   	Created       31/05/2004	  *
**************************************************************************************/


function BusComp_PreSetFieldValue (FieldName, FieldValue)
{

	if(FieldName == ""Start Num String"") {
	 	if(this.GetFieldValue(""Operation"") == TheApplication().InvokeMethod(""LookupValue"",""NM_RESERVE_OPERATION"",""RESERVE"")) {
			this.SetUserProperty(""AllowReservedToPickMap"",""N"");
		}
	}
	
	//if((FieldName == ""Reserved To"") && (this.GetUserProperty(""AllowReservedToPickMap"") == ""N"")) {
	//		return (CancelOperation);
		
	//}
	
	if((FieldName == ""Dealer Name"") && (this.GetUserProperty(""AllowReservedToPickMap"") == ""N"")) {
			return (CancelOperation);
		
	}
	
	if((FieldName == ""Dealer Area Code"") && (this.GetUserProperty(""AllowReservedToPickMap"") == ""N"")) {
			return (CancelOperation);
		
	}	
	
	if((FieldName == ""ReservedFromCode"") && (this.GetUserProperty(""AllowReservedToPickMap"") == ""N"")) {
			this.SetUserProperty(""AllowReservedToPickMap"",""Y"");
			return (CancelOperation);
		
	}	
	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation BucComp PreWrite Method     		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Reservation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      28/12/2003       *
**************************************************************************************/

function BusComp_PreWriteRecord (){
	
	var psInputs;
	var psOutputs;
	var bsNMReserve;
	
	psInputs  		= TheApplication().NewPropertySet();
	psOutputs  		= TheApplication().NewPropertySet();
	bsNMReserve  	= TheApplication().GetService(""RMS NM Number Reservation"");
//-------------------------------------------------------------------------------------------
//Populating the end number while saving the record
//-------------------------------------------------------------------------------------------
	 	
	if((this.GetFieldValue(""Start Num String"") != """") && (this.GetFieldValue(""End Num String"") == """") && (this.GetFieldValue(""Reserved To"") != """") && this.GetUserProperty(""blnFromReservation"") != ""Y""){
	
		psInputs.SetProperty(""Block Id"",this.GetFieldValue(""Block Id""));
		psInputs.SetProperty(""Scheme Id"",this.GetFieldValue(""Scheme Id""));
		psInputs.SetProperty(""Is Sequence"",this.GetFieldValue(""Is Sequence""));
		psInputs.SetProperty(""Start Num"",this.GetFieldValue(""Start Num""));
		psInputs.SetProperty(""Quantity"",this.GetFieldValue(""Qty""));
		psInputs.SetProperty(""HLR ID"",this.GetFieldValue(""HLR Id""));
		psInputs.SetProperty(""Class"",this.GetFieldValue(""Class""));
		psInputs.SetProperty(""Special Category"",this.GetFieldValue(""Special Category""));
		psInputs.SetProperty(""End Num"",this.GetFieldValue(""End Num""));
		psInputs.SetProperty(""End Num String"",this.GetFieldValue(""End Num String""));
		psInputs.SetProperty(""Number Id"",this.GetFieldValue(""Number Id""));
		psInputs.SetProperty(""ReservedFromCode"",this.GetFieldValue(""ReservedFromCode""));
		psInputs.SetProperty(""Reserved To"",this.GetFieldValue(""Reserved To""));
		psInputs.SetProperty(""Operation"",this.GetFieldValue(""Operation""));
		psInputs.SetProperty(""HAppointment"",this.GetFieldValue(""HAppointment""));
		psInputs.SetProperty(""Source"",TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""RMS""));
			

		bsNMReserve.InvokeMethod(""Validate"",psInputs,psOutputs);
//below 1.1
		var strErrVal = psOutputs.GetProperty(""strErrVal"");
		if(strErrVal != """"){
			TheApplication().RaiseErrorText(strErrVal);
		}
//above 1.1
		this.SetFieldValue(""End Num"",psOutputs.GetProperty(""End Num""));
		this.SetFieldValue(""End Num String"",psOutputs.GetProperty(""End Num String""));
		this.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));
	}

	this.SetUserProperty(""blnFromAllocation"",""N"");
	psInputs 	= null;
	psOutputs	= null;
	bsNMReserve = null;
	
	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation BusComp Invoke Method				  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS SIM Order Code File            	                  			  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
* 31/05/2004 	 1.0    MBT		 Created       31/05/2004	  *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function BusComp_InvokeMethod (MethodName)
{
	/*var intRetCode = ContinueOperation;
	var psInput;
	var psOutput;
	var bsNumResrv;
	var bsBCRefresh;
	var bsNumResrvExp;
	bsBCRefresh = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
	bsNumResrv = TheApplication().GetService(""RMS NM Number Reservation"");
	if (MethodName == ""Reserve"")
	{	
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
		psInput.SetProperty(""Source"",TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""RMS""));
		bsNumResrv.InvokeMethod(""Reserve"",psInput,psOutput);
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Business Component Name"",""RMS NM Number Reservation"");
		psInput.SetProperty(""Business Object Name"",""RMS NM Number Reservation"");
		bsBCRefresh.InvokeMethod(""Refresh Business Component"",psInput,psOutput);
		intRetCode = CancelOperation;
	}
	else if (MethodName == ""CancelReservation"")
	{	
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
		psInput.SetProperty(""Source"",TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""RMS""));
		bsNumResrv.InvokeMethod(""CancelReservation"",psInput,psOutput);
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Business Component Name"",""RMS NM Number Reservation"");
		psInput.SetProperty(""Business Object Name"",""RMS NM Number Reservation"");
		bsBCRefresh.InvokeMethod(""Refresh Business Component"",psInput,psOutput);
		intRetCode = CancelOperation;
	}
	else if (MethodName == ""ReservedExport"")
	{		
		bsNumResrvExp = TheApplication().GetService(""RMS NM ReservedExport"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		
		psInput.SetProperty(""ReservationId"",this.GetFieldValue(""Id""));
		psInput.SetProperty(""FilePathName"",this.GetFieldValue(""Message""));
		bsNumResrvExp.InvokeMethod(""ExportNumbers"",psInput,psOutput);
		intRetCode = CancelOperation;
	}
//1.1 below
	bsBCRefresh = null;
	bsNumResrv = null;
	bsNumResrvExp = null;
	psInput = null;
	psOutput = null; 
	return intRetCode;
//1.1 above */
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation BusComp PreSetFieldValue Method		  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS SIM Order Code File            	                  			  *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/05/2004 	 1.0   		MBT						   	Created       31/05/2004	  *
**************************************************************************************/


function BusComp_PreSetFieldValue (FieldName, FieldValue)
{

	if(FieldName == ""Start Num String"") {
	 	if(this.GetFieldValue(""Operation"") == TheApplication().InvokeMethod(""LookupValue"",""NM_RESERVE_OPERATION"",""RESERVE"")) {
			this.SetUserProperty(""AllowReservedToPickMap"",""N"");
		}
	}
	
	//if((FieldName == ""Reserved To"") && (this.GetUserProperty(""AllowReservedToPickMap"") == ""N"")) {
	//		return (CancelOperation);
		
	//}
	
	if((FieldName == ""Dealer Name"") && (this.GetUserProperty(""AllowReservedToPickMap"") == ""N"")) {
			return (CancelOperation);
		
	}
	
	if((FieldName == ""Dealer Area Code"") && (this.GetUserProperty(""AllowReservedToPickMap"") == ""N"")) {
			return (CancelOperation);
		
	}	
	
	if((FieldName == ""ReservedFromCode"") && (this.GetUserProperty(""AllowReservedToPickMap"") == ""N"")) {
			this.SetUserProperty(""AllowReservedToPickMap"",""Y"");
			return (CancelOperation);
		
	}	
	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation BucComp PreWrite Method     		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Reservation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      28/12/2003       *
**************************************************************************************/

function BusComp_PreWriteRecord (){
	

	
	this.SetUserProperty(""blnFromAllocation"",""N"");
	
	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation For CSR BusComp Invoke Method			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS SIM Order Code File            	                  			  *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
* 04/06/2004 	 1.0   	MBT		 Created       04/06/2004	  *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function BusComp_InvokeMethod (MethodName)
{
	if (MethodName == ""Reserve"")
	{	
		var psInput;
		var psOutput;
		var bsNumResrv;
		var bsBCRefresh;
		var bsNumResrvExp;
		bsBCRefresh = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
		bsNumResrv = TheApplication().GetService(""RMS NM Number Reservation"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();	
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
		psInput.SetProperty(""Source"",TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""CSR""));
		bsNumResrv.InvokeMethod(""Reserve"",psInput,psOutput);
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Business Component Name"",""RMS NM Number Reservation For CSR"");
		psInput.SetProperty(""Business Object Name"",""RMS NM Number Reservation For CSR"");
		bsBCRefresh.InvokeMethod(""Refresh Business Component"",psInput,psOutput);
		return(CancelOperation);
//1.1 below
		bsBCRefresh = null;
		bsNumResrv = null;
		psInput = null;
		psOutput = null;
//1.1 above
	}
	else
		return(ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation BucComp PreWrite Method     		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Reservation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/11/2003 	1.0   		MBT						   	Created      28/11/2003       *
**************************************************************************************/

function BusComp_PreWriteRecord ()
{
	
	
	var psInputs;
	var psOutputs;
	var bsNMReserve;
	
	psInputs  		= TheApplication().NewPropertySet();
	psOutputs  		= TheApplication().NewPropertySet();
	bsNMReserve  	= TheApplication().GetService(""RMS NM Number Reservation"");
//-------------------------------------------------------------------------------------------
//Populating the end number while saving the record
//-------------------------------------------------------------------------------------------
	 	
	if((this.GetFieldValue(""Start Num String"") != """") && (this.GetFieldValue(""End Number String"") == """") && this.GetUserProperty(""blnFromReservation"") != ""Y""){
		psInputs.SetProperty(""Block Id"",this.GetFieldValue(""Block Id""));
		psInputs.SetProperty(""Scheme Id"",this.GetFieldValue(""Scheme Id""));
		psInputs.SetProperty(""Is Sequence"",this.GetFieldValue(""Is Sequence""));
		psInputs.SetProperty(""Start Num"",this.GetFieldValue(""Start Num""));
		psInputs.SetProperty(""Quantity"",this.GetFieldValue(""Qty""));
		psInputs.SetProperty(""HLR ID"",this.GetFieldValue(""HLR Id""));
		psInputs.SetProperty(""Class"",this.GetFieldValue(""Class""));
		psInputs.SetProperty(""Special Category"",this.GetFieldValue(""Special Category""));
		psInputs.SetProperty(""End Num"",this.GetFieldValue(""End Num""));
		psInputs.SetProperty(""End Num String"",this.GetFieldValue(""End Number String""));
		psInputs.SetProperty(""Number Id"",this.GetFieldValue(""Number Id""));
		psInputs.SetProperty(""Reserved To"",this.GetFieldValue(""Reserved To""));
		psInputs.SetProperty(""Operation"",this.GetFieldValue(""Operation""));
		psInputs.SetProperty(""HAppointment"",this.GetFieldValue(""HAppointment""));
		psInputs.SetProperty(""Source"",TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""CSR""));
		
		bsNMReserve.InvokeMethod(""Validate"",psInputs,psOutputs);
	
		this.SetFieldValue(""End Num"",psOutputs.GetProperty(""End Num""));
		this.SetFieldValue(""End Number String"",psOutputs.GetProperty(""End Num String""));
		this.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));
		this.SetFieldValue(""Qty"",psOutputs.GetProperty(""Quantity""));
	}

	this.SetUserProperty(""blnFromReservation"",""N"");
	psInputs 	= null;
	psOutputs	= null;
	bsNMReserve = null;
	
	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Scheme BusComp Invoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Scheme Code File            	                      *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/05/2004 	 1.0   	MBT		 Created       28/05/2004	  *
20060710       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function BusComp_InvokeMethod (MethodName)
{
	var psInput;
	var psOutput;
	var bsNumScheme;
	var bsBCRefresh;
	if (MethodName == ""ReleaseScheme"")
	{	
		bsNumScheme = TheApplication().GetService(""RMS NM Number Scheme"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
		bsNumScheme.InvokeMethod(""ReleaseScheme"",psInput,psOutput);
		bsBCRefresh = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();		
		psInput.SetProperty(""Business Component Name"",""RMS NM Number Scheme"");
		psInput.SetProperty(""Business Object Name"",""RMS NM Number Scheme"");
		bsBCRefresh.InvokeMethod(""Refresh Business Component"",psInput,psOutput);
		return(CancelOperation);
	}	
	else
		return(ContinueOperation);
//1.1 below
	psInput = null;
	psOutput = null;
	bsBCRefresh = null;
	bsNumScheme = null;
//1.1 above
}
"/**************************************************************************************
* Name          : RMS NM Number Scheme BusComp PreSetFieldValue Method				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Scheme Code File                      				  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    	Version  By         Comments      Reviewed Date
***************************************************************************************
02/12/2003   1.0     MBT        Created       02/12/2003      
20060622     1.1     Arun J     SiebelES#39   Moved the declarations under if condition   
20060710   | 1.2  | Prasad |    Siebel ES SCR1, Objects Destroyed
****************************************************************************************/
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	if(FieldName == ""Type"")
	{
		var bsScheme = TheApplication().GetService(""RMS NM Number Scheme"");
	    var psInput = TheApplication().NewPropertySet();
	    var psOutput = TheApplication().NewPropertySet();
		var boNumberType = TheApplication().GetBusObject(""RMS NM Number Type"");
		var bcNumberSubType = boNumberType.GetBusComp(""RMS NM Number Subtype"");
	    var bcNumberFormat = boNumberType.GetBusComp(""RMS NM Number Format"");
		with(bcNumberSubType) 
		{
			ActivateField(""Type Id"");
			ActivateField(""Subtype"");
			ClearToQuery();
			SetSearchSpec(""Type Id"",this.GetFieldValue(""Type Id""));
			ExecuteQuery();
		}
//----------------------------------------------------------------------
// Set the flag to true if subtype exists for the selected number type.	
// If subtype exists and isnt selected then make it a required field.
//----------------------------------------------------------------------	
		if(!bcNumberSubType.FirstRecord()) 
			this.SetFieldValue(""Subtype Flg"",""Y"");
		else
			this.SetFieldValue(""Subtype Flg"",""N"");
			
		with(bcNumberFormat)
		{
			ActivateField(""Level Type"");
			ActivateField(""Type Id"");
			ClearToQuery();
			SetSearchSpec(""Type Id"",this.GetFieldValue(""Type Id""));
			SetSearchSpec(""Level Type"",TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""HLR""));
			ExecuteQuery();
			FirstRecord();
		}
//-----------------------------------------------------------------------------
// Set the flag to true if HLR level type exists for the selected number type.
// If HLR level type exists and isnt selected make it a required field.
//-----------------------------------------------------------------------------				
		if(!bcNumberFormat.FirstRecord()) 
			this.SetFieldValue(""HLR Flg"",""Y"");
		else
			this.SetFieldValue(""HLR Flg"",""N"");
//--------------------------------------------------
//Delete the Scheme Format when the Type is changed.
//--------------------------------------------------
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
		bsScheme.InvokeMethod(""CheckPreset"",psInput,psOutput);
		boNumberType = null;
		bcNumberSubType = null;
		bcNumberFormat = null;
//1.2 below
		psInput = null;
		psOutput = null;
		bsScheme = null;
//1.2 above
	}
	else
		return (ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Scheme BusComp PreWriteRecord Method				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Scheme Code File                      				  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/01/2004	1.0   		  MBT					   	Created       02/01/2004      *
* 31/03/2005    1.1		      MBT						Gautam(modified)			  *	
**************************************************************************************/

function BusComp_PreWriteRecord (){

// Commented for Future Use 
/*v1.1	var intMinTerQuaPrd;
	var intMaxTerQuaPrd;
	var intMinTerQuaUOM;
	var intMaxTerQuaUOM;

	var intMinDisQuaPrd;
	var intMaxDisQuaPrd;
	var intMinDisQuaUOM;
	var intMaxDisQuaUOM;

	var intMinTerQuaDays;
	var intMaxTerQuaDays;
	var intMinDisQuaDays;
	var intMaxDisQuaDays;

	var	strErrVal;
	var strErrMsg;
	
	intMinTerQuaPrd = this.GetFieldValue(""Min. Ter. Quarantine Period"");
	intMinTerQuaUOM = this.GetFieldValue(""Min. Ter. Quarantine UOM"");
	
	intMaxTerQuaPrd = this.GetFieldValue(""Max. Ter. Quarantine Period"");
    intMaxTerQuaUOM	= this.GetFieldValue(""Max. Ter. Quarantine UOM"");

	intMinDisQuaPrd = this.GetFieldValue(""Min. Dis. Quarantine Period"");
	intMinDisQuaUOM	= this.GetFieldValue(""Min. Dis. Quarantine UOM"");
		
	intMaxDisQuaPrd = this.GetFieldValue(""Max. Dis. Quarantine Period"");
    intMaxDisQuaUOM = this.GetFieldValue(""Max. Dis. Qurantine UOM"");
	
	if(intMinTerQuaPrd !="""" && intMaxTerQuaPrd !=""""){		
		intMinTerQuaDays = CalDays(ToInteger(intMinTerQuaPrd),intMinTerQuaUOM);
		intMaxTerQuaDays = CalDays(ToInteger(intMaxTerQuaPrd),intMaxTerQuaUOM);
  		
  		if(intMinTerQuaDays >= intMaxTerQuaDays){
  			strErrMsg = TheApplication().InvokeMethod(""LookupValue"",""NM_TERMDISMTL"",""TERMINATION"");
  			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC016"",strErrMsg,strErrMsg);
     		TheApplication().RaiseErrorText(strErrVal);
			return(CancelOperation);
		}

	}

	if(intMinDisQuaPrd !="""" && intMaxDisQuaPrd !=""""){
		intMinDisQuaDays = CalDays(ToInteger(intMinDisQuaPrd),intMinDisQuaUOM);
		intMaxDisQuaDays = CalDays(ToInteger(intMaxDisQuaPrd),intMaxDisQuaUOM);
   
 	 	if(intMinDisQuaDays >= intMaxDisQuaDays){
  			strErrMsg = TheApplication().InvokeMethod(""LookupValue"",""NM_TERMDISMTL"",""DISMANTLE"");
  	  		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC016"",strErrMsg,strErrMsg);
    	 	TheApplication().RaiseErrorText(strErrVal);
			return(CancelOperation);
		}
	} v1.1*/

	return (ContinueOperation);
}
"/*************************************************************************************** 
* Name 			: RMS NM Number Scheme Calculate Days Function.                       * 
* Author 		: Mahindra British Telecom                                             * 
* Description 	: Calculates the Number of Days.                                       * 
* Amendment Details 																   *
* ************************************************************************************** 
* Date 			Version 			AmendedBy 		Comments 			Reviewed Date  *
* ************************************************************************************** 
* 02/01/2004 	1.0 					MBT			 Created 			02/01/2004     *
* *************************************************************************************/ 

function CalDays(intPeriod,strUOM){

    var intQuarantineDays;

	var strDays   = TheApplication().InvokeMethod (""LookupValue"", ""NM_QUARANTINE_UOM"", ""DAYS"");
	var strMonths = TheApplication().InvokeMethod (""LookupValue"", ""NM_QUARANTINE_UOM"", ""MONTHS"");
	var strWeeks  = TheApplication().InvokeMethod (""LookupValue"", ""NM_QUARANTINE_UOM"", ""WEEKS"");
	var strYears  = TheApplication().InvokeMethod (""LookupValue"", ""NM_QUARANTINE_UOM"", ""YEARS"");
		
	switch (strUOM){			
			
		case strDays: 
			intQuarantineDays = intPeriod;
			break;
				
		case strMonths: 
			intQuarantineDays = intPeriod * 30;  
			break;
	
		case strWeeks: 
			intQuarantineDays = intPeriod * 7;
			break;
				
		case strYears: 
			intQuarantineDays = intPeriod * 365;
			break;
	}

	return(intQuarantineDays);

}
"/**************************************************************************************
* Name          : RMS NM Number Enquiry PreSetFieldValue Method.					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Enquiry Code File.                                   *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT						   	Created      14/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
20060720       | 1.2   |Kalyana| Commented entire code because it  is  not required
**************************************************************************************/

function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
//below 1.2	
/*var bsNMEnquiry;
	var psInputs;
	var psOutputs;
	if(FieldName == ""Available Date""){
		if(this.GetUserProperty(""SuppressScript"") != ""Y"") {
			psInputs   = TheApplication().NewPropertySet();
			psOutputs  = TheApplication().NewPropertySet();
		
			psInputs.SetProperty(""Scheme Id"",this.GetFieldValue(""Scheme Id""));
			psInputs.SetProperty(""Quarantine Date"",this.GetFieldValue(""Quarantine Date""));
			psInputs.SetProperty(""Available Date"",FieldValue);
			
			psInputs.SetProperty(""TerminationDismantle"",this.GetFieldValue(""Disconnect Type""));
			
			if(this.GetFieldValue(""Available Date"") != """"){							
				bsNMEnquiry = TheApplication().GetService(""RMS NM Number Enquiry"");
				bsNMEnquiry.InvokeMethod(""Available Date"",psInputs,psOutputs);
			}
		}
	}
//1.1 below
	psInputs = null;
	psOutputs = null;
	bsNMEnquiry = null;
//1.1 above*/
//above 1.2
	return (ContinueOperation);
}
function BusComp_PreQuery ()
{
	var boActiveBO;
	var bcActiveBC;
	var strSearchSpec = """";
	try
	{
		boActiveBO = TheApplication().ActiveBusObject();
		if(boActiveBO != null)
		{
			if(boActiveBO.Name() == ""RMS NM Number Reservation"") 
			{
				bcActiveBC = boActiveBO.GetBusComp(""RMS NM Number Reservation"");
				var strReservedTo = """";
			    var strOperation = bcActiveBC.GetFieldValue(""Operation"");
			    var strCancelReserve = """";
				
				strReservedTo = bcActiveBC.GetFieldValue(""Reserved To"");
				//strReserve = TheApplication().InvokeMethod(""LookupValue"",""NM_RESERVE_OPERATION"",""RESERVE"");
				strCancelReserve = TheApplication().InvokeMethod(""LookupValue"",""NM_RESERVE_OPERATION"",""CANCEL RESERVATION"");
				if(strOperation == strCancelReserve) 
				{
					strSearchSpec = this.GetSearchExpr();
					if(strSearchSpec != """")	{
						//strSearchSpec = ""( "" + strSearchSpec + "") AND [Reserved To] = '"" + strReservedTo + ""'"";
						//this.SetSearchSpec(""STC-Partner Type"",strPartnerType);
						this.SetSearchExpr(strSearchSpec);
					}
					else{
						this.SetSearchSpec(""Reserved To"",strReservedTo);
					}
					
		 		}
		   	 }
		  } 
	
	
	}
	 catch(e) 
	 {
		TheApplication().RaiseErrorText(e.toString());
	 } 
	finally
	{
		bcActiveBC = null;	
		boActiveBO = null;
	}
	return (ContinueOperation);

}
function BusComp_PreWriteRecord ()
{
	var strMask =	this.GetFieldValue(""Mask"");
	var intCount =	0;
	var strErrVal;

	for(; intCount< strMask.length; intCount++)
	{
			if(!Clib.isalnum(strMask.charAt(intCount)))
			{
				//Character entered in the field is not alphanumeric
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC018"");
				
					TheApplication().RaiseErrorText(strErrVal);
				
				return(CancelOperation);
			}
	}
	return (ContinueOperation);
}
function BusComp_ChangeRecord ()
{
	this.SetUserProperty(""CHANGE_HAPPOINTMENT"","""");
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
//must first set the value to outside table
//process this BC only after update in external table was ok
	
	if(""HAPPOINTMENT""==FieldName)
	{
		this.SetUserProperty(""CHANGE_HAPPOINTMENT"",""Y"")	
	}
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
	if(""Y""==this.GetUserProperty(""CHANGE_HAPPOINTMENT""))
	{
		var mbsProcess = TheApplication().GetService(""RMS BS DMS"");
		var mpsInp = TheApplication().NewPropertySet();
		var mpsOp = TheApplication().NewPropertySet();
		mpsInp.SetProperty(""Quota"",this.GetFieldValue(""HAPPOINTMENT""));
		mpsInp.SetProperty(""Dealer Code"",this.GetFieldValue(""DEALER_CODE""));
		this.SetUserProperty(""CHANGE_HAPPOINTMENT"","""");
		
		mbsProcess.InvokeMethod(""Update Quota External"",mpsInp,mpsOp);
	}
	return (ContinueOperation);
}
function BusComp_ChangeRecord ()
{
	this.SetUserProperty(""CHANGE_HAPPOINTMENT"","""");
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
//must first set the value to outside table
//process this BC only after update in external table was ok
	
	if(""HAPPOINTMENT""==FieldName)
	{
		this.SetUserProperty(""CHANGE_HAPPOINTMENT"",""Y"")	
	}
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
	if(""Y""==this.GetUserProperty(""CHANGE_HAPPOINTMENT""))
	{
		var mbsProcess = TheApplication().GetService(""RMS BS DMS"");
		var mpsInp = TheApplication().NewPropertySet();
		var mpsOp = TheApplication().NewPropertySet();
		mpsInp.SetProperty(""Quota"",this.GetFieldValue(""HAPPOINTMENT""));
		mpsInp.SetProperty(""Dealer Code"",this.GetFieldValue(""DEALER_CODE""));
		this.SetUserProperty(""CHANGE_HAPPOINTMENT"","""");
		
		mbsProcess.InvokeMethod(""Update Quota External"",mpsInp,mpsOp);
	}
	return (ContinueOperation);
}
function BusComp_ChangeRecord ()
{
	this.SetUserProperty(""CHANGE_HAPPOINTMENT"","""");
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
//must first set the value to outside table
//process this BC only after update in external table was ok
	
	if(""HAPPOINTMENT""==FieldName)
	{
		this.SetUserProperty(""CHANGE_HAPPOINTMENT"",""Y"")	
	}
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
	if(""Y""==this.GetUserProperty(""CHANGE_HAPPOINTMENT""))
	{
		var mbsProcess = TheApplication().GetService(""RMS BS DMS"");
		var mpsInp = TheApplication().NewPropertySet();
		var mpsOp = TheApplication().NewPropertySet();
		mpsInp.SetProperty(""Quota"",this.GetFieldValue(""HAPPOINTMENT""));
		mpsInp.SetProperty(""Dealer Code"",this.GetFieldValue(""DEALER_CODE""));
		this.SetUserProperty(""CHANGE_HAPPOINTMENT"","""");
		
		mbsProcess.InvokeMethod(""Update Quota External"",mpsInp,mpsOp);
	}
	return (ContinueOperation);
}
function BusComp_ChangeRecord ()
{
	this.SetUserProperty(""CHANGE_HAPPOINTMENT"","""");
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
//must first set the value to outside table
//process this BC only after update in external table was ok
	
	if(""HAPPOINTMENT""==FieldName)
	{
		this.SetUserProperty(""CHANGE_HAPPOINTMENT"",""Y"")	
	}
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
	if(""Y""==this.GetUserProperty(""CHANGE_HAPPOINTMENT""))
	{
		var mbsProcess = TheApplication().GetService(""RMS BS DMS"");
		var mpsInp = TheApplication().NewPropertySet();
		var mpsOp = TheApplication().NewPropertySet();
		mpsInp.SetProperty(""Quota"",this.GetFieldValue(""HAPPOINTMENT""));
		mpsInp.SetProperty(""Dealer Code"",this.GetFieldValue(""DEALER_CODE""));
		this.SetUserProperty(""CHANGE_HAPPOINTMENT"","""");
		
		mbsProcess.InvokeMethod(""Update Quota External"",mpsInp,mpsOp);
	}
	return (ContinueOperation);
}
function BusComp_ChangeRecord ()
{
	this.SetUserProperty(""CHANGE_HAPPOINTMENT"","""");
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
//must first set the value to outside table
//process this BC only after update in external table was ok
	
	if(""HAPPOINTMENT""==FieldName)
	{
		this.SetUserProperty(""CHANGE_HAPPOINTMENT"",""Y"")	
	}
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
	if(""Y""==this.GetUserProperty(""CHANGE_HAPPOINTMENT""))
	{
		var mbsProcess = TheApplication().GetService(""RMS BS DMS"");
		var mpsInp = TheApplication().NewPropertySet();
		var mpsOp = TheApplication().NewPropertySet();
		mpsInp.SetProperty(""Quota"",this.GetFieldValue(""HAPPOINTMENT""));
		mpsInp.SetProperty(""Dealer Code"",this.GetFieldValue(""DEALER_CODE""));
		this.SetUserProperty(""CHANGE_HAPPOINTMENT"","""");
		
		mbsProcess.InvokeMethod(""Update Quota External"",mpsInp,mpsOp);
	}
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
//must first set the value to outside table
//process this BC only after update in external table was ok
	
	if(""HAPPOINTMENT""==FieldName)
	{
		this.SetUserProperty(""CHANGE_HAPPOINTMENT"",""Y"")	
	}
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
	if(""Y""==this.GetUserProperty(""CHANGE_HAPPOINTMENT""))
	{
		var mbsProcess = TheApplication().GetService(""RMS BS DMS"");
		var mpsInp = TheApplication().NewPropertySet();
		var mpsOp = TheApplication().NewPropertySet();
		mpsInp.SetProperty(""Quota"",this.GetFieldValue(""HAPPOINTMENT""));
		mpsInp.SetProperty(""Dealer Code"",this.GetFieldValue(""DEALER_CODE""));
		this.SetUserProperty(""CHANGE_HAPPOINTMENT"","""");
		
		mbsProcess.InvokeMethod(""Update Quota External"",mpsInp,mpsOp);
	}
	return (ContinueOperation);
}
function BusComp_ChangeRecord ()
{
	this.SetUserProperty(""CHANGE_HAPPOINTMENT"","""");
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
//must first set the value to outside table
//process this BC only after update in external table was ok
	
	if(""HAPPOINTMENT""==FieldName)
	{
		this.SetUserProperty(""CHANGE_HAPPOINTMENT"",""Y"")	
	}
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
	if(""Y""==this.GetUserProperty(""CHANGE_HAPPOINTMENT""))
	{
		var mbsProcess = TheApplication().GetService(""RMS BS DMS"");
		var mpsInp = TheApplication().NewPropertySet();
		var mpsOp = TheApplication().NewPropertySet();
		mpsInp.SetProperty(""Quota"",this.GetFieldValue(""HAPPOINTMENT""));
		mpsInp.SetProperty(""Dealer Code"",this.GetFieldValue(""DEALER_CODE""));
		this.SetUserProperty(""CHANGE_HAPPOINTMENT"","""");
		
		mbsProcess.InvokeMethod(""Update Quota External"",mpsInp,mpsOp);
	}
	return (ContinueOperation);
}
function BusComp_ChangeRecord ()
{
	this.SetUserProperty(""CHANGE_HAPPOINTMENT"","""");
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
//must first set the value to outside table
//process this BC only after update in external table was ok
	
	if(""HAPPOINTMENT""==FieldName)
	{
		this.SetUserProperty(""CHANGE_HAPPOINTMENT"",""Y"")	
	}
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
	if(""Y""==this.GetUserProperty(""CHANGE_HAPPOINTMENT""))
	{
		var mbsProcess = TheApplication().GetService(""RMS BS DMS"");
		var mpsInp = TheApplication().NewPropertySet();
		var mpsOp = TheApplication().NewPropertySet();
		mpsInp.SetProperty(""Quota"",this.GetFieldValue(""HAPPOINTMENT""));
		mpsInp.SetProperty(""Dealer Code"",this.GetFieldValue(""DEALER_CODE""));
		this.SetUserProperty(""CHANGE_HAPPOINTMENT"","""");
		
		mbsProcess.InvokeMethod(""Update Quota External"",mpsInp,mpsOp);
	}
	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS SIM Card Config  BusComp Invoke Method					  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS SIM Card Config Code File           	                          *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/05/2004 	 1.0   	MBT		 Created       28/05/2004	  *
20060710       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function BusComp_InvokeMethod (MethodName)
{
	var psInput;
	var psOutput;
	var bsSIMCardConfig;
	var bsBCRefresh;
	var intRetCode = ContinueOperation;
	if (MethodName == ""UnReleaseCardConfig"")
	{		
		bsSIMCardConfig = TheApplication().GetService(""RMS SIM Card Config"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
		bsSIMCardConfig.InvokeMethod(""UnreleaseCardConfig"",psInput,psOutput);
		bsBCRefresh = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();		
		psInput.SetProperty(""Business Component Name"",""RMS SIM Card Config"");
		psInput.SetProperty(""Business Object Name"",""RMS SIM Card Config"");
		bsBCRefresh.InvokeMethod(""Refresh Business Component"",psInput,psOutput);
		intRetCode = CancelOperation;
	}	
	if (MethodName == ""ReleaseCardConfig"")
	{	
		bsSIMCardConfig = TheApplication().GetService(""RMS SIM Card Config"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
		bsSIMCardConfig.InvokeMethod(""ReleaseCardConfig"",psInput,psOutput);
		bsBCRefresh = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();		
		psInput.SetProperty(""Business Component Name"",""RMS SIM Card Config"");
		psInput.SetProperty(""Business Object Name"",""RMS SIM Card Config"");
		bsBCRefresh.InvokeMethod(""Refresh Business Component"",psInput,psOutput);
		intRetCode = CancelOperation;
	}	
//1.1 below
	psInput = null;
	psOutput = null;
	bsBCRefresh = null;
	bsSIMCardConfig = null;
//1.1 above 
	return intRetCode;
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
//Validation for email id
	if(FieldName == ""Email Address"")
			{
			if (!ValidateFieldByRegExp(/^[^@]+@[^@]+\.[^@\.][^@\.].?$/, FieldValue, ""Not a valid email address""))
			{
				return (CancelOperation);	
			}
			

			if(FieldValue.length<5)
				TheApplication().RaiseErrorText(TheApplication().LookupMessage(""STC PM UserDefinedErrors"",""PM013""));
			var msEmail = FieldValue;
			for(var i=0;i<msEmail.length;i++)
			if(Clib.isspace(msEmail.charAt(i)))
			TheApplication().RaiseErrorText(TheApplication().LookupMessage(""STC PM UserDefinedErrors"",""PM013""));
  			}
		return (ContinueOperation);
}
function ValidateFieldByRegExp(regExp,Value,errMsg)
{
	if (Value != """") {
		if (!Value.match(regExp)) {
			TheApplication().RaiseErrorText(errMsg);
			return (false);			
		}
	}
	return true;
}
"/**************************************************************************************
* Name          : SIM Order PreCopyRecord Method					 	      	  	  *
* Author        : Mahindra British Telecom 		                                      *
* Description 	: Code file to take order id of previous record before copying 		  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2002 	1.0   		MBT		     	Created      			22/01/2003        *
**************************************************************************************/

function BusComp_PreCopyRecord ()
{
	TheApplication().SetSharedGlobal(""OldOrderId"",this.GetFieldValue(""Id""));
	
	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : SIM Order WriteRecord Method					 	      	  	      *
* Author        : Mahindra British Telecom 		                                      *
* Description 	: SIM Order Code File.                                         		  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT		     	Created      			29/12/2003        *
* 20060710      1.1         Kalyana      Siebel ES SCR1, Objects Destroyed
* 20061007      1.2         Kalyana      Added code to make SIM Ordering asynchronous
* 20061014      1.3         Kalyana		Added code to refresh record
**************************************************************************************/
function BusComp_PreInvokeMethod (MethodName)
{
//
// below 1.1 
var bsSIMOrd  = """";
var psInput   = """";
var psOutput  = """";
//below 1.2
var bsSIMFile = """";
//above 1.2
// above 1.1
//----------------------------------------
//Code to invoke the submit to supplier BS.
//----------------------------------------
	
	if (MethodName == ""SubmitToSupplier"") //Submit To ERP
	{				   
// below 1.1		
		bsSIMOrd = TheApplication().GetService(""RMS SIM Order"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
		//below 1.2
		//bsSIMOrd.InvokeMethod(""SubmitToSupplier"",psInput,psOutput);
		bsSIMOrd.InvokeMethod(""ValidateSIMOrder"",psInput,psOutput);
		if(psInput.GetProperty(""ErrMessage"")!="""")
		TheApplication().RaiseErrorText(psInput.GetProperty(""ErrMessage""));
		//below 1.3
		this.InvokeMethod(""RefreshRecord"");
		this.InvokeMethod(""UpdateLinks"");
		//above 1.3
		var boSystemPref 	= TheApplication().GetBusObject(""System Preferences""); 		
		var bcSystemPref 	= boSystemPref.GetBusComp(""System Preferences"");
		var strSearchStr = ""[Name]='RMS_SIM_ORDER_SYNC' AND [Value] ='Y'"";
		bcSystemPref.ClearToQuery();
		bcSystemPref.SetSearchExpr(strSearchStr);
		bcSystemPref.ExecuteQuery(ForwardOnly);
		if(bcSystemPref.FirstRecord())
		{
		bsSIMFile	  = TheApplication().GetService(""Workflow Process Manager"");
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
		psInput.SetProperty(""ProcessName"",""RMS SIM Submit To Supplier - Generate File"");
		bsSIMFile.InvokeMethod(""RunProcess"",psInput,psOutput);
		bsSIMFile    = null;  
		bcSystemPref = null;
		boSystemPref = null; 
		//above 1.2
		bsSIMOrd = null;
		psInput  = null;
		psOutput = null;
		}
		else
		{
		this.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""SUBMITTED""));
		this.WriteRecord();
		}
	    
// above 1.1
		return(CancelOperation);
	}
	if (MethodName == ""ReadERP"") //Read from ERP
	{				   
// below 1.1
		bsSIMOrd = TheApplication().GetService(""RMS SIM File"");
		if(!defined(bsSIMOrd))
				bsSIMOrd = TheApplication().GetService(""RMS SIM File"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
		psInput.SetProperty(""FileName"",""dummy"");
		bsSIMOrd.InvokeMethod(""ReadOrderFile"",psInput,psOutput);
		bsSIMOrd = null;
		psInput  = null;
		psOutput = null;
// above 1.1
		return(CancelOperation);
	}
	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : SIM Order PreSetFieldValue Method					 	      	  	  *
* Author        : Mahindra British Telecom 		                                      *
* Description 	: SIM Order Code file.                                      		  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT		     	Created      			29/12/2003        *
**************************************************************************************/

function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
if((this.GetFieldValue(""Status"") == 
TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""APPROVAL REJECTED""))
||
(this.GetFieldValue(""Status"") == TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""APPROVED"")))

this.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""OPEN""));		
return (ContinueOperation);
}
"/**************************************************************************************
* Name          : SIM Order WriteRecord Method					 	      	  	      *
* Author        : Mahindra British Telecom 		                                      *
* Description 	: SIM Order Code File.                                         		  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT		     	Created      			29/12/2003        *
**************************************************************************************/

function BusComp_WriteRecord ()
{

	var bsSIMOrder;
	var psInputs;
	var psOutputs;

	if((this.GetUserProperty(""From BusService"")) != ""Y"")
	{
		psInputs    = TheApplication().NewPropertySet();
		psOutputs   = TheApplication().NewPropertySet();
	
	    bsSIMOrder = TheApplication().GetService(""RMS SIM Order"");
		psInputs.SetProperty(""Object Id"",this.GetFieldValue(""Id""));


   if(this.GetFieldValue(""Status"") == """")
   {
		this.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW""));
		this.WriteRecord();
		//bsSIMOrder.InvokeMethod(""CreateOrderLine"",psInputs,psOutputs);
   }

   if(this.GetFieldValue(""Supplier Changed"") == ""Y"")
	{
		
		psInputs.SetProperty(""Supplier Id"",this.GetFieldValue(""Supplier Id""));
//------------------------------------------------------
// Associate the corresponding paper items to the Order
//-------------------------------------------------------			
   	
		
		bsSIMOrder.InvokeMethod(""UpdatePaperItem"",psInputs,psOutputs);
		this.InvokeMethod(""RefreshRecord"");
		this.InvokeMethod(""UpdateLinks"");
	}
    	bsSIMOrder 		= null;
		psInputs		= null;
		psOutputs		= null;
	}
	return (ContinueOperation);
	
}
"/*
		THIS is to be retained for future USE
				PLEASE DO NOT DELETE                                    
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
* 29/05/2004 	 1.0   		MBT						   	Created       29/05/2004	  *
*************************************************************************************
function FUTURE_USE_BusComp_InvokeMethod (MethodName)
{
	var psInput;
	var psOutput;
	var bsSIMOrd;
//------------------------------
//Code commented for future use.
//------------------------------
	if (MethodName == ""SendForApproval"")
	{	
		bsSIMOrd = TheApplication().GetService(""RMS SIM Order"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
		bsSIMOrd.InvokeMethod(""SendForApproval"",psInput,psOutput);
		return(CancelOperation);
	}
	if (MethodName == ""TrashOrder"")
	{	
		bsSIMOrd = TheApplication().GetService(""RMS SIM Order"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
		bsSIMOrd.InvokeMethod(""TrashOrder"",psInput,psOutput);
		return(CancelOperation);
	}
	if (MethodName == ""CancelOrder"")
	{	
		bsSIMOrd = TheApplication().GetService(""RMS SIM Order"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
		bsSIMOrd.InvokeMethod(""CancelOrder"",psInput,psOutput);
		return(CancelOperation);
	}
	if (MethodName == ""DeleteOrder"")
	{	
		bsSIMOrd = TheApplication().GetService(""RMS SIM Order"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
		bsSIMOrd.InvokeMethod(""DeleteOrder"",psInput,psOutput);
		this.InvokeMethod(""RefreshRecord"");
		this.InvokeMethod(""UpdateLinks"");
		return(CancelOperation);
	}
	if (MethodName == ""SubmitToSupplier"")   //Submit To ERP
	{				   
		bsSIMOrd = TheApplication().GetService(""RMS SIM Order"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
		bsSIMOrd.InvokeMethod(""SubmitToSupplier"",psInput,psOutput);
		return(CancelOperation);
	}
//below 1.1	
	bsSIMOrd    = null;
	psInput     = null;
	psOutput    = null;
//above 1.1 	
   return(ContinueOperation);
}
*/"
"/**************************************************************************************
* Name          : SIM Order Approver Approved By Method						      	  *
* Author        : Mahindra British Telecom                                            *
* Description 	: Code file to pick up the parent position to set Approved by Field   *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT 	    	Created      			29/12/2003    
* 20060804      1.1         Kalyana          Siebel ESR  Objects destroyed
**************************************************************************************/

function ApprovedBy(){

	var boSIMOrder;
	var boPosition;
	var bcSIMOrderApprover;
	var bcPosition;
	var strIsRecord;
	var strPositionId;
	var strParPositionId;

//------------------------------------------------
// Retrive the position id for the current user.
//------------------------------------------------
	strPositionId = TheApplication().PositionId();
	
//---------------------------------------------------
// Get the base BC to retrive the parent position id
//---------------------------------------------------
	boPosition = TheApplication().GetBusObject(""Position"");
	bcPosition = boPosition.GetBusComp(""Position"");

	with(bcPosition){
		ActivateField(""Position Id"");
		ActivateField(""Parent Position Id"");
		ActivateField(""Login"");
		
//-----------------------------------------------------------------
// Set the search specification to retrive the parent position id
//-----------------------------------------------------------------
		ClearToQuery();
		SetSearchSpec(""Position Id"",strPositionId);
		ExecuteQuery();
	}

	strIsRecord = bcPosition.FirstRecord();	

//---------------------------------------------------------------------------
// Get the field value if parent positions are asssociated to users position.
//---------------------------------------------------------------------------
	if (bcPosition.GetFieldValue(""Parent Position Id"") !="""")
//below 1.1		
		//return bcPosition.GetFieldValue(""Parent Position Id"");
		strPositionId = bcPosition.GetFieldValue(""Parent Position Id"");	
	/*else
		return strPositionId;*/
		bcPosition = null;
		boPosition = null;
		return strPositionId;
//above 1.1
}
"/**************************************************************************************
* Name          : SIM Order Approver PreQuery Method							 	  *
* Author        : Mahindra British Telecom                                            *
* Description 	: Code file to pick up the parent position to set Approved by Field   *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	 1.0   		 MBT     		 Created      			29/12/2003        *
  20061012       1.1         Prasad          Siebel ES SCR2, Check on non-null position id incorporated
**************************************************************************************/

function BusComp_PreQuery (){

    var strSearchExpr;
    var strPositionId;
	var strPrevSearchSpec;
	
	strPositionId = ApprovedBy();

//1.1 below
	if (strPositionId != """")
	{
		strPrevSearchSpec = this.GetSearchExpr();
		if(strPrevSearchSpec != """")
			strSearchExpr = strPrevSearchSpec + "" AND [Position Id]= \'"" + strPositionId +""\'""; 
		else
			strSearchExpr = ""[Position Id]= \'"" + strPositionId + ""\'""; 
		this.SetSearchExpr(strSearchExpr);	
	}
//1.1 above
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
        
		if((this.GetFieldValue(""Starting Number"") != """") && (this.GetFieldValue(""Ending Number"") == """")&&(this.GetFieldValue(""SIM Card Config Name"")!=""""))
		{
		var strErrval= """";
		var bsUpdateNumbers = TheApplication().GetService(""RMS SIM Order"");
		var psInput = TheApplication().NewPropertySet();
		var psOutput = TheApplication().NewPropertySet();
		//this.ActivateField(""Quantity Ordered"");
		//this.ActivateField(""Starting Number"");
		//this.ActivateField(""Ending Number"");
		//this.ActivateField(""Card Category"");
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Order Id""));
		psInput.SetProperty(""RowId"",this.GetFieldValue(""Id""));
		psInput.SetProperty(""QuantityOrdered"",this.GetFieldValue(""Quantity Ordered""));
		psInput.SetProperty(""StartingNumber"",this.GetFieldValue(""Starting Number""));
		psInput.SetProperty(""CardCategory"",this.GetFieldValue(""Card Category""));
		bsUpdateNumbers.InvokeMethod(""UpdateStartEndNumber"",psInput,psOutput);
        this.SetFieldValue(""Ending Number"",psOutput.GetProperty(""EndingNumber""));	
        }
		bsUpdateNumbers = null;
		psInput =  null;
		psOutput = null;
		return (ContinueOperation);
}
"/**************************************************************************************
* Name          : SIM Order Line PreWriteRecord Method						  		  *
* Author        : MBT (Pune-India)                                                    *
* Description 	: Code file to validate before writing the record   				  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2002 	1.0   		MBT(Pune)     	Created      			22/01/2003        *
**************************************************************************************/

function BusComp_PreWriteRecord ()
{

	var strErrVal="""";
		
	
	if(this.GetFieldValue(""ReqDtFlag"")<0){
		//strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD004"");
	}
	else if(this.GetFieldValue(""CancelDtFlag2"")<0)
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD005"");
	else if(this.GetFieldValue(""Cancel By Date"")!=""""){
		if(this.GetFieldValue(""CancelDtFlag1"")<0)
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD006"");	
		if(this.GetFieldValue(""CancelDtFlag2"")<0)
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD007"");			

	
	}
	if(!strErrVal=="""")
    TheApplication().RaiseErrorText(strErrVal);
    	
	return (ContinueOperation);	
}
"/**************************************************************************************
* Name          : SIM Order PreCopyRecord Method					 	      	  	  *
* Author        : Mahindra British Telecom 		                                      *
* Description 	: Code file to take order id of previous record before copying 		  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2002 	1.0   		MBT		     	Created      			22/01/2003        *
**************************************************************************************/

function BusComp_PreCopyRecord ()
{
	this.SetSharedGlobal(""OldOrderId"",this.GetFieldValue(""Id""));
	return (ContinueOperation);
}
"/**************************************************************************************
* Name          : SIM Order SetFieldValue Method					 	      	  	  *
* Author        : Mahindra British Telecom 		                                      *
* Description 	: SIM Order Code file.                                      		  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT		     	Created      			29/12/2003        *
* 20060711      1.1         Kalyana         Siebel ES SCR1, Objects Destroyed
**************************************************************************************/

function BusComp_SetFieldValue (FieldName){

	var boSIMOrder;
	var bcSIMOrdNMGen;
	
	var strSearchExpr;
	var mbIsRecord = false;
	
	var bsSIMOrder;
	var psInputs;
	var psOutputs;

//--------------------------------------------------------------
// On selection of HLR ID automatic population of batch number
// which has SIM and IMSI associated.
//--------------------------------------------------------------	
	if(FieldName == ""HLR ID""){
		boSIMOrder 		= TheApplication().GetBusObject(""RMS SIM Order"");
		bcSIMOrdNMGen	= boSIMOrder.GetBusComp(""RMS SIM Order NM Number Generation"");
								
		strSearchExpr = ""[HLR Id] ='"" + this.GetFieldValue(""HLR ID"") + 
				""' AND [Is Associated] = 'Y'""+
				"" AND [Type Identifier] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") +
				""' AND ([SIM Order Raised] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""NO"") +
				""' OR [SIM Order Raised] ='"" + TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""PARTIAL"") + ""')"";
					
		with(bcSIMOrdNMGen){
			ActivateField(""Is Associated"");
			ActivateField(""Status"");
			ActivateField(""SIM Order Raised"");
			ActivateField(""Batch Number"");
			ActivateField(""Type Identifier"");
			ActivateField(""HLR Id"");
			 ActivateField(""Is Associated"");
			 
			
			SetSortSpec(""Batch Number(ASCENDING)"");
			SetSearchExpr(strSearchExpr);
			ExecuteQuery();
			mbIsRecord = FirstRecord();
		}
			
		if(mbIsRecord){
			var isAssoc = bcSIMOrdNMGen.GetFieldValue(""Is Associated"");
			this.SetFieldValue(""Batch Number"",bcSIMOrdNMGen.GetFieldValue(""Batch Number""));
		}
		else
			this.SetFieldValue(""Batch Number"","""");	
// below 1.1 
		bcSIMOrdNMGen = null;
		boSIMOrder    = null; 	
// above 1.1	
}
	bsSIMOrder 		= null;
	psInputs		= null;
	psOutputs		= null;
	
	return (ContinueOperation);	
}
"/**************************************************************************************
* Name          : SIM Order WriteRecord Method					 	      	  	      *
* Author        : Mahindra British Telecom 		                                      *
* Description 	: SIM Order Code File.                                         		  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT		     	Created      			29/12/2003        *
**************************************************************************************/

function BusComp_WriteRecord (){

	var bsSIMOrder;
	var psInputs;
	var psOutputs;

	if((this.GetUserProperty(""From BusService""))!=""Y""){
		psInputs    = TheApplication().NewPropertySet();
		psOutputs   = TheApplication().NewPropertySet();
	    
	    bsSIMOrder = TheApplication().GetService(""RMS SIM Order"");
		psInputs.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
			
	    if(this.GetFieldValue(""Status"") == """"){
			bsSIMOrder.InvokeMethod(""CreateOrderLine"",psInputs,psOutputs);
		}
		
		if(this.GetFieldValue(""Supplier Changed"") == ""Y""){
			psInputs.SetProperty(""Supplier Id"",this.GetFieldValue(""Supplier Id""));
//-------------------------------------------------------
// Associate the corresponding paper items to the order.
//-------------------------------------------------------			
			bsSIMOrder.InvokeMethod(""UpdatePaperItem"",psInputs,psOutputs);
		}
			
		bsSIMOrder 		= null;
		psInputs		= null;
		psOutputs		= null;
	}
								
	return (ContinueOperation);

}
"/**************************************************************************************
* Name          : RMS SIM Paper Item BusComp Invoke Method					     	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS SIM Paper Item Code File            	                          *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/05/2004 	 1.0    MBT						   	Created       28/05/2004	  *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
                                 refreshBC should be defuc and replaced by this.InvokeMethod(""RefreshRecord"")
**************************************************************************************/

function BusComp_PreInvokeMethod (MethodName)
{

	var psInput;
	var psOutput;

	var bsPaperItem;
	var bsBCRefresh;

	if (MethodName == ""UnreleasePaperItem""){	
		
		
		bsPaperItem = TheApplication().GetService(""RMS SIM Paper Item"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		psInput.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
		bsPaperItem.InvokeMethod(""UnreleasePaperItem"",psInput,psOutput);

		bsBCRefresh = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();		
		psInput.SetProperty(""Business Component Name"",""RMS SIM Paper Item"");
		psInput.SetProperty(""Business Object Name"",""RMS SIM Paper Item"");
		bsBCRefresh.InvokeMethod(""Refresh Business Component"",psInput,psOutput);

		return(CancelOperation);
	}	
//1.1 below
bsBCRefresh = null;
bsPaperItem = null;
psInput = null;
psOutput = null; 
//1.1 above
	return(ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	
	
            switch(FieldName)
	        {
            case ""Main Phone Number"":
			var msPhNum = FieldValue;
			//To make sure only numeric values are entered in Phone Number field
			for(var i=0;i<msPhNum.length;i++)
				if((!(Clib.isdigit(msPhNum.charAt(i)))) || (Clib.isspace(msPhNum.charAt(i))))
				TheApplication().RaiseErrorText(TheApplication().LookupMessage(""STC AM  UserDefinedErrors"",""AM021""));
		        break;
		    case ""Main Fax Number"":
			var msFaxNum = FieldValue;
			//To make sure only numeric values are entered in Fax Number field
			for(var i=0;i<msFaxNum.length;i++)
				if((!(Clib.isdigit(msFaxNum.charAt(i)))) || (Clib.isspace(msFaxNum.charAt(i))))
				TheApplication().RaiseErrorText(TheApplication().LookupMessage(""STC AM  UserDefinedErrors"",""AM022""));
		        break;
		  // To validate URL
		  case ""Home Page"":
		  var msHomepg = FieldValue;
		  var check7 = msHomepg.substring(0,7);
		  var check4 = msHomepg.substring(0,4);
		  var check8 = msHomepg.substring(0,8);
		 if( Clib.stricmp(check7,""http://"") == 0 ) 
         {
			if( ! checkAfter7(msHomepg) )
			TheApplication().RaiseErrorText(TheApplication().LookupMessage(""STC PM UserDefinedErrors"",""PM012""));	
		}
  		else if( Clib.stricmp(check4,""www."") == 0 )
		{
			if ( ! checkAfter4(msHomepg) )
				TheApplication().RaiseErrorText(TheApplication().LookupMessage(""STC PM UserDefinedErrors"",""PM012""));
  	    }
		else if( Clib.stricmp(check8,""https://"") == 0 )
		{
			if( ! checkAfter8(msHomepg) )
			TheApplication().RaiseErrorText(TheApplication().LookupMessage(""STC PM UserDefinedErrors"",""PM012""));
		}
	
		else	
			TheApplication().RaiseErrorText(TheApplication().LookupMessage(""STC PM UserDefinedErrors"",""PM012""));
    	break;
		//Validation for email id
			/*case ""Main Email Address""://to validate email address
			if (!ValidateFieldByRegExp(/^[^@]+@[^@]+\.[^@\.][^@\.].?$/, FieldValue, ""Not a valid email address""))
			{
				return (CancelOperation);	
			}
			

			if(FieldValue.length<5)
				TheApplication().RaiseErrorText(TheApplication().LookupMessage(""STC PM UserDefinedErrors"",""PM013""));
			var msEmail = FieldValue;
			for(var i=0;i<msEmail.length;i++)
				if(Clib.isspace(msEmail.charAt(i)))
					TheApplication().RaiseErrorText(TheApplication().LookupMessage(""STC PM UserDefinedErrors"",""PM013""));
			break;*/

			}
		    return (ContinueOperation);
            }
function ValidateFieldByRegExp(regExp,Value,errMsg)
{
	if (Value != """") {
		if (!Value.match(regExp)) {
			TheApplication().RaiseErrorText(errMsg);
			return (false);			
		}
	}
	return true;
}
function checkAfter4(msHomepg)
{
	var i=4;

	if( msHomepg.length < 7 ) return false;  // to check that minimum 7 characters are entered e.g www.y.c

	var current = msHomepg.charAt(i);   

	while( Clib.stricmp(current,""."") != 0 )
	{
		if( ! Clib.isalnum(msHomepg.charAt(i) ) ) 
		return false;
		current = msHomepg.charAt(++i);
		if(i == msHomepg.length) return false;
	}
	i++;
	while( i < msHomepg.length )
	{
		if( ! Clib.isalpha( msHomepg.charAt(i++) ) )
		return false;
	}
return true;	

}
function checkAfter7(msHomepg)
{
	if (msHomepg.charAt(7) == """") 
	return false;
	for(var i=0;i<msHomepg.length;i++)
	{
		if(Clib.isspace(msHomepg.charAt(i))) 
			return false;
	}//end of for
	return true;   
	
}
function checkAfter8(msHomepg)
{
	if (msHomepg.charAt(8) == """") 
	return false;
	for(var i=0;i<msHomepg.length;i++)
	{
		if(Clib.isspace(msHomepg.charAt(i))) 
			return false;
	}//end of for
	return true;

}
function convertIntToString(intValue, strTemplate)
{
var strValue;

var intTemplateLength = strTemplate.length;
var strTempValue = intValue + """";
var intTempValueLength = strTempValue.length;

strValue= strTemplate.substring(1, intTemplateLength-intTempValueLength+1) + strTempValue;

return strValue;
}
"/**************************************************************************************
* Name          : RMS Starter Pack Automation BusComp PreInvokeMethod Method		  * 
* Author        : Ashu																  *
* Description   : RMS Auto Starter Pack Code File									  *
* Amendment Details																	  *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 29/01/2009 	1.0   		Ashu					   	Created      29/01/2009       *
* 24/04/2009	1.1			Samir						For Prefixing 0's in Start	  *
*														Numbers						  *
**************************************************************************************/
function BusComp_PreInvokeMethod (MethodName)
{
	if (MethodName == ""SubmitSPBatch"")
	{
		// 1.1 Below
		this.WriteRecord();
	//	this.ActivateField(""Scheme Format ICCID"");
		var vSchemeFormatICCID = this.GetFieldValue(""Scheme Format ICCID"");
	    var vLengthICCID = vSchemeFormatICCID.length;
	    var vStartNumberICCIDString = this.GetFieldValue(""Start Number ICCID String"");
	    var vCountICCIDStartString = vStartNumberICCIDString.length;
	    var vTotalICCIDNs = (vSchemeFormatICCID.lastIndexOf(""N"")) -  (vSchemeFormatICCID.indexOf(""N"")) + 1;
		var vFinalICCIDStartString =  ToString(vStartNumberICCIDString);
		var vICCIDZeroes = vTotalICCIDNs - vCountICCIDStartString;
		if(vICCIDZeroes != 0)
		{
			while (vICCIDZeroes >= 1)
		    {  
				vFinalICCIDStartString = ToString(""0"") + ToString(vFinalICCIDStartString);
				vICCIDZeroes = vICCIDZeroes - 1;
			}
			this.SetFieldValue(""Start Number ICCID String"",vFinalICCIDStartString);
		}
	//	this.ActivateField(""Scheme Format IMSI"");
		var vSchemeFormatIMSI = this.GetFieldValue(""Scheme Format IMSI"");
	    var vLengthIMSI = vSchemeFormatIMSI.length;
	    var vStartNumberIMSIString = this.GetFieldValue(""Start Number IMSI String"");
	    var vCountIMSIStartString  = vStartNumberIMSIString.length;
	    var vTotalIMSIs = (vSchemeFormatIMSI.lastIndexOf(""N"")) - (vSchemeFormatIMSI.indexOf(""N"")) + 1;
		var vFinalIMSIStartString = ToString(vStartNumberIMSIString);
		var vIMSIZeroes = vTotalIMSIs - vCountIMSIStartString;
		if(vIMSIZeroes != 0)
		{
			while (vIMSIZeroes >= 1)
		    {  
				vFinalIMSIStartString = ToString(""0"") + ToString(vFinalIMSIStartString);
				vIMSIZeroes = vIMSIZeroes - 1;
			}
			this.SetFieldValue(""Start Number IMSI String"",vFinalIMSIStartString);
		}
		// 1.1 Above
		this.WriteRecord();
		
		this.InvokeMethod(""RefreshRecord"");
		
		var vSchemeFormatICCID;
		var vSchemeFormatIMSI;
	//	var vSchemeFormatMSISDN;
		var vTemp1;
		var vTemp2;
		var vTemp3;
		var vQuantity;
		var vRowId;
		
		var vStartNumberICCID;
		var vEndNumberICCID;
		var vStartNumberIMSI;
		var vEndNumberIMSI;
	//	var vStartNumberMSISDN;
	//	var vEndNumberMSISDN;
		
		vSchemeFormatICCID	= this.GetFieldValue(""Scheme Format ICCID"");
		vSchemeFormatIMSI	= this.GetFieldValue(""Scheme Format IMSI"");
	//	vSchemeFormatMSISDN	= this.GetFieldValue(""Scheme Format MSISDN"");
		vQuantity = this.GetFieldValue(""Quantity"");
		vRowId = this.GetFieldValue(""Id"");
	
		vTemp1 = vSchemeFormatICCID.indexOf(""N"");
		if(vTemp1 >= 0)
		{
			vTemp2 = vSchemeFormatICCID.substring(0, vTemp1);
			vStartNumberICCID = vTemp2 + this.GetFieldValue(""Start Number ICCID String"");
		}
		else
		{
			TheApplication().RaiseErrorText(""Format of ICCID Number Block is not Correct"");
		}
		vTemp1 = """";
		vTemp2 = """";
		
		vTemp1 = vSchemeFormatIMSI.indexOf(""N"");
		if(vTemp1 >= 0)
		{
			vTemp2 = vSchemeFormatIMSI.substring(0, vTemp1);
			vStartNumberIMSI = vTemp2 + this.GetFieldValue(""Start Number IMSI String"");
		}
		else
		{
			TheApplication().RaiseErrorText(""Format of IMSI Number Block is not Correct"");
		}
		vTemp1 = """";
		vTemp2 = """";
		
	/*	vTemp1 = vSchemeFormatMSISDN.indexOf(""N"");
		if(vTemp1 >= 0)
		{
			vTemp2 = vSchemeFormatMSISDN.substring(0, vTemp1);
			vStartNumberMSISDN = vTemp2 + this.GetFieldValue(""Start Number MSISDN String"");
		}
		else
		{
			TheApplication().RaiseErrorText(""Format of MSISDN Number Block is not Correct"");
		}
		vTemp1 = """";
		vTemp2 = """";
	*/
		this.SetFieldValue(""Start Number ICCID"",vStartNumberICCID);
		this.SetFieldValue(""Start Number IMSI"",vStartNumberIMSI);
	//	this.SetFieldValue(""Start Number MSISDN"",vStartNumberMSISDN);
		
		
		
		var vTemp4 = vStartNumberICCID.length;
		if(vTemp4 > 11)
		{
			var vTemp5 = vTemp4 - 11;
			var vTemp6 = vStartNumberICCID.substring(0, vTemp5);
			var vTemp7 = vStartNumberICCID.substring(vTemp5);
			var vTemp9 = ToString(""1"") + ToString(vTemp7);
			var vTemp8 = ToNumber(vTemp9) + ToNumber(vQuantity) - 1;
			var vTemp10 = ToString(vTemp8);
			var vTemp11 = vTemp10.substring(1);
			vTemp1 = ToString(vTemp6) + ToString(vTemp11);
		}
		else
		{
			vTemp1 = ToNumber(vStartNumberICCID) + ToNumber(vQuantity) - 1;
		}
		
		vTemp2 = ToNumber(vStartNumberIMSI) + ToNumber(vQuantity) - 1;
	//	vTemp3 = ToNumber(vStartNumberMSISDN) + ToNumber(vQuantity) - 1;
		
		this.SetFieldValue(""End Number ICCID"",vTemp1);
		this.SetFieldValue(""End Number IMSI"",vTemp2);
	//	this.SetFieldValue(""End Number MSISDN"",vTemp3);

		this.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_SP_AUTO_STATUS"", ""Submitted""));
		this.SetFieldValue(""Sub Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_SP_AUTO_SUB_STATUS"", ""Submitted""));

		this.WriteRecord();
		
		//calling wf in async mode
		var mbs = TheApplication().GetService(""STC Order Server Request"");
		var Inputs = TheApplication().NewPropertySet();
		var Outputs = TheApplication().NewPropertySet();
		Inputs.SetProperty(""ProcessName"",""RMS Auto NM Main"");
		Inputs.SetProperty(""Object Id"",vRowId);
		Inputs.SetProperty(""Quantity"",vQuantity);
		Inputs.SetProperty(""Run Async"",""true"");
		mbs.InvokeMethod(""SubmitRequest"",Inputs,Outputs);
		
	}
}
"/**************************************************************************************
* Name          : RMS Starter Pack Automation BusComp PreWriteRecord Method			  * 
* Author        : Ashu																  *
* Description   : RMS Auto Starter Pack Code File									  *
* Amendment Details																	  *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 29/01/2009 	1.0   		Ashu					   	Created      29/01/2009       *
*																					  *
**************************************************************************************/

function BusComp_PreWriteRecord (){
	
	var psInputs;
	var psOutputs;
	var psInputs1;
	var psOutputs1;
	var psInputs2;
	var psOutputs2;
	var bsNMGenerate;
	
	psInputs  		= TheApplication().NewPropertySet();
	psOutputs  		= TheApplication().NewPropertySet();
	psInputs1  		= TheApplication().NewPropertySet();
	psOutputs1  	= TheApplication().NewPropertySet();
	psInputs2  		= TheApplication().NewPropertySet();
	psOutputs2  	= TheApplication().NewPropertySet();
	bsNMGenerate	= TheApplication().GetService(""RMS NM Number Generation"");
	
//Populating the end number for ICCID while saving the record
	var vEndNumberICCIDString = this.GetFieldValue(""End Number ICCID String"");
	var vEndNumberIMSIString = this.GetFieldValue(""End Number IMSI String"");
//	var vEndNumberMSISDNString = this.GetFieldValue(""End Number MSISDN String"");
	
	if(this.GetFieldValue(""Scheme Id ICCID"") != """" &&  this.GetFieldValue(""Block Id ICCID"") != """")
	{	
		if((this.GetFieldValue(""Start Number ICCID String"") != """") && (this.GetFieldValue(""End Number ICCID"") == """")){
			
			psInputs.SetProperty(""Block Id"",this.GetFieldValue(""Block Id ICCID""));
			psInputs.SetProperty(""Scheme Id"",this.GetFieldValue(""Scheme Id ICCID""));
			psInputs.SetProperty(""Quantity Str"",this.GetFieldValue(""Quantity""));
			psInputs.SetProperty(""Start String Number"",this.GetFieldValue(""Start Number ICCID String""));
			psInputs.SetProperty(""Block Starting String Number"",this.GetFieldValue(""Block Starting Number ICCID""));
			psInputs.SetProperty(""End Number Str"",this.GetFieldValue(""End Number ICCID String""));
			psInputs.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
			psInputs.SetProperty(""Block Start Num"",this.GetFieldValue(""Block Starting Number ICCID""));
			psInputs.SetProperty(""Block End Num"",this.GetFieldValue(""Block Ending Number ICCID""));
			
			bsNMGenerate.InvokeMethod(""ValidateRecord"",psInputs,psOutputs);
			
			this.SetFieldValue(""Start Number ICCID Numeral"",ToInteger(this.GetFieldValue(""Start Number ICCID String"")));
		//	this.SetFieldValue(""Start Number ICCID String"",psOutputs.GetProperty(""Start String Number""));
		//	this.SetFieldValue(""Quantity"",psOutputs.GetProperty(""Quantity Str""));
			this.SetFieldValue(""End Number ICCID String"",psOutputs.GetProperty(""End Number Str""));
			this.SetFieldValue(""End Number ICCID Numeral"",ToInteger(psOutputs.GetProperty(""End Number Str"")));
		}
	}
	var vTemp1 = this.GetFieldValue(""Start Number ICCID String"");
	var vTemp2 = vTemp1.length;
	var vTemp3 = this.GetFieldValue(""End Number ICCID String"");
	var vTemp4 = vTemp3.length;
	var vTemp5 = 0;
	var i1 = 0;
	if (vTemp2 > vTemp4)
	{
		vTemp5 = ToInteger(vTemp2) - ToInteger(vTemp4);
		for(i1 = 0; i1 < vTemp5; i1++)
		{
			vTemp3 = ""0"" + ToString(vTemp3);
		}
	}
	this.SetFieldValue(""End Number ICCID String"",vTemp3);
	
	if(this.GetFieldValue(""Scheme Id IMSI"") != """" &&  this.GetFieldValue(""Block Id IMSI"") != """")
	{	
		if((this.GetFieldValue(""Start Number IMSI String"") != """") && (this.GetFieldValue(""End Number IMSI"") == """")){
			
			psInputs1.SetProperty(""Block Id"",this.GetFieldValue(""Block Id IMSI""));
			psInputs1.SetProperty(""Scheme Id"",this.GetFieldValue(""Scheme Id IMSI""));
			psInputs1.SetProperty(""Quantity Str"",this.GetFieldValue(""Quantity""));
			psInputs1.SetProperty(""Start String Number"",this.GetFieldValue(""Start Number IMSI String""));
			psInputs1.SetProperty(""Block Starting String Number"",this.GetFieldValue(""Block Starting Number IMSI""));
			psInputs1.SetProperty(""End Number Str"",this.GetFieldValue(""End Number IMSI String""));
			psInputs1.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
			psInputs1.SetProperty(""Block Start Num"",this.GetFieldValue(""Block Starting Number IMSI""));
			psInputs1.SetProperty(""Block End Num"",this.GetFieldValue(""Block Ending Number IMSI""));
			
			bsNMGenerate.InvokeMethod(""ValidateRecord"",psInputs1,psOutputs1);
			
			this.SetFieldValue(""Start Number IMSI Numeral"",ToInteger(this.GetFieldValue(""Start Number IMSI String"")));
		//	this.SetFieldValue(""Start Number IMSI String"",psOutputs1.GetProperty(""Start String Number""));
		//	this.SetFieldValue(""Quantity"",psOutputs1.GetProperty(""Quantity Str""));
			this.SetFieldValue(""End Number IMSI String"",psOutputs1.GetProperty(""End Number Str""));
			this.SetFieldValue(""End Number IMSI Numeral"",ToInteger(psOutputs1.GetProperty(""End Number Str"")));
			
		}
	}
	var vTemp6 = this.GetFieldValue(""Start Number IMSI String"");
	var vTemp7 = vTemp6.length;
	var vTemp8 = this.GetFieldValue(""End Number IMSI String"");
	var vTemp9 = vTemp8.length;
	var vTemp10 = 0;
	var i2 = 0;
	if (vTemp7 > vTemp9)
	{
		vTemp10 = ToInteger(vTemp7) - ToInteger(vTemp9);
		for(i2 = 0; i2 < vTemp10; i2++)
		{
			vTemp8 = ""0"" + ToString(vTemp8);
		}
	}
	this.SetFieldValue(""End Number IMSI String"",vTemp8);
	
	/*if(this.GetFieldValue(""Scheme Id MSISDN"") != """" &&  this.GetFieldValue(""Block Id MSISDN"") != """")
	{
		if((this.GetFieldValue(""Start Number MSISDN String"") != """") && (this.GetFieldValue(""End Number MSISDN"") == """")){
			
			psInputs2.SetProperty(""Block Id"",this.GetFieldValue(""Block Id MSISDN""));
			psInputs2.SetProperty(""Scheme Id"",this.GetFieldValue(""Scheme Id MSISDN""));
			psInputs2.SetProperty(""Quantity Str"",this.GetFieldValue(""Quantity""));
			psInputs2.SetProperty(""Start String Number"",this.GetFieldValue(""Start Number MSISDN String""));
			psInputs2.SetProperty(""Block Starting String Number"",this.GetFieldValue(""Block Starting Number MSISDN""));
			psInputs2.SetProperty(""End Number Str"",this.GetFieldValue(""End Number MSISDN String""));
			psInputs2.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
			psInputs2.SetProperty(""Block Start Num"",this.GetFieldValue(""Block Starting Number MSISDN""));
			psInputs2.SetProperty(""Block End Num"",this.GetFieldValue(""Block Ending Number MSISDN""));
			
			bsNMGenerate.InvokeMethod(""ValidateRecord"",psInputs2,psOutputs2);
			
			this.SetFieldValue(""Start Number MSISDN Numeral"",ToInteger(this.GetFieldValue(""Start Number MSISDN String"")));
		//	this.SetFieldValue(""Start Number MSISDN String"",psOutputs2.GetProperty(""Start String Number""));
		//	this.SetFieldValue(""Quantity"",psOutputs2.GetProperty(""Quantity Str""));
			this.SetFieldValue(""End Number MSISDN String"",psOutputs2.GetProperty(""End Number Str""));
			this.SetFieldValue(""End Number MSISDN Numeral"",ToInteger(psOutputs2.GetProperty(""End Number Str"")));
			
		}
	}*/
	
	psInputs 	 = null;
	psOutputs	 = null;
	psInputs1 	 = null;
	psOutputs1	 = null;
	psInputs2 	 = null;
	psOutputs2	 = null;
	bsNMGenerate = null;
	
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
	try
	{
		
		var sErrorCode="""", channel="""", ordFlg="""", rowId="""", SRC_ID="""", S_CAMP_CON_ID="""";
		var sErrorMsg="""", sPRConId="""", sConId="""",EligibilityCheckFlg="""", ModifyOrderFlg="""";
		this.ActivateField(""Response Method"");
		//this.ActivateField(""STC Order Created Flag"");
		channel = this.GetFieldValue(""Response Method"");
		//ordFlg = this.GetFieldValue(""STC Order Created Flag"");
		if(channel == ""Email"")// && ordFlg == """")
		{
			this.ActivateField(""Id"");
			this.ActivateField(""SRC_ID"");
			this.ActivateField(""Treatment Id"");
			this.ActivateField(""Response Type"");
			//this.ActivateField(""Offer Name"");
			//this.ActivateField(""STC Order Created Flag"");
			//this.SetFieldValue(""STC Order Created Flag"", ""Y"");
			//this.WriteRecord();
			this.ActivateField(""S_CAMP_CON_ID"");
			this.ActivateField(""Response Method"");
			this.ActivateField(""PRSP_CON_ID"");
			this.ActivateField(""PR_CON_ID"");
			rowId = this.GetFieldValue(""Id"");
			SRC_ID = this.GetFieldValue(""SRC_ID"");
			S_CAMP_CON_ID = this.GetFieldValue(""S_CAMP_CON_ID"");
			sPRConId=this.GetFieldValue(""PRSP_CON_ID"");
			sConId=this.GetFieldValue(""PR_CON_ID"");
			//var rResponseType = this.GetFieldValue(""Response Type"");
			//var offer = this.GetFieldValue(""Offer Name"");
			//var treatment = this.GetFieldValue(""Response Method"");
			//var rResponseLOV = TheApplication().InvokeMethod(""LookupValue"",""COMM_RESPONSE_TYPE"",""Subscribe to List"");
			//if ( rResponseType == rResponseLOV )
		    //var BSCmpAppr = TheApplication().GetService(""Campaign Approval Process"");
					
			var ISPuts:PropertySet=TheApplication().NewPropertySet();
			var OSPUts:PropertySet=TheApplication().NewPropertySet();
			ISPuts.SetProperty(""ProcessName"",""STC Email Campaign Eligibility WF"");
            ISPuts.SetProperty(""CampId"",SRC_ID);
			//ISPuts.SetProperty(""vRowId"",rowId);
			//ISPuts.SetProperty(""CampConId"",S_CAMP_CON_ID);
			ISPuts.SetProperty(""PrConId"",sPRConId);
			ISPuts.SetProperty(""ContactId"",sConId);
			//BSCmpAppr.InvokeMethod(""CheckDupMail"",ISPuts,OSPUts);
			var wfm1:Service = TheApplication().GetService(""Workflow Process Manager"");
			wfm1.InvokeMethod(""RunProcess"",ISPuts,OSPUts);
			EligibilityCheckFlg = OSPUts.GetProperty(""EligibilityCheckFlg"");
			ModifyOrderFlg = OSPUts.GetProperty(""ModifyOrderFlg"");
			sErrorCode = OSPUts.GetProperty(""Error Code"");
			sErrorMsg = OSPUts.GetProperty(""Error Message"");
			
			if(ModifyOrderFlg == ""Y"")
			{
				var Inputs:PropertySet = TheApplication().NewPropertySet();
				var Outputs:PropertySet = TheApplication().NewPropertySet();
				
				Inputs.SetProperty(""ProcessName"",""STC Campaign Email Response Trigger WF"");
				Inputs.SetProperty(""Object Id"",rowId);
				Inputs.SetProperty(""vTreatmentType"",channel);
				Inputs.SetProperty(""vCampaignId"",S_CAMP_CON_ID);
				//Inputs.SetProperty(""vOfferName"",offer);
				Inputs.SetProperty(""vSRC_ID"",SRC_ID);
	
				var wfm:Service = TheApplication().GetService(""Workflow Process Manager"");
				wfm.InvokeMethod(""RunProcess"",Inputs,Outputs);
				
				sErrorCode = Outputs.GetProperty(""Error Code"");
				sErrorMsg = Outputs.GetProperty(""Error Message"");
				
				if(sErrorMsg == ""Success"")
				{
					this.SetFieldValue(""STC Order Created Flag"", ""Y"");
				}
				/*if(sErrorMsg != ""Success"" || sErrorMsg != """")
				{
					this.SetFieldValue(""Status"",""ModifyError"");
				}*/					

			}//end ofif (EligibilityCheckFlg =="" Y"")
			if(sErrorMsg != ""Success"")
			{
					var eInput:PropertySet = TheApplication().NewPropertySet();
					var eOutput:PropertySet = TheApplication().NewPropertySet();
					var CallMessageHandler:Service = TheApplication().GetService(""STC Generic Error Handler""); 
					eInput.SetProperty(""Error Code"", sErrorCode);
					eInput.SetProperty(""Error Message"", sErrorMsg);
					eInput.SetProperty(""Object Name"", ""Response"");
					eInput.SetProperty(""Object Type"", ""Buisness Component"");
					eInput.SetProperty(""Siebel Message Request Text"", SRC_ID);
					eInput.SetProperty(""Siebel Message Response Text"", S_CAMP_CON_ID);
					CallMessageHandler.InvokeMethod(""Log Message"", eInput, eOutput);	
					this.SetFieldValue(""Status"",""ModifyError"");
					this.SetFieldValue(""ERROR MSG"", sErrorMsg);
					//this.SetFieldValue(""STC Order Created Flag"",""Y"");
					
					
			}//end of else
			if(EligibilityCheckFlg == ""N"")
			{
				return(CancelOperation); //Dont create response if not eligible or modify order error
			}

			
		}//End of if(channel == ""Email"" && ordFlg == """")
		return(ContinueOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		wfm = null;
		Outputs = null;
		Inputs = null;
		rowId = null;
		channel = null;
	}
	return (ContinueOperation);
}
function BusComp_PreInvokeMethod (MethodName)
{
	var Inputs;
	var Outputs;
	var appObj;
//	try
//	 {
	  appObj=TheApplication();
	  Inputs = appObj.NewPropertySet();
	  Outputs = appObj.NewPropertySet();
	   switch(MethodName)
		{   
	          case ""SubmitPayment"":
	          {
	           	SubmitPayment(Inputs,Outputs);
				return (CancelOperation);
			    break;
			  }
			  default:
			    break;
		 }
		return (ContinueOperation);
//	   }
//	 catch(e)
//		{
//			throw(e.toString());
//		}
//	 finally
//		{
		Inputs = null;
		Outputs = null;
		appObj = null;
//		}
}
function BusComp_PreWriteRecord ()
{
var sTansId;
var App = TheApplication();
var ActiveView = App.ActiveViewName();
if(ActiveView == """" || ActiveView == null)
	ActiveView = ""NoView"";

	if(ActiveView != ""NoView"" && ActiveView != ""STC Business Prepaid Registration View"")
	{
		try
		{
			sTansId =this.GetFieldValue(""Reference Number"");
			this.ActivateField(""STC Payment Sub Channel"");//SME/Enterprise Voucher Automation
			var sSubChannel = this.GetFieldValue(""STC Payment Sub Channel"");//09122014:SME/Enterprise Voucher Automation
			//if(sTansId =="""")
			if(sTansId =="""" && sSubChannel != ""CRMVoucher"")//SME/Enterprise Voucher Automation
			{
				App.RaiseErrorText(""Transaction Id# is a required number"");
			}
		
			return (ContinueOperation);
		}
		catch(e)
		{
		throw(e);
		}
		finally
		{}
	}
}
function BusComp_WriteRecord ()
{
	try
	{
		var AccId = """";
		var ParAccId = """";
		var App = TheApplication();
		var Paymentid = this.GetFieldValue(""Id"");
		var ServiceReqBC = App.GetBusObject(""Service Request"").GetBusComp(""Service Request"");
		var CurrView = TheApplication().ActiveViewName();
		if(CurrView == """" || CurrView == null)
			CurrView = ""NoView"";

		//if(CurrView != ""STC Billing Account Payments View"")
		if(CurrView != ""NoView"" && CurrView != ""STC Billing Account Payments View"" && CurrView != ""STC Business Prepaid Registration View"")
		{
			var SRId = this.ParentBusComp().GetFieldValue(""Id"");
			
			if(SRId != """" || SRId != ""No Match Row Id"")
			{
				with(ServiceReqBC)
				{
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchSpec(""Id"",SRId);
					ExecuteQuery(ForwardOnly);
					var IsSRRec = FirstRecord()
					if(IsSRRec)
					{
						AccId = GetFieldValue(""Account Id"");
                  	}
				}// end of with Service Request BC
			
				var AccountBC = App.GetBusObject(""STC Service Account"").GetBusComp(""CUT Service Sub Accounts"");
				with(AccountBC)
				{
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchSpec(""Id"",AccId);
					ExecuteQuery(ForwardOnly);
					var IsAccRec = FirstRecord()
					if(IsSRRec)
					{
						ParAccId = GetFieldValue(""Parent Account Id"");
			     	}
				}//with(AccountBC)
			}// end of 	if(SRId != """" || SRId != ""No Match Row Id"")
		
			with(this)
			{
				InvokeMethod(""SetAdminMode"",""TRUE"");
				ActivateField(""STC Link Account ID"");
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(""Id"",Paymentid);
				ExecuteQuery(ForwardBackward);	
				var PayRec = FirstRecord()
				if(PayRec)
					{
						SetFieldValue(""STC Link Account ID"",ParAccId);
						WriteRecord();
					}
			}
		}// end of if ViewName	
	}
	catch (e)
	{
		throw(e);
		
	}
	finally
	{
	}
}
function SubmitPayment(Inputs,Outputs)
{
var appObj;
var PayId;
var psiPS;
var psoPS;
var svcbsService;

//	try
//	{
		appObj = TheApplication();
		with(this)
			{		
	            WriteRecord();
	            //Added below code for the SME/Enterprise voucher automation
	            ActivateField(""STC Payment Sub Channel"");
	            ActivateField(""STC Voucher Id"");
	            ActivateField(""Payment Amount"");
	            ActivateField(""Reference Number"");
	            var sBalAmnt = """";
	            var sUsedAmnt = """";
	            var sVoucherId = """";
	            var sTansId = """";
	            var sSubChannel = GetFieldValue(""STC Payment Sub Channel"");
	            var sDesAmnt = GetFieldValue(""Payment Amount"");	
	            if(sSubChannel == ""CRMVoucher""){
	            	sTansId = GetFieldValue(""Reference Number"");
	            	if(sTansId == """"){
						appObj.RaiseErrorText(""Transaction Id# is a required number"");
					}//endif sTansId
	            	sVoucherId = GetFieldValue(""STC Voucher Id"");
	            	var sVoucherBO = TheApplication().GetBusObject(""STC Data Voucher BO"");
	            	var sVoucherBC = sVoucherBO.GetBusComp(""STC Voucher Management"");
	            	with(sVoucherBC){
	            		ActivateField(""Balance Amount"");
	            		ActivateField(""Used Amount"");	            		
	            		ClearToQuery();
	            		SetViewMode(AllView);
	            		SetSearchSpec(""Id"",sVoucherId);
	            		ExecuteQuery(ForwardOnly);
	            		var IsVoucherRec = FirstRecord();
	            		if(IsVoucherRec){
	            			sBalAmnt = GetFieldValue(""Balance Amount"");
	            			sUsedAmnt = GetFieldValue(""Used Amount"");		            			            				
	            		}//endif
	            		//var sDesiredAmnt = TheApplication().GetProfileAttr(""SMEVoucherDesiredAmnt"");
	            		if(ToNumber(sDesAmnt)>ToNumber(sBalAmnt))
	            			TheApplication().RaiseErrorText(""Insufficient credit in selected voucher"");
	            		/*var sFinalBalAmnt = ToNumber(sBalAmnt)- ToNumber(sDesAmnt);
	            		var sFinalUsedAmnt = ToNumber(sUsedAmnt)+ ToNumber(sDesAmnt);	            		
	            		SetFieldValue(""Balance Amount"",sFinalBalAmnt);
	            		SetFieldValue(""Used Amount"",sFinalUsedAmnt);
	            		sVoucherBC.WriteRecord();*/
	            	}//endwith sVoucherBC
	            }
	            //Added above code for the SME/Enterprise voucher automation
	            PayId =GetFieldValue(""Id"");
	            psiPS = appObj.NewPropertySet();
				psoPS = appObj.NewPropertySet();
				svcbsService = appObj.GetService(""Workflow Process Manager"");
				psiPS.SetProperty(""ProcessName"", ""STC Send Bill Payment WF"");
				psiPS.SetProperty(""Object Id"",PayId);
				//SME/Enterprise voucher automation below
				//psiPS.SetProperty(""BalanceAmount"",sBalAmnt);
				//psiPS.SetProperty(""UsedAmount"",sUsedAmnt);
				psiPS.SetProperty(""VoucherId"",sVoucherId);
				psiPS.SetProperty(""DesiredAmount"",sDesAmnt);
				psiPS.SetProperty(""PaySubChannel"",sSubChannel);
				//SME/Enterprise voucher automation above
				svcbsService.InvokeMethod(""RunProcess"", psiPS, psoPS);
				
			}
//	}
//	catch(e)
//	{
//	throw(e.toString());//SME/Enterprise voucher automation
	//throw(e);
//	}
//	finally
//	{
	psiPS = null;
	psoPS = null;
	svcbsService = null;
	appObj = null;
//	}
}
function SubmitPayment(Inputs,Outputs)
{
var appObj;
var PayId;
var psiPS;
var psoPS;
var svcbsService;

//	try
//	{
		appObj = TheApplication();
		with(this)
			{		
	            WriteRecord();
	            //Added below code for the SME/Enterprise voucher automation
	            ActivateField(""STC Payment Sub Channel"");
	            ActivateField(""STC Voucher Id"");
	            ActivateField(""Payment Amount"");
	            ActivateField(""Reference Number"");
				ActivateField(""Comments"");
	            var sBalAmnt = """";
	            var sUsedAmnt = """";
	            var sVoucherId = """";
	            var sTansId = """";
	            var sSubChannel = GetFieldValue(""STC Payment Sub Channel"");
	            var sDesAmnt = GetFieldValue(""Payment Amount"");	
				var com = GetFieldValue(""Comments"");
	            if(sSubChannel == ""CRMVoucher""){
	            	sTansId = GetFieldValue(""Reference Number"");
	            	if(sTansId == """"){
						appObj.RaiseErrorText(""Transaction Id# is a required number"");
					}//endif sTansId
	            	sVoucherId = GetFieldValue(""STC Voucher Id"");
	            	var sVoucherBO = TheApplication().GetBusObject(""STC Data Voucher BO"");
	            	var sVoucherBC = sVoucherBO.GetBusComp(""STC Voucher Management"");
	            	with(sVoucherBC){
	            		ActivateField(""Balance Amount"");
	            		ActivateField(""Used Amount"");	            		
	            		ClearToQuery();
	            		SetViewMode(AllView);
	            		SetSearchSpec(""Id"",sVoucherId);
	            		ExecuteQuery(ForwardOnly);
	            		var IsVoucherRec = FirstRecord();
	            		if(IsVoucherRec){
	            			sBalAmnt = GetFieldValue(""Balance Amount"");
	            			sUsedAmnt = GetFieldValue(""Used Amount"");		            			            				
	            		}//endif
	            		//var sDesiredAmnt = TheApplication().GetProfileAttr(""SMEVoucherDesiredAmnt"");
	            		if(ToNumber(sDesAmnt)>ToNumber(sBalAmnt))
	            			TheApplication().RaiseErrorText(""Insufficient credit in selected voucher"");
	            		/*var sFinalBalAmnt = ToNumber(sBalAmnt)- ToNumber(sDesAmnt);
	            		var sFinalUsedAmnt = ToNumber(sUsedAmnt)+ ToNumber(sDesAmnt);	            		
	            		SetFieldValue(""Balance Amount"",sFinalBalAmnt);
	            		SetFieldValue(""Used Amount"",sFinalUsedAmnt);
	            		sVoucherBC.WriteRecord();*/
	            	}//endwith sVoucherBC
	            }
	            //Added above code for the SME/Enterprise voucher automation
	            PayId =GetFieldValue(""Id"");
	            psiPS = appObj.NewPropertySet();
				psoPS = appObj.NewPropertySet();
				svcbsService = appObj.GetService(""Workflow Process Manager"");
				psiPS.SetProperty(""ProcessName"", ""STC Send Bill Payment WF"");
				psiPS.SetProperty(""Object Id"",PayId);
				psiPS.SetProperty(""Com"",com);
				//SME/Enterprise voucher automation below
				//psiPS.SetProperty(""BalanceAmount"",sBalAmnt);
				//psiPS.SetProperty(""UsedAmount"",sUsedAmnt);
				psiPS.SetProperty(""VoucherId"",sVoucherId);
				psiPS.SetProperty(""DesiredAmount"",sDesAmnt);
				psiPS.SetProperty(""PaySubChannel"",sSubChannel);
				//SME/Enterprise voucher automation above
				svcbsService.InvokeMethod(""RunProcess"", psiPS, psoPS);
				
			}
//	}
//	catch(e)
//	{
//	throw(e.toString());//SME/Enterprise voucher automation
	//throw(e);
//	}
//	finally
//	{
	psiPS = null;
	psoPS = null;
	svcbsService = null;
	appObj = null;
//	}
}
function BusComp_NewRecord ()
{
	var sView = TheApplication().ActiveViewName();
	if(sView == ""STC Order Entry - Line Items APN Details"")
	{
		WriteRecord();
	}
}
function BusComp_SetFieldValue (FieldName)
{
	try
	{
		var sView = TheApplication().ActiveViewName();
		var sIPTYPE = """",sLANSubnet="""";
		switch(FieldName)
		{
			case ""STC LAN Subnet"": 
			if(sView == ""STC Order Entry - Line Items APN Details"")
			{
				sIPTYPE = GetFieldValue(""IP Type"");
				sLANSubnet = GetFieldValue(""STC LAN Subnet"");
				if(sLANSubnet == ""Yes"" && sIPTYPE != ""Dynamic"")
				{
					SetFieldValue(""IP Type"", ""Dynamic"");
					WriteRecord();
				}
			}
			break;
			
			case ""IP Type"": 
			if(sView == ""STC Order Entry - Line Items APN Details"")
			{
				sIPTYPE = GetFieldValue(""IP Type"");
				sLANSubnet = GetFieldValue(""STC LAN Subnet"");
				if(sIPTYPE == ""Static"" && sLANSubnet == ""Yes"")
				{
					SetFieldValue(""IP Type"", ""Dynamic"");
					WriteRecord();
				}
			}
			break;

			default : 
			break;
		}
		return (ContinueOperation);
	}
	catch(e)
	{
	}
	finally
	{
	} 
}
function BusComp_NewRecord ()
{
return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{
this.ClearToQuery();
this.ExecuteQuery();
return (ContinueOperation);
}
"//Your public declarations go here...  
var sNewRec = """"; //[RUTUJA:17Aug2020:SelfCarePortalAdmin]
"
function BusComp_NewRecord ()
{
sNewRec = ""Y""; //[RUTUJA:17Aug2020:SelfCarePortalAdmin]
}
function BusComp_PreInvokeMethod (MethodName)
{
var sMSISDN,sBusTel1,sEmail,Abo,Abc,sType,CR;
try
	{
	 if(MethodName == ""MakePrimary"")
		{
	    Abo = TheApplication().GetBusObject(""STC Billing Account"");
	    Abc = Abo.GetBusComp(""CUT Invoice Sub Accounts"");
	    sType = this.ParentBusComp().GetFieldValue(""Type"");
	    //var CR = this.GetFieldValue(""CR Number"");
	    if(sType==""Individual"")
	    {
	    TheApplication().RaiseErrorText(""MakePrimary is not allowed for Individual""); 
	    } 
	    
	    
	    if((sType == ""Corporate"" || sType == ""SME"") && MethodName == ""MakePrimary"")
           {
	     with(Abc) 
	        { 
	         SetViewMode(AllView); 
	       	 ClearToQuery(); 
	         SetSearchSpec(""Parent Account Id"",this.GetFieldValue(""Customer Id""));
	         ExecuteQuery(ForwardOnly);
	       if(CountRecords() == 0)
		      {
		      TheApplication().RaiseErrorText("" Please create a Billing Account before making an Administrator Primary"");
		      } 
		     }
		   } 
		sMSISDN = this.GetFieldValue(""MSISDN"");
		sBusTel1 = this.GetFieldValue(""STC Business Tel1"");
		sEmail= this.GetFieldValue(""STC Email"");
		if(sMSISDN == """")
	        {
	           TheApplication().RaiseErrorText(""MSISDN is mandatory for a record to make primary "");
	        }
	   else if(sEmail == """")
	        {
	           TheApplication().RaiseErrorText(""Email is mandatory for a primary admin record"");
	        }
	   else if(sBusTel1 == """")
	        {
	           TheApplication().RaiseErrorText(""Business Tel(1) is mandatory for a primary admin record"");
	        }
	        
	        //Praveen//
	        /*else if(CR == """")
	        {
	           TheApplication().RaiseErrorText(""CPR Number is Required Field.Please Enter CPR Details"");
	        }*/ 
	   else
	    {
	         this.WriteRecord();
			  MakePrimary();
		  return (CancelOperation);
		}
	  }
	}
catch(e)
{
throw(e);
}
finally
{
Abc = null;
Abo = null;
}
return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
//var sErrorMsg,sErrorCode;
try
{
	/*if(FieldName == ""STC Email"")
	{ 
           if(FieldValue != """" && FieldValue != null)
           {
				TheApplication().RaiseErrorText(""Primary Admin Email is a required field.  Please enter a value for the field."");
			}
	}*/
	var sActViewName = TheApplication().ActiveViewName();
	if(sActViewName == ""STC Account Administrators View""){//Added for CIO Software update SD
	
	if(FieldName == ""STC Business Tel1"")
	{ 
           if(FieldValue != """" && FieldValue != null)
           {
				if(!isNaN(FieldValue))
				{
					if(FieldValue.length < 8)
					{
						TheApplication().RaiseErrorText(""Tel No-Business(1) should be minimum of 8 digit."");
					}
				}
				else
				{	
					TheApplication().RaiseErrorText(""Numeric Value should be entered for Tel No-Business(1)."");
				}
			}
			//else
			//{
			//		TheApplication().RaiseErrorText(""Tel No-Business(1) is a required field.  Please enter a value for the field."");
			//}
	}
		if(FieldName == ""STC Business Tel2"") 
		{
		if(FieldValue != """" && FieldValue != null)
			{
				if(!isNaN(FieldValue))
				{
					if(FieldValue.length < 8)
					{
					TheApplication().RaiseErrorText(""Business Fixed Tel no.(2) should be minimum of 8 digit."");
					}
				}
				else
				{
					TheApplication().RaiseErrorText(""Numeric Value should be entered forBusiness Fixed Tel no.(2)."");
				}				
			}
		}
	
	if(FieldName == ""Fax"")
	{
	if(FieldValue != """" && FieldValue != null)
			{
				if(!isNaN(FieldValue))
				{
					if(FieldValue.length < 8)
					{
					TheApplication().RaiseErrorText(""Fax Number should be  minimum of 8 digits."");
					}
				}
				else
				{
				TheApplication().RaiseErrorText(""Fax Number should be Numeric."");	
				}
			}
	}
	if(FieldName == ""MSISDN"")
	{
	if(FieldValue != """" && FieldValue != null)
			{
				if(!isNaN(FieldValue))
				{
					var bhNumb = FieldValue.indexOf(""973"", 0);
					if (bhNumb == 0)
					{
						if(FieldValue.length != 11)
						{
						TheApplication().RaiseErrorText(""MSISDN should be of 11 digits.""); 
						}
					}
				}
				else
				{
				TheApplication().RaiseErrorText(""MSISDN should be Numeric."");	
				}
			}
	}
/*Moved the below code to Pre_Write Record ---
// Kiran below code written for CPR Number Validation for SME accounts only
this.ActivateField(""Admin Type"");
this.ActivateField(""Account Type"");
var sType = this.GetFieldValue(""Account Type"");
var sAdminType = this.GetFieldValue(""Admin Type"");

if(FieldName == ""CPR Number"" && sType == ""SME"" && sAdminType == ""Account Administrator"")
	{
	
		if(FieldValue != """" && FieldValue != null)
			{
				if(!isNaN(FieldValue))	
				{
					if(FieldValue.length < 8 || FieldValue.length > 9)
					{
					TheApplication().RaiseErrorText(""CPR Number Number should be 9 digit value"");
					}
					if(FieldValue.length == 9)
						{
						var sID0 = FieldValue.charAt(0);//a  
             var sID1 = FieldValue.charAt(1); //b
             var sID2 = FieldValue.charAt(2); //c            
             var sID3 = FieldValue.charAt(3);//d
             var sID4 = FieldValue.charAt(4);//e
             var sID5 = FieldValue.charAt(5);//f
             var sID6 = FieldValue.charAt(6);//g
             var sID7 = FieldValue.charAt(7);//h
             
             var sID8 = FieldValue.charAt(8);  //i                   
             var Valid =((sID7*2+sID6*3+sID5*4+sID4*5+sID3*6+sID2*7+sID1*8+sID0*9)%11);
             var Valid1=(11-Valid);
            	}
         
           if(Valid == ""0""|| Valid == ""1"")
           {
           	var SIDNew = ""0"";
           }
           else
           {
           	var SIDNewext = Valid1;
           }
			if(SIDNew != sID8)
			{
				if(SIDNewext != sID8)
				{
					TheApplication().RaiseErrorText(""Please enter proper CPR Number"");
				}
            }
								
				}
				else
				{
				TheApplication().RaiseErrorText(""CPR Number should be Numeric"");	
				}
			}
	}*/	
	
	
	}//endif sActViewName	
  }
catch(e)
{
throw(e);
}
finally
{}			
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
var appObj;
	try
	{
	var sActViewName = TheApplication().ActiveViewName();
	var SIDNew;
	var SIDNewext; 
	if(sActViewName == ""STC Account Administrators View""){
      
        appObj = TheApplication();        
		//var sType = this.ParentBusComp().GetFieldValue(""Type"");
		//var CR = this.GetFieldValue(""CR Number"");
		this.ActivateField(""Password""); 
		this.ActivateField(""Account Type"");
		var Pass =this.GetFieldValue(""Password"");
		var AdminType = this.GetFieldValue(""Account Type""); 
		var Id= this.GetFieldValue(""Id"");
		//this.WriteRecord(); 
		if((AdminType ==""SME"" || AdminType==""Corporate"") && Pass =="""") 	
			{
	     	
		TheApplication().RaiseErrorText(""Password is Required for Corporate and SME."");

		}
		// Kiran below code written for CPR Number Validation for SME accounts only
		this.ActivateField(""Admin Type"");
		this.ActivateField(""Account Type"");
		var sType = this.GetFieldValue(""Account Type"");
		var sAdminType = this.GetFieldValue(""Admin Type"");
		//CIO Software SD 15032014 below 
		this.ActivateField(""GCC Country Code"");
		this.ActivateField(""CPR Number"");		
		var sID = this.GetFieldValue(""CPR Number"");	
		var sGCCCountryCode = this.GetFieldValue(""GCC Country Code"");	
		if(sID == """"){
			TheApplication().RaiseErrorText(""Please provide CPR/GCC Number."");
		}
		if(sGCCCountryCode == """"){
			TheApplication().RaiseErrorText(""GCC Country is Required."");	
		}
		var sErrorMsg = """";
		var sErrorCode = """";
		if(sGCCCountryCode != ""BH""){
			var sBsValidateGCCId = TheApplication().GetService(""STC New Customer Validation"");
			var sOutps = TheApplication().NewPropertySet();
			var sInps = TheApplication().NewPropertySet();
			sInps.SetProperty(""GCCId"",sID);
			sInps.SetProperty(""GCCCountryCode"",sGCCCountryCode);
			sInps.SetProperty(""sErrorMsg"",sErrorMsg);
			sInps.SetProperty(""sErrorCode"",sErrorCode);
			sBsValidateGCCId.InvokeMethod(""ValidateGCCId"",sInps,sOutps);								
			sErrorMsg = sOutps.GetProperty(""sErrorMsg"");
			if(sErrorMsg != """")
				TheApplication().RaiseErrorText(sErrorMsg);	
		}//endif sGCCCountryCode != ""BH""
		else{
		//CIO Software SD 15032014 above
		//if(FieldName == ""CPR Number"" && sType == ""SME"" && sAdminType == ""Account Administrator"")
		if((sType == ""SME"" || sType == ""Corporate"")&& sAdminType == ""Account Administrator""){//Added ""Corporate"" for CIO Software Update SD
			
				if(sID != """" && sID != null)
					{
						if(!isNaN(sID))	
						{
							if(sID.length < 8 || sID.length > 9)
							{
							TheApplication().RaiseErrorText(""CPR Number Number should be 9 digit value"");
							}
							if(sID.length == 9)
								{
								var sID0 = sID.charAt(0);//a  
		             var sID1 = sID.charAt(1); //b
		             var sID2 = sID.charAt(2); //c            
		             var sID3 = sID.charAt(3);//d
		             var sID4 = sID.charAt(4);//e
		             var sID5 = sID.charAt(5);//f
		             var sID6 = sID.charAt(6);//g
		             var sID7 = sID.charAt(7);//h
		             
		             var sID8 = sID.charAt(8);  //i                   
		             var Valid =((sID7*2+sID6*3+sID5*4+sID4*5+sID3*6+sID2*7+sID1*8+sID0*9)%11);
		             var Valid1=(11-Valid);
		            	}
		         
		           if(Valid == ""0""|| Valid == ""1"")
		           {
		           		SIDNew = ""0"";
		           }
		           else
		           {
		           		SIDNewext = Valid1;
		           }
					if(SIDNew != sID8)
					{
						if(SIDNewext != sID8)
						{
							TheApplication().RaiseErrorText(""Please enter proper CPR Number"");
						}
		            }
										
						}
						else
						{
						TheApplication().RaiseErrorText(""CPR Number should be Numeric"");	
						}
					}
			}	
		}//endesle sGCCCountryCode != ""BH"" //CIO
	}//endif  sActViewName

	//return (ContinueOperation);
	}
	catch(e)
	{
	throw(e); 
	}
	finally
	{
		//appObj = null;	
	} 
	return (ContinueOperation);	
}
function MakePrimary()
{
	var psOutRefresh,psInRefresh,sSpec,svcbsRefresh,psInputs,psOutputs;
	var appObj,svcBusSrv,isRecord,sMSISDN,sCorpAdminId,sCustId,sCorpAdminBO,sCorpAdminBC;
	try
	{
	sMSISDN = this.GetFieldValue(""MSISDN"");
		if(sMSISDN == """")// && this.GetFieldValue(""MSISDN"") == null)
	{
	TheApplication().RaiseErrorText(""MSISDN is mandatory for a record to make primary "");
	}
else
{		
		appObj = TheApplication();
		 sCorpAdminId = this.GetFieldValue(""Id"");
		 //sCustId =  this.GetFieldValue(""Customer Id"");
		 sCorpAdminBO = appObj.GetBusObject(""Account"");
		 sCorpAdminBC = sCorpAdminBO.GetBusComp(""STC Account Administrators"");
		 with(sCorpAdminBC)
		{
		  	ActivateField(""Primary"");
		    ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(""Customer Id"", this.GetFieldValue(""Customer Id""));
			ExecuteQuery(ForwardOnly);
			//isRecord = FirstRecord();
	        if(FirstRecord())
			{
			   isRecord = FirstRecord();
			    while(isRecord)
			    {	
					if(sCorpAdminId == sCorpAdminBC.GetFieldValue(""Id""))
					{
						SetFieldValue(""Primary"",""Y"");
					}
						else
						{
						SetFieldValue(""Primary"",""N"");
						}						
				isRecord = NextRecord();
				}
			}
		}
	//To Refresh BC 
		 psInRefresh = appObj.NewPropertySet();
		 psOutRefresh = appObj.NewPropertySet();
	     sSpec = ""[Customer Id] = '"" + this.GetFieldValue(""Customer Id"")  + ""'"";
		 svcbsRefresh = appObj.GetService(""SIS OM PMT Service"");
		 psInRefresh.SetProperty(""Business Object Name"", ""Account"");
		 psInRefresh.SetProperty(""Business Component Name"", ""STC Account Administrators"");
		 psInRefresh.SetProperty(""Search Specification"", sSpec);
		 svcbsRefresh.InvokeMethod(""Refresh Business Component"", psInRefresh, psOutRefresh);

		 with(this)
		 {
		 sMSISDN = GetFieldValue(""MSISDN"");
		 sCorpAdminId = GetFieldValue(""Id"");
		 }
		 psInputs = appObj.NewPropertySet();
		 with(psInputs)
		 {
		 SetProperty(""MSISDN"", sMSISDN);
		 SetProperty(""CorpAdminId"", sCorpAdminId); 
		 }
		 	with(appObj)
		{
			psOutputs = NewPropertySet();
			svcBusSrv = GetService(""Workflow Process Manager"");
		}
		with(psInputs)
		{
			SetProperty(""Object Id"",this.GetFieldValue(""Customer Id"")); 
			SetProperty(""ProcessName"", ""STC Account Administrators"");
		}
		svcBusSrv = appObj.GetService(""Workflow Process Manager"");
        svcBusSrv.InvokeMethod(""RunProcess"",psInputs,psOutputs);
		}
	}
	catch(e)
	{
		throw(e);
	}	
	finally
	{
		psInRefresh = null;
		psOutRefresh = null;
		svcbsRefresh = null;
		psInputs = null;
		psOutputs = null;
		svcBusSrv = null;
		sCorpAdminBC = null;
		sCorpAdminBO = null;
		//appObj = null;
		
	}
}
function MakePrimary()
{
	var psOutRefresh,psInRefresh,sSpec,svcbsRefresh,psInputs,psOutputs;
	var appObj,svcBusSrv,isRecord,sMSISDN,sCorpAdminId,sCustId,sCorpAdminBO,sCorpAdminBC;
	try
	{
	sMSISDN = this.GetFieldValue(""MSISDN"");
		if(sMSISDN == """")// && this.GetFieldValue(""MSISDN"") == null)
	{
	TheApplication().RaiseErrorText(""MSISDN is mandatory for a record to make primary "");
	}
else
{		
		appObj = TheApplication();
		 sCorpAdminId = this.GetFieldValue(""Id"");
		 //sCustId =  this.GetFieldValue(""Customer Id"");
		 sCorpAdminBO = appObj.GetBusObject(""Account"");
		 sCorpAdminBC = sCorpAdminBO.GetBusComp(""STC Account Administrators"");
		 with(sCorpAdminBC)
		{
		  	ActivateField(""Primary"");
		    ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(""Customer Id"", this.GetFieldValue(""Customer Id""));
			ExecuteQuery(ForwardOnly);
			//isRecord = FirstRecord();
	        if(FirstRecord())
			{
			   isRecord = FirstRecord();
			    while(isRecord)
			    {	
					if(sCorpAdminId == sCorpAdminBC.GetFieldValue(""Id""))
					{
						SetFieldValue(""Primary"",""Y"");
					}
						else
						{
						SetFieldValue(""Primary"",""N"");
						}						
				isRecord = NextRecord();
				}
			}
		}
	//To Refresh BC 
		 psInRefresh = appObj.NewPropertySet();
		 psOutRefresh = appObj.NewPropertySet();
	     sSpec = ""[Customer Id] = '"" + this.GetFieldValue(""Customer Id"")  + ""'"";
		 svcbsRefresh = appObj.GetService(""SIS OM PMT Service"");
		 psInRefresh.SetProperty(""Business Object Name"", ""Account"");
		 psInRefresh.SetProperty(""Business Component Name"", ""STC Account Administrators"");
		 psInRefresh.SetProperty(""Search Specification"", sSpec);
		 svcbsRefresh.InvokeMethod(""Refresh Business Component"", psInRefresh, psOutRefresh);

		 with(this)
		 {
		 sMSISDN = GetFieldValue(""MSISDN"");
		 sCorpAdminId = GetFieldValue(""Id"");
		 }
		 psInputs = appObj.NewPropertySet();
		 with(psInputs)
		 {
		 SetProperty(""MSISDN"", sMSISDN);
		 SetProperty(""CorpAdminId"", sCorpAdminId); 
		 }
		 	with(appObj)
		{
			psOutputs = NewPropertySet();
			svcBusSrv = GetService(""Workflow Process Manager"");
		}
		with(psInputs)
		{
			SetProperty(""Object Id"",this.GetFieldValue(""Customer Id"")); 
			SetProperty(""ProcessName"", ""STC Account Administrators"");
		}
		svcBusSrv = appObj.GetService(""Workflow Process Manager"");
        svcBusSrv.InvokeMethod(""RunProcess"",psInputs,psOutputs);
		}
	}
	catch(e)
	{
		throw(e);
	}	
	finally
	{
		psInRefresh = null;
		psOutRefresh = null;
		svcbsRefresh = null;
		psInputs = null;
		psOutputs = null;
		svcBusSrv = null;
		sCorpAdminBC = null;
		sCorpAdminBO = null;
		//appObj = null;
		
	}
}
"var sAllowSR=""Y"";
var sAllowSROrder=""Y"";
var sPickMSISDN = ""Y"";
var sNewRecord = ""Y"";"
function AssignSR()
{
	var appObj;
	var sSRId;
	var psInputs;
	var psOutputs;
	var svcbsService;
	var sSubStatus;
	var sSetSubStatus;
	var svcbsRefresh;
	var psInRefresh;
	var psOutRefresh;
	var sSpec;
	
	try
	{
		appObj = TheApplication();
		with(this)
		{	
			//SetFieldValue(""Sub-Status"",appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""In Progress""));
	       var CallTier = GetFieldValue(""INS Sub-Area"");
	       	      	       
	       WriteRecord();
	       
	       			var SRId = GetFieldValue(""Id"");
			ActivateField(""STC SMS Sent"");
			 ActivateField(""STC TT Termination Type"");
			 var TTType = GetFieldValue(""STC TT Termination Type"");
			var SmsSent = GetFieldValue(""STC SMS Sent"");
			if(SmsSent != ""Y"")
			{
					if(TTType == ""Termination"")
					{
					var svcbsServiceOSTerm = appObj.GetService(""Workflow Process Manager"");
					var psiPSOS = appObj.NewPropertySet();
					var psoPSOS = appObj.NewPropertySet();
					psiPSOS.SetProperty(""ProcessName"", ""STC Terminated Account balance WF"");
					psiPSOS.SetProperty(""Object Id"",SRId);
					svcbsServiceOSTerm.InvokeMethod(""RunProcess"", psiPSOS, psoPSOS);
					var sOutstanding = psoPSOS.GetProperty(""OutStandAmout"");
					var NumOutstanding = ToNumber(sOutstanding);
					var Termination = ToNumber(psoPSOS.GetProperty(""Termination""));
					var Outstanding = ToNumber(NumOutstanding) - ToNumber(Termination);
					
						if(NumOutstanding > 0)
						{
							var Msg = ""In order to proceed, kindly clear all termination charges (Outstanding amount:  '"" + Outstanding +""'  Penalty charges:  '"" + Termination +""')   "";
							appObj.RaiseErrorText(Msg);
						}
					}
					var svcbsServiceSMS = appObj.GetService(""Workflow Process Manager"");
					var psiPSSMS = appObj.NewPropertySet();
					var psoPSSMS = appObj.NewPropertySet();
					psiPSSMS.SetProperty(""ProcessName"", ""STC Send SMS SR WF"");
					psiPSSMS.SetProperty(""Object Id"",SRId);
					svcbsServiceSMS.InvokeMethod(""RunProcess"", psiPSSMS, psoPSSMS);
					SetFieldValue(""STC SMS Sent"", ""Y"");
					WriteRecord();
			}
			
	       //if(CallTier == ""Credits Postpaid Voice"" || CallTier == ""Credits Prepaid Voice"" || CallTier == ""Credits Postpaid Broadband"" || CallTier == ""Credits Prepaid Broadband"" || CallTier == ""PromiseToPay"")
	       if(CallTier == ""Postpaid Voice"" || CallTier == ""Prepaid Voice"" || CallTier == ""Postpaid Broadband"" || CallTier == ""Prepaid Broadband"" || CallTier == ""Promise To Pay"")
	       {
				sSRId = GetFieldValue(""Id"");
				psInRefresh = appObj.NewPropertySet();
				psOutRefresh = appObj.NewPropertySet();
				sSpec = ""[Id] = '"" + sSRId  + ""'"";
				svcbsRefresh = appObj.GetService(""SIS OM PMT Service"");
				psInRefresh.SetProperty(""Business Object Name"", ""STC Service Account"");
				psInRefresh.SetProperty(""Business Component Name"", ""Service Request"");
				psInRefresh.SetProperty(""Search Specification"", sSpec);
				svcbsRefresh.InvokeMethod(""Refresh Business Component"", psInRefresh, psOutRefresh);	
	       }
	           
	       else
	       {    
		        sSRId = GetFieldValue(""Id"");
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				svcbsService = appObj.GetService(""Workflow Process Manager"");
				psInputs.SetProperty(""ProcessName"", ""STC SR Assign Workflow"");
				psInputs.SetProperty(""Object Id"",sSRId);
				svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
				
				psInRefresh = appObj.NewPropertySet();
				psOutRefresh = appObj.NewPropertySet();
				sSpec = ""[Id] = '"" + sSRId  + ""'"";
				svcbsRefresh = appObj.GetService(""SIS OM PMT Service"");
				psInRefresh.SetProperty(""Business Object Name"", ""STC Service Account"");
				psInRefresh.SetProperty(""Business Component Name"", ""Service Request"");
				psInRefresh.SetProperty(""Search Specification"", sSpec);
				svcbsRefresh.InvokeMethod(""Refresh Business Component"", psInRefresh, psOutRefresh);
			}			
			
										
		}
	}
	catch(e)
	{
		TheApplication().RaiseErrorText(e.toString());
	}
	finally
	{
		psInputs = null;
		psOutputs = null;
		svcbsService = null;
		psInRefresh = null;
		psOutRefresh = null;
		svcbsRefresh = null;
		appObj = null;
	}
}
"
function BlockRe_selection (OldValue,NewValue)
{
var vBlockedFor;
var psInputs,psOutputs,bsBlockNumber;
var appObj;
	try
	{
		appObj = TheApplication();                 
	    bsBlockNumber = appObj.GetService(""RMS RMS Block Number"") ;
	    psInputs = appObj.NewPropertySet();
	    psOutputs = appObj.NewPropertySet();         
	    vBlockedFor = this.GetFieldValue(""Account Id"");
	    psInputs.SetProperty(""BlockNumber"",NewValue);
	    psInputs.SetProperty(""BlockedFor"",vBlockedFor);
	    psInputs.SetProperty(""ReleaseNumber"",OldValue); // variable set at PreSetFieldValue               
	    bsBlockNumber.InvokeMethod(""BlockNumber"",psInputs,psOutputs);        
 
	}
	catch(e)
	{
		LogException(e);
	}
	finally
	{
		psInputs = null;
	    psOutputs = null;
	    bsBlockNumber = null;
	    appObj = null;
	}
}
"
"
function BusComp_NewRecord ()
{
	sNewRecord = ""N"";
}
"
function BusComp_PreInvokeMethod (MethodName)
{
	try
	 {
	  
	   switch(MethodName)
		{   
	          case ""Submit_SR"":
	          {
	           	SubmitSR();
				return (CancelOperation);
			    break;
			  }	
			  case ""CreatePayment"":
	          {
	           	CreatePayment();
				return (CancelOperation);
			    break;
			  }			    
	          case ""Close SR"":
	          {
	          	SRClose();
	          	return (CancelOperation);
			    break;
			  }
			  case ""SRClose"":
	          {
	          	SRClose();
	          	return (CancelOperation);
			    break;
			  }
			  case ""Assign"":
	          {
	           	AssignSR();
				return (CancelOperation);
			    break;
			  }
			  
			  case ""SendSMS"":
	          {
	           	SendSMS();
				return (CancelOperation);
			    break;
			  }
			  case ""SubmitCreditSR"":
			  {
			  //Added by Navin
			  	SubmitCreditIncreaseSR();
			  	return (CancelOperation);
			    break;
			  } 
			  case ""CreditApprove"":
			  {
			  //Added by Navin
			  	CreditApproveSR();
			  	return (CancelOperation);
			    break;
			  }
			  case ""CreditReject"":
			  {
			  //Added by Navin
			  	CreditRejectSR();
			  	return (CancelOperation);
			    break;
			  }
			  case ""SubmitDunningStatus"":
			  {
			  //Added by Navin
			  	ChangeDunningStatus();
			  	return (CancelOperation);
			    break;
			  }
			  case ""Submit_BillSR"":
			  {
			  	//Added by devender
			  	Submit_BillSR();
			  	return(CancelOperation);
			  	break;
			  }
			  case ""MSISDNChange"":
			  {
			  	//Added by Sree
			  	Submit_MSISDNChangeSR();
			  	return(CancelOperation);
			  	break;
			  }
			  
			  case ""CreditApproveCL"":
			  {
			  	//Added by gjena_281112
			  	CreditApproveSRCL();
			  	return(CancelOperation);
			  	break;
			  }

			  default:
			    break;
		 } 
		return (ContinueOperation);
	  }
	 catch(e)
	 {
		throw(e);
	 }
	 finally
	 {
	
	 }
}
function BusComp_PreNewRecord ()
{
//***********************************************************************************************************//
//Purpose: To check whether Current Billing Account Does not have any Open or Active Service Requests.	   
//Inputs:
//Outputs: A proper Error message will be thrown to user in case of already exising Active SR.
//Created By: Navin Rai
//Release: 
//Date: 17-Nov-2010
////20/01/2011 - Sreejith- commented and shifted few code to PreSetField Value
//*************************************************************************************************************//
	var appObj=null;
	var custType;
	var parentBC=null, parentAcctType;
	var parentAcctId=null;
	var status=null;
	var count;
	var isRecord=null;
	var searchst=null;
	var status1, status2, status3, status4, sCallTier3;
	var serviceBO, serviceBC;
	var billingAccount;
	

	try
	{		
		parentBC = this.ParentBusComp();
		
	   if(parentBC != null)
		{
			appObj = TheApplication();
			count=0;
				with(parentBC)
				{
					ActivateField(""Type"");
					ActivateField(""Id"");
					ActivateField(""Account Type Code"");
					custType = GetFieldValue(""Type"");
					parentAcctId = GetFieldValue(""Id"");
					parentAcctType = GetFieldValue(""Account Type Code"");
				}
				
				if(custType == ""Corporate"" && parentAcctType == ""Billing"")
				{	
			
			//Calling Business Service to validate the CSR:
					var dunningChangeService = appObj.GetService(""STC Corp CSR Validation BS"");
					var input = appObj.NewPropertySet();
					var output = appObj.NewPropertySet();
					dunningChangeService.InvokeMethod(""ValidateCorporateCSR"", input, output);
				
					//####20th Jan 2011 - Sree commented and shifted this code to PreSetField Value ######
					
					/*serviceBO = appObj.GetBusObject(""STC Billing Account"");
					if(serviceBO != null)
					{
					serviceBC = serviceBO.GetBusComp(""Service Request"");
					if(serviceBC != null)
					{
					   with(serviceBC)
					   {						
							ActivateField(""Account Id"");
							ActivateField(""INS Sub-Area"");
							ActivateField(""Status"");
							
							sCallTier3 = appObj.InvokeMethod(""LookupValue"",""SR_AREA"",""Credit Limit Increase"");
							status1 = appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""Open"");
							status2 = appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""In Progress"");
							status3 = appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""Waiting for approval"");
							status4 = appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""Pending"");
							
							if(parentAcctId != null && status1 != null && status2 != null && status3 != null && status4 != null)
							{
								ClearToQuery();
								SetViewMode(AllView);
								
								searchst = ""[Account Id] = '"" + parentAcctId + ""' AND [INS Sub-Area] = '"" + sCallTier3 +""' AND  ( [Status] = '"" + status1 +""' OR [Status] = '"" + status2 +""' OR [Status] = '"" + status3 +""' OR [Status] = '"" + status4 +""' )"";
								SetSearchExpr(searchst);
								ExecuteQuery(ForwardOnly);
								
								count = CountRecords();
								isRecord = FirstRecord();
								if(isRecord)
								{	
									appObj.RaiseErrorText(""There is already an Open or Active SR present for the same Parent Billing Account, can not create new SR!"");
									return (CancelOperation);
								}
							 
							}//end of if(parentAcctId...
						}//end of with(serviceBC)
					}//end of if(serviceBC != null)
					}//end of if(serviceBO != null)
					*/ //####20th Jan 2011 - Sree commented and shifted this code to PreSetField Value ######

				}//end of if(custType == ""Corporate"" && parentAcctType == ""Billing"")
			}//end of (parentBC != null) IF
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		input = null;
		output = null;
		dunningChangeService = null;
		serviceBC=null;
		serviceBO=null;
		parentBC=null;
		appObj = null;
	}
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
var appObj;
var sServiceType;
var sSubscriptionName;
var sSubAccStatus;
var sFisrFourChar;
var vOldMSISDN;
var sRMSNumbo;
var sRMSNumbc;
var vOldSIM;
var sRMSNumberbo;
var sRMSNumberbc;
var sBlockedFor;
var sBlockFor;

//added by navin
var sCallTier3;
var custType, billingType, custSegment;
var parentBC=null;

//Added by sree
	var count;
	var isRecord=null;
	var searchst=null;
	var status1, status2, status3, status4;
	var serviceBO, serviceBC;
	var billingAccount;
	var parentAcctId=null;
	
	try
	{
		//gjena_191212 added the below Code to restrict the CSR team to Create Multiple CL SR
		appObj = TheApplication();
		switch(FieldName)
	    {
 		 case ""INS Sub-Area"":
 	//	 if( ParentBusComp().Name() == ""CUT Service Sub Accounts"" && FieldValue == ""Change of Billing Details"")// suman modified code for WVPN testing
 		 if(FieldValue == ""Change of Billing Details"")
 		 {
	 		ActivateField(""STC CL Login"");
		 	var vlogin=GetFieldValue(""STC CL Login"");
		 	if(vlogin != ""Y"")
		  	{
	 			parentAcctId = GetFieldValue(""Account Id"");
	 			var RecNum=fn_MonthlyClSr(parentAcctId);
	 			RecNum=ToNumber(RecNum);
	 			if(RecNum >= 1)
				{
			 		appObj.RaiseErrorText(""You are not able to Increase OR Decrease the CL More than Once in a Month.Please Raise the SR Next Month."");
				}
			}
		}
 		 var SRArea = appObj.InvokeMethod(""LookupValue"", ""STC_OPEN_SR"", FieldValue);
		 var LOVSRArea = SRArea.substring(0,3);
		 if(LOVSRArea == ""SRO"")
		 {
		 	CheckOpenDDSR();
		 	if(sAllowSR == ""N"")
		 	{
					appObj.RaiseErrorText(""There is already an open SR for Direct Debit"");			}
		 }
			//if (FieldValue == ""Change MSISDN"" || FieldValue == ""Change SIM Card"")
			if (FieldValue == ""Change MSISDN"" || FieldValue == ""Change SIM Card Request"" || ""H/W Replacement"" == FieldValue)
			{	
				if(FieldValue == ""Change MSISDN"")
					{
				this.ParentBusComp().ActivateField(""STC Billing Resolution flag Calc"");
				var vBillRes = this.ParentBusComp().GetFieldValue(""STC Billing Resolution flag Calc"");
				if(vBillRes == ""ON"")
						{	
						appObj.RaiseErrorText(""Change MSISDN is not allowed as a subscriber is in Billing Resolution"");
						}
					}
				CheckOpenOrders();
				if(sAllowSROrder == ""N"")
					appObj.RaiseErrorText(""Change MSISDN or Change SIM or H/W Replacement SR can’t be raised when there are open Orders for this Subscription."");
				CheckOpenSR();								
				if(sAllowSR == ""N"")
					appObj.RaiseErrorText(""There is already an open SR for Changing MSISDN or SIM or H/W Replacement"");				
			}
			
		if (FieldValue == ""Pre-Paid Registration"")
			{
				sServiceType = this.GetFieldValue(""STC New Bill Service Type"");
				if(sServiceType == appObj.InvokeMethod(""LookupValue"", ""STC_BAC_SERVICE_TYPE_STATUS"", ""Postpaid""))
				{
					appObj.RaiseErrorText(""Pre-Paid Registration is NOT allowed for Postpaid Account"");
				}
				var Position = appObj.PositionName();
				var foundPos = appObj.InvokeMethod(""LookupValue"",""STC_PREREGIS"",Position);
				var SubPos = foundPos.substring(0,3);
				
			
			}
			
			
			
    	if (FieldValue == ""Pre-Paid Registration"")
    	  {
    	  

//    	    appObj = TheApplication();
    	    //this.ActivateField(""ID Type"");
    	    //var sSubscriptionName = this.ParentBusComp().GetFieldValue(""Primary Contact STC Type"");
        		var bosr = appObj.ActiveBusObject();
         		var bcsr = bosr.GetBusComp(""CUT Service Sub Accounts"");
   				bcsr.ActivateField(""STC ID #"");
   				this.ActivateField(""Account Status"");
   				var sSubAccStatus = this.GetFieldValue(""Account Status"");
         		sSubscriptionName = bcsr.GetFieldValue(""STC ID #"");
         		var status = bcsr.GetFieldValue(""Account Status"");
         		  
         			if(sSubscriptionName != ""ID Number"" || status == ""Terminated"")
				{
					appObj.RaiseErrorText(""The Account is already Registered"");
				}
         	}	
			
			
			//if (FieldValue == ""Billing Dept Change"")
			if (FieldValue == ""Billing Department Change"")
			{
					this.ActivateField(""STC New Customer Type"");
					var CustType = this.GetFieldValue(""STC New Customer Type"");
					if(CustType == ""Corporate"")
					{
						var Login = TheApplication().LoginName();
						var foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_CORPORATE_CSRS"",Login);
						var foundCSRSubstr = foundCSR.substring(0,3);
						if(foundCSRSubstr != ""CSR"")
						{
						
							appObj.RaiseErrorText(""Sorry! You do not have the privilege to change department of Corporate Accounts"");
						
						}
					}
			}
			
			if (FieldValue == ""Dunning Exclusion"")
			{
					this.ActivateField(""STC New Customer Type"");
					var CustType = this.GetFieldValue(""STC New Customer Type"");
					if(CustType == ""Individual"")
					{
						var Login = TheApplication().LoginName();
						var foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_INDIVIDUAL_CSRS"",Login);
						var foundCSRSubstr = foundCSR.substring(0,3);
						if(foundCSRSubstr != ""CSR"")
						{
						
							appObj.RaiseErrorText(""Sorry! You do not have the privilege to Raise this SR for Individual Accounts"");
						
						}
					}
			}
			
			
			//-->navin
			if (FieldValue == ""Change Dunning Flag Status"")
			{
				parentBC = this.ParentBusComp();
				//sServiceType = this.GetFieldValue(""STC New Bill Service Type"");
				if(parentBC != null)
				{
					custType = parentBC.GetFieldValue(""Type"");
					billingType = parentBC.GetFieldValue(""STC Corporate Type"");
					custSegment = parentBC.GetFieldValue(""STC Contract Category"");
					if(custType != ""Corporate"" || billingType != ""Corporate"" || custSegment != ""Government"")
					{
						appObj.RaiseErrorText(""This SR can only be raised for customers having Customer Type and Billing Type as Corporate and Customer Segment as Government!"");
					}
				}
				//<--navin
			}
			
			if (FieldValue == ""Credit Limit Increase"") //##### code for open SR check - Sree - 20/01/2011
			{							
				parentBC = this.ParentBusComp();
				parentAcctId = parentBC.GetFieldValue(""Id"");
				
				serviceBO = appObj.GetBusObject(""STC Billing Account"");
				if(serviceBO != null)
				{
					serviceBC = serviceBO.GetBusComp(""Service Request"");
					if(serviceBC != null)
					{
					   with(serviceBC)
					   {						
							ActivateField(""Account Id"");
							ActivateField(""INS Sub-Area"");
							ActivateField(""Status"");
							
							sCallTier3 = FieldValue //appObj.InvokeMethod(""LookupValue"",""SR_AREA"",""Credit Limit Increase"");
							status1 = appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""Open"");
							status2 = appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""In Progress"");
							status3 = appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""Waiting for approval"");
							status4 = appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""Pending"");
							
							if(parentAcctId != null && status1 != null && status2 != null && status3 != null && status4 != null)
							{
								ClearToQuery();
								SetViewMode(AllView);
								
								searchst = ""[Account Id] = '"" + parentAcctId + ""' AND [INS Sub-Area] = '"" + sCallTier3 +""' AND  ( [Status] = '"" + status1 +""' OR [Status] = '"" + status2 +""' OR [Status] = '"" + status3 +""' OR [Status] = '"" + status4 +""' )"";
								SetSearchExpr(searchst);
								ExecuteQuery(ForwardOnly);
								
								count = CountRecords();
								isRecord = FirstRecord();
								if(isRecord)
								{	
									appObj.RaiseErrorText(""There is already an Open or Active SR for '"" + sCallTier3 +""' present for the same Parent Billing Account, can not create new SR!"");
									return (CancelOperation);
								}
							 
							}//end of if(parentAcctId...
						}//end of with(serviceBC)
					}//end of if(serviceBC != null)
					}//end of if(serviceBO != null)
				// Sree - 20/01/2011
			//}
			}
		
			//-->Sree-28/01/2011
			if (FieldValue == ""Change Admin MSISDN"")
			{
				parentBC = this.ParentBusComp();
				if(parentBC != null)
				{
				 	var sCustId = parentBC.GetFieldValue(""Parent Account Id"")
				 	var sActAdminBO = appObj.GetBusObject(""Account"");
            		var sActAdminBC = sActAdminBO.GetBusComp(""STC Account Administrators"");                                  
               		with(sActAdminBC)
            			{
								ActivateField(""MSISDN"");
				                SetViewMode(AllView);
				                ClearToQuery();
				                SetSearchSpec(""Customer Id"",sCustId);
				                SetSearchSpec(""Primary"",""Y"");
				                ExecuteQuery(ForwardOnly); 
				                
				                if(FirstRecord())
				                {
				                	this.SetFieldValue(""STC Voucher Denomination"",GetFieldValue(""MSISDN""));	
				                	//this.WriteRecord();
				                }
				          }
				  sActAdminBC = null;
				  sActAdminBO = null; 
				              
				  }
				//<--Sree
			}
			
			// For Contractual Suspend Resume Validation by Dushyant Singh:07Dec12

			if(""Contractual Suspend"" == FieldValue)
			{
				var SetError = """";
				var SetErrorCode = """";
				var vContractBS =   appObj.GetService(""STC Contractual Validation Service"");
				var Inputs		=	TheApplication().NewPropertySet();
				var Outputs		=	TheApplication().NewPropertySet();
				Inputs.SetProperty(""sAId"", this.GetFieldValue(""Account Id""));
				vContractBS.InvokeMethod(""Contractual Validation"", Inputs, Outputs);
				SetError		=	Outputs.GetProperty(""SetError"");
				SetErrorCode	=	Outputs.GetProperty(""SetErrorCode"");
				if(""1"" == SetErrorCode) 
					appObj.RaiseErrorText(SetError);
			}
         	if(""Contractual Resume"" == FieldValue)
			{
				var suspendReason = this.GetFieldValue(""STC Suspension Reason"");
				var vSusReasonLOV = appObj.InvokeMethod(""LookupValue"",""SAP_SO_HEADER_DELIV_BLOCK"",""Suspend Contractual Lines""); 
				if(suspendReason != vSusReasonLOV)
				{
					appObj.RaiseErrorText(""This record is not eligible for contratual resumption"");
				}
			}
	
		
         	break;
         case ""STC New MSISDN"": 
         	{
         		CheckReserved(FieldValue);
         		if(sPickMSISDN == ""N"")
         		{
					appObj.RaiseErrorText(""Selected MSISDN is already reserved for another Customer"");
				}
				else
				{
				
					vOldMSISDN = this.GetFieldValue(""STC New MSISDN"");
				 	sRMSNumbo = appObj.GetBusObject(""RMS NM Number Enquiry"");
            		sRMSNumbc = sRMSNumbo.GetBusComp(""RMS NM Number Enquiry"");                                  
               		with(sRMSNumbc)
            			{
								ActivateField(""Number String"");
								ActivateField(""Record Blocked For"");
				                SetViewMode(AllView);
				                ClearToQuery();
				                SetSearchSpec(""Number String"",FieldValue);
				                ExecuteQuery(ForwardOnly); 
				                 
				                if(FirstRecord())
				                {
				                	sBlockFor = GetFieldValue(""Record Blocked For"");
				       				if (sBlockFor != """" && sBlockFor != null)
				       				{
					               			appObj.RaiseErrorText(""The Selected MSISDN is Reserved for Another Customer (as part of Migration). Please Select Another Number"");
				                    }				                 
				                }
						}
						sRMSNumbo = null;
		      			sRMSNumbo = null;	
					      	
						BlockRe_selection (vOldMSISDN,FieldValue);
					}
				 }
         	break;
         case ""STC New SIM Card Number"":
         		vOldSIM = this.GetFieldValue(""STC New SIM Card Number"");
         		sRMSNumberbo = appObj.GetBusObject(""RMS NM Number Enquiry"");
            	sRMSNumberbc = sRMSNumberbo.GetBusComp(""RMS NM Number Enquiry"");                                  
               		with(sRMSNumberbc)
            			{
								ActivateField(""Num Mstr Number String"");
								ActivateField(""Record Blocked For"");
				                SetViewMode(AllView);
				                ClearToQuery();
				                SetSearchSpec(""Num Mstr Number String"",FieldValue);
				                ExecuteQuery(ForwardOnly); 				                 
				                if(FirstRecord())
				                {
				                	sBlockedFor = GetFieldValue(""Record Blocked For"");
				       				if (sBlockedFor != """" && sBlockedFor != null)
				       				{
					               			appObj.RaiseErrorText(""The Selected SIM is Reserved for Another Customer (as part of Migration). Please Select Another SIM"");
				                    }				                 
				                }
						}
						sRMSNumberbc = null;
		      			sRMSNumberbo = null;
         		BlockRe_selection (vOldSIM,FieldValue);
         		break;
         	//-->AK
         	case ""STC New Customer Type"":
         		if (FieldValue == ""Corporate"")
         		{
         			appObj.RaiseErrorText(""Customer Type cannot be Corparate"");	
         		}
         	break;
			//<--AK 
			
				case ""Status"":
         		if (FieldValue == ""Rejected"" || FieldValue == ""Approved"")
         		{
         		var ActiveView = TheApplication().ActiveViewName();
         		if((ActiveView != ""STC All Service Requests Required Approval"") && (ActiveView != ""STC Service Request Required Info View""))
         		   {
         	  	var sCallTier3 = this.GetFieldValue(""INS Sub-Area"");
    			this.ActivateField(""Owner"");
				this.ActivateField(""STC Rejection Reason"");
         		var sLoginName = appObj.LoginName();
				var sOwnerId = this.GetFieldValue(""Owner"");	
         		var RejReason = this.GetFieldValue(""STC Rejection Reason"");	
				if(sLoginName != sOwnerId)
				{					
				appObj.RaiseErrorText(""You are not authorised to change the status."");
				return(CancelOperation);
				}
         		if(FieldValue == ""Rejected"" && (RejReason == """" || RejReason == null || RejReason == '') && sCallTier3 == ""New"")
						{
						appObj.RaiseErrorText(""Please select Direct Debit Rejection Reason."");
						return(CancelOperation);
						}
         	 	  }
         		    //}	
         		}
         	break;
         	
         case ""STC New Credit Limit"":
			if (FieldValue !="""" || FieldValue !=null)
         	   {
         	   
         	  this.ActivateField(""INS Sub-Area"");
	          var sCallTier3 = this.GetFieldValue(""INS Sub-Area"");
	          this.ActivateField(""Type"");
	          var stype=this.GetFieldValue(""Type"");
              if(sCallTier3 == ""Change of Billing Details"" && stype == ""Individual"")
                {
	 
	          var sNewCLLimit=FieldValue;
	          this.ActivateField(""Billing Account Id"");
              var BillAccId = this.GetFieldValue(""Billing Account Id"");

	           var vCreditScore;
			   var vBillValidationBS = TheApplication().GetService(""STC Credit Limit Updates Rate Plan"");
			   var InpPS = TheApplication().NewPropertySet();
			   var OutPS = TheApplication().NewPropertySet();
			   InpPS.SetProperty(""BillAccId"", BillAccId);
			   vBillValidationBS.InvokeMethod(""Rate Plan"",InpPS,OutPS);
			   vCreditScore = OutPS.GetProperty(""CreditScoreChange"");
		       var vrateplan= ToNumber(vCreditScore) + 10;
			
			   if(sNewCLLimit <= vrateplan)
			      {
			     TheApplication().RaiseErrorText(""You can't decrease the CL below your rataplan"");
			     return(CancelOperation);
			      } 
         	   
         	
			
			   }
			   }
			break;
         	
         	//-->Navin Rai
         	case ""STC New Credit Limit"":
         		/*-->navin rai
         		if(FieldValue != null || FieldValue != """")
         		{	ValidateChildCreditLimit(FieldValue); }
         		else
         		{	appObj.RaiseErrorText(""Desired Credit Limit can not be blank"");		}	
         		*/	
         			this.ActivateField(""INS Sub-Area"");	
         			sCallTier3 = this.GetFieldValue(""INS Sub-Area"");
         			

         			
         			//if(sCallTier3 == ""Change of billing details"")
         			if(sCallTier3 == ""Change of Billing Details"")
         			{
	         		    this.WriteRecord();
				        this.InvokeMethod(""RefreshBusComp"");
				        this.InvokeMethod(""RefreshRecord"");
				        this.ExecuteQuery(ForwardBackward);
         			}	
         	break;
			//<--Navin Rai       		
         default :
         		break;
	}
	return (ContinueOperation);
}
catch(e)
{
	throw(e);
}
finally
{
	sRMSNumbc = null;
	sRMSNumbo = null;
	sRMSNumberbc = null;
	sRMSNumberbo = null;
	appObj = null;
} 
}
function BusComp_PreWriteRecord ()
{
	var sSubStatus;
	var sSetSubStatus;
	var appObj;
	var sIDType;
	var sIDNum;
	var psDUPInputs;
	var psDUPOutputs;
	var bsDupIDCheck;
	var sErrorMsg;
	var sErrorCode;
	var bDupIDCheckFlag;
	var vCreditScore = """";
	
	
	try
	{
		appObj = TheApplication();
		sSubStatus = appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""Unassigned"");
		sSetSubStatus = appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""In Progress"");
	  	with(this)
		{
			if(GetFieldValue(""Sub-Status"") == sSubStatus)
		    {
		   		SetFieldValue(""Sub-Status"",sSetSubStatus);
			}
		}
		

	  }//try
	catch(e)
	{
		throw(e);
	}
	finally
	{
		appObj = null;	
	} 	
}
function BusComp_SetFieldValue (FieldName)
{
	var psInputs,psOutputs,svcbsService;
	var sDeposit,sMSISDN,sTierValue,sWaivedFlag,appObj;
	var boEmp, bcEmp, sEmpId, sEmpType=null, sIsRec, sQueueType, sSRId;
	var srId2;
	var sCallTier3;
	var sStatus;
	var sLoginName;
	var sOwnerId;
//	try
//	{
		appObj=TheApplication();
	
		switch(FieldName)
	    {
 		 	case ""STC New MSISDN"":
 		 	case ""STC New SIM Card Number"":
 		 	    //appObj = TheApplication();
	        	sWaivedFlag = this.GetFieldValue(""STC Payment Waived Mode"");
	        	if(sWaivedFlag != ""Y"")
	        	{
	        		
	        		with(this)
	        		{
		        		sMSISDN =GetFieldValue(""STC New MSISDN"");
		        		sTierValue = GetFieldValue(""INS Sub-Area"");
		        		psInputs = appObj.NewPropertySet();
						psOutputs = appObj.NewPropertySet();
						svcbsService = appObj.GetService(""Workflow Process Manager"");
						psInputs.SetProperty(""ProcessName"", ""STC Change MSISDN WF"");
						psInputs.SetProperty(""New MSISDN"",sMSISDN);
						psInputs.SetProperty(""Call Tier"",sTierValue);
						svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
		        		sDeposit = psOutputs.GetProperty(""Deposit"");
		        		SetFieldValue(""STC Fee"",sDeposit);
		        	}
	        	}
         		break;
         		
         	case ""Owned By Id"":
         		appObj = TheApplication();
         		boEmp = appObj.GetBusObject(""Employee"");
         		bcEmp = boEmp.GetBusComp(""Employee"");
         		sEmpId = this.GetFieldValue(""Owned By Id"");
         		if(sEmpId != null || sEmpId != """")
         		{
         		with(bcEmp)	
				{
				    SetViewMode(AllView);
				 	ClearToQuery();
				 	ActivateField(""Id"");
				 	ActivateField(""Employee Type Code"");
				  	SetSearchSpec(""Id"", sEmpId);
				 	ExecuteQuery(ForwardOnly);
				 	sIsRec = FirstRecord();
				 	if(sIsRec)
				 	{
					 	sEmpType = GetFieldValue(""Employee Type Code"");
					 }				 					 	
			 	}
			 	sQueueType = appObj.InvokeMethod(""LookupValue"",""EMPLOYEE_TYPE"",""Queue"");
			 	with(this)
			 	{
			 		if(sEmpType == sQueueType)
				 	{
				 		SetFieldValue(""STC Queue Id"", sEmpId);
				 	}
			 	}
			 	}//end of if
			 	break;
			 	
			 	case ""Status"":
         		srId2 = this.GetFieldValue(""Id"");
				sCallTier3 = this.GetFieldValue(""INS Sub-Area"");
				this.ActivateField(""Status"");
				this.ActivateField(""Owner"");
				this.ActivateField(""STC Rejection Reason"");
				this.ActivateField(""Account Id"");
				this.ActivateField(""STC DD SMS Flag"");
				sStatus = this.GetFieldValue(""Status"");
				sLoginName = appObj.LoginName();
				sOwnerId = this.GetFieldValue(""Owner"");
				var AccId = this.GetFieldValue(""Account Id"");
				var RejReason = this.GetFieldValue(""STC Rejection Reason"");
				var smscheck = this.GetFieldValue(""STC DD SMS Flag"");
				//if(sCallTier3 == ""Change of billing details"")
				if(sCallTier3 == ""Change of Billing Details"")
				{
					if(sStatus == ""Approved"" || sStatus == ""Rejected"")
					{
				var ActiveView = TheApplication().ActiveViewName();
         		if((ActiveView != ""STC All Service Requests Required Approval"") && (ActiveView != ""STC Service Request Required Info View""))
					{
						
						if(sLoginName == sOwnerId)
						{
							//continue
						}
						else
						{
							appObj.RaiseErrorText(""You are not authorised to change the status."");
							return(CancelOperation);
						}
						}
					}
				}
         	
         	
         		if(sCallTier3 == ""New"" || sCallTier3 == ""Cancellation"")
				{
				      if(sStatus == ""Rejected"" && (RejReason == """" || RejReason == null || RejReason == '') && sCallTier3 == ""New"")
						{
						   appObj.RaiseErrorText(""Please select Direct Debit Rejection Reason."");
						   return(CancelOperation);
						}
				
					if(sStatus == ""Approved"" || sStatus == ""Rejected"")
					{
						if(sLoginName != sOwnerId)
						{					
						  	appObj.RaiseErrorText(""You are not authorised to change the status."");
						  	return(CancelOperation);
						}
						else
						{
								svcbsService = appObj.GetService(""Workflow Process Manager"");
							psInputs = appObj.NewPropertySet();
							psOutputs = appObj.NewPropertySet();
							psInputs.SetProperty(""ProcessName"", ""STC Update Billing Profile WF"");
							psInputs.SetProperty(""Object Id"",srId2);
							psInputs.SetProperty(""Account Id"",AccId);
							psInputs.SetProperty(""Status"",sStatus);
							psInputs.SetProperty(""RejReason"",RejReason);
							psInputs.SetProperty(""SMSFlag"",smscheck);							
							svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
						}
					}
				}//if(sCallTier3 == ""New / Cancellation"" || sCallTier3 == ""New"")
				if(sCallTier3 == ""Amendment"")
				{	
				if(sStatus == ""Approved"" || sStatus == ""Rejected"")
					{
						if(sLoginName != sOwnerId)
						{					
						  	appObj.RaiseErrorText(""You are not authorised to change the status."");
						}
						else
							{
							this.ActivateField(""STC DD Amend Max"");
							var MaxAmount = this.GetFieldValue(""STC DD Amend Max"");
								svcbsService = appObj.GetService(""Workflow Process Manager"");
							psInputs = appObj.NewPropertySet();
							psOutputs = appObj.NewPropertySet();
							psInputs.SetProperty(""ProcessName"", ""STC Update Amend Profile WF"");
							psInputs.SetProperty(""Object Id"",srId2);
							psInputs.SetProperty(""Account Id"",AccId);
							psInputs.SetProperty(""MaxAmount"",MaxAmount);
							psInputs.SetProperty(""Amend"",""Yes"");
							psInputs.SetProperty(""Status"",sStatus);
							psInputs.SetProperty(""RejReason"",RejReason);
							svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
						}
					}	
				}
         		break;
			case ""Sub-Status""://[NAVIN:20Jun2018:CustomerJourney360View]
				UpdateCustomer360Details();
				break; 		
         	default : 
         		break;
	}

	return (ContinueOperation);
//	}
/*	catch(e)
	{
		LogException(e);
		throw(e);
		return (CancelOperation);
	}
	finally
	{
		psOutputs = null;
		psInputs = null;
		svcbsService = null;
		bcEmp = null;
		boEmp = null;
		appObj = null;
	} */
}
function BusComp_WriteRecord ()
{
	var sSubStatus;
	var sSetSubStatus;
	var appObj;
	var svcbsService;
	var psiPS;
	var psoPS;
	var srId;
	var srId2;
	var sCommitTime;
	var sCallTier3;
	var psInputs;
	var psOutputs;
	var svcCallWorkflow;
	var sStatus;
	var sLoginName;
	var sOwnerId;
	
	try
	{
		appObj = TheApplication();
		with(this)
		{
			if(!GetFieldValue(""Commit Time""))
			{
				srId = GetFieldValue(""Id"");
				svcbsService = appObj.GetService(""Workflow Process Manager"");
				psiPS = appObj.NewPropertySet();
				psoPS = appObj.NewPropertySet();
				psiPS.SetProperty(""ProcessName"", ""STC Update Due Date Workflow"");
				psiPS.SetProperty(""Object Id"",srId);
				svcbsService.InvokeMethod(""RunProcess"", psiPS, psoPS);
				//sCommitTime = psoPS.GetProperty(""Commit Time"");
				//SetFieldValue(""Commit Time"",sCommitTime);
			}
			

				srId2 = GetFieldValue(""Id"");
				sCallTier3 = this.GetFieldValue(""INS Sub-Area"");
				this.ActivateField(""Status"");
				this.ActivateField(""Owner"");
				sStatus = this.GetFieldValue(""Status"");
				this.ActivateField(""Account Id"");
				var AccId = this.GetFieldValue(""Account Id"");
				//if(sCallTier3 == ""Change of billing details"")
				if(sCallTier3 == ""Change of Billing Details"")
				{
				   
				   //if(sStatus == ""Approved"" || sStatus == ""Rejected"")
				  
				  
				   if(sStatus == ""Approved"")
					{
					svcCallWorkflow = appObj.GetService(""Workflow Process Manager"");
					psInputs = appObj.NewPropertySet();
					psOutputs = appObj.NewPropertySet();
					psInputs.SetProperty(""ProcessName"", ""STC Generic SR Submit WF"");
					psInputs.SetProperty(""Object Id"",srId2);
					psInputs.SetProperty(""CallTier"",sCallTier3);
					psInputs.SetProperty(""Status"",sStatus);
					svcCallWorkflow.InvokeMethod(""RunProcess"", psInputs, psOutputs);
					}
				}
				
			

			
			
		}
		return (ContinueOperation);
	}
	catch(e)
	{
		LogException(e);
		throw(e);
	}
	finally
	{
		psiPS = null;
		psoPS = null;
		psInputs = null;
		psOutputs =null;
		svcbsService = null;
		svcCallWorkflow = null;
		appObj = null;
	} 
}
function ChangeDunningStatus()
{
//***********************************************************************************************************//
//Purpose: 1) To change the status, sub status and owner fields once the
//CSR has subitted new Credit Limit for the Corporate Billing Account.	   
//Inputs:
//Outputs:
//Created By: Navin Rai
//Release: 
//Date: 15-Nov-2010
//*************************************************************************************************************//

	var appObj;
	var invoiceBO=null, parentBC=null;
	var custType=null, billingType=null, custSegment=null;
	var desc;
	var callBackTime, callBackFlag;
	var parBillingAcctNo;

	var oldDunningStatus=null, newDunningStatus=null;

	var testAcctId, isRecord=null;
	try
	{
		appObj = TheApplication();
		//parentBC = this.ParentBusComp();
		
		with(this)
		{						
			invoiceBO = appObj.GetBusObject(""STC Billing Account"");
			if(invoiceBO != null)
			{
			parentBC = invoiceBO.GetBusComp(""CUT Invoice Sub Accounts"");
			if(parentBC != null)
			{	
				ActivateField(""Account Id"");
				ActivateField(""STC New Credit Limit"");
							
				testAcctId= GetFieldValue(""Account Id"");
				if(testAcctId != null && testAcctId != """")
				{
				with(parentBC)
				{							
					ActivateField(""Id"");
					ActivateField(""Credit Score"");
					ActivateField(""Parent Account Id"");
					ActivateField(""STC Corporate Type"");
					
					ActivateField(""Type"");
					ActivateField(""STC Corporate Type"");
					ActivateField(""STC Contract Category"");
					ActivateField(""Credit Score"");
								
					ClearToQuery();
					SetViewMode(AllView);
					SetSearchSpec(""Id"", testAcctId);
					ExecuteQuery(ForwardOnly);
		
					isRecord = FirstRecord();
				}//end of with(parentBC)
				}//end of if(testAcctId != null && ...
				}//end of if(parentBC != null)
				}//end of if(invoiceBO != null)
			}//end of with(this)
		
		if(isRecord)
		{
			parentBC.ActivateField(""Type"");
			parentBC.ActivateField(""STC Corporate Type"");
			parentBC.ActivateField(""STC Contract Category"");
			custType = parentBC.GetFieldValue(""Type"");
			billingType = parentBC.GetFieldValue(""STC Corporate Type"");
			custSegment = parentBC.GetFieldValue(""STC Contract Category"");
			if(custType == ""Corporate"" && billingType == ""Corporate"" && custSegment == ""Government"")
			{
				parentBC.ActivateField(""Dunning Excluded"");
				oldDunningStatus = parentBC.GetFieldValue(""Dunning Excluded"");
				this.ActivateField(""Supervisor Review"");
				newDunningStatus = this.GetFieldValue(""Supervisor Review"");
				desc = GetFieldValue(""Description"");
				if(desc != null && desc != """")
				{
					callBackFlag = GetFieldValue(""Call Back"");
					callBackTime = GetFieldValue(""STC New Preferred Timing"");
					
					if(callBackFlag == ""N"" || (callBackTime != null && callBackTime != """"))
					{
					
					with(this)
					{				
								
					            if(oldDunningStatus != newDunningStatus)
					            {
						            
														
									this.SetFieldValue(""Status"",appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""In Progress""));
					            	this.SetFieldValue(""Sub-Status"",appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""In Progress""));
					            	this.WriteRecord();
					            	
					            	/*
						            parentBC.SetFieldValue(""Dunning Excluded"", newDunningStatus);
									this.SetFieldValue(""Status"",appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""Closed""));
							        this.SetFieldValue(""Sub-Status"",appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""Completed""));
							        this.WriteRecord();
							        parentBC.WriteRecord();
							        */
							       /*
							        var dunningChangeService = appObj.GetService(""STC Corp Dunning Status Update BS"");
							        var input = appObj.NewPropertySet();
							        var output = appObj.NewPropertySet();
							        var srId = GetFieldValue(""Id"");
							       	var billAccntId = GetFieldValue(""Account Id"");
							       	var dunningStatus = GetFieldValue(""Supervisor Review"");
							        
							        input.SetProperty(""SRId"", srId);
							        input.SetProperty(""BillingAccountId"", billAccntId);
							        input.SetProperty(""DunningStatus"", dunningStatus);
							        dunningChangeService.InvokeMethod(""UpdateDunningStatus"", input, output);
							       */
							        
							       
							        var dunningChangeService = appObj.GetService(""Workflow Process Manager"");
							        var input = appObj.NewPropertySet();
							        var output = appObj.NewPropertySet();
							        var srId = GetFieldValue(""Id"");
							        input.SetProperty(""Object Id"", srId);
							        input.SetProperty(""ProcessName"", ""STC Dunning Excluded SR WF"");
							        dunningChangeService.InvokeMethod(""RunProcess"", input, output);
							         
							        
							     }
							     else
							     {
							     	appObj.RaiseErrorText(""Please change the Dunning Excluded flag before submitting SR!"");
							     }
						}//end of with(this)
			
					}//end of IF callBack
					else
					{
						appObj.RaiseErrorText(""Preferred Call Back Timing is a mandatory field!"");
					}//end of Call Back Time else
				} //end of desc IF
				else
				{
					appObj.RaiseErrorText(""Description is a mandatory field!"");
				}//end of desc else
			}//end of custType IF
			else
			{
				appObj.RaiseErrorText(""This SR can only be raised for customers having Customer Type and Billing Type as Corporate and Customer Segment as Government!"");
			}
		}//end of parentBC IF
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		parentBC = null;
		appObj = null;
	}
}
function CheckOpenDDSR()
{
	var SRStatus;
	var isRecord=""N"";
	sAllowSR=""Y"";
	var SRType;
	var ServiceAccId;
	var sServiceBO=null;
	var sServiceBC=null;
	var sClosed;
		
	try
	{
		var sApp = TheApplication();
		this.ActivateField(""Primary BillingProfileId"");
		ServiceAccId = this.GetFieldValue(""Primary BillingProfileId"");
		if(ServiceAccId != null && ServiceAccId != """")
		{
		sServiceBO = TheApplication().GetBusObject(""Service Request"");
		if(sServiceBO != null)
		{
		sServiceBC = sServiceBO.GetBusComp(""Service Request"");
		if(sServiceBC != null)
		{
		with(sServiceBC)
		{
		  	ActivateField(""Primary BillingProfileId"");
		    ActivateField(""Status"");
		    ActivateField(""INS Sub-Area"");
		    ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(""Primary BillingProfileId"", ServiceAccId);
			ExecuteQuery(ForwardOnly);
	
	        sClosed = sApp.InvokeMethod(""LookupValue"", ""SR_STATUS"", ""Closed""); 
	        
			if(FirstRecord())
			{
				isRecord = FirstRecord();
			    while(isRecord)
			    {	
					SRStatus = GetFieldValue(""Status"");
					SRType = GetFieldValue(""INS Sub-Area"");
					var SRArea = sApp.InvokeMethod(""LookupValue"", ""STC_OPEN_SR"", SRType);
					var LOVSRArea = SRArea.substring(0,3);
					if(SRStatus != sClosed && (LOVSRArea == ""SRO""))
						sAllowSR=""N"";
					isRecord = NextRecord();
				}//while
			}//if
		}//with
		}//if BC
		}//if BO
		}//end of if
	}
	catch(e)
	{
		LogException(e);
	}	
	finally
	{
		sServiceBC=null;
		sServiceBO=null;
	}
}
"
function CheckOpenOrders()
{
	var sOrderType;
	var sOrderStatus;
	var appObj;
	var ServiceAccId;
	var sOrderBO;
	var sOrderBC;
	var sComplete;
	var sCancelled;
	var sRejected;
	var isRecord;

	try
	{
		isRecord=""N"";
		sAllowSROrder=""Y"";
		
		appObj = TheApplication();
		ServiceAccId = this.GetFieldValue(""Account Id"");
		if(ServiceAccId != null && ServiceAccId != """")
		{
		sOrderBO = appObj.GetBusObject(""Order Entry"");
		if(sOrderBO != null)
		{
		sOrderBC = sOrderBO.GetBusComp(""Order Entry - Orders"");
		if(sOrderBC != null)
		{
		with(sOrderBC)
		{
		  	ActivateField(""Service Account Id"");
		    ActivateField(""Status"");
		    ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(""Service Account Id"", ServiceAccId);
			ExecuteQuery(ForwardOnly);
	
	        sComplete = appObj.InvokeMethod(""LookupValue"", ""FS_ORDER_STATUS"", ""Complete""); 
			sCancelled = appObj.InvokeMethod(""LookupValue"", ""FS_ORDER_STATUS"", ""Cancelled"");
			sRejected = appObj.InvokeMethod(""LookupValue"", ""FS_ORDER_STATUS"", ""Rejected"");					
			if(FirstRecord())
			{
				isRecord = FirstRecord();
			    while(isRecord)
			    {	
					sOrderStatus = GetFieldValue(""Status"");
					if(sOrderStatus != sComplete && sOrderStatus != sCancelled && sOrderStatus != sRejected)
						sAllowSROrder=""N"";
					isRecord = NextRecord();
				}
			}
		}
		}}}//end of all ifs
	}
	catch(e)
	{
		LogException(e);
	}	
	finally
	{
		sOrderBC = null;
		sOrderBO = null;
		appObj = null;
	}
}
"
function CheckOpenSR()
{
	var SRStatus;
	var isRecord=""N"";
	sAllowSR=""Y"";
	var SRType;
	var ServiceAccId;
	var sServiceBO=null;
	var sServiceBC=null;
	var sClosed;
		
	try
	{
		var sApp = TheApplication();
		ServiceAccId = this.GetFieldValue(""Account Id"");
		if(ServiceAccId != null && ServiceAccId != """")
		{
		sServiceBO = TheApplication().GetBusObject(""Service Request"");
		if(sServiceBO != null)
		{
		sServiceBC = sServiceBO.GetBusComp(""Service Request"");
		if(sServiceBC != null)
		{
		with(sServiceBC)
		{
		  	ActivateField(""Account Id"");
		    ActivateField(""Status"");
		    ActivateField(""INS Sub-Area"");
		    ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(""Account Id"", ServiceAccId);
			ExecuteQuery(ForwardOnly);
	
	        sClosed = sApp.InvokeMethod(""LookupValue"", ""SR_STATUS"", ""Closed""); 
	        
			if(FirstRecord())
			{
				isRecord = FirstRecord();
			    while(isRecord)
			    {	
					SRStatus = GetFieldValue(""Status"");
					SRType = GetFieldValue(""INS Sub-Area"");
					var SRArea = sApp.InvokeMethod(""LookupValue"", ""STC_OPEN_SR"", SRType);
					var LOVSRArea = SRArea.substring(0,3);
					//if(SRStatus != sClosed && (SRType == ""Change MSISDN"" || SRType == ""Change SIM Card""))
					if(SRStatus != sClosed && (SRType == ""Change MSISDN"" || SRType == ""Change SIM Card Request""))
				//	if(SRStatus != sClosed && (LOVSRArea == ""SRO""))
						sAllowSR=""N"";
					isRecord = NextRecord();
				}//while
			}//if
		}//with
		}//if BC
		}//if BO
		}//end of if
	}
	catch(e)
	{
		LogException(e);
	}	
	finally
	{
		sServiceBC=null;
		sServiceBO=null;
	}
}
"
function CheckReserved(NewMSISDN)
{
var isRecord;
var sReserved="""";
var sMSISDNBO;
var sMSISDNBC;
try
{
	sMSISDNBO = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	if(sMSISDNBO != null && (NewMSISDN != null && NewMSISDN != """"))
	{
	sMSISDNBC = sMSISDNBO.GetBusComp(""RMS NM Number Enquiry"");
	if(sMSISDNBC != null)
	{
	with(sMSISDNBC)
	{
	  	ActivateField(""Number String"");
	    //ActivateField(""Special Category Type"");
	    ActivateField(""Reserved To"");
	    ClearToQuery();
		SetViewMode(AllView);
		SetSearchSpec(""Number String"", NewMSISDN);
		ExecuteQuery(ForwardOnly);					
		if(FirstRecord())
		{
			isRecord = FirstRecord();
		    while(isRecord)
		    {	
				sReserved = GetFieldValue(""Reserved To"");
				if(sReserved != """")
				{
					sPickMSISDN=""N"";
				}
				else
				{
					sPickMSISDN=""Y"";
				}
				isRecord = NextRecord();
			}//while
		}//if
	}//with
	}//if BC
	}//if bO
}
catch(e)
{
	LogException(e);
}	
finally
{
	sMSISDNBC=null;
	sMSISDNBO=null;
}
}
"
function CreatePayment()
{
	var appObj;
	var sSrId;
	var sSRType;
	var sView;
	var psInputs;
	var psOutputs;
	var svcService;
	try
	{
			appObj = TheApplication();
			with(this)
			{
				WriteRecord();
				sSrId = GetFieldValue(""Id"");
				this.ActivateField(""INS Sub-Area"");
				var sCallTier3 = GetFieldValue(""INS Sub-Area"");

                if(sCallTier3 != ""Change of Billing Details"")
                  {

				var TierVal = GetFieldValue(""INS Sub-Area"");
				var Fee = appObj.InvokeMethod(""LookupValue"",""STC_DEPOSIT_FEE"",TierVal);
				
				if(Fee != """" || Fee != null)
				{
				var FeeStr = Fee.substring(0,1);
				SetFieldValue(""STC Fee"",FeeStr);
				WriteRecord();
				}
				var MigrType = appObj.InvokeMethod(""LookupValue"",""STC_MIG_TYPE"",TierVal);
				var MigrSubStr = MigrType.substring(0,4);
				if(MigrSubStr == ""TOOO"")
				{
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				svcService =appObj.GetService(""Workflow Process Manager"");
				psInputs.SetProperty(""ProcessName"", ""STC TOO Service Request Validations WF"");
				psInputs.SetProperty(""Object Id"",sSrId);
				svcService.InvokeMethod(""RunProcess"",psInputs,psOutputs);
				}
				}
				
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				svcService =appObj.GetService(""Workflow Process Manager"");
				psInputs.SetProperty(""ProcessName"", ""STC SR Create Payment WF"");
				psInputs.SetProperty(""Object Id"",sSrId);
				svcService.InvokeMethod(""RunProcess"",psInputs,psOutputs);
			}
	
	}
	catch(e)
	{
		appObj.RaiseErrorText(e.toString());
		
		//LogException(e);
	}
	finally
	{
		psInputs = null;
		psOutputs = null;
		svcService = null;
		appObj = null;	
	}
}
function CreditApproveSR()
{
//***********************************************************************************************************//
//Purpose: 1) To change the Parent Billing Account's Credit Limit and status, sub status once the
// Owner has Approved new Credit Limit for the Corporate Billing Account.	   
//Inputs:
//Outputs: Credit limit of the respective billing account will be increased.
//Created By: Navin Rai
//Release: 
//Date: 17-Nov-2010
//*************************************************************************************************************//

	var appObj;
	var invoiceBC=null, invoiceBO=null;
	var newCredit=null;
	var oldCredit=null;
	var testAcctId=null;
	var isRecord=null;
	var parAcctId=null;
	var billType=null;

	try
	{
		appObj = TheApplication();
		with(this)
			{						
				invoiceBO = appObj.GetBusObject(""STC Billing Account"");
				if(invoiceBO != null)
				{
					invoiceBC = invoiceBO.GetBusComp(""CUT Invoice Sub Accounts"");
					if(invoiceBC != null)
					{	
						ActivateField(""Account Id"");
						ActivateField(""Exchange Rate"");
						ActivateField(""STC New Credit Limit"");
						
						testAcctId= GetFieldValue(""Account Id"");
					if(testAcctId != null && testAcctId != """")
					{
						with(invoiceBC)
						{							
							ActivateField(""Id"");
							ActivateField(""Credit Score"");
							ActivateField(""Parent Account Id"");
							ActivateField(""STC Corporate Type"");
							
						//	ActivateField(""Account Number"");
							ClearToQuery();
							SetViewMode(AllView);
							SetSearchSpec(""Id"", testAcctId);
							ExecuteQuery(ForwardOnly);
	
							isRecord = FirstRecord();
							if(isRecord)
							{	
								newCredit = this.GetFieldValue(""STC New Credit Limit"");

								if(newCredit != null && newCredit != """")
								{
									ValidateParentCreditLimit(newCredit);
									ValidateChildCreditLimit(newCredit);
								}
								else
         						{	appObj.RaiseErrorText(""Desired Credit Limit can not be blank"");		}	
         		
								//SetFieldValue(""Credit Score"", newCredit);
								
								//>>>>>>Navin starts, 03Jan,2011
								////Calling Workflow to update credit limit of current Corporate BAN
								this.SetFieldValue(""Status"",""Approved"");
								this.WriteRecord();
									var creditUpdateService = appObj.GetService(""Workflow Process Manager"");
							        var input = appObj.NewPropertySet();
							        var output = appObj.NewPropertySet();
							        var srId = this.GetFieldValue(""Id"");
							        input.SetProperty(""Object Id"", srId);
							        input.SetProperty(""ProcessName"", ""STC Credit Limit Change SR WF"");
							        creditUpdateService.InvokeMethod(""RunProcess"", input, output);
								////<<<<<<<<Navin Ends			
						
 							 	 //var psOutRefresh,psInRefresh,sSpec,svcbsRefresh,psInputs,psOutputs;
								 //psInRefresh = appObj.NewPropertySet();
								 //psOutRefresh = appObj.NewPropertySet();
							     //sSpec = ""[Id] = '"" + this.GetFieldValue(""Id"")  + ""'"";
								 //svcbsRefresh = appObj.GetService(""SIS OM PMT Service"");
								 //psInRefresh.SetProperty(""Business Object Name"",""STC Billing Account"");
								 //psInRefresh.SetProperty(""Business Component Name"", ""Service Request"");
								 //psInRefresh.SetProperty(""Search Specification"", sSpec);
								 //svcbsRefresh.InvokeMethod/(""Refresh Business Component"", psInRefresh, psOutRefresh);	

							}
						}//end of with(invoiceBC)
						/*if(isRecord)
						{
							SetFieldValue(""Status"",appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""Closed""));
						    SetFieldValue(""Sub-Status"",appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""Completed""));
						    WriteRecord();
						    invoiceBC.WriteRecord();
						}*/
						
			
					}//end of if	
		            }//end of invoiceBC IF
	            }//end of invoiceBO IF

			}//end of with(this)
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		invoiceBC=null;
		invoiceBO=null;
		appObj = null;
	}
}
function CreditApproveSRCL()
{
//gjena_281211 added the function to approve the Credit Limit for the Consumer

var appObj;


	try
	{
		    
		    appObj = TheApplication();
		    this.ActivateField(""Change Flag"");
		    this.ActivateField(""Difference of Credit Limit"");
		    var sdiffCL = this.GetFieldValue(""Difference of Credit Limit"");
		    if(sdiffCL < 0)
		    {
		    this.SetFieldValue(""Change Flag"",""Y"");
		    }
			this.SetFieldValue(""Status"",""Approved"");
			this.SetFieldValue(""Sub-Status"",""Completed"");
		    this.WriteRecord();
		    
	
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		
		appObj = null;
	}
}
"
function CreditRejectSR()
{
//***********************************************************************************************************//
//Purpose: To Reject credit limit increase SR.	   
//Inputs:
//Outputs: Credit limit of the respective billing account will not be increased.
//Created By: Navin Rai
//Release: 
//Date: 17-Nov-2010
//*************************************************************************************************************//

	var appObj;

	try
	{
		appObj = TheApplication();
		with(this)
			{						
		
					SetFieldValue(""Status"",appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""Rejected""));
					SetFieldValue(""Sub-Status"",appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""Completed""));
					WriteRecord();
	
			}//end of with(this)
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		appObj=null;
	}		
}
"
"
function LogException(e)
{

	var appObj;
  	var Input;
  	var Output;
  	var CallMessageHandler; 
	try
 	{
		  appObj = TheApplication();
		  Input = appObj.NewPropertySet();
		  Output = appObj.NewPropertySet();
		  CallMessageHandler = appObj.GetService(""STC Generic Error Handler""); 
		  Input.SetProperty(""Error Code"", e.errCode);
		  Input.SetProperty(""Error Message"", e.errText);
		  Input.SetProperty(""Object Name"", ""Service Request"");
		  Input.SetProperty(""Object Type"", ""Buisness Component"");
		  CallMessageHandler.InvokeMethod(""Log Message"", Input, Output);
 	}
 	catch(e)
 	{
  		
 	}
 	finally
 	{
 
		  CallMessageHandler = null;
		  Output = null;
		  Input = null;
		  appObj = null;
 	}
}
"
function SRClose()
{
	var sType;
	var svcbsService;
	var psInputs;
	var psOutputs;
	var sSRNum;
	var sMSISDN;
	var sAccntId;
	var appObj;
	var sCallback;
	var sCallConfirm;
	var sDescription;
	var sSRId;
	var sErrorMsg = """";
	var sErrorCode = """";
	var SubArea;
	try
	{
		appObj=TheApplication();
		var CUTSeAcc = appObj.GetBusObject(""STC Service Account"").GetBusComp(""CUT Service Sub Accounts"");
		with(this)
		{ 				
				if(GetFieldValue(""Status"") == appObj.InvokeMethod(""LookupValue"", ""SR_STATUS"", ""Open""))
				{
					SetFieldValue(""Status"", appObj.InvokeMethod(""LookupValue"", ""SR_STATUS"", ""In Progress""));
					WriteRecord();
				}
				sCallback = GetFieldValue(""Call Back"");
				sCallConfirm = GetFieldValue(""STC Call Back Confirm Flag"");
				sType = GetFieldValue(""SR Type"");
				SubArea = GetFieldValue(""INS Sub-Area"");
				sAccntId =GetFieldValue(""Account Id"");
				
				
				
			  if(sCallback == ""N"")
			  {				
				 	if(sType==""Trouble Ticket"")
					{
					    // This condition is for sending SMS to Customer upon TT Closer
					    SetFieldValue(""Status"", appObj.InvokeMethod(""LookupValue"", ""SR_STATUS"", ""Closed""));
					    SetFieldValue(""Sub-Status"",appObj.InvokeMethod(""LookupValue"", ""SR_SUB_STATUS"", ""Completed""));
					    SetFieldValue(""STC Retention Expiry Date"","""");
				    	svcbsService = appObj.GetService(""Workflow Process Manager"");
				    	sSRId = GetFieldValue(""Id"");
						sSRNum = GetFieldValue(""SR Number"");
						sMSISDN =GetFieldValue(""MSISDN"");
						sAccntId =GetFieldValue(""Account Id"");
						psInputs = appObj.NewPropertySet();
						psOutputs = appObj.NewPropertySet();
						psInputs.SetProperty(""ProcessName"", ""STC Send SMS outbound WF"");
						psInputs.SetProperty(""SR Num"",sSRNum);
						psInputs.SetProperty(""MSISDN"",sMSISDN);
						psInputs.SetProperty(""Account Id"",sAccntId);
						psInputs.SetProperty(""SR Id"",sSRId);
						psInputs.SetProperty(""Object Type"",sType);
						svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
					} //end of if(sType==""Trouble Ticket"")
					else
					{
				/*			if(IsMNPResol == ""Billing Reso Alert - Port-out"")
						{
						var ResAlert = GetFieldValue(""STC MNP Billing Resolution Code"");
						if(ResAlert == ""Level 4"")
						{
							with(CUTSeAcc)
							{
								ActivateField(""STC Billing Resolution"");
								SetViewMode(AllView);
								ClearToQuery();
								SetSearchSpec(""Id"", sAccntId);
								ExecuteQuery(ForwardOnly); 
								var isSANRec = FirstRecord();
								if(isSANRec)
								{
									SetFieldValue(""STC Billing Resolution"", """");
									WriteRecord();
								}
							}// with(CUTSeAcc)
							}// end of If(Level 4)
						}//if(IsMNPResol == ""Billing Reso Alert - Port-out"")*/
						
					    SetFieldValue(""Status"", appObj.InvokeMethod(""LookupValue"", ""SR_STATUS"", ""Closed""));
					    SetFieldValue(""Sub-Status"",appObj.InvokeMethod(""LookupValue"", ""SR_SUB_STATUS"", ""Completed""));
					    SetFieldValue(""STC Retention Expiry Date"","""");
					}
				} //end of if(sCallback == ""N"")
				else if(sCallConfirm == ""Y"")
				{
					SetFieldValue(""Status"", appObj.InvokeMethod(""LookupValue"", ""SR_STATUS"", ""Closed""));
					SetFieldValue(""Sub-Status"",appObj.InvokeMethod(""LookupValue"", ""SR_SUB_STATUS"", ""Completed""));
					SetFieldValue(""STC Retention Expiry Date"","""");	
				}
				else if(sCallConfirm == ""N"")
				{
					SetFieldValue(""Sub-Status"",appObj.InvokeMethod(""LookupValue"", ""SR_SUB_STATUS"",""Pending Callback""));
				}
		//	} end of else (!sDescription)
		}//end of with(this) 
	}//end of try
	catch(e)
	{
		LogException(e);
	}
	finally
	{
		psInputs = null;
		psOutputs = null;
		svcbsService = null;
		appObj = null;
	}
}
function SendSMS()
{
	var sType;
	var svcbsService;
	var psInputs;
	var psOutputs;
	var sSRNum;
	var sMSISDN;
	var sAccntId;
	var appObj;
	var sCallback;
	var sCallConfirm;
	var sDescription;
	var sSRId;
	var sErrorMsg = """";
	var sErrorCode = """";
	try
	{
		appObj=TheApplication();
		with(this)
		{ 				
				sCallback = GetFieldValue(""Call Back"");
				sCallConfirm = GetFieldValue(""STC Call Back Confirm Flag"");
				sType = GetFieldValue(""SR Type"");

	//		  if(sCallback == ""N"")
	//		  {				
				 //	if(sType==""Trouble Ticket"")
				//	{
					    // This condition is for sending SMS to Customer upon TT Closer
				    	svcbsService = appObj.GetService(""Workflow Process Manager"");
				    	sSRId = GetFieldValue(""Id"");
						sSRNum = GetFieldValue(""SR Number"");
						sMSISDN =GetFieldValue(""MSISDN"");
						sAccntId =GetFieldValue(""Account Id"");
						psInputs = appObj.NewPropertySet();
						psOutputs = appObj.NewPropertySet();
						psInputs.SetProperty(""ProcessName"", ""STC Send SMS outbound WF"");
						psInputs.SetProperty(""SR Num"",sSRNum);
						psInputs.SetProperty(""MSISDN"",sMSISDN);
						psInputs.SetProperty(""Account Id"",sAccntId);
						psInputs.SetProperty(""SR Id"",sSRId);
						psInputs.SetProperty(""Object Type"",sType);
						svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
				//	} //end of if(sType==""Trouble Ticket"")
				
		}//end of with(this) 
	}//end of try
	catch(e)
	{
		LogException(e);
	}
	finally
	{
		psInputs = null;
		psOutputs = null;
		svcbsService = null;
		appObj = null;
	}
}
function SubmitCreditIncreaseSR()
{
//***********************************************************************************************************//
//Purpose: 1) To change the status, sub status and owner fields once the
//CSR has subitted new Credit Limit for the Corporate Billing Account.	   
//Inputs:
//Outputs:
//Created By: Navin Rai
//Release: 
//Date: 15-Nov-2010
//*************************************************************************************************************//

	var appObj;
	var parentBC=null;
	var custType, billingType, custSegment;
	var desc;
	var callBackTime, callBackFlag;
	var tempOwner=null, owner=null, bcLOV, boLOV;
	var varLIC=null, newCredit=null;
	var searchst;
	var typeLOV = ""STC_CORP_CL_APPROVERS"";
	var test, isRecord=null;
	var parBillingAcctNo;
	
	var maxCreditFlag = true;
	var creditBO=null, creditBC=null;
	var defaultSegCredit, maxCredit, defaultEmpCredit;
	var newCred, oldCredit;
	var ZERO=0;
	
	//new additions
	var invoiceBO=null, testAcctId=null;

	try
	{
	appObj = TheApplication();
	
	with(this)
	{						
		invoiceBO = appObj.GetBusObject(""STC Billing Account"");
		if(invoiceBO != null)
		{
		parentBC = invoiceBO.GetBusComp(""CUT Invoice Sub Accounts"");
		if(parentBC != null)
		{	
			ActivateField(""Account Id"");
			ActivateField(""STC New Credit Limit"");
						
			testAcctId= GetFieldValue(""Account Id"");
			if(testAcctId != null && testAcctId != """")
			{
			with(parentBC)
			{							
				ActivateField(""Id"");
				ActivateField(""Credit Score"");
				ActivateField(""Parent Account Id"");
				ActivateField(""STC Corporate Type"");
				
				ActivateField(""Type"");
				ActivateField(""STC Corporate Type"");
				ActivateField(""STC Contract Category"");
				ActivateField(""Credit Score"");
							
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(""Id"", testAcctId);
				ExecuteQuery(ForwardOnly);
	
				isRecord = FirstRecord();
			}//end of with(parentBC)
			}//end of if(testAcctId != null && ...
			}//end of if(parentBC != null)
			}//end of if(invoiceBO != null)
		}//end of with(this)

		if(isRecord)
		{
			custType = parentBC.GetFieldValue(""Type"");
			billingType = parentBC.GetFieldValue(""STC Corporate Type"");
			if(custType == ""Corporate"")
			{
				desc = this.GetFieldValue(""Description"");
				if(desc != null && desc != """")
				{
					callBackFlag = this.GetFieldValue(""Call Back"");
					callBackTime = this.GetFieldValue(""STC New Preferred Timing"");
					
					if(callBackFlag == ""N"" || (callBackTime != null && callBackTime != """"))
					{
					
					with(this)
					{				
								custSegment = parentBC.GetFieldValue(""STC Contract Category"");
					            if(custSegment != null && custSegment != """")
					            {
						            if(custSegment == ""Government"")
						            {varLIC = ""GOVC*"";}
						            else if(custSegment == ""Large Enterprises"")
						            {varLIC = ""LENC*"";}
						            else if(custSegment == ""Powered MEs"")
						            {varLIC = ""PMEC*"";}
						            else if(custSegment == ""Budget SMEs"")
						            {varLIC = ""BSMC*"";}
						            else
						            {varLIC = ""TEST*"";}
					            }
					            newCred = 0;
					            oldCredit = 0;
					            newCredit = GetFieldValue(""STC New Credit Limit"");
					            oldCredit = ToNumber(GetFieldValue(""Exchange Rate""));
					            if(newCredit != null || newCredit != """")
				         		{	
				         			newCred = ToNumber(newCredit);
				         			if(newCred < ZERO)
									{
										appObj.RaiseErrorText(""Desired Credit Limit for Billing Account can not be less than "" +ZERO+ ""!"");
									}
									else if(newCred == oldCredit)
									{
										appObj.RaiseErrorText(""Desired Credit Limit can not be same as Current Credit Limit!"");
									}
				         			ValidateParentCreditLimit(newCredit); 
				         			ValidateChildCreditLimit(newCredit);
				         		}
				         		else
				         		{	appObj.RaiseErrorText(""Desired Credit Limit can not be blank"");		}
					            
					            
							if(custSegment != null && custSegment != """")
							{
								defaultSegCredit = 0;
								defaultEmpCredit = 0;
								maxCredit = 0;
								
									creditBO = appObj.GetBusObject(""STC Credit Limit Corporate"");
									creditBC = creditBO.GetBusComp(""STC Credit Limit Corporate"");
									
									with(creditBC)
									{
										ActivateField(""Customer Segment"");
										ActivateField(""Default Credit Limit"");
										ActivateField(""Employee Credit Limit"");
										ActivateField(""Max Credit Limit"");
										//ActivateField(""Customer Type"");
										
										ClearToQuery();
										SetViewMode(AllView);
										
										SetSearchSpec(""Customer Segment"", custSegment);
										creditBC.ExecuteQuery(ForwardOnly);
										isRecord = creditBC.FirstRecord();
										if(isRecord)
										{
											defaultSegCredit = ToNumber(GetFieldValue(""Default Credit Limit""));
											defaultEmpCredit = ToNumber(GetFieldValue(""Employee Credit Limit""));
											maxCredit = ToNumber(GetFieldValue(""Max Credit Limit""));
											
											if(newCred != null && newCred != """")
											{
												if(billingType == ""Individual"")
												{
													maxCreditFlag = false;
												//	if(newCred >= defaultEmpCredit)
												//	{
														if(newCred <= maxCredit)
														{	
														///	parentBC.SetFieldValue(""Credit Score"", newCredit);
															
															this.SetFieldValue(""Status"",appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""In Progress""));
						            						this.SetFieldValue(""Sub-Status"",appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""Assigned""));
						            						this.WriteRecord();
						            						
						            							//>>>>>>Navin starts, 03Jan,2011
																////Calling Workflow to update credit limit of current Corporate BAN
																
																	var creditUpdateService = appObj.GetService(""Workflow Process Manager"");
															        var input = appObj.NewPropertySet();
															        var output = appObj.NewPropertySet();
															        var srId = this.GetFieldValue(""Id"");
															        input.SetProperty(""Object Id"", srId);
															        input.SetProperty(""ProcessName"", ""STC Credit Limit Change SR WF"");
															        creditUpdateService.InvokeMethod(""RunProcess"", input, output);
																////<<<<<<<<Navin Ends		
																
																 //var psOutRefresh,psInRefresh,sSpec,svcbsRefresh,psInputs,psOutputs;
																 //psInRefresh = appObj.NewPropertySet();
																 //psOutRefresh = appObj.NewPropertySet();
															     //sSpec = ""[Id] = '"" + this.GetFieldValue(""Id"")  + ""'"";
																 //svcbsRefresh = appObj.GetService(""SIS OM PMT Service"");
																 //psInRefresh.SetProperty(""Business Object Name"",""STC Billing Account"");
																 //psInRefresh.SetProperty(""Business Component Name"", ""Service Request"");
																 //psInRefresh.SetProperty(""Search Specification"", sSpec);
																 //svcbsRefresh.InvokeMethod(""Refresh Business Component"", psInRefresh, psOutRefresh);	
														
														//	this.SetFieldValue(""Status"",appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""Closed""));
								            			//	this.SetFieldValue(""Sub-Status"",appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""Completed""));
								            			//	this.WriteRecord();
								            			//	parentBC.WriteRecord();
															
														}
														else
														{
															maxCreditFlag = true;
														}
												//	}
												//	else
												//	{
												//		appObj.RaiseErrorText(""Desired Credit Limit for Employee level BAN can not be less than Default Employee Credit Limt of "" +defaultEmpCredit+ ""!"");
												//	}
												}///end of if(billingType == ""Individual"")
												else if(billingType == ""Corporate"")
												{
													if(newCred < defaultSegCredit)
													{
														appObj.RaiseErrorText(""Desired Credit Limit for Corporate level BAN can not be less than Default Segment Credit Limt of "" +defaultSegCredit+ ""!"");
													}
												}
												if(newCred < ZERO)
												{
													appObj.RaiseErrorText(""Desired Credit Limit for Billing Account can not be less than "" +ZERO+ ""!"");
												}
											}//end of 	if(newCredit != null && newCredit != """")
											else
         									{	appObj.RaiseErrorText(""Desired Credit Limit can not be blank"");		}
											
										}//end of if(isRecord)
									}//end of with(creditBC)	
								}//end of if(billingType == ""Individual"" && (custSegment != null && custSegment != """"))
					
							
					            
					      if((varLIC != null && varLIC != """") && maxCreditFlag == true)
					      {
					      		if(newCredit != null && newCredit != """")
					      		{
						            boLOV = appObj.GetBusObject(""List Of Values"");
									bcLOV = boLOV.GetBusComp(""List Of Values"");
				 						
										bcLOV.ActivateField(""Name"");
										bcLOV.ActivateField(""Value"");
										bcLOV.ActivateField(""Type"");
										bcLOV.ActivateField(""Description"");
										bcLOV.ActivateField(""Target Low"");
										bcLOV.ActivateField(""Target High"");
										bcLOV.ClearToQuery();
										bcLOV.SetViewMode(AllView);
																		
										searchst = ""[Type] = '"" + typeLOV + ""' AND [Name] ~ LIKE \"""" + varLIC + ""\"""" + "" AND [Target Low] <= "" + ToNumber(newCredit) + "" AND [Target High] >= "" + ToNumber(newCredit) + """";

										bcLOV.SetSearchExpr(searchst);
										bcLOV.ExecuteQuery(ForwardOnly);
										//var count = CountRecords();
									    isRecord = bcLOV.FirstRecord();
										if(isRecord)
										{
											test = bcLOV.GetFieldValue(""Description"");
											tempOwner = bcLOV.GetFieldValue(""Value"");
										}
										if(tempOwner != null && tempOwner != """")
										{
											owner = tempOwner.substring(5,tempOwner.length);
										}
					            
					            if(owner != null && owner != """")
					            {
					            //	SetFieldValue(""Owner"",""SADMIN"");
					            	SetFieldValue(""Status"",appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""Waiting for approval""));
					            	SetFieldValue(""Sub-Status"",appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""Assigned""));
					            	this.WriteRecord();
					            	var PickBC = this.GetPicklistBusComp(""Owner"");
					            	with(PickBC)
					            	{
					            		SetViewMode(AllView);
										ClearToQuery();
										SetSearchSpec(""Login Name"", owner);
										ExecuteQuery();
										if(FirstRecord())
										{
										Pick();
										}
					            	}
					            		this.WriteRecord();
					            }
					            else
					            {
					            	appObj.RaiseErrorText(""No owner found for this Credit Increase SR, Invalid Customer Segment!"");
					            }
					          }//if(newCredit != null || newCredit != """")
					          else
         					  {	appObj.RaiseErrorText(""Desired Credit Limit can not be blank"");		}	
         		
					            
							}//end of if((varLIC != null || varLIC != """") && maxCreditFlag == true)
						
						}//end of with(this)
			
					}//end of IF callBack
					else
					{
						appObj.RaiseErrorText(""Preferred Call Back Timing is a mandatory field!"");
					}//end of Call Back Time else
				} //end of desc IF
				else
				{
					appObj.RaiseErrorText(""Description is a mandatory field!"");
				}//end of desc else
			}//end of custType IF
		}//end of parentBC IF
		else
		{	appObj.RaiseErrorText(""Parent BC not found!!"")	}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcLOV = null;
		boLOV = null;
		parentBC = null;
		appObj = null;
	}
}
function SubmitSR()
{
	var appObj;
	var sCallTier;
	var sActId;
	var sSRId;
	var psInputs;
	var psOutputs;
	var svcbsService;
	var sFee;
	try
	{
		appObj = TheApplication();
		sCallTier = this.GetFieldValue(""INS Sub-Area"");
		this.ActivateField(""STC New SIM Card Number"");
		var SIM = this.GetFieldValue(""STC New SIM Card Number"");
		var OrderAccType = this.GetFieldValue(""Type"");
		//if(sCallTier == ""Change SIM Card"")
		if(sCallTier == ""Change SIM Card Request"")
		{	
			var sRMSNumberbo = appObj.GetBusObject(""RMS NM Number Enquiry"");
	            var sRMSNumberbc = sRMSNumberbo.GetBusComp(""RMS NM Number Enquiry"");                                  
 	            with(sRMSNumberbc)
	            {	ActivateField(""Num Mstr Number String"");
					ActivateField(""Record Blocked For"");
					ActivateField(""Record Blocked For"");
					ActivateField(""Allocated To"");
	                SetViewMode(AllView);
	                ClearToQuery();
	                SetSearchSpec(""Num Mstr Number String"",SIM);
	                ExecuteQuery(ForwardOnly); 
	                if(FirstRecord())
	                {
	                	var sBlockFor = GetFieldValue(""Record Blocked For"");
	                	var CorpDealer = GetFieldValue(""Allocated To"");
	                	//var vBlockedForBAN = this.GetFieldValue(""STC Migration Blocked For"");
							if (sBlockFor == """" || sBlockFor == null)
							{
								if(OrderAccType == ""Corporate"")
								{	
									var CorpDealerLOV = appObj.InvokeMethod(""LookupValue"",""STC_CORP_DEALER"",CorpDealer);
									var CorpDealerStr = CorpDealerLOV.substring(0,3);
										if(CorpDealerStr != ""CSR"")
										{
											TheApplication().RaiseErrorText(""Selected SIM is not under corporate pool"");
											return(CancelOperation);
										}
								}// if(OrderAccType == ""Corporate"")
								else 
								{
									var IndDealerLOV = appObj.InvokeMethod(""LookupValue"",""STC_IND_DEALER"",CorpDealer);
									var IndDealerStr = IndDealerLOV.substring(0,3);
									if(IndDealerStr != ""CSR"")
									{
											TheApplication().RaiseErrorText(""Selected SIM is under corporate pool"");
											return(CancelOperation);
									}
								}
						}
		       		}//  if(FirstRecord())
	       		}//with(sRMSNumberbc)	 
		}
	if(sCallTier == ""Change MSISDN"")
	{
		this.ActivateField(""STC New MSISDN"");
		var MSISDN = this.GetFieldValue(""STC New MSISDN"");
			var sRMSNumberbo = appObj.GetBusObject(""RMS NM Number Enquiry"");
	            var sRMSNumberbc = sRMSNumberbo.GetBusComp(""RMS NM Number Enquiry"");                                  
 	            with(sRMSNumberbc)
	            {	ActivateField(""Num Mstr Number String"");
					ActivateField(""Record Blocked For"");
					ActivateField(""Record Blocked For"");
					ActivateField(""Allocated To"");
	                SetViewMode(AllView);
	                ClearToQuery();
	                SetSearchSpec(""Num Mstr Number String"",MSISDN);
	                ExecuteQuery(ForwardOnly); 
	                if(FirstRecord())
	                {
	                	var sBlockFor = GetFieldValue(""Record Blocked For"");
	                	var CorpDealer = GetFieldValue(""Allocated To"");
	                	//var vBlockedForBAN = this.GetFieldValue(""STC Migration Blocked For"");
							if (sBlockFor == """" || sBlockFor == null)
							{
								if(OrderAccType == ""Corporate"")
								{	
									var CorpDealerLOV = appObj.InvokeMethod(""LookupValue"",""STC_CORP_DEALER"",CorpDealer);
									var CorpDealerStr = CorpDealerLOV.substring(0,3);
										if(CorpDealerStr != ""CSR"")
										{
											TheApplication().RaiseErrorText(""Selected MSISDN is not under corporate pool"");
											return(CancelOperation);
										}
								}// if(OrderAccType == ""Corporate"")
								else
								{
									var IndDealerLOV = appObj.InvokeMethod(""LookupValue"",""STC_IND_DEALER"",CorpDealer);
									var IndDealerStr = IndDealerLOV.substring(0,3);
									if(IndDealerStr != ""CSR"")
									{
											TheApplication().RaiseErrorText(""Selected MSISDN is under corporate pool"");
											return(CancelOperation);
									}
								}
						}
		       		}//  if(FirstRecord())
	       		}//with(sRMSNumberbc)	
		
	}//if(sCallTier == ""Change MSISDN"")
		with(this)
			{				
				
				
				if(sCallTier==""Change of Billing Details"")
				{
				SetFieldValue(""Status"",appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""In Progress""));
	            SetFieldValue(""Sub-Status"",appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""In Progress""));//If user doesn't save the record and clicks on Submit Button
	            WriteRecord();
	            sSRId =GetFieldValue(""Id"");
				sActId = GetFieldValue(""Account Id"");
				sCallTier = GetFieldValue(""INS Sub-Area"");
	            psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				svcbsService = appObj.GetService(""Workflow Process Manager"");
				psInputs.SetProperty(""ProcessName"", ""STC Update CL Test"");
			    psInputs.SetProperty(""Object Id"",sSRId);
				psInputs.SetProperty(""CallTier"",sCallTier);
				psInputs.SetProperty(""Account Id"",sActId);
				svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
		        }
		
		       else
		       {
		       
		        SetFieldValue(""Status"",appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""In Progress""));
	            SetFieldValue(""Sub-Status"",appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""In Progress""));//If user doesn't save the record and clicks on Submit Button
	            WriteRecord();
	            sSRId =GetFieldValue(""Id"");
				sActId = GetFieldValue(""Account Id"");
				sCallTier = GetFieldValue(""INS Sub-Area"");
	            psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				svcbsService = appObj.GetService(""Workflow Process Manager"");
				psInputs.SetProperty(""ProcessName"", ""STC Generic SR Submit WF"");
			    psInputs.SetProperty(""Object Id"",sSRId);
				psInputs.SetProperty(""CallTier"",sCallTier);
				psInputs.SetProperty(""Account Id"",sActId);
				svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
		       }
		
		
		
		
		
		
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		psInputs = null;
		psOutputs = null;
		svcbsService = null;
		appObj = null;
	}
}
"// Created by : Devender
// Purpose to submit the SR under BAN

function Submit_BillSR()
{
	var appObj;
	var sCallTier;
	var sActId;
	var sSRId;
	var psInputs;
	var psOutputs;
	var svcbsService;
	var sFee;
	try
	{
		appObj = TheApplication();
		with(this)
			{				
				SetFieldValue(""Status"",appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""In Progress""));
	            SetFieldValue(""Sub-Status"",appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""In Progress""));//If user doesn't save the record and clicks on Submit Button
	            WriteRecord();
	            sSRId =GetFieldValue(""Id"");
				sActId = GetFieldValue(""Account Id"");
				sCallTier = GetFieldValue(""INS Sub-Area"");
	            psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				svcbsService = appObj.GetService(""Workflow Process Manager"");
				psInputs.SetProperty(""ProcessName"", ""STC Generic Billing SR Submit WF"");
				psInputs.SetProperty(""Object Id"",sSRId);
				psInputs.SetProperty(""CallTier"",sCallTier);
				psInputs.SetProperty(""Account Id"",sActId);
				svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
				
				
			}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		psInputs = null;
		psOutputs = null;
		svcbsService = null;
		appObj = null;
	}
}
function Submit_MSISDNChangeSR()
{
	var appObj;
	var sCallTier;
	var sActId;
	var sSRId;
	var psInputs;
	var psOutputs;
	var svcbsService;
	var sFee;
	try
	{
		appObj = TheApplication();
		//----Validations
		if (this.GetFieldValue(""STC Voucher Number"") == """" || this.GetFieldValue(""STC Voucher Number"") == null)
		{
			appObj.RaiseErrorText(""Enter a new Primary MSISDN number"");
		}
		
		
		/*with(this)
			{				
				SetFieldValue(""Status"",appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""In Progress""));
	            SetFieldValue(""Sub-Status"",appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""In Progress""));//If user doesn't save the record and clicks on Submit Button
	            WriteRecord();
	            sSRId =GetFieldValue(""Id"");
				sActId = GetFieldValue(""Account Id"");
				sCallTier = GetFieldValue(""INS Sub-Area"");
	            psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				svcbsService = appObj.GetService(""Workflow Process Manager"");
				psInputs.SetProperty(""ProcessName"", ""STC Generic Billing SR Submit WF"");
				psInputs.SetProperty(""Object Id"",sSRId);
				psInputs.SetProperty(""CallTier"",sCallTier);
				psInputs.SetProperty(""Account Id"",sActId);
				svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
				
				
			}*/
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		psInputs = null;
		psOutputs = null;
		svcbsService = null;
		appObj = null;
	}
}
function UpdateCustomer360Details()
{//[NAVIN:20Jun2018:CustomerJourney360View]

	var vSRId="""", vSRType="""", vCallTier3="""", vStatus="""", vSubStatus="""", vCustType="""", vSRFlag=""ALLOW"", vCallWfFlag=""N"";
	var psInputs=null, psOutputs=null, svcbsService=null;

	try
	{
		with(this)
		{
			ActivateField(""SR Type"");
			ActivateField(""INS Sub-Area"");
			ActivateField(""Status"");
			ActivateField(""Sub-Status"");
			ActivateField(""Type"");
			vSRId = GetFieldValue(""Id"");
			vSRType = GetFieldValue(""SR Type"");
			vCallTier3 = GetFieldValue(""INS Sub-Area"");
			vStatus = GetFieldValue(""Status"");
			vSubStatus = GetFieldValue(""Sub-Status"");
			vCustType = GetFieldValue(""Type"");
			vSRFlag = TheApplication().InvokeMethod(""LookupValue"", ""STC_CUST360_EXCLUDE_SR_LIST"", vCallTier3);
			if(vSRFlag != null)
				vSRFlag = vSRFlag.substr(0,5);
			
			if(vCustType == """" || vCustType == null)
				vCustType = ""Individual"";
			
			if((vCustType == ""Individual"") && (vSRType == ""Service Request"") && !(vSRFlag == ""NOALL"") && ((vSubStatus == ""Executed"") || (vStatus == ""Pending"") || (vSubStatus == ""In Progress"")))
			{
				vCallWfFlag = ""Y"";
			}
			if((vCustType == ""Individual"") && (vSRType == ""Trouble Ticket"") && !(vSRFlag == ""NOALL"") && ((vStatus == ""Closed"") || (vSubStatus == ""Queued"")))
			{
				vCallWfFlag = ""Y"";
			}
			if(vCallWfFlag == ""Y"")
			{
				psInputs = TheApplication().NewPropertySet();
				psOutputs = TheApplication().NewPropertySet();
				svcbsService = TheApplication().GetService(""Workflow Process Manager"");
				with (psInputs){
					SetProperty(""ProcessName"", ""STC Customer 360 Update WF"");
					SetProperty(""Object Id"", """");
					SetProperty(""SRId"", vSRId);
					SetProperty(""Operation"", vCallTier3);
					SetProperty(""OperationSubType"", vSubStatus);
				}
				svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
			}
		}//end with
	}
	catch(e)
	{LogException(e);}
	finally
	{
		psInputs = null; psOutputs = null;
		svcbsService = null;
	}
}
function ValidateChildCreditLimit(FieldValue)
{
//***********************************************************************************************************//
//Purpose: 1)To validate the credit limit of the current billing account
// against the sum of all child Billing Account Credit limits. 
//Inputs: Credit limits of parent and child accounts.
//Outputs: Proper message depending upon validity of credit limit entered.
//Author: Navin Rai
//Release: 
//Date: 10-DEC-2010
//*************************************************************************************************************//

	var appObj;
	var custType;
	//var childCount=0;
	var parentBC=null, parentAcctType, parAcctId;
	var billType;
	var totalChildCredit;
	//var parentAcctId;
	var isRecord=null;
	var tempCredit, currentCredit;
	var zero;
	var parBO=null, parBC=null;
	var oldCredit, newCredit;
	
	var testAcctId=null;
	 
	try
	{
		oldCredit=0; 
		newCredit=0;
		zero=0;
		tempCredit=0;
		currentCredit=0;
		totalChildCredit=0;
		
		appObj = TheApplication();
				
	with(this)
	{						
		parBO = appObj.GetBusObject(""STC Billing Account"");
		if(parBO != null)
		{
		parentBC = parBO.GetBusComp(""CUT Invoice Sub Accounts"");
		if(parentBC != null)
		{	
			ActivateField(""Account Id"");
			ActivateField(""STC New Credit Limit"");
						
			testAcctId= GetFieldValue(""Account Id"");
			if(testAcctId != null && testAcctId != """")
			{
			with(parentBC)
			{							
				ActivateField(""Id"");
				ActivateField(""Credit Score"");
				ActivateField(""Parent Account Id"");
				ActivateField(""STC Corporate Type"");
				
				ActivateField(""Type"");
				ActivateField(""Account Type Code"");
				ActivateField(""Id"");
							
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(""Id"", testAcctId);
				ExecuteQuery(ForwardOnly);
	
				isRecord = FirstRecord();
			}//end of with(parentBC)
			}//end of if(testAcctId != null && ...
			}//end of if(parentBC != null)
			}//end of if(invoiceBO != null)
		}//end of with(this)

		if(isRecord)
		{
			with(parentBC)
			{	
					custType = GetFieldValue(""Type"");
					parentAcctType = GetFieldValue(""Account Type Code"");
					
				
				if((custType == ""Corporate"" ||  custType == ""SME"") && parentAcctType == ""Billing"") //outer IF
				{
					billType = GetFieldValue(""STC Corporate Type"");
					currentCredit = GetFieldValue(""Credit Score"");
					parAcctId = GetFieldValue(""Parent Account Id"");
				
						with(this)
						{
							ActivateField(""Exchange Rate"");
							
							newCredit = ToNumber(FieldValue);
							oldCredit = ToNumber(GetFieldValue(""Exchange Rate""));
							if(oldCredit == null || oldCredit == """")
							{	oldCredit=0;	}
						}//end of with(this)
							
					/*This feature is not valid for either of the scenarios......	
							if(billType != ""Individual"")
							{
								if(newCredit <= oldCredit)
								{	
									this.SetFieldValue(""STC New Credit Limit"",ToNumber(zero));
									appObj.RaiseErrorText(""New Credit Limit should be greater than Current Credit Limit!!"");
								}
							}//end of if(billType != ""Individual"")
					*/
					
								
					if((billType == ""Department"" || billType == ""Corporate"") && parAcctId != null) //inner IF
					{
					if(parBO != null)
					{
					parBC = parBO.GetBusComp(""CUT Invoice Sub Accounts"");
					if(parBC != null)
					{
					with(parBC)
					{
					
					//-->>>Find the sum of credit limit of all Child Billing Accounts
						SetViewMode(AllView);
						ClearToQuery();

						SetSearchSpec(""Parent Account Id"", testAcctId);
						ExecuteQuery(ForwardOnly);
							
						//childCount = CountRecords();
						isRecord = FirstRecord();
						
						while(isRecord)
						{
							tempCredit = GetFieldValue(""Credit Score"");
					 		if((tempCredit != """") && (tempCredit != null))
							{
								totalChildCredit = totalChildCredit + ToNumber(tempCredit);
							}
							isRecord = NextRecord();
						}			
							
							if(newCredit == null || newCredit == """")
							{	newCredit=0;	}
					
							if(newCredit < totalChildCredit)
							{
							//	this.InvokeMethod(""SetAdminMode"",""TRUE"");
							//	this.ActivateField(""STC New Credit Limit"");
							//	this.SetFieldValue(""STC New Credit Limit"",ToNumber(zero));
								appObj.RaiseErrorText(""Desired Credit Limit can not be less than the Sum of Credit Limit all Child Billing Accounts i.e.: ""+totalChildCredit+""!"");
							}
						}
						}
						}
					
					}//end of inner if			
				}//end of outer if
			}//End of with(parentBC)
		}//end of if(parentBC != null)
		else
		{	appObj.RaiseErrorText(""Parent BC not found!!"")	}
		
	}//end of try block
	catch(e)
	{
		throw(e);
	}
	finally
	{
		parentBC = null;
		parBC=null;
		parBO=null;
		appObj = null;
	}
}//end of function"
function ValidateParentCreditLimit(FieldValue)
{
//***********************************************************************************************************//
//Purpose: 1)To validate the credit limit of the current child billing account
// against the Parent Billing Account Credit limit. 
//Inputs: Credit limits of parent and child accounts.
//Outputs: Proper message depending upon validity of credit limit entered.
//Author: Navin Rai
//Release: 
//Date: 18-NOV-2010
//Modified date: 09-DEC-2010
//*************************************************************************************************************//

	var appObj;
	var custType;
	//var childCount=0;
	var parentBC=null, parentAcctType, parAcctId;
	var billType;
	var parCreditLimit, totalChildCredit;
	//var parentAcctId;
	var isRecord=null;
	var tempCredit, currentCredit;
	var zero;
	var parBO=null, parBC=null;
	var oldCredit, newCredit;
	
	var testAcctId=null;
	var oldTotal; 
	 
	try
	{
		oldCredit=0; 
		newCredit=0;
		zero=0;
		tempCredit=0;
		currentCredit=0;
		parCreditLimit=0;
		totalChildCredit=0;
		oldTotal=0;
		
		appObj = TheApplication();
				
	with(this)
	{						
		parBO = appObj.GetBusObject(""STC Billing Account"");
		if(parBO != null)
		{
		parentBC = parBO.GetBusComp(""CUT Invoice Sub Accounts"");
		if(parentBC != null)
		{	
			ActivateField(""Account Id"");
			ActivateField(""STC New Credit Limit"");
						
			testAcctId= GetFieldValue(""Account Id"");
			if(testAcctId != null && testAcctId != """")
			{
			with(parentBC)
			{							
				ActivateField(""Id"");
				ActivateField(""Credit Score"");
				ActivateField(""Parent Account Id"");
				ActivateField(""STC Corporate Type"");
				
				ActivateField(""Type"");
				ActivateField(""Account Type Code"");
				ActivateField(""Id"");
							
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(""Id"", testAcctId);
				ExecuteQuery(ForwardOnly);
	
				isRecord = FirstRecord();
			}//end of with(parentBC)
			}//end of if(testAcctId != null && ...
			}//end of if(parentBC != null)
			}//end of if(invoiceBO != null)
		}//end of with(this)

		if(isRecord)
		{
			with(parentBC)
			{	
					custType = GetFieldValue(""Type"");
					parentAcctType = GetFieldValue(""Account Type Code"");
					
				
				if((custType == ""Corporate"" ||  custType == ""SME"") && parentAcctType == ""Billing"") //outer IF
				{
					billType = GetFieldValue(""STC Corporate Type"");
					currentCredit = GetFieldValue(""Credit Score"");
					parAcctId = GetFieldValue(""Parent Account Id"");				
			
						with(this)
						{
							ActivateField(""Exchange Rate"");
							
							newCredit = ToNumber(FieldValue);
							oldCredit = ToNumber(GetFieldValue(""Exchange Rate""));
							if(oldCredit == null || oldCredit == """")
							{	oldCredit=0;	}
						}//end of with(this)
						
					/*This feature is not valid for either of the scenarios......	
							if(billType != ""Individual"")
							{
								if(newCredit <= oldCredit)
								{	
									this.SetFieldValue(""STC New Credit Limit"",ToNumber(zero));
									appObj.RaiseErrorText(""New Credit Limit should be greater than Current Credit Limit!!"");
								}
							}//end of if(billType != ""Individual"")
						
					*/
								
					if((billType == ""Department"" || billType == ""Individual"") && parAcctId != null) //inner IF
					{
					if(parBO != null)
					{
					parBC = parBO.GetBusComp(""CUT Invoice Sub Accounts"");
					if(parBC != null)
					{
					with(parBC)
					{
						SetViewMode(AllView);
						ClearToQuery();
				
						SetSearchSpec(""Parent Account Id"", parAcctId);
						ExecuteQuery(ForwardOnly);
							
						//childCount = CountRecords();
						isRecord = FirstRecord();
						
						while(isRecord)
						{
							tempCredit = GetFieldValue(""Credit Score"");
					 		if((tempCredit != """") && (tempCredit != null))
							{
								totalChildCredit = totalChildCredit + ToNumber(tempCredit);
							}
							isRecord = NextRecord();
						}
						oldTotal = totalChildCredit;
						totalChildCredit = totalChildCredit + newCredit - ToNumber(currentCredit); 
					
				//Find the credit limit of the Parent Biling Account
							SetViewMode(AllView);
							ClearToQuery();
						
							ActivateField(""Id"");
							
							SetSearchSpec(""Id"", parAcctId);
							ExecuteQuery(ForwardOnly);
							
							if(FirstRecord())
							{
								parCreditLimit = ToNumber(GetFieldValue(""Credit Score""));
							}
							
							if(parCreditLimit == null || parCreditLimit == """")
							{	parCreditLimit=0;	}
					
							if(totalChildCredit > parCreditLimit)
							{
								this.SetFieldValue(""STC New Credit Limit"",ToNumber(zero));
								appObj.RaiseErrorText(""Insufficient Parent BAN Credit Limit, Balance Credit limit is:(""+(parCreditLimit - oldTotal)+""), Please Increase the Parent Credit Limit First!!"");
							}
						}
						}
						} 
					
					}//end of inner if			
				}//end of outer if
			}//End of with(parentBC)
		}//end of if(parentBC != null)
		else
		{
			appObj.RaiseErrorText(""Parent BC not found!!"")
		}
		
	}//end of try block
	catch(e)
	{
		throw(e);
	}
	finally
	{
		parentBC = null;
		parBC=null;
		parBO=null;
		appObj = null;
	}
}//end of function"
"//gjena_191212 Added this function to Validate the Number of Credit Limit SR Raised by CSR team

function fn_MonthlyClSr(AccntId)
{
	var parBusComp = TheApplication().GetBusObject(""STC Service Account"").GetBusComp(""CUT Service Sub Accounts"");
	var RecNum=0;
 	with(parBusComp)
 	{
	 	ActivateField(""Number of CL Monthly SR"");
	 	SetViewMode(AllView);
	 	ClearToQuery();
	 	SetSearchSpec(""Id"", AccntId);
	 	ExecuteQuery(ForwardOnly);
	 	if(FirstRecord())
	 		RecNum = GetFieldValue(""Number of CL Monthly SR"");
 	}
 	parBusComp=null;
 	return(RecNum);	
}
function BusComp_PreQuery ()
{
//Mayank: Added for iPhone For Life -------- START---------------
	try
	{
		var sView = TheApplication().ActiveViewName();
		var sMethodName = TheApplication().GetProfileAttr(""sMethodName"");
		//if(sView == ""STC Device Return iPhone View"" && (sMethodName == null || sMethodName == """"))
		if((sView == ""STC Device Return iPhone View"" || sView == ""STC Device Return Rental View"") && (sMethodName == null || sMethodName == """"))//Mayank: Updated for Rental Framework
		{
			var MSISDN = this.GetSearchSpec(""Serial Number"");
			var IMEI = this.GetSearchSpec(""STC IMEI"");
			if((MSISDN == null || MSISDN == """") && (IMEI == null || IMEI == """"))
			{
				TheApplication().RaiseErrorText(""Please populate either MSISDN or IMEI Number to Query."");
			}
		}
		if(sMethodName != ""RunUpgradeWF"")
		{
			TheApplication().SetProfileAttr(""sMethodName"","""");
		}
		return (ContinueOperation);
	}
	catch(e)
	{
		TheApplication().RaiseErrorText(e.errText);
	
	}
	finally
	{
	}//Mayank: Added for iPhone For Life -------- STOP---------------
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
try{
	if(FieldName=='KAM_REQ_QTY')
	{
		var Val:Number;
		if (FieldValue != '' && FieldValue != null)
			Val = ToNumber(FieldValue);
		if(Val != '' && Val != null && Val < 0)
			TheApplication().RaiseErrorText(""Please enter a positive value for Reserved Quantity"");
		if(Val != '' && Val != null && this.GetFieldValue(""STOCKQTY"") < Val)
			TheApplication().RaiseErrorText(""Quantity Requested cannot be greater than Available Quantity"");
	}
}
catch(e){
throw(e);
}
finally{
}

	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{
try{
	if(FieldName=='KAM_REQ_QTY')
	{
		var ReqQty = GetFieldValue(""KAM_REQ_QTY"");
				
		if(ReqQty != '' && ReqQty != null && ReqQty != 0)
			SetFieldValue(""KAM_USERID"", TheApplication().LoginName());	
	
		if(ReqQty == '' || ReqQty == null || ReqQty == 0)
			SetFieldValue(""KAM_USERID"", """");
	}
}
catch(e){
throw(e);
}
finally{
}

}
function BusComp_ChangeRecord ()
{

}
function BusComp_PreNewRecord ()
{
TheApplication().SetProfileAttr(""ExtTemplateNew"",""Y"");

	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{


	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{
var TriggerActivity = TheApplication().GetProfileAttr(""ExtTemplateNew"");

if(TriggerActivity == ""Y"")
{
//Call Extension Activity Creation WF
			var Type = this.GetFieldValue(""Extension Template Type"");
			var TemplateId = this.GetFieldValue(""Id"");
			var ActType = TheApplication().InvokeMethod(""LookupValue"",""STC_UCAAS_ACT_TYPE"",Type);
			var inputPS1:PropertySet = TheApplication().NewPropertySet();
			var outputPS1:PropertySet = TheApplication().NewPropertySet();
			var BSAdjApp: Service = TheApplication().GetService(""Workflow Process Manager"");
			inputPS1.SetProperty(""ProcessName"", ""STC Avaya Activity Creation Workflow"");
			inputPS1.SetProperty(""Template Id"", TemplateId);
			inputPS1.SetProperty(""Type"", ActType);
			inputPS1.SetProperty(""Category"", ""General"");
			BSAdjApp.InvokeMethod(""RunProcess"",inputPS1,outputPS1);

			var inputPS2:PropertySet = TheApplication().NewPropertySet();
			var outputPS2:PropertySet = TheApplication().NewPropertySet();
			var BSAdjAppRef: Service = TheApplication().GetService(""Workflow Process Manager"");
			inputPS2.SetProperty(""ProcessName"", ""STC CPBX Refresh Template Items"");
			inputPS2.SetProperty(""Template Id"", TemplateId);
			inputPS2.SetProperty(""ActivityRefresh"", ""Y"");
			BSAdjAppRef.InvokeMethod(""RunProcess"",inputPS2,outputPS2);

TheApplication().SetProfileAttr(""ExtTemplateNew"",""N"");


}
TheApplication().SetProfileAttr(""ExtTemplateNew"",""N"");
}
var vNewRec = false; //9/10/14 Anchal: Created new as per SD_New BB
function BusComp_NewRecord ()
{
	vNewRec = true; //9/10/14 Anchal: Created new as per SD_New BB
	var bc_OrderTypes;
	try
	{
		bc_OrderTypes = this.GetPicklistBusComp(""Order Type"");
			 
			 bc_OrderTypes.ActivateField(""Order Type"");
			 with (bc_OrderTypes)
			 {
			  SetViewMode(AllView);
			  ClearToQuery();
			  SetSearchSpec(""Order Type"",""Sales Order"");
			  ExecuteQuery(ForwardOnly);
			  
			  if (FirstRecord())
			   Pick();
			 }
			 var strActiveView = TheApplication().ActiveViewName();
			 if(strActiveView == ""STC Billing Account Orders List Applet View"")
			 {
			 	var sCPSflg = ""N"";
			 	var sBillAcntId = this.ParentBusComp().GetFieldValue(""Id"");	
			 	var sCPSProfileAttr = TheApplication().GetProfileAttr(""NewOrderCPSFlag"");
			 	if(sCPSProfileAttr == ""Y"")
			 	{
			 		sCPSflg = ""Y"";
			 	}
			 	else
			 	{
			 		sCPSflg = ""N"";
			 	}
			 	if(sBillAcntId != """" && sBillAcntId != null)
			 	{
			 		fnUpdateCPSBillFlg(sBillAcntId, sCPSflg);
			 	}
			 	TheApplication().SetProfileAttr(""NewOrderCPSFlag"","""");
			 	this.ParentBusComp().ActivateField(""STC Split Billing Flag"");
				var splitFlag = this.ParentBusComp().GetFieldValue(""STC Split Billing Flag"");
			 	if(splitFlag != ""Y"")
			 	{
					this.ParentBusComp().InvokeMethod(""RefreshBusComp"");
				}
			}
			 
	}
	catch(e)
	{
	}
	finally
	{
		bc_OrderTypes = null;
	}
}
function BusComp_PreInvokeMethod (MethodName)
{
var appObj = null;
var iReturn = null;
var boAccount = null;
var bcAccount = null;
var accntId = null;
var custType = null;
var dunningChangeService = null;
var input = null, output = null;

try
{
	iReturn = ContinueOperation;
	switch(MethodName)
	{
		case ""SubmitOrderSTC"":
		case ""ValidateOrder"":
		{
			appObj = TheApplication();
			this.ActivateField(""Account Id"");
			accntId = this.GetFieldValue(""Account Id"");
			
			boAccount = appObj.GetBusObject(""Account"");
			bcAccount = boAccount.GetBusComp(""Account"");
			if(bcAccount != null)
			{
				with(bcAccount)
				{
					SetViewMode(AllView);
					ActivateField(""Type"");
					ClearToQuery();
					SetSearchSpec(""Id"", accntId);
					ExecuteQuery(ForwardOnly);
					isRecord = FirstRecord();
					//count = CountRecords();	
					if(isRecord)//1
					{
						custType = GetFieldValue(""Type"");
							if(custType == ""Corporate"")
							{
								//Calling Business Service to validate the CSR:
									dunningChangeService = appObj.GetService(""STC Corp CSR Validation BS"");
									input = appObj.NewPropertySet();
									output = appObj.NewPropertySet();
									dunningChangeService.InvokeMethod(""ValidateCorporateCSR"", input, output);
							}
					}//end of if(isRecord)//1
				}//end of with(bcAccount)
			}//end of  if(bcAccount != null)
			iReturn	= CancelOperation;
			break;
		}
	}//end of switch(MethodName)
}	
catch(e)
{
	throw(e);
}
finally
{
	input = null;
	output = null;
	dunningChangeService = null;
	bcAccount = null;
	boAccount = null;
	appObj = null;
}	
	return (iReturn);

}
"//***********************************************************************************************************//
//Purpose: 1)To validate whether the current user(CSR) has the rights to modify the order or not 
//Inputs: 
//Outputs: Will give an error message if the CSR is not authorised
//Author: Navin Rai
//Release: 
//Date: 20-Oct-2010
//*************************************************************************************************************//
function BusComp_PreNewRecord ()
{
	var appObj;
	var currLoginId;
	var custType;
	var foundCSR, foundCSRSubstr;
	var parentBC;
	
	try
	{
	//Added by Navin
		appObj = TheApplication();
				
				with(appObj)
				{
					currLoginId = LoginName();	
				}		
			
				parentBC = this.ParentBusComp();
				
			if(parentBC != null)
			{
				parentBC.ActivateField(""Type"");
				custType = parentBC.GetFieldValue(""Type"");
				
				if(custType == ""Corporate"")
				{
					foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_CORPORATE_CSRS"",currLoginId);
					
					foundCSRSubstr = foundCSR.substring(0,3);
					
					if(foundCSRSubstr != ""CSR"")
					{
						appObj.RaiseErrorText(""Sorry! You do not have the privilege to create the order"");
						return (CancelOperation);
					}
				}
			}
		}
	finally
		{
			parentBC = null;
			appObj = null;
		}
	//Navin Edit Ends

	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	var sOrderSubTypeLOV;
	//var appObj;
	var appObj=TheApplication();
	var sStatusApprLOV=null;
	var sStatusRejLOV=null;
	var sStatusCanLOV=null;
	var sSystemdate;
	var sSuper="""";
	var sBHId;//CIO
	var sSubIdType;//CIO
	var sSubscriberCntry;
	var sActiveViewName = TheApplication().ActiveViewName();
	try
	{
		switch(FieldName)
		{

		
			case ""STC Order SubType"":
				appObj = TheApplication();
				sOrderSubTypeLOV = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Disconnect"");
				if(FieldValue != sOrderSubTypeLOV)
				{
					this.SetFieldValue(""STC Refund Method"","""");
					this.SetFieldValue(""STC Customer Name"","""");
					this.SetFieldValue(""STC Account Number"","""");
				}
				break;
				//Added for CIO Software update SRINI:04032014 below
			case ""STC Subscriber Id Type"":				
				sBHId = TheApplication().InvokeMethod(""LookupValue"",""STC_CUST_ID_TYPE"",""Bahraini ID"");				
				if(FieldValue == sBHId){
					sSubscriberCntry = TheApplication().InvokeMethod(""LookupValue"",""STC_GCC_COUNTRY_CODE"",""BH"");
					this.SetFieldValue(""STC GCC Country Code"",sSubscriberCntry);
				}
				else
					this.SetFieldValue(""STC GCC Country Code"","""");
										
				break;
			case ""STC Individual Id Type"":
				sBHId = TheApplication().InvokeMethod(""LookupValue"",""STC_CUST_ID_TYPE"",""Bahraini ID"");
				if(FieldValue == sBHId){
					sSubscriberCntry = TheApplication().InvokeMethod(""LookupValue"",""STC_GCC_COUNTRY_CODE"",""BH"");
					this.SetFieldValue(""STC Indv GCC Country Code"",sSubscriberCntry);
				}
				else
					this.SetFieldValue(""STC Indv GCC Country Code"","""");					
				break;
				
			case ""STC GCC Country Code"":
				if(sActiveViewName == ""Order Entry - Line Items Detail View (Sales)""){
					sSubIdType = GetFieldValue(""STC Subscriber Id Type"");
					if(sSubIdType == ""Passport"")
						appObj.RaiseErrorText(""GCC Country is not allowed for Id Type 'Passport'"");
				}//endif sActiveViewName			
				break;
				
			case ""STC Indv GCC Country Code"":
				if(sActiveViewName == ""Order Entry - Line Items Detail View (Sales)""){
					sSubIdType = GetFieldValue(""STC Individual Id Type"");
					if(sSubIdType == ""Passport"")
						appObj.RaiseErrorText(""GCC Country is not allowed for Id Type 'Passport'"");
				}//endif sActiveViewName			
				break;		
					
			//Added for CIO Software update SRINI:04032014 above
			
			case ""Status"":
				appObj = TheApplication();
				with(appObj)
				{
					sStatusApprLOV = InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Approved"");
					sStatusRejLOV = InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Rejected"");
					sStatusCanLOV = InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Cancelled"");
				}
				switch(FieldValue)
				{
					case ""Approved"":
						this.SetFieldValue(""STC Order Sub Status"",sStatusApprLOV);
						this.ActivateField(""Approved"");
						this.SetFieldValue(""Approved"",""Y"");
						sSystemdate = this.GetFieldValue(""TimeStamp"");
						this.SetFieldValue(""Approved By Date"",sSystemdate);
						break;
					
					case ""Rejected"":
						this.SetFieldValue(""STC Order Sub Status"",sStatusRejLOV);
						this.ActivateField(""Approved"");
						this.SetFieldValue(""Approved"",""Y"");
						sSystemdate = this.GetFieldValue(""TimeStamp"");
						this.SetFieldValue(""Approved By Date"",sSystemdate);
						break;
						
					case ""Cancelled"":
						if (this.GetFieldValue(""STC Open DIA Activity Count"") > 0 )
							appObj.RaiseErrorText(""There is an open activity of type 'DIA Mobility Approval' against this order. This order cannot be cancelled."");
						else
						{

							var OrderId = this.GetFieldValue(""Id"");
								this.ActivateField(""STC Order SubType"");
								var OrderType = this.GetFieldValue(""STC Order SubType"");
								if((OrderId != null || OrderId != '' || OrderId != """") && (OrderType == ""Modify"" || OrderType == ""Suspend""))
								{
									fn_CancelTT(OrderId);
								}

							this.SetFieldValue(""STC Order Sub Status"",sStatusCanLOV);
							fn_RestrictPOSOrdCancel();
						}
						break;
						
					default:
						
				}
				break;
				
		}
		var sCreateAct = TheApplication().GetProfileAttr(""CreateAct"");
		if(FieldName ==""STC Num of Inst"")// && (sCreateAct==""N"" || sCreateAct==""""))
		{ 		
		//this.ActivateField(""STC Install Flg"");
		this.ActivateField(""STC Order Install Flag"");
		var ActiveView = TheApplication().ActiveViewName(); 
		var Cat =this.GetFieldValue(""STC Contract Category"");
		var InstallFlg = this.GetFieldValue(""STC Order Install Flag"");
		//var Instflg=this.GetFieldValue(""STC Install Flg"");
		if(InstallFlg != ""N""){
		//	if(ActiveView ==""Order Entry - Payment View (Sales)"" || ActiveView ==""Order Entry - Line Items Detail View (Sales)"")
		//	{
				/*//START - [19Sep2016][NAVINR][OrderApproval]
			    var currLoginId =appObj.LoginName();
				var foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_SUPER_CSRS"",currLoginId);
				var foundCSRSubstr = foundCSR.substring(0,5);
				if(foundCSRSubstr != ""SUPER"") 	   	
				{
					appObj.RaiseErrorText(""Your Not Autorized person to change the Value"");
				}
				*///END - [19Sep2016][NAVINR][OrderApproval]*/
				/*if(Instflg==""Y"")
				{
					appObj.RaiseErrorText(""Once Payment is Created your not suppose to change the Instalments"");
				}*/		    
			    if(Cat!=""Individual"")
			    {
			   
			    appObj.RaiseErrorText(""Number of Installments is not Applicable other than Individual Segments"");
			    }//if(Cat!=""Individual"")
			//	}//	if(ActiveView)
				}//if(InstallFlg != ""N"")	
		} 
		return(ContinueOperation);
	}
	catch(e)
	{ 
		throw(e)
	}
	finally
	{
	}
}
function BusComp_SetFieldValue (FieldName)
{
	try
	{	if (FieldName == ""STC Num of Inst"")
		{
			this.InvokeMethod(""RefreshBusComp"");
		}
		if (FieldName == ""Status"")
		{
			var sStatus = this.GetFieldValue(""Status"");
			var sCancelStatus = TheApplication().InvokeMethod(""LookupValue"",""FS_ORDER_STATUS"",""Cancelled"");
			if (sStatus == sCancelStatus)
			{
				var sOrderBO = TheApplication().GetBusObject(""Order Entry (Sales)"");
				var sOrderBC = sOrderBO.GetBusComp(""Order Entry - Orders"");
				var sOrderLineBC = sOrderBO.GetBusComp(""Order Entry - Line Items"");
				
				with (sOrderBC)
				{
					SetViewMode(AllView);
					ClearToQuery();
					var sOrderId = this.GetFieldValue(""Id"");
					SetSearchSpec(""Id"", sOrderId);
					ExecuteQuery(ForwardOnly);
					
					with(sOrderLineBC)
					{
						ActivateField(""STC Voucher Promotion Flag"");
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchSpec(""STC Voucher Promotion Flag"", ""Y"");
						ExecuteQuery(ForwardOnly);
						var sCount = CountRecords();
						if (sCount > 0)
							TheApplication().RaiseErrorText(""Please delete promotions added by you and then proceed for Order Cancellation."");
					}
				}
			}
		}
		return(ContinueOperation);
	}
	catch(e)
	{
	throw(e)
	}
	finally
	{
	}
}
function BusComp_WriteRecord ()
{
var vInputs;
	var vOutputs;
	var vPortCanWF;
	var sApp = TheApplication(); // Suman Added for Removing BB5,10 Plan Validation.
	this.ActivateField(""STC Port In Flag"");
	this.ActivateField(""Status"");
	this.ActivateField(""STC MNP Port Out"");
	this.ActivateField(""STC Service Account Port In Flag"");
	this.ActivateField(""STC Order SubType"");
	this.ActivateField(""STC Order Sub Status"");
	var vPortIn = this.GetFieldValue(""STC Port In Flag"");
	var vStatus = this.GetFieldValue(""Status"");
	var vPortOut = this.GetFieldValue(""STC MNP Port Out"");
	var vId = this.GetFieldValue(""Id"");
	var vType = this.GetFieldValue(""STC Order SubType"");
//	var vServAccPInFlag = this.GetFieldValue(""STC Service Account Port In Flag"");
	var vSubStatus = this.GetFieldValue(""STC Order Sub Status"");
	
	//[27Feb2017:NAVIN:TRASIMREG_P1B]
	this.ActivateField(""STC Customer Type"");
	this.ActivateField(""STC Corporate Audit Id"");
	this.ActivateField(""Order Number"");
	var vCustType = this.GetFieldValue(""STC Customer Type"");
	var vAuditRecId = this.GetFieldValue(""STC Corporate Audit Id"");
	var vOrderNumber = this.GetFieldValue(""Order Number"");
	//[27Feb2017:NAVIN:TRASIMREG_P1B]

	if(vPortIn == ""Yes"" && vType == ""Provide"" && vStatus == ""Cancelled"" && vSubStatus == ""Cancelled"")
		{
			vInputs = TheApplication().NewPropertySet();
			vOutputs = TheApplication().NewPropertySet();
			vPortCanWF = TheApplication().GetService(""Workflow Process Manager"");
			vInputs.SetProperty(""ProcessName"", ""STC GenPortIn Cancel Request"");
			vInputs.SetProperty(""Object Id"",vId);
		    vPortCanWF.InvokeMethod(""RunProcess"", vInputs, vOutputs);
		}
	
	if(vType == ""Provide"" && vStatus == ""Cancelled"" && vSubStatus == ""Cancelled"" && (vAuditRecId != """" || vAuditRecId != null))
	{//[08Nov2016:NAVIN:TRASIMREG]
		fn_TRAOrderCancellation(vId, vOrderNumber, vAuditRecId, vCustType, vType);
	}
		
	var CallBB10 = sApp.InvokeMethod(""LookupValue"",""STC_ADMIN"",""CHK_VALID_BB_10_5"");
	var CallBBValidation = CallBB10.substring(0,5);
	if(CallBBValidation == ""CHKBB""){
	if(vNewRec) //Anchal: Added for New BB Plans
	{
		var vOrderType = this.GetFieldValue(""STC Order SubType"");
		var vChannel = this.GetFieldValue(""STC Channel"");
		if((vOrderType == ""Provide"" || vOrderType == ""Modify"") && vChannel == ""CRM"")
		{
			CallWF();
		}
	}
	}// end of 	if(CallBB10 == """")
}
function CallWF()
{
	try
	{	
		//9/10/14 Anchal: Created new as per SD_New BB
		var vBC:BusComp = this;	
		var Inputs: PropertySet   = TheApplication().NewPropertySet();
		var Outputs:PropertySet = TheApplication().NewPropertySet();
		var svcbsService: Service = TheApplication().GetService(""Workflow Process Manager"");
		Inputs.SetProperty(""ProcessName"", ""STC New BB Plans Validation WF"");
		Inputs.SetProperty(""Object Id"",vBC.GetFieldValue(""Id""));						
		svcbsService.InvokeMethod(""RunProcess"", Inputs, Outputs);		
	}
	finally
	{		
		svcbsService = null;
		vBC = null;
		Inputs = null;
		Outputs = null;		
	}
}
function fnUpdateCPSBillFlg(sCPSBillAcntId, strCPSflg)
{
try
{
	var boCPSBillAccnt = TheApplication().GetBusObject(""STC Business Billing BO"");
	var bcCPSBillAccnt = boCPSBillAccnt.GetBusComp(""CUT Invoice Sub Accounts Thin"");
	
	with(bcCPSBillAccnt)
	{
		SetViewMode(AllView);
		ClearToQuery();
		ActivateField(""STC Business CPS Flag"");
		SetSearchSpec(""Id"", sCPSBillAcntId);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord)
		{
			SetFieldValue(""STC Business CPS Flag"", strCPSflg);
			WriteRecord();
		}
	}
}
catch(e)
{
	throw(e);
}
finally
{
	bcCPSBillAccnt = null; boCPSBillAccnt = null;
}
}
function fn_CancelTT(OrderId)
{
	var appObj = TheApplication();
	var SRLightBO = appObj.GetBusObject(""Service Request - Lightweight"");
	var SRLightBC = SRLightBO.GetBusComp(""Service Request - Lightweight"");
	with(SRLightBC)
	{
			var Spec =  ""[STC Order Id] = '"" + OrderId + ""' AND [Status] <> 'Closed'"";
			ActivateField(""Status"");
			ActivateField(""Sub-Status"");
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(Spec);
			//SetSearchSpec(""STC Order Id"", OrderId);
			ExecuteQuery(ForwardOnly);
			var isRec = FirstRecord();
			while(isRec)
			{
				SetFieldValue(""Sub-Status"", appObj.InvokeMethod(""LookupValue"", ""SR_SUB_STATUS"", ""Completed""));
				SetFieldValue(""Status"", appObj.InvokeMethod(""LookupValue"", ""SR_STATUS"", ""Closed""));
				WriteRecord();
				isRec = NextRecord();
			}	
	}
}
function fn_RestrictPOSOrdCancel()
{
	this.ActivateField(""STC POS Flag"");
	var sPOSValueFlg = this.GetFieldValue(""STC POS Flag"");
	if(sPOSValueFlg == ""Y"")
	{
		var sappObj = TheApplication();
		var sPOSUserLOV = """"; var sPOSUSerSubstr = """";
		var sUserName = sappObj.LoginName();
		sPOSUserLOV = sappObj.InvokeMethod(""LookupValue"",""STC_POS_USER_RESTRICT"",sUserName);
		sPOSUSerSubstr = sPOSUserLOV.substring(0,5);
		var sOrderInprog = sappObj.InvokeMethod(""LookupValue"",""FS_ORDER_STATUS"",""In Progress"");
		var sMNPPortIn = sappObj.InvokeMethod(""LookupValue"",""STC_PORT_FLAG"",""Yes"");
		var sOrderStat = this.GetFieldValue(""Status"");
		var sMNPOrder = this.GetFieldValue(""STC Port In Flag"");
		if(sPOSUSerSubstr != ""Allow"")
		{
			if(sOrderStat == sOrderInprog && sMNPOrder == sMNPPortIn)
			{
			}
			else
			{
				sappObj.RaiseErrorText(""Order is submitted to POS, you are not allowed to cancel this order"");
			}
		}
	}
	var sOrdCPSSubTypeLOV = TheApplication().InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Provide"");
	var sSplitFlag = this.GetFieldValue(""STC Split Billing Flag"");
	var sOrdSubTyp = this.GetFieldValue(""STC Order SubType"")
	if(sSplitFlag == ""Y"" && sOrdCPSSubTypeLOV == sOrdSubTyp)
	{
		this.ActivateField(""STC Split Ban Id"");
		var sSplitBanId = this.GetFieldValue(""STC Split Ban Id"");
		var sSVC = TheApplication().GetService(""Workflow Process Manager"");
		var psInputs   = TheApplication().NewPropertySet();
		var psOutputs = TheApplication().NewPropertySet();
		psInputs.SetProperty(""ProcessName"", ""STC Update Split Account WF"");
		psInputs.SetProperty(""Object Id"",sSplitBanId);
		psInputs.SetProperty(""SplitBanCheckFlg"",""N"");
		sSVC.InvokeMethod(""RunProcess"", psInputs, psOutputs);
		psInputs = null; psOutputs = null;
	}
}
function fn_TRAOrderCancellation(vOrderId, vOrderNumber, vAuditRecId, vCustType, vOrderType)
{//[08Nov2016:NAVIN:TRASIMREG]
	var bsWfIpArg=null, bsWfOpArg=null, bsWfProcMgr=null;
	var errCode="""", errMsg="""";
	try
	{
		bsWfProcMgr = TheApplication().GetService(""Workflow Process Manager"");
		bsWfIpArg = TheApplication().NewPropertySet();
		bsWfOpArg = TheApplication().NewPropertySet();
		with (bsWfIpArg)
		{
			SetProperty(""ProcessName"", ""STCISLSIMRegCancelVerificationWF"");
			SetProperty(""Object Id"", vOrderId);
			SetProperty(""OrderNumber"", vOrderNumber);
			SetProperty(""AuditRowId"", vAuditRecId);
			SetProperty(""CustomerType"", vCustType);
			SetProperty(""OrderType"", vOrderType);
		}
		bsWfProcMgr.InvokeMethod(""RunProcess"", bsWfIpArg, bsWfOpArg);
	
		errCode = bsWfOpArg.GetProperty(""Error Code"");
		errMsg = bsWfOpArg.GetProperty(""Error Message"");
		/*if (errCode != ""0"")
		{
			TheApplication().RaiseErrorText(errMsg);
		}*/
	}
	catch(e){
	}
	finally{
		bsWfIpArg=null; bsWfOpArg=null;
		bsWfProcMgr=null;
	}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	if(FieldName == ""STC Locked Flag""){
		var appObj = TheApplication();
		var sActiveViewName = appObj.ActiveViewName();		
		if(sActiveViewName == ""STC BTL Eligible Subscribers View""){
			var sCurrentLogin = appObj.LoginName();
			var sLockedBy = this.GetFieldValue(""STC Locked By"");
			if(sLockedBy != sCurrentLogin)
				appObj.RaiseErrorText(""You are not allowed to modify 'Locked Flag'"");
			else{
				if(FieldValue == ""N""){
					this.SetFieldValue(""STC Locked By"","""");
					this.SetFieldValue(""STC Survey Status"",""Open"");
				}
				else{
					var sNavigatePromoSurvy = TheApplication().GetProfileAttr(""GoToPromotionSurvey"");
					if(sNavigatePromoSurvy != ""Yes"")
						appObj.RaiseErrorText(""You are not allowed to update 'Locked Flag'to 'Y'"");	
					else
						TheApplication().SetProfileAttr(""GoToPromotionSurvey"",""No"");
				}//endelse 				
			}//endelse
		}//endif sActiveViewName
	}//endif 	FieldName == ""STC Locked Flag""		
				
	return (ContinueOperation);
}
function BusComp_PreInvokeMethod (MethodName)
{
/*
if(MethodName == ""ProcessSelected"")
{
	var sWfSvc = TheApplication().GetService(""Workflow Process Manager"");
	var psInputs = TheApplication().NewPropertySet();
	var psOutputs = TheApplication().NewPropertySet();
	
	var bcCurrentObj = this;

	with(bcCurrentObj)
	{
		var iRec = FirstSelected();
		while(iRec)
		{
			psInputs.SetProperty(""Object Id"", GetFieldValue(""Id""));
			psInputs.SetProperty(""ProcessName"",""STC Create Bulk Collection SR WF"");
			sWfSvc.InvokeMethod(""RunProcess"", psInputs, psOutputs);
			psInputs = null; psOutputs = null;
			InvokeMethod(""RefreshRecord"");
			iRec = NextSelected();
		}
	}
//	this.InvokeMethod(""RefreshBusComp"");
	return(CancelOperation);
}*/
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	var iReturn = ContinueOperation;
	var AddOn1="""", AddOn2="""", AddOn3="""", AddOn4="""", ProdType="""";
	switch(FieldName)
	{
		case ""Add-On 1"":
		case ""Add-On 2"":
		case ""Add-On 3"":
		case ""Add-On 4"":
			ActivateField(""Add-On 1"");
			ActivateField(""Add-On 2"");
			ActivateField(""Add-On 3"");
			ActivateField(""Add-On 4"");
			AddOn1 = GetFieldValue(""Add-On 1"");
			AddOn2 = GetFieldValue(""Add-On 2"");
			AddOn3 = GetFieldValue(""Add-On 3"");
			AddOn4 = GetFieldValue(""Add-On 4"");
			if( (FieldName == ""Add-On 1"" && FieldValue != """") && ( FieldValue == AddOn2 || FieldValue == AddOn3 || FieldValue == AddOn4))
			{
				TheApplication().RaiseErrorText(""This product is already selected"");
				iReturn = CancelOperation;
			}
			if( (FieldName == ""Add-On 2"" && FieldValue != """") && ( FieldValue == AddOn1 || FieldValue == AddOn3 || FieldValue == AddOn4))
			{
				TheApplication().RaiseErrorText(""This product is already selected"");
				iReturn = CancelOperation;
			}
			if( (FieldName == ""Add-On 3"" && FieldValue != """") && ( FieldValue == AddOn2 || FieldValue == AddOn1 || FieldValue == AddOn4))
			{
				TheApplication().RaiseErrorText(""This product is already selected"");
				iReturn = CancelOperation;
			}
			if( (FieldName == ""Add-On 4"" && FieldValue != """") && ( FieldValue == AddOn2 || FieldValue == AddOn3 || FieldValue == AddOn1))
			{
				TheApplication().RaiseErrorText(""This product is already selected"");
				iReturn = CancelOperation;
			}
			break;
		
		case ""Device Add"":
			if( FieldValue != """")
			{	
				ProdType = ""Device"";
				if( fn_QueryAssetProduct(ProdType, FieldValue) )
				{
					TheApplication().RaiseErrorText(""This product is already present in this account"");
					iReturn = CancelOperation;
				}
			}
			break;
		
		case ""Add-On 1 Add"":
		case ""Add-On 2 Add"":
		case ""Add-On 3 Add"":
		case ""Add-On 4 Add"":
			if( FieldValue != """" )
			{
				ProdType = ""Add-On""; 
				if( fn_QueryAssetProduct(ProdType, FieldValue) )
				{
					TheApplication().RaiseErrorText(""This product is already present in this account"");
					iReturn = CancelOperation;
				}
				else
				{
					ActivateField(""Add-On 1 Add"");
					ActivateField(""Add-On 2 Add"");
					ActivateField(""Add-On 3 Add"");
					ActivateField(""Add-On 4 Add"");
					AddOn1 = GetFieldValue(""Add-On 1 Add"");
					AddOn2 = GetFieldValue(""Add-On 2 Add"");
					AddOn3 = GetFieldValue(""Add-On 3 Add"");
					AddOn4 = GetFieldValue(""Add-On 4 Add"");
					if( (FieldName == ""Add-On 1 Add"") && ( FieldValue == AddOn2 || FieldValue == AddOn3 || FieldValue == AddOn4))
					{
						TheApplication().RaiseErrorText(""This product is already selected"");
						iReturn = CancelOperation;
					}
					if( (FieldName == ""Add-On 2 Add"") && ( FieldValue == AddOn1 || FieldValue == AddOn3 || FieldValue == AddOn4))
					{
						TheApplication().RaiseErrorText(""This product is already selected"");
						iReturn = CancelOperation;
					}
					if( (FieldName == ""Add-On 3 Add"") && ( FieldValue == AddOn2 || FieldValue == AddOn1 || FieldValue == AddOn4))
					{
						TheApplication().RaiseErrorText(""This product is already selected"");
						iReturn = CancelOperation;
					}
					if( (FieldName == ""Add-On 4 Add"") && ( FieldValue == AddOn2 || FieldValue == AddOn3 || FieldValue == AddOn1))
					{
						TheApplication().RaiseErrorText(""This product is already selected"");
						iReturn = CancelOperation;
					}
				}
			}	
			break;
		default :
			break;
		
	}
	return (iReturn);
}
function fn_QueryAssetProduct(ProdType, FieldValue)
{
	var retValue = true;
	ActivateField(""Add-On 1"");
	ActivateField(""Device"");
	ActivateField(""Attribute Name"");
	ActivateField(""Bill Accnt Id"");
	ActivateField(""Service Accnt Id"");
	var objPickBusComp;
	if( ProdType == ""Device"" )
		objPickBusComp = GetPicklistBusComp(""Device"");
	else
		objPickBusComp = GetPicklistBusComp(""Add-On 1"");
	
	var MSISDN = GetFieldValue(""Attribute Name"");
	var BillAccntId = GetFieldValue(""Bill Accnt Id"");
	var ServAccntId = GetFieldValue(""Service Accnt Id"");
	
	with(objPickBusComp)
	{
		ActivateField(""Bill Accnt Id"");
		ActivateField(""Serial Num"");
		ActivateField(""Serv Acct Id"");
		ActivateField(""Product Name"");
		ActivateField(""Status Cd"");
		SetViewMode(AllView);
		ClearToQuery();
		SetSearchSpec(""Status Cd"", ""Active"");
		SetSearchSpec(""Product Name"", FieldValue );
		SetSearchSpec(""Serv Acct Id"", ServAccntId );
		SetSearchSpec(""Bill Accnt Id"", BillAccntId );
		SetSearchSpec(""Serial Num"", MSISDN );
		ExecuteQuery(ForwardOnly);
		if( FirstRecord() )
			retValue = true;
		else 
			retValue = false;
	}
	return( retValue );
}
"//Your public declarations go here... 
var vOldSIM = """";
var sSIMno = """";
var SIMCheckSUM = """";
var vOldMSISDN = """";
var sMSISDN = """";"
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	try
	{	
		var boRMS = """";
		var bcRMS = """";
		var isrecord="""";
		var RecBlockedFor="""";
		var MSISDNBlockedFor="""";
		switch(FieldName)
		{   
			case ""STC MENA Data Attr1"":
			var sIMEI = FieldValue;
			var sLen = 0;
			if(sIMEI != null && sIMEI != """")
			{
				sLen = sIMEI.length;
				var sNotNumber = isNaN(sIMEI);
				if (sNotNumber)
				{
					TheApplication().RaiseErrorText(""IMEI number should be numeric."");
				}
				if(sLen != 15)
				{
					TheApplication().RaiseErrorText(""Please enter 15 digit IMEI."");
				}
			}
			

			default : 
			break;
		}
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	} 
}
function BusComp_NewRecord ()
{
//[Mark:SD Enhancements of Payment Channels (CRM Bulk Payment)]

	var strActiveView = TheApplication().ActiveViewName();
	if(strActiveView == ""STC Bulk Payment Collections View"")
	 {
	 this.SetFieldValue(""Payment Request Type"",""Payment Collections"");
	// this.SetFieldValue(""Type"",""BulkPayment"");
	 }
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	try
	{
		var appObj = TheApplication();
		switch(FieldName)
		{
			case ""Payment Method"":
			var BulkId = this.GetFieldValue(""Id"");
			var sActiveViewName = appObj.ActiveViewName();
			if(FieldValue == ""IVR Payment"" && sActiveViewName != """" && sActiveViewName != null)
			{
				appObj.RaiseErrorText(""IVR Payments is not allowed from be selected from UI."");
			}
			break;
			
			default :
			break;	
		}
		return (ContinueOperation);
	}
	catch(e)
	{	
		throw(e);
	}
	finally
	{
		appObj = null;
	} 
}
function BusComp_SetFieldValue (FieldName)
{

		var appObj = TheApplication();
		switch(FieldName)
	    {
 		 	case ""Payment Amount"":
            var BulkId = this.GetFieldValue(""Id"");
            var Amount = this.GetFieldValue(""Payment Amount"");
           	
			var psInputs = appObj.NewPropertySet();
			var psOutputs = appObj.NewPropertySet();
			var svcbsService = appObj.GetService(""Workflow Process Manager"");
			psInputs.SetProperty(""ProcessName"", ""STCBulkPaymentRefreshPaymentProcess"");
			psInputs.SetProperty(""Object Id"",BulkId);
			psInputs.SetProperty(""Amount"",Amount);
			svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs); 
	             		     
            break;
             
             	default :
         		break;
            		return (ContinueOperation);
		}
		
	}
function BusComp_PreInvokeMethod (MethodName)
{
	var ireturn;
	
	try
	{
		switch(MethodName)
		{
			case ""CallAIABulkPayment"":
				CallAIA();
				return (CancelOperation);
				break;
			default:
				return (ContinueOperation);
				break;
		}	
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	}
}
function BusComp_Query ()
{
this.NewRecord(NewAfter);
}
function CallAIA()
{
//Mayank : Created to call AIA for Bulk Payment
try{
	var vBulkTransId = this.GetFieldValue(""STC Bulk Transaction Id"");;
	var vBulkTransType = ""Bulk"";
	
	var oApp = TheApplication();
	var vnew = ""N"";
	  var svcUI = oApp.GetService(""FINS Teller UI Navigation"");
	  var psIn1 = oApp.NewPropertySet();
	  var psOut1 = oApp.NewPropertySet();
	  psIn1.SetProperty(""Refresh All"",""Y"");
	  svcUI.InvokeMethod(""RefreshCurrentApplet"",psIn1,psOut1);
	  if (vBulkTransId != """" && vBulkTransId != null)
	{

//----------------- Call AIA--------------------------------
     	    var WfProcService:Service = oApp.GetService(""Workflow Process Manager"");
			var WfInpPropSet:PropertySet = oApp.NewPropertySet();
			var WfOutPropSet:PropertySet= oApp.NewPropertySet();
			WfInpPropSet.SetProperty(""ProcessName"", ""STC Bulk Payment Request OutBound WF"");
			WfInpPropSet.SetProperty(""vBulkTransId"", vBulkTransId);
			WfInpPropSet.SetProperty(""vBulkTransType"", vBulkTransType);
		    WfProcService.InvokeMethod(""RunProcess"", WfInpPropSet, WfOutPropSet);
		   
		    var sErrorCode = WfOutPropSet.GetProperty(""Error Code"");
		    var AIAErrorMessage = WfOutPropSet.GetProperty(""Error Message"");
			var DisplayPropSet:PropertySet = oApp.NewPropertySet();
			
			if(sErrorCode != """" && sErrorCode != null)
			{
			//DisplayPropSet.SetProperty(""STC Transaction Id"",""Error Occurred"");
		    //DisplayPropSet.SetProperty(""STC Status"",""Error Occurred"");
			//Outputs.AddChild(DisplayPropSet);
			with(this)
				{
					//NewRecord(1);
					SetFieldValue(""STC Transaction Id"",""Error Occurred"");
					SetFieldValue(""STC Status"", ""Error Occurred"");
					//SetFieldValue(""CANId"", AccountId);
					WriteRecord();
				}
			}
			else
				{
			    var WfOutPropSet111 = WfOutPropSet.GetChild(0).GetChild(0).GetChild(0);
			    var TransactionList = WfOutPropSet.GetChild(0).GetChild(0).GetChild(0).GetChild(0);
			    var TranscnListCount = TransactionList.GetChildCount();
			    var i = TranscnListCount - 1;
			    var j=TranscnListCount;
			    while(j != ""0"")
			    {
			    var TransctionDetails = WfOutPropSet.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i);
			    
			    var PaymentsDetails = TransctionDetails.GetChild(0);
			    var paymentCount = PaymentsDetails.GetChildCount();
			    
			    //var vAmountName = PaymentsDetails.GetChild(8).GetProperty(""name"");
			    var vAmountValue = PaymentsDetails.GetChild(8).GetProperty(""value"");
				//var vMSISDN = PaymentsDetails.GetChild(4).GetProperty(""name"");
				var vMSISDNVal = PaymentsDetails.GetChild(4).GetProperty(""value"");
				vMSISDNVal = vMSISDNVal.substring(1, 12);
							    			    
				//var vTransDateName = PaymentsDetails.GetChild(12).GetProperty(""name"");
				var vTransDateValue = PaymentsDetails.GetChild(12).GetProperty(""value"");
				vTransDateValue = vTransDateValue.substring(0, 19);
				//var vPaymentStatusName = PaymentsDetails.GetChild(9).GetProperty(""name"");
				var vPaymentStatusValue = PaymentsDetails.GetChild(9).GetProperty(""value"");
				
				
				//var vTransacIdName = PaymentsDetails.GetChild(2).GetProperty(""name"");
				var vTransacIdValue = PaymentsDetails.GetChild(2).GetProperty(""value"");	
				
				//var vChannelName = PaymentsDetails.GetChild(6).GetProperty(""name"");
				var vChannelValue = PaymentsDetails.GetChild(6).GetProperty(""value"");	
				
				//var vSubChannelName = PaymentsDetails.GetChild(7).GetProperty(""name"");
				var vSubChannelValue = PaymentsDetails.GetChild(7).GetProperty(""value"");	

			    
			    with(this)
				{
					if(vnew == ""N"")
					{
					//NewRecord(1);
					SetFieldValue(""STC Bulk Amount"",vAmountValue);
					SetFieldValue(""STC MSISDN"",vMSISDNVal);
					SetFieldValue(""STC Bulk Transaction Date"",vTransDateValue);
					SetFieldValue(""STC Transaction Id"",vTransacIdValue);
					SetFieldValue(""STC Status"",vPaymentStatusValue);
					SetFieldValue(""STC Bulk Transaction Type"",vBulkTransType);
					SetFieldValue(""STC Sub Channel"",vSubChannelValue);
					SetFieldValue(""STC Channel"",vChannelValue);
					WriteRecord();
					vnew = ""Y"";
					}
					else
					{
					NewRecord(NewAfter);
					SetFieldValue(""STC Bulk Transaction Id"",vBulkTransId);
					SetFieldValue(""STC Bulk Amount"",vAmountValue);
					SetFieldValue(""STC MSISDN"",vMSISDNVal);
					SetFieldValue(""STC Bulk Transaction Date"",vTransDateValue);
					SetFieldValue(""STC Transaction Id"",vTransacIdValue);
					SetFieldValue(""STC Status"",vPaymentStatusValue);
					SetFieldValue(""STC Bulk Transaction Type"",vBulkTransType);
					SetFieldValue(""STC Sub Channel"",vSubChannelValue);
					SetFieldValue(""STC Channel"",vChannelValue);
					WriteRecord();
					}
					//this.NewRecord(NewAfter);
				}
			
				i = i-1;
				j = j-1;
				}
		    }
		    /*else
		    {
		    DisplayPropSet.SetProperty(""STC Transaction Id"",""Error Occurred"");
		    DisplayPropSet.SetProperty(""STC Status"",""Error Occurred"");
		    }*/
		    
		    
		   	
		return (CancelOperation);
	}
	}
catch(e)
	{
		LogException(e);
		with(this)
				{
					//NewRecord(1);
					SetFieldValue(""STC Transaction Id"",""Error Occurred"");
					SetFieldValue(""STC Status"", ""Error Occurred"");
					//SetFieldValue(""CANId"", AccountId);
					WriteRecord();
				}
	}
	finally
	{
	}

}
function LogException(e)
{
	var appObj;
  	var Input;
  	var Output;
  	var CallMessageHandler; 
	try
 	{
		  appObj = TheApplication();
		  Input = appObj.NewPropertySet();
		  Output = appObj.NewPropertySet();
		  CallMessageHandler = appObj.GetService(""STC Generic Error Handler""); 
		  Input.SetProperty(""Error Code"", e.errCode);
		  Input.SetProperty(""Error Message"", e.errText);
		  Input.SetProperty(""Object Name"", ""STC Bulk Payment Request VBC BS"");
		  Input.SetProperty(""Object Type"", ""Buisness Service"");
		  CallMessageHandler.InvokeMethod(""Log Message"", Input, Output);
 	}
 	catch(e)
 	{
  		
 	}
 	finally
 	{
 
		  CallMessageHandler = null;
		  Output = null;
		  Input = null;
		  appObj = null;
 	}
 	
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
try
	{

				var appObj = TheApplication();
				with(appObj)
				{
				var sStatusComp = InvokeMethod(""LookupValue"",""FUNDRQ_STATUS"",""Complete"");	
				}
				switch(FieldName)
				{
					case ""Status"":
						if(sStatusComp == FieldValue)
						{
							this.ActivateField(""Reference Number"");
							var RefNum = this.GetFieldValue(""Reference Number"");
							if(RefNum == '' || RefNum == """" || RefNum == null)
							{
								TheApplication().RaiseErrorText(""Please select Payment Transaction Id before completing Payment"");
								return(CancelOperation);
							}
						}
							
						
						
						break;
						
					default:

				} 

		
	return(ContinueOperation);
	}
	catch(e)
	{
	throw(e)
	}
	finally
	{
	}
}
"//[MARK:19-Aug-2019 SD:System Features Enhancements]
function BusComp_PreWriteRecord ()
{
try
	{	    
	        	this.ActivateField(""Account Id"");		 
     	        this.ActivateField(""STC POS Receipt Number"");	   
	        	this.ActivateField(""Payment Method"");
				this.ActivateField(""Id"");
		var PaymentRowId = this.GetFieldValue(""Id"");
		var sAccId =this.GetFieldValue(""Account Id"");
		var PaymentMetod =  this.GetFieldValue(""Payment Method"");
		var EntierPOSReceiptNumber = this.GetFieldValue(""STC POS Receipt Number"");
		var svcbsService = null, psInputs = null, psOutputs = null;
		var vErrCode="""", vErrMsg="""";
		if(PaymentMetod == ""Bank Transfer"" || PaymentMetod == ""Cheque"" || PaymentMetod == ""Credit/Debit Card"")
		 {
				svcbsService = TheApplication().GetService(""Workflow Process Manager"");
				psInputs = TheApplication().NewPropertySet();
				psOutputs = TheApplication().NewPropertySet();
				with (psInputs)
				{
					SetProperty(""ProcessName"",""STC System Features Enhancements POS Receipt ValidationWF"");
					SetProperty(""BulkPOSReceiptNumber"", EntierPOSReceiptNumber);
					SetProperty(""PaymentRowId"", PaymentRowId);
					SetProperty(""AccountId"", sAccId);
				}
				svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);						
				vErrCode = psOutputs.GetProperty(""Error Code"");
				vErrMsg = psOutputs.GetProperty(""Error Message"");
				if (vErrCode != ""0"" && vErrCode != """")
				TheApplication().RaiseErrorText(vErrMsg);
	  	}
	

	}
	
	catch(e)
	{
	throw(e);
	}
	finally
	{
	sAccId = null;
	PaymentMetod = null;
	EntierPOSReceiptNumber = null;
	}
	return (ContinueOperation);
}
"//[MARK:19-Aug-2019 SD:System Features Enhancements]
function BusComp_PreWriteRecord ()
{
try
	{	    
		this.ActivateField(""Account Id"");		 
		this.ActivateField(""STC POS Receipt Number"");	   
		this.ActivateField(""Payment Method"");
		this.ActivateField(""Id"");
		var PaymentRowId = this.GetFieldValue(""Id"");
		var sAccId =this.GetFieldValue(""Account Id"");
		var PaymentMetod =  this.GetFieldValue(""Payment Method"");
		var EntierPOSReceiptNumber = this.GetFieldValue(""STC POS Receipt Number"");
		var svcbsService = null, psInputs = null, psOutputs = null;
		var vErrCode="""", vErrMsg="""";
		if(PaymentMetod == ""Bank Transfer"" || PaymentMetod == ""Cheque"" || PaymentMetod == ""Credit/Debit Card"")
		 {
				svcbsService = TheApplication().GetService(""Workflow Process Manager"");
				psInputs = TheApplication().NewPropertySet();
				psOutputs = TheApplication().NewPropertySet();
				with (psInputs)
				{
					SetProperty(""ProcessName"",""STC System Features Enhancements POS Receipt ValidationWF"");
					SetProperty(""BulkPOSReceiptNumber"", EntierPOSReceiptNumber);
					SetProperty(""PaymentRowId"", PaymentRowId);
					SetProperty(""AccountId"", sAccId);
				}
				svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);						
				vErrCode = psOutputs.GetProperty(""Error Code"");
				vErrMsg = psOutputs.GetProperty(""Error Message"");
				if (vErrCode != ""0"" && vErrCode != """")
				TheApplication().RaiseErrorText(vErrMsg);
	  	}
	

	}
	
	catch(e)
	{
	throw(e);
	}
	finally
	{
	sAccId = null;
	PaymentMetod = null;
	EntierPOSReceiptNumber = null;
	}
	return (ContinueOperation);
}
"//Your public declarations go here... 
var vOldSIM = """";
var sSIMno = """";
var SIMCheckSUM = """";
var vOldMSISDN = """";
var sMSISDN = """";"
function BlockRe_selection (OldValue,NewValue)
{
	try
	{
	var appObj;
	var psInputs,psOutputs,bsBlockNumber;
	appObj = TheApplication();
	
	
                                   
		bsBlockNumber = appObj.GetService(""RMS RMS Block Number"") ;
		psInputs = appObj.NewPropertySet();
		psOutputs = appObj.NewPropertySet();
		this.ActivateField(""CBAN"");
		var vBlockedFor = this.GetFieldValue(""Id"");
		psInputs.SetProperty(""BlockNumber"",NewValue);
		psInputs.SetProperty(""BlockedFor"",vBlockedFor);
		psInputs.SetProperty(""ReleaseNumber"",OldValue); // variable set at PreSetFieldValue
		bsBlockNumber.InvokeMethod(""BlockNumber"",psInputs,psOutputs);
		var ErrorCode =  psOutputs.GetProperty(""ErrCode"");
		var ErrorMessage =  psOutputs.GetProperty(""ErrMessage"");
		if(	ErrorCode != """")
		{
			appObj.RaiseErrorText(ErrorMessage);
		}

	}
	catch(e)
	{
	throw(e.errText);
	}
	finally
	{
	psInputs = null;
    psOutputs = null;
    bsBlockNumber = null;
    appObj = null;
	}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	try
	{	
		var boRMS = """";
		var bcRMS = """";
		var isrecord="""";
		var RecBlockedFor="""";
		var MSISDNBlockedFor="""";
		switch(FieldName)
		{   

			case ""SIM Number"":
			vOldSIM = this.GetFieldValue(""SIM Number"");
			sSIMno = FieldValue;
			var SIMLen = 0;
			SIMLen = sSIMno.length;
			if(SIMLen == 18)
			{
				boRMS = TheApplication().GetBusObject(""RMS NM Number Enquiry_Thin"");//P1 ****
				bcRMS = boRMS.GetBusComp(""RMS NM Number Enquiry_Thin"");//P1 ****

				with (bcRMS)
					{
						SetViewMode(AllView);
						ActivateField(""Number String"");
						ActivateField(""Number String Checksum"");
						ClearToQuery();
						SetSearchSpec(""Number String"",sSIMno);
						ExecuteQuery(ForwardOnly);
						isrecord = FirstRecord();
						if (isrecord)
						{
							SIMCheckSUM = GetFieldValue(""Number String Checksum"");	
						}
					}

				
				//	sSIMno = SIMCheckSUM;

			}
			
			if(SIMCheckSUM != """")
			{
			BlockRe_selection (vOldSIM,SIMCheckSUM);
			}
			//	this.SetFieldValue(""STC SIM Number"",SIMCheckSUM);
			//	this.SetFieldValue(""SIM Number"",SIMCheckSUM);
				
			//	this.WriteRecord();
			//	this.InvokeMethod(""RefreshBusComp""); 
			//	this.InvokeMethod(""RefreshRecord""); 
			//	this.ExecuteQuery(ForwardBackward);

			break;


			case ""MSISDN"":
			vOldMSISDN = this.GetFieldValue(""MSISDN"");
			sMSISDN = FieldValue;
			RecBlockedFor = this.GetFieldValue(""Id"");
	
		// Abuzar:Start - Validate if selected MSISDN is already reserved for another CR# then throw error
			var strActiveViewName; 		
			var strValidateFlg;
			strActiveViewName = TheApplication().ActiveViewName();
			strValidateFlg = TheApplication().InvokeMethod(""LookupValue"", ""CORP_POOL"", strActiveViewName);
			if(strValidateFlg.charAt(0) == '_' && sMSISDN != '' && sMSISDN != null)
			{
				var strHeaderBC = TheApplication().ActiveBusObject().GetBusComp(""STC Bulk Activation Header BC"");
				strHeaderBC.ActivateField(""STC CAN CR Number"");
				var strCANCRNum = strHeaderBC.GetFieldValue(""STC CAN CR Number"");
				var CallBS, psOutputs, psInputs;

				psInputs = TheApplication().NewPropertySet();
				psOutputs = TheApplication().NewPropertySet();
				CallBS = TheApplication().GetService(""Workflow Process Manager"");
				with(psInputs)
				{
					SetProperty(""ProcessName"", ""STC Bulk Get Reserved Number Details WF"");
					SetProperty(""MSISDN"", sMSISDN);
					
				}
				CallBS.InvokeMethod(""RunProcess"", psInputs, psOutputs);
				var strMSISDNStatus = psOutputs.GetProperty(""MSISDNStatus"");
				var strMSISDNReservedTo = psOutputs.GetProperty(""MSISDNReservedTo"");
				if (strMSISDNReservedTo != '' && strMSISDNReservedTo != null && strCANCRNum != null  && strCANCRNum != '' && strMSISDNStatus == 'Reserved')
				{
					if(strMSISDNReservedTo != strCANCRNum)
					{
						TheApplication().RaiseErrorText(""The selected MSISDN is already reserved for another Customer. Please provide another MSISDN"");
					}
				}
			}		
		// Abuzar: End - Validate if selected MSISDN is Reserved for another CR#
			
			if(sMSISDN != """")
			{

				boRMS = TheApplication().GetBusObject(""RMS NM Number Enquiry_Thin"");//P1 ****
				bcRMS = boRMS.GetBusComp(""RMS NM Number Enquiry_Thin"");//P1 ****
				
				with (bcRMS)
				{
					SetViewMode(AllView);
					ActivateField(""Number String"");
					ActivateField(""Record Blocked For"");
					ClearToQuery();
					SetSearchSpec(""Number String"",sMSISDN);
					ExecuteQuery(ForwardOnly);
					isrecord = FirstRecord();
					if (isrecord)
					{
						MSISDNBlockedFor = GetFieldValue(""Record Blocked For"");	
					}
				}

			if ((RecBlockedFor != """") && (MSISDNBlockedFor != """")) //RMS
			{
			if(RecBlockedFor != MSISDNBlockedFor)
			{
				TheApplication().RaiseErrorText(""The selected MSISDN is reserved for another. Please select alternate number"");
				return (CancelOperation);
			}
			}


			BlockRe_selection (vOldMSISDN,sMSISDN);
			}


			break;




			case ""STC MENA Data Attr2"":

			case ""STC Email Id"":
			var EmailVaue = FieldValue;
			var sEmailId = this.GetFieldValue(""STC Email Id"");
		
			if(EmailVaue != """")
			 {
			 Email_validation(sEmailId,EmailVaue);
			 }

			break;
			case ""STC MENA Data Attr1"":
			var sIMEI = FieldValue;
			var sLen = 0;
			if(sIMEI != null && sIMEI != """")
			{
				sLen = sIMEI.length;
				var sNotNumber = isNaN(sIMEI);
				if (sNotNumber)
				{
					TheApplication().RaiseErrorText(""IMEI number should be numeric."");
				}
				if(sLen != 15)
				{
					TheApplication().RaiseErrorText(""Please enter 15 digit IMEI."");
				}
			}


			default : 
			break;
		}
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	} 
}
function Email_validation(sEmailId,EmailVaue)
{
	try
	{
		
	if(EmailVaue != """" && EmailVaue != null && EmailVaue != ""NA"" && EmailVaue != ""na"")
		{	 
		      var i;
			  var appObj = TheApplication();
			  var  semailAddr = EmailVaue;
			  var sfirstChar = semailAddr.substring(0,1);
			  var slastChar = semailAddr.substring(semailAddr.length-1,semailAddr.length);
			  var  sNot_First_Last = ""@."";
			  var srequiredChars = "".@"";
			  var sillegalChars = "",:; <>[]{}!£$%^*()#/+~|"";
			  var  iIndex = semailAddr.indexOf(""@"");
			  var  ipindex = semailAddr.lastIndexOf(""."");
			  var  sMesg,sErrorMsg,sErrorCode;
			  var   scurrent_char;

			    if (semailAddr.length < 6)
			    {
					TheApplication().RaiseErrorText(""Error, Invalid email. Please enter valid email address."");
                        	return (CancelOperation);
				       //sMesg = LookupMessage(""User Defined Errors"",""AM0018"");
				      // sErrorMsg += LookupMessage(""User Defined Errors"",""AM0018"") +""\n"";
					  // sErrorCode += ""AM0018 \n"";	
				 }
				 else if (sNot_First_Last.indexOf(sfirstChar,0) != -1)
				 {
					   TheApplication().RaiseErrorText(""Error, Invalid email. Please enter valid email address."");
                        	return (CancelOperation);
				 }
				 else if (sNot_First_Last.indexOf(slastChar,0) != -1)
                 {
	                   TheApplication().RaiseErrorText(""Error, Invalid email. Please enter valid email address."");
                        	return (CancelOperation);
				 }
				 else if(iIndex > ipindex)
				 {
					 TheApplication().RaiseErrorText(""Error, Invalid email. Please enter valid email address."");
                        	return (CancelOperation); 					
				 }
                /* else if (sMesg == """")
                 {
                       //Process Required Chars
                       for (i=0;i<srequiredChars.length;i++)
                       {
                            scurrent_char = srequiredChars.substring(i,i+1);
                             if (semailAddr.indexOf(scurrent_char,0) == -1)
                             {
	                             TheApplication().RaiseErrorText(""Error, Invalid email. Please enter valid email address."");
                        	return (CancelOperation);
			             	 }
			           }  	 
			           
			     }		     
			      else if (sMesg == """")
                	{                       
                        //Process all other illegal chars
                       for (i=0;i<sillegalChars.length;i++)
                       {
                              scurrent_char = sillegalChars.substring(i,i+1);
                              if (semailAddr.indexOf(scurrent_char,0) != -1)
                           //   {
	                       //       TheApplication().RaiseErrorText(""Error, Invalid email. Please enter valid email address."");
                        //	return (CancelOperation);
				           //   }  
				        //}
		    	  //	}
					*/	    	  
			   					  
		    	  }
				  }	  //	if(sEmailId != """"
	//	appObj.RaiseErrorText(sErrorMsg);
	//	} // try close
catch(e)
	{
		throw(e);
	}
	finally
	{     
	}
	}	"
function BusComp_PreInvokeMethod (MethodName)
{
	var sAppMode = TheApplication().GetProfileAttr(""IsOpenUI"");//Mayank: Added for Gaurdian
	if (sAppMode == 1)//Mayank: Added for Gaurdian
	{
		this.WriteRecord();//Mayank: Added for Gaurdian
	}
	if (MethodName == ""GoToSingleView"")
		{
		var appObj;
		var sSRId;
		var psInputs;
		var psOutputs;
		var svcbsService;
		var sSubStatus;
		var sSetSubStatus;
		var svcbsRefresh;
		var psInRefresh;
		var psOutRefresh;
		var sSpec;
		var AccountId;
		var ID;
		with(this)
		{	
			ActivateField(""CPR"");
			ID = GetFieldValue(""CPR"");
		}
		appObj = TheApplication();
		var AccountBO = TheApplication().GetBusObject(""Account"");
		var Account = AccountBO.GetBusComp(""Account""); 
		with(Account) 
		{  
			ActivateField(""Tax ID Number""); 
			ActivateField(""Account Type Code"");
			ActivateField(""Survey Type"");
			ClearToQuery(); 
			SetViewMode(AllView); 
			SetSearchSpec(""Tax ID Number"",ID); 
			SetSearchSpec(""Account Type Code"",""Customer"");
			ExecuteQuery(); 
			var IsAccRec= FirstRecord();
			if(IsAccRec) 
			{
				AccountId = GetFieldValue(""Id""); 
				TheApplication().SetProfileAttr(""PAttrbCustomerAccountId"",AccountId);
				
			}
			else
			{

			TheApplication().RaiseErrorText(""Account Not Found"");
			}
		}
		TheApplication().SetProfileAttr(""SingleViewSearchTriggered"",""Y"");
		psInputs = TheApplication().NewPropertySet();
		psOutputs = TheApplication().NewPropertySet();
		svcbsService = TheApplication().GetService(""Shopping Service"");
		psInputs.SetProperty(""View"", ""STC Customer Profile Non Individual View"");
		psInputs.SetProperty(""Business Component"",""Account"");
		psInputs.SetProperty(""Row Id"",AccountId);
		svcbsService.InvokeMethod(""GotoView"", psInputs, psOutputs);
		Account = """";
		AccountBO = """";
		ID = """";
		return (CancelOperation);
	}
	return (ContinueOperation);
}
function BusComp_PreQuery ()
{
	
	//this.SetSearchSpec(""RandField"", (new Date()).getTime()); 

	return (ContinueOperation);
}
function BusComp_Query ()
{
this.NewRecord(NewAfter); // to open the applet with a record already created with predefault values
}
function BusComp_PreInvokeMethod (MethodName)
{
	var ireturn;
	
	try
	{
		switch(MethodName)
		{
			case ""OutStandingAmount"":
				OutStandingAmount();
				return (CancelOperation);
				break;
			default:
				return (ContinueOperation);
				break;
		}	
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	}
}
function OutStandingAmount()
{
		try
	{
		while(this.CountRecords() > 0)
		{
			this.DeleteRecord();
	    }
		var AppObj = """";
		var AccountBC;
		var VoucherNumber;
		var StrSRId;
		var ErrMsg = """";
		var sTotalBANAmount;
		var sTotalBadDebtAmount;
		var AccountId;
		var x = 0; 
		AppObj = TheApplication();
		AccountId = AppObj.GetProfileAttr(""PAttrbCustomerAccountId"");
		var psRec:PropertySet = AppObj.NewPropertySet();
		var SiebelMsg:PropertySet = AppObj.NewPropertySet();
		var	InputPS:PropertySet = AppObj.NewPropertySet();
		var	OutputPS:PropertySet = AppObj.NewPropertySet();
		InputPS.SetProperty(""Object Id"",AccountId );
		InputPS.SetProperty(""ProcessName"",""STC Fetech CAN Unbilling Amount WF"");
		var	WFBs = AppObj.GetService(""Workflow Process Manager"");
		WFBs.InvokeMethod(""RunProcess"",InputPS,OutputPS);
		SiebelMsg = OutputPS;
		
   		var vType = SiebelMsg.GetChild(0).GetType();
  		 if(vType == ""SiebelMessage"")
         {
            var nodTemp11 = SiebelMsg.GetChild(0).GetChild(0).GetChild(0);
            var errcode = nodTemp11.GetProperty(""ErrorCode"");
            var errdesc = nodTemp11.GetProperty(""ErrorDesc"");
            if(errcode != 0)
            {
				TheApplication().RaiseErrorText(""Error while fetching Outstanding Amount. Please try again later."");
				return(CancelOperation);                  		
            }
          }
 	
	var Count:Number = nodTemp11.GetChild(0).GetChildCount();
	for(var i:Number=0;i<Count;i++)
           {
          
         //  var Count:Number = SiebelMsg.GetChild(0).GetChild(0).GetChildCount();
           		
           
                 		nodTemp11 = SiebelMsg.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(x);
	                 	var STCOutstandAmount = nodTemp11.GetProperty(""STC Outstand Amount"");
	                 	var STCTotalBadDept = nodTemp11.GetProperty(""STC Total BadDept"");
						var CurrentBillAmount = nodTemp11.GetProperty(""CurrentBillAmount"");
						var BillDueDate = nodTemp11.GetProperty(""BillDueDate"");
						var CreditLimit = nodTemp11.GetProperty(""CreditLimit"");
						var MinimumPayableAmount = nodTemp11.GetProperty(""MinimumPayableAmount"");
						var OverdueAmount = nodTemp11.GetProperty(""OverdueAmount"");
						
						var CountSAN:Number = nodTemp11.GetChild(0).GetChildCount();     
					  	for(var j:Number=0;j<CountSAN;j++)
	           			{          					            
		                 	var nodTemp1 = nodTemp11.GetChild(0).GetChild(j);
		                 	                
		                 	var CanId = nodTemp1.GetProperty(""CANId"");
		                 	var MSISDN = nodTemp1.GetProperty(""MSISDN"");
		                 	var SANId = nodTemp1.GetProperty(""SANId"");
		                 	var BANNumber =nodTemp1.GetProperty(""BAN Number"");
		                 	
		                 
		                 	with(this)
		                 	{
								NewRecord(1);
								SetFieldValue(""MSISDN"",MSISDN);
								SetFieldValue(""CANId"", CanId);
								SetFieldValue(""SANId"", SANId);
								SetFieldValue(""BAN Number"",BANNumber);
								//SetFieldValue(""STC Outstand Amount"", STCOutstandAmount);//MANUJ: Old Billed Amount
								SetFieldValue(""STC Outstand Amount"", CurrentBillAmount);//MANUJ:Billed Amount
								SetFieldValue(""STC Total BadDebt"",STCTotalBadDept);
								SetFieldValue(""Total Amount Due"", STCOutstandAmount);//MANUJ: Total Amount Due
								SetFieldValue(""Due Date"", BillDueDate);
								SetFieldValue(""Credit Limit"", CreditLimit);
								SetFieldValue(""MinimumPayableAmount"", MinimumPayableAmount);
								SetFieldValue(""Overdue Amount"", OverdueAmount);
								WriteRecord();
		                 	}
		                 }

                 	x++;
                 }
					
		AppObj.SetProfileAttr(""PAttrbCustomerAccountId"","""");
}
	catch(e)
	{
		with(this)
		{
			//NewRecord(1);
			//SetFieldValue(""MSISDN"",""Exception"");
			//SetFieldValue(""STC Outstand Amount"", ""Exception Occurred Calling Oustanding Service"");
			TheApplication().RaiseErrorText(""Error while fetching Outstanding Amount. Please try again later."");
			return(CancelOperation); 
		}
	}
	finally
	{
	}
}
function BusComp_PreInvokeMethod (MethodName)
{
	var ireturn;
	
	try
	{
		switch(MethodName)
		{
			case ""OutStandingAmount"":
				OutStandingAmount();
				return (CancelOperation);
				break;
			default:
				return (ContinueOperation);
				break;
		}	
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	}
}
function OutStandingAmount()
{
		try
	{
		while(this.CountRecords() > 0)
		{
			this.DeleteRecord();
	    }
		var AppObj = """";
		var AccountBC;
		var VoucherNumber;
		var StrSRId;
		var ErrMsg = """";
		var sTotalBANAmount;
		var sTotalBadDebtAmount;
		var AccountId;
		var x = 0; 
		AppObj = TheApplication();
		AccountId = AppObj.GetProfileAttr(""PAttrbCustomerAccountId"");
		var psRec:PropertySet = AppObj.NewPropertySet();
		var SiebelMsg:PropertySet = AppObj.NewPropertySet();
		var	InputPS:PropertySet = AppObj.NewPropertySet();
		var	OutputPS:PropertySet = AppObj.NewPropertySet();
		InputPS.SetProperty(""Object Id"",AccountId );
		InputPS.SetProperty(""ProcessName"",""STC Fetech CAN Unbilling Amount WF"");
		var	WFBs = AppObj.GetService(""Workflow Process Manager"");
		WFBs.InvokeMethod(""RunProcess"",InputPS,OutputPS);
		SiebelMsg = OutputPS;
		
   		var vType = SiebelMsg.GetChild(0).GetType();
  		 if(vType == ""SiebelMessage"")
         {
            var nodTemp11 = SiebelMsg.GetChild(0).GetChild(0).GetChild(0);
            var errcode = nodTemp11.GetProperty(""ErrorCode"");
            var errdesc = nodTemp11.GetProperty(""ErrorDesc"");
            if(errcode != 0)
            {
				TheApplication().RaiseErrorText(""Error while fetching Outstanding Amount. Please try again later."");
				return(CancelOperation);                  		
            }
          }
 	
	var Count:Number = nodTemp11.GetChild(0).GetChildCount();
	for(var i:Number=0;i<Count;i++)
           {
          
         //  var Count:Number = SiebelMsg.GetChild(0).GetChild(0).GetChildCount();
           		
           
                 		nodTemp11 = SiebelMsg.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(x);
	                 	var STCOutstandAmount = nodTemp11.GetProperty(""STC Outstand Amount"");
	                 	var STCTotalBadDept = nodTemp11.GetProperty(""STC Total BadDept"");
						var CurrentBillAmount = nodTemp11.GetProperty(""CurrentBillAmount"");
						var BillDueDate = nodTemp11.GetProperty(""BillDueDate"");
						var CreditLimit = nodTemp11.GetProperty(""CreditLimit"");
						var MinimumPayableAmount = nodTemp11.GetProperty(""MinimumPayableAmount"");
						var OverdueAmount = nodTemp11.GetProperty(""OverdueAmount"");
						
						var CountSAN:Number = nodTemp11.GetChild(0).GetChildCount();     
					  	for(var j:Number=0;j<CountSAN;j++)
	           			{          					            
		                 	var nodTemp1 = nodTemp11.GetChild(0).GetChild(j);
		                 	                
		                 	var CanId = nodTemp1.GetProperty(""CANId"");
		                 	var MSISDN = nodTemp1.GetProperty(""MSISDN"");
		                 	var SANId = nodTemp1.GetProperty(""SANId"");
		                 	var BANNumber =nodTemp1.GetProperty(""BAN Number"");
		                 	
		                 
		                 	with(this)
		                 	{
								NewRecord(1);
								SetFieldValue(""MSISDN"",MSISDN);
								SetFieldValue(""CANId"", CanId);
								SetFieldValue(""SANId"", SANId);
								SetFieldValue(""BAN Number"",BANNumber);
								//SetFieldValue(""STC Outstand Amount"", STCOutstandAmount);//MANUJ: Old Billed Amount
								SetFieldValue(""STC Outstand Amount"", CurrentBillAmount);//MANUJ:Billed Amount
								SetFieldValue(""STC Total BadDebt"",STCTotalBadDept);
								SetFieldValue(""Total Amount Due"", STCOutstandAmount);//MANUJ: Total Amount Due
								SetFieldValue(""Due Date"", BillDueDate);
								SetFieldValue(""Credit Limit"", CreditLimit);
								SetFieldValue(""MinimumPayableAmount"", MinimumPayableAmount);
								SetFieldValue(""Overdue Amount"", OverdueAmount);
								WriteRecord();
		                 	}
		                 }

                 	x++;
                 }
					
		AppObj.SetProfileAttr(""PAttrbCustomerAccountId"","""");
}
	catch(e)
	{
		with(this)
		{
			//NewRecord(1);
			//SetFieldValue(""MSISDN"",""Exception"");
			//SetFieldValue(""STC Outstand Amount"", ""Exception Occurred Calling Oustanding Service"");
			TheApplication().RaiseErrorText(""Error while fetching Outstanding Amount. Please try again later."");
			return(CancelOperation); 
		}
	}
	finally
	{
	}
}
function BusComp_ChangeRecord ()
{
var DBANNum = this.GetFieldValue(""DBANNum"");
TheApplication().SetProfileAttr(""DBANNum"", DBANNum);
//TheApplication().SetProfileAttr(""GetIBANOutstandingDetails"",""Y"");
var DBANpopulated = TheApplication().GetProfileAttr(""GetDBANOutstandingDetails"")
if(DBANpopulated != ""Y"")
{
var ActBO = TheApplication().ActiveBusObject();
	var OSDetail = ActBO.GetBusComp(""STC Business Outstanding Details VBC"");
	with(OSDetail)
	{
	ExecuteQuery();
	}
}

}
function BusComp_PreInvokeMethod (MethodName)
{
	var ireturn;
	
	try
	{
		switch(MethodName)
		{
			case ""OutStandingAmount"":
				OutStandingAmount();
				return (CancelOperation);
				break;
			default:
				return (ContinueOperation);
				break;
		}	
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	}
}
"//***********************************************************************************************************//
//Purpose: 1) To Log the exceptions in Custom Error Log Table
//Inputs: Error Message
//Author: Suman Kanumuri
//Release: Single View
//Date: Mar-02-2013
//*************************************************************************************************************//
function LogException(e)
{
	var appObj;
  	var psInput;
  	var psOutput;
  	var bsErrorHandler; 
	try
 	{
		  appObj = TheApplication();
		  with(appObj)
		  {
			  psInput = NewPropertySet();
			  psOutput = NewPropertySet();
			  bsErrorHandler = GetService(""STC Generic Error Handler"");
		  }
		  with(psInput)
		  {
			  SetProperty(""Error Code"", e.errCode);
			  SetProperty(""Error Message"", e.errText);
			  SetProperty(""Object Name"", ""STC Busiess OS Amount Query BS"");
			  SetProperty(""Object Type"", ""Buisness Service"");
		  }
		  bsErrorHandler.InvokeMethod(""Log Message"", psInput, psOutput);
 	}
 	catch(e)
 	{
  		// do nothing	
 	}
 	finally
 	{
 
		  bsErrorHandler = null;
		  psOutput = null;
		  psInput = null;
		  appObj = null;
 	}
}
function OutStandingAmount()
{
	var AppObj;
	var InputPS, OutputPS, WFBs, PsChildRec;
	var CANId, EndDate;
	AppObj =TheApplication();
	var psRec:PropertySet = AppObj.NewPropertySet();
	var PostpaidIBANCount = 0;
	var PrepaidIBANCount = 0;
	try
	{
	    
		CANId = AppObj.GetProfileAttr(""PAttrbCustomerAccountId"");
		InputPS = AppObj.NewPropertySet();
		OutputPS = AppObj.NewPropertySet();
		InputPS.SetProperty(""Object Id"",CANId );
		InputPS.SetProperty(""ProcessName"",""STC Business CAN Total Outstanding WF"" );
		WFBs = AppObj.GetService(""Workflow Process Manager"");
		WFBs.InvokeMethod(""RunProcess"",InputPS,OutputPS);
		var sErrorCode = OutputPS.GetProperty(""Error Code"");	
		var sErrMsg = 	OutputPS.GetProperty(""Error Message"");
		PsChildRec = AppObj.NewPropertySet();
		if(sErrorCode != ""0""){
		if(sErrorCode == ""TECH-ERROR""){
		with(this)
				{
					NewRecord(1);
					SetFieldValue(""STC Outstand Amount"", ""Internal Error Please contact Administrator."");
					SetFieldValue(""CANId"", CANId);
					WriteRecord();
				}
		}
			goto End;

		}
		var RespMssgCnt1 = OutputPS.GetPropertyCount();
		var RespmssgCnt2 = OutputPS.GetChild(0);
		var RespMssg = AppObj.NewPropertySet();
		RespMssg = RespmssgCnt2.Copy();
		var RespMssgCnt = RespMssg.GetChildCount();		
		var RespPayLoad = AppObj.NewPropertySet();
		RespPayLoad = RespMssg.GetChild(0).GetChild(0);
		var errcode = RespPayLoad.GetProperty(""Household Size"");
        var errdesc = RespPayLoad.GetProperty(""Access Level"");
            if(errcode != 0)
            {              		
				with(this)
				{
					NewRecord(1);
					SetFieldValue(""STC Outstand Amount"", ""Internal Error Please contact Administrator."");
					SetFieldValue(""CANId"", CANId);
					WriteRecord();
				}
					goto End;
            }
  
		var sAccBO = TheApplication().GetBusObject(""Single View Account BO"");
		var sBANBc = sAccBO.GetBusComp(""CUT Invoice Sub Accounts"");
		var DBANId = """", DBANNum = """", DBANName="""", OutputPS = """";var PsChildRec = """";
		var CANId = TheApplication().GetProfileAttr(""PAttrbCustomerAccountId"");
		var DBANNumArray = new Array;
		var DBANIdArray = new Array;
		var DBANNameArray = new Array;
		var CurrentCharges = new Array;
		var STCOutstandAmount = new Array;
		var PreviousCarryForwards = new Array;
		var UnbilledAmount = new Array;
		var STCTotalBadDept = new Array;

		if(CANId != """")
		{

			with(sBANBc){
			ActivateField(""STC Corporate Type"");
			ActivateField(""Master Account Id"")
			ActivateField(""Account Number"");
			ActivateField(""Account Status"");
			ActivateField(""Name"");
			ClearToQuery();
			SetSearchSpec(""STC Corporate Type"",""Department"");
			SetSearchSpec(""Master Account Id"",CANId);
			SetSearchSpec(""Account Status"",""Active"");
			SetViewMode(AllView);
			ExecuteQuery(ForwardOnly);
			var count = CountRecords();
			var IsDBANAvail = FirstRecord();
			while(IsDBANAvail)
			{
				PsChildRec = TheApplication().NewPropertySet();
				DBANId = GetFieldValue(""Id"");
				DBANNum = GetFieldValue(""Account Number"");
				DBANName = GetFieldValue(""Name"");
				DBANNumArray[DBANNum] = DBANNum;
				DBANIdArray[DBANNum] = DBANId;
				DBANNameArray[DBANNum] = DBANName;
				IsDBANAvail = NextRecord();
			}
		}//with

		}

		//Added for the exception Handling above
		var ListOfPADetailsView = AppObj.NewPropertySet();
		ListOfPADetailsView = RespPayLoad.GetChild(0);
		var PsParentRec = AppObj.NewPropertySet();
		var PADetailsCount = ListOfPADetailsView.GetChildCount();
		var PADetail = AppObj.NewPropertySet();
		
		var InstallmentAmount="""", PAMonthlyCharge="""", PAFirstMonthCharge="""", PATotalCharge="""", PAType= """", InstallmentCycle = """", RemainingNCRValue = """", InstallmentStartdate = """", InstallmentEnddate = """";
		var CurrentCharges = """", PreviousCarryForwards = """",UnbilledAmount = """", STCTotalBadDept = """";
		var DBANNum="""", DBANName="""", STCOutstandAmount="""";
		var CurrentCharges = {},STCOutstandAmount = {}, PreviousCarryForwards = {},UnbilledAmount = {},STCTotalBadDept = {};
		for(var i=0;i<PADetailsCount;i++)
		{
			PsChildRec = AppObj.NewPropertySet();
			PADetail = ListOfPADetailsView.GetChild(i);
			with (PADetail)
			{
				DBANNum = GetProperty(""DBANNum"");
				CurrentCharges[DBANNum] = GetProperty(""Current Charges"");
				STCOutstandAmount[DBANNum] = GetProperty(""STC Outstand Amount"");
				PreviousCarryForwards[DBANNum] = GetProperty(""Previous Carry Forwards"");
				UnbilledAmount[DBANNum] = GetProperty(""Unbilled Amount"");
				STCTotalBadDept[DBANNum] = GetProperty(""STC Total BadDept"");
			}
				
		}//endfor
		
	var key;
	for (key in DBANNumArray)
	{
		with(this)
				{
					NewRecord(1);
					SetFieldValue(""DBANNum"",DBANNumArray[key]);
					SetFieldValue(""DBANName"",DBANNameArray[key]);
					if(defined(STCOutstandAmount[DBANNumArray[key]]) == false && defined(CurrentCharges[DBANNumArray[key]]) == false && defined(PreviousCarryForwards[DBANNumArray[key]]) == false && defined(UnbilledAmount[DBANNumArray[key]]) == false && defined(STCTotalBadDept[DBANNumArray[key]]) == false)
					{
						STCOutstandAmount[DBANNumArray[key]] = ""NA"";
						CurrentCharges[DBANNumArray[key]] = ""NA"";
						PreviousCarryForwards[DBANNumArray[key]] = ""NA"";
						UnbilledAmount[DBANNumArray[key]] = ""NA"";
						STCTotalBadDept[DBANNumArray[key]] = ""NA"";
					}
					SetFieldValue(""STC Outstand Amount"", STCOutstandAmount[DBANNumArray[key]]);
					SetFieldValue(""Current Charges"", CurrentCharges[DBANNumArray[key]]);
					SetFieldValue(""Previous Carry Forwards"", PreviousCarryForwards[DBANNumArray[key]]);
					SetFieldValue(""Unbilled Amount"", UnbilledAmount[DBANNumArray[key]]);
					SetFieldValue(""STC Total BadDept"", STCTotalBadDept[DBANNumArray[key]]);
					SetFieldValue(""CANId"", CANId);
					WriteRecord();
					
				}//with(this)
		
		}
		
		//Refresh Applet to move to the first record
		this.FirstRecord();
		DBANNum = this.GetFieldValue(""DBANNum"");
		TheApplication().SetProfileAttr(""DBANNum"",DBANNum);
		//Refresh Applet to move to the first record


		//Call IBAN Load after DBAN Load. Change Record IBAN Load Skipped.
	var ActBO = TheApplication().ActiveBusObject();
	var OSDetail = ActBO.GetBusComp(""STC Business Outstanding Details VBC"");
	with(OSDetail)
	{
		ExecuteQuery();
	}
	TheApplication().SetProfileAttr(""GetDBANOutstandingDetails"",""DONE"");
	
	End:
	return(CancelOperation);

	}
	catch(e)
	{
		LogException(e);
		
	}
	finally
	{
		PsParentRec = null;
		PsChildRec = null;
		PADetail = null;
		ListOfPADetailsView = null;
		RespPayLoad = null; RespMssg = null;
		RespmssgCnt2 = null;
		psRec = null;
		InputPS = null; OutputPS = null; WFBs = null;
		AppObj = null;
		OSDetail = null;
		ActBO = null;
		sAccBO = null;
		DBANNumArray  = null;
		DBANIdArray = null;
		CurrentCharges = null;
		STCOutstandAmount = null;
		PreviousCarryForwards = null;
		UnbilledAmount = null;
		STCTotalBadDept = null;

	}

}
function OutStandingAmount_Old()
{
	var AppObj;
	var InputPS, OutputPS, WFBs, PsChildRec;
	var CANId, EndDate;
	AppObj =TheApplication();
	var psRec:PropertySet = AppObj.NewPropertySet();
	var DBANId;
	var PostpaidIBANCount = 0;
	var PrepaidIBANCount = 0;
	try
	{
	    
		CANId = AppObj.GetProfileAttr(""PAttrbCustomerAccountId"");
		InputPS = AppObj.NewPropertySet();
		OutputPS = AppObj.NewPropertySet();
		InputPS.SetProperty(""Object Id"",CANId );
		InputPS.SetProperty(""ProcessName"",""STC Business CAN Total Outstanding WF"" );
		WFBs = AppObj.GetService(""Workflow Process Manager"");
		WFBs.InvokeMethod(""RunProcess"",InputPS,OutputPS);
		var sErrorCode = OutputPS.GetProperty(""Error Code"");	
		var sErrMsg = 	OutputPS.GetProperty(""Error Message"");
		PsChildRec = AppObj.NewPropertySet();
		if(sErrorCode != ""0""){
		if(sErrorCode == ""TECH-ERROR""){
		with(this)
				{
					NewRecord(1);
					SetFieldValue(""STC Outstand Amount"", ""Internal Error Please contact Administrator."");
					SetFieldValue(""CANId"", CANId);
					WriteRecord();
				}
		}
			goto End;

		}
		var RespMssgCnt1 = OutputPS.GetPropertyCount();
		var RespmssgCnt2 = OutputPS.GetChild(0);
		var RespMssg = AppObj.NewPropertySet();
		RespMssg = RespmssgCnt2.Copy();
		var RespMssgCnt = RespMssg.GetChildCount();		
		var RespPayLoad = AppObj.NewPropertySet();
		RespPayLoad = RespMssg.GetChild(0).GetChild(0);
		var errcode = RespPayLoad.GetProperty(""Household Size"");
        var errdesc = RespPayLoad.GetProperty(""Access Level"");
            if(errcode != 0)
            {              		
				with(this)
				{
					NewRecord(1);
					SetFieldValue(""STC Outstand Amount"", ""Internal Error Please contact Administrator."");
					SetFieldValue(""CANId"", CANId);
					WriteRecord();
				}
					goto End;
            }

		//Added for the exception Handling above
		var ListOfPADetailsView = AppObj.NewPropertySet();
		ListOfPADetailsView = RespPayLoad.GetChild(0);
		//PsChildRec = AppObj.NewPropertySet();
		var PsParentRec = AppObj.NewPropertySet();
		var PADetailsCount = ListOfPADetailsView.GetChildCount();
		var PADetail = AppObj.NewPropertySet();
		
		var InstallmentAmount="""", PAMonthlyCharge="""", PAFirstMonthCharge="""", PATotalCharge="""", PAType= """", InstallmentCycle = """", RemainingNCRValue = """", InstallmentStartdate = """", InstallmentEnddate = """";
		var CurrentCharges = """", PreviousCarryForwards = """",UnbilledAmount = """", STCTotalBadDept = """";
		var DBANNum="""", STCOutstandAmount="""";
		
		for(var i=0;i<PADetailsCount;i++)
		{
			PsChildRec = AppObj.NewPropertySet();
			PADetail = ListOfPADetailsView.GetChild(i);
			with (PADetail)
			{
				DBANNum = GetProperty(""DBANNum"");
				CurrentCharges = GetProperty(""Current Charges"");
				STCOutstandAmount = GetProperty(""STC Outstand Amount"");
				PreviousCarryForwards = GetProperty(""Previous Carry Forwards"");
				UnbilledAmount = GetProperty(""Unbilled Amount"");
				STCTotalBadDept = GetProperty(""STC Total BadDept"");
		
			}
			with(this)
				{
					NewRecord(1);
					SetFieldValue(""DBANNum"",DBANNum);
					SetFieldValue(""STC Outstand Amount"", STCOutstandAmount);
					SetFieldValue(""Current Charges"", CurrentCharges);
					SetFieldValue(""Previous Carry Forwards"", PreviousCarryForwards);
					SetFieldValue(""Unbilled Amount"", UnbilledAmount);
					SetFieldValue(""STC Total BadDept"", STCTotalBadDept);
					SetFieldValue(""CANId"", CANId);
					WriteRecord();
					
				}	
		}//endfor
		//Add DBANS with atleast one Prepaid and no Postpaid

	//var sAccBO = TheApplication().GetBusObject(""STC Business Billing BO"");
	
	var sAccBO = TheApplication().GetBusObject(""CUT Invoice Sub Accounts Thin"");
	var sIBANPostBO = TheApplication().GetBusObject(""CUT Invoice Sub Accounts Thin"");
	var sIBANPreBO = TheApplication().GetBusObject(""CUT Invoice Sub Accounts Thin"");
	var sDBANBc = sAccBO.GetBusComp(""CUT Invoice Sub Accounts Thin"");
	var sIBANPostBc = sIBANPostBO.GetBusComp(""CUT Invoice Sub Accounts Thin"");
	var sIBANPreBc = sIBANPreBO.GetBusComp(""CUT Invoice Sub Accounts Thin"");
	
	   with(sDBANBc)
	   {
		ActivateField(""STC Corporate Type"");
		ActivateField(""Master Account Id"")
		ActivateField(""Account Number"");
		ActivateField(""Account Status"");
		ActivateField(""STC Service Type"");
		//ActivateField(""STC Postpaid IBAN Count"");
		//ActivateField(""STC Prepaid IBAN Count"");
		ClearToQuery();
		SetSearchSpec(""STC Corporate Type"",""Department"");
		SetSearchSpec(""Master Account Id"",CANId);
		SetSearchSpec(""Account Status"",""Active"");
		SetViewMode(AllView);
		ExecuteQuery(ForwardOnly);
		var count = CountRecords();
		var IsDBANAvail = FirstRecord();
		while(IsDBANAvail)
		{
		DBANId = GetFieldValue(""Id"");
		DBANNum = GetFieldValue(""Account Number"");
		//Find Postpaid Count  -- START
		//PostpaidIBANCount = GetFieldValue(""STC Postpaid IBAN Count"");
		with(sIBANPostBc)
	    {
		ActivateField(""STC Corporate Type"");
		ActivateField(""Account Status"");
		ActivateField(""STC Service Type"");
		ActivateField(""Parent Account Id"");
		ActivateField(""Master Account Id"");
		ClearToQuery();
		SetSearchSpec(""STC Corporate Type"",""Individual"");
		SetSearchSpec(""STC Service Type"",""Postpaid"");
		SetSearchSpec(""Account Status"",""Active"");
		SetSearchSpec(""Parent Account Id"",DBANId);
		SetSearchSpec(""Master Account Id"",CANId);
		SetViewMode(AllView);
		ExecuteQuery(ForwardOnly);
		PostpaidIBANCount = CountRecords();

	    }
		//Find Postpaid Count  -- END
		//Find Prepaid Count  -- START
		//PrepaidIBANCount = GetFieldValue(""STC Prepaid IBAN Count"");
		with(sIBANPreBc)
	    {
		ActivateField(""STC Corporate Type"");
		ActivateField(""Account Status"");
		ActivateField(""STC Service Type"");
		ActivateField(""Parent Account Id"");
		ActivateField(""Master Account Id"");
		ClearToQuery();
		SetSearchSpec(""STC Corporate Type"",""Individual"");
		SetSearchSpec(""STC Service Type"",""Prepaid"");
		SetSearchSpec(""Account Status"",""Active"");
		SetSearchSpec(""Parent Account Id"",DBANId);
		SetSearchSpec(""Master Account Id"",CANId);
		SetViewMode(AllView);
		ExecuteQuery(ForwardOnly);
		PrepaidIBANCount = CountRecords();

	    }	
		//Find Prepaid Count  -- END
		if(PostpaidIBANCount == 0 && PrepaidIBANCount > 0)
		{
		with(this)
				{
					ActivateField(""DBANNum"");
					ActivateField(""STC Outstand Amount"");
					ActivateField(""Current Charges"");
					ActivateField(""Previous Carry Forwards"");
					ActivateField(""Unbilled Amount"");
					ActivateField(""STC Total BadDept"");
					ActivateField(""CANId"");
					ActivateField(""DBANId"");
					NewRecord(1);
					SetFieldValue(""DBANNum"",DBANNum);
					SetFieldValue(""STC Outstand Amount"", ""NA"");
					SetFieldValue(""Current Charges"", ""NA"");
					SetFieldValue(""Previous Carry Forwards"", ""NA"");
					SetFieldValue(""Unbilled Amount"", ""NA"");
					SetFieldValue(""STC Total BadDept"", ""NA"");
					SetFieldValue(""CANId"", CANId);
					SetFieldValue(""DBANId"", DBANId);
					WriteRecord();
					
				}
		}
     IsDBANAvail = NextRecord();
     }
  }
		//Add DBANS with atleast one Prepaid and no Postpaid
		
		//Refresh Applet to move to the first record
		this.FirstRecord();
		DBANNum = this.GetFieldValue(""DBANNum"");
		TheApplication().SetProfileAttr(""DBANNum"",DBANNum);
		//Refresh Applet to move to the first record


		//Call IBAN Load after DBAN Load. Change Record IBAN Load Skipped.
	var ActBO = TheApplication().ActiveBusObject();
	var OSDetail = ActBO.GetBusComp(""STC Business Outstanding Details VBC"");
	with(OSDetail)
	{
	ExecuteQuery(ForwardOnly);
	}
	TheApplication().SetProfileAttr(""GetDBANOutstandingDetails"",""DONE"");
		
			
	End:
	return(CancelOperation);

	}
	catch(e)
	{
		LogException(e);
		
	}
	finally
	{
		PsParentRec = null;
		PsChildRec = null;
		PADetail = null;
		ListOfPADetailsView = null;
		RespPayLoad = null; RespMssg = null;
		RespmssgCnt2 = null;
		psRec = null;
		InputPS = null; OutputPS = null; WFBs = null;
		AppObj = null;
		sIBANPostBc = null;
		sIBANPreBc = null;
		sDBANBc = null;
		OSDetail = null;
		ActBO = null;
		sAccBO = null;
		sIBANPostBO = null;
		sIBANPreBO = null;
		

	}

}
function BusComp_SetFieldValue (FieldName)
{
	if(FieldName == ""Price"" || FieldName == ""STC Selected Flag"")
	{
		var ActiveView = TheApplication().ActiveViewName();
		if(ActiveView == ""STC Business Prepaid Registration View"")
		{
			this.WriteRecord();  
		}
	}
}
"//Your public declarations go here... 
var vOldSIM = """";
var sSIMno = """";
var SIMCheckSUM = """";
var vOldMSISDN = """";
var sMSISDN = """";"
function BlockRe_selection (OldValue,NewValue)
{
	try
	{
	var appObj;
	var psInputs,psOutputs,bsBlockNumber;
	appObj = TheApplication();
	
	
                                   
		bsBlockNumber = appObj.GetService(""RMS RMS Block Number"") ;
		psInputs = appObj.NewPropertySet();
		psOutputs = appObj.NewPropertySet();
		this.ActivateField(""CBAN"");
		var vBlockedFor = this.GetFieldValue(""Id"");
		psInputs.SetProperty(""BlockNumber"",NewValue);
		psInputs.SetProperty(""BlockedFor"",vBlockedFor);
		psInputs.SetProperty(""ReleaseNumber"",OldValue); // variable set at PreSetFieldValue
		bsBlockNumber.InvokeMethod(""BlockNumber"",psInputs,psOutputs);
		var ErrorCode =  psOutputs.GetProperty(""ErrCode"");
		var ErrorMessage =  psOutputs.GetProperty(""ErrMessage"");
		if(	ErrorCode != """")
		{
			appObj.RaiseErrorText(ErrorMessage);
		}

	}
	catch(e)
	{
	throw(e.errText);
	}
	finally
	{
	psInputs = null;
    psOutputs = null;
    bsBlockNumber = null;
    appObj = null;
	}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
//[MARK:2-DEC-2019 SD:: Business Products Bulk Activation – Phase II]
	try
	{	
		var boRMS = """";
		var bcRMS = """";
		var isrecord="""";
		var RecBlockedFor="""";
		var MSISDNBlockedFor="""";
		switch(FieldName)
		{   

			case ""SIM Number"":
			vOldSIM = this.GetFieldValue(""SIM Number"");
			sSIMno = FieldValue;
			var SIMLen = 0;
			SIMLen = sSIMno.length;
			if(SIMLen == 18)
			{
				boRMS = TheApplication().GetBusObject(""RMS NM Number Enquiry_Thin"");//P1 ****
				bcRMS = boRMS.GetBusComp(""RMS NM Number Enquiry_Thin"");//P1 ****

				with (bcRMS)
					{
						SetViewMode(AllView);
						ActivateField(""Number String"");
						ActivateField(""Number String Checksum"");
						ClearToQuery();
						SetSearchSpec(""Number String"",sSIMno);
						ExecuteQuery(ForwardOnly);
						isrecord = FirstRecord();
						if (isrecord)
						{
							SIMCheckSUM = GetFieldValue(""Number String Checksum"");	
						}
					}

				
				//	sSIMno = SIMCheckSUM;

			}
			
			if(SIMCheckSUM != """")
			{
			BlockRe_selection (vOldSIM,SIMCheckSUM);
			}
			//	this.SetFieldValue(""STC SIM Number"",SIMCheckSUM);
			//	this.SetFieldValue(""SIM Number"",SIMCheckSUM);
				
			//	this.WriteRecord();
			//	this.InvokeMethod(""RefreshBusComp""); 
			//	this.InvokeMethod(""RefreshRecord""); 
			//	this.ExecuteQuery(ForwardBackward);

			break;


			default : 
			break;
		}
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	} 
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
//Mayank: Added for Renewal Alert -------- START
	try
	{
		switch(FieldName)
		{
			case ""Call Type"":
			var sContEndDate;
			var sPlanName;
			var CallType = TheApplication().InvokeMethod(""LookupValue"",""FIN_DISPOSITION"",""Contract Renewal"");
			this.ActivateField(""Account Id"");
			var AccountId = this.GetFieldValue(""Account Id"");
			if(AccountId != null && AccountId != """")
			{
				var Inputs: PropertySet   = TheApplication().NewPropertySet();
				var Outputs:PropertySet = TheApplication().NewPropertySet();
				var svcbsService: Service = TheApplication().GetService(""Workflow Process Manager"");
				Inputs.SetProperty(""ProcessName"", ""STC Contract Renewal Activity Process"");
				Inputs.SetProperty(""Object Id"",AccountId);						
				Inputs.SetProperty(""Operation"",""Query"");
				svcbsService.InvokeMethod(""RunProcess"", Inputs, Outputs);
				sContEndDate = Outputs.GetProperty(""EndDate"");
				sPlanName = Outputs.GetProperty(""Plan"");
				if(FieldValue == CallType)
				{
					this.ActivateField(""STC Plan Name"");
					this.ActivateField(""STC Contract Expiry Date"");
					this.SetFieldValue(""STC Plan Name"",sPlanName);
					this.SetFieldValue(""STC Contract Expiry Date"",sContEndDate);
					this.WriteRecord();
					var Inputs1: PropertySet   = TheApplication().NewPropertySet();
					var Outputs1:PropertySet = TheApplication().NewPropertySet();
					var svcbsService1: Service = TheApplication().GetService(""SIS OM PMT Service"");
					Inputs1.SetProperty(""Business Component Name"", ""CUT Service Sub Accounts"");
					Inputs1.SetProperty(""Business Object Name"", ""STC Service Account"");
					//	Inputs1.SetProperty(""Object Id"",AccountId);
					svcbsService1.InvokeMethod(""Refresh Business Component"", Inputs1, Outputs1);
				}
				else
				{
					if(sContEndDate != null && sContEndDate != """")
					{
						this.ActivateField(""STC Contract Expiry Date"");
						this.SetFieldValue(""STC Contract Expiry Date"","""");
					}
					if(sPlanName != null && sPlanName != """")
					{
						this.ActivateField(""STC Plan Name"");
						this.SetFieldValue(""STC Plan Name"","""");
					}
				}
			}
			break;
			//[MANUJ] : [Auomated Call Back Feature]
			case ""Type"":

			if(FieldValue == ""Call Back"")
			{
			var AlarmTime = TheApplication().InvokeMethod(""LookupValue"",""STC_CALL_BACK_ALARM"",""Min"");
			this.SetFieldValue(""Type"", """");
			this.SetFieldValue(""Status"",""Scheduled"");
			this.SetFieldValue(""Type"", ""Call Back"");
			this.SetFieldValue(""Alarm"",""Y"" );
			var ActivityId = this.GetFieldValue(""Id"");
			ActivityId = ""Activity #: "" + ActivityId;
			this.SetFieldValue(""Comment"", ActivityId);
			
			}
			case ""Done Flag"":
			if(FieldValue == ""Y"" && this.GetFieldValue(""Type"") == ""Call Back"")
			{
			var CallCode = this.GetFieldValue(""STC Call Code"");
			if (CallCode == '' || CallCode == """")
			{
			TheApplication().RaiseErrorText(""Selection of Call Code is mandatory before completing activity"");
			}
	
			this.SetFieldValue(""Status"",""Done"");
			this.ActivateField(""BC Read Only Flag"");
			var ROnly = this.GetFieldValue(""BC Read Only Flag"");
			var Alarm = this.GetFieldValue(""Alarm"");
				if(ROnly == ""N"" && Alarm == ""Y"")
			{
			this.SetFieldValue(""Alarm"",""N"" );
			}
			}
			break;
			case ""Status"":

			if(FieldValue == ""Done"" && this.GetFieldValue(""Type"") == ""Call Back"")
			{
			var CallCode1 = this.GetFieldValue(""STC Call Code"");
			if (CallCode1 == '' || CallCode1 == """")
			{
			TheApplication().RaiseErrorText(""Selection of Call Code is mandatory before completing activity"");
			}
			this.ActivateField(""BC Read Only Flag"");
			var ROnly = this.GetFieldValue(""BC Read Only Flag"");
			this.SetFieldValue(""Done Flag"",""Y"");
			var Alarm = this.GetFieldValue(""Alarm"");
			if(ROnly == ""N"" && Alarm == ""Y"")
			{
			this.SetFieldValue(""Alarm"",""N"" );
			}
			}
			//[MANUJ] : [Avaya]
		/*	if(FieldValue == ""Completed"" && this.GetFieldValue(""Type"") == ""Pilot Number Modification"")
			{
			var vActId = this.GetFieldValue(""Id"");
			var inputPS2:PropertySet = TheApplication().NewPropertySet();
			var outputPS2:PropertySet = TheApplication().NewPropertySet();
			var BSAdjAppRef: Service = TheApplication().GetService(""Workflow Process Manager"");
			inputPS2.SetProperty(""ProcessName"", ""STC Avaya Add Extension Activity Completion Parent WF"");
			inputPS2.SetProperty(""Operation"", ""VALIDATEMODIFY"");
			inputPS2.SetProperty(""Object Id"", vActId);
			BSAdjAppRef.InvokeMethod(""RunProcess"",inputPS2,outputPS2);	
				
			}*/
			break;
			default:
			break;
		}
		return (ContinueOperation);
	}
	catch(e)
	{ 
		throw(e)
	}
	finally
	{
	}
//Mayank: Added for Renewal Alert ---------------- STOP
}
function BusComp_NewRecord ()
{
var sApp = TheApplication();
var CurrentLogin = sApp.LoginName();
var FName,LName,Dept,LoginName;
var foundTestCSR = sApp.InvokeMethod(""LookupValue"",""STC_TEST_PROV"",CurrentLogin);
var Purpose = sApp.InvokeMethod(""LookupValue"",""STC_ADMIN"",""TESTLINEPURPOSE"");
var foundTestCSRSubstr = foundTestCSR.substring(0,3);
if(foundTestCSRSubstr == ""CSR"")
{
	
	var EmpBC:BusComp = sApp.GetBusObject(""Employee"").GetBusComp(""Employee"");
	with(EmpBC)
	{
		ActivateField(""STC Department"");
		ActivateField(""First Name"");
		ActivateField(""Last Name"");
		SetViewMode(AllView);
		ClearToQuery();
		SetSearchSpec(""Login Name"",CurrentLogin);
		ExecuteQuery();
		var EmpRec = FirstRecord();
		if(EmpRec)
		{
			FName = GetFieldValue(""First Name"");
			LName = GetFieldValue(""Last Name"");
			Dept = GetFieldValue(""STC Department"");
		}
		LoginName = LName+"" ""+FName;
		with(this)
		{
		SetFieldValue(""STC Line Category"",""Test Line"");
		SetFieldValue(""STC Test Line Dept"",Dept);
		SetFieldValue(""STC Test Line Reqstr Name"", LoginName);
		SetFieldValue(""STC Test Line Purpose"", Purpose);
		
	
		
		}//end of with(this)
	}
	
}


}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	switch(FieldName)
	{
		case ""STC Billing Acc Segment"":
		{
			var BillAccId = this.GetFieldValue(""Id"");
			var vCreditLmt = """";
			var vCreditScoreFlg = """";
			var vBillValidationBS = TheApplication().GetService(""STC Billing Account Validation BS"");
			var InpPS = TheApplication().NewPropertySet();
			var OutPS = TheApplication().NewPropertySet();
			InpPS.SetProperty(""BillAccId"", BillAccId);
			InpPS.SetProperty(""FieldName"", FieldName);
			InpPS.SetProperty(""FieldValue"", FieldValue);
			vBillValidationBS.InvokeMethod(""FieldValidations"",InpPS,OutPS);
			vCreditScoreFlg = OutPS.GetProperty(""vCreditScoreChange"");
		var vBillSegmentRelative = OutPS.GetProperty(""vBillSegmentRelative"");
			if(vCreditScoreFlg == ""Y"")
			{
			if ( vBillSegmentRelative == ""Y""){
				this.ActivateField(""STC Contract Category"");
				SetFieldValue(""STC Contract Category"",""Employee Relative"");
			
			}
			vCreditLmt = OutPS.GetProperty(""CreditLimit"");
			this.ActivateField(""Credit Score"");
			this.SetFieldValue(""Credit Score"", vCreditLmt);
			this.WriteRecord();
			}
		}
		break;
		
		default :
         		break;
	}//end switch
	
	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{
try
{
 var BillAccId = this.GetFieldValue(""Id"");
 this.ActivateField(""STC Risk Level"");
 this.ActivateField(""Occupation"");
 var vOccupation = this.GetFieldValue(""Occupation"");
	
  var STCCreditLimitBO = TheApplication().GetBusObject(""STC Credit Limit"");
  var STCCreditLimitBC = STCCreditLimitBO.GetBusComp(""STC Credit Limit"");
  with(STCCreditLimitBC)
    {
  ActivateField(""Current Occupation"");
  ActivateField(""Risk Level"");
  SetViewMode(AllView);
  ClearToQuery();
  var searchstr = ""[Current Occupation] = '"" + vOccupation + ""' AND [Customer Class] = 'Bahraini'"";
  SetSearchExpr(searchstr);
  ExecuteQuery(ForwardOnly);
    
    if (FirstRecord())
    {
    
    var vRiskLevel = GetFieldValue(""Risk Level"");
     }//end if
		
	}//end with
	this.SetFieldValue(""STC Risk Level"",vRiskLevel);
	this.WriteRecord();
	//}
	}
	
	catch(e)
	{
	throw(e);
	}
	
	finally
	{
	STCCreditLimitBC=null;
	STCCreditLimitBO=null;
	
	}
}
function BusComp_NewRecord ()
{
var sApp = TheApplication();
var CurrentLogin = sApp.LoginName();
var FName,LName,Dept,LoginName;
var foundTestCSR = sApp.InvokeMethod(""LookupValue"",""STC_TEST_PROV"",CurrentLogin);
var Purpose = sApp.InvokeMethod(""LookupValue"",""STC_ADMIN"",""TESTLINEPURPOSE"");
var TestLine = sApp.InvokeMethod(""LookupValue"",""STC_ADMIN"",""TESTLINEVAL""); 
var foundTestCSRSubstr = foundTestCSR.substring(0,3);
if(foundTestCSRSubstr == ""CSR"")
{
	
	var EmpBC:BusComp = sApp.GetBusObject(""Employee"").GetBusComp(""Employee"");
	with(EmpBC)
	{
		ActivateField(""STC Department"");
		ActivateField(""First Name"");
		ActivateField(""Last Name"");
		SetViewMode(AllView);
		ClearToQuery();
		SetSearchSpec(""Login Name"",CurrentLogin);
		ExecuteQuery();
		var EmpRec = FirstRecord();
		if(EmpRec)
		{
			FName = GetFieldValue(""First Name"");
			LName = GetFieldValue(""Last Name"");
			Dept = GetFieldValue(""STC Department"");
		}
		LoginName = LName+"" ""+FName;
		with(this)
		{
		SetFieldValue(""STC Line Category"",TestLine);
		SetFieldValue(""STC Test Line Dept"",Dept);
		SetFieldValue(""STC Test Line Reqstr Name"", LoginName);
		SetFieldValue(""STC Test Line Purpose"", Purpose);
		}//end of with(this)
	}
	
}


}
function BusComp_PreInvokeMethod (MethodName)
{
//***********************************************************************************************************//
//Purpose: 1)To validate whether the current user(CSR) has the rights to modify the order or not 
//Inputs: 
//Outputs: Will give an error message if the CSR is not authorised
//Author: Navin Rai
//Release: 
//Date: 20-Dec-2010
//*************************************************************************************************************//

	var custType = null;
	var parentBC = null, appObj = null;
	var dunningChangeService = null;
	var input = null, output = null;
	
	try
	 {
	  
	   switch(MethodName)
		{   
	          case ""CreateAndAutoPopulate"":
	          {
		           	parentBC = this.ParentBusComp();
					
					if(parentBC != null)
					{
						parentBC.ActivateField(""Type"");
						custType = parentBC.GetFieldValue(""Type"");
						
						if(custType == ""Corporate"")
						{
							appObj = TheApplication();
							
							//Calling Business Service to validate the CSR:
							dunningChangeService = appObj.GetService(""STC Corp CSR Validation BS"");
							input = appObj.NewPropertySet();
							output = appObj.NewPropertySet();
							dunningChangeService.InvokeMethod(""ValidateCorporateCSR"", input, output);
						}
				   	 }
						this.ExecuteQuery();
						this.WriteRecord();
						this.InvokeMethod(""RefreshBusComp"");
				return (CancelOperation);
			    break;
			  }	
			  default:
			    break;
		 } 
		return (ContinueOperation);
	  }
	 catch(e)
	 {
		throw(e);
	 }
	 finally
	 {
		input = null;
		output = null;
		dunningChangeService = null;
		parentBC = null;
		appObj = null;
	 }
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	var sAccountId,psInputs,psOutputs,svcbsService;
	var sCheckFlg,vOldCL;
	try
	{
		var appObj = TheApplication();
		switch(FieldName)
	    {
 		 case ""Credit Score"":

			if (FieldValue != """" && FieldValue != null)
			{		
					if(FieldValue < ""0"")
					{
							appObj.RaiseErrorText(""Credit Limit should not be a Negetive value"");
					}
					
					sAccountId = this.GetFieldValue(""Parent Account Id"");
					vOldCL = this.GetFieldValue(""Credit Score"");
					//Added for SME Credit Limit//
					var CustType = this.GetFieldValue(""Type"");
					if (CustType == ""SME"")
						{
						var defaultEmpCredit = 0;
						var custSegment = """";
						var ServiceType = this.GetFieldValue(""STC Service Type"");
						if ( this.ParentBusComp()!= null)
							custSegment = this.ParentBusComp().GetFieldValue(""STC Contract Category"");
						else
							custSegment = this.GetFieldValue(""STC Contract Category"");
						var creditBO = TheApplication().GetBusObject(""STC Credit Limit Corporate"");
						var creditBC = creditBO.GetBusComp(""STC Credit Limit Corporate"");
						if(ServiceType != ""Prepaid"")
						{
						with(creditBC)
						{
							ActivateField(""Customer Segment"");
							ActivateField(""Employee Credit Limit"");
							ClearToQuery();
							SetViewMode(AllView);
							SetSearchSpec(""Customer Segment"", custSegment);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
							{	defaultEmpCredit = ToNumber(GetFieldValue(""Employee Credit Limit""));
								if (defaultEmpCredit > ToNumber(FieldValue))
									appObj.RaiseErrorText(""Credit Limit cannot be reduced below Default Credti Limit"");
							}
						}
						}
					}
					//End of Addition
					psInputs = appObj.NewPropertySet();
					psOutputs = appObj.NewPropertySet();
					svcbsService = appObj.GetService(""Workflow Process Manager"");
					psInputs.SetProperty(""ProcessName"", ""STC Child Corporate Credit Limit WF"");
					psInputs.SetProperty(""Object Id"",sAccountId);
					psInputs.SetProperty(""Child CL"",FieldValue);
					psInputs.SetProperty(""Negative Child CL"",vOldCL);///added by Sudeep
					svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
					sCheckFlg = psOutputs.GetProperty(""CheckCL"");
					//	var sCheckBlankFlg = psOutputs.GetProperty(""CheckBlankCL"");				
					if(sCheckFlg ==""Y"")
					{
						appObj.RaiseErrorText(""The Selected Credit Limit Exceeds the Maximum Credit Limit"");
					}	
				} // End of If condition
				
				//######Validation for reducing CL ################
				this.ActivateField(""STC Child Account CL Sum"");
				var ChildCLSum = this.GetFieldValue(""STC Child Account CL Sum"");
				//this.ActivateField(""STC Child Account Count"");
				//if(this.GetFieldValue(""STC Child Account Count"") > 0  && this.GetFieldValue(""STC Child Account CL Sum"") > FieldValue)
				var vNewCL = FieldValue;
		       	vOldCL = this.GetFieldValue(""Credit Score""); 
        	    if(ToInteger(vNewCL) < ToInteger(vOldCL))
            	{
            		if (ToInteger(ChildCLSum) > ToInteger(FieldValue))
					{
               			appObj.RaiseErrorText(""Cannot accept this Credit Limit value. Total of child account's credit limit is "" + this.GetFieldValue(""STC Child Account CL Sum"") + ""."");
               		}	
	           	}		
					//#################################################

					/*if(sCheckBlankFlg == ""Y"")
					{
					   appObj.RaiseErrorText(""Credit Limit Should not be NULL"");
					}*/		
			//}
			break;
		default:
		}
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{}
}
function BusComp_WriteRecord ()
{
	this.ExecuteQuery();
	this.WriteRecord();
	this.InvokeMethod(""RefreshBusComp"");
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
	var sSubStatus;
	var sSetSubStatus;
	var appObj;
	var sIDType;
	var sIDNum;
	var psDUPInputs;
	var psDUPOutputs;
	var bsDupIDCheck;
	var sErrorMsg;
	var sErrorCode;
	var bDupIDCheckFlag;
	
	
	try
	{
		appObj = TheApplication();
		sSubStatus = appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""Unassigned"");
		sSetSubStatus = appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""In Progress"");
	  	with(this)
		{
			if(GetFieldValue(""Sub-Status"") == sSubStatus)
		    {
		   		SetFieldValue(""Sub-Status"",sSetSubStatus);
			}
		}
		
			
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		appObj = null;	
	} 	
}
"
function BusComp_SetFieldValue (FieldName)
{
	switch(FieldName)
    {
		case ""Sub-Status""://[NAVIN:20Jun2018:CustomerJourney360View]
			UpdateCustomer360Details();
			break;
		default : 
				break;
	}
}
function UpdateCustomer360Details()
{//[NAVIN:20Jun2018:CustomerJourney360View]

	var vSRId="""", vSRType="""", vCallTier3="""", vStatus="""", vSubStatus="""", vCustType="""", vSRFlag=""ALLOW"", vCallWfFlag=""N"";
	var psInputs=null, psOutputs=null, svcbsService=null;

	try
	{
		with(this)
		{
			ActivateField(""SR Type"");
			ActivateField(""INS Sub-Area"");
			ActivateField(""Status"");
			ActivateField(""Sub-Status"");
			ActivateField(""Type"");
			vSRId = GetFieldValue(""Id"");
			vSRType = GetFieldValue(""SR Type"");
			vCallTier3 = GetFieldValue(""INS Sub-Area"");
			vStatus = GetFieldValue(""Status"");
			vSubStatus = GetFieldValue(""Sub-Status"");
			vCustType = GetFieldValue(""Type"");
			vSRFlag = TheApplication().InvokeMethod(""LookupValue"", ""STC_CUST360_EXCLUDE_SR_LIST"", vCallTier3);
			if(vSRFlag != null)
				vSRFlag = vSRFlag.substr(0,5);
			
			if(vCustType == """" || vCustType == null)
				vCustType = ""Individual"";
			
			if((vCustType == ""Individual"") && (vSRType == ""Service Request"") && !(vSRFlag == ""NOALL"") && ((vSubStatus == ""Executed"") || (vStatus == ""Pending"") || (vSubStatus == ""In Progress"")))
			{
				vCallWfFlag = ""Y"";
			}
			if((vCustType == ""Individual"") && (vSRType == ""Trouble Ticket"") && !(vSRFlag == ""NOALL"") && ((vStatus == ""Closed"") || (vSubStatus == ""Queued"")))
			{
				vCallWfFlag = ""Y"";
			}
			if(vCallWfFlag == ""Y"")
			{
				psInputs = TheApplication().NewPropertySet();
				psOutputs = TheApplication().NewPropertySet();
				svcbsService = TheApplication().GetService(""Workflow Process Manager"");
				with (psInputs){
					SetProperty(""ProcessName"", ""STC Customer 360 Update WF"");
					SetProperty(""Object Id"", """");
					SetProperty(""SRId"", vSRId);
					SetProperty(""Operation"", vCallTier3);
					SetProperty(""OperationSubType"", vSubStatus);
				}
				svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
			}
		}//end with
	}
	catch(e)
	{}
	finally
	{
		psInputs = null; psOutputs = null;
		svcbsService = null;
	}
}
"var bTypeSubtypeExist=false;
var bcprExist=false;"
function BusComp_PreNewRecord ()
{
 bTypeSubtypeExist=true;
 bcprExist=false;
return (ContinueOperation); 
}
function BusComp_PreQuery ()
{
//bTypeSubtypeExist=false;
return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
bcprExist=false;
 switch(FieldName)
 {
 	case ""CPR Number"":
 		var ImportIden=TheApplication().GetProfileAttr(""ImportFlg"");
 		if(ImportIden!=""Y"")
 		{
 		bcprExist=true;
 		}
 		else
 		{
 		bcprExist=false;
 		}
 		break;
 		 
         default :
         		break;
 }
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{ 
try
{
with(this)
		{
		ActivateField(""CPR Number""); 
		var CPRNumber=  this.GetFieldValue(""CPR Number"");
			var ImportIden=TheApplication().GetProfileAttr(""ImportFlg"");
			var oBO = TheApplication().GetBusObject(""STC CPR Black List BO"");
				var oBC = oBO.GetBusComp(""STC CPR BlackList BC"");
		if(bTypeSubtypeExist && CPRNumber!="""" && ImportIden!=""Y"")
			{	
				with(oBC) 
				{ 
				if(bcprExist)
				{
					InvokeMethod(""SetAdminMode"",""TRUE"");
					ActivateField(""CPR Number"");  
					ActivateField(""Black Listed"");
					ActivateField(""Import Status"");
					SetViewMode(AllView);  
					ClearToQuery();
					var spec1 = """";    
					spec1 = spec1 + ""[CPR Number]= '"" + CPRNumber + ""' AND ([Black Listed]='ToBeBlacklisted' OR [Black Listed]='Blacklisted')""; 
					SetSearchExpr(spec1); 
					ExecuteQuery(ForwardOnly);
					var isRecord = FirstRecord();
					if(isRecord) 
					{						
					TheApplication().RaiseErrorText(""Record Exists with the same ""+CPRNumber+"" Number"");
					return CancelOperation;
					}
				 }//bcprExist	
				}//oBC
				bTypeSubtypeExist=false;	
			}//bTypeSubtypeExist
			return ContinueOperation
		   }//withthis
		   
		}//try
		catch(e)
		{
		throw(e);
		}
		
		finally
		{
		}


}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{	
	try
	{
		var vApp: Application = TheApplication();
		if(FieldName == ""STC CPR Id"")
		{
			vApp.SetProfileAttr(""STCCPRId"", FieldValue);			
		}	
		return (ContinueOperation);
	}
	finally
	{
		vApp =  null;
	}	
}
function BusComp_Query ()
{		
	this.NewRecord(NewAfter);
}
function BusComp_NewRecord ()
{
	var appObj = TheApplication();
	with(appObj)
		{
			var currLoginId = LoginName();
			
		}		
		
		var foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_CORPORATE_CSRS"",currLoginId);
		 
		var foundCSRSubstr = foundCSR.substring(0,3);
		
		if(foundCSRSubstr != ""CSR"")
		{
		
			appObj.RaiseErrorText(""Sorry! You do not have the privilege to create New Corporate Customer Account"");
			//	return (CancelOperation);
		}
		else
		{
			this.NewRecord();
		}
}
function BusComp_PreInvokeMethod (MethodName)
{
	try
	 {
	  
	   switch(MethodName)
		{   
	          case ""SubmitCUG"":
	          {
	           	SubmitCUG();
				return (CancelOperation);
			    break;
			  }	
			  case ""ReSubmitCUG"":
	          {
	           	SubmitCUG();
				return (CancelOperation);
			    break;
			  }
			  default:
			    break;
		 } 
		return (ContinueOperation);
	  }
	 catch(e)
	 {
		throw(e);
	 }
	 finally
	 {
	
	 }
}
function SubmitCUG()
{
	var appObj;
	var sCugId;
	var psInputs;
	var psOutputs;
	var svcbsService;
	var sFee;
	try
	{
	appObj = TheApplication();
	with(appObj)
		{
			var currLoginId = LoginName();
			
		}		
		
		var foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_CORPORATE_CSRS"",currLoginId);
		 
		var foundCSRSubstr = foundCSR.substring(0,3);
		
		if(foundCSRSubstr != ""CSR"")
		{
		
			appObj.RaiseErrorText(""Sorry! You do not have the privilege to create New Corporate Customer Account"");
			//	return (CancelOperation);
		}
	
	else
	{
		appObj = TheApplication();
		with(this)
			{				
				WriteRecord();
	            sCugId =GetFieldValue(""Id"");
	            psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				svcbsService = appObj.GetService(""Workflow Process Manager"");
				psInputs.SetProperty(""ProcessName"", ""STC CUG Submit WF"");
				psInputs.SetProperty(""Object Id"",sCugId);
				svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
				
			}
			}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		psInputs = null;
		psOutputs = null;
		svcbsService = null;
		appObj = null;
	}
}
function BusComp_NewRecord ()
{
var appObj = TheApplication();
	with(appObj)
		{
			var currLoginId = LoginName();
			
		}		
		
		var foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_CORPORATE_CSRS"",currLoginId);
		 
		var foundCSRSubstr = foundCSR.substring(0,3);
		
		if(foundCSRSubstr != ""CSR"")
		{
		
			appObj.RaiseErrorText(""Sorry! You do not have the privilege to create New Corporate Customer Account"");
			//	return (CancelOperation);
		}
		else
		{
			this.NewRecord();
		}
}
function BusComp_PreInvokeMethod (MethodName)
{
	try
	 {
	  
	   switch(MethodName)
		{   
	          case ""SubmitCUG"":
	          {
	           	SubmitCUG();
				return (CancelOperation);
			    break;
			  }	
			  case ""ReSubmitCUG"":
	          {
	           	SubmitCUG();
				return (CancelOperation);
			    break;
			  }
			  default:
			    break;
		 } 
		return (ContinueOperation);
	  }
	 catch(e)
	 {
		throw(e);
	 }
	 finally
	 {
	
	 }
}
function SubmitCUG()
{
	var appObj;
	var sCugId;
	var sParent;
	var psInputs;
	var psOutputs;
	var svcbsService;
	var sFee;
	try
	{
		appObj = TheApplication();
		
			with(appObj)
		{
			var currLoginId = LoginName();
			
		}		
		
		var foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_CORPORATE_CSRS"",currLoginId);
		 
		var foundCSRSubstr = foundCSR.substring(0,3);
		
		if(foundCSRSubstr != ""CSR"")
		{
		
			appObj.RaiseErrorText(""Sorry! You do not have the privilege to create New Corporate Customer Account"");
			//	return (CancelOperation);
		}
	
	else
	{
	with(this)
			{				
				WriteRecord();
	            sCugId =GetFieldValue(""Id"");
	            
	            ActivateField(""Parent Group Number"");
	            //ActivateField(""Parent Group Number"");
	            var Parent = GetFieldValue(""Parent Group Id"");
	            sParent = GetFieldValue(""Parent Group Number"");
	            psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				svcbsService = appObj.GetService(""Workflow Process Manager"");
				psInputs.SetProperty(""ProcessName"", ""STC CUG Submit WF"");
				psInputs.SetProperty(""Object Id"",sCugId);
				psInputs.SetProperty(""Parent Group Id"",sParent);
				svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
				
			}
			}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		psInputs = null;
		psOutputs = null;
		svcbsService = null;
		appObj = null;
	}
}
function BusComp_NewRecord ()
{
var appObj = TheApplication();
	with(appObj)
		{
			var currLoginId = LoginName();
			
		}		
		
		var foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_CORPORATE_CSRS"",currLoginId);
		 
		var foundCSRSubstr = foundCSR.substring(0,3);
		
		if(foundCSRSubstr != ""CSR"")
		{
		
			appObj.RaiseErrorText(""Sorry! You do not have the privilege to create New Corporate Customer Account"");
			//	return (CancelOperation);
		}
		else
		{
			this.NewRecord();
		}
}
function BusComp_PreInvokeMethod (MethodName)
{
	try
	 {
	  
	   switch(MethodName)
		{   
	          case ""SubmitCUG"":
	          {
	           	SubmitCUG();
				return (CancelOperation);
			    break;
			  }	
			  case ""ReSubmitCUG"":
	          {
	           	SubmitCUG();
				return (CancelOperation);
			    break;
			  }
			  default:
			    break;
		 } 
		return (ContinueOperation);
	  }
	 catch(e)
	 {
		throw(e);
	 }
	 finally
	 {
	
	 }
}
function SubmitCUG()
{
	var appObj;
	var sCugId;
	var sParent;
	var psInputs;
	var psOutputs;
	var svcbsService;
	var sFee;
	try
	{
		appObj = TheApplication();
		
			with(appObj)
		{
			var currLoginId = LoginName();
			
		}		
		
		var foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_CORPORATE_CSRS"",currLoginId);
		 
		var foundCSRSubstr = foundCSR.substring(0,3);
		
		if(foundCSRSubstr != ""CSR"")
		{
		
			appObj.RaiseErrorText(""Sorry! You do not have the privilege to create New Corporate Customer Account"");
			//	return (CancelOperation);
		}
	
	else
	{
	with(this)
			{				
				WriteRecord();
	            sCugId =GetFieldValue(""Id"");
	            //ActivateField(""Parent Group Number"");
	            sParent = GetFieldValue(""Parent Group Number"");
	            psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				svcbsService = appObj.GetService(""Workflow Process Manager"");
				psInputs.SetProperty(""ProcessName"", ""STC CUG Submit WF"");
				psInputs.SetProperty(""Object Id"",sCugId);
				psInputs.SetProperty(""Parent Group Id"",sParent);
				svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
				
			}
			}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		psInputs = null;
		psOutputs = null;
		svcbsService = null;
		appObj = null;
	}
}
function BusComp_PreWriteRecord ()
{
var isNewRecord = this.InvokeMethod(""IsNewRecordPending"");

if(isNewRecord == ""TRUE"" && TheApplication().GetProfileAttr(""ApplicationName"") == ""Siebel eChannel for CME"")

{
	this.SetFieldValue(""SSA Primary Field"",""Y"");
}

return (ContinueOperation);
/*	var strPostalCode = this.GetFieldValue(""Postal Code"");
	var returnval = ContinueOperation;
	if(strPostalCode.length != 0)
	{
		if(strPostalCode.length != 6)
		{
			TheApplication().RaiseErrorText(""The Postal Code should be numeric."");
			returnval = CancelOperation;
		}
		else
		{
			if(!TheApplication().GetService(""TDNFormatValidations"").check_zipcode(strPostalCode,""India""))
			{
				TheApplication().RaiseErrorText(""The Zip Code should be numeric."");
				returnval = CancelOperation;
			}
			
		 }
	 
	 }

	
	return (returnval);
	*/
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	switch(FieldName)
	{
		case ""STC Billing Acc Segment"":
		{
			var BillAccId = this.GetFieldValue(""Id"");
			var vCreditLmt = """";
			var vCreditScoreFlg = """";
			var vBillValidationBS = TheApplication().GetService(""STC Billing Account Validation BS"");
			var InpPS = TheApplication().NewPropertySet();
			var OutPS = TheApplication().NewPropertySet();
			InpPS.SetProperty(""BillAccId"", BillAccId);
			InpPS.SetProperty(""FieldName"", FieldName);
			InpPS.SetProperty(""FieldValue"", FieldValue);
			vBillValidationBS.InvokeMethod(""FieldValidations"",InpPS,OutPS);
			vCreditScoreFlg = OutPS.GetProperty(""vCreditScoreChange"");
			if(vCreditScoreFlg == ""Y"")
			{
			vCreditLmt = OutPS.GetProperty(""CreditLimit"");
			this.ActivateField(""Credit Score"");
			this.SetFieldValue(""Credit Score"", vCreditLmt);
			this.WriteRecord();
			}
		}
		break;
		
		default :
         		break;
	}//end switch
	
	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{
try
{
 var BillAccId = this.GetFieldValue(""Id"");
 this.ActivateField(""STC Risk Level"");
 this.ActivateField(""Occupation"");
 var vOccupation = this.GetFieldValue(""Occupation"");
	
  var STCCreditLimitBO = TheApplication().GetBusObject(""STC Credit Limit"");
  var STCCreditLimitBC = STCCreditLimitBO.GetBusComp(""STC Credit Limit"");
  with(STCCreditLimitBC)
    {
  ActivateField(""Current Occupation"");
  ActivateField(""Risk Level"");
  SetViewMode(AllView);
  ClearToQuery();
  var searchstr = ""[Current Occupation] = '"" + vOccupation + ""' AND [Customer Class] = 'Bahraini'"";
  SetSearchExpr(searchstr);
  ExecuteQuery(ForwardOnly);
    
    if (FirstRecord())
    {
    
    var vRiskLevel = GetFieldValue(""Risk Level"");
     }//end if
		
	}//end with
	this.SetFieldValue(""STC Risk Level"",vRiskLevel);
	this.WriteRecord();
	//}
	}
	
	catch(e)
	{
	throw(e);
	}
	
	finally
	{
	STCCreditLimitBC=null;
	STCCreditLimitBO=null;
	
	}
}
function BusComp_NewRecord ()
{
var sApp = TheApplication();
var CurrentLogin = sApp.LoginName();
var FName,LName,Dept,LoginName;
var foundTestCSR = sApp.InvokeMethod(""LookupValue"",""STC_TEST_PROV"",CurrentLogin);
var Purpose = sApp.InvokeMethod(""LookupValue"",""STC_ADMIN"",""TESTLINEPURPOSE"");
var foundTestCSRSubstr = foundTestCSR.substring(0,3);
if(foundTestCSRSubstr == ""CSR"")
{
	
	var EmpBC:BusComp = sApp.GetBusObject(""Employee"").GetBusComp(""Employee"");
	with(EmpBC)
	{
		ActivateField(""STC Department"");
		ActivateField(""First Name"");
		ActivateField(""Last Name"");
		SetViewMode(AllView);
		ClearToQuery();
		SetSearchSpec(""Login Name"",CurrentLogin);
		ExecuteQuery();
		var EmpRec = FirstRecord();
		if(EmpRec)
		{
			FName = GetFieldValue(""First Name"");
			LName = GetFieldValue(""Last Name"");
			Dept = GetFieldValue(""STC Department"");
		}
		LoginName = LName+"" ""+FName;
		with(this)
		{
		SetFieldValue(""STC Line Category"",""Test Line"");
		SetFieldValue(""STC Test Line Dept"",Dept);
		SetFieldValue(""STC Test Line Reqstr Name"", LoginName);
		SetFieldValue(""STC Test Line Purpose"", Purpose);
		SetFieldValue(""STC Invoice Exclusiion Flag"", ""Y"");
	
		
		}//end of with(this)
	}
	
}


}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	switch(FieldName)
	{
		case ""STC Billing Acc Segment"":
		{
			var BillAccId = this.GetFieldValue(""Id"");
			var vCreditLmt = """";
			var vCreditScoreFlg = """";
			var vBillValidationBS = TheApplication().GetService(""STC Billing Account Validation BS"");
			var InpPS = TheApplication().NewPropertySet();
			var OutPS = TheApplication().NewPropertySet();
			InpPS.SetProperty(""BillAccId"", BillAccId);
			InpPS.SetProperty(""FieldName"", FieldName);
			InpPS.SetProperty(""FieldValue"", FieldValue);
			vBillValidationBS.InvokeMethod(""FieldValidations"",InpPS,OutPS);
			vCreditScoreFlg = OutPS.GetProperty(""vCreditScoreChange"");
			if(vCreditScoreFlg == ""Y"")
			{
			vCreditLmt = OutPS.GetProperty(""CreditLimit"");
			this.ActivateField(""Credit Score"");
			this.SetFieldValue(""Credit Score"", vCreditLmt);
			this.WriteRecord();
			}
		}
		break;
		
		default :
         		break;
	}//end switch
	
	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{
try
{
 var BillAccId = this.GetFieldValue(""Id"");
 this.ActivateField(""STC Risk Level"");
 this.ActivateField(""Occupation"");
 var vOccupation = this.GetFieldValue(""Occupation"");
	
  var STCCreditLimitBO = TheApplication().GetBusObject(""STC Credit Limit"");
  var STCCreditLimitBC = STCCreditLimitBO.GetBusComp(""STC Credit Limit"");
  with(STCCreditLimitBC)
    {
  ActivateField(""Current Occupation"");
  ActivateField(""Risk Level"");
  SetViewMode(AllView);
  ClearToQuery();
  var searchstr = ""[Current Occupation] = '"" + vOccupation + ""' AND [Customer Class] = 'Bahraini'"";
  SetSearchExpr(searchstr);
  ExecuteQuery(ForwardOnly);
    
    if (FirstRecord())
    {
    
    var vRiskLevel = GetFieldValue(""Risk Level"");
     }//end if
		
	}//end with
	this.SetFieldValue(""STC Risk Level"",vRiskLevel);
	this.WriteRecord();
	//}
	}
	
	catch(e)
	{
	throw(e);
	}
	
	finally
	{
	STCCreditLimitBC=null;
	STCCreditLimitBO=null;
	
	}
}
function BusComp_SetFieldValue (FieldName)
{
	if (FieldName == ""STC Bulk Process Flag"")
		{
			var BulkProcessFlag = this.GetFieldValue(""STC Bulk Process Flag"");
			/*if(BulkProcessFlag=""Y"")
			{
				this.ActivateField(""STC Bulk Extract Id"");
				this.SetFieldValue(""STC Bulk Extract Id"", TheApplication().GetProfileAttr(""ModifyOrdersExtId""));
				this.WriteRecord();
			}
			*/
			/*
			if(BulkProcessFlag=""N"")
			{
				this.ActivateField(""STC Bulk Extract Id"");
				this.SetFieldValue(""STC Bulk Extract Id"", TheApplication().SetProfileAttr(""ModifyOrdersExtId"",""""))
				this.WriteRecord();
			}
			*/

			//this.WriteRecord();
		}
}
/*var strIsBS = false;*/
function BusComp_NewRecord ()
{
//	strIsBS = true;
}
function BusComp_PreQuery ()
{
/*	var SearchStr;
	var AccType;
	try{
			AccType=TheApplication().GetProfileAttr(""STCAccountTypeServAcc"");
			if(AccType != null && AccType != """")
			{	
				SearchStr=this.GetSearchExpr();
				if (SearchStr == null || SearchStr == """")
					SearchStr = ""[Type]='"" + AccType + ""'"";
				else	
					SearchStr = SearchStr + "" AND [Type]='"" + AccType + ""'"";			
				this.SetSearchExpr(SearchStr);	
				// The profile Attribute is set to blank so that the searches on Sunscription data work as reqd.
				TheApplication().SetProfileAttr(""STCAccountTypeServAcc"","""");
			}	
			return (ContinueOperation);	
	}
	catch(e)
	{	
		throw(e);
	}	*/
}
"/*20-12-2010 For Migration Validation*/
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{/*
	var billId = null;
	var parBillId = null;
	var ppBillId = null;
	var serviceId = null;
	var msisdn;
	var appObj;
	var appBO;
	var appBC;
	var name;
	var status;
	var parentBC;
	var childBillBC;
	var MigType;
	try
	{
	
	 switch(FieldName)
	 {
	  case ""STC Postpaid Cust MSISDN"":
	  	
	  	msisdn = this.GetFieldValue(""STC Postpaid Cust MSISDN"");
		appObj = TheApplication();
		appBO = appObj.GetBusObject(""STC Billing Account"");
		appBC = appBO.GetBusComp(""CUT Service Sub Accounts"");
		childBillBC = appBO.GetBusComp(""STC Child Billing Accounts"");
		parentBC = this.ParentBusComp();
		
		
		
		with(appBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Parent Account Id"");
			SetSearchSpec(""DUNS Number"", msisdn);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				serviceId = GetFieldValue(""Id"");
				billId = GetFieldValue(""Parent Account Id"");
			}
			
		}
		
		
		with(parentBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Account Status"");
			SetSearchSpec(""Id"", billId);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				parBillId = GetFieldValue(""Parent Account Id"");
			}	
		}
		
		with(parentBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Account Status"");
			SetSearchSpec(""Id"", parBillId);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				ppBillId = GetFieldValue(""Parent Account Id"");
				status = GetFieldValue(""Account Status"");
			}	
		}
		
		this.SetFieldValue(""STC Stores BillId"", ppBillId);
		var billd = this.GetFieldValue(""STC Stores BillId"");
		WriteRecord();
		
		break;
		
		//Added by SushantE 20 Dec 2010 for Migration Validation

		
		default :
			break;
	  
	  }
			return (ContinueOperation);
			
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{}*/
	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{/*try
{
    if(strIsBS == true)
	{
		var strAccntId = this.GetFieldValue(""Id"");            
		var IsRecord1;
		var strConPriAddrId;
		var strContactId;
		var objCurrBO = TheApplication().ActiveBusObject();
		if (objCurrBO == ""STC Service Account"") // || objCurrBO == ""Service Request"")
		{
			strConPriAddrId = this.GetFieldValue(""Primary Address Id"");
			strContactId = this.GetFieldValue(""Primary Contact Id"");
		}
		else
		{
			strConPriAddrId = this.ParentBusComp().GetFieldValue(""Primary Address Id"");
			strContactId = this.ParentBusComp().GetFieldValue(""Primary Contact Id"");
		}

		var objAddMVGBC = GetMVGBusComp(""Street Address"").GetAssocBusComp();
		with(objAddMVGBC)
		{
			SetViewMode(AllView);
			ActivateField(""Row Id"");
			ActivateField(""Address Type"");
			ClearToQuery();
			SetSearchSpec(""Row Id"",strConPriAddrId);
			ExecuteQuery(ForwardOnly);
			IsRecord1 = FirstRecord();                                                                             
			if(IsRecord1)
			{
				try
				{
					Associate(NewAfter);
					WriteRecord();
				}
				catch (e)
				{
					null;
				}
			}
		}
//		var BOContact = TheApplication().GetBusObject(""Contact"");
//		var BCContact = BOContact.GetBusComp(""Contact"");		
		var objConMVGBC = GetMVGBusComp(""Primary Contact Last Name"").GetAssocBusComp();
		with(objConMVGBC)
		{
			SetViewMode(AllView);
			ActivateField(""Row Id"");
			ActivateField(""Parent Account Id"");
			ActivateField(""Account Id"");
			ClearToQuery();
			SetSearchSpec(""Row Id"",strContactId);
			ExecuteQuery(ForwardOnly);
			IsRecord1 = FirstRecord();                                                                             
			if(IsRecord1)
			{
				try
				{
					Associate(NewAfter);
					WriteRecord();
				}
				catch (e)
				{
					null;
				}                                                              
			}
		}
	this.SetFieldValue(""Primary Address Id"",strConPriAddrId);		
	this.SetFieldValue(""Primary Contact Id"",strContactId);
	WriteRecord();
	}
}
catch(e)
{
/*	var vErr = e.toString();
	var vErrCode = e.errCode;
	var vObjName = ""CUT Invoice Sub Accounts"";
	var vFunc = ""BusComp_WriteRecord"";
	var vObjType = ""Business Component"";
	var RowId = this.GetFieldValue(""Id"");
                                                                
	logexception(vErr,vErrCode,RowId,vObjName,vFunc,vObjType);
	throw(e);
}
finally
{
}
return (ContinueOperation);*/

}
function BusComp_PreWriteRecord ()
{
try
{
	var sCampCode = this.GetFieldValue(""Campaign Code"");
	var sRowId = this.GetFieldValue(""Id"");
	var sShortCode = this.GetFieldValue(""Short Code"");
	var sShortCodeValue = this.GetFieldValue(""Short Code Value"");
	var sStatus = this.GetFieldValue(""Status"");
	
	var BcRecRowId = """";
	
	var sCampBO = TheApplication().GetBusObject(""Campaign"");
	var sCampMapBC = sCampBO.GetBusComp(""STC Campaign Mapping"");
	with(sCampMapBC)
	{
		SetViewMode(AllView);
		ClearToQuery();
		SetSearchExpr(""[Short Code] = '""+sShortCode+""' AND [Short Code Value] = '""+sShortCodeValue+""' AND [Status] = 'Active'"");
		ExecuteQuery(ForwardOnly);
		var iRec = FirstRecord();
		while(iRec)
		{
			BcRecRowId = """";
			BcRecRowId = GetFieldValue(""Id"");
			if(BcRecRowId != sRowId)
			{
				TheApplication().RaiseErrorText(""There is already a record with same Short Code and Short Code Value"");
			}
			iRec = NextRecord();
		}
	}
	
}
catch(e)
{
	throw(e);
}
finally
{
	sCampMapBC = null; sCampBO = null;
}
	
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_PreInvokeMethod (MethodName)
{
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{


	if(FieldName == ""Approval Status"")
    {
            var ApprStatus = this.GetFieldValue(""Approval Status"");
            var vId = this.GetFieldValue(""Id"");
            var vName = this.GetFieldValue(""Name"");
            var sId = TheApplication().LoginId();

            if(ApprStatus == ""Submitted"")
            { 
				var svc1 = TheApplication().GetService(""Campaign Approval Process"");
				var Input = TheApplication().NewPropertySet();
				var Output = TheApplication().NewPropertySet();
				Input.SetProperty(""CampaignId"",vId); // Input Agruments
				Input.SetProperty(""CampaignName"",vName); // Input Agruments
				Input.SetProperty(""LoginId"",sId); // Input Agruments
				svc1.InvokeMethod(""Approval"", Input, Output);  
            }

            return(CancelOperation);
     }

                                   
}
function BusComp_NewRecord ()
{
var sApp = TheApplication();
var CurrentLogin = sApp.LoginName();
var FName,LName,Dept,LoginName;
var foundTestCSR = sApp.InvokeMethod(""LookupValue"",""STC_TEST_PROV"",CurrentLogin);
var Purpose = sApp.InvokeMethod(""LookupValue"",""STC_ADMIN"",""TESTLINEPURPOSE"");
var TestLine = sApp.InvokeMethod(""LookupValue"",""STC_ADMIN"",""TESTLINEVAL""); 
var foundTestCSRSubstr = foundTestCSR.substring(0,3);
if(foundTestCSRSubstr == ""CSR"")
{
	
	var EmpBC:BusComp = sApp.GetBusObject(""Employee"").GetBusComp(""Employee"");
	with(EmpBC)
	{
		ActivateField(""STC Department"");
		ActivateField(""First Name"");
		ActivateField(""Last Name"");
		SetViewMode(AllView);
		ClearToQuery();
		SetSearchSpec(""Login Name"",CurrentLogin);
		ExecuteQuery();
		var EmpRec = FirstRecord();
		if(EmpRec)
		{
			FName = GetFieldValue(""First Name"");
			LName = GetFieldValue(""Last Name"");
			Dept = GetFieldValue(""STC Department"");
		}
		LoginName = LName+"" ""+FName;
		with(this)
		{
		SetFieldValue(""STC Line Category"",TestLine);
		SetFieldValue(""STC Test Line Dept"",Dept);
		SetFieldValue(""STC Test Line Reqstr Name"", LoginName);
		SetFieldValue(""STC Test Line Purpose"", Purpose);
		SetFieldValue(""STC Invoice Exclusiion Flag"", ""Y"");
		}//end of with(this)
	}
	
}


}
function BusComp_PreInvokeMethod (MethodName)
{
//***********************************************************************************************************//
//Purpose: 1)To validate whether the current user(CSR) has the rights to modify the order or not 
//Inputs: 
//Outputs: Will give an error message if the CSR is not authorised
//Author: Navin Rai
//Release: 
//Date: 20-Dec-2010
//*************************************************************************************************************//

	var custType = null;
	var parentBC = null, appObj = null;
	var dunningChangeService = null;
	var input = null, output = null;
	
	try
	 {
	  
	   switch(MethodName)
		{   
	          case ""CreateAndAutoPopulate"":
	          {
		           	parentBC = this.ParentBusComp();
					
					if(parentBC != null)
					{
						parentBC.ActivateField(""Type"");
						custType = parentBC.GetFieldValue(""Type"");
						
						if(custType == ""Corporate"")
						{
							appObj = TheApplication();
							
							//Calling Business Service to validate the CSR:
							dunningChangeService = appObj.GetService(""STC Corp CSR Validation BS"");
							input = appObj.NewPropertySet();
							output = appObj.NewPropertySet();
							dunningChangeService.InvokeMethod(""ValidateCorporateCSR"", input, output);
						}
				   	 }
						this.ExecuteQuery();
						this.WriteRecord();
						this.InvokeMethod(""RefreshBusComp"");
				return (CancelOperation);
			    break;
			  }	
			  default:
			    break;
		 } 
		return (ContinueOperation);
	  }
	 catch(e)
	 {
		throw(e);
	 }
	 finally
	 {
		input = null;
		output = null;
		dunningChangeService = null;
		parentBC = null;
		appObj = null;
	 }
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	var sAccountId,psInputs,psOutputs,svcbsService;
	var sCheckFlg,vOldCL;
	try
	{
		var appObj = TheApplication();
		switch(FieldName)
	    {
 		 case ""Credit Score"":

			if (FieldValue != """" && FieldValue != null)
			{
					if(FieldValue < ""0"")
					{
							appObj.RaiseErrorText(""Credit Limit should not be a Negetive value"");
					}
					
					sAccountId = this.GetFieldValue(""Parent Account Id"");
					vOldCL = this.GetFieldValue(""Credit Score"");
					//Added for SME Credit Limit//
					var CustType = this.GetFieldValue(""Type"");
					if (CustType == ""SME"")
						{
						var defaultEmpCredit = 0;
						var custSegment = """";
						if ( this.ParentBusComp()!= null)
							custSegment = this.ParentBusComp().GetFieldValue(""STC Contract Category"");
						else
							custSegment = this.GetFieldValue(""STC Contract Category"");
						var creditBO = TheApplication().GetBusObject(""STC Credit Limit Corporate"");
						var creditBC = creditBO.GetBusComp(""STC Credit Limit Corporate"");
						with(creditBC)
						{
							ActivateField(""Customer Segment"");
							ActivateField(""Employee Credit Limit"");
							ClearToQuery();
							SetViewMode(AllView);
							SetSearchSpec(""Customer Segment"", custSegment);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
							{	defaultEmpCredit = ToNumber(GetFieldValue(""Employee Credit Limit""));
								if (defaultEmpCredit > ToNumber(FieldValue))
									appObj.RaiseErrorText(""Credit Limit cannot be reduced below Default Credti Limit"");
							}
						}
					}
					//End of Addition
					psInputs = appObj.NewPropertySet();
					psOutputs = appObj.NewPropertySet();
					svcbsService = appObj.GetService(""Workflow Process Manager"");
					psInputs.SetProperty(""ProcessName"", ""STC Child Corporate Credit Limit WF"");
					psInputs.SetProperty(""Object Id"",sAccountId);
					psInputs.SetProperty(""Child CL"",FieldValue);
					psInputs.SetProperty(""Negative Child CL"",vOldCL);///added by Sudeep
					svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
					sCheckFlg = psOutputs.GetProperty(""CheckCL"");
					//	var sCheckBlankFlg = psOutputs.GetProperty(""CheckBlankCL"");				
					if(sCheckFlg ==""Y"")
					{
						appObj.RaiseErrorText(""The Selected Credit Limit Exceeds the Maximum Credit Limit"");
					}	
				} // End of If condition
				
				//######Validation for reducing CL ################
				this.ActivateField(""STC Child Account CL Sum"");
				var ChildCLSum = this.GetFieldValue(""STC Child Account CL Sum"");
				//this.ActivateField(""STC Child Account Count"");
				//if(this.GetFieldValue(""STC Child Account Count"") > 0  && this.GetFieldValue(""STC Child Account CL Sum"") > FieldValue)
				var vNewCL = FieldValue;
		       	vOldCL = this.GetFieldValue(""Credit Score""); 
        	    if(ToInteger(vNewCL) < ToInteger(vOldCL))
            	{
            		if (ToInteger(ChildCLSum) > ToInteger(FieldValue))
					{
               			appObj.RaiseErrorText(""Cannot accept this Credit Limit value. Total of child account's credit limit is "" + this.GetFieldValue(""STC Child Account CL Sum"") + ""."");
               		}	
	           	}		
					//#################################################

					/*if(sCheckBlankFlg == ""Y"")
					{
					   appObj.RaiseErrorText(""Credit Limit Should not be NULL"");
					}*/		
			//}
			break;
		default:
		}
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{}
}
function BusComp_WriteRecord ()
{
	this.ExecuteQuery();
	this.WriteRecord();
	this.InvokeMethod(""RefreshBusComp"");
	return (ContinueOperation);
}
function BusComp_NewRecord ()
{
var sApp = TheApplication();
var CurrentLogin = sApp.LoginName();
var FName,LName,Dept,LoginName;
var foundTestCSR = sApp.InvokeMethod(""LookupValue"",""STC_TEST_PROV"",CurrentLogin);
var Purpose = sApp.InvokeMethod(""LookupValue"",""STC_ADMIN"",""TESTLINEPURPOSE"");
var TestLine = sApp.InvokeMethod(""LookupValue"",""STC_ADMIN"",""TESTLINEVAL""); 
var foundTestCSRSubstr = foundTestCSR.substring(0,3);
if(foundTestCSRSubstr == ""CSR"")
{
	
	var EmpBC:BusComp = sApp.GetBusObject(""Employee"").GetBusComp(""Employee"");
	with(EmpBC)
	{
		ActivateField(""STC Department"");
		ActivateField(""First Name"");
		ActivateField(""Last Name"");
		SetViewMode(AllView);
		ClearToQuery();
		SetSearchSpec(""Login Name"",CurrentLogin);
		ExecuteQuery();
		var EmpRec = FirstRecord();
		if(EmpRec)
		{
			FName = GetFieldValue(""First Name"");
			LName = GetFieldValue(""Last Name"");
			Dept = GetFieldValue(""STC Department"");
		}
		LoginName = LName+"" ""+FName;
		with(this)
		{
		SetFieldValue(""STC Line Category"",TestLine);
		SetFieldValue(""STC Test Line Dept"",Dept);
		SetFieldValue(""STC Test Line Reqstr Name"", LoginName);
		SetFieldValue(""STC Test Line Purpose"", Purpose);
		SetFieldValue(""STC Invoice Exclusiion Flag"", ""Y"");
		}//end of with(this)
	}
	
}


}
function BusComp_WriteRecord ()
{
	this.ExecuteQuery();
	this.WriteRecord();
	this.InvokeMethod(""RefreshBusComp"");
	return (ContinueOperation);
}
"var vOldMSISDN = """";
var vOldSIM = """";"
function BlockRe_selection (OldValue,NewValue)
{
	try
	{
	var appObj;
	var psInputs,psOutputs,bsBlockNumber;
	appObj = TheApplication();
	
	ActivateField(""Record Blocked For"");
	ActivateField(""Billing Account Id"");
	
		var vBlockedServiceNumber = this.GetFieldValue(""Record Blocked For"");
        var vServiceNumber = this.GetFieldValue(""Billing Account Id"");
            
            if (vBlockedServiceNumber != """" && vBlockedServiceNumber != null) //RMS
            {
                 if(vBlockedServiceNumber != vServiceNumber)
                 {
                  appObj.RaiseErrorText(""The selected MSISDN/SIM is reserved for another. Please select alternate number"");
                  return (CancelOperation);
                 }
            }
                                    
            bsBlockNumber = appObj.GetService(""RMS RMS Block Number"") ;
            psInputs = appObj.NewPropertySet();
            psOutputs = appObj.NewPropertySet();
            //var vNewValue = this.GetFieldValue(""<mapped field in OLI for storing MSISDN/SIM number>"");         
            var vBlockedFor = this.GetFieldValue(""Billing Account Id"");
            psInputs.SetProperty(""BlockNumber"",NewValue);
            psInputs.SetProperty(""BlockedFor"",vBlockedFor);
            psInputs.SetProperty(""ReleaseNumber"",OldValue); // variable set at PreSetFieldValue
                        
            bsBlockNumber.InvokeMethod(""BlockNumber"",psInputs,psOutputs);
            
 

	}
	catch(e)
	{
	throw(e.errText);
	}
	finally
	{
	psInputs = null;
    psOutputs = null;
    bsBlockNumber = null;
    appObj = null;
	}
}
function BusComp_PreDeleteRecord ()
{	
	var appObj, sVoucherPromotionFlag;
	try
	{	appObj = TheApplication();
		var temp = this.GetFieldValue(""Id"");
		//this.ActivateField(""STC Voucher Promotion Flag"");
		sVoucherPromotionFlag = this.GetFieldValue(""STC Voucher Promotion Flag"");
		if (sVoucherPromotionFlag ==""Y"")
		{
			var bsService,bsin,bsout;
			bsService = appObj.GetService(""Workflow Process Manager"");
			bsin = appObj.NewPropertySet();
			bsout = appObj.NewPropertySet();
			bsin.SetProperty(""ProcessName"", ""STC Promotion Mgmt Delete Eligible Product WF"");
			bsin.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
			bsService.InvokeMethod(""RunProcess"", bsin, bsout);
		}
		this.InvokeMethod(""RefreshBusComp"");
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		return (ContinueOperation);
	}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{

	try
	{
	   
//	var vOldMSISDN,vOldSIM;  /*Added this as global variable Dt - 23.03.10 PN*/
/*	var row_id_flag,sim_flag,msi_flag,profattr;

	ActivateField(""Calc Row Id"");
	ActivateField(""Calc SIM Read Only"");	
	ActivateField(""Calc MSISDN Read Only"");
	
	row_id_flag = this.GetFieldValue(""Calc Row Id"");
	sim_flag = this.GetFieldValue(""Calc SIM Read Only"");
	msi_flag = this.GetFieldValue(""Calc MSISDN Read Only"");
	profattr = TheApplication().GetProfileAttr(""ChildLineItemMSISDN"");*/
	
	var OrderSubstatus;
	var OrderAccType;
	var OrderLOVSubstatus;
	var OrdernewSubstatus;
	var appObj;
	var oldAuthorityCode;
	var OrderHeaderId;
	var boOrder;
	var bcOrder;
	var sBillId;
	var boBilling;
	var bcBilling;
	var sVivaFlag;
	var sPartNum;
	var sErrorMsg;
	var CorpDealer;
	var sErrorMsg = """";
var sErrorCode = """";
	var sRootId;
    var sId; 
var sCardType = """",sCardCategory = """",sSTCSIMCalc = """",sCardCategoryCalc = """";// Mayank: Added for UNIFIED
		switch(FieldName)

    {   
         case ""Part Number"":
         
         appObj = TheApplication();
         this.ActivateField(""Billing Account Id"");
         sBillId = this.GetFieldValue(""Billing Account Id"");
         
         sPartNum = appObj. InvokeMethod(""LookupValue"",""STC_SIM_TYPE"",""STCPKGCLUB"");
                  
         boBilling =appObj.GetBusObject(""STC Billing Account"");
         bcBilling = boBilling.GetBusComp(""CUT Invoice Sub Accounts"");
         
         with(bcBilling)
         {
           SetViewMode(AllView);
           ActivateField(""STC Club Viva Flag"");
           ClearToQuery();
           SetSearchSpec(""Id"",sBillId);
           ExecuteQuery(ForwardOnly);
           if(FirstRecord())
           {
             sVivaFlag = GetFieldValue(""STC Club Viva Flag"");
           }
           if (sVivaFlag == ""Y"")
           {
              if (sPartNum != FieldValue)
              {
               // sErrorMsg = appObj.LookupMessage(""User Defined Errors"",""AM0015"") +""\n"";
              	appObj.RaiseErrorText(""Please select VIVA Club Package"");
              	return (CancelOperation);
              }
           }
          } // end of with       
          
         bcBilling = null;
         boBilling = null;    
         appObj = null;
        
       
         break;
         
         case ""STC MNP MSISDN"":
         if(FieldValue != """" || FieldValue != null)
         {
          if(!isNaN(FieldValue))
				{
					if(FieldValue.length != 11)
					{
						TheApplication().RaiseErrorText(""Please enter 11 digits for MNPMSISDN"");
					}
					var vMNPMSISDN = FieldValue.substring(3,0);
					if(vMNPMSISDN != '973')
						{
						TheApplication().RaiseErrorText(""MSISDN should start with '973'"");
						}
				}
				else
				{
				TheApplication().RaiseErrorText(""Please enter Numericals for MNPMSISDN"");
				}
         }
         break;
         
 		 case ""Service Id"":
 		  ActivateField(""Service Id"");
	      vOldMSISDN = this.GetFieldValue(""Service Id"");
	      appObj = TheApplication();
	  	  this.ActivateField(""Root Order Item Id""); 
	      sRootId = this.GetFieldValue(""Root Order Item Id"");
	      sId = this.GetFieldValue(""Id""); 
	      if(sRootId == sId)
 		   {
	 		  var PartNumber = this.GetFieldValue(""Part Number"");//Start: Anchal	 		  
	 		  var vMessage = CallMSISDNPackageCheck(FieldValue,PartNumber);
	 		  if(vMessage != null && vMessage != """")
	 		  TheApplication().RaiseErrorText(vMessage);//End: Anchal
	 	   }
	  	  OrderHeaderId = GetFieldValue(""Order Header Id"");
		  boOrder = appObj.GetBusObject(""Order Entry (Sales)"");
		  bcOrder = boOrder.GetBusComp(""Order Entry - Orders"");
		  with(bcOrder)
		  {
		  	SetViewMode(AllView);
		  	ActivateField(""STC Order Sub Status"");
  		    ClearToQuery();
			SetSearchSpec(""Id"",OrderHeaderId);
			ExecuteQuery(ForwardOnly);	

			if (FirstRecord())
			{
		        OrderSubstatus = GetFieldValue(""STC Order Sub Status"");
          	}
          
          	//OrderSubstatus = this.ParentBusComp().GetFieldValue(""STC Order Sub Status"");
          	OrderLOVSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Order Validated"");
          	OrdernewSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Raised"");
	        
		        if (vOldMSISDN != FieldValue)
		        {
	    	       if((OrderLOVSubstatus == OrderSubstatus) && (sRootId == sId))
	        	   {
	             	    
	            	    //this.ParentBusComp().SetFieldValue(""STC Order Sub Status"",OrdernewSubstatus);
                    	//this.ParentBusComp().WriteRecord();   
                    	
                    	SetFieldValue(""STC Order Sub Status"",OrdernewSubstatus);
                    	WriteRecord();
	               }     
    	        }       
	        }  
	        
	      	
	      	
	      	//PS 11/05/2010 for Viva Club Migration Validation 	      	
			var sRMSNumbo = appObj.GetBusObject(""RMS NM Number Enquiry"");
            var sRMSNumbc = sRMSNumbo.GetBusComp(""RMS NM Number Enquiry"");                                  
              
            with(sRMSNumbc)
            {
				ActivateField(""Number String"");
				ActivateField(""Record Blocked For"");
                SetViewMode(AllView);
                ClearToQuery();
                SetSearchSpec(""Number String"",FieldValue);
                ExecuteQuery(ForwardOnly); 
                 
                if(FirstRecord())
                {
                	var sBlockedFor = GetFieldValue(""Record Blocked For"");
                	//var vBlockedForBAN = this.GetFieldValue(""STC Migration Blocked For"");

	       			var vBillingAccount = this.GetFieldValue(""Billing Account Id"");
       				if (sBlockedFor != """" && sBlockedFor != null)
       				{
	               		if(sBlockedFor != vBillingAccount)
	               		{
                    		TheApplication().RaiseErrorText(""The Selected MSISDN is Reserved for Another Customer (as part of Migration). Please Select Another Number"");
                        	return (CancelOperation);
                    	}
       				}
                 
                 }
			  }	
	      	
	      	
	      	sRMSNumbc = null;
	      	sRMSNumbo = null;
	      	bcOrder = null;
	      	boOrder = null;
	      	appObj = null;
	      	
	       //Visa Club Migration Validation
	      
	        //vNewMSISDN = Val(FieldValue); 
	        
	        //Dt - 23.03.10 Commented the below code to move it to SetField Value
	     //  BlockRe_selection (vOldMSISDN,FieldValue);
         break;

         case ""STC ICCID"":
         //	ActivateField(""STC ICCID"");
        	vOldSIM = this.GetFieldValue(""STC ICCID"");
         	
          appObj = TheApplication();
          
          this.ActivateField(""Root Order Item Id""); 
			this.ActivateField(""STC SIM Calc"");// Mayank: Added for UNIFIED
			this.ActivateField(""Card Category Calc"");// Mayank: Added for UNIFIED

	      sRootId = this.GetFieldValue(""Root Order Item Id"");
	      sId = this.GetFieldValue(""Id"");
			sSTCSIMCalc = this.GetFieldValue(""STC SIM Calc"");// Mayank: Added for UNIFIED
			sCardCategoryCalc = this.GetFieldValue(""Card Category Calc"");// Mayank: Added for UNIFIED
         
	  	  OrderHeaderId = GetFieldValue(""Order Header Id"");
		  boOrder = appObj.GetBusObject(""Order Entry (Sales)"");
		  bcOrder = boOrder.GetBusComp(""Order Entry - Orders"");
		  
		  with(bcOrder)
		  {
		  	SetViewMode(AllView);
		  	ActivateField(""STC Order Sub Status"");
		  	ActivateField(""Order Account Type"");
  		    ClearToQuery();
			SetSearchSpec(""Id"",OrderHeaderId);
			ExecuteQuery(ForwardOnly);	

			if (FirstRecord())
			{
		        OrderSubstatus = GetFieldValue(""STC Order Sub Status"");
		        OrderAccType = GetFieldValue(""Order Account Type"");
          	}
          
          	//OrderSubstatus = this.ParentBusComp().GetFieldValue(""STC Order Sub Status"");
          	OrderLOVSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Order Validated"");
          	OrdernewSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Raised"");
	        
		        if (vOldSIM != FieldValue)
		        {
	    	       if((OrderLOVSubstatus == OrderSubstatus) && (sRootId == sId))
	        	   {
	             	    
	            	    //this.ParentBusComp().SetFieldValue(""STC Order Sub Status"",OrdernewSubstatus);
                    	//this.ParentBusComp().WriteRecord();   
                    	
                    	SetFieldValue(""STC Order Sub Status"",OrdernewSubstatus);
                    	WriteRecord();
	               }     
    	        }       
	        }  
	        //bcOrder = null;
	      	//boOrder = null;
	      	//appObj = null;
      


	      	//PS 10/07/2010 for PrePost Migration To Different Customer 	      	
	      	if (FieldValue != """")
		      	{
				var sRMSNumberbo = appObj.GetBusObject(""RMS NM Number Enquiry"");
	            var sRMSNumberbc = sRMSNumberbo.GetBusComp(""RMS NM Number Enquiry"");                                  
  
	            with(sRMSNumberbc)
	            {
					ActivateField(""Num Mstr Number String"");
					ActivateField(""Record Blocked For"");
					ActivateField(""Record Blocked For"");
					ActivateField(""STC SIM Card Type"");// Mayank: Added for UNIFIED
					ActivateField(""Card Category"");// Mayank: Added for UNIFIED
					ActivateField(""Allocated To"");
	                SetViewMode(AllView);
	                ClearToQuery();
	                SetSearchSpec(""Num Mstr Number String"",FieldValue);
	                ExecuteQuery(ForwardOnly); 
	                 
	                if(FirstRecord())
	                {
	                	var sBlockFor = GetFieldValue(""Record Blocked For"");
	                	CorpDealer = GetFieldValue(""Allocated To"");
	                	
	                	var CorpDealerLOV = appObj.InvokeMethod(""LookupValue"",""STC_CORP_DEALER"",CorpDealer);
	                	//var vBlockedForBAN = this.GetFieldValue(""STC Migration Blocked For"");
						// Mayank: Added for UNIFIED ---------------START--------------------------------
						sCardType = GetFieldValue(""STC SIM Card Type"");
						sCardCategory = GetFieldValue(""Card Category"");
						if(sCardCategory == ""Postpaid"")
						{
							sCardCategory = ""POSTPAID"";
						}
						if(sCardCategory == ""Prepaid"")
						{
							sCardCategory = ""PREPAID"";
						}
						if(sCardCategory != ""UNIFIED"" && sCardType != ""UNIFIED"")
						{
							if(sCardCategoryCalc != sCardCategory)
							{
								if((sCardCategoryCalc == null || sCardCategoryCalc == """") && sSTCSIMCalc == ""Data"")
								{
									var a = 1;
								}
								else
								{
									TheApplication().RaiseErrorText(""Selected SIM Card Category doesn't match with the Package."");
									return(CancelOperation);	
								}
							}
							if(sSTCSIMCalc != sCardType)
							{
								TheApplication().RaiseErrorText(""Selected SIM Card Type doesn't match with the Package."");
								return(CancelOperation);
							}
						}// Mayank: Added for UNIFIED ---------------STOP--------------------------------
	
		       			if(OrderAccType == ""Corporate"")
		       			{
		       				if (sBlockFor == """" || sBlockFor == null)
		       				{
		       				var CorpDealerStr = CorpDealerLOV.substring(0,3);
		       				if(CorpDealerStr != ""CSR"")
		       				{
		       					TheApplication().RaiseErrorText(""Selected SIM is not under corporate pool"");
		       					return(CancelOperation);
		       				}
		       			}
		       			 }// if(OrderAccType == ""Corporate"")
		       			var IndDealerLOV = appObj.InvokeMethod(""LookupValue"",""STC_IND_DEALER"",CorpDealer);
	                	//var vBlockedForBAN = this.GetFieldValue(""STC Migration Blocked For"");
	
		       			if(OrderAccType != ""Corporate"")
		       			{
		       				if (sBlockFor == """" || sBlockFor == null)
		       				{
		       				var IndDealerStr = IndDealerLOV.substring(0,3);
		       				if(IndDealerStr != ""CSR"")
		       				{
		       					TheApplication().RaiseErrorText(""Selected SIM is under corporate pool"");
		       					return(CancelOperation);
		       				}
		       				} 
		       			}// if(OrderAccType != ""Corporate"")
		       			
		       			
		       			
		       			var vBillingAccnt = this.GetFieldValue(""Billing Account Id"");
	       				if (sBlockFor != """" && sBlockFor != null)
	       				{
		               		if(sBlockFor != vBillingAccnt)
		               		{
	                    		TheApplication().RaiseErrorText(""The Selected SIM is Reserved for Another Customer (as part of Migration). Please Select Another SIM"");
	                        	return (CancelOperation);
	                    	}
	       				}
	                
	                 }
				  }	
		      	
		      	
		      	sRMSNumberbc = null;
		      	sRMSNumberbo = null;
	      	}
	      	bcOrder = null;
	      	boOrder = null;
	      	appObj = null;

         	
         //Dt - 23.03.10 Commented the below code to move it to SetField Value	
         //	BlockRe_selection (vOldSIM,FieldValue);
         	
         break;
         
         case ""STC Authorization Code"":
         
           oldAuthorityCode = this.GetFieldValue(""STC Authorization Code"");
           appObj = TheApplication();
          
  	  	  this.ActivateField(""Root Order Item Id""); 
	      sRootId = this.GetFieldValue(""Root Order Item Id"");
	      sId = this.GetFieldValue(""Id"");
           
	  	  OrderHeaderId = GetFieldValue(""Order Header Id"");
		  boOrder = appObj.GetBusObject(""Order Entry (Sales)"");
		  bcOrder = boOrder.GetBusComp(""Order Entry - Orders"");
		  
		  with(bcOrder)
		  {
		  	SetViewMode(AllView);
		  	ActivateField(""STC Order Sub Status"");
  		    ClearToQuery();
			SetSearchSpec(""Id"",OrderHeaderId);
			ExecuteQuery(ForwardOnly);	

			if (FirstRecord())
			{
		        OrderSubstatus = GetFieldValue(""STC Order Sub Status"");
          	}
          
          	//OrderSubstatus = this.ParentBusComp().GetFieldValue(""STC Order Sub Status"");
          	OrderLOVSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Order Validated"");
          	OrdernewSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Raised"");
	        
		        if (oldAuthorityCode != FieldValue)
		        {
	    	       if((OrderLOVSubstatus == OrderSubstatus) && (sRootId == sId))
	        	   {
	             	    
	            	    //this.ParentBusComp().SetFieldValue(""STC Order Sub Status"",OrdernewSubstatus);
                    	//this.ParentBusComp().WriteRecord();   
                    	
                    	SetFieldValue(""STC Order Sub Status"",OrdernewSubstatus);
                    	WriteRecord();
	               }     
    	        }       
	        }  
	        bcOrder = null;
	      	boOrder = null;
	      	appObj = null;

          break;
          
         default : 
         break;
	}

	return (ContinueOperation);
	}
	catch(e)
	{
	throw(e);
	}
	finally
	{
	} 
}
function BusComp_SetFieldValue (FieldName)
{

 try
 {
   var sSIMbc;  
   var sSIMno;
   var sAssocId;
   var sType;
   var sSpec;
   var appObj;
   var sRMSbo;
   var sRMSbc;
   var sMSISDN;
   var newMSISDN;
   var sSIMId;
   var sSIMType;
   var sStatus;
   var sAssNumber;
   var sAssId;
   var sRMSBO;
   var sRMSBC;
   var sConfig;
   var sCngName;
   var sSysBO;
   var sSysBC;
   var sArrCng = new Array;
   var i=0,j=0,SimFlag=0;
   var sParentBC;
   var sMigType;
   var sOrderId;
   var sMigration;
   var sMigration2,sMigration1,sMigration3,sMigration4;
   var sysname,sRetainFlag=0;
   var isSimRetain,sActionCode;
   var strIsBS,sAllocatd;
   var sRMSNumbc,sRMSNumbo,bcOrder,boOrder;
   var sOrderType,sOrderTypeLOV;
   
   switch(FieldName)
   {
      case ""STC ICCID"":
               
            this.SetFieldValue(""STC MSISDN Paired"",""N"");
            WriteRecord();
            sSIMno = this.GetFieldValue(""STC ICCID"");
            appObj = TheApplication();
            sRMSbo = appObj.GetBusObject(""RMS NM Number Enquiry"");
            sRMSbc = sRMSbo.GetBusComp(""RMS NM Number Enquiry""); 
            sParentBC = this.ParentBusComp();
            sOrderId = this.GetFieldValue(""Order Header Id"");
            sActionCode = this.GetFieldValue(""Action Code"");
            isSimRetain = TheApplication().GetProfileAttr(""SimRetain"");
            sMigType = TheApplication().GetProfileAttr(""MigType"");

            //Send To POS Order - After SIM Number Change
			if (this.GetFieldValue(""STC POS Flag"") == ""Y"" && this.GetFieldValue(""STC ICCID"") != """")
			{
				var bsService,bsin,bsout;
				bsService = appObj.GetService(""Workflow Process Manager"");
				bsin = appObj.NewPropertySet();
				bsout = appObj.NewPropertySet();
				bsin.SetProperty(""ProcessName"", ""STC Send Order Details to POS"");
				bsin.SetProperty(""Object Id"",sOrderId);
				bsService.InvokeMethod(""RunProcess"", bsin, bsout);
			}
			//End of Send To POS   

            with(sParentBC)
            {
            	ActivateField(""STC Migration Type"");
            	ActivateField(""SIM Retension Flag Calc Field"");
            	SetViewMode(AllView);
            	ClearToQuery();
            	SetSearchSpec(""Id"",sOrderId);
            	ExecuteQuery(ForwardOnly);
            	
            	if(FirstRecord())
            	{
            	//	sMigType = GetFieldValue(""STC Migration Type"");
            	//	isSimRetain = GetFieldValue(""SIM Retension Flag Calc Field"");
            	//	isSimRetain = ""N""; //remove this
            	}
            }
                                          
              
             with(sRMSbc)
             {
                 ActivateField(""Assoc Start Id"");
                 ActivateField(""Num Mstr Number String"");
                 SetViewMode(AllView);
                 ClearToQuery();
                 SetSearchSpec(""Num Mstr Number String"",sSIMno);
                 ExecuteQuery(ForwardOnly);
                 
                  if(FirstRecord())
                  {
                    sAssocId = GetFieldValue(""Assoc Start Id"");
                    ActivateField(""Assoc Start Id"");
                    ActivateField(""Num Mstr Number String"");
                    sType = TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"", ""MSISDN"");
                    sSpec = ""[Assoc Start Id] = '"" + sAssocId + ""' AND [Number Type] ='"" + sType +""'"";
                    SetViewMode(AllView);
                    ClearToQuery();
                    SetSearchExpr(sSpec);
                    ExecuteQuery(ForwardOnly);
                    
                    if(FirstRecord())
                    {
                      sMSISDN = GetFieldValue(""Num Mstr Number String"");
                      this.ActivateField(""Service Id"");
                      this.SetFieldValue(""Service Id"",sMSISDN);
                      BlockRe_selection (vOldMSISDN,sMSISDN);
                      this.SetFieldValue(""STC MSISDN Paired"",""Y"");
        
                    }
                    else
                    {
                      this.SetFieldValue(""STC MSISDN Paired"",""N"");
                      this.ActivateField(""Service Id"");
                      this.SetFieldValue(""Service Id"","""");   
                    }  
                  }   
 /*                 
 // Added by devender
                 ActivateField(""Parent Assoc Id"");
                 ActivateField(""Num Mstr Number String"");
                 ActivateField(""Type"");
                 ActivateField(""Status"");
                 SetViewMode(AllView);
                 ClearToQuery();
                 SetSearchSpec(""Num Mstr Number String"",sSIMno);
                 ExecuteQuery(ForwardOnly);   
                 
                 if(FirstRecord())
                 {
                 	sSIMId = GetFieldValue(""Id"");
                 	sSIMType = GetFieldValue(""Type"");
                 	sStatus = GetFieldValue(""Status"");
                 	sAssId = GetFieldValue(""Assoc Start Id"");
                 	
                 }
                    
          	} 
          	
          //	sMigType = ""Corp Post To Inv Pre"";  //remove this
          	
          	sMigration1 = TheApplication().InvokeMethod(""LookupValue"",""STC_MIGRATION_TYPE"",""Inv Post To Corp Post"");
          	sMigration2 = TheApplication().InvokeMethod(""LookupValue"",""STC_MIGRATION_TYPE"",""Inv Pre To Corp Post"");
          	sMigration3 = TheApplication().InvokeMethod(""LookupValue"",""STC_MIGRATION_TYPE"",""Corp Post To Inv Pre"");
          	sMigration4 = TheApplication().InvokeMethod(""LookupValue"",""STC_MIGRATION_TYPE"",""Corp Post To Inv Post"");
          
       		if((sMigType == sMigration3 || sMigType == sMigration4) && isSimRetain == ""Y"")
       		{
       			sRetainFlag = 1;
       		}
       
       		if(sMigType != sMigration1 && sMigType != sMigration2 && sMigType != sMigration3 && sMigType != sMigration4)
       		{
       			sRetainFlag = 2;
       		}
       		
       	  	if(sRetainFlag == ""0"" && sActionCode == ""Add"")
       	  	{
          			var sBC = sRMSbo.GetBusComp(""RMS NM Association Number Type Display"");
          	
          			with(sBC)
          			{
          				ActivateField(""Assoc Start Id"");
          				ActivateField(""Associated Number"");
          				ActivateField(""Associated Type"");
          				SetViewMode(AllView);
                		ClearToQuery();
                		SetSearchSpec(""Assoc Start Id"",sAssId);
                		ExecuteQuery(ForwardOnly);
                
                		if(FirstRecord())
                		{
                			sAssNumber = GetFieldValue(""Associated Number"");
                			var sAssType = GetFieldValue(""Associated Type"");
                		}
           			}
          	
          	
          			sRMSBO = TheApplication().GetBusObject(""RMS SIM Number"");
          			sRMSBC = sRMSBO.GetBusComp(""RMS SIM Number"");
          
   			
   					with(sRMSBC)
   					{
   						ActivateField(""Concatenated Number"");
   						ActivateField(""Sim Card Config Name"");
   						ActivateField(""Status"");
   						SetViewMode(AllView);
   						ClearToQuery();
   						SetSearchSpec(""Concatenated Number"", sAssNumber);
   						ExecuteQuery(ForwardOnly);
   				
   						if(FirstRecord())
   						{
   							sConfig = GetFieldValue(""Sim Card Config Name"");
   							var sSIMStatus = GetFieldValue(""Status"");
   						}
   				
   					}
   			
   					if(sMigType == sMigration1 || sMigType == sMigration2)
   					{
   						sysname = ""SIM_INV_CORP_TYPE"";
   					}
   					else
   					{
   						sysname = ""SIM_CORP_INV_TYPE"";
   					}
   			
   					sSysBO = TheApplication().GetBusObject(""System Preferences"");
   					sSysBC = sSysBO.GetBusComp(""System Preferences"");
   			
   					with(sSysBC)
   					{
   						ActivateField(""Name"");
   						ActivateField(""Value"");
   						SetViewMode(AllView);
   						ClearToQuery();
   						SetSearchSpec(""Name"",sysname);
   						ExecuteQuery(ForwardOnly);
   				
   						if(FirstRecord())
   						{
   							sCngName = GetFieldValue(""Value"");	
   						}
   				
   							sArrCng = sCngName.split("";"");
   				
   						for(i=0;i<=sArrCng.length;i++)
   						{
   							if(sArrCng[i]== sConfig)
   							{
   								SimFlag = 0;
   								break;
   							}
   							else
   							{
   								if(sMigType == sMigration1 || sMigType == sMigration2)
   								{
   									SimFlag = 1;
   								}
   								else
   								{
   									SimFlag = 2;	
   								}
   						
   							}
   						}
   			   
   					}
   				
   				/*	if(SimFlag == ""1"")  //changed to 1
   					{
   						this.SetFieldValue(""STC ICCID"", """");
   						TheApplication().RaiseErrorText(""Please select the Corporate SIM"");
   						return(CancelOperation);
   					}
   					else if(SimFlag == ""2"")
   					{
   						this.SetFieldValue(""STC ICCID"", """");
   						TheApplication().RaiseErrorText(""Please select the Individual SIM"");
   						return(CancelOperation);
   					}
   			
   		   			TheApplication().SetProfileAttr(""SimRetain"","""");
  					TheApplication().SetProfileAttr(""MigType"","""");	*/		
   			}  // end if 
   					
          	//end dev	 
               WriteRecord(); 
               
      
               
               
               	BlockRe_selection (vOldSIM,sSIMno);
                break;
                
         case ""Service Id"":
    		this.ActivateField(""Service Id"");
    		this.ActivateField(""Order Header Id"");
    		sOrderId = this.GetFieldValue(""Order Header Id"");
    		newMSISDN = this.GetFieldValue(""Service Id"");  
    	//	sOrderType = this.GetFieldValue(""STC Order Sub Type"");          		     	
			sRMSNumbo = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
			sRMSNumbc = sRMSNumbo.GetBusComp(""RMS NM Number Enquiry""); 
			sOrderTypeLOV = TheApplication().InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Provide"");
		
			boOrder = TheApplication().GetBusObject(""Order Entry (Sales)"");			
			bcOrder = boOrder.GetBusComp(""Order Entry - Orders"");	
			with (bcOrder)
				{
				
					SetViewMode(AllView);
					ActivateField(""STC Order SubType"");
					ClearToQuery();
					SetSearchSpec(""Id"",sOrderId);
					ExecuteQuery(ForwardOnly);	
					if(FirstRecord())		
					sOrderType = GetFieldValue(""STC Order SubType"");
					if(sOrderType == sOrderTypeLOV)
                	{	                                           
            			with(sRMSNumbc)
            			{
							ActivateField(""Number String"");
							ActivateField(""Allocated To"");
			                SetViewMode(AllView);
			                ClearToQuery();
			                SetSearchSpec(""Number String"",newMSISDN);
			                ExecuteQuery(ForwardOnly);    
                    
				                if(FirstRecord())
				                {	
									sAllocatd = GetFieldValue(""Allocated To""); 
					 				strIsBS = TheApplication().GetProfileAttr(""STC GroupCode Id"");
									var loginname = TheApplication().GetProfileAttr(""Login Name""); // [Neha kasat][18092013][For SIP ISDN]
									
					                	if (strIsBS != sAllocatd && loginname!=""SADMIN"") // [Neha kasat][18092013][For SIP ISDN]
					                	{
											TheApplication().RaiseErrorText(""You do not have access to select this MSISDN"");
						      				return(CancelOperation);
						       			}//end of if
			
										}//end of if
										}//end of if
									}//end of with
								}
    		BlockRe_selection (vOldMSISDN,newMSISDN);
       break;   		  
       		       
                
       default :
                break;
    }
    return (ContinueOperation); 
  }//end of try
  catch(e)
  {
    throw(e);
  }
  finally
  {
  	
  }
                           
          
   
}
function BusComp_SetFieldValue (FieldName)
{

 try
 {
   var sSIMbc;  
   var sSIMno;
   var sAssocId;
   var sType;
   var sSpec;
   var appObj;
   var sRMSbo;
   var sRMSbc;
   var sMSISDN;
   var newMSISDN;
   var sSIMId;
   var sSIMType;
   var sStatus;
   var sAssNumber;
   var sAssId;
   var sRMSBO;
   var sRMSBC;
   var sConfig;
   var sCngName;
   var sSysBO;
   var sSysBC;
   var sArrCng = new Array;
   var i=0,j=0,SimFlag=0;
   var sParentBC;
   var sMigType;
   var sOrderId;
   var sMigration;
   var sMigration2,sMigration1,sMigration3,sMigration4;
   var sysname,sRetainFlag=0;
   var isSimRetain,sActionCode;
   var strIsBS,sAllocatd;
   var sRMSNumbc,sRMSNumbo,bcOrder,boOrder;
   var sOrderType,sOrderTypeLOV;
   var sFlag ="""";
   
   switch(FieldName)
   {
      case ""STC ICCID"":
               
            this.SetFieldValue(""STC MSISDN Paired"",""N"");
            WriteRecord();
            sSIMno = this.GetFieldValue(""STC ICCID"");
            appObj = TheApplication();
            sRMSbo = appObj.GetBusObject(""RMS NM Number Enquiry"");
            sRMSbc = sRMSbo.GetBusComp(""RMS NM Number Enquiry""); 
            sParentBC = this.ParentBusComp();
            sOrderId = this.GetFieldValue(""Order Header Id"");
            sActionCode = this.GetFieldValue(""Action Code"");
            isSimRetain = TheApplication().GetProfileAttr(""SimRetain"");
            sMigType = TheApplication().GetProfileAttr(""MigType"");

            //Send To POS Order - After SIM Number Change
			if (this.GetFieldValue(""STC POS Flag"") == ""Y"" && this.GetFieldValue(""STC ICCID"") != """")
			{
				var bsService,bsin,bsout;
				bsService = appObj.GetService(""Workflow Process Manager"");
				bsin = appObj.NewPropertySet();
				bsout = appObj.NewPropertySet();
				bsin.SetProperty(""ProcessName"", ""STC Send Order Details to POS"");
				bsin.SetProperty(""Object Id"",sOrderId);
				bsService.InvokeMethod(""RunProcess"", bsin, bsout);
			}
			//End of Send To POS   

            with(sParentBC)
            {
            	ActivateField(""STC Migration Type"");
            	ActivateField(""SIM Retension Flag Calc Field"");
            	SetViewMode(AllView);
            	ClearToQuery();
            	SetSearchSpec(""Id"",sOrderId);
            	ExecuteQuery(ForwardOnly);
            	
            	if(FirstRecord())
            	{
            	//	sMigType = GetFieldValue(""STC Migration Type"");
            	//	isSimRetain = GetFieldValue(""SIM Retension Flag Calc Field"");
            	//	isSimRetain = ""N""; //remove this
            	}
            }
                                          
              
             with(sRMSbc)
             {
                 ActivateField(""Assoc Start Id"");
                 ActivateField(""Num Mstr Number String"");
                 SetViewMode(AllView);
                 ClearToQuery();
                 SetSearchSpec(""Num Mstr Number String"",sSIMno);
                 ExecuteQuery(ForwardOnly);
                 
                  if(FirstRecord())
                  {
                    sAssocId = GetFieldValue(""Assoc Start Id"");
                    ActivateField(""Assoc Start Id"");
                    ActivateField(""Num Mstr Number String"");
                    sType = TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"", ""MSISDN"");
					sFlag = TheApplication().InvokeMethod(""LookupValue"",""STC_ADMIN"", ""STC_CHILD_SWITCH_MSISDN"");
                    sSpec = ""[Assoc Start Id] = '"" + sAssocId + ""' AND [Number Type] ='"" + sType +""'"";
                    SetViewMode(AllView);
                    ClearToQuery();
                    SetSearchExpr(sSpec);
                    ExecuteQuery(ForwardOnly);
                    
                    if(FirstRecord())
                    {
                      sMSISDN = GetFieldValue(""Num Mstr Number String"");
                      this.ActivateField(""Service Id"");
                      this.SetFieldValue(""Service Id"",sMSISDN);
                      BlockRe_selection (vOldMSISDN,sMSISDN);
                      this.SetFieldValue(""STC MSISDN Paired"",""Y"");
        
                    }
                    else
                    {
					if(sFlag == ""ONMSISDN"")
					{
                      this.SetFieldValue(""STC MSISDN Paired"",""N"");
                      this.ActivateField(""Service Id"");
                      this.SetFieldValue(""Service Id"","""");  
					 } 
                    }  
                  }   
 /*                 
 // Added by devender
                 ActivateField(""Parent Assoc Id"");
                 ActivateField(""Num Mstr Number String"");
                 ActivateField(""Type"");
                 ActivateField(""Status"");
                 SetViewMode(AllView);
                 ClearToQuery();
                 SetSearchSpec(""Num Mstr Number String"",sSIMno);
                 ExecuteQuery(ForwardOnly);   
                 
                 if(FirstRecord())
                 {
                 	sSIMId = GetFieldValue(""Id"");
                 	sSIMType = GetFieldValue(""Type"");
                 	sStatus = GetFieldValue(""Status"");
                 	sAssId = GetFieldValue(""Assoc Start Id"");
                 	
                 }
                    
          	} 
          	
          //	sMigType = ""Corp Post To Inv Pre"";  //remove this
          	
          	sMigration1 = TheApplication().InvokeMethod(""LookupValue"",""STC_MIGRATION_TYPE"",""Inv Post To Corp Post"");
          	sMigration2 = TheApplication().InvokeMethod(""LookupValue"",""STC_MIGRATION_TYPE"",""Inv Pre To Corp Post"");
          	sMigration3 = TheApplication().InvokeMethod(""LookupValue"",""STC_MIGRATION_TYPE"",""Corp Post To Inv Pre"");
          	sMigration4 = TheApplication().InvokeMethod(""LookupValue"",""STC_MIGRATION_TYPE"",""Corp Post To Inv Post"");
          
       		if((sMigType == sMigration3 || sMigType == sMigration4) && isSimRetain == ""Y"")
       		{
       			sRetainFlag = 1;
       		}
       
       		if(sMigType != sMigration1 && sMigType != sMigration2 && sMigType != sMigration3 && sMigType != sMigration4)
       		{
       			sRetainFlag = 2;
       		}
       		
       	  	if(sRetainFlag == ""0"" && sActionCode == ""Add"")
       	  	{
          			var sBC = sRMSbo.GetBusComp(""RMS NM Association Number Type Display"");
          	
          			with(sBC)
          			{
          				ActivateField(""Assoc Start Id"");
          				ActivateField(""Associated Number"");
          				ActivateField(""Associated Type"");
          				SetViewMode(AllView);
                		ClearToQuery();
                		SetSearchSpec(""Assoc Start Id"",sAssId);
                		ExecuteQuery(ForwardOnly);
                
                		if(FirstRecord())
                		{
                			sAssNumber = GetFieldValue(""Associated Number"");
                			var sAssType = GetFieldValue(""Associated Type"");
                		}
           			}
          	
          	
          			sRMSBO = TheApplication().GetBusObject(""RMS SIM Number"");
          			sRMSBC = sRMSBO.GetBusComp(""RMS SIM Number"");
          
   			
   					with(sRMSBC)
   					{
   						ActivateField(""Concatenated Number"");
   						ActivateField(""Sim Card Config Name"");
   						ActivateField(""Status"");
   						SetViewMode(AllView);
   						ClearToQuery();
   						SetSearchSpec(""Concatenated Number"", sAssNumber);
   						ExecuteQuery(ForwardOnly);
   				
   						if(FirstRecord())
   						{
   							sConfig = GetFieldValue(""Sim Card Config Name"");
   							var sSIMStatus = GetFieldValue(""Status"");
   						}
   				
   					}
   			
   					if(sMigType == sMigration1 || sMigType == sMigration2)
   					{
   						sysname = ""SIM_INV_CORP_TYPE"";
   					}
   					else
   					{
   						sysname = ""SIM_CORP_INV_TYPE"";
   					}
   			
   					sSysBO = TheApplication().GetBusObject(""System Preferences"");
   					sSysBC = sSysBO.GetBusComp(""System Preferences"");
   			
   					with(sSysBC)
   					{
   						ActivateField(""Name"");
   						ActivateField(""Value"");
   						SetViewMode(AllView);
   						ClearToQuery();
   						SetSearchSpec(""Name"",sysname);
   						ExecuteQuery(ForwardOnly);
   				
   						if(FirstRecord())
   						{
   							sCngName = GetFieldValue(""Value"");	
   						}
   				
   							sArrCng = sCngName.split("";"");
   				
   						for(i=0;i<=sArrCng.length;i++)
   						{
   							if(sArrCng[i]== sConfig)
   							{
   								SimFlag = 0;
   								break;
   							}
   							else
   							{
   								if(sMigType == sMigration1 || sMigType == sMigration2)
   								{
   									SimFlag = 1;
   								}
   								else
   								{
   									SimFlag = 2;	
   								}
   						
   							}
   						}
   			   
   					}
   				
   				/*	if(SimFlag == ""1"")  //changed to 1
   					{
   						this.SetFieldValue(""STC ICCID"", """");
   						TheApplication().RaiseErrorText(""Please select the Corporate SIM"");
   						return(CancelOperation);
   					}
   					else if(SimFlag == ""2"")
   					{
   						this.SetFieldValue(""STC ICCID"", """");
   						TheApplication().RaiseErrorText(""Please select the Individual SIM"");
   						return(CancelOperation);
   					}
   			
   		   			TheApplication().SetProfileAttr(""SimRetain"","""");
  					TheApplication().SetProfileAttr(""MigType"","""");	*/		
   			}  // end if 
   					
          	//end dev	 
               WriteRecord(); 
               
      
               
               
               	BlockRe_selection (vOldSIM,sSIMno);
                break;
                
         case ""Service Id"":
    		this.ActivateField(""Service Id"");
    		this.ActivateField(""Order Header Id"");
    		sOrderId = this.GetFieldValue(""Order Header Id"");
    		newMSISDN = this.GetFieldValue(""Service Id"");  
    	//	sOrderType = this.GetFieldValue(""STC Order Sub Type"");          		     	
			sRMSNumbo = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
			sRMSNumbc = sRMSNumbo.GetBusComp(""RMS NM Number Enquiry""); 
			sOrderTypeLOV = TheApplication().InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Provide"");
		
			boOrder = TheApplication().GetBusObject(""Order Entry (Sales)"");			
			bcOrder = boOrder.GetBusComp(""Order Entry - Orders"");	
			with (bcOrder)
				{
				
					SetViewMode(AllView);
					ActivateField(""STC Order SubType"");
					ClearToQuery();
					SetSearchSpec(""Id"",sOrderId);
					ExecuteQuery(ForwardOnly);	
					if(FirstRecord())		
					sOrderType = GetFieldValue(""STC Order SubType"");
					if(sOrderType == sOrderTypeLOV)
                	{	                                           
            			with(sRMSNumbc)
            			{
							ActivateField(""Number String"");
							ActivateField(""Allocated To"");
			                SetViewMode(AllView);
			                ClearToQuery();
			                SetSearchSpec(""Number String"",newMSISDN);
			                ExecuteQuery(ForwardOnly);    
                    
				                if(FirstRecord())
				                {	
									sAllocatd = GetFieldValue(""Allocated To""); 
					 				strIsBS = TheApplication().GetProfileAttr(""STC GroupCode Id"");
									var loginname = TheApplication().GetProfileAttr(""Login Name""); // [Neha kasat][18092013][For SIP ISDN]
									
					                	if (strIsBS != sAllocatd && loginname!=""SADMIN"") // [Neha kasat][18092013][For SIP ISDN]
					                	{
											TheApplication().RaiseErrorText(""You do not have access to select this MSISDN"");
						      				return(CancelOperation);
						       			}//end of if
			
										}//end of if
										}//end of if
									}//end of with
								}
    		BlockRe_selection (vOldMSISDN,newMSISDN);
       break;   		  
       		       
                
       default :
                break;
    }
    return (ContinueOperation); 
  }//end of try
  catch(e)
  {
    throw(e);
  }
  finally
  {
  	
  }
                           
          
   
}
function CallMSISDNPackageCheck(ServiceId,PartNumber)
{
	try
	{
		var vAppObj: Application = TheApplication();
		var sBSService: Service = vAppObj.GetService(""Workflow Process Manager"");
		var vInPS: PropertySet = vAppObj.NewPropertySet();
		var vOutPS: PropertySet = vAppObj.NewPropertySet();
		vInPS.SetProperty(""ProcessName"", ""STC MSISDN Package Validation Workflow"");
		vInPS.SetProperty(""STC MSISDN"",ServiceId);
		vInPS.SetProperty(""STC Part Code"",PartNumber);
		sBSService.InvokeMethod(""RunProcess"", vInPS, vOutPS);
		var vMsg = vOutPS.GetProperty(""Error Message"");
		return vMsg;
	}
	finally
	{
		vAppObj = null;
		vInPS = null;
		vOutPS = null;
		sBSService = null;
	}
}
function BusComp_SetFieldValue (FieldName)
{
//Mayank: Added for TDD/FDD
	try
	{
		if(FieldName == ""STC Parent Plan Name"")
		{
			this.WriteRecord();		
		}
		if (FieldName == ""STC VOBB MSISDN Link"")
		{
			var VOBBMSISDN = this.GetFieldValue(""STC VOBB MSISDN Link"");
			if(VOBBMSISDN != null && VOBBMSISDN != """")
			{
				var PickBC = this.GetPicklistBusComp(""STC VOBB MSISDN Link"");
				with(PickBC)
				{
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchSpec(""Serial Number"", VOBBMSISDN);
					ExecuteQuery();
					if(FirstRecord())
					{
						Pick();
					}
				}
				this.WriteRecord();
			}
			else
			{
				this.ActivateField(""STC VOBB Plan Name"");
				this.SetFieldValue(""STC VOBB Plan Name"", """");
				this.WriteRecord();
			}
		}
	}
	catch(e)
	{
		throw(e)
	}
	finally
	{
	}
}
function BusComp_ChangeRecord ()
//[MANUJ] : [FPVIPABVerification]
{
if(TheApplication().ActiveViewName() == ""STC ISL SIMREG VIP Reregistration Audit Subscription View"")
{
var CustomerId = this.GetFieldValue(""CAN Row Id"");
TheApplication().SetProfileAttr(""CustomerId"", CustomerId);
var AuditId = this.GetFieldValue(""Id"");
TheApplication().SetProfileAttr(""AuditId"", AuditId);
}
}
function BusComp_SetFieldValue (FieldName)
{
if(TheApplication().ActiveViewName() == ""STC ISL SIMREG VIP Reregistration Audit Subscription View"" && FieldName == ""CAN Row Id"")
{
var CustomerId = this.GetFieldValue(""CAN Row Id"");
TheApplication().SetProfileAttr(""CustomerId"", CustomerId);
var AuditId = this.GetFieldValue(""Id"");
TheApplication().SetProfileAttr(""AuditId"", AuditId);
}
}
function BusComp_InvokeMethod (MethodName)
{

}
function BusComp_PreInvokeMethod (MethodName)
{
	
	if(MethodName == ""FetchCustomer"")
	{
		var View = TheApplication().ActiveViewName();
		if(View != ""STC New Cloud PBX Customer Search View"")
		{

	//[MANUJ] : [Search for Accunt with the Input]
			var AccountBO = TheApplication().GetBusObject(""Account"");
			var Account = AccountBO.GetBusComp(""Account""); 
			var NewCRBC = AccountBO.GetBusComp(""STC Cloud PBX New CR""); 	
			var psInputs = TheApplication().NewPropertySet();
			var psOutputs = TheApplication().NewPropertySet();
			var svcbsService;
			var ID = """";
			var IDType = """";
			var AccountId,NewCusId;
			ID = this.GetFieldValue(""CPR"");
			IDType = this.GetFieldValue(""IDType"");
			//CR Check
			var vBusSvc = TheApplication().GetService(""STC SMECR Validation"");
			var vInpPS = TheApplication().NewPropertySet();
			var vOutPS = TheApplication().NewPropertySet();
			with (vInpPS)
			{
			vInpPS.SetProperty(""IDType"", IDType);
			vInpPS.SetProperty(""IDNumber"", ID);
			}
			vBusSvc.InvokeMethod(""ValidateCustomer"", vInpPS, vOutPS);
			
			var sErrorMsg = vOutPS.GetProperty(""Error Message"");
			if (sErrorMsg != """")
			{	
			TheApplication().RaiseErrorText(sErrorMsg);		
			}

			//CR Check
			with(Account) 
			{  
				ActivateField(""Tax ID Number""); 
				ActivateField(""Account Type Code"");
				ActivateField(""Survey Type"");
				ClearToQuery(); 
				SetViewMode(AllView); 
				SetSearchSpec(""Tax ID Number"",ID); 
				SetSearchSpec(""Account Type Code"",""Customer"");
				SetSearchSpec(""Survey Type"",IDType);
				ExecuteQuery(); 
				var IsAccRec= FirstRecord();
				if(IsAccRec) //Existing Customer
				{
				AccountId = GetFieldValue(""Id""); 
				svcbsService = TheApplication().GetService(""Shopping Service"");
				psInputs.SetProperty(""View"", ""STC Cloud PBX Number Reservation View"");
				psInputs.SetProperty(""Business Component"",""Account"");
				psInputs.SetProperty(""Row Id"",AccountId);
				svcbsService.InvokeMethod(""GotoView"", psInputs, psOutputs);
				}
				else//New Customer
				{
				//Query in STC Cloud PBX New CR and if no record, Create New CR
				with(NewCRBC)
				{
				ActivateField(""CR#""); 
				ClearToQuery(); 
				SetViewMode(AllView); 
				SetSearchSpec(""CR#"",ID); 
				ExecuteQuery(); 
				var IsIDFound= FirstRecord();	
				if(!IsIDFound)
			
				{
				NewRecord(NewAfter);
				SetFieldValue(""CR#"",ID);
				WriteRecord();
					
				}
				NewCusId = GetFieldValue(""Id"");
				}
				
				//Create New CR and NewCusId
			
				svcbsService = TheApplication().GetService(""Shopping Service"");
				psInputs.SetProperty(""View"", ""STC Cloud PBX NewCR Reservation View"");
				psInputs.SetProperty(""Business Component"",""STC Cloud PBX New CR"");
				psInputs.SetProperty(""Row Id"",NewCusId);
				svcbsService.InvokeMethod(""GotoView"", psInputs, psOutputs);

				}
			}
		}
		else 
		{
			var sApp = TheApplication();
			var AccountBO = sApp.GetBusObject(""Account"");
			var Account = AccountBO.GetBusComp(""Account""); 
			var NewCRBC = AccountBO.GetBusComp(""STC Cloud PBX New CR""); 	
			var psInputs = sApp.NewPropertySet();
			var psOutputs = sApp.NewPropertySet();
			var svcbsService;
			var ID = """";
			var IDType = """";
			var AccountId,NewCusId;
			ID = this.GetFieldValue(""CPR"");
			IDType = this.GetFieldValue(""IDType"");
			//CR Check
	
			with(Account) 
			{  
				ActivateField(""Tax ID Number""); 
				ActivateField(""Account Type Code"");
				ActivateField(""Survey Type"");
				ClearToQuery(); 
				SetViewMode(AllView); 
				SetSearchSpec(""Tax ID Number"",ID); 
				SetSearchSpec(""Account Type Code"",""Customer"");
				SetSearchSpec(""Survey Type"",IDType);
				ExecuteQuery(); 
				var IsAccRec= FirstRecord();
			
				if(IsAccRec) //Existing Customer
				{
				AccountId = GetFieldValue(""Id""); 
				//	TheApplication().RaiseErrorText(IsAccRec+""::""+AccountId);
				svcbsService = sApp.GetService(""Shopping Service"");
				psInputs.SetProperty(""View"", ""STC AVAYA Opportunity View"");
				psInputs.SetProperty(""Business Component"",""Account"");
				psInputs.SetProperty(""Row Id"",AccountId);
				svcbsService.InvokeMethod(""GotoView"", psInputs, psOutputs);
				}
				else//New Customer
					{
											
						svcbsService = sApp.GetService(""Shopping Service"");
						psInputs.SetProperty(""View"", ""STC Create New Customer View"");
						psInputs.SetProperty(""Business Component"",""STC New Customer VBC"");
						svcbsService.InvokeMethod(""GotoView"", psInputs, psOutputs);
		
						}
				}
			
		}


return (CancelOperation);

	}
	return (ContinueOperation);
}
function BusComp_PreQuery ()
{
	
	//this.SetSearchSpec(""RandField"", (new Date()).getTime()); 

	return (ContinueOperation);
}
function BusComp_Query ()
{
this.NewRecord(NewAfter); // to open the applet with a record already created with predefault values
}
function BusComp_ChangeRecord ()
{

}
function BusComp_PreInvokeMethod (MethodName)
{
	var ireturn;
	
	try
	{
		switch(MethodName)
		{
			case ""GoBackToReservationScreen"":

				var CloudAccountId = TheApplication().GetProfileAttr(""CloudAccountId"");
				var ExistingCustomer = TheApplication().GetProfileAttr(""ExistingCustomer"");
				var NewCustomer = TheApplication().GetProfileAttr(""NewCustomer"");
				var BusinessComponent, View;
				if(ExistingCustomer == ""Y"")
				{
				BusinessComponent = ""Account"";
				View = ""STC Cloud PBX Number Reservation View"";
				}
				if(NewCustomer == ""Y"")
				{
				BusinessComponent = ""STC Cloud PBX New CR"";
				View = ""STC Cloud PBX NewCR Reservation View"";
				}
				var psInputs = TheApplication().NewPropertySet();
				var psOutputs = TheApplication().NewPropertySet();
				var svcbsService = TheApplication().GetService(""Shopping Service"");
				psInputs.SetProperty(""View"", View);
				psInputs.SetProperty(""Business Component"",BusinessComponent);
				psInputs.SetProperty(""Row Id"",CloudAccountId);
				TheApplication().SetProfileAttr(""ExistingCustomer"", ""N"");
				TheApplication().SetProfileAttr(""NewCustomer"", ""N"");
				svcbsService.InvokeMethod(""GotoView"", psInputs, psOutputs);
				return (CancelOperation);
				break;

			default:
				return (ContinueOperation);
				break;
		}	
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	}
}
function BusComp_PreQuery ()
{
	return (ContinueOperation);
}
function BusComp_Query ()
{

}
function BusComp_WriteRecord ()
{

}
"//***********************************************************************************************************//
//Purpose: 1) To Log the exceptions in Custom Error Log Table
//Inputs: Error Message
//Author: Suman Kanumuri
//Release: Single View
//Date: Mar-02-2013
//*************************************************************************************************************//
function LogException(e)
{
	var appObj;
  	var psInput;
  	var psOutput;
  	var bsErrorHandler; 
	try
 	{
		  appObj = TheApplication();
		  with(appObj)
		  {
			  psInput = NewPropertySet();
			  psOutput = NewPropertySet();
			  bsErrorHandler = GetService(""STC Generic Error Handler"");
		  }
		  with(psInput)
		  {
			  SetProperty(""Error Code"", e.errCode);
			  SetProperty(""Error Message"", e.errText);
			  SetProperty(""Object Name"", ""STC Busiess OS Amount Query BS"");
			  SetProperty(""Object Type"", ""Buisness Service"");
		  }
		  bsErrorHandler.InvokeMethod(""Log Message"", psInput, psOutput);
 	}
 	catch(e)
 	{
  		// do nothing	
 	}
 	finally
 	{
 
		  bsErrorHandler = null;
		  psOutput = null;
		  psInput = null;
		  appObj = null;
 	}
}
function BusComp_PreWriteRecord ()
{
	this.ActivateField(""Email Bill To"");
	var sEmailAddrs = this.GetFieldValue(""Email Bill To"");
	if(sEmailAddrs == ""NA"" || sEmailAddrs == ""na""){
		this.SetFieldValue(""Email Bill To"","""");
		//this.WriteRecord();
	}
	return (ContinueOperation);
}
"//Your public declarations go here... 
var vOldSIM = """";
var sSIMno = """";
var SIMCheckSUM = """";
var vOldMSISDN = """";
var sMSISDN = """";"
function BlockRe_selection (OldValue,NewValue)
{
	try
	{
	var appObj;
	var psInputs,psOutputs,bsBlockNumber;
	appObj = TheApplication();
	
	
                                   
		bsBlockNumber = appObj.GetService(""RMS RMS Block Number"") ;
		psInputs = appObj.NewPropertySet();
		psOutputs = appObj.NewPropertySet();
		//this.ActivateField(""CBAN"");
		var vBlockedFor = this.GetFieldValue(""Id"");
		psInputs.SetProperty(""BlockNumber"",NewValue);
		psInputs.SetProperty(""BlockedFor"",vBlockedFor);
		psInputs.SetProperty(""ReleaseNumber"",OldValue); // variable set at PreSetFieldValue
		bsBlockNumber.InvokeMethod(""BlockNumber"",psInputs,psOutputs);
		var ErrorCode =  psOutputs.GetProperty(""ErrCode"");
		var ErrorMessage =  psOutputs.GetProperty(""ErrMessage"");
		if(	ErrorCode != """")
		{
			appObj.RaiseErrorText(ErrorMessage);
		}

	}
	catch(e)
	{
	throw(e.errText);
	}
	finally
	{
	psInputs = null;
    psOutputs = null;
    bsBlockNumber = null;
    appObj = null;
	}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	try
	{	
		var boRMS = """";
		var bcRMS = """";
		var isrecord="""";
		var RecBlockedFor="""";
		var MSISDNBlockedFor="""";
		switch(FieldName)
		{   

			case ""SIM"":
			vOldSIM = this.GetFieldValue(""SIM"");
			sSIMno = FieldValue;
			var SIMLen = 0;
			SIMLen = sSIMno.length;
			if(SIMLen == 18)
			{
				boRMS = TheApplication().GetBusObject(""RMS NM Number Enquiry_Thin"");//P1 ****
				bcRMS = boRMS.GetBusComp(""RMS NM Number Enquiry_Thin"");//P1 ****

				with (bcRMS)
					{
						SetViewMode(AllView);
						ActivateField(""Number String"");
						ActivateField(""Number String Checksum"");
						ClearToQuery();
						SetSearchSpec(""Number String"",sSIMno);
						ExecuteQuery(ForwardOnly);
						isrecord = FirstRecord();
						if (isrecord)
						{
							SIMCheckSUM = GetFieldValue(""Number String Checksum"");	
						}
					}

				
				//	sSIMno = SIMCheckSUM;

			}
			
			if(SIMCheckSUM != """")
			{
			BlockRe_selection (vOldSIM,SIMCheckSUM);
			}
			//	this.SetFieldValue(""STC SIM Number"",SIMCheckSUM);
			//	this.SetFieldValue(""SIM Number"",SIMCheckSUM);
				
			this.WriteRecord();
			//this.InvokeMethod(""RefreshBusComp""); 
			this.InvokeMethod(""RefreshRecord""); 
			//	this.ExecuteQuery(ForwardBackward);

			break;

			case ""MSISDN"":
			vOldMSISDN = this.GetFieldValue(""MSISDN"");
			sMSISDN = FieldValue;
			RecBlockedFor = this.GetFieldValue(""Id"");
			
			if(sMSISDN != """")
			{

				boRMS = TheApplication().GetBusObject(""RMS NM Number Enquiry_Thin"");//P1 ****
				bcRMS = boRMS.GetBusComp(""RMS NM Number Enquiry_Thin"");//P1 ****
				
				with (bcRMS)
				{
					SetViewMode(AllView);
					ActivateField(""Number String"");
					ActivateField(""Record Blocked For"");
					ClearToQuery();
					SetSearchSpec(""Number String"",sMSISDN);
					ExecuteQuery(ForwardOnly);
					isrecord = FirstRecord();
					if (isrecord)
					{
						MSISDNBlockedFor = GetFieldValue(""Record Blocked For"");	
					}
				}

			if ((RecBlockedFor != """") && (MSISDNBlockedFor != """")) //RMS
			{
			if(RecBlockedFor != MSISDNBlockedFor)
			{
				TheApplication().RaiseErrorText(""The selected MSISDN is reserved for another. Please select alternate number"");
				return (CancelOperation);
			}
			}


			BlockRe_selection (vOldMSISDN,sMSISDN);
			}


			this.WriteRecord();
			//this.InvokeMethod(""RefreshBusComp""); 
			this.InvokeMethod(""RefreshRecord""); 




			default : 
			break;
		}
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	} 
}
function BusComp_Query ()
{
	this.NewRecord(NewAfter); // to open the applet with a record already created with predefault values
}
var sNewRecord = "N";//Mayank: Added for Lead To Cashe
function BusComp_InvokeMethod (MethodName)
{

}
function BusComp_NewRecord ()
{
 try
 {
    var appObj = TheApplication();
    var oParentBusObj = this.BusObject();
    var oParentBusComp;
    var oAssocBusComp;
    var strParentBusObj = oParentBusObj.Name();
    var strAccountId;
	sNewRecord = ""Y"";
	var sView = appObj.GetProfileAttr(""ActiveViewName"");
	if(sView == ""Lead Details View"")
	{
		var sCPR = """",sEmail = """",sFirstName = """",sLastName = """",sPhone = """";
		var sLeadId = TheApplication().GetProfileAttr(""LEADID"");
		var sLeadBC = TheApplication().GetBusObject(""Lead"").GetBusComp(""Lead"");
		with(sLeadBC)
		{
			ActivateField(""STC Lead CPR"");
			ActivateField(""STC Lead Email"");
			ActivateField(""STC Lead First Name"");
			ActivateField(""STC Lead Last Name"");
			ActivateField(""STC Lead Phone Number"");
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(""Id"",sLeadId);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				sCPR = GetFieldValue(""STC Lead CPR"");
				sEmail = GetFieldValue(""STC Lead Email"");
				sFirstName = GetFieldValue(""STC Lead First Name"");
				sLastName = GetFieldValue(""STC Lead Last Name"");
				sPhone = GetFieldValue(""STC Lead Phone Number"");
			}
		}
		this.ActivateField(""STC ID #"");
		this.SetFieldValue(""STC ID #"", sCPR);
		this.ActivateField(""Email Address"");
		this.SetFieldValue(""Email Address"", sEmail);
		this.ActivateField(""First Name"");
		this.SetFieldValue(""First Name"", sFirstName);
		this.ActivateField(""Last Name"");
		this.SetFieldValue(""Last Name"", sLastName);
		this.ActivateField(""Work Phone #"");
		this.SetFieldValue(""Work Phone #"", sPhone);
	}
	if(sView == ""STC Service Request Required Info View"" || sView == ""STC Subscription SR Detailed View"")
	{
		var sSanId = TheApplication().GetProfileAttr(""SANContactBANId"");
		var sSANBC = TheApplication().GetBusObject(""STC Service Account"").GetBusComp(""CUT Service Sub Accounts"");
		with(sSANBC)
		{
			ActivateField(""Master Account Id"");
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(""Id"",sSanId);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				var sCANId = GetFieldValue(""Master Account Id"");
			}
		}
		var sCANBC = TheApplication().GetBusObject(""Account"").GetBusComp(""Account"");
		with(sCANBC)
		{
			ActivateField(""Survey Type"");
			ActivateField(""Tax ID Number"");
			ActivateField(""STC GCC Country Code"");
			ActivateField(""Contact Citizenship"");
			ActivateField(""Type""); //Mayank: Added for Prod Issue
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(""Id"",sCANId);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				var sCustomerType = GetFieldValue(""Type"");//Mayank: Added for Prod Issue
				var sCPRType = GetFieldValue(""Survey Type"");
				var sCPRNumber = GetFieldValue(""Tax ID Number"");
				var sGCCCode = GetFieldValue(""STC GCC Country Code"");
				var sNationality = GetFieldValue(""Contact Citizenship"");
			}
		}
		if(sCustomerType == ""Individual"")//Mayank: Added for Prod Issue
		{//Mayank: Added for Prod Issue
			this.SetFieldValue(""STC ID Type"", sCPRType);
			this.SetFieldValue(""STC ID #"", sCPRNumber);
			this.SetFieldValue(""STC GCC Country Code"", sGCCCode);
			this.SetFieldValue(""Citizenship"", sNationality);
		}//Mayank: Added for Prod Issue
	}
    switch(strParentBusObj)
    {

       case ""Order Entry (Sales)"":
                oParentBusComp = oParentBusObj.GetBusComp(""Order Entry - Orders"");
	        	strAccountId = oParentBusComp.GetFieldValue(""Billing Account Id"");
	        	if (strAccountId != """")
	        	{
                       // get the AssocBc for the Account Field in Contact
		        	oAssocBusComp = this.GetMVGBusComp(""Account"").GetAssocBusComp();
		      	     with (oAssocBusComp)
		        	{
		      	    	SetViewMode(AllView);
			        	ActivateField(""Id"");
			    		ClearToQuery();
			    		SetSearchSpec(""Id"", strAccountId);
			    		ExecuteQuery(ForwardOnly);
			    		Associate(NewAfter);
		    	     }
				}			
	        	break;
       default:
	        	break;
    }
   } 
    catch(e)
    {
	      throw e;
    }

    finally
     {
     
	oAssocBusComp = null;
	oParentBusComp = null;
	oParentBusObj = null;
	strAccountId = null;
	appObj = null;

     }

}
function BusComp_PreAssociate ()
{
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	//Mayank: Added for Email Data Capture ----------------- START--------------
	try
	{
		switch(FieldName)
		{
			case ""Email Address"":
			{
				if(sNewRecord == ""N"")
				{
					if(FieldValue != """" && FieldValue != null)
					{
						var sEmail = this.GetFieldValue(""Email Address"");
						var pattern = /(\s)/g;
						sEmail = sEmail.replace(pattern, """");
						FieldValue = FieldValue.replace(pattern, """");
						if(FieldValue == ""NA"" || FieldValue == ""na"")
						{
							if(sEmail != FieldValue)
							{
								this.ActivateField(""STC Email Verification Status"");
								this.SetFieldValue(""STC Email Verification Status"",""Not Available"");
							}
							//this.SetFieldValue(""Email Address"",FieldValue);
						}
						else
						{
							if(sEmail != FieldValue)
							{
								this.ActivateField(""STC Email Verification Status"");
								this.SetFieldValue(""STC Email Verification Status"",""Not Verified"");
							}
						}
					}
				}
			}
			case ""STC New Email Address Reason""://[manuj]:[Email Data Enhancements]
			
			if(FieldValue == ""Not Available"")
			{
			if(this.GetFieldValue(""STC New Email Address"") != ""NA"")
			{
				this.SetFieldValue(""STC New Email Address"",""NA"");
				//this.InvokeMethod(""RefreshBusComp"");
			}	
			}
			break;
		}
		return(ContinueOperation);
	}
	catch(e)
	{
		throw(e);
		LogException(e);
	}
	finally
	{
	}//Mayank: Added for Email Data Capture ----------------- STOP--------------
}
function BusComp_PreWriteRecord ()
{

 var sViewName;
 var psInputs;
 var psOutputs;
 var appObj;
 try
{
		appObj = TheApplication();
		sViewName = appObj.ActiveViewName();
		//if(sViewName == ""Order Entry - Line Items Detail View (Sales)"" || sViewName == ""STC Billing Account Detail - Contacts View"" || sViewName == ""Account Detail - Contacts View"")
		if(sViewName == ""Order Entry - Line Items Detail View (Sales)"" || sViewName == ""STC Billing Account Detail - Contacts View"" || sViewName == ""Account Detail - Contacts View"" || sViewName == ""Lead Details View"")// Mayank: Updated Condion for Lead To Cashe
		{   
		
		psInputs = appObj.NewPropertySet();
		with(psInputs)
		{
			this.ActivateField(""First Name"");//[MANUJ] : [Email Data Capture Enhancement]
		   this.ActivateField(""Middle Name"");//[MANUJ] : [Email Data Capture Enhancement]
		   this.ActivateField(""Last Name"");//[MANUJ] : [Email Data Capture Enhancement]
		   this.ActivateField(""Work Phone #"");//[MANUJ] : [Email Data Capture Enhancement]
		   this.ActivateField(""Email Address"");//[MANUJ] : [Email Data Capture Enhancement]
		   this.ActivateField(""Birth Date"");//[MANUJ] : [Email Data Capture Enhancement]
		   this.ActivateField(""STC ID Type"");//[MANUJ] : [Email Data Capture Enhancement]
		   this.ActivateField(""STC ID #"");//[MANUJ] : [Email Data Capture Enhancement]
		   SetProperty(""FirstName"",this.GetFieldValue(""First Name""));
		   SetProperty(""MiddleName"",this.GetFieldValue(""Middle Name""));
		   SetProperty(""LastName"",this.GetFieldValue(""Last Name""));
		  // SetProperty(sMotherMaidenName,this.GetFieldValue(""Mother Maiden Name""));
		   SetProperty(""Phone"",this.GetFieldValue(""Work Phone #""));
		   SetProperty(""EmailId"",this.GetFieldValue(""Email Address""));
		 //  SetProperty(sMobile,this.GetFieldValue(""Cellular Phone #""));
		   SetProperty(""DateOfBirth"",this.GetFieldValue(""Birth Date""));
		 //  SetProperty(sTitle,this.GetFieldValue(""M/M""));
		  //SetProperty(sMaritalStatus,this.GetFieldValue(""Marital Status""));
		 //  SetProperty(sGender,this.GetFieldValue(""M/F""));
		 
		   SetProperty(""IDType"",this.GetFieldValue(""STC ID Type""));
		   SetProperty(""ID"",this.GetFieldValue(""STC ID #""));
		  // SetProperty(""IDExpiryDate"",this.GetFieldValue(""ID Expiry Date""));
	    }  
		 
		 psOutputs = appObj.NewPropertySet();
		 //[MANUJ] : [EMail Data Enhancement]
		 var ActView = TheApplication().ActiveViewName();
		 if (ActView != ""Order Entry - Line Items Detail View (Sales)"")
		 {
		 ValidateCustomerDetails(psInputs,psOutputs);
		 }
		} 
		
		var isNewRecord = this.InvokeMethod(""IsNewRecordPending"");
		if(isNewRecord == ""TRUE"" && TheApplication().GetProfileAttr(""ApplicationName"") == ""Siebel eChannel for CME"")
		{
			this.SetFieldValue(""SSA Primary Field"",""Y"");
		}
		return (ContinueOperation);
	 }
	 
	 catch(e)
	 {
		//TheApplication().RaiseErrorText(e.errText);
		throw(e);
	 }
	 finally
	 {
	 }
}
function BusComp_SetFieldValue (FieldName)
{
	//Mayank: Added for Email Data Capture ----------------- START--------------
	if(FieldName == ""Email Address"")
	{	
		var sEmail = this.GetFieldValue(""Email Address"");
		if(sEmail != """" && sEmail != null)
		{
			var pattern = /(\s)/g;
			sEmail = sEmail.replace(pattern, """");
			this.SetFieldValue(""Email Address"",sEmail);
			//this.WriteRecord();
		}
	}//Mayank: Added for Email Data Capture ----------------- STOP--------------
}
function BusComp_WriteRecord ()
{
	
}
function ValidateCustomerDetails(psInputs,psOutputs)
{
	var appObj;
	var bsValidCustomer;
	var sErrorCode;
	var sErrorMsg;
	try
	{
		appObj = TheApplication();
		with(appObj)
		{
			bsValidCustomer = GetService(""STC New Contact Validation"");
			bsValidCustomer.InvokeMethod(""ValidateCustomer"",psInputs, psOutputs);
		
			sErrorCode = psOutputs.GetProperty(""Error Code"");
			sErrorMsg = psOutputs.GetProperty(""Error Message"");
			if(sErrorCode !="""" && sErrorCode != null)
			{
				TheApplication().RaiseErrorText(sErrorMsg);
			}
			
		} 
		return(ContinueOperation);
	
	}
	catch(e)
	{
		//TheApplication().RaiseErrorText(e.errText);
		throw(e);
	}
	finally
	{
		psInputs = null;
		psOutputs = null;
		bsValidCustomer = null;
	}
}
function BusComp_Query ()
{

this.NewRecord(NewAfter);

	var vItemType="""", vItemRowId="""", vItemTaskId="""", vApproverLogin="""", vItemValueNew="""", vJustification="""", vMethodName="""";
	with(TheApplication())
	{
		vItemType = GetProfileAttr(""ItemApprovalType"");
		vItemRowId = GetProfileAttr(""InboxItemRowId"");
		vItemTaskId = GetProfileAttr(""InboxItemTaskId"");
		vApproverLogin = GetProfileAttr(""ApproverLoginName"");
		vItemValueNew = GetProfileAttr(""InboxItemValueNew"");
		vJustification = GetProfileAttr(""RequestJustification"");
		vMethodName = GetProfileAttr(""InboxMethodName"");
		SetProfileAttr(""ItemApprovalType"", """");
		SetProfileAttr(""InboxItemRowId"", """");
		SetProfileAttr(""InboxItemTaskId"", """");
		SetProfileAttr(""ApproverLoginName"", """");
		SetProfileAttr(""InboxItemValueNew"", """");
		SetProfileAttr(""RequestJustification"", """");
		SetProfileAttr(""InboxMethodName"", """");
	}
	with (this)
	{
		SetFieldValue(""Order Id"", ParentBusComp().GetFieldValue(""Id""));
		SetFieldValue(""Order Number"", ParentBusComp().GetFieldValue(""Order Number""));
		//SetFieldValue(""STC Item Value Current"", ParentBusComp().GetFieldValue(""STC Num of Inst""));//Jithin: Advance Payment SD; Value coming from OLI
		SetFieldValue(""STC Item Value New"", vItemValueNew);
		SetFieldValue(""Item Type Name"", vItemType);
		SetFieldValue(""STC Justification"", vJustification);
		
		if (vMethodName == ""Approved"")
		{ 
			ActivateField(""Approver Login"");
			SetFieldValue(""Approver Login"", vApproverLogin);
		}
	}
}
function BusComp_PreInvokeMethod (MethodName)
{
	var sAppMode = TheApplication().GetProfileAttr(""IsOpenUI"");//Mayank: Added for Gaurdian
	if (sAppMode == 1)//Mayank: Added for Gaurdian
	{
		this.WriteRecord();//Mayank: Added for Gaurdian
	}
  if (MethodName == ""GoToSingleView"" || MethodName == ""GetCPR"")
{

	var appObj;
	var sSRId;
	var psInputs;
	var psOutputs;
	var svcbsService;
	var sSubStatus;
	var sSetSubStatus;
	var svcbsRefresh;
	var psInRefresh;
	var psOutRefresh;
	var sSpec;
	var AccountId;
	var ID;
	//this.WriteRecord();

		with(this)
		{	
		ActivateField(""CPR"");
		ID = GetFieldValue(""CPR"");
		}

    
		appObj = TheApplication();
		
		var AccountBO = TheApplication().GetBusObject(""Account"");
		var Account = AccountBO.GetBusComp(""Account""); 
		with(Account) 
		{  
		ActivateField(""Tax ID Number""); 
		ActivateField(""Account Type Code"");
		ActivateField(""Survey Type"");
		ClearToQuery(); 
		SetViewMode(AllView); 
		SetSearchSpec(""Tax ID Number"",ID); 
		SetSearchSpec(""Account Type Code"",""Customer"");
		if(MethodName == ""GetCPR"")
		{ 
		SetSearchSpec(""Survey Type"",""Bahraini ID"");
		}
		ExecuteQuery(); 
		var IsAccRec= FirstRecord();
		if(IsAccRec) 
		{
		AccountId = GetFieldValue(""Id""); 
		}
		}

			
			psInputs = TheApplication().NewPropertySet();
			psOutputs = TheApplication().NewPropertySet();
			svcbsService = TheApplication().GetService(""Shopping Service"");
			psInputs.SetProperty(""View"", ""STC Customer Profile View"");
			psInputs.SetProperty(""Business Component"",""Account"");
			psInputs.SetProperty(""Row Id"",AccountId);
			svcbsService.InvokeMethod(""GotoView"", psInputs, psOutputs);
			Account = """";
			AccountBO = """";
			ID = """";
			return (CancelOperation);
		}
			return (ContinueOperation);
}
function BusComp_PreQuery ()
{
	
	//this.SetSearchSpec(""RandField"", (new Date()).getTime()); 

	return (ContinueOperation);
}
function BusComp_Query ()
{
this.NewRecord(NewAfter); // to open the applet with a record already created with predefault values
}
function BusComp_NewRecord ()
{
	
}
function BusComp_SetFieldValue (FieldName)
{
	 
}
function BusComp_CopyRecord ()
{

}
function BusComp_NewRecord ()
{

}
function BusComp_PreGetFieldValue (FieldName, &FieldValue)
{
	return (ContinueOperation);
}
function BusComp_PreNewRecord ()
{
	var vView = TheApplication().GetProfileAttr(""ActiveViewName"");
	if(vView == ""STC Datacom Tier Provisioning View"")
	{
		
		var vID = null;
		var BANType = """";
		BANType = TheApplication().GetProfileAttr(""CorporateType"");
		
		if(!(BANType == ""Department""))
		TheApplication().RaiseErrorText(""Please raise the request under Department Billing Account."");
	}
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{

}
function BusComp_CopyRecord ()
{

}
function BusComp_NewRecord ()
{

}
function BusComp_PreGetFieldValue (FieldName, &FieldValue)
{
	return (ContinueOperation);
}
function BusComp_PreNewRecord ()
{
	var vView = TheApplication().GetProfileAttr(""ActiveViewName"");
	if(vView == ""STC Datacom Tier Provisioning View"")
	{
		
		var vID = null;
		var BANType = """";
		BANType = TheApplication().GetProfileAttr(""CorporateType"");
		
		if(!(BANType == ""Department""))
		TheApplication().RaiseErrorText(""Please raise the request under Department Billing Account."");
	}
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{

}
function BusComp_PreNewRecord ()
{
	var vView = TheApplication().GetProfileAttr(""ActiveViewName"");
	
	if(vView == ""STC Datacom Tier Provisioning View"")
	{
		var NoOfTier = 0;
		NoOfTier = this.ParentBusComp().GetFieldValue(""No Of Tier"");
		NoOfTier = ToNumber(NoOfTier);
		var vID = null;
		vID = this.CountRecords();
		if(vID >= NoOfTier)
		{
		var Message = ""Maximum No Of Tiers can be raised is  "" + NoOfTier;
		TheApplication().RaiseErrorText(Message);
		}
	}
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_PreNewRecord ()
{
	var vView = TheApplication().GetProfileAttr(""ActiveViewName"");
	
	if(vView == ""STC Datacom Tier Provisioning View"")
	{
		var NoOfTier = 0;
		NoOfTier = this.ParentBusComp().GetFieldValue(""No Of Tier"");
		NoOfTier = ToNumber(NoOfTier);
		var vID = null;
		vID = this.CountRecords();
		if(vID >= NoOfTier)
		{
		var Message = ""Maximum No Of Tiers can be raised is  "" + NoOfTier;
		TheApplication().RaiseErrorText(Message);
		}
	}
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_PreCopyRecord ()
{
	return (CancelOperation);
}
function BusComp_PreWriteRecord ()
{
	var sErrorMsg = """";
	var sErrorCode = """";
		var CPR= this.GetFieldValue(""Cpr"");
		if(!isNaN(CPR))
		{
			if(CPR.length < 9 || CPR.length > 9 )
			{
				sErrorMsg += TheApplication().LookupMessage(""User Defined Errors"",""AM0063"") +""\n"";
				sErrorCode += ""AM0063 \n"" 
			}// CPR Length ends
			if(CPR.length == 9)
			{
				 var sID0 = CPR.charAt(0);//a  
	             var sID1 = CPR.charAt(1); //b
	             var sID2 = CPR.charAt(2); //c            
	             var sID3 = CPR.charAt(3);//d
	             var sID4 = CPR.charAt(4);//e
	             var sID5 = CPR.charAt(5);//f
	             var sID6 = CPR.charAt(6);//g
	             var sID7 = CPR.charAt(7);//h
	             
	             var sID8 = CPR.charAt(8);  //i                   
	             var Valid =((sID7*2+sID6*3+sID5*4+sID4*5+sID3*6+sID2*7+sID1*8+sID0*9)%11);
	             var Valid1=(11-Valid);			
				if(Valid == ""0""|| Valid == ""1"")
	            {
	           		var SIDNew = ""0"";
	           	}
	            else
	            {
	           		var SIDNewext = Valid1;
	            }	
				if(SIDNew != sID8)
				{
					if(SIDNewext != sID8)
					{
						sErrorMsg += TheApplication().LookupMessage(""User Defined Errors"",""AM0062"") +""\n"";
							sErrorCode += ""AM0062 \n""
					}
	            }// SIDNew != sID8
				
			}	// CPR length = 9
		} //!isNaN(FieldName)    
		else
		{
			sErrorMsg += TheApplication().LookupMessage(""User Defined Errors"",""AM0063"") +""\n"";
		}
		
		if (sErrorMsg != """")
		{
			TheApplication().RaiseErrorText(sErrorMsg);
			return(CancelOperation);
		}   	
	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{
		this.ActivateField(""Status"");
		this.SetFieldValue(""Status"",""Active"");
		this.InvokeMethod(""RefreshBusComp"");
	return(ContinueOperation);
}
function BusComp_PreQuery ()
{
	//var DigitalCardBC = this.ParentBusComp();
	var DigitalCardBC = TheApplication().ActiveBusObject().GetBusComp(""STC Digital Card CRM BC"");
	var vRecCount = DigitalCardBC.CountRecords();
	var vDigiCardId="""";
	
	if(vRecCount > 0)
	{
		with(DigitalCardBC)
		{
			vDigiCardId = GetFieldValue(""Id"");
			TheApplication().SetProfileAttr(""DigitalCardRowId"", vDigiCardId);
		}
	}
	else
	{
		vDigiCardId = ""NO_MATCH_ROW_ID"";
		TheApplication().SetProfileAttr(""DigitalCardRowId"", vDigiCardId);
	}
	
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	if(FieldName == ""Add Dis Charging Type"")
		{
			if(FieldValue == ""Actual"")
			{
				this.SetFieldValue(""Add Dis Price Overide"","""");
			}
			
			if(FieldValue == ""PriceOverride"")
			{
				this.SetFieldValue(""Add Dis Price Overide"",0);
			}
		}

	return (ContinueOperation);
}
function BusComp_PreInvokeMethod (MethodName)
{  

	return (ContinueOperation);
}
function BusComp_PreQuery ()
{
//Mayank: Added for iPhone For Life -------- START---------------
	try
	{
		var sView = TheApplication().ActiveViewName();
		var sMethodName = TheApplication().GetProfileAttr(""sMethodName"");
		if(sView == ""STC Device Return iPhone View"" && (sMethodName == null || sMethodName == """"))
		{
			var MSISDN = this.GetSearchSpec(""Serial Number"");
			var IMEI = this.GetSearchSpec(""STC IMEI"");
			if((MSISDN == null || MSISDN == """") && (IMEI == null || IMEI == """"))
			{
				TheApplication().RaiseErrorText(""Please populate either MSISDN or IMEI Number to Query."");
			}
		}
		if(sMethodName != ""RunUpgradeWF"")
		{
			TheApplication().SetProfileAttr(""sMethodName"","""");
		}
		return (ContinueOperation);
	}
	catch(e)
	{
		TheApplication().RaiseErrorText(e.errText);
	
	}
	finally
	{
	}//Mayank: Added for iPhone For Life -------- STOP---------------
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_PreInvokeMethod (MethodName)
{
	if(MethodName == ""CancelEcomOrder"")
	{
		var appObj = TheApplication();
		var Operation = ""TT"";
		this.ActivateField(""STC Portal Order Id"");
		this.ActivateField(""STC Payment Method"");
		this.ParentBusComp().ActivateField(""Account Id"");
		this.ParentBusComp().ActivateField(""Id"");
		this.ParentBusComp().ActivateField(""Description"");
		var PortalOrderId = this.GetFieldValue(""STC Portal Order Id"");
		var PaymentMethod = this.GetFieldValue(""STC Payment Method"");
		var ObjectId = this.ParentBusComp().GetFieldValue(""Id"");
		var ServiceAccntId = this.ParentBusComp().GetFieldValue(""Account Id"");
		var Description = this.ParentBusComp().GetFieldValue(""Description"");

		var sService = appObj.GetService(""Workflow Process Manager"");
		var inPropSet = appObj.NewPropertySet(); 
		var outPropSet = appObj.NewPropertySet();
		inPropSet.SetProperty(""ProcessName"", ""STCeCommerceCancellationTTProcess"");
		inPropSet.SetProperty(""Operation"", Operation);
		inPropSet.SetProperty(""PortalOrderId"", PortalOrderId); 
		inPropSet.SetProperty(""SRID"", ObjectId);
		inPropSet.SetProperty(""ServiceAccntId"", ServiceAccntId);
		inPropSet.SetProperty(""PaymentMethod"", PaymentMethod);
		inPropSet.SetProperty(""Description"", Description);
		sService.InvokeMethod(""RunProcess"", inPropSet, outPropSet);
		return (CancelOperation);
	}
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{
	try
	{
		var appObj = TheApplication();
		var TransactionType;
		var ShippingMethod;
		var OrderIdentifier;
		var Order;
		var EcomTTId;
		var BilingAccntId;
		var OrderLineId;
		var SpecialFlag;
		var vTT;
		var Id = GetFieldValue(""Id"");
		//this.ParentBusComp().ActivateField(""STC Payment Method"");
		//var PaymentMethod = this.ParentBusComp().GetFieldValue(""STC Payment Method"");
		var searchst;
		var sStatus;
		var sComment;
		var CommTemplateName = """";
		switch(FieldName)
		{
			/*case ""STC Status"":
			with(this)
			{
				ActivateField(""STC Transaction Type"");
				ActivateField(""STC Shipping Method"");
				ActivateField(""STC Special Flag"");
				ActivateField(""STC Order CRM Id"");
				ActivateField(""Parent Order Id"");
				ActivateField(""STC Parent Portal Order Id"");	
				ActivateField(""STC Billing Account Id"");
				ActivateField(""STC Order Identifier"");	
				ActivateField(""STC TT CRM ID"");	
				ActivateField(""STC Status"");
				ActivateField(""STC Comments"");
				ActivateField(""STC Mail Sent Flag"");
				ActivateField(""STC Ecom TT Id"");	
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(""Id"",Id);
				ExecuteQuery(ForwardOnly);
				TransactionType = GetFieldValue(""STC Transaction Type"");
				ShippingMethod = GetFieldValue(""STC Shipping Method"");
				SpecialFlag = GetFieldValue(""STC Special Flag"");
				OrderLineId = GetFieldValue(""Parent Order Id"");
				BilingAccntId = GetFieldValue(""STC Billing Account Id"");
				Order = GetFieldValue(""STC Order CRM Id"");
				vTT = GetFieldValue(""STC TT CRM ID"");
				OrderIdentifier = GetFieldValue(""STC Order Identifier"");
				sStatus = GetFieldValue(""STC Status"");
				sComment = GetFieldValue(""STC Comments"");
				EcomTTId = GetFieldValue(""STC Ecom TT Id"");
				var sMailSentFlg = GetFieldValue(""STC Mail Sent Flag"");
				if(sStatus == ""Complete"")
				{
					if(sMailSentFlg == ""Y"")
					{
						if(OrderIdentifier == ""Contractual"")
						{
							CommTemplateName = ""STCeCommerceProcessOrderEmailTemplate"";
						}
						else if(OrderIdentifier == ""Pre-Booking"")
						{
							CommTemplateName = ""STCeCommerceProcessPreBookingEmailTemplate"";
						}
						else if(OrderIdentifier == ""PlanChange"" || OrderIdentifier == ""ContractRenewal"" || OrderIdentifier == ""ContactPlanChange"" || OrderIdentifier == ""AddOnContract"")
						{
							CommTemplateName = ""STCeCommerceProcessTTEmailTemplate"";
						}
						SetViewMode(AllView);
						ClearToQuery();
						searchst = ""[Parent Order Id] = '"" + OrderLineId + ""' AND [STC Special Flag] = '"" + SpecialFlag +""'"";				
						SetSearchExpr(searchst);
						ExecuteQuery(ForwardOnly);
						if(FirstRecord())
						{
							var isRecord1 = FirstRecord();
							while(isRecord1)
							{	
								SetFieldValue(""STC Mail Sent Flag"", ""N"");
								WriteRecord();
								isRecord1 = NextRecord();
							}
						}
						var MailUpdate = appObj.GetService(""Workflow Process Manager"");
						var inPropSet = appObj.NewPropertySet(); 
						var outPropSet = appObj.NewPropertySet();
						inPropSet.SetProperty(""ProcessName"", ""STCeCommerceSendMailSMSPrimaryProcess"");
						inPropSet.SetProperty(""ChildProcess"", ""Y"");
						inPropSet.SetProperty(""CommTemplateName"", CommTemplateName); 
						inPropSet.SetProperty(""LineId"", Id);
						inPropSet.SetProperty(""PortalHeaderId"", GetFieldValue(""STC Parent Portal Order Id""));
						MailUpdate.InvokeMethod(""RunProcess"", inPropSet, outPropSet);
					}//if(sMailSentFlg == ""Y"")
				}//if(sStatus == ""Complete"")
			}//with(this) 
			break;*/ 
			//Added in WF: STCeCommerceOrderCompletionProcess

			/*case ""STC Order CRM Id"":
			with(this)
			{
				ActivateField(""STC Transaction Type"");
				ActivateField(""STC Shipping Method"");
				ActivateField(""STC Special Flag"");
				ActivateField(""STC Order CRM Id"");
				ActivateField(""Parent Order Id"");	
				ActivateField(""STC Billing Account Id"");
				ActivateField(""STC Order Identifier"");	
				ActivateField(""STC TT CRM ID"");	
				ActivateField(""STC Status"");	
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(""Id"",Id);
				ExecuteQuery(ForwardOnly);
				TransactionType = GetFieldValue(""STC Transaction Type"");
				ShippingMethod = GetFieldValue(""STC Shipping Method"");
				SpecialFlag = GetFieldValue(""STC Special Flag"");
				OrderLineId = GetFieldValue(""Parent Order Id"");
				BilingAccntId = GetFieldValue(""STC Billing Account Id"");
				Order = GetFieldValue(""STC Order CRM Id"");
				vTT = GetFieldValue(""STC TT CRM ID"");
				OrderIdentifier = GetFieldValue(""STC Order Identifier"");
				sStatus = GetFieldValue(""STC Status"");
				if(Order != vTT && OrderIdentifier == ""Contractual"")
				{
					SetViewMode(AllView);
					ClearToQuery();
					//searchst = ""[Parent Order Id] = '"" + OrderLineId + ""' AND ([STC Order CRM Id] IS NULL OR [STC Order CRM Id] = [STC TT CRM ID]) AND  [STC Special Flag] = '"" + SpecialFlag +""'"";				
					searchst = ""[Parent Order Id] = '"" + OrderLineId + ""' AND  [STC Special Flag] = '"" + SpecialFlag +""'"";
					SetSearchExpr(searchst);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
					{
						var isRecord = FirstRecord();
						/*while(isRecord)
						{	
							SetFieldValue(""STC Order CRM Id"", Order);
							SetFieldValue(""STC Billing Account Id"", BilingAccntId);
							SetFieldValue(""STC Status"", ""Pending"");
							WriteRecord();
							isRecord = NextRecord();
						}*/
						/*var boAction = appObj.GetBusObject(""Order Entry (Sales)"");
						var bcAction = boAction.GetBusComp(""Action (Quote Order)"");
						with(bcAction)
						{
							ActivateField(""Order Id"");
							SetViewMode(AllView);
							ClearToQuery();
							SetSearchSpec(""Order Id"",Order);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
							{

							}
							else
							{
								NewRecord(NewAfter);
								SetFieldValue(""Type"",appObj.InvokeMethod(""LookupValue"", ""TODO_TYPE"", ""Tracking Order""));
								SetFieldValue(""Status"",appObj.InvokeMethod(""LookupValue"", ""EVENT_STATUS"", ""In Progress""));
								SetFieldValue(""Order Id"",Order);
								SetFieldValue(""Primary Order Id"",Order);
								WriteRecord();
							}
						}
					}
				}//if(Order != vTT && OrderIdentifier == ""Contractual"")
				else if(Order != vTT && OrderIdentifier != ""Contractual"" && vTT != null && vTT !="""")
				{
					SetViewMode(AllView);
					ClearToQuery();
					//searchst = ""[Parent Order Id] = '"" + OrderLineId + ""' AND ([STC Order CRM Id] IS NULL OR [STC Order CRM Id] = [STC TT CRM ID]) AND  [STC Special Flag] = '"" + SpecialFlag +""'"";				
					searchst = ""[Parent Order Id] = '"" + OrderLineId + ""' AND  [STC Special Flag] = '"" + SpecialFlag +""'"";
					SetSearchExpr(searchst);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
					{
						ActivateField(""Order Id"");
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchSpec(""Order Id"",Order);
						ExecuteQuery(ForwardOnly);
						if(FirstRecord())
						{

						}
						else
						{
							NewRecord(NewAfter);
							SetFieldValue(""Type"",appObj.InvokeMethod(""LookupValue"", ""TODO_TYPE"", ""Tracking Order""));
							SetFieldValue(""Status"",appObj.InvokeMethod(""LookupValue"", ""EVENT_STATUS"", ""In Progress""));
							SetFieldValue(""Order Id"",Order);
							SetFieldValue(""Primary Order Id"",Order);
							WriteRecord();
						}
					}
				}//else if(Order != vTT && OrderIdentifier == ""Contractual"")
			} 
			break;*/
			
			/*case ""STC TT CRM ID"":
			with(this)
			{
				ActivateField(""STC Transaction Type"");
				ActivateField(""STC Shipping Method"");
				ActivateField(""STC Special Flag"");
				ActivateField(""STC TT CRM ID"");
				ActivateField(""STC Order CRM Id"");
				ActivateField(""Parent Order Id"");	
				ActivateField(""STC Billing Account Id"");
				ActivateField(""STC Order Identifier"");
				ActivateField(""STC Ecom TT Id"");
				ActivateField(""STC Status"");				
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(""Id"",Id);
				ExecuteQuery(ForwardOnly);
				TransactionType = GetFieldValue(""STC Transaction Type"");
				ShippingMethod = GetFieldValue(""STC Shipping Method"");
				SpecialFlag = GetFieldValue(""STC Special Flag"");
				OrderLineId = GetFieldValue(""Parent Order Id"");
				BilingAccntId = GetFieldValue(""STC Billing Account Id"");
				vTT = GetFieldValue(""STC TT CRM ID"");

				SetViewMode(AllView);
				ClearToQuery();
				//searchst = ""[Parent Order Id] = '"" + OrderLineId + ""' AND [STC TT CRM ID] IS NULL AND  [STC Special Flag] = '"" + SpecialFlag +""'"";				
				searchst = ""[Parent Order Id] = '"" + OrderLineId + ""' AND [STC Special Flag] = '"" + SpecialFlag +""'"";				
				SetSearchExpr(searchst);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					var visRecord2 = FirstRecord();
					while(visRecord2)
					{	
						SetFieldValue(""STC TT CRM ID"", vTT);
						SetFieldValue(""STC Order CRM Id"", vTT);
						SetFieldValue(""STC Ecom TT Id"", vTT);
						SetFieldValue(""STC Status"", ""Pending"");
						WriteRecord();
						visRecord2 = NextRecord();
					}
				}
				var boAction = appObj.GetBusObject(""Order Entry (Sales)"");
				var bcAction = boAction.GetBusComp(""Action (Quote Order)"");
				with(bcAction)
				{
					NewRecord(NewAfter);
					SetFieldValue(""Type"",appObj.InvokeMethod(""LookupValue"", ""TODO_TYPE"", ""Tracking Order""));
					SetFieldValue(""Status"",appObj.InvokeMethod(""LookupValue"", ""EVENT_STATUS"", ""In Progress""));
					SetFieldValue(""Order Id"",Order);
					SetFieldValue(""Primary Order Id"",Order);
					WriteRecord();
				}
			}
			break;*/

			case ""STC Ecom TT Id"":
			var sView = appObj.ActiveViewName();
			if(sView != ""Order Entry - Line Items Detail View (Sales)"")
			{
				with(this)
				{
					ActivateField(""STC Transaction Type"");
					ActivateField(""STC Shipping Method"");
					ActivateField(""STC Special Flag"");
					ActivateField(""STC TT CRM ID"");
					ActivateField(""STC Order CRM Id"");
					ActivateField(""Parent Order Id"");	
					ActivateField(""STC Billing Account Id"");
					ActivateField(""STC Order Identifier"");
					ActivateField(""STC Ecom TT Id"");
					ActivateField(""STC Status"");				
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchSpec(""Id"",Id);
					ExecuteQuery(ForwardOnly);
					TransactionType = GetFieldValue(""STC Transaction Type"");
					ShippingMethod = GetFieldValue(""STC Shipping Method"");
					SpecialFlag = GetFieldValue(""STC Special Flag"");
					OrderLineId = GetFieldValue(""Parent Order Id"");
					BilingAccntId = GetFieldValue(""STC Billing Account Id"");
					vTT = GetFieldValue(""STC TT CRM ID"");
					EcomTTId = GetFieldValue(""STC Ecom TT Id"");
					OrderIdentifier = GetFieldValue(""STC Order Identifier"");
					if(OrderIdentifier != ""Pre-Booking"" && EcomTTId != vTT)
					{
						SetViewMode(AllView);
						ClearToQuery();
						searchst = ""[Parent Order Id] = '"" + OrderLineId + ""' AND  [STC Special Flag] = '"" + SpecialFlag +""'"";				
						SetSearchExpr(searchst);
						ExecuteQuery(ForwardOnly);
						if(FirstRecord())
						{
							var visRecord3 = FirstRecord();
							while(visRecord3)
							{	
								SetFieldValue(""STC Ecom TT Id"", vTT);
								SetFieldValue(""STC Status"", ""Refund Initiated"");
								WriteRecord();
								visRecord3 = NextRecord();
							}
						}
					}
				}
			}
			break;

			default : 
			break;
		}
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
		return (CancelOperation);
	}
	finally
	{
		appObj = null;
	} 
}
function BusComp_SetFieldValue (FieldName)
{
/*	try
	{
		var appObj = TheApplication();
		var TransactionType;
		var ShippingMethod;
		var OrderIdentifier;
		var Order;
		var EcomTTId;
		var BilingAccntId;
		var OrderLineId;
		var SpecialFlag;
		var vTT;
		var Id = GetFieldValue(""Id"");
		//this.ParentBusComp().ActivateField(""STC Payment Method"");
		//var PaymentMethod = this.ParentBusComp().GetFieldValue(""STC Payment Method"");
		var searchst;
		var sStatus;
		var sComment;
		var CommTemplateName = """";
		switch(FieldName)
		{
			/*case ""STC Status"":
			with(this)
			{
				ActivateField(""STC Transaction Type"");
				ActivateField(""STC Shipping Method"");
				ActivateField(""STC Special Flag"");
				ActivateField(""STC Order CRM Id"");
				ActivateField(""Parent Order Id"");
				ActivateField(""STC Parent Portal Order Id"");	
				ActivateField(""STC Billing Account Id"");
				ActivateField(""STC Order Identifier"");	
				ActivateField(""STC TT CRM ID"");	
				ActivateField(""STC Status"");
				ActivateField(""STC Comments"");
				ActivateField(""STC Mail Sent Flag"");
				ActivateField(""STC Ecom TT Id"");	
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(""Id"",Id);
				ExecuteQuery(ForwardOnly);
				TransactionType = GetFieldValue(""STC Transaction Type"");
				ShippingMethod = GetFieldValue(""STC Shipping Method"");
				SpecialFlag = GetFieldValue(""STC Special Flag"");
				OrderLineId = GetFieldValue(""Parent Order Id"");
				BilingAccntId = GetFieldValue(""STC Billing Account Id"");
				Order = GetFieldValue(""STC Order CRM Id"");
				vTT = GetFieldValue(""STC TT CRM ID"");
				OrderIdentifier = GetFieldValue(""STC Order Identifier"");
				sStatus = GetFieldValue(""STC Status"");
				sComment = GetFieldValue(""STC Comments"");
				EcomTTId = GetFieldValue(""STC Ecom TT Id"");
				var sMailSentFlg = GetFieldValue(""STC Mail Sent Flag"");
				if(sStatus == ""Complete"")
				{
					if(sMailSentFlg == ""Y"")
					{
						if(OrderIdentifier == ""Contractual"")
						{
							CommTemplateName = ""STCeCommerceProcessOrderEmailTemplate"";
						}
						else if(OrderIdentifier == ""Pre-Booking"")
						{
							CommTemplateName = ""STCeCommerceProcessPreBookingEmailTemplate"";
						}
						else if(OrderIdentifier == ""PlanChange"" || OrderIdentifier == ""ContractRenewal"" || OrderIdentifier == ""ContactPlanChange"" || OrderIdentifier == ""AddOnContract"")
						{
							CommTemplateName = ""STCeCommerceProcessTTEmailTemplate"";
						}
						SetViewMode(AllView);
						ClearToQuery();
						searchst = ""[Parent Order Id] = '"" + OrderLineId + ""' AND [STC Special Flag] = '"" + SpecialFlag +""'"";				
						SetSearchExpr(searchst);
						ExecuteQuery(ForwardOnly);
						if(FirstRecord())
						{
							var isRecord1 = FirstRecord();
							while(isRecord1)
							{	
								SetFieldValue(""STC Mail Sent Flag"", ""N"");
								WriteRecord();
								isRecord1 = NextRecord();
							}
						}
						var MailUpdate = appObj.GetService(""Workflow Process Manager"");
						var inPropSet = appObj.NewPropertySet(); 
						var outPropSet = appObj.NewPropertySet();
						inPropSet.SetProperty(""ProcessName"", ""STCeCommerceSendMailSMSPrimaryProcess"");
						inPropSet.SetProperty(""ChildProcess"", ""Y"");
						inPropSet.SetProperty(""CommTemplateName"", CommTemplateName); 
						inPropSet.SetProperty(""LineId"", Id);
						inPropSet.SetProperty(""PortalHeaderId"", GetFieldValue(""STC Parent Portal Order Id""));
						MailUpdate.InvokeMethod(""RunProcess"", inPropSet, outPropSet);
					}//if(sMailSentFlg == ""Y"")
				}//if(sStatus == ""Complete"")
			}//with(this) 
			break;*/ 
			//Added in WF: STCeCommerceOrderCompletionProcess

			/*case ""STC Order CRM Id"":
			with(this)
			{
				ActivateField(""STC Transaction Type"");
				ActivateField(""STC Shipping Method"");
				ActivateField(""STC Special Flag"");
				ActivateField(""STC Order CRM Id"");
				ActivateField(""Parent Order Id"");	
				ActivateField(""STC Billing Account Id"");
				ActivateField(""STC Order Identifier"");	
				ActivateField(""STC TT CRM ID"");	
				ActivateField(""STC Status"");	
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(""Id"",Id);
				ExecuteQuery(ForwardOnly);
				TransactionType = GetFieldValue(""STC Transaction Type"");
				ShippingMethod = GetFieldValue(""STC Shipping Method"");
				SpecialFlag = GetFieldValue(""STC Special Flag"");
				OrderLineId = GetFieldValue(""Parent Order Id"");
				BilingAccntId = GetFieldValue(""STC Billing Account Id"");
				Order = GetFieldValue(""STC Order CRM Id"");
				vTT = GetFieldValue(""STC TT CRM ID"");
				OrderIdentifier = GetFieldValue(""STC Order Identifier"");
				sStatus = GetFieldValue(""STC Status"");
				if(Order != vTT && OrderIdentifier == ""Contractual"")
				{
					SetViewMode(AllView);
					ClearToQuery();
					//searchst = ""[Parent Order Id] = '"" + OrderLineId + ""' AND ([STC Order CRM Id] IS NULL OR [STC Order CRM Id] = [STC TT CRM ID]) AND  [STC Special Flag] = '"" + SpecialFlag +""'"";				
					searchst = ""[Parent Order Id] = '"" + OrderLineId + ""' AND  [STC Special Flag] = '"" + SpecialFlag +""'"";
					SetSearchExpr(searchst);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
					{
						var isRecord = FirstRecord();
						/*while(isRecord)
						{	
							SetFieldValue(""STC Order CRM Id"", Order);
							SetFieldValue(""STC Billing Account Id"", BilingAccntId);
							SetFieldValue(""STC Status"", ""Pending"");
							WriteRecord();
							isRecord = NextRecord();
						}*/
						/*var boAction = appObj.GetBusObject(""Order Entry (Sales)"");
						var bcAction = boAction.GetBusComp(""Action (Quote Order)"");
						with(bcAction)
						{
							ActivateField(""Order Id"");
							SetViewMode(AllView);
							ClearToQuery();
							SetSearchSpec(""Order Id"",Order);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
							{

							}
							else
							{
								NewRecord(NewAfter);
								SetFieldValue(""Type"",appObj.InvokeMethod(""LookupValue"", ""TODO_TYPE"", ""Tracking Order""));
								SetFieldValue(""Status"",appObj.InvokeMethod(""LookupValue"", ""EVENT_STATUS"", ""In Progress""));
								SetFieldValue(""Order Id"",Order);
								SetFieldValue(""Primary Order Id"",Order);
								WriteRecord();
							}
						}
					}
				}//if(Order != vTT && OrderIdentifier == ""Contractual"")
				else if(Order != vTT && OrderIdentifier != ""Contractual"" && vTT != null && vTT !="""")
				{
					SetViewMode(AllView);
					ClearToQuery();
					//searchst = ""[Parent Order Id] = '"" + OrderLineId + ""' AND ([STC Order CRM Id] IS NULL OR [STC Order CRM Id] = [STC TT CRM ID]) AND  [STC Special Flag] = '"" + SpecialFlag +""'"";				
					searchst = ""[Parent Order Id] = '"" + OrderLineId + ""' AND  [STC Special Flag] = '"" + SpecialFlag +""'"";
					SetSearchExpr(searchst);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
					{
						ActivateField(""Order Id"");
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchSpec(""Order Id"",Order);
						ExecuteQuery(ForwardOnly);
						if(FirstRecord())
						{

						}
						else
						{
							NewRecord(NewAfter);
							SetFieldValue(""Type"",appObj.InvokeMethod(""LookupValue"", ""TODO_TYPE"", ""Tracking Order""));
							SetFieldValue(""Status"",appObj.InvokeMethod(""LookupValue"", ""EVENT_STATUS"", ""In Progress""));
							SetFieldValue(""Order Id"",Order);
							SetFieldValue(""Primary Order Id"",Order);
							WriteRecord();
						}
					}
				}//else if(Order != vTT && OrderIdentifier == ""Contractual"")
			} 
			break;*/
			
			/*case ""STC TT CRM ID"":
			with(this)
			{
				ActivateField(""STC Transaction Type"");
				ActivateField(""STC Shipping Method"");
				ActivateField(""STC Special Flag"");
				ActivateField(""STC TT CRM ID"");
				ActivateField(""STC Order CRM Id"");
				ActivateField(""Parent Order Id"");	
				ActivateField(""STC Billing Account Id"");
				ActivateField(""STC Order Identifier"");
				ActivateField(""STC Ecom TT Id"");
				ActivateField(""STC Status"");				
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(""Id"",Id);
				ExecuteQuery(ForwardOnly);
				TransactionType = GetFieldValue(""STC Transaction Type"");
				ShippingMethod = GetFieldValue(""STC Shipping Method"");
				SpecialFlag = GetFieldValue(""STC Special Flag"");
				OrderLineId = GetFieldValue(""Parent Order Id"");
				BilingAccntId = GetFieldValue(""STC Billing Account Id"");
				vTT = GetFieldValue(""STC TT CRM ID"");

				SetViewMode(AllView);
				ClearToQuery();
				//searchst = ""[Parent Order Id] = '"" + OrderLineId + ""' AND [STC TT CRM ID] IS NULL AND  [STC Special Flag] = '"" + SpecialFlag +""'"";				
				searchst = ""[Parent Order Id] = '"" + OrderLineId + ""' AND [STC Special Flag] = '"" + SpecialFlag +""'"";				
				SetSearchExpr(searchst);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					var visRecord2 = FirstRecord();
					while(visRecord2)
					{	
						SetFieldValue(""STC TT CRM ID"", vTT);
						SetFieldValue(""STC Order CRM Id"", vTT);
						SetFieldValue(""STC Ecom TT Id"", vTT);
						SetFieldValue(""STC Status"", ""Pending"");
						WriteRecord();
						visRecord2 = NextRecord();
					}
				}
				var boAction = appObj.GetBusObject(""Order Entry (Sales)"");
				var bcAction = boAction.GetBusComp(""Action (Quote Order)"");
				with(bcAction)
				{
					NewRecord(NewAfter);
					SetFieldValue(""Type"",appObj.InvokeMethod(""LookupValue"", ""TODO_TYPE"", ""Tracking Order""));
					SetFieldValue(""Status"",appObj.InvokeMethod(""LookupValue"", ""EVENT_STATUS"", ""In Progress""));
					SetFieldValue(""Order Id"",Order);
					SetFieldValue(""Primary Order Id"",Order);
					WriteRecord();
				}
			}
			break;*/

		/*	case ""STC Ecom TT Id"":
			with(this)
			{
				ActivateField(""STC Transaction Type"");
				ActivateField(""STC Shipping Method"");
				ActivateField(""STC Special Flag"");
				ActivateField(""STC TT CRM ID"");
				ActivateField(""STC Order CRM Id"");
				ActivateField(""Parent Order Id"");	
				ActivateField(""STC Billing Account Id"");
				ActivateField(""STC Order Identifier"");
				ActivateField(""STC Ecom TT Id"");
				ActivateField(""STC Status"");				
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(""Id"",Id);
				ExecuteQuery(ForwardOnly);
				TransactionType = GetFieldValue(""STC Transaction Type"");
				ShippingMethod = GetFieldValue(""STC Shipping Method"");
				SpecialFlag = GetFieldValue(""STC Special Flag"");
				OrderLineId = GetFieldValue(""Parent Order Id"");
				BilingAccntId = GetFieldValue(""STC Billing Account Id"");
				vTT = GetFieldValue(""STC TT CRM ID"");
				EcomTTId = GetFieldValue(""STC Ecom TT Id"");
				OrderIdentifier = GetFieldValue(""STC Order Identifier"");
				if(OrderIdentifier != ""Pre-Booking"" && EcomTTId != vTT)
				{
					SetViewMode(AllView);
					ClearToQuery();
					searchst = ""[Parent Order Id] = '"" + OrderLineId + ""' AND  [STC Special Flag] = '"" + SpecialFlag +""'"";				
					SetSearchExpr(searchst);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
					{
						var visRecord3 = FirstRecord();
						while(visRecord3)
						{	
							SetFieldValue(""STC Ecom TT Id"", vTT);
							SetFieldValue(""STC Status"", ""Refund Initiated"");
							WriteRecord();
							visRecord3 = NextRecord();
						}
					}
				}
			}
			break;

			default : 
			break;
		}
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
		return (CancelOperation);
	}
	finally
	{
		appObj = null;
	} */
	return (ContinueOperation);
}
function BusComp_PreCopyRecord ()
{
	return (CancelOperation);
}
function BusComp_PreGetFieldValue (FieldName, &FieldValue)
{
	return (ContinueOperation);
}
function BusComp_PreNewRecord ()
{
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{



}
function BusComp_PreWriteRecord ()
{

	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{

}
function BusComp_WriteRecord ()
{
		/*this.ActivateField(""Status"");
		this.SetFieldValue(""Status"",""Active"");
		this.InvokeMethod(""RefreshBusComp"");*/
	return(ContinueOperation);
}
"//Your public declarations go here... 
var vOldMSISDN = """";
var vOldSIM = """";"
function BlockRe_selection (OldValue,NewValue)
{
	try
	{
	var appObj;
	var psInputs,psOutputs,bsBlockNumber;
	appObj = TheApplication();
	
	ActivateField(""Record Blocked For"");
	ActivateField(""Billing Account Id"");
	
		var vBlockedServiceNumber = this.GetFieldValue(""Record Blocked For"");
        var vServiceNumber = this.GetFieldValue(""Billing Account Id"");
            
            if (vBlockedServiceNumber != """" && vBlockedServiceNumber != null) //RMS
            {
                 if(vBlockedServiceNumber != vServiceNumber)
                 {
                  appObj.RaiseErrorText(""The selected MSISDN/SIM is reserved for another. Please select alternate number"");
                  return (CancelOperation);
                 }
            }
                                    
            bsBlockNumber = appObj.GetService(""RMS RMS Block Number"") ;
            psInputs = appObj.NewPropertySet();
            psOutputs = appObj.NewPropertySet();
            //var vNewValue = this.GetFieldValue(""<mapped field in OLI for storing MSISDN/SIM number>"");         
            var vBlockedFor = this.GetFieldValue(""Billing Account Id"");
            psInputs.SetProperty(""BlockNumber"",NewValue);
            psInputs.SetProperty(""BlockedFor"",vBlockedFor);
            psInputs.SetProperty(""ReleaseNumber"",OldValue); // variable set at PreSetFieldValue
                        
            bsBlockNumber.InvokeMethod(""BlockNumber"",psInputs,psOutputs);
            
 

	}
	catch(e)
	{
	throw(e.errText);
	}
	finally
	{
	psInputs = null;
    psOutputs = null;
    bsBlockNumber = null;
    appObj = null;
	}
}
function BusComp_PreDeleteRecord ()
{	
	var appObj, sVoucherPromotionFlag;
	try
	{	appObj = TheApplication();
		var temp = this.GetFieldValue(""Id"");
		//this.ActivateField(""STC Voucher Promotion Flag"");
		sVoucherPromotionFlag = this.GetFieldValue(""STC Voucher Promotion Flag"");
		if (sVoucherPromotionFlag ==""Y"")
		{
			var bsService,bsin,bsout;
			bsService = appObj.GetService(""Workflow Process Manager"");
			bsin = appObj.NewPropertySet();
			bsout = appObj.NewPropertySet();
			bsin.SetProperty(""ProcessName"", ""STC Promotion Mgmt Delete Eligible Product WF"");
			bsin.SetProperty(""Object Id"",this.GetFieldValue(""Id""));
			bsService.InvokeMethod(""RunProcess"", bsin, bsout);
		}
		this.InvokeMethod(""RefreshBusComp"");
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		return (ContinueOperation);
	}
}
function BusComp_PreGetFieldValue (FieldName, &FieldValue)
{
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	try
	{	
		var OrderSubstatus;
		var OrderAccType;
		var OrderLOVSubstatus;
		var OrdernewSubstatus;
		var appObj;
		var oldAuthorityCode;
		var OrderHeaderId;
		var boOrder;
		var bcOrder;
		var sBillId;
		var boBilling;
		var bcBilling;
		var sVivaFlag;
		var sPartNum;
		var sErrorMsg;
		var CorpDealer;
		var sErrorMsg = """";
		var sErrorCode = """";
		var sRootId;
		var sId; 
		var sCardType = """",sCardCategory = """",sSTCSIMCalc = """",sCardCategoryCalc = """";// Mayank: Added for UNIFIED
		switch(FieldName)
		{   
			case ""Part Number"":
			appObj = TheApplication();
			this.ActivateField(""Billing Account Id"");
			sBillId = this.GetFieldValue(""Billing Account Id"");
			sPartNum = appObj. InvokeMethod(""LookupValue"",""STC_SIM_TYPE"",""STCPKGCLUB"");
			boBilling =appObj.GetBusObject(""STC Billing Account"");
			bcBilling = boBilling.GetBusComp(""CUT Invoice Sub Accounts"");
			with(bcBilling)
			{
				SetViewMode(AllView);
				ActivateField(""STC Club Viva Flag"");
				ClearToQuery();
				SetSearchSpec(""Id"",sBillId);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					sVivaFlag = GetFieldValue(""STC Club Viva Flag"");
				}
				if (sVivaFlag == ""Y"")
				{
					if (sPartNum != FieldValue)
					{
						// sErrorMsg = appObj.LookupMessage(""User Defined Errors"",""AM0015"") +""\n"";
						appObj.RaiseErrorText(""Please select VIVA Club Package"");
						return (CancelOperation);
					}
				}
			} // end of with       
			bcBilling = null;
			boBilling = null;    
			appObj = null;
			break;

			case ""STC MNP MSISDN"":
			if(FieldValue != """" || FieldValue != null)
			{
				if(!isNaN(FieldValue))
				{
					if(FieldValue.length != 11)
					{
						TheApplication().RaiseErrorText(""Please enter 11 digits for MSISDN"");
					}
					var vMNPMSISDN = FieldValue.substring(3,0);
					if(vMNPMSISDN != '973')
					{
						TheApplication().RaiseErrorText(""MSISDN should start with '973'"");
					}
				}
				else
				{
					TheApplication().RaiseErrorText(""Please enter Numericals for MSISDN"");
				}
			}
			break;

			case ""Service Id"":
			ActivateField(""Root Account Id"");//[MANUJ] : [Avaya]
			ActivateField(""Service Id"");
			vOldMSISDN = this.GetFieldValue(""Service Id"");
			var vCanId = this.GetFieldValue(""Root Account Id"");
			//[MANUJ] : [Avaya]
			appObj = TheApplication();
			this.ActivateField(""Root Order Item Id""); 
			sRootId = this.GetFieldValue(""Root Order Item Id"");
			sId = this.GetFieldValue(""Id""); 
			if(sRootId == sId)
			{
				var PartNumber = this.GetFieldValue(""Part Number"");		  
				var vMessage = CallMSISDNPackageCheck(FieldValue,PartNumber);
				if(vMessage != null && vMessage != """")
				TheApplication().RaiseErrorText(vMessage);
			}
			OrderHeaderId = GetFieldValue(""Order Header Id"");
			boOrder = appObj.GetBusObject(""Order Entry (Sales)"");
			bcOrder = boOrder.GetBusComp(""Order Entry - Orders"");
			with(bcOrder)
			{
				SetViewMode(AllView);
				ActivateField(""STC Order Sub Status"");
				ClearToQuery();
				SetSearchSpec(""Id"",OrderHeaderId);
				ExecuteQuery(ForwardOnly);	
				if (FirstRecord())
				{
					OrderSubstatus = GetFieldValue(""STC Order Sub Status"");
				}
				OrderLOVSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Order Validated"");
				OrdernewSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Raised"");
				if (vOldMSISDN != FieldValue)
				{
					if((OrderLOVSubstatus == OrderSubstatus) && (sRootId == sId))
					{
					SetFieldValue(""STC Order Sub Status"",OrdernewSubstatus);
					WriteRecord();
					}     
				}       
			}  
			//PS 11/05/2010 for Viva Club Migration Validation 	      	
			var sRMSNumbo = appObj.GetBusObject(""RMS NM Number Enquiry"");
			var sRMSNumbc = sRMSNumbo.GetBusComp(""RMS NM Number Enquiry"");                                  
			with(sRMSNumbc)
			{
				ActivateField(""Number String"");
				ActivateField(""Record Blocked For"");
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(""Number String"",FieldValue);
				ExecuteQuery(ForwardOnly); 
				if(FirstRecord())
				{
					var sBlockedFor = GetFieldValue(""Record Blocked For"");
					var vBillingAccount = this.GetFieldValue(""Billing Account Id"");
					if ((sBlockedFor != """" && sBlockedFor != null))
					{
						if((sBlockedFor != vBillingAccount) && sBlockedFor !=  vCanId)//[MANUJ] : [Avaya]
						{
							TheApplication().RaiseErrorText(""The Selected MSISDN is Reserved for Another Customer (as part of Migration). Please Select Another Number"");
						return (CancelOperation);
						}
					}
				}
			}	
			sRMSNumbc = null;
			sRMSNumbo = null;
			bcOrder = null;
			boOrder = null;
			appObj = null;
			//Visa Club Migration Validation
			//vNewMSISDN = Val(FieldValue); 
			//Dt - 23.03.10 Commented the below code to move it to SetField Value
			//  BlockRe_selection (vOldMSISDN,FieldValue);
			break;

			case ""STC ICCID"":
			//	ActivateField(""STC ICCID"");
			vOldSIM = this.GetFieldValue(""STC ICCID"");
			appObj = TheApplication();
			this.ActivateField(""Root Order Item Id""); 
			this.ActivateField(""STC SIM Calc"");// Mayank: Added for UNIFIED
			this.ActivateField(""Card Category Calc"");// Mayank: Added for UNIFIED
			sRootId = this.GetFieldValue(""Root Order Item Id"");
			sId = this.GetFieldValue(""Id"");
			sSTCSIMCalc = this.GetFieldValue(""STC SIM Calc"");// Mayank: Added for UNIFIED
			sCardCategoryCalc = this.GetFieldValue(""Card Category Calc"");// Mayank: Added for UNIFIED
			OrderHeaderId = GetFieldValue(""Order Header Id"");
			boOrder = appObj.GetBusObject(""Order Entry (Sales)"");
			bcOrder = boOrder.GetBusComp(""Order Entry - Orders"");
			with(bcOrder)
			{
				SetViewMode(AllView);
				ActivateField(""STC Order Sub Status"");
				ActivateField(""Order Account Type"");
				ClearToQuery();
				SetSearchSpec(""Id"",OrderHeaderId);
				ExecuteQuery(ForwardOnly);	
				if (FirstRecord())
				{
					OrderSubstatus = GetFieldValue(""STC Order Sub Status"");
					OrderAccType = GetFieldValue(""Order Account Type"");
				}
				OrderLOVSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Order Validated"");
				OrdernewSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Raised"");
				if (vOldSIM != FieldValue)
				{
					if((OrderLOVSubstatus == OrderSubstatus) && (sRootId == sId))
					{
						SetFieldValue(""STC Order Sub Status"",OrdernewSubstatus);
						WriteRecord();
					}     
				}       
			}  
			if (FieldValue != """")
			{
				var sRMSNumberbo = appObj.GetBusObject(""RMS NM Number Enquiry"");
				var sRMSNumberbc = sRMSNumberbo.GetBusComp(""RMS NM Number Enquiry"");                                  
				with(sRMSNumberbc)
				{
					ActivateField(""Num Mstr Number String"");
					ActivateField(""Record Blocked For"");
					ActivateField(""Record Blocked For"");
					ActivateField(""Allocated To"");
					ActivateField(""STC SIM Card Type"");// Mayank: Added for UNIFIED
					ActivateField(""Card Category"");// Mayank: Added for UNIFIED
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchSpec(""Num Mstr Number String"",FieldValue);
					ExecuteQuery(ForwardOnly); 
					if(FirstRecord())
					{
						var sBlockFor = GetFieldValue(""Record Blocked For"");
						CorpDealer = GetFieldValue(""Allocated To"");
						var CorpDealerLOV = appObj.InvokeMethod(""LookupValue"",""STC_CORP_DEALER"",CorpDealer);
						//var vBlockedForBAN = this.GetFieldValue(""STC Migration Blocked For"");
						// Mayank: Added for UNIFIED ---------------START--------------------------------
						sCardType = GetFieldValue(""STC SIM Card Type"");
						sCardCategory = GetFieldValue(""Card Category"");
						if(sCardCategory == ""Postpaid"")
						{
							sCardCategory = ""POSTPAID"";
						}
						if(sCardCategory == ""Prepaid"")
						{
							sCardCategory = ""PREPAID"";
						}
						if(sCardCategory != ""UNIFIED"" && sCardType != ""UNIFIED"")
						{
							if(sCardCategoryCalc != sCardCategory)
							{
								if((sCardCategoryCalc == null || sCardCategoryCalc == """") && sSTCSIMCalc == ""Data"")
								{
									var a = 1;
								}
								else
								{
									TheApplication().RaiseErrorText(""Selected SIM Card Category doesn't match with the Package."");
									return(CancelOperation);	
								}
							}
							if(sSTCSIMCalc != sCardType)
							{
								TheApplication().RaiseErrorText(""Selected SIM Card Type doesn't match with the Package."");
								return(CancelOperation);
							}
						}// Mayank: Added for UNIFIED ---------------STOP--------------------------------
						if(OrderAccType == ""Corporate"")
						{
							if (sBlockFor == """" || sBlockFor == null)
							{
								var CorpDealerStr = CorpDealerLOV.substring(0,3);
								if(CorpDealerStr != ""CSR"")
								{
									TheApplication().RaiseErrorText(""Selected SIM is not under corporate pool"");
									return(CancelOperation);
								}
							}
						}// if(OrderAccType == ""Corporate"")
						var IndDealerLOV = appObj.InvokeMethod(""LookupValue"",""STC_IND_DEALER"",CorpDealer);
						//var vBlockedForBAN = this.GetFieldValue(""STC Migration Blocked For"");
						if(OrderAccType != ""Corporate"")
						{
							if (sBlockFor == """" || sBlockFor == null)
							{
								var IndDealerStr = IndDealerLOV.substring(0,3);
								if(IndDealerStr != ""CSR"")
								{
									TheApplication().RaiseErrorText(""Selected SIM is under corporate pool"");
									return(CancelOperation);
								}
							} 
						}// if(OrderAccType != ""Corporate"")
						var vBillingAccnt = this.GetFieldValue(""Billing Account Id"");
						if (sBlockFor != """" && sBlockFor != null)
						{
							if(sBlockFor != vBillingAccnt)
							{
								TheApplication().RaiseErrorText(""The Selected SIM is Reserved for Another Customer (as part of Migration). Please Select Another SIM"");
								return (CancelOperation);
							}
						}

					}
				}	
				sRMSNumberbc = null;
				sRMSNumberbo = null;
			}
			bcOrder = null;
			boOrder = null;
			appObj = null;
			break;

			case ""STC Authorization Code"":
			oldAuthorityCode = this.GetFieldValue(""STC Authorization Code"");
			appObj = TheApplication();
			this.ActivateField(""Root Order Item Id""); 
			sRootId = this.GetFieldValue(""Root Order Item Id"");
			sId = this.GetFieldValue(""Id"");
			OrderHeaderId = GetFieldValue(""Order Header Id"");
			boOrder = appObj.GetBusObject(""Order Entry (Sales)"");
			bcOrder = boOrder.GetBusComp(""Order Entry - Orders"");
			with(bcOrder)
			{
				SetViewMode(AllView);
				ActivateField(""STC Order Sub Status"");
				ClearToQuery();
				SetSearchSpec(""Id"",OrderHeaderId);
				ExecuteQuery(ForwardOnly);	
				if (FirstRecord())
				{
					OrderSubstatus = GetFieldValue(""STC Order Sub Status"");
				}
				//OrderSubstatus = this.ParentBusComp().GetFieldValue(""STC Order Sub Status"");
				OrderLOVSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Order Validated"");
				OrdernewSubstatus = appObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_STATUS"",""Raised"");
				if (oldAuthorityCode != FieldValue)
				{
					if((OrderLOVSubstatus == OrderSubstatus) && (sRootId == sId))
					{
					SetFieldValue(""STC Order Sub Status"",OrdernewSubstatus);
					WriteRecord();
					}     
				}       
			}  
			bcOrder = null;
			boOrder = null;
			appObj = null;
			break;

			default : 
			break;
		}
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	} 
}
function BusComp_SetFieldValue (FieldName)
{

 try
 {
   var sSIMbc;  
   var sSIMno;
   var sAssocId;
   var sType;
   var sSpec;
   var appObj;
   var sRMSbo;
   var sRMSbc;
   var sMSISDN;
   var newMSISDN;
   var sSIMId;
   var sSIMType;
   var sStatus;
   var sAssNumber;
   var sAssId;
   var sRMSBO;
   var sRMSBC;
   var sConfig;
   var sCngName;
   var sSysBO;
   var sSysBC;
   var sArrCng = new Array;
   var i=0,j=0,SimFlag=0;
   var sParentBC;
   var sMigType;
   var sOrderId;
   var sMigration;
   var sMigration2,sMigration1,sMigration3,sMigration4;
   var sysname,sRetainFlag=0;
   var isSimRetain,sActionCode;
   var strIsBS,sAllocatd;
   var sRMSNumbc,sRMSNumbo,bcOrder,boOrder;
   var sOrderType,sOrderTypeLOV;
   
   switch(FieldName)
   {
      case ""STC ICCID"":
               
            this.SetFieldValue(""STC MSISDN Paired"",""N"");
            WriteRecord();
            sSIMno = this.GetFieldValue(""STC ICCID"");
            appObj = TheApplication();
            sRMSbo = appObj.GetBusObject(""RMS NM Number Enquiry"");
            sRMSbc = sRMSbo.GetBusComp(""RMS NM Number Enquiry""); 
            sParentBC = this.ParentBusComp();
            sOrderId = this.GetFieldValue(""Order Header Id"");
            sActionCode = this.GetFieldValue(""Action Code"");
            isSimRetain = TheApplication().GetProfileAttr(""SimRetain"");
            sMigType = TheApplication().GetProfileAttr(""MigType"");

			var sCpsFlag = sParentBC.GetFieldValue(""STC Billing CPS Flag"");
            //Send To POS Order - After SIM Number Change
			if (this.GetFieldValue(""STC POS Flag"") == ""Y"" && this.GetFieldValue(""STC ICCID"") != """")
			{
				var bsService,bsin,bsout;
				bsService = appObj.GetService(""Workflow Process Manager"");
				bsin = appObj.NewPropertySet();
				bsout = appObj.NewPropertySet();
				bsin.SetProperty(""ProcessName"", ""STC Send Order Details to POS"");
				bsin.SetProperty(""Object Id"",sOrderId);
				bsService.InvokeMethod(""RunProcess"", bsin, bsout);
			}
			//End of Send To POS   

            with(sParentBC)
            {
            	ActivateField(""STC Migration Type"");
            	ActivateField(""SIM Retension Flag Calc Field"");
            	SetViewMode(AllView);
            	ClearToQuery();
            	SetSearchSpec(""Id"",sOrderId);
            	ExecuteQuery(ForwardOnly);
            	
            	if(FirstRecord())
            	{
            	//	sMigType = GetFieldValue(""STC Migration Type"");
            	//	isSimRetain = GetFieldValue(""SIM Retension Flag Calc Field"");
            	//	isSimRetain = ""N""; //remove this
            	}
            }
                                          
              
             with(sRMSbc)
             {
                 ActivateField(""Assoc Start Id"");
                 ActivateField(""Num Mstr Number String"");
                 SetViewMode(AllView);
                 ClearToQuery();
                 SetSearchSpec(""Num Mstr Number String"",sSIMno);
                 ExecuteQuery(ForwardOnly);
                 
                  if(FirstRecord())
                  {
                    sAssocId = GetFieldValue(""Assoc Start Id"");
                    ActivateField(""Assoc Start Id"");
                    ActivateField(""Num Mstr Number String"");
                    sType = TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"", ""MSISDN"");
                    sSpec = ""[Assoc Start Id] = '"" + sAssocId + ""' AND [Number Type] ='"" + sType +""'"";
                    SetViewMode(AllView);
                    ClearToQuery();
                    SetSearchExpr(sSpec);
                    ExecuteQuery(ForwardOnly);
                    
                    if(FirstRecord())
                    {
						if(sCpsFlag == ""Y"")
						{
							this.SetFieldValue(""STC MSISDN Paired"",""N"");
						}
						else
						{
							 sMSISDN = GetFieldValue(""Num Mstr Number String"");
							 this.ActivateField(""Service Id"");
							 this.SetFieldValue(""Service Id"",sMSISDN);
							 BlockRe_selection (vOldMSISDN,sMSISDN);
							 this.SetFieldValue(""STC MSISDN Paired"",""Y"");
						 }
        
                    }
                    else
                    {
						if(sCpsFlag == ""Y"")
						{
							this.SetFieldValue(""STC MSISDN Paired"",""N"");
						}
						else
						{
							this.SetFieldValue(""STC MSISDN Paired"",""N"");
							this.ActivateField(""Service Id"");
							this.SetFieldValue(""Service Id"","""");
						}
                    }  
                  }   
 /*                 
 // Added by devender
                 ActivateField(""Parent Assoc Id"");
                 ActivateField(""Num Mstr Number String"");
                 ActivateField(""Type"");
                 ActivateField(""Status"");
                 SetViewMode(AllView);
                 ClearToQuery();
                 SetSearchSpec(""Num Mstr Number String"",sSIMno);
                 ExecuteQuery(ForwardOnly);   
                 
                 if(FirstRecord())
                 {
                 	sSIMId = GetFieldValue(""Id"");
                 	sSIMType = GetFieldValue(""Type"");
                 	sStatus = GetFieldValue(""Status"");
                 	sAssId = GetFieldValue(""Assoc Start Id"");
                 	
                 }
                    
          	} 
          	
          //	sMigType = ""Corp Post To Inv Pre"";  //remove this
          	
          	sMigration1 = TheApplication().InvokeMethod(""LookupValue"",""STC_MIGRATION_TYPE"",""Inv Post To Corp Post"");
          	sMigration2 = TheApplication().InvokeMethod(""LookupValue"",""STC_MIGRATION_TYPE"",""Inv Pre To Corp Post"");
          	sMigration3 = TheApplication().InvokeMethod(""LookupValue"",""STC_MIGRATION_TYPE"",""Corp Post To Inv Pre"");
          	sMigration4 = TheApplication().InvokeMethod(""LookupValue"",""STC_MIGRATION_TYPE"",""Corp Post To Inv Post"");
          
       		if((sMigType == sMigration3 || sMigType == sMigration4) && isSimRetain == ""Y"")
       		{
       			sRetainFlag = 1;
       		}
       
       		if(sMigType != sMigration1 && sMigType != sMigration2 && sMigType != sMigration3 && sMigType != sMigration4)
       		{
       			sRetainFlag = 2;
       		}
       		
       	  	if(sRetainFlag == ""0"" && sActionCode == ""Add"")
       	  	{
          			var sBC = sRMSbo.GetBusComp(""RMS NM Association Number Type Display"");
          	
          			with(sBC)
          			{
          				ActivateField(""Assoc Start Id"");
          				ActivateField(""Associated Number"");
          				ActivateField(""Associated Type"");
          				SetViewMode(AllView);
                		ClearToQuery();
                		SetSearchSpec(""Assoc Start Id"",sAssId);
                		ExecuteQuery(ForwardOnly);
                
                		if(FirstRecord())
                		{
                			sAssNumber = GetFieldValue(""Associated Number"");
                			var sAssType = GetFieldValue(""Associated Type"");
                		}
           			}
          	
          	
          			sRMSBO = TheApplication().GetBusObject(""RMS SIM Number"");
          			sRMSBC = sRMSBO.GetBusComp(""RMS SIM Number"");
          
   			
   					with(sRMSBC)
   					{
   						ActivateField(""Concatenated Number"");
   						ActivateField(""Sim Card Config Name"");
   						ActivateField(""Status"");
   						SetViewMode(AllView);
   						ClearToQuery();
   						SetSearchSpec(""Concatenated Number"", sAssNumber);
   						ExecuteQuery(ForwardOnly);
   				
   						if(FirstRecord())
   						{
   							sConfig = GetFieldValue(""Sim Card Config Name"");
   							var sSIMStatus = GetFieldValue(""Status"");
   						}
   				
   					}
   			
   					if(sMigType == sMigration1 || sMigType == sMigration2)
   					{
   						sysname = ""SIM_INV_CORP_TYPE"";
   					}
   					else
   					{
   						sysname = ""SIM_CORP_INV_TYPE"";
   					}
   			
   					sSysBO = TheApplication().GetBusObject(""System Preferences"");
   					sSysBC = sSysBO.GetBusComp(""System Preferences"");
   			
   					with(sSysBC)
   					{
   						ActivateField(""Name"");
   						ActivateField(""Value"");
   						SetViewMode(AllView);
   						ClearToQuery();
   						SetSearchSpec(""Name"",sysname);
   						ExecuteQuery(ForwardOnly);
   				
   						if(FirstRecord())
   						{
   							sCngName = GetFieldValue(""Value"");	
   						}
   				
   							sArrCng = sCngName.split("";"");
   				
   						for(i=0;i<=sArrCng.length;i++)
   						{
   							if(sArrCng[i]== sConfig)
   							{
   								SimFlag = 0;
   								break;
   							}
   							else
   							{
   								if(sMigType == sMigration1 || sMigType == sMigration2)
   								{
   									SimFlag = 1;
   								}
   								else
   								{
   									SimFlag = 2;	
   								}
   						
   							}
   						}
   			   
   					}
   				
   				/*	if(SimFlag == ""1"")  //changed to 1
   					{
   						this.SetFieldValue(""STC ICCID"", """");
   						TheApplication().RaiseErrorText(""Please select the Corporate SIM"");
   						return(CancelOperation);
   					}
   					else if(SimFlag == ""2"")
   					{
   						this.SetFieldValue(""STC ICCID"", """");
   						TheApplication().RaiseErrorText(""Please select the Individual SIM"");
   						return(CancelOperation);
   					}
   			
   		   			TheApplication().SetProfileAttr(""SimRetain"","""");
  					TheApplication().SetProfileAttr(""MigType"","""");	*/		
   			}  // end if 
   					
          	//end dev	 
               WriteRecord(); 
               
      
               
               
               	BlockRe_selection (vOldSIM,sSIMno);
                break;
                
         case ""Service Id"":
    		this.ActivateField(""Service Id"");
    		this.ActivateField(""Order Header Id"");
    		sOrderId = this.GetFieldValue(""Order Header Id"");
    		newMSISDN = this.GetFieldValue(""Service Id"");  
    	//	sOrderType = this.GetFieldValue(""STC Order Sub Type"");          		     	
			sRMSNumbo = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
			sRMSNumbc = sRMSNumbo.GetBusComp(""RMS NM Number Enquiry""); 
			sOrderTypeLOV = TheApplication().InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Provide"");
		
			boOrder = TheApplication().GetBusObject(""Order Entry (Sales)"");			
			bcOrder = boOrder.GetBusComp(""Order Entry - Orders"");	
			with (bcOrder)
				{
				
					SetViewMode(AllView);
					ActivateField(""STC Order SubType"");
					ClearToQuery();
					SetSearchSpec(""Id"",sOrderId);
					ExecuteQuery(ForwardOnly);	
					if(FirstRecord())		
					sOrderType = GetFieldValue(""STC Order SubType"");
					if(sOrderType == sOrderTypeLOV)
                	{	                                           
            			with(sRMSNumbc)
            			{
							ActivateField(""Number String"");
							ActivateField(""Allocated To"");
			                SetViewMode(AllView);
			                ClearToQuery();
			                SetSearchSpec(""Number String"",newMSISDN);
			                ExecuteQuery(ForwardOnly);    
                    
				                if(FirstRecord())
				                {	
									sAllocatd = GetFieldValue(""Allocated To""); 
					 				strIsBS = TheApplication().GetProfileAttr(""STC GroupCode Id"");
									var loginname = TheApplication().GetProfileAttr(""Login Name""); // [Neha kasat][18092013][For SIP ISDN]
									
					                	if (strIsBS != sAllocatd && loginname!=""SADMIN"") // [Neha kasat][18092013][For SIP ISDN]
					                	{
										TheApplication().RaiseErrorText(""You do not have access to select this MSISDN"");
										//[MANUJ] : Avaya Check
									/*	var AvayaPlanCheck = CPBXCheck (sOrderId);
										var ActView = TheApplication().ActiveViewName();
										if (!(AvayaPlanCheck == ""Y"" && ActView !=  ""Order Entry - Line Items Detail View (Sales)""))
										{
											TheApplication().RaiseErrorText(""You do not have access to select this MSISDN"");
										}*/
						      				return(CancelOperation);
						       			}//end of if
			
										}//end of if
										}//end of if
									}//end of with
								}
    		BlockRe_selection (vOldMSISDN,newMSISDN);
       break;   		  
       		       
                
       default :
                break;
    }
    return (ContinueOperation); 
  }//end of try
  catch(e)
  {
    throw(e);
  }
  finally
  {
  	
  }
                           
          
   
}
function CPBXCheck (OrderId)
{

	var appObj;
	var psInputs,psOutputs,bsBlockNumber;
	var AvayaCheckFlag = ""N"";
	appObj = TheApplication();
                                    
            bsBlockNumber = appObj.GetService(""Workflow Process Manager"") ;
            psInputs = appObj.NewPropertySet();
            psOutputs = appObj.NewPropertySet();       
            psInputs.SetProperty(""ProcessName"",""STC CPBX UI Order Restriction"");
            psInputs.SetProperty(""Object Id"",OrderId); // variable set at PreSetFieldValue
                        
            bsBlockNumber.InvokeMethod(""RunProcess"",psInputs,psOutputs);
			AvayaCheckFlag = psOutputs.GetProperty(""ErrorFlag"");
			return(AvayaCheckFlag);
				psInputs = null;
			    psOutputs = null;
			    bsBlockNumber = null;
			    appObj = null;
 




}
function CallMSISDNPackageCheck(ServiceId,PartNumber)
{
	try
	{
		var vAppObj: Application = TheApplication();
		var sBSService: Service = vAppObj.GetService(""Workflow Process Manager"");
		var vInPS: PropertySet = vAppObj.NewPropertySet();
		var vOutPS: PropertySet = vAppObj.NewPropertySet();
		vInPS.SetProperty(""ProcessName"", ""STC MSISDN Package Validation Workflow"");
		vInPS.SetProperty(""STC MSISDN"",ServiceId);
		vInPS.SetProperty(""STC Part Code"",PartNumber);
		sBSService.InvokeMethod(""RunProcess"", vInPS, vOutPS);
		var vMsg = vOutPS.GetProperty(""Error Message"");
		return vMsg;
	}
	finally
	{
		vAppObj = null;
		vInPS = null;
		vOutPS = null;
		sBSService = null;
	}
}
function BusComp_PreInvokeMethod (MethodName)
{
	var ireturn;
	
	try
	{
		switch(MethodName)
		{
			case ""Submit"":
				//TheApplication().SetProfileAttr(""sSearch"", """");
				TransactionId();
				return (CancelOperation);
				break;
			case ""DeleteRecord"":
				//TransactionId();
				return (CancelOperation);
				break;
			default:
				return (ContinueOperation);
				break;
		}	
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	}
}
function BusComp_PreQuery ()
{
	return (ContinueOperation);
}
function BusComp_Query ()
{
	this.NewRecord(NewAfter);
}
function TransactionId()
{
try
{
	var vValue = this.GetFieldValue(""Value"");
	var vNewVal ="""";
	var vNewValSearch ="""";
	var spec = """";
	var sLength = vValue.length;
	var lastchar = vValue.charAt(sLength - 1);
	if(lastchar == ""*"")
	{
		vNewVal = vValue.substring(0, sLength - 1);
		vNewVal = vNewVal+""%"";
		vNewValSearch = vValue.substring(0, sLength - 1);
		vNewValSearch = vNewValSearch+""*"";
	}
	var vQueryField = this.GetFieldValue(""Query On"");
	var oApp = TheApplication();
	var ObjectId;
	var sView;
	var svcUI = oApp.GetService(""FINS Teller UI Navigation"");
	var psIn1 = oApp.NewPropertySet();
	var psOut1 = oApp.NewPropertySet();
	var sMessage = ""N"",sType = """";
	var BusinessComponent = """",View = """";
	var sSearch = """";
	psIn1.SetProperty(""Refresh All"",""Y"");
	svcUI.InvokeMethod(""RefreshCurrentApplet"",psIn1,psOut1);
	var Inputs: PropertySet   = oApp.NewPropertySet();
	var Outputs:PropertySet = oApp.NewPropertySet();
	var svcbsService: Service = oApp.GetService(""Workflow Process Manager"");
	if(vQueryField == """" || vQueryField == null)
	{
		sMessage = ""Please select a value for Query On."";
	}
	else if(vValue == """" || vValue == null)
	{
		sMessage = ""Please provide a value for Query On Field."";
	}
	else if (vValue != """" && vValue != null && vQueryField != """" && vQueryField != null)
	{
		var sOrderBC = oApp.GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Entry - Orders"");
		var sTTBC = oApp.GetBusObject(""Service Request"").GetBusComp(""Service Request"");
		var sEcomBC = oApp.GetBusObject(""STC Ecommerce Query BO"").GetBusComp(""STC ECom Order BC"");
		var sEcomPreBookBC = oApp.GetBusObject(""STC Ecommerce Query BO"").GetBusComp(""STC ECommerce PreBooking BC"");
		if(vQueryField == ""Reference Id"")
		{
			with(sOrderBC)
			{
				ActivateField(""Order Number"");
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(""Order Number"",vValue);
				ExecuteQuery();
				if(FirstRecord())
				{
					ObjectId = GetFieldValue(""Id"");
					BusinessComponent = ""Order Entry - Orders"";
					View = ""Order Entry - Line Items Detail View (Sales)"";
					sType = ""Reference"";					
				}
				else
				{
					with(sTTBC)
					{
						ActivateField(""SR Number"");
						ClearToQuery();
						SetViewMode(AllView);
						SetSearchSpec(""SR Number"",vValue);
						ExecuteQuery();
						if(FirstRecord())
						{
							ObjectId = 	GetFieldValue(""Id"");
							BusinessComponent = ""Service Request"";
							View = ""STC Ecommerce Dummy Order TT View"";	
							sType = ""Reference"";				
						}
						else
						{
							with(sEcomPreBookBC)
							{
								ClearToQuery();
								SetViewMode(AllView);
								SetSearchSpec(""Id"",vValue);
								ExecuteQuery();
								if(FirstRecord())
								{
									BusinessComponent = ""STC ECommerce PreBooking BC"";
									View = ""STC Ecommerce Device Registration View"";		
									ObjectId = 	vValue;
									sType = ""Reference"";
								}
								else
								{
									sMessage = ""Provided Transaction Id is incorrect."";
								}
							}//with(sEcomPreBookBC)
						}//else	
					}//with(sTTBC)
				}//else
			}//with(sOrderBC)
		}//if(vQueryField == ""Reference Id"")
		else if (vQueryField == ""Macala Transaction Id"" || vQueryField == ""Portal Order Number"" || vQueryField == ""CPR"")
		{
			with(sEcomBC)
			{
				ActivateField(""STC Portal Order Id"");
				ActivateField(""STC Macalla Transaction Id"");
				ActivateField(""STC CPR"");
				ClearToQuery();
				SetViewMode(AllView);
				if(vQueryField == ""Macala Transaction Id"")
				{
					if(vNewVal == NULL || vNewVal == """")
					{
						oApp.SetProfileAttr(""sSearch"", vValue);
						spec  = ""[STC Macalla Transaction Id] LIKE '"" + vValue + ""'"";
						//SetSearchSpec(""STC Macalla Transaction Id"",vValue);
					}
					else 
					{
						oApp.SetProfileAttr(""sSearch"", vNewVal);
						spec  = ""[STC Macalla Transaction Id] LIKE '"" + vNewValSearch + ""'"";
						//SetSearchSpec(""Macala Transaction Id"",vNewVal);
					}
				}
				else if(vQueryField == ""Portal Order Number"")
				{
					if(vNewVal == NULL || vNewVal == """")
					{
						oApp.SetProfileAttr(""sSearch"", vValue);
						spec  = ""[STC Portal Order Id] LIKE '"" + vValue + ""'"";
						//SetSearchSpec(""STC Portal Order Id"",vValue);
					}
					else 
					{
						oApp.SetProfileAttr(""sSearch"", vNewVal);
						spec  = ""[STC Portal Order Id] LIKE '"" + vNewValSearch + ""'"";
						//SetSearchSpec(""STC Portal Order Id"",vNewVal);
					}
				}
				else if(vQueryField == ""CPR"")
				{
					if(vNewVal == NULL || vNewVal == """")
					{
						oApp.SetProfileAttr(""sSearch"", vValue);
						spec  = ""[STC CPR] LIKE '"" + vValue + ""'"";
						//SetSearchSpec(""STC CPR"",vValue);
					}
					else 
					{
						oApp.SetProfileAttr(""sSearch"", vNewVal);
						spec  = ""[STC CPR] LIKE '"" + vNewValSearch + ""'"";
						//SetSearchSpec(""STC CPR"",vNewVal);
					}
				}
				SetSearchExpr(spec);
				ExecuteQuery();
				if(FirstRecord())
				{
					BusinessComponent = ""STC ECom Order BC"";
					View = ""STC Ecommerce Dummy Order View"";
				}
				else
				{
					sMessage = ""Provided Transaction Id is incorrect."";
				}//else
			}//with(sEcomBC)
		}//else if vQueryField	
	}//if vValue
	else
	{
		sMessage = ""Provided Transaction Id is incorrect."";
	}//else
	if(sMessage != ""N"")
	{
		this.ActivateField(""Query On"");
		this.ActivateField(""STC Result"");
		this.ActivateField(""Value"");
		this.SetFieldValue(""Query On"", vQueryField);
		this.SetFieldValue(""STC Result"",sMessage);
		this.SetFieldValue(""Value"",vValue);
		this.WriteRecord();
	}
	else
	{
		this.WriteRecord();//MAYANK
		if(sType == ""Reference"")
		{
			Inputs.SetProperty(""ProcessName"", ""STCeCommerceEcommerceGoToViewProcess"");
			Inputs.SetProperty(""Object Id"",ObjectId);	
			Inputs.SetProperty(""BusinessComponent"",BusinessComponent);
			Inputs.SetProperty(""View"",View);					
			svcbsService.InvokeMethod(""RunProcess"", Inputs, Outputs);
		}
		else
		{
			Inputs.SetProperty(""ProcessName"", ""STCeCommerceEcommerceGoToViewProcess"");
			Inputs.SetProperty(""BusinessComponent"",BusinessComponent);
			Inputs.SetProperty(""View"",View);					
			svcbsService.InvokeMethod(""RunProcess"", Inputs, Outputs);
		}
	}
return (CancelOperation);
}
catch(e)
{

}
finally
{
	vValue = null;
	vQueryField = null;
	Inputs = null;
	Outputs = null;
	sEcomBC = null;
	sEcomPreBookBC = null;
	sTTBC = null;
	sOrderBC = null;
	svcbsService = null;
}
}
"//Your public declarations go here...  
"
function BusComp_PreInvokeMethod (MethodName)
{
	var Inputs;
	var Outputs;
	var appObj;
	var bsGetNextFirst1;
	var bsGetNextLast1;
	var psInputs;
	var psOutputs;
	var ErrMsg;
	try
	{
		appObj=TheApplication();
		Inputs = appObj.NewPropertySet();
		Outputs = appObj.NewPropertySet();
		switch(MethodName)
		{   
			case ""GetNextFirst"":
			{
				GetNextFirst(Inputs,Outputs);
				bsGetNextFirst1 = appObj.GetService(""FINS Teller UI Navigation"");
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				psInputs.SetProperty(""Refresh All"", ""Y"");
				bsGetNextFirst1.InvokeMethod(""RefreshCurrentApplet"", psInputs, psOutputs);
				
				ErrMsg = Outputs.GetProperty(""sGotNextFirst"");
				appObj.RaiseErrorText(ErrMsg);
				return (CancelOperation);
				break;
			}
			case ""GetNextLast"":
			{
				GetNextLast(Inputs,Outputs);
				bsGetNextLast1 = appObj.GetService(""FINS Teller UI Navigation"");
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				psInputs.SetProperty(""Refresh All"", ""Y"");
				bsGetNextLast1.InvokeMethod(""RefreshCurrentApplet"", psInputs, psOutputs);
				
				ErrMsg = Outputs.GetProperty(""sGotNextLast"");
				appObj.RaiseErrorText(ErrMsg);
				return (CancelOperation);
				break;
			}
//SUMANK: added for Call Back SD
				case ""GetNextFirstActivity"":
				{
				GetNextFirstActivity(Inputs,Outputs);
				bsGetNextFirst1 = appObj.GetService(""FINS Teller UI Navigation"");
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				psInputs.SetProperty(""Refresh All"", ""Y"");
				bsGetNextFirst1.InvokeMethod(""RefreshCurrentApplet"", psInputs, psOutputs);
				
				ErrMsg = Outputs.GetProperty(""sGotNextFirst"");
				appObj.RaiseErrorText(ErrMsg);
				return (CancelOperation);
				break;
				}
				case ""GetNextLastActivity"":
				{
				GetNextLastActivity(Inputs,Outputs);
				bsGetNextLast1 = appObj.GetService(""FINS Teller UI Navigation"");
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				psInputs.SetProperty(""Refresh All"", ""Y"");
				bsGetNextLast1.InvokeMethod(""RefreshCurrentApplet"", psInputs, psOutputs);
				
				ErrMsg = Outputs.GetProperty(""sGotNextLast"");
				appObj.RaiseErrorText(ErrMsg);
				return (CancelOperation);
				break;
				}


//[MARK:7-Oct-2019 SD:: Business Products Bulk Activation – Phase II]
				case ""GetNextFirstLead"":
				{
				GetNextFirstLead(Inputs,Outputs);
				bsGetNextFirst1 = appObj.GetService(""FINS Teller UI Navigation"");
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				psInputs.SetProperty(""Refresh All"", ""Y"");
				bsGetNextFirst1.InvokeMethod(""RefreshCurrentApplet"", psInputs, psOutputs);
				
				ErrMsg = Outputs.GetProperty(""sGotNextFirst"");
				appObj.RaiseErrorText(ErrMsg);
				return (CancelOperation);
				break;
				}
				case ""GetNextLastLead"":
				{
				GetNextLastLead(Inputs,Outputs);
				bsGetNextLast1 = appObj.GetService(""FINS Teller UI Navigation"");
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				psInputs.SetProperty(""Refresh All"", ""Y"");
				bsGetNextLast1.InvokeMethod(""RefreshCurrentApplet"", psInputs, psOutputs);
								
				ErrMsg = Outputs.GetProperty(""sGotNextLast"");
				appObj.RaiseErrorText(ErrMsg);
				return (CancelOperation);
				break;
				}




//SUMANK: added for Call Back SD
			case ""GetHVC"":
			{
				GetHVC(Inputs,Outputs); 
				bsGetNextLast1 = appObj.GetService(""FINS Teller UI Navigation"");
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				psInputs.SetProperty(""Refresh All"", ""Y"");
				bsGetNextLast1.InvokeMethod(""RefreshCurrentApplet"", psInputs, psOutputs);
				ErrMsg = Outputs.GetProperty(""sGotNextFirst""); 
				appObj.RaiseErrorText(ErrMsg);
				return (CancelOperation);
				break;
			}
			//Mayank: Added for Get All TT Queue --------------- START -----------------
			case ""GetAllQueue"":
			{
				GetAllQueue(Inputs,Outputs); 
				return (CancelOperation);
				break;
			}//Mayank: Added for Get All TT Queue --------------- STOP -----------------
			default:
			break;
		} 
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e); 	
	}
	finally
	{
		Inputs = null;
		Outputs = null;
		psInputs = null;
		psOutputs = null;
		bsGetNextFirst1 = null;
		bsGetNextLast1=null;
		appObj = null;
	}
}
function BusComp_PreInvokeMethod (MethodName)
{
	var Inputs;
	var Outputs;
	var appObj;
	var bsGetNextFirst1;
	var bsGetNextLast1;
	var psInputs;
	var psOutputs;
	var ErrMsg;
	try
	{
		appObj=TheApplication();
		Inputs = appObj.NewPropertySet();
		Outputs = appObj.NewPropertySet();
		switch(MethodName)
		{   
		//Srinivas: Added for tickets prioritization
			case ""Priority-Tickets"":
			{
				GetPriorityTickets(Inputs,Outputs);
				bsGetNextFirst1 = appObj.GetService(""FINS Teller UI Navigation"");
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				psInputs.SetProperty(""Refresh All"", ""Y"");
				bsGetNextFirst1.InvokeMethod(""RefreshCurrentApplet"", psInputs, psOutputs);
				
				ErrMsg = Outputs.GetProperty(""sGotNextLast"");
				appObj.RaiseErrorText(ErrMsg);
				return (CancelOperation);
				break;
			}
			case ""GetNextFirst"":
			{
				GetNextFirst(Inputs,Outputs);
				bsGetNextFirst1 = appObj.GetService(""FINS Teller UI Navigation"");
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				psInputs.SetProperty(""Refresh All"", ""Y"");
				bsGetNextFirst1.InvokeMethod(""RefreshCurrentApplet"", psInputs, psOutputs);
				
				ErrMsg = Outputs.GetProperty(""sGotNextFirst"");
				appObj.RaiseErrorText(ErrMsg);
				return (CancelOperation);
				break;
			}
			case ""GetNextLast"":
			{
				GetNextLast(Inputs,Outputs);
				bsGetNextLast1 = appObj.GetService(""FINS Teller UI Navigation"");
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				psInputs.SetProperty(""Refresh All"", ""Y"");
				bsGetNextLast1.InvokeMethod(""RefreshCurrentApplet"", psInputs, psOutputs);
				
				ErrMsg = Outputs.GetProperty(""sGotNextLast"");
				appObj.RaiseErrorText(ErrMsg);
				return (CancelOperation);
				break;
			}
//SUMANK: added for Call Back SD
				case ""GetNextFirstActivity"":
				{
				GetNextFirstActivity(Inputs,Outputs);
				bsGetNextFirst1 = appObj.GetService(""FINS Teller UI Navigation"");
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				psInputs.SetProperty(""Refresh All"", ""Y"");
				bsGetNextFirst1.InvokeMethod(""RefreshCurrentApplet"", psInputs, psOutputs);
				
				ErrMsg = Outputs.GetProperty(""sGotNextFirst"");
				appObj.RaiseErrorText(ErrMsg);
				return (CancelOperation);
				break;
				}
				case ""GetNextLastActivity"":
				{
				GetNextLastActivity(Inputs,Outputs);
				bsGetNextLast1 = appObj.GetService(""FINS Teller UI Navigation"");
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				psInputs.SetProperty(""Refresh All"", ""Y"");
				bsGetNextLast1.InvokeMethod(""RefreshCurrentApplet"", psInputs, psOutputs);
				
				ErrMsg = Outputs.GetProperty(""sGotNextLast"");
				appObj.RaiseErrorText(ErrMsg);
				return (CancelOperation);
				break;
				}


//[MARK:7-Oct-2019 SD:: Business Products Bulk Activation – Phase II]
				case ""GetNextFirstLead"":
				{
				GetNextFirstLead(Inputs,Outputs);
				bsGetNextFirst1 = appObj.GetService(""FINS Teller UI Navigation"");
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				psInputs.SetProperty(""Refresh All"", ""Y"");
				bsGetNextFirst1.InvokeMethod(""RefreshCurrentApplet"", psInputs, psOutputs);
				
				ErrMsg = Outputs.GetProperty(""sGotNextFirst"");
				appObj.RaiseErrorText(ErrMsg);
				return (CancelOperation);
				break;
				}
				case ""GetNextLastLead"":
				{
				GetNextLastLead(Inputs,Outputs);
				bsGetNextLast1 = appObj.GetService(""FINS Teller UI Navigation"");
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				psInputs.SetProperty(""Refresh All"", ""Y"");
				bsGetNextLast1.InvokeMethod(""RefreshCurrentApplet"", psInputs, psOutputs);
								
				ErrMsg = Outputs.GetProperty(""sGotNextLast"");
				appObj.RaiseErrorText(ErrMsg);
				return (CancelOperation);
				break;
				}




//SUMANK: added for Call Back SD
			case ""GetHVC"":
			{
				GetHVC(Inputs,Outputs); 
				bsGetNextLast1 = appObj.GetService(""FINS Teller UI Navigation"");
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				psInputs.SetProperty(""Refresh All"", ""Y"");
				bsGetNextLast1.InvokeMethod(""RefreshCurrentApplet"", psInputs, psOutputs);
				ErrMsg = Outputs.GetProperty(""sGotNextFirst""); 
				appObj.RaiseErrorText(ErrMsg);
				return (CancelOperation);
				break;
			}
			//Mayank: Added for Get All TT Queue --------------- START -----------------
			case ""GetAllQueue"":
			{
				GetAllQueue(Inputs,Outputs); 
				return (CancelOperation);
				break;
			}//Mayank: Added for Get All TT Queue --------------- STOP -----------------
			default:
			break;
		} 
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e); 	
	}
	finally
	{
		Inputs = null;
		Outputs = null;
		psInputs = null;
		psOutputs = null;
		bsGetNextFirst1 = null;
		bsGetNextLast1=null;
		appObj = null;
	}
}
function GetAllQueue(Inputs,Outputs)
{ //Mayank: Added for Get All TT Queue
	var appObj;
	var sQueueId;
	var sEmpId;
	var sInps,sOutps,sWFSrvc;
	try
	{
		appObj = TheApplication();
		sQueueId = this.GetFieldValue(""Id"");
		sEmpId = appObj.LoginId();
		sInps = appObj.NewPropertySet();
		sOutps = appObj.NewPropertySet();
		sWFSrvc = appObj.GetService(""Workflow Process Manager"");			
		sInps.SetProperty(""QueueId"",sQueueId);	
		sInps.SetProperty(""UserId"",sEmpId);	
		sInps.SetProperty(""ProcessName"", ""STC All TT Queue Process"");
		sInps.SetProperty(""Process"", ""UpdateUser"");
		sOutps = sWFSrvc.InvokeMethod(""RunProcess"",sInps,sOutps);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		sOutps = null;
		sInps = null;
		sWFSrvc = null;
		appObj = null;
	}
}
function GetHVC(Inputs,Outputs)
{ 
	var appObj;
	var sQueueId;
	var boServiceRequest;
	var bcServiceRequest;
	var sSRType;
	var sSpec;
	var sNextRec;
	var sEmpId;
	var sCurrSubStat;
	var sCurrStat;   
	var sSubstat;
	var sStatus;  
	var sNextSR;
	var bsGetNextFirst1;
	var psInputs;
	var psOutputs; 
	var sGotNextFirst;
	var sMsg;
	try
	{
		appObj = TheApplication();
		sQueueId = this.GetFieldValue(""Id"");
		sNextSR = ""N"";
		sEmpId = appObj.LoginId();
		boServiceRequest = appObj.GetBusObject(""Service Request"");
		bcServiceRequest = boServiceRequest.GetBusComp(""Service Request"");
		with(bcServiceRequest)	
		{
			    SetViewMode(AllView);
			 	ClearToQuery();
			 	ActivateField(""Status"");
			 	ActivateField(""Owned By Id"");
			 	ActivateField(""Priority"");
			 	sSpec =  ""[Owned By Id] = '"" + sQueueId  + ""' AND [Status] <> 'Closed' AND [STC HVC]='Premier'""; 
			 	SetSearchExpr(sSpec);
			 	SetSortSpec(""Opened Date(ASCENDING)"");  
			 	//SetSortSpec(""Priority,Opened Date"");
			 	ExecuteQuery(ForwardOnly);
			 	sNextRec = FirstRecord();
			 	if(sNextRec)
			 	{
			 		sCurrSubStat = GetFieldValue(""Sub-Status"");
			 		sNextSR =GetFieldValue(""SR Number"");
					SetFieldValue(""Owned By Id"",sEmpId);
					sSubstat = appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""Assigned"");
					SetFieldValue(""Sub-Status"", sSubstat); 					
					WriteRecord();
			 	 } 
			 	 if(sNextSR == 'N')   
			 	 {
			 	 	sMsg = ""There are no items Held in the Queue"";
			 	 	Outputs.SetProperty(""sGotNextFirst"",sMsg);
			 	 }
			 	 else
			 	 { 
			 	    sMsg = ""SR# "" + sNextSR + "" has been Assigned to you."";
			 	    Outputs.SetProperty(""sGotNextFirst"",sMsg);
			 	 }			 	 
		 }//with(bcServiceRequest)
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcServiceRequest = null;
		boServiceRequest = null;
		appObj = null;
	}
}
"//***********************************************************************************************************//
//Purpose: Assign SR to Employee from Queue.
//Author: Pankaj Gaikwad
//Release: R 1.0
//Date: 30-Oct-09
//*************************************************************************************************************//

function GetNextFirst(Inputs,Outputs)
{
	var appObj;
	var sQueueId;
	var boServiceRequest;
	var bcServiceRequest;
	var sSRType;
	var sSpec;
	var sNextRec;
	var sEmpId;
	var sCurrSubStat;
	var sCurrStat;
	var sSubstat;
	var sStatus;
	var sNextSR;
	var bsGetNextFirst1;
	var psInputs;
	var psOutputs;
	var sGotNextFirst;
	var sMsg;
	try
	{
		appObj = TheApplication();
		sQueueId = this.GetFieldValue(""Id"");
		sNextSR = ""N"";
	//	sSRType = this.GetFieldValue(""STC Queue Sub Type"");
		sEmpId = appObj.LoginId();
		boServiceRequest = appObj.GetBusObject(""Service Request"");
		bcServiceRequest = boServiceRequest.GetBusComp(""Service Request"");
		with(bcServiceRequest)	
		{
			    SetViewMode(AllView);
			 	ClearToQuery();
			// 	ActivateField(""SR Type"");
			 	ActivateField(""Status"");
			 	ActivateField(""Owned By Id"");
			 //	ActivateField(""Call Back"");
			 //	ActivateField(""STC New Preferred Timing"");
			 	sSpec =  ""[Owned By Id] = '"" + sQueueId  + ""' AND [Status] <> 'Closed'"";
			 	SetSearchExpr(sSpec);
			 	//SetSortSpec(""Opened Date(ASCENDING)"");//Mayank
			 	SetSortSpec(""Commit Time(ASCENDING),Opened Date(ASCENDING)"");//Mayank
			 	ExecuteQuery(ForwardOnly);
			 	sNextRec = FirstRecord();
			 	if(sNextRec)
			 	{
			 		sCurrSubStat = GetFieldValue(""Sub-Status"");
			 		sNextSR =GetFieldValue(""SR Number"");
					//currStat = GetFieldValue(""Status"");
					SetFieldValue(""Owned By Id"",sEmpId);
					sSubstat = appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""Assigned"");
					//fstatus = appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""Pending"");
				//	if(sCurrSubStat == ""Queued"")
					SetFieldValue(""Sub-Status"", sSubstat);
					
					WriteRecord();
			 	 }
			 	 //	sNextRec = NextRecord();
			 	 if(sNextSR == 'N')
			 	 {
			 	 	sMsg = ""There are no items Held in the Queue"";
			 	 	Outputs.SetProperty(""sGotNextFirst"",sMsg);
			 	 }
			 	 else
			 	 {
			 	    sMsg = ""SR# "" + sNextSR + "" has been Assigned to you."";
			 	    Outputs.SetProperty(""sGotNextFirst"",sMsg);
			 	 }
			 	 
		 }//with(bcServiceRequest)
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcServiceRequest = null;
		boServiceRequest = null;
		appObj = null;
	}
}
"//***********************************************************************************************************//
//Purpose: Assign Activity to Employee from Queue.
//Author: SUMAN KANUMURI
//*************************************************************************************************************//

function GetNextFirstActivity(Inputs,Outputs)
{
	var appObj;
	var sQueueId;
	var boServiceRequest;
	var bcServiceRequest;
	var sSRType;
	var sSpec;
	var sNextRec;
	var sEmpId;
	var sCurrSubStat;
	var sCurrStat;
	var sSubstat;
	var sStatus;
	var sNextSR;
	var bsGetNextFirst1;
	var psInputs;
	var psOutputs;
	var sGotNextFirst;
	var sMsg;
	try
	{
		appObj = TheApplication();
		sQueueId = this.GetFieldValue(""Id"");
		sNextSR = ""N"";
		sEmpId = appObj.LoginId();
		boServiceRequest = appObj.GetBusObject(""STC CBR Action"");
		bcServiceRequest = boServiceRequest.GetBusComp(""STC CBR Action"");
		with(bcServiceRequest)	
		{
			    SetViewMode(AllView);
			 	ClearToQuery();
			 	ActivateField(""Status"");
			 	ActivateField(""Primary Owner Id"");
			 	sSpec =  ""[Primary Owner Id] = '"" + sQueueId  + ""' AND ([Status] = 'Scheduled' OR [Status] = 'Queued')"";
			 	SetSearchExpr(sSpec);
			 	SetSortSpec(""Due(ASCENDING),Planned(DESCENDING)"");//Mayank
			 	ExecuteQuery(ForwardOnly);
			 	sNextRec = FirstRecord();
			 	if(sNextRec)
			 	{
			 		sNextSR =GetFieldValue(""Activity Id"");
					SetFieldValue(""Primary Owner Id"",sEmpId);
					SetFieldValue(""Status"",""Assigned"");
					WriteRecord();
					
			 	 }
			 	 //	sNextRec = NextRecord();
			 	 if(sNextSR == 'N')
			 	 {
			 	 	sMsg = ""There are no items Held in the Queue"";
			 	 	Outputs.SetProperty(""sGotNextFirst"",sMsg);
			 	 }
			 	 else
			 	 {
				 	
			 	    sMsg = ""Activity "" + sNextSR + "" has been Assigned to you."";
			 	    Outputs.SetProperty(""sGotNextFirst"",sMsg);
			 	 }
			 	 
		 }//with(bcServiceRequest)
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcServiceRequest = null;
		boServiceRequest = null;
		appObj = null;
	}
}
"//***********************************************************************************************************//
//Purpose: Assign Lead to Employee from queue.
//Author: MARKANDEYULU ENJAM
//*************************************************************************************************************//

function GetNextFirstLead(Inputs,Outputs)
{
	var appObj;
	var sQueueId;
	var boServiceRequest;
	var bcServiceRequest;
	var sSRType;
	var sSpec;
	var sNextRec;
	var sEmpId;
	var sCurrSubStat;
	var sCurrStat;
	var sSubstat;
	var sStatus;
	var sNextSR;
	var bsGetNextFirst1;
	var psInputs;
	var psOutputs;
	var sGotNextFirst;
	var sMsg;
	try
	{
		appObj = TheApplication();
		sQueueId = this.GetFieldValue(""Id"");
		sNextSR = ""N"";
		sEmpId = appObj.LoginId();
		boServiceRequest = appObj.GetBusObject(""Lead"");
		bcServiceRequest = boServiceRequest.GetBusComp(""Lead"");
		with(bcServiceRequest)	
		{
			    SetViewMode(AllView);
			 	ClearToQuery();
			 	ActivateField(""Id"");
			 	ActivateField(""Owned By Id"");
				ActivateField(""STC Lead Queue Type"");
			 	sSpec =  ""[Owned By Id] = '"" + sQueueId  + ""' AND [STC Lead Queue Type] = 'Queued'"";
			 	SetSearchExpr(sSpec);
				SetSortSpec(""Created(DESCENDING)"");//MARK
			 	//SetSortSpec(""Due(ASCENDING),Planned(DESCENDING)"");//Mayank
			 	ExecuteQuery(ForwardOnly);
			 	sNextRec = FirstRecord();
			 	if(sNextRec)
			 	{
			 		sNextSR =GetFieldValue(""Id"");
					//SetFieldValue(""Primary Owner Id"",sEmpId);
					SetFieldValue(""Owned By Id"",sEmpId);
					SetFieldValue(""STC Lead Queue Type"",""Assigned"");
					WriteRecord();
					
			 	 }
			 	 //	sNextRec = NextRecord();
			 	 if(sNextSR == 'N')
			 	 {
			 	 	sMsg = ""There are no items Held in the Queue"";
			 	 	Outputs.SetProperty(""sGotNextFirst"",sMsg);
			 	 }
			 	 else
			 	 {
				 	
			 	    sMsg = ""Lead "" + sNextSR + "" has been Assigned to you."";
			 	    Outputs.SetProperty(""sGotNextFirst"",sMsg);
			 	 }
			 	 
		 }//with(bcServiceRequest)
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcServiceRequest = null;
		boServiceRequest = null;
		appObj = null;
	}
}
function GetNextLast(Inputs,Outputs)
{
	var appObj;
	var sQueueId;
	var boServiceRequest;
	var bcServiceRequest;
	var sSRType;
	var sSpec;
	var sNextRec;
	var sEmpId;
	var sCurrSubStat;
	var sCurrStat;
	var sSubstat;
	var sStatus;
	var sNextSR;
	var bsGetNextLast1;
	var psInputs;
	var psOutputs;
	var sGotNextLast;
	var sMsg;
	try
	{
		appObj = TheApplication();
		sQueueId = this.GetFieldValue(""Id"");
		sNextSR = ""N"";
	//	sSRType = this.GetFieldValue(""STC Queue Sub Type"");
		sEmpId = appObj.LoginId();
		boServiceRequest = appObj.GetBusObject(""Service Request"");
		bcServiceRequest = boServiceRequest.GetBusComp(""Service Request"");
		with(bcServiceRequest)	
		{
			    SetViewMode(AllView);
			 	ClearToQuery();
			// 	ActivateField(""SR Type"");
			 	ActivateField(""Status"");
			 	ActivateField(""Owned By Id"");
			 //	ActivateField(""Call Back"");
			 //	ActivateField(""STC New Preferred Timing"");
			 	sSpec =  ""[Owned By Id] = '"" + sQueueId  + ""' AND [Status] <> 'Closed'"";
			 	SetSearchExpr(sSpec);
			 	SetSortSpec(""Opened Date(DESCENDING)"");
			 	ExecuteQuery(ForwardOnly);
			 	sNextRec = FirstRecord();
			 	if(sNextRec)
			 	{
			 		sCurrSubStat = GetFieldValue(""Sub-Status"");
			 		sNextSR =GetFieldValue(""SR Number"");
					//currStat = GetFieldValue(""Status"");
					SetFieldValue(""Owned By Id"",sEmpId);
					sSubstat = appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""Assigned"");
					//fstatus = appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""Pending"");
				//	if(sCurrSubStat == ""Queued"")
					SetFieldValue(""Sub-Status"", sSubstat);
					
					WriteRecord();
			 	 }
			 	 if(sNextSR == ""N"")
			 	 {
			 	 	sMsg = ""There are no items Held in the Queue"";
			 	 	Outputs.SetProperty(""sGotNextLast"",sMsg);
			 	 }
			 	 else
			 	 {
			 	    sMsg = ""SR# "" + sNextSR + "" has been Assigned to you."";
			 	    Outputs.SetProperty(""sGotNextLast"",sMsg);
			 	 }
			 	 
		 }//with(bcServiceRequest)
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcServiceRequest = null;
		boServiceRequest = null;
		appObj = null;
	}
}
"//***********************************************************************************************************//
//Purpose: Assign Activity to Employee from Queue.
//Author: SUMAN KANUMURI
//*************************************************************************************************************//

function GetNextLastActivity(Inputs,Outputs)
{
	var appObj;
	var sQueueId;
	var boServiceRequest;
	var bcServiceRequest;
	var sSRType;
	var sSpec;
	var sNextRec;
	var sEmpId;
	var sCurrSubStat;
	var sCurrStat;
	var sSubstat;
	var sStatus;
	var sNextSR;
	var bsGetNextLast1;
	var psInputs;
	var psOutputs;
	var sGotNextLast;
	var sMsg;
	try
	{
		appObj = TheApplication();
		sQueueId = this.GetFieldValue(""Id"");
		sNextSR = ""N"";
	//	sSRType = this.GetFieldValue(""STC Queue Sub Type"");
		sEmpId = appObj.LoginId();
		boServiceRequest = appObj.GetBusObject(""STC CBR Action"");
		bcServiceRequest = boServiceRequest.GetBusComp(""STC CBR Action"");
		with(bcServiceRequest)	
		{
			    SetViewMode(AllView);
			 	ClearToQuery();
			 	ActivateField(""Status"");
			 	ActivateField(""Primary Owner Id"");
			 	sSpec =  ""[Primary Owner Id] = '"" + sQueueId  + ""' AND ([Status] = 'Scheduled' OR [Status] = 'Queued')"";
			 	SetSearchExpr(sSpec);
			 	SetSortSpec(""Due(DESCENDING)"");
			 	ExecuteQuery(ForwardOnly);
			 	sNextRec = FirstRecord();
			 	if(sNextRec)
			 	{
			 		sNextSR =GetFieldValue(""Activity Id"");
					SetFieldValue(""Primary Owner Id"",sEmpId);
					SetFieldValue(""Status"",""Assigned"");
					WriteRecord();
					
			 	 }
			 	 if(sNextSR == ""N"")
			 	 {
			 	 	sMsg = ""There are no items Held in the Queue"";
			 	 	Outputs.SetProperty(""sGotNextLast"",sMsg);
			 	 }
			 	 else
			 	 {

				   sMsg = ""Activity "" + sNextSR + "" has been Assigned to you."";
			 	    Outputs.SetProperty(""sGotNextLast"",sMsg);
			 	 }
			 	 
		 }//with(bcServiceRequest)
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcServiceRequest = null;
		boServiceRequest = null;
		appObj = null;
	}
}
"//***********************************************************************************************************//
//Purpose: Assign Lead to Employee from queue.
//Author: MARKANDEYULU ENJAM
//*************************************************************************************************************//

function GetNextLastLead(Inputs,Outputs)
{
	var appObj;
	var sQueueId;
	var boServiceRequest;
	var bcServiceRequest;
	var sSRType;
	var sSpec;
	var sNextRec;
	var sEmpId;
	var sCurrSubStat;
	var sCurrStat;
	var sSubstat;
	var sStatus;
	var sNextSR;
	var bsGetNextLast1;
	var psInputs;
	var psOutputs;
	var sGotNextLast;
	var sMsg;
	try
	{
		appObj = TheApplication();
		sQueueId = this.GetFieldValue(""Id"");
		sNextSR = ""N"";
	//	sSRType = this.GetFieldValue(""STC Queue Sub Type"");
		sEmpId = appObj.LoginId();
		boServiceRequest = appObj.GetBusObject(""Lead"");
		bcServiceRequest = boServiceRequest.GetBusComp(""Lead"");
		with(bcServiceRequest)	
		{
			    SetViewMode(AllView);
			 	ClearToQuery();
			 	ActivateField(""STC Lead Queue Type"");
			 	ActivateField(""Owned By Id"");
			 	sSpec =  ""[Owned By Id] = '"" + sQueueId  + ""' AND [STC Lead Queue Type] = 'Queued'"";
			 	SetSearchExpr(sSpec);
			 	SetSortSpec(""Created(ASCENDING)""); //Sequence (ASCENDING)
			 	ExecuteQuery(ForwardOnly);
			 	sNextRec = FirstRecord();
			 	if(sNextRec)
			 	{
			 		sNextSR =GetFieldValue(""Id"");
					//SetFieldValue(""Primary Owner Id"",sEmpId);
					SetFieldValue(""Owned By Id"",sEmpId);
					SetFieldValue(""STC Lead Queue Type"",""Assigned"");
					WriteRecord();
					
			 	 }
			 	 if(sNextSR == ""N"")
			 	 {
			 	 	sMsg = ""There are no items Held in the Queue"";
			 	 	Outputs.SetProperty(""sGotNextLast"",sMsg);
			 	 }
			 	 else
			 	 {

				   sMsg = ""Lead "" + sNextSR + "" has been Assigned to you."";
			 	    Outputs.SetProperty(""sGotNextLast"",sMsg);
			 	 }
			 	 
		 }//with(bcServiceRequest)
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcServiceRequest = null;
		boServiceRequest = null;
		appObj = null;
	}
}
function GetPriorityTickets(Inputs,Outputs)
{
	var appObj;
	var sQueueId;
	var boServiceRequest;
	var bcServiceRequest;
	var sSRType;
	var sSpec;
	var sNextRec;
	var sEmpId;
	var sCurrSubStat;
	var sCurrStat;
	var sSubstat;
	var sStatus;
	var sNextSR;
	var bsGetNextLast1;
	var psInputs;
	var psOutputs;
	var sGotNextLast;
	var sMsg;
	try
	{
		appObj = TheApplication();
		sQueueId = this.GetFieldValue(""Id"");
		sNextSR = ""N"";
	//	sSRType = this.GetFieldValue(""STC Queue Sub Type"");
		sEmpId = appObj.LoginId();
		boServiceRequest = appObj.GetBusObject(""Service Request"");
		bcServiceRequest = boServiceRequest.GetBusComp(""Service Request"");
		with(bcServiceRequest)	
		{
			    SetViewMode(AllView);
			 	ClearToQuery();
			// 	ActivateField(""SR Type"");
			 	ActivateField(""Status"");
			 	ActivateField(""Owned By Id"");
				ActivateField(""STC RFM Segment"");
			 //	ActivateField(""Call Back"");
			 //	ActivateField(""STC New Preferred Timing"");
			 	sSpec =  ""[Owned By Id] = '"" + sQueueId  + ""' AND [Status] <> 'Closed' AND [STC RFM Segment] IS NOT NULL"";
			 	SetSearchExpr(sSpec);
			 	SetSortSpec(""STC RFM Segment(DESCENDING),STC RFM Score(DESCENDING),Opened Date(ASCENDING)"");
			 	ExecuteQuery(ForwardOnly);
			 	sNextRec = FirstRecord();
			 	if(sNextRec)
			 	{
			 		sCurrSubStat = GetFieldValue(""Sub-Status"");
			 		sNextSR =GetFieldValue(""SR Number"");
					//currStat = GetFieldValue(""Status"");
					SetFieldValue(""Owned By Id"",sEmpId);
					sSubstat = appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""Assigned"");
					//fstatus = appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""Pending"");
				//	if(sCurrSubStat == ""Queued"")
					SetFieldValue(""Sub-Status"", sSubstat);
					
					WriteRecord();
			 	 }
			 	 if(sNextSR == ""N"")
			 	 {
			 	 	sMsg = ""There are no items Held in the Queue"";
			 	 	Outputs.SetProperty(""sGotNextLast"",sMsg);
			 	 }
			 	 else
			 	 {
			 	    sMsg = ""SR# "" + sNextSR + "" has been Assigned to you."";
			 	    Outputs.SetProperty(""sGotNextLast"",sMsg);
			 	 }
			 	 
		 }//with(bcServiceRequest)
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcServiceRequest = null;
		boServiceRequest = null;
		appObj = null;
	}
}
function BusComp_PreInvokeMethod (MethodName)
{
	var Inputs;
	var Outputs;
	var appObj;
	var bsGetNext1;
	var psInputs;
	var psOutputs;
	var ErrMsg;
	try
	 {
	  appObj=TheApplication();
	  Inputs = appObj.NewPropertySet();
	  Outputs = appObj.NewPropertySet();
	   switch(MethodName)
		{   
	          case ""GetNext"":
	          {
	            GetNext(Inputs,Outputs);
	            bsGetNext1 = appObj.GetService(""FINS Teller UI Navigation"");
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				psInputs.SetProperty(""Refresh All"", ""Y"");
				bsGetNext1.InvokeMethod(""RefreshCurrentApplet"", psInputs, psOutputs);
				
				ErrMsg = Outputs.GetProperty(""sGotNext"");
				appObj.RaiseErrorText(ErrMsg);
				return (CancelOperation);
			    break;
	          }
	           default:
			    	break;
		 } 
		return (ContinueOperation);
	  }
	 catch(e)
	 {
		throw(e); 	
	 }
	 finally
	 {
		Inputs = null;
		Outputs = null;
		psInputs = null;
		psOutputs = null;
		bsGetNext1 = null;
		appObj = null;
	 }
}
"//***********************************************************************************************************//
//Purpose: Assign SR to Employee from Queue.
//Author: Pankaj Gaikwad
//Release: R 1.0
//Date: 30-Oct-09
//*************************************************************************************************************//

function GetNext(Inputs,Outputs)
{
	var appObj;
	var sQueueId;
	var boServiceRequest;
	var bcServiceRequest;
	var sSRType;
	var sSpec;
	var sNextRec;
	var sEmpId;
	var sCurrSubStat;
	var sCurrStat;
	var sSubstat;
	var sStatus;
	var sNextSR;
	var bsGetNext1;
	var psInputs;
	var psOutputs;
	var sGotNext;
	var sMsg;
	try
	{
		appObj = TheApplication();
		sQueueId = this.GetFieldValue(""Id"");
		sNextSR = ""N"";
	//	sSRType = this.GetFieldValue(""STC Queue Sub Type"");
		sEmpId = appObj.LoginId();
		boServiceRequest = appObj.GetBusObject(""Service Request"");
		bcServiceRequest = boServiceRequest.GetBusComp(""Service Request"");
		with(bcServiceRequest)	
		{
			    SetViewMode(AllView);
			 	ClearToQuery();
			// 	ActivateField(""SR Type"");
			 	ActivateField(""Status"");
			 	ActivateField(""Owned By Id"");
			 //	ActivateField(""Call Back"");
			 //	ActivateField(""STC New Preferred Timing"");
			 	sSpec =  ""[Owned By Id] = '"" + sQueueId  + ""' AND [Status] <> 'Closed'"";
			 	SetSearchExpr(sSpec);
			 	SetSortSpec(""Opened Date(ASCENDING)"");
			 	ExecuteQuery(ForwardOnly);
			 	sNextRec = FirstRecord();
			 	if(sNextRec)
			 	{
			 		sCurrSubStat = GetFieldValue(""Sub-Status"");
			 		sNextSR =GetFieldValue(""SR Number"");
					//currStat = GetFieldValue(""Status"");
					SetFieldValue(""Owned By Id"",sEmpId);
					sSubstat = appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""Assigned"");
					//fstatus = appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""Pending"");
				//	if(sCurrSubStat == ""Queued"")
					SetFieldValue(""Sub-Status"", sSubstat);
					
					WriteRecord();
			 	 }
			 	 if(sNextSR == ""N"")
			 	 {
			 	 	sMsg = ""There are no items Held in the Queue"";
			 	 	Outputs.SetProperty(""sGotNext"",sMsg);
			 	 }
			 	 else
			 	 {
			 	    sMsg = ""SR# "" + sNextSR + "" has been Assigned to you."";
			 	    Outputs.SetProperty(""sGotNext"",sMsg);
			 	 }
			 	 
		 }//with(bcServiceRequest)
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcServiceRequest = null;
		boServiceRequest = null;
		appObj = null;
	}
}
function BusComp_PreInvokeMethod (MethodName)
{
	var Inputs;
	var Outputs;
	var appObj;
	var bsGetNext1;
	var psInputs;
	var psOutputs;
	var ErrMsg;
	try
	 {
	  appObj=TheApplication();
	  Inputs = appObj.NewPropertySet();
	  Outputs = appObj.NewPropertySet();
	   switch(MethodName)
		{   
	          case ""GetNext"":
	          {
	            GetNext(Inputs,Outputs);
	            bsGetNext1 = appObj.GetService(""FINS Teller UI Navigation"");
				psInputs = appObj.NewPropertySet();
				psOutputs = appObj.NewPropertySet();
				psInputs.SetProperty(""Refresh All"", ""Y"");
				bsGetNext1.InvokeMethod(""RefreshCurrentApplet"", psInputs, psOutputs);
				
				ErrMsg = Outputs.GetProperty(""sGotNext"");
				appObj.RaiseErrorText(ErrMsg);
				return (CancelOperation);
			    break;
	          }
	           default:
			    	break;
		 } 
		return (ContinueOperation);
	  }
	 catch(e)
	 {
		throw(e); 	
	 }
	 finally
	 {
		Inputs = null;
		Outputs = null;
		psInputs = null;
		psOutputs = null;
		bsGetNext1 = null;
		appObj = null;
	 }
}
"//***********************************************************************************************************//
//Purpose: Assign SR to Employee from Queue.
//Author: Pankaj Gaikwad
//Release: R 1.0
//Date: 30-Oct-09
//*************************************************************************************************************//

function GetNext(Inputs,Outputs)
{
	var appObj;
	var sQueueId;
	var boServiceRequest;
	var bcServiceRequest;
	var sSRType;
	var sSpec;
	var sNextRec;
	var sEmpId;
	var sCurrSubStat;
	var sCurrStat;
	var sSubstat;
	var sStatus;
	var sNextSR;
	var bsGetNext1;
	var psInputs;
	var psOutputs;
	var sGotNext;
	var sMsg;
	try
	{
		appObj = TheApplication();
		sQueueId = this.GetFieldValue(""Id"");
		sNextSR = ""N"";
	//	sSRType = this.GetFieldValue(""STC Queue Sub Type"");
		sEmpId = appObj.LoginId();
		boServiceRequest = appObj.GetBusObject(""Service Request"");
		bcServiceRequest = boServiceRequest.GetBusComp(""Service Request"");
		with(bcServiceRequest)	
		{
			    SetViewMode(AllView);
			 	ClearToQuery();
			// 	ActivateField(""SR Type"");
			 	ActivateField(""Status"");
			 	ActivateField(""Owned By Id"");
			 //	ActivateField(""Call Back"");
			 //	ActivateField(""STC New Preferred Timing"");
			 	sSpec =  ""[Owned By Id] = '"" + sQueueId  + ""' AND [Status] <> 'Closed'"";
			 	SetSearchExpr(sSpec);
			 	SetSortSpec(""Opened Date(ASCENDING)"");
			 	ExecuteQuery(ForwardOnly);
			 	sNextRec = FirstRecord();
			 	if(sNextRec)
			 	{
			 		sCurrSubStat = GetFieldValue(""Sub-Status"");
			 		sNextSR =GetFieldValue(""SR Number"");
					//currStat = GetFieldValue(""Status"");
					SetFieldValue(""Owned By Id"",sEmpId);
					sSubstat = appObj.InvokeMethod(""LookupValue"",""SR_SUB_STATUS"",""Assigned"");
					//fstatus = appObj.InvokeMethod(""LookupValue"",""SR_STATUS"",""Pending"");
				//	if(sCurrSubStat == ""Queued"")
					SetFieldValue(""Sub-Status"", sSubstat);
					
					WriteRecord();
			 	 }
			 	 if(sNextSR == ""N"")
			 	 {
			 	 	sMsg = ""There are no items Held in the Queue"";
			 	 	Outputs.SetProperty(""sGotNext"",sMsg);
			 	 }
			 	 else
			 	 {
			 	    sMsg = ""SR# "" + sNextSR + "" has been Assigned to you."";
			 	    Outputs.SetProperty(""sGotNext"",sMsg);
			 	 }
			 	 
		 }//with(bcServiceRequest)
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcServiceRequest = null;
		boServiceRequest = null;
		appObj = null;
	}
}
function BusComp_NewRecord ()
{
	try
	{
		var sOppyID = """", sBulkRowId = """",sError = """", sCRNumber = """", sPilotRowId = """", sCustAccId = """", sCount = 0, ResvSpec = """";
		var Inputs = """", Outputs = """", WorkflowBS = """", sBulkBC = """", sExtReserveBC = """", sExtQueryBC = """";
		var sLastExt = """", sNewExt = """", sLastPilotRowId = """",ExtQuerySpec = """", sPilotMSISDN = """", sExtsCount = 0, SearchSpec = """";
		var sView = TheApplication().ActiveViewName();
		var vRefreshIn = """", vRefreshOut = """", vRefreshBS = """";
		if(sView == ""STC VIVA One Provisioning View"")
		{
			this.ParentBusComp().ActivateField(""CR Number"");
			this.ParentBusComp().ActivateField(""Customer Account Id"");
			this.ParentBusComp().ActivateField(""Id"");
			this.ParentBusComp().ActivateField(""Bulk Id"");
			this.ParentBusComp().ActivateField(""Opportunity Id"");
			this.ParentBusComp().ActivateField(""Main Piliot Number"");
			sCRNumber = this.ParentBusComp().GetFieldValue(""CR Number"");
			sPilotRowId = this.ParentBusComp().GetFieldValue(""Id"");
			sCustAccId = this.ParentBusComp().GetFieldValue(""Customer Account Id"");
			sBulkRowId = this.ParentBusComp().GetFieldValue(""Bulk Id"");
			sOppyID = this.ParentBusComp().GetFieldValue(""Opportunity Id"");
			sPilotMSISDN = this.ParentBusComp().GetFieldValue(""Main Piliot Number"");
			var sExtBC = TheApplication().ActiveBusObject().GetBusComp(""STC Extension Avaya BC"");
			sBulkBC = TheApplication().GetBusObject(""STC AVAYA Opty BO"").GetBusComp(""STC VIVA One Bulk Request Header BC"");
			sExtQueryBC = TheApplication().GetBusObject(""STC AVAYA Opty BO"").GetBusComp(""STC Extension Avaya Query BC"");
			sExtQueryBC.WriteRecord();
			with(sExtQueryBC)
			{
			ActivateField(""Parent Pilot Id"");
			ActivateField(""Ext Status"");
			SetViewMode(AllView);
			ClearToQuery();
			ExtQuerySpec = ""[Parent Pilot Id] = '"" + sPilotRowId + ""'"";
			SetSearchExpr(ExtQuerySpec);
			ExecuteQuery()			
			sExtsCount = CountRecords();
			}
			
			//TheApplication().RaiseErrorText(sExtsCount)
			with(sBulkBC)
			{
				ActivateField(""Parent Row Id"");				
				ActivateField(""Status"");
				SetViewMode(AllView);
				ClearToQuery();
				SearchSpec = ""[Parent Row Id] = '"" + sOppyID + ""' AND [Status] <> 'Cancelled'"";
				SetSearchExpr(SearchSpec);
				ExecuteQuery();
				sCount = CountRecords();
				if(sCount == 1)
				{	
					sExtReserveBC = TheApplication().GetBusObject(""Account"").GetBusComp(""STC New PBX Extension Reservation BC"");
					if(sExtsCount > 0)
					{
						with(sExtQueryBC)
						{
							ActivateField(""Extension Number"");
							ActivateField(""Parent Pilot Id"");
							SetViewMode(AllView);
							ClearToQuery();
							ExtQuerySpec = ""[Parent Pilot Id] = '"" + sPilotRowId + ""'"";
							SetSearchExpr(ExtQuerySpec);
							SetSortSpec(""Extension Number(DESCENDING)"");
							ExecuteQuery(ForwardOnly);
							ExecuteQuery();
							if(FirstRecord())
							{
								sLastExt = GetFieldValue(""Extension Number"");
								sLastExt = ToNumber(sLastExt);
								sNewExt = sLastExt + 1;
							}
						}
					}
					else
					{
						with(sExtReserveBC)
						{
							ActivateField(""Range"");
							ActivateField(""PilotNum"");
							ActivateField(""Ending Extension"");
							ActivateField(""Starting Extension"");
							SetViewMode(AllView);
							ClearToQuery();
							ResvSpec = ""[PilotNum] = '"" + sPilotMSISDN + ""' AND [Extension Flag] = 'Y'"";
							SetSearchExpr(ResvSpec);
							ExecuteQuery();
							if(FirstRecord())
							{
								var Id = GetFieldValue(""Id"");
								sNewExt = GetFieldValue(""Starting Extension"");
							}
						}
					}
					this.ActivateField(""Extension Number"");
					this.SetFieldValue(""Extension Number"", sNewExt);
					this.SetFieldValue(""Ext Status"",""Validated"");
					this.WriteRecord();
					TheApplication().SetProfileAttr(""EnableNewRecord"", """");
				}
				else
				{
					with(sExtQueryBC)
					{
						ActivateField(""Extension Number"");
						ActivateField(""Parent Pilot Id"");
						ActivateField(""Ext Status"");
						SetViewMode(AllView);
						ClearToQuery();
						ExtQuerySpec = ""[Parent Pilot Id] = '"" + sPilotRowId + ""'"";
						SetSearchExpr(ExtQuerySpec);
						SetSortSpec(""Extension Number(DESCENDING)"");	
						ExecuteQuery();
						if(FirstRecord())
						{
							sLastExt = GetFieldValue(""Extension Number"");
							sLastExt = ToNumber(sLastExt);
							sNewExt = sLastExt + 1;
						}
						this.ActivateField(""Extension Number"");
						this.SetFieldValue(""Extension Number"", sNewExt);
						this.SetFieldValue(""Ext Status"",""Validated"");
						this.WriteRecord();
						TheApplication().SetProfileAttr(""EnableNewRecord"", """");

					}
				}
				/*vRefreshBS = TheApplication().GetService(""FINS Teller UI Navigation"");
				vRefreshIn = TheApplication().NewPropertySet();
				vRefreshOut = TheApplication().NewPropertySet();
				vRefreshIn.SetProperty(""Refresh All"",""Y"");
				vRefreshBS.InvokeMethod(""RefreshCurrentApplet"", vRefreshIn, vRefreshOut);*/
				with(sExtBC)
					{
					ActivateField(""Parent Pilot Id"");
					SetViewMode(AllView);
					ClearToQuery();
					ExtQuerySpec = ""[Parent Pilot Id] = '"" + sPilotRowId + ""'"";
					SetSearchExpr(ExtQuerySpec);
					ExecuteQuery()	
					}
				
		}
		return(ContinueOperation);
	}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		sExtBC = null;
		sView = null;
		Inputs = null;
		Outputs = null;
		sBulkBC = null; 
		sExtReserveBC = null; 
		sExtQueryBC = null;
	}

}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	try
	{
		var sParentId, sPilotNum, sRec, sBO, sBC;
		switch(FieldName)
			{
				case ""Pilot DID Number"":
					/*sPilotNum = this.ParentBusComp().GetFieldValue(""Main Piliot Number"");
					sParentId = this.GetFieldValue(""Parent Pilot Id"");	
					sBO = TheApplication().GetBusObject(""STC AVAYA Opty BO"");
					sBC = sBO.GetBusComp(""STC Extension Avaya Query BC"");
					if(sPilotNum == FieldValue)
					{
						with(sBC)
						{
							SetViewMode(AllView);							
							ClearToQuery();
							SetSearchSpec(""Parent Pilot Id"",sParentId);
							SetSearchSpec(""Pilot DID Number"",sPilotNum);
							ExecuteQuery(ForwardOnly);
							sRec = FirstRecord();
							if(sRec)
							{
								TheApplication().RaiseErrorText(""Main Pilot Number is already associated to an extension.Please select DID Number"");
								return (CancelOperation);
							}
						}
					}
				sBO=null;
				sBC=null;*/
				break;
				default:
				break;  
			}
	return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	}
}
function BusComp_PreWriteRecord ()
{

 /* var sApps = TheApplication();
  this.ActivateField(""Port Number"");
  var sPortNumber =this.GetFieldValue(""Port Number"");
  this.ActivateField(""GPON OLT ParentId"");
  var sGPONOLTParentId = this.GetFieldValue(""GPON OLT ParentId"");
 var sSearchExpr;
  
  if(sPortNumber !="""" && sPortNumber !=null)
  {

  var	sGPONBO = sApps.GetBusObject(""STC GPON OLT BO Details"");
	var	sGPONBC = sGPONBO.GetBusComp(""STC GPON Child OLT Details"");

		with(sGPONBC)
			{
			sSearchExpr=null;
			ActivateField(""GPON OLT ParentId"");
			ActivateField(""Port Number"");
			ClearToQuery();
			SetViewMode(AllView);	
			sSearchExpr = ""[GPON OLT ParentId] = '""+sGPONOLTParentId+""' AND [Port Number] = '""+sPortNumber+""'"";
			SetSearchExpr(sSearchExpr);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				sApps.RaiseErrorText(""Enter Port Number is already exist in system, Port Number should not be duplicate."");
			}
			}

  }		
*/

	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{

  var sApps = TheApplication();
  this.ActivateField(""Name"");
  var sName =this.GetFieldValue(""Name"");
 var sSearchExpr;
  
  if(sName !="""" && sName !=null)
  {

  var	sGPONBO = sApps.GetBusObject(""STC GPON OLT BO Details"");
	var	sGPONBC = sGPONBO.GetBusComp(""STC GPON Parent OLT Details"");

		with(sGPONBC)
			{
			sSearchExpr=null;
			ActivateField(""Id"");
			ActivateField(""Name"");
;
			ClearToQuery();
			SetViewMode(AllView);	
			sSearchExpr = ""[Name] = '""+sName+""'"";
			SetSearchExpr(sSearchExpr);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				sApps.RaiseErrorText(""Enter GPON OLT Name is already exist in system."");
			}
			}

  }		


	return (ContinueOperation);
}
function BusComp_DeleteRecord ()
{

 TheApplication().SetProfileAttr(""STC ICT Project NewRecord"",""Deleted"");
}


                                                                      
"
function BusComp_NewRecord ()
{
	TheApplication().SetProfileAttr(""STC ICT Project NewRecord"",""New"");
}
function BusComp_PreInvokeMethod (MethodName)
{
	if(MethodName == ""EditRecordCustom"")
	{
		this.SetFieldValue(""Editable"", ""Y"");
		return(CancelOperation);
	}
	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{
 if(this.GetFieldValue(""Editable"") == ""Y"")
 {
	this.SetFieldValue(""Editable"", ""N"");
	this.WriteRecord();
 }
 TheApplication().SetProfileAttr(""STC ICT Project NewRecord"",""Saved"");
}
function BusComp_PreQuery ()
{
	var SearchStr;
	var AccType;
	try{
			AccType=TheApplication().GetProfileAttr(""STCAccountTypeAcc"");
			if(AccType != null && AccType != """")
			{	
				SearchStr=this.GetSearchExpr();
				if (SearchStr == null || SearchStr == """")
					SearchStr = ""[Type]='"" + AccType + ""'"";
				else	
					SearchStr = SearchStr + "" AND [Type]='"" + AccType + ""'"";			
				this.SetSearchExpr(SearchStr);	
				// The profile Attribute is set to blank so that the regular searches on Account data work as reqd.
				TheApplication().SetProfileAttr(""STCAccountTypeAcc"","""");
			}	
			return (ContinueOperation);	
	}
	catch(e)
	{	
		throw(e);
	}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_NewRecord ()
{
var sApp = TheApplication();
var CurrentLogin = sApp.LoginName();
var FName,LName,Dept,LoginName;
var foundTestCSR = sApp.InvokeMethod(""LookupValue"",""STC_TEST_PROV"",CurrentLogin);
var Purpose = sApp.InvokeMethod(""LookupValue"",""STC_ADMIN"",""TESTLINEPURPOSE"");
var TestLine = sApp.InvokeMethod(""LookupValue"",""STC_ADMIN"",""TESTLINEVAL""); 
var foundTestCSRSubstr = foundTestCSR.substring(0,3);
if(foundTestCSRSubstr == ""CSR"")
{
	
	var EmpBC:BusComp = sApp.GetBusObject(""Employee"").GetBusComp(""Employee"");
	with(EmpBC)
	{
		ActivateField(""STC Department"");
		ActivateField(""First Name"");
		ActivateField(""Last Name"");
		SetViewMode(AllView);
		ClearToQuery();
		SetSearchSpec(""Login Name"",CurrentLogin);
		ExecuteQuery();
		var EmpRec = FirstRecord();
		if(EmpRec)
		{
			FName = GetFieldValue(""First Name"");
			LName = GetFieldValue(""Last Name"");
			Dept = GetFieldValue(""STC Department"");
		}
		LoginName = LName+"" ""+FName;
		with(this)
		{
		SetFieldValue(""STC Line Category"",TestLine);
		SetFieldValue(""STC Test Line Dept"",Dept);
		SetFieldValue(""STC Test Line Reqstr Name"", LoginName);
		SetFieldValue(""STC Test Line Purpose"", Purpose);
		SetFieldValue(""STC Invoice Exclusiion Flag"", ""Y"");
		}//end of with(this)
	}
	
}


}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	switch(FieldName)
	{
		case ""STC Billing Acc Segment"":
		{
			var BillAccId = this.GetFieldValue(""Id"");
			var vCreditLmt = """";
			var vCreditScoreFlg = """";
			var vBillValidationBS = TheApplication().GetService(""STC Billing Account Validation BS"");
			var InpPS = TheApplication().NewPropertySet();
			var OutPS = TheApplication().NewPropertySet();
			InpPS.SetProperty(""BillAccId"", BillAccId);
			InpPS.SetProperty(""FieldName"", FieldName);
			InpPS.SetProperty(""FieldValue"", FieldValue);
			vBillValidationBS.InvokeMethod(""FieldValidations"",InpPS,OutPS);
			vCreditScoreFlg = OutPS.GetProperty(""vCreditScoreChange"");
			var vBillSegmentRelative = OutPS.GetProperty(""vBillSegmentRelative"");
			
			if(vCreditScoreFlg == ""Y"")
			{
						if ( vBillSegmentRelative == ""Y""){
				this.ActivateField(""STC Contract Category"");
				SetFieldValue(""STC Contract Category"",""Employee Relative"");
			
			}
			vCreditLmt = OutPS.GetProperty(""CreditLimit"");
			this.ActivateField(""Credit Score"");
			this.SetFieldValue(""Credit Score"", vCreditLmt);
			this.WriteRecord();
			}
		}
		break;
		
		case ""STC Split Billing Flag"":
		{
			if(FieldValue != ""Y"")
			{
				var sSplitSvcTyp = GetFieldValue(""STC Split Bill Service Type"");
				var sSplitEmpName = GetFieldValue(""STC Split Employee Name"");
				var sSplitOcpTyp = GetFieldValue(""STC Split Occupation Type"");
				var sSplitCPR = GetFieldValue(""STC Split Employee CPR"");
				if(sSplitSvcTyp != """" && sSplitSvcTyp != null)
				{
					this.SetFieldValue(""STC Split Bill Service Type"", """");
				}
				if(sSplitEmpName != """" && sSplitEmpName != null)
				{
					this.SetFieldValue(""STC Split Employee Name"", """");
				}
				if(sSplitOcpTyp != """" && sSplitOcpTyp != null)
				{
					this.SetFieldValue(""STC Split Occupation Type"", """");
				}
				if(sSplitCPR != """" && sSplitCPR != null)
				{
					this.SetFieldValue(""STC Split Employee CPR"", """");
				}
			}
		}
		break;
		
		case ""STC Split Employee CPR"":
		{	
			var SIDNew, SIDNewext;
			if(FieldValue != """" && FieldValue != null)
			{
				if(FieldValue.length>9)
				{
					TheApplication().RaiseErrorText(TheApplication().LookupMessage(""User Defined Errors"", ""AM0063""));
				}
				else if(FieldValue.length<9)
				{
					TheApplication().RaiseErrorText(TheApplication().LookupMessage(""User Defined Errors"", ""AM0063""));	
				}
				else if(FieldValue.length==""9"")
				{
					var sID0 = FieldValue.charAt(0);//a  
					var sID1 = FieldValue.charAt(1); //b
					var sID2 = FieldValue.charAt(2); //c            
					var sID3 = FieldValue.charAt(3);//d
					var sID4 = FieldValue.charAt(4);//e
					var sID5 = FieldValue.charAt(5);//f
					var sID6 = FieldValue.charAt(6);//g
					var sID7 = FieldValue.charAt(7);//h
					
					var sID8 = FieldValue.charAt(8);  //i                   
					var Valid =((sID7*2+sID6*3+sID5*4+sID4*5+sID3*6+sID2*7+sID1*8+sID0*9)%11);
					var Valid1=(11-Valid);
					
					if(Valid == ""0""|| Valid == ""1"")
					{
						SIDNew = ""0"";
					}
					else
					{
						SIDNewext = Valid1;
					}
					if(SIDNew != sID8)
					{
						if(SIDNewext != sID8)
						{
							TheApplication().RaiseErrorText(TheApplication().LookupMessage(""User Defined Errors"", ""AM0062""));
						}
					}//end of if(SIDNew != sID8)
				}//end of else if(FieldValue.length==""9"")
			}//end of if(FieldValue != """" && FieldValue != null)
		}
		break;
		
		default :
         		break;
	}//end switch
	
	return (ContinueOperation);
}
"//GJENA_22Dec12 added to Set the Risk Level 

function BusComp_WriteRecord ()
{
try
{
 var BillAccId = this.GetFieldValue(""Id"");
 this.ActivateField(""STC Risk Level"");
 this.ActivateField(""Occupation"");
 var vOccupation = this.GetFieldValue(""Occupation"");
	
  var STCCreditLimitBO = TheApplication().GetBusObject(""STC Credit Limit"");
  var STCCreditLimitBC = STCCreditLimitBO.GetBusComp(""STC Credit Limit"");
  with(STCCreditLimitBC)
    {
  ActivateField(""Current Occupation"");
  ActivateField(""Risk Level"");
  SetViewMode(AllView);
  ClearToQuery();
  var searchstr = ""[Current Occupation] = '"" + vOccupation + ""' AND [Customer Class] = 'Bahraini'"";
  SetSearchExpr(searchstr);
  ExecuteQuery(ForwardOnly);
    
    if (FirstRecord())
    {
    
    var vRiskLevel = GetFieldValue(""Risk Level"");
     }//end if
		
	}//end with
	this.SetFieldValue(""STC Risk Level"",vRiskLevel);
	this.WriteRecord();
	//}
	}
	
	catch(e)
	{
	throw(e);
	}
	
	finally
	{
	STCCreditLimitBC=null;
	STCCreditLimitBO=null;
	
	}
}
function BusComp_ChangeRecord ()
//[MANUJ] : [FPVIPABVerification]
{
if(TheApplication().ActiveViewName() == ""STC ISL SIMREG VIP Reregistration Audit Subscription View"")
{
var CustomerId = this.GetFieldValue(""CAN Row Id"");
TheApplication().SetProfileAttr(""CustomerId"", CustomerId);
var AuditId = this.GetFieldValue(""Id"");
TheApplication().SetProfileAttr(""AuditId"", AuditId);
}
}
function BusComp_SetFieldValue (FieldName)
{
if(TheApplication().ActiveViewName() == ""STC ISL SIMREG VIP Reregistration Audit Subscription View"" && FieldName == ""CAN Row Id"")
{
var CustomerId = this.GetFieldValue(""CAN Row Id"");
TheApplication().SetProfileAttr(""CustomerId"", CustomerId);
var AuditId = this.GetFieldValue(""Id"");
TheApplication().SetProfileAttr(""AuditId"", AuditId);
}
}
var strIsBS = false;
function BusComp_NewRecord ()
{
//	strIsBS = true;
}
function BusComp_PreQuery ()
{
	var SearchStr;
	var AccType;
	try{
			AccType=TheApplication().GetProfileAttr(""STCAccountTypeServAcc"");
			if(AccType != null && AccType != """")
			{	
				SearchStr=this.GetSearchExpr();
				if (SearchStr == null || SearchStr == """")
					SearchStr = ""[Type]='"" + AccType + ""'"";
				else	
					SearchStr = SearchStr + "" AND [Type]='"" + AccType + ""'"";			
				this.SetSearchExpr(SearchStr);	
				// The profile Attribute is set to blank so that the searches on Sunscription data work as reqd.
				TheApplication().SetProfileAttr(""STCAccountTypeServAcc"","""");
			}	
			return (ContinueOperation);	
	}
	catch(e)
	{	
		throw(e);
	}	
}
"/*20-12-2010 For Migration Validation*/
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{/*
	var billId = null;
	var parBillId = null;
	var ppBillId = null;
	var serviceId = null;
	var msisdn;
	var appObj;
	var appBO;
	var appBC;
	var name;
	var status;
	var parentBC;
	var childBillBC;
	var MigType;
	try
	{
	
	 switch(FieldName)
	 {
	  case ""STC Postpaid Cust MSISDN"":
	  	
	  	msisdn = this.GetFieldValue(""STC Postpaid Cust MSISDN"");
		appObj = TheApplication();
		appBO = appObj.GetBusObject(""STC Billing Account"");
		appBC = appBO.GetBusComp(""CUT Service Sub Accounts"");
		childBillBC = appBO.GetBusComp(""STC Child Billing Accounts"");
		parentBC = this.ParentBusComp();
		
		
		
		with(appBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Parent Account Id"");
			SetSearchSpec(""DUNS Number"", msisdn);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				serviceId = GetFieldValue(""Id"");
				billId = GetFieldValue(""Parent Account Id"");
			}
			
		}
		
		
		with(parentBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Account Status"");
			SetSearchSpec(""Id"", billId);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				parBillId = GetFieldValue(""Parent Account Id"");
			}	
		}
		
		with(parentBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Account Status"");
			SetSearchSpec(""Id"", parBillId);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				ppBillId = GetFieldValue(""Parent Account Id"");
				status = GetFieldValue(""Account Status"");
			}	
		}
		
		this.SetFieldValue(""STC Stores BillId"", ppBillId);
		var billd = this.GetFieldValue(""STC Stores BillId"");
		WriteRecord();
		
		break;
		
		//Added by SushantE 20 Dec 2010 for Migration Validation

		
		default :
			break;
	  
	  }
			return (ContinueOperation);
			
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{}*/
	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{/*try
{
    if(strIsBS == true)
	{
		var strAccntId = this.GetFieldValue(""Id"");            
		var IsRecord1;
		var strConPriAddrId;
		var strContactId;
		var objCurrBO = TheApplication().ActiveBusObject();
		if (objCurrBO == ""STC Service Account"") // || objCurrBO == ""Service Request"")
		{
			strConPriAddrId = this.GetFieldValue(""Primary Address Id"");
			strContactId = this.GetFieldValue(""Primary Contact Id"");
		}
		else
		{
			strConPriAddrId = this.ParentBusComp().GetFieldValue(""Primary Address Id"");
			strContactId = this.ParentBusComp().GetFieldValue(""Primary Contact Id"");
		}

		var objAddMVGBC = GetMVGBusComp(""Street Address"").GetAssocBusComp();
		with(objAddMVGBC)
		{
			SetViewMode(AllView);
			ActivateField(""Row Id"");
			ActivateField(""Address Type"");
			ClearToQuery();
			SetSearchSpec(""Row Id"",strConPriAddrId);
			ExecuteQuery(ForwardOnly);
			IsRecord1 = FirstRecord();                                                                             
			if(IsRecord1)
			{
				try
				{
					Associate(NewAfter);
					WriteRecord();
				}
				catch (e)
				{
					null;
				}
			}
		}
//		var BOContact = TheApplication().GetBusObject(""Contact"");
//		var BCContact = BOContact.GetBusComp(""Contact"");		
		var objConMVGBC = GetMVGBusComp(""Primary Contact Last Name"").GetAssocBusComp();
		with(objConMVGBC)
		{
			SetViewMode(AllView);
			ActivateField(""Row Id"");
			ActivateField(""Parent Account Id"");
			ActivateField(""Account Id"");
			ClearToQuery();
			SetSearchSpec(""Row Id"",strContactId);
			ExecuteQuery(ForwardOnly);
			IsRecord1 = FirstRecord();                                                                             
			if(IsRecord1)
			{
				try
				{
					Associate(NewAfter);
					WriteRecord();
				}
				catch (e)
				{
					null;
				}                                                              
			}
		}
	this.SetFieldValue(""Primary Address Id"",strConPriAddrId);		
	this.SetFieldValue(""Primary Contact Id"",strContactId);
	WriteRecord();
	}
}
catch(e)
{
/*	var vErr = e.toString();
	var vErrCode = e.errCode;
	var vObjName = ""CUT Invoice Sub Accounts"";
	var vFunc = ""BusComp_WriteRecord"";
	var vObjType = ""Business Component"";
	var RowId = this.GetFieldValue(""Id"");
                                                                
	logexception(vErr,vErrCode,RowId,vObjName,vFunc,vObjType);
	throw(e);
}
finally
{
}
return (ContinueOperation);*/

}
function BusComp_PreInvokeMethod (MethodName)
{  

	return (ContinueOperation);
}
function BusComp_NewRecord ()
{
	TheApplication().SetProfileAttr(""EditFlag"", ""Y"");
}
function BusComp_WriteRecord ()
{
	TheApplication().SetProfileAttr(""EditFlag"", """");
}
"var bTypeSubtypeExist=false;
var bcprExist=false;"
function BusComp_PreNewRecord ()
{
 bTypeSubtypeExist=true;
 bcprExist=false;
return (ContinueOperation); 
}
function BusComp_PreQuery ()
{
//bTypeSubtypeExist=false;
return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
bcprExist=false;
 switch(FieldName)
 {
 	case ""CPR Number"":
 		var ImportIden=TheApplication().GetProfileAttr(""ImportFlg"");
 		if(ImportIden!=""Y"")
 		{
 		bcprExist=true;
 		}
 		else
 		{
 		bcprExist=false;
 		}
 		break;
 		 
         default :
         		break;
 }
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{ 
try
{
with(this)
		{
		ActivateField(""CPR Number""); 
		var CPRNumber=  this.GetFieldValue(""CPR Number"");
			var ImportIden=TheApplication().GetProfileAttr(""ImportFlg"");
			var oBO = TheApplication().GetBusObject(""STC CPR Black List BO"");
				var oBC = oBO.GetBusComp(""STC CPR BlackList BC"");
		if(bTypeSubtypeExist && CPRNumber!="""" && ImportIden!=""Y"")
			{	
				with(oBC) 
				{ 
				if(bcprExist)
				{
					InvokeMethod(""SetAdminMode"",""TRUE"");
					ActivateField(""CPR Number"");  
					ActivateField(""Black Listed"");
					ActivateField(""Import Status"");
					SetViewMode(AllView);  
					ClearToQuery();
					var spec1 = """";    
					spec1 = spec1 + ""[CPR Number]= '"" + CPRNumber + ""' AND ([Black Listed]='ToBeBlacklisted' OR [Black Listed]='Blacklisted')""; 
					SetSearchExpr(spec1); 
					ExecuteQuery(ForwardOnly);
					var isRecord = FirstRecord();
					if(isRecord) 
					{						
					TheApplication().RaiseErrorText(""Record Exists with the same ""+CPRNumber+"" Number"");
					return CancelOperation;
					}
				 }//bcprExist	
				}//oBC
				bTypeSubtypeExist=false;	
			}//bTypeSubtypeExist
			return ContinueOperation
		   }//withthis
		   
		}//try
		catch(e)
		{
		throw(e);
		}
		
		finally
		{
		}


}
"var bTypeSubtypeExist=false;
var bcprExist=false;"
function BusComp_PreNewRecord ()
{
 bTypeSubtypeExist=true;
 bcprExist=false;
return (ContinueOperation); 
}
function BusComp_PreQuery ()
{
//bTypeSubtypeExist=false;
return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
bcprExist=false;
 switch(FieldName)
 {
 	case ""CPR Number"":
 		var ImportIden=TheApplication().GetProfileAttr(""ImportFlg"");
 		if(ImportIden!=""Y"")
 		{
 		bcprExist=true;
 		}
 		else
 		{
 		bcprExist=false;
 		}
 		break;
 		 
         default :
         		break;
 }
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{ 
try
{
with(this)
		{
		ActivateField(""CPR Number""); 
		var CPRNumber=  this.GetFieldValue(""CPR Number"");
			var ImportIden=TheApplication().GetProfileAttr(""ImportFlg"");
			var oBO = TheApplication().GetBusObject(""STC CPR Black List BO"");
				var oBC = oBO.GetBusComp(""STC CPR BlackList BC"");
		if(bTypeSubtypeExist && CPRNumber!="""" && ImportIden!=""Y"")
			{	
				with(oBC) 
				{ 
				if(bcprExist)
				{
					InvokeMethod(""SetAdminMode"",""TRUE"");
					ActivateField(""CPR Number"");  
					ActivateField(""Black Listed"");
					ActivateField(""Import Status"");
					SetViewMode(AllView);  
					ClearToQuery();
					var spec1 = """";    
					spec1 = spec1 + ""[CPR Number]= '"" + CPRNumber + ""' AND ([Black Listed]='ToBeBlacklisted' OR [Black Listed]='Blacklisted')""; 
					SetSearchExpr(spec1); 
					ExecuteQuery(ForwardOnly);
					var isRecord = FirstRecord();
					if(isRecord) 
					{						
					TheApplication().RaiseErrorText(""Record Exists with the same ""+CPRNumber+"" Number"");
					return CancelOperation;
					}
				 }//bcprExist	
				}//oBC
				bTypeSubtypeExist=false;	
			}//bTypeSubtypeExist
			return ContinueOperation
		   }//withthis
		   
		}//try
		catch(e)
		{
		throw(e);
		}
		
		finally
		{
		}


}
"var bTypeSubtypeExist=false;
var bcprExist=false;"
function BusComp_PreNewRecord ()
{
 bTypeSubtypeExist=true;
 bcprExist=false;
return (ContinueOperation); 
}
function BusComp_PreQuery ()
{
//bTypeSubtypeExist=false;
return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
bcprExist=false;
 switch(FieldName)
 {
 	case ""CPR Number"":
 		var ImportIden=TheApplication().GetProfileAttr(""ImportFlg"");
 		if(ImportIden!=""Y"")
 		{
 		bcprExist=true;
 		}
 		else
 		{
 		bcprExist=false;
 		}
 		break;
 		 
         default :
         		break;
 }
	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{ 
try
{
with(this)
		{
		ActivateField(""CPR Number""); 
		var CPRNumber=  this.GetFieldValue(""CPR Number"");
			var ImportIden=TheApplication().GetProfileAttr(""ImportFlg"");
			var oBO = TheApplication().GetBusObject(""STC CPR Black List BO"");
				var oBC = oBO.GetBusComp(""STC CPR BlackList BC"");
		if(bTypeSubtypeExist && CPRNumber!="""" && ImportIden!=""Y"")
			{	
				with(oBC) 
				{ 
				if(bcprExist)
				{
					InvokeMethod(""SetAdminMode"",""TRUE"");
					ActivateField(""CPR Number"");  
					ActivateField(""Black Listed"");
					ActivateField(""Import Status"");
					SetViewMode(AllView);  
					ClearToQuery();
					var spec1 = """";    
					spec1 = spec1 + ""[CPR Number]= '"" + CPRNumber + ""' AND ([Black Listed]='ToBeBlacklisted' OR [Black Listed]='Blacklisted')""; 
					SetSearchExpr(spec1); 
					ExecuteQuery(ForwardOnly);
					var isRecord = FirstRecord();
					if(isRecord) 
					{						
					TheApplication().RaiseErrorText(""Record Exists with the same ""+CPRNumber+"" Number"");
					return CancelOperation;
					}
				 }//bcprExist	
				}//oBC
				bTypeSubtypeExist=false;	
			}//bTypeSubtypeExist
			return ContinueOperation
		   }//withthis
		   
		}//try
		catch(e)
		{
		throw(e);
		}
		
		finally
		{
		}


}
"//Your public declarations go here...  
"
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	var appObj=TheApplication();
	var sApplicableType,sApplicableVal;
	try
	{

		
		switch(FieldName)
		{
		
			case ""STC Lead Phone Number"":
			if(FieldValue != null && FieldValue != """")
			{
				var vCurrChar,i = 0;
				var sError= ""Success"";
				var vLegalChars = ""0123456789"";
				var sLenth = 0;
				for (i=0; i < FieldValue.length; i++)
				{
					sLenth = ToNumber(FieldValue.length);
					  vCurrChar = FieldValue.substring(i,i+1);
					  if (vLegalChars.indexOf(vCurrChar,0) < 0)
					  {
						sError = ""Only Numeric Values are allowed."";
						break;
					  }  
				}
				if(sError == ""Success"")
				{
					if(sLenth != 8  && sLenth != 11)
					{
						sError = ""Phone number Should be 11 Digit number,973 followed by 8 numbers. eg:- 973_ _ _ _ _ _ _ _"";
					}
				}
				if(sError != ""Success"")
				{
					appObj.RaiseErrorText(sError);
				}
			}
			break; //[MARK:7-Oct-2019 SD:: Business Products Bulk Activation – Phase II]
			case ""STC Lead CPR"":			
			var sActiveViewName = TheApplication().ActiveViewName();			
				if(FieldValue != null && FieldValue != """")
					{
						if (sActiveViewName == ""STC My Business Leads View"")
						{
						sApplicableVal = FieldValue;
						sApplicableType = ""CR"";
						ValidateID(sApplicableType,sApplicableVal);
						ValidateCR(sApplicableType,sApplicableVal);
						}
					}
				
			
			break;
			//[MARK:7-Oct-2019 SD:: Business Products Bulk Activation – Phase II]
				case ""STC Lead Type"":			
			var sActiveViewName = TheApplication().ActiveViewName();			
			if (sActiveViewName == ""STC My Business Leads View"" && FieldValue !=""Business Lead"")
			{
			appObj.RaiseErrorText(""Business Lead type can not be change"");
			}	
			break;				
				
		} 
		return(ContinueOperation);
	}
	catch(e)
	{ 
		throw(e)
	}
	finally
	{
	}
}
function BusComp_PreWriteRecord ()
{

  var sActiveViewName = TheApplication().ActiveViewName();
  if(sActiveViewName == ""Lead Details View"" || sActiveViewName == ""My Leads View"")
  {
  this.ActivateField(""STC Lead Type"");
  var sLeadType =GetFieldValue(""STC Lead Type"");
  this.ActivateField(""Contact Id"");
  var sContactId = this.GetFieldValue(""Contact Id"");
  var FiberLeadType = TheApplication().InvokeMethod(""LookupValue"",""LEAD_CONTACT_TYPE"",""Fiber Lead"");
  if(sContactId == """" && sLeadType == FiberLeadType)
  {
  TheApplication().RaiseErrorText(""Contact creation is mandatory to create lead for Fiber."");
  }		
  }
  //[MARK:7-Oct-2019 SD:: Business Products Bulk Activation – Phase II]
/*	  if(sActiveViewName == ""STC My Business Leads View"")
	  {
			this.ActivateField(""STC Lead Type"");
			this.ActivateField(""STC Lead First Name"");
			this.ActivateField(""Contact Last Name"");
			this.ActivateField(""STC Lead Last Name"");
			this.ActivateField(""STC Industry Type"");
			this.ActivateField(""STC Lead Cust Type"");
			this.ActivateField(""STC Product Service"");
			this.ActivateField(""STC Lead CPR"");
			this.ActivateField(""STC Lead Source Detail"");
			this.ActivateField(""STC Lead LandLine Number"");
			this.ActivateField(""STC Lead Email"");this.ActivateField(""STC Lead City"");
			this.ActivateField(""STC Lead Road Number"");this.ActivateField(""STC Lead Flat Number"");
			this.ActivateField(""STC Lead City"");this.ActivateField(""STC Block No"");
			var sLeadCity = this.GetFieldValue(""STC Lead City"");
			var sLeadType =this.GetFieldValue(""STC Lead Type"");
			var sFirstName = this.GetFieldValue(""STC Lead First Name"");
			var sLastName = this.GetFieldValue(""STC Lead Last Name"");
			var scontactName = this.GetFieldValue(""Contact Last Name"");
			var sIndustry = this.GetFieldValue(""STC Industry Type"");
			var sCustType = this.GetFieldValue(""STC Lead Cust Type"");
			var sProductService = this.GetFieldValue(""STC Product Service"");
			var sLeadCPR =this.GetFieldValue(""STC Lead CPR"");
			var sLeadSource = this.GetFieldValue(""STC Lead Source Detail"");
			var sLeadLandumber = this.GetFieldValue(""STC Lead LandLine Number"");
			var sEmail = this.GetFieldValue(""STC Lead Email"");
			var sBusinessLead = TheApplication().InvokeMethod(""LookupValue"",""LEAD_CONTACT_TYPE"",""Business Lead"");
			if((sLeadCPR =="""" && sLeadCPR == null) && sBusinessLead == sLeadType)
			{
			TheApplication().RaiseErrorText(""CP Number is a required field, Please enter the value."");
			}
			if(sLeadType =="""" && sBusinessLead == sLeadType)
			{
			TheApplication().RaiseErrorText(""Lead Type is a required field, Please enter the value."");
			}
			if((sFirstName =="""" || sLastName =="""")  && sBusinessLead == sLeadType)
			{
			TheApplication().RaiseErrorText(""First Name /Last Name/Contact is a required field,Please enter the value."");
			}
			if((sIndustry =="""" || sCustType =="""") && sBusinessLead == sLeadType)
			{
			TheApplication().RaiseErrorText(""Industry Type/ Customer Type  is a required field, Please enter the value."");
			}
			if(sLeadSource =="""" && sBusinessLead == sLeadType)
			{
			TheApplication().RaiseErrorText(""Lead Source  is a required field, Please enter the value."");
			}
		   if(sProductService =="""" && sBusinessLead == sLeadType)
			{
			TheApplication().RaiseErrorText(""Product Service Type is a required field, Please enter the value."");
			}
			if(sLeadLandumber =="""" && sBusinessLead == sLeadType)
			{
			TheApplication().RaiseErrorText(""Landline Number is a required field, Please enter the value."");
			}
			if(sEmail =="""" && sBusinessLead == sLeadType)
			{
			TheApplication().RaiseErrorText(""Email Address is a required field, Please enter the value."");
			}
	  }
*/

	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{
	try
	{	
		if (FieldName == ""STC Lead Phone Number"")
		{
			var sNumber = this.GetFieldValue(""STC Lead Phone Number"");
			var sLenth = ToNumber(sNumber.length);
			if (sLenth == 8)
			{
				this.ActivateField(""STC Lead Phone Number"");
				this.SetFieldValue(""STC Lead Phone Number"",""973""+sNumber);
				
			}
		}

		//[MANUJ] : [Optic Fiber] -- START
		if (FieldName == ""Account Id"")
		{
			var sActiveViewName = TheApplication().ActiveViewName();
			if(sActiveViewName == ""Lead Details View"" || sActiveViewName == ""My Leads View"")
			{
			//this.ActivateField(""STC Lead Type"");
			//var sLeadType = this.GetFieldValue(""STC Lead Type"");
			var	sLeadType = TheApplication().GetProfileAttr(""sLeadType"");
			
			var FiberLeadType = TheApplication().InvokeMethod(""LookupValue"",""LEAD_CONTACT_TYPE"",""Fiber Lead"");
			this.ActivateField(""Contact Id"");
			var sContactId = this.GetFieldValue(""Contact Id"");
			this.ActivateField(""Lead Address Id"");
			if(sLeadType == FiberLeadType && sContactId != """")
			{
			var ExistingAccountAddressPicked = TheApplication().GetProfileAttr(""ExistingAccountAddressPicked"");
			var ExistingAccountPriAddrId = TheApplication().GetProfileAttr(""ExistingAccountPriAddrId"");
			//this.ActivateField(""Primary Account Address Id"");
			//var ExistingAccountPriAddrId = this.GetFieldValue(""Primary Account Address Id"");
			if(ExistingAccountAddressPicked == ""Y"" && ExistingAccountPriAddrId != """")
			{

				var LeadAptNo, LeadRoadNo, LeadBlockNo, LeadState,LeadCity,LeadCountry, LeadPCode, LeadBuildNo;
				var CUTAddrBO = TheApplication().GetBusObject(""STC Account Address Thin BO"");
				var CUTAddrBC = CUTAddrBO.GetBusComp(""STC CUT Address Thin"");
				var count = 0;
				with(CUTAddrBC)
				{
				ActivateField(""Account Id"");
				ActivateField(""STC Address Type"");
				ActivateField(""Address Id"");
				ActivateField(""Apartment Number"");
				ActivateField(""STC Road No"");
				ActivateField(""Block No"");
				ActivateField(""State"");
				ActivateField(""City"");
				ActivateField(""Country"");
				ActivateField(""Postal Code"");
				ActivateField(""Building No"");

				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(""Address Id"", ExistingAccountPriAddrId);
				ExecuteQuery(ForwardOnly);
				count = CountRecords();
				var isVATAddrAvailable = FirstRecord();
				if(isVATAddrAvailable)
				{
				 LeadAptNo=GetFieldValue(""Apartment Number"");
				 LeadRoadNo=GetFieldValue(""STC Road No"");
				 LeadBlockNo=GetFieldValue(""Block No"");
				 LeadState=GetFieldValue(""State"");
				 LeadCity=GetFieldValue(""City"");
				 LeadCountry=GetFieldValue(""Country"");
				 LeadPCode=GetFieldValue(""Postal Code"");
				 LeadBuildNo=GetFieldValue(""Building No"");
				
				}
				}
				if (count > 0)
				{
					this.SetFieldValue(""Lead Address Id"", ExistingAccountPriAddrId);
					this.SetFieldValue(""STC Lead Building"", LeadBuildNo);
					this.SetFieldValue(""STC Lead City"", LeadCity);
					this.SetFieldValue(""STC Lead Country"", LeadCountry);
					this.SetFieldValue(""STC Lead Flat Number"", LeadAptNo);
					this.SetFieldValue(""STC Lead Governorate"", LeadState);
					this.SetFieldValue(""STC Lead Road Number"", LeadRoadNo);
					this.SetFieldValue(""STC Block No"", LeadBlockNo);
					this.WriteRecord();
				}
			TheApplication().SetProfileAttr(""ExistingAccountAddressPicked"", ""N"");
			TheApplication().SetProfileAttr(""ExistingAccountPriAddrId"", """");
				
			}
			
			}
		}




		}
		//[MANUJ] : [Optic Fiber] -- END
		return(ContinueOperation);
	}
	catch(e)
	{
	throw(e)
	}
	finally
	{
	}
}
function ValidateCR(sApplicableType,sApplicableVal)
{
	var sApps = TheApplication();
	var sAccountBO,sAccountBC;
	var sSearchExpr;
	var icode;
	var CRNumLen;
	var CRNumRegLen;
	var Delim = ""/"";
	var sErrorMsg = """";
	var sErrorCode = """";
	var sIDLen = """";
	var i,j,k;
	try
	{
		if(sApplicableType == ""CR"")
		{
 		if (sApplicableVal != """" && sApplicableVal != null)
   			{
			var IdIndex = sApplicableVal.indexOf(""/"",0);
			var SDArr = sApplicableVal.split(Delim);
	
		if(IdIndex == -1)
		{
				sApps.RaiseErrorText(""Please enter valid CR number."");
		} 
				else if(IdIndex != -1)
				{
			 	var CRNum = SDArr[0];
				var CRNumReg = SDArr[1];
				 sIDLen = sApplicableVal.length;
				 CRNumLen = CRNum.length;
				 CRNumRegLen = CRNumReg.length;
		}
		if(sIDLen != """" || sIDLen != null)
		{
        	 if(sIDLen != ""10"")
			{
				sApps.RaiseErrorText(""CR Number format should be Seven Digits followed by forward slash and followed by two digits."");
			}


			else if(CRNumLen != ""7"")
			{
			sApps.RaiseErrorText(""CR Number should contain 7 digits before forward slash."");

			} 
			
				else if(CRNumRegLen != ""2"")
				{
				sApps.RaiseErrorText(""CR Number should contain 2 digits after forward slash."");

				}	

     else if(sIDLen == ""10"" && IdIndex != -1)
     {
			 CRNumLen = CRNum.length;
		if(CRNum != """" && CRNum != null)
		{
			for (i =0;i<CRNum.length;i++)
			{
				icode = CRNum.charCodeAt(i);
			
				if (!((icode >= 48) && (icode <=57)))
				{
				sApps.RaiseErrorText(""First 7 characters should be numeric."");
					break;
				}
			}//end For
			}
		if(CRNumReg != """" && CRNumReg != null)
     	CRNumRegLen = CRNumReg.length;
			for (i =0;i<CRNumReg.length;i++)
			{
				icode = CRNumReg.charCodeAt(i);
				
				if (!((icode >= 48) && (icode <=57)))
				{
				sApps.RaiseErrorText(""Last 2 characters should be numeric."");
					break;
				}
			}//end For   
		}	
     }        

   }  
}

	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		sApps = null;
		sAccountBC = null;
		sAccountBO = null;
	}
}
function ValidateID(sApplicableType,sApplicableVal)
{
	var sApps;
	var sAccountBO,sAccountBC;
	var sSearchExpr;
	var msAccType;
	var sleadBC;
	var sLeadBO;
	 msAccType == TheApplication().InvokeMethod(""LookupValue"",""STC_LEAD_CUST_TYPE"",""SME"");
	 msAccType == TheApplication().InvokeMethod(""LookupValue"",""STC_LEAD_CUST_TYPE"",""Corporate"");
		try
	{
		sApps = TheApplication();
		sAccountBO = sApps.GetBusObject(""STC Account Thin BO"");
		sAccountBC = sAccountBO.GetBusComp(""STC Account Thin"");
		sLeadBO = TheApplication().GetBusObject(""Lead"");
		sleadBC = sLeadBO.GetBusComp(""Lead"");	
		
		with(sAccountBC)
		{	sSearchExpr=null;
			ActivateField(""Tax ID Number"");
			ActivateField(""DUNS Number"");
			ActivateField(""Account Status"");
			ActivateField(""Account Type Code"");
			ClearToQuery();
			SetViewMode(AllView);
			if (sApplicableType == ""CPR"" || sApplicableType == ""CR"")
			{
				sSearchExpr = ""[Tax ID Number] = '""+sApplicableVal+""' AND ([Account Status] = 'Active' OR [Account Status] = 'New')"";
			}
			SetSearchExpr(sSearchExpr);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				sApps.RaiseErrorText(""Enter CR number is already exist in system."",sApplicableType,sApplicableVal);
			}

		with(sleadBC)
			{
				sSearchExpr=null;
			ActivateField(""STC Lead CPR"");
			ActivateField(""STC Lead Cust Type"");
			//ActivateField(""Account Status"");
		//	ActivateField(""Account Type Code"");
			ClearToQuery();
			SetViewMode(AllView);
			if (sApplicableType == ""CPR"" || sApplicableType == ""CR"")
			{
				sSearchExpr = ""[STC Lead CPR] = '""+sApplicableVal+""'"";
			}
			SetSearchExpr(sSearchExpr);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				sApps.RaiseErrorText(""Enter CR number is already exist in system."",sApplicableType,sApplicableVal);
			}
			}


		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		sApps = null;
		sAccountBC = null;
		sAccountBO = null;
		sleadBC = null;
		sLeadBO = null;
	}
}
function BusComp_PreWriteRecord ()
{
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{
	var appObj=TheApplication();
	var svc;
	var Input;
	var Output;
	switch(FieldName)
    {
		case ""Contract Product Name"":
		svc = appObj.GetService(""SIS OM PMT Service"");
		Input = appObj.NewPropertySet();
		Output = appObj.NewPropertySet();
		Input.SetProperty(""Business Component Name"",""STC MCommerce Product BC""); // Input Agruments
		Input.SetProperty(""Business Object Name"",""STC MCommerce BO"");		
		svc.InvokeMethod(""Refresh Business Component"", Input, Output);
        break;
		case ""Final Price"":
		var Price = this.GetFieldValue(""Final Price"");
		if(Price == null || Price == """")
		{
			this.SetFieldValue(""STC Final Price"",""0"");
		}
		else
		{
			this.SetFieldValue(""STC Final Price"",Price);
		}
		svc = appObj.GetService(""SIS OM PMT Service"");
		Input = appObj.NewPropertySet();
		Output = appObj.NewPropertySet();
		Input.SetProperty(""Business Component Name"",""STC MCommerce Product BC""); // Input Agruments
		Input.SetProperty(""Business Object Name"",""STC MCommerce BO"");		
		svc.InvokeMethod(""Refresh Business Component"", Input, Output);
        break;
		case ""Plan Product Name"":
		svc = appObj.GetService(""SIS OM PMT Service"");
		Input = appObj.NewPropertySet();
		Output = appObj.NewPropertySet();
		Input.SetProperty(""Business Component Name"",""STC MCommerce Product BC""); // Input Agruments
		Input.SetProperty(""Business Object Name"",""STC MCommerce BO"");		
		svc.InvokeMethod(""Refresh Business Component"", Input, Output);
        break;
		case ""Product Name"":
		svc = appObj.GetService(""SIS OM PMT Service"");
		Input = appObj.NewPropertySet();
		Output = appObj.NewPropertySet();
		Input.SetProperty(""Business Component Name"",""STC MCommerce Product BC""); // Input Agruments
		Input.SetProperty(""Business Object Name"",""STC MCommerce BO"");		
		svc.InvokeMethod(""Refresh Business Component"", Input, Output);
        break;
		

       	
           
        default : 
       	break;		
    }
    return (ContinueOperation);
}
function BusComp_WriteRecord ()
{
	var appObj = TheApplication();
	var DynMatId,DynMatName,vRuleName,PriceAttribBC,PriceAttribDimentionBC,RecExists,DimentionName,vBCLOV,DimentionLOVName,Sequence,sStatus;
	var sMessage = """", PlanVariantAttrib="""";
	var sLengthMsg = 0;
	var sSwitch = appObj.InvokeMethod(""LookupValue"",""STC_PROUCT_SWITCH"",""Mcommerce Switch"");//Rutuja: For stopping data overiding
	if(sSwitch == ""Y"")
	{
		with(this)
		{	//WriteRecord();
		ActivateField(""Contract Category"");
		ActivateField(""Device Category"");
		ActivateField(""Plan Category"");
		ActivateField(""Contract Item Category"");
		ActivateField(""Plan Item Category"");
		ActivateField(""Device Item Category"");
		ActivateField(""Device Attribute Id"");
		ActivateField(""Device Attribute"");
		ActivateField(""Plan Attribute"");
		ActivateField(""Contract Attribute"");
		ActivateField(""STC CRM Price"");
		ActivateField(""STC Final Price"");
		ActivateField(""Product Id"");
		ActivateField(""Contract Product Id"");
		ActivateField(""Plan Product Id"");
		ActivateField(""Sub Service Type"");
		ActivateField(""Plan Sub Service Type"");
		ActivateField(""Product Sub Service Type"");
		ActivateField(""Category"");
		ActivateField(""Status"");
		ActivateField(""Comments"");
		ActivateField(""Item Category"");
		ActivateField(""Plan Variant Id"");//Mayank: Added for Ecom-- Variant---
		ActivateField(""Plan Variant Attrib"");//Mayank: Added for Ecom-- Variant---
		var ItemCategory = """";
		var Category = """";
		var	ContCategory = GetFieldValue(""Contract Category"");
		var	PlanCategory = GetFieldValue(""Plan Category"");
		var	DevCategory = GetFieldValue(""Device Category"");
		var	ContItemCategory = GetFieldValue(""Contract Item Category"");
		var	PlanItemCategory = GetFieldValue(""Plan Item Category"");
		var	DevItemCategory = GetFieldValue(""Device Item Category"");
		var DeviceAttrId = GetFieldValue(""Device Attribute Id"");
		var AttrPrice = 0;
		var CRMPrice = GetFieldValue(""STC CRM Price"");
		var DeviceProdId = GetFieldValue(""Product Id"");
		var PlanProdId = GetFieldValue(""Plan Product Id"");
		var ContractProdId = GetFieldValue(""Contract Product Id"");
		var DeviceSubServiceType = GetFieldValue(""Product Sub Service Type"");
		var PlanSubServiceType = GetFieldValue(""Plan Sub Service Type"");
		var SubServiceType = GetFieldValue(""Sub Service Type"");
		var DeviceAttrib = GetFieldValue(""Device Attribute"");
		var PlanAttrib = GetFieldValue(""Plan Attribute"");
		var ContractAttrib = GetFieldValue(""Contract Attribute"");
		sStatus = GetFieldValue(""Status"");
		var PlanVariantProdId = GetFieldValue(""Plan Variant Id"");
		
		var vDevPlanLevel = GetProductPlanLevel(DeviceProdId);
		
		if((vDevPlanLevel == """" || vDevPlanLevel == null) || (vDevPlanLevel != ""AddOnEquipment"" && vDevPlanLevel != ""AddonContract""))
		{
			if(PlanVariantProdId != null && PlanVariantProdId != """")
			{
				PlanVariantAttrib = GetPlanVariantAttrib(PlanProdId,PlanVariantProdId);
				PlanAttrib = PlanVariantAttrib;
			}//Mayank: Added for Ecom-- Variant--- STOP --------------
			if(sStatus != appObj.InvokeMethod(""LookupValue"",""STC_ECOM_STATUS"",""Expired""))
			{
				if(DevCategory != null && DevCategory != """")
				{
					Category = DevCategory;
					ItemCategory = DevItemCategory;
				}
				else if((ContCategory != null && ContCategory != """") && (PlanCategory == null || PlanCategory == """"))
				{
					Category = ContCategory;
					ItemCategory = ContItemCategory;
				}
				else if ((PlanCategory != null && PlanCategory != """") && (ContCategory == null || ContCategory == """"))
				{
					Category = PlanCategory;
					ItemCategory = PlanItemCategory;
				}//Mayank: Added for Refresh
				else if ((PlanCategory != null && PlanCategory != """") && (ContCategory != null && ContCategory != """") && PlanItemCategory == ""Refresh Plan"" )
				{
					Category = PlanCategory;
					ItemCategory = PlanItemCategory;
				}
				else
				{
					if(sMessage == null || sMessage == """")
						sMessage = ""Provided Combination is Incorrect."";
					else
						sMessage = sMessage +"" Provided Combination is Incorrect."";
				}

				if(DeviceSubServiceType !="""" && DeviceSubServiceType != null)
				{
					SubServiceType = DeviceSubServiceType;
				}
				else if(PlanSubServiceType !="""" && PlanSubServiceType!= null)
				{
					SubServiceType = PlanSubServiceType;
				}
				//if(DeviceProdId != """" && DevItemCategory != ""Pre-Booking"" && DevItemCategory != ""Variant"" && DevItemCategory != ""Discount"" && DevItemCategory != """")mayank-1Nov2018: Added for Ecom Retail 
				if(DeviceProdId != """" && DevItemCategory != ""Pre-Booking"" && DevItemCategory != ""Variant"" && DevItemCategory != ""Discount"" && DevItemCategory != ""Retail Device"" && DevItemCategory != """")//Mayank-1Nov2018: Added for Ecom Retail
				{
					if(ContractProdId == null || ContractProdId == """")
					{
						sMessage = ""Please select Contract Product along with Device."";
					}
					if(Category == ""Equipment"" && (DeviceAttrib == null || DeviceAttrib == """"))
					{
						if(sMessage == null || sMessage == """")
							sMessage = ""Attribute Value is Missing for Device Selected."";
						else
							sMessage = sMessage +"" Attribute Value is Missing for Device Selected."";
					}
					else
					{
						var PriceListBC = appObj.GetBusObject(""Price List Item - UAN"").GetBusComp(""Price List Item - UAN"");
						with(PriceListBC)
						{
							ActivateField(""Product Id"");
							ActivateField(""Dynamic Matrix Id"");
							ActivateField(""Dynamic Matrix"");
							SetViewMode(AllView);
							ClearToQuery();
							SetSearchSpec(""Product Id"", DeviceProdId);
							ExecuteQuery();
							if(FirstRecord())
							{
								DynMatId = GetFieldValue(""Dynamic Matrix Id"");
								CRMPrice = GetFieldValue(""Original List Price"");
								DynMatName = GetFieldValue(""Dynamic Matrix"");
							}
							vBCLOV = appObj.GetBusObject(""List Of Values"").GetBusComp(""List Of Values"");
							if(DynMatId != null && DynMatId != """")
							{
								with(vBCLOV)
								{
									SetViewMode(AllView);
									ActivateField(""Type"");
									ActivateField(""Description"");
									ActivateField(""Value"");
									ClearToQuery();
									SetSearchSpec(""Type"",""STC_ECOM_ATTRIBUTE_PRICE"");
									SetSearchSpec(""Description"",DynMatName);
									ExecuteQuery(ForwardOnly);
									if(FirstRecord())
									{  
										vRuleName = GetFieldValue(""Value"");  
									}
								}
							}
						}
						if(vRuleName != """" && vRuleName != null)
						{
							PriceAttribDimentionBC = appObj.GetBusObject(""PSP Dynamic Matrix"").GetBusComp(""PSP Dynamic Matrix Dimension"");
							PriceAttribBC = appObj.GetBusObject(""PSP Dynamic Matrix"").GetBusComp(""PSP Dynamic Matrix Rule"");
							with(PriceAttribDimentionBC)
							{
								ActivateField(""Dim Name"");
								ActivateField(""Dom Type Cd"");
								ActivateField(""Dynamic Matrix Id"");
								ActivateField(""Sort Order"");
								SetViewMode(AllView);
								ClearToQuery();
								SetSearchSpec(""Dynamic Matrix Id"", DynMatId);
								SetSearchSpec(""Dom Type Cd"", ""Attribute"");
								ExecuteQuery(ForwardOnly);	
								var sCountDevice = CountRecords();
								RecExists=FirstRecord();
								if (sCountDevice > 0)
								{
									var searchst = ""[Dynamic Matrix Id] = '"" + DynMatId + ""'"";
									while(RecExists)
									{
										DimentionName = GetFieldValue(""Dim Name"");
										Sequence = GetFieldValue(""Sort Order"");
										vBCLOV = appObj.GetBusObject(""List Of Values"").GetBusComp(""List Of Values"");
										with(vBCLOV)
										{
											SetViewMode(AllView);
											ActivateField(""Type"");
											ActivateField(""Name"");
											ActivateField(""Value"");
											ClearToQuery();
											SetSearchSpec(""Type"",""STC_ECOM_ATTRIBUTE_NAME"");
											SetSearchSpec(""Name"",DimentionName);
											ExecuteQuery();
											if(FirstRecord())
											{  
												DimentionLOVName = GetFieldValue(""Value""); 
												DimentionName = DimentionLOVName.substring(0, 4);
												if(Sequence == 1 && DimentionName == ""PLAN"")
												{
													if(PlanProdId == null || PlanProdId == """")
													{
														if(sMessage == null || sMessage == """")
															sMessage = ""Please select Plan."";
														else
															sMessage = sMessage +"" Please select Plan."";
													}
													else if(PlanAttrib == null || PlanAttrib == """")
													{
														if(sMessage == null || sMessage == """")
															sMessage = ""Attribute Value is Missing for Plan Selected."";
														else
															sMessage = sMessage +"" Attribute Value is Missing for Plan Selected."";
													}
													searchst = 	searchst+"" AND [String Matrix Column 2] = '"" +PlanAttrib+ ""'"";									
												}
												else if(Sequence == 1 && DimentionName == ""OFFR"")
												{
													searchst = 	searchst+"" AND [String Matrix Column 2] = 'NO'"";									
												}
												else if(Sequence == 1 && DimentionName == ""CONT"")
												{
													if(ContractAttrib == null || ContractAttrib == """")
													{
														if(sMessage == null || sMessage == """")
															sMessage = ""Attribute Value is Missing for Contracted Selected."";
														else
															sMessage = sMessage +"" Attribute Value is Missing for Contracted Selected."";
													}
													searchst = 	searchst+"" AND [String Matrix Column 2] = '"" +ContractAttrib+ ""'"";									
												}
												else if(Sequence == 1 && DimentionName == ""DEVI"")
												{
													if(DeviceAttrib == null || DeviceAttrib == """")
													{
														if(sMessage == null || sMessage == """")
															sMessage = ""Attribute Value is Missing for Device Selected."";
														else
															sMessage = sMessage +"" Attribute Value is Missing for Device Selected."";
													}
													searchst = 	searchst+"" AND [String Matrix Column 2] = '"" +DeviceAttrib+ ""'"";									
												}
												else if(Sequence == 2 && DimentionName == ""PLAN"")
												{
													if(PlanProdId == null || PlanProdId == """")
													{
														if(sMessage == null || sMessage == """")
															sMessage = ""Please select Plan."";
														else
															sMessage = sMessage +"" Please select Plan."";
													}
													else if(PlanAttrib == null || PlanAttrib == """")
													{
														if(sMessage == null || sMessage == """")
															sMessage = ""Attribute Value is Missing for Plan Selected."";
														else
															sMessage = sMessage +"" Attribute Value is Missing for Plan Selected."";
													}
													searchst = 	searchst+"" AND [String Matrix Column 3] = '"" +PlanAttrib+ ""'"";									
												}
												else if(Sequence == 2 && DimentionName == ""OFFR"")
												{
													searchst = 	searchst+"" AND [String Matrix Column 3] = 'NO'"";									
												}
												else if(Sequence == 2 && DimentionName == ""DEVI"")
												{
													if(DeviceAttrib == null || DeviceAttrib == """")
													{
														if(sMessage == null || sMessage == """")
															sMessage = ""Attribute Value is Missing for Device Selected."";
														else
															sMessage = sMessage +"" Attribute Value is Missing for Device Selected."";
													}
													searchst = 	searchst+"" AND [String Matrix Column 3] = '"" +DeviceAttrib+ ""'"";									
												}
												else if(Sequence == 2 && DimentionName == ""CONT"")
												{
													if(ContractAttrib == null || ContractAttrib == """")
													{
														if(sMessage == null || sMessage == """")
															sMessage = ""Attribute Value is Missing for Contracted Selected."";
														else
															sMessage = sMessage +"" Attribute Value is Missing for Contracted Selected."";
														//appObj.RaiseErrorText(""Attribute Value is Missing for Contracted Selected."");
													}
													searchst = 	searchst+"" AND [String Matrix Column 3] = '"" +ContractAttrib+ ""'"";									
												}
												else if(Sequence == 3 && DimentionName == ""CONT"")
												{
													if(ContractAttrib == null || ContractAttrib == """")
													{
														if(sMessage == null || sMessage == """")
															sMessage = ""Attribute Value is Missing for Contracted Selected."";
														else
															sMessage = sMessage +"" Attribute Value is Missing for Contracted Selected."";
														//appObj.RaiseErrorText(""Attribute Value is Missing for Contracted Selected."");
													}
													searchst = 	searchst+"" AND [String Matrix Column 4] = '"" +ContractAttrib+ ""'"";									
												}
												else if(Sequence == 3 && DimentionName == ""OFFR"")
												{
													searchst = 	searchst+"" AND [String Matrix Column 4] = 'NO'"";									
												}
												else if(Sequence == 3 && DimentionName == ""DEVI"")
												{
													if(DeviceAttrib == null || DeviceAttrib == """")
													{
														if(sMessage == null || sMessage == """")
															sMessage = ""Attribute Value is Missing for Device Selected."";
														else
															sMessage = sMessage +"" Attribute Value is Missing for Device Selected."";
														//appObj.RaiseErrorText(""Attribute Value is Missing for Device Selected."");
													}
													searchst = 	searchst+"" AND [String Matrix Column 4] = '"" +DeviceAttrib+ ""'"";									
												}
												else if(Sequence == 3 && DimentionName == ""PLAN"")
												{
													if(PlanProdId == null || PlanProdId == """")
													{
														if(sMessage == null || sMessage == """")
															sMessage = ""Please select Plan."";
														else
															sMessage = sMessage +"" Please select Plan."";
													}
													else if(PlanAttrib == null || PlanAttrib == """")
													{
														if(sMessage == null || sMessage == """")
															sMessage = ""Attribute Value is Missing for Plan Selected."";
														else
															sMessage = sMessage +"" Attribute Value is Missing for Plan Selected."";
													}
													searchst = 	searchst+"" AND [String Matrix Column 4] = '"" +PlanAttrib+ ""'"";									
												}
											}
										}
										RecExists = NextRecord();
									}
								}
							}
							with(PriceAttribBC)
							{
								ActivateField(""String Matrix Column 2"");
								ActivateField(""String Matrix Column 3"");
								ActivateField(""String Matrix Column 4"");
								ActivateField(""Number Matrix Column 1"");
								ActivateField(""Dynamic Matrix Id"");
								SetViewMode(AllView);
								ClearToQuery();
								SetSearchExpr(searchst);
								ExecuteQuery();
								if(FirstRecord())
								{
									AttrPrice = GetFieldValue(""Number Matrix Column 1"");
									if(AttrPrice == ""9999"")
									{
										sMessage = ""Attribute Base pricing is 9999."";
									}
								}
								else
								{
									if(sMessage == null || sMessage == """")
										sMessage = ""Selected Combination Record dosn't have Attribute Base pricing Defined."";
									else
										sMessage = sMessage +"" Selected Combination Record dosn't have Attribute Base pricing Defined."";
								}
							}
						}
						if(DynMatId)
						{
							SetFieldValue(""STC Final Price"", AttrPrice);
						}
						else
						{
							SetFieldValue(""STC Final Price"", CRMPrice);
						}
					}
				}
				SetFieldValue(""Category"",Category);
				SetFieldValue(""Item Category"",ItemCategory);
				SetFieldValue(""Sub Service Type"", SubServiceType);
				if(sMessage != null && sMessage != """")
				{
					SetFieldValue(""Status"",appObj.InvokeMethod(""LookupValue"",""STC_ECOM_STATUS"",""Inactive""));
					sLengthMsg = sMessage.length;
					if(sLengthMsg > 250)
					sMessage = sMessage.substring(0, 250);
					SetFieldValue(""Comments"",sMessage);
				}
				else
				{
					SetFieldValue(""Status"",appObj.InvokeMethod(""LookupValue"",""STC_ECOM_STATUS"",""Active""));
					var sProfAtt = appObj.GetProfileAttr(""Comments"");
					if(sProfAtt != null && sProfAtt != """")
					{
						SetFieldValue(""Comments"", sProfAtt);
					}
					else
					{
						SetFieldValue(""Comments"","""");
					}
				}
				WriteRecord();
			}
		}//end if((vDevPlanLevel == """"
	}
	}//End if (sSwitch == ""Y"")
	appObj = null;
}
function GetPlanVariantAttrib(PlanProdId,PlanVariantProdId)
{
	try
	{
		var MCOMVrntBC = TheApplication().GetBusObject(""STC MCommerce BO"").GetBusComp(""STC MCommerce Product BC"");
		with(MCOMVrntBC) 
		{ 
			ActivateField(""Plan Variant Attrib"");
			ActivateField(""Plan Product Id"");
			ActivateField(""Plan Variant Id"");
			ActivateField(""Product Id"");
			ActivateField(""Contract Product Id"");
			ActivateField(""Status"");
			SetViewMode(AllView);
			ClearToQuery();
			var searchstVarnt = ""[Plan Product Id] = '"" + PlanProdId + ""' AND [Plan Variant Id] = '"" + PlanVariantProdId + ""' AND [Contract Product Id] IS NULL AND [Product Id] IS NULL"";
			SetSearchExpr(searchstVarnt);
			ExecuteQuery();
			if(FirstRecord())
			{
				var PlanVariantAttrib = GetFieldValue(""Plan Variant Attrib"");
			}
		}
		return(PlanVariantAttrib);
	}
	catch(e)
	{
		throw(e)
	}
	finally
	{
		MCOMVrntBC=null;
	}
}
function GetProductPlanLevel(DeviceProdId)
{
	var vDevProdName = """", vDevPlanLevel = """";

	if(DeviceProdId != """" && DeviceProdId != null)
	{//[NAVIN:03Dec2019:Eshop_Reprice-New Device Framework]
		var ProductBO = TheApplication().GetBusObject(""Internal Product"")
		var ProductBC = ProductBO.GetBusComp(""Internal Product"");
		with(ProductBC)
		{	ActivateField(""Id"");
			ActivateField(""Name"");
			ActivateField(""STC Plan Level"");
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchSpec(""Id"", DeviceProdId);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{	vDevProdName = GetFieldValue(""Name"");
				vDevPlanLevel = GetFieldValue(""STC Plan Level"");}
		}//end with(ProductBC)
		ProductBC = null;
		ProductBO = null;
	}
	return vDevPlanLevel;
}
"
"//Your public declarations go here...
var vOldSIM = """";
var vOldMSISDN = """";"
function BlockRe_selection (OldValue,NewValue)
{
	try
	{
	var appObj;
	var psInputs,psOutputs,bsBlockNumber;
	appObj = TheApplication();
	
	                                    
            bsBlockNumber = appObj.GetService(""RMS RMS Block Number"") ;
            psInputs = appObj.NewPropertySet();
            psOutputs = appObj.NewPropertySet();
            //var vNewValue = this.GetFieldValue(""<mapped field in OLI for storing MSISDN/SIM number>"");         
            var vBlockedFor = this.GetFieldValue(""IBAN"");
            psInputs.SetProperty(""BlockNumber"",NewValue);
            psInputs.SetProperty(""BlockedFor"",vBlockedFor);
            psInputs.SetProperty(""ReleaseNumber"",OldValue); // variable set at PreSetFieldValue
                        
            bsBlockNumber.InvokeMethod(""BlockNumber"",psInputs,psOutputs);
            
 

	}
	catch(e)
	{
	throw(e.errText);
	}
	finally
	{
	psInputs = null;
    psOutputs = null;
    bsBlockNumber = null;
    appObj = null;
	}
}
function BusComp_ChangeRecord ()
{
		TheApplication().SetProfileAttr(""STCNewNetworkType"",this.GetFieldValue(""STC New Network Type""));
		TheApplication().SetProfileAttr(""STCNetworkCustType"",this.GetFieldValue(""Customer Type""));
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	if(FieldName == ""MSISDN"")
	{
			if(FieldValue !="""" && FieldValue != null)
			{
			vOldMSISDN = this.GetFieldValue(""MENA CLI ID"");
			var sRMSNumbo = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
			var sRMSNumbc = sRMSNumbo.GetBusComp(""RMS NM Number Enquiry"");
			var vCanId = this.GetFieldValue(""STC CAN Id"");
			with(sRMSNumbc)
			{
				ActivateField(""Number String"");
				ActivateField(""Record Blocked For"");
				ActivateField(""Allocated To"");
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(""Number String"",FieldValue);
				ExecuteQuery(ForwardOnly); 
				if(FirstRecord())
				{
					var sBlockedFor = GetFieldValue(""Record Blocked For"");
					var sAllocatd = GetFieldValue(""Allocated To""); 
					var vBillingAccount = this.GetFieldValue(""IBAN"");
					if ((sBlockedFor != """" && sBlockedFor != null))
					{
						if((sBlockedFor != vBillingAccount) && sBlockedFor !=  vCanId)//[MANUJ] : [Avaya]
						{
							TheApplication().RaiseErrorText(""The Selected MSISDN is Reserved for Another Customer (as part of Migration). Please Select Another Number"");
						return (CancelOperation);
						}
					}
					var loginname = TheApplication().GetProfileAttr(""Login Name""); 
					var strIsBS = TheApplication().GetProfileAttr(""STC GroupCode Id"");
					if (strIsBS != sAllocatd && loginname!=""SADMIN"")
					{
						TheApplication().RaiseErrorText(""You do not have access to select this MSISDN"");
						return(CancelOperation);
					}//end of if
					
				}
			}
		}

	}
	if(FieldName == ""STC SIM Number"")
	{
		
		var sCardCategoryCalc = ""POSTPAID"";
		var sSTCSIMCalc="""";
		var CorpDealer="""";
		var sCardType = """";
		var sCardCategory="""";
		var CustomerType= this.GetFieldValue(""Customer Type"");
		vOldSIM = this.GetFieldValue(""Donor SIM"");
		if (vOldSIM == FieldValue)
		{
			TheApplication().RaiseErrorText(""Old and New SIM Should not be same"");
		}
		else
		{
			if(this.GetFieldValue(""Product Type"") ==""VOBB"")
			{
				sSTCSIMCalc=""Voice"";
			}
			else
			{
				sSTCSIMCalc=""Data"";
			}
			
			if (FieldValue != """")
			{
				var sRMSNumberbo = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
				var sRMSNumberbc = sRMSNumberbo.GetBusComp(""RMS NM Number Enquiry"");                                  
				with(sRMSNumberbc)
				{
					ActivateField(""Num Mstr Number String"");
					ActivateField(""Record Blocked For"");
					ActivateField(""Allocated To"");
					ActivateField(""STC SIM Card Type"");// Mayank: Added for UNIFIED
					ActivateField(""Card Category"");// Mayank: Added for UNIFIED
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchSpec(""Num Mstr Number String"",FieldValue);
					ExecuteQuery(ForwardOnly); 
					if(FirstRecord())
					{
						var sBlockFor = GetFieldValue(""Record Blocked For"");
						CorpDealer = GetFieldValue(""Allocated To"");
						var CorpDealerLOV = TheApplication().InvokeMethod(""LookupValue"",""STC_CORP_DEALER"",CorpDealer);
						//var vBlockedForBAN = this.GetFieldValue(""STC Migration Blocked For"");
						// Mayank: Added for UNIFIED ---------------START--------------------------------
						 sCardType = GetFieldValue(""STC SIM Card Type"");
						 sCardCategory = GetFieldValue(""Card Category"");

						
						if(sCardCategory == ""Postpaid"")
						{
							sCardCategory = ""POSTPAID"";
						}
						if(sCardCategory == ""Prepaid"")
						{
							sCardCategory = ""PREPAID"";
						}
						if(sCardCategory != ""UNIFIED"" && sCardType != ""UNIFIED"")
						{
							if(sCardCategoryCalc != sCardCategory)
							{
								if((sCardCategoryCalc == null || sCardCategoryCalc == """") && sSTCSIMCalc == ""Data"")
								{
									var a = 1;
								}
								else
								{
									TheApplication().RaiseErrorText(""Selected SIM Card Category doesn't match with the Package."");
									return(CancelOperation);	
								}
							}
							if(sSTCSIMCalc != sCardType)
							{
								TheApplication().RaiseErrorText(""Selected SIM Card Type doesn't match with the Package."");
								return(CancelOperation);
							}
						}// Mayank: Added for UNIFIED ---------------STOP--------------------------------
						if(CustomerType == ""Corporate"")
						{
							if (sBlockFor == """" || sBlockFor == null)
							{
								var CorpDealerStr = CorpDealerLOV.substring(0,3);
								if(CorpDealerStr != ""CSR"")
								{
									TheApplication().RaiseErrorText(""Selected SIM is not under corporate pool"");
									return(CancelOperation);
								}
							}
						}// if(OrderAccType == ""Corporate"")
						var IndDealerLOV = TheApplication().InvokeMethod(""LookupValue"",""STC_IND_DEALER"",CorpDealer);
						//var vBlockedForBAN = this.GetFieldValue(""STC Migration Blocked For"");
						if(CustomerType != ""Corporate"")
						{
							if (sBlockFor == """" || sBlockFor == null)
							{
								var IndDealerStr = IndDealerLOV.substring(0,3);
								if(IndDealerStr != ""CSR"")
								{
									TheApplication().RaiseErrorText(""Selected SIM is under corporate pool"");
									return(CancelOperation);
								}
							} 
						}// if(OrderAccType != ""Corporate"")
						var vBillingAccnt = this.GetFieldValue(""IBAN"");
						if (sBlockFor != """" && sBlockFor != null)
						{
							if(sBlockFor != vBillingAccnt)
							{
								TheApplication().RaiseErrorText(""The Selected SIM is Reserved for Another Customer (as part of Migration). Please Select Another SIM"");
								return (CancelOperation);
							}
						}

					}
				}	
				sRMSNumberbc = null;
				sRMSNumberbo = null;
			}
		}
	}

	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{
	if (FieldName == ""STC SIM Number"")
	{
		var sSIMno = this.GetFieldValue(""STC SIM Number"");
		BlockRe_selection(vOldSIM,sSIMno);
	}
	if(FieldName== ""MSISDN"")
	{
		var newMSISDN = this.GetFieldValue(""MSISDN"");
		BlockRe_selection(vOldMSISDN,newMSISDN);
	}

if (FieldName == ""STC New Network Type"")
	{
		
		TheApplication().SetProfileAttr(""STCNewNetworkType"",this.GetFieldValue(""STC New Network Type""));
		
	}
	if(FieldName == ""Customer Type"")
	{
		TheApplication().SetProfileAttr(""STCNetworkCustType"",this.GetFieldValue(""Customer Type""));
	}



}
"//Your public declarations go here...
var vOldSIM = """";
var vOldMSISDN = """";"
function BlockRe_selection (OldValue,NewValue)
{
	try
	{
	var appObj;
	var psInputs,psOutputs,bsBlockNumber;
	appObj = TheApplication();
	
	                                    
            bsBlockNumber = appObj.GetService(""RMS RMS Block Number"") ;
            psInputs = appObj.NewPropertySet();
            psOutputs = appObj.NewPropertySet();
            //var vNewValue = this.GetFieldValue(""<mapped field in OLI for storing MSISDN/SIM number>"");         
            var vBlockedFor = this.GetFieldValue(""Billing Account Id"");
            psInputs.SetProperty(""BlockNumber"",NewValue);
            psInputs.SetProperty(""BlockedFor"",vBlockedFor);
            psInputs.SetProperty(""ReleaseNumber"",OldValue); // variable set at PreSetFieldValue
                        
            bsBlockNumber.InvokeMethod(""BlockNumber"",psInputs,psOutputs);
            
 

	}
	catch(e)
	{
	throw(e.errText);
	}
	finally
	{
	psInputs = null;
    psOutputs = null;
    bsBlockNumber = null;
    appObj = null;
	}
}
function BusComp_ChangeRecord ()
{
		TheApplication().SetProfileAttr(""STCNewNetworkType"",this.GetFieldValue(""STC New Network Type""));
		TheApplication().SetProfileAttr(""STCNetworkCustType"",this.GetFieldValue(""Customer Type""));
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	if(FieldName == ""MSISDN"")
	{
			if(FieldValue !="""" && FieldValue != null)
			{
			vOldMSISDN = this.GetFieldValue(""MENA CLI ID"");
			var sRMSNumbo = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
			var sRMSNumbc = sRMSNumbo.GetBusComp(""RMS NM Number Enquiry"");
			var vCanId = this.GetFieldValue(""Customer Account Id"");
			with(sRMSNumbc)
			{
				ActivateField(""Number String"");
				ActivateField(""Record Blocked For"");
				ActivateField(""Allocated To"");
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(""Number String"",FieldValue);
				ExecuteQuery(ForwardOnly); 
				if(FirstRecord())
				{
					var sBlockedFor = GetFieldValue(""Record Blocked For"");
					var sAllocatd = GetFieldValue(""Allocated To""); 
					var vBillingAccount = this.GetFieldValue(""Billing Account Id"");
					if ((sBlockedFor != """" && sBlockedFor != null))
					{
						if((sBlockedFor != vBillingAccount) && sBlockedFor !=  vCanId)//[MANUJ] : [Avaya]
						{
							TheApplication().RaiseErrorText(""The Selected MSISDN is Reserved for Another Customer (as part of Migration). Please Select Another Number"");
						return (CancelOperation);
						}
					}
					var loginname = TheApplication().GetProfileAttr(""Login Name""); 
					var strIsBS = TheApplication().GetProfileAttr(""STC GroupCode Id"");
					if (strIsBS != sAllocatd && loginname!=""SADMIN"")
					{
						TheApplication().RaiseErrorText(""You do not have access to select this MSISDN"");
						return(CancelOperation);
					}//end of if
					
				}
			}
		}

	}
	if(FieldName == ""SIM"")
	{
		
		var sCardCategoryCalc = ""POSTPAID"";
		var sSTCSIMCalc="""";
		var CorpDealer="""";
		var sCardType = """";
		var sCardCategory="""";
		var CustomerType= this.GetFieldValue(""Customer Type"");
		vOldSIM = this.GetFieldValue(""Old SIM"");
		if (vOldSIM == FieldValue)
		{
			TheApplication().RaiseErrorText(""Old and New SIM Should not be same"");
		}
		else
		{
			if(this.GetFieldValue(""Product Type"") ==""VOBB"")
			{
				sSTCSIMCalc=""Voice"";
			}
			else
			{
				sSTCSIMCalc=""Data"";
			}
			
			if (FieldValue != """")
			{
				var sRMSNumberbo = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
				var sRMSNumberbc = sRMSNumberbo.GetBusComp(""RMS NM Number Enquiry"");                                  
				with(sRMSNumberbc)
				{
					ActivateField(""Num Mstr Number String"");
					ActivateField(""Record Blocked For"");
					ActivateField(""Allocated To"");
					ActivateField(""STC SIM Card Type"");// Mayank: Added for UNIFIED
					ActivateField(""Card Category"");// Mayank: Added for UNIFIED
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchSpec(""Num Mstr Number String"",FieldValue);
					ExecuteQuery(ForwardOnly); 
					if(FirstRecord())
					{
						var sBlockFor = GetFieldValue(""Record Blocked For"");
						CorpDealer = GetFieldValue(""Allocated To"");
						var CorpDealerLOV = TheApplication().InvokeMethod(""LookupValue"",""STC_CORP_DEALER"",CorpDealer);
						//var vBlockedForBAN = this.GetFieldValue(""STC Migration Blocked For"");
						// Mayank: Added for UNIFIED ---------------START--------------------------------
						 sCardType = GetFieldValue(""STC SIM Card Type"");
						 sCardCategory = GetFieldValue(""Card Category"");

						
						if(sCardCategory == ""Postpaid"")
						{
							sCardCategory = ""POSTPAID"";
						}
						if(sCardCategory == ""Prepaid"")
						{
							sCardCategory = ""PREPAID"";
						}
						if(sCardCategory != ""UNIFIED"" && sCardType != ""UNIFIED"")
						{
							if(sCardCategoryCalc != sCardCategory)
							{
								if((sCardCategoryCalc == null || sCardCategoryCalc == """") && sSTCSIMCalc == ""Data"")
								{
									var a = 1;
								}
								else
								{
									TheApplication().RaiseErrorText(""Selected SIM Card Category doesn't match with the Package."");
									return(CancelOperation);	
								}
							}
							if(sSTCSIMCalc != sCardType)
							{
								TheApplication().RaiseErrorText(""Selected SIM Card Type doesn't match with the Package."");
								return(CancelOperation);
							}
						}// Mayank: Added for UNIFIED ---------------STOP--------------------------------
						if(CustomerType == ""Corporate"")
						{
							if (sBlockFor == """" || sBlockFor == null)
							{
								var CorpDealerStr = CorpDealerLOV.substring(0,3);
								if(CorpDealerStr != ""CSR"")
								{
									TheApplication().RaiseErrorText(""Selected SIM is not under corporate pool"");
									return(CancelOperation);
								}
							}
						}// if(OrderAccType == ""Corporate"")
						var IndDealerLOV = TheApplication().InvokeMethod(""LookupValue"",""STC_IND_DEALER"",CorpDealer);
						//var vBlockedForBAN = this.GetFieldValue(""STC Migration Blocked For"");
						if(CustomerType != ""Corporate"")
						{
							if (sBlockFor == """" || sBlockFor == null)
							{
								var IndDealerStr = IndDealerLOV.substring(0,3);
								if(IndDealerStr != ""CSR"")
								{
									TheApplication().RaiseErrorText(""Selected SIM is under corporate pool"");
									return(CancelOperation);
								}
							} 
						}// if(OrderAccType != ""Corporate"")
						var vBillingAccnt = this.GetFieldValue(""Billing Account Id"");
						if (sBlockFor != """" && sBlockFor != null)
						{
							if(sBlockFor != vBillingAccnt)
							{
								TheApplication().RaiseErrorText(""The Selected SIM is Reserved for Another Customer (as part of Migration). Please Select Another SIM"");
								return (CancelOperation);
							}
						}

					}
				}	
				sRMSNumberbc = null;
				sRMSNumberbo = null;
			}
		}
	}

	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{
	if (FieldName == ""SIM"")
	{
		var sSIMno = this.GetFieldValue(""SIM"");
		BlockRe_selection(vOldSIM,sSIMno);
	}
	if(FieldName== ""MSISDN"")
	{
		var newMSISDN = this.GetFieldValue(""MSISDN"");
		BlockRe_selection(vOldMSISDN,newMSISDN);
	}

if (FieldName == ""STC New Network Type"")
	{
		
		TheApplication().SetProfileAttr(""STCNewNetworkType"",this.GetFieldValue(""STC New Network Type""));
		
	}
	if(FieldName == ""Customer Type"")
	{
		TheApplication().SetProfileAttr(""STCNetworkCustType"",this.GetFieldValue(""Customer Type""));
	}



}
function BusComp_PreNewRecord ()
{
/*	var vView = TheApplication().GetProfileAttr(""ActiveViewName"");
	if(vView == ""STC Corp Billing Network Type Change List View"")
	 {
	  
		  var vID = null;
		  //var BANType = """";
		  //BANType = TheApplication().GetProfileAttr(""CorporateType"");
		  var vParentBC = this.ParentBusComp();
		  
		  if(vParentBC !="""" && vParentBC!=null)
		  {
		  	if(vParentBC.Name() ==""CUT Invoice Sub Accounts"")
			{
		  		var vStatus= vParentBC.GetFieldValue(""Account Status"");
				var BANType= vParentBC.GetFieldValue(""STC Corporate Type"");
				if(!(BANType == ""Individual"" && vStatus == ""Active""))
				TheApplication().RaiseErrorText(""Please raise the request under individual Billing Account and BAN should be active"");
			  }
		  }
	 }*/
	return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
var strIsBS = false;
function BusComp_NewRecord ()
{
//	strIsBS = true;
}
function BusComp_PreQuery ()
{
	var SearchStr;
	var AccType;
	try{
			AccType=TheApplication().GetProfileAttr(""STCAccountTypeServAcc"");
			if(AccType != null && AccType != """")
			{	
				SearchStr=this.GetSearchExpr();
				if (SearchStr == null || SearchStr == """")
					SearchStr = ""[Type]='"" + AccType + ""'"";
				else	
					SearchStr = SearchStr + "" AND [Type]='"" + AccType + ""'"";			
				this.SetSearchExpr(SearchStr);	
				// The profile Attribute is set to blank so that the searches on Sunscription data work as reqd.
				TheApplication().SetProfileAttr(""STCAccountTypeServAcc"","""");
			}	
			return (ContinueOperation);	
	}
	catch(e)
	{	
		throw(e);
	}	
}
"/*20-12-2010 For Migration Validation*/
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{/*
	var billId = null;
	var parBillId = null;
	var ppBillId = null;
	var serviceId = null;
	var msisdn;
	var appObj;
	var appBO;
	var appBC;
	var name;
	var status;
	var parentBC;
	var childBillBC;
	var MigType;
	try
	{
	
	 switch(FieldName)
	 {
	  case ""STC Postpaid Cust MSISDN"":
	  	
	  	msisdn = this.GetFieldValue(""STC Postpaid Cust MSISDN"");
		appObj = TheApplication();
		appBO = appObj.GetBusObject(""STC Billing Account"");
		appBC = appBO.GetBusComp(""CUT Service Sub Accounts"");
		childBillBC = appBO.GetBusComp(""STC Child Billing Accounts"");
		parentBC = this.ParentBusComp();
		
		
		
		with(appBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Parent Account Id"");
			SetSearchSpec(""DUNS Number"", msisdn);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				serviceId = GetFieldValue(""Id"");
				billId = GetFieldValue(""Parent Account Id"");
			}
			
		}
		
		
		with(parentBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Account Status"");
			SetSearchSpec(""Id"", billId);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				parBillId = GetFieldValue(""Parent Account Id"");
			}	
		}
		
		with(parentBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(""Account Status"");
			SetSearchSpec(""Id"", parBillId);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				ppBillId = GetFieldValue(""Parent Account Id"");
				status = GetFieldValue(""Account Status"");
			}	
		}
		
		this.SetFieldValue(""STC Stores BillId"", ppBillId);
		var billd = this.GetFieldValue(""STC Stores BillId"");
		WriteRecord();
		
		break;
		
		//Added by SushantE 20 Dec 2010 for Migration Validation

		
		default :
			break;
	  
	  }
			return (ContinueOperation);
			
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{}*/
	return (ContinueOperation);
}
function BusComp_WriteRecord ()
{/*try
{
    if(strIsBS == true)
	{
		var strAccntId = this.GetFieldValue(""Id"");            
		var IsRecord1;
		var strConPriAddrId;
		var strContactId;
		var objCurrBO = TheApplication().ActiveBusObject();
		if (objCurrBO == ""STC Service Account"") // || objCurrBO == ""Service Request"")
		{
			strConPriAddrId = this.GetFieldValue(""Primary Address Id"");
			strContactId = this.GetFieldValue(""Primary Contact Id"");
		}
		else
		{
			strConPriAddrId = this.ParentBusComp().GetFieldValue(""Primary Address Id"");
			strContactId = this.ParentBusComp().GetFieldValue(""Primary Contact Id"");
		}

		var objAddMVGBC = GetMVGBusComp(""Street Address"").GetAssocBusComp();
		with(objAddMVGBC)
		{
			SetViewMode(AllView);
			ActivateField(""Row Id"");
			ActivateField(""Address Type"");
			ClearToQuery();
			SetSearchSpec(""Row Id"",strConPriAddrId);
			ExecuteQuery(ForwardOnly);
			IsRecord1 = FirstRecord();                                                                             
			if(IsRecord1)
			{
				try
				{
					Associate(NewAfter);
					WriteRecord();
				}
				catch (e)
				{
					null;
				}
			}
		}
//		var BOContact = TheApplication().GetBusObject(""Contact"");
//		var BCContact = BOContact.GetBusComp(""Contact"");		
		var objConMVGBC = GetMVGBusComp(""Primary Contact Last Name"").GetAssocBusComp();
		with(objConMVGBC)
		{
			SetViewMode(AllView);
			ActivateField(""Row Id"");
			ActivateField(""Parent Account Id"");
			ActivateField(""Account Id"");
			ClearToQuery();
			SetSearchSpec(""Row Id"",strContactId);
			ExecuteQuery(ForwardOnly);
			IsRecord1 = FirstRecord();                                                                             
			if(IsRecord1)
			{
				try
				{
					Associate(NewAfter);
					WriteRecord();
				}
				catch (e)
				{
					null;
				}                                                              
			}
		}
	this.SetFieldValue(""Primary Address Id"",strConPriAddrId);		
	this.SetFieldValue(""Primary Contact Id"",strContactId);
	WriteRecord();
	}
}
catch(e)
{
/*	var vErr = e.toString();
	var vErrCode = e.errCode;
	var vObjName = ""CUT Invoice Sub Accounts"";
	var vFunc = ""BusComp_WriteRecord"";
	var vObjType = ""Business Component"";
	var RowId = this.GetFieldValue(""Id"");
                                                                
	logexception(vErr,vErrCode,RowId,vObjName,vFunc,vObjType);
	throw(e);
}
finally
{
}
return (ContinueOperation);*/

}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
switch(FieldName)
    {
    	case ""STC CPR Number"" :
				var sID= FieldValue; 
				
				if (sID.length>9)   
				{
						TheApplication().RaiseErrorText(""Please Enter 9 digit CPR Number"");					 
				}
				else if(sID.length<9)
				{
				TheApplication().RaiseErrorText(""Please Enter 9 digit CPR Number"");					 
			
				}
				else if(sID.length==""9"")
				{
				var sID0 = sID.charAt(0);//a  
				var sID1 = sID.charAt(1); //b
				var sID2 = sID.charAt(2); //c            
				var sID3 = sID.charAt(3);//d
				var sID4 = sID.charAt(4);//e
				var sID5 = sID.charAt(5);//f
				var sID6 = sID.charAt(6);//g
				var sID7 = sID.charAt(7);//h
				
				var sID8 = sID.charAt(8);  //i                   
				var Valid =((sID7*2+sID6*3+sID5*4+sID4*5+sID3*6+sID2*7+sID1*8+sID0*9)%11);
				var Valid1=(11-Valid);
				}      
				
				if(Valid == ""0""|| Valid == ""1"") 
				{
				var SIDNew = ""0"";
				}
				else
				{
				var SIDNewext = Valid1;
				}
				if(SIDNew != sID8)
				{
				if(SIDNewext != sID8)
				{
				TheApplication().RaiseErrorText(""Invlid CPR Number Please enter valid CPR Number"");
				
				}
				}
    	break;
    	
    	case ""Mobile Number"" :
    	var MobileNum = FieldValue;
    	var MobileLen = ToNumber(MobileNum.length);
    	var threeMobNum = FieldValue.substring(0,3);
    	if(	MobileLen != 11)
    	{
    		TheApplication().RaiseErrorText(""Mobile Number should be 11 digit number"");
    	}
    	else if(threeMobNum != ""973"")
    	{
    		TheApplication().RaiseErrorText(""First three digits of Mobile Number should be 973"");
    	}
    		
    	break;
    	
    		case ""Home Number"" :
    	var WorkNum = FieldValue;
    	if(WorkNum != null || WorkNum != '')
    	{
    	
    	var WorkNumLen = ToNumber(WorkNum.length);
    	var threeWorkNum = FieldValue.substring(0,3);
    	if(	WorkNumLen != 11)
    	{
    		TheApplication().RaiseErrorText(""Home Number should be 11 digit number"");
    	}
    	else if(threeWorkNum != ""973"")
    	{
    		TheApplication().RaiseErrorText(""First three digits of Home Number should be 973"");
    	}
    		}
    	break;
    	
    	
    	   
    	
    	default :
         		break;
    }
    	return (ContinueOperation);
}
function BusComp_PreWriteRecord ()
{
try
{


	var EndDate = this.GetFieldValue(""Card1"");
	var CPR = this.GetFieldValue(""Mobile Number"");
	var rowId = this.GetFieldValue(""Id"");
	
	
var MUBusComp = TheApplication().GetBusObject(""STC MU Card BO"").GetBusComp(""STC MU Card BC"");

	with(MUBusComp)
	{
	var spec1 = ""[Card1] = '"" + EndDate + ""' AND [Mobile Number] = '"" + CPR +""' AND [Id]  <> '"" + rowId +""'"";
		SetViewMode(AllView);  
		ClearToQuery();
		SetSearchExpr(spec1);
		ExecuteQuery(ForwardOnly);
		var count = CountRecords();
		count = ToNumber(count);
	if(count > 0 )
	{
		TheApplication().RaiseErrorText(""MU Card for this season is already availed by this Mobile Number."");
		return(CancelOperation);

	}
}
}//try
catch(e)
{
throw(e);
}
finally
{
}
	//return (ContinueOperation);
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	return (ContinueOperation);
}
function BusComp_SetFieldValue (FieldName)
{
 if(TheApplication().ActiveViewName()==""STC Mobile Device Cash Back View"")
 {
 if (FieldName == ""STC Device Name"")
 {
 	try
	{
		
		var vDunsNum = this.GetFieldValue(""MSISDN"");
		var vDeviceName = this.GetFieldValue(""STC Device Name"");
		var Inputs = TheApplication().NewPropertySet();
		var Outputs = TheApplication().NewPropertySet();
		var wfm = TheApplication().GetService(""Workflow Process Manager"");
		Inputs.SetProperty(""ProcessName"",""STC Mobile Device Addon Check WF"");
		Inputs.SetProperty(""MSISDN"",vDunsNum);
		Inputs.SetProperty(""MobilDeviceId"",this.GetFieldValue(""Id""));
		Inputs.SetProperty(""DeviceName"",vDeviceName);
		wfm.InvokeMethod(""RunProcess"",Inputs,Outputs);
		var MobileRec = Outputs.GetProperty(""MobileRec"");
		var ErrorMsg = Outputs.GetProperty(""Error Message"");
		var MobileConfigId = Outputs.GetProperty(""MobileConfigId"");
		var CommitAmt12M = Outputs.GetProperty(""CommitAmt12M"");
		var CommitAmt18M = Outputs.GetProperty(""CommitAmt18M"");
		var CommitAmt24M = Outputs.GetProperty(""CommitAmt24M"");
		var RefundAmt12M = Outputs.GetProperty(""RefundAmt12M"");
		var RefundAmt18M = Outputs.GetProperty(""RefundAmt18M"");
		var RefundAmt24M = Outputs.GetProperty(""RefundAmt24M"");
		var DepositAmount = Outputs.GetProperty(""DepositAmount"");
		var SubcriptionId = Outputs.GetProperty(""SubcriptionId"");
		var SANAddonPartNum = Outputs.GetProperty(""SANAddonPartNum"");


		if(ErrorMsg != """")
		   TheApplication().RaiseErrorText(ErrorMsg);
		 else
		 {
			 if(MobileConfigId =="""" || MobileConfigId ==null)
			 {
			 	TheApplication().RaiseErrorText(""This Addon is not exists Please add that First"");
			 }
			 else if(SubcriptionId =="""" || SubcriptionId ==null)
			 {
			 	TheApplication().RaiseErrorText(""This Customer is not vaild."");
			 }	
			 else if(SANAddonPartNum =="""" || SANAddonPartNum ==null)
			 {
			 	TheApplication().RaiseErrorText(""This Customer dosent have valid Addon."");
			 }
			   else
			   {
	
				this.SetFieldValue(""STC Deposit Amount"",DepositAmount);
				this.SetFieldValue(""STC Commitment Amount"",CommitAmt12M);
				this.SetFieldValue(""STC Commitment Amount2"",CommitAmt18M);
				this.SetFieldValue(""STC Commitment Amount3"",CommitAmt24M);
				this.SetFieldValue(""STC Refund Amount 12"",RefundAmt12M);
				this.SetFieldValue(""STC Refund Amount 18"",RefundAmt18M);
				this.SetFieldValue(""STC Refund Amount 24"",RefundAmt24M);
				this.WriteRecord();
				
				
	
			   }
		   } //else ErrorMsg
		
		}
	
	catch(e)
	{
		throw(e.toString());
	}
	finally
	{
		vDunsNum="""";
	}
 }
 }
}
"//Your public declarations go here...  
"
function BusComp_NewRecord ()
{
TheApplication().SetProfileAttr(""UIBahrainiUpdateNormalUser"",""N"");//MANUJ : Added for Auto SmartCard
}
function BusComp_PreInvokeMethod (MethodName)
{
	var ireturn;
	var bCustOnly;
	try
	{
		switch(MethodName)
		{
			case ""CreateCustAccnt"":
				bCustOnly = ""Y"";
				CreateNewCustomer(bCustOnly);
				return (CancelOperation);
				break;
			case ""CreateCustAndBillAccnt"":
				bCustOnly = ""N"";
				CreateNewCustomer(bCustOnly);
				return (CancelOperation);
				break;
			case ""CreateSME"":
				bCustOnly = ""SME"";
				CreateNewCustomer(bCustOnly);
				return (CancelOperation);
				break;
			case ""VerifyGuardian""://[MANUJ] : [Guardian Minor SD] :[08/AUG/2016]
				return (CancelOperation);
				break;	
				
			case ""GetGuardianDetails""://[MANUJ] : [Guardian Minor SD] :[08/AUG/2016]
				this.WriteRecord();//Mayank: Added For Open UI
			    return (CancelOperation);
				break;	
			case ""STCTEST"":
				this.WriteRecord();
				return (CancelOperation);
				break;
			default:
				return (ContinueOperation);
				break;
		}	
		return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	}
}
function BusComp_PreSetFieldValue (FieldName, FieldValue)
{
	var sAddType;
	var sUser = """",sLOVUser = """",sContractCategory = """";
	var sApp = TheApplication();
	try
	{
		if((FieldName == ""Account Type"") || (FieldName == ""Contract Category""))
		{
			if(this.GetFieldValue(""STC Dunning Read Only Flag"") == ""N"")
			{
				this.SetFieldValue(""Dunning Excluded"",""N"");
			}
		}
		if(FieldName == ""Contract Category"" && (FieldValue == ""A"" || FieldValue == ""B"" || FieldValue == ""C"" || FieldValue == ""D""))
		{
			sUser = TheApplication().LoginName();
			sLOVUser = TheApplication().InvokeMethod(""LookupValue"",""STC_VIP_CUSTOMER_USER"",sUser)
			if(sUser != sLOVUser)
			{
				sApp.RaiseErrorText(""Only VIP Users are allowed to Create Customer with Segment ""+FieldValue+""."");
			}
		}
		if(FieldName == ""Account Type"")
		{
			if(this.GetFieldValue(""STC Copy Address Read Only Flag"") == ""N"")
			{
				this.SetFieldValue(""Copy Address"",""N"");
			}
		}	
			if(FieldName == ""First Name"")
		{
			var FName = StringReplace(FieldValue);
			this.InvokeMethod(""SetAdminMode"",""TRUE"");
			this.SetFieldValue(""First Name"", FName);
			this.InvokeMethod(""SetAdminMode"",""FALSE"");
			this.WriteRecord();
		}
		if(FieldName == ""Middle Name"")
		{
			var MName = StringReplace(FieldValue);
			this.SetFieldValue(""Middle Name"", MName);
		}
		if(FieldName == ""Last Name"")
		{
			var LName = StringReplace(FieldValue);
			this.SetFieldValue(""Last Name"", LName);
		}
		if((FieldName == ""Employment Letter"") && (FieldValue == ""Y""))
		{			
			if(this.GetFieldValue(""Guardian Verified"") == ""Y"")
			{
				this.SetFieldValue(""Guardian Verified"",""N"");
			}
		}
		if((FieldName == ""Guardian Verified"") && (FieldValue == ""Y""))
		{			
			if(this.GetFieldValue(""Employment Letter"") == ""Y"")
			{
				this.SetFieldValue(""Employment Letter"",""N"");
			}
		}
		if((FieldName == ""ID Type"") && (FieldValue == ""Bahraini ID""))
			{
				var CheckUI = TheApplication().GetProfileAttr(""UIBahrainiUpdateNormalUser"");
				var sUser;
				sUser = TheApplication().LoginName();
				var isSuperUser = TheApplication().InvokeMethod(""LookupValue"", ""STC_SM_USER"", sUser);
				var Length = isSuperUser.length;
				var sub_strng = isSuperUser.substr( 0,3 );
				if(CheckUI == ""N"" && sub_strng != ""SUP"")
				{
					TheApplication().RaiseErrorText(""You are not authorized to change the ID Type to Bahraini ID. Please use the Card Reader"");
				}
			}
		if((FieldName == ""ID Type"") && (FieldValue == ""PNN ID""))
		{
			sContractCategory = this.GetFieldValue(""Contract Category"");
			if(sContractCategory == null || sContractCategory == """")
			{
				sApp.RaiseErrorText(""Please Select Customer Segment before selecting ""+FieldValue+"" as Id Type."");
			}
			if(sContractCategory == sApp.InvokeMethod(""LookupValue"",""STC_CONTRACT_CATEGORY"",""Individual""))
			{
				this.SetFieldValue(""Current Occupation"", sApp.InvokeMethod(""LookupValue"",""OCCUPATION"",""Foreign Navy""));
			}
			else if(sContractCategory == sApp.InvokeMethod(""LookupValue"",""STC_CONTRACT_CATEGORY"",""A"") || sContractCategory == sApp.InvokeMethod(""LookupValue"",""STC_CONTRACT_CATEGORY"",""B"") || sContractCategory == sApp.InvokeMethod(""LookupValue"",""STC_CONTRACT_CATEGORY"",""C"") || sContractCategory == sApp.InvokeMethod(""LookupValue"",""STC_CONTRACT_CATEGORY"",""D""))
			{
				this.SetFieldValue(""Current Occupation"", sApp.InvokeMethod(""LookupValue"",""OCCUPATION"",sContractCategory));
			}
		}
		if((FieldName == ""Current Occupation"") && (FieldValue == sApp.InvokeMethod(""LookupValue"",""OCCUPATION"",""Foreign Navy"")))
		{
			var IDType = this.GetFieldValue(""ID Type"");
			if(IDType != ""PNN ID"")
			{
				sApp.RaiseErrorText(""Occupation: Foreign Navy is allowed only for ID Type 'PNN ID' "");
			}
		}
		if((FieldName == ""Current Occupation"") && (FieldValue != sApp.InvokeMethod(""LookupValue"",""OCCUPATION"",""Foreign Navy"")))
		{
			var IDType = this.GetFieldValue(""ID Type"");
			sContractCategory = this.GetFieldValue(""Contract Category"");
			if(IDType == ""PNN ID"" && sContractCategory == ""Individual"")
			{
				sApp.RaiseErrorText(""Please select Occupation Foreign Navy for ID Type PNN ID  "");
			}
		}
		if((FieldName == ""ID Type"") && (FieldValue != ""PNN ID"") && (this.GetFieldValue(""Account Type"") == ""Individual"") && (this.GetFieldValue(""Contract Category"") == ""Individual""))
		{
			if((this.GetFieldValue(""Current Occupation"")) != null && (this.GetFieldValue(""Current Occupation"")) != """")
			{	
				this.SetFieldValue(""Current Occupation"", """");
			}
		}
		switch(FieldName)
		{
			case ""Account Type"":
			this.InvokeMethod(""SetAdminMode"",""TRUE"");
			this.SetFieldValue(""STC Con ID Type"","""");
			this.SetFieldValue(""STCCPRNumber"","""");
			this.SetFieldValue(""STC Con GCC Country"","""");
			this.InvokeMethod(""SetAdminMode"",""FALSE"");
			if(this.GetFieldValue(""STC Orgainzation Read Only Flag"") == ""N"")
			{
				this.SetFieldValue(""CR#"","""");
			}
			this.SetFieldValue(""Contract Category"","""");
			this.SetFieldValue(""ID Type"","""");
			this.SetFieldValue(""ID"","""");
			switch(FieldValue)
			{
				case ""Organization"":
				sAddType = TheApplication().InvokeMethod(""LookupValue"",""ADDRESS_TYPE"",""Office"");
				this.SetFieldValue(""Contract Category"","""");
				this.SetFieldValue(""Address Type"",sAddType);
				this.InvokeMethod(""SetAdminMode"",""TRUE"");
				this.SetFieldValue(""STC Account Manager Name"","""");
				this.InvokeMethod(""SetAdminMode"",""FALSE"");
				if(this.GetFieldValue(""STC Check Individual Flag"") == ""N"")
				{
					this.SetFieldValue(""Title"","""");
					this.SetFieldValue(""First Name"","""");
					this.SetFieldValue(""Middle Name"","""");
					this.SetFieldValue(""Last Name"","""");
				}
				if(this.GetFieldValue(""STC Check Official Flag"") == ""N"")
				{
					this.SetFieldValue(""STC Account Manager Name"","""");
					this.SetFieldValue(""STC Official Contact Number"","""");
					this.SetFieldValue(""STC Official Email Address"","""");
				}
				if(this.GetFieldValue(""Sponsor Detail Read Only Flag"") == ""N"")
				{
					this.SetFieldValue(""Sponsor Name"","""");
					this.SetFieldValue(""Sponsor ID Type"","""");
					this.SetFieldValue(""Sponsor ID Issue Place"","""");
					this.SetFieldValue(""Sponsor ID Number"","""");
					this.SetFieldValue(""Sponsor Telephone Number"","""");
					this.SetFieldValue(""Sponsor ID Expiry Date"","""");
				}
				break;
				case ""Individual"":
				sAddType = TheApplication().InvokeMethod(""LookupValue"",""ADDRESS_TYPE"",""Billing"");
				this.SetFieldValue(""Contract Category"","""");
				this.SetFieldValue(""Address Type"",sAddType);
				if(this.GetFieldValue(""STC Individual Read Only Flag"") == ""N"")
				{
					this.SetFieldValue(""STC Title"","""");
					this.SetFieldValue(""STC First Name"","""");
					this.SetFieldValue(""STC Last Name"","""");
					this.SetFieldValue(""STC Middle Name"","""");
					this.SetFieldValue(""Account Name"","""");
					this.SetFieldValue(""Line Of Business"","""");
					this.SetFieldValue(""STC Empolyee Number"","""");
					this.SetFieldValue(""STC Branches Local"","""");
					this.SetFieldValue(""STC Branches International"","""");
					this.SetFieldValue(""STC Business Tel No 1"","""");
					this.SetFieldValue(""STC Business Tel No 2"","""");
				}
				if(this.GetFieldValue(""STC Check Official Flag"") == ""N"")
				{
					this.SetFieldValue(""STC Account Manager Name"","""");
					this.SetFieldValue(""STC Official Contact Number"","""");
					this.SetFieldValue(""STC Official Email Address"","""");
				}
				break;
				case ""SME"":
				ValidateSMECSR();
				sAddType = TheApplication().InvokeMethod(""LookupValue"",""ADDRESS_TYPE"",""Office"");
				this.SetFieldValue(""Contract Category"","""");
				this.SetFieldValue(""Address Type"",sAddType);
				if(this.GetFieldValue(""STC Check Individual Flag"") == ""N"")
				{
					this.SetFieldValue(""Title"","""");
					this.SetFieldValue(""First Name"","""");
					this.SetFieldValue(""Middle Name"","""");
					this.SetFieldValue(""Last Name"","""");
				}
				if(this.GetFieldValue(""STC Corporate Read Only Flag"") == ""N"")
				{
					this.SetFieldValue(""Current Occupation"","""");
					this.SetFieldValue(""Income Group"","""");
					this.SetFieldValue(""Current Occupation Tenure Months"","""");
					this.SetFieldValue(""Current Occupation Tenure Years"","""");
					this.SetFieldValue(""Mothers Maiden Name"","""");
				}
				if(this.GetFieldValue(""Sponsor Detail Read Only Flag"") == ""N"")
				{
					this.SetFieldValue(""Sponsor Name"","""");
					this.SetFieldValue(""Sponsor ID Type"","""");
					this.SetFieldValue(""Sponsor ID Issue Place"","""");
					this.SetFieldValue(""Sponsor ID Number"","""");
					this.SetFieldValue(""Sponsor Telephone Number"","""");
					this.SetFieldValue(""Sponsor ID Expiry Date"","""");
				}  
				break;
				case ""Corporate"":
				ValidateCorporateCSR();
				sAddType = TheApplication().InvokeMethod(""LookupValue"",""ADDRESS_TYPE"",""Office"");
				this.SetFieldValue(""Contract Category"","""");
				this.SetFieldValue(""Address Type"",sAddType);
				if(this.GetFieldValue(""STC Check Individual Flag"") == ""N"")
				{
					this.SetFieldValue(""Title"","""");
					this.SetFieldValue(""First Name"","""");
					this.SetFieldValue(""Middle Name"","""");
					this.SetFieldValue(""Last Name"","""");
				}
				if(this.GetFieldValue(""STC Corporate Read Only Flag"") == ""N"")
				{
					this.SetFieldValue(""Current Occupation"","""");
					this.SetFieldValue(""Income Group"","""");
					this.SetFieldValue(""Current Occupation Tenure Months"","""");
					this.SetFieldValue(""Current Occupation Tenure Years"","""");
					this.SetFieldValue(""Mothers Maiden Name"","""");
				}
				if(this.GetFieldValue(""Sponsor Detail Read Only Flag"") == ""N"")
				{
					this.SetFieldValue(""Sponsor Name"","""");
					this.SetFieldValue(""Sponsor ID Type"","""");
					this.SetFieldValue(""Sponsor ID Issue Place"","""");
					this.SetFieldValue(""Sponsor ID Number"","""");
					this.SetFieldValue(""Sponsor Telephone Number"","""");
					this.SetFieldValue(""Sponsor ID Expiry Date"","""");
				}					
			}
		break;
		case ""Account Class"":
		if(this.GetFieldValue(""Sponsor Detail Read Only Flag"") == ""N"" && this.GetFieldValue(""STC Smart Card Read Only"") == ""N"")
		{
			this.SetFieldValue(""Sponsor Name"","""");
			this.SetFieldValue(""Sponsor ID Type"","""");
			this.SetFieldValue(""Sponsor ID Issue Place"","""");
			this.SetFieldValue(""Sponsor ID Number"","""");
			this.SetFieldValue(""Sponsor Telephone Number"","""");
			this.SetFieldValue(""Sponsor ID Expiry Date"","""");
		}
		case ""Contract Category"":
		if(this.GetFieldValue(""STC Employee Flag"") == ""N"")
			{
				this.SetFieldValue(""Employment Type"","""");
				this.SetFieldValue(""Income Group"","""");
			}
		switch(FieldValue)
		{
			case ""Test"":
			var appObj;
			var currLoginId;
			var foundCSR, foundCSRSubstr;
			appObj = TheApplication();
			with(appObj)
			{
				currLoginId = LoginName();	
			}		
			foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_TEST_SEGMENT"",currLoginId);
			foundCSRSubstr = foundCSR.substring(0,4);
			if(foundCSRSubstr != ""TEST"")
			{
				this.SetFieldValue(""Contract Category"","""");
				appObj.RaiseErrorText(""Sorry! You do not have the privilege to create Test Segment Customer"");
			}
			break;
			case ""Roam Test"":
			var appObj;
			var currLoginId;
			var foundCSR, foundCSRSubstr;
			appObj = TheApplication();
			
			with(appObj)
			{
				currLoginId = LoginName();	
			}		
			foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_ROAMTEST_SEGMENT"",currLoginId);
			foundCSRSubstr = foundCSR.substring(0,5);
			if(foundCSRSubstr != ""TESTR"")
			{
				this.SetFieldValue(""Contract Category"","""");
				appObj.RaiseErrorText(""Sorry! You do not have the privilege to create Roam Test Segment Customer"");
			}
			break;
		}
		if (FieldValue == ""A"" || FieldValue == ""B"" || FieldValue == ""C"" || FieldValue == ""D"" || FieldValue == ""Contractor"" || FieldValue == ""Employees"")
		{
			var appObj,currLoginId,foundCSR;
			appObj = TheApplication();
			currLoginId = appObj.LoginName();
			foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_VIP_SEGMENT_AND_OCCUP"",currLoginId);
			if (foundCSR == """" || foundCSR == null)
			{
				this.SetFieldValue(""Contract Category"","""");
				appObj.RaiseErrorText(""Sorry! You do not have the privilege to create VIP Segment Customer"");
			}
		}
		break;
		case ""ID Type"":
		if (FieldValue == ""VIP"")
		{
			var appObj,currLoginId,foundCSR;
			appObj = TheApplication();
			currLoginId = appObj.LoginName();
			foundCSR = appObj.InvokeMethod(""LookupValue"",""STC_VIP_SEGMENT_AND_OCCUP"",currLoginId);
			if (foundCSR == """" || foundCSR == null)
			{
				this.SetFieldValue(""ID Type"","""");
				appObj.RaiseErrorText(""Sorry! You do not have the privilege to select ID Type as VIP"");
			}
		}
		if (FieldValue != ""GCC"")
		{
			this.ActivateField(""SubscriberCountry"");
			var sSubCntry = this.GetFieldValue(""SubscriberCountry"");
			if(sSubCntry != """")
				this.SetFieldValue(""SubscriberCountry"","""");
		}
		break;
		case ""STC Con ID Type"":
		if (FieldValue == ""Bahraini ID"")
		{
			this.InvokeMethod(""SetAdminMode"",""TRUE"");
			this.SetFieldValue(""STC Con GCC Country"","""");
			this.InvokeMethod(""SetAdminMode"",""FALSE"");
		}
		break;
		case ""Email Reason"":
		if (FieldValue == ""No Email"" || FieldValue == ""Refuse"")
		{	
			this.InvokeMethod(""SetAdminMode"",""TRUE"");
			this.SetFieldValue(""Email Id"",""NA"");
			this.InvokeMethod(""SetAdminMode"",""FALSE"");
		}
		else
		{
			this.InvokeMethod(""SetAdminMode"",""TRUE"");
			this.SetFieldValue(""Email Id"","""");
			this.InvokeMethod(""SetAdminMode"",""FALSE"");
		}
		break;
					
		case ""Email Id"":
		if (FieldValue == ""NA"" || FieldValue == ""na"" || FieldValue == ""Na"" || FieldValue == ""nA"")
		{
			if(this.GetFieldValue(""Email Reason"") == ""Available"")
			{	
				this.InvokeMethod(""SetAdminMode"",""TRUE"");
				this.SetFieldValue(""Email Reason"",""No Email"");
				this.InvokeMethod(""SetAdminMode"",""FALSE"");
			}
		}
		break;
	}
	return(ContinueOperation);
	}
	catch(e)
	{
		throw(e);
		LogException(e);
	}
	finally
	{
	}
}
function BusComp_PreWriteRecord ()
{
//gjena_18102012 Added the validation to make the Current Occupation Required for Individual Customer
try
{
//[Validation Moved on to Required Valdidation BS] : [MANUJ]
/*
this.ActivateField(""Account Type"");
this.ActivateField(""Current Occupation"");
var sType= this.GetFieldValue(""Account Type"");
var sOccupation=this.GetFieldValue(""Current Occupation"");
if((sType ==""Individual"")&&(sOccupation == """" || sOccupation == null))
{
TheApplication().RaiseErrorText(""Current Occupation is Required"");
 }	
	*/
	
return (ContinueOperation);
 }


catch(e)
{
throw(e);
}

finally
{
}

}
function BusComp_Query ()
{
	try
	{

		if (TheApplication().GetProfileAttr(""CampContact"") != ""Y"")
		{
			this.NewRecord(NewAfter); // to open the applet with a record already created with predefault values
		}
		else
		{
			TheApplication().SetProfileAttr(""CampContact"","""");
		}
	}
	catch(e)
	{
		LogException(e);
	}
	finally
	{
	}
}
function BusComp_SetFieldValue (FieldName)
{
	if(FieldName == ""ID"" || FieldName == ""Guardian ID"" || FieldName == ""Passport No"" || FieldName == ""Guardian Passport No"" )
	{//[NAVIN: 05Mar2017: IndCust_ID_Segment_FieldRestrictions]		
		with(this)
		{
			var vIdVal = GetFieldValue(FieldName);
			var vIdType = GetFieldValue(""ID Type"");
			
			if (FieldName == ""ID"" && (vIdVal != null && vIdVal != """") && (vIdType != null && vIdType == ""Passport""))
				ValidatePassport(FieldName, vIdVal);
			else if ((vIdVal != null && vIdVal != """") && (FieldName == ""Passport No"" || FieldName == ""Guardian Passport No""))
				ValidatePassport(FieldName, vIdVal);

			if (vIdVal != null && vIdVal != """")
			{
				SetFieldValue(FieldName, vIdVal.toUpperCase());
			}
		}
	}//end of if(FieldName == ""ID"" || ...
	if(FieldName == ""ID Type"")
	{//[NAVIN: 05Mar2017: IndCust_ID_Segment_FieldRestrictions]	
		var vIdType = GetFieldValue(""ID Type"");
		var vIdVal = GetFieldValue(""ID"");
		
		if ((vIdVal != null && vIdVal != """") && (vIdType != null && vIdType == ""Passport""))
			ValidatePassport(""ID"", vIdVal);
	}//end of if(FieldName == ""ID Type"")
	//Mayank: Added for Email Data Capture ----------------- START--------------
	if(FieldName == ""Email Id"")
	{	
		var sEmail = GetFieldValue(""Email Id"");
		var sOldEMail = sEmail;
		if(sEmail != """" && sEmail != null)
		{
			var pattern = /(\s)/g;
			sEmail = sEmail.replace(pattern, """");
			if (sEmail == ""na"" || sEmail == ""Na"" || sEmail == ""nA"")
			{
				sEmail = ""NA"";
			}
			if(sEmail != sOldEMail)
			{
			this.SetFieldValue(""Email Id"",sEmail);
			}
			//this.WriteRecord();
		}
	}
	if(FieldName == ""Guardian Email Address"")
	{	
		var sGEmail = GetFieldValue(""Guardian Email Address"");
		if(sGEmail != """" && sGEmail != null)
		{
			var pattern = /(\s)/g;
			sGEmail = sGEmail.replace(pattern, """");
			this.SetFieldValue(""Guardian Email Address"",sGEmail);
			//this.WriteRecord();
		}
	}//Mayank: Added for Email Data Capture ----------------- STOP--------------
}
function CreateNewCustomer(bCustOnly)
{
	var CustomerFax,sAddressTenureMonths,sAddressTenureYears,sAddressType,sAuthorityLevel,sBlockNo,sBuildingNo,CardFullName,sCurrentOccupation,sDateOfBirth;
	var sCR,sCity,sContractCategory,sCountry,sFlatVillaNo,sGender,sGovernorate,sHobby,sID,sIDExpiryDate,sIDType,sEmailId,sFax,sFirstName,sMiddleName,sMobilePhone;
	var sIncomeGroup,sLastEducationLevel,sLastName,sLineOfBusiness,sMaritalStatus,sNationality,sOwnershipStatus,sPersoninHousehold,sPhone,sPlaceOfBirth;
	var sMothersMaidenName,sAccountName,sPOBox,sPreferredCommunicationChannel,sPrefferedLanguage,sRoadNo,sAccountClass,sStreetName,sTitle,sCurrentOccupationTenureYears;
	var sAccountType,sVIPCategory,sWorkPhone,sSegment,sCurrentOccupationTenureMonths,psInputs,appObj,psOutputs,svcBusSrv,sRefMiddleName,sAccntLOV,sDunningExcluded, sCopyAddress;
	var CustAccntId, sSelfEmployed,sSponsorName, sSponsorIDType, sSponsorIDNumber, sSponsorIDExpiryDate, sSponsorIDIssuePlace, sSponsorTelephoneNumber;
	var sOrgFname, sOrgLname, sOrgTitle, sOrgMname, sManagerName, sApplicantType, sBranchLocal, sBranchInt, sBusTel1, sBusTel2,sSubscriberCntry, sActualOccupation;
	var sNumEmp, sOffNum, sOffEmail, sParCom, sCamId, sEmailReason, sCPRNumber, CardOcc, sConGccCntryCode,sEmployerNumber, sEmployerName, sEmpCPR="""", sEmpCR="""";
	var sPassportNo, sPassportIssueDate, sPassportExpiryDate, sLabourForceParticipation, sCardIssueDate,sGuardianSelected="""",sGuardianAddType="""",GActualOccupation="""";
	var sGAddressType="""",Valid="""",sGBlockNo="""",sGRoadNo="""",sGbuildingNo="""",sGCardOccup="""",sGContractCat="""",sGCurrOccup="""", sGEmpName="""",vsGEMpNum="""",sGFirstName="""",sGFlatVillaNo="""",sGGender="""",sGID="""",sGIDExpiryDate="""",sGLFP="""",sGLastName="""",sGNationality="""",sGPassportExpDate="""",sGPassportIssueDate="""", sGPassportNo="""",
	sGEmployLetter=""N"", sGContactNo="""",sGEmailAddress="""",sGInfo="""",sGDOB="""",sGType="""",GBadCustomer="""",sBadCust="""",oBusObj="""",sGVer="""",sGMidName="""",GSponsorName="""",GsponsorIDDum="""",GsponsorIDDate="""";	
	var sCompanyType="""",sTaxCategory="""",sCorpVATNum="""";
	var vSubSeg="""";//VIDYAD
	var VFNo="""",VCity="""",VBldNo="""",VStNo="""",VBlckNo="""",VGov="""",VPBoxNo="""",VRoadNo="""",vACPA="""";
	try
	{
		appObj = TheApplication();
		psInputs = appObj.NewPropertySet();
		var psInputsG = appObj.NewPropertySet();	
		with(this)
		{	ActivateField(""STC Company Type"");sCompanyType =GetFieldValue(""STC Company Type"");
		    ActivateField(""STC Sub Segment"");vSubSeg =GetFieldValue(""STC Sub Segment"");//VIDYAD
			ActivateField(""STC Card Full Name"");CardFullName =GetFieldValue(""STC Card Full Name"");
			ActivateField(""Actual Occupation"");sActualOccupation =GetFieldValue(""Actual Occupation"");
			ActivateField(""Passport No"");sPassportNo = GetFieldValue(""Passport No"");
			ActivateField(""Passport Issue Date"");sPassportIssueDate =GetFieldValue(""Passport Issue Date"");
			ActivateField(""Passport Expiry Date"");sPassportExpiryDate =GetFieldValue(""Passport Expiry Date"");
			ActivateField(""Labour Force Participation"");sLabourForceParticipation =GetFieldValue(""Labour Force Participation"");
			ActivateField(""Card Issue Date"");sCardIssueDate =GetFieldValue(""Card Issue Date"");
			ActivateField(""Employer Number"");sEmployerNumber =GetFieldValue(""Employer Number"");
			ActivateField(""Employer Name"");sEmployerName =GetFieldValue(""Employer Name"");
			ActivateField(""Customer Fax"");CustomerFax =GetFieldValue(""Customer Fax"");
			sAddressTenureMonths=GetFieldValue(""Address Tenure Months"");
			sAddressTenureYears=GetFieldValue(""Address Tenure Years"");
			sAddressType=GetFieldValue(""Address Type"");
			sBlockNo =GetFieldValue(""Block No"");sBuildingNo =GetFieldValue(""Building No"");
			sCR =GetFieldValue(""CR#"");sFax =GetFieldValue(""Fax#"");
			ActivateField(""City"");sCity =GetFieldValue(""City"");
			sContractCategory =GetFieldValue(""Contract Category"");sCountry =GetFieldValue(""Country"");
			sCurrentOccupation =GetFieldValue(""Current Occupation"");sDateOfBirth =GetFieldValue(""Date Of Birth"");
			sEmailId =GetFieldValue(""Email Id"");sEmailReason =GetFieldValue(""Email Reason"");
			sTitle =GetFieldValue(""Title"");sFirstName = GetFieldValue(""First Name"");sLastName =GetFieldValue(""Last Name"");
			sFlatVillaNo =GetFieldValue(""Flat/Villa No"");sGovernorate =GetFieldValue(""Governorate"");
			sGender =GetFieldValue(""Gender"");sHobby =GetFieldValue(""Hobby"");
			sID = GetFieldValue(""ID"");sIDExpiryDate =GetFieldValue(""ID Expiry Date"");sIDType =GetFieldValue(""ID Type"");
			sIncomeGroup =GetFieldValue(""Income Group"");sLastEducationLevel =GetFieldValue(""Last Education Level"");
			sLineOfBusiness =GetFieldValue(""Line Of Business"");sMaritalStatus =GetFieldValue(""Marital Status"");
			sMiddleName =GetFieldValue(""Middle Name"");sMothersMaidenName =GetFieldValue(""Mothers Maiden Name"");
			sAccountName =GetFieldValue(""Account Name"");sNationality =GetFieldValue(""Nationality"");
			sOwnershipStatus = GetFieldValue(""Ownership Status"");sPersoninHousehold =GetFieldValue(""Person in Household"");
			sPhone =GetFieldValue(""Phone#"");sPlaceOfBirth =GetFieldValue(""Place Of Birth"");
			sPOBox =GetFieldValue(""PO Box"");sPreferredCommunicationChannel =GetFieldValue(""Preferred Communication Channel"");
			sPrefferedLanguage =GetFieldValue(""Preffered Language"");
			sRoadNo =GetFieldValue(""Road No"");sStreetName =GetFieldValue(""Street Name"");
			sAccountClass =GetFieldValue(""Account Class"");sAccountType =GetFieldValue(""Account Type"");
			sCurrentOccupationTenureMonths =GetFieldValue(""Current Occupation Tenure Months"");
			sCurrentOccupationTenureYears =GetFieldValue(""Current Occupation Tenure Years"");
			sSponsorName =GetFieldValue(""Sponsor Name"");sSponsorIDType =GetFieldValue(""Sponsor ID Type"");
			sSponsorIDNumber =GetFieldValue(""Sponsor ID Number"");sSponsorIDExpiryDate =GetFieldValue(""Sponsor ID Expiry Date"");
			sSponsorIDIssuePlace =GetFieldValue(""Sponsor ID Issue Place"");sSponsorTelephoneNumber =GetFieldValue(""Sponsor Telephone Number"");
			sSelfEmployed =GetFieldValue(""Employment Type"");sDunningExcluded =GetFieldValue(""Dunning Excluded"");
			sCopyAddress =GetFieldValue(""Copy Address"");
			sOrgFname =GetFieldValue(""STC First Name"");sOrgLname =GetFieldValue(""STC Last Name"");
			sOrgTitle =GetFieldValue(""STC Title"");sOrgMname =GetFieldValue(""STC Middle Name"");
			sManagerName =GetFieldValue(""STC Account Manager Name"");sApplicantType =GetFieldValue(""STC Applicant Type"");
			sBranchLocal =GetFieldValue(""STC Branches Local"");	sBranchInt =GetFieldValue(""STC Branches International"");
			sBusTel1 =GetFieldValue(""STC Business Tel No 1"");sBusTel2 =GetFieldValue(""STC Business Tel No 2"");
			sNumEmp =GetFieldValue(""STC Empolyee Number"");sParCom =GetFieldValue(""STC Parent Company Name"");
			sOffNum =GetFieldValue(""STC Official Contact Number"");sOffEmail =GetFieldValue(""STC Official Email Address"");
			ActivateField(""STC Campaign Id"");ActivateField(""Card Occupation"");
			sCamId =GetFieldValue(""STC Campaign Id"");sCPRNumber =GetFieldValue(""STCCPRNumber"");CardOcc=GetFieldValue(""Card Occupation"");
			sEmpCPR=GetFieldValue(""STC Employee CPR"");sEmpCR=GetFieldValue(""STC Employee CR"");
			sGAddressType =GetFieldValue(""Guardian Address Type"");
			sGRoadNo =GetFieldValue(""Guardian Road No"");sGBlockNo =GetFieldValue(""Guardian Block No"");
			sGbuildingNo =GetFieldValue(""Guardian Building No"");sGCardOccup =GetFieldValue(""Guardian Card Occupation"");
			sGContractCat =GetFieldValue(""Guardian Contract Category"");sGCurrOccup = GetFieldValue(""Guardian Current Occupation"");
			sGDOB =GetFieldValue(""Guardian Date Of Birth"");sGFlatVillaNo=GetFieldValue(""Guardian Flat/Villa No"");
			sGEmpName =GetFieldValue(""Guardian Employer Name"");vsGEMpNum=GetFieldValue(""Guardian Employer Number"");
			sGFirstName =GetFieldValue(""Guardian First Name"");	sGMidName=GetFieldValue(""Guardian Middle Name"");
			sGGender =GetFieldValue(""Guardian Gender"");sGID = GetFieldValue(""Guardian ID"");
			sGIDExpiryDate =GetFieldValue(""Guardian ID Expiry Date"");sGLFP=GetFieldValue(""Guardian Labour Force Participation"");
			sGLastName =GetFieldValue(""Guardian Last Name"");sGNationality=GetFieldValue(""Guardian Nationality"");
			sGPassportExpDate =GetFieldValue(""Guardian Passport Expiry Date"");sGPassportIssueDate =GetFieldValue(""Guardian Passport Issue Date"");
			sGPassportNo =GetFieldValue(""Guardian Passport No"");sGEmployLetter =GetFieldValue(""Employment Letter"");
			sGContactNo =GetFieldValue(""Guardian Contact No"");sGEmailAddress =GetFieldValue(""Guardian Email Address"");
			sGInfo =GetFieldValue(""Guardian Info"");sGType =GetFieldValue(""Guardian Type"");sGVer =GetFieldValue(""Guardian Verified"");
			GsponsorIDDum =GetFieldValue(""Guardian Sponsor ID Number"");GsponsorIDDate =GetFieldValue(""Guardian Sponsor ID Expiry Date"");
			GSponsorName =GetFieldValue(""Guardian Sponsor Name"");GActualOccupation =GetFieldValue(""Guardian Actual Occupation"");
			vACPA=GetFieldValue(""STC AutoCreate Portal Admin"");//forSelfCarePortalAdmin Indrasen
			var sBahrainID = TheApplication().InvokeMethod(""LookupValue"",""STC_CUST_ID_TYPE"",""Bahraini ID"");
			if(sIDType == sBahrainID)
				sSubscriberCntry = TheApplication().InvokeMethod(""LookupValue"",""STC_GCC_COUNTRY_CODE"",""BH"");
			else
				sSubscriberCntry = GetFieldValue(""SubscriberCountry"");
			var sConIDType = GetFieldValue(""STC Con ID Type"");
			if(sConIDType == sBahrainID)
				sConGccCntryCode = TheApplication().InvokeMethod(""LookupValue"",""STC_GCC_COUNTRY_CODE"",""BH"");
			else
				sConGccCntryCode = GetFieldValue(""STC Con GCC Country"");
			ActivateField(""STC Taxation Category"");ActivateField(""STC Corporate VAT Number"");
			sTaxCategory = GetFieldValue(""STC Taxation Category"");sCorpVATNum = GetFieldValue(""STC Corporate VAT Number"");
			VFNo = GetFieldValue(""VAT Flat/Villa No"");VCity = GetFieldValue(""VAT City"");VBldNo = GetFieldValue(""VAT Building No"");VStNo = GetFieldValue(""VAT Street Name"");
			VBlckNo = GetFieldValue(""VAT Block No"");VGov = GetFieldValue(""VAT Governorate"");VPBoxNo = GetFieldValue(""VAT PO Box"");VRoadNo = GetFieldValue(""VAT Road No"");
		}
		if(bCustOnly == ""SME"")
		{
			if(sAccountType != ""SME"")
			{	appObj.RaiseErrorText(""SME Hieararchy can be created for SME Customers"");
				return(CancelOperation);}
		}
		sAccntLOV = appObj.InvokeMethod(""LookupValue"",""STC_CUST_TYPE"",""Individual"");
		if(sAccountType == sAccntLOV)
		{
			if(sTitle != """" && sTitle != null)
			{	if(sMiddleName != """" && sMiddleName != null)
				{sAccountName = sTitle+"" ""+sFirstName+"" ""+sMiddleName+"" ""+sLastName;}
				else
				{sAccountName = sTitle+"" ""+sFirstName+"" ""+sLastName;}
			}
			else
			{	if(sMiddleName != """" && sMiddleName != null)
				{sAccountName = sTitle+""""+sFirstName+"" ""+sMiddleName+"" ""+sLastName;}
				else
				{sAccountName = sTitle+""""+sFirstName+"" ""+sLastName;	}
			}
		}
		else
		{	sTitle = sOrgTitle;
			sFirstName = sOrgFname;
			sLastName = sOrgLname;
			sMiddleName = sOrgMname;}
		with(psInputs)
		{	SetProperty(""AddresTenureMonths"", sAddressTenureMonths);SetProperty(""AddressTenureYears"", sAddressTenureYears);
			SetProperty(""AddressType"", sAddressType);SetProperty(""BlockNo"", sBlockNo);SetProperty(""BuildingNo"", sBuildingNo);
			SetProperty(""FlatVillaNo"", sFlatVillaNo);SetProperty(""City"", sCity);
			SetProperty(""Governorate"", sGovernorate);SetProperty(""Country"", sCountry);
			SetProperty(""CR"", sCR);
			SetProperty(""SubSeg "", vSubSeg);//VIDYAD
			SetProperty(""ContractCategory"", sContractCategory);SetProperty(""CurrentOccupation"", sCurrentOccupation);
			SetProperty(""EmailId"", sEmailId);SetProperty(""EmailReason"",sEmailReason);SetProperty(""Fax"", sFax);
			SetProperty(""FirstName"", sFirstName);SetProperty(""LastName"", sLastName);
			SetProperty(""DateOfBirth"", sDateOfBirth);SetProperty(""Gender"", sGender);SetProperty(""Hobby"", sHobby);
			SetProperty(""ID"", sID);SetProperty(""IDExpiryDate"", sIDExpiryDate);SetProperty(""IDType"", sIDType);
			SetProperty(""IncomeGroup"", sIncomeGroup);SetProperty(""LastEducationLevel"", sLastEducationLevel);
			SetProperty(""CardFullName"", CardFullName);SetProperty(""LineOfBusiness"", sLineOfBusiness);
			SetProperty(""MaritalStatus"", sMaritalStatus);SetProperty(""Title"", sTitle);
			SetProperty(""MiddleName"", sMiddleName);SetProperty(""MothersMaidenName"", sMothersMaidenName);
			SetProperty(""Nationality"", sNationality);SetProperty(""PrefferedLanguage"", sPrefferedLanguage);
			SetProperty(""OwnershipStatus"", sOwnershipStatus);SetProperty(""PersoninHousehold"", sPersoninHousehold);
			SetProperty(""Phone"", sPhone);SetProperty(""PlaceOfBirth"", sPlaceOfBirth);
			SetProperty(""PreferredCommunicationChannel"", sPreferredCommunicationChannel);
			SetProperty(""RoadNo"", sRoadNo);SetProperty(""StreetName"", sStreetName);SetProperty(""POBox"", sPOBox);
			SetProperty(""AccountName"", sAccountName);SetProperty(""AccountClass"", sAccountClass);SetProperty(""AccountType"", sAccountType);
			SetProperty(""CurrentOccupationTenureMonths"", sCurrentOccupationTenureMonths);
			SetProperty(""CurrentOccupationTenureYears"", sCurrentOccupationTenureYears);
			SetProperty(""SponsorName"",sSponsorName);SetProperty(""SponsorIDType"",sSponsorIDType);SetProperty(""SponsorTelephoneNumber"",sSponsorTelephoneNumber);
			SetProperty(""SponsorIDNumber"",sSponsorIDNumber);SetProperty(""SponsorIDExpiryDate"",sSponsorIDExpiryDate);SetProperty(""SponsorIDIssuePlace"",sSponsorIDIssuePlace);
			SetProperty(""SelfEmployed"",sSelfEmployed);SetProperty(""EmpolyeeNum"",sNumEmp);
			SetProperty(""DunningExcluded"",sDunningExcluded);
			SetProperty(""CopyAddress"",sCopyAddress);
			SetProperty(""AccountManager"",sManagerName);
			SetProperty(""BranchLocal"",sBranchLocal);SetProperty(""BranchInter"",sBranchInt);
			SetProperty(""BusTeleph1"",sBusTel1);SetProperty(""BusTeleph2"",sBusTel2);
			SetProperty(""OffNumber"",sOffNum);SetProperty(""OffEmail"",sOffEmail);
			SetProperty(""ParentComp"",sParCom);SetProperty(""ApplicantType"",sApplicantType);
			SetProperty(""CampaignId"",sCamId);SetProperty(""CustomerFax"",CustomerFax);	 
			SetProperty(""STCCPRNumber"",sCPRNumber);SetProperty(""GCCCountryCode"",sSubscriberCntry);SetProperty(""ConIDType"",sConIDType);SetProperty(""ConGccCntryCode"",sConGccCntryCode); 
			SetProperty(""CardOccupation"",CardOcc);SetProperty(""sActualOccupation"",sActualOccupation);SetProperty(""sCardIssueDate"",sCardIssueDate);
			SetProperty(""sPassportNo"",sPassportNo);SetProperty(""sPassportIssueDate"",sPassportIssueDate);SetProperty(""sPassportExpiryDate"",sPassportExpiryDate);
			SetProperty(""sLabourForceParticipation"",sLabourForceParticipation);
			SetProperty(""sEmployerNumber"",sEmployerNumber);SetProperty(""sEmployerName"",sEmployerName);
			SetProperty(""sGEmployLetter"",sGEmployLetter);SetProperty(""sCompanyType"",sCompanyType);
			SetProperty(""EmployeeCPR"", sEmpCPR);SetProperty(""EmployeeCR"", sEmpCR);
			SetProperty(""TaxCategory"", sTaxCategory);SetProperty(""CorpVATNum"", sCorpVATNum);
			SetProperty(""VFNo"", VFNo);SetProperty(""VCity"", VCity);SetProperty(""VBldNo"", VBldNo);SetProperty(""VStNo"", VStNo);
			SetProperty(""VBlckNo"", VBlckNo);SetProperty(""VGov"", VGov);SetProperty(""VPBoxNo"", VPBoxNo);SetProperty(""VRoadNo"", VRoadNo);
			SetProperty(""AutoPortalAdmin"", vACPA); //Indrasen
		}
		psInputsG = psInputs;
		if(sGVer == ""Y"")
		{psInputsG = GuardianPopulate(psInputs,sGAddressType,sGBlockNo, sGRoadNo,sGbuildingNo, sGCardOccup,sGCurrOccup,sGEmpName,vsGEMpNum,sGFirstName,sGMidName,sGFlatVillaNo,sGGender, sGID,sGIDExpiryDate,sGLFP,sGLastName,sGNationality,sGPassportExpDate,sGPassportIssueDate,sGPassportNo,sGContactNo,sGEmailAddress,sGDOB,sGType,GSponsorName,GsponsorIDDum,GsponsorIDDate,sGEmployLetter,GActualOccupation,sCompanyType);
		}
		with(appObj)
		{	psOutputs = NewPropertySet();
			svcBusSrv = GetService(""Workflow Process Manager"");}
		ValidateCustomerDetails(psInputsG,psOutputs,sCorpVATNum,sTaxCategory,sAccountType);
		if ((sPassportExpiryDate != """" && sPassportExpiryDate != null) && sIDType != ""Bahraini ID"")
		{	var dIDExpDate = new Date(sPassportExpiryDate);
			var sCompareDate = dIDExpDate.getTime();
			var dCurrDate = new Date();
			var sSysdate = dCurrDate.getTime();
			if (sSysdate > sCompareDate)
			{	TheApplication().RaiseErrorText(""Passport Expiry Date should be greater than today."");}
		}
		with(psInputsG)
		{	SetProperty(""Object Id"",this.GetFieldValue(""Id""));
			SetProperty(""OnlyCustCreate"",bCustOnly);
			SetProperty(""ProcessName"", ""STC Create New Customer"");}
		svcBusSrv = appObj.GetService(""Workflow Process Manager"");
		svcBusSrv.InvokeMethod(""RunProcess"",psInputs,psOutputs);
	}
	catch(e)
	{throw(e);}
	finally
	{psInputs = null;psInputsG = null;psOutputs = null;svcBusSrv = null;appObj = null;}
}