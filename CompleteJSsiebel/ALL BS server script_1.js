#include "eaisiebel.js"
function AddOneDay (Indate)
{
	
var ObjDate = new Date(Indate);

return (ObjDate.getMonth()+1) + ""/"" + (ObjDate.getDate()+1) + ""/"" + (ObjDate.getYear()+1900);

}
function GeneratePromised (Inputs, Outputs)
{
var SiebelMessage;
var ListOfHeader;
var Header;
var ListOfItems;
var SysDate = Clib.time();
var ObjDate = Date.fromSystem(SysDate);
var reqQty;
var reqDate;
var halfQty;
var rowId;
var ATPstatus;
var pATPItem;
var i =0;

if (Inputs.GetChildCount()>0)
{
	SiebelMessage = Inputs.GetChild(0);
	ListOfHeader = SiebelMessage.GetChild(0);
	Header = ListOfHeader.GetChild(0);
	Header.SetProperty(""Available Message"",""ATP Test eScript Success"");
	ListOfItems = Header.GetChild(0);
while (ListOfItems.GetChildCount() > i)
	  {
		pATPItem = ListOfItems.GetChild(i);
        ATPstatus = pATPItem.GetProperty(""ATP Action"") + ""d"";
        pATPItem.RemoveProperty(""ATP Action"");
		 while (pATPItem.GetChildCount()>0)
		 {	
		 	pATPItem.RemoveChild(0);
		 }
		 reqQty = pATPItem.GetProperty(""Requested Quantity"");
		 reqDate = pATPItem.GetProperty(""Requested Date"");	 
		 if (reqDate == """"){
			reqDate = (ObjDate.getMonth()+1) + ""/"" + ObjDate.getDate() + ""/2002"";
   		 }
   		 var reqDate1 = AddOneDay(reqDate); 
   		 halfQty = reqQty / 2;
		 halfQty = Math.ceil(halfQty);
 		 logResults (""halfQty"",halfQty);
 		 logResults (""reqDate"",reqDate);
 		 logResults (""reqDate1"",reqDate1);
		 var availList = TheApplication().NewPropertySet();
		 availList.SetType(""ListOfPromised Schedule Line"");
    	 var avail1 = TheApplication().NewPropertySet();
		 GetPromiseLine(pATPItem,halfQty,reqDate1,ATPstatus,""1"",avail1);
		 availList.AddChild(avail1);
		
		 if (reqQty > 1){
		 var avail2 = TheApplication().NewPropertySet();
		 GetPromiseLine(pATPItem,(reqQty-halfQty),reqDate1,ATPstatus,""2"",avail2);
		 availList.AddChild(avail2);
		 }
		 pATPItem.AddChild(availList);
  		 i++;
	   }
}
SiebelMessage = Inputs.GetChild(0);
Outputs.AddChild(SiebelMessage);
}
function GetPromiseLine (pATPItem,availQty,availDate,status,LineNumber,avail1)
{
var SysDate = Clib.time();
var ObjDate = Date.fromSystem(SysDate);
var rowId;
var prodId;
var prodIntId;
var dateStr = (ObjDate.getMonth()+1) + ""/"" + (ObjDate.getDate()+1) + ""/2004"";
	    //promisedLine = TheApplication().NewPropertySet();
logResults(""datestr="",dateStr);
		rowId = pATPItem.GetProperty(""Id"");
		prodId = pATPItem.GetProperty(""Product Id"");
		prodIntId = pATPItem.GetProperty(""Product Integration Id"");
		var srcInvId = pATPItem.GetProperty(""Source Inventory Loc Id"");
		var srcInvIntId = pATPItem.GetProperty(""Source Inventory Loc Integration Id"");
		var srcInvLoc = pATPItem.GetProperty(""Source Inventory Location"");
 		if (status != ""Reserved"") status = ""Available"";
		
		 avail1.SetType(""Promised Schedule Line"");
		 
		// avail1.SetProperty(""Line Row Id"",rowId);
		 avail1.SetProperty(""Id"",rowId+LineNumber);
		 avail1.SetProperty(""Line Number"",LineNumber);         
		 avail1.SetProperty(""Available Quantity"",availQty);
		 avail1.SetProperty(""Available Date"",availDate);
		 avail1.SetProperty(""Available Status"",status);
		 avail1.SetProperty(""Product Id"",prodId);
	     avail1.SetProperty(""Product Integration Id"",prodIntId);
		
		 avail1.SetProperty(""Available Status As Of Date"",dateStr);
		 avail1.SetProperty(""Source Inventory Loc Id"",srcInvId);
		 avail1.SetProperty(""Source Inventory Loc Integration Id"",srcInvIntId);
		 avail1.SetProperty(""Source Inventory Location"",srcInvLoc);
}
function GetShipmentInfo (InputPropset, OutputPropSet)
{
	
	//ThrowError(""This funtionality is not yet implemented."");
var ResponseFile;
var OutputFile;
var xmlService;
var Outdata; 
var Indata;
var psInputs2;
var psOutputs2;
var bsFILE;
var psInputs3;
var psOutputs3;
var psInputs4;
var psOutputs4;
var value2;
var child1;
var logfile;
var getType1;

ResponseFile = ""d:\\ATPResponse.xml"";
OutputFile = ""d:\\ATPOutput.xml"";

	
xmlService = TheApplication().GetService(""EAI XML Converter"");
 
psInputs2 = TheApplication().NewPropertySet();
 	child1 = InputPropset.GetChild(0);
    getType1 = child1.GetType();
    logResults(logfile, ""Output Child Type returns: "" + getType1);
    psInputs2 = InputPropset;
    psOutputs2 = TheApplication().NewPropertySet();

   
    xmlService.InvokeMethod(""PropSetToXML"", psInputs2, psOutputs2);

    value2 = psOutputs2.GetValue();
   bsFILE = TheApplication().GetService(""EAI File Transport"");
 
   psInputs3 = TheApplication().NewPropertySet();
    psOutputs3 = TheApplication().NewPropertySet();
    psInputs3.SetProperty(""FileName"", OutputFile);
    psInputs3.SetValue(value2);

    bsFILE.InvokeMethod(""Send"", psInputs3, psOutputs3);
    psInputs4 = TheApplication().NewPropertySet();
    psOutputs4 = TheApplication().NewPropertySet();
	psInputs4.SetProperty(""FileName"", ResponseFile);	
	psInputs4.SetProperty(""IsReceivingTextData"","false"");
	bsFILE.InvokeMethod(""Receive"",psInputs4,psOutputs4);
	psOutputs4.SetProperty(""StripNameSpace"","""");

	xmlService.InvokeMethod(""XMLToPropSet"", psOutputs4, OutputPropSet);
}
function RunATPTest (InputPropset, OutputPropSet)
{
var OutputFile;
var envPath;
var envSlash;

if (Clib.getenv(""OS"") == ""Windows_NT"")
{
envSlash = ""\\"";
} else
{
envSlash = ""/"";
}

envPath = Clib.getenv(""REQUEST_ASI_PATH"") + envSlash;

if ( (envPath == (""null"" + envSlash)) || (envPath == envSlash) )
{
	envPath = Clib.getenv(""SIEBEL_HOME"");
		
	if ((envPath == ""null"") || (envPath == """"))
	{
		envPath = """";
	} 
	else 
	{
		envPath = envPath + envSlash + ""bin"" + envSlash;
	}
	
}

OutputFile = envPath + ""ATPOutput.xml"";

  WriteXMLFile(InputPropset,OutputFile);
  GeneratePromised(InputPropset,OutputPropSet);
  var ResponseFile = envPath + ""ATPFinished.xml"";
  WriteXMLFile(OutputPropSet,ResponseFile);
  }
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if (MethodName == ""Execute"")
    {
    	//GetShipmentInfo (Inputs, Outputs);
    	RunATPTest (Inputs, Outputs);
    }
    
     if (MethodName == ""WriteXML"")
    {
    	//GetShipmentInfo (Inputs, Outputs);
    	WriteXMLFile (Inputs,""d:\\ATPBeforeExecute.xml"");
    }
       
    return (CancelOperation);
	
}
function WriteJunk (Inputs)
{
	
var SiebelMessage;
var ListOfHeader;
var Header;
var ListOfItems;
var Item;
var ListOfATP;
var Promised;
var data;
logResults (""jnk"",""WriteJunk"");

SiebelMessage = Inputs.GetChild(0);
data = SiebelMessage.GetType();
logResults (""SiebMes"",data);

ListOfHeader = SiebelMessage.GetChild(0);
data = ListOfHeader.GetType();
logResults (""ListOHeader"",data);

Header = ListOfHeader.GetChild(0);
data = Header.GetType();
logResults (""DaHeader"",data);

ListOfItems = Header.GetChild(0);
data = ListOfItems.GetType();
logResults (""LstOItems"",data);

Item = ListOfItems.GetChild(0);
data = Item.GetType();
logResults (""Item"",data);

ListOfATP = Item.GetChild(0);
data = ListOfATP.GetType();
logResults (""ListOAtp"",data);

Promised = ListOfATP.GetChild(0);
data = Promised.GetType();
logResults (""Promised"",data);


}
function WriteXMLFile (Inputs, fileName)
{
	
var xmlService;
var value2;
var psInputs2;
var psOutputs2;
var bsFILE;
var psInputs3;
var psOutputs3;

 psInputs2 = TheApplication().NewPropertySet();
 psInputs2 = Inputs;
 psOutputs2 = TheApplication().NewPropertySet();
 xmlService 	= TheApplication().GetService(""EAI XML Write to File"");
 psInputs2.SetProperty (""FileName"", fileName);
 xmlService.InvokeMethod(""WriteEAIMsg"", psInputs2, psOutputs2);
   
 
}
function logResults (lf,data)
{
var logfile;
 //var logfile = Clib.fopen(""craiglog.txt"", ""a"");

 //   Clib.fputs("" \n"", logfile);
 //   data = lf + "" "" + data + "" \n"";
 //   if ( !Clib.fputs(data, logfile))
 //   {
 //    Clib.ferror(logfile);
 //   }
 //   Clib.fputs("" \n"", logfile);
 //Clib.fclose(logfile);
 

}
function Execute(Inputs, Outputs)
{
var ResponseFile;
var OutputFile;
var xmlService;
var Outdata; 
var Indata;
var psInputs2;
var psOutputs2;
var bsFILE;
var psInputs3;
var psOutputs3;
var psInputs4;
var psOutputs4;
var value2;
var child1;
var logfile;
var getType1;
var envPath;
var envSlash;

if (Clib.getenv(""OS"") == ""Windows_NT"")
{
envSlash = ""\\"";
} else
{
envSlash = ""/"";
}

envPath = Clib.getenv(""REQUEST_ASI_PATH"") + envSlash;

if (envPath == (""null"" + envSlash))
{
	envPath = Clib.getenv(""SIEBEL_HOME"") + envSlash + ""bin"" + envSlash;
}

OutputFile = envPath + ""ATPOutput.xml"";

ResponseFile = envPath + ""ATPResponse.xml"";
 
 psInputs2 = TheApplication().NewPropertySet();
 psInputs2 = Inputs;
 psOutputs2 = TheApplication().NewPropertySet();
 xmlService 	= TheApplication().GetService(""EAI XML Write to File"");
 psInputs2.SetProperty (""FileName"", OutputFile);
 xmlService.InvokeMethod(""WriteEAIMsg"", psInputs2, psOutputs2);

 psInputs4 = TheApplication().NewPropertySet();
 psInputs4.SetProperty(""FileName"", ResponseFile);	
 xmlService = TheApplication().GetService(""EAI XML Read from File"");
 xmlService.InvokeMethod(""ReadEAIMsg"", psInputs4,  Outputs);	
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   var ret= CancelOperation;
   
   if (MethodName==""Execute"")
   {
      Execute(Inputs,Outputs);
   }
   else
   {
      TheApplication.ErrorText(""Invalid function name. Valid method name is 'Execute'"");
      ret=ContinueOperation;
   }
   return ret;
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 4 $
//      $Date: 12/10/99 10:29a $
//    $Author: Achaudhr $ of last update
//
// CREATOR:    R.Lankinen
//
// DESCRIPTION
//    Multi-organization Javascript maps from Siebel Account to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
"
function CheckSAPCustomer_CallBAPI (inputMsg, outputMsg) { 
  /*  Referenced in workflow Account - Check SAP 46C Customer
    * Input Object:
    *  Account - Send or Receive SAP 46C Customer (Siebel 77)
    *       
    *
    * Output Object's Integration Components:
    *  Account - Send or Receive SAP 46C Customer (Siebel 77)
    *   set property ""customerExists"" to true or false in outputMsg
    *  if customer does not exist, set ""EAI Sync Error Text""
    */

   // Store inputId for later use
   var inputId = inputMsg.GetArgument (""Siebel Account Id"");

   /*
   *  temporary variables
   */
   var customerExists = false;
   var errorType;

   /*
    * Set up EAI Input Message objects
    */
   var iAccountObj;  // Account object instance
   var iAccountComp; // Account
   var oAccountObj;
   var oAccountComp;
   iAccountObj = inputMsg.GetIntObj (""Account - Send or Receive SAP 46C Customer (Siebel 77)"");
   
   
   /*
   *   Create new property sets for BAPI call to SAP and create adapter bus service
   */   
   var inputBAPI = TheApplication().NewPropertySet();
   var outputBAPI = TheApplication().NewPropertySet();
   var inputBAPIMsg = EAICreateIntMsgOut (inputBAPI);
  
   
   var iBAPIObj = inputBAPIMsg.CreateIntObj (""Account - Check SAP 46C Customer Existence (BAPI Input)"");

   inputBAPIMsg.SetArgument (""OutputIntObjectName"", ""Account - Check SAP 46C Customer Existence (BAPI Output)"");
   inputBAPIMsg.SetArgument (""SAPAutoError"",""False"");

   var bapiAdapter = TheApplication().GetService(""EAI SAP BAPI Adapter"");
   
   var oBAPIObj;
   var oBAPIExportComp;
   var iBAPIImportComp;
  
    
   /*
    * create top-level integration object
    */
   
   if (iAccountObj.NextInstance ())
   {
     /*
      * Create BAPI object in output message
      */
      iBAPIObj.NewInstance ();
      

      iAccountComp = iAccountObj.GetPrimaryIntComp (""Account"");
      iBAPIImportComp = iBAPIObj.CreatePrimaryIntComp (""Import Parameters"");
 
       if (iAccountComp.NextRecord ())
      {
	      var IntId = iAccountComp.GetFieldValue (""Integration Id"");
	      var iAddrComp = iAccountComp.GetIntComp (""Account_Business Address"");
	      var AddressFlag = ""N"";
	      if (iAddrComp.Exists ())
	      {
	      	while (iAddrComp.NextRecord())
	      	{
	      		if (iAddrComp.GetFieldValue (""IsPrimaryMVG"") == ""Y"")
	      		{
	      			AddressFlag = ""Y"";
	      		}
	      	}
	      }
	      
	      if (AddressFlag == ""N"")
	      {
	      	EAIRaiseError(LocalizeMessage(""ERR_MSG_INVALID_ADDRESS,"" + """"));
	      }
       /*
        * Write ""Import Parameters"" component
        */
         iBAPIImportComp.NewRecord ();
         iBAPIImportComp.SetFieldValue (""CUSTOMERNO"", IntId);
         /*
         *  Loop over sales orgs, call BAPI for each until one suceeds
         */
		var iSalesAreaAccountComp = iAccountComp.GetIntComp (""SAP 4x Account Sales Area"");
			
		while (iSalesAreaAccountComp.NextRecord() )
		{
			/* Copy sales org info	*/

			iBAPIImportComp.SetCopySource ( iSalesAreaAccountComp );
			iBAPIImportComp.CopyFieldValue( ""SALES_ORGANIZATION"", ""Back Office Sales Organization"");
			iBAPIImportComp.CopyFieldValue( ""DISTRIBUTION_CHANNEL"", ""Back Office Distribution Channel"");
			iBAPIImportComp.CopyFieldValue( ""DIVISION"", ""Back Office Sales Area Division Code"");
     
            // call BAPI
            bapiAdapter.InvokeMethod (""Execute"", inputBAPI, outputBAPI);
            
            // test output
           oBAPIExportComp = ((outputBAPI.GetChild(0)).GetChild(0)).GetChild(0);

           errorType = oBAPIExportComp.GetProperty (""RETURN-TYPE"");
               
           if (errorType != ""E"")
           {
              customerExists = true;
              
              break;
           }
           outputBAPI.Reset();
         
        } // endloop iSalesAreaAccountComp.NextRecord()
        
      } // endif iAccountComp.NextRecord()
   } // endif iAccountObj.NextInstance()
   
   oAccountObj = outputMsg.CreateIntObj (""Account - Send or Receive SAP 46C Customer (Siebel 77)"");
   oAccountObj.NewInstance ();
   oAccountComp = oAccountObj.CreatePrimaryIntComp (""Account"");
   oAccountComp.NewRecord ();
   // Set ""Id"" so Siebel Adapter can synchronize
   oAccountComp.SetFieldValue (""Id"", inputId);
   
   if (customerExists)
   {
      outputMsg.SetArgument(""Customer Exists"", ""True"");
      oAccountComp.SetFieldValue (""EAI Sync Error Text"",  """");
   }
   else
   {    
      var output = LocalizeMessage(""ERR_MSG_CUSTOMER_DOES_NOT_EXIST_IN_SAP1"")+"" ""+  	 
      LocalizeMessage(""ERR_MSG_CUSTOMER_DOES_NOT_EXIST_IN_SAP2"")+"" ""+
      LocalizeMessage(""ERR_MSG_CUSTOMER_DOES_NOT_EXIST_IN_SAP3"")+"" ""+
      LocalizeMessage(""ERR_MSG_CUSTOMER_DOES_NOT_EXIST_IN_SAP4"");
      outputMsg.SetArgument(""Customer Exists"", ""False"");
      oAccountComp.SetFieldValue (""EAI Sync Error Text"", output);
   }
   
 } // end function"
function GetAccountName (Int_ID)
{// referenced by script ReceiveAccount_46CIDOCToSiebel
	var AccBusObject = TheApplication().GetBusObject(""Account"");
	var AccBusComp = AccBusObject.GetBusComp(""Account"");
		
	AccBusComp.ClearToQuery();
    AccBusComp.SetSearchSpec(""Integration Id"", Int_ID);
	AccBusComp.ActivateField(""Name"");
	AccBusComp.ExecuteQuery();
		
	if(AccBusComp.FirstRecord())
	{
	   return AccBusComp.GetFieldValue(""Name"");
	}
      	else
           return null;
}
function GetAccountStatus (oIntId)
{ // referenced by script ReceiveAccount_46CIDOCToSiebel
	var AccBusObject = TheApplication().GetBusObject(""Account"");
	var AccBusComp = AccBusObject.GetBusComp(""Account"");
		
	AccBusComp.ClearToQuery();
    AccBusComp.SetSearchSpec(""Integration Id"", oIntId);
	AccBusComp.ActivateField(""Account Status"");
	AccBusComp.ExecuteQuery();
		
	if(AccBusComp.FirstRecord())
	{
	   return AccBusComp.GetFieldValue(""Account Status"");
	}
      	else
           return null;
}
function GetSalesArea (SalesOrg, DistChannel, DivCode)
{ // referenced by script ReceiveAccount_46CIDOCToSiebel
	var OrgBusObject = TheApplication().GetBusObject(""PickList Generic"");
	var SABusComp = OrgBusObject.GetBusComp(""SAP Organization"");
		
	SABusComp.ClearToQuery();
//    SABusComp.SetSearchSpec(""Back Office Sales Organization"", TheApplication().InvokeMethod (""LookupValue"", ""SAP_SALES_ORG"", SalesOrg));
//    SABusComp.SetSearchSpec(""Back Office Distribution Channel"", TheApplication().InvokeMethod (""LookupValue"", ""SAP_DISTRIBUTION_CHANNEL"", DistChannel));
//    SABusComp.SetSearchSpec(""Back Office Division"", TheApplication().InvokeMethod (""LookupValue"", ""SAP_DIVN_CD"", DivCode));
      SABusComp.SetSearchSpec(""Back Office Sales Organization"", SalesOrg);
      SABusComp.SetSearchSpec(""Back Office Distribution Channel"", DistChannel);
      SABusComp.SetSearchSpec(""Back Office Division"", DivCode);

	SABusComp.ActivateField(""Organization Id"");
	
	SABusComp.ExecuteQuery();
	
	
	if(SABusComp.FirstRecord())
	{
	   return SABusComp.GetFieldValue(""Organization Id"");
	}
      else
         return null;
}
function LocalizeMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created by Richard Exley - November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ERR_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ERR_MSG"";
	var LOVType = ""CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function ReceiveAccount_46CIDOCToSiebel (inputMsg, outputMsg)
{ // referenced by workflow Account - Receive SAP 46C Customer
	/* Input Objects' Integration Components	
	*   Account - Send or Receive SAP 46C Customer (DEBMAS05)			
	*     E2KNA1M005, E2KNVKM, E2DNVVM005, E2KNKKM001, E2KNVPM002
	* Output Object's Integration Components:
	*  Account - Send or Receive SAP 46C Customer (Siebel 77)
	*   Account
	*   Contact
	*   Business Address
	*/

	/* Set up EAI Lookup maps */
	var currencyLM = EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"");
	var languageLM = EAIGetValueMap (""SAP Language 4x"", ""Siebel Inbound"");
	var countryLM  = EAIGetValueMap (""SAP Country"", ""Siebel Inbound"");
	var defaultOrgLM = EAIGetValueMap (""Default Org"", ""Siebel Inbound"");
	var undefinedOrgLM = EAIGetValueMap (""Undefined SAP Org"", ""Siebel Inbound"");
	var acctGroupLM = EAIGetValueMap (""SAP Customer Acct Group Code"", ""Siebel Inbound"");
	var regCodeLM  = EAIGetValueMap (""Back Office Region"", ""Siebel Inbound"");

	/* Set up EAI Input Message objects */
	var iIDOCObj;   // IDOC instance
	var iIDOCComp;  // top level IDOC segment
	var iKNA1MComp; // IDOC Customer Header
	var iComp;      // for reading child components

	/* Set up EAI Output Message objects */
	var oAccountObj;    // Siebel Account instance
	var oAccountComp;   // Account
	var oAddrComp;      // Address
	var oContactComp;   // Contact

	var oCustAcctGrp;	// Customer Account Group
	var oIntId;			// SAP Customer Number
	var oAcctSts;		// Account Status
	var regCode;        // SAP Country + Region Code	(12-90S337)
	var sapCode;        // SAP Region Code				(12-90S337)
	var osiebReg;       // Siebel Region 				(12-90S337)
	
	var AcctIntId       // Account Integration Id for Contact (12-C34KYN)
	
	/* Find and create top-level integration object */
	iIDOCObj = inputMsg.GetIntObj (""Account - Send or Receive SAP 46C Customer (DEBMAS05)"");
	oAccountObj = outputMsg.CreateIntObj (""Account - Send or Receive SAP 46C Customer (Siebel 77)"");

	/* Misc set up */
//	var generateMasterRecord = 1;   // Set to '0' to generate sub-organization records only

	/* Read int object instances from EAI message */
	enumObj: while (iIDOCObj.NextInstance ())
	{
		/* Read virtual root component that IDOC RFC Adapter populates */
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		if( !iIDOCComp.NextRecord() ) continue enumObj;   // TODO: Root component is missing - log an error???

		/* Read ""KNA1M"" component */
		iKNA1MComp = iIDOCComp.GetIntComp (""E2KNA1M005"");
		if( !iKNA1MComp.NextRecord() ) continue enumObj;

		/* Create ""Account"" object */
		oAccountObj.NewInstance ();

		/* Create ""Account"" component in output message */
		oAccountComp = oAccountObj.CreatePrimaryIntComp (""Account"");
		oAccountComp.NewRecord ();	
		oAccountComp.SetCopySource (iKNA1MComp);

		/* Set Integration Id and Name */
		oIntId = iKNA1MComp.GetFieldValue (""KUNNR"");
		
		oAccountComp.CopyFieldValue (""Integration Id"", ""KUNNR"");
		oAccountComp.CopyFieldValue (""Name"",           ""NAME1"");
		
		AcctIntId = oIntId ;  // Account Integration Id for Contact (12-C34KYN)
		
		oCustAcctGrp = acctGroupLM.Translate (iKNA1MComp.GetFieldValue (""KTOKD""));
		var AcctGrp = TheApplication().InvokeMethod (""LookupValue"", ""ACCOUNT_GROUP_TYPE"", oCustAcctGrp);
		oAccountComp.SetFieldValue (""Customer Account Group"", AcctGrp);

		/* Set location to ""<City> KUNNR1"" If <City> is null, put ""No City"" */
		var location = iKNA1MComp.GetFieldValue (""ORT01"");
		if (location == null) location = ""No City"";
		location += "" "" + iKNA1MComp.GetFieldValue (""KUNNR"");
		oAccountComp.SetFieldValue (""Location"",   location);

		/* Check if customer is Marked for Deletion */
		if (iKNA1MComp.GetFieldValue (""LOEVM"") == ""X"") 
		{
			oAccountComp.SetFieldValue (""Account Status"", ""Marked For Deletion"");
		}
		else
		{
			oAcctSts = GetAccountStatus (oIntId);
			if (oAcctSts == ""Marked For Deletion"")
				oAccountComp.SetFieldValue (""Account Status"", ""Active"");
			else
				oAccountComp.SetFieldValue (""Account Status"", oAcctSts);
		}

		/* Set telephone numbers */
		oAccountComp.CopyFieldValue (""Main Phone Number"", ""TELF1"");
		oAccountComp.CopyFieldValue (""Main Fax Number"",   ""TELFX"");

		/* Set other fields ; Defaults from buscomp:*/
		oAccountComp.CopyFieldValue (""Row Status"", ""Y"");

		/* Set fields for SAP 4x */
		oAccountComp.CopyFieldValue (""Primary Industry Id"", ""BRSCH"");

		// Tax Exempt Number (not created in bus comp for VAT_REGN_NUM yet)
		// oAccountComp.CopyFieldValue ("""", ""STCEG"");
		
		oAccountComp.SetFieldValue (""Language Code"",languageLM.Translate (iKNA1MComp.GetFieldValue (""SPRAS_ISO"")));

		/* Set Parent Account Id - P Lim. 3/15/00. In our system, the component has trailing 002 */
		// iComp = iKNA1MComp.GetIntComp (""E2KNB1M005"");
		// findKNRZE: while (iComp.NextRecord ())
		// {
			//oAccountComp.SetFieldValue (""Parent Account Integration Id"", iComp.GetFieldValue (""KNRZE""));
			/* only get first row */
			//break findKNRZE;
		// }
			
		var timenow = Timestamp();
		var SyncStat = TheApplication().InvokeMethod (""LookupValue"", ""EAI_ACCOUNT_SYNC_STATUS"", ""Sync from Back Office"");
	   	oAccountComp.SetFieldValue (""EAI Sync Status Code"",  SyncStat);
		oAccountComp.SetFieldValue (""EAI Sync Date"",timenow);
			
		// Set operation to ""    "" since we are using the ""Execute"" method.
		oAccountComp.SetFieldValue (""operation"", ""sync"");
		
		/* Write ""Address"" component */
		oAddrComp = oAccountComp.CreateIntComp (""Account_Business Address"", false);
		oAddrComp.NewRecord ();
		oAddrComp.SetCopySource (iKNA1MComp);
		oAddrComp.CopyFieldValue (""Integration Id"", ""KUNNR"");

		// Set Street address
		var stras = iKNA1MComp.GetFieldValue (""STRAS""); // Street address
		var pfach = iKNA1MComp.GetFieldValue (""PFACH""); // PO Box
		var street;

		if (stras == """" && pfach == """") 	street = ""None"";
		else if (stras != """" && pfach == """")street = stras;
		else if (stras != """" && pfach != """")street = stras + "" P.O. Box "" + pfach;
		else if (stras == """" && pfach != """")street = ""P.O. Box "" + pfach;

		oAddrComp.SetFieldValue  (""Street Address"", street);
		oAddrComp.CopyFieldValue (""City"",    ""ORT01"", ""None"", ""None"");
		oAddrComp.SetFieldValue  (""Country"", countryLM.Translate (iKNA1MComp.GetFieldValue (""LAND1"")));
		var x = 0; x += 1; //temporarily fix until operation synchronize works
		var AddrName = street + x + ', ' + iKNA1MComp.GetFieldValue (""ORT01"") + ', ' + iKNA1MComp.GetFieldValue (""REGIO"") ;
		oAddrComp.SetFieldValue (""Address Name"", AddrName); 

// nbc 11/10/01. CR#12-90S337 - The EAI value maps for State / Region is missing
		sapCode  = iKNA1MComp.GetFieldValue (""REGIO"");	//12-90S337
		regCode  = iKNA1MComp.GetFieldValue (""LAND1"");	//12-90S337
		regCode  = regCode + ""_"" + sapCode;				//12-90S337
		osiebReg = regCodeLM.Translate (regCode);		//12-90S337
		var sRegion = TheApplication().InvokeMethod (""LookupValue"", ""STATE_ABBREV"", osiebReg);	//12-90S337
		oAddrComp.SetFieldValue (""State"",    sRegion);	//12-90S337
				
		oAddrComp.CopyFieldValue (""Postal Code"", ""PSTLZ"");
		oAddrComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
		oAddrComp.SetFieldValue (""operation"", ""sync"");

		/* Read ""KNVKM"" component */
		iComp   = iKNA1MComp.GetIntComp (""E2KNVKM"");
		oContactComp = oAccountComp.CreateIntComp (""Contact"", false);
		while (iComp.NextRecord ())
		{
			/* Write ""Contact"" component */
			oContactComp.NewRecord ();
			oContactComp.SetCopySource  (iComp);
			oContactComp.CopyFieldValue (""Integration Id"", ""PARNR"");
			oContactComp.CopyFieldValue (""Employee Number"", ""PARNR"");
			
			// Set First Name
			oContactComp.CopyFieldValue (""First Name"", ""NAMEV"", ""No First Name"", ""No First Name"");
			// Set Last name
			oContactComp.CopyFieldValue (""Last Name"", ""NAME1"");

			// Set job title
			oContactComp.CopyFieldValue (""Job Title"",    ""TITEL_AP"");
			oContactComp.CopyFieldValue (""M/M"",          ""ANRED"");
			oContactComp.CopyFieldValue (""Work Phone #"", ""TELF1"");
			
			// Account Integration Id for Contact (12-C34KYN)
			oContactComp.SetFieldValue ( ""Account Integration Id"", AcctIntId );
			
			// flags
			oContactComp.CopyFieldValue (""Personal Contact"",      ""N"");
			oContactComp.CopyFieldValue (""Suppress All Mailings"", ""Y"");
			oContactComp.CopyFieldValue (""Row Status"", ""Y"");

			oContactComp.SetFieldValue (""operation"", ""sync"");
		} // while (iComp.NextRecord ())

		/* Process the Sales Area Accounts */

		var e2knvvm = iKNA1MComp.GetIntComp (""E2KNVVM005"");
		var oSalesAreaAccountComp = oAccountComp.CreateIntComp (""SAP 4x Account Sales Area"", false);

		
		enumOrg: while( e2knvvm.NextRecord() )
		{
			/* Create ""Sales Area Account"" component in output message	*/
			oSalesAreaAccountComp.NewRecord ();

			oSalesAreaAccountComp.SetCopySource (e2knvvm);

			var SalesOrg = e2knvvm.GetFieldValue(""VKORG"");
			var DistChannel= e2knvvm.GetFieldValue(""VTWEG"");
			var DivCode = e2knvvm.GetFieldValue(""SPART"");


			var OrgID = GetSalesArea(SalesOrg, DistChannel, DivCode);

			if (OrgID != null) 	
			   oSalesAreaAccountComp.SetFieldValue(""Organization Id"", OrgID);
			else
			   EAIRaiseError(LocalizeMessage(""ERR_MSG_SALES_AREA_NOT_FOUND,""+SalesOrg+"",""+DistChannel+"",""+DivCode+""""));
		   
		   	oSalesAreaAccountComp.SetFieldValue(""Integration Id"", oIntId);

			/* Check if sales area is marked as deleted */
			if ((e2knvvm.GetFieldValue (""LOEVM"") == ""X"") || (iKNA1MComp.GetFieldValue (""LOEVM"") == ""X""))
			{
				oSalesAreaAccountComp.SetFieldValue (""Account Status"", ""Marked For Deletion"");
//				continue enumOrg;
			}
			else
			{
				oSalesAreaAccountComp.SetFieldValue (""Account Status"", """");
			}
				
			/* Set language code */
			oSalesAreaAccountComp.SetFieldValue (""Language Code"", languageLM.Translate (iKNA1MComp.GetFieldValue (""SPRAS_ISO"")));

			oSalesAreaAccountComp.CopyFieldValue (""Freight Terms"", ""INCO1"");
			oSalesAreaAccountComp.CopyFieldValue (""Freight Terms Info"", ""INCO2"");
			oSalesAreaAccountComp.SetFieldValue (""Type"", TheApplication().InvokeMethod (""LookupValue"", ""ACCOUNT_TYPE"", e2knvvm.GetFieldValue(""KDGRP"")));
				
			oSalesAreaAccountComp.CopyFieldValue (""Primary Fulfillment InvLoc ID"", ""VWERK"");
			oSalesAreaAccountComp.CopyFieldValue (""Payment Terms"", ""ZTERM"");
			oSalesAreaAccountComp.CopyFieldValue (""Price List Type"", ""PLTYP"");
			oSalesAreaAccountComp.SetFieldValue (""Shipping Conditions"", TheApplication().InvokeMethod (""LookupValue"", ""SHIPPING_CONDITION"", e2knvvm.GetFieldValue(""VSBED"")));
			// oSalesAreaAccountComp.CopyFieldValue (""Pricing Group Code"", ""KONDA"");

			/* Set currency code */
			oSalesAreaAccountComp.SetFieldValue (""Currency Code"", currencyLM.Translate (e2knvvm.GetFieldValue (""WAERS"")));

			/* Block Credit Flag */
			var e2knkkm = iKNA1MComp.GetIntComp(""E2KNKKM001"");
			var oCrdtCtlAreaComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Credit Control Area"", false);
			while (e2knkkm.NextRecord () )
			{
				oCrdtCtlAreaComp.NewRecord ();
				oCrdtCtlAreaComp.SetCopySource (e2knkkm);
				oCrdtCtlAreaComp.CopyFieldValue (""Credit Control Area Code"", ""KKBER"");
				if (e2knkkm.GetFieldValue(""CRBLB"") == ""X"") 
					oCrdtCtlAreaComp.SetFieldValue (""Block Credit Flag"", ""Y"");
				else
					oCrdtCtlAreaComp.SetFieldValue (""Block Credit Flag"", ""N"");
				
				oCrdtCtlAreaComp.SetFieldValue (""operation"", ""upsert"");
			}

			/* Primary Partner Relationships of Sales Area Accounts  */
			var e2knvpm = e2knvvm.GetIntComp (""E2KNVPM002"");
			var oShipToPartnerComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Account Partner Function (Ship To)"", false);	
			var oPayerPartnerComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Account Partner Function (Payer)"", false);
			var oBillToPartnerComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Account Partner Function (Bill To)"", false);
			var oSoldToPartnerComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Account Partner Function (Sold To)"", false);

			var FirstShipTo, FirstPayer, FirstBillTo;
			FirstShipTo = true;
			FirstPayer = true;
			FirstBillTo = true;
			enumPartner: while (e2knvpm.NextRecord () )
			{
				// Default Ship To Partner 
				if ( e2knvpm.GetFieldValue(""PARVW"") == ""WE"" )
				{
					oShipToPartnerComp.NewRecord ();
					oShipToPartnerComp.SetCopySource( e2knvpm );
					oShipToPartnerComp.CopyFieldValue (""Integration Id"", ""KUNN2"");
					var Int_ID = e2knvpm.GetFieldValue (""KUNN2"");
					if ( Int_ID == oIntId )
					{
						var AccName = iKNA1MComp.GetFieldValue (""NAME1"");
					}
					else
					{
						var AccName = GetAccountName (Int_ID);
					}	
					oShipToPartnerComp.SetFieldValue (""Ship To Partner Function"", AccName);
					if ( e2knvpm.GetFieldValue(""DEFPA"") == ""X"" ) oShipToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					if (FirstShipTo) {
						FirstShipTo = false;
						oShipToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					}
					oShipToPartnerComp.SetFieldValue (""operation"", ""sync"");
				
				}	
				// Default Payer Partner 
				if ( e2knvpm.GetFieldValue(""PARVW"") == ""RG"" )
				{
					oPayerPartnerComp.NewRecord ();
					oPayerPartnerComp.SetCopySource (e2knvpm);
					oPayerPartnerComp.CopyFieldValue (""Integration Id"", ""KUNN2"");
					var Int_ID = e2knvpm.GetFieldValue (""KUNN2"");
					if ( Int_ID == oIntId )
					{
						var AccName = iKNA1MComp.GetFieldValue (""NAME1"");
					}
					else
					{
						var AccName = GetAccountName (Int_ID);
					}	
					oPayerPartnerComp.SetFieldValue (""Payer Partner Function"", AccName);
					if ( e2knvpm.GetFieldValue(""DEFPA"") == ""X"" ) oPayerPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					if (FirstPayer) {
						FirstPayer = false;
						oPayerPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					}
					oPayerPartnerComp.SetFieldValue (""operation"", ""sync"");
					
				}
				// Default Bill To Partner 
				if ( e2knvpm.GetFieldValue(""PARVW"") == ""RE"" )
				{
					oBillToPartnerComp.NewRecord ();
					oBillToPartnerComp.SetCopySource (e2knvpm);
					oBillToPartnerComp.CopyFieldValue (""Integration Id"", ""KUNN2"");
					var Int_ID = e2knvpm.GetFieldValue (""KUNN2"");
					if ( Int_ID == oIntId )
					{
						var AccName = iKNA1MComp.GetFieldValue (""NAME1"");
					}
					else
					{
						var AccName = GetAccountName (Int_ID);
					}	
					oBillToPartnerComp.SetFieldValue (""Bill To Partner Function"", AccName);
					if ( e2knvpm.GetFieldValue(""DEFPA"") == ""X"" ) oBillToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					if (FirstBillTo) {
						FirstBillTo = false;
						oBillToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					}
					oBillToPartnerComp.SetFieldValue (""operation"", ""sync"");

				}	
				// Sold To Partner
				if ( e2knvpm.GetFieldValue(""PARVW"") == ""AG"" )
				{
					oSoldToPartnerComp.NewRecord ();
					oSoldToPartnerComp.SetCopySource (e2knvpm);
					oSoldToPartnerComp.CopyFieldValue (""Integration Id"", ""KUNN2"");
					var Int_ID = e2knvpm.GetFieldValue (""KUNN2"");
					if ( Int_ID == oIntId )
					{
						var AccName = iKNA1MComp.GetFieldValue (""NAME1"");
					}
					else
					{
						var AccName = GetAccountName (Int_ID);
					}	
					oSoldToPartnerComp.SetFieldValue (""Sold To Partner Function"", AccName);
					if ( e2knvpm.GetFieldValue(""DEFPA"") == ""X"" ) oSoldToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					oSoldToPartnerComp.SetFieldValue (""operation"", ""sync"");

				}	
			}

			/* Set Parent Account Id - P Lim. 3/15/00. In our system, the component has trailing 002 */
			// iComp = iKNA1MComp.GetIntComp (""E2KNB1M005"");
			// findKNRZE: while (iComp.NextRecord ())
			// {
				// oSalesAreaAccountComp.SetFieldValue (""Parent Account Integration Id"", iComp.GetFieldValue (""KNRZE""));
				/* only get first row */
				//break findKNRZE;
			//}
		  // Set operation to ""upsert"" since we are using the ""Execute"" method
		  oSalesAreaAccountComp.SetFieldValue (""operation"", ""sync"");
		} // ... while( e2knvvm.Ne...
	} // ... while (iIDOCObj.NextInstance ())
} // ... ReceiveSAPCustomer_IDOCToSiebel"
function RequestCustomerNumber_BAPIToSiebel (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   BAPI Export (Account - Get SAP 46C Internal Customer Number (BAPI Output))
    *     Export Parameters (output)
    * 	    CUSTOMERID
    *
    * Output Object's Integration Components:
    *   Account Object (Account - Send or Receive SAP 46C Customer (Siebel 77))
    *     Integration Id, Location, Sync status data (oAccount)
    */

   /*
    * Set up EAI Input Message objects
    */
   var iBAPIObj;   // BAPI object instance
   var iExportComp; // BAPI Export Parameters

   // Store inputId for later use
   var inputId = inputMsg.GetArgument (""Siebel Account Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oAccountObj;      // Siebel Account instance
   var oAccountComp;     // Account

   /*
    * Find and create top-level integration object
    */
   iBAPIObj = inputMsg.GetIntObj (""Account - Get SAP 46C Internal Customer Number (BAPI Output)"");
   oAccountObj = outputMsg.CreateIntObj (""Account - Send or Receive SAP 46C Customer (Siebel 77)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iBAPIObj.NextInstance ())
   {
      /*
       * Create ""Account"" object
       */
      oAccountObj.NewInstance ();

      /*
       * Create ""Account"" component in output message
       */
      oAccountComp = oAccountObj.CreatePrimaryIntComp (""Account"");
      oAccountComp.NewRecord ();
      // Set ""Id"" so Siebel Adapter can synchronize
      oAccountComp.SetFieldValue (""Id"", inputId);

      /*
       * Read ""Export Parameters"" component
       */
      iExportComp = iBAPIObj.GetPrimaryIntComp (""Export Parameters"");

      if (iExportComp.NextRecord ())
      {
      	 oAccountComp.SetCopySource  (iExportComp);
      	 oAccountComp.CopyFieldValue (""EAI Sync Error Text"", ""RETURN-MESSAGE"");
      	 var ErrorType = iExportComp.GetFieldValue (""RETURN-TYPE"");
      	 
      	 if (ErrorType != ""E"")
      	 {
      	 
 		 /*
      	  * Update ""Account"" component
      	  */
        	oAccountComp.CopyFieldValue (""Integration Id"", ""CUSTOMERID"");
        	var customerno = iExportComp.GetFieldValue (""CUSTOMERID"");
        	var timenow = Timestamp();
         	var SyncStat = TheApplication().InvokeMethod (""LookupValue"", ""EAI_ACCOUNT_SYNC_STATUS"", ""Created in Back Office"");
	     	oAccountComp.SetFieldValue (""EAI Sync Status Code"",  SyncStat);
	     	oAccountComp.SetFieldValue (""EAI Sync Date"",timenow);
	     	
    	
	     	/*
	     	 *	Get Address Info to create the location field with 
	     	 *     embedded customer number
	     	 */
			var AccBusObject = TheApplication().GetBusObject(""Account"");
		 	var AccBusComp   = AccBusObject.GetBusComp(""Account"");
		 
			 // Set View Mode to 3 (or AllView)
		 	AccBusComp.SetViewMode(3);  
		 
		 	AccBusComp.ClearToQuery();
    	 	AccBusComp.SetSearchSpec(""Id"", inputId);
			AccBusComp.ActivateField(""Location"");
			
		 	AccBusComp.ExecuteQuery();
		 	if(AccBusComp.FirstRecord())
			{
	  		 var city        = AccBusComp.GetFieldValue(""City"");
	  		 var location    = AccBusComp.GetFieldValue(""Location"");
	  		 
	  		 /*
	  		  *		Site
	  		  */
	  		 if (location == """")
	  		 {
	  		 	location = AccBusComp.GetFieldValue(""City"");
	  		 }
	  		 location += "" "" + customerno;
	  		 oAccountComp.SetFieldValue (""Location"", location );
			}
			  	 
	     	   	
	     }
      }
   } //   while (iCreateAccountObj.NextInstance ())
} //function RequestCustomerNumber_BAPIToSiebel"
function RequestCustomerNumber_SiebelToBAPI (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   Account Object (Account - Send or Receive SAP 46C Customer (Siebel 77))
    *     Account (Account)
    *       
    *
    * Output Object's Integration Components:
    *   Account - Get SAP 46C Internal Customer Number (BAPI Input)
    */

	/* Set up EAI Lookup maps */
    var acctGroupLM = EAIGetValueMap (""SAP Customer Acct Group Code"", ""Siebel Outbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iAccountObj;  // Account object instance
   var iAccountComp; // Account

   /*
    * Set up EAI Output Message objects
    */
   var oBAPIObj;    // BAPI object instance
   var oBAPIImportComp;  // BAPI Import parameters
   

   /*
    * Find and create top-level integration object
    */
   iAccountObj = inputMsg.GetIntObj (""Account - Send or Receive SAP 46C Customer (Siebel 77)"");
   oBAPIObj = outputMsg.CreateIntObj (""Account - Get SAP 46C Internal Customer Number (BAPI Input)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iAccountObj.NextInstance ())
   {
      /*
       * Create BAPI object in output message
       */
      oBAPIObj.NewInstance ();

      /*
       * Read ""Account"" component
       */
      iAccountComp = iAccountObj.GetPrimaryIntComp (""Account"");
      oBAPIImportComp = oBAPIObj.CreatePrimaryIntComp (""Import Parameters"");
      while (iAccountComp.NextRecord ())
      {
         /*
          * Return an error if Integration Id is not null
          */
         if (iAccountComp.GetFieldValue (""Integration Id"") != """")
	       {
			var IntId = iAccountComp.GetFieldValue (""Integration Id"");
			EAIRaiseError(LocalizeMessage(""ERR_MSG_ACCOUNT_EXISTS,""+IntId+""""));//nbc
	       }
	      /*
	       *	Validate Address
	       */
	       
	      var iAddrComp = iAccountComp.GetIntComp (""Account_Business Address"");
	      var AddressFlag = ""N"";
	      if (iAddrComp.Exists ())
	      {
	      	while (iAddrComp.NextRecord())
	      	{
	      		if (iAddrComp.GetFieldValue (""IsPrimaryMVG"") == ""Y"")
	      		{
	      			AddressFlag = ""Y"";
	      		}
	      	}
	      }
	      /*
	       * Return an error if no address is found
	       */
	      if (AddressFlag == ""N"")
	      {
	      	EAIRaiseError(LocalizeMessage(""ERR_MSG_INVALID_ADDRESS,"" + """"));
	      }

         /*
          * Write ""Import Parameters"" component
          */
         oBAPIImportComp.NewRecord ();
         oBAPIImportComp.SetFieldValue (""QUANTITY"", ""1"");
   	     var acctGroup = iAccountComp.GetFieldValue(""Customer Account Group"");
	     oBAPIImportComp.SetFieldValue (""ACCOUNTGROUP"", acctGroupLM.Translate(acctGroup));
   
      } //while (iAccountComp.NextRecord ())
   } //while (iAccountObj.NextInstance ())
} //function RequestCustomerNumber_SiebelToBAPI"
function SendAccount_SiebelToDEBMAS05 (inputMsg, outputMsg)
{
	/* Input Objects' Integration Components						
	 *   Account Object (Account - Send or Receive SAP 46C Customer (Siebel 77))
	 *
	 *	Output Object's Integration Components:
	 *			Customer IDOC (Account - Send or Receive SAP 46C Customer (DEBMAS05))
	 */
	
	/* Set up EAI Lookup maps */
	var currencyLM = EAIGetValueMap (""SAP Currency Code"", ""Siebel Outbound"");
	var languageLM = EAIGetValueMap (""SAP Language 4x"", ""Siebel Outbound"");
	var countryLM  = EAIGetValueMap (""SAP Country"", ""Siebel Outbound"");
	var acctGrpLM  = EAIGetValueMap (""SAP Customer Acct Group Code"", ""Siebel Outbound"");
	var regCodeLM  = EAIGetValueMap (""Back Office Region"", ""Siebel Outbound"");
	
	/* Set up EAI Input Message objects */
	var iAccountObj;    // Siebel Account instance
	var iAccountComp;   // Account
	var iAddrComp;      // Address
	var iContactComp;   // Contact

	/* Set up EAI Output Message objects */
	var oIDOCObj;   // IDOC instance
	var oIDOCComp;  // top level IDOC segment
	var oKNA1MComp; // IDOC Customer Header
	var oComp;      // for reading child components

	/* Find and create top-level integration object	*/
	iAccountObj = inputMsg.GetIntObj (""Account - Send or Receive SAP 46C Customer (Siebel 77)"");
	oIDOCObj =  outputMsg.CreateIntObj (""Account - Send or Receive SAP 46C Customer (DEBMAS05)"");

	/* Misc set up	*/
	var generateMasterRecord = 1;   // Set to '0' to generate sub-organization records only
	var custAccntGrp;
    var currencyCode;
    var ctr = 0;
    var countryCode;
    var regCode;
    var sapCode;
	
	/* Read int object instances from EAI message */
	enumObj: while (iAccountObj.NextInstance ())
	{
		/* Read root Account component */
		iAccountComp = iAccountObj.GetPrimaryIntComp (""Account"");
		if( !iAccountComp.NextRecord() ) continue enumObj;
		
		/*
         * Return an error if Integration Id is not null
         */
			if (iAccountComp.GetFieldValue (""Integration Id"") == """")
		    {
				var errMsg = iAccountComp.GetFieldValue (""EAI Sync Error Text"");
				EAIRaiseError ( errMsg );
	       	}

		/* Create ""IDOC"" object	*/
		oIDOCObj.NewInstance ();

		/* Create ""IDOC"" component in output message */
		oIDOCComp = oIDOCObj.CreatePrimaryIntComp (""Idoc Segments"");
		oIDOCComp.NewRecord ();
		oKNA1MComp = oIDOCComp.CreateIntComp (""E2KNA1M005"",false);
		oKNA1MComp.NewRecord ();	
		oKNA1MComp.SetCopySource (iAccountComp);

		/* Set Integration Id, Name	and Account Group*/
		oKNA1MComp.CopyFieldValue (""KUNNR"", ""Integration Id"");
		oKNA1MComp.CopyFieldValue (""NAME1"", ""Name"");
		oKNA1MComp.SetFieldValue (""KTOKD"", acctGrpLM.Translate (iAccountComp.GetFieldValue(""Customer Account Group"")));

		/* Set location	*/
		// oKNA1MComp.CopyFieldValue (""ORT01"", ""Location"");
	
		/* Account Status */
		// oKNA1MComp.CopyFieldValue (""AUFSD"", ""Account Status"" );
		oKNA1MComp.SetFieldValue (""LOEVM"", """");
		if (iAccountComp.GetFieldValue (""Account Status"") == ""Marked For Deletion"")
			oKNA1MComp.SetFieldValue (""LOEVM"", ""X""); 

		/* Primary Industry */
		// oKNA1MComp.CopyFieldValue (""BRSCH"", ""Primary Industry Id"");

		/* Tax Exempt Number (not created in bus comp for VAT_REGN_NUM yet) */
		// oKNA1MComp.CopyFieldValue (""STCEG"", """" );

		/* Search Term */
		oKNA1MComp.CopyFieldValue (""SORTL"", ""Name"");			

		/* Transportation Zone */
		// oKNA1MComp.SetFieldValue (""LZONE"", ""0000000001"");			

		/* Set language code */
		oKNA1MComp.SetFieldValue (""SPRAS"", languageLM.Translate (iAccountComp.GetFieldValue (""Language Code"")));
		
		/* Set main Phone/FAX numbers */
		oKNA1MComp.CopyFieldValue (""TELF1"", ""Main Phone Number"" );
		oKNA1MComp.CopyFieldValue (""TELFX"", ""Main Fax Number"" );
		
	
		/* Read ""KNVKM"" component */
		iContactComp = iAccountComp.GetIntComp (""Contact"");
		oComp = oKNA1MComp.CreateIntComp (""E2KNVKM"", false);
		while (iContactComp.NextRecord ())
		{
			/* Write ""Contact"" component */

			oComp.NewRecord ();
			oComp.SetCopySource  (iContactComp);
			// oComp.CopyFieldValue (""PARNR"", ""Integration Id"");
			// oComp.CopyFieldValue (""PARNR"", ""Employee Number"");

			/* Set First Name */
			oComp.CopyFieldValue (""NAMEV"", ""First Name"");

			/* Set Last name */
			oComp.CopyFieldValue (""NAME1"", ""Last Name"");

			/* Set job title */
			oComp.CopyFieldValue (""TITEL_AP"", ""Job Title"");
			oComp.CopyFieldValue (""ANRED"", ""M/M"");
			oComp.CopyFieldValue ( ""TELF1"", ""Work Phone #"");
		} // while (iContactComp.NextRecord ())

		/* Write ""Address"" component */
		iAddrComp = iAccountComp.GetIntComp (""Account_Business Address"");
		while (iAddrComp.NextRecord () )
		{
			oKNA1MComp.SetCopySource(iAddrComp);
			if (iAddrComp.GetFieldValue (""IsPrimaryMVG"") == ""Y"")
			{

			// Set telephone numbers
			// oKNA1MComp.CopyFieldValue (""TELF1"", ""Phone Number"" );
			// oKNA1MComp.CopyFieldValue (""TELFX"", ""Fax Number"" );

			// Set Street address
			oKNA1MComp.CopyFieldValue  (""STRAS"", ""Street Address"");
			oKNA1MComp.CopyFieldValue (""ORT01"", ""City"");
			countryCode = countryLM.Translate (iAddrComp.GetFieldValue (""Country""));
			oKNA1MComp.SetFieldValue (""LAND1"", countryLM.Translate (iAddrComp.GetFieldValue (""Country"")));
			
// nbc 11/10/01. CR#12-90S337 - The EAI value maps for State / Region is missing 
			regCode = regCodeLM.Translate (iAddrComp.GetFieldValue (""State""));	//12-90S337
			sapCode = regCode.substring(3,5);									//12-90S337
			oKNA1MComp.SetFieldValue (""REGIO"", sapCode );						//12-90S337
	
			oKNA1MComp.CopyFieldValue (""PSTLZ"", ""Postal Code"" );
			
		// Set operation to ""upsert"" since we are using the ""Execute"" method.
			oKNA1MComp.SetFieldValue (""operation"", ""upsert"");
			}
		}
		

/* Process Sales Area Account */

		var iSalesAreaAccountComp = iAccountComp.GetIntComp (""SAP 4x Account Sales Area"");
		var e2knvvm = oKNA1MComp.CreateIntComp (""E2KNVVM005"", false);
			
		enumOrg: while (iSalesAreaAccountComp.NextRecord() )
		{
			/* Create ""Account"" component in output message	*/

			e2knvvm.NewRecord ();
			e2knvvm.SetCopySource ( iSalesAreaAccountComp );


			/* Set sales organization */

			e2knvvm.CopyFieldValue( ""VKORG"", ""Back Office Sales Organization"");
			e2knvvm.CopyFieldValue( ""VTWEG"", ""Back Office Distribution Channel"");
			e2knvvm.CopyFieldValue( ""SPART"", ""Back Office Sales Area Division Code"");
			
			/* Account Status (for Sales Area Accounts) */
			// e2knvvm.CopyFieldValue (""AUFSD"", ""Account Status"");
			if (iSalesAreaAccountComp.GetFieldValue (""Account Status"") == ""Marked For Deletion"")
				e2knvvm.SetFieldValue( ""LOEVM"", ""X"");

			/* Freight Terms a.k.a Incoterms 1 */
			// e2knvvm.CopyFieldValue (""INCO1"", ""Freight Terms"");

			/* Freight Terms Info a.k.a Incoterms 2 */
			// e2knvvm.CopyFieldValue (""INCO2"", ""Freight Terms Info"");

			/* Primary Fullfilment Inventory Location Id  */
			// e2knvvm.CopyFieldValue (""VWERK"", ""Primary Fulfillment InvLoc ID"");

			/* Payment Terms */
			// e2knvvm.CopyFieldValue (""ZTERM"", ""Payment Terms"");

			/* Price List Type */
			// e2knvvm.CopyFieldValue (""PLTYP"", ""Price List Type"");

			/* Account Type / Customer Group  */
               e2knvvm.SetFieldValue( ""KDGRP"", iSalesAreaAccountComp.GetFieldValue(""Type"" ));
			
			/* Customer Stats Group */
			   e2knvvm.SetFieldValue (""VERSG"", ""/"");

			// e2knvvm.SetFieldValue (""PERFK"", ""US"");

			/* Sales District Code */
			// e2knvvm.SetFieldValue (""BZIRK"", ""CENTRE"");			

			/* Pricing Group Code */
			// e2knvvm.SetFieldValue (""KONDA"", ""02"");

			/* Pricing Procedure */
 			e2knvvm.SetFieldValue (""KALKS"", ""/"");

			/* Shipping Conditions */
			var shpCond = iSalesAreaAccountComp.GetFieldValue(""Shipping Conditions"");
			if ( shpCond == """" )
				e2knvvm.SetFieldValue (""VSBED"", ""02""); // Change Me
			else
				e2knvvm.SetFieldValue (""VSBED"", iSalesAreaAccountComp.GetFieldValue(""Shipping Conditions""));

			/* Set currency code */
			var sCurCode = iSalesAreaAccountComp.GetFieldValue (""Currency Code"");
			if ( sCurCode == """")
				currencyCode = TheApplication().CurrencyCode();
			else
				currencyCode = iSalesAreaAccountComp.GetFieldValue (""Currency Code"");
				
			e2knvvm.SetFieldValue (""WAERS"", currencyLM.Translate (currencyCode));

			/* Set Block Credit Flag */
//			var e2knkkm = oKNA1MComp.CreateIntComp(""E2KNKKM001"",false);
//			var iCrdtCtlAreaComp = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Credit Control Area"");
//			while (iCrdtCtlAreaComp.NextRecord () )
//			{
//				e2knkkm.NewRecord ();
//				e2knkkm.SetCopySource (iCrdtCtlAreaComp);
//				e2knkkm.CopyFieldValue (""KKBER"", ""Credit Control Area Code"");
//				e2knkkm.CopyFieldValue (""CRBLB"", ""Block Credit Flag"");
//				e2knkkm.SetFieldValue (""operation"", ""upsert"");
//			}

			/* Tax classification */
			// var iTaxCode = e2knvvm004.CreateIntComp (""E2KNVIM"",false);
			// iTaxCode.NewRecord ();
			// iTaxCode.SetFieldValue (""TAXKD"",""0"");
			
			/* Set Primary Partner Relationships of Sales Area Accounts */
			var acctGrp = acctGrpLM.Translate (iAccountComp.GetFieldValue(""Customer Account Group""));
			var intId   = iAccountComp.GetFieldValue (""Integration Id"");
			if ( acctGrp == ""0001"" || acctGrp == ""0002"" )
			{
			
			var e2knvpm = e2knvvm.CreateIntComp (""E2KNVPM002"",false);

			var iShipToPartnerComp = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Account Partner Function (Ship To)"");	
			var iPayerPartnerComp  = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Account Partner Function (Payer)"");
			var iBillToPartnerComp = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Account Partner Function (Bill To)"");
			var iSoldToPartnerComp = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Account Partner Function (Sold To)"");

			var i = 0;
			enumShipToPartner: while (iShipToPartnerComp.NextRecord () )
			{
				// Default Ship To Partner 
				if ( iShipToPartnerComp.GetFieldValue(""Ship To Partner Function"") )
				{
					e2knvpm.NewRecord ();
					e2knvpm.SetCopySource( iShipToPartnerComp );
					e2knvpm.CopyFieldValue (""KUNN2"", ""Integration Id"" );
   					e2knvpm.SetFieldValue (""PARVW"", ""WE"");
					e2knvpm.SetFieldValue (""operation"", ""upsert"");
					i++;
				}	
			}
			if ( i == 0 )
			{
				e2knvpm.NewRecord ();
		   		e2knvpm.SetFieldValue (""KUNN2"", intId);
				e2knvpm.SetFieldValue (""PARVW"", ""WE"");
				e2knvpm.SetFieldValue (""operation"", ""upsert"");
			}

			if ( acctGrp == ""0002"" )  goto SoldToPartner;

			i = 0;
			enumPayerPartner: while (iPayerPartnerComp.NextRecord () )
			{
				// Default Payer Partner 
				if ( iPayerPartnerComp.GetFieldValue(""Payer Partner Function"") )
				{
					e2knvpm.NewRecord ();
					e2knvpm.SetCopySource (iPayerPartnerComp);
					e2knvpm.CopyFieldValue (""KUNN2"", ""Integration Id"" );
					e2knvpm.SetFieldValue (""PARVW"", ""RG"");
					e2knvpm.SetFieldValue (""operation"", ""upsert"");
					i++;
				}	
			}
			if ( i == 0 && acctGrp == ""0001"" )
			{
				e2knvpm.NewRecord ();
	   			e2knvpm.SetFieldValue (""KUNN2"", intId);
				e2knvpm.SetFieldValue (""PARVW"", ""RG"");
				e2knvpm.SetFieldValue (""operation"", ""upsert"");
			}
	
			i = 0;
			enumBillToPartner: while (iBillToPartnerComp.NextRecord () )
			{
				// Default Bill To Partner 
				if ( iBillToPartnerComp.GetFieldValue(""Bill To Partner Function"")  )
				{
					e2knvpm.NewRecord ();
					e2knvpm.SetCopySource (iBillToPartnerComp);
					e2knvpm.CopyFieldValue (""KUNN2"", ""Integration Id"" );
					e2knvpm.SetFieldValue (""PARVW"", ""RE"");
					e2knvpm.SetFieldValue (""operation"", ""upsert"");
					i++;
				}	
			}
			if ( i == 0 && acctGrp == ""0001"" )
			{
				e2knvpm.NewRecord ();
	   			e2knvpm.SetFieldValue (""KUNN2"", intId);
				e2knvpm.SetFieldValue (""PARVW"", ""RE"");
				e2knvpm.SetFieldValue (""operation"", ""upsert"");
			}

			SoldToPartner:
			i = 0;
			enumSoldToPartner: while (iSoldToPartnerComp.NextRecord () )
			{
				// Default Sold To Partner 
				if ( iSoldToPartnerComp.GetFieldValue(""Sold To Partner Function"")  )
				{
					if (( iSoldToPartnerComp.GetFieldValue(""Integration Id"") != intId )) 
					{	
						e2knvpm.NewRecord ();
						e2knvpm.SetCopySource (iSoldToPartnerComp);
						e2knvpm.CopyFieldValue (""KUNN2"", ""Integration Id"" );
						e2knvpm.SetFieldValue (""PARVW"", ""AG"");
						e2knvpm.SetFieldValue (""operation"", ""upsert"");
						i++;
					}
				}	
			}
			if ( i == 0 && acctGrp == ""0001"" )
			{
				e2knvpm.NewRecord ();
	   			e2knvpm.SetFieldValue (""KUNN2"", intId);
				e2knvpm.SetFieldValue (""PARVW"", ""AG"");
				e2knvpm.SetFieldValue (""operation"", ""upsert"");
			}

			/* Set operation to ""upsert"" since we are using the ""Execute"" method. */
			e2knvvm.SetFieldValue (""operation"", ""upsert"");
			}

		} // enumOrg: while( iSalesAreaAccountComp.NextRecord() )
		/* Set Company Code & Parent Account Id	*/
		// var oCoCodeComp = oKNA1MComp.CreateIntComp (""E2KNB1M005"",false);
		// oCoCodeComp.NewRecord ();
		// oCoCodeComp.SetCopySource(iAccountComp);
		// oCoCodeComp.CopyFieldValue (""KNRZE"", ""Parent Account Integration Id"");
		// oCoCodeComp.SetFieldValue (""BUKRS"", ""0010"");
		// oCoCodeComp.SetFieldValue (""AKONT"", ""121000"");

	} // ... while (iAccountObj.NextInstance ())
} // ... ReceiveSAPCustomer_IDOCToSiebel"
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{
}
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
	return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"
function Timestamp()
{
	var d = Date.fromSystem(Clib.time());

	// Return date in the format MM/DD/YYYY HH:MM:SS
	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
	  d.getHours(), d.getMinutes(), d.getSeconds());
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 4 $
//      $Date: 12/10/99 10:29a $
//    $Author: Achaudhr $ of last update
//
// CREATOR:    R.Lankinen
//
// DESCRIPTION
//    Multi-organization Javascript maps from Siebel Account to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
"
function GetSAPOrderList_BAPIToSiebel (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   BAPI Export (Account - Get SAP 46C Order List (BAPI Output))
    *     Export Parameters (output)
    *       Order Header (header)
    *         Order Item (item)
    *
    * Output Object's Integration Components:
    *   Account Object (Account - Get SAP 46C Order List (MO))
    *     Account (oAccount)
    *       Get List for Account Output
    *       Get List for Account Header
    *         Get List for Account Item
    */

   /*
    * Set up EAI Lookup objects
    */

   /*
    * Set up EAI Input Message objects
    */
   var iGLOrderObj;   // BAPI Order instance
   var iGLExportComp; // BAPI Export Parameters
   var iGLHeaderComp; // BAPI Order Header
   var iGLItemComp;   // BAPI Order Item

   // Store inputId (ROW_ID) to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Account Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oAccountObj;   // Siebel Order instance
   var oAccountComp;  // Account
   var oGLOutputComp; // Get List Output
   var oGLHeaderComp; // Get List Header
   var oGLItemComp;   // Get List Item

   var theApp = TheApplication();

   /*
    * Find and create top-level integration object
    */
   iGLOrderObj = inputMsg.GetIntObj (""Account - Get SAP 46C Order List (BAPI Output)"");
   oAccountObj = outputMsg.CreateIntObj (""Account - Get SAP 46C Order List (MO)"");

   /*
    * Read int object instances from EAI message
    */
   while (iGLOrderObj.NextInstance ())
   {
      /*
       * Create ""Account"" object in output message
       */
      oAccountObj.NewInstance ();

      /*
       * Create ""Account"" component
       */
      oAccountComp = oAccountObj.CreatePrimaryIntComp (""Account"");
      oAccountComp.NewRecord ();
      // Set ""Id"" so Siebel Adapter can synchronize
      oAccountComp.SetFieldValue (""Id"", inputId);
      
      // Get Primary Sales Area of the account
      var SalesOrg;
      var SalesChn;
	  var SalesDiv;
	  var AccBusObj = theApp.GetBusObject(""Account"");
	  var AccBusCmp = AccBusObj.GetBusComp(""Account"");
	  
	  // Set View Mode to 3 (or AllView)	  
	  AccBusCmp.SetViewMode(3);  
		
	  AccBusCmp.ClearToQuery();
      AccBusCmp.SetSearchSpec(""Id"", inputId);
      AccBusCmp.ActivateField(""Primary Organization Id"");
            	
	  AccBusCmp.ExecuteQuery();
	  
		
	  if(AccBusCmp.FirstRecord())
	  {
	     var PrimOrg = AccBusCmp.GetFieldValue(""Primary Organization Id"");
	     var OrgBusObj = theApp.GetBusObject(""Organizations"");
	     var OrgBusCmp = OrgBusObj.GetBusComp(""Organization"");
	     
	     
	     // Set View Mode to 3 (or AllView)		
		 OrgBusCmp.SetViewMode(3);  	
		 
	     OrgBusCmp.ClearToQuery();
         OrgBusCmp.SetSearchSpec(""Id"", PrimOrg);
         OrgBusCmp.ActivateField(""Back Office Sales Organization"");
	     OrgBusCmp.ActivateField(""Back Office Distribution Channel"");
	     OrgBusCmp.ActivateField(""Back Office Division"");
	
	     OrgBusCmp.ExecuteQuery();
		 
		 // get saleOrg, distChnl and division of the primary SA
	     if(OrgBusCmp.FirstRecord())
	     {
		    var SalesOrg = OrgBusCmp.GetFieldValue(""Back Office Sales Organization"");
		    var SalesChn = OrgBusCmp.GetFieldValue(""Back Office Distribution Channel"");
		    var SalesDiv = OrgBusCmp.GetFieldValue(""Back Office Division"");
	     }
//	     else
//	     {
//		  	EAIRaiseError(""Unable to get sales area info for the primary organization"");
//	     }
	  }
//	  else
//	  {
//	  	EAIRaiseError(""Invalid account"");
//	  }
      

      /*
       * Read ""Export Parameters"" component
       */
      iGLExportComp = iGLOrderObj.GetPrimaryIntComp (""Export Parameters"");
      
      
      oGLOutputComp = oAccountComp.CreateIntComp (""Account - Get SAP Order List Output"", oAccountComp);
      if (iGLExportComp.NextRecord ())
      {
      	
         /*
          * Write ""Get List for Account Output"" component
          */
         oGLOutputComp.NewRecord ();
         oGLOutputComp.SetCopySource  (iGLExportComp);
         oGLOutputComp.SetFieldValue  (""Input Id"",          inputId);
         oGLOutputComp.CopyFieldValue (""Return Code"",       ""RETURN-CODE"");
         oGLOutputComp.CopyFieldValue (""Return Log Msg No"", ""RETURN-LOG_MSG_NO"");
         oGLOutputComp.CopyFieldValue (""Return Log No"",     ""RETURN-LOG_NO"");
         oGLOutputComp.CopyFieldValue (""Return Message"",    ""RETURN-MESSAGE"");
         oGLOutputComp.CopyFieldValue (""Return Type"",       ""RETURN-TYPE"");

         /*
          * Read ""Order Header"" component to 
          */
         iGLHeaderComp = iGLExportComp.GetIntComp (""Order Header"");
         oGLHeaderComp = oAccountComp.CreateIntComp (""Account - Get SAP Order List Header"", oAccountComp);
         while (iGLHeaderComp.NextRecord ())
        /* 
       	 * Validate Sales area
       	 */
      	 {
      		var iSalesOrg = iGLHeaderComp.GetFieldValue(""SALES_ORG""); 
       	 	var iSalesChn = iGLHeaderComp.GetFieldValue(""DISTR_CHAN""); 
       	 	var iSalesDiv = iGLHeaderComp.GetFieldValue(""DIVISION""); 
      
	      	if ((SalesOrg == iSalesOrg) && (SalesChn == iSalesChn) && (SalesDiv == iSalesDiv))  
			{
			   oGLHeaderComp.NewRecord ();
			   oGLHeaderComp.SetCopySource  (iGLHeaderComp);
			   oGLHeaderComp.SetFieldValue  (""Input Id"",         inputId);
			   oGLHeaderComp.CopyFieldValue (""Currency"",             ""CURRENCY"");
			   oGLHeaderComp.CopyFieldValue (""Distribution Channel"", ""DISTR_CHAN"");
			   oGLHeaderComp.CopyFieldValue (""Division"",             ""DIVISION"");
			   oGLHeaderComp.CopyFieldValue (""Order Date"",           ""DOC_DATE"");
			   oGLHeaderComp.CopyFieldValue (""Order Number"",         ""SD_DOC"");
			   oGLHeaderComp.CopyFieldValue (""Order Status"",         ""DOC_STATUS"");
			   oGLHeaderComp.CopyFieldValue (""Order Type"",           ""DOC_TYPE"");
			   oGLHeaderComp.CopyFieldValue (""Purchase Order"",       ""PURCH_NO"");
			   oGLHeaderComp.CopyFieldValue (""Sales Organization"",   ""SALES_ORG"");
			   oGLHeaderComp.CopyFieldValue (""Sold To Customer"",     ""SOLD_TO"");
	
	           /*
	            * Read the ""Order Item"" component
	            */
	           // to ""Get List for Account Item"" component
			   iGLItemComp = iGLHeaderComp.GetIntComp (""Order Item"");
			   oGLItemComp = oGLHeaderComp.CreateIntComp (""Account - Get SAP Order List Item"", oGLHeaderComp);
			   while (iGLItemComp.NextRecord ())
			   {
				  oGLItemComp.NewRecord ();
				  oGLItemComp.SetCopySource  (iGLItemComp);
				  oGLItemComp.SetFieldValue  (""Input Id"",         inputId);
				  oGLItemComp.CopyFieldValue (""Item Number"",          ""ITM_NUMBER"");
				  oGLItemComp.CopyFieldValue (""Material Part Number"", ""MATERIAL"");
				  oGLItemComp.CopyFieldValue (""Material Short Text"",  ""SHORT_TEXT"");
				  oGLItemComp.CopyFieldValue (""Net Price"",            ""NET_PRICE"");
				  oGLItemComp.CopyFieldValue (""Net Value"",            ""NET_VALUE"");
				  oGLItemComp.CopyFieldValue (""Sales Unit"",           ""SALES_UNIT"");
			   }
            }
         }
      }
   }
}
function GetSAPOrderList_SiebelToBAPI (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   Account Object (Account - Get SAP 46C Order List (MO))
    *     Account (iAccount)
	 *       Get List for Account Header
    *
    * Output Object's Integration Components:
    *   BAPI Import (Account - Get SAP 46C Order List (BAPI Input))
    *     Import Parameters (output)
    */

   /*
    * Set up EAI Lookup objects
    */

   /*
    * Set up EAI Input Message objects
    */
   var theApp = TheApplication(); // nbc
   var iAccountObj;    // Siebel Account instance
   var iAccountComp;   // Account
	var iHeaderComp;    // Account Header

   /*
    * Set up EAI Output Message objects
    */
   var oGLObj;         // BAPI instance
   var oGLImportComp;  // Import Parameters

   /*
    * Find and create top-level integration object
    */

   iAccountObj = inputMsg.GetIntObj (""Account - Get SAP 46C Order List (MO)"");
   oGLObj = outputMsg.CreateIntObj (""Account - Get SAP 46C Order List (BAPI Input)"");

   /*
    * Read int object instances from EAI message
    */
   while (iAccountObj.NextInstance ())
   {
      /*
       * Create ""Get List for Account"" object
       */
      oGLObj.NewInstance ();

      /*
       * Read ""Account"" component
       */
      iAccountComp = iAccountObj.GetPrimaryIntComp (""Account"");
      oGLImportComp = oGLObj.CreatePrimaryIntComp (""Import Parameters"");
      if (iAccountComp.NextRecord ())
      {
         /*
          * Write ""Import Parameters"" component
          */
         oGLImportComp.NewRecord ();
         oGLImportComp.SetCopySource  (iAccountComp);

	     var intId = iAccountComp.GetFieldValue( ""Integration Id"" );
	     var fromDate = iAccountComp.GetFieldValue( ""Back Office Order Query Start  Dt"" ); //nbc
	     var toDate = iAccountComp.GetFieldValue( ""Back Office Order Query End  Dt"" ); //nbc

         oGLImportComp.SetFieldValue  (""CUSTOMER_NUMBER"",intId );
         oGLImportComp.SetFieldValue  (""MATERIAL"", """");
         oGLImportComp.SetFieldValue  (""TRANSACTION_GROUP"", ""0"");
         oGLImportComp.SetFieldValue  (""PURCHASE_ORDER"", """"); // ""Peter 1"";
         oGLImportComp.SetFieldValue  (""DOCUMENT_DATE"", fromDate );    // Empty string means ""00000000""
         oGLImportComp.SetFieldValue  (""DOCUMENT_DATE_TO"",  toDate ); // Empty string means ""00000000""

		 // Read the primary sales area
	     var primOrgId = iAccountComp.GetFieldValue(""Primary Organization Id"");
	     var OrgBusObj = TheApplication().GetBusObject(""Organizations"");
		 var OrgBusCmp = OrgBusObj.GetBusComp(""Organization"");
		 
		 // Set View Mode to 3 (or AllView)
		 OrgBusCmp.SetViewMode(3);  
		 
		 OrgBusCmp.ClearToQuery();
    	 OrgBusCmp.SetSearchSpec(""Id"", primOrgId);
    	 OrgBusCmp.ActivateField(""Back Office Sales Organization"");
	 
	
		 OrgBusCmp.ExecuteQuery();
		 if(OrgBusCmp.FirstRecord())
		 {
	  		 var SalesOrg = OrgBusCmp.GetFieldValue(""Back Office Sales Organization"");
	  		 // Write ""Import Parameters"" component
			 oGLImportComp.SetFieldValue( ""SALES_ORGANIZATION"", SalesOrg );
		 }
		}
   }
}
function ImportSAPOrder_GetSAPOrderListToSiebelOrder (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   Import Get List for Account (Account - Import SAP 46C Order (Get SAP Order List) (MO))
    *     Get List for Account Header
    *
    * Output Object's Integration Components:
    *   Import (Account - Import SAP 46C Order (Siebel Order) (MO))
    *     Order (oOrder)
    */

   /*
    * Set up EAI Lookup maps
    */
   var orderTypeLM = EAIGetValueMap (""SAP Order Types"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iGLOrderObj;  // Get List instance
   var iGLOrderComp; // Get List Order

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;      // Siebel Order instance
   var oOrderComp;     // Order
   var oOrderOrgComp;  // Order Organization

   /*
    * Find and create top-level integration object
    */
   iGLOrderObj = inputMsg.GetIntObj (""Account - Import SAP 46C Order (Get SAP Order List) (MO)"");
   oOrderObj = outputMsg.CreateIntObj (""Account - Import SAP 46C Order (Siebel Order) (MO)"");

   /*
    * Read int object instances from EAI message
    */
    
   
   while (iGLOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object
       */
      oOrderObj.NewInstance ();
            	
      /*
       * Read ""Get List Order"" component
       */
      iGLOrderComp = iGLOrderObj.GetPrimaryIntComp (""Get List for Account Header"");
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order"");
      
      while (iGLOrderComp.NextRecord ())
      {
         /*
          * Write ""Order"" component
          */
         oOrderComp.NewRecord ();
         oOrderComp.SetCopySource  (iGLOrderComp);
         
         var SiebOrdNo = iGLOrderComp.GetFieldValue (""Siebel Order Number"");//xx
         if (SiebOrdNo == """")												//xx
         {																	//xx
         	var OrdNumber = iGLOrderComp.GetFieldValue(""Order Number"");		//xx
         }																	//xx
         else
         {																	//xx
         	var OrdNumber = iGLOrderComp.GetFieldValue (""Siebel Order Number"");//xx
         }																	//xx
 		 
 		 oOrderComp.SetFieldValue (""Order Number"",               OrdNumber);//xx
 		             
 		 var oTypeSAP = orderTypeLM.Translate (iGLOrderComp.GetFieldValue (""Order Type""));
		 var oType    = TheApplication().InvokeMethod (""LookupValue"", ""FS_ORDER_TYPE"", oTypeSAP);
		 oOrderComp.SetFieldValue  (""Order Type"",              oType);
         oOrderComp.CopyFieldValue (""Order Date"",             ""Order Date"");
         oOrderComp.CopyFieldValue (""Account Integration Id"", ""Sold To Customer"");
         oOrderComp.CopyFieldValue (""Bill To Account Integration Id"", ""Sold To Customer"");
         oOrderComp.CopyFieldValue (""Ship To Account Integration Id"", ""Sold To Customer"");
         oOrderComp.CopyFieldValue (""Integration Id"",         ""Order Number"");
 		 oOrderOrgComp = oOrderComp.CreateIntComp(""Order Entry - Orders_Organization"");

	 	oOrderOrgComp.NewRecord();
	 	oOrderOrgComp.SetCopySource  (iGLOrderComp);
		
	 	oOrderOrgComp.SetFieldValue ( ""IsPrimaryMVG"",			""Y"");
        oOrderOrgComp.CopyFieldValue ( ""Organization Id"",		""SAP Organization Id (MO)"");
		
			
		
      }
   }
}
function LocalizeMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created by Richard Exley - November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ERR_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ERR_MSG"";
	var LOVType = ""CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
"
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var result = EAIExecuteMap (MethodName, Inputs, Outputs);

	return result;
}
"
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 4 $
//      $Date: 12/10/99 10:29a $
//    $Author: Achaudhr $ of last update
//
// CREATOR:    R.Lankinen
//
// DESCRIPTION
//    Multi-organization Javascript maps from Siebel Account to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
"
function CheckSAPCustomer_CallBAPI (inputMsg, outputMsg) { 
  /*  Referenced in workflow Account - Check SAP 46C Customer
    * Input Object:
    *  Account - Send or Receive SAP 47 Customer (Siebel 77)
    *       
    *
    * Output Object's Integration Components:
    *  Account - Send or Receive SAP 47 Customer (Siebel 77)
    *   set property ""customerExists"" to true or false in outputMsg
    *  if customer does not exist, set ""EAI Sync Error Text""
    */

   // Store inputId for later use
   var inputId = inputMsg.GetArgument (""Siebel Account Id"");

   /*
   *  temporary variables
   */
   var customerExists = false;
   var errorType;

   /*
    * Set up EAI Input Message objects
    */
   var iAccountObj;  // Account object instance
   var iAccountComp; // Account
   var oAccountObj;
   var oAccountComp;
   iAccountObj = inputMsg.GetIntObj (""Account - Send or Receive SAP 47 Customer (Siebel 77)"");
   
   
   /*
   *   Create new property sets for BAPI call to SAP and create adapter bus service
   */   
   var inputBAPI = TheApplication().NewPropertySet();
   var outputBAPI = TheApplication().NewPropertySet();
   var inputBAPIMsg = EAICreateIntMsgOut (inputBAPI);
  
   
   var iBAPIObj = inputBAPIMsg.CreateIntObj (""Account - Check SAP 47 Customer Existence (BAPI Input)"");

   inputBAPIMsg.SetArgument (""OutputIntObjectName"", ""Account - Check SAP 47 Customer Existence (BAPI Output)"");
   inputBAPIMsg.SetArgument (""SAPAutoError"",""False"");

   var bapiAdapter = TheApplication().GetService(""EAI SAP BAPI Adapter"");
   
   var oBAPIObj;
   var oBAPIExportComp;
   var iBAPIImportComp;
  
    
   /*
    * create top-level integration object
    */
   
   if (iAccountObj.NextInstance ())
   {
     /*
      * Create BAPI object in output message
      */
      iBAPIObj.NewInstance ();
      

      iAccountComp = iAccountObj.GetPrimaryIntComp (""Account"");
      iBAPIImportComp = iBAPIObj.CreatePrimaryIntComp (""Import Parameters"");
 
       if (iAccountComp.NextRecord ())
      {
	      var IntId = iAccountComp.GetFieldValue (""Integration Id"");
	      var iAddrComp = iAccountComp.GetIntComp (""Account_Business Address"");
	      var AddressFlag = ""N"";
	      if (iAddrComp.Exists ())
	      {
	      	while (iAddrComp.NextRecord())
	      	{
	      		if (iAddrComp.GetFieldValue (""IsPrimaryMVG"") == ""Y"")
	      		{
	      			AddressFlag = ""Y"";
	      		}
	      	}
	      }
	      
	      if (AddressFlag == ""N"")
	      {
	      	EAIRaiseError(LocalizeMessage(""ERR_MSG_INVALID_ADDRESS,"" + """"));
	      }
       /*
        * Write ""Import Parameters"" component
        */
         iBAPIImportComp.NewRecord ();
         iBAPIImportComp.SetFieldValue (""CUSTOMERNO"", IntId);
         /*
         *  Loop over sales orgs, call BAPI for each until one suceeds
         */
		var iSalesAreaAccountComp = iAccountComp.GetIntComp (""SAP 4x Account Sales Area"");
			
		while (iSalesAreaAccountComp.NextRecord() )
		{
			/* Copy sales org info	*/

			iBAPIImportComp.SetCopySource ( iSalesAreaAccountComp );
			iBAPIImportComp.CopyFieldValue( ""SALES_ORGANIZATION"", ""Back Office Sales Organization"");
			iBAPIImportComp.CopyFieldValue( ""DISTRIBUTION_CHANNEL"", ""Back Office Distribution Channel"");
			iBAPIImportComp.CopyFieldValue( ""DIVISION"", ""Back Office Sales Area Division Code"");
     
            // call BAPI
            bapiAdapter.InvokeMethod (""Execute"", inputBAPI, outputBAPI);
            
            // test output
           oBAPIExportComp = ((outputBAPI.GetChild(0)).GetChild(0)).GetChild(0);

           errorType = oBAPIExportComp.GetProperty (""RETURN-TYPE"");
               
           if (errorType != ""E"")
           {
              customerExists = true;
              
              break;
           }
           outputBAPI.Reset();
         
        } // endloop iSalesAreaAccountComp.NextRecord()
        
      } // endif iAccountComp.NextRecord()
   } // endif iAccountObj.NextInstance()
   
   oAccountObj = outputMsg.CreateIntObj (""Account - Send or Receive SAP 47 Customer (Siebel 77)"");
   oAccountObj.NewInstance ();
   oAccountComp = oAccountObj.CreatePrimaryIntComp (""Account"");
   oAccountComp.NewRecord ();
   // Set ""Id"" so Siebel Adapter can synchronize
   oAccountComp.SetFieldValue (""Id"", inputId);
   
   if (customerExists)
   {
      outputMsg.SetArgument(""Customer Exists"", ""True"");
      oAccountComp.SetFieldValue (""EAI Sync Error Text"",  """");
   }
   else
   {    
      var output = LocalizeMessage(""ERR_MSG_CUSTOMER_DOES_NOT_EXIST_IN_SAP1"")+"" ""+  	 
      LocalizeMessage(""ERR_MSG_CUSTOMER_DOES_NOT_EXIST_IN_SAP2"")+"" ""+
      LocalizeMessage(""ERR_MSG_CUSTOMER_DOES_NOT_EXIST_IN_SAP3"")+"" ""+
      LocalizeMessage(""ERR_MSG_CUSTOMER_DOES_NOT_EXIST_IN_SAP4"");
      outputMsg.SetArgument(""Customer Exists"", ""False"");
      oAccountComp.SetFieldValue (""EAI Sync Error Text"", output);
   }
   
 } // end function"
function GetAccountName (Int_ID)
{// referenced by script ReceiveAccount_47IDOCToSiebel
	var AccBusObject = TheApplication().GetBusObject(""Account"");
	var AccBusComp = AccBusObject.GetBusComp(""Account"");
		
	AccBusComp.ClearToQuery();
    AccBusComp.SetSearchSpec(""Integration Id"", Int_ID);
	AccBusComp.ActivateField(""Name"");
	AccBusComp.ExecuteQuery();
		
	if(AccBusComp.FirstRecord())
	{
	   return AccBusComp.GetFieldValue(""Name"");
	}
      	else
           return null;
}
function GetAccountStatus (oIntId)
{ // referenced by script ReceiveAccount_47IDOCToSiebel
	var AccBusObject = TheApplication().GetBusObject(""Account"");
	var AccBusComp = AccBusObject.GetBusComp(""Account"");
		
	AccBusComp.ClearToQuery();
    AccBusComp.SetSearchSpec(""Integration Id"", oIntId);
	AccBusComp.ActivateField(""Account Status"");
	AccBusComp.ExecuteQuery();
		
	if(AccBusComp.FirstRecord())
	{
	   return AccBusComp.GetFieldValue(""Account Status"");
	}
      	else
           return null;
}
function GetSalesArea (SalesOrg, DistChannel, DivCode)
{ // referenced by script ReceiveAccount_47IDOCToSiebel
	var OrgBusObject = TheApplication().GetBusObject(""Organizations"");
	var SABusComp = OrgBusObject.GetBusComp(""Organization"");
	
	SABusComp.SetViewMode(3);  // All Mode
		
	SABusComp.ClearToQuery();
    SABusComp.SetSearchSpec(""Back Office Sales Organization"", SalesOrg);
    SABusComp.SetSearchSpec(""Back Office Distribution Channel"", DistChannel);
    SABusComp.SetSearchSpec(""Back Office Division"", DivCode);

//	SABusComp.ActivateField(""Organization Id"");
	SABusComp.ActivateField(""Party Id"");
	
	SABusComp.ExecuteQuery();
	
	if(SABusComp.FirstRecord())
	{
//	   return SABusComp.GetFieldValue(""Organization Id"");
	   return SABusComp.GetFieldValue(""Party Id"");
	}
      else
         return null;
}
function LocalizeMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created by Richard Exley - November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ERR_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ERR_MSG"";
	var LOVType = ""CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function ReceiveAccount_47IDOCToSiebel (inputMsg, outputMsg)
{ // referenced by workflow Account - Receive SAP 47 Customer
	/* Input Objects' Integration Components	
	*   Account - Send or Receive SAP 47 Customer (DEBMAS05)			
	*     E2KNA1M005, E2KNVKM, E2DNVVM006, E2KNKKM001, E2KNVPM002
	* Output Object's Integration Components:
	*  Account - Send or Receive SAP 47 Customer (Siebel 77)
	*   Account
	*   Contact
	*   Business Address
	*/

	/* Set up EAI Lookup maps */
	var currencyLM = EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"");
	var languageLM = EAIGetValueMap (""SAP Language 4x"", ""Siebel Inbound"");
	var countryLM  = EAIGetValueMap (""SAP Country"", ""Siebel Inbound"");
	var defaultOrgLM = EAIGetValueMap (""Default Org"", ""Siebel Inbound"");
	var undefinedOrgLM = EAIGetValueMap (""Undefined SAP Org"", ""Siebel Inbound"");
	var acctGroupLM = EAIGetValueMap (""SAP Customer Acct Group Code"", ""Siebel Inbound"");
	var regCodeLM  = EAIGetValueMap (""Back Office Region"", ""Siebel Inbound"");

	/* Set up EAI Input Message objects */
	var iIDOCObj;   // IDOC instance
	var iIDOCComp;  // top level IDOC segment
	var iKNA1MComp; // IDOC Customer Header
	var iComp;      // for reading child components

	/* Set up EAI Output Message objects */
	var oAccountObj;    // Siebel Account instance
	var oAccountComp;   // Account
	var oAddrComp;      // Address
	var oContactComp;   // Contact

	var oCustAcctGrp;	// Customer Account Group
	var oIntId;			// SAP Customer Number
	var oAcctSts;		// Account Status
	var regCode;        // SAP Country + Region Code	(12-90S337)
	var sapCode;        // SAP Region Code				(12-90S337)
	var osiebReg;       // Siebel Region 				(12-90S337)
	
	var AcctIntId       // Account Integration Id for Contact (12-C34KYN)
	
	/* Find and create top-level integration object */
	iIDOCObj = inputMsg.GetIntObj (""Account - Send or Receive SAP 47 Customer (DEBMAS05)"");
	oAccountObj = outputMsg.CreateIntObj (""Account - Send or Receive SAP 47 Customer (Siebel 77)"");

	/* Misc set up */
//	var generateMasterRecord = 1;   // Set to '0' to generate sub-organization records only

	/* Read int object instances from EAI message */
	enumObj: while (iIDOCObj.NextInstance ())
	{
		/* Read virtual root component that IDOC RFC Adapter populates */
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		if( !iIDOCComp.NextRecord() ) continue enumObj;   // TODO: Root component is missing - log an error???

		/* Read ""KNA1M"" component */
		iKNA1MComp = iIDOCComp.GetIntComp (""E2KNA1M005"");
		if( !iKNA1MComp.NextRecord() ) continue enumObj;

		/* Create ""Account"" object */
		oAccountObj.NewInstance ();

		/* Create ""Account"" component in output message */
		oAccountComp = oAccountObj.CreatePrimaryIntComp (""Account"");
		oAccountComp.NewRecord ();	
		oAccountComp.SetCopySource (iKNA1MComp);
		
		/* Set Integration Id and Name */
		oIntId = iKNA1MComp.GetFieldValue (""KUNNR"");
		var Name = iKNA1MComp.GetFieldValue (""NAME1"");
		
		oAccountComp.CopyFieldValue (""Integration Id"", ""KUNNR"");
		oAccountComp.CopyFieldValue (""Name"",           ""NAME1"");
		
		AcctIntId = oIntId ;  // Account Integration Id for Contact (12-C34KYN)
		
		oCustAcctGrp = acctGroupLM.Translate (iKNA1MComp.GetFieldValue (""KTOKD""));
		var AcctGrp = TheApplication().InvokeMethod (""LookupValue"", ""ACCOUNT_GROUP_TYPE"", oCustAcctGrp);
		oAccountComp.SetFieldValue (""Customer Account Group"", AcctGrp);

		/* Set location to ""<City> KUNNR1"" If <City> is null, put ""No City"" */
		var location = iKNA1MComp.GetFieldValue (""ORT01"");
		if (location == null) location = ""No City"";
		location += "" "" + iKNA1MComp.GetFieldValue (""KUNNR"");
		oAccountComp.SetFieldValue (""Location"",   location);

		/* Check if customer is Marked for Deletion */
		if (iKNA1MComp.GetFieldValue (""LOEVM"") == ""X"") 
		{
			oAccountComp.SetFieldValue (""Account Status"", ""Marked For Deletion"");
		}
		else
		{
			oAcctSts = GetAccountStatus (oIntId);
			if (oAcctSts == ""Marked For Deletion"")
				oAccountComp.SetFieldValue (""Account Status"", ""Active"");
			else
				oAccountComp.SetFieldValue (""Account Status"", oAcctSts);
		}

		/* Set telephone numbers */
		oAccountComp.CopyFieldValue (""Main Phone Number"", ""TELF1"");
		oAccountComp.CopyFieldValue (""Main Fax Number"",   ""TELFX"");

		/* Set other fields ; Defaults from buscomp:*/
		oAccountComp.CopyFieldValue (""Row Status"", ""Y"");

		/* Set fields for SAP 4x */
		oAccountComp.CopyFieldValue (""Primary Industry Id"", ""BRSCH"");

		// Tax Exempt Number (not created in bus comp for VAT_REGN_NUM yet)
		// oAccountComp.CopyFieldValue ("""", ""STCEG"");
		
		oAccountComp.SetFieldValue (""Language Code"",languageLM.Translate (iKNA1MComp.GetFieldValue (""SPRAS_ISO"")));

		/* Set Parent Account Id - P Lim. 3/15/00. In our system, the component has trailing 002 */
		// iComp = iKNA1MComp.GetIntComp (""E2KNB1M005"");
		// findKNRZE: while (iComp.NextRecord ())
		// {
			//oAccountComp.SetFieldValue (""Parent Account Integration Id"", iComp.GetFieldValue (""KNRZE""));
			/* only get first row */
			//break findKNRZE;
		// }
			
		var timenow = Timestamp();
		var SyncStat = TheApplication().InvokeMethod (""LookupValue"", ""EAI_ACCOUNT_SYNC_STATUS"", ""Sync from Back Office"");
	   	oAccountComp.SetFieldValue (""EAI Sync Status Code"",  SyncStat);
		oAccountComp.SetFieldValue (""EAI Sync Date"",timenow);
			
		// Set operation to ""    "" since we are using the ""Execute"" method.
		oAccountComp.SetFieldValue (""operation"", ""sync"");
		
		/* Write ""Address"" component */
		oAddrComp = oAccountComp.CreateIntComp (""Account_Business Address"", false);
		oAddrComp.NewRecord ();
		oAddrComp.SetCopySource (iKNA1MComp);
		oAddrComp.CopyFieldValue (""Integration Id"", ""KUNNR"");

		// Set Street address
		var stras = iKNA1MComp.GetFieldValue (""STRAS""); // Street address
		var pfach = iKNA1MComp.GetFieldValue (""PFACH""); // PO Box
		var street;

		if (stras == """" && pfach == """") 	street = ""None"";
		else if (stras != """" && pfach == """")street = stras;
		else if (stras != """" && pfach != """")street = stras + "" P.O. Box "" + pfach;
		else if (stras == """" && pfach != """")street = ""P.O. Box "" + pfach;

		oAddrComp.SetFieldValue  (""Street Address"", street);
		oAddrComp.CopyFieldValue (""City"",    ""ORT01"", ""None"", ""None"");
		oAddrComp.SetFieldValue  (""Country"", countryLM.Translate (iKNA1MComp.GetFieldValue (""LAND1"")));
		var x = 0; x += 1; //temporarily fix until operation synchronize works
		var AddrName = street + x + ', ' + iKNA1MComp.GetFieldValue (""ORT01"") + ', ' + iKNA1MComp.GetFieldValue (""REGIO"") ;
		oAddrComp.SetFieldValue (""Address Name"", AddrName); 

// nbc 11/10/01. CR#12-90S337 - The EAI value maps for State / Region is missing
		sapCode  = iKNA1MComp.GetFieldValue (""REGIO"");	//12-90S337
		regCode  = iKNA1MComp.GetFieldValue (""LAND1"");	//12-90S337
		regCode  = regCode + ""_"" + sapCode;				//12-90S337
		osiebReg = regCodeLM.Translate (regCode);		//12-90S337
		var sRegion = TheApplication().InvokeMethod (""LookupValue"", ""STATE_ABBREV"", osiebReg);	//12-90S337
		oAddrComp.SetFieldValue (""State"",    sRegion);	//12-90S337
				
		oAddrComp.CopyFieldValue (""Postal Code"", ""PSTLZ"");
		oAddrComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
		oAddrComp.SetFieldValue (""operation"", ""sync"");

		/* Read ""KNVKM"" component */
		iComp   = iKNA1MComp.GetIntComp (""E2KNVKM"");
		oContactComp = oAccountComp.CreateIntComp (""Contact"", false);
		while (iComp.NextRecord ())
		{
			/* Write ""Contact"" component */
			oContactComp.NewRecord ();
			oContactComp.SetCopySource  (iComp);
			oContactComp.CopyFieldValue (""Integration Id"", ""PARNR"");
			oContactComp.CopyFieldValue (""Employee Number"", ""PARNR"");
			
			// Set First Name
			oContactComp.CopyFieldValue (""First Name"", ""NAMEV"", ""No First Name"", ""No First Name"");
			// Set Last name
			oContactComp.CopyFieldValue (""Last Name"", ""NAME1"");

			// Set job title
			oContactComp.CopyFieldValue (""Job Title"",    ""TITEL_AP"");
			oContactComp.CopyFieldValue (""M/M"",          ""ANRED"");
			oContactComp.CopyFieldValue (""Work Phone #"", ""TELF1"");
			
			// Account Integration Id for Contact (12-C34KYN)
			oContactComp.SetFieldValue ( ""Account Integration Id"", AcctIntId );
			
			// flags
			oContactComp.CopyFieldValue (""Personal Contact"",      ""N"");
			oContactComp.CopyFieldValue (""Suppress All Mailings"", ""Y"");
			oContactComp.CopyFieldValue (""Row Status"", ""Y"");

			oContactComp.SetFieldValue (""operation"", ""sync"");
		} // while (iComp.NextRecord ())

		/* Process the Sales Area Accounts */

		var e2knvvm = iKNA1MComp.GetIntComp (""E2KNVVM006"");
		var oSalesAreaAccountComp = oAccountComp.CreateIntComp (""SAP 4x Account Sales Area"", false);
		
		enumOrg: while( e2knvvm.NextRecord() )
		{
			/* Create ""Sales Area Account"" component in output message	*/
			oSalesAreaAccountComp.NewRecord ();

			oSalesAreaAccountComp.SetCopySource (e2knvvm);

			var SalesOrg = e2knvvm.GetFieldValue(""VKORG"");
			var DistChannel= e2knvvm.GetFieldValue(""VTWEG"");
			var DivCode = e2knvvm.GetFieldValue(""SPART"");

			var OrgID = GetSalesArea(SalesOrg, DistChannel, DivCode);

			if (OrgID != null) 	
			   oSalesAreaAccountComp.SetFieldValue(""Organization Id"", OrgID);
			else
			   EAIRaiseError(LocalizeMessage(""ERR_MSG_SALES_AREA_NOT_FOUND,""+SalesOrg+"",""+DistChannel+"",""+DivCode+""""));
		   
		   	oSalesAreaAccountComp.SetFieldValue(""Integration Id"", oIntId);
		   	oSalesAreaAccountComp.SetFieldValue(""Organization Loc"", location);
		   	oSalesAreaAccountComp.SetFieldValue(""Organization Name"", Name);
//		   	oSalesAreaAccountComp.SetFieldValue(""Organization Partner Flag"", ""N"");

			/* Check if sales area is marked as deleted */
			if ((e2knvvm.GetFieldValue (""LOEVM"") == ""X"") || (iKNA1MComp.GetFieldValue (""LOEVM"") == ""X""))
			{
				oSalesAreaAccountComp.SetFieldValue (""Account Status"", ""Marked For Deletion"");
//				continue enumOrg;
			}
			else
			{
				oSalesAreaAccountComp.SetFieldValue (""Account Status"", """");
			}
				
			/* Set language code */
			oSalesAreaAccountComp.SetFieldValue (""Language Code"", languageLM.Translate (iKNA1MComp.GetFieldValue (""SPRAS_ISO"")));

			oSalesAreaAccountComp.CopyFieldValue (""Freight Terms"", ""INCO1"");
			oSalesAreaAccountComp.CopyFieldValue (""Freight Terms Info"", ""INCO2"");
			oSalesAreaAccountComp.SetFieldValue (""Type"", TheApplication().InvokeMethod (""LookupValue"", ""ACCOUNT_TYPE"", e2knvvm.GetFieldValue(""KDGRP"")));
				
			oSalesAreaAccountComp.CopyFieldValue (""Primary Fulfillment InvLoc ID"", ""VWERK"");
			oSalesAreaAccountComp.CopyFieldValue (""Payment Terms"", ""ZTERM"");
			oSalesAreaAccountComp.CopyFieldValue (""Price List Type"", ""PLTYP"");
			oSalesAreaAccountComp.SetFieldValue (""Shipping Conditions"", TheApplication().InvokeMethod (""LookupValue"", ""SHIPPING_CONDITION"", e2knvvm.GetFieldValue(""VSBED"")));
			// oSalesAreaAccountComp.CopyFieldValue (""Pricing Group Code"", ""KONDA"");

			/* Set currency code */
			oSalesAreaAccountComp.SetFieldValue (""Currency Code"", currencyLM.Translate (e2knvvm.GetFieldValue (""WAERS"")));

			/* Block Credit Flag */
			var e2knkkm = iKNA1MComp.GetIntComp(""E2KNKKM001"");
			var oCrdtCtlAreaComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Credit Control Area"", false);
			while (e2knkkm.NextRecord () )
			{
				oCrdtCtlAreaComp.NewRecord ();
				oCrdtCtlAreaComp.SetCopySource (e2knkkm);
				oCrdtCtlAreaComp.CopyFieldValue (""Credit Control Area Code"", ""KKBER"");
				if (e2knkkm.GetFieldValue(""CRBLB"") == ""X"") 
					oCrdtCtlAreaComp.SetFieldValue (""Block Credit Flag"", ""Y"");
				else
					oCrdtCtlAreaComp.SetFieldValue (""Block Credit Flag"", ""N"");
				
				oCrdtCtlAreaComp.SetFieldValue (""operation"", ""upsert"");
			}

			/* Primary Partner Relationships of Sales Area Accounts  */
			var e2knvpm = e2knvvm.GetIntComp (""E2KNVPM002"");
			var oShipToPartnerComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Account Partner Function (Ship To)"", false);	
			var oPayerPartnerComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Account Partner Function (Payer)"", false);
			var oBillToPartnerComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Account Partner Function (Bill To)"", false);
			var oSoldToPartnerComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Account Partner Function (Sold To)"", false);

			var FirstShipTo, FirstPayer, FirstBillTo;
			FirstShipTo = true;
			FirstPayer = true;
			FirstBillTo = true;
			enumPartner: while (e2knvpm.NextRecord () )
			{
				// Default Ship To Partner 
				if ( e2knvpm.GetFieldValue(""PARVW"") == ""WE"" )
				{
					oShipToPartnerComp.NewRecord ();
					oShipToPartnerComp.SetCopySource( e2knvpm );
					oShipToPartnerComp.CopyFieldValue (""Integration Id"", ""KUNN2"");
					var Int_ID = e2knvpm.GetFieldValue (""KUNN2"");
					if ( Int_ID == oIntId )
					{
						var AccName = iKNA1MComp.GetFieldValue (""NAME1"");
					}
					else
					{
						var AccName = GetAccountName (Int_ID);
					}	
					oShipToPartnerComp.SetFieldValue (""Ship To Partner Function"", AccName);
					if ( e2knvpm.GetFieldValue(""DEFPA"") == ""X"" ) oShipToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					if (FirstShipTo) {
						FirstShipTo = false;
						oShipToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					}
					oShipToPartnerComp.SetFieldValue (""operation"", ""sync"");
				
				}	
				// Default Payer Partner 
				if ( e2knvpm.GetFieldValue(""PARVW"") == ""RG"" )
				{
					oPayerPartnerComp.NewRecord ();
					oPayerPartnerComp.SetCopySource (e2knvpm);
					oPayerPartnerComp.CopyFieldValue (""Integration Id"", ""KUNN2"");
					var Int_ID = e2knvpm.GetFieldValue (""KUNN2"");
					if ( Int_ID == oIntId )
					{
						var AccName = iKNA1MComp.GetFieldValue (""NAME1"");
					}
					else
					{
						var AccName = GetAccountName (Int_ID);
					}	
					oPayerPartnerComp.SetFieldValue (""Payer Partner Function"", AccName);
					if ( e2knvpm.GetFieldValue(""DEFPA"") == ""X"" ) oPayerPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					if (FirstPayer) {
						FirstPayer = false;
						oPayerPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					}
					oPayerPartnerComp.SetFieldValue (""operation"", ""sync"");
					
				}
				// Default Bill To Partner 
				if ( e2knvpm.GetFieldValue(""PARVW"") == ""RE"" )
				{
					oBillToPartnerComp.NewRecord ();
					oBillToPartnerComp.SetCopySource (e2knvpm);
					oBillToPartnerComp.CopyFieldValue (""Integration Id"", ""KUNN2"");
					var Int_ID = e2knvpm.GetFieldValue (""KUNN2"");
					if ( Int_ID == oIntId )
					{
						var AccName = iKNA1MComp.GetFieldValue (""NAME1"");
					}
					else
					{
						var AccName = GetAccountName (Int_ID);
					}	
					oBillToPartnerComp.SetFieldValue (""Bill To Partner Function"", AccName);
					if ( e2knvpm.GetFieldValue(""DEFPA"") == ""X"" ) oBillToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					if (FirstBillTo) {
						FirstBillTo = false;
						oBillToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					}
					oBillToPartnerComp.SetFieldValue (""operation"", ""sync"");

				}	
				// Sold To Partner
				if ( e2knvpm.GetFieldValue(""PARVW"") == ""AG"" )
				{
					oSoldToPartnerComp.NewRecord ();
					oSoldToPartnerComp.SetCopySource (e2knvpm);
					oSoldToPartnerComp.CopyFieldValue (""Integration Id"", ""KUNN2"");
					var Int_ID = e2knvpm.GetFieldValue (""KUNN2"");
					if ( Int_ID == oIntId )
					{
						var AccName = iKNA1MComp.GetFieldValue (""NAME1"");
					}
					else
					{
						var AccName = GetAccountName (Int_ID);
					}	
					oSoldToPartnerComp.SetFieldValue (""Sold To Partner Function"", AccName);
					if ( e2knvpm.GetFieldValue(""DEFPA"") == ""X"" ) oSoldToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					oSoldToPartnerComp.SetFieldValue (""operation"", ""sync"");

				}	
			}

			/* Set Parent Account Id - P Lim. 3/15/00. In our system, the component has trailing 002 */
			// iComp = iKNA1MComp.GetIntComp (""E2KNB1M005"");
			// findKNRZE: while (iComp.NextRecord ())
			// {
				// oSalesAreaAccountComp.SetFieldValue (""Parent Account Integration Id"", iComp.GetFieldValue (""KNRZE""));
				/* only get first row */
				//break findKNRZE;
			//}
		  // Set operation to ""upsert"" since we are using the ""Execute"" method
		  oSalesAreaAccountComp.SetFieldValue (""operation"", ""sync"");
		} // ... while( e2knvvm.Ne...
	} // ... while (iIDOCObj.NextInstance ())
} // ... ReceiveSAPCustomer_IDOCToSiebel"
function RequestCustomerNumber_BAPIToSiebel (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   BAPI Export (Account - Get SAP 47 Internal Customer Number (BAPI Output))
    *     Export Parameters (output)
    * 	    CUSTOMERID
    *
    * Output Object's Integration Components:
    *   Account Object (Account - Send or Receive SAP 47 Customer (Siebel 77))
    *     Integration Id, Location, Sync status data (oAccount)
    */

   /*
    * Set up EAI Input Message objects
    */
   var iBAPIObj;   // BAPI object instance
   var iExportComp; // BAPI Export Parameters

   // Store inputId for later use
   var inputId = inputMsg.GetArgument (""Siebel Account Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oAccountObj;      // Siebel Account instance
   var oAccountComp;     // Account

   /*
    * Find and create top-level integration object
    */
   iBAPIObj = inputMsg.GetIntObj (""Account - Get SAP 47 Internal Customer Number (BAPI Output)"");
   oAccountObj = outputMsg.CreateIntObj (""Account - Send or Receive SAP 47 Customer (Siebel 77)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iBAPIObj.NextInstance ())
   {
      /*
       * Create ""Account"" object
       */
      oAccountObj.NewInstance ();

      /*
       * Create ""Account"" component in output message
       */
      oAccountComp = oAccountObj.CreatePrimaryIntComp (""Account"");
      oAccountComp.NewRecord ();
      // Set ""Id"" so Siebel Adapter can synchronize
      oAccountComp.SetFieldValue (""Id"", inputId);

      /*
       * Read ""Export Parameters"" component
       */
      iExportComp = iBAPIObj.GetPrimaryIntComp (""Export Parameters"");

      if (iExportComp.NextRecord ())
      {
      	 oAccountComp.SetCopySource  (iExportComp);
      	 oAccountComp.CopyFieldValue (""EAI Sync Error Text"", ""RETURN-MESSAGE"");
      	 var ErrorType = iExportComp.GetFieldValue (""RETURN-TYPE"");
      	 
      	 if (ErrorType != ""E"")
      	 {
      	 
 		 /*
      	  * Update ""Account"" component
      	  */
        	oAccountComp.CopyFieldValue (""Integration Id"", ""CUSTOMERID"");
        	var customerno = iExportComp.GetFieldValue (""CUSTOMERID"");
        	var timenow = Timestamp();
         	var SyncStat = TheApplication().InvokeMethod (""LookupValue"", ""EAI_ACCOUNT_SYNC_STATUS"", ""Created in Back Office"");
	     	oAccountComp.SetFieldValue (""EAI Sync Status Code"",  SyncStat);
	     	oAccountComp.SetFieldValue (""EAI Sync Date"",timenow);
	     	
    	
	     	/*
	     	 *	Get Address Info to create the location field with 
	     	 *     embedded customer number
	     	 */
			var AccBusObject = TheApplication().GetBusObject(""Account"");
		 	var AccBusComp   = AccBusObject.GetBusComp(""Account"");
		 
			 // Set View Mode to 3 (or AllView)
		 	AccBusComp.SetViewMode(3);  
		 
		 	AccBusComp.ClearToQuery();
    	 	AccBusComp.SetSearchSpec(""Id"", inputId);
			AccBusComp.ActivateField(""Location"");
			
		 	AccBusComp.ExecuteQuery();
		 	if(AccBusComp.FirstRecord())
			{
	  		 var city        = AccBusComp.GetFieldValue(""City"");
	  		 var location    = AccBusComp.GetFieldValue(""Location"");
	  		 
	  		 /*
	  		  *		Site
	  		  */
	  		 if (location == """")
	  		 {
	  		 	location = AccBusComp.GetFieldValue(""City"");
	  		 }
	  		 location += "" "" + customerno;
	  		 oAccountComp.SetFieldValue (""Location"", location );
			}
			  	 
	     	   	
	     }
      }
   } //   while (iCreateAccountObj.NextInstance ())
} //function RequestCustomerNumber_BAPIToSiebel"
function RequestCustomerNumber_SiebelToBAPI (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   Account Object (Account - Send or Receive SAP 47 Customer (Siebel 77))
    *     Account (Account)
    *       
    *
    * Output Object's Integration Components:
    *   Account - Get SAP 47 Internal Customer Number (BAPI Input)
    */

	/* Set up EAI Lookup maps */
    var acctGroupLM = EAIGetValueMap (""SAP Customer Acct Group Code"", ""Siebel Outbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iAccountObj;  // Account object instance
   var iAccountComp; // Account

   /*
    * Set up EAI Output Message objects
    */
   var oBAPIObj;    // BAPI object instance
   var oBAPIImportComp;  // BAPI Import parameters
   

   /*
    * Find and create top-level integration object
    */
   iAccountObj = inputMsg.GetIntObj (""Account - Send or Receive SAP 47 Customer (Siebel 77)"");
   oBAPIObj = outputMsg.CreateIntObj (""Account - Get SAP 47 Internal Customer Number (BAPI Input)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iAccountObj.NextInstance ())
   {
      /*
       * Create BAPI object in output message
       */
      oBAPIObj.NewInstance ();

      /*
       * Read ""Account"" component
       */
      iAccountComp = iAccountObj.GetPrimaryIntComp (""Account"");
      oBAPIImportComp = oBAPIObj.CreatePrimaryIntComp (""Import Parameters"");
      while (iAccountComp.NextRecord ())
      {
         /*
          * Return an error if Integration Id is not null
          */
         if (iAccountComp.GetFieldValue (""Integration Id"") != """")
	       {
			var IntId = iAccountComp.GetFieldValue (""Integration Id"");
			EAIRaiseError(LocalizeMessage(""ERR_MSG_ACCOUNT_EXISTS,""+IntId+""""));//nbc
	       }
	      /*
	       *	Validate Address
	       */
	       
	      var iAddrComp = iAccountComp.GetIntComp (""Account_Business Address"");
	      var AddressFlag = ""N"";
	      if (iAddrComp.Exists ())
	      {
	      	while (iAddrComp.NextRecord())
	      	{
	      		if (iAddrComp.GetFieldValue (""IsPrimaryMVG"") == ""Y"")
	      		{
	      			AddressFlag = ""Y"";
	      		}
	      	}
	      }
	      /*
	       * Return an error if no address is found
	       */
	      if (AddressFlag == ""N"")
	      {
	      	EAIRaiseError(LocalizeMessage(""ERR_MSG_INVALID_ADDRESS,"" + """"));
	      }

         /*
          * Write ""Import Parameters"" component
          */
         oBAPIImportComp.NewRecord ();
         oBAPIImportComp.SetFieldValue (""QUANTITY"", ""1"");
   	     var acctGroup = iAccountComp.GetFieldValue(""Customer Account Group"");
	     oBAPIImportComp.SetFieldValue (""ACCOUNTGROUP"", acctGroupLM.Translate(acctGroup));
   
      } //while (iAccountComp.NextRecord ())
   } //while (iAccountObj.NextInstance ())
} //function RequestCustomerNumber_SiebelToBAPI"
function SendAccount_SiebelToDEBMAS05 (inputMsg, outputMsg)
{
	/* Input Objects' Integration Components						
	 *   Account Object (Account - Send or Receive SAP 47 Customer (Siebel 77))
	 *
	 *	Output Object's Integration Components:
	 *			Customer IDOC (Account - Send or Receive SAP 47 Customer (DEBMAS05))
	 */
	
	/* Set up EAI Lookup maps */
	var currencyLM = EAIGetValueMap (""SAP Currency Code"", ""Siebel Outbound"");
	var languageLM = EAIGetValueMap (""SAP Language 4x"", ""Siebel Outbound"");
	var countryLM  = EAIGetValueMap (""SAP Country"", ""Siebel Outbound"");
	var acctGrpLM  = EAIGetValueMap (""SAP Customer Acct Group Code"", ""Siebel Outbound"");
	var regCodeLM  = EAIGetValueMap (""Back Office Region"", ""Siebel Outbound"");
	
	/* Set up EAI Input Message objects */
	var iAccountObj;    // Siebel Account instance
	var iAccountComp;   // Account
	var iAddrComp;      // Address
	var iContactComp;   // Contact

	/* Set up EAI Output Message objects */
	var oIDOCObj;   // IDOC instance
	var oIDOCComp;  // top level IDOC segment
	var oKNA1MComp; // IDOC Customer Header
	var oComp;      // for reading child components

	/* Find and create top-level integration object	*/
	iAccountObj = inputMsg.GetIntObj (""Account - Send or Receive SAP 47 Customer (Siebel 77)"");
	oIDOCObj =  outputMsg.CreateIntObj (""Account - Send or Receive SAP 47 Customer (DEBMAS05)"");

	/* Misc set up	*/
	var generateMasterRecord = 1;   // Set to '0' to generate sub-organization records only
	var custAccntGrp;
    var currencyCode;
    var ctr = 0;
    var countryCode;
    var regCode;
    var sapCode;
	
	/* Read int object instances from EAI message */
	enumObj: while (iAccountObj.NextInstance ())
	{
		/* Read root Account component */
		iAccountComp = iAccountObj.GetPrimaryIntComp (""Account"");
		if( !iAccountComp.NextRecord() ) continue enumObj;
		
		/*
         * Return an error if Integration Id is not null
         */
			if (iAccountComp.GetFieldValue (""Integration Id"") == """")
		    {
				var errMsg = iAccountComp.GetFieldValue (""EAI Sync Error Text"");
				EAIRaiseError ( errMsg );
	       	}

		/* Create ""IDOC"" object	*/
		oIDOCObj.NewInstance ();

		/* Create ""IDOC"" component in output message */
		oIDOCComp = oIDOCObj.CreatePrimaryIntComp (""Idoc Segments"");
		oIDOCComp.NewRecord ();
		oKNA1MComp = oIDOCComp.CreateIntComp (""E2KNA1M005"",false);
		oKNA1MComp.NewRecord ();	
		oKNA1MComp.SetCopySource (iAccountComp);

		/* Set Integration Id, Name	and Account Group*/
		oKNA1MComp.CopyFieldValue (""KUNNR"", ""Integration Id"");
		oKNA1MComp.CopyFieldValue (""NAME1"", ""Name"");
		oKNA1MComp.SetFieldValue (""KTOKD"", acctGrpLM.Translate (iAccountComp.GetFieldValue(""Customer Account Group"")));

		/* Set location	*/
		// oKNA1MComp.CopyFieldValue (""ORT01"", ""Location"");
	
		/* Account Status */
		// oKNA1MComp.CopyFieldValue (""AUFSD"", ""Account Status"" );
		oKNA1MComp.SetFieldValue (""LOEVM"", """");
		if (iAccountComp.GetFieldValue (""Account Status"") == ""Marked For Deletion"")
			oKNA1MComp.SetFieldValue (""LOEVM"", ""X""); 

		/* Primary Industry */
		// oKNA1MComp.CopyFieldValue (""BRSCH"", ""Primary Industry Id"");

		/* Tax Exempt Number (not created in bus comp for VAT_REGN_NUM yet) */
		// oKNA1MComp.CopyFieldValue (""STCEG"", """" );

		/* Search Term */
		oKNA1MComp.CopyFieldValue (""SORTL"", ""Name"");			

		/* Transportation Zone */
		// oKNA1MComp.SetFieldValue (""LZONE"", ""0000000001"");			

		/* Set language code */
		oKNA1MComp.SetFieldValue (""SPRAS"", languageLM.Translate (iAccountComp.GetFieldValue (""Language Code"")));
		
		/* Set main Phone/FAX numbers */
		oKNA1MComp.CopyFieldValue (""TELF1"", ""Main Phone Number"" );
		oKNA1MComp.CopyFieldValue (""TELFX"", ""Main Fax Number"" );
		
	
		/* Read ""KNVKM"" component */
		iContactComp = iAccountComp.GetIntComp (""Contact"");
		oComp = oKNA1MComp.CreateIntComp (""E2KNVKM"", false);
		while (iContactComp.NextRecord ())
		{
			/* Write ""Contact"" component */

			oComp.NewRecord ();
			oComp.SetCopySource  (iContactComp);
			// oComp.CopyFieldValue (""PARNR"", ""Integration Id"");
			// oComp.CopyFieldValue (""PARNR"", ""Employee Number"");

			/* Set First Name */
			oComp.CopyFieldValue (""NAMEV"", ""First Name"");

			/* Set Last name */
			oComp.CopyFieldValue (""NAME1"", ""Last Name"");

			/* Set job title */
			oComp.CopyFieldValue (""TITEL_AP"", ""Job Title"");
			oComp.CopyFieldValue (""ANRED"", ""M/M"");
			oComp.CopyFieldValue ( ""TELF1"", ""Work Phone #"");
		} // while (iContactComp.NextRecord ())

		/* Write ""Address"" component */
		iAddrComp = iAccountComp.GetIntComp (""Account_Business Address"");
		while (iAddrComp.NextRecord () )
		{
			oKNA1MComp.SetCopySource(iAddrComp);
			if (iAddrComp.GetFieldValue (""IsPrimaryMVG"") == ""Y"")
			{

			// Set telephone numbers
			// oKNA1MComp.CopyFieldValue (""TELF1"", ""Phone Number"" );
			// oKNA1MComp.CopyFieldValue (""TELFX"", ""Fax Number"" );

			// Set Street address
			oKNA1MComp.CopyFieldValue  (""STRAS"", ""Street Address"");
			oKNA1MComp.CopyFieldValue (""ORT01"", ""City"");
			countryCode = countryLM.Translate (iAddrComp.GetFieldValue (""Country""));
			oKNA1MComp.SetFieldValue (""LAND1"", countryLM.Translate (iAddrComp.GetFieldValue (""Country"")));
			
// nbc 11/10/01. CR#12-90S337 - The EAI value maps for State / Region is missing 
			regCode = regCodeLM.Translate (iAddrComp.GetFieldValue (""State""));	//12-90S337
			sapCode = regCode.substring(3,5);									//12-90S337
			oKNA1MComp.SetFieldValue (""REGIO"", sapCode );						//12-90S337
	
			oKNA1MComp.CopyFieldValue (""PSTLZ"", ""Postal Code"" );
			
		// Set operation to ""upsert"" since we are using the ""Execute"" method.
			oKNA1MComp.SetFieldValue (""operation"", ""upsert"");
			}
		}
		

/* Process Sales Area Account */

		var iSalesAreaAccountComp = iAccountComp.GetIntComp (""SAP 4x Account Sales Area"");
		var e2knvvm = oKNA1MComp.CreateIntComp (""E2KNVVM006"", false);
			
		enumOrg: while (iSalesAreaAccountComp.NextRecord() )
		{
			/* Create ""Account"" component in output message	*/

			e2knvvm.NewRecord ();
			e2knvvm.SetCopySource ( iSalesAreaAccountComp );


			/* Set sales organization */

			e2knvvm.CopyFieldValue( ""VKORG"", ""Back Office Sales Organization"");
			e2knvvm.CopyFieldValue( ""VTWEG"", ""Back Office Distribution Channel"");
			e2knvvm.CopyFieldValue( ""SPART"", ""Back Office Sales Area Division Code"");
			
			/* Account Status (for Sales Area Accounts) */
			// e2knvvm.CopyFieldValue (""AUFSD"", ""Account Status"");
			if (iSalesAreaAccountComp.GetFieldValue (""Account Status"") == ""Marked For Deletion"")
				e2knvvm.SetFieldValue( ""LOEVM"", ""X"");

			/* Freight Terms a.k.a Incoterms 1 */
			// e2knvvm.CopyFieldValue (""INCO1"", ""Freight Terms"");

			/* Freight Terms Info a.k.a Incoterms 2 */
			// e2knvvm.CopyFieldValue (""INCO2"", ""Freight Terms Info"");

			/* Primary Fullfilment Inventory Location Id  */
			// e2knvvm.CopyFieldValue (""VWERK"", ""Primary Fulfillment InvLoc ID"");

			/* Payment Terms */
			// e2knvvm.CopyFieldValue (""ZTERM"", ""Payment Terms"");

			/* Price List Type */
			// e2knvvm.CopyFieldValue (""PLTYP"", ""Price List Type"");

			/* Account Type / Customer Group  */
               e2knvvm.SetFieldValue( ""KDGRP"", iSalesAreaAccountComp.GetFieldValue(""Type"" ));
			
			/* Customer Stats Group */
			   e2knvvm.SetFieldValue (""VERSG"", ""/"");

			// e2knvvm.SetFieldValue (""PERFK"", ""US"");

			/* Sales District Code */
			// e2knvvm.SetFieldValue (""BZIRK"", ""CENTRE"");			

			/* Pricing Group Code */
			// e2knvvm.SetFieldValue (""KONDA"", ""02"");

			/* Pricing Procedure */
 			e2knvvm.SetFieldValue (""KALKS"", ""/"");

			/* Shipping Conditions */
			var shpCond = iSalesAreaAccountComp.GetFieldValue(""Shipping Conditions"");
			if ( shpCond == """" )
				e2knvvm.SetFieldValue (""VSBED"", ""02""); // Change Me
			else
				e2knvvm.SetFieldValue (""VSBED"", iSalesAreaAccountComp.GetFieldValue(""Shipping Conditions""));

			/* Set currency code */
			var sCurCode = iSalesAreaAccountComp.GetFieldValue (""Currency Code"");
			if ( sCurCode == """")
				currencyCode = TheApplication().CurrencyCode();
			else
				currencyCode = iSalesAreaAccountComp.GetFieldValue (""Currency Code"");
				
			e2knvvm.SetFieldValue (""WAERS"", currencyLM.Translate (currencyCode));

			/* Set Block Credit Flag */
//			var e2knkkm = oKNA1MComp.CreateIntComp(""E2KNKKM001"",false);
//			var iCrdtCtlAreaComp = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Credit Control Area"");
//			while (iCrdtCtlAreaComp.NextRecord () )
//			{
//				e2knkkm.NewRecord ();
//				e2knkkm.SetCopySource (iCrdtCtlAreaComp);
//				e2knkkm.CopyFieldValue (""KKBER"", ""Credit Control Area Code"");
//				e2knkkm.CopyFieldValue (""CRBLB"", ""Block Credit Flag"");
//				e2knkkm.SetFieldValue (""operation"", ""upsert"");
//			}

			/* Tax classification */
			// var iTaxCode = e2knvvm004.CreateIntComp (""E2KNVIM"",false);
			// iTaxCode.NewRecord ();
			// iTaxCode.SetFieldValue (""TAXKD"",""0"");
			
			/* Set Primary Partner Relationships of Sales Area Accounts */
			var acctGrp = acctGrpLM.Translate (iAccountComp.GetFieldValue(""Customer Account Group""));
			var intId   = iAccountComp.GetFieldValue (""Integration Id"");
			if ( acctGrp == ""0001"" || acctGrp == ""0002"" )
			{
			
			var e2knvpm = e2knvvm.CreateIntComp (""E2KNVPM002"",false);

			var iShipToPartnerComp = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Account Partner Function (Ship To)"");	
			var iPayerPartnerComp  = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Account Partner Function (Payer)"");
			var iBillToPartnerComp = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Account Partner Function (Bill To)"");
			var iSoldToPartnerComp = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Account Partner Function (Sold To)"");

			var i = 0;
			enumShipToPartner: while (iShipToPartnerComp.NextRecord () )
			{
				// Default Ship To Partner 
				if ( iShipToPartnerComp.GetFieldValue(""Ship To Partner Function"") )
				{
					e2knvpm.NewRecord ();
					e2knvpm.SetCopySource( iShipToPartnerComp );
					e2knvpm.CopyFieldValue (""KUNN2"", ""Integration Id"" );
   					e2knvpm.SetFieldValue (""PARVW"", ""WE"");
					e2knvpm.SetFieldValue (""operation"", ""upsert"");
					i++;
				}	
			}
			if ( i == 0 )
			{
				e2knvpm.NewRecord ();
		   		e2knvpm.SetFieldValue (""KUNN2"", intId);
				e2knvpm.SetFieldValue (""PARVW"", ""WE"");
				e2knvpm.SetFieldValue (""operation"", ""upsert"");
			}

			if ( acctGrp == ""0002"" )  goto SoldToPartner;

			i = 0;
			enumPayerPartner: while (iPayerPartnerComp.NextRecord () )
			{
				// Default Payer Partner 
				if ( iPayerPartnerComp.GetFieldValue(""Payer Partner Function"") )
				{
					e2knvpm.NewRecord ();
					e2knvpm.SetCopySource (iPayerPartnerComp);
					e2knvpm.CopyFieldValue (""KUNN2"", ""Integration Id"" );
					e2knvpm.SetFieldValue (""PARVW"", ""RG"");
					e2knvpm.SetFieldValue (""operation"", ""upsert"");
					i++;
				}	
			}
			if ( i == 0 && acctGrp == ""0001"" )
			{
				e2knvpm.NewRecord ();
	   			e2knvpm.SetFieldValue (""KUNN2"", intId);
				e2knvpm.SetFieldValue (""PARVW"", ""RG"");
				e2knvpm.SetFieldValue (""operation"", ""upsert"");
			}
	
			i = 0;
			enumBillToPartner: while (iBillToPartnerComp.NextRecord () )
			{
				// Default Bill To Partner 
				if ( iBillToPartnerComp.GetFieldValue(""Bill To Partner Function"")  )
				{
					e2knvpm.NewRecord ();
					e2knvpm.SetCopySource (iBillToPartnerComp);
					e2knvpm.CopyFieldValue (""KUNN2"", ""Integration Id"" );
					e2knvpm.SetFieldValue (""PARVW"", ""RE"");
					e2knvpm.SetFieldValue (""operation"", ""upsert"");
					i++;
				}	
			}
			if ( i == 0 && acctGrp == ""0001"" )
			{
				e2knvpm.NewRecord ();
	   			e2knvpm.SetFieldValue (""KUNN2"", intId);
				e2knvpm.SetFieldValue (""PARVW"", ""RE"");
				e2knvpm.SetFieldValue (""operation"", ""upsert"");
			}

			SoldToPartner:
			i = 0;
			enumSoldToPartner: while (iSoldToPartnerComp.NextRecord () )
			{
				// Default Sold To Partner 
				if ( iSoldToPartnerComp.GetFieldValue(""Sold To Partner Function"")  )
				{
					if (( iSoldToPartnerComp.GetFieldValue(""Integration Id"") != intId )) 
					{	
						e2knvpm.NewRecord ();
						e2knvpm.SetCopySource (iSoldToPartnerComp);
						e2knvpm.CopyFieldValue (""KUNN2"", ""Integration Id"" );
						e2knvpm.SetFieldValue (""PARVW"", ""AG"");
						e2knvpm.SetFieldValue (""operation"", ""upsert"");
						i++;
					}
				}	
			}
			if ( i == 0 && acctGrp == ""0001"" )
			{
				e2knvpm.NewRecord ();
	   			e2knvpm.SetFieldValue (""KUNN2"", intId);
				e2knvpm.SetFieldValue (""PARVW"", ""AG"");
				e2knvpm.SetFieldValue (""operation"", ""upsert"");
			}

			/* Set operation to ""upsert"" since we are using the ""Execute"" method. */
			e2knvvm.SetFieldValue (""operation"", ""upsert"");
			}

		} // enumOrg: while( iSalesAreaAccountComp.NextRecord() )
		/* Set Company Code & Parent Account Id	*/
		// var oCoCodeComp = oKNA1MComp.CreateIntComp (""E2KNB1M005"",false);
		// oCoCodeComp.NewRecord ();
		// oCoCodeComp.SetCopySource(iAccountComp);
		// oCoCodeComp.CopyFieldValue (""KNRZE"", ""Parent Account Integration Id"");
		// oCoCodeComp.SetFieldValue (""BUKRS"", ""0010"");
		// oCoCodeComp.SetFieldValue (""AKONT"", ""121000"");

	} // ... while (iAccountObj.NextInstance ())
} // ... ReceiveSAPCustomer_IDOCToSiebel"
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{
}
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
	return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"
function Timestamp()
{
	var d = Date.fromSystem(Clib.time());

	// Return date in the format MM/DD/YYYY HH:MM:SS
	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
	  d.getHours(), d.getMinutes(), d.getSeconds());
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 4 $
//      $Date: 12/10/99 10:29a $
//    $Author: Achaudhr $ of last update
//
// CREATOR:    R.Lankinen
//
// DESCRIPTION
//    Multi-organization Javascript maps from Siebel Account to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
"
function GetSAPOrderList_BAPIToSiebel (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   BAPI Export (Account - Get SAP 47 Order List (BAPI Output))
    *     Export Parameters (output)
    *       Order Header (header)
    *         Order Item (item)
    *
    * Output Object's Integration Components:
    *   Account Object (Account - Get SAP 47 Order List (MO))
    *     Account (oAccount)
    *       Get List for Account Output
    *       Get List for Account Header
    *         Get List for Account Item
    */

   /*
    * Set up EAI Lookup objects
    */

   /*
    * Set up EAI Input Message objects
    */
   var iGLOrderObj;   // BAPI Order instance
   var iGLExportComp; // BAPI Export Parameters
   var iGLHeaderComp; // BAPI Order Header
   var iGLItemComp;   // BAPI Order Item

   // Store inputId (ROW_ID) to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Account Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oAccountObj;   // Siebel Order instance
   var oAccountComp;  // Account
   var oGLOutputComp; // Get List Output
   var oGLHeaderComp; // Get List Header
   var oGLItemComp;   // Get List Item

   var theApp = TheApplication();

   /*
    * Find and create top-level integration object
    */
   iGLOrderObj = inputMsg.GetIntObj (""Account - Get SAP 47 Order List (BAPI Output)"");
   oAccountObj = outputMsg.CreateIntObj (""Account - Get SAP 47 Order List (MO)"");

   /*
    * Read int object instances from EAI message
    */
   while (iGLOrderObj.NextInstance ())
   {
      /*
       * Create ""Account"" object in output message
       */
      oAccountObj.NewInstance ();

      /*
       * Create ""Account"" component
       */
      oAccountComp = oAccountObj.CreatePrimaryIntComp (""Account"");
      oAccountComp.NewRecord ();
      // Set ""Id"" so Siebel Adapter can synchronize
      oAccountComp.SetFieldValue (""Id"", inputId);
      
      // Get Primary Sales Area of the account
      var SalesOrg;
      var SalesChn;
	  var SalesDiv;
	  var AccBusObj = theApp.GetBusObject(""Account"");
	  var AccBusCmp = AccBusObj.GetBusComp(""Account"");
	  
	  // Set View Mode to 3 (or AllView)	  
	  AccBusCmp.SetViewMode(3);  
		
	  AccBusCmp.ClearToQuery();
      AccBusCmp.SetSearchSpec(""Id"", inputId);
      AccBusCmp.ActivateField(""Primary Organization Id"");
            	
	  AccBusCmp.ExecuteQuery();
	  
		
	  if(AccBusCmp.FirstRecord())
	  {
	     var PrimOrg = AccBusCmp.GetFieldValue(""Primary Organization Id"");
	     var OrgBusObj = theApp.GetBusObject(""Organizations"");
	     var OrgBusCmp = OrgBusObj.GetBusComp(""Organization"");
	     
	     
	     // Set View Mode to 3 (or AllView)		
		 OrgBusCmp.SetViewMode(3);  	
		 
	     OrgBusCmp.ClearToQuery();
         OrgBusCmp.SetSearchSpec(""Id"", PrimOrg);
         OrgBusCmp.ActivateField(""Back Office Sales Organization"");
	     OrgBusCmp.ActivateField(""Back Office Distribution Channel"");
	     OrgBusCmp.ActivateField(""Back Office Division"");
	
	     OrgBusCmp.ExecuteQuery();
		 
		 // get saleOrg, distChnl and division of the primary SA
	     if(OrgBusCmp.FirstRecord())
	     {
		    var SalesOrg = OrgBusCmp.GetFieldValue(""Back Office Sales Organization"");
		    var SalesChn = OrgBusCmp.GetFieldValue(""Back Office Distribution Channel"");
		    var SalesDiv = OrgBusCmp.GetFieldValue(""Back Office Division"");
	     }
//	     else
//	     {
//		  	EAIRaiseError(""Unable to get sales area info for the primary organization"");
//	     }
	  }
//	  else
//	  {
//	  	EAIRaiseError(""Invalid account"");
//	  }
      

      /*
       * Read ""Export Parameters"" component
       */
      iGLExportComp = iGLOrderObj.GetPrimaryIntComp (""Export Parameters"");
      
      
      oGLOutputComp = oAccountComp.CreateIntComp (""Account - Get SAP Order List Output"", oAccountComp);
      if (iGLExportComp.NextRecord ())
      {
      	
         /*
          * Write ""Get List for Account Output"" component
          */
         oGLOutputComp.NewRecord ();
         oGLOutputComp.SetCopySource  (iGLExportComp);
         oGLOutputComp.SetFieldValue  (""Input Id"",          inputId);
         oGLOutputComp.CopyFieldValue (""Return Code"",       ""RETURN-CODE"");
         oGLOutputComp.CopyFieldValue (""Return Log Msg No"", ""RETURN-LOG_MSG_NO"");
         oGLOutputComp.CopyFieldValue (""Return Log No"",     ""RETURN-LOG_NO"");
         oGLOutputComp.CopyFieldValue (""Return Message"",    ""RETURN-MESSAGE"");
         oGLOutputComp.CopyFieldValue (""Return Type"",       ""RETURN-TYPE"");

         /*
          * Read ""Order Header"" component to 
          */
         iGLHeaderComp = iGLExportComp.GetIntComp (""Order Header"");
         oGLHeaderComp = oAccountComp.CreateIntComp (""Account - Get SAP Order List Header"", oAccountComp);
         while (iGLHeaderComp.NextRecord ())
        /* 
       	 * Validate Sales area
       	 */
      	 {
      		var iSalesOrg = iGLHeaderComp.GetFieldValue(""SALES_ORG""); 
       	 	var iSalesChn = iGLHeaderComp.GetFieldValue(""DISTR_CHAN""); 
       	 	var iSalesDiv = iGLHeaderComp.GetFieldValue(""DIVISION""); 
      
	      	if ((SalesOrg == iSalesOrg) && (SalesChn == iSalesChn) && (SalesDiv == iSalesDiv))  
			{
			   oGLHeaderComp.NewRecord ();
			   oGLHeaderComp.SetCopySource  (iGLHeaderComp);
			   oGLHeaderComp.SetFieldValue  (""Input Id"",         inputId);
			   oGLHeaderComp.CopyFieldValue (""Currency"",             ""CURRENCY"");
			   oGLHeaderComp.CopyFieldValue (""Distribution Channel"", ""DISTR_CHAN"");
			   oGLHeaderComp.CopyFieldValue (""Division"",             ""DIVISION"");
			   oGLHeaderComp.CopyFieldValue (""Order Date"",           ""DOC_DATE"");
			   oGLHeaderComp.CopyFieldValue (""Order Number"",         ""SD_DOC"");
			   oGLHeaderComp.CopyFieldValue (""Order Status"",         ""DOC_STATUS"");
			   oGLHeaderComp.CopyFieldValue (""Order Type"",           ""DOC_TYPE"");
			   oGLHeaderComp.CopyFieldValue (""Purchase Order"",       ""PURCH_NO"");
			   oGLHeaderComp.CopyFieldValue (""Sales Organization"",   ""SALES_ORG"");
			   oGLHeaderComp.CopyFieldValue (""Sold To Customer"",     ""SOLD_TO"");
	
	           /*
	            * Read the ""Order Item"" component
	            */
	           // to ""Get List for Account Item"" component
			   iGLItemComp = iGLHeaderComp.GetIntComp (""Order Item"");
			   oGLItemComp = oGLHeaderComp.CreateIntComp (""Account - Get SAP Order List Item"", oGLHeaderComp);
			   while (iGLItemComp.NextRecord ())
			   {
				  oGLItemComp.NewRecord ();
				  oGLItemComp.SetCopySource  (iGLItemComp);
				  oGLItemComp.SetFieldValue  (""Input Id"",         inputId);
				  oGLItemComp.CopyFieldValue (""Item Number"",          ""ITM_NUMBER"");
				  oGLItemComp.CopyFieldValue (""Material Part Number"", ""MATERIAL"");
				  oGLItemComp.CopyFieldValue (""Material Short Text"",  ""SHORT_TEXT"");
				  oGLItemComp.CopyFieldValue (""Net Price"",            ""NET_PRICE"");
				  oGLItemComp.CopyFieldValue (""Net Value"",            ""NET_VALUE"");
				  oGLItemComp.CopyFieldValue (""Sales Unit"",           ""SALES_UNIT"");
			   }
            }
         }
      }
   }
}
function GetSAPOrderList_SiebelToBAPI (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   Account Object (Account - Get SAP 47 Order List (MO))
    *     Account (iAccount)
	 *       Get List for Account Header
    *
    * Output Object's Integration Components:
    *   BAPI Import (Account - Get SAP 47 Order List (BAPI Input))
    *     Import Parameters (output)
    */

   /*
    * Set up EAI Lookup objects
    */

   /*
    * Set up EAI Input Message objects
    */
   var theApp = TheApplication(); // nbc
   var iAccountObj;    // Siebel Account instance
   var iAccountComp;   // Account
	var iHeaderComp;    // Account Header

   /*
    * Set up EAI Output Message objects
    */
   var oGLObj;         // BAPI instance
   var oGLImportComp;  // Import Parameters

   /*
    * Find and create top-level integration object
    */

   iAccountObj = inputMsg.GetIntObj (""Account - Get SAP 47 Order List (MO)"");
   oGLObj = outputMsg.CreateIntObj (""Account - Get SAP 47 Order List (BAPI Input)"");

   /*
    * Read int object instances from EAI message
    */
   while (iAccountObj.NextInstance ())
   {
      /*
       * Create ""Get List for Account"" object
       */
      oGLObj.NewInstance ();

      /*
       * Read ""Account"" component
       */
      iAccountComp = iAccountObj.GetPrimaryIntComp (""Account"");
      oGLImportComp = oGLObj.CreatePrimaryIntComp (""Import Parameters"");
      if (iAccountComp.NextRecord ())
      {
         /*
          * Write ""Import Parameters"" component
          */
         oGLImportComp.NewRecord ();
         oGLImportComp.SetCopySource  (iAccountComp);

	     var intId = iAccountComp.GetFieldValue( ""Integration Id"" );
	     var fromDate = iAccountComp.GetFieldValue( ""Back Office Order Query Start  Dt"" ); //nbc
	     var toDate = iAccountComp.GetFieldValue( ""Back Office Order Query End  Dt"" ); //nbc

         oGLImportComp.SetFieldValue  (""CUSTOMER_NUMBER"",intId );
         oGLImportComp.SetFieldValue  (""MATERIAL"", """");
         oGLImportComp.SetFieldValue  (""TRANSACTION_GROUP"", ""0"");
         oGLImportComp.SetFieldValue  (""PURCHASE_ORDER"", """"); // ""Peter 1"";
         oGLImportComp.SetFieldValue  (""DOCUMENT_DATE"", fromDate );    // Empty string means ""00000000""
         oGLImportComp.SetFieldValue  (""DOCUMENT_DATE_TO"",  toDate ); // Empty string means ""00000000""

		 // Read the primary sales area
	     var primOrgId = iAccountComp.GetFieldValue(""Primary Organization Id"");
	     var OrgBusObj = TheApplication().GetBusObject(""Organizations"");
		 var OrgBusCmp = OrgBusObj.GetBusComp(""Organization"");
		 
		 // Set View Mode to 3 (or AllView)
		 OrgBusCmp.SetViewMode(3);  
		 
		 OrgBusCmp.ClearToQuery();
    	 OrgBusCmp.SetSearchSpec(""Id"", primOrgId);
    	 OrgBusCmp.ActivateField(""Back Office Sales Organization"");
	 
	
		 OrgBusCmp.ExecuteQuery();
		 if(OrgBusCmp.FirstRecord())
		 {
	  		 var SalesOrg = OrgBusCmp.GetFieldValue(""Back Office Sales Organization"");
	  		 // Write ""Import Parameters"" component
			 oGLImportComp.SetFieldValue( ""SALES_ORGANIZATION"", SalesOrg );
		 }
		}
   }
}
function ImportSAPOrder_GetSAPOrderListToSiebelOrder (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   Import Get List for Account (Account - Import SAP 47 Order (Get SAP Order List) (MO))
    *     Get List for Account Header
    *
    * Output Object's Integration Components:
    *   Import (Account - Import SAP 47 Order (Siebel Order) (MO))
    *     Order (oOrder)
    */

   /*
    * Set up EAI Lookup maps
    */
   var orderTypeLM = EAIGetValueMap (""SAP Order Types"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iGLOrderObj;  // Get List instance
   var iGLOrderComp; // Get List Order

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;      // Siebel Order instance
   var oOrderComp;     // Order
   var oOrderOrgComp;  // Order Organization

   /*
    * Find and create top-level integration object
    */
   iGLOrderObj = inputMsg.GetIntObj (""Account - Import SAP 47 Order (Get SAP Order List) (MO)"");
   oOrderObj = outputMsg.CreateIntObj (""Account - Import SAP 47 Order (Siebel Order) (MO)"");

   /*
    * Read int object instances from EAI message
    */
    
   
   while (iGLOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object
       */
      oOrderObj.NewInstance ();
            	
      /*
       * Read ""Get List Order"" component
       */
      iGLOrderComp = iGLOrderObj.GetPrimaryIntComp (""Get List for Account Header"");
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order"");
      
      while (iGLOrderComp.NextRecord ())
      {
         /*
          * Write ""Order"" component
          */
         oOrderComp.NewRecord ();
         oOrderComp.SetCopySource  (iGLOrderComp);
         
         var SiebOrdNo = iGLOrderComp.GetFieldValue (""Siebel Order Number"");//xx
         if (SiebOrdNo == """")												//xx
         {																	//xx
         	var OrdNumber = iGLOrderComp.GetFieldValue(""Order Number"");		//xx
         }																	//xx
         else
         {																	//xx
         	var OrdNumber = iGLOrderComp.GetFieldValue (""Siebel Order Number"");//xx
         }																	//xx
 		 
 		 oOrderComp.SetFieldValue (""Order Number"",               OrdNumber);//xx
 		             
 		 var oTypeSAP = orderTypeLM.Translate (iGLOrderComp.GetFieldValue (""Order Type""));
		 var oType    = TheApplication().InvokeMethod (""LookupValue"", ""FS_ORDER_TYPE"", oTypeSAP);
		 oOrderComp.SetFieldValue  (""Order Type"",              oType);
         oOrderComp.CopyFieldValue (""Order Date"",             ""Order Date"");
         oOrderComp.CopyFieldValue (""Account Integration Id"", ""Sold To Customer"");
         oOrderComp.CopyFieldValue (""Bill To Account Integration Id"", ""Sold To Customer"");
         oOrderComp.CopyFieldValue (""Ship To Account Integration Id"", ""Sold To Customer"");
         oOrderComp.CopyFieldValue (""Integration Id"",         ""Order Number"");
 		 oOrderOrgComp = oOrderComp.CreateIntComp(""Order Entry - Orders_Organization"");

	 	oOrderOrgComp.NewRecord();
	 	oOrderOrgComp.SetCopySource  (iGLOrderComp);
		
	 	oOrderOrgComp.SetFieldValue ( ""IsPrimaryMVG"",			""Y"");
        oOrderOrgComp.CopyFieldValue ( ""Organization Id"",		""SAP Organization Id (MO)"");
		
			
		
      }
   }
}
function LocalizeMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created by Richard Exley - November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ERR_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ERR_MSG"";
	var LOVType = ""CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
"
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var result = EAIExecuteMap (MethodName, Inputs, Outputs);

	return result;
}
"
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 4 $
//      $Date: 12/10/99 10:29a $
//    $Author: Achaudhr $ of last update
//
// CREATOR:    R.Lankinen
//
// DESCRIPTION
//    Multi-organization Javascript maps from Siebel Account to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
"
function CheckSAPCustomer_CallBAPI (inputMsg, outputMsg) { 
  /*  Referenced in workflow Account - Check SAP 46C Customer
    * Input Object:
    *  Account - Send or Receive SAP 50 Customer (Siebel 77)
    *       
    *
    * Output Object's Integration Components:
    *  Account - Send or Receive SAP 50 Customer (Siebel 77)
    *   set property ""customerExists"" to true or false in outputMsg
    *  if customer does not exist, set ""EAI Sync Error Text""
    */

   // Store inputId for later use
   var inputId = inputMsg.GetArgument (""Siebel Account Id"");

   /*
   *  temporary variables
   */
   var customerExists = false;
   var errorType;

   /*
    * Set up EAI Input Message objects
    */
   var iAccountObj;  // Account object instance
   var iAccountComp; // Account
   var oAccountObj;
   var oAccountComp;
   iAccountObj = inputMsg.GetIntObj (""Account - Send or Receive SAP 50 Customer (Siebel 77)"");
   
   
   /*
   *   Create new property sets for BAPI call to SAP and create adapter bus service
   */   
   var inputBAPI = TheApplication().NewPropertySet();
   var outputBAPI = TheApplication().NewPropertySet();
   var inputBAPIMsg = EAICreateIntMsgOut (inputBAPI);
  
   
   var iBAPIObj = inputBAPIMsg.CreateIntObj (""Account - Check SAP 47 Customer Existence (BAPI Input)"");

   inputBAPIMsg.SetArgument (""OutputIntObjectName"", ""Account - Check SAP 47 Customer Existence (BAPI Output)"");
   inputBAPIMsg.SetArgument (""SAPAutoError"",""False"");

   var bapiAdapter = TheApplication().GetService(""EAI SAP BAPI Adapter"");
   
   var oBAPIObj;
   var oBAPIExportComp;
   var iBAPIImportComp;
  
    
   /*
    * create top-level integration object
    */
   
   if (iAccountObj.NextInstance ())
   {
     /*
      * Create BAPI object in output message
      */
      iBAPIObj.NewInstance ();
      

      iAccountComp = iAccountObj.GetPrimaryIntComp (""Account"");
      iBAPIImportComp = iBAPIObj.CreatePrimaryIntComp (""Import Parameters"");
 
       if (iAccountComp.NextRecord ())
      {
	      var IntId = iAccountComp.GetFieldValue (""Integration Id"");
	      var iAddrComp = iAccountComp.GetIntComp (""Account_Business Address"");
	      var AddressFlag = ""N"";
	      if (iAddrComp.Exists ())
	      {
	      	while (iAddrComp.NextRecord())
	      	{
	      		if (iAddrComp.GetFieldValue (""IsPrimaryMVG"") == ""Y"")
	      		{
	      			AddressFlag = ""Y"";
	      		}
	      	}
	      }
	      
	      if (AddressFlag == ""N"")
	      {
	      	EAIRaiseError(LocalizeMessage(""ERR_MSG_INVALID_ADDRESS,"" + """"));
	      }
       /*
        * Write ""Import Parameters"" component
        */
         iBAPIImportComp.NewRecord ();
         iBAPIImportComp.SetFieldValue (""CUSTOMERNO"", IntId);
         /*
         *  Loop over sales orgs, call BAPI for each until one suceeds
         */
		var iSalesAreaAccountComp = iAccountComp.GetIntComp (""SAP 4x Account Sales Area"");
			
		while (iSalesAreaAccountComp.NextRecord() )
		{
			/* Copy sales org info	*/

			iBAPIImportComp.SetCopySource ( iSalesAreaAccountComp );
			iBAPIImportComp.CopyFieldValue( ""SALES_ORGANIZATION"", ""Back Office Sales Organization"");
			iBAPIImportComp.CopyFieldValue( ""DISTRIBUTION_CHANNEL"", ""Back Office Distribution Channel"");
			iBAPIImportComp.CopyFieldValue( ""DIVISION"", ""Back Office Sales Area Division Code"");
     
            // call BAPI
            bapiAdapter.InvokeMethod (""Execute"", inputBAPI, outputBAPI);
            
            // test output
           oBAPIExportComp = ((outputBAPI.GetChild(0)).GetChild(0)).GetChild(0);

           errorType = oBAPIExportComp.GetProperty (""RETURN-TYPE"");
               
           if (errorType != ""E"")
           {
              customerExists = true;
              
              break;
           }
           outputBAPI.Reset();
         
        } // endloop iSalesAreaAccountComp.NextRecord()
        
      } // endif iAccountComp.NextRecord()
   } // endif iAccountObj.NextInstance()
   
   oAccountObj = outputMsg.CreateIntObj (""Account - Send or Receive SAP 50 Customer (Siebel 77)"");
   oAccountObj.NewInstance ();
   oAccountComp = oAccountObj.CreatePrimaryIntComp (""Account"");
   oAccountComp.NewRecord ();
   // Set ""Id"" so Siebel Adapter can synchronize
   oAccountComp.SetFieldValue (""Id"", inputId);
   
   if (customerExists)
   {
      outputMsg.SetArgument(""Customer Exists"", ""True"");
      oAccountComp.SetFieldValue (""EAI Sync Error Text"",  """");
   }
   else
   {    
      var output = LocalizeMessage(""ERR_MSG_CUSTOMER_DOES_NOT_EXIST_IN_SAP1"")+"" ""+  	 
      LocalizeMessage(""ERR_MSG_CUSTOMER_DOES_NOT_EXIST_IN_SAP2"")+"" ""+
      LocalizeMessage(""ERR_MSG_CUSTOMER_DOES_NOT_EXIST_IN_SAP3"")+"" ""+
      LocalizeMessage(""ERR_MSG_CUSTOMER_DOES_NOT_EXIST_IN_SAP4"");
      outputMsg.SetArgument(""Customer Exists"", ""False"");
      oAccountComp.SetFieldValue (""EAI Sync Error Text"", output);
   }
   
 } // end function"
function GetAccountName (Int_ID)
{// referenced by script ReceiveAccount_47IDOCToSiebel
	var AccBusObject = TheApplication().GetBusObject(""Account"");
	var AccBusComp = AccBusObject.GetBusComp(""Account"");
		
	AccBusComp.ClearToQuery();
    AccBusComp.SetSearchSpec(""Integration Id"", Int_ID);
	AccBusComp.ActivateField(""Name"");
	AccBusComp.ExecuteQuery();
		
	if(AccBusComp.FirstRecord())
	{
	   return AccBusComp.GetFieldValue(""Name"");
	}
      	else
           return null;
}
function GetAccountStatus (oIntId)
{ // referenced by script ReceiveAccount_47IDOCToSiebel
	var AccBusObject = TheApplication().GetBusObject(""Account"");
	var AccBusComp = AccBusObject.GetBusComp(""Account"");
		
	AccBusComp.ClearToQuery();
    AccBusComp.SetSearchSpec(""Integration Id"", oIntId);
	AccBusComp.ActivateField(""Account Status"");
	AccBusComp.ExecuteQuery();
		
	if(AccBusComp.FirstRecord())
	{
	   return AccBusComp.GetFieldValue(""Account Status"");
	}
      	else
           return null;
}
function GetSalesArea (SalesOrg, DistChannel, DivCode)
{ // referenced by script ReceiveAccount_47IDOCToSiebel
	var OrgBusObject = TheApplication().GetBusObject(""Organizations"");
	var SABusComp = OrgBusObject.GetBusComp(""Organization"");
	
	SABusComp.SetViewMode(3);  // All Mode
		
	SABusComp.ClearToQuery();
    SABusComp.SetSearchSpec(""Back Office Sales Organization"", SalesOrg);
    SABusComp.SetSearchSpec(""Back Office Distribution Channel"", DistChannel);
    SABusComp.SetSearchSpec(""Back Office Division"", DivCode);

//	SABusComp.ActivateField(""Organization Id"");
	SABusComp.ActivateField(""Party Id"");
	
	SABusComp.ExecuteQuery();
	
	if(SABusComp.FirstRecord())
	{
//	   return SABusComp.GetFieldValue(""Organization Id"");
	   return SABusComp.GetFieldValue(""Party Id"");
	}
      else
         return null;
}
function LocalizeMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created by Richard Exley - November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ERR_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ERR_MSG"";
	var LOVType = ""CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function ReceiveAccount_47IDOCToSiebel (inputMsg, outputMsg)
{ // referenced by workflow Account - Receive SAP 50 Customer
	/* Input Objects' Integration Components	
	*   Account - Send or Receive SAP 50 Customer (DEBMAS05)			
	*     E2KNA1M005, E2KNVKM001, E2DNVVM006, E2KNKKM001, E2KNVPM002
	* Output Object's Integration Components:
	*  Account - Send or Receive SAP 50 Customer (Siebel 77)
	*   Account
	*   Contact
	*   Business Address
	*/

	/* Set up EAI Lookup maps */
	var currencyLM = EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"");
	var languageLM = EAIGetValueMap (""SAP Language 4x"", ""Siebel Inbound"");
	var countryLM  = EAIGetValueMap (""SAP Country"", ""Siebel Inbound"");
	var defaultOrgLM = EAIGetValueMap (""Default Org"", ""Siebel Inbound"");
	var undefinedOrgLM = EAIGetValueMap (""Undefined SAP Org"", ""Siebel Inbound"");
	var acctGroupLM = EAIGetValueMap (""SAP Customer Acct Group Code"", ""Siebel Inbound"");
	var regCodeLM  = EAIGetValueMap (""Back Office Region"", ""Siebel Inbound"");

	/* Set up EAI Input Message objects */
	var iIDOCObj;   // IDOC instance
	var iIDOCComp;  // top level IDOC segment
	var iKNA1MComp; // IDOC Customer Header
	var iComp;      // for reading child components

	/* Set up EAI Output Message objects */
	var oAccountObj;    // Siebel Account instance
	var oAccountComp;   // Account
	var oAddrComp;      // Address
	var oContactComp;   // Contact

	var oCustAcctGrp;	// Customer Account Group
	var oIntId;			// SAP Customer Number
	var oAcctSts;		// Account Status
	var regCode;        // SAP Country + Region Code	(12-90S337)
	var sapCode;        // SAP Region Code				(12-90S337)
	var osiebReg;       // Siebel Region 				(12-90S337)
	
	var AcctIntId       // Account Integration Id for Contact (12-C34KYN)
	
	/* Find and create top-level integration object */
	iIDOCObj = inputMsg.GetIntObj (""Account - Send or Receive SAP 50 Customer (DEBMAS05)"");
	oAccountObj = outputMsg.CreateIntObj (""Account - Send or Receive SAP 50 Customer (Siebel 77)"");

	/* Misc set up */
//	var generateMasterRecord = 1;   // Set to '0' to generate sub-organization records only

	/* Read int object instances from EAI message */
	enumObj: while (iIDOCObj.NextInstance ())
	{
		/* Read virtual root component that IDOC RFC Adapter populates */
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		if( !iIDOCComp.NextRecord() ) continue enumObj;   // TODO: Root component is missing - log an error

		/* Read ""KNA1M"" component */
		iKNA1MComp = iIDOCComp.GetIntComp (""E2KNA1M005"");
		if( !iKNA1MComp.NextRecord() ) continue enumObj;

		/* Create ""Account"" object */
		oAccountObj.NewInstance ();

		/* Create ""Account"" component in output message */
		oAccountComp = oAccountObj.CreatePrimaryIntComp (""Account"");
		oAccountComp.NewRecord ();	
		oAccountComp.SetCopySource (iKNA1MComp);
		
		/* Set Integration Id and Name */
		oIntId = iKNA1MComp.GetFieldValue (""KUNNR"");
		var Name = iKNA1MComp.GetFieldValue (""NAME1"");
		
		oAccountComp.CopyFieldValue (""Integration Id"", ""KUNNR"");
		oAccountComp.CopyFieldValue (""Name"",           ""NAME1"");
		
		AcctIntId = oIntId ;  // Account Integration Id for Contact (12-C34KYN)
		
		oCustAcctGrp = acctGroupLM.Translate (iKNA1MComp.GetFieldValue (""KTOKD""));
		var AcctGrp = TheApplication().InvokeMethod (""LookupValue"", ""ACCOUNT_GROUP_TYPE"", oCustAcctGrp);
		oAccountComp.SetFieldValue (""Customer Account Group"", AcctGrp);

		/* Set location to ""<City> KUNNR1"" If <City> is null, put ""No City"" */
		var location = iKNA1MComp.GetFieldValue (""ORT01"");
		if (location == null) location = ""No City"";
		location += "" "" + iKNA1MComp.GetFieldValue (""KUNNR"");
		oAccountComp.SetFieldValue (""Location"",   location);

		/* Check if customer is Marked for Deletion */
		if (iKNA1MComp.GetFieldValue (""LOEVM"") == ""X"") 
		{
			oAccountComp.SetFieldValue (""Account Status"", ""Marked For Deletion"");
		}
		else
		{
			oAcctSts = GetAccountStatus (oIntId);
			if (oAcctSts == ""Marked For Deletion"")
				oAccountComp.SetFieldValue (""Account Status"", ""Active"");
			else
				oAccountComp.SetFieldValue (""Account Status"", oAcctSts);
		}

		/* Set telephone numbers */
		oAccountComp.CopyFieldValue (""Main Phone Number"", ""TELF1"");
		oAccountComp.CopyFieldValue (""Main Fax Number"",   ""TELFX"");

		/* Set other fields ; Defaults from buscomp:*/
		oAccountComp.CopyFieldValue (""Row Status"", ""Y"");

		/* Set fields for SAP 4x */
		oAccountComp.CopyFieldValue (""Primary Industry Id"", ""BRSCH"");

		// Tax Exempt Number (not created in bus comp for VAT_REGN_NUM yet)
		// oAccountComp.CopyFieldValue ("""", ""STCEG"");
		
		oAccountComp.SetFieldValue (""Language Code"",languageLM.Translate (iKNA1MComp.GetFieldValue (""SPRAS_ISO"")));

		/* Set Parent Account Id - P Lim. 3/15/00. In our system, the component has trailing 002 */
		// iComp = iKNA1MComp.GetIntComp (""E2KNB1M005"");
		// findKNRZE: while (iComp.NextRecord ())
		// {
			//oAccountComp.SetFieldValue (""Parent Account Integration Id"", iComp.GetFieldValue (""KNRZE""));
			/* only get first row */
			//break findKNRZE;
		// }
			
		var timenow = Timestamp();
		var SyncStat = TheApplication().InvokeMethod (""LookupValue"", ""EAI_ACCOUNT_SYNC_STATUS"", ""Sync from Back Office"");
	   	oAccountComp.SetFieldValue (""EAI Sync Status Code"",  SyncStat);
		oAccountComp.SetFieldValue (""EAI Sync Date"",timenow);
			
		// Set operation to ""    "" since we are using the ""Execute"" method.
		oAccountComp.SetFieldValue (""operation"", ""sync"");
		
		/* Write ""Address"" component */
		oAddrComp = oAccountComp.CreateIntComp (""Account_Business Address"", false);
		oAddrComp.NewRecord ();
		oAddrComp.SetCopySource (iKNA1MComp);
		oAddrComp.CopyFieldValue (""Integration Id"", ""KUNNR"");

		// Set Street address
		var stras = iKNA1MComp.GetFieldValue (""STRAS""); // Street address
		var pfach = iKNA1MComp.GetFieldValue (""PFACH""); // PO Box
		var street;

		if (stras == """" && pfach == """") 	street = ""None"";
		else if (stras != """" && pfach == """")street = stras;
		else if (stras != """" && pfach != """")street = stras + "" P.O. Box "" + pfach;
		else if (stras == """" && pfach != """")street = ""P.O. Box "" + pfach;

		oAddrComp.SetFieldValue  (""Street Address"", street);
		oAddrComp.CopyFieldValue (""City"",    ""ORT01"", ""None"", ""None"");
		oAddrComp.SetFieldValue  (""Country"", countryLM.Translate (iKNA1MComp.GetFieldValue (""LAND1"")));
		var x = 0; x += 1; //temporarily fix until operation synchronize works
		var AddrName = street + x + ', ' + iKNA1MComp.GetFieldValue (""ORT01"") + ', ' + iKNA1MComp.GetFieldValue (""REGIO"") ;
		oAddrComp.SetFieldValue (""Address Name"", AddrName); 

// nbc 11/10/01. CR#12-90S337 - The EAI value maps for State / Region is missing
		sapCode  = iKNA1MComp.GetFieldValue (""REGIO"");	//12-90S337
		regCode  = iKNA1MComp.GetFieldValue (""LAND1"");	//12-90S337
		regCode  = regCode + ""_"" + sapCode;				//12-90S337
		osiebReg = regCodeLM.Translate (regCode);		//12-90S337
		var sRegion = TheApplication().InvokeMethod (""LookupValue"", ""STATE_ABBREV"", osiebReg);	//12-90S337
		oAddrComp.SetFieldValue (""State"",    sRegion);	//12-90S337
				
		oAddrComp.CopyFieldValue (""Postal Code"", ""PSTLZ"");
		oAddrComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
		oAddrComp.SetFieldValue (""operation"", ""sync"");

		/* Read ""KNVKM"" component */
		iComp   = iKNA1MComp.GetIntComp (""E2KNVKM001"");
		oContactComp = oAccountComp.CreateIntComp (""Contact"", false);
		while (iComp.NextRecord ())
		{
			/* Write ""Contact"" component */
			oContactComp.NewRecord ();
			oContactComp.SetCopySource  (iComp);
			oContactComp.CopyFieldValue (""Integration Id"", ""PARNR"");
			oContactComp.CopyFieldValue (""Employee Number"", ""PARNR"");
			
			// Set First Name
			oContactComp.CopyFieldValue (""First Name"", ""NAMEV"", ""No First Name"", ""No First Name"");
			// Set Last name
			oContactComp.CopyFieldValue (""Last Name"", ""NAME1"");

			// Set job title
			oContactComp.CopyFieldValue (""Job Title"",    ""TITEL_AP"");
			oContactComp.CopyFieldValue (""M/M"",          ""ANRED"");
			oContactComp.CopyFieldValue (""Work Phone #"", ""TELF1"");
			
			// Account Integration Id for Contact (12-C34KYN)
			oContactComp.SetFieldValue ( ""Account Integration Id"", AcctIntId );
			
			// flags
			oContactComp.CopyFieldValue (""Personal Contact"",      ""N"");
			oContactComp.CopyFieldValue (""Suppress All Mailings"", ""Y"");
			oContactComp.CopyFieldValue (""Row Status"", ""Y"");

			oContactComp.SetFieldValue (""operation"", ""sync"");
		} // while (iComp.NextRecord ())

		/* Process the Sales Area Accounts */

		var e2knvvm = iKNA1MComp.GetIntComp (""E2KNVVM006"");
		var oSalesAreaAccountComp = oAccountComp.CreateIntComp (""SAP 4x Account Sales Area"", false);
		
		enumOrg: while( e2knvvm.NextRecord() )
		{
			/* Create ""Sales Area Account"" component in output message	*/
			oSalesAreaAccountComp.NewRecord ();

			oSalesAreaAccountComp.SetCopySource (e2knvvm);

			var SalesOrg = e2knvvm.GetFieldValue(""VKORG"");
			var DistChannel= e2knvvm.GetFieldValue(""VTWEG"");
			var DivCode = e2knvvm.GetFieldValue(""SPART"");

			var OrgID = GetSalesArea(SalesOrg, DistChannel, DivCode);

			if (OrgID != null) 	
			   oSalesAreaAccountComp.SetFieldValue(""Organization Id"", OrgID);
			else
			   EAIRaiseError(LocalizeMessage(""ERR_MSG_SALES_AREA_NOT_FOUND,""+SalesOrg+"",""+DistChannel+"",""+DivCode+""""));
		   
		   	oSalesAreaAccountComp.SetFieldValue(""Integration Id"", oIntId);
		   	oSalesAreaAccountComp.SetFieldValue(""Organization Loc"", location);
		   	oSalesAreaAccountComp.SetFieldValue(""Organization Name"", Name);
//		   	oSalesAreaAccountComp.SetFieldValue(""Organization Partner Flag"", ""N"");

			/* Check if sales area is marked as deleted */
			if ((e2knvvm.GetFieldValue (""LOEVM"") == ""X"") || (iKNA1MComp.GetFieldValue (""LOEVM"") == ""X""))
			{
				oSalesAreaAccountComp.SetFieldValue (""Account Status"", ""Marked For Deletion"");
//				continue enumOrg;
			}
			else
			{
				oSalesAreaAccountComp.SetFieldValue (""Account Status"", """");
			}
				
			/* Set language code */
			oSalesAreaAccountComp.SetFieldValue (""Language Code"", languageLM.Translate (iKNA1MComp.GetFieldValue (""SPRAS_ISO"")));

			oSalesAreaAccountComp.CopyFieldValue (""Freight Terms"", ""INCO1"");
			oSalesAreaAccountComp.CopyFieldValue (""Freight Terms Info"", ""INCO2"");
			oSalesAreaAccountComp.SetFieldValue (""Type"", TheApplication().InvokeMethod (""LookupValue"", ""ACCOUNT_TYPE"", e2knvvm.GetFieldValue(""KDGRP"")));
				
			oSalesAreaAccountComp.CopyFieldValue (""Primary Fulfillment InvLoc ID"", ""VWERK"");
			oSalesAreaAccountComp.CopyFieldValue (""Payment Terms"", ""ZTERM"");
			oSalesAreaAccountComp.CopyFieldValue (""Price List Type"", ""PLTYP"");
			oSalesAreaAccountComp.SetFieldValue (""Shipping Conditions"", TheApplication().InvokeMethod (""LookupValue"", ""SHIPPING_CONDITION"", e2knvvm.GetFieldValue(""VSBED"")));
			// oSalesAreaAccountComp.CopyFieldValue (""Pricing Group Code"", ""KONDA"");

			/* Set currency code */
			oSalesAreaAccountComp.SetFieldValue (""Currency Code"", currencyLM.Translate (e2knvvm.GetFieldValue (""WAERS"")));

			/* Block Credit Flag */
			var e2knkkm = iKNA1MComp.GetIntComp(""E2KNKKM001"");
			var oCrdtCtlAreaComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Credit Control Area"", false);
			while (e2knkkm.NextRecord () )
			{
				oCrdtCtlAreaComp.NewRecord ();
				oCrdtCtlAreaComp.SetCopySource (e2knkkm);
				oCrdtCtlAreaComp.CopyFieldValue (""Credit Control Area Code"", ""KKBER"");
				if (e2knkkm.GetFieldValue(""CRBLB"") == ""X"") 
					oCrdtCtlAreaComp.SetFieldValue (""Block Credit Flag"", ""Y"");
				else
					oCrdtCtlAreaComp.SetFieldValue (""Block Credit Flag"", ""N"");
				
				oCrdtCtlAreaComp.SetFieldValue (""operation"", ""upsert"");
			}

			/* Primary Partner Relationships of Sales Area Accounts  */
			var e2knvpm = e2knvvm.GetIntComp (""E2KNVPM002"");
			var oShipToPartnerComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Account Partner Function (Ship To)"", false);	
			var oPayerPartnerComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Account Partner Function (Payer)"", false);
			var oBillToPartnerComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Account Partner Function (Bill To)"", false);
			var oSoldToPartnerComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Account Partner Function (Sold To)"", false);

			var FirstShipTo, FirstPayer, FirstBillTo;
			FirstShipTo = true;
			FirstPayer = true;
			FirstBillTo = true;
			enumPartner: while (e2knvpm.NextRecord () )
			{
				// Default Ship To Partner 
				if ( e2knvpm.GetFieldValue(""PARVW"") == ""WE"" )
				{
					oShipToPartnerComp.NewRecord ();
					oShipToPartnerComp.SetCopySource( e2knvpm );
					oShipToPartnerComp.CopyFieldValue (""Integration Id"", ""KUNN2"");
					var Int_ID = e2knvpm.GetFieldValue (""KUNN2"");
					if ( Int_ID == oIntId )
					{
						var AccName = iKNA1MComp.GetFieldValue (""NAME1"");
					}
					else
					{
						var AccName = GetAccountName (Int_ID);
					}	
					oShipToPartnerComp.SetFieldValue (""Ship To Partner Function"", AccName);
					if ( e2knvpm.GetFieldValue(""DEFPA"") == ""X"" ) oShipToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					if (FirstShipTo) {
						FirstShipTo = false;
						oShipToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					}
					oShipToPartnerComp.SetFieldValue (""operation"", ""sync"");
				
				}	
				// Default Payer Partner 
				if ( e2knvpm.GetFieldValue(""PARVW"") == ""RG"" )
				{
					oPayerPartnerComp.NewRecord ();
					oPayerPartnerComp.SetCopySource (e2knvpm);
					oPayerPartnerComp.CopyFieldValue (""Integration Id"", ""KUNN2"");
					var Int_ID = e2knvpm.GetFieldValue (""KUNN2"");
					if ( Int_ID == oIntId )
					{
						var AccName = iKNA1MComp.GetFieldValue (""NAME1"");
					}
					else
					{
						var AccName = GetAccountName (Int_ID);
					}	
					oPayerPartnerComp.SetFieldValue (""Payer Partner Function"", AccName);
					if ( e2knvpm.GetFieldValue(""DEFPA"") == ""X"" ) oPayerPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					if (FirstPayer) {
						FirstPayer = false;
						oPayerPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					}
					oPayerPartnerComp.SetFieldValue (""operation"", ""sync"");
					
				}
				// Default Bill To Partner 
				if ( e2knvpm.GetFieldValue(""PARVW"") == ""RE"" )
				{
					oBillToPartnerComp.NewRecord ();
					oBillToPartnerComp.SetCopySource (e2knvpm);
					oBillToPartnerComp.CopyFieldValue (""Integration Id"", ""KUNN2"");
					var Int_ID = e2knvpm.GetFieldValue (""KUNN2"");
					if ( Int_ID == oIntId )
					{
						var AccName = iKNA1MComp.GetFieldValue (""NAME1"");
					}
					else
					{
						var AccName = GetAccountName (Int_ID);
					}	
					oBillToPartnerComp.SetFieldValue (""Bill To Partner Function"", AccName);
					if ( e2knvpm.GetFieldValue(""DEFPA"") == ""X"" ) oBillToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					if (FirstBillTo) {
						FirstBillTo = false;
						oBillToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					}
					oBillToPartnerComp.SetFieldValue (""operation"", ""sync"");

				}	
				// Sold To Partner
				if ( e2knvpm.GetFieldValue(""PARVW"") == ""AG"" )
				{
					oSoldToPartnerComp.NewRecord ();
					oSoldToPartnerComp.SetCopySource (e2knvpm);
					oSoldToPartnerComp.CopyFieldValue (""Integration Id"", ""KUNN2"");
					var Int_ID = e2knvpm.GetFieldValue (""KUNN2"");
					if ( Int_ID == oIntId )
					{
						var AccName = iKNA1MComp.GetFieldValue (""NAME1"");
					}
					else
					{
						var AccName = GetAccountName (Int_ID);
					}	
					oSoldToPartnerComp.SetFieldValue (""Sold To Partner Function"", AccName);
					if ( e2knvpm.GetFieldValue(""DEFPA"") == ""X"" ) oSoldToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					oSoldToPartnerComp.SetFieldValue (""operation"", ""sync"");

				}	
			}

			/* Set Parent Account Id - P Lim. 3/15/00. In our system, the component has trailing 002 */
			// iComp = iKNA1MComp.GetIntComp (""E2KNB1M005"");
			// findKNRZE: while (iComp.NextRecord ())
			// {
				// oSalesAreaAccountComp.SetFieldValue (""Parent Account Integration Id"", iComp.GetFieldValue (""KNRZE""));
				/* only get first row */
				//break findKNRZE;
			//}
		  // Set operation to ""upsert"" since we are using the ""Execute"" method
		  oSalesAreaAccountComp.SetFieldValue (""operation"", ""sync"");
		} // ... while( e2knvvm.Ne...
	} // ... while (iIDOCObj.NextInstance ())
} // ... ReceiveSAPCustomer_IDOCToSiebel"
function RequestCustomerNumber_BAPIToSiebel (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   BAPI Export (Account - Get SAP 47 Internal Customer Number (BAPI Output))
    *     Export Parameters (output)
    * 	    CUSTOMERID
    *
    * Output Object's Integration Components:
    *   Account Object (Account - Send or Receive SAP 50 Customer (Siebel 77))
    *     Integration Id, Location, Sync status data (oAccount)
    */

   /*
    * Set up EAI Input Message objects
    */
   var iBAPIObj;   // BAPI object instance
   var iExportComp; // BAPI Export Parameters

   // Store inputId for later use
   var inputId = inputMsg.GetArgument (""Siebel Account Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oAccountObj;      // Siebel Account instance
   var oAccountComp;     // Account

   /*
    * Find and create top-level integration object
    */
   iBAPIObj = inputMsg.GetIntObj (""Account - Get SAP 47 Internal Customer Number (BAPI Output)"");
   oAccountObj = outputMsg.CreateIntObj (""Account - Send or Receive SAP 50 Customer (Siebel 77)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iBAPIObj.NextInstance ())
   {
      /*
       * Create ""Account"" object
       */
      oAccountObj.NewInstance ();

      /*
       * Create ""Account"" component in output message
       */
      oAccountComp = oAccountObj.CreatePrimaryIntComp (""Account"");
      oAccountComp.NewRecord ();
      // Set ""Id"" so Siebel Adapter can synchronize
      oAccountComp.SetFieldValue (""Id"", inputId);

      /*
       * Read ""Export Parameters"" component
       */
      iExportComp = iBAPIObj.GetPrimaryIntComp (""Export Parameters"");

      if (iExportComp.NextRecord ())
      {
      	 oAccountComp.SetCopySource  (iExportComp);
      	 oAccountComp.CopyFieldValue (""EAI Sync Error Text"", ""RETURN-MESSAGE"");
      	 var ErrorType = iExportComp.GetFieldValue (""RETURN-TYPE"");
      	 
      	 if (ErrorType != ""E"")
      	 {
      	 
 		 /*
      	  * Update ""Account"" component
      	  */
        	oAccountComp.CopyFieldValue (""Integration Id"", ""CUSTOMERID"");
        	var customerno = iExportComp.GetFieldValue (""CUSTOMERID"");
        	var timenow = Timestamp();
         	var SyncStat = TheApplication().InvokeMethod (""LookupValue"", ""EAI_ACCOUNT_SYNC_STATUS"", ""Created in Back Office"");
	     	oAccountComp.SetFieldValue (""EAI Sync Status Code"",  SyncStat);
	     	oAccountComp.SetFieldValue (""EAI Sync Date"",timenow);
	     	
    	
	     	/*
	     	 *	Get Address Info to create the location field with 
	     	 *     embedded customer number
	     	 */
			var AccBusObject = TheApplication().GetBusObject(""Account"");
		 	var AccBusComp   = AccBusObject.GetBusComp(""Account"");
		 
			 // Set View Mode to 3 (or AllView)
		 	AccBusComp.SetViewMode(3);  
		 
		 	AccBusComp.ClearToQuery();
    	 	AccBusComp.SetSearchSpec(""Id"", inputId);
			AccBusComp.ActivateField(""Location"");
			
		 	AccBusComp.ExecuteQuery();
		 	if(AccBusComp.FirstRecord())
			{
	  		 var city        = AccBusComp.GetFieldValue(""City"");
	  		 var location    = AccBusComp.GetFieldValue(""Location"");
	  		 
	  		 /*
	  		  *		Site
	  		  */
	  		 if (location == """")
	  		 {
	  		 	location = AccBusComp.GetFieldValue(""City"");
	  		 }
	  		 location += "" "" + customerno;
	  		 oAccountComp.SetFieldValue (""Location"", location );
			}
			  	 
	     	   	
	     }
      }
   } //   while (iCreateAccountObj.NextInstance ())
} //function RequestCustomerNumber_BAPIToSiebel"
function RequestCustomerNumber_SiebelToBAPI (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   Account Object (Account - Send or Receive SAP 50 Customer (Siebel 77))
    *     Account (Account)
    *       
    *
    * Output Object's Integration Components:
    *   Account - Get SAP 47 Internal Customer Number (BAPI Input)
    */

	/* Set up EAI Lookup maps */
    var acctGroupLM = EAIGetValueMap (""SAP Customer Acct Group Code"", ""Siebel Outbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iAccountObj;  // Account object instance
   var iAccountComp; // Account

   /*
    * Set up EAI Output Message objects
    */
   var oBAPIObj;    // BAPI object instance
   var oBAPIImportComp;  // BAPI Import parameters
   

   /*
    * Find and create top-level integration object
    */
   iAccountObj = inputMsg.GetIntObj (""Account - Send or Receive SAP 50 Customer (Siebel 77)"");
   oBAPIObj = outputMsg.CreateIntObj (""Account - Get SAP 47 Internal Customer Number (BAPI Input)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iAccountObj.NextInstance ())
   {
      /*
       * Create BAPI object in output message
       */
      oBAPIObj.NewInstance ();

      /*
       * Read ""Account"" component
       */
      iAccountComp = iAccountObj.GetPrimaryIntComp (""Account"");
      oBAPIImportComp = oBAPIObj.CreatePrimaryIntComp (""Import Parameters"");
      while (iAccountComp.NextRecord ())
      {
         /*
          * Return an error if Integration Id is not null
          */
         if (iAccountComp.GetFieldValue (""Integration Id"") != """")
	       {
			var IntId = iAccountComp.GetFieldValue (""Integration Id"");
			EAIRaiseError(LocalizeMessage(""ERR_MSG_ACCOUNT_EXISTS,""+IntId+""""));//nbc
	       }
	      /*
	       *	Validate Address
	       */
	       
	      var iAddrComp = iAccountComp.GetIntComp (""Account_Business Address"");
	      var AddressFlag = ""N"";
	      if (iAddrComp.Exists ())
	      {
	      	while (iAddrComp.NextRecord())
	      	{
	      		if (iAddrComp.GetFieldValue (""IsPrimaryMVG"") == ""Y"")
	      		{
	      			AddressFlag = ""Y"";
	      		}
	      	}
	      }
	      /*
	       * Return an error if no address is found
	       */
	      if (AddressFlag == ""N"")
	      {
	      	EAIRaiseError(LocalizeMessage(""ERR_MSG_INVALID_ADDRESS,"" + """"));
	      }

         /*
          * Write ""Import Parameters"" component
          */
         oBAPIImportComp.NewRecord ();
         oBAPIImportComp.SetFieldValue (""QUANTITY"", ""1"");
   	     var acctGroup = iAccountComp.GetFieldValue(""Customer Account Group"");
	     oBAPIImportComp.SetFieldValue (""ACCOUNTGROUP"", acctGroupLM.Translate(acctGroup));
   
      } //while (iAccountComp.NextRecord ())
   } //while (iAccountObj.NextInstance ())
} //function RequestCustomerNumber_SiebelToBAPI"
function SendAccount_SiebelToDEBMAS05 (inputMsg, outputMsg)
{
	/* Input Objects' Integration Components						
	 *   Account Object (Account - Send or Receive SAP 50 Customer (Siebel 77))
	 *
	 *	Output Object's Integration Components:
	 *			Customer IDOC (Account - Send or Receive SAP 50 Customer (DEBMAS05))
	 */
	
	/* Set up EAI Lookup maps */
	var currencyLM = EAIGetValueMap (""SAP Currency Code"", ""Siebel Outbound"");
	var languageLM = EAIGetValueMap (""SAP Language 4x"", ""Siebel Outbound"");
	var countryLM  = EAIGetValueMap (""SAP Country"", ""Siebel Outbound"");
	var acctGrpLM  = EAIGetValueMap (""SAP Customer Acct Group Code"", ""Siebel Outbound"");
	var regCodeLM  = EAIGetValueMap (""Back Office Region"", ""Siebel Outbound"");
	
	/* Set up EAI Input Message objects */
	var iAccountObj;    // Siebel Account instance
	var iAccountComp;   // Account
	var iAddrComp;      // Address
	var iContactComp;   // Contact

	/* Set up EAI Output Message objects */
	var oIDOCObj;   // IDOC instance
	var oIDOCComp;  // top level IDOC segment
	var oKNA1MComp; // IDOC Customer Header
	var oComp;      // for reading child components

	/* Find and create top-level integration object	*/
	iAccountObj = inputMsg.GetIntObj (""Account - Send or Receive SAP 50 Customer (Siebel 77)"");
	oIDOCObj =  outputMsg.CreateIntObj (""Account - Send or Receive SAP 50 Customer (DEBMAS05)"");

	/* Misc set up	*/
	var generateMasterRecord = 1;   // Set to '0' to generate sub-organization records only
	var custAccntGrp;
    var currencyCode;
    var ctr = 0;
    var countryCode;
    var regCode;
    var sapCode;
	
	/* Read int object instances from EAI message */
	enumObj: while (iAccountObj.NextInstance ())
	{
		/* Read root Account component */
		iAccountComp = iAccountObj.GetPrimaryIntComp (""Account"");
		if( !iAccountComp.NextRecord() ) continue enumObj;
		
		/*
         * Return an error if Integration Id is not null
         */
			if (iAccountComp.GetFieldValue (""Integration Id"") == """")
		    {
				var errMsg = iAccountComp.GetFieldValue (""EAI Sync Error Text"");
				EAIRaiseError ( errMsg );
	       	}

		/* Create ""IDOC"" object	*/
		oIDOCObj.NewInstance ();

		/* Create ""IDOC"" component in output message */
		oIDOCComp = oIDOCObj.CreatePrimaryIntComp (""Idoc Segments"");
		oIDOCComp.NewRecord ();
		oKNA1MComp = oIDOCComp.CreateIntComp (""E2KNA1M005"",false);
		oKNA1MComp.NewRecord ();	
		oKNA1MComp.SetCopySource (iAccountComp);

		/* Set Integration Id, Name	and Account Group*/
		oKNA1MComp.CopyFieldValue (""KUNNR"", ""Integration Id"");
		oKNA1MComp.CopyFieldValue (""NAME1"", ""Name"");
		oKNA1MComp.SetFieldValue (""KTOKD"", acctGrpLM.Translate (iAccountComp.GetFieldValue(""Customer Account Group"")));

		/* Set location	*/
		// oKNA1MComp.CopyFieldValue (""ORT01"", ""Location"");
	
		/* Account Status */
		// oKNA1MComp.CopyFieldValue (""AUFSD"", ""Account Status"" );
		oKNA1MComp.SetFieldValue (""LOEVM"", """");
		if (iAccountComp.GetFieldValue (""Account Status"") == ""Marked For Deletion"")
			oKNA1MComp.SetFieldValue (""LOEVM"", ""X""); 

		/* Primary Industry */
		// oKNA1MComp.CopyFieldValue (""BRSCH"", ""Primary Industry Id"");

		/* Tax Exempt Number (not created in bus comp for VAT_REGN_NUM yet) */
		// oKNA1MComp.CopyFieldValue (""STCEG"", """" );

		/* Search Term */
		oKNA1MComp.CopyFieldValue (""SORTL"", ""Name"");			

		/* Transportation Zone */
		// oKNA1MComp.SetFieldValue (""LZONE"", ""0000000001"");			

		/* Set language code */
		oKNA1MComp.SetFieldValue (""SPRAS"", languageLM.Translate (iAccountComp.GetFieldValue (""Language Code"")));
		
		/* Set main Phone/FAX numbers */
		oKNA1MComp.CopyFieldValue (""TELF1"", ""Main Phone Number"" );
		oKNA1MComp.CopyFieldValue (""TELFX"", ""Main Fax Number"" );
		
	
		/* Read ""KNVKM"" component */
		iContactComp = iAccountComp.GetIntComp (""Contact"");
		oComp = oKNA1MComp.CreateIntComp (""E2KNVKM001"", false);
		while (iContactComp.NextRecord ())
		{
			/* Write ""Contact"" component */

			oComp.NewRecord ();
			oComp.SetCopySource  (iContactComp);
			// oComp.CopyFieldValue (""PARNR"", ""Integration Id"");
			// oComp.CopyFieldValue (""PARNR"", ""Employee Number"");

			/* Set First Name */
			oComp.CopyFieldValue (""NAMEV"", ""First Name"");

			/* Set Last name */
			oComp.CopyFieldValue (""NAME1"", ""Last Name"");

			/* Set job title */
			oComp.CopyFieldValue (""TITEL_AP"", ""Job Title"");
			oComp.CopyFieldValue (""ANRED"", ""M/M"");
			oComp.CopyFieldValue ( ""TELF1"", ""Work Phone #"");
		} // while (iContactComp.NextRecord ())

		/* Write ""Address"" component */
		iAddrComp = iAccountComp.GetIntComp (""Account_Business Address"");
		while (iAddrComp.NextRecord () )
		{
			oKNA1MComp.SetCopySource(iAddrComp);
			if (iAddrComp.GetFieldValue (""IsPrimaryMVG"") == ""Y"")
			{

			// Set telephone numbers
			// oKNA1MComp.CopyFieldValue (""TELF1"", ""Phone Number"" );
			// oKNA1MComp.CopyFieldValue (""TELFX"", ""Fax Number"" );

			// Set Street address
			oKNA1MComp.CopyFieldValue  (""STRAS"", ""Street Address"");
			oKNA1MComp.CopyFieldValue (""ORT01"", ""City"");
			countryCode = countryLM.Translate (iAddrComp.GetFieldValue (""Country""));
			oKNA1MComp.SetFieldValue (""LAND1"", countryLM.Translate (iAddrComp.GetFieldValue (""Country"")));
			
// nbc 11/10/01. CR#12-90S337 - The EAI value maps for State / Region is missing 
			regCode = regCodeLM.Translate (iAddrComp.GetFieldValue (""State""));	//12-90S337
			sapCode = regCode.substring(3,5);									//12-90S337
			oKNA1MComp.SetFieldValue (""REGIO"", sapCode );						//12-90S337
	
			oKNA1MComp.CopyFieldValue (""PSTLZ"", ""Postal Code"" );
			
		// Set operation to ""upsert"" since we are using the ""Execute"" method.
			oKNA1MComp.SetFieldValue (""operation"", ""upsert"");
			}
		}
		

/* Process Sales Area Account */

		var iSalesAreaAccountComp = iAccountComp.GetIntComp (""SAP 4x Account Sales Area"");
		var e2knvvm = oKNA1MComp.CreateIntComp (""E2KNVVM006"", false);
			
		enumOrg: while (iSalesAreaAccountComp.NextRecord() )
		{
			/* Create ""Account"" component in output message	*/

			e2knvvm.NewRecord ();
			e2knvvm.SetCopySource ( iSalesAreaAccountComp );


			/* Set sales organization */

			e2knvvm.CopyFieldValue( ""VKORG"", ""Back Office Sales Organization"");
			e2knvvm.CopyFieldValue( ""VTWEG"", ""Back Office Distribution Channel"");
			e2knvvm.CopyFieldValue( ""SPART"", ""Back Office Sales Area Division Code"");
			
			/* Account Status (for Sales Area Accounts) */
			// e2knvvm.CopyFieldValue (""AUFSD"", ""Account Status"");
			if (iSalesAreaAccountComp.GetFieldValue (""Account Status"") == ""Marked For Deletion"")
				e2knvvm.SetFieldValue( ""LOEVM"", ""X"");

			/* Freight Terms a.k.a Incoterms 1 */
			// e2knvvm.CopyFieldValue (""INCO1"", ""Freight Terms"");

			/* Freight Terms Info a.k.a Incoterms 2 */
			// e2knvvm.CopyFieldValue (""INCO2"", ""Freight Terms Info"");

			/* Primary Fullfilment Inventory Location Id  */
			// e2knvvm.CopyFieldValue (""VWERK"", ""Primary Fulfillment InvLoc ID"");

			/* Payment Terms */
			// e2knvvm.CopyFieldValue (""ZTERM"", ""Payment Terms"");

			/* Price List Type */
			// e2knvvm.CopyFieldValue (""PLTYP"", ""Price List Type"");

			/* Account Type / Customer Group  */
               e2knvvm.SetFieldValue( ""KDGRP"", iSalesAreaAccountComp.GetFieldValue(""Type"" ));
			
			/* Customer Stats Group */
			   e2knvvm.SetFieldValue (""VERSG"", ""/"");

			// e2knvvm.SetFieldValue (""PERFK"", ""US"");

			/* Sales District Code */
			// e2knvvm.SetFieldValue (""BZIRK"", ""CENTRE"");			

			/* Pricing Group Code */
			// e2knvvm.SetFieldValue (""KONDA"", ""02"");

			/* Pricing Procedure */
 			e2knvvm.SetFieldValue (""KALKS"", ""/"");

			/* Shipping Conditions */
			var shpCond = iSalesAreaAccountComp.GetFieldValue(""Shipping Conditions"");
			if ( shpCond == """" )
				e2knvvm.SetFieldValue (""VSBED"", ""02""); // Change Me
			else
				e2knvvm.SetFieldValue (""VSBED"", iSalesAreaAccountComp.GetFieldValue(""Shipping Conditions""));

			/* Set currency code */
			var sCurCode = iSalesAreaAccountComp.GetFieldValue (""Currency Code"");
			if ( sCurCode == """")
				currencyCode = TheApplication().CurrencyCode();
			else
				currencyCode = iSalesAreaAccountComp.GetFieldValue (""Currency Code"");
				
			e2knvvm.SetFieldValue (""WAERS"", currencyLM.Translate (currencyCode));

			/* Set Block Credit Flag */
//			var e2knkkm = oKNA1MComp.CreateIntComp(""E2KNKKM001"",false);
//			var iCrdtCtlAreaComp = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Credit Control Area"");
//			while (iCrdtCtlAreaComp.NextRecord () )
//			{
//				e2knkkm.NewRecord ();
//				e2knkkm.SetCopySource (iCrdtCtlAreaComp);
//				e2knkkm.CopyFieldValue (""KKBER"", ""Credit Control Area Code"");
//				e2knkkm.CopyFieldValue (""CRBLB"", ""Block Credit Flag"");
//				e2knkkm.SetFieldValue (""operation"", ""upsert"");
//			}

			/* Tax classification */
			// var iTaxCode = e2knvvm004.CreateIntComp (""E2KNVIM"",false);
			// iTaxCode.NewRecord ();
			// iTaxCode.SetFieldValue (""TAXKD"",""0"");
			
			/* Set Primary Partner Relationships of Sales Area Accounts */
			var acctGrp = acctGrpLM.Translate (iAccountComp.GetFieldValue(""Customer Account Group""));
			var intId   = iAccountComp.GetFieldValue (""Integration Id"");
			if ( acctGrp == ""0001"" || acctGrp == ""0002"" )
			{
			
			var e2knvpm = e2knvvm.CreateIntComp (""E2KNVPM002"",false);

			var iShipToPartnerComp = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Account Partner Function (Ship To)"");	
			var iPayerPartnerComp  = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Account Partner Function (Payer)"");
			var iBillToPartnerComp = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Account Partner Function (Bill To)"");
			var iSoldToPartnerComp = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Account Partner Function (Sold To)"");

			var i = 0;
			enumShipToPartner: while (iShipToPartnerComp.NextRecord () )
			{
				// Default Ship To Partner 
				if ( iShipToPartnerComp.GetFieldValue(""Ship To Partner Function"") )
				{
					e2knvpm.NewRecord ();
					e2knvpm.SetCopySource( iShipToPartnerComp );
					e2knvpm.CopyFieldValue (""KUNN2"", ""Integration Id"" );
   					e2knvpm.SetFieldValue (""PARVW"", ""WE"");
					e2knvpm.SetFieldValue (""operation"", ""upsert"");
					i++;
				}	
			}
			if ( i == 0 )
			{
				e2knvpm.NewRecord ();
		   		e2knvpm.SetFieldValue (""KUNN2"", intId);
				e2knvpm.SetFieldValue (""PARVW"", ""WE"");
				e2knvpm.SetFieldValue (""operation"", ""upsert"");
			}

			if ( acctGrp == ""0002"" )  goto SoldToPartner;

			i = 0;
			enumPayerPartner: while (iPayerPartnerComp.NextRecord () )
			{
				// Default Payer Partner 
				if ( iPayerPartnerComp.GetFieldValue(""Payer Partner Function"") )
				{
					e2knvpm.NewRecord ();
					e2knvpm.SetCopySource (iPayerPartnerComp);
					e2knvpm.CopyFieldValue (""KUNN2"", ""Integration Id"" );
					e2knvpm.SetFieldValue (""PARVW"", ""RG"");
					e2knvpm.SetFieldValue (""operation"", ""upsert"");
					i++;
				}	
			}
			if ( i == 0 && acctGrp == ""0001"" )
			{
				e2knvpm.NewRecord ();
	   			e2knvpm.SetFieldValue (""KUNN2"", intId);
				e2knvpm.SetFieldValue (""PARVW"", ""RG"");
				e2knvpm.SetFieldValue (""operation"", ""upsert"");
			}
	
			i = 0;
			enumBillToPartner: while (iBillToPartnerComp.NextRecord () )
			{
				// Default Bill To Partner 
				if ( iBillToPartnerComp.GetFieldValue(""Bill To Partner Function"")  )
				{
					e2knvpm.NewRecord ();
					e2knvpm.SetCopySource (iBillToPartnerComp);
					e2knvpm.CopyFieldValue (""KUNN2"", ""Integration Id"" );
					e2knvpm.SetFieldValue (""PARVW"", ""RE"");
					e2knvpm.SetFieldValue (""operation"", ""upsert"");
					i++;
				}	
			}
			if ( i == 0 && acctGrp == ""0001"" )
			{
				e2knvpm.NewRecord ();
	   			e2knvpm.SetFieldValue (""KUNN2"", intId);
				e2knvpm.SetFieldValue (""PARVW"", ""RE"");
				e2knvpm.SetFieldValue (""operation"", ""upsert"");
			}

			SoldToPartner:
			i = 0;
			enumSoldToPartner: while (iSoldToPartnerComp.NextRecord () )
			{
				// Default Sold To Partner 
				if ( iSoldToPartnerComp.GetFieldValue(""Sold To Partner Function"")  )
				{
					if (( iSoldToPartnerComp.GetFieldValue(""Integration Id"") != intId )) 
					{	
						e2knvpm.NewRecord ();
						e2knvpm.SetCopySource (iSoldToPartnerComp);
						e2knvpm.CopyFieldValue (""KUNN2"", ""Integration Id"" );
						e2knvpm.SetFieldValue (""PARVW"", ""AG"");
						e2knvpm.SetFieldValue (""operation"", ""upsert"");
						i++;
					}
				}	
			}
			if ( i == 0 && acctGrp == ""0001"" )
			{
				e2knvpm.NewRecord ();
	   			e2knvpm.SetFieldValue (""KUNN2"", intId);
				e2knvpm.SetFieldValue (""PARVW"", ""AG"");
				e2knvpm.SetFieldValue (""operation"", ""upsert"");
			}

			/* Set operation to ""upsert"" since we are using the ""Execute"" method. */
			e2knvvm.SetFieldValue (""operation"", ""upsert"");
			}

		} // enumOrg: while( iSalesAreaAccountComp.NextRecord() )
		/* Set Company Code & Parent Account Id	*/
		// var oCoCodeComp = oKNA1MComp.CreateIntComp (""E2KNB1M005"",false);
		// oCoCodeComp.NewRecord ();
		// oCoCodeComp.SetCopySource(iAccountComp);
		// oCoCodeComp.CopyFieldValue (""KNRZE"", ""Parent Account Integration Id"");
		// oCoCodeComp.SetFieldValue (""BUKRS"", ""0010"");
		// oCoCodeComp.SetFieldValue (""AKONT"", ""121000"");

	} // ... while (iAccountObj.NextInstance ())
} // ... ReceiveSAPCustomer_IDOCToSiebel"
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{
}
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
	return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"
function Timestamp()
{
	var d = Date.fromSystem(Clib.time());

	// Return date in the format MM/DD/YYYY HH:MM:SS
	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
	  d.getHours(), d.getMinutes(), d.getSeconds());
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 4 $
//      $Date: 12/10/99 10:29a $
//    $Author: Achaudhr $ of last update
//
// CREATOR:    P. Lim
//
// DESCRIPTION
//    Javascript maps from Siebel Account to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
"
function GetSAPOrderList_BAPIToSiebel (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   BAPI Export (Account - Get SAP Order List (BAPI Output))
    *     Export Parameters (output)
    *       Order Header (header)
    *         Order Item (item)
    *
    * Output Object's Integration Components:
    *   Account Object (Account - Get SAP Order List (Siebel))
    *     Account (oAccount)
    *       Get List for Account Output
    *       Get List for Account Header
    *         Get List for Account Item
    */

   /*
    * Set up EAI Lookup objects
    */

   /*
    * Set up EAI Input Message objects
    */
   var iGLOrderObj;   // BAPI Order instance
   var iGLExportComp; // BAPI Export Parameters
   var iGLHeaderComp; // BAPI Order Header
   var iGLItemComp;   // BAPI Order Item

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Account Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oAccountObj;   // Siebel Order instance
   var oAccountComp;  // Account
   var oGLOutputComp; // Get List Output
   var oGLHeaderComp; // Get List Header
   var oGLItemComp;   // Get List Item

   /*
    * Find and create top-level integration object
    */
   iGLOrderObj = inputMsg.GetIntObj (""Account - Get SAP Order List (BAPI Output)"");
   oAccountObj = outputMsg.CreateIntObj (""Account - Get SAP Order List (Siebel)"");

   /*
    * Read int object instances from EAI message
    */
   while (iGLOrderObj.NextInstance ())
   {
      /*
       * Create ""Account"" object in output message
       */
      oAccountObj.NewInstance ();

      /*
       * Create ""Account"" component
       */
      oAccountComp = oAccountObj.CreatePrimaryIntComp (""Account"");
      oAccountComp.NewRecord ();
      // Set ""Id"" so Siebel Adapter can synchronize
      oAccountComp.SetFieldValue (""Id"", inputId);

      /*
       * Read ""Export Parameters"" component
       */
      iGLExportComp = iGLOrderObj.GetPrimaryIntComp (""Export Parameters"");
      oGLOutputComp = oAccountComp.CreateIntComp (""Get List for Account Output"", oAccountComp);
      if (iGLExportComp.NextRecord ())
      {
         /*
          * Write ""Get List for Account Output"" component
          */
         oGLOutputComp.NewRecord ();
         oGLOutputComp.SetCopySource  (iGLExportComp);
         oGLOutputComp.SetFieldValue  (""Input Id"",          inputId);
         oGLOutputComp.CopyFieldValue (""Return Code"",       ""RETURN-CODE"");
         oGLOutputComp.CopyFieldValue (""Return Log Msg No"", ""RETURN-LOG_MSG_NO"");
         oGLOutputComp.CopyFieldValue (""Return Log No"",     ""RETURN-LOG_NO"");
         oGLOutputComp.CopyFieldValue (""Return Message"",    ""RETURN-MESSAGE"");
         oGLOutputComp.CopyFieldValue (""Return Type"",       ""RETURN-TYPE"");

         /*
          * Read ""Order Header"" component to 
          */
         iGLHeaderComp = iGLExportComp.GetIntComp (""Order Header"");
         oGLHeaderComp = oAccountComp.CreateIntComp (""Get List for Account Header"", oAccountComp);
         while (iGLHeaderComp.NextRecord ())
         {
            oGLHeaderComp.NewRecord ();
            oGLHeaderComp.SetCopySource  (iGLHeaderComp);
            oGLHeaderComp.SetFieldValue  (""Input Id"",         inputId);
            oGLHeaderComp.CopyFieldValue (""Currency"",             ""CURRENCY"");
            oGLHeaderComp.CopyFieldValue (""Distribution Channel"", ""DISTR_CHAN"");
            oGLHeaderComp.CopyFieldValue (""Division"",             ""DIVISION"");
            oGLHeaderComp.CopyFieldValue (""Order Date"",           ""DOC_DATE"");
            oGLHeaderComp.CopyFieldValue (""Order Number"",         ""SD_DOC"");
            oGLHeaderComp.CopyFieldValue (""Order Status"",         ""DOC_STATUS"");
            oGLHeaderComp.CopyFieldValue (""Order Type"",           ""DOC_TYPE"");
            oGLHeaderComp.CopyFieldValue (""Purchase Order"",       ""PURCH_NO"");
            oGLHeaderComp.CopyFieldValue (""Sales Organization"",   ""SALES_ORG"");
            oGLHeaderComp.CopyFieldValue (""Sold To Customer"",     ""SOLD_TO"");

            /*
             * Read the ""Order Item"" component
             */
            // to ""Get List for Account Item"" component
            iGLItemComp = iGLHeaderComp.GetIntComp (""Order Item"");
            oGLItemComp = oGLHeaderComp.CreateIntComp (""Get List for Account Item"", oGLHeaderComp);
            while (iGLItemComp.NextRecord ())
            {
               oGLItemComp.NewRecord ();
               oGLItemComp.SetCopySource  (iGLItemComp);
               oGLItemComp.SetFieldValue  (""Input Id"",         inputId);
               oGLItemComp.CopyFieldValue (""Item Number"",          ""ITM_NUMBER"");
               oGLItemComp.CopyFieldValue (""Material Part Number"", ""MATERIAL"");
               oGLItemComp.CopyFieldValue (""Material Short Text"",  ""SHORT_TEXT"");
               oGLItemComp.CopyFieldValue (""Net Price"",            ""NET_PRICE"");
               oGLItemComp.CopyFieldValue (""Net Value"",            ""NET_VALUE"");
               oGLItemComp.CopyFieldValue (""Sales Unit"",           ""SALES_UNIT"");
            }
         }
      }
   }
}
"
function GetSAPOrderList_SiebelToBAPI (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   Account Object (Account - Get SAP Order List (Siebel))
    *     Account (iAccount)
    *
    * Output Object's Integration Components:
    *   BAPI Import (Account - Get SAP Order List (BAPI Input))
    *     Import Parameters (output)
    */

   /*
    * Set up EAI Lookup objects
    */

   /*
    * Set up EAI Input Message objects
    */
   var iAccountObj;    // Siebel Account instance
   var iAccountComp;   // Account

   /*
    * Set up EAI Output Message objects
    */
   var oGLObj;         // BAPI instance
   var oGLImportComp;  // Import Parameters

   /*
    * Find and create top-level integration object
    */
   iAccountObj = inputMsg.GetIntObj (""Account - Get SAP Order List (Siebel)"");
   oGLObj = outputMsg.CreateIntObj (""Account - Get SAP Order List (BAPI Input)"");

   /*
    * Read int object instances from EAI message
    */
   while (iAccountObj.NextInstance ())
   {
      /*
       * Create ""Get List for Account"" object
       */
      oGLObj.NewInstance ();

      /*
       * Read ""Account"" component
       */
      iAccountComp = iAccountObj.GetPrimaryIntComp (""Account"");
      oGLImportComp = oGLObj.CreatePrimaryIntComp (""Import Parameters"");
      if (iAccountComp.NextRecord ())
      {
         /*
          * Write ""Import Parameters"" component
          */
         oGLImportComp.NewRecord ();
         oGLImportComp.SetCopySource  (iAccountComp);
         oGLImportComp.CopyFieldValue (""CUSTOMER_NUMBER"", ""Integration Id"");
         oGLImportComp.SetFieldValue  (""MATERIAL"", """");
         oGLImportComp.SetFieldValue  (""SALES_ORGANIZATION"", """");
         oGLImportComp.SetFieldValue  (""PURCHASE_ORDER"", """"); // ""Peter 1"";
         oGLImportComp.SetFieldValue  (""DOCUMENT_DATE"", """");    // Empty string means ""00000000""
         oGLImportComp.SetFieldValue  (""DOCUMENT_DATE_TO"", """"); // Empty string means ""00000000""
      }
   }
}
"
function ImportSAPOrder_GetSAPOrderListToSiebelOrder (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   Import Get List for Account (Account - Import SAP Order (Get SAP Order List))
    *     Get List for Account Header
    *
    * Output Object's Integration Components:
    *   Import (Account - Import SAP Order (Siebel Order))
    *     Order (oOrder)
    */

   /*
    * Set up EAI Lookup maps
    */
   var orderTypeLM = EAIGetValueMap (""SAP Order Types"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iGLOrderObj;  // Get List instance
   var iGLOrderComp; // Get List Order

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;      // Siebel Order instance
   var oOrderComp;     // Order

   /*
    * Find and create top-level integration object
    */
   iGLOrderObj = inputMsg.GetIntObj (""Account - Import SAP Order (Get SAP Order List)"");
   oOrderObj = outputMsg.CreateIntObj (""Account - Import SAP Order (Siebel Order)"");

   /*
    * Read int object instances from EAI message
    */
   while (iGLOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object
       */
      oOrderObj.NewInstance ();

      /*
       * Read ""Get List Order"" component
       */
      iGLOrderComp = iGLOrderObj.GetPrimaryIntComp (""Get List for Account Header"");
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order"");

      while (iGLOrderComp.NextRecord ())
      {
         /*
          * Write ""Order"" component
          */
         oOrderComp.NewRecord ();
         oOrderComp.SetCopySource  (iGLOrderComp);

         oOrderComp.CopyFieldValue (""Order Number"",           ""Order Number"");
         oOrderComp.SetFieldValue  (""Order Type"",
                                    orderTypeLM.Translate (iGLOrderComp.GetFieldValue (""Order Type"")));
         oOrderComp.CopyFieldValue (""Order Date"",             ""Order Date"");
         oOrderComp.CopyFieldValue (""Account Integration Id"", ""Sold To Customer"");
         oOrderComp.CopyFieldValue (""Bill To Account Integration Id"", ""Sold To Customer"");
         oOrderComp.CopyFieldValue (""Ship To Account Integration Id"", ""Sold To Customer"");
         oOrderComp.CopyFieldValue (""Integration Id"",         ""Order Number"");
         oOrderComp.CopyFieldValue (""SAP Sales Area"",         ""SAP Sales Area"");
         // PLim. ??? Set Organization until we can figure out how to fix dup key index problem
         // oOrderComp.SetFieldValue  (""Organization"",         ""Siebel Administration"");
      }
   }
}
"
function ReceiveSAPCustomer_IDOCToSiebel (inputMsg, outputMsg)
{
   var app = TheApplication();
   var msg;

   /* Input Objects' Integration Components
    *   Customer IDOC (Account - Receive SAP Customer (IDOC Input))
    *     E2KNA1M
    *       E2KNB1M002 (?)
    *       E2KNVKM (?)
    *       E2KNVVM (?)
    *
    * Output Object's Integration Components:
    *   Account Object (Account - Receive SAP Customer (Siebel))
    *     Account (oAccount)
    *       Contact
    *       Business Address
    */

   /*
    * Set up EAI Lookup maps
    */
   var currencyLM = EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"");
   var languageLM = EAIGetValueMap (""SAP Language"", ""Siebel Inbound"");
   var countryLM  = EAIGetValueMap (""SAP Country"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iIDOCObj;   // IDOC instance
   var iIDOCComp;  // top level IDOC segment
   var iKNA1MComp; // IDOC Customer Header
   var iComp;      // for reading child components

   /*
    * Set up EAI Output Message objects
    */
   var oAccountObj;    // Siebel Account instance
   var oAccountComp;   // Account
   var oAddrComp;      // Address
   var oContactComp;   // Contact

   /*
    * Find and create top-level integration object
    */
   iIDOCObj = inputMsg.GetIntObj (""Account - Receive SAP Customer (IDOC Input)"");
   oAccountObj = outputMsg.CreateIntObj (""Account - Receive SAP Customer (Siebel)"");

   /*
    * Read int object instances from EAI message
    */
   while (iIDOCObj.NextInstance ())
   {
      /*
       * Create ""Account"" object
       */
      oAccountObj.NewInstance ();

      // app.MsgBox("foo"");

      /*
       * Read virtual root component that IDOC RFC Adapter populates
       */
      iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
      iIDOCComp.NextRecord ();

      /*
       * Read ""KNA1M"" component
       */
      iKNA1MComp = iIDOCComp.GetIntComp (""E2KNA1M"");
      if (iKNA1MComp.NextRecord ())
      {
         /*
          * Create ""Account"" component in output message
          */
         oAccountComp = oAccountObj.CreatePrimaryIntComp (""Account"");
         oAccountComp.NewRecord ();
         oAccountComp.SetCopySource (iKNA1MComp);

         /*
          * Set Integration Id and Name
          */
         oAccountComp.CopyFieldValue (""Integration Id"", ""KUNNR"");
         oAccountComp.CopyFieldValue (""Name"",           ""NAME1"");

         /*
          * Set location to ""<City> KUNNR1""
          * If <City> is null, put ""No City""
          */
         var location;
         location = iKNA1MComp.GetFieldValue (""ORT01"");
         if (location == null)
            location = ""No City"";
         location += "" "" + iKNA1MComp.GetFieldValue (""KUNNR"");

         oAccountComp.SetFieldValue (""Location"",   location);

         /* Check if product is marked as deleted */
         /* P Lim. 3/16/00. Deletes not supported in this release. 
            Next release: Add a column to show that the item is marked for deletion. */
         // if (iKNA1MComp.GetFieldValue (""LOEVM"") == ""X"")
         // {  /* The customer is marked as deleted: delete the account from Siebel */
         //   oAccountComp.SetFieldValue (""operation"", ""delete"");
         //   continue;
         // }

         // Set operation to ""upsert"" since we are using the ""Execute"" method.
         oAccountComp.SetFieldValue (""operation"", ""upsert"");

         /*
          * Set telephone numbers
          */
         oAccountComp.CopyFieldValue (""Main Phone Number"", ""TELF1"");
         oAccountComp.CopyFieldValue (""Main Fax Number"",   ""TELFX"");

         /*
          * Set other fields
          */
         // Defaults from buscomp:
         // oAccountComp.CopyFieldValue (account, ""Account Status"", ""Active"");
         // oAccountComp.CopyFieldValue (account, ""Disable DataCleansing"", ""N"");
         oAccountComp.CopyFieldValue (""Row Status"", ""Y"");

         /*
          * Set language code
          */
         oAccountComp.SetFieldValue (""Language Code"",
                                     languageLM.Translate (iKNA1MComp.GetFieldValue (""SPRAS"")));

         /*
          * Set currency code
          */
         iComp = iKNA1MComp.GetIntComp (""E2KNVVM"");
         var currencyCode = null;
         while (iComp.NextRecord ())
         {
            // msg = ""SalesOrg: "" + iComp.GetFieldValue (""VKORG"");
            // app.MsgBox(msg);

            // Find sales area specific unit of measure
            if (iComp.GetFieldValue (""VKORG"") == ""0010"")
            {
               if (iComp.GetFieldValue (""LOEVM"") == ""X"")
               {  /* the sales area specific info is marked as deleted: set values to empty string */
                  /* NOTE: in the multiorg maps, should delete the account for this sales area */
                  currencyCode = """";
               }
               else
               {
                  currencyCode = currencyLM.Translate (iComp.GetFieldValue (""WAERS""));
               }
               break;
            }
         }
         /* P Lim. 3/29/00. 12-1CI2UC: Currency Code is a required field */
         if (currencyCode != null && currencyCode != """")
         {
            oAccountComp.SetFieldValue (""Currency Code"", currencyCode);
         }


         /*
          * Set Parent Account Id
          */
         /* P Lim. 3/15/00. In our system, the component has trailing 002 */
         iComp = iKNA1MComp.GetIntComp (""E2KNB1M002"");
         while (iComp.NextRecord ())
         {
            // msg = ""KNRZE: "" + iComp.GetFieldValue (""KNRZE"");
            // app.MsgBox(msg);

            oAccountComp.SetFieldValue (""Parent Account Integration Id"", iComp.GetFieldValue (""KNRZE""));

            /* only get first row */
            break;
         }

         /*
          * Write ""Address"" component
          */
         oAddrComp = oAccountComp.CreateIntComp (""Business Address"", oAccountComp);
         oAddrComp.NewRecord ();
         oAddrComp.SetCopySource (iKNA1MComp);
         oAddrComp.CopyFieldValue (""Integration Id"", ""KUNNR"");

         // Set Street address
         var stras = iKNA1MComp.GetFieldValue (""STRAS""); // Street address
         var pfach = iKNA1MComp.GetFieldValue (""PFACH""); // PO Box
         var street;

         if (stras == """" && pfach == """")
            street = ""None"";
         else if (stras != """" && pfach == """")
            street = stras;
         else if (stras != """" && pfach != """")
            street = stras + "" P.O. Box "" + pfach;
         else if (stras == """" && pfach != """")
            street = ""P.O. Box "" + pfach;
         oAddrComp.SetFieldValue  (""Street Address"", street);

         oAddrComp.CopyFieldValue (""City"",    ""ORT01"", ""None"", ""None"");
         oAddrComp.SetFieldValue  (""Country"", countryLM.Translate (iKNA1MComp.GetFieldValue (""LAND1"")));

         // Set Province and State depending on whether address is in the US
         if (iKNA1MComp.GetFieldValue (""LAND1"") == ""US"")
         {
            oAddrComp.SetFieldValue  (""Province"", """");
            oAddrComp.CopyFieldValue (""State"",    ""REGIO"");
         }
         else
         {
            oAddrComp.CopyFieldValue (""Province"", ""REGIO"");
            oAddrComp.SetFieldValue  (""State"",     """");
         }
         oAddrComp.CopyFieldValue (""Postal Code"", ""PSTLZ"");

         // Defaults from buscomp
         // oAddRComp.SetFieldValue  (""Disable DataCleansing"", ""N"");

         /*
          * Read ""KNVKM"" component
          */
         iComp   = iKNA1MComp.GetIntComp (""E2KNVKM"");
         oContactComp = oAccountComp.CreateIntComp (""Contact"", oAccountComp);
         while (iComp.NextRecord ())
         {
            /*
             * Write ""Contact"" component
             */
            oContactComp.NewRecord ();
            oContactComp.SetCopySource  (iComp);
            oContactComp.CopyFieldValue (""Integration Id"", ""PARNR"");

            oContactComp.CopyFieldValue (""Employee Number"", ""PARNR"");

            // Set creator login
            // Defaults to ""System: Creator""
            // oContactComp.SetFieldValue (""Create Login"", ""SADMIN"");

            // Set First Name
            oContactComp.CopyFieldValue (""First Name"", ""NAMEV"", ""No First Name"", ""No First Name"");

            // Set Last name
            oContactComp.CopyFieldValue (""Last Name"", ""NAME1"");

            // Set job title
            oContactComp.CopyFieldValue (""Job Title"",    ""TITEL_AP"");
            oContactComp.CopyFieldValue (""M/M"",          ""ANRED"");
            oContactComp.CopyFieldValue (""Work Phone #"", ""TELF1"");

            // flags
            oContactComp.CopyFieldValue (""Personal Contact"",      ""N"");
            oContactComp.CopyFieldValue (""Suppress All Mailings"", ""Y"");
            oContactComp.CopyFieldValue (""Row Status"", ""Y"");

            // buscomp defaults to ""N""
            // oContactComp.CopyFieldValue (""Disable DataCleansing"", ""N"");
            // oContactComp.CopyFieldValue (""Email SR Updates Flag"", ""N"");
         }
      }
   }
}
function ReceiveSAPCustomer_IDOCToSiebel_4x (inputMsg, outputMsg)
{
   var app = TheApplication();
   var msg;

   /* Input Objects' Integration Components
    *   Customer IDOC (Account - Receive SAP Customer (4x IDOC Input))
    *     E2KNA1M
    *       E2KNB1M002 (?)
    *       E2KNVKM (?)
    *       E2KNVVM (?)
    *
    * Output Object's Integration Components:
    *   Account Object (Account - Receive SAP Customer (Siebel))
    *     Account (oAccount)
    *       Contact
    *       Business Address
    */

   /*
    * Set up EAI Lookup maps
    */
   var currencyLM = EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"");
   var languageLM = EAIGetValueMap (""SAP Language"", ""Siebel Inbound"");
   var countryLM  = EAIGetValueMap (""SAP Country"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iIDOCObj;   // IDOC instance
   var iIDOCComp;  // top level IDOC segment
   var iKNA1MComp; // IDOC Customer Header
   var iComp;      // for reading child components

   /*
    * Set up EAI Output Message objects
    */
   var oAccountObj;    // Siebel Account instance
   var oAccountComp;   // Account
   var oAddrComp;      // Address
   var oContactComp;   // Contact

   /*
    * Find and create top-level integration object
    */
   iIDOCObj = inputMsg.GetIntObj (""Account - Receive SAP Customer (4x IDOC Input)"");
   oAccountObj = outputMsg.CreateIntObj (""Account - Receive SAP Customer (Siebel)"");

   /*
    * Read int object instances from EAI message
    */
   while (iIDOCObj.NextInstance ())
   {
      /*
       * Create ""Account"" object
       */
      oAccountObj.NewInstance ();

      // app.MsgBox("foo"");

      /*
       * Read virtual root component that IDOC RFC Adapter populates
       */
      iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
      iIDOCComp.NextRecord ();

      /*
       * Read ""KNA1M"" component
       */
      iKNA1MComp = iIDOCComp.GetIntComp (""E2KNA1M"");
      if (iKNA1MComp.NextRecord ())
      {
         /*
          * Create ""Account"" component in output message
          */
         oAccountComp = oAccountObj.CreatePrimaryIntComp (""Account"");
         oAccountComp.NewRecord ();
         oAccountComp.SetCopySource (iKNA1MComp);

         /*
          * Set Integration Id and Name
          */
         oAccountComp.CopyFieldValue (""Integration Id"", ""KUNNR"");
         oAccountComp.CopyFieldValue (""Name"",           ""NAME1"");

         /*
          * Set location to ""<City> KUNNR1""
          * If <City> is null, put ""No City""
          */
         var location;
         location = iKNA1MComp.GetFieldValue (""ORT01"");
         if (location == null)
            location = ""No City"";
         location += "" "" + iKNA1MComp.GetFieldValue (""KUNNR"");

         oAccountComp.SetFieldValue (""Location"",   location);

         /* Check if product is marked as deleted */
         /* P Lim. 3/16/00. Deletes not supported in this release. 
            Next release: Add a column to show that the item is marked for deletion. */
         // if (iKNA1MComp.GetFieldValue (""LOEVM"") == ""X"")
         // {  /* The customer is marked as deleted: delete the account from Siebel */
         //   oAccountComp.SetFieldValue (""operation"", ""delete"");
         //   continue;
         // }

         // Set operation to ""upsert"" since we are using the ""Execute"" method.
         oAccountComp.SetFieldValue (""operation"", ""upsert"");

         /*
          * Set telephone numbers
          */
         oAccountComp.CopyFieldValue (""Main Phone Number"", ""TELF1"");
         oAccountComp.CopyFieldValue (""Main Fax Number"",   ""TELFX"");

         /*
          * Set other fields
          */
         // Defaults from buscomp:
         // oAccountComp.CopyFieldValue (account, ""Account Status"", ""Active"");
         // oAccountComp.CopyFieldValue (account, ""Disable DataCleansing"", ""N"");
         oAccountComp.CopyFieldValue (""Row Status"", ""Y"");

         /*
          * Set language code
          */
         oAccountComp.SetFieldValue (""Language Code"",
                                     languageLM.Translate (iKNA1MComp.GetFieldValue (""SPRAS"")));

         /*
          * Set currency code
          */
         iComp = iKNA1MComp.GetIntComp (""E2KNVVM"");
         var currencyCode = null;
         while (iComp.NextRecord ())
         {
            // msg = ""SalesOrg: "" + iComp.GetFieldValue (""VKORG"");
            // app.MsgBox(msg);

            // Find sales area specific unit of measure
            if (iComp.GetFieldValue (""VKORG"") == ""0010"")
            {
               if (iComp.GetFieldValue (""LOEVM"") == ""X"")
               {  /* the sales area specific info is marked as deleted: set values to empty string */
                  /* NOTE: in the multiorg maps, should delete the account for this sales area */
                  currencyCode = """";
               }
               else
               {
                  currencyCode = currencyLM.Translate (iComp.GetFieldValue (""WAERS""));
               }
               break;
            }
         }
         /* P Lim. 3/29/00. 12-1CI2UC: Currency Code is a required field */
         if (currencyCode != null && currencyCode != """")
         {
            oAccountComp.SetFieldValue (""Currency Code"", currencyCode);
         }


         /*
          * Set Parent Account Id
          */
         /* P Lim. 3/15/00. In our system, the component has trailing 002 */
         iComp = iKNA1MComp.GetIntComp (""E2KNB1M002"");
         while (iComp.NextRecord ())
         {
            // msg = ""KNRZE: "" + iComp.GetFieldValue (""KNRZE"");
            // app.MsgBox(msg);

            oAccountComp.SetFieldValue (""Parent Account Integration Id"", iComp.GetFieldValue (""KNRZE""));

            /* only get first row */
            break;
         }

         /*
          * Write ""Address"" component
          */
         oAddrComp = oAccountComp.CreateIntComp (""Business Address"", oAccountComp);
         oAddrComp.NewRecord ();
         oAddrComp.SetCopySource (iKNA1MComp);
         oAddrComp.CopyFieldValue (""Integration Id"", ""KUNNR"");

         // Set Street address
         var stras = iKNA1MComp.GetFieldValue (""STRAS""); // Street address
         var pfach = iKNA1MComp.GetFieldValue (""PFACH""); // PO Box
         var street;

         if (stras == """" && pfach == """")
            street = ""None"";
         else if (stras != """" && pfach == """")
            street = stras;
         else if (stras != """" && pfach != """")
            street = stras + "" P.O. Box "" + pfach;
         else if (stras == """" && pfach != """")
            street = ""P.O. Box "" + pfach;
         oAddrComp.SetFieldValue  (""Street Address"", street);

         oAddrComp.CopyFieldValue (""City"",    ""ORT01"", ""None"", ""None"");
         oAddrComp.SetFieldValue  (""Country"", countryLM.Translate (iKNA1MComp.GetFieldValue (""LAND1"")));

         // Set Province and State depending on whether address is in the US
         if (iKNA1MComp.GetFieldValue (""LAND1"") == ""US"")
         {
            oAddrComp.SetFieldValue  (""Province"", """");
            oAddrComp.CopyFieldValue (""State"",    ""REGIO"");
         }
         else
         {
            oAddrComp.CopyFieldValue (""Province"", ""REGIO"");
            oAddrComp.SetFieldValue  (""State"",     """");
         }
         oAddrComp.CopyFieldValue (""Postal Code"", ""PSTLZ"");

         // Defaults from buscomp
         // oAddRComp.SetFieldValue  (""Disable DataCleansing"", ""N"");

         /*
          * Read ""KNVKM"" component
          */
         iComp   = iKNA1MComp.GetIntComp (""E2KNVKM"");
         oContactComp = oAccountComp.CreateIntComp (""Contact"", oAccountComp);
         while (iComp.NextRecord ())
         {
            /*
             * Write ""Contact"" component
             */
            oContactComp.NewRecord ();
            oContactComp.SetCopySource  (iComp);
            oContactComp.CopyFieldValue (""Integration Id"", ""PARNR"");

            oContactComp.CopyFieldValue (""Employee Number"", ""PARNR"");

            // Set creator login
            // Defaults to ""System: Creator""
            // oContactComp.SetFieldValue (""Create Login"", ""SADMIN"");

            // Set First Name
            oContactComp.CopyFieldValue (""First Name"", ""NAMEV"", ""No First Name"", ""No First Name"");

            // Set Last name
            oContactComp.CopyFieldValue (""Last Name"", ""NAME1"");

            // Set job title
            oContactComp.CopyFieldValue (""Job Title"",    ""TITEL_AP"");
            oContactComp.CopyFieldValue (""M/M"",          ""ANRED"");
            oContactComp.CopyFieldValue (""Work Phone #"", ""TELF1"");

            // flags
            oContactComp.CopyFieldValue (""Personal Contact"",      ""N"");
            oContactComp.CopyFieldValue (""Suppress All Mailings"", ""Y"");
            oContactComp.CopyFieldValue (""Row Status"", ""Y"");

            // buscomp defaults to ""N""
            // oContactComp.CopyFieldValue (""Disable DataCleansing"", ""N"");
            // oContactComp.CopyFieldValue (""Email SR Updates Flag"", ""N"");
         }
      }
   }
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 4 $
//      $Date: 12/10/99 10:29a $
//    $Author: Achaudhr $ of last update
//
// CREATOR:    R.Lankinen
//
// DESCRIPTION
//    Multi-organization Javascript maps from Siebel Account to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
"
function GetSAPOrderList_BAPIToSiebel (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   BAPI Export (Account - Get SAP Order List (BAPI Output))
    *     Export Parameters (output)
    *       Order Header (header)
    *         Order Item (item)
    *
    * Output Object's Integration Components:
    *   Account Object (Account - Get SAP Order List (MO))
    *     Account (oAccount)
    *       Get List for Account Output
    *       Get List for Account Header
    *         Get List for Account Item
    */

   /*
    * Set up EAI Lookup objects
    */

   /*
    * Set up EAI Input Message objects
    */
   var iGLOrderObj;   // BAPI Order instance
   var iGLExportComp; // BAPI Export Parameters
   var iGLHeaderComp; // BAPI Order Header
   var iGLItemComp;   // BAPI Order Item

   // Store inputId (ROW_ID) to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Account Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oAccountObj;   // Siebel Order instance
   var oAccountComp;  // Account
   var oGLOutputComp; // Get List Output
   var oGLHeaderComp; // Get List Header
   var oGLItemComp;   // Get List Item

   var theApp = TheApplication();

   /*
    * Find and create top-level integration object
    */
   iGLOrderObj = inputMsg.GetIntObj (""Account - Get SAP Order List (BAPI Output)"");
   oAccountObj = outputMsg.CreateIntObj (""Account - Get SAP Order List (MO)"");

   /*
    * Read int object instances from EAI message
    */
   while (iGLOrderObj.NextInstance ())
   {
      /*
       * Create ""Account"" object in output message
       */
      oAccountObj.NewInstance ();

      /*
       * Create ""Account"" component
       */
      oAccountComp = oAccountObj.CreatePrimaryIntComp (""Account"");
      oAccountComp.NewRecord ();
      // Set ""Id"" so Siebel Adapter can synchronize
      oAccountComp.SetFieldValue (""Id"", inputId);
      
      // Get Primary Sales Area of the account
      var SalesOrg;
      var SalesChn;
	  var SalesDiv;
	  var AccBusObj = theApp.GetBusObject(""Account"");
	  var AccBusCmp = AccBusObj.GetBusComp(""Account"");
	  
	  // Set View Mode to 3 (or AllView)	  
	  AccBusCmp.SetViewMode(3);  
		
	  AccBusCmp.ClearToQuery();
      AccBusCmp.SetSearchSpec(""Id"", inputId);
      AccBusCmp.ActivateField(""Primary Organization Id"");
            	
	  AccBusCmp.ExecuteQuery();
	  
		
	  if(AccBusCmp.FirstRecord())
	  {
	     var PrimOrg = AccBusCmp.GetFieldValue(""Primary Organization Id"");
	     var OrgBusObj = theApp.GetBusObject(""Organizations"");
	     var OrgBusCmp = OrgBusObj.GetBusComp(""Organization"");
	     
	     
	     // Set View Mode to 3 (or AllView)		
		 OrgBusCmp.SetViewMode(3);  	
		 
	     OrgBusCmp.ClearToQuery();
         OrgBusCmp.SetSearchSpec(""Id"", PrimOrg);
         OrgBusCmp.ActivateField(""Back Office Sales Organization"");
	     OrgBusCmp.ActivateField(""Back Office Distribution Channel"");
	     OrgBusCmp.ActivateField(""Back Office Division"");
	
	     OrgBusCmp.ExecuteQuery();
		 
		 // get saleOrg, distChnl and division of the primary SA
	     if(OrgBusCmp.FirstRecord())
	     {
		    var SalesOrg = OrgBusCmp.GetFieldValue(""Back Office Sales Organization"");
		    var SalesChn = OrgBusCmp.GetFieldValue(""Back Office Distribution Channel"");
		    var SalesDiv = OrgBusCmp.GetFieldValue(""Back Office Division"");
	     }
//	     else
//	     {
//		  	EAIRaiseError(""Unable to get sales area info for the primary organization"");
//	     }
	  }
//	  else
//	  {
//	  	EAIRaiseError(""Invalid account"");
//	  }
      

      /*
       * Read ""Export Parameters"" component
       */
      iGLExportComp = iGLOrderObj.GetPrimaryIntComp (""Export Parameters"");
      
      
      oGLOutputComp = oAccountComp.CreateIntComp (""Account - Get SAP Order List Output"", oAccountComp);
      if (iGLExportComp.NextRecord ())
      {
      	
         /*
          * Write ""Get List for Account Output"" component
          */
         oGLOutputComp.NewRecord ();
         oGLOutputComp.SetCopySource  (iGLExportComp);
         oGLOutputComp.SetFieldValue  (""Input Id"",          inputId);
         oGLOutputComp.CopyFieldValue (""Return Code"",       ""RETURN-CODE"");
         oGLOutputComp.CopyFieldValue (""Return Log Msg No"", ""RETURN-LOG_MSG_NO"");
         oGLOutputComp.CopyFieldValue (""Return Log No"",     ""RETURN-LOG_NO"");
         oGLOutputComp.CopyFieldValue (""Return Message"",    ""RETURN-MESSAGE"");
         oGLOutputComp.CopyFieldValue (""Return Type"",       ""RETURN-TYPE"");

         /*
          * Read ""Order Header"" component to 
          */
         iGLHeaderComp = iGLExportComp.GetIntComp (""Order Header"");
         oGLHeaderComp = oAccountComp.CreateIntComp (""Account - Get SAP Order List Header"", oAccountComp);
         while (iGLHeaderComp.NextRecord ())
        /* 
       	 * Validate Sales area
       	 */
      	 {
      		var iSalesOrg = iGLHeaderComp.GetFieldValue(""SALES_ORG""); 
       	 	var iSalesChn = iGLHeaderComp.GetFieldValue(""DISTR_CHAN""); 
       	 	var iSalesDiv = iGLHeaderComp.GetFieldValue(""DIVISION""); 
      
	      	if ((SalesOrg == iSalesOrg) && (SalesChn == iSalesChn) && (SalesDiv == iSalesDiv))  
			{
			   oGLHeaderComp.NewRecord ();
			   oGLHeaderComp.SetCopySource  (iGLHeaderComp);
			   oGLHeaderComp.SetFieldValue  (""Input Id"",         inputId);
			   oGLHeaderComp.CopyFieldValue (""Currency"",             ""CURRENCY"");
			   oGLHeaderComp.CopyFieldValue (""Distribution Channel"", ""DISTR_CHAN"");
			   oGLHeaderComp.CopyFieldValue (""Division"",             ""DIVISION"");
			   oGLHeaderComp.CopyFieldValue (""Order Date"",           ""DOC_DATE"");
			   oGLHeaderComp.CopyFieldValue (""Order Number"",         ""SD_DOC"");
			   oGLHeaderComp.CopyFieldValue (""Order Status"",         ""DOC_STATUS"");
			   oGLHeaderComp.CopyFieldValue (""Order Type"",           ""DOC_TYPE"");
			   oGLHeaderComp.CopyFieldValue (""Purchase Order"",       ""PURCH_NO"");
			   oGLHeaderComp.CopyFieldValue (""Sales Organization"",   ""SALES_ORG"");
			   oGLHeaderComp.CopyFieldValue (""Sold To Customer"",     ""SOLD_TO"");
	
	           /*
	            * Read the ""Order Item"" component
	            */
	           // to ""Get List for Account Item"" component
			   iGLItemComp = iGLHeaderComp.GetIntComp (""Order Item"");
			   oGLItemComp = oGLHeaderComp.CreateIntComp (""Account - Get SAP Order List Item"", oGLHeaderComp);
			   while (iGLItemComp.NextRecord ())
			   {
				  oGLItemComp.NewRecord ();
				  oGLItemComp.SetCopySource  (iGLItemComp);
				  oGLItemComp.SetFieldValue  (""Input Id"",         inputId);
				  oGLItemComp.CopyFieldValue (""Item Number"",          ""ITM_NUMBER"");
				  oGLItemComp.CopyFieldValue (""Material Part Number"", ""MATERIAL"");
				  oGLItemComp.CopyFieldValue (""Material Short Text"",  ""SHORT_TEXT"");
				  oGLItemComp.CopyFieldValue (""Net Price"",            ""NET_PRICE"");
				  oGLItemComp.CopyFieldValue (""Net Value"",            ""NET_VALUE"");
				  oGLItemComp.CopyFieldValue (""Sales Unit"",           ""SALES_UNIT"");
			   }
            }
         }
      }
   }
}
function GetSAPOrderList_SiebelToBAPI (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   Account Object (Account - Get SAP Order List (MO))
    *     Account (iAccount)
	 *       Get List for Account Header
    *
    * Output Object's Integration Components:
    *   BAPI Import (Account - Get SAP Order List (BAPI Input))
    *     Import Parameters (output)
    */

   /*
    * Set up EAI Lookup objects
    */

   /*
    * Set up EAI Input Message objects
    */
   var theApp = TheApplication(); // nbc
   var iAccountObj;    // Siebel Account instance
   var iAccountComp;   // Account
	var iHeaderComp;    // Account Header

   /*
    * Set up EAI Output Message objects
    */
   var oGLObj;         // BAPI instance
   var oGLImportComp;  // Import Parameters

   /*
    * Find and create top-level integration object
    */

   iAccountObj = inputMsg.GetIntObj (""Account - Get SAP Order List (MO)"");
   oGLObj = outputMsg.CreateIntObj (""Account - Get SAP Order List (BAPI Input)"");

   /*
    * Read int object instances from EAI message
    */
   while (iAccountObj.NextInstance ())
   {
      /*
       * Create ""Get List for Account"" object
       */
      oGLObj.NewInstance ();

      /*
       * Read ""Account"" component
       */
      iAccountComp = iAccountObj.GetPrimaryIntComp (""Account"");
      oGLImportComp = oGLObj.CreatePrimaryIntComp (""Import Parameters"");
      if (iAccountComp.NextRecord ())
      {
         /*
          * Write ""Import Parameters"" component
          */
         oGLImportComp.NewRecord ();
         oGLImportComp.SetCopySource  (iAccountComp);

	     var intId = iAccountComp.GetFieldValue( ""Integration Id"" );
	     var fromDate = iAccountComp.GetFieldValue( ""Back Office Order Query Start  Dt"" ); //nbc
	     var toDate = iAccountComp.GetFieldValue( ""Back Office Order Query End  Dt"" ); //nbc

         oGLImportComp.SetFieldValue  (""CUSTOMER_NUMBER"",intId );
         oGLImportComp.SetFieldValue  (""MATERIAL"", """");
         oGLImportComp.SetFieldValue  (""PURCHASE_ORDER"", """"); // ""Peter 1"";
         oGLImportComp.SetFieldValue  (""DOCUMENT_DATE"", fromDate );    // Empty string means ""00000000""
         oGLImportComp.SetFieldValue  (""DOCUMENT_DATE_TO"",  toDate ); // Empty string means ""00000000""

		 // Read the primary sales area
	     var primOrgId = iAccountComp.GetFieldValue(""Primary Organization Id"");
	     var OrgBusObj = TheApplication().GetBusObject(""Organizations"");
		 var OrgBusCmp = OrgBusObj.GetBusComp(""Organization"");
		 
		 // Set View Mode to 3 (or AllView)
		 OrgBusCmp.SetViewMode(3);  
		 
		 OrgBusCmp.ClearToQuery();
    	 OrgBusCmp.SetSearchSpec(""Id"", primOrgId);
    	 OrgBusCmp.ActivateField(""Back Office Sales Organization"");
	 
	
		 OrgBusCmp.ExecuteQuery();
		 if(OrgBusCmp.FirstRecord())
		 {
	  		 var SalesOrg = OrgBusCmp.GetFieldValue(""Back Office Sales Organization"");
	  		 // Write ""Import Parameters"" component
			 oGLImportComp.SetFieldValue( ""SALES_ORGANIZATION"", SalesOrg );
		 }
		}
   }
}
function ImportSAPOrder_GetSAPOrderListToSiebelOrder (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   Import Get List for Account (Account - Import SAP Order (Get SAP Order List) (MO))
    *     Get List for Account Header
    *
    * Output Object's Integration Components:
    *   Import (Account - Import SAP Order (Siebel Order) (MO))
    *     Order (oOrder)
    */

   /*
    * Set up EAI Lookup maps
    */
   var orderTypeLM = EAIGetValueMap (""SAP Order Types"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iGLOrderObj;  // Get List instance
   var iGLOrderComp; // Get List Order

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;      // Siebel Order instance
   var oOrderComp;     // Order
   var oOrderOrgComp;  // Order Organization

   /*
    * Find and create top-level integration object
    */
   iGLOrderObj = inputMsg.GetIntObj (""Account - Import SAP Order (Get SAP Order List) (MO)"");
   oOrderObj = outputMsg.CreateIntObj (""Account - Import SAP Order (Siebel Order) (MO)"");

   /*
    * Read int object instances from EAI message
    */
    
   /*
    * Get ActiveBusComp & RowID
    */
   
//   var CurBC = TheApplication().ActiveBusComp();
//   var rowid = CurBC.GetFieldValue(""Id""); //nbc
   
   while (iGLOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object
       */
      oOrderObj.NewInstance ();
            	
      /*
       * Read ""Get List Order"" component
       */
      iGLOrderComp = iGLOrderObj.GetPrimaryIntComp (""Get List for Account Header"");
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order"");
      
      while (iGLOrderComp.NextRecord ())
      {
         /*
          * Write ""Order"" component
          */
         oOrderComp.NewRecord ();
         oOrderComp.SetCopySource  (iGLOrderComp);
         
         var SiebOrdNo = iGLOrderComp.GetFieldValue (""Siebel Order Number"");//xx
         if (SiebOrdNo == """")												//xx
         {																	//xx
         	var OrdNumber = iGLOrderComp.GetFieldValue(""Order Number"");		//xx
         }																	//xx
         else
         {																	//xx
         	var OrdNumber = iGLOrderComp.GetFieldValue (""Siebel Order Number"");//xx
         }																	//xx
 		 
 		 oOrderComp.SetFieldValue (""Order Number"",               OrdNumber);//xx
 		             
//       oOrderComp.CopyFieldValue (""Order Number"",           ""Order Number""); //nbcxx 
//		 oOrderComp.CopyFieldValue (""Order Number"",                    rowid); //nbc
// 	     oOrderComp.SetFieldValue  (""Order Type"",
//                                   orderTypeLM.Translate (iGLOrderComp.GetFieldValue (""Order Type"")));
 		 var oTypeSAP = orderTypeLM.Translate (iGLOrderComp.GetFieldValue (""Order Type""));
		 var oType    = TheApplication().InvokeMethod (""LookupValue"", ""FS_ORDER_TYPE"", oTypeSAP);
		 oOrderComp.SetFieldValue  (""Order Type"",              oType);
         oOrderComp.CopyFieldValue (""Order Date"",             ""Order Date"");
         oOrderComp.CopyFieldValue (""Account Integration Id"", ""Sold To Customer"");
         oOrderComp.CopyFieldValue (""Bill To Account Integration Id"", ""Sold To Customer"");
         oOrderComp.CopyFieldValue (""Ship To Account Integration Id"", ""Sold To Customer"");
         oOrderComp.CopyFieldValue (""Integration Id"",         ""Order Number"");
         // oOrderComp.CopyFieldValue (""Primary Organization Id"",         ""SAP Organization Id (MO)"");
         // PLim. ??? Set Organization until we can figure out how to fix dup key index problem
         // was: oOrderComp.CopyFieldValue  (""Organization"",         ""Organization"");
			// oOrderComp.CopyFieldValue (""Account Location"",         ""Account Location"");
		// }
		
	 // oOrderOrgComp.NewInstance ();
		oOrderOrgComp = oOrderComp.CreateIntComp(""Order Entry - Orders_Organization"");
		// while (iGLOrderComp.NextRecord ())
      // {
	 	oOrderOrgComp.NewRecord();
	 	oOrderOrgComp.SetCopySource  (iGLOrderComp);
		
	 	oOrderOrgComp.SetFieldValue ( ""IsPrimaryMVG"",			""Y"");
        oOrderOrgComp.CopyFieldValue ( ""Organization Id"",		""SAP Organization Id (MO)"");
        // oOrderOrgComp.CopyFieldValue ( ""Location"",		""Account Location"");
		
			
		
      }
   }
}
function LocalizeMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created by Richard Exley - November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ERR_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ERR_MSG"";
	var LOVType = ""CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
"
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var result = EAIExecuteMap (MethodName, Inputs, Outputs);

	return result;
}
"
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// CREATOR		:	CAROLINE M.
// LAST UPDATED	:	12/28/2000
//
// DESCRIPTION
//    Javascript maps from Oracle Operating Unit to Siebel Organization
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyIntegrationObjectData (OracleIntObject, SiebelIntObject)
{
	//
	// Declare variables to hold the Oracle Primary Integration Component and
	// The Siebel Primary Integration Component
	//
	var OracleCustomerIntComp, SiebelAccountIntComp;
	
	//
	//Get the primary integration component from the Oracle Integration Object
	//
	OracleCustomerIntComp = OracleIntObject.GetPrimaryIntComp (""RA_CUSTOMERS_INTERFACE_ALL"");

	if (OracleCustomerIntComp.Exists ())
	{
		// CUSTOMER INTERFACE

		SiebelAccountIntComp = SiebelIntObject.CreatePrimaryIntComp (""Account"");

		while (OracleCustomerIntComp.NextRecord ())
		{
			SiebelAccountIntComp.NewRecord ();
			SiebelAccountIntComp.SetCopySource (OracleCustomerIntComp);
			
			SiebelAccountIntComp.CopyFieldValue (""Integration Id"", ""ORIG_SYSTEM_CUSTOMER_REF"");
			SiebelAccountIntComp.SetFieldValue (""EAI Sync Status Code"", ""Error on Oracle Import"");
			SiebelAccountIntComp.SetFieldValue(""EAI Sync Date"", Timestamp());
			SiebelAccountIntComp.CopyFieldValue (""EAI Sync Error Text"",""INTERFACE_STATUS"");
		}
	}
	else
	{
		EAIRaiseError(TranslateMessage(
			""ORA_MSG_MISSING_COMPONENT,RA_CUSTOMERS_INTERFACE_ALL,Account - Get Oracle Customer Import Status (Oracle)""));
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
 	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
 	  d.getHours(), d.getMinutes(), d.getSeconds());
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created by Richard Exley - November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
"
function UpsertSiebelAccount (InputMsg, OutputMsg)
{
	//
	// Declare a variable to hold the Siebel Integration Object.
	//
	var SiebelIntObject;

	//
	// Declare a variable to hold the Oracle Integration Object
	//
	var OracleIntObject;

	//
	// Get the Oracle Integration Object from the Input message
	//
	OracleIntObject = InputMsg.GetIntObj(""Account - Get Oracle Customer Import Status (Oracle)"");

	//
	// Check the validity of the Oracle Integration Object.
	//
	if (OracleIntObject.Exists ())
	{
		//
		// Create a new Siebel Integration Object on the Output Message.
		//
		SiebelIntObject = OutputMsg.CreateIntObj (""Account - Get Oracle Customer Import Status (Siebel)"");

		//
		// Navigate through all the available instances in the Integration Object
		//
		while (OracleIntObject.NextInstance ())
		{
			//
			// Create a new instance in the Oracle Integration Object
			//
			SiebelIntObject.NewInstance ();

			//
			// CopyFields is a user defined function which is written to copy all
			// the fields from the source to the target.
			//
			CopyIntegrationObjectData (OracleIntObject, SiebelIntObject);
		}
	}
}  ///~ End of CreateSiebelProduct function."
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// LAST UPDATED	:	12/28/2000
//
// DESCRIPTION
//    Javascript maps from Oracle Operating Unit to Siebel Organization
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyIntegrationObjectData (OracleIntObject, SiebelIntObject)
{
	var OracleCustomerIntComp, SiebelAccountIntComp;
	
	OracleCustomerIntComp = OracleIntObject.GetPrimaryIntComp (""RA_CUSTOMERS_INTERFACE_ALL"");

	if (OracleCustomerIntComp.Exists ())
	{
		// CUSTOMER INTERFACE
		SiebelAccountIntComp = SiebelIntObject.CreatePrimaryIntComp (""Account"");

		while (OracleCustomerIntComp.NextRecord ())
		{
			SiebelAccountIntComp.NewRecord ();
			SiebelAccountIntComp.SetCopySource (OracleCustomerIntComp);
			
			SiebelAccountIntComp.CopyFieldValue (""Integration Id"", ""ORIG_SYSTEM_CUSTOMER_REF"");
			SiebelAccountIntComp.SetFieldValue  (""EAI Sync Status Code"", ""Error on Oracle Import"");
			SiebelAccountIntComp.SetFieldValue  (""EAI Sync Date"", Timestamp());
			SiebelAccountIntComp.CopyFieldValue (""EAI Sync Error Text"",""INTERFACE_STATUS"");
		}
	}
	else
	{
		EAIRaiseError(TranslateMessage(
			""ORA_MSG_MISSING_COMPONENT,RA_CUSTOMERS_INTERFACE_ALL,Account - Get Oracle Customer Import Status (Oracle)""));
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
 	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
 	  d.getHours(), d.getMinutes(), d.getSeconds());
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function UpsertSiebelAccount (InputMsg, OutputMsg)
{
	//
	// Declare a variable to hold the Siebel Integration Object.
	//
	var SiebelIntObject;

	//
	// Declare a variable to hold the Oracle Integration Object
	//
	var OracleIntObject;

	//
	// Get the Oracle Integration Object from the Input message
	//
	OracleIntObject = InputMsg.GetIntObj(""Account - Get Oracle11i Customer Import Status (Oracle)"");

	//
	// Check the validity of the Oracle Integration Object.
	//
	if (OracleIntObject.Exists ())
	{
		//
		// Create a new Siebel Integration Object on the Output Message.
		//
		SiebelIntObject = OutputMsg.CreateIntObj (""Account - Get Oracle11i Customer Import Status (Siebel)"");

		//
		// Navigate through all the available instances in the Integration Object
		//
		while (OracleIntObject.NextInstance ())
		{
			//
			// Create a new instance in the Oracle Integration Object
			//
			SiebelIntObject.NewInstance ();

			//
			// CopyFields is a user defined function which is written to copy all
			// the fields from the source to the target.
			//
			CopyIntegrationObjectData (OracleIntObject, SiebelIntObject);
		}
	}
}  ///~ End of CreateSiebelProduct function."
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// DESCRIPTION
//    Javascript maps to Siebel Account from Oracle Customer
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyFields (OracleIntObject, SiebelIntObject)
{
	var SiebelPrimIntComp, OraclePrimIntComp, OraclePhoneIntComp;

	var AccountStatusVM   = EAIGetValueMap (""Oracle Account Status"", ""Siebel Inbound"", ""Active"");
	var CountryVM 		  = EAIGetValueMap (""Oracle Country"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var AccountPhoneVM    = EAIGetValueMap (""Oracle Account Phone"", ""Siebel Inbound"", ""Main Phone Number"");
	var AddressPhoneVM    = EAIGetValueMap (""Oracle Address Phone"", ""Siebel Inbound"", ""Phone Number"");
	var ContactPhoneVM    = EAIGetValueMap (""Oracle Contact Phone"", ""Siebel Inbound"", ""Alternate Phone #"");
	var FreightVM 	      = EAIGetValueMap (""Oracle Freight"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var ContactVM 		  = EAIGetValueMap(""Oracle Contact Title"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var AccountCategoryVM = EAIGetValueMap(""Oracle Account Category"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	
	OraclePrimIntComp = OracleIntObject.GetPrimaryIntComp (""RA_CUSTOMERS"");
	
	//
	// ACCOUNTS
	//
	if (OraclePrimIntComp.Exists ())
	{
		SiebelPrimIntComp = SiebelIntObject.CreatePrimaryIntComp (""Account"");
		
		while (OraclePrimIntComp.NextRecord ())
		{
			// Process delete operation
			if(ProcessDelete(OraclePrimIntComp)) continue;
		
			SiebelPrimIntComp.NewRecord ();
		
			var OracleAcctPhIntComp = OraclePrimIntComp.GetIntComp (""RA_PHONES"");
	
			SiebelPrimIntComp.SetCopySource (OraclePrimIntComp);
			
			// Set the opcode for this component
			SetOperationCode(SiebelPrimIntComp, OraclePrimIntComp);

			SiebelPrimIntComp.CopyFieldValue (""Integration Id"", ""ORIG_SYSTEM_REFERENCE"");				
			SiebelPrimIntComp.CopyFieldValue (""Name"", ""CUSTOMER_NAME"");
			SiebelPrimIntComp.CopyFieldValue (""CSN"", ""CUSTOMER_NUMBER"");
			
			SiebelPrimIntComp.SetFieldValue(""EAI Sync Status Code"", ""Sync from Back Office"");
			SiebelPrimIntComp.SetFieldValue(""EAI Sync Date"", Timestamp());
			SiebelPrimIntComp.SetFieldValue(""EAI Sync Error Text"","""");
			
			SiebelPrimIntComp.CopyFieldValue (""GSA Flag"", ""GSA_INDICATOR"");
			SiebelPrimIntComp.CopyFieldValue (""Home Page"", ""URL"");
			SiebelPrimIntComp.CopyFieldValue (""Price List Integration Id"", ""PRICE_LIST_ID"");
			
			SiebelPrimIntComp.SetFieldValue (""Freight Terms"", FreightVM.Translate(
					OraclePrimIntComp.GetFieldValue (""FREIGHT_TERM"")));

			SiebelPrimIntComp.SetFieldValue (""Type"", AccountCategoryVM.Translate (
				OraclePrimIntComp.GetFieldValue (""CUSTOMER_CATEGORY_CODE"")));

			SiebelPrimIntComp.SetFieldValue (""Account Status"", AccountStatusVM.Translate (
				OraclePrimIntComp.GetFieldValue (""STATUS"")));
			
			//
			// ACCOUNT SYNONYM
			//
			var customerNamePhonetic = 
				OraclePrimIntComp.GetFieldValue(""CUSTOMER_NAME_PHONETIC"").substring(0, 49);
				
			if(customerNamePhonetic != """")
			{
				// Create a new child integration component in the Siebel from
				// Primary integration Component
				var SiebelAccSynIntComp = SiebelPrimIntComp.CreateIntComp (""Account_Account Synonym"");
			
				SiebelAccSynIntComp.NewRecord ();
					
				SetOperationCode(SiebelAccSynIntComp, OraclePrimIntComp);
						
				SiebelAccSynIntComp.SetFieldValue (""Synonym"", customerNamePhonetic);
			} // ACCOUNT SYNONYM
								
			// 
			// ACCOUNT PHONES
			//
			if (OracleAcctPhIntComp.Exists ())
			{
				while (OracleAcctPhIntComp.NextRecord ())
				{
					var OraclePhStatus = OracleAcctPhIntComp.GetFieldValue (""STATUS"");	
					var OraclePhPrimFlg = OracleAcctPhIntComp.GetFieldValue (""PRIMARY_FLAG"");
				 	var OraclePhAddr = OracleAcctPhIntComp.GetFieldValue (""ADDRESS_ID"");
					var OraclePhContact = OracleAcctPhIntComp.GetFieldValue (""CONTACT_ID"");							 	
					// CR: 12-9X2JRV					
					if (OraclePhStatus == ""A"" && OraclePhAddr == """" && OraclePhContact == """")
							TransformPhone (OracleAcctPhIntComp, SiebelPrimIntComp, AccountPhoneVM);
				}
			} // END ACCOUNT PHONES

			//
			// ADDRESSES
			// 
			var OracleAddressIntComp = OraclePrimIntComp.GetIntComp (""RA_ADDRESSES_ALL"");
			
			// Check the validity of the integration component.
			if (OracleAddressIntComp.Exists ())
			{
				// Create the Siebel address integration component in the Siebel primary integration component
				var SiebelAddressIntComp = SiebelPrimIntComp.CreateIntComp (""Account_Business Address"");
								
				// Navigate through all the available records.
				while (OracleAddressIntComp.NextRecord ())
				{
					var OracleAddrPhIntComp = OracleAddressIntComp.GetIntComp (""RA_PHONES2"");

					// Create a new record on the Siebel side.
					SiebelAddressIntComp.NewRecord ();
					
					SiebelAddressIntComp.SetCopySource(OracleAddressIntComp);
					
					// Copy Values from Oracle AddressIntComp to Siebel 
					// AddressIntComp
					//
					// Set the opcode for this component
					SetOperationCode(SiebelAddressIntComp, OracleAddressIntComp);
		
					SiebelAddressIntComp.CopyFieldValue (""Address Active Status"", ""STATUS"");
					SiebelAddressIntComp.CopyFieldValue (""Address Integration Id"", ""ORIG_SYSTEM_REFERENCE"");
					SiebelAddressIntComp.CopyFieldValue (""Street Address"", ""ADDRESS1"");
   					SiebelAddressIntComp.CopyFieldValue (""Street Address 2"", ""ADDRESS2"");
					SiebelAddressIntComp.CopyFieldValue (""City"", ""CITY"");
					SiebelAddressIntComp.CopyFieldValue (""State"", ""STATE"");
					SiebelAddressIntComp.CopyFieldValue (""Province"", ""PROVINCE"");
					SiebelAddressIntComp.CopyFieldValue (""County"", ""COUNTY"");
					SiebelAddressIntComp.CopyFieldValue (""Postal Code"", ""POSTAL_CODE"");
					 
					
					SiebelAddressIntComp.SetFieldValue (""Country"", CountryVM.Translate (
						OracleAddressIntComp.GetFieldValue (""COUNTRY"")));

					// 
					// ADDRESS PHONES
					//
					if (OracleAddrPhIntComp.Exists ())
					{
						while (OracleAddrPhIntComp.NextRecord ())
						{
							var OraclePhStatus = OracleAddrPhIntComp.GetFieldValue (""STATUS"");	
							var OraclePhPrimFlg = OracleAddrPhIntComp.GetFieldValue (""PRIMARY_FLAG"");
						 	var OraclePhContact = OracleAddrPhIntComp.GetFieldValue (""CONTACT_ID"");

						 	// CR: 12-9X2JRV
							if (OraclePhStatus == ""A"" && OraclePhContact == """")
										TransformPhone (OracleAddrPhIntComp, SiebelAddressIntComp, AddressPhoneVM);
						}
					} // END ADDRESS PHONES
				} 
			} // END ADDRESSES
			
			//
			// CONTACTS
			// 
			var OracleContactIntComp = OraclePrimIntComp.GetIntComp (""RA_CONTACTS"");
			
			if (OracleContactIntComp.Exists ())
			{
				var SiebelContactIntComp = SiebelPrimIntComp.CreateIntComp (""Contact"");
			
				while (OracleContactIntComp.NextRecord ())
				{
					var OracleContPhIntComp = OracleContactIntComp.GetIntComp (""RA_PHONES3"");

					SiebelContactIntComp.NewRecord ();

					SiebelContactIntComp.SetCopySource (OracleContactIntComp);
					
					// Set the opcode for this component
					SetOperationCode(SiebelContactIntComp, OracleContactIntComp);
					
					SiebelContactIntComp.CopyFieldValue (""Integration Id"", ""ORIG_SYSTEM_REFERENCE"");
					SiebelContactIntComp.CopyFieldValue (""Last Name"", ""LAST_NAME"");
					SiebelContactIntComp.CopyFieldValue (""Job Title"", ""JOB_TITLE"");
					SiebelContactIntComp.CopyFieldValue (""M/F"", ""SEX_CODE"");
					
					var ContactStatus = OracleContactIntComp.GetFieldValue (""STATUS"");
					if (ContactStatus = ""A"")
						SiebelContactIntComp.SetFieldValue (""Active Status"", ""Y"");
					else
						SiebelContactIntComp.SetFieldValue (""Active Status"", ""N"");
											
					SiebelContactIntComp.SetFieldValue (""M/M"", ContactVM.Translate(
						OracleContactIntComp.GetFieldValue(""TITLE"")));
											
					SiebelContactIntComp.SetFieldValue (""Email Address"", 
						OracleContactIntComp.GetFieldValue (""EMAIL_ADDRESS"").substring(0, 49)); 
					
					SiebelContactIntComp.CopyFieldValue (""Mail Stop"", ""MAIL_STOP"");
					SiebelContactIntComp.CopyFieldValue (""Comment"", ""CONTACT_PERSONAL_INFORMATION"");
					SiebelContactIntComp.CopyFieldValue (""Contact Organization Integration Id"", ""ORG_ID"");
					
					var OraFName = OracleContactIntComp.GetFieldValue (""FIRST_NAME"");
					if(OraFName != """" && OraFName != null)
						SiebelContactIntComp.SetFieldValue (""First Name"", OraFName);
					else
						EAIRaiseError(TranslateMessage(""ORA_MSG_NULL_FIRST_NAME,""));
					    
					// 
					// CONTACT PHONES
					//
					if (OracleContPhIntComp.Exists ())
					{
						while (OracleContPhIntComp.NextRecord ())
						{
							var OraclePhStatus = OracleContPhIntComp.GetFieldValue (""STATUS"");	
							var OraclePhPrimFlg = OracleContPhIntComp.GetFieldValue (""PRIMARY_FLAG"");
						 	// CR: 12-9X2JRV
							if (OraclePhStatus == ""A"")					
								TransformPhone (OracleContPhIntComp, SiebelContactIntComp, ContactPhoneVM);
						}
					} // END CONTACT PHONES				
				} 
			} // END CONTACTS
			
			//
			// CREDIT PROFILES
			// 
			var OracleProfileAmtIntComp = OraclePrimIntComp.GetIntComp (""SIE_CUSTOMER_PROFILE_AMOUNTS"");
			
			if (OracleProfileAmtIntComp.Exists ())
			{
				var SiebelCrdPrfIntComp = SiebelPrimIntComp.CreateIntComp (""Account_Account Credit Profile"");
				
				while (OracleProfileAmtIntComp.NextRecord ())
				{
					SiebelCrdPrfIntComp.NewRecord ();
					
					SiebelCrdPrfIntComp.SetCopySource (OracleProfileAmtIntComp);
					
					SetOperationCode(SiebelCrdPrfIntComp, OracleProfileAmtIntComp);
					
					SiebelCrdPrfIntComp.CopyFieldValue (""Credit Control Area Code"", ""CUSTOMER_PROFILE_AMOUNT_ID"");
					SiebelCrdPrfIntComp.CopyFieldValue (""Credit Limit Amount"", ""OVERALL_CREDIT_LIMIT"");
					SiebelCrdPrfIntComp.CopyFieldValue (""Credit Currency Code"", ""CURRENCY_CODE"");
				}
			} // END CREDIT PROFILES
		} 
	} // END ACCOUNTS
	else
	{
		EAIRaiseError(TranslateMessage(
			""ORA_MSG_MISSING_COMPONENT,RA_CUSTOMERS,Account - Get/Put Siebel Customer (Oracle)""));
	}
}
function ProcessDelete(OracleComp)
{
	// If not a delete return false.
	// If delete (X or D) perform delete through COM interface.  X indicates that
	// there should be a D at a lower level.
	//
	// For Accounts we expect deletes at SIE_CUSTOMER_PROFILE_AMOUNT only.
	//   X  RA_CUSTOMERS
	//   D  SIE_CUSTOMER_PROFILE_AMOUNT
	//
	// Phone Deletes are treated specially
	// We need to first figure out whether it's a Customer Phone,
	// Address Phone or a Contact Phone.

	var opCode;
	var childComp;

	opCode = OracleComp.GetFieldValue(""SysOp"");
	if (opCode == ""D"")
	{
		// Delete of Discount not supported.
		EAIRaiseError(TranslateMessage(""ORA_MSG_INVALID_DELETION,RA_CUSTOMERS""));
	}
	else if (opCode == ""X"")
	{
		// Expect delete within account
		childComp = OracleComp.GetIntComp(""SIE_CUSTOMER_PROFILE_AMOUNT"");

	    if(childComp.Exists() && childComp.NextRecord())
		{
			opCode = childComp.GetFieldValue(""SysOp"");
			if (opCode == ""D"")
			{
				// Delete Credit Profile
				var BusObject = TheApplication().GetBusObject(""Account"");
				var BComp = BusObject.GetBusComp(""Account Credit Profile"");
				BComp.SetViewMode(3);
				BComp.ClearToQuery();
  				BComp.SetSearchSpec(""Credit Control Area Code"",
  				        childComp.GetFieldValue(""CUSTOMER_PROFILE_AMOUNT_ID""));
				BComp.ExecuteQuery();
				BComp.FirstRecord();
				BComp.DeleteRecord();
				BComp.WriteRecord();

				return true;
			}
			else
				EAIRaiseError(TranslateMessage(
					""ORA_MSG_INVALID_SYSOP,""+opCode+"",SIE_CUSTOMER_PROFILE_AMOUNT""));
        }
		else
		{
		  //Phone delete processing
		  childComp = OracleComp.GetIntComp(""RA_PHONES"");
		  if(!childComp.Exists() || !childComp.NextRecord())
		  {
			childComp = OracleComp.GetIntComp(""RA_ADDRESSES_ALL"");

			if(childComp.Exists() && childComp.NextRecord())
			{
				childComp = childComp.GetIntComp(""RA_PHONES2"");

				if(!childComp.Exists() || !childComp.NextRecord())
				{
					EAIRaiseError(TranslateMessage(
						""ORA_MSG_MISSING_COMPONENT, RA_PHONES2, RA_CUSTOMERS""));
				}
		    }
			else
			{
				//see if it's a contact phone
				childComp = OracleComp.GetIntComp(""RA_CONTACTS"");

				if(childComp.Exists() && childComp.NextRecord())
				{
					childComp = childComp.GetIntComp(""RA_PHONES3"");

					if(!childComp.Exists() || !childComp.NextRecord())
					{
						EAIRaiseError(TranslateMessage(
							""ORA_MSG_MISSING_COMPONENT, RA_PHONES3, RA_CUSTOMERS""));
					}
				}
			}//end of contact phone check
		  }//either address or contact phone

		  opCode = childComp.GetFieldValue(""SysOp"");
		  //We still need to check what kind of phone it is
		  //as the receiver may return an incorrect hierarchy
		  //The parent comp is put in this column
		  var SiebelBusComp;
          var ValueMapName;
		  var TableName;
	  	  //Get the parent type.
		  var BusCompType = childComp.GetFieldValue(""ROOT_TBL_PRI_KEY2"");
		  if(BusCompType == 1)
		  {
			SiebelBusComp = ""Account"";
			ValueMapName = ""Oracle Account Phone"";
			TableName = ""RA_PHONE"";
	      }
		  else if(BusCompType == 2)
		  {
			SiebelBusComp = ""Business Address"";
			ValueMapName = ""Oracle Address Phone"";
			TableName = ""RA_PHONE2"";
		  }
		  else if(BusCompType == 3)
		  {
			SiebelBusComp = ""Contact"";
			ValueMapName = ""Oracle Contact Phone"";
			TableName = ""RA_PHONE3"";
		  }
		  else
	 	  {
			/*Add this message
			EAIRaiseError(TranslateMessage(
						""ORA_MSG_INVALID_PHONE, ""+BusCompType+""""));*/
		  }

		  if(opCode == ""D"")
		  {
			var BusObject = TheApplication().GetBusObject(""Account"");
			var BComp = BusObject.GetBusComp(SiebelBusComp);
			BComp.SetViewMode(3);
			BComp.ClearToQuery();
			
			//assume that the receiver sets this from the
			//error message column. The phone type is put in this column.
			var AccountPhoneVM = EAIGetValueMap(ValueMapName, ""Siebel Inbound"");

			//Get the Phone Type which is put in the
			//Error Message column of the notification tbl
			var type = childComp.GetFieldValue(""ERROR_MESSAGE"");

			var SiebelColName = AccountPhoneVM.Translate(type);
			//Empty the field in siebel
			BComp.ActivateField(SiebelColName);
			
			//Get the RowId of the Siebel BusComp
			var rowid = childComp.GetFieldValue(""ORIGINAL_SYSTEM_REFERENCE"");
  			BComp.SetSearchSpec(""Id"", rowid);
			BComp.ExecuteQuery();
			BComp.FirstRecord();

			BComp.SetFieldValue(SiebelColName, """");

			BComp.WriteRecord();

			return true;
		  }
		  else
			EAIRaiseError(TranslateMessage(
				""ORA_MSG_INVALID_SYSOP, ""+opCode+"", ""+TableName+""""));
	 }// end of phone processing
}// if opcode was X
else
	return false;  // Not a delete
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"/**
 * Sets the operation code for this Siebel integration component
 */
function SetOperationCode(SiebelIntComp, OracleIntComp)
{
	var opCode = OracleIntComp.GetFieldValue (""SysOp"");
	if(opCode == ""D"")
		SiebelIntComp.SetFieldValue (""operation"", ""delete"");
	else
		SiebelIntComp.SetFieldValue (""operation"", ""upsert"");
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
 	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
 	  d.getHours(), d.getMinutes(), d.getSeconds());
}
function TransformOracleCustomer (InputMsg, OutputMsg)
{
	var OracleIntObject, SiebelIntObject;
	
	OracleIntObject = InputMsg.GetIntObj (""Account - Get Oracle Customer (Oracle)"");
	
	SiebelIntObject = OutputMsg.CreateIntObj (""Account - Get/Put Oracle Customer (Siebel)"");
	
	while (OracleIntObject.NextInstance ())
	{
		SiebelIntObject.NewInstance (); 

		CopyFields (OracleIntObject, SiebelIntObject);
	}
}
function TransformPhone (OraclePhoneIntComp, SiebelIntComp, PhoneValueMap)
{
	// Declare a variable to hold the Phone type.
	var PhoneType, SiebelPhoneField;
	
	// Get the Phone_Type field from Oracle.
	PhoneType = OraclePhoneIntComp.GetFieldValue(""PHONE_TYPE"");

	// Use the value map to lookup the Phone field in the Siebel Integration Object.
	SiebelPhoneField = PhoneValueMap.Translate(PhoneType);
		  
	if(SiebelPhoneField == """")
	{
		// Exception: Missing phone type
		EAIRaiseError (TranslateMessage(
			""ORA_MSG_MISSING_VALUE_MAPPING,""+PhoneType+"",Oracle Account Phone""));
	} 
		  
	SiebelIntComp.SetFieldValue (SiebelPhoneField, 
		OraclePhoneIntComp.GetFieldValue (""PHONE_NUMBER""));

}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created by Richard Exley - November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
"
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// LAST UPDATED	:	01/03/2001
//
// DESCRIPTION
//    Javascript maps from Oracle11i Customer to Siebel Account
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyFields (OracleIntObject, SiebelIntObject)
{
	var OracleCustomer, SiebelAccount;

	OracleCustomer = OracleIntObject.GetPrimaryIntComp (""HZ_CUST_ACCOUNTS"");

	if (OracleCustomer.Exists ())
	{
		SiebelAccount = SiebelIntObject.CreatePrimaryIntComp (""Account"");
		
		while (OracleCustomer.NextRecord ())
		{
			//
			// ACCOUNTS
			//
			SiebelAccount.NewRecord ();
			SiebelAccount.SetCopySource (OracleCustomer);
			SetOperationCode(SiebelAccount, OracleCustomer);
			
			SiebelAccount.CopyFieldValue (""Integration Id"", ""ORIG_SYSTEM_REFERENCE"");
			SiebelAccount.SetFieldValue  (""EAI Sync Status Code"", ""Sync from Back Office"");
			SiebelAccount.SetFieldValue  (""EAI Sync Date"", Timestamp());
			SiebelAccount.SetFieldValue  (""EAI Sync Error Text"","""");
			SiebelAccount.CopyFieldValue (""CSN"", ""ACCOUNT_NUMBER"");
								
			// 
			// CONTACTS
			//
			var OracleCustContacts = OracleCustomer.GetIntComp (""SIE_CONTACTS_V"");
			
			if (OracleCustContacts.Exists ())
			{
				var SiebelAccountContacts = SiebelAccount.CreateIntComp (""Contact"");
									
				while (OracleCustContacts.NextRecord ())
				{
					SiebelAccountContacts.NewRecord ();
					SiebelAccountContacts.SetCopySource (OracleCustContacts);
					SetOperationCode(SiebelAccountContacts, OracleCustContacts);

					// For all the contacts passed from Oracle to Siebel
					// make the current account as the contact's primary account 
					SiebelAccountContacts.SetFieldValue(""Account Integration Id"", OracleCustomer.GetFieldValue(""ORIG_SYSTEM_REFERENCE""));
					SiebelAccountContacts.CopyFieldValue (""Integration Id"", ""ORIG_SYSTEM_REFERENCE"");
				} 
			} 
																
			// 
			// ADDRESSES
			//
			var OracleCustSites = OracleCustomer.GetIntComp (""SIE_ADDRESSES_V"");
			
			if (OracleCustSites.Exists ())
			{
				var SiebelAccountAddresses = SiebelAccount.CreateIntComp (""Business Address"");
									
				while (OracleCustSites.NextRecord ())
				{
					SiebelAccountAddresses.NewRecord ();
					SiebelAccountAddresses.SetCopySource (OracleCustSites);
					SetOperationCode(SiebelAccountAddresses, OracleCustSites);
					
					SiebelAccountAddresses.CopyFieldValue (""Integration Id"", ""ORIG_SYSTEM_REFERENCE"");
				} 
			} 
		} ///~ while(OracleAccount.NextRecord())
	} ///~ if(OracleAccount.Exists())
	else
	{
		EAIRaiseError (TranslateMessage (
			""ORA_MSG_MISSING_COMPONENT,HZ_CUST_ACCOUNTS,Account - Get Oracle11i Customer (Oracle)""));
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
function SetOperationCode(SiebelIntComp, OracleIntComp)
{
	var opCode = OracleIntComp.GetFieldValue (""SysOp"");
	if(opCode == ""D"")
		SiebelIntComp.SetFieldValue (""operation"", ""delete"");
	else
		SiebelIntComp.SetFieldValue (""operation"", ""upsert"");
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
 	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
 	  d.getHours(), d.getMinutes(), d.getSeconds());
}
function TransformOracleCustomer (InputMsg, OutputMsg)
{
	
	// Declare a variable to hold the Oracle Integration Object
	var OracleIntObject;
	
	// Declare a variable to hold the Siebel Integration Object.
	var SiebelIntObject;	
	
	// Get the Oracle Integration Object from the Input message
	OracleIntObject = InputMsg.GetIntObj (""Account - Get Oracle11i Customer (Oracle)"");
	
	// Check the validity of the Oracle Integration Object.
	if (OracleIntObject.Exists ())
	{
		// Go ahead and create a new Siebel Integration Object on the Output Message.
		SiebelIntObject = OutputMsg.CreateIntObj (""Account - Get Oracle11i Customer (Siebel)"");
		
		// Navigate through all the available instances in the Integration Object
		while (OracleIntObject.NextInstance ())
		{
			// Create a new instance in the Siebel Integration Object
			SiebelIntObject.NewInstance (); 
			// CopyFields is again a user defined function which is written to copy all 
			// the fields from the source to the target.
			CopyFields (OracleIntObject, SiebelIntObject);
		}
	} ///~ if (OracleIntObject.Exists ())
	else
	{
		//Raise an exception saying that the Oracle Integration Object was not found in      
		// the Input message
		EAIRaiseError (TranslateMessage (""ORA_MSG_EMPTY,Account - Get Oracle11i Customer (Oracle)""));
	} ///~ else
} ///~ End of TransformOracleCustomer function."
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// DESCRIPTION
//    Javascript maps from Siebel Account to Oracle Customer
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
"// Set Integration Id for new accounts, contacts or addresses created in Siebel

function AccountLoopBack(InputMsg, OutputMsg)
{
	var SiebelObjectIn, SiebelObjectOut;
	
	var AccCompIn, AccCompOut, 
		AddrCompIn, AddrCompOut, 
		ConCompIn, ConCompOut;
	
	var AccSharedID, AccIntegId, 
		AddrSharedID, AddrIntegId, 
		ConSharedID, ConIntegId; 
	
	/* Check the validation message */
	var ValidationMessage = InputMsg.GetArgument(""Validation Message"");
	
	if (ValidationMessage != """")
	{
		EAIRaiseError(TranslateMessage(ValidationMessage));
	}

	SiebelObjectIn = InputMsg.GetIntObj(""Account - Get/Put Oracle Customer (Siebel)"");
	
	if (SiebelObjectIn.Exists ())
	{
		SiebelObjectOut = OutputMsg.CreateIntObj(""Account - Get/Put Oracle Customer (Siebel)"");
		
		while (SiebelObjectIn.NextInstance ())
		{
			SiebelObjectOut.NewInstance ();

			AccCompIn = SiebelObjectIn.GetPrimaryIntComp (""Account"");

			// 
			// ACCOUNT
			//
			if (AccCompIn.Exists ())
			{
				AccCompOut = SiebelObjectOut.CreatePrimaryIntComp(""Account"");
								
		    	while (AccCompIn.NextRecord ())
				{
					AccCompOut.SetCopySource (AccCompIn);
					
					AccCompOut.NewRecord ();   
						
					AccCompOut.CopyFieldValue(""Id"", ""Id"");
					AccCompOut.SetFieldValue(""EAI Sync Date"", Timestamp());
					
					AccIntegId = AccCompIn.GetFieldValue(""Integration Id"");
	 				if (AccIntegId == """" || AccIntegId == null)
					{
						// New Account
						AccCompOut.CopyFieldValue(""Integration Id"", ""Id"");
						AccCompOut.SetFieldValue(""EAI Sync Status Code"", 
							""Creating in Back Office"");
					}
					else
					{
						// Existing Account
						AccCompOut.CopyFieldValue(""Integration Id"", ""Integration Id"");
						AccCompOut.SetFieldValue(""EAI Sync Status Code"", 
							""Sync To Back Office"");
					}
					AccCompOut.SetFieldValue (""EAI Sync Error Text"","""");
					AccCompOut.SetFieldValue (""EAI Sync Date"", Timestamp());

					//
					// ACCOUNT ADDRESSES
					//		
					var AddrCompIn = AccCompIn.GetIntComp (""Business Address"");
					
					if (AddrCompIn.Exists())
					{
						AddrCompOut = AccCompOut.CreateIntComp(""Business Address"");
									
						while (AddrCompIn.NextRecord())
						{
							AddrCompOut.SetCopySource (AddrCompIn);
				
							AddrCompOut.NewRecord();   
	
							AddrCompOut.CopyFieldValue(""Id"", ""Id"");

							AddrIntegId = AddrCompIn.GetFieldValue(
								""Integration Id"");
								
			 				if (AddrIntegId == """" || AddrIntegId == null)
			 				{
								// New Address
								AddrCompOut.CopyFieldValue(""Integration Id"", ""Id"");
							}
							else
							{
								// Existing Address
								AddrCompOut.CopyFieldValue(""Integration Id"", ""Integration Id"");
							}
						}
					} // END ACCOUNT ADDRESSES
														
					//
					// ACCOUNT CONTACTS
					//		
					var ConCompIn = AccCompIn.GetIntComp (""Contact"");
					
					if (ConCompIn.Exists())
					{
						ConCompOut = AccCompOut.CreateIntComp(""Contact"");
								
						while (ConCompIn.NextRecord())
						{
							ConCompOut.SetCopySource (ConCompIn);
					
							ConCompOut.NewRecord();   
	
							ConCompOut.CopyFieldValue(""Id"", ""Id"");
					
							ConIntegId = ConCompIn.GetFieldValue(
								""Integration Id"");
								
			 				if (ConIntegId == """" || ConIntegId == null)
			 				{
								// New Contact
								ConCompOut.CopyFieldValue(""Integration Id"", ""Id"");
							}
							else
							{
								// Existing Contact
								ConCompOut.CopyFieldValue(""Integration Id"", ""Integration Id"");
							}
						}
					} // END ACCOUNT CONTACTS
				}
			} // END ACCOUNT 
		} 
	} 
	else
	{
		EAIRaiseError (TranslateMessage (
			""ORA_MSG_EMPTY,Account - Get/Put Oracle Customer (Siebel)""));
	}
}
function CopyAddressInfo (OracleCustComp, SiebelAddressIntComp,
	CountryVM, AddrSharedID)
{
	OracleCustComp.SetCopySource (SiebelAddressIntComp);
	
	OracleCustComp.SetFieldValue (""ORIG_SYSTEM_ADDRESS_REF"", AddrSharedID);
	OracleCustComp.CopyFieldValue (""ADDRESS1"", ""Street Address"");
	OracleCustComp.CopyFieldValue (""ADDRESS2"", ""Street Address 2"");
	OracleCustComp.CopyFieldValue (""CITY"", ""City"");
	OracleCustComp.CopyFieldValue (""STATE"", ""State"");
	OracleCustComp.CopyFieldValue (""PROVINCE"", ""Province"");
	OracleCustComp.CopyFieldValue (""COUNTY"", ""County"");
	OracleCustComp.CopyFieldValue (""POSTAL_CODE"", ""Postal Code"");
	OracleCustComp.CopyFieldValue (""ORG_ID"", ""Organization Integration Id"");

	var CountryVal = SiebelAddressIntComp.GetFieldValue(""Country"");
	if ( CountryVal != """" ) 
	{
		OracleCustComp.SetFieldValue (""COUNTRY"",
			CountryVM.Translate (
			SiebelAddressIntComp.GetFieldValue (""Country"")));
	}
	else
	{
		EAIRaiseError(TranslateMessage(""ORA_MSG_INVALID_COUNTRY, NULL""));
	}
}
function CopyContactInfo(OracleContactIntComp, SiebelAccountIntComp, 
	SiebelContactIntComp, ContactInsUpdFlag, 
	ContactTitleVM, AccSharedID, ConSharedID)
{
	OracleContactIntComp.NewRecord();
	OracleContactIntComp.SetCopySource (SiebelContactIntComp);

	OracleContactIntComp.SetFieldValue  (""operation"", ""upsert"");
	OracleContactIntComp.SetFieldValue  (""ORIG_SYSTEM_CUSTOMER_REF"", AccSharedID);
	OracleContactIntComp.SetFieldValue  (""ORIG_SYSTEM_CONTACT_REF"", ConSharedID);
	OracleContactIntComp.SetFieldValue  (""ORIG_SYSTEM_ADDRESS_REF"", """");
	OracleContactIntComp.SetFieldValue  (""ORIG_SYSTEM_TELEPHONE_REF"", """");

	OracleContactIntComp.SetFieldValue  (""INSERT_UPDATE_FLAG"",ContactInsUpdFlag);
	OracleContactIntComp.SetFieldValue  (""CONTACT_TITLE"",
		ContactTitleVM.Translate (SiebelContactIntComp.GetFieldValue (""M/M"")));

    OracleContactIntComp.SetFieldValue  (""CONTACT_JOB_TITLE"", 
    	SiebelContactIntComp.GetFieldValue(""Job Title"").substring(0,49));

    OracleContactIntComp.CopyFieldValue (""CONTACT_LAST_NAME"", ""Last Name"");
    OracleContactIntComp.SetFieldValue  (""CONTACT_FIRST_NAME"", 
    	SiebelContactIntComp.GetFieldValue(""First Name"").substring(0,39));

    OracleContactIntComp.CopyFieldValue (""SEX_CODE"",""M/F"");
    OracleContactIntComp.CopyFieldValue (""EMAIL_ADDRESS"", ""Email Address"");
    OracleContactIntComp.CopyFieldValue (""MAIL_STOP"", ""Mail Stop"");
    OracleContactIntComp.SetFieldValue  (""ORG_ID"", """");
    			
    OracleContactIntComp.SetFieldValue  (""CREATION_DATE"", SiebelContactIntComp.GetFieldValue (""Created""));
    OracleContactIntComp.SetFieldValue  (""LAST_UPDATE_DATE"", SiebelContactIntComp.GetFieldValue (""Updated""));
}
function CopyContactPhoneInfo(SiebelAccountIntComp, SiebelAddressIntComp,
	SiebelContactIntComp,OracleContactIntComp, ContactInsUpdFlag, 
	ContactTitleVM, ContactPhoneVM, AccSharedID, ConSharedID)

{
	var PhoneFields = new Array(""Cellular Phone #"", ""Fax Phone #"",
		""Home Phone #"", ""Work Phone #"", ""Alternate Phone #"", ""Assistant Phone #"");

	var PhoneNumber, PhoneType;	
	
	for ( var i = 0; i < PhoneFields.length; i++ )
	{
		PhoneNumber = SiebelContactIntComp.GetFieldValue (PhoneFields[i]).substring(0,24);

		if (PhoneNumber != """")
		{
			// Fetch the Phone Type from Contact VM
			PhoneType = ContactPhoneVM.Translate(PhoneFields[i]);

			// Copy the Contact details first
			CopyContactInfo(OracleContactIntComp, SiebelAccountIntComp, 
				SiebelContactIntComp, ContactInsUpdFlag,  
				ContactTitleVM, AccSharedID, ConSharedID);

		 	// Copy the Phone details
		 	CopyPhoneInfo(OracleContactIntComp, SiebelAccountIntComp, 
				PhoneType, ContactInsUpdFlag, 
				PhoneNumber, AccSharedID, """", ConSharedID);
		} 
	}
}
function CopyCustomerInfo(OracleCustomerComp, SiebelAccountIntComp,
	InsertUpdateFlag, CusType, AccountCategoryVM, AccountStatusVM,
	AccSharedID)
{
	OracleCustomerComp.SetCopySource (SiebelAccountIntComp); 
	OracleCustomerComp.SetFieldValue (""operation"", ""upsert"");

	OracleCustomerComp.SetFieldValue  (""INSERT_UPDATE_FLAG"", InsertUpdateFlag);
	OracleCustomerComp.SetFieldValue  (""ORIG_SYSTEM_CUSTOMER_REF"", AccSharedID);
	OracleCustomerComp.SetFieldValue  (""ORIG_SYSTEM_ADDRESS_REF"", """");
	OracleCustomerComp.SetFieldValue  (""SITE_USE_CODE"", """");
	OracleCustomerComp.CopyFieldValue (""ORG_ID"",  ""Account Organization Integration Id"");
	OracleCustomerComp.SetFieldValue  (""CUSTOMER_NAME"", 
		SiebelAccountIntComp.GetFieldValue(""Name"").substring(0,49));
	OracleCustomerComp.SetFieldValue  (""CUSTOMER_TYPE"", CusType);
	OracleCustomerComp.CopyFieldValue (""URL"", ""Home Page"");

	var CustomerTypeVal = SiebelAccountIntComp.GetFieldValue (""Type"");
	if ( CustomerTypeVal != """") 
	{
		OracleCustomerComp.SetFieldValue (""CUSTOMER_CATEGORY_CODE"",
			AccountCategoryVM.Translate (SiebelAccountIntComp.GetFieldValue (""Type"")));
	}
	else
	{
		EAIRaiseError(TranslateMessage(""ORA_MSG_INVALID_CUST_CATEGORY, NULL""));
	}

	var CustomerStatusVal = SiebelAccountIntComp.GetFieldValue (""Account Status"");
	if ( CustomerStatusVal != """") 
	{

		OracleCustomerComp.SetFieldValue (""CUSTOMER_STATUS"",
			AccountStatusVM.Translate ( SiebelAccountIntComp.GetFieldValue (""Account Status"")));
	}
	else
	{
		EAIRaiseError(TranslateMessage (""ORA_MSG_INVALID_CUST_STATUS, null""));
	}

	OracleCustomerComp.CopyFieldValue (""CREATION_DATE"", ""Created"");
	OracleCustomerComp.CopyFieldValue (""LAST_UPDATE_DATE"", ""Updated"");
}
function CopyFields (SiebelIntObject, OracleIntObject, OutputMsg)
{
	// Declare variables to hold the Primary Integration Components
	var SiebelAccountIntComp, OracleCustomerIntComp;
	
	// Variables to hold the Oracle Contact and Oracle Profile integration Components.
	var OracleContactIntComp, OracleProfileIntComp;
	
	// Declare Shared ID's and misc. variables
	var AccSharedID, AccIntegId, InsertUpdateFlag, 
		AddrSharedID, AddrIntegId, AddrInsUpdFlag, AddressCount,
		ConSharedID, ConIntegId, ContactInsUpdFlag,
		PhoneNumber, PhoneType, PhoneField;
	
	// Customer Type should either External(""E"") or Internal(""I"") at oracle side
	var  CusType		= ""R"";
	var  ProfileClass 	= ""Default"";
	var  CreditHold 	= ""N"";
	
	// Open the EAI Value Map for Account here.
	var CountryVM 		 = EAIGetValueMap(""Oracle Country"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var AccountStatusVM  = EAIGetValueMap(""Oracle Account Status"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var AccountPhoneVM 	 = EAIGetValueMap(""Oracle Account Phone"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var AddressPhoneVM 	 = EAIGetValueMap(""Oracle Address Phone"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var ContactPhoneVM 	 = EAIGetValueMap(""Oracle Contact Phone"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var AccountCategoryVM= EAIGetValueMap(""Oracle Account Category"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var ContactTitleVM   = EAIGetValueMap(""Oracle Contact Title"", ""Siebel Outbound"");

	//Get the primary integration component from the Siebel Integration Object
	SiebelAccountIntComp = SiebelIntObject.GetPrimaryIntComp (""Account"");
	
	// If the Primary Integration Component is valid, then go ahead with the copying process
	// Else raise an error message.
	if (SiebelAccountIntComp.Exists ())
	{
		// Create the Oracle Integration Components 
		OracleCustomerIntComp =
			OracleIntObject.CreatePrimaryIntComp(""SIE_CUSTOMERS_INTERFACE_ALL"");
						
		// Navigate through all the available records in the Siebel primary integration component
    	while (SiebelAccountIntComp.NextRecord ())
		{
			// Create a new record in the Oracle Primary Integration Object
			OracleCustomerIntComp.NewRecord ();   
					
			OracleContactIntComp = 
				OracleCustomerIntComp.CreateIntComp(""SIE_CONTACT_PHONES_INT_ALL"");
			OracleProfileIntComp = 
				OracleCustomerIntComp.CreateIntComp(""SIE_CUSTOMER_PROFILES_INT_ALL"");
			
			// 
			// ACCOUNT
			//
			AccIntegId = SiebelAccountIntComp.GetFieldValue(""Integration Id"");
 			if (AccIntegId == """" || AccIntegId == null)
			{
				// New Account
				AccSharedID = SiebelAccountIntComp.GetFieldValue(""Id"");
				InsertUpdateFlag = ""I"";
			}
			else
			{
				// Existing Account
				AccSharedID = AccIntegId;
				InsertUpdateFlag = ""U"";
			}

			OutputMsg.SetArgument(""ObjectIntegrationId"", AccSharedID);
			
			// set values in SIE_CUSTOMERS_INTERFACE_ALL
			CopyCustomerInfo(OracleCustomerIntComp, SiebelAccountIntComp,
				InsertUpdateFlag, CusType, AccountCategoryVM, AccountStatusVM,
				AccSharedID);
			
			// set values in SIE_CUSTOMER_PROFILES_INT_ALL		
			// Inserting a profile class for the Account in SIE_CUSTOMER_PROFILES_INT_ALL
			if (InsertUpdateFlag == ""I"")
			{
				OracleProfileIntComp.NewRecord();
				CopyProfileInfo (OracleProfileIntComp, SiebelAccountIntComp,
					ProfileClass, CreditHold, InsertUpdateFlag, 
					AccSharedID, """");
			}
											
			// Set the copy source to SiebelAccountIntComp
			OracleContactIntComp.SetCopySource (SiebelAccountIntComp);
			
			PhoneField = ""Main Phone Number"";
			PhoneNumber = SiebelAccountIntComp.GetFieldValue(PhoneField).substring(0,24);
			if (PhoneNumber != """")
			{
				OracleContactIntComp.NewRecord();
				PhoneType = AccountPhoneVM.Translate(PhoneField);
								
				// Call the function CopyPhoneInfo to copy the common fields.
				CopyPhoneInfo (OracleContactIntComp, SiebelAccountIntComp, 
					PhoneType, InsertUpdateFlag, 
					PhoneNumber, AccSharedID, """", """");
			}
			
			PhoneField = ""Main Fax Number"";
			PhoneNumber = SiebelAccountIntComp.GetFieldValue(PhoneField).substring(0,24);
			if (PhoneNumber != """")
			{
				OracleContactIntComp.NewRecord();
				PhoneType = AccountPhoneVM.Translate(PhoneField);
								
				// Call the function CopyPhoneInfo to copy the common fields.
				CopyPhoneInfo (OracleContactIntComp, SiebelAccountIntComp, 
					PhoneType, InsertUpdateFlag, 
					PhoneNumber, AccSharedID, """", """");
			}
			
			//
			// ACCOUNT ADDRESSES
			//		
			var SiebelAddressIntComp = SiebelAccountIntComp.GetIntComp (""Business Address"");
			
			// Check the validity of the integration component.
			if (SiebelAddressIntComp.Exists())
			{
				AddressCount = 1;

				// Navigate through all the available records.
				while (SiebelAddressIntComp.NextRecord())
				{
					AddrIntegId = SiebelAddressIntComp.GetFieldValue(""Integration Id"");
		 			if (AddrIntegId == """" || AddrIntegId == null)
					{
						// New Address
						AddrSharedID = SiebelAddressIntComp.GetFieldValue(""Id"");
						AddrInsUpdFlag = ""I"";
					}
					else
					{
						// Existing Address
						AddrSharedID = AddrIntegId;
						AddrInsUpdFlag = ""U"";
					}
								
					if (AddressCount > 1)
					{	
						// Create a new customer interface record.
						OracleIntObject.NewInstance ();
						var NewOracleCustIntComp =				
							OracleIntObject.CreatePrimaryIntComp(""SIE_CUSTOMERS_INTERFACE_ALL"");				
						NewOracleCustIntComp.NewRecord ();
						
						// Set customer info
						CopyCustomerInfo(NewOracleCustIntComp, SiebelAccountIntComp,
							AddrInsUpdFlag, CusType, AccountCategoryVM, AccountStatusVM,
							AccSharedID);

						// Copy Address Details
						CopyAddressInfo (NewOracleCustIntComp, SiebelAddressIntComp,
							CountryVM, AddrSharedID);	

						// Copy Site Use Details for the address																		
						CopySiteUseInfo(NewOracleCustIntComp, OracleProfileIntComp, 
							SiebelAccountIntComp, SiebelAddressIntComp, 
							AccountStatusVM, CountryVM, 
							AccountCategoryVM, AddrInsUpdFlag, OracleIntObject,
							AccSharedID, AddrSharedID);
					}
					else
					{
						// Copy Address Details
						CopyAddressInfo (OracleCustomerIntComp, SiebelAddressIntComp,
							CountryVM, AddrSharedID);	

						// Copy Site Use Details for the address																		
						CopySiteUseInfo(OracleCustomerIntComp, OracleProfileIntComp, 
							SiebelAccountIntComp, SiebelAddressIntComp, 
							AccountStatusVM, CountryVM, 
							AccountCategoryVM, AddrInsUpdFlag, OracleIntObject,
							AccSharedID, AddrSharedID);
					}

					PhoneField = ""Phone Number"";
					PhoneNumber = SiebelAddressIntComp.GetFieldValue(PhoneField).substring(0,24);
					if (PhoneNumber != """")
					{
						OracleContactIntComp.NewRecord();
						PhoneType = AddressPhoneVM.Translate(PhoneField);
										
						// Call the function CopyPhoneInfo to copy the common fields.
						CopyPhoneInfo (OracleContactIntComp, SiebelAccountIntComp, 
							PhoneType, InsertUpdateFlag, 
							PhoneNumber, AccSharedID, AddrSharedID, """");
					}

					PhoneField = ""Fax Number"";
					PhoneNumber = SiebelAddressIntComp.GetFieldValue(PhoneField).substring(0,24);
					if (PhoneNumber != """")
					{
						OracleContactIntComp.NewRecord();
						PhoneType = AddressPhoneVM.Translate(PhoneField);
										
						CopyPhoneInfo (OracleContactIntComp, SiebelAccountIntComp, 
							PhoneType, InsertUpdateFlag, 
							PhoneNumber, AccSharedID, AddrSharedID, """");
					}

					AddressCount++;
				}
			}
			
			//
			// ACCOUNT CONTACTS
			//									
			var SiebelContactIntComp = SiebelAccountIntComp.GetIntComp (""Contact"");

			// Set the copy source as the Siebel Child Integration Component
			// Check the validity of the integration component.
			if (SiebelContactIntComp.Exists())
			{
				while (SiebelContactIntComp.NextRecord ())
				{
					// Only send this contact if we are the primary account for it
					if (SiebelContactIntComp.GetFieldValue(""Account Id"") !=
					   SiebelAccountIntComp.GetFieldValue(""Id""))
					   	continue;
													 
					ConIntegId = SiebelContactIntComp.GetFieldValue(""Integration Id"");
		 			if (ConIntegId == """" || ConIntegId == null)
					{
						// New Contact
						ConSharedID = SiebelContactIntComp.GetFieldValue(""Id"");
						ContactInsUpdFlag = ""I"";
					}
					else
					{
						// Existing Contact
						ConSharedID = ConIntegId;
						ContactInsUpdFlag = ""U"";
					}
					
					// Copy the Contact Details
					CopyContactInfo(OracleContactIntComp, SiebelAccountIntComp, 
						SiebelContactIntComp, ContactInsUpdFlag, 
						ContactTitleVM, AccSharedID, ConSharedID);
					 	
					// Copy the Siebel phone number, telephone reference etc.,
					CopyContactPhoneInfo(SiebelAccountIntComp, SiebelAddressIntComp, 
						SiebelContactIntComp, OracleContactIntComp, ContactInsUpdFlag, 
						ContactTitleVM, ContactPhoneVM, AccSharedID, 
						ConSharedID);
				} 
			} 
		} ///~ while(SiebelAccountIntComp.NextRecord())
	} ///~ if(SiebelAccountIntComp.Exists())
	else
	{
		// Raise an exception saying that the primary integration component is not found.
		EAIRaiseError (TranslateMessage (""ORA_MSG_MISSING_COMPONENT,Account,Account - Get/Put Oracle Customer (Siebel)""));
	}
}
function CopyPhoneInfo(OracleContactIntComp, SiebelAccountIntComp,
	PhoneType, InsertUpdateFlag, PhoneNumber, 
	AccSharedID, AddrSharedID, ConSharedID)
{
	OracleContactIntComp.SetFieldValue(""operation"", ""upsert"");
	OracleContactIntComp.SetFieldValue(""TELEPHONE"", PhoneNumber);		  
	OracleContactIntComp.SetFieldValue(""ORIG_SYSTEM_CUSTOMER_REF"", AccSharedID);	  				 
	OracleContactIntComp.SetFieldValue(""ORIG_SYSTEM_ADDRESS_REF"", AddrSharedID);
	OracleContactIntComp.SetFieldValue(""ORIG_SYSTEM_CONTACT_REF"", ConSharedID);
	OracleContactIntComp.SetFieldValue(""ORIG_SYSTEM_TELEPHONE_REF"", 
		AccSharedID+"":""+AddrSharedID+"":""+ConSharedID+"":""+PhoneType);

	OracleContactIntComp.SetFieldValue(""TELEPHONE_TYPE"", PhoneType);
	OracleContactIntComp.SetFieldValue(""INSERT_UPDATE_FLAG"", InsertUpdateFlag);  
	
	OracleContactIntComp.SetFieldValue(""CREATION_DATE"", SiebelAccountIntComp.GetFieldValue (""Created""));
	OracleContactIntComp.SetFieldValue(""LAST_UPDATE_DATE"", SiebelAccountIntComp.GetFieldValue (""Updated""));
}
function CopyProfileInfo (OracleProfileIntComp, SiebelAccountIntComp,
	ProfileClass, CreditHold, InsertUpdateFlag, 
	AccSharedID, AddrSharedID)
{ 
	OracleProfileIntComp.SetCopySource(SiebelAccountIntComp);

	OracleProfileIntComp.SetFieldValue  (""operation"", ""upsert"");
	OracleProfileIntComp.SetFieldValue  (""CUSTOMER_PROFILE_CLASS_NAME"", ProfileClass);
	OracleProfileIntComp.SetFieldValue  (""CREDIT_HOLD"", CreditHold);
	OracleProfileIntComp.SetFieldValue  (""INSERT_UPDATE_FLAG"", InsertUpdateFlag);
	OracleProfileIntComp.SetFieldValue  (""ORIG_SYSTEM_CUSTOMER_REF"", AccSharedID);
	OracleProfileIntComp.SetFieldValue  (""ORIG_SYSTEM_ADDRESS_REF"", AddrSharedID);
	OracleProfileIntComp.CopyFieldValue (""ORG_ID"", ""Account Organization Integration Id"");
	
	OracleProfileIntComp.CopyFieldValue (""CREATION_DATE"", ""Created"");
	OracleProfileIntComp.CopyFieldValue (""LAST_UPDATE_DATE"", ""Updated"");
}
function CopySiteUseInfo (OracleCustomerIntComp, OracleProfileIntComp, 
							   SiebelAccountIntComp, SiebelAddressIntComp, 
							   AccountStatusVM, CountryVM,
							   AccountCategoryVM, InsertUpdateFlag, OracleIntObject,
							   AccSharedID, AddrSharedID)
{
	var AddrSharedID;
	var SiteUseList = new Array();
	var PrimarySiteUseList = new Array();
	var SiteUseCount = 0;
	var NewOracleCustomerIntComp;
	
	// Get the Address & Address Integration Id
	var AddrId  		= SiebelAddressIntComp.GetFieldValue (""Id"");
	var AddrIntId 		= SiebelAddressIntComp.GetFieldValue (""Integration Id"");

	var BillToSiteUse = null, ShipToSiteUse = null, GeneralSiteUse = null;
	
	var CusType			= ""R"";
	var ProfileClass	= ""Default"";
	var CreditHold		= ""N"";

	if (AddrIntId == """" || AddrIntId == null)
	{
		// New Address
		AddrSharedID = AddrId;
	}
	else
	{
		// Existing Address so nothing to do
		// (We don't support changing site uses)
		return;
	}
		
	if (SiebelAddressIntComp.GetFieldValue (""Bill Address Flag"") == ""Y"")
	{
		SiteUseList[SiteUseCount] = ""BILL_TO"";
		PrimarySiteUseList[SiteUseCount++] = 
			(AddrId == SiebelAccountIntComp.GetFieldValue (""Primary Bill To Address Id"")) ? ""Y"" : ""N""
	}
	
	if (SiebelAddressIntComp.GetFieldValue (""Ship Address Flag"") == ""Y"")
	{
		SiteUseList[SiteUseCount] = ""SHIP_TO"";
		PrimarySiteUseList[SiteUseCount++] = 
			(AddrId == SiebelAccountIntComp.GetFieldValue (""Primary Ship To Address Id"")) ? ""Y"" : ""N""
	}
	
	if (SiebelAddressIntComp.GetFieldValue (""Main Address Flag"") == ""Y"")
	{
		SiteUseList[SiteUseCount] = ""GENERAL"";
		PrimarySiteUseList[SiteUseCount++] = 
			(AddrId == SiebelAccountIntComp.GetFieldValue (""Primary Address Id"")) ? ""Y"" : ""N""
	}
	
    for ( var i = 0; i < SiteUseList.length; i++ )
    {
		if (SiteUseList[i] == ""BILL_TO"")
	    {
			// Create new profile for BILL_TO
	 		OracleProfileIntComp.NewRecord();
			// Copy the Address Id from the Address Integration Component
			CopyProfileInfo ( OracleProfileIntComp, SiebelAccountIntComp,
				ProfileClass, CreditHold, ""I"", 
				AccSharedID, AddrSharedID);					
	    }
	    
		if (i > 0)
		{
			// Need new customer interface record
			OracleIntObject.NewInstance ();
			NewOracleCustomerIntComp =				
				OracleIntObject.CreatePrimaryIntComp(""SIE_CUSTOMERS_INTERFACE_ALL"");				
			NewOracleCustomerIntComp.NewRecord ();

			CopyCustomerInfo(NewOracleCustomerIntComp, SiebelAccountIntComp,
				""I"", CusType, AccountCategoryVM, AccountStatusVM,
				AccSharedID);
			CopyAddressInfo (NewOracleCustomerIntComp, SiebelAddressIntComp,
				CountryVM, AddrSharedID);	

	    	NewOracleCustomerIntComp.SetFieldValue (""SITE_USE_CODE"", SiteUseList[i]);
	    	NewOracleCustomerIntComp.SetFieldValue (""PRIMARY_SITE_USE_FLAG"", PrimarySiteUseList[i]);
		}
		else
		{
	    	// Use existing customer interface record
	    	OracleCustomerIntComp.SetFieldValue (""SITE_USE_CODE"", SiteUseList[i]);
	    	OracleCustomerIntComp.SetFieldValue (""INSERT_UPDATE_FLAG"", ""I"");
	    	OracleCustomerIntComp.SetFieldValue (""PRIMARY_SITE_USE_FLAG"", PrimarySiteUseList[i]);
		}
    }
}
"// Map Siebel Account to Oracle Customer
// Returns argument ""ObjectIntegrationId""
function CreateSiebelCustomer(InputMsg, OutputMsg)
{
	var SiebelIntObject, OracleIntObject;
	
	OutputMsg.SetArgument(""ObjectIntegrationId"", """");

	SiebelIntObject = InputMsg.GetIntObj(""Account - Get/Put Oracle Customer (Siebel)"");
	
	// Check the validity of the Siebel Integration Object.
	if (SiebelIntObject.Exists ())
	{
		// Go ahead and create a new Oracle Integration Object on the Output Message.
		OracleIntObject = OutputMsg.CreateIntObj(""Account - Put Oracle Customer (Oracle)"");
		
		// Navigate through all the available instances in the Integration Object
		while (SiebelIntObject.NextInstance ())
		{
			// Create a new instance in the Oracle Integration Object
			OracleIntObject.NewInstance ();
			
			// CopyFields is again a user defined function which is written to copy all // the fields from the source to the target.
			CopyFields (SiebelIntObject, OracleIntObject, OutputMsg);
		} ///~ while(SiebelIntObject.NextInstance())
	} ///~ if(SiebelIntObject.Exists())
	else
	{
		// Raise an exception saying that the Siebel Integration Object was not found in
		// the Input message. Actually we don't have to do this because, the workflow
		// system itself will inform the user with an Error message.
		EAIRaiseError (TranslateMessage (""ORA_MSG_EMPTY,Account - Get/Put Oracle Customer (Siebel)""));
	} ///~ else

}  ///~ End of CreateSiebelAccount function."
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
 	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
 	  d.getHours(), d.getMinutes(), d.getSeconds());
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// LAST UPDATED	:	01/03/2001
//
// DESCRIPTION
//    Javascript maps from Oracle11i Customer to Siebel Account
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function AccountLoopBack(InputMsg, OutputMsg)
{
	var SiebelObjectIn, SiebelObjectOut;
	
	var AccCompIn, AccCompOut, 
		AddrCompIn, AddrCompOut, 
		ConCompIn, ConCompOut;
	
	var AccSharedID, AccIntegId, 
		AddrSharedID, AddrIntegId, 
		ConSharedID, ConIntegId; 
	
	/* Check the validation message */
	var ValidationMessage = InputMsg.GetArgument(""Validation Message"");
	
	if (ValidationMessage != """")
	{
		EAIRaiseError(TranslateMessage(ValidationMessage));
	}

	SiebelObjectIn = InputMsg.GetIntObj(""Account - Put Oracle11i Customer (Siebel)"");
	
	if (SiebelObjectIn.Exists ())
	{
		SiebelObjectOut = OutputMsg.CreateIntObj(""Account - Put Oracle11i Customer (Siebel)"");
		
		while (SiebelObjectIn.NextInstance ())
		{
			SiebelObjectOut.NewInstance ();

			AccCompIn = SiebelObjectIn.GetPrimaryIntComp (""Account"");

			// 
			// ACCOUNT
			//
			if (AccCompIn.Exists ())
			{
				AccCompOut = SiebelObjectOut.CreatePrimaryIntComp(""Account"");
								
		    	while (AccCompIn.NextRecord ())
				{
					AccCompOut.SetCopySource (AccCompIn);
					
					AccCompOut.NewRecord ();   
						
					AccCompOut.CopyFieldValue(""Id"", ""Id"");
					AccCompOut.SetFieldValue(""EAI Sync Date"", Timestamp());
					
					AccIntegId = AccCompIn.GetFieldValue(""Integration Id"");
	 				if (AccIntegId == """" || AccIntegId == null)
					{
						// New Account
						AccCompOut.CopyFieldValue(""Integration Id"", ""Id"");
						AccCompOut.SetFieldValue(""EAI Sync Status Code"", 
							""Creating in Back Office"");
					}
					else
					{
						// Existing Account
						AccCompOut.CopyFieldValue(""Integration Id"", ""Integration Id"");
						AccCompOut.SetFieldValue(""EAI Sync Status Code"", 
							""Sync To Back Office"");
					}
					
					AccCompOut.SetFieldValue (""EAI Sync Error Text"","""");

					//
					// ACCOUNT ADDRESSES
					//		
					var AddrCompIn = AccCompIn.GetIntComp (""Business Address"");
					
					if (AddrCompIn.Exists())
					{
						AddrCompOut = AccCompOut.CreateIntComp(""Business Address"");
									
						while (AddrCompIn.NextRecord())
						{
							AddrCompOut.SetCopySource (AddrCompIn);
				
							AddrCompOut.NewRecord();   
	
							AddrCompOut.CopyFieldValue(""Id"", ""Id"");

							AddrIntegId = AddrCompIn.GetFieldValue(
								""Integration Id"");
								
			 				if (AddrIntegId == """" || AddrIntegId == null)
			 				{
								// New Address
								AddrCompOut.CopyFieldValue(""Integration Id"", ""Id"");
							}
							else
							{
								// Existing Address
								AddrCompOut.CopyFieldValue(""Integration Id"", ""Integration Id"");
							}
						}
					} // END ACCOUNT ADDRESSES
														
					//
					// ACCOUNT CONTACTS
					//		
					var ConCompIn = AccCompIn.GetIntComp (""Contact"");
					
					if (ConCompIn.Exists())
					{
						ConCompOut = AccCompOut.CreateIntComp(""Contact"");
								
						while (ConCompIn.NextRecord())
						{
							ConCompOut.SetCopySource (ConCompIn);
					
							ConCompOut.NewRecord();   
	
							ConCompOut.CopyFieldValue(""Id"", ""Id"");
					
							ConIntegId = ConCompIn.GetFieldValue(
								""Integration Id"");
								
			 				if (ConIntegId == """" || ConIntegId == null)
			 				{
								// New Contact
								ConCompOut.CopyFieldValue(""Integration Id"", ""Id"");
							}
							else
							{
								// Existing Contact
								ConCompOut.CopyFieldValue(""Integration Id"", ""Integration Id"");
							}
						}
					} // END ACCOUNT CONTACTS
				}
			} // END ACCOUNT 
		} 
	} 
	else
	{
		EAIRaiseError (TranslateMessage (
			""ORA_MSG_EMPTY,Account - Put Oracle11i Customer (Siebel)""));
	}
}
function CopyAddressInfo (OracleCustComp, SiebelAddressIntComp,
	CountryVM, AddrSharedID)
{
	OracleCustComp.SetCopySource (SiebelAddressIntComp);
	
	OracleCustComp.SetFieldValue  (""ORIG_SYSTEM_ADDRESS_REF"", AddrSharedID);
	OracleCustComp.CopyFieldValue (""ADDRESS1"", ""Street Address"");
	OracleCustComp.CopyFieldValue (""ADDRESS2"", ""Street Address 2"");
	OracleCustComp.CopyFieldValue (""CITY"", ""City"");
	OracleCustComp.CopyFieldValue (""STATE"", ""State"");
	OracleCustComp.CopyFieldValue (""PROVINCE"", ""Province"");
	OracleCustComp.CopyFieldValue (""COUNTY"", ""County"");
	OracleCustComp.CopyFieldValue (""POSTAL_CODE"", ""Postal Code"");
	OracleCustComp.CopyFieldValue (""ORG_ID"", ""Organization Integration Id"");
	

	var CountryVal = SiebelAddressIntComp.GetFieldValue(""Country"");
	if ( CountryVal != """" ) 
	{
		OracleCustComp.SetFieldValue (""COUNTRY"",
			CountryVM.Translate (
			SiebelAddressIntComp.GetFieldValue (""Country"")));
	}
	else
	{
		EAIRaiseError(TranslateMessage(""ORA_MSG_INVALID_COUNTRY,NULL""));
	}
}
function CopyContactInfo(OracleContactIntComp, SiebelAccountIntComp, 
	SiebelContactIntComp, ContactInsUpdFlag, 
	ContactTitleVM, AccSharedID, ConSharedID)
{
	OracleContactIntComp.NewRecord();
	OracleContactIntComp.SetCopySource (SiebelContactIntComp);

	OracleContactIntComp.SetFieldValue  (""operation"", ""upsert"");
	OracleContactIntComp.SetFieldValue  (""ORIG_SYSTEM_CUSTOMER_REF"", AccSharedID);
	OracleContactIntComp.SetFieldValue  (""ORIG_SYSTEM_CONTACT_REF"", ConSharedID);
	OracleContactIntComp.SetFieldValue  (""ORIG_SYSTEM_ADDRESS_REF"", """");
	OracleContactIntComp.SetFieldValue  (""ORIG_SYSTEM_TELEPHONE_REF"", """");

	OracleContactIntComp.SetFieldValue  (""INSERT_UPDATE_FLAG"",ContactInsUpdFlag);
	OracleContactIntComp.SetFieldValue  (""CONTACT_TITLE"",
		ContactTitleVM.Translate (SiebelContactIntComp.GetFieldValue (""M/M"")));

    OracleContactIntComp.SetFieldValue  (""CONTACT_JOB_TITLE"", 
    	SiebelContactIntComp.GetFieldValue(""Job Title"").substring(0,49));

    OracleContactIntComp.CopyFieldValue (""CONTACT_LAST_NAME"", ""Last Name"");
    OracleContactIntComp.SetFieldValue  (""CONTACT_FIRST_NAME"", 
    	SiebelContactIntComp.GetFieldValue(""First Name"").substring(0,39));

    OracleContactIntComp.CopyFieldValue (""SEX_CODE"",""M/F"");
    OracleContactIntComp.CopyFieldValue (""EMAIL_ADDRESS"", ""Email Address"");
    OracleContactIntComp.CopyFieldValue (""MAIL_STOP"", ""Mail Stop"");
    OracleContactIntComp.SetFieldValue  (""ORG_ID"", """");
	
	OracleContactIntComp.SetFieldValue (""CREATED_BY"", ""-1"");
	OracleContactIntComp.SetFieldValue (""LAST_UPDATED_BY"", ""-1"");	
    OracleContactIntComp.SetFieldValue  (""CREATION_DATE"", SiebelContactIntComp.GetFieldValue (""Created""));
    OracleContactIntComp.SetFieldValue  (""LAST_UPDATE_DATE"", SiebelContactIntComp.GetFieldValue (""Updated""));
}
function CopyContactPhoneInfo(SiebelAccountIntComp, SiebelAddressIntComp,
	SiebelContactIntComp,OracleContactIntComp, ContactInsUpdFlag, 
	ContactTitleVM, ContactPhoneVM, AccSharedID, ConSharedID)

{
	var PhoneFields = new Array(""Cellular Phone #"", ""Fax Phone #"",
		""Home Phone #"", ""Work Phone #"", ""Alternate Phone #"", ""Assistant Phone #"");

	var PhoneNumber, PhoneType;	
	
	for ( var i = 0; i < PhoneFields.length; i++ )
	{
		PhoneNumber = SiebelContactIntComp.GetFieldValue (PhoneFields[i]).substring(0,24);

		if (PhoneNumber != """")
		{
			// Fetch the Phone Type from Contact VM
			PhoneType = ContactPhoneVM.Translate(PhoneFields[i]);

			// Copy the Contact details first
			CopyContactInfo(OracleContactIntComp, SiebelAccountIntComp, 
				SiebelContactIntComp, ContactInsUpdFlag, 
				ContactTitleVM, AccSharedID, ConSharedID);

		 	// Copy the Phone details
		 	CopyPhoneInfo(OracleContactIntComp, SiebelAccountIntComp, 
				PhoneType, ContactInsUpdFlag, 
				PhoneNumber, AccSharedID, """", ConSharedID);
		} 
	}
}
function CopyCustomerInfo(OracleCustomerComp, SiebelAccountIntComp,
	InsertUpdateFlag, CusType, AccountCategoryVM, AccountStatusVM,
	AccSharedID)
{
	OracleCustomerComp.SetCopySource (SiebelAccountIntComp); 
	OracleCustomerComp.SetFieldValue (""operation"", ""upsert"");

	OracleCustomerComp.SetFieldValue  (""INSERT_UPDATE_FLAG"", InsertUpdateFlag);
	OracleCustomerComp.SetFieldValue  (""ORIG_SYSTEM_CUSTOMER_REF"", AccSharedID);
	OracleCustomerComp.SetFieldValue  (""ORIG_SYSTEM_ADDRESS_REF"", """");
	OracleCustomerComp.SetFieldValue  (""SITE_USE_CODE"", """");
	OracleCustomerComp.CopyFieldValue (""ORG_ID"",  ""Account Organization Integration Id"");
	OracleCustomerComp.SetFieldValue  (""CUSTOMER_NAME"", 
		SiebelAccountIntComp.GetFieldValue(""Name"").substring(0,49));
	OracleCustomerComp.SetFieldValue  (""CUSTOMER_TYPE"", CusType);
	OracleCustomerComp.CopyFieldValue (""URL"", ""Home Page"");

	var CustomerTypeVal = SiebelAccountIntComp.GetFieldValue (""Type"");
	if ( CustomerTypeVal != """") 
	{
		OracleCustomerComp.SetFieldValue (""CUSTOMER_CATEGORY_CODE"",
			AccountCategoryVM.Translate (SiebelAccountIntComp.GetFieldValue (""Type"")));
	}
	else
	{
		EAIRaiseError(TranslateMessage(""ORA_MSG_INVALID_CUST_CATEGORY, NULL""));
	}

	var CustomerStatusVal = SiebelAccountIntComp.GetFieldValue (""Account Status"");
	if ( CustomerStatusVal != """") 
	{

		OracleCustomerComp.SetFieldValue (""CUSTOMER_STATUS"",
			AccountStatusVM.Translate ( SiebelAccountIntComp.GetFieldValue (""Account Status"")));
	}
	else
	{
		EAIRaiseError(TranslateMessage (""ORA_MSG_INVALID_CUST_STATUS, null""));
	}

	OracleCustomerComp.SetFieldValue (""CREATED_BY"", ""-1"");
	OracleCustomerComp.SetFieldValue (""LAST_UPDATED_BY"", ""-1"");	
	OracleCustomerComp.CopyFieldValue (""CREATION_DATE"", ""Created"");
	OracleCustomerComp.CopyFieldValue (""LAST_UPDATE_DATE"", ""Updated"");
}
function CopyFields (SiebelIntObject, OracleIntObject, OutputMsg)
{
	// Declare variables to hold the Primary Integration Components
	var SiebelAccountIntComp, OracleCustomerIntComp;
	
	// Variables to hold the Oracle Contact and Oracle Profile integration Components.
	var OracleContactIntComp, OracleProfileIntComp;
	
	// Declare Shared ID's and misc. variables
	var AccSharedID, AccIntegId, InsertUpdateFlag, 
		AddrSharedID, AddrIntegId, AddrInsUpdFlag, AddressCount,
		ConSharedID, ConIntegId, ContactInsUpdFlag,
		PhoneNumber, PhoneType, PhoneField;
	
	// Customer Type should either External(""E"") or Internal(""I"") at oracle side
	var  CusType		= ""R"";
	var  ProfileClass 	= ""DEFAULT"";
	var  CreditHold 	= ""N"";
	
	// Open the EAI Value Map for Account here.
	var CountryVM 		 = EAIGetValueMap(""Oracle11i Country"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var AccountStatusVM  = EAIGetValueMap(""Oracle11i Account Status"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var AccountPhoneVM 	 = EAIGetValueMap(""Oracle11i Account Phone"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var AddressPhoneVM 	 = EAIGetValueMap(""Oracle11i Address Phone"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var ContactPhoneVM 	 = EAIGetValueMap(""Oracle11i Contact Phone"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var AccountCategoryVM= EAIGetValueMap(""Oracle11i Account Category"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var ContactTitleVM   = EAIGetValueMap(""Oracle11i Contact Title"", ""Siebel Outbound"");

	//Get the primary integration component from the Siebel Integration Object
	SiebelAccountIntComp = SiebelIntObject.GetPrimaryIntComp (""Account"");
	
	// If the Primary Integration Component is valid, then go ahead with the copying process
	// Else raise an error message.
	if (SiebelAccountIntComp.Exists ())
	{
		// Create the Oracle Integration Components 
		OracleCustomerIntComp =
			OracleIntObject.CreatePrimaryIntComp(""SIE_CUSTOMERS_INTERFACE_ALL"");
						
		// Navigate through all the available records in the Siebel primary integration component
    	while (SiebelAccountIntComp.NextRecord ())
		{
			// Create a new record in the Oracle Primary Integration Object
			OracleCustomerIntComp.NewRecord ();   
					
			OracleContactIntComp = 
				OracleCustomerIntComp.CreateIntComp(""SIE_CONTACT_PHONES_INT_ALL"");
			OracleProfileIntComp = 
				OracleCustomerIntComp.CreateIntComp(""SIE_CUSTOMER_PROFILES_INT_ALL"");
			
			// 
			// ACCOUNT
			//
			AccIntegId = SiebelAccountIntComp.GetFieldValue(""Integration Id"");
 			if (AccIntegId == """" || AccIntegId == null)
			{
				// New Account
				AccSharedID = SiebelAccountIntComp.GetFieldValue(""Id"");
				InsertUpdateFlag = ""I"";
			}
			else
			{
				// Existing Account
				AccSharedID = AccIntegId;
				InsertUpdateFlag = ""U"";
			}

			OutputMsg.SetArgument(""ObjectIntegrationId"", AccSharedID);
			
			// set values in SIE_CUSTOMERS_INTERFACE_ALL
			CopyCustomerInfo(OracleCustomerIntComp, SiebelAccountIntComp,
				InsertUpdateFlag, CusType, AccountCategoryVM, AccountStatusVM,
				AccSharedID);
			
			// set values in SIE_CUSTOMER_PROFILES_INT_ALL		
			// Inserting a profile class for the Account in SIE_CUSTOMER_PROFILES_INT_ALL
			if (InsertUpdateFlag == ""I"")
			{
				OracleProfileIntComp.NewRecord();
				CopyProfileInfo (OracleProfileIntComp, SiebelAccountIntComp,
					ProfileClass, CreditHold, InsertUpdateFlag, 
					AccSharedID, """");
			}
											
			// Set the copy source to SiebelAccountIntComp
			OracleContactIntComp.SetCopySource (SiebelAccountIntComp);
			
			PhoneField = ""Main Phone Number"";
			PhoneNumber = SiebelAccountIntComp.GetFieldValue(PhoneField).substring(0,24);
			if (PhoneNumber != """")
			{
				OracleContactIntComp.NewRecord();
				PhoneType = AccountPhoneVM.Translate(PhoneField);
								
				// Call the function CopyPhoneInfo to copy the common fields.
				CopyPhoneInfo (OracleContactIntComp, SiebelAccountIntComp, 
					PhoneType, InsertUpdateFlag, 
					PhoneNumber, AccSharedID, """", """");
			}
			
			PhoneField = ""Main Fax Number"";
			PhoneNumber = SiebelAccountIntComp.GetFieldValue(PhoneField).substring(0,24);
			if (PhoneNumber != """")
			{
				OracleContactIntComp.NewRecord();
				PhoneType = AccountPhoneVM.Translate(PhoneField);
								
				// Call the function CopyPhoneInfo to copy the common fields.
				CopyPhoneInfo (OracleContactIntComp, SiebelAccountIntComp, 
					PhoneType, InsertUpdateFlag, 
					PhoneNumber, AccSharedID, """", """");
			}
			
			//
			// ACCOUNT ADDRESSES
			//		
			var SiebelAddressIntComp = SiebelAccountIntComp.GetIntComp (""Business Address"");
			
			// Check the validity of the integration component.
			if (SiebelAddressIntComp.Exists())
			{
				AddressCount = 1;

				// Navigate through all the available records.
				while (SiebelAddressIntComp.NextRecord())
				{
					AddrIntegId = SiebelAddressIntComp.GetFieldValue(""Integration Id"");
		 			if (AddrIntegId == """" || AddrIntegId == null)
					{
						// New Address
						AddrSharedID = SiebelAddressIntComp.GetFieldValue(""Id"");
						AddrInsUpdFlag = ""I"";
					}
					else
					{
						// Existing Address
						AddrSharedID = AddrIntegId;
						AddrInsUpdFlag = ""U"";
					}
								
					if (AddressCount > 1)
					{	
						// Create a new customer interface record.
						OracleIntObject.NewInstance ();
						var NewOracleCustIntComp =				
							OracleIntObject.CreatePrimaryIntComp(""SIE_CUSTOMERS_INTERFACE_ALL"");				
						NewOracleCustIntComp.NewRecord ();
						
						// Set customer info
						CopyCustomerInfo(NewOracleCustIntComp, SiebelAccountIntComp,
							AddrInsUpdFlag, CusType, AccountCategoryVM, AccountStatusVM,
							AccSharedID);

						// Copy Address Details
						CopyAddressInfo (NewOracleCustIntComp, SiebelAddressIntComp,
							CountryVM, AddrSharedID);	

						// Copy Site Use Details for the address																		
						CopySiteUseInfo(NewOracleCustIntComp, OracleProfileIntComp, 
							SiebelAccountIntComp, SiebelAddressIntComp, 
							AccountStatusVM, CountryVM, 
							AccountCategoryVM, AddrInsUpdFlag, OracleIntObject,
							AccSharedID, AddrSharedID);
					}
					else
					{
						// Copy Address Details
						CopyAddressInfo (OracleCustomerIntComp, SiebelAddressIntComp,
							CountryVM, AddrSharedID);	

						// Copy Site Use Details for the address																		
						CopySiteUseInfo(OracleCustomerIntComp, OracleProfileIntComp, 
							SiebelAccountIntComp, SiebelAddressIntComp, 
							AccountStatusVM, CountryVM, 
							AccountCategoryVM, AddrInsUpdFlag, OracleIntObject,
							AccSharedID, AddrSharedID);
					}

					PhoneField = ""Phone Number"";
					PhoneNumber = SiebelAddressIntComp.GetFieldValue(PhoneField).substring(0,24);
					if (PhoneNumber != """")
					{
						OracleContactIntComp.NewRecord();
						PhoneType = AddressPhoneVM.Translate(PhoneField);
										
						// Call the function CopyPhoneInfo to copy the common fields.
						CopyPhoneInfo (OracleContactIntComp, SiebelAccountIntComp, 
							PhoneType, InsertUpdateFlag, 
							PhoneNumber, AccSharedID, AddrSharedID, """");
					}

					PhoneField = ""Fax Number"";
					PhoneNumber = SiebelAddressIntComp.GetFieldValue(PhoneField).substring(0,24);
					if (PhoneNumber != """")
					{
						OracleContactIntComp.NewRecord();
						PhoneType = AddressPhoneVM.Translate(PhoneField);
										
						CopyPhoneInfo (OracleContactIntComp, SiebelAccountIntComp, 
							PhoneType, InsertUpdateFlag, 
							PhoneNumber, AccSharedID, AddrSharedID, """");
					}

					AddressCount++;
				}
			}
			
			//
			// ACCOUNT CONTACTS
			//									
			var SiebelContactIntComp = SiebelAccountIntComp.GetIntComp (""Contact"");

			// Set the copy source as the Siebel Child Integration Component
			// Check the validity of the integration component.
			if (SiebelContactIntComp.Exists())
			{
				while (SiebelContactIntComp.NextRecord ())
				{
					// Only send this contact if we are the primary account for it
					if (SiebelContactIntComp.GetFieldValue(""Account Id"") !=
					   SiebelAccountIntComp.GetFieldValue(""Id""))
					   	continue;
													 
					ConIntegId = SiebelContactIntComp.GetFieldValue(""Integration Id"");
		 			if (ConIntegId == """" || ConIntegId == null)
					{
						// New Contact
						ConSharedID = SiebelContactIntComp.GetFieldValue(""Id"");
						ContactInsUpdFlag = ""I"";
					}
					else
					{
						// Existing Contact
						ConSharedID = ConIntegId;
						ContactInsUpdFlag = ""U"";
					}
					
					// Copy the Contact Details
					CopyContactInfo(OracleContactIntComp, SiebelAccountIntComp, 
						SiebelContactIntComp, ContactInsUpdFlag, 
						ContactTitleVM, AccSharedID, ConSharedID);
					 	
					// Copy the Siebel phone number, telephone reference etc.,
					CopyContactPhoneInfo(SiebelAccountIntComp, SiebelAddressIntComp, 
						SiebelContactIntComp, OracleContactIntComp, ContactInsUpdFlag, 
						ContactTitleVM, ContactPhoneVM, AccSharedID, 
						ConSharedID);
				} 
			} 
		} ///~ while(SiebelAccountIntComp.NextRecord())
	} ///~ if(SiebelAccountIntComp.Exists())
	else
	{
		// Raise an exception saying that the primary integration component is not found.
		EAIRaiseError (TranslateMessage (""ORA_MSG_MISSING_COMPONENT,Account,Account - Get/Put Oracle Customer (Siebel)""));
	}
}
function CopyPhoneInfo(OracleContactIntComp, SiebelAccountIntComp,
	PhoneType, InsertUpdateFlag, PhoneNumber, 
	AccSharedID, AddrSharedID, ConSharedID)
{
	OracleContactIntComp.SetFieldValue(""operation"", ""upsert"");
	OracleContactIntComp.SetFieldValue(""TELEPHONE"", PhoneNumber);		  
	OracleContactIntComp.SetFieldValue(""ORIG_SYSTEM_CUSTOMER_REF"", AccSharedID);	  				 
	OracleContactIntComp.SetFieldValue(""ORIG_SYSTEM_ADDRESS_REF"", AddrSharedID);
	OracleContactIntComp.SetFieldValue(""ORIG_SYSTEM_CONTACT_REF"", ConSharedID);
	OracleContactIntComp.SetFieldValue(""ORIG_SYSTEM_TELEPHONE_REF"", 
		AccSharedID+"":""+AddrSharedID+"":""+ConSharedID+"":""+PhoneType);

	OracleContactIntComp.SetFieldValue(""TELEPHONE_TYPE"", PhoneType);
	OracleContactIntComp.SetFieldValue(""INSERT_UPDATE_FLAG"", InsertUpdateFlag);  
	
	OracleContactIntComp.SetFieldValue (""CREATED_BY"", ""-1"");
	OracleContactIntComp.SetFieldValue (""LAST_UPDATED_BY"", ""-1"");	
	OracleContactIntComp.SetFieldValue(""CREATION_DATE"", SiebelAccountIntComp.GetFieldValue (""Created""));
	OracleContactIntComp.SetFieldValue(""LAST_UPDATE_DATE"", SiebelAccountIntComp.GetFieldValue (""Updated""));
}
function CopyProfileInfo (OracleProfileIntComp, SiebelAccountIntComp,
	ProfileClass, CreditHold, InsertUpdateFlag, 
	AccSharedID, AddrSharedID)
{ 
	OracleProfileIntComp.SetCopySource(SiebelAccountIntComp);

	OracleProfileIntComp.SetFieldValue  (""operation"", ""upsert"");
	OracleProfileIntComp.SetFieldValue  (""CUSTOMER_PROFILE_CLASS_NAME"", ProfileClass);
	OracleProfileIntComp.SetFieldValue  (""CREDIT_HOLD"", CreditHold);
	OracleProfileIntComp.SetFieldValue  (""INSERT_UPDATE_FLAG"", InsertUpdateFlag);
	OracleProfileIntComp.SetFieldValue  (""ORIG_SYSTEM_CUSTOMER_REF"", AccSharedID);
	OracleProfileIntComp.SetFieldValue  (""ORIG_SYSTEM_ADDRESS_REF"", AddrSharedID);
	OracleProfileIntComp.CopyFieldValue (""ORG_ID"", ""Account Organization Integration Id"");
	
	OracleProfileIntComp.SetFieldValue (""CREATED_BY"", ""-1"");
	OracleProfileIntComp.SetFieldValue (""LAST_UPDATED_BY"", ""-1"");	
	OracleProfileIntComp.CopyFieldValue (""CREATION_DATE"", ""Created"");
	OracleProfileIntComp.CopyFieldValue (""LAST_UPDATE_DATE"", ""Updated"");
}
function CopySiteUseInfo (OracleCustomerIntComp, OracleProfileIntComp, 
							   SiebelAccountIntComp, SiebelAddressIntComp, 
							   AccountStatusVM, CountryVM,
							   AccountCategoryVM, InsertUpdateFlag, OracleIntObject,
							   AccSharedID, AddrSharedID)
{
	var AddrSharedID;
	var SiteUseList = new Array();
	var PrimarySiteUseList = new Array();
	var SiteUseCount = 0;
	var NewOracleCustomerIntComp;
	
	// Get the Address & Address Integration Id
	var AddrId  		= SiebelAddressIntComp.GetFieldValue (""Id"");
	var AddrIntId 		= SiebelAddressIntComp.GetFieldValue (""Integration Id"");

	var BillToSiteUse = null, ShipToSiteUse = null, GeneralSiteUse = null;
	
	var CusType			= ""R"";
	var ProfileClass	= ""DEFAULT"";
	var CreditHold		= ""N"";

	if (AddrIntId == """" || AddrIntId == null)
	{
		// New Address
		AddrSharedID = AddrId;
	}
	else
	{
		// Existing Address so nothing to do
		// (We don't support changing site uses)
		return;
	}
		
	if (SiebelAddressIntComp.GetFieldValue (""Bill Address Flag"") == ""Y"")
	{
		SiteUseList[SiteUseCount] = ""BILL_TO"";
		PrimarySiteUseList[SiteUseCount++] = 
			(AddrId == SiebelAccountIntComp.GetFieldValue (""Primary Bill To Address Id"")) ? ""Y"" : ""N""
	}
	
	if (SiebelAddressIntComp.GetFieldValue (""Ship Address Flag"") == ""Y"")
	{
		SiteUseList[SiteUseCount] = ""SHIP_TO"";
		PrimarySiteUseList[SiteUseCount++] = 
			(AddrId == SiebelAccountIntComp.GetFieldValue (""Primary Ship To Address Id"")) ? ""Y"" : ""N""
	}
	
	if (SiebelAddressIntComp.GetFieldValue (""Main Address Flag"") == ""Y"")
	{
		SiteUseList[SiteUseCount] = ""GENERAL"";
		PrimarySiteUseList[SiteUseCount++] = 
			(AddrId == SiebelAccountIntComp.GetFieldValue (""Primary Address Id"")) ? ""Y"" : ""N""
	}
	
    for ( var i = 0; i < SiteUseList.length; i++ )
    {
		if (SiteUseList[i] == ""BILL_TO"")
	    {
			// Create new profile for BILL_TO
	 		OracleProfileIntComp.NewRecord();
			// Copy the Address Id from the Address Integration Component
			CopyProfileInfo ( OracleProfileIntComp, SiebelAccountIntComp,
				ProfileClass, CreditHold, ""I"", 
				AccSharedID, AddrSharedID);					
	    }
	    
		if (i > 0)
		{
			// Need new customer interface record
			OracleIntObject.NewInstance ();
			NewOracleCustomerIntComp =				
				OracleIntObject.CreatePrimaryIntComp(""SIE_CUSTOMERS_INTERFACE_ALL"");				
			NewOracleCustomerIntComp.NewRecord ();

			CopyCustomerInfo(NewOracleCustomerIntComp, SiebelAccountIntComp,
				""I"", CusType, AccountCategoryVM, AccountStatusVM,
				AccSharedID);
			CopyAddressInfo (NewOracleCustomerIntComp, SiebelAddressIntComp,
				CountryVM, AddrSharedID);	

	    	NewOracleCustomerIntComp.SetFieldValue (""SITE_USE_CODE"", SiteUseList[i]);
	    	NewOracleCustomerIntComp.SetFieldValue (""PRIMARY_SITE_USE_FLAG"", PrimarySiteUseList[i]);
		}
		else
		{
	    	// Use existing customer interface record
	    	OracleCustomerIntComp.SetFieldValue (""SITE_USE_CODE"", SiteUseList[i]);
	    	OracleCustomerIntComp.SetFieldValue (""INSERT_UPDATE_FLAG"", ""I"");
	    	OracleCustomerIntComp.SetFieldValue (""PRIMARY_SITE_USE_FLAG"", PrimarySiteUseList[i]);
		}
    }
}
"// Map Siebel Account to Oracle Customer
// Returns argument ""ObjectIntegrationId""
function CreateSiebelCustomer(InputMsg, OutputMsg)
{
	var SiebelIntObject, OracleIntObject;
	
	OutputMsg.SetArgument(""ObjectIntegrationId"", """");

	SiebelIntObject = InputMsg.GetIntObj(""Account - Put Oracle11i Customer (Siebel)"");
	
	// Check the validity of the Siebel Integration Object.
	if (SiebelIntObject.Exists ())
	{
		// Go ahead and create a new Oracle Integration Object on the Output Message.
		OracleIntObject = OutputMsg.CreateIntObj(""Account - Put Oracle11i Customer (Oracle)"");
		
		// Navigate through all the available instances in the Integration Object
		while (SiebelIntObject.NextInstance ())
		{
			// Create a new instance in the Oracle Integration Object
			OracleIntObject.NewInstance ();
			
			// CopyFields is again a user defined function which is written to copy all 
			// the fields from the source to the target.
			CopyFields (SiebelIntObject, OracleIntObject, OutputMsg);
		} ///~ while(SiebelIntObject.NextInstance())
	} ///~ if(SiebelIntObject.Exists())
	else
	{
		// Raise an exception saying that the Siebel Integration Object was not found in
		// the Input message. Actually we don't have to do this because, the workflow
		// system itself will inform the user with an Error message.
		EAIRaiseError (TranslateMessage (""ORA_MSG_EMPTY,Account - Put Oracle11i Customer (Siebel)""));
	} ///~ else

}  ///~ End of CreateSiebelAccount function."
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
	
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
 	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
 	  d.getHours(), d.getMinutes(), d.getSeconds());
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];
			
			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
try
{
	if(MethodName == ""GetLOVDescription"")
	{
		var sLovType, sLIC, boLOV, bcLOV, sDescription;
		Outputs.SetProperty(""Description"", """");
		sLovType =Inputs.GetProperty(""Type"");	
		sLIC = Inputs.GetProperty(""LIC"");
		boLOV =  TheApplication().GetBusObject(""List Of Values"");
		bcLOV = boLOV.GetBusComp(""List Of Values"");
		if(sLovType != null && sLovType != """" && sLIC != null && sLIC != """")
		{
			with(bcLOV)
			{
				ClearToQuery();
				SetViewMode(AllView);
				ActivateField(""Description"");
				SetSearchSpec(""Type"", sLovType);
				SetSearchSpec(""Name"", sLIC);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					sDescription = GetFieldValue(""Description"");
				}
			}
		}
		Outputs.SetProperty(""Description"", sDescription);	
		return(CancelOperation)
	}
}	
catch(e)
{
	throw(e);
}
finally
{
	bcLOV = null;
	boLOV = null;
}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function Resubmit()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_TERMINATION"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-02.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */

	//var file=Clib.fopen(""/siebelfs/hout.csv"", ""rt"");



	if (file==null)
	{
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
        {

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			MInputs.SetProperty(""Object Id"",MRowId);    

			MInputs.SetProperty(""ProcessName"",""STC Terminate order from Policy"");


			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

        }
    }
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function Resubmit()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_TERMINATION_NEW"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");

	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/siebelfs/hout.csv"", ""rt"");

	if (file==null)
	{
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
	{
		while(!Clib.feof(file))
        {

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			MInputs.SetProperty(""Object Id"",MRowId);    

			MInputs.SetProperty(""ProcessName"",""STC Dunning Termination Order WF"");

			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);


        }
    }
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if (MethodName == ""Init"")
	{
		Inputs.SetProperty(""Field1"", """");
		Inputs.SetProperty(""Field2"", """");
		Inputs.SetProperty(""Field3"", """");
		Inputs.SetProperty(""Field4"", """");
		Inputs.SetProperty(""Field5"", """");
		Inputs.SetProperty(""Field6"", """");
		Inputs.SetProperty(""Field7"", """");
		Inputs.SetProperty(""Field8"", """");
		Inputs.SetProperty(""Field9"", """");
		Inputs.SetProperty(""Field10"", """");
		Inputs.SetProperty(""Field11"", """");
		Inputs.SetProperty(""Field12"", """");
		Inputs.SetProperty(""Field13"", """");
		Inputs.SetProperty(""Field14"", """");
		Inputs.SetProperty(""Field41"", """");
		Inputs.SetProperty(""Field16"", """");
		Inputs.SetProperty(""Field17"", """");
		Inputs.SetProperty(""Field18"", """");
		Inputs.SetProperty(""Field19"", """");
		Inputs.SetProperty(""Field20"", """");
		Inputs.SetProperty(""Field21"", """");
		Inputs.SetProperty(""Field22"", """");
		Inputs.SetProperty(""Field23"", """");
		Inputs.SetProperty(""Field24"", """");
		Inputs.SetProperty(""Field25"", """");
		Inputs.SetProperty(""Field26"", """");
		Inputs.SetProperty(""Field27"", """");
		Inputs.SetProperty(""Field28"", """");
		Inputs.SetProperty(""Field29"", """");
		Inputs.SetProperty(""Field30"", """");
		Inputs.SetProperty(""Field31"", """");
		Inputs.SetProperty(""Field32"", """");
		Inputs.SetProperty(""Field33"", """");
		Inputs.SetProperty(""Field34"", """");
		Inputs.SetProperty(""Field35"", """");
		Inputs.SetProperty(""Field36"", """");
		Inputs.SetProperty(""Field37"", """");
		Inputs.SetProperty(""Field38"", """");
		Inputs.SetProperty(""Field39"", """");
		Inputs.SetProperty(""Field40"", """");
		return (CancelOperation);
	}
	
	if (MethodName == ""Query"")
	{
		var oPs = TheApplication().NewPropertySet();
		Outputs.AddChild(oPs);
		oPs = TheApplication().NewPropertySet();
		Outputs.AddChild(oPs);
		oPs = TheApplication().NewPropertySet();
		Outputs.AddChild(oPs);
		oPs = TheApplication().NewPropertySet();
		Outputs.AddChild(oPs);
		
		return (CancelOperation);
	}
	
	if (MethodName == ""Update"")
	{
		return (CancelOperation);
	}


	return (ContinueOperation);
}
var theData:PropertySet; // The Database
function Service_PreInvokeMethod (MethodName:String, Inputs:PropertySet, Outputs:PropertySet)
{
	if (MethodName == ""Init"")
		return myInitialise(Outputs);
	else if (MethodName == ""Query"")
		return myQuery(Inputs, Outputs);
	else if (MethodName == ""PreInsert"")
		return myPreInsert(Outputs);
	else if (MethodName == ""Insert"")
		return myInsert(Inputs, Outputs);
	else if (MethodName == ""Delete"")
		return myDelete(Inputs, Outputs);
	else if (MethodName == ""Update"")
		return myUpdate(Inputs, Outputs);
	else 
		return (ContinueOperation);
}
"
function makeid()
{
    var text = """";
    var possible = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"";

    for( var i=0; i < 5; i++ )
        text += possible.charAt(Math.floor(Math.random() * possible.length));

    return text;
}
function myDelete(Inputs, Outputs)
{
	var oChild:PropertySet = Inputs.GetChild(0);
	var oRecord:PropertySet;
	var sPropName:String;
	var bFound:bool = false;
	var bEqual:bool;
	
	if (oChild.GetProperty(""First Name"") == ""Jack"")
	{	
		var oErrorChild:PropertySet = TheApplication().NewPropertySet();
		oErrorChild.SetType(""Status"");
		oErrorChild.SetProperty(""Status"", ""4"");
		oErrorChild.SetProperty(""Error Field"", ""First Name"");
		oErrorChild.SetProperty(""Error Text"", ""Cannot delete Jack"");
		Outputs.AddChild(oErrorChild);
	}
	else
	{
		for (var i=0; i < theData.GetChildCount() && !bFound; i++)
		{
			bEqual = true;
		
			oRecord = theData.GetChild(i);
		
			sPropName = oChild.GetFirstProperty();
		
			while (sPropName != """" && bEqual)
			{
				if (oChild.GetProperty(sPropName) != oRecord.GetProperty(sPropName))
					bEqual = false;
				
				sPropName = oChild.GetNextProperty();
			}

			if (bEqual)
			{
				bFound = true;
				theData.RemoveChild(i);
			}		
		}
	}
	
	return (CancelOperation);
}
function myInitialise(Outputs:PropertySet)
{
	var currentRow:PropertySet;
	var i;
		
	for (i=1; i < 100; i++)
	{
		Outputs.SetProperty(""Field"" + i, """");
	}
		
	// fill our 'database' with some inital data	
	
	theData = TheApplication().NewPropertySet();
	
		
	for (var j=0; j < 20; j++)
	{
		currentRow = TheApplication().NewPropertySet() ;
		
		for (i=1; i < 100; i++)
		{
			currentRow.SetProperty(""Field""+i, makeid());
		}
		theData.AddChild(currentRow);
	}
	
	currentRow = null;
				
	return (CancelOperation);  
	
}
function myInsert(Inputs, Outputs)
{
	//Update my array to include the inserted new Row
	theData.AddChild(Inputs.GetChild(0));
	
	Outputs.AddChild(Inputs.GetChild(0));
	
	return (CancelOperation);
}
function myLike(SearchString:String, Pattern:String)
{
	if (Pattern.indexOf(""*"") >= 0)
	{
		var oSearch = Pattern.split(""*"");
		var bMatch:bool = true;
		var Index:Number = 0;
		
		for (var i=0; i < oSearch.length && bMatch; i++)
		{
			if (oSearch[i].length > 0)
			{
				Index = SearchString.indexOf(oSearch[i], Index);
			
				if (Index < 0)
					bMatch = false;
				
				Index++;
			}
		}
		
		return bMatch;
	}
	else
		return (SearchString == Pattern);
}
function myPreInsert(Outputs:PropertySet)
{
	var newRow:PropertySet = TheApplication().NewPropertySet();
	
	newRow.SetProperty(""First Name"","""");
	newRow.SetProperty(""Last Name"","""");
	newRow.SetProperty(""Phone"","""");
	newRow.SetProperty(""Key"","""");
	newRow.SetProperty(""Occupation"",""SC"");
	
	Outputs.AddChild(newRow);
	
	newRow = null;
	
	return (CancelOperation);
}
function myQuery(Inputs:PropertySet,Outputs:PropertySet)
{
	var oQuerySpec:PropertySet;
	var oChild:PropertySet;
	var bAdd:bool;
	var sPropName:String;
	
	// The Query specifications are in a child propertyset of the inputs	
	oQuerySpec = Inputs.GetChild(0);
	
	
	for (var i=0; i < theData.GetChildCount(); i++)
	{
		bAdd = true;
	
		oChild = theData.GetChild(i);
		
		sPropName = oQuerySpec.GetFirstProperty();
		
		while (sPropName != """" && bAdd)
		{
			bAdd =  myLike(oChild.GetProperty(sPropName),oQuerySpec.GetProperty(sPropName));
			sPropName = oQuerySpec.GetNextProperty();	
		}
	
		if (bAdd)
			Outputs.AddChild(theData.GetChild(i));
	}
	
	return (CancelOperation);  
}
function myUpdate(Inputs:PropertySet, Outputs:PropertySet)
{
	var oChild:PropertySet;
	var oInputChild:PropertySet;
	var bFound:bool = false;
	var bEqual:bool;
	var oOutputChild:PropertySet = TheApplication().NewPropertySet();
	
	for (var i=0; i < theData.GetChildCount() && !bFound; i++)
	{
		bEqual = true;
		var j:Number;
		
		oChild = theData.GetChild(i);
		
		for (j=0; j < Inputs.GetChildCount() && bEqual; j++)
		{
			oInputChild = Inputs.GetChild(j);
			
			if (oInputChild.GetProperty(""Changed"") == "false"")
			{
				if (oInputChild.GetProperty(""Field Value"") != oChild.GetProperty(oInputChild.GetProperty(""Field Name"")))
					bEqual = false;
			}	
		}
		
		if (bEqual)
		{
			bFound = true;
	
			for (j=0; j < Inputs.GetChildCount(); j++)
			{
				oInputChild = Inputs.GetChild(j);
				
				if (oInputChild.GetProperty(""Changed"") == ""true"")
				{
					theData.GetChild(i).SetProperty(oInputChild.GetProperty(""Field Name""), oInputChild.GetProperty(""Field Value""));
					oOutputChild.SetProperty(oInputChild.GetProperty(""Field Name""), oInputChild.GetProperty(""Field Value""));               
				}
			}
		}		
	}

	Outputs.AddChild(oOutputChild);
		
	return (CancelOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	switch (MethodName)
	{
		case ""Init"" :
			Outputs.SetProperty (""Name"", """");
			return (CancelOperation);
		break;
		case ""Query"" :
			var test = TheApplication().NewPropertySet ();
			Outputs.AddChild (test);
			test.SetType (""Status"");
			test.SetProperty (""Status"", ""5"");
			test.SetProperty (""Error Field"", ""Name"");
			test.SetProperty (""Error Text"", ""Text"");
			return (CancelOperation);
		break;
	}
	return (ContinueOperation);
}
function CallBPELGetConfigParams		(Inputs, Outputs)
{
	//TheApplication().TraceOn(""d:\\temp\\CallBPELGetConfigParams.txt"", ""Allocation"", ""All"");

	try 
		{
			//CALL USING DTE MAP FUNCTIONS
			
			// setup the map parameters, service out put parameters
			
			var MAPreqInput =TheApplication().NewPropertySet ();
			var BPELreqInput =TheApplication().NewPropertySet ();
			var MAPresInput =TheApplication().NewPropertySet ();
			var BPELresOutput =TheApplication().NewPropertySet ();
			var MAPcfg = TheApplication().NewPropertySet ();
			
			var sourceConfigHeader = Inputs.GetProperty(""SourceConfigHeader"");
			var sourceConfigRevNbr = Inputs.GetProperty(""SourceConfigRevNbr"");
			//set up the format required to call the map
			
			
           //TheApplication().Trace(""sourceConfigHeader = "" + sourceConfigHeader);
		   //TheApplication().Trace(""sourceConfigRevNbr = "" + sourceConfigRevNbr);
		   
			var siebelMessage = TheApplication().NewPropertySet ();
			siebelMessage.SetType(""SiebelMessage"");

			var rootComponent = TheApplication().NewPropertySet ();
			siebelMessage.AddChild(rootComponent);
		
			//set up all the parameters required for the 
			//DTE map function
			MAPreqInput.SetProperty(""MapName"", "formatCopyRequest"");
			MAPreqInput.SetProperty(""InputType"", ""SiebelMessage"");
			MAPreqInput.SetProperty(""OutputType"", ""SiebelMessage"");
			MAPreqInput.SetProperty(""OutputIntObjectName"",""InputParameters"");
			MAPreqInput.SetProperty(""SiebelMessage"", """");
			MAPreqInput.SetProperty(""InputConfigHeaderId"",sourceConfigHeader);
			MAPreqInput.SetProperty(""InputConfigRevNbr"",sourceConfigRevNbr);

			
			MAPreqInput.AddChild(siebelMessage);
			
			// call out the DTE map function to create
			// the integration object
			var oraclecopycfgMAPsvc = TheApplication().GetService(""CZIntegPrepareIntegrationObjects"");
			//var oraclecopycfgMAPsvc = TheApplication().GetService(""CopyConfigEbizAdapter_ptt"");
			oraclecopycfgMAPsvc.InvokeMethod(""Execute"", MAPreqInput, BPELreqInput);
			//oraclecopycfgMAPsvc.InvokeMethod(""ConfiguratorCopyConfigEbizAdapter"", MAPreqInput, BPELreqInput);
			
			//TheApplication().Trace(""Passed1"");
			
			// set the type to the name of the input argument to CZCopyCon 
			// Business service.
			//BPELreqInput.GetChild(0).SetType(""CZIntegCopyConfigSEBL782ToEBS11i10SyncRequestMessage:payload"");
			BPELreqInput.GetChild(0).SetType(""args_in_msg:InputParameters"");
			
			
			// call the BPEL Service
			//var oraclecopycfgBPELsvc = TheApplication().GetService(""CZIntegCopyConfigSEBL782ToEBS11i10Sync"");
			//oraclecopycfgBPELsvc.InvokeMethod(""process"", BPELreqInput, BPELresOutput);
			
			var oraclecopycfgBPELsvc = TheApplication().GetService(""CopyConfigEbizAdapter_ptt"");
			oraclecopycfgBPELsvc.InvokeMethod(""ConfiguratorCopyConfigEbizAdapter"", BPELreqInput, BPELresOutput);
			//TheApplication().Trace(""Passed2"");
			
			var destConfigHeader = BPELresOutput.GetChild(0).GetChild(0).GetChild(0).GetProperty(""OUT_CONFIG_HDR_ID"");
			var destConfigRevNbr = BPELresOutput.GetChild(0).GetChild(0).GetChild(0).GetProperty(""OUT_CONFIG_REV_NBR"");
			var copyErrorMessage = BPELresOutput.GetChild(0).GetChild(0).GetChild(0).GetProperty(""ERROR_MESSAGE"");
			var copyReturn = BPELresOutput.GetChild(0).GetChild(0).GetChild(0).GetProperty(""RETURN_VALUE"");
			
			
			Outputs.SetProperty(""DestConfigRevNbr"", destConfigRevNbr);
			Outputs.SetProperty(""DestConfigHeader"", destConfigHeader);
    	}
		catch  (e) 
		{
		  //in the event of an exception, ensure that the return values
		  //are null
		    Outputs.SetProperty(""DestConfigRevNbr"", null);
			Outputs.SetProperty(""DestConfigHeader"", null);

		//	TheApplication().Trace(e.toString());
			var error = e.toString();
			throw e;
		}
		finally 
		{
			oraclecopycfgMAPsvc = null;
			oraclecopycfgBPELsvc = null;
			siebelMessage = null;
			MAPreqInput = null;
			BPELreqInput = null;
			rootComponent = null;
			destConfigHeader = null;
			destConfigRevNbr= null;
			copyErrorMessage= null;
			copyReturn= null;
			BPELresOutput=null;

		
		}
		//TheApplication().TraceOff();
}
function CopyItemConfiguration	(Inputs, Outputs)
{

	try 
	{
		var rootItemId = Inputs.GetProperty(""RootItemId"");
		var rootQuoteOrderAgreementId = Inputs.GetProperty(""QuoteorOrderorAgreementId"");

		var boName = Inputs.GetProperty(""BusinessObject"");
		var bcName = Inputs.GetProperty(""BusinessComponent"");
		
		var destConfigRevNbr = Outputs.GetProperty(""DestConfigRevNbr"");
		var destConfigHeader = Outputs.GetProperty(""DestConfigHeader"");
	
		//at the time that this is invoked, the root item is still not committed and will not be
		//available in the database.  Only the child(ren) are committed at this point. Therefore
		//  ** TheApplication().ActiveBusObject() returns just the root quote item
		//  ** TheApplication().GetBusObject(""Quote"") returns just the child(ren)
		//the ""External Configurator reference"" columns for the root item will be 
		//set in the applet from where this is called.
	
		var bo = TheApplication().GetBusObject(boName);
		var bc = bo.GetBusComp(bcName);
		bc.ActivateField(""External Configurator Reference 1"");
		bc.ActivateField(""External Configurator Reference 2"");
	 	bc.ActivateField(""External Configurator Reference 3"");
		bc.ClearToQuery();
		var bcSearchStr;
		if (bcName == ""Quote Item"" || bcName == ""Template Item"" || bcName == ""Quote Catalog - Template Item"")
		{
			bcSearchStr = ""[Quote Id] = '"" + rootQuoteOrderAgreementId + ""'"";
  		bcSearchStr = bcSearchStr + "" AND "" ;
 		  bcSearchStr = bcSearchStr + ""[Root Quote Item Id] = '"" + rootItemId + ""'"";
		}
		else if (bcName == ""Order Entry - Line Items"")
		{
			bcSearchStr = ""[Order Header Id] = '"" + rootQuoteOrderAgreementId + ""'"";
			bcSearchStr = bcSearchStr + "" AND "" ;
 		  bcSearchStr = bcSearchStr + ""[Root Order Item Id] = '"" + rootItemId + ""'"";
		}
		else if (bcName == ""FS Agreement Item"")
		{
			bcSearchStr = ""[Agreement Id] = '"" + rootQuoteOrderAgreementId + ""'"";
			bcSearchStr = bcSearchStr + "" AND "" ;
 		  bcSearchStr = bcSearchStr + ""[Root Agreement Item Id] = '"" + rootItemId + ""'"";
		}
		bc.SetSearchExpr(bcSearchStr);
		bc.ExecuteQuery();
		var recCount = bc.CountRecords();
		if (bc.FirstRecord())
		{
			do
			 {
			  bc.SetFieldValue(""External Configurator Reference 1"",destConfigHeader);
			  bc.SetFieldValue(""External Configurator Reference 2"",destConfigRevNbr );
			} while (bc.NextRecord()) 
		}
	}
  catch  (e) 
	{
	//	TheApplication().Trace(e.toString());
		var error = e.toString();
		throw e;
	}
	finally 
	{
  	if (bo != null) { bo = null;}
	  if (bc != null) {bc = null;}
	  bcSearchStr = null;
	  recCount = null;
	}


}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if (MethodName == ""CopyOracleConfiguration"")
	{

		try 
		{
			var sourceConfigHeader = Inputs.GetProperty(""SourceConfigHeader"");
			var sourceConfigRevNbr = Inputs.GetProperty(""SourceConfigRevNbr"");
			
			if (sourceConfigHeader !=null && sourceConfigHeader != """")
			{
				CallBPELGetConfigParams(Inputs, Outputs);		  
			}
		}
		catch  (e) 
		{
		 // TheApplication().Trace(e.toString());
		  var error = e.toString();
		  throw e;
		}
		// when the BPEL call is valid, the config parameters
		// will have the correct values.  When the 
		// BPEL call fails, the config parameters will have null values.
		finally  
		{
		  CopyItemConfiguration(Inputs, Outputs);
		}
	
	}

	return (CancelOperation);
}
function CallBPELGetOracleParams		(Inputs, Outputs)
{

	//TheApplication().TraceOn(consLogFileName(""IsOracleProduct""), ""Allocation"", ""All"");
	//TheApplication().TraceOn(""d:\\temp\\CallBPELGetOracleParams.txt"", ""Allocation"", ""All"");
	try 
		{


			// call the BPEL service for operating unit, resp, user

			var siebelBU =Inputs.GetProperty(""InputSiebelBU"");
			var siebelUser =Inputs.GetProperty(""InputSiebelUser"")
			var siebelLang = Inputs.GetProperty(""InputSiebelLang"");
			

			//CALL USING DTE MAP FUNCTIONS
			//TheApplication().Trace(""siebelBU = "" + siebelBU);
			//TheApplication().Trace(""siebelUser = "" + siebelUser);
			//TheApplication().Trace(""siebelLang = "" + siebelLang);
			
			// setup the map parameters, service out put parameters
			
			var MAPreqInput =TheApplication().NewPropertySet ();
			var BPELreqInput =TheApplication().NewPropertySet ();
			var MAPresInput =TheApplication().NewPropertySet ();
			var BPELresOutput =TheApplication().NewPropertySet ();
			var MAPcfg = TheApplication().NewPropertySet ();
			
			var sourceConfigHeader = Inputs.GetProperty(""SourceConfigHeader"");
			var sourceConfigRevNbr = Inputs.GetProperty(""SourceConfigRevNbr"");
			//set up the format required to call the map
			//TheApplication().Trace(""sourceConfigHeader = "" + sourceConfigHeader);
			//TheApplication().Trace(""sourceConfigRevNbr = "" + sourceConfigRevNbr);
			
			var siebelMessage = TheApplication().NewPropertySet ();
			siebelMessage.SetType(""SiebelMessage"");
			
			var rootComponent = TheApplication().NewPropertySet ();
			
			siebelMessage.AddChild(rootComponent);
		
			//set up all the parameters required for the 
			//DTE map function
			MAPreqInput.SetProperty(""MapName"", "formatEBSUserRespOURequest"");
			MAPreqInput.SetProperty(""InputType"", ""SiebelMessage"");
			MAPreqInput.SetProperty(""OutputType"", ""SiebelMessage"");
			//New
			//MAPreqInput.SetProperty(""OutputIntObjectName"",""CRMIntegGetEBSUserRespProcessRequest"");
			MAPreqInput.SetProperty(""OutputIntObjectName"",""ConfiguratorUserLangSiebelAdapterProcessRequest"");
			MAPreqInput.SetProperty(""SiebelMessage"", """");
			MAPreqInput.SetProperty(""InputSiebelBU"",siebelBU)
			MAPreqInput.SetProperty(""InputSiebelLang"",siebelLang);
			MAPreqInput.SetProperty(""InputSiebelUser"",siebelUser);
			
			MAPreqInput.AddChild(siebelMessage);
			
			// call out the DTE map function to create
			// the integration object
			var mapService = TheApplication().GetService(""CZIntegPrepareIntegrationObjects"");
			//TheApplication().Trace(""Passed Service0  = "");
			mapService.InvokeMethod(""Execute"", MAPreqInput, BPELreqInput);
			
			//TheApplication().Trace(""Passed Service  = CZIntegPrepareIntegrationObjects "");
			
			// set the type to the name of the input argument to CZCopyCon 
			// Business service.
			//New
			//BPELreqInput.GetChild(0).SetType(""CRMIntegGetEBSUserRespRequestMessage:payload"");
			BPELreqInput.GetChild(0).SetType(""ConfiguratorUserLangSiebelAdapterRequestMessage:payload"");
			
			//TheApplication().Trace(""Passed Service2  = "");
			
			// call the BPEL Service
			var bpelService = TheApplication().GetService(""ConfiguratorUserLangSiebelAdapter"");
			bpelService.InvokeMethod(""process"", BPELreqInput, BPELresOutput);
			//TheApplication().Trace(""Passed Service3  = "");
			
			var oracleuser = BPELresOutput.GetChild(0).GetChild(0).GetChild(0).GetProperty(""EBIZ_User"");
				//TheApplication().Trace(""oracleuser = "" + oracleuser);
			var oracleresp = BPELresOutput.GetChild(0).GetChild(0).GetChild(0).GetProperty(""EBIZ_Responsibility_Id"");
				//TheApplication().Trace(""oracleresp = "" + oracleresp);
			//var oracleou = BPELresOutput.GetChild(0).GetChild(0).GetChild(0).GetProperty(""ORCL_OU"");			
			var oraclelang = BPELresOutput.GetChild(0).GetChild(0).GetChild(0).GetProperty(""EBIZ_Lang"");
			var oracleou = BPELresOutput.GetChild(0).GetChild(0).GetChild(0).GetProperty(""EBIZ_Operating_Unit_Id"");
				//TheApplication().Trace(""Passed Service4  = "");
			Outputs.SetProperty(""OutputOracleResp"", oracleresp);
			Outputs.SetProperty(""OutputOracleOU"", oracleou);
			Outputs.SetProperty(""OutputOracleUser"", oracleuser);
			Outputs.SetProperty(""OutputOracleLang"", oraclelang);
			
			//TheApplication().Trace(""oracleresp = "" + oracleresp);
			//TheApplication().Trace(""oraclelang = "" + oraclelang);
    }
		catch  (e) 
		{
		//	TheApplication().Trace(e.toString());
			var error = e.toString();
			TheApplication().RaiseErrorText(e.toString());
			throw e;
		}
		finally 
		{
      bpelService = null;
		  siebelMessage = null;
      BPELreqInput = null;
      rootComponent = null;
      BPELresOutput=null;
		
	}
	//TheApplication().TraceOff();
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if (MethodName == ""GetOracleUserRespOULang"")
	{
		try 
		{
		   CallBPELGetOracleParams(Inputs, Outputs)
	  }
	  catch  (e) 
	  {
		  TheApplication().RaiseErrorText(e.toString());
    //  TheApplication().Trace(e.toString());
		  var error = e.toString();
			throw e;
		}
	
	}

	return (CancelOperation);
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// DESCRIPTION
//    Javascript maps to Siebel Product from Oracle Item
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js""




"
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
	//return Execute(MethodName, Inputs, Outputs);
	
	/*if (MethodName == ""Execute"")
	{

		try 
		{
		
				formatCopyRequest(Inputs, Outputs);		  
		
		}
		catch  (e) 
		{
		  TheApplication().Trace(e.toString());
		  var error = e.toString();
		  throw e;
		}
		// when the BPEL call is valid, the config parameters
		// will have the correct values.  When the 
		// BPEL call fails, the config parameters will have null values.
		
	
	}

	return (CancelOperation);*/
}
function formatCopyRequest (InputMsg, OutputMsg)
{
	//
	// Declare a variable to hold the Siebel Integration Object.
	//
	//TheApplication().TraceOn(""d:\\temp\\CZprepareIO1.txt"", ""Allocation"", ""All"");
	try 
	{	
		var reqIntObj;
		var reqIntComp;
		
	  var configHdrId = InputMsg.GetArgument(""InputConfigHeaderId"");
      var	configRevNbr = InputMsg.GetArgument(""InputConfigRevNbr"");

		reqIntObj = OutputMsg.CreateIntObj (""InputParameters"");
		reqIntObj.NewInstance ();
		
		//TheApplication().Trace(""configHdrId = "" + configHdrId);
	//	TheApplication().Trace(""configRevNbr = "" + configRevNbr);
		
	
	  reqIntComp = reqIntObj.CreatePrimaryIntComp (""InputParameters"");
	  reqIntComp.NewRecord ();

	  reqIntComp.SetFieldValue(""CONFIG_HDR_ID"", configHdrId);
	  reqIntComp.SetFieldValue(""CONFIG_REV_NBR"", configRevNbr);
	  reqIntComp.SetFieldValue(""NEW_CONFIG_FLAG"",""1"");
	  reqIntComp.SetFieldValue(""ERROR_MESSAGE"","""");
	  reqIntComp.SetFieldValue(""HANDLE_DELETED_FLAG"","""");
	  reqIntComp.SetFieldValue(""NEW_NAME"","""");
	  reqIntComp.SetFieldValue(""OUT_CONFIG_HDR_ID"","""");
	  reqIntComp.SetFieldValue(""OUT_CONFIG_REV_NBR"","""");
	  reqIntComp.SetFieldValue(""RETURN_VALUE"","""");

	}	  
	catch  (e) 
	{
		TheApplication().RaiseErrorText(e.toString());
	//	TheApplication().Trace(e.toString());
		var error = e.toString();
		throw e;
	}
	finally 
	{
		reqIntObj = null;;
		reqIntComp =  null;
		configHdrId = null;
		configRevNbr = null;

	}     			
//TheApplication().TraceOff();
}
function formatEBSLangRequest (InputMsg, OutputMsg)
{
	try 
	{
		var reqIntObj;
		var reqIntComp;
	
	  var siebelLang = InputMsg.GetArgument(""InputSiebelLang"");
		
		reqIntObj = OutputMsg.CreateIntObj (""CZIntegGetLanguageSyncProcessRequest"");
		reqIntObj.NewInstance ();
	
	  reqIntComp = reqIntObj.CreatePrimaryIntComp (""CZIntegGetLanguageSyncProcessRequest"");
	  reqIntComp.NewRecord ();
	
	  reqIntComp.SetFieldValue(""Siebel_Lang"",siebelLang);
	}	  
	catch  (e) 
	{
		TheApplication().RaiseErrorText(e.toString());
	//	TheApplication().Trace(e.toString());
		var error = e.toString();
		throw e;
	}
	finally 
	{
		reqIntObj = null;;
		reqIntComp =  null;

	}
}
function formatEBSUserRespOURequest (InputMsg, OutputMsg)
{
	//
	// Declare a variable to hold the Siebel Integration Object.
	//
	//TheApplication().TraceOn(""d:\\temp\\trace1.txt"", ""Allocation"", ""All"");
	try 
	{
		var reqIntObj;
		var reqIntComp;
	
	  var siebelUser = InputMsg.GetArgument(""InputSiebelUser"");
	  var	siebelBU = InputMsg.GetArgument(""InputSiebelBU"");
	  var siebelLang = InputMsg.GetArgument(""InputSiebelLang"");
		
        //reqIntObj = OutputMsg.CreateIntObj (""CRMIntegGetEBSUserRespProcessRequest"");
  		reqIntObj = OutputMsg.CreateIntObj (""ConfiguratorUserLangSiebelAdapterProcessRequest"");
		reqIntObj.NewInstance ();
	 
      //reqIntComp = reqIntObj.CreatePrimaryIntComp (""CRMIntegGetEBSUserRespProcessRequest"");
  	  reqIntComp = reqIntObj.CreatePrimaryIntComp (""ConfiguratorUserLangSiebelAdapterProcessRequest"");
	  reqIntComp.NewRecord ();
		//TheApplication().Trace(""siebelUser = "" + siebelUser);
		//TheApplication().Trace(""siebelLang = "" + siebelLang);
		
	  //reqIntComp.SetFieldValue(""Siebel_user_id"",siebelUser);
	  reqIntComp.SetFieldValue(""Siebel_User"",siebelUser);	  
	  
	  //reqIntComp.SetFieldValue(""process_name"",""Configurator"");
	  //reqIntComp.SetFieldValue(""siebel_bu_id"",siebelBU);
	  reqIntComp.SetFieldValue(""Siebel_Lang"",siebelLang);

	}	  
	catch  (e) 
	{
		TheApplication().RaiseErrorText(e.toString());
	//	TheApplication().Trace(e.toString());
		var error = e.toString();
		throw e;
	}
	finally 
	{
		reqIntObj = null;;
		reqIntComp =  null;

	}
	//TheApplication().TraceOff();
}
"var G_RUNTIME_ID             = ""Id"";
var G_PARENT_RUNTIME_ID      = ""Parent Item Id"";
var G_INV_ITEM_ID            = ""External Inventory System Ref"";
var G_INTEGRATION_ID         = ""Integration Id"";
var G_PRODUCT_ID             = ""Product Id"";
var G_PRODUCT_INTEGRATION_ID = ""Product Integration Id"";
var G_QUANTITY               = ""Quantity"";   
var G_CZOPERATION            = ""CZOperation"";

var G_LIST_PRICE             = ""List Price""; 
var G_NET_PRICE              = ""Net Price"";
var G_ELIGIBILITY_STATUS     = ""Eligibility Status"";
var G_ELIGIBILITY_REASON     = ""Eligibility Reason"";

var G_PREPICK_MODE           = ""Pre-Pick"";   
var G_POSTPICK_MODE          = ""Post-Pick"";   

var G_INSERT_MODE            = ""INSERT"";   
var G_UPDATE_MODE            = ""UPDATE"";   
var G_DELETE_MODE            = ""DELETE"";   

var G_LOGGING_MODE           = ""Y"";

var G_LOGGING_IS_ON          = ""Y""; 
var G_LOGGING_IS_OFF         = ""N""; 

var G_UNDEFINED              = ""-1"";

var G_LOGGING_DIR            = ""C:\\"";

var CZSessionCachePS;
var CZSelectedItemsPS;

var cacheRuntimeId;
var cacheQuanity;
var cacheListPrice;
var cacheNetPrice;
var cacheEligibilityStatus;
var cacheEligibilityReason;

var cacheSelectedItemsRuntimeId;

var G_PROP_NAME_ARY = new Array(G_CZOPERATION,G_ELIGIBILITY_REASON,G_ELIGIBILITY_STATUS,G_LIST_PRICE,G_NET_PRICE, G_RUNTIME_ID, G_PARENT_RUNTIME_ID, G_INV_ITEM_ID, G_QUANTITY);  

var RUN_ID;"
function ClearCache(Inputs, Outputs)
{

  if ( CZSessionCachePS == null ) {	  
    CZSessionCachePS = TheApplication().NewPropertySet();   
  } 
  else {
    CZSessionCachePS.Reset(); 
  }	  

  if ( CZSelectedItemsPS == null ) {	  
    CZSelectedItemsPS = TheApplication().NewPropertySet();   
  }
  else {
    CZSelectedItemsPS.Reset();
  }
  
  
  if (cacheRuntimeId == null) {
    cacheRuntimeId = new Array();
  }
  else {
    cacheRuntimeId = null;
  }
  
  if (cacheQuanity == null) {
    cacheQuanity = new Array();
  }
  else {
    cacheQuanity = null;
  }
 
  if (cacheListPrice == null) {  
    cacheListPrice = new Array();
  }
  else {
    cacheListPrice = null;
  }
  
  if (cacheNetPrice == null) {   
    cacheNetPrice = new Array();
  }
  else {
    cacheNetPrice  = null;
  }

  if (cacheEligibilityStatus == null) {   
    cacheEligibilityStatus = new Array();
  } 
  else {
    cacheEligibilityStatus = null;
  }
 
  if (cacheEligibilityReason == null) {  
     cacheEligibilityReason = new Array();
  }   
  else {
    cacheEligibilityReason = null;
  }  

  if (cacheSelectedItemsRuntimeId == null) {  
     cacheSelectedItemsRuntimeId = new Array();
  }
  else {
     cacheSelectedItemsRuntimeId = null;
  }
         
}
function CollectData(inputId, inputPS)
{

   if (inputPS.PropertyExists(G_QUANTITY)) 
      cacheQuanity[inputId] = inputPS.GetProperty(G_QUANTITY);
   else   
      cacheQuanity[inputId] = ""0"";      

   if (inputPS.PropertyExists(G_LIST_PRICE)) 
      cacheListPrice[inputId] = inputPS.GetProperty(G_LIST_PRICE);
   else   
      cacheListPrice[inputId] = G_UNDEFINED;      

   if (inputPS.PropertyExists(G_NET_PRICE)) 
      cacheNetPrice[inputId] = inputPS.GetProperty(G_NET_PRICE);
   else   
      cacheNetPrice[inputId] = G_UNDEFINED;      

   if (inputPS.PropertyExists(G_ELIGIBILITY_STATUS)) {
      cacheEligibilityStatus[inputId] = inputPS.GetProperty(G_ELIGIBILITY_STATUS);
      cacheEligibilityReason[inputId] = inputPS.GetProperty(G_ELIGIBILITY_REASON);      
   }   
   else {  
      cacheEligibilityStatus[inputId] = G_UNDEFINED;      
      cacheEligibilityReason[inputId] = G_UNDEFINED;            
   }   
            
}
function InitializeSessionCache()
{
  if ( CZSessionCachePS == null ) {	  
    CZSessionCachePS = TheApplication().NewPropertySet();   
  }	  

  if ( CZSelectedItemsPS == null ) {	  
    CZSelectedItemsPS = TheApplication().NewPropertySet();   
  }
  
  
  if (cacheRuntimeId == null) {
    cacheRuntimeId = new Array();
  }
  if (cacheQuanity == null) {
    cacheQuanity = new Array();
  }
  if (cacheListPrice == null) {  
     cacheListPrice = new Array();
  }
  if (cacheNetPrice == null) {   
     cacheNetPrice = new Array();
  }
  if (cacheEligibilityStatus == null) {   
     cacheEligibilityStatus = new Array();
  } 
 
  if (cacheSelectedItemsRuntimeId == null) {  
     cacheSelectedItemsRuntimeId = new Array();
  }  
  if  
 (cacheEligibilityReason == null) {  
     cacheEligibilityReason = new Array();
  }   


}
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
	if ((MethodName == ""SyncCache"") || 
      (MethodName == ""GetDelta"") ||
      (MethodName == ""ClearCache"")) {

		CanInvoke = ""TRUE"";
		return (CancelOperation);
	}
	return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
    //////////////////////////////////////////////////////////////////////
    
    var InputConfigLevel =  TheApplication().NewPropertySet();
    var currentRow       =  TheApplication().NewPropertySet(); 
    var currentSIRow      =  TheApplication().NewPropertySet(); 
    var rowsetPS         =  TheApplication().NewPropertySet(); 
    var newRowToInsert   =  TheApplication().NewPropertySet(); 
    var inputRowSet      =  TheApplication().NewPropertySet(); 
    var selectedPS       =  TheApplication().NewPropertySet(); 
    var rowToUpdate      =  TheApplication().NewPropertySet(); 
    var deltaRow         =  TheApplication().NewPropertySet(); 
    var currRowLevel     =  TheApplication().NewPropertySet(); 
    var currSelRowLevel  =  TheApplication().NewPropertySet(); 
    
    var currentRowRuntimeId;     
    var inputRuntimeId;

    var inputListPrice;
    var inputNetPrice;           
    var inputEligibilityStatus;  
    
    var itemExistsInCache;
    var itemInSelectedItemsCache;

    var sessionListPrice;    
    var sessionNetPrice;        
    var sessionEligibilityStatus;
            
    var czOperation;
    var fieldName;       
    var len;
    var child_counter = 0;
    var sel_counter = 0;  
    var currRuntimeId;  
    
    var removedItems = new Array();
    
    if (RUN_ID==null) RUN_ID = 1;
    else RUN_ID = RUN_ID + 1;

    var propStr;    
    var fileLoc  = G_LOGGING_DIR + ""CZProperty.txt"";
    var fp = Clib.fopen(fileLoc, ""r"");
        
    if ( fp == null ) {
    }
    else {
            
        propStr = Clib.fgets(10, fp);
        if (propStr == ""logging=Y"") {
          G_LOGGING_MODE = ""Y"";
        }
        if (propStr == ""logging=N"") {
          G_LOGGING_MODE = ""N"";
        }                
        Clib.fclose(fp);  
    }
    if (MethodName == ""SyncCache"") {
            
      var pickMode = Inputs.GetProperty (""Pick Mode"");
      
  	  InitializeSessionCache();

  	  len = Inputs.GetChildCount();
 
      inputRowSet.Reset();
      for (var i=0; i<len; i++) {
         inputRowSet = Inputs.GetChild(i);
	  	 if (inputRowSet.GetType() == ""Row Set"")
	  	    break;
	  }
      
      if (pickMode==G_PREPICK_MODE) {
 
         dumpPropSet(Inputs, ""SyncCache_Inputs_PREPICK_RUN_ID="" + RUN_ID + "".txt""); 
  
         InputConfigLevel.Reset();
         for (var j = 0; j < inputRowSet.GetChildCount(); j++) {
            InputConfigLevel = inputRowSet.GetChild(j);
            
            inputRuntimeId = InputConfigLevel.GetProperty(G_RUNTIME_ID);            

            if (InputConfigLevel.PropertyExists(G_CZOPERATION)) {
               czOperation = InputConfigLevel.GetProperty(G_CZOPERATION);
            }   
            
            else {
               czOperation = G_INSERT_MODE; 
            }
            

            if (czOperation==G_DELETE_MODE) {
            
               if ((cacheRuntimeId[inputRuntimeId] != null) && (cacheRuntimeId[inputRuntimeId] != ""undefined"")) {              
                 CZSessionCachePS.RemoveChild(cacheRuntimeId[inputRuntimeId]);
                 SyncCacheArrays(""cacheRuntimeId"", inputRuntimeId);
               }

               if ((cacheSelectedItemsRuntimeId[inputRuntimeId] != null) && (cacheSelectedItemsRuntimeId[inputRuntimeId] != ""undefined"") ) {  
                 try {
                   CZSelectedItemsPS.RemoveChild(cacheSelectedItemsRuntimeId[inputRuntimeId]);                           
                   SyncCacheArrays(""cacheSelectedItemsRuntimeId"", inputRuntimeId); 
                 }
                 catch (e) {
                 }
               }     
               
            } // end of  if (czOperation==G_DELETE_MODE)

            if (czOperation==G_INSERT_MODE) { 
              CollectData(inputRuntimeId, InputConfigLevel);
              child_counter = CZSessionCachePS.GetChildCount();                        
              CZSessionCachePS.InsertChildAt(InputConfigLevel.Copy(), child_counter);
              cacheRuntimeId[inputRuntimeId] = child_counter;
            }  

		        
   		    if (ToNumber(InputConfigLevel.GetProperty(G_QUANTITY)) > 0) {
   		      sel_counter = CZSelectedItemsPS.GetChildCount();
              CZSelectedItemsPS.InsertChildAt(InputConfigLevel.Copy(), sel_counter);
  		      cacheSelectedItemsRuntimeId[inputRuntimeId] = sel_counter; 
   		    }   		      		        	   		      
         }

     	 rowsetPS = CZSessionCachePS.Copy();
    	 rowsetPS.SetType(""Row Set"");
		 Outputs.AddChild(rowsetPS);    

		 dumpPropSet(CZSessionCachePS, ""SyncCache_CZSessionCachePS_PREPICK_RUN_ID="" + RUN_ID + "".txt"");
	     dumpPropSet(CZSelectedItemsPS, ""SyncCache_CZSelectedItemsPS_PREPICK_RUN_ID="" + RUN_ID + "".txt"");
	     
		 return CancelOperation;    

      }  // end of if (pickMode==G_PREPICK_MODE)

      //////////////////////////////////////////////////////////////////////
      
      // in ""Post-Pick"" mode insert/delete/update CZSessionCachePS based on data in Inputs ( in ""Row Set"" parameter )
      if (pickMode==G_POSTPICK_MODE) {
 
         dumpPropSet(Inputs, ""SyncCache_Inputs_POSTPICK_RUN_ID="" + RUN_ID + "".txt"");     	 
 
      	 InputConfigLevel.Reset();     
         for (var j = 0; j < inputRowSet.GetChildCount(); j++) {
            InputConfigLevel = inputRowSet.GetChild(j);       
            
            inputRuntimeId = InputConfigLevel.GetProperty(G_RUNTIME_ID);
            
            if (InputConfigLevel.PropertyExists(G_CZOPERATION)) {
               czOperation = InputConfigLevel.GetProperty(G_CZOPERATION);
            }   
            
            else {
               czOperation = G_UPDATE_MODE; 
            }
                        
            //////////////////////////////////////////////////////////////////////              
            
            if (czOperation==G_INSERT_MODE) {               
               if (cacheRuntimeId[inputRuntimeId] > -1) {	                
                  CollectData(inputRuntimeId, InputConfigLevel);

                  child_counter = CZSessionCachePS.GetChildCount();                        
                  CZSessionCachePS.InsertChildAt(InputConfigLevel.Copy(), child_counter);
                  cacheRuntimeId[inputRuntimeId] = child_counter;

     		          sel_counter = CZSelectedItemsPS.GetChildCount();
                  CZSelectedItemsPS.InsertChildAt(InputConfigLevel.Copy(), sel_counter);
  	    	        cacheSelectedItemsRuntimeId[inputRuntimeId] = sel_counter; 
               }   
            }
         
            if (czOperation==G_DELETE_MODE) {
            
               if ((cacheRuntimeId[inputRuntimeId] != null) && (cacheRuntimeId[inputRuntimeId] != ""undefined"") ) {              
                 CZSessionCachePS.RemoveChild(cacheRuntimeId[inputRuntimeId]);
                 SyncCacheArrays(""cacheRuntimeId"", inputRuntimeId);
               }

               if ((cacheSelectedItemsRuntimeId[inputRuntimeId] != null) && (cacheSelectedItemsRuntimeId[inputRuntimeId] != ""undefined"") ) {  
                 try {
                   CZSelectedItemsPS.RemoveChild(cacheSelectedItemsRuntimeId[inputRuntimeId]);                           
                   SyncCacheArrays(""cacheSelectedItemsRuntimeId"", inputRuntimeId);
                 }
                 catch (e) {
                 }
               }     
               
            } // end of  if (czOperation==G_DELETE_MODE)

            //////////////////////////////////////////////////////////////////////
          
            if (czOperation==G_UPDATE_MODE) { 

               //////////////////////////////////////////////////////

               if (cacheRuntimeId[inputRuntimeId] > -1) {
                  currentRow = CZSessionCachePS.GetChild(cacheRuntimeId[inputRuntimeId]);

                  fieldName = InputConfigLevel.GetFirstProperty();
                  while (fieldName != """") {

                     if (InputConfigLevel.PropertyExists(fieldName)) {
                        currentRow.SetProperty(fieldName, InputConfigLevel.GetProperty(fieldName));
                     }                                                                
                     fieldName =  InputConfigLevel.GetNextProperty();  
                  }   
    
                  if (cacheSelectedItemsRuntimeId[inputRuntimeId]>-1)  {
                     CZSelectedItemsPS.RemoveChild(cacheSelectedItemsRuntimeId[inputRuntimeId]);
                     CZSelectedItemsPS.InsertChildAt(currentRow.Copy(), cacheSelectedItemsRuntimeId[inputRuntimeId]);                           
                  }
                  else {
     		             sel_counter = CZSelectedItemsPS.GetChildCount();
                     CZSelectedItemsPS.InsertChildAt(currentRow.Copy(), sel_counter);
     	    	         cacheSelectedItemsRuntimeId[inputRuntimeId] = sel_counter;                   
                  }   
                  
               }    
               else {
                  CollectData(inputRuntimeId, InputConfigLevel);

                  child_counter = CZSessionCachePS.GetChildCount();                        
                  CZSessionCachePS.InsertChildAt(InputConfigLevel.Copy(), child_counter);
                  cacheRuntimeId[inputRuntimeId] = child_counter;

   		          sel_counter = CZSelectedItemsPS.GetChildCount();
                  CZSelectedItemsPS.InsertChildAt(InputConfigLevel.Copy(), sel_counter);
    	        cacheSelectedItemsRuntimeId[inputRuntimeId] = sel_counter; 
               }
             
            }  // end of  if (czOperation==G_UPDATE_MODE) 
          
         } // end of for (var j = 0; j < rowSet.GetChildCount(); j++)

            
         selectedPS = CZSelectedItemsPS.Copy();

         // delete output items with quantity=0

         var arrLength = selectedPS.GetChildCount();
         var y = 0;
           
         while ( y < arrLength ) {
           currentSIRow = selectedPS.GetChild(y);
           if (ToInteger(currentSIRow.GetProperty(G_QUANTITY)) == 0) {

              currRuntimeId = currentSIRow.GetProperty(G_RUNTIME_ID)
              if ((cacheRuntimeId[currRuntimeId] != null) &&
                  (cacheRuntimeId[currRuntimeId] != ""undefined"")) {
                  
                currRowLevel = CZSessionCachePS.GetChild(cacheRuntimeId[currRuntimeId]);
                if ( currRowLevel != null ) {
                  currRowLevel.SetProperty(G_ELIGIBILITY_STATUS, ""Y"");
                  currRowLevel.SetProperty(G_ELIGIBILITY_REASON, """");
                  CollectData(currRuntimeId, currRowLevel);
                }
                  
              }    
              
              if ((cacheSelectedItemsRuntimeId[currRuntimeId] != null) && (cacheSelectedItemsRuntimeId[currRuntimeId] != ""undefined"")) {
                currSelRowLevel = CZSelectedItemsPS.GetChild(cacheSelectedItemsRuntimeId[currRuntimeId]);
                if (currSelRowLevel != null ) {
                  currSelRowLevel.SetProperty(G_ELIGIBILITY_STATUS, ""Y"");
                  currSelRowLevel.SetProperty(G_ELIGIBILITY_REASON, """");
                  CollectData(currRuntimeId, currSelRowLevel);
                 }
               }     
              
              selectedPS.RemoveChild(y);
              y = y - 1;
           }
           y = y + 1;  
           if ( y==selectedPS.GetChildCount()) break;         
         }
                  
       ///////////////////////////////////////
       dumpPropSet(CZSessionCachePS, ""POSTPICK_CZSessionCachePS_""  + RUN_ID + "".txt"");
       dumpPropSet(CZSelectedItemsPS, ""POSTPICK_CZSelectedItemsPS_"" + RUN_ID + "".txt"");
                   
    	 selectedPS.SetType(""Row Set"");
	     Outputs.AddChild(selectedPS);   

       } // end of if (pickMode==G_POSTPICK_MODE)
	  
       return CancelOperation;  
       
	}  // end of if (MethodName == ""SyncCache"")
    
    //////////////////////////////////////////////////////////////////////
    
	else if (MethodName == ""GetDelta"") {
      dumpPropSet(Inputs, ""GetDelta_Inputs_RUN_ID="" + RUN_ID + "".txt"");
      // get ""Row Set"" parameter ( type : Property Set )	  
   	  len = Inputs.GetChildCount(); 
      inputRowSet.Reset();
      for (var i=0; i<len; i++) {
         inputRowSet = Inputs.GetChild(i);
	  	 if (inputRowSet.GetType() == ""Row Set"")
	  	    break;
	  }

       InputConfigLevel.Reset();
       for (var j = 0; j < inputRowSet.GetChildCount(); j++) {
           InputConfigLevel = inputRowSet.GetChild(j);
           inputRuntimeId = InputConfigLevel.GetProperty(G_RUNTIME_ID);


           if (cacheRuntimeId[inputRuntimeId] > -1) {

              rowToUpdate = CZSessionCachePS.GetChild(cacheRuntimeId[inputRuntimeId]);

              if (InputConfigLevel.PropertyExists(G_LIST_PRICE)) {
                 inputListPrice = InputConfigLevel.GetProperty(G_LIST_PRICE);
                 if (inputListPrice=="""") inputListPrice=""0"";
                 rowToUpdate.SetProperty(G_LIST_PRICE, inputListPrice);           
              }
              else {
                  inputListPrice = cacheListPrice[inputRuntimeId];           
              }

              if (InputConfigLevel.PropertyExists(G_NET_PRICE)) {
                 inputNetPrice = InputConfigLevel.GetProperty(G_NET_PRICE); 
                 if (inputNetPrice=="""") inputNetPrice=""0"";                 
                 rowToUpdate.SetProperty(G_NET_PRICE, inputNetPrice);          
              }
              else {
                  inputNetPrice = cacheNetPrice[inputRuntimeId];           
              }

              if (InputConfigLevel.PropertyExists(G_ELIGIBILITY_STATUS)) {
                 inputEligibilityStatus = InputConfigLevel.GetProperty(G_ELIGIBILITY_STATUS);           
                 rowToUpdate.SetProperty(G_ELIGIBILITY_STATUS, inputEligibilityStatus);                   
                 if (InputConfigLevel.PropertyExists(G_ELIGIBILITY_REASON))
                    rowToUpdate.SetProperty(G_ELIGIBILITY_REASON, InputConfigLevel.GetProperty(G_ELIGIBILITY_REASON));              
              }
              else {
                  inputEligibilityStatus = cacheEligibilityStatus[inputRuntimeId];           
              }

              sessionListPrice = cacheListPrice[inputRuntimeId]; 
             // if ((sessionListPrice == G_UNDEFINED)&&(inputListPrice==""0"")) 
             //    sessionListPrice = inputListPrice;    
                 
              sessionNetPrice = cacheNetPrice[inputRuntimeId];  
             // if ((sessionNetPrice == G_UNDEFINED)&&(inputNetPrice==""0""))  
             //    sessionNetPrice = inputNetPrice;    
              
              sessionEligibilityStatus = cacheEligibilityStatus[inputRuntimeId];  
              if (sessionEligibilityStatus == G_UNDEFINED) 
                 sessionEligibilityStatus = inputEligibilityStatus;    
              
                                          
              // CONDITION FOR CHECKING DELTA
              if ( (inputListPrice != sessionListPrice)||
                   (inputNetPrice != sessionNetPrice)||
                   (InputConfigLevel.PropertyExists(G_ELIGIBILITY_STATUS)) && (sessionEligibilityStatus != inputEligibilityStatus) ) {
                 deltaRow.AddChild(rowToUpdate.Copy());                                     
              }                           
              
              // END OF DELTA COLLECTING

              cacheListPrice[inputRuntimeId] = inputListPrice;              
              cacheNetPrice[inputRuntimeId] = inputNetPrice;
              cacheEligibilityStatus[inputRuntimeId] = inputEligibilityStatus;
              
           } // end of if (cacheRuntimeId[inputRuntimeId] > -1)
       }  // end of for (var j = 0; ...... 
       
  	   deltaRow.SetType(""Row Set"");
	     Outputs.AddChild(deltaRow);   

       dumpPropSet(Outputs, ""GetDelta_Outputs_""  + RUN_ID + "".txt""); 
       dumpPropSet(CZSessionCachePS, ""GetDelta_CZSessionCachePS_""  + RUN_ID + "".txt"");
       dumpPropSet(CZSelectedItemsPS, ""GetDelta_CZSelectedItemsPS_"" + RUN_ID + "".txt"");

       return CancelOperation;  		
	}  // end of if (MethodName == ""GetDelta"")	

	else if (MethodName == ""ClearCache"") {
	   ClearCache(Inputs, Outputs);
       return CancelOperation;  		
	}	
	else {
		return ContinueOperation;
	}

   	return ContinueOperation;

}
function SyncCacheArrays(arrName,inputId)
{
  var nn;
  if (arrName==""cacheSelectedItemsRuntimeId"") {
    for ( nn in cacheSelectedItemsRuntimeId ) {
      if (cacheSelectedItemsRuntimeId[nn] > cacheSelectedItemsRuntimeId[inputId]) {
        cacheSelectedItemsRuntimeId[nn] = cacheSelectedItemsRuntimeId[nn] - 1;  
      }
    }    
    cacheSelectedItemsRuntimeId[inputId] = ""undefined"";
  }  

  if (arrName==""cacheRuntimeId"") {
    for ( nn in cacheRuntimeId ) {
      if (cacheRuntimeId[nn] > cacheRuntimeId[inputId]) {
        cacheRuntimeId[nn] = cacheRuntimeId[nn] - 1;  
      }
    }  
    cacheRuntimeId[inputId] = ""undefined"";  
  }  

}
function dumpPropSet(inputPS, fileName)
{

 if ( G_LOGGING_MODE == G_LOGGING_IS_ON ) {
   var fileLoc  = G_LOGGING_DIR + fileName;
   var pspLevel = TheApplication().NewPropertySet(); 
   var fieldName;
   var x;
  
   var len = inputPS.GetChildCount();
   var rowSet = null;  
   var flag = 0;
	 for (var i=0; i<len; i++) {
	    rowSet = inputPS.GetChild(i);
	  	if (rowSet.GetType() == ""Row Set"")
	  	  {
	  	   flag = 1;
	  	   break;
	  	  } 
	 }

   var fp = Clib.fopen(fileLoc, ""at"");

   if ( flag == 1 ) {
      Clib.fputs(""+++++++++++++++ Row Set +++++++++++++++"" + ""\n"",fp);
      Clib.fputs(""----------------------------------"" + ""\n"",fp);
      for (var j = 0; j < rowSet.GetChildCount(); j++) {
         pspLevel = rowSet.GetChild(j);

         fieldName = pspLevel.GetFirstProperty();
         while (fieldName != """") {
             Clib.fputs(fieldName + "" = '"" + pspLevel.GetProperty(fieldName) + ""'"" + ""\n"", fp);             
             fieldName =  pspLevel.GetNextProperty();  
         }   
         
         Clib.fputs(""----------------------------------"" + ""\n"",fp); 
      }   
 
   } 
   else {
      Clib.fputs(""----------------------------------"" + ""\n"",fp);                  
      for (var j = 0; j < inputPS.GetChildCount(); j++) {
         pspLevel = inputPS.GetChild(j);

         fieldName = pspLevel.GetFirstProperty();
         while (fieldName != """") {
             Clib.fputs(fieldName + "" = '"" + pspLevel.GetProperty(fieldName) + ""'"" + ""\n"", fp);             
             fieldName =  pspLevel.GetNextProperty();  
         }   

         Clib.fputs(""----------------------------------"" + ""\n"",fp);
          
      }   
 
   }

   Clib.fclose(fp); 	  
 }   
}
"// Used to insure siebel client and Oracle Configurator compatibility
// Must be changed when required init message change, return/pricing ps or
// xml change. cz.common.UiXmlInitMessage must be updated when this value
// changes.
// 11.1 Initial
// 11.2 Provide Siebel_app
// 11.3 Provide S_SEBL_VERSION

var S_VERSION                 = ""11.3""; 
var S_USERNAME                = ""username"";
var S_PWD                     = ""pwd"";
var S_BV_RESPONSE             = ""bvresponse"";
var S_BV_SITE_URL             = ""BvSiteUrl"";
var S_INIT_MESSAGE            = ""InitMessage"";
var S_BVP					  = ""BVP"";
var S_WI_SYMURL_NAME          = ""WISymUrlName"";
var S_SSO_SYSTEM_NAME         = ""SsoSystemName"";
var S_VERIFY_MODE             = ""VerifyMode"";
var S_VERIFY_VAL_ALL          = ""0"";
var S_VERIFY_VAL_FIRST_FAIL   = ""1"";
var S_RETURN_MESSAGE          = ""Message"";
var S_BV_STATUS               = ""legal"";
var S_ITEM_NAME               = ""ItemName"";

// Init Message params

var S_RESP_ID                 = ""responsibility_id"";
var S_INV_ITEM_ID             = ""inventory_item_id"";
var S_WAREHOUSE_ORG_ID        = ""warehouse_id"";
var S_SEBL_VERSION            = ""siebel_cfg_client"";
var S_SEBL_PRICE_LIST_ID      = ""siebel_price_list_id"";
var S_SEBL_EXCHG_DATE         = ""siebel_exchange_date"";
var S_HDR_ID                  = ""client_header"";
var S_LINE_ID                 = ""client_line"";
var S_SEBL_APP_MODE           = ""siebel_app_mode"";
var S_JAVA_PRICING_CLASS_NAME = ""java_pricing_class_name"";
var S_SEBL_ACCT_ID            = ""siebel_account_id"";
var S_CFG_HDR_ID   			  = ""config_header_id"";
var S_CFG_REV_NBR             = ""config_rev_nbr"";
var S_MODEL_QTY               = ""model_quantity"";
var S_CALLING_APP_SHORT_NAME  = ""calling_application_short_name"";
var S_SEBL_SES_COOKIE         = ""siebel_cookie"";
var S_SEBL_SES_SRN			  = ""siebel_srn"";                              //added for	Bug 16859819
var S_SEBL_SRVR_URL           = ""siebel_server_url"";
var S_RETURN_URL              = ""return_url"";
var S_TERMINATE_BEHAVIOR      = ""terminate_msg_behavior"";
var S_LANGUAGE                = ""language"";
var S_CFG_CREATION_DATE       = ""config_creation_date"";
var S_SAVE_BEHAVIOR           = ""save_config_behavior"";
var S_OU_ID                   = ""operating_unit_org_id"";

// BV Return xml

var S_COMPLETE_CONFIGURATION  = ""complete_configuration"";
var S_VALID_CONFIGURATION     = ""valid_configuration"";
var S_MESSAGE_TEXT            = ""message_text"";
var S_RULE_VIOLATION_EMPTY    = ""RuleViolationEmpty"";
var S_RULE_VIOLATION          = ""RuleViolation"";

var S_STD_ERROR_TEXT = ""A system error has occured when launching configurator. Please inform your system administrator. "";

var mBusObjName = null;
var mHeaderBusCompName = null;
var mHeaderId = null;
var mHostApp = null;
var RUN_ID;"
function CacheErrorMessage(Inputs, Outputs)
{
	mErrorMsg = Inputs.GetProperty(""Message"");
}
function ComputeTargetView(Inputs, Outputs)
{
	var returnViewName = TheApplication().GetProfileAttr(""CZReturnViewName"");
}
function DisplayVerifyMessages(Inputs, Outputs) {

  var msgsvc = TheApplication().GetService(""Verify Management Service"");
  var payloadPS = TheApplication().NewPropertySet();

  payloadPS.SetProperty(""Return Message - Validate CP"", Inputs.GetProperty(""Message""));
  payloadPS.SetProperty(""Message Type"", Inputs.GetProperty(""MessageType""));

  msgsvc.InvokeMethod(""DisplayMessages"", payloadPS, Outputs);

}
function IsOracleConfigurableProduct(Inputs, Outputs)
{
	//The next 3 lines is to get things working in local DB till we get
	//sentinel product data 
	//Outputs.SetProperty(""IsOracleProduct"", ""true"");
	//Outputs.SetProperty(""InventoryItemId"", ""137"");
	//return;
  updateRunId();
 // TheApplication().TraceOn(consLogFileName(""IsConfigurable""), ""Allocation"", ""All"");
	
	var bOracleProduct = false;
	var invItemId = ""NULL"";
	var orgId = ""NULL""
	var bUseProdId = false;
	var seblOrgId = ""NULL"";
	
	//When launched from Quote/Order/Agreement the active bus obj and active bus comp
	//is available and we can directly query the bus comp to find if it is a oracle product or not
	//But when launched from catalog we don't have bus comp and in that time we need to 
	//query Internal Product bus comp.

	var busCompName = Inputs.GetProperty(""BusCompName"");
 // TheApplication().Trace("""");
 // TheApplication().Trace(""busCompName = "" + busCompName);
	if (busCompName != null && busCompName != """") {
		try {
		  var bUseActiveObject = true;
		  
		  if (bUseActiveObject) {
		   // TheApplication().Trace(""Using Active Object for external ref"");
		   
				var busObj = TheApplication().ActiveBusObject();
				if (busObj != null) {
					var busComp = busObj.GetBusComp(busCompName);
					var activeId = busComp.GetFieldValue(""Id"");
					var isActiveIdRootItem = busComp.GetFieldValue(""IsRootItem"");

	      //  TheApplication().Trace(""active item Id = "" + activeId + "" isRoot = "" + isActiveIdRootItem);					

          if (isActiveIdRootItem == ""N"") {
            // If not the root then lookup via the product id
            bUseProdId = true; 
          }
          else {
					  var externalRef = busComp.GetFieldValue(""External Inventory System Ref"");
					  
					  //externalRef = ""137:204"";

	       //   TheApplication().Trace(""externalRef = "" + externalRef);					
					
					  invItemId = getInvItemId(externalRef);
					  orgId = getOrgId(externalRef);
					  
					  var isCP = busComp.GetFieldValue(""IsComplexProduct"");
				//	  TheApplication().Trace(""Is Complex product = "" + isCP);
				
	          if ((isCP == ""Y"") && (invItemId != null) && (invItemId != """")) {
						  bOracleProduct = true;
					  }
					  seblOrgId = busComp.GetFieldValue(""Organization Id"");
					}
				}
				else {
					TheApplication().RaiseErrorText(""Cannot find ActiveBusObject. Invoke this method in the context of a active business object"");
				}
			}
		}
		catch(e) {
			bUseProdId = true;
		}
	}
	else {
		bUseProdId = true;
	}
	
	//User the product id to query the Internal Product bus comp to confirm for
	//Oracle product.
	if (bUseProdId) {
		
	//	TheApplication().Trace(""Using Product Id path for external ref"");

		var busObj = null;
		var busComp = null;
		try {
			var prodId = Inputs.GetProperty(""ProductId"");	
			
		//	TheApplication().Trace(""Product Id = "" + prodId);

			busObj = TheApplication().GetBusObject(""Internal Product"");
			busComp = busObj.GetBusComp(""Internal Product"");
			busComp.ActivateField(""External Inventory System Ref"");
			busComp.ActivateField(""Organization Id"");
			busComp.ActivateField(""IsNotComplexProduct"");
			busComp.SetViewMode(AllView);
			busComp.ClearToQuery();
			busComp.SetSearchSpec(""Id"", prodId);
			busComp.ExecuteQuery();
			
			var success = busComp.FirstRecord();
			if (success) {
				var externalRef = busComp.GetFieldValue(""External Inventory System Ref"");
				
			//	TheApplication().Trace(""externalRef = "" + externalRef);					

				invItemId = getInvItemId(externalRef);
				orgId = getOrgId(externalRef);
				var isNotCP = busComp.GetFieldValue(""IsNotComplexProduct"");
			//	TheApplication().Trace(""Is Not Complex product="" + isNotCP);
				if ((isNotCP == ""N"") && (invItemId != null) && (invItemId != """")) {
					bOracleProduct = true;
				}
				seblOrgId = busComp.GetFieldValue(""Organization Id"");
			}
			else {
			//	TheApplication().Trace(""No Internal Product found with Id = "" + prodId);					
			}
		} catch  (e) {
			throw e;
		}
		finally {
			//release the resources
			if (busComp != null) busComp = null;
			if (busObj != null) busObj = null;
		}
	}
/*	TheApplication().Trace(""Completed IsOracleProduct = "" + bOracleProduct
	                       + "" InventoryItemId = "" + invItemId
	                       + "" OrganizationId = "" + orgId);	*///
	
	Outputs.SetProperty(""IsOracleProduct"", bOracleProduct);
	Outputs.SetProperty(""InventoryItemId"", invItemId);
	Outputs.SetProperty(""OrganizationId"", orgId);
	Outputs.SetProperty(""SeblOrganizationId"", seblOrgId);
//	TheApplication().TraceOff();
}
function LaunchBatchValidate(Inputs, Outputs)
{
  updateRunId();

 // TheApplication().TraceOn(consLogFileName(""LaunchBv""), ""Allocation"", ""All"");
  
  var finalMessage = """";
  var valType = ""item"";
  
  if (Inputs.PropertyExists(""ValidationType"")) {
    var valType = Inputs.GetProperty(""ValidationType"");    
  }
  
 // TheApplication().Trace(""LaunchBatchvalidate: type = "" + valType);
  
  if (valType.toLowerCase() == ""all"") {
    bvAllItems(Inputs, Outputs);
    finalMessage = finalMessage
                 + Outputs.GetProperty(S_MESSAGE_TEXT);

  }
  else {
    bvSingleItem(Inputs, Outputs);
    
    var messagePs = Outputs.Copy();
    messagePs.SetProperty(""preamble"", finalMessage);
    
    finalMessage = bvMakeMessage(messagePs);
    
  }
//  TheApplication().TraceOff();
  
  // The process property name is ""Message"". Remove the
  // internal message property
  
  Outputs.RemoveProperty(S_MESSAGE_TEXT);
  Outputs.SetProperty(S_RETURN_MESSAGE, finalMessage);

 // TheApplication().Trace(""LaunchBatchvalidate: messages = "" + finalMessage);
 // TheApplication().Trace(""LaunchBatchvalidate: Complete"");
  
 // TheApplication().TraceOff();
}
function LaunchConfigurator(Inputs, Outputs)
{
  updateRunId();
  
  //TheApplication().TraceOn(""d:\\temp\\lanuachconfig.txt"", ""Allocation"", ""All"");
	var xmlMsgPS = TheApplication().NewPropertySet();
	xmlMsgPS.SetProperty(S_INV_ITEM_ID, Inputs.GetProperty(""InventoryItemId""));
	xmlMsgPS.SetProperty(S_WAREHOUSE_ORG_ID, Inputs.GetProperty(""OrganizationId""));
	xmlMsgPS.SetProperty(S_SEBL_PRICE_LIST_ID, Inputs.GetProperty(""PriceListId""));
	xmlMsgPS.SetProperty(S_SEBL_EXCHG_DATE, Inputs.GetProperty(""ExchangeDate""));
	
	mHeaderId = Inputs.GetProperty(""ParentObjectId"");
	xmlMsgPS.SetProperty(S_HDR_ID, mHeaderId);
	
	var objectId = Inputs.GetProperty(""ObjectId"");
	xmlMsgPS.SetProperty(S_LINE_ID, objectId);
	
	mHostApp = Inputs.GetProperty(""HostAppMode"");
	xmlMsgPS.SetProperty(S_SEBL_APP_MODE, mHostApp);
	xmlMsgPS.SetProperty(S_TERMINATE_BEHAVIOR, ""brief"");
	
	var pricingClassName = Inputs.GetProperty(""JavaPricingClassName"");
	if ((pricingClassName != null) && (pricingClassName == """")) {
		pricingClassName = ""oracle.apps.cz.integration.sebl.SeblPspPricingEngine"";
	}
	xmlMsgPS.SetProperty(S_JAVA_PRICING_CLASS_NAME, pricingClassName);
	
	mBusObjName = Inputs.GetProperty(""BusObjectName"");
	var busCompName = Inputs.GetProperty(""BusCompName"");
	mHeaderBusCompName = getHeaderBusCompName(Inputs);
	
	var busObj = TheApplication().ActiveBusObject();
	var source = Inputs.GetProperty(""Source"");
	var bCatalogLaunch = false;
	if (source != null && source == ""Catalog"") {
		bCatalogLaunch = true;
		//In Catalog launch the WF process prop does not have bus object name so
		//infer it from active bus object.	
		mBusObjName = busObj.Name();
	}
	try {
		var modelQty = 1;
		if (mHostApp != ""Template"") {
			//query the header bus comp to get the account id
			var headerBusComp = busComp = busObj.GetBusComp(mHeaderBusCompName);
			var accountId = headerBusComp.GetFieldValue(""Account Id"");
 			xmlMsgPS.SetProperty(S_SEBL_ACCT_ID, accountId);
		}
 		if (!bCatalogLaunch) {
 			//query the line item bus comp for getting config hdr id and rev nbr
			var busComp = busObj.GetBusComp(busCompName);
			//If the line has Config header id and revision number then it is a restore
			//otherwise treat it a new configuration
			var cfgHdrId = busComp.GetFieldValue(""External Configurator Reference 1"");
			var cfgRevNbr = busComp.GetFieldValue(""External Configurator Reference 2"");
			var bRestore = ((cfgHdrId != """") && (cfgRevNbr != """"));
			if (bRestore) {
				xmlMsgPS.SetProperty(S_CFG_HDR_ID, cfgHdrId);
				xmlMsgPS.SetProperty(S_CFG_REV_NBR, cfgRevNbr);
			}
			modelQty = busComp.GetFieldValue(""Quantity"");	
 		}
		else {
			//catalog launch can only be a new configuration
			var busComp = busObj.GetBusComp(""Quote Catalog Internal Product by Price List Optional 2"");
			modelQty = busComp.GetFieldValue(""Quantity"");
		}
		xmlMsgPS.SetProperty(S_MODEL_QTY, modelQty);
	}
	catch (e) {
		throw (e);
	}
		
	// Handle the siebel specific init parameters. Use Oracle
	// code to handle any missing parameters.
	var appShortName = getAppShortName(Inputs);
  xmlMsgPS.SetProperty(S_CALLING_APP_SHORT_NAME, appShortName);
	
//	var sblCookie = TheApplication().GetProfileAttr(""czSblSesCookie"");
	
	//sblCookie = ""Dummy  Cookie"";
	
/*	if (sblCookie == null || sblCookie == """") {
	  TheApplication().RaiseErrorText(""Session Cookie Not Found. Cannot start configuration session. Please contact your System Adminstrator"");
	}*/
	// Added For bug# 12976292 in 8115 Session cookie issue -- START
	var ssnTokInPS = TheApplication().NewPropertySet();
	var ssnTokOutPS = TheApplication().NewPropertySet();
	var sesId,sesName,sesFrm;
	var sesSrn; //added for Bug 16859819
	try
  	{
	    var svc2 = TheApplication().GetService(""Web Engine HTTP TXN"");
	    svc2.InvokeMethod(""GetWebSessionInfo"", ssnTokInPS, ssnTokOutPS);
    	sesId = ssnTokOutPS.GetProperty(""SessionId"");
    	sesFrm = ssnTokOutPS.GetProperty(""SessionIdFrom"");
    	sesName = ssnTokOutPS.GetProperty(""SessionName"");
    	sesSrn = ssnTokOutPS.GetProperty(""SRN""); //added for Bug 16859819
    }
	catch  (e) 
	{
		
	    TheApplication().RaiseErrorText(e.toString());
	    throw e;
	}

	var sblCookie = ""<![CDATA["" + sesName + ""="" + sesId+ ""]]>"";  
	var sblSrn = sesSrn;   //added for Bug 16859819
	xmlMsgPS.SetProperty(S_SEBL_SES_COOKIE, sblCookie);
	xmlMsgPS.SetProperty(S_SEBL_SES_SRN, sblSrn); //added for Bug 16859819
	// Added For bug# 12976292 in Session Cookie issue -- END

//	sblCookie = ""<![CDATA["" + sblCookie + ""]]>"";
//	xmlMsgPS.SetProperty(S_SEBL_SES_COOKIE, sblCookie);
	
	var sblUrl = TheApplication().GetProfileAttr(""czSblUrl"");
	//sblUrl = ""http://sdchs21n080.corp.siebel.com/ecommunications_enu/"";
	
	var sblSweUrl = sblUrl + ""start.swe"";
	var sblRetUrl = sblUrl + ""CZReturn.html"";
	xmlMsgPS.SetProperty(S_SEBL_SRVR_URL, sblSweUrl);
	xmlMsgPS.SetProperty(S_RETURN_URL, sblRetUrl);

  var isiebeluser = TheApplication().LoginName();
  var seblOrgId = Inputs.GetProperty(""SeblOrganizationId"");
  //TheApplication().Trace(""isiebeluser = "" + isiebeluser);
  //TheApplication().Trace(""seblOrgId = "" + seblOrgId);
  
  setBPELProperties(isiebeluser, seblOrgId, xmlMsgPS);
	
	var xmlMsgStr = createInitMessage(xmlMsgPS);
	//TheApplication().Trace(""xmlMsgStr = "" + xmlMsgStr);
	TheApplication().SetProfileAttr(""CZInitMessage"", xmlMsgStr);
	TheApplication().SetProfileAttr(""CZReturnViewName"", TheApplication().ActiveViewName());
	if (mHostApp == ""Quote"") {
		TheApplication().GotoView(""CZRuntimeInstanceView (JS)"");
	}
	else if (mHostApp == ""Order"") {
		TheApplication().GotoView(""CZRuntimeInstanceView (JS) - Order (Sales)"");
	}
	else if (mHostApp == ""Agreement"") {
		TheApplication().GotoView(""CZRuntimeInstanceView (JS) - Agreement"");
	}
	else if (mHostApp == ""Template"") {
		TheApplication().GotoView(""CZRuntimeInstanceView (JS) - Favorites"");
	}
	//TheApplication().TraceOff();
}
function RaiseNonOracleProductError(Inputs, Outputs)
{
	//Todo raise error code to display MLS msg
	TheApplication().RaiseErrorText(""Cannot configure or verify a non Oracle product in Oracle Configurator"");
}
function ReturnToView(Inputs, Outputs)
{
	var busObj = TheApplication().GetBusObject(mBusObjName);
	var busComp = busObj.GetBusComp(mHeaderBusCompName);
	with (busComp) {
		SetViewMode(AllView); //AGG-FIX 
        ClearToQuery();       //AGG-FIX 
		SetSearchSpec(""Id"", mHeaderId);
		ExecuteQuery();
	}
	var viewName = TheApplication().GetProfileAttr(""CZReturnViewName"");
 	TheApplication().GotoView(viewName, busObj);   
}
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
	if ((MethodName == ""IsOracleConfigurableProduct"") || 
      (MethodName == ""LaunchConfigurator"") ||
      (MethodName == ""LaunchBatchValidate"") ||
      (MethodName == ""CacheErrorMessage"") || 
      (MethodName == ""ComputeTargetView"")||
		  (MethodName == ""ReturnToView"") ||
			(MethodName == ""DisplayVerifyMessages"") ||
			(MethodName == ""RaiseNonOracleProductError"")) {

		CanInvoke = ""TRUE"";
		return (CancelOperation);
	}
	return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var ret= CancelOperation;

	if (MethodName == ""IsOracleConfigurableProduct"") {
		IsOracleConfigurableProduct(Inputs, Outputs);
	}
	else if (MethodName == ""LaunchConfigurator"") {
		LaunchConfigurator(Inputs, Outputs);
	}
	else if (MethodName == ""LaunchBatchValidate"") {
		LaunchBatchValidate(Inputs, Outputs);
	}
	else if (MethodName == ""CacheErrorMessage"") {
		CacheErrorMessage(Inputs, Outputs);
	}
	else if (MethodName == ""DisplayVerifyMessages"") {
		DisplayVerifyMessages(Inputs, Outputs);
	}
	else if (MethodName == ""ComputeTargetView"") {
		ComputeTargetView(Inputs, Outputs);
	}
	else if (MethodName == ""ReturnToView"") {
		ReturnToView(Inputs, Outputs);
	}
	else if (MethodName == ""RaiseNonOracleProductError"") {
		RaiseNonOracleProductError(Inputs, Outputs);
	}
	else {
		ret = ContinueOperation;
	}
	return ret;
}
function bvAllItems(Inputs, Outputs) {
  // Get the quote/order. The id passed is the row id not the 
  // quote/row id
  
  var headerId = Inputs.GetProperty(""ObjectId"");
  var busObj = TheApplication().ActiveBusObject();

  var busCompName = Inputs.GetProperty(""BusCompName"");
  var bcItems = busObj.GetBusComp(busCompName);
  
  bcItems.SetViewMode(3);
  
  var processItem = bcItems.FirstRecord();
  
  bcItems.ActivateField(""Quote Id"");
  bcItems.ActivateField(""Product"");
  bcItems.ActivateField(""Product Id"");
  bcItems.ActivateField(""Parent Quote Item Id"");
  bcItems.ActivateField(""IsRootItem"");
  bcItems.ActivateField(""External Inventory System Ref"");

  // Need to know the 'failure mode' Do we continue
  // to validate after a model returns with an error
  
  var verifyMode = S_VERIFY_VAL_FIRST_FAIL;
  if (Inputs.PropertyExists(S_VERIFY_MODE)) {
    var verifyValue = Inputs.GetProperty(S_VERIFY_MODE);
    if (verifyValue == S_VERIFY_VAL_ALL) {
      verifyMode = S_VERIFY_VAL_ALL;
    }
  }

  var message = """";
  while(processItem) {
  
    // Only work with the first level children
    var product = bcItems.GetFieldValue(""Product"");
    var productId = bcItems.GetFieldValue(""Product Id"");
    var isRootItem = bcItems.GetFieldValue(""IsRootItem"");
    bcItems.ActivateField(""Outline Number""); 
    var lineNumber  = bcItems.GetFieldValue(""Outline Number""); 
    
    var bvStatus = """";
    
   // TheApplication().Trace(""isRoot = "" + isRootItem + "" for "" + productId + "" :("" + lineNumber + "") Name = "" + product);
   
    if (isRootItem == ""Y"") {
      var externalRef = bcItems.GetFieldValue(""External Inventory System Ref"");

      var invItemId = getInvItemId(externalRef);
      var orgId = getOrgId(externalRef);
      
    //  TheApplication().Trace(""External Inv  = "" + invItemId);

      // There has to be an inventory item id. Once past that then
      /// make sure it si a configurable product
      if (invItemId != null && invItemId != """") {
        
        var isOracleCfgInPs = TheApplication().NewPropertySet();
        var isOracleCfgOutPs = TheApplication().NewPropertySet();
        
        isOracleCfgInPs.SetProperty(""ProductId"", productId);
        IsOracleConfigurableProduct(isOracleCfgInPs, isOracleCfgOutPs); 
        var isConfigurable = isOracleCfgOutPs.GetProperty(""IsOracleProduct"");
       // TheApplication().Trace(""bvAllItems: ProductId  = "" + productId);
      //  TheApplication().Trace(""bvAllItems: isConfigurable  = "" + isConfigurable);       
        if (isConfigurable == ""true"") {            
          
          // Need to make sure this is a Oracle Product
          var invokePs = Inputs.Copy();
          var returnPs = TheApplication().NewPropertySet();
        
          // The Object id is of the header. For a single bv
          // that becomes the parent and the row becomes the object
        
          invokePs.SetProperty(""ParentObjectId"", headerId);
          invokePs.SetProperty(""ObjectId"", bcItems.GetFieldValue(""Id""));
          invokePs.SetProperty(""InventoryItemId"", invItemId);
          invokePs.SetProperty(""OrganizationId"", orgId);
        //  TheApplication().Trace(""bvAllItems: Will BV "" + headerId);
        
          bvSingleItem(invokePs, returnPs);
        
          // To support first failure and a different message if all
          // line items are valid
        
          bvStatus = returnPs.GetProperty(S_BV_STATUS);
          var preamble = ""["" + lineNumber +""] "";
          returnPs.SetProperty(""preamble"", preamble);
          var returnMesssage = bvMakeMessage(returnPs);
          message = message + returnMesssage + ""\n"";
  
          // If "first failure"" then stop the verification
          // of any subsequent line items
        
          if (   verifyMode == S_VERIFY_VAL_FIRST_FAIL
              && bvStatus == "false"") {
            // Failure. 
            processItem = false;
            message = message + ""Verification of the remaining items stopped\n"";
          }
        }
      }
		}
		// If firstfailure mode and there is a problem then
		// don't continue
		if (processItem == true) {
      processItem = bcItems.NextRecord();
    }
  }
  // Return messages. At this time don't display them as ""rule
  // violations. But as messages like a single vb
  
  Outputs.SetProperty(S_RULE_VIOLATION_EMPTY, ""Y"");
  
  var emptyPS = TheApplication().NewPropertySet();
  emptyPS.SetType(S_RULE_VIOLATION);
  Outputs.AddChild(emptyPS);
  
  Outputs.SetProperty(S_MESSAGE_TEXT, message);
}
function bvInvoke(Inputs, Outputs) {

 // TheApplication().Trace("""");
 // TheApplication().Trace(""======== invokeBv ========"");
  var outboundMessage = """";
  var initMessage = Inputs.GetProperty(S_INIT_MESSAGE);

  outboundMessage = ""<batch_validate>""
                  + initMessage;
                  + ""</batch_validate>"";

  var credentialPs = TheApplication().NewPropertySet();

  getCredentials(Inputs, credentialPs);

  var user = credentialPs.GetProperty(S_USERNAME);
  var pwd = credentialPs.GetProperty(S_PWD);

  // The password isn't always decrypted when running from tools.
  // Works fine if running from client against server

  if (Inputs.PropertyExists(S_BVP)) {
    var bvp = Inputs.GetProperty(S_BVP);
    
    if (bvp != null && bvp != """") {
     // TheApplication().Trace(""using bvp"");
      pwd = bvp;
    }
  }

  var httpsvc = TheApplication().GetService(""EAI HTTP Transport"");

  var payloadPs = TheApplication().NewPropertySet();
  var responsePs = TheApplication().NewPropertySet();

  payloadPs.SetProperty(""HTTPRequestMethod"", ""POST"");

  var site = credentialPs.GetProperty(S_BV_SITE_URL);
// TODO: The other parameters

  var payloadStr = ""username="" + user
                 + ""&password="" + pwd
                 + ""&XMLmsg="" + outboundMessage;


 // TheApplication().Trace(""Sbl user = "" + TheApplication().LoginId());
 // TheApplication().Trace(""Orcl user = "" + user);
 // TheApplication().Trace(""pwd = "" + pwd);
 // TheApplication().Trace(""InitMessage = "" + outboundMessage + ""\n"");
 // TheApplication().Trace(""site = "" + site);
 // TheApplication().Trace(""value = "" + payloadStr); 

  // The final properties before the outbound call
  
  payloadPs.SetProperty(""HTTPRequestURLTemplate"", site);
  payloadPs.SetValue(payloadStr); 
  payloadPs.SetProperty(""CharSetConversion"", ""UTF-8"");

 // TheApplication().Trace(""+SendReceive"");
  logPs(payloadPs); 
  httpsvc.InvokeMethod(""SendReceive"", payloadPs, responsePs);
//  TheApplication().Trace(""-SendReceive"");
// TheApplication().Trace(""ReturnPS"");
  logPs(responsePs); 

  responsePs.SetType(S_BV_RESPONSE);
  Outputs.AddChild(responsePs);
}
function bvMakeMessage(Inputs) {

  var bvStatus = Inputs.GetProperty(S_BV_STATUS);
  var itemName =  Inputs.GetProperty(S_ITEM_NAME);
  
  var finalMessage = """";
  
  if (Inputs.PropertyExists(""preamble"")) {
    finalMessage = Inputs.GetProperty(""preamble"");
  }
  
  finalMessage = finalMessage
               + ""This '""
               + itemName
               + ""' is ""; 

  if (bvStatus == ""true"") {

    finalMessage = finalMessage + ""valid."";
  }
  else {
    // TODO: message
    finalMessage = finalMessage + ""not valid. To correct click 'Customize'"";
  }
  
  finalMessage = finalMessage
               + Inputs.GetProperty(S_MESSAGE_TEXT);
  
  return finalMessage;
}
function bvProcessHeader(Inputs, Outputs)
{
  var message = """";

  // Get the two bits out of the return message
  
  var psSearchIn = TheApplication().NewPropertySet();
  var psSearchOut = TheApplication().NewPropertySet();

  psSearchIn.SetType(""SearchSpec"");
  psSearchIn.SetValue(S_VALID_CONFIGURATION);
  psSearchIn.AddChild(Inputs);
  searchChild(psSearchIn, psSearchOut);

  var valid = """";

  if (psSearchOut.PropertyExists("found"")) {
    valid = psSearchOut.GetProperty("found"");
  }

  var psSearchIn = TheApplication().NewPropertySet();
  var psSearchOut = TheApplication().NewPropertySet();

  psSearchIn.SetType(""SearchSpec"");
  psSearchIn.SetValue(S_COMPLETE_CONFIGURATION);
  psSearchIn.AddChild(Inputs);
  searchChild(psSearchIn, psSearchOut);

  var complete = """";
  if (psSearchOut.PropertyExists("found"")) {
    complete = psSearchOut.GetProperty("found"");
  } 

  var psSearchIn = TheApplication().NewPropertySet();
  var psSearchOut = TheApplication().NewPropertySet();

  psSearchIn.SetType(""SearchSpec"");
  psSearchIn.SetValue(S_CFG_HDR_ID);
  psSearchIn.AddChild(Inputs);
  searchChild(psSearchIn, psSearchOut);

  var hdr = """";
  if (psSearchOut.PropertyExists("found"")) {
    hdr = psSearchOut.GetProperty("found"");
  } 
  var psSearchIn = TheApplication().NewPropertySet();
  var psSearchOut = TheApplication().NewPropertySet();

  psSearchIn.SetType(""SearchSpec"");
  psSearchIn.SetValue(S_CFG_REV_NBR);
  psSearchIn.AddChild(Inputs);
  searchChild(psSearchIn, psSearchOut);

  var rev = """";
  if (psSearchOut.PropertyExists("found"")) {
    rev = psSearchOut.GetProperty("found"");
  } 
  // Build up the String, if the config is valid and complete
  // return nothing

  var legal = null;
  
  if (complete == ""true"" && valid == ""true"") {
    legal = ""true"";
  }
  else {
    legal = "false"";
  }
  Outputs.SetProperty(S_MESSAGE_TEXT, message);
  Outputs.SetProperty(S_BV_STATUS, legal);
  
  if (hdr != """") {
    Outputs.SetProperty(S_CFG_HDR_ID, hdr);
  }
  if (rev != """") {
    Outputs.SetProperty(S_CFG_REV_NBR, rev);
  }
}
function bvProcessMessages(Inputs) {

  var message = """";
  var searchFor = ""config_messages"";
  var cCount = Inputs.GetChildCount();

  var c = null; 
  for (var i=0; i < cCount; i++) {
	c = Inputs.GetChild(i);
    var candidate = c.GetType();
    if (candidate == searchFor) {
      // THere can multiple messages

      var mCount = c.GetChildCount();
      for (var j = 0; j < mCount; j++) {
        var m = c.GetChild(j);
  
        var psSearchIn = TheApplication().NewPropertySet();
        var psSearchOut = TheApplication().NewPropertySet();

        psSearchIn.SetType(""SearchSpec"");
        psSearchIn.SetValue(S_MESSAGE_TEXT);
        psSearchIn.AddChild(m);
        searchChild(psSearchIn, psSearchOut);

        var str;
        if (psSearchOut.PropertyExists("found"")) {
          str = psSearchOut.GetProperty("found"");
        }
        message = message + ""\n"" + str;
      }
      return message;
    }
  }
  return message;
}
function bvProcessResults(Inputs, Outputs) {

  // The outputs hold the state of all batch validates for this
  // either one or multiple
  
  // Retrieve the results
  
  // TODO: Verify the message is reasonable
  
  var xmlReturnPs = Inputs.GetChild(0);
  var returnString = xmlReturnPs.GetValue(); 

  var psin = TheApplication().NewPropertySet();
  var parsedXMLPs = TheApplication().NewPropertySet();

  var xmlsvc =  TheApplication().GetService(""XML Converter"");
  psin.SetValue(returnString);
  xmlsvc.InvokeMethod(""XMLToPropSet"", psin, parsedXMLPs);
    
  logPs(parsedXMLPs);

  var returnInfoPs = TheApplication().NewPropertySet();
  
  bvProcessHeader(parsedXMLPs, Outputs);
  
  var message = Outputs.GetProperty(S_MESSAGE_TEXT);

  
  // In either case search for any messages and add them.

  var failureMessages = bvProcessMessages(parsedXMLPs);
  if (failureMessages != null && failureMessages != """") {
    message = message + ""\n"" + failureMessages;
  }
  //return message ;
  Outputs.SetProperty(S_MESSAGE_TEXT, message);
}
function bvSingleItem(Inputs, Outputs) {

  var xmlMsgPS = TheApplication().NewPropertySet();
  xmlMsgPS.SetProperty(S_INV_ITEM_ID, Inputs.GetProperty(""InventoryItemId""));
  xmlMsgPS.SetProperty(S_WAREHOUSE_ORG_ID, Inputs.GetProperty(""OrganizationId""));

  mHeaderId = Inputs.GetProperty(""ParentObjectId"");
  xmlMsgPS.SetProperty(S_HDR_ID, mHeaderId);
	
  var objectId = Inputs.GetProperty(""ObjectId"");
  xmlMsgPS.SetProperty(S_LINE_ID, objectId);
	
  mHostApp = Inputs.GetProperty(""HostAppMode"");
  xmlMsgPS.SetProperty(S_SEBL_APP_MODE, mHostApp);
  
  xmlMsgPS.SetProperty(S_TERMINATE_BEHAVIOR, ""message"");
  xmlMsgPS.SetProperty(S_SAVE_BEHAVIOR, ""never"");

  //query the line item bus comp for getting config hdr id and rev nbr
	
	var busCompName = Inputs.GetProperty(""BusCompName"");
	mHeaderBusCompName = getHeaderBusCompName(Inputs);  
	
	var busObj = TheApplication().ActiveBusObject();
	var busComp = busObj.GetBusComp(busCompName);
	
	//If the line has Config header id and revision number then it is a restore
	//otherwise treat it a new configuration
	
	var cfgHdrId = busComp.GetFieldValue(""External Configurator Reference 1"");
	var cfgRevNbr = busComp.GetFieldValue(""External Configurator Reference 2"");
	
  busComp.ActivateField(""Item Display Name"");
	var itemName = busComp.GetFieldValue(""Item Display Name"");
  
  // Get the pricing arguments

	var pricingClassName = Inputs.GetProperty(""JavaPricingClassName"");
	if ((pricingClassName != null) && (pricingClassName == """")) {
		pricingClassName = ""oracle.apps.cz.integration.sebl.SeblPspPricingEngine"";
	}
	xmlMsgPS.SetProperty(S_JAVA_PRICING_CLASS_NAME, pricingClassName);

  var headerBusComp =  busObj.GetBusComp(mHeaderBusCompName);

  headerBusComp.ActivateField(""Price List Id"");
  var s = headerBusComp.GetFieldValue(""Price List Id"");
  xmlMsgPS.SetProperty(S_SEBL_PRICE_LIST_ID, s);

  headerBusComp.ActivateField(""Exchange Date"");
  s = headerBusComp.GetFieldValue(""Exchange Date"");
  xmlMsgPS.SetProperty(S_SEBL_EXCHG_DATE, s);

  headerBusComp.ActivateField(""Account Id"");
  s = headerBusComp.GetFieldValue(""Account Id"");
  xmlMsgPS.SetProperty(S_SEBL_ACCT_ID, s);

	var sblCookie = TheApplication().GetProfileAttr(""czSblSesCookie"");
	if (sblCookie == null || sblCookie == """") {
	  TheApplication().RaiseErrorText(""Session Cookie Not Found. Cannot start configuration session. Please contact your System Adminstrator"");
	}
	
	xmlMsgPS.SetProperty(S_SEBL_SES_COOKIE, sblCookie);
	
	var sblUrl = TheApplication().GetProfileAttr(""czSblUrl"");
	var sblSweUrl = sblUrl + ""start.swe"";

	xmlMsgPS.SetProperty(S_SEBL_SRVR_URL, sblSweUrl);

	var bRestore = ((cfgHdrId != """") && (cfgRevNbr != """"));
	var legal;
	var message;
	
	// TheApplication().Trace(""bvSingleItem: bRestore = "" + bRestore);
	if (bRestore) {
	//	TheApplication().Trace(""bvSingleItem: starting BV txn"");
		xmlMsgPS.SetProperty(S_CFG_HDR_ID, cfgHdrId);
		xmlMsgPS.SetProperty(S_CFG_REV_NBR, cfgRevNbr);
	
	  var modelQty = busComp.GetFieldValue(""Quantity"");	
	  xmlMsgPS.SetProperty(S_MODEL_QTY, modelQty);
  
	  var appShortName = getAppShortName(Inputs);
    xmlMsgPS.SetProperty(S_CALLING_APP_SHORT_NAME, appShortName);
  
    var isiebeluser = TheApplication().LoginName();
    var isiebelbu = busComp.GetFieldValue(""Organization Id"");
    setBPELProperties(isiebeluser, isiebelbu, xmlMsgPS);
    
    var initMessage = createInitMessage(xmlMsgPS);  
                  
    var invokePs = TheApplication().NewPropertySet();
    var responsePs = TheApplication().NewPropertySet();
  
    invokePs.SetProperty(S_INIT_MESSAGE, initMessage);
  
    invokePs.SetProperty(S_SSO_SYSTEM_NAME, Inputs.GetProperty(S_SSO_SYSTEM_NAME));
    invokePs.SetProperty(S_WI_SYMURL_NAME, Inputs.GetProperty(S_WI_SYMURL_NAME));
    invokePs.SetProperty(S_BV_SITE_URL, Inputs.GetProperty(S_BV_SITE_URL));
 
    if (Inputs.PropertyExists(S_BVP)) {
      invokePs.SetProperty(S_BVP, Inputs.GetProperty(S_BVP));
    }
  
    // Make bv request
    bvInvoke(invokePs, responsePs);
    // Process Results
  
    var processPs = TheApplication().NewPropertySet();
    bvProcessResults(responsePs, processPs);

    legal = processPs.GetProperty(S_BV_STATUS);
    message = processPs.GetProperty(S_MESSAGE_TEXT);
  }
  else {
   // TheApplication().Trace(""bvSingleItem: no saved header. An interactive session did not occur for this line"");
    legal = ""true"";
    message = """";
  }
  // Verify BV calls do not save new configuration information.

  Outputs.SetProperty(S_BV_STATUS, legal);
  Outputs.SetProperty(S_ITEM_NAME, itemName);
  Outputs.SetProperty(S_MESSAGE_TEXT, message);

}
function consLogFileName(fileNameBase) {
  //var fn = ""d:\\Cz"" + fileNameBase + ""_$p_$t_"" + RUN_ID + "".txt"";
  var fn = ""..\\LOG\\Cz"" + fileNameBase + ""_$p_$t_"" + RUN_ID + "".txt"";

  return fn;
}
function createInitMessage(Inputs)
{

    // Always send the local date & time.
	var OracleOrgId = Inputs.GetProperty(""operating_unit_org_id"");
    var sysDate = Clib.time();
    var d = Date.fromSystem(sysDate);
    var sString = d.getMonth() + 1 + ""-""
                + d.getDate() + ""-""
                + d.getFullYear() + ""-""
                + d.getHours()  + ""-""
                + d.getMinutes() + ""-""
                + d.getSeconds();
	var xmlmsg = ""<initialize>"";
	xmlmsg += ""<param name='jrad_standalone'>false</param>"";
	xmlmsg += ""<param name='sbm_flag'>true</param>"";
	xmlmsg += ""<param name='ui_type'>JRAD</param>"";
	//xmlmsg += ""<param name='ui_def_id'>4680036</param>"";
	//xmlmsg += ""<param name='share_dio'>false</param>"";
	xmlmsg += ""<param name='operating_unit_org_id'>""+ OracleOrgId + ""</param>"";
    xmlmsg += ""<param name='config_effective_date'>""+ sString + ""</param>"";
	xmlmsg += ""<param name='"" + S_SEBL_VERSION + ""'>""+ S_VERSION + ""</param>"";
	if (Inputs.GetPropertyCount() <= 0) {
		TheApplication.RaiseErrorText(""A system error has occured when launching configurator. Please inform your system administrator"");
		return;
	}

	var paramName = """";
	var paramValue = """";
	paramName = Inputs.GetFirstProperty();
	while ((paramName != null) && (paramName != """")) {
		paramValue = Inputs.GetProperty(paramName);
		if ((paramValue != null) && (paramValue != """")) {
			xmlmsg += ""<param name='"" + paramName + ""'>"" + paramValue + ""</param>"";
		}
		paramName = Inputs.GetNextProperty();
	}

	xmlmsg += ""</initialize>"";
	
	return xmlmsg;
}
function doOracleRespLookup(Inputs, Outputs)
{
  // not used. Remove soon
  
  TheApplication().RaiseErrorText(""doOracleResp shoudl be removed"");
}
function doOracleUserRespOULangLookup(inputPs)
{
  //TheApplication().TraceOn(""d:\\temp\\doOracleUserRespOULangLookup.txt"", ""Allocation"", ""All"");
  var outputPs = TheApplication().NewPropertySet();
  //outputPs.SetProperty(""OutputOracleResp"", ""22713"");
  //outputPs.SetProperty(""OutputOracleLang"", ""ENG"");
  //outputPs.SetProperty(""OutputOracleResp"", ""22713"");
  //outputPs.SetProperty(""OutputOracleLang"", ""US"");
  

  
  //outputPs.SetProperty(""OutputOracleResp"", ""OPERATIONS"");
  //outputPs.SetProperty(""OutputOracleLang"", ""ENG"");
  //outputPs.SetProperty(S_RESP_ID, ""21623"");

  try
  {
	  var svc2 = TheApplication().GetService(""CZIntegGetOracleUserRespOULang"");
	  svc2.InvokeMethod(""GetOracleUserRespOULang"", inputPs, outputPs);
    	  
  }
	catch  (e) 
	{
	//	TheApplication().Trace(e.toString());
	  TheApplication().RaiseErrorText(e.toString());
		throw e;
	}

	//TheApplication().Trace(""Finished"");
	//TheApplication().TraceOff();
  return outputPs;
}
function getAppShortName(Inputs)
{
	var hostApp = Inputs.GetProperty(""HostAppMode"");
	if (hostApp == ""Order"" || hostApp == ""VerifyOrder"") { 
    // Get the value from the worflow
    return (Inputs.GetProperty(""AppNameOrder""));
  }
  else if (hostApp == ""Quote"" || hostApp == ""VerifyQuote"" || hostApp == ""Template"") {
    return (Inputs.GetProperty(""AppNameQuote""));
  }
  else if (hostApp == ""Agreement"") {
    return (Inputs.GetProperty(""AppNameAgreement""));
  }
  else {
  	TheApplication.RaiseErrorText(""A system error has occured when launching configurator. Please inform your system administrator"");
  }
}
function getCredentials(Inputs, Outputs) {

  var boSsoSystemAdmin = TheApplication().GetBusObject(""SSO Systems Admin"") ;
  var systemId;

  // Get the SSO system for Oracle configurator

  var ssoSystemName = Inputs.GetProperty(S_SSO_SYSTEM_NAME);
  
  if (ssoSystemName == null || ssoSystemName == """") {
  	TheApplication.RaiseErrorText(S_STD_ERROR_TEXT + ""SsoSystemName not correctly defined."");  
  }
  var bcSsoSystem = boSsoSystemAdmin.GetBusComp(""SSO Systems"");
  bcSsoSystem.SetViewMode(3);
  bcSsoSystem.ActivateField(""Name"");
  bcSsoSystem.SetSearchSpec(""Name"", ssoSystemName);
  bcSsoSystem.ExecuteQuery();

  var bSuccess = bcSsoSystem.FirstRecord();

  if (!bSuccess) {
  	TheApplication.RaiseErrorText(S_STD_ERROR_TEXT + ""sso system not found: "" + ssoSystemName);
  } 
  else {
	  systemId = bcSsoSystem.GetFieldValue(""Id"");
   
    var bcSsoUser = boSsoSystemAdmin.GetBusComp(""SSO Sys User"") ;
    var loginId = TheApplication().LoginId();
    var loginName = TheApplication().LoginName();
    // Get the user's credentials

    bcSsoUser.SetViewMode(3);
    bcSsoUser.ActivateField(""SSO Password"");
    bcSsoUser.ActivateField(""SSO LoginId"");
    bcSsoUser.ActivateField(""Password Ref"");
    bcSsoUser.SetSearchSpec(""SSO System Id"", systemId);
    bcSsoUser.SetSearchSpec(""User Id"", TheApplication().LoginId());

    bcSsoUser.ExecuteQuery();

	  bSuccess = bcSsoUser.FirstRecord();

    if (!bSuccess) {
      TheApplication.RaiseErrorText(S_STD_ERROR_TEXT + ""No user defined in sso system."");  
    }
  }
  var user = bcSsoUser.GetFieldValue(""SSO LoginId"");
  var pwd = bcSsoUser.GetFieldValue(""SSO Password"");

  Outputs.SetProperty(S_USERNAME, user);
  Outputs.SetProperty(S_PWD, pwd);

  // Now get the URL. If the URL starts with HTTP
  // then the entire path has been provided by the
  // flow. use it. Otherwise, it is the final directory.
  // Append it into the url using the information from
  // WI service

  var siteUrl = Inputs.GetProperty(S_BV_SITE_URL);
  var finalUrl = null;
  // DONT CHECKIN the following line
  //siteUrl = ""http://qapache.us.oracle.com:3744/configurator/oracle.apps.cz.servlet.UiServlet"";

  if (siteUrl == null || siteUrl == """") {
    TheApplication().RaiseErrorText(S_STD_ERROR_TEXT + S_BV_SITE_URL + ""not properly defined."");  
  }
  else {
    var lcUrl = siteUrl.toLowerCase();

    if (lcUrl.indexOf(""http"") != 0) {
      var wiSymUrlName = Inputs.GetProperty(S_WI_SYMURL_NAME);      
      if (wiSymUrlName == null || wiSymUrlName == """") {
  	    TheApplication().RaiseErrorText(S_STD_ERROR_TEXT + ""WiSymUrlName not correctly defined."");  
      }
            
	    var boWiSymUrl = TheApplication().GetBusObject(""WI Symbolic URL"");
	    var bcWiSymUrl = boSsoSystemAdmin.GetBusComp(""WI Symbolic URL"");
	    bcWiSymUrl.SetViewMode(3);
	    bcWiSymUrl.ActivateField(""Name"");
	    bcWiSymUrl.ActivateField(""URL"");
	    bcWiSymUrl.ActivateField(""Host Virtual Name"");
	    bcWiSymUrl.ActivateField(""Host Name"");
	    bcWiSymUrl.SetSearchSpec(""Name"", wiSymUrlName);
	    bcWiSymUrl.ExecuteQuery();
	
      if (!bcWiSymUrl.FirstRecord()) {
        TheApplication().RaiseErrorText(S_STD_ERROR_TEXT + ""WI symbolic url entry not defined."");  
      }
	    var url = bcWiSymUrl.GetFieldValue(""URL"");
	
	    if (url == null || url == """") {
        TheApplication().RaiseErrorText(S_STD_ERROR_TEXT + ""WI symbolic url name not defined."");  
	    }
	    var hostVirtualName = bcWiSymUrl.GetFieldValue(""Host Virtual Name"");
	    if (hostVirtualName == null || hostVirtualName == """") {
        TheApplication().RaiseErrorText(S_STD_ERROR_TEXT + ""WI virtual host name not defined."");  
	    }
	    var hostName = bcWiSymUrl.GetFieldValue(""Host Name"");
	    if (hostName == null || hostName == """") {
        TheApplication().RaiseErrorText(S_STD_ERROR_TEXT + ""WI host name not defined."");  
	    }
	    // Substitute the virtual name with the name
	    var pos = url.indexOf(hostVirtualName);
	    finalUrl = url.substring(0, pos);
	    finalUrl = finalUrl + hostName + url.substring(pos+hostVirtualName.length);
	    // Remove the jsp, which is defined for the interactive session
	    pos = finalUrl.indexOf(""OA_HTML/CfgSebl.jsp"");
	
		  finalUrl = finalUrl.substring(0, pos) + siteUrl;
    }
    else {
		  finalUrl = siteUrl;
    }
  }
  Outputs.SetProperty(S_BV_SITE_URL, finalUrl);
}
function getHeaderBusCompName(Inputs)
{
	var source = Inputs.GetProperty(""Source"");
	var hostApp = Inputs.GetProperty(""HostAppMode"");
	var hdrBusCompName = """";
	
	if (source != null && source == ""Catalog"") {
		//In Catalog launch the WF process prop does not have headerBusCompName.
		switch (hostApp) {
			case ""Order"":
				hdrBusCompName = ""Order Entry - Orders"";
				break;
			case ""Quote"":
				hdrBusCompName = ""Quote"";
				break;
			case ""Agreement"":
				//Todo:
				//hdrBusCompName
				break;
		}
	}
	else {
	  if (hostApp == ""VerifyQuote"") {
	  	hdrBusCompName = ""Quote"";
	  } 
	  else if (hostApp == ""VerifyOrder"") {
	    hdrBusCompName = ""Order Entry - Orders"";
	  }
	  else {
		  hdrBusCompName = Inputs.GetProperty(""HeaderBusCompName"");
		}
	}
	return hdrBusCompName;
}
function getInvItemId(externalRef) {
  // The format is inv::org
  var invItemId = """";
  
  if (externalRef == null || externalRef == """") {
    invItemId = """";
  }
  else {
    var pos = externalRef.indexOf("":"");
     if (pos == -1) {
      TheApplication().RaiseErrorText(""CZSessionManagement.getInvItemId. incorrect format for external ref"");
    }

    invItemId = externalRef.substring(0, pos); 

  }
  return invItemId;
}
function getOrgId(externalRef) {
  // The format is inv::org
  
  var orgId = """";
  
  if (externalRef == null || externalRef == """") {
    orgId = """";
  }
  else {
    var pos = externalRef.lastIndexOf("":"");
    if (pos == -1) {
      TheApplication().RaiseErrorText(""CZSessionManagement.getOrgId. incorrect format for external ref"");
    }
    orgId = externalRef.substring(pos + 1);
  }
  return orgId;
}
function getSiebelLanguage()
{
	var sblLang = TheApplication().InvokeMethod(""LANGUAGE"");
  return sblLang;
}
function logPs(ps) {

 // TheApplication().Trace("">> "" + ps.GetType() + "" = "" + ps.GetValue());
  var p = ps.GetFirstProperty();
  var v;
  while(p != null && p != """") {

    v = ps.GetProperty(p);
  //  TheApplication().Trace(p + "" = "" + v);
    p = ps.GetNextProperty();
  }
  var cCount = ps.GetChildCount();
 // TheApplication().Trace(""#c = "" + cCount);
  var c = null; 
  for (var i=0; i < cCount; i++) {
	  c = ps.GetChild(i);
      logPs(c);
  }
}
function searchChild(Inputs, Outputs) {
 // TheApplication().Trace("">> "" + Inputs.GetType() + "" = "" + Inputs.GetValue());
  var ps = Inputs.GetChild(0);


  var searchFor = Inputs.GetValue();
  var cCount = ps.GetChildCount();

  var c = null; 
  for (var i=0; i < cCount; i++) {
	c = ps.GetChild(i);
    var candidate = c.GetType();
    if (candidate == searchFor) {
      Outputs.SetProperty("found"", c.GetValue());
      return;
    }
  }

}
function setBPELProperties(siebelUser, siebelBusinsessUnit, xmlMsgPS){
	// The BPEL calls to get key init message content
  // specifically the OU,Resp,Language
  // The operating unit is not used because
  // it will be available in external inventory item id
  // column and will be retrieved from there
  
  //TODO - figure out a way to get the language
  //TheApplication().TraceOn(""d:\\temp\\setBPELProperties.txt"", ""Allocation"", ""All"");
  var isiebellang = getSiebelLanguage(); 
  
  var bpelInput = TheApplication().NewPropertySet ();
  var bpelOutput = TheApplication().NewPropertySet ();

  bpelInput.SetProperty (""InputSiebelLang"", isiebellang);
  //bpelInput.SetProperty (""InputSiebelBU"", siebelBusinsessUnit);
  bpelInput.SetProperty(""InputSiebelUser"",siebelUser);
  
  //TheApplication().Trace(""Passed 1"");
  
  bpelOutput = doOracleUserRespOULangLookup(bpelInput);
  
  //TheApplication().Trace(""Passed 2"");  
  
  var oracleresp = bpelOutput.GetProperty(""OutputOracleResp"");
  var oraclelang = bpelOutput.GetProperty(""OutputOracleLang"");
  var oracleuser = bpelOutput.GetProperty(""OutputOracleUser"");
  var oracleOU = bpelOutput.GetProperty(""OutputOracleOU"");
  
  //TheApplication().Trace(""oracleresp = "" + oracleresp);
  //TheApplication().Trace(""OutputOracleLang = "" + oraclelang);
  //TheApplication().Trace(""OutputOracleUser = "" + oracleuser);
  //TheApplication().Trace(""oracleOU = "" + oracleOU);
  
  
  xmlMsgPS.SetProperty(S_LANGUAGE,oraclelang);
  xmlMsgPS.SetProperty(S_RESP_ID, oracleresp);
  xmlMsgPS.SetProperty(S_OU_ID, oracleOU);
	//TheApplication().TraceOff();
	
}
function updateRunId() {
    if (RUN_ID==null) RUN_ID = 1;
    else RUN_ID = RUN_ID + 1;
}
function CallPLSQL(Inputs, Outputs)
{
	var vImptJobId;
    var cmdString;
	vImptJobId = Inputs.GetProperty(""ImportJobId"");
    Clib.sprintf(cmdString, ""C:\\app\\tshaikh\\product\\11.2.0\\client_1\\BIN\\sqlplus.exe ORAFYG101/ORAFYG101@ORAFYG101 @C:\\fs\\callplsql.sql %s"", vImptJobId)    
	Clib.system(cmdString);
	return (ContinueOperation);
}
	
"
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{
	return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
  CallPLSQL(Inputs, Outputs);    
   return (CancelOperation);	
}
function CheckDupMail(Inputs, Outputs)
{
//Code to check Duplicte records in Responce
	var vConId = Inputs.GetProperty(""ContactId"");
	var RespCount,sSearchExpr;
	var vCampId = Inputs.GetProperty(""CampId"");
	var vPrConId = Inputs.GetProperty(""PrConId"");
	var vAppBO = TheApplication().GetBusObject(""Campaign"");
	var vAppBC = vAppBO.GetBusComp(""Response"");	

	if(vConId != null && vConId != """")
	{

		 sSearchExpr = ""[PR_CON_ID] = '"" + vConId  + ""' AND [SRC_ID] = '"" + vCampId + ""'""; 
	}
	else
	{
		sSearchExpr = ""[PRSP_CON_ID] = '"" + vPrConId  + ""' AND [SRC_ID] = '"" + vCampId + ""'""; 
	}

	vAppBC.SetViewMode(AllView);
	vAppBC.ClearToQuery();
	vAppBC.SetSearchExpr(sSearchExpr);
	vAppBC.ExecuteQuery(ForwardBackward);
	var bExistsRecord = vAppBC.FirstRecord();
	if(bExistsRecord)
			{

				RespCount = ""Y"";
			}
			else
			{
				 RespCount = ""N"";
			}
	Outputs.SetProperty(""RespCount"", RespCount);
}
function CheckExpDate(Inputs, Outputs)
{
		var vCampId = Inputs.GetProperty(""CampaignId"");
		var DateExpired = """";
		var vAppBO = TheApplication().GetBusObject(""Campaign"");
		var vAppBC = vAppBO.GetBusComp(""Campaign"");			
		var sSearchExpr;
		sSearchExpr = ""[Id] = '"" + vCampId + ""'"";
		
		vAppBC.SetViewMode(AllView);
		vAppBC.ClearToQuery();
		vAppBC.SetSearchExpr(sSearchExpr);
		vAppBC.ExecuteQuery(ForwardBackward);
		var dtToCheck = vAppBC.GetFieldValue(""End Date"");

		var dtToday = new Date();
	    dtToday = ToNumber(dtToday.getMonth() + 1) + ""/"" + ToNumber(dtToday.getDate()) + ""/"" + ToNumber(dtToday.getFullYear());
	    dtToday = Date.parse(dtToday);

		dtToCheck = dtToCheck.split(""/"");
        dtToCheck = ToNumber(dtToCheck[0]) + ""/"" + ToNumber(dtToCheck[1]) + ""/"" + ToNumber(dtToCheck[2].substring(0, 4));
        dtToCheck = Date.parse(dtToCheck);

		var iResult = Math.ceil((dtToday - dtToCheck)/86400000);

		if(iResult<0)
		{// Campaign has still not expired
			DateExpired = ""N"";
		}
		else
		{// Campaign has expired
			DateExpired = ""Y"";
		}

		Outputs.SetProperty(""DateExpired"", DateExpired);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	
	try
	{

		if (MethodName == ""CheckExpDate"")
		{
			
			CheckExpDate(Inputs, Outputs);
			return(CancelOperation);
			
		}
		
		if (MethodName == ""CheckDupMail"")
		{
			
			CheckDupMail(Inputs, Outputs);
			return(CancelOperation);
			
		}


		if(MethodName == ""Approval"")
		{

			var vId = Inputs.GetProperty(""CampaignId"");
			var vName = Inputs.GetProperty(""CampaignName"");
			var sID = Inputs.GetProperty(""LoginId"");

			var vAppBO:BusObject = TheApplication().GetBusObject(""FINS Approval"");
			var vAppBC:BusComp = vAppBO.GetBusComp(""FINS Approval Level"");
			var vApplBC:BusComp = vAppBO.GetBusComp(""FINS Approval Stage"");
			//var vCampBO:BusObject = TheApplication().GetBusObject(""UInbox Item Task"");
			//var vInboxItemBC = vCampBO.GetBusComp(""MKTG Approval Process"");	
			//WIPRO.Phase2.11072016 - Commented by TSINGHALC as below cloned BC needs to be invoked
			//var vInboxItemBC:BusComp = vCampBO.GetBusComp(""STC MKTG Approval Process"");

			var svc:Service = TheApplication().GetService(""Workflow Process Manager"");
			var Input:PropertySet = TheApplication().NewPropertySet();
			var Output:PropertySet = TheApplication().NewPropertySet();
	        var sSearchExpr;
			sSearchExpr = ""[Approval Level] = 'Campaign'"";
			vAppBC.SetViewMode(AllView);
			vAppBC.ClearToQuery();
			vAppBC.SetSearchExpr(sSearchExpr);
			vAppBC.ExecuteQuery(ForwardBackward);
			var bExistsRecord = vAppBC.FirstRecord();
			if(bExistsRecord)
			{
				vApplBC.SetViewMode(AllView);
				vApplBC.SetSortSpec(""Created(ASCENDING)"");
				vApplBC.ClearToQuery();
				vApplBC.ExecuteQuery(ForwardBackward);
				var cExistsRecord = vApplBC.FirstRecord();

                if(cExistsRecord)
				{ 
					vApplBC.ActivateField(""Owner Login Id"");
					var vToEmpId = vApplBC.GetFieldValue(""Owner Login Id"");
					Input.SetProperty(""ProcessName"", ""Marketing Approval Process""); 
					Input.SetProperty(""ObjectId"", vId);
					Input.SetProperty(""ObjectStatus"", ""Submit"");
					Input.SetProperty(""ToEmployeeId"", vToEmpId);
					Input.SetProperty(""FromEmployeeId"", sID);
					Input.SetProperty(""InboxTypeName"", ""Campaigns"");
					Input.SetProperty(""InboxName"", vName);
					Input.SetProperty(""BusObjectName"", ""Campaign"");
					Input.SetProperty(""LastPoint"", ""No"");
					svc.InvokeMethod(""RunProcess"", Input, Output);
				}

			}

	//Calling WF
			var vCamBO:BusObject = TheApplication().GetBusObject(""Campaign"");
			var vCamBC:BusComp = vCamBO.GetBusComp(""Campaign"");
						
			var svca:Service = TheApplication().GetService(""Workflow Process Manager"");
			var Inputa:PropertySet = TheApplication().NewPropertySet();
			var Outputa:PropertySet = TheApplication().NewPropertySet();
			
			Inputa.SetProperty(""ProcessName"", ""STC Campaign Mgmt Approval Email WF"");
			Inputa.SetProperty(""Object Id"", vId);
			Inputa.SetProperty(""CampaignId"", vId);

			svca.InvokeMethod(""RunProcess"", Inputa, Outputa);
			
			//End of Calling WF Code 

			var sCampBC:BusComp = TheApplication().GetBusObject(""STC Campaign Thin BO"").GetBusComp(""STC Campaign Thin BC"");
			sCampBC.SetViewMode(AllView);
			sCampBC.SetSearchSpec(""Id"", vId);
			sCampBC.ExecuteQuery(ForwardOnly);
			if (sCampBC.FirstRecord())
			{
				sCampBC.ActivateField(""Approval Status"");
				sCampBC.SetFieldValue(""Approval Status"", ""Submitted"");
				sCampBC.WriteRecord();
			}
//			var sSearchExpr1;
//			sSearchExpr1 = ""[Item Object Id] = '"" + vId + ""' AND [Action] = 'Submit' "";

			//query the BC with search expr
//			vInboxItemBC.SetViewMode(AllView);
	//		vInboxItemBC.SetSortSpec(""Created(ASCENDING)"");
	//	vInboxItemBC.ClearToQuery();
//			vInboxItemBC.SetSearchExpr(sSearchExpr1);
//			vInboxItemBC.ExecuteQuery(ForwardBackward);
//			var IExistsRecord = vInboxItemBC.FirstRecord();
	//		var CountRec =  vInboxItemBC.CountRecords();
//			if(CountRec > 1)
//			{
	//			if(IExistsRecord)
//				{
				 //vInboxItemBC.SetFieldValue(""Item Id"",""Default"");
				 //vInboxItemBC.WriteRecord();
				 //WIPRO.Phase2.11072016 - Commented above code by TSINGHALC as requirement is to delete record
//				 vInboxItemBC.DeleteRecord();
//				}
//			}
      
			
			return(CancelOperation);
			//return (ContinueOperation);

		}
	}

	catch(e)
	{
		throw(e);
	}

	finally 
	{
      vId = null;
	  vName = null;
	  vAppBO = null;
	  vAppBC = null;
	  vApplBC = null;
	 // vCampBO = null;
	  //vInboxItemBC = null;
	 
	  svc = null;
	}



	
}
function CheckDupMail(Inputs, Outputs)
{
//Code to check Duplicte records in Responce
	var vConId = Inputs.GetProperty(""ContactId"");
	var RespCount,sSearchExpr;
	var vCampId = Inputs.GetProperty(""CampId"");
	var vPrConId = Inputs.GetProperty(""PrConId"");
	var vAppBO = TheApplication().GetBusObject(""Campaign"");
	var vAppBC = vAppBO.GetBusComp(""Response"");	

	if(vConId == null || vConId == """")
	{

		 sSearchExpr = ""[S_CAMP_CON_ID] = '"" + vConId  + ""' AND [SRC_ID] = '"" + vCampId + ""'""; 
	}
	else
	{
		sSearchExpr = ""[PR_CON_ID] = '"" + vPrConId  + ""' AND [SRC_ID] = '"" + vCampId + ""'""; 
	}

	vAppBC.SetViewMode(AllView);
	vAppBC.ClearToQuery();
	vAppBC.SetSearchExpr(sSearchExpr);
	vAppBC.ExecuteQuery(ForwardBackward);
	var bExistsRecord = vAppBC.FirstRecord();
	if(bExistsRecord)
			{

				RespCount = ""Y"";
			}
			else
			{
				 RespCount = ""N"";
			}
	Outputs.SetProperty(""RespCount "", RespCount);
}
function CheckExpDate(Inputs, Outputs)
{
		var vCampId = Inputs.GetProperty(""CampaignId"");
		var DateExpired = """";
		var vAppBO = TheApplication().GetBusObject(""Campaign"");
		var vAppBC = vAppBO.GetBusComp(""Campaign"");			
		var sSearchExpr;
		sSearchExpr = ""[Id] = '"" + vCampId + ""'"";
		
		vAppBC.SetViewMode(AllView);
		vAppBC.ClearToQuery();
		vAppBC.SetSearchExpr(sSearchExpr);
		vAppBC.ExecuteQuery(ForwardBackward);
		var dtToCheck = vAppBC.GetFieldValue(""End Date"");

		var dtToday = new Date();
	    dtToday = ToNumber(dtToday.getMonth() + 1) + ""/"" + ToNumber(dtToday.getDate()) + ""/"" + ToNumber(dtToday.getFullYear());
	    dtToday = Date.parse(dtToday);

		dtToCheck = dtToCheck.split(""/"");
        dtToCheck = ToNumber(dtToCheck[0]) + ""/"" + ToNumber(dtToCheck[1]) + ""/"" + ToNumber(dtToCheck[2].substring(0, 4));
        dtToCheck = Date.parse(dtToCheck);

		var iResult = Math.ceil((dtToday - dtToCheck)/86400000);

		if(iResult<0)
		{// Campaign has still not expired
			DateExpired = ""N"";
		}
		else
		{// Campaign has expired
			DateExpired = ""Y"";
		}

		Outputs.SetProperty(""DateExpired"", DateExpired);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	
	try
	{

		if (MethodName == ""CheckExpDate"")
		{
			
			CheckExpDate(Inputs, Outputs);
			return(CancelOperation);
			
		}
		
		if (MethodName == ""CheckDupMail"")
		{
			
			CheckDupMail(Inputs, Outputs);
			return(CancelOperation);
			
		}


		if(MethodName == ""Approval"")
		{

			var vId = Inputs.GetProperty(""BudgetId"");
			var vName = Inputs.GetProperty(""Name"");
			var vTotal = Inputs.GetProperty(""vTotal"");
			var sID = Inputs.GetProperty(""LoginId"");

			var vAppBO:BusObject = TheApplication().GetBusObject(""FINS Approval"");
			var vAppBC:BusComp = vAppBO.GetBusComp(""FINS Approval Level"");
			var vApplBC:BusComp = vAppBO.GetBusComp(""FINS Approval Stage"");
			//var vCampBO:BusObject = TheApplication().GetBusObject(""UInbox Item Task"");
			//var vInboxItemBC = vCampBO.GetBusComp(""MKTG Approval Process"");	
			//WIPRO.Phase2.11072016 - Commented by TSINGHALC as below cloned BC needs to be invoked
			//var vInboxItemBC:BusComp = vCampBO.GetBusComp(""STC MKTG Approval Process"");

			var svc:Service = TheApplication().GetService(""Workflow Process Manager"");
			var Input:PropertySet = TheApplication().NewPropertySet();
			var Output:PropertySet = TheApplication().NewPropertySet();
	        var sSearchExpr;
			sSearchExpr = ""[Approval Level] = 'Campaign Budget'"";
			vAppBC.SetViewMode(AllView);
			vAppBC.ClearToQuery();
			vAppBC.SetSearchExpr(sSearchExpr);
			vAppBC.ExecuteQuery(ForwardBackward);
			var bExistsRecord = vAppBC.FirstRecord();
			if(bExistsRecord)
			{
				vApplBC.SetViewMode(AllView);
				vApplBC.SetSortSpec(""Created(ASCENDING)"");
				vApplBC.ClearToQuery();
				vApplBC.ExecuteQuery(ForwardBackward);
				var cExistsRecord = vApplBC.FirstRecord();

                if(cExistsRecord)
				{ 
					vApplBC.ActivateField(""Owner Login Id"");
					var vToEmpId = vApplBC.GetFieldValue(""Owner Login Id"");
					Input.SetProperty(""ProcessName"", ""Marketing Approval Process""); 
					Input.SetProperty(""ObjectId"", vId);
					Input.SetProperty(""ObjectStatus"", ""Submit"");
					Input.SetProperty(""ToEmployeeId"", vToEmpId);
					Input.SetProperty(""FromEmployeeId"", sID);
					Input.SetProperty(""InboxTypeName"", ""Budget Requests"");
					Input.SetProperty(""InboxName"", vName);
					Input.SetProperty(""BusObjectName"", ""Marketing Budget Request"");
					Input.SetProperty(""LastPoint"", ""No"");
					svc.InvokeMethod(""RunProcess"", Input, Output);
				}

			}

	//Calling WF
			var vCamBO:BusObject = TheApplication().GetBusObject(""Marketing Budget Request"");
			var vCamBC:BusComp = vCamBO.GetBusComp(""Marketing Budget Requests"");
						
			var svca:Service = TheApplication().GetService(""Workflow Process Manager"");
			var Inputa:PropertySet = TheApplication().NewPropertySet();
			var Outputa:PropertySet = TheApplication().NewPropertySet();
			
			Inputa.SetProperty(""ProcessName"", ""STC Budget Approval Email WF"");
			Inputa.SetProperty(""BudgetId"", vId);
			Inputa.SetProperty(""vTotal"", vTotal);

			svca.InvokeMethod(""RunProcess"", Inputa, Outputa);
			
			//End of Calling WF Code 

			var sCampBC:BusComp = TheApplication().GetBusObject(""STC Marketing Budget Request Thin BO"").GetBusComp(""STC Marketing Budget Requests Thin BC"");
			sCampBC.SetViewMode(AllView);
			sCampBC.SetSearchSpec(""Id"", vId);
			sCampBC.ExecuteQuery(ForwardOnly);
			if (sCampBC.FirstRecord())
			{
				sCampBC.ActivateField(""Approval Status"");
				sCampBC.SetFieldValue(""Approval Status"", ""Submitted"");
				sCampBC.WriteRecord();
			}
//			var sSearchExpr1;
//			sSearchExpr1 = ""[Item Object Id] = '"" + vId + ""' AND [Action] = 'Submit' "";

			//query the BC with search expr
//			vInboxItemBC.SetViewMode(AllView);
	//		vInboxItemBC.SetSortSpec(""Created(ASCENDING)"");
	//	vInboxItemBC.ClearToQuery();
//			vInboxItemBC.SetSearchExpr(sSearchExpr1);
//			vInboxItemBC.ExecuteQuery(ForwardBackward);
//			var IExistsRecord = vInboxItemBC.FirstRecord();
	//		var CountRec =  vInboxItemBC.CountRecords();
//			if(CountRec > 1)
//			{
	//			if(IExistsRecord)
//				{
				 //vInboxItemBC.SetFieldValue(""Item Id"",""Default"");
				 //vInboxItemBC.WriteRecord();
				 //WIPRO.Phase2.11072016 - Commented above code by TSINGHALC as requirement is to delete record
//				 vInboxItemBC.DeleteRecord();
//				}
//			}
      
			
			return(CancelOperation);
			//return (ContinueOperation);

		}
	}

	catch(e)
	{
		throw(e);
	}

	finally 
	{
      vId = null;
	  vName = null;
	  vAppBO = null;
	  vAppBC = null;
	  vApplBC = null;
	 // vCampBO = null;
	  //vInboxItemBC = null;
	 
	  svc = null;
	}



	
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if (MethodName == ""GetLanguageCodeFromMapping"")
	{
		var sRequestSiteID = """";
		sRequestSiteID = Inputs.GetProperty(""RequestSiteID"");
		switch(sRequestSiteID)
		{
			case ""0"":
				Outputs.SetProperty (""LanguageCode"", ""ENU"");
				break;
			case ""101"":
				Outputs.SetProperty (""LanguageCode"", ""ITA"");
				break;
			case ""71"":
				Outputs.SetProperty (""LanguageCode"", ""FRA"");
				break;
			case ""123"":
				Outputs.SetProperty (""LanguageCode"", ""NLB"");
				break;
			/*case ""15"":
				Outputs.SetProperty (""LanguageCode"", ""ENA"");
				break;*/
			case ""218"":
				Outputs.SetProperty (""LanguageCode"", ""SVE"");
				break;
			default:				
				Outputs.SetProperty (""LanguageCode"", ""ENU"");
				break;
		}
		return CancelOperation;
	}		
	return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function Resubmit()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_TERMINATION"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-02.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */

	//var file=Clib.fopen(""/siebelfs/hout.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
        {

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			MInputs.SetProperty(""Object Id"",MRowId);    
			MInputs.SetProperty(""ResolutionCode"",""Level 2: Bar Outgoing Calls"");
			MInputs.SetProperty(""ProcessName"",""STC Billing Resolution Test"");

			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

		}
    }
	MOutputs=null;
	MWorkflowProc=null;
	MInputs=null;
	MRowId=null
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;
}
function Execute(Inputs, Outputs)
{

// Please implement your specific back-office codes here.
// NOTE: The Inputs argument are in the structure of the Credit Check Request Interface Int. Object.
//       You should set your Outputs argument in the structure of teh Credit Check Response Interface Int. Object before returning it to the calling program. 
//
	
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   var ret= CancelOperation;
   
   if (MethodName==""Execute"")
   {
      Execute(Inputs,Outputs);
   }
   else
   {
      TheApplication.ErrorText(""Invalid function name. Valid method name is 'Execute'"");
      ret=ContinueOperation;
   }
   return ret;
}
function Execute(Inputs, Outputs)
{
var ResponseFile;
var OutputFile;
var xmlService;
var Outdata; 
var Indata;
var psInputs2;
var psOutputs2;
var bsFILE;
var psInputs3;
var psOutputs3;
var psInputs4;
var psOutputs4;
var value2;
var child1;
var logfile;
var getType1;
var resultfile;
var envPath;
var envSlash;

if (Clib.getenv(""OS"") == ""Windows_NT"")
{
 envSlash = ""\\"";
} else
{
 envSlash = ""/"";
}

 envPath = Clib.getenv(""REQUEST_ASI_PATH"") + envSlash;

 if ((envPath == (""null"" + envSlash)) || (envPath == envSlash))
 {
	envPath = Clib.getenv(""SIEBEL_HOME"") + envSlash + ""bin"" + envSlash;
 }


 ResponseFile = envPath + ""CreditResponse.xml"";
 OutputFile = envPath + ""CreditOutput.xml"";
 psInputs2 = TheApplication().NewPropertySet();
 psInputs2 = Inputs;
 psOutputs2 = TheApplication().NewPropertySet();
 xmlService 	= TheApplication().GetService(""EAI XML Write to File"");
 psInputs2.SetProperty (""FileName"", OutputFile);
 xmlService.InvokeMethod(""WriteEAIMsg"", psInputs2, psOutputs2);

 resultfile = Clib.fopen(ResponseFile, ""r"");	   
 if (!resultfile)
  {
	 GenerateResults(Outputs);
  } 
 else 
   {
    psInputs4 = TheApplication().NewPropertySet();
	psInputs4.SetProperty(""FileName"", ResponseFile);	
    xmlService = TheApplication().GetService(""EAI XML Read from File"");
    xmlService.InvokeMethod(""ReadEAIMsg"", psInputs4,  Outputs);
   }
 }
function GenerateResults (Outputs)
{
var SysDate = Clib.time();
var ObjDate = Date.fromSystem(SysDate);
var dateStr = (ObjDate.getMonth()+1) + ""/"" + ObjDate.getDate() + ""/2002"";

var SiebelMessage = TheApplication().NewPropertySet();
var ListOfHeader = TheApplication().NewPropertySet();
var CreditHeader = TheApplication().NewPropertySet(); 

CreditHeader.SetProperty(""Error Code"",""0"");
CreditHeader.SetProperty(""Error Text"",""No error!"");
CreditHeader.SetProperty(""Credit Status As Of"",dateStr);
CreditHeader.SetProperty(""Credit Status Code"",""1"");
CreditHeader.SetProperty(""Credit Status Message"",""Credit Okay"");

ListOfHeader.AddChild(CreditHeader);
SiebelMessage.AddChild(ListOfHeader);
Outputs.AddChild(SiebelMessage);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   var ret= CancelOperation;
   
   if (MethodName==""Execute"")
   {
      Execute(Inputs,Outputs);
   }
   else
   {
      TheApplication.ErrorText(""Invalid function name. Valid method name is 'Execute'"");
      ret=ContinueOperation;
   }
   return ret;
}
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
    CanInvoke = true;
	return (CancelOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
     if(MethodName == ""Invoke"") 
     {
		var msg = Inputs.GetProperty(""InputMessage"");
		var outMsg = ""What do you mean by "" + msg + ""?"";
		
		var headerContext = Inputs.GetChild(0);
    	var h1 = headerContext.GetChild(0);
    	var h2 = headerContext.GetChild(1);    	
		var callbackLocation = h1.GetValue();
		var correlationId = h2.GetValue();
		outMsg = outMsg + "":"" + callbackLocation + ""/"" + correlationId;
		Outputs.SetProperty(""OutputMessage"", outMsg);
     }
	return (CancelOperation);
}
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
    CanInvoke = true;
	return (CancelOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
     if(MethodName == ""StripHeader"") 
     {
        if(Inputs.GetChildCount() > 0)
        {
           Outputs.InsertChildAt(Inputs.GetChild(0), 0);        
           var soapEnv = Outputs.GetChild(0);
           if(soapEnv.GetChildCount() == 2) // headers and body
           {
              var soapHeader = soapEnv.GetChild(0);
              var callBackHeader = soapHeader.GetChild(0);
              if(callBackHeader.GetChildCount() == 2)
              {
                 var headerContext = TheApplication().NewPropertySet();
                 headerContext.SetType(""CustomHeaderContext"");
                 
                 // get the header child property set
                 var callBackLocnHeader = callBackHeader.GetChild(0);
                 var correlationIdHeader = callBackHeader.GetChild(1);
                 headerContext.AddChild(callBackLocnHeader);
                 headerContext.AddChild(correlationIdHeader);
                 soapHeader.RemoveChild(0);
                 Outputs.AddChild(headerContext);
              }
           }
        }
     }
     else if(MethodName == ""AddHeader"") 
     {
        if(Inputs.GetChildCount() > 0)
        {
            Outputs.InsertChildAt(Inputs.GetChild(0), 0);        
          
            var soapEnv = Outputs.GetChild(0);
	        var soapHeader = TheApplication().NewPropertySet();
	        soapHeader.SetType(""soapEnv:Header"");
	        soapHeader.SetProperty(""xmlns:soapEnv"", ""http://schemas.xmlsoap.org/soap/envelope/"");

			var correlationIdHeader = TheApplication().NewPropertySet();	        
			correlationIdHeader.SetType(""CorrelationId"");
	        if(Inputs.GetChildCount() == 2)
	        {
	          // get the correlation id from soap header context
	          var soapHeaderCntxt = Inputs.GetChild(1);
	          var corIdHeader = soapHeaderCntxt.GetChild(0);
	          correlationIdHeader.SetValue(corIdHeader.GetValue());
	        }
	        else
	        {
	          // set default correlation id header
	          correlationIdHeader.SetValue(""30"");
	        }
	        soapHeader.AddChild(correlationIdHeader);
	        soapEnv.InsertChildAt(soapHeader, 0);
        }
     }
     
     else if(MethodName == ""AddPSHeader"") 
     {
        if(Inputs.GetChildCount() > 0)
        {
            Outputs.InsertChildAt(Inputs.GetChild(0), 0);        
          
            var soapEnv = Outputs.GetChild(0);
	        var soapHeader = TheApplication().NewPropertySet();
	        soapHeader.SetType(""PropertySetHeader"");
	        soapHeader.SetProperty(""xmlns:PropertySet"", ""http://www.siebel.com/propertyset"");

			var correlationIdHeader = TheApplication().NewPropertySet();	        
			correlationIdHeader.SetType(""CorrelationId"");
	        if(Inputs.GetChildCount() == 2)
	        {
	          // get the correlation id from soap header context
	          var soapHeaderCntxt = Inputs.GetChild(1);
	          var corIdHeader = soapHeaderCntxt.GetChild(0);
	          correlationIdHeader.SetValue(corIdHeader.GetValue());
	        }
	        else
	        {
	          // set default correlation id header
	          correlationIdHeader.SetValue(""30"");
	        }
	        soapHeader.AddChild(correlationIdHeader);
	        soapEnv.InsertChildAt(soapHeader, 0);
        }
     }
	return (CancelOperation);
}
"//Your public declarations go here...  
"
"/**********************************************************************************************************
Purpose 		: Function Add Product Non RCOIS/ No Customize
Author 			: GURURAJ MADHAVARAO
Change Log		: New function
***********************************************************************************************************
Date(DD/MM/YYYY)	| By		| Description of Change																		
-----------------------------------------------------------------------------------------------------------
14/12/2020		1.0   | GURURAJ MADHAVARAO	| Created new to add atributes
----------------------------------------------------------------------------------------------------------*/
function AddAttributes(Inputs,Outputs)
{
	var app=TheApplication();
	var vNewLineItemId=Inputs.GetProperty(""New Line Item Id"");
	var vAddProdName=Inputs.GetProperty(""Add ProdName"");
	var vSpec,isRecord=false,vAtrName="""",vAtrId="""",isrec=false;
	var lbc=app.GetBusObject(""List Of Values"").GetBusComp(""List Of Values"");
	var oAtr=app.GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Item XA"");
	var pAtr=app.GetBusObject(""ISS CP Loader"").GetBusComp(""Cfg ISS Obj Attributes"");
		
	try
	{
	 	//Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");
		with(lbc)
		{
			SetViewMode(AllView);
			ActivateField(""Type"");
			ActivateField(""Value"");
			ActivateField(""Name"");
			ActivateField(""Active"");
			ActivateField(""Description"");
			vSpec=""[Type] = 'STC_SASCMS_PRODUCT' AND [Name] = 'MAINPRODUCT' AND [Active] = 'Y'"";
			ClearToQuery();
			SetSearchExpr(vSpec);
			ExecuteQuery(ForwardOnly);
			isRecord=FirstRecord();
			if(isRecord)
			{
				if(vAddProdName == GetFieldValue(""Value""))
				{
					vSpec=""[Type] = 'STC_SASCMS_PRODUCT' AND [Description] = 'ATTRB' AND [Active] = 'Y'"";
					ClearToQuery();
					SetSearchExpr(vSpec);
					ExecuteQuery(ForwardOnly);
					isRecord=FirstRecord();
					while(isRecord)
					{
						vAtrName=GetFieldValue(""Value"");
						with(oAtr)
						{
							//SetViewMode(AllView);
							with(pAtr)
							{
								SetViewMode(AllView);

								ActivateField(""Name"");
								ActivateField(""Last Version"");
								ActivateField(""Id"");
								vSpec=""[Local Name] = '""+ vAtrName + ""' AND [Last Version] = '999999999'"";
								ClearToQuery();
								SetSearchExpr(vSpec);
								ExecuteQuery(ForwardOnly);
								isrec=FirstRecord();
								
								if(isrec)
								{
									vAtrId=GetFieldValue(""Id"");
								}
								else
								{
									UndoRecord();
									app.RaiseErrorText(""No Attribute with name: ""+vAtrName+""\n"");
								}
								
							}
							ActivateField(""Name"");
							ActivateField(""Object Id"");
							ActivateField(""Action Code"");
							ActivateField(""Attribute Id"");
							ActivateField(""Cfg State Code"");
							ActivateField(""Display Name"");
							
							NewRecord(NewAfter);
							SetFieldValue(""Display Name"",vAtrName);
							SetFieldValue(""Name"",vAtrName);
							SetFieldValue(""Object Id"",vNewLineItemId);
							SetFieldValue(""Action Code"",""Add"");
							SetFieldValue(""Attribute Id"",vAtrId);
							SetFieldValue(""Cfg State Code"",""Engine Picked Item"");
							
							WriteRecord();
		
						}
						isRecord=NextRecord();
					}
				}
			}
			else
			{
				app.RaiseErrorText(""No LOV Rec found for Type: STC_SASCMS_PRODUCT , LIC: MAINPRODUCT \n"");
			}
			
		}
		
		
	}
	catch(e)
	{
		with(oAtr)
		{
			ActivateField(""Object Id"");

			SetViewMode(AllView);
			vSpec=""[Object Id] = '""+ vNewLineItemId + ""'"";
			ClearToQuery();
			SetSearchExpr(vSpec);
			ExecuteQuery(ForwardOnly);
			while(FirstRecord())
			{
				DeleteRecord();
			}
		}
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
		oAtr.WriteRecord();
	}
}
"/**********************************************************************************************************
Purpose 		: Function Add Product Non RCOIS/ No Customize
Author 			: GURURAJ MADHAVARAO
Change Log		: New function
***********************************************************************************************************
Date(DD/MM/YYYY)	| By		| Description of Change																		
-----------------------------------------------------------------------------------------------------------
14/12/2020		1.0   | GURURAJ MADHAVARAO	| Created new to add atributes
12/01/2021		1.1   | GURURAJ MADHAVARAO  | Added logic to recieve part num from calling function
											  And added logic to make attributes addition more generic
----------------------------------------------------------------------------------------------------------*/
function AddAttributes(Inputs,Outputs)
{
	var app=TheApplication();
	var vNewLineItemId=Inputs.GetProperty(""New Line Item Id"");
	var vAddProdName=Inputs.GetProperty(""Add ProdName"");
	//Refer comments version 1.1
	var vAddProdPartNum=Inputs.GetProperty(""Add Prod PartNum"");
	var vSpec,isRecord=false,vAtrName="""",vAtrId="""",isrec=false;
	var lbc=app.GetBusObject(""List Of Values"").GetBusComp(""List Of Values"");
	var oAtr=app.GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Item XA"");
	var pAtr=app.GetBusObject(""ISS CP Loader"").GetBusComp(""Cfg ISS Obj Attributes"");
		
	try
	{
	 	//Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");
		with(lbc)
		{
			SetViewMode(AllView);
			ActivateField(""Type"");
			ActivateField(""Value"");
			ActivateField(""Name"");
			ActivateField(""Active"");
			ActivateField(""Description"");
			ActivateField(""High"");

			vSpec=""[Type] = 'STC_SASCMS_ATTRPROD' AND [Name] LIKE '"" + vAddProdPartNum +""*' AND [Active] = 'Y'"";
			ClearToQuery();
			SetSearchExpr(vSpec);
			ExecuteQuery(ForwardOnly);
			isRecord=FirstRecord();
			while(isRecord)
			{
				vAtrName=GetFieldValue(""High"");
				with(oAtr)
				{
					//SetViewMode(AllView);
					with(pAtr)
					{
						SetViewMode(AllView);

						ActivateField(""Name"");
						ActivateField(""Last Version"");
						ActivateField(""Id"");
						vSpec=""[Local Name] = '""+ vAtrName + ""' AND [Last Version] = '999999999'"";
						ClearToQuery();
						SetSearchExpr(vSpec);
						ExecuteQuery(ForwardOnly);
						isrec=FirstRecord();
							
						if(isrec)
						{
							vAtrId=GetFieldValue(""Id"");
						}
						else
						{
							UndoRecord();
							app.RaiseErrorText(""No Attribute with name: ""+vAtrName+""\n"");
						}
								
					}
					ActivateField(""Name"");
					ActivateField(""Object Id"");
					ActivateField(""Action Code"");
					ActivateField(""Attribute Id"");
					ActivateField(""Cfg State Code"");
					ActivateField(""Display Name"");
						
					NewRecord(NewAfter);
					SetFieldValue(""Display Name"",vAtrName);
					SetFieldValue(""Name"",vAtrName);
					SetFieldValue(""Object Id"",vNewLineItemId);
					SetFieldValue(""Action Code"",""Add"");
					SetFieldValue(""Attribute Id"",vAtrId);
					SetFieldValue(""Cfg State Code"",""Engine Picked Item"");
							
					WriteRecord();
		
				}
				isRecord=NextRecord();
			}
		}
	}

	catch(e)
	{
		with(oAtr)
		{
			ActivateField(""Object Id"");

			SetViewMode(AllView);
			vSpec=""[Object Id] = '""+ vNewLineItemId + ""'"";
			ClearToQuery();
			SetSearchExpr(vSpec);
			ExecuteQuery(ForwardOnly);
			while(FirstRecord())
			{
				DeleteRecord();
			}
		}
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
		oAtr.WriteRecord();
	}
}
function AddMultipleProduct(Inputs,Outputs,RCOIS,QBS)
{
	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var PortItemId,PPath,addprod;
	var PlanNameArray,PlanName;
	var vProdNameArr, vProdName="""", vParProdName="""", vProdArrLen=0;
	var ordid=Inputs.GetProperty(""OrderId"");
	var oliid=Inputs.GetProperty(""LineItemId"");
	var productid=Inputs.GetProperty(""RootProductId"");
	var io=Inputs.GetProperty(""IntObjName"");
	var ordType=Inputs.GetProperty(""OrderType"");
	var OrderInstance=TheApplication().NewPropertySet();
	var GetRootPOrderIns=TheApplication().NewPropertySet();
	var CheckFlag=false;
	var out2=TheApplication().NewPropertySet();
	var PrevIntegIdArr=new Array();

	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

		PlanName=Inputs.GetProperty(""AddProdName"");
		PlanNameArray=PlanName.split("","");
		var j=0;
		var tmpArrL=PlanNameArray.length;

		for(var i=0;i<PlanNameArray.length;i++)
		{
			vProdName = PlanNameArray[i];
			vProdNameArr = vProdName.split("":"");
			vProdArrLen = vProdNameArr.length;
			if (vProdArrLen > 1)
			{
				vParProdName = vProdNameArr[0];
				vProdName = vProdNameArr[1];
			}
			else{
				vParProdName = """";
			}

			inp.SetProperty(""BusinessObject"",""Internal Product"");
			inp.SetProperty(""BusinessComponent"",""Internal Product - ISS Admin"");
			inp.SetProperty(""SearchExpression"",""[Name]='""+vProdName+""'"");
			inp.SetProperty(""Field0"",""Id"");
	
			QBS.InvokeMethod(""SiebelQuery"",inp,out);
			addprod=out.GetProperty(""Output0"");	

			inp.Reset();
			out.Reset();
			inp.SetProperty(""ObjId"",ordid);
			inp.SetProperty(""RootId"",oliid);

			RCOIS.InvokeMethod(""GetInstance"",inp,out);
			if(i==0)
			{
				OrderInstance.AddChild(out.GetChild(0));
			}
			
			GetRootPOrderIns.AddChild(out.GetChild(0));

			inp.Reset();
			out.Reset();
			with(inp){
				SetProperty(""OrderId"",ordid);
				SetProperty(""LineItemId"",oliid);
				SetProperty(""AddProdId"",addprod);
				SetProperty(""ParentProductName"",vParProdName);
				SetProperty(""Io"",io);
				AddChild(GetRootPOrderIns.GetChild(0));
			}
			
			// To get parent path to add the product	
			GetRootPath(inp,out,PrevIntegIdArr);
			
			with(out){
				if(GetProperty(""Error Code"") != null && GetProperty(""Error Code"") != """"){
					TheApplication().RaiseErrorText(""GetRootPath Function Execption:""+GetProperty(""Error Message""));
				}

				if(GetProperty(""Par Rel Id"") == null || GetProperty(""Par Rel Id"") == ''){
					PortItemId=GetProperty(""Orig Id"");
				}
				else{
					PortItemId=GetProperty(""Par Rel Id"")
				}
				PPath=GetProperty(""ParentPath"");
				CheckFlag=GetProperty(""CheckFlag"");
			}
			
			// Add the product to Order
			inp.Reset();
			out.Reset();
			with(inp){
				SetProperty(""ObjId"",ordid);
				SetProperty(""RootId"",oliid);
				SetProperty(""Prod Item Id"",addprod);
				SetProperty(""Name"",vProdName);
				SetProperty(""Product Id"",addprod);
				SetProperty(""Port Item Id"",PortItemId);
				SetProperty(""Quantity"",""1"");
				SetProperty(""Parent Path"",PPath);
				SetProperty(""AutoResolve"",""Y"");
			}
	
			try
			{
				if(PortItemId != null && PPath !=null && CheckFlag)
				{
					RCOIS.InvokeMethod(""AddItem"",inp,out);
				}
			}
			catch(a)
			{
				if(a.errCode == 6881438)
				{
					inp.Reset();
					out.Reset();
			
					inp.SetProperty(""ObjId"",ordid);
					inp.SetProperty(""RootId"",oliid);
					inp.SetProperty(""IntObjName"",io);
		
					RCOIS.InvokeMethod(""GetDetailedReqExpl"",inp,out);

					Outputs.SetType(""DetailedExplanation"");
					Outputs.AddChild(out.Copy());
					Outputs.GetChild(j).SetType(""Mismatch ""+j);
					j++;

					inp.Reset();
					out.Reset();

					inp.SetProperty(""ObjId"",ordid);
					inp.SetProperty(""RootId"",oliid);

					RCOIS.InvokeMethod(""RemoveFailedRequests"",inp,out);
				}
			}
	
			GetRootPOrderIns.RemoveChild(0);
		}

		inp.Reset();
		out.Reset();
			
		inp.SetProperty(""ObjId"",ordid);
		inp.SetProperty(""RootId"",oliid);

		RCOIS.InvokeMethod(""GetInstance"",inp,out);

		inp.Reset();
		out.Reset();
		
		inp.SetProperty(""OrderId"",ordid);
		inp.SetProperty(""LineItemId"",oliid);
		inp.SetProperty(""IntObjName"",io);
		inp.AddChild(OrderInstance.GetChild(0).Copy());
		
		if(ordType==""No Provide"")
		{
			CallOrderSyncWF(inp,out,RCOIS);
			if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
			{
				TheApplication().RaiseErrorText(""CallOrderSyncWF Function Execption"");
			}
		}
			
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
		
	}
}
"/**********************************************************************************************************
Purpose 		: Function Add Product Non RCOIS/ No Customize
Author 			: GURURAJ MADHAVARAO
Change Log		: New function
***********************************************************************************************************
Date(DD/MM/YYYY)	| By		| Description of Change																		
-----------------------------------------------------------------------------------------------------------
14/12/2020		1.0   | GURURAJ MADHAVARAO	| Created new
----------------------------------------------------------------------------------------------------------*/
function AddMultipleProductNonRCOIS(Inputs,Outputs,ESAdp,QBS)
{
	var app=TheApplication();
	var inp=app.NewPropertySet();
	var out=app.NewPropertySet();
	var out2=app.NewPropertySet();
	//var OrderInstance=app.NewPropertySet();
	var GetRootPOrderIns=app.NewPropertySet();
	
	var PortItemId,PPath,addprod,bAccntId,sAccntId,PId;
	var PlanNameArray,PlanName;
	var vProdNameArr, vProdName="""", vParProdName="""", vProdArrLen=0;
	var PrevIntegIdArr=new Array();
	var vNewOliIds=new Array();
	var CheckFlag=false;
	
	var ordid=Inputs.GetProperty(""OrderId"");
	var oliid=Inputs.GetProperty(""LineItemId"");
	var productid=Inputs.GetProperty(""RootProductId"");
	var io=Inputs.GetProperty(""IntObjName"");
	var ordType=Inputs.GetProperty(""OrderType"");

	var bc=app.GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Entry - Line Items (Simple)"");
	var oAtr=app.GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Item XA"");

	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

		PlanName=Inputs.GetProperty(""AddProdName"");
		PlanNameArray=PlanName.split("","");
		var j=0;
		var tmpArrL=PlanNameArray.length;

		for(var i=0;i<PlanNameArray.length;i++)
		{
			vProdName = PlanNameArray[i];
			vProdNameArr = vProdName.split("":"");
			vProdArrLen = vProdNameArr.length;
			if (vProdArrLen > 1)
			{
				vParProdName = vProdNameArr[0];
				vProdName = vProdNameArr[1];
			}
			else{
				vParProdName = """";
			}

			inp.SetProperty(""BusinessObject"",""Internal Product"");
			inp.SetProperty(""BusinessComponent"",""Internal Product - ISS Admin"");
			inp.SetProperty(""SearchExpression"",""[Name]='""+vProdName+""'"");
			inp.SetProperty(""Field0"",""Id"");
	
			QBS.InvokeMethod(""SiebelQuery"",inp,out);
			addprod=out.GetProperty(""Output0"");	

			if( addprod.length <=0)
			{
				app.RaiseErrorText(""No product by name: ""+vProdName+""\n"");
			}

			inp.Reset();
			out.Reset();

			inp.SetProperty(""PrimaryRowId"",ordid);
			inp.SetProperty(""OutputIntObjectName"",io);
			ESAdp.InvokeMethod(""Query"",inp,out);
			/*
			if(i==0)
			{
				OrderInstance.AddChild(out.GetChild(0));
			}*/
			
			GetRootPOrderIns.AddChild(out.GetChild(0));

			inp.Reset();
			out.Reset();
			with(inp){
				SetProperty(""OrderId"",ordid);
				SetProperty(""LineItemId"",oliid);
				SetProperty(""AddProdId"",addprod);
				SetProperty(""ParentProductName"",vParProdName);
				SetProperty(""Io"",io);
				AddChild(GetRootPOrderIns.GetChild(0));
			}
			
			// To get parent path to add the product	
			GetRootPath(inp,out,PrevIntegIdArr);
			
			with(out){
				if(GetProperty(""Error Code"") != null && GetProperty(""Error Code"") != """"){
					app.RaiseErrorText(""GetRootPath Function Execption:""+GetProperty(""Error Message"") +""\n"");
				}

				if(GetProperty(""Par Rel Id"") == null || GetProperty(""Par Rel Id"") == ''){
					PortItemId=GetProperty(""Orig Id"");
				}
				else{
					PortItemId=GetProperty(""Par Rel Id"")
				}
				PPath=GetProperty(""ParentPath"");
				PId=GetProperty(""ParentId"");
				CheckFlag=GetProperty(""CheckFlag"");
				bAccntId=out.GetProperty(""Billing Account Id"");	
				sAccntId=out.GetProperty(""Service Account Id"");
				if(PortItemId.length <= 0)
				{
						app.RaiseErrorText(""No Port Ids or Relation ship found for the product: ""+vProdName+""\n"");
				}
			}
			
			// Add the product to Order
			inp.Reset();
			out.Reset();
			with(inp){
				SetProperty(""ObjId"",ordid);
				SetProperty(""RootId"",oliid);
				SetProperty(""Prod Item Id"",addprod);
				SetProperty(""Name"",vProdName);
				SetProperty(""Product Id"",addprod);
				SetProperty(""Port Item Id"",PortItemId);
				SetProperty(""Billing Account Id"",bAccntId);
				SetProperty(""Parent Path"",PPath);
				SetProperty(""Parent Id"",PId);
				SetProperty(""Product Name"",vProdName);
				SetProperty(""Service Account Id"",sAccntId);
			}
			AddNewLineItem(inp,out,QBS);

			vNewOliIds[j]=out.GetProperty(""Id"");
			j++;
			
			if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
			{
					app.RaiseErrorText(""AddNewLineItem Function Execption:""+out.GetProperty(""Error Message"")+""\n"");
			}
			
			GetRootPOrderIns.RemoveChild(0);
		}
			
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);

		//Delete added line items, if any new expception
		for(j=0;j<vNewOliIds.length;j++)
		{
			if( vNewOliIds[j].length > 0 || vNewOliIds[j] != null || vNewOliIds[j] != """")
			{
				with(bc)
				{
					ActivateField(""Id"");
					ActivateField(""Order Header Id"");
					ActivateField(""Action Code"");

					SetViewMode(AllView);
					ClearToQuery();
					SetSearchExpr(""[Id] = '"" +vNewOliIds[j]+""' AND [Order Header Id] = '""+ ordid +""' AND [Action Code] = 'Add'"");
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
					{
						DeleteRecord();
					}
					with(oAtr)
					{
						ActivateField(""Object Id"");

						SetViewMode(AllView);
						ClearToQuery();
						SetSearchExpr(""[Object Id] = '""+ vNewOliIds[j] + ""'"");
						ExecuteQuery(ForwardOnly);
						while(FirstRecord())
						{
							DeleteRecord();
						}
					}
	
				}
			}
		}
	}
	finally
	{
		bc.WriteRecord();
		oAtr.WriteRecord();
	}
}
"/**********************************************************************************************************
Purpose 		: Function Add Product Non RCOIS/ No Customize
Author 			: GURURAJ MADHAVARAO
Change Log		: New function
***********************************************************************************************************
Date(DD/MM/YYYY)	| By		| Description of Change																		
-----------------------------------------------------------------------------------------------------------
14/12/2020		1.0   | GURURAJ MADHAVARAO	| Created new
12/01/2021		1.1	  | GURURAJ MADHAVARAO  | Added a new variable vProdPartNum which servers as input for AddNewLineItem 
----------------------------------------------------------------------------------------------------------*/
function AddMultipleProductNonRCOIS(Inputs,Outputs,ESAdp,QBS)
{
	var app=TheApplication();
	var inp=app.NewPropertySet();
	var out=app.NewPropertySet();
	var out2=app.NewPropertySet();
	//var OrderInstance=app.NewPropertySet();
	var GetRootPOrderIns=app.NewPropertySet();
	
	var PortItemId,PPath,addprod,bAccntId,sAccntId,PId;
	var PlanNameArray,PlanName;
	//Refer Comment version 1.1
	var vProdNameArr, vProdName="""", vParProdName="""", vProdArrLen=0, vProdPartNum="""";
	var PrevIntegIdArr=new Array();
	var vNewOliIds=new Array();
	var CheckFlag=false;
	
	var ordid=Inputs.GetProperty(""OrderId"");
	var oliid=Inputs.GetProperty(""LineItemId"");
	var productid=Inputs.GetProperty(""RootProductId"");
	var io=Inputs.GetProperty(""IntObjName"");
	var ordType=Inputs.GetProperty(""OrderType"");

	var bc=app.GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Entry - Line Items (Simple)"");
	var oAtr=app.GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Item XA"");

	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

		PlanName=Inputs.GetProperty(""AddProdName"");
		PlanNameArray=PlanName.split("","");
		var j=0;
		var tmpArrL=PlanNameArray.length;

		for(var i=0;i<PlanNameArray.length;i++)
		{
			vProdName = PlanNameArray[i];
			vProdNameArr = vProdName.split("":"");
			vProdArrLen = vProdNameArr.length;
			if (vProdArrLen > 1)
			{
				vParProdName = vProdNameArr[0];
				vProdName = vProdNameArr[1];
			}
			else{
				vParProdName = """";
			}

			inp.SetProperty(""BusinessObject"",""Internal Product"");
			inp.SetProperty(""BusinessComponent"",""Internal Product - ISS Admin"");
			inp.SetProperty(""SearchExpression"",""[Name]='""+vProdName+""'"");
			inp.SetProperty(""Field0"",""Id"");
			//Refer Comment version 1.1
			inp.SetProperty(""Field1"",""Part #"");
	
			QBS.InvokeMethod(""SiebelQuery"",inp,out);
			addprod=out.GetProperty(""Output0"");
			//Refer Comment version 1.1
			vProdPartNum=out.GetProperty(""Output1"");

			if( addprod.length <=0)
			{
				app.RaiseErrorText(""No product by name: ""+vProdName+""\n"");
			}

			inp.Reset();
			out.Reset();

			inp.SetProperty(""PrimaryRowId"",ordid);
			inp.SetProperty(""OutputIntObjectName"",io);
			ESAdp.InvokeMethod(""Query"",inp,out);
			/*
			if(i==0)
			{
				OrderInstance.AddChild(out.GetChild(0));
			}*/
			
			GetRootPOrderIns.AddChild(out.GetChild(0));

			inp.Reset();
			out.Reset();
			with(inp){
				SetProperty(""OrderId"",ordid);
				SetProperty(""LineItemId"",oliid);
				SetProperty(""AddProdId"",addprod);
				SetProperty(""ParentProductName"",vParProdName);
				SetProperty(""Io"",io);
				AddChild(GetRootPOrderIns.GetChild(0));
			}
			
			// To get parent path to add the product	
			GetRootPath(inp,out,PrevIntegIdArr);
			
			with(out){
				if(GetProperty(""Error Code"") != null && GetProperty(""Error Code"") != """"){
					app.RaiseErrorText(""GetRootPath Function Execption:""+GetProperty(""Error Message"") +""\n"");
				}

				if(GetProperty(""Par Rel Id"") == null || GetProperty(""Par Rel Id"") == ''){
					PortItemId=GetProperty(""Orig Id"");
				}
				else{
					PortItemId=GetProperty(""Par Rel Id"")
				}
				PPath=GetProperty(""ParentPath"");
				PId=GetProperty(""ParentId"");
				CheckFlag=GetProperty(""CheckFlag"");
				bAccntId=out.GetProperty(""Billing Account Id"");	
				sAccntId=out.GetProperty(""Service Account Id"");
				if(PortItemId.length <= 0)
				{
						app.RaiseErrorText(""No Port Ids or Relation ship found for the product: ""+vProdName+""\n"");
				}
			}
			
			// Add the product to Order
			inp.Reset();
			out.Reset();
			with(inp){
				SetProperty(""ObjId"",ordid);
				SetProperty(""RootId"",oliid);
				SetProperty(""Prod Item Id"",addprod);
				SetProperty(""Name"",vProdName);
				SetProperty(""Product Id"",addprod);
				SetProperty(""Port Item Id"",PortItemId);
				SetProperty(""Billing Account Id"",bAccntId);
				SetProperty(""Parent Path"",PPath);
				SetProperty(""Parent Id"",PId);
				SetProperty(""Product Name"",vProdName);
				//Refer Comment version 1.1
				SetProperty(""Product Part Num"",vProdPartNum);
				SetProperty(""Service Account Id"",sAccntId);
			}
			AddNewLineItem(inp,out,QBS);

			vNewOliIds[j]=out.GetProperty(""Id"");
			j++;
			
			if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
			{
					app.RaiseErrorText(""AddNewLineItem Function Execption:""+out.GetProperty(""Error Message"")+""\n"");
			}
			
			GetRootPOrderIns.RemoveChild(0);
		}
			
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);

		//Delete added line items, if any new expception
		for(j=0;j<vNewOliIds.length;j++)
		{
			if( vNewOliIds[j].length > 0 || vNewOliIds[j] != null || vNewOliIds[j] != """")
			{
				with(bc)
				{
					ActivateField(""Id"");
					ActivateField(""Order Header Id"");
					ActivateField(""Action Code"");

					SetViewMode(AllView);
					ClearToQuery();
					SetSearchExpr(""[Id] = '"" +vNewOliIds[j]+""' AND [Order Header Id] = '""+ ordid +""' AND [Action Code] = 'Add'"");
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
					{
						DeleteRecord();
					}
					with(oAtr)
					{
						ActivateField(""Object Id"");

						SetViewMode(AllView);
						ClearToQuery();
						SetSearchExpr(""[Object Id] = '""+ vNewOliIds[j] + ""'"");
						ExecuteQuery(ForwardOnly);
						while(FirstRecord())
						{
							DeleteRecord();
						}
					}
	
				}
			}
		}
	}
	finally
	{
		bc.WriteRecord();
		oAtr.WriteRecord();
	}
}
"/**********************************************************************************************************
Purpose 		: Function Add Product Non RCOIS/ No Customize
Author 			: GURURAJ MADHAVARAO
Change Log		: New function
***********************************************************************************************************
Date(DD/MM/YYYY)	| By		| Description of Change																		
-----------------------------------------------------------------------------------------------------------
14/12/2020		1.0   | GURURAJ MADHAVARAO	| Created new to insert line item
----------------------------------------------------------------------------------------------------------*/
function AddNewLineItem(Inputs,Outputs,QBS)
{
	var app=TheApplication();
	var NewLineItemId;
	var inp=app.NewPropertySet();
	var out=app.NewPropertySet();
	var bc=app.GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Entry - Line Items (Simple)"");
	try
	{
			//Setting the Error Code and Message for parent function
			Outputs.SetProperty(""Error Message"","""");
			Outputs.SetProperty(""Error Code"","""");
			with(bc)
			{
				ActivateField(""Status"");
				ActivateField(""Cfg State Code"");
				
				NewRecord(NewAfter);
				SetFieldValue(""Order Header Id"",Inputs.GetProperty(""ObjId""));
				SetFieldValue(""Product Id"", Inputs.GetProperty(""Product Id""));   
				SetFieldValue(""Parent Order Item Id"",Inputs.GetProperty(""Parent Id"")); 
				SetFieldValue(""Root Order Item Id"",Inputs.GetProperty(""RootId""));
				SetFieldValue(""Billing Account Id"",Inputs.GetProperty(""Billing Account Id""));
				SetFieldValue(""Service Account Id"",Inputs.GetProperty(""Service Account Id""));
				SetFieldValue(""Product Port Id"",Inputs.GetProperty(""Port Item Id""));
				SetFieldValue(""Cfg State Code"",""User Requested Item"");
				SetFieldValue(""Status"",""In Progress"");
				
				NewLineItemId = GetFieldValue(""Id"");
				
				inp.SetProperty(""New Line Item Id"",NewLineItemId);
				inp.SetProperty(""Add ProdName"",Inputs.GetProperty(""Product Name""));
				
				AddAttributes(inp,out);

				if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
				{
					UndoRecord();
					app.RaiseErrorText(""AddAttributes Function Execption:""+out.GetProperty(""Error Message"")+""\n"");
				}
				//WriteRecord();
  
			}
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
		bc.WriteRecord();
		Outputs.SetProperty(""Id"",NewLineItemId);
	}
}
"
"/**********************************************************************************************************
Purpose 		: Function Add Product Non RCOIS/ No Customize
Author 			: GURURAJ MADHAVARAO
Change Log		: New function
***********************************************************************************************************
Date(DD/MM/YYYY)	| By		| Description of Change																		
-----------------------------------------------------------------------------------------------------------
14/12/2020		1.0   | GURURAJ MADHAVARAO	| Created new to insert line item
12/01/2021		1.1   | GURURAJ MADHAVARAO  | Added logic to recieve part num from calling function
----------------------------------------------------------------------------------------------------------*/
function AddNewLineItem(Inputs,Outputs,QBS)
{
	var app=TheApplication();
	var NewLineItemId;
	var inp=app.NewPropertySet();
	var out=app.NewPropertySet();
	var bc=app.GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Entry - Line Items (Simple)"");
	try
	{
			//Setting the Error Code and Message for parent function
			Outputs.SetProperty(""Error Message"","""");
			Outputs.SetProperty(""Error Code"","""");
			with(bc)
			{
				ActivateField(""Status"");
				ActivateField(""Cfg State Code"");
				
				NewRecord(NewAfter);
				SetFieldValue(""Order Header Id"",Inputs.GetProperty(""ObjId""));
				SetFieldValue(""Product Id"", Inputs.GetProperty(""Product Id""));   
				SetFieldValue(""Parent Order Item Id"",Inputs.GetProperty(""Parent Id"")); 
				SetFieldValue(""Root Order Item Id"",Inputs.GetProperty(""RootId""));
				SetFieldValue(""Billing Account Id"",Inputs.GetProperty(""Billing Account Id""));
				SetFieldValue(""Service Account Id"",Inputs.GetProperty(""Service Account Id""));
				SetFieldValue(""Product Port Id"",Inputs.GetProperty(""Port Item Id""));
				SetFieldValue(""Cfg State Code"",""User Requested Item"");
				SetFieldValue(""Status"",""In Progress"");
				
				NewLineItemId = GetFieldValue(""Id"");
				
				inp.SetProperty(""New Line Item Id"",NewLineItemId);
				inp.SetProperty(""Add ProdName"",Inputs.GetProperty(""Product Name""));
				//Refer comment version 1.1
				inp.SetProperty(""Add Prod PartNum"",Inputs.GetProperty(""Product Part Num""));
				
				AddAttributes(inp,out);

				if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
				{
					UndoRecord();
					app.RaiseErrorText(""AddAttributes Function Execption:""+out.GetProperty(""Error Message"")+""\n"");
				}
				//WriteRecord();
  
			}
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
		bc.WriteRecord();
		Outputs.SetProperty(""Id"",NewLineItemId);
	}
}
"
function AddProduct (Inputs,Outputs)
{
	var ordid=Inputs.GetProperty(""Header"");
	var oliid=Inputs.GetProperty(""Item"");
	var productid=Inputs.GetProperty(""Product"");
	var io=Inputs.GetProperty(""IO"");
	var addprodname=Inputs.GetProperty(""AddProdName"");
	var ordertype=Inputs.GetProperty(""OrderType"");

	var isssvc=TheApplication().GetService(""ISS Copy Service"");
	var rcois=TheApplication().GetService(""Remote Complex Object Instance Service"");
	var Qbs=TheApplication().GetService(""STC Siebel Operation BS"");
	

	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	
	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

//		Executing ISS Copy to load the current order
		with(inp){
			SetProperty(""ParentObjectId"",ordid);
			SetProperty(""IntegrationObjectName"",io);
			SetProperty(""RootId"",oliid);
			SetProperty(""ProductId"",productid);
			SetProperty(""SearchSpec"",""[Header.Id]='""+ordid+""' AND [Line Item.Root Id]='""+oliid+""'"");
		}
		isssvc.InvokeMethod(""LoadEAI"",inp,out);

		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			TheApplication().RaiseErrorText(""ISS Copy Service Load EAI Execption"");
		}

		inp.Reset();
		out.Reset();

//		Executing RCOIS Load Instance method
		with(inp){
			SetProperty(""IntObjName"",io);
			SetProperty(""ObjId"",ordid);
			SetProperty(""RootId"",oliid);
			SetProperty(""TriggerEvent"",""Y"");
			SetProperty(""Product Id"",productid);
			SetProperty(""ExternalScript"",""Y"");
		}
		rcois.InvokeMethod(""LoadInstance"",inp,out);

		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			TheApplication().RaiseErrorText(""RCOIS Load Instance Execption"");
		}

//		Executing the function UnresolveLinks to resolve the unresolved Links of the order

		var unRLinks=UnresolveLinks(inp,out);

		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			if(out.GetProperty(""Error Code"") != 7668184)
			{
				TheApplication().RaiseErrorText(""UnresolveLinks Function Execption"");
				
			}
		}
		
		if(unRLinks.GetChildCount() > 0)
		{
			inp.AddChild(unRLinks.GetChild(0).Copy());
		}

//		Executing Create Session for order with Links

		if(out.GetProperty(""CreateSession"")==""Y"")
		{
			rcois.InvokeMethod(""CreateSession"",inp,out);
		}
		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			TheApplication().RaiseErrorText(""RCOIS Create Session Execption"");
		}

		inp.Reset();
		out.Reset();

//		Customize and add multiple products provided in the input to the order
		with(inp){
			SetProperty(""OrderId"",ordid);
			SetProperty(""LineItemId"",oliid);
			SetProperty(""AddProdName"",addprodname);
			SetProperty(""IntObjName"",io);
			SetProperty(""RootProductId"",productid);
			SetProperty(""OrderType"",ordertype);
		}

		AddMultipleProduct(inp,out,rcois,Qbs);
		
		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			TheApplication().RaiseErrorText(""AddMultipleProduct Function Execption: ""+out.GetProperty(""Error Message""));
		}

		inp.Reset();
		out.Reset();

//		Sync Instance for provide order
		if(ordertype==""Provide"")
		{
			inp.SetProperty(""ObjId"",ordid);
			inp.SetProperty(""RootId"",oliid);
			inp.SetProperty(""IntObjName"",io);
			rcois.InvokeMethod(""SyncInstance"",inp,out);
		}

//		Unload Complex product Instance
		inp.SetProperty(""ObjId"",ordid);
		inp.SetProperty(""RootId"",oliid);
		inp.SetProperty(""IntObjName"",io);

		rcois.InvokeMethod(""UnloadInstance"",inp,out);
	}
	catch (e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
	}
}
"/**********************************************************************************************************
Purpose 		: Function Add Product Non RCOIS/ No Customize
Author 			: GURURAJ MADHAVARAO
Change Log		: New function
***********************************************************************************************************
Date(DD/MM/YYYY)	| By		| Description of Change																		
-----------------------------------------------------------------------------------------------------------
14/12/2020		1.0   | GURURAJ MADHAVARAO	| Created new
----------------------------------------------------------------------------------------------------------*/
function AddProductNonRCOIS (Inputs,Outputs)
{
	var app=TheApplication();
	var ordid=Inputs.GetProperty(""Header"");
	var oliid=Inputs.GetProperty(""Item"");
	var productid=Inputs.GetProperty(""Product"");
	var io=Inputs.GetProperty(""IO"");
	var addprodname=Inputs.GetProperty(""AddProdName"");
	var ordertype=Inputs.GetProperty(""OrderType"");
	var nonRCOISflg=Inputs.GetProperty(""NonRCOIS"");

	var Qbs=app.GetService(""STC Siebel Operation BS"");
	var ESAdapter=app.GetService(""EAI Siebel Adapter"");

	var inp=app.NewPropertySet();
	var out=app.NewPropertySet();
	
	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

		inp.Reset();
		out.Reset();

//		Add multiple products without customize
		with(inp){
			SetProperty(""OrderId"",ordid);
			SetProperty(""LineItemId"",oliid);
			SetProperty(""AddProdName"",addprodname);
			SetProperty(""IntObjName"",io);
			SetProperty(""RootProductId"",productid);
			SetProperty(""OrderType"",ordertype);
		}

		AddMultipleProductNonRCOIS(inp,out,ESAdapter,Qbs);
		
		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			app.RaiseErrorText(""AddMultipleProductNonRCOIS Function Execption: ""+out.GetProperty(""Error Message"")+""\n"");
		}

		inp.Reset();
		out.Reset();

	}
	catch (e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
	}
}
function CallOrderSyncWF(Inputs , Outputs ,RCOIS)
{
	var ordid=Inputs.GetProperty(""OrderId"");
	var oliid=Inputs.GetProperty(""LineItemId"");
	var io=Inputs.GetProperty(""IntObjName"");
	var OrderInstance=TheApplication().NewPropertySet();

	var WBS=TheApplication().GetService(""Workflow Process Manager"");
	var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");
	var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");

	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();

	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

		inp.Reset();
		out.Reset();
			
		inp.SetProperty(""ObjId"",ordid);
		inp.SetProperty(""RootId"",oliid);

		RCOIS.InvokeMethod(""GetInstance"",inp,out);

		inp.Reset();

		//Convert Modified Order Items to Asset
		inp.SetProperty(""MapName"",""RCOIS SIS OM Order to SIS OM Asset v1"");
		inp.SetProperty(""OutputIntObjectName"",""SIS OM Asset"");
		inp.AddChild(out.GetChild(0).Copy());
		out.Reset();
		DMExecute.InvokeMethod(""Execute"",inp,out);


		var ModifiedAsset=out.GetChild(0).Copy();

		//Convert Original Order Items to Asset
		inp.Reset();
		out.Reset();

		inp.SetProperty(""MapName"",""RCOIS SIS OM Order to SIS OM Asset v1.1"");
		inp.SetProperty(""OutputIntObjectName"",""SIS OM Asset"");
		OrderInstance=Inputs.GetChild(0).Copy();
		inp.AddChild(OrderInstance.Copy());
		DMExecute.InvokeMethod(""Execute"",inp,out);

		var OriginalAsset=out.GetChild(0).Copy();
			

		inp.Reset();
		out.Reset();
			
		//Order Header
		inp.SetProperty(""OutputIntObjectName"",io);
		inp.SetProperty(""PrimaryRowId"",ordid);
		inp.SetProperty(""SearchSpec"",""[Header.Id] = '"" +ordid+""' AND [Line Item.Id] = 'SomeBogusId'"");
		ESiebelAdapter.InvokeMethod(""Query"",inp,out);
		var DocHeader=out.GetChild(0).Copy();



		//Sync WF Execution
		inp.Reset();
		out.Reset();
		var inp1=TheApplication().NewPropertySet();

		inp.SetProperty(""ProcessName"",""RCOIS Enhancement Delta Apply WF"");

		inp1.Reset();
		inp1=ModifiedAsset.Copy();
		inp1.SetType(""Modified Asset"");
		inp.AddChild(inp1.Copy());
			
		inp1.Reset();
		inp1=OriginalAsset.Copy();
		inp1.SetType(""Original Asset"");
		inp.AddChild(inp1.Copy());

		inp1.Reset();
		inp1=DocHeader.Copy();
		inp1.SetType(""Document Header"");
		inp.AddChild(inp1.Copy());

		var out2=TheApplication().NewPropertySet();
		inp.SetProperty(""Object Id"",ordid);
		//Sync Flag to sync order
		inp.SetProperty(""Sync"",""Y"");
		inp.SetProperty(""Order Line Item Id"",oliid);
		out2.SetType(""Delta Document"");
		out.AddChild(out2.Copy());
		out2.Reset();

		WBS.InvokeMethod(""RunProcess"",inp,out);


	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
		
	}

}
function DeleteMultipleProduct(Inputs,Outputs,RCOIS,QBS)
{
	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var PortItemId,PPath,addprod;
	var PlanNameArray,PlanName;
	var ordid=Inputs.GetProperty(""OrderId"");
	var oliid=Inputs.GetProperty(""LineItemId"");
	var productid=Inputs.GetProperty(""RootProductId"");
	var io=Inputs.GetProperty(""IntObjName"");
	var ordType=Inputs.GetProperty(""OrderType"");
	var OrderInstance=TheApplication().NewPropertySet();
	var GetRootPOrderIns=TheApplication().NewPropertySet();
	var CheckFlag=false;
	var out2=TheApplication().NewPropertySet();
	
	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

		PlanName=Inputs.GetProperty(""AddProdName"");
		PlanNameArray=PlanName.split("","");
		var j=0;
		var tmpArrL=PlanNameArray.length;

		for(var i=0;i<PlanNameArray.length;i++)
		{
			inp.SetProperty(""BusinessObject"",""Internal Product"");
			inp.SetProperty(""BusinessComponent"",""Internal Product - ISS Admin"");
			inp.SetProperty(""SearchExpression"",""[Name]='""+PlanNameArray[i]+""'"");
			inp.SetProperty(""Field0"",""Id"");
	
			QBS.InvokeMethod(""SiebelQuery"",inp,out);
			addprod=out.GetProperty(""Output0"");	

			inp.Reset();
			out.Reset();
			inp.SetProperty(""ObjId"",ordid);
			inp.SetProperty(""RootId"",oliid);

			RCOIS.InvokeMethod(""GetInstance"",inp,out);
			if(i==0)
			{
			
				OrderInstance.AddChild(out.GetChild(0));
			}
			
			GetRootPOrderIns.AddChild(out.GetChild(0));


			inp.Reset();
			out.Reset();

			inp.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
			inp.SetProperty(""BusinessComponent"",""Order Entry - Line Items"");
			inp.SetProperty(""SearchExpression"",""[Order Header Id]='""+ordid+""' AND [Product Id]='""+addprod+""'"");
			inp.SetProperty(""Field0"",""Integration Id"");

			QBS.InvokeMethod(""SiebelQuery"",inp,out);
			PPath=out.GetProperty(""Output0"");	

		/*	inp.SetProperty(""OrderId"",ordid);
			inp.SetProperty(""LineItemId"",oliid);
			inp.SetProperty(""AddProdId"",addprod);
			inp.SetProperty(""Io"",io);
			inp.AddChild(GetRootPOrderIns.GetChild(0));
			// To get parent path to add the product	
			GetRootPath(inp,out);
			
			if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
			{
				TheApplication().RaiseErrorText(""GetRootPath Function Execption"");
			}

			if(out.GetProperty(""Par Rel Id"") == null || out.GetProperty(""Par Rel Id"") == '')
			{
				PortItemId=out.GetProperty(""Orig Id"");
			}
			else
			{
				PortItemId=out.GetProperty(""Par Rel Id"")
			}
			PPath=out.GetProperty(""ParentPath"");
			CheckFlag=out.GetProperty(""CheckFlag"");
			// Add the product to Order
		*/
			inp.Reset();
			out.Reset();

			inp.SetProperty(""ObjId"",ordid);
			inp.SetProperty(""RootId"",oliid);
			//inp.SetProperty(""Prod Item Id"",addprod);
			//inp.SetProperty(""Name"",PlanNameArray[i]);
			//inp.SetProperty(""Product Id"",addprod);
			//inp.SetProperty(""Port Item Id"",PortItemId);
			//inp.SetProperty(""Quantity"",""1"");
			inp.SetProperty(""Path"",PPath);
			//inp.SetProperty(""AutoResolve"",""Y"");
	
			try
			{
				if(PPath !=null)
				{
					RCOIS.InvokeMethod(""RemoveItem"",inp,out);
				}
			}
			catch(a)
			{
			
				if(a.errCode == 6881438)
				{
					

					inp.Reset();
					out.Reset();
			
					inp.SetProperty(""ObjId"",ordid);
					inp.SetProperty(""RootId"",oliid);
					inp.SetProperty(""IntObjName"",io);
		
					RCOIS.InvokeMethod(""GetDetailedReqExpl"",inp,out);

					Outputs.SetType(""DetailedExplanation"");
					Outputs.AddChild(out.Copy());
					Outputs.GetChild(j).SetType(""Mismatch ""+j);
					j++;

					inp.Reset();
					out.Reset();

					inp.SetProperty(""ObjId"",ordid);
					inp.SetProperty(""RootId"",oliid);

					RCOIS.InvokeMethod(""RemoveFailedRequests"",inp,out);


					
				}
			}
	
			GetRootPOrderIns.RemoveChild(0);
		}

		inp.Reset();
		out.Reset();
			
		inp.SetProperty(""ObjId"",ordid);
		inp.SetProperty(""RootId"",oliid);

		RCOIS.InvokeMethod(""GetInstance"",inp,out);

		inp.Reset();
		out.Reset();
		
		inp.SetProperty(""OrderId"",ordid);
		inp.SetProperty(""LineItemId"",oliid);
		inp.SetProperty(""IntObjName"",io);
		inp.AddChild(OrderInstance.GetChild(0).Copy());
		
		if(ordType==""No Provide"")
		{
			CallOrderSyncWF(inp,out,RCOIS);
			if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
			{
				TheApplication().RaiseErrorText(""CallOrderSyncWF Function Execption"");
			}
		}
		

			
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
		
	}
}
function DeleteProduct(Inputs,Outputs)
{
	var ordid=Inputs.GetProperty(""Header"");
	var oliid=Inputs.GetProperty(""Item"");
	var productid=Inputs.GetProperty(""Product"");
	var io=Inputs.GetProperty(""IO"");
	var addprodname=Inputs.GetProperty(""AddProdName"");
	var ordertype=Inputs.GetProperty(""OrderType"");

	var isssvc=TheApplication().GetService(""ISS Copy Service"");
	var rcois=TheApplication().GetService(""Remote Complex Object Instance Service"");
	var Qbs=TheApplication().GetService(""STC Siebel Operation BS"");
	

	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	
	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

//		Executing ISS Copy to load the current order
		inp.SetProperty(""ParentObjectId"",ordid);
		inp.SetProperty(""IntegrationObjectName"",io);
		inp.SetProperty(""RootId"",oliid);
		inp.SetProperty(""ProductId"",productid);
		inp.SetProperty(""SearchSpec"",""[Header.Id]='""+ordid+""' AND [Line Item.Root Id]='""+oliid+""'"");
		isssvc.InvokeMethod(""LoadEAI"",inp,out);

		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			TheApplication().RaiseErrorText(""ISS Copy Service Load EAI Execption"");
		}

		inp.Reset();
		out.Reset();

//		Executing RCOIS Load Instance method

		inp.SetProperty(""IntObjName"",io);
		inp.SetProperty(""ObjId"",ordid);
		inp.SetProperty(""RootId"",oliid);
		inp.SetProperty(""TriggerEvent"",""Y"");
		inp.SetProperty(""Product Id"",productid);
		inp.SetProperty(""ExternalScript"",""Y"");
		
		rcois.InvokeMethod(""LoadInstance"",inp,out);

		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			TheApplication().RaiseErrorText(""RCOIS Load Instance Execption"");
		}

//		Executing the function UnresolveLinks to resolve the unresolved Links of the order

		var unRLinks=UnresolveLinks(inp,out);

		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			if(out.GetProperty(""Error Code"") != 7668184)
			{
				TheApplication().RaiseErrorText(""UnresolveLinks Function Execption"");
				
			}
		}
		
		if(unRLinks.GetChildCount() > 0)
		{
			inp.AddChild(unRLinks.GetChild(0).Copy());
		}

//		Executing Create Session for order with Links

		if(out.GetProperty(""CreateSession"")==""Y"")
		{
			rcois.InvokeMethod(""CreateSession"",inp,out);
		}
		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			TheApplication().RaiseErrorText(""RCOIS Create Session Execption"");
		}

		inp.Reset();
		out.Reset();

//		Customize and add multiple products provided in the input to the order

		inp.SetProperty(""OrderId"",ordid);
		inp.SetProperty(""LineItemId"",oliid);
		inp.SetProperty(""AddProdName"",addprodname);
		inp.SetProperty(""IntObjName"",io);
		inp.SetProperty(""RootProductId"",productid);
		inp.SetProperty(""OrderType"",ordertype);

		DeleteMultipleProduct(inp,out,rcois,Qbs);
		
		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			TheApplication().RaiseErrorText(""Delete MultipleProduct Function Execption"");
		}

		inp.Reset();
		out.Reset();

//		Sync Instance for provide order
		if(ordertype==""Provide"")
		{
			inp.SetProperty(""ObjId"",ordid);
			inp.SetProperty(""RootId"",oliid);
			inp.SetProperty(""IntObjName"",io);
			rcois.InvokeMethod(""SyncInstance"",inp,out);
		}
//		Unload Complex product Instance
		inp.SetProperty(""ObjId"",ordid);
		inp.SetProperty(""RootId"",oliid);
		inp.SetProperty(""IntObjName"",io);

		rcois.InvokeMethod(""UnloadInstance"",inp,out);


	}
	catch (e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
	}
}
function GetRootPath (Inputs,Outputs,PrevIntegIdArr)
{
    var orderid, lineitemid, addprod, Io, vParProdName;
    var pName='', SearchSpec="""", checkflag=false, vProdAdminCount=0;
    var doDiscontinue=false;

    var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");
    var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");
    var QBS=TheApplication().GetService(""STC Siebel Operation BS"");
    with(Inputs)
    {
        orderid=GetProperty(""OrderId"");
        lineitemid=GetProperty(""LineItemId"");
        addprod=GetProperty(""AddProdId"");
        Io=GetProperty(""Io"");
        vParProdName=GetProperty(""ParentProductName"");
    }
    var inp=TheApplication().NewPropertySet();
    var out=TheApplication().NewPropertySet();
    var out1=TheApplication().NewPropertySet();
    var OrderIns=TheApplication().NewPropertySet()
    OrderIns=Inputs.GetChild(0);

    if(vParProdName != null && vParProdName != """"){
        SearchSpec=""[RCOIS Enhanced Chid Prd Structure BC.Sub Obj Id]='""+addprod+""' AND [RCOIS Enhanced Chid Prd Structure BC.Last Vers]='999999999' AND [RCOIS Enhanced Parent Prd Structure BC.Par Rel Id] IS NULL AND [RCOIS Enhanced Parent Prd Structure BC.Last Vers]='999999999' AND [RCOIS Enhanced PROD Admin BC.Name]='""+vParProdName+""'"";
    }
    else{
        SearchSpec=""[RCOIS Enhanced Chid Prd Structure BC.Sub Obj Id]='""+addprod+""' AND [RCOIS Enhanced Chid Prd Structure BC.Last Vers]='999999999' AND [RCOIS Enhanced Parent Prd Structure BC.Par Rel Id] IS NULL AND [RCOIS Enhanced Parent Prd Structure BC.Last Vers]='999999999'"";
    }
    
    try
    {
//      Setting the Error Code and Message for parent function
        Outputs.SetProperty(""Error Message"","""");
        Outputs.SetProperty(""Error Code"","""");

        inp.SetProperty(""SearchSpec"",SearchSpec);
        inp.SetProperty(""OutputIntObjectName"",""RCOIS Enhanced Admin ISS Product Deftn Custom"");
        //To Get the relation defined in product structure
        ESiebelAdapter.InvokeMethod(""Query"",inp,out);

        var NumChild=out.GetProperty(""NumOutputObjects"");
        
        inp.Reset();
        
        with(inp){
            SetProperty(""MapName"",""RCOIS Enhanced Parent Path Map v1"");
            SetProperty(""OutputIntObjectName"",""RCOIS Enhancement Line Item IO"");
            SetProperty(""OrderId"",orderid);
            SetProperty(""RootLineItemId"",lineitemid);
            AddChild(OrderIns.Copy());
            SetProperty(""ProdName"","""");
        }
        
        DMExecute.InvokeMethod(""Execute"",inp,out1);

        for (var i=0;i<NumChild;i++)
        {
            if(!doDiscontinue)
            {
                if(out.GetChild(0).GetChild(0).GetChild(i).GetChild(0).GetChildCount()>0)
                {
                    vProdAdminCount = out.GetChild(0).GetChild(0).GetChild(i).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
                    if(vProdAdminCount > 0)
                    {
                        pName=out.GetChild(0).GetChild(0).GetChild(i).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetProperty(""Name"");
                    }//end of if(vProdAdminCount > 0)
                }//end of if(out.GetChild(0)...

                    //TheApplication().RaiseErrorText(""pName:""+pName);
                    
                var tmpChildC=out1.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
            
                var tmpLineItem;
                for(var k=0;k<tmpChildC;k++)
                {
                    var tmpLineItem=out1.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(k);
                    checkflag=false;

                    if(PrevIntegIdArr.length > 0)
                    {
                        try{
                            if(PrevIntegIdArr[addprod] != null && PrevIntegIdArr[addprod] != """" && PrevIntegIdArr[addprod] != ""undefined"")
                            {
                                if(tmpLineItem.GetProperty(""Integration Id"") == PrevIntegIdArr[addprod]){
                                    checkflag = true;
                                }
                            }
                        }
                        catch(e){}
                    }
                    if(vParProdName != null && vParProdName != """"){
                        if(tmpLineItem.GetProperty(""Action Code"") != 'Add')
                            checkflag = true;
                    }

                    //To check whether the product has parent relation id defined 
                    if(pName.length>0 && (out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Par Rel Id"") != null || out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Par Rel Id"") != ''))
                    {
                        if((tmpLineItem.GetProperty(""Name"") == pName) && !(checkflag))
                        {
                            PrevIntegIdArr[addprod] = tmpLineItem.GetProperty(""Integration Id"");
                            with(Outputs){
                                SetProperty(""ParentPath"",tmpLineItem.GetProperty(""Integration Id""));
                                SetProperty(""RootParentPath"",tmpLineItem.GetProperty(""Root Integration Id""));
                                SetProperty(""ParentParentId"",tmpLineItem.GetProperty(""Parent Id""));
                                SetProperty(""ParentProdName"",tmpLineItem.GetProperty(""Name""));
                                SetProperty(""ActionCode"",tmpLineItem.GetProperty(""Action Code""));
								/* [Guru - 14122020] Added for new non RCOIS functions 
								---Start---*/
								SetProperty(""ParentId"",tmpLineItem.GetProperty(""Id""));
								SetProperty(""Billing Account Id"",tmpLineItem.GetProperty(""Billing Account Id""));
								SetProperty(""Service Account Id"",tmpLineItem.GetProperty(""Service Account Id""));
								//---End---
                                SetProperty(""Orig Id"",out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Orig Id""));
                                SetProperty(""Par Rel Id"",out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Par Rel Id""));
                                doDiscontinue=true; 
                                SetProperty(""CheckFlag"",doDiscontinue);
                            }         
                            break;
                        }//if((tmpLineItem.GetProp...
                    }//end of if(out.GetChild(0).GetChild(0)...
                    else
                    {//Look for product configured without Class
                        var inp2=TheApplication().NewPropertySet();
                        var out2=TheApplication().NewPropertySet();

                        with(inp2)
                        {
                            SetProperty(""BusinessObject"",""Internal Product"");
                            SetProperty(""BusinessComponent"",""Internal Product - ISS Admin"");
                            SetProperty(""SearchExpression"",""[VOD Row Id]='""+out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Vod Id"")+""'"");
                            SetProperty(""Field0"",""Name"");
                        }
                        QBS.InvokeMethod(""SiebelQuery"",inp2,out2);
                        pName = out2.GetProperty(""Output0"");

                        if((tmpLineItem.GetProperty(""Name"") == pName) && !(checkflag))
                        {
                            with(Outputs){
                                PrevIntegIdArr[addprod] = tmpLineItem.GetProperty(""Integration Id"");
                                SetProperty(""ParentPath"",tmpLineItem.GetProperty(""Integration Id""));
                                SetProperty(""RootParentPath"",tmpLineItem.GetProperty(""Root Integration Id""));
                                SetProperty(""ParentParentId"",tmpLineItem.GetProperty(""Parent Id""));
                                SetProperty(""ParentProdName"",tmpLineItem.GetProperty(""Name""));
                                SetProperty(""ActionCode"",tmpLineItem.GetProperty(""Action Code""));
								/* [Guru - 14122020] Added for new non RCOIS functions 
								---Start---*/
								SetProperty(""ParentId"",tmpLineItem.GetProperty(""Id""));
								SetProperty(""Billing Account Id"",tmpLineItem.GetProperty(""Billing Account Id""));
								SetProperty(""Service Account Id"",tmpLineItem.GetProperty(""Service Account Id""));
								//---End---
                                SetProperty(""Orig Id"",out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Orig Id""));
                                SetProperty(""Par Rel Id"",out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Par Rel Id""));
                                doDiscontinue=true; 
                                SetProperty(""CheckFlag"",doDiscontinue);
                            }        
                            break;
                        }
                        inp2=null;
                        out2=null;
                    }//end of else
                }//end of for(var k=0...
            }//end of if(!doDiscontinue)
            else
            {
                break;
            }
        }//end of for (var i=0;i<NumChild...
    }
    catch(e)
    {
        Outputs.SetProperty(""Error Message"",e.errText);
        Outputs.SetProperty(""Error Code"",e.errCode);
    }
    finally
    {}
}
function GetRootPath (Inputs,Outputs,PrevIntegIdArr)
{
    //[Modified:NAVIN:08Jun2021:MPOS Multiple Device AddonContract Issue Fix]
    var orderid, lineitemid, addprod, Io, vParProdName;
    var pName='', SearchSpec="""", checkflag=false, vProdAdminCount=0;
    var doDiscontinue=false;

    var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");
    var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");
    var QBS=TheApplication().GetService(""STC Siebel Operation BS"");
    with(Inputs)
    {
        orderid=GetProperty(""OrderId"");
        lineitemid=GetProperty(""LineItemId"");
        addprod=GetProperty(""AddProdId"");
        Io=GetProperty(""Io"");
        vParProdName=GetProperty(""ParentProductName"");
    }
    var inp=TheApplication().NewPropertySet();
    var out=TheApplication().NewPropertySet();
    var out1=TheApplication().NewPropertySet();
    var OrderIns=TheApplication().NewPropertySet()
    OrderIns=Inputs.GetChild(0);

    if(vParProdName != null && vParProdName != """"){//NAVIN:For Multiple Device AddonContract]
        SearchSpec=""[RCOIS Enhanced Chid Prd Structure BC.Sub Obj Id]='""+addprod+""' AND [RCOIS Enhanced Chid Prd Structure BC.Last Vers]='999999999' AND [RCOIS Enhanced Parent Prd Structure BC.Par Rel Id] IS NULL AND [RCOIS Enhanced Parent Prd Structure BC.Last Vers]='999999999' AND [RCOIS Enhanced PROD Admin BC.Name]='""+vParProdName+""'"";
    }
    else{
        SearchSpec=""[RCOIS Enhanced Chid Prd Structure BC.Sub Obj Id]='""+addprod+""' AND [RCOIS Enhanced Chid Prd Structure BC.Last Vers]='999999999' AND [RCOIS Enhanced Parent Prd Structure BC.Par Rel Id] IS NULL AND [RCOIS Enhanced Parent Prd Structure BC.Last Vers]='999999999'"";
    }
    
    try
    {
//      Setting the Error Code and Message for parent function
        Outputs.SetProperty(""Error Message"","""");
        Outputs.SetProperty(""Error Code"","""");

        inp.SetProperty(""SearchSpec"",SearchSpec);
        inp.SetProperty(""OutputIntObjectName"",""RCOIS Enhanced Admin ISS Product Deftn Custom"");
        //To Get the relation defined in product structure
        ESiebelAdapter.InvokeMethod(""Query"",inp,out);

        var NumChild=out.GetProperty(""NumOutputObjects"");
        
        inp.Reset();
        
        with(inp){
            SetProperty(""MapName"",""RCOIS Enhanced Parent Path Map v1"");
            SetProperty(""OutputIntObjectName"",""RCOIS Enhancement Line Item IO"");
            SetProperty(""OrderId"",orderid);
            SetProperty(""RootLineItemId"",lineitemid);
            AddChild(OrderIns.Copy());
            SetProperty(""ProdName"","""");
        }
        
        DMExecute.InvokeMethod(""Execute"",inp,out1);

        for (var i=0;i<NumChild;i++)
        {
            if(!doDiscontinue)
            {
                if(out.GetChild(0).GetChild(0).GetChild(i).GetChild(0).GetChildCount()>0)
                {
                    vProdAdminCount = out.GetChild(0).GetChild(0).GetChild(i).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
                    if(vProdAdminCount > 0)
                    {
                        pName=out.GetChild(0).GetChild(0).GetChild(i).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetProperty(""Name"");
                    }//end of if(vProdAdminCount > 0)
                    else
                    {//[NAVIN:08Jun2021:MPOS Multiple Device AddonContract Issue Fix]
                        pName = """";
                    }
                }//end of if(out.GetChild(0)...

                    //TheApplication().RaiseErrorText(""pName:""+pName);
                    
                var tmpChildC=out1.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
            
                var tmpLineItem;
                for(var k=0;k<tmpChildC;k++)
                {
                    var tmpLineItem=out1.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(k);
                    checkflag=false;

                    if(PrevIntegIdArr.length > 0)
                    {
                        try{
                            if(PrevIntegIdArr[addprod] != null && PrevIntegIdArr[addprod] != """" && PrevIntegIdArr[addprod] != ""undefined"")
                            {
                                if(tmpLineItem.GetProperty(""Integration Id"") == PrevIntegIdArr[addprod]){
                                    checkflag = true;
                                }
                            }
                        }
                        catch(e){}
                    }
                    if(vParProdName != null && vParProdName != """")
                    {//[NAVIN:08Jun2021:MPOS Multiple Device AddonContract Issue Fix]
                        var vAction = tmpLineItem.GetProperty(""Action Code"");
                        if(vAction != 'Add' && vAction != null  && vAction != """")
                            checkflag = true;
                    }

                    //To check whether the product has parent relation id defined 
                    if(pName.length>0 && (out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Par Rel Id"") != null && out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Par Rel Id"") != ''))//[NAVIN:08Jun2021:changed || to &&]
                    {
                        if((tmpLineItem.GetProperty(""Name"") == pName) && !(checkflag) && (vParProdName==null || vParProdName=="""" || vParProdName==pName)) //[NAVIN:08Jun2021:MPOS Multiple Device AddonContract Issue Fix]
                        {
                            PrevIntegIdArr[addprod] = tmpLineItem.GetProperty(""Integration Id"");
                            with(Outputs){
                                SetProperty(""ParentPath"",tmpLineItem.GetProperty(""Integration Id""));
                                SetProperty(""RootParentPath"",tmpLineItem.GetProperty(""Root Integration Id""));
                                SetProperty(""ParentParentId"",tmpLineItem.GetProperty(""Parent Id""));
                                SetProperty(""ParentProdName"",tmpLineItem.GetProperty(""Name""));
                                SetProperty(""ActionCode"",tmpLineItem.GetProperty(""Action Code""));
								/* [Guru - 14122020] Added for new non RCOIS functions 
								---Start---*/
								SetProperty(""ParentId"",tmpLineItem.GetProperty(""Id""));
								SetProperty(""Billing Account Id"",tmpLineItem.GetProperty(""Billing Account Id""));
								SetProperty(""Service Account Id"",tmpLineItem.GetProperty(""Service Account Id""));
								//---End---
                                SetProperty(""Orig Id"",out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Orig Id""));
                                SetProperty(""Par Rel Id"",out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Par Rel Id""));
                                doDiscontinue=true; 
                                SetProperty(""CheckFlag"",doDiscontinue);
                            }         
                            break;
                        }//if((tmpLineItem.GetProp...
                    }//end of if(out.GetChild(0).GetChild(0)...
                    else
                    {//Look for product configured without Class
                        var inp2=TheApplication().NewPropertySet();
                        var out2=TheApplication().NewPropertySet();

                        with(inp2)
                        {
                            SetProperty(""BusinessObject"",""Internal Product"");
                            SetProperty(""BusinessComponent"",""Internal Product - ISS Admin"");
                            SetProperty(""SearchExpression"",""[VOD Row Id]='""+out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Vod Id"")+""'"");
                            SetProperty(""Field0"",""Name"");
                        }
                        QBS.InvokeMethod(""SiebelQuery"",inp2,out2);
                        pName = out2.GetProperty(""Output0"");

                        if((tmpLineItem.GetProperty(""Name"") == pName) && !(checkflag) && (vParProdName==null || vParProdName=="""" || vParProdName==pName)) //[NAVIN:08Jun2021:MPOS Multiple Device AddonContract Issue Fix]
                        {
                            with(Outputs){
                                PrevIntegIdArr[addprod] = tmpLineItem.GetProperty(""Integration Id"");
                                SetProperty(""ParentPath"",tmpLineItem.GetProperty(""Integration Id""));
                                SetProperty(""RootParentPath"",tmpLineItem.GetProperty(""Root Integration Id""));
                                SetProperty(""ParentParentId"",tmpLineItem.GetProperty(""Parent Id""));
                                SetProperty(""ParentProdName"",tmpLineItem.GetProperty(""Name""));
                                SetProperty(""ActionCode"",tmpLineItem.GetProperty(""Action Code""));
								/* [Guru - 14122020] Added for new non RCOIS functions 
								---Start---*/
								SetProperty(""ParentId"",tmpLineItem.GetProperty(""Id""));
								SetProperty(""Billing Account Id"",tmpLineItem.GetProperty(""Billing Account Id""));
								SetProperty(""Service Account Id"",tmpLineItem.GetProperty(""Service Account Id""));
								//---End---
                                SetProperty(""Orig Id"",out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Orig Id""));
                                SetProperty(""Par Rel Id"",out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Par Rel Id""));
                                doDiscontinue=true; 
                                SetProperty(""CheckFlag"",doDiscontinue);
                            }        
                            break;
                        }
                        inp2=null;
                        out2=null;
                    }//end of else
                }//end of for(var k=0...
            }//end of if(!doDiscontinue)
            else
            {
                break;
            }
        }//end of for (var i=0;i<NumChild...
    }
    catch(e)
    {
        Outputs.SetProperty(""Error Message"",e.errText);
        Outputs.SetProperty(""Error Code"",e.errCode);
    }
    finally
    {//[NAVIN:08Jun2021:MPOS Multiple Device AddonContract Issue Fix]
        ESiebelAdapter=null;
        DMExecute=null;
        QBS=null;
        inp=null;
        out=null;
        out1=null;
        OrderIns=null;
    }
}
"/**********************************************************************************************************
Purpose 		: Function Add Product Non RCOIS/ No Customize
Author 			: GURURAJ MADHAVARAO
Change Log		: New function to log error messages
***********************************************************************************************************
Date(DD/MM/YYYY)	| By		| Description of Change																		
-----------------------------------------------------------------------------------------------------------
14/12/2020		1.0   | GURURAJ MADHAVARAO	| Created
----------------------------------------------------------------------------------------------------------*/
function LogErrMsg(Inputs,Outputs)
{
	var app=TheApplication();
	var inp=app.NewPropertySet();
	var out=app.NewPropertySet();
	var logsvc=app.GetService(""STC Generic Error Handler"");

	try
	{
		inp.SetProperty(""Error Code"",Outputs.GetProperty(""Error Code""));
		inp.SetProperty(""Error Message"",Outputs.GetProperty(""Error Message""));
		inp.SetProperty(""Object Id"",Inputs.GetProperty(""Header""));
		inp.SetProperty(""Object Type"",""Order"");
		inp.SetProperty(""Object Name"",""BS-CxProduct AddDelete Generice Service"");
		logsvc.InvokeMethod(""Log Message"",inp,out);
		
	}
	catch(e)
	{
	}
	finally
	{
	}
}
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{

}
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
	return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
    try
    {
        switch(MethodName)
        {
            case ""AddDeleteProduct"":
                Outputs.SetProperty(""Error Code"",""0000"");
                Outputs.SetProperty(""Error Message"",""Success"");
                if(Inputs.GetProperty(""ActionCode"")==""Add"" && (Inputs.GetProperty(""NonRCOIS"") == null || Inputs.GetProperty(""NonRCOIS"") == """" || Inputs.GetProperty(""NonRCOIS"") == ""N""))
                {
                    AddProduct(Inputs , Outputs);
                }
				/* [Guru - 14122020] Added for new non RCOIS 
				---Start---*/
				else if (Inputs.GetProperty(""ActionCode"")==""Add"" && Inputs.GetProperty(""NonRCOIS"") == ""Y"")
				{
					AddProductNonRCOIS(Inputs , Outputs);
				}
				//---End---
                else if(Inputs.GetProperty(""ActionCode"")==""Delete"")
                {
                    DeleteProduct(Inputs , Outputs);
                }
                if(Outputs.GetProperty(""Error Code"") != null && Outputs.GetProperty(""Error Code"") != """")
                {
					LogErrMsg(Inputs,Outputs);
                    TheApplication().RaiseErrorText(""AddDelete Product Function Execption: ""+Outputs.GetProperty(""Error Message""));
                }
                else
                {
                    Outputs.SetProperty(""Error Code"",""0000"");
                    Outputs.SetProperty(""Error Message"",""Success"");
                }
                return(CancelOperation);
            default:
                return(ContinueOperation);
        }

    }
    catch(e)
    {
        Outputs.SetProperty(""Error Code"",e.errCode);
        Outputs.SetProperty(""Error Message"",e.errText);
    }
    finally
    {
        //Inputs.Reset();
        //Outputs.Reset();
    }
    return (ContinueOperation);
}
function UnresolveLinks(Inputs,Outputs)
{
	var i=0;
	var tmp=0;
	var name;
	var cnt;
	var UnrsvLinks=TheApplication().NewPropertySet();
	var Out=TheApplication().NewPropertySet();
	Out=Outputs;

	var inp2=TheApplication().NewPropertySet();
	var out2=TheApplication().NewPropertySet();

	var result=TheApplication().NewPropertySet();

	var Qbs=TheApplication().GetService(""STC Siebel Operation BS"");

	var bo="""",bc="""",sspec="""",ordid="""",oliid="""",field="""",idval="""";

	ordid=Inputs.GetProperty(""ObjId"");
	oliid=Inputs.GetProperty(""RootId"")

	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

		for(i=0;i<Outputs.GetChildCount();i++)
		{
			if (Outputs.GetChild(i).GetType()==""UnresolvedLinks"")
			{
				UnrsvLinks=Outputs.GetChild(i);
			}
			if (Outputs.GetChild(i).GetType()==""Links"")
			{
				result.AddChild(Outputs.GetChild(i).Copy());
			}
		}
		cnt=UnrsvLinks.GetChildCount();
		//Resolving the unresolved links for createsession
		for(i=0;i<UnrsvLinks.GetChildCount();i++)
		{
			//inp2.SetProperty(""BusinessComponent"",UnrsvLinks.GetChild(i).GetProperty(""BusComp""));
			bc=UnrsvLinks.GetChild(i).GetProperty(""BusComp"");
			bo=UnrsvLinks.GetChild(i).GetProperty(""BusObj"");
			sspec=UnrsvLinks.GetChild(i).GetProperty(""SEARCH_SPEC"");
			field=UnrsvLinks.GetChild(i).GetProperty(""Field"");
			idval=UnrsvLinks.GetChild(i).GetProperty(""ID"");

			if(bc==""Order Entry - Line Items"")
			{				
				if(sspec.length > 0)
					inp2.SetProperty(""SearchExpression"",""[Id]='""+oliid+""' ""+""AND ""+sspec);
				else
					inp2.SetProperty(""SearchExpression"",""[Id]='""+oliid+""'"");
				inp2.SetProperty(""BusinessObject"",bo);
				inp2.SetProperty(""BusinessComponent"",bc);
			}
			else if (bc==""Order Entry - Orders"")
			{

				if(sspec.length > 0)
					inp2.SetProperty(""SearchExpression"",""[Id]='""+ordid+""' ""+""AND ""+sspec);
				else
					inp2.SetProperty(""SearchExpression"",""[Id]='""+ordid+""'"");
				inp2.SetProperty(""BusinessObject"",bo);
				inp2.SetProperty(""BusinessComponent"",bc);

			}
			else
			{
				if(sspec.length > 0)
					inp2.SetProperty(""SearchExpression"",""[Id]='""+ordid+""' ""+""AND ""+sspec);
				else
					inp2.SetProperty(""SearchExpression"",""[Id]='""+ordid+""'"");
				inp2.SetProperty(""BusinessObject"",bo);
				inp2.SetProperty(""BusinessComponent"",bc);
			}
			inp2.SetProperty(""Field0"",field);
			Qbs.InvokeMethod(""SiebelQuery"",inp2,out2);

			result.GetChild(0).SetProperty(idval,out2.GetProperty(""Output0""));

			inp2.Reset();
			out2.Reset();
		
		}
		

	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
	}
	return result;
}

"
"//Your public declarations go here...  
function AddMultipleProduct(Inputs,Outputs,RCOIS,QBS)
{
	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var PortItemId,PPath,addprod;
	var PlanNameArray,PlanName;
	var ordid=Inputs.GetProperty(""OrderId"");
	var oliid=Inputs.GetProperty(""LineItemId"");
	var productid=Inputs.GetProperty(""RootProductId"");
	var io=Inputs.GetProperty(""IntObjName"");
	var ordType=Inputs.GetProperty(""OrderType"");
	var OrderInstance=TheApplication().NewPropertySet();
	var GetRootPOrderIns=TheApplication().NewPropertySet();
	var CheckFlag=false;
	var out2=TheApplication().NewPropertySet();

	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

		PlanName=Inputs.GetProperty(""AddProdName"");
		PlanNameArray=PlanName.split("","");
		var j=0;
		var tmpArrL=PlanNameArray.length;

		for(var i=0;i<PlanNameArray.length;i++)
		{
			inp.SetProperty(""BusinessObject"",""Internal Product"");
			inp.SetProperty(""BusinessComponent"",""Internal Product - ISS Admin"");
			inp.SetProperty(""SearchExpression"",""[Name]='""+PlanNameArray[i]+""'"");
			inp.SetProperty(""Field0"",""Id"");
	
			QBS.InvokeMethod(""SiebelQuery"",inp,out);
			addprod=out.GetProperty(""Output0"");	

			inp.Reset();
			out.Reset();
			inp.SetProperty(""ObjId"",ordid);
			inp.SetProperty(""RootId"",oliid);

			RCOIS.InvokeMethod(""GetInstance"",inp,out);
			if(i==0)
			{
			
				OrderInstance.AddChild(out.GetChild(0));
			}
			
			GetRootPOrderIns.AddChild(out.GetChild(0));


			inp.Reset();
			out.Reset();

			inp.SetProperty(""OrderId"",ordid);
			inp.SetProperty(""LineItemId"",oliid);
			inp.SetProperty(""AddProdId"",addprod);
			inp.SetProperty(""Io"",io);
			inp.AddChild(GetRootPOrderIns.GetChild(0));
			// To get parent path to add the product	
			GetRootPath(inp,out);
			
			if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
			{
				TheApplication().RaiseErrorText(""GetRootPath Function Execption"");
			}

			if(out.GetProperty(""Par Rel Id"") == null || out.GetProperty(""Par Rel Id"") == '')
			{
				PortItemId=out.GetProperty(""Orig Id"");
			}
			else
			{
				PortItemId=out.GetProperty(""Par Rel Id"")
			}
			PPath=out.GetProperty(""ParentPath"");
			CheckFlag=out.GetProperty(""CheckFlag"");
			// Add the product to Order
			inp.Reset();
			out.Reset();

			inp.SetProperty(""ObjId"",ordid);
			inp.SetProperty(""RootId"",oliid);
			inp.SetProperty(""Prod Item Id"",addprod);
			inp.SetProperty(""Name"",PlanNameArray[i]);
			inp.SetProperty(""Product Id"",addprod);
			inp.SetProperty(""Port Item Id"",PortItemId);
			inp.SetProperty(""Quantity"",""1"");
			inp.SetProperty(""Parent Path"",PPath);
			inp.SetProperty(""AutoResolve"",""Y"");
	
			try
			{
				if(PortItemId != null && PPath !=null && CheckFlag)
				{
					RCOIS.InvokeMethod(""AddItem"",inp,out);
				}
			}
			catch(a)
			{
			
				if(a.errCode == 6881438)
				{
					

					inp.Reset();
					out.Reset();
			
					inp.SetProperty(""ObjId"",ordid);
					inp.SetProperty(""RootId"",oliid);
					inp.SetProperty(""IntObjName"",io);
		
					RCOIS.InvokeMethod(""GetDetailedReqExpl"",inp,out);

					Outputs.SetType(""DetailedExplanation"");
					Outputs.AddChild(out.Copy());
					Outputs.GetChild(j).SetType(""Mismatch ""+j);
					j++;

					inp.Reset();
					out.Reset();

					inp.SetProperty(""ObjId"",ordid);
					inp.SetProperty(""RootId"",oliid);

					RCOIS.InvokeMethod(""RemoveFailedRequests"",inp,out);


					
				}
			}
	
			GetRootPOrderIns.RemoveChild(0);
		}

		inp.Reset();
		out.Reset();
			
		inp.SetProperty(""ObjId"",ordid);
		inp.SetProperty(""RootId"",oliid);

		RCOIS.InvokeMethod(""GetInstance"",inp,out);

		inp.Reset();
		out.Reset();
		
		inp.SetProperty(""OrderId"",ordid);
		inp.SetProperty(""LineItemId"",oliid);
		inp.SetProperty(""IntObjName"",io);
		inp.AddChild(OrderInstance.GetChild(0).Copy());
		
		if(ordType==""No Provide"")
		{
			CallOrderSyncWF(inp,out,RCOIS);
			if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
			{
				TheApplication().RaiseErrorText(""CallOrderSyncWF Function Execption"");
			}
		}
		

			
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
		
	}
}
"//Your public declarations go here...  
function AddProduct (Inputs,Outputs)
{
	var ordid=Inputs.GetProperty(""Header"");
	var oliid=Inputs.GetProperty(""Item"");
	var productid=Inputs.GetProperty(""Product"");
	var io=Inputs.GetProperty(""IO"");
	var addprodname=Inputs.GetProperty(""AddProdName"");
	var ordertype=Inputs.GetProperty(""OrderType"");

	var isssvc=TheApplication().GetService(""ISS Copy Service"");
	var rcois=TheApplication().GetService(""Remote Complex Object Instance Service"");
	var Qbs=TheApplication().GetService(""STC Siebel Operation BS"");
	

	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	
	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

//		Executing ISS Copy to load the current order
		inp.SetProperty(""ParentObjectId"",ordid);
		inp.SetProperty(""IntegrationObjectName"",io);
		inp.SetProperty(""RootId"",oliid);
		inp.SetProperty(""ProductId"",productid);
		inp.SetProperty(""SearchSpec"",""[Header.Id]='""+ordid+""' AND [Line Item.Root Id]='""+oliid+""'"");
		isssvc.InvokeMethod(""LoadEAI"",inp,out);

		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			TheApplication().RaiseErrorText(""ISS Copy Service Load EAI Execption"");
		}

		inp.Reset();
		out.Reset();

//		Executing RCOIS Load Instance method

		inp.SetProperty(""IntObjName"",io);
		inp.SetProperty(""ObjId"",ordid);
		inp.SetProperty(""RootId"",oliid);
		inp.SetProperty(""TriggerEvent"",""Y"");
		inp.SetProperty(""Product Id"",productid);
		inp.SetProperty(""ExternalScript"",""Y"");
		
		rcois.InvokeMethod(""LoadInstance"",inp,out);

		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			TheApplication().RaiseErrorText(""RCOIS Load Instance Execption"");
		}

//		Executing the function UnresolveLinks to resolve the unresolved Links of the order

		var unRLinks=UnresolveLinks(inp,out);

		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			if(out.GetProperty(""Error Code"") != 7668184)
			{
				TheApplication().RaiseErrorText(""UnresolveLinks Function Execption"");
				
			}
		}
		
		if(unRLinks.GetChildCount() > 0)
		{
			inp.AddChild(unRLinks.GetChild(0).Copy());
		}

//		Executing Create Session for order with Links

		if(out.GetProperty(""CreateSession"")==""Y"")
		{
			rcois.InvokeMethod(""CreateSession"",inp,out);
		}
		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			TheApplication().RaiseErrorText(""RCOIS Create Session Execption"");
		}

		inp.Reset();
		out.Reset();

//		Customize and add multiple products provided in the input to the order

		inp.SetProperty(""OrderId"",ordid);
		inp.SetProperty(""LineItemId"",oliid);
		inp.SetProperty(""AddProdName"",addprodname);
		inp.SetProperty(""IntObjName"",io);
		inp.SetProperty(""RootProductId"",productid);
		inp.SetProperty(""OrderType"",ordertype);

		AddMultipleProduct(inp,out,rcois,Qbs);
		
		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			TheApplication().RaiseErrorText(""AddMultipleProduct Function Execption"");
		}

		inp.Reset();
		out.Reset();

//		Sync Instance for provide order
		if(ordertype==""Provide"")
		{
			inp.SetProperty(""ObjId"",ordid);
			inp.SetProperty(""RootId"",oliid);
			inp.SetProperty(""IntObjName"",io);
			rcois.InvokeMethod(""SyncInstance"",inp,out);
		}
//		Unload Complex product Instance
		inp.SetProperty(""ObjId"",ordid);
		inp.SetProperty(""RootId"",oliid);
		inp.SetProperty(""IntObjName"",io);

		rcois.InvokeMethod(""UnloadInstance"",inp,out);


	}
	catch (e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
	}
}
"//Your public declarations go here...  
function CallOrderSyncWF(Inputs , Outputs ,RCOIS)
{
	var ordid=Inputs.GetProperty(""OrderId"");
	var oliid=Inputs.GetProperty(""LineItemId"");
	var io=Inputs.GetProperty(""IntObjName"");
	var OrderInstance=TheApplication().NewPropertySet();

	var WBS=TheApplication().GetService(""Workflow Process Manager"");
	var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");
	var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");

	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();

	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

		inp.Reset();
		out.Reset();
			
		inp.SetProperty(""ObjId"",ordid);
		inp.SetProperty(""RootId"",oliid);

		RCOIS.InvokeMethod(""GetInstance"",inp,out);

		inp.Reset();

		//Convert Modified Order Items to Asset
		inp.SetProperty(""MapName"",""RCOIS SIS OM Order to SIS OM Asset v1"");
		inp.SetProperty(""OutputIntObjectName"",""SIS OM Asset"");
		inp.AddChild(out.GetChild(0).Copy());
		out.Reset();
		DMExecute.InvokeMethod(""Execute"",inp,out);


		var ModifiedAsset=out.GetChild(0).Copy();

		//Convert Original Order Items to Asset
		inp.Reset();
		out.Reset();

		inp.SetProperty(""MapName"",""RCOIS SIS OM Order to SIS OM Asset v1.1"");
		inp.SetProperty(""OutputIntObjectName"",""SIS OM Asset"");
		OrderInstance=Inputs.GetChild(0).Copy();
		inp.AddChild(OrderInstance.Copy());
		DMExecute.InvokeMethod(""Execute"",inp,out);

		var OriginalAsset=out.GetChild(0).Copy();
			

		inp.Reset();
		out.Reset();
			
		//Order Header
		inp.SetProperty(""OutputIntObjectName"",io);
		inp.SetProperty(""PrimaryRowId"",ordid);
		inp.SetProperty(""SearchSpec"",""[Header.Id] = '"" +ordid+""' AND [Line Item.Id] = 'SomeBogusId'"");
		ESiebelAdapter.InvokeMethod(""Query"",inp,out);
		var DocHeader=out.GetChild(0).Copy();



		//Sync WF Execution
		inp.Reset();
		out.Reset();
		var inp1=TheApplication().NewPropertySet();

		inp.SetProperty(""ProcessName"",""RCOIS Enhancement Delta Apply WF"");

		inp1.Reset();
		inp1=ModifiedAsset.Copy();
		inp1.SetType(""Modified Asset"");
		inp.AddChild(inp1.Copy());
			
		inp1.Reset();
		inp1=OriginalAsset.Copy();
		inp1.SetType(""Original Asset"");
		inp.AddChild(inp1.Copy());

		inp1.Reset();
		inp1=DocHeader.Copy();
		inp1.SetType(""Document Header"");
		inp.AddChild(inp1.Copy());

		var out2=TheApplication().NewPropertySet();
		inp.SetProperty(""Object Id"",ordid);
		//Sync Flag to sync order
		inp.SetProperty(""Sync"",""Y"");
		inp.SetProperty(""Order Line Item Id"",oliid);
		out2.SetType(""Delta Document"");
		out.AddChild(out2.Copy());
		out2.Reset();

		WBS.InvokeMethod(""RunProcess"",inp,out);


	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
		
	}

}
"//Your public declarations go here...  
function GetRootPath (Inputs,Outputs)
{
	var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");
	var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");

	var orderid=Inputs.GetProperty(""OrderId"");
	var lineitemid=Inputs.GetProperty(""LineItemId"");
	var addprod=Inputs.GetProperty(""AddProdId"");
	var Io=Inputs.GetProperty(""Io"");
	var pName='';
	var doDiscontinue=false;

	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var out1=TheApplication().NewPropertySet();
	var OrderIns=TheApplication().NewPropertySet()
	OrderIns=Inputs.GetChild(0);

	
	var SearchSpec=""[RCOIS Enhanced Chid Prd Structure BC.Sub Obj Id]='""+addprod+""' AND [RCOIS Enhanced Chid Prd Structure BC.Last Vers]='999999999' AND [RCOIS Enhanced Parent Prd Structure BC.Par Rel Id] IS NULL AND [RCOIS Enhanced Parent Prd Structure BC.Last Vers]='999999999'""
	
	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

		inp.SetProperty(""SearchSpec"",SearchSpec);
		inp.SetProperty(""OutputIntObjectName"",""RCOIS Enhanced Admin ISS Product Deftn Custom"");
		//To Get the relation defined in product structure
		ESiebelAdapter.InvokeMethod(""Query"",inp,out);

		var NumChild=out.GetProperty(""NumOutputObjects"");
		
		inp.Reset();
		
		inp.SetProperty(""MapName"",""RCOIS Enhanced Parent Path Map v1"");
		inp.SetProperty(""OutputIntObjectName"",""RCOIS Enhancement Line Item IO"");
		inp.SetProperty(""OrderId"",orderid);
		inp.SetProperty(""RootLineItemId"",lineitemid);
		inp.AddChild(OrderIns.Copy());
		inp.SetProperty(""ProdName"","""");
		
		DMExecute.InvokeMethod(""Execute"",inp,out1);

		for (var i=0;i<NumChild;i++)
		{
			if(!doDiscontinue)
			{
				pName=out.GetChild(0).GetChild(0).GetChild(i).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetProperty(""Name"");
				var tmpChildC=out1.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
				
				var tmpLineItem;
				for(var k=0;k<tmpChildC;k++)
				{
					var tmpLineItem=out1.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(k);
				//To check whether the product has parent relation id defined 
					if(out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Par Rel Id"") != null || out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Par Rel Id"") != '')
					{ 
						if(tmpLineItem.GetProperty(""Name"")==pName)
						{
							
							Outputs.SetProperty(""ParentPath"",tmpLineItem.GetProperty(""Integration Id""));
							Outputs.SetProperty(""RootParentPath"",tmpLineItem.GetProperty(""Root Integration Id""));
							Outputs.SetProperty(""ParentParentId"",tmpLineItem.GetProperty(""Parent Id""));
							Outputs.SetProperty(""ParentProdName"",tmpLineItem.GetProperty(""Name""));
							Outputs.SetProperty(""ActionCode"",tmpLineItem.GetProperty(""Action Code""));
							Outputs.SetProperty(""Orig Id"",out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Orig Id""));
							Outputs.SetProperty(""Par Rel Id"",out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Par Rel Id""));
							doDiscontinue=true;	
							Outputs.SetProperty(""CheckFlag"",doDiscontinue);
										
							break;
						}
						
					}
				}

			}
			else
			{
				break;
			}
		}
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
		
	}

}
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
	return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	try
	{
		switch(MethodName)
		{
			case ""AddProduct"":
				Outputs.SetProperty(""Error Code"",""0000"");
				Outputs.SetProperty(""Error Message"",""Success"");
				AddProduct(Inputs , Outputs);
				if(Outputs.GetProperty(""Error Code"") != null && Outputs.GetProperty(""Error Code"") != """")
				{
					TheApplication().RaiseErrorText(""Add Product Function Execption"");
				}
				else
				{
					Outputs.SetProperty(""Error Code"",""0000"");
					Outputs.SetProperty(""Error Message"",""Success"");
				}
				return(CancelOperation);
			default:
				return(ContinueOperation);
		}

	}
	catch(e)
	{
		Outputs.SetProperty(""Error Code"",e.errCode);
		Outputs.SetProperty(""Error Message"",e.errText);
	}
	finally
	{
		//Inputs.Reset();
		//Outputs.Reset();
	}
	return (ContinueOperation);
}
"//Your public declarations go here...  
function UnresolveLinks(Inputs,Outputs)
{
	var i=0;
	var tmp=0;
	var name;
	var cnt;
	var UnrsvLinks=TheApplication().NewPropertySet();
	var Out=TheApplication().NewPropertySet();
	Out=Outputs;

	var inp2=TheApplication().NewPropertySet();
	var out2=TheApplication().NewPropertySet();

	var result=TheApplication().NewPropertySet();

	var Qbs=TheApplication().GetService(""STC Siebel Operation BS"");

	var bo="""",bc="""",sspec="""",ordid="""",oliid="""",field="""",idval="""";

	ordid=Inputs.GetProperty(""ObjId"");
	oliid=Inputs.GetProperty(""RootId"")

	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

		for(i=0;i<Outputs.GetChildCount();i++)
		{
			if (Outputs.GetChild(i).GetType()==""UnresolvedLinks"")
			{
				UnrsvLinks=Outputs.GetChild(i);
			}
			if (Outputs.GetChild(i).GetType()==""Links"")
			{
				result.AddChild(Outputs.GetChild(i).Copy());
			}
		}
		cnt=UnrsvLinks.GetChildCount();
		//Resolving the unresolved links for createsession
		for(i=0;i<UnrsvLinks.GetChildCount();i++)
		{
			//inp2.SetProperty(""BusinessComponent"",UnrsvLinks.GetChild(i).GetProperty(""BusComp""));
			bc=UnrsvLinks.GetChild(i).GetProperty(""BusComp"");
			bo=UnrsvLinks.GetChild(i).GetProperty(""BusObj"");
			sspec=UnrsvLinks.GetChild(i).GetProperty(""SEARCH_SPEC"");
			field=UnrsvLinks.GetChild(i).GetProperty(""Field"");
			idval=UnrsvLinks.GetChild(i).GetProperty(""ID"");

			if(bc==""Order Entry - Line Items"")
			{				
				if(sspec.length > 0)
					inp2.SetProperty(""SearchExpression"",""[Id]='""+oliid+""' ""+""AND ""+sspec);
				else
					inp2.SetProperty(""SearchExpression"",""[Id]='""+oliid+""'"");
				inp2.SetProperty(""BusinessObject"",bo);
				inp2.SetProperty(""BusinessComponent"",bc);
			}
			else if (bc==""Order Entry - Orders"")
			{

				if(sspec.length > 0)
					inp2.SetProperty(""SearchExpression"",""[Id]='""+ordid+""' ""+""AND ""+sspec);
				else
					inp2.SetProperty(""SearchExpression"",""[Id]='""+ordid+""'"");
				inp2.SetProperty(""BusinessObject"",bo);
				inp2.SetProperty(""BusinessComponent"",bc);

			}
			else
			{
				if(sspec.length > 0)
					inp2.SetProperty(""SearchExpression"",""[Id]='""+ordid+""' ""+""AND ""+sspec);
				else
					inp2.SetProperty(""SearchExpression"",""[Id]='""+ordid+""'"");
				inp2.SetProperty(""BusinessObject"",bo);
				inp2.SetProperty(""BusinessComponent"",bc);
			}
			inp2.SetProperty(""Field0"",field);
			Qbs.InvokeMethod(""SiebelQuery"",inp2,out2);

			result.GetChild(0).SetProperty(idval,out2.GetProperty(""Output0""));

			inp2.Reset();
			out2.Reset();
		
		}
		

	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
	}
	return result;
}

"
function AddChildProducts(Inputs,Outputs,RCOIS)
{
	var orderid=Inputs.GetProperty(""OrderId"");
	var lineitemid=Inputs.GetProperty(""LineItemId"");
	var io=Inputs.GetProperty(""IntObjName"");
	var portaloid=Inputs.GetProperty(""Portal Order Id"");
	var OrderType=Inputs.GetProperty(""Order Type"");
	var OrderInstance=Inputs.GetChild(0).Copy();

	var WBS=TheApplication().GetService(""Workflow Process Manager"");
	var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");
	var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");
	var QBS=TheApplication().GetService(""STC Siebel Operation BS"");

	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var inp1=TheApplication().NewPropertySet();
	var out1=TheApplication().NewPropertySet();
	var pName="""",SearchSpec="""",parName="""",prodName="""",prodId="""",parItemId="""",parId="""",origId="""",pparRelId="""",parLineId="""",pLineId="""",PPath="""",PortItemId="""";
	var CheckFlag=false;
	var doDiscontinue=false;

	var cnt=0;

	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

		inp.AddChild(OrderInstance.Copy());
		inp.SetProperty(""Portal Order Id"",portaloid);
		inp.SetProperty(""Order Id"",orderid);
		inp.SetProperty(""Order Line Id"",lineitemid);
		inp.SetProperty(""Order Type"",Inputs.GetProperty(""Order Type""));

		GetAddedParentPath(inp,out);
		var ParentStruc=out.GetChild(0);

		inp.Reset();
		out.Reset();

		if(OrderType==""No Provide"" && (portaloid !="""" || portaloid != null || typeof(portaloid)==""undefined""))
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Status] = 'InProgress' AND [Line Item.STC Order Identifier] <> 'Contractual' AND [Line Item.STC Order Identifier] <> 'Pre-Booking' AND [Line Item.STC Parent Order Item Id] IS NOT NULL"";
		}
		else if (OrderType==""Provide"" && (portaloid !="""" || portaloid != null || typeof(portaloid)==""undefined""))
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Status] = 'Pending' AND [Line Item.STC Order Identifier] = 'Contractual' AND [Line Item.STC Order CRM Id]='""+orderid+""' AND [Line Item.STC Parent Order Item Id] IS NOT NULL"";
		}
		else
		{
			TheApplication().RaiseErrorText(""Improper input Arguments"");
		}

		//SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending') AND [Line Item.STC Parent Order Item Id] IS NOT NULL"";
		inp.SetProperty(""OutputIntObjectName"",""STC ECommerce Order IO"");
		inp.SetProperty(""SearchSpec"",SearchSpec);
		//To Get the Ecommerce Line Item Structure
		ESiebelAdapter.InvokeMethod(""Query"",inp,out);
		var NumChild=out.GetProperty(""NumOutputObjects"");
		if(out.GetChild(0).GetChild(0).GetChildCount()>=1)
		{
			if(out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
			{
				cnt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
			}
		}
		if (cnt>=1)
		{
			//TheApplication().RaiseErrorText(""No Child Item"");
		
			for(var i=0;i<cnt;i++)
			{
				PortItemId="""";
				prodName=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Name"");
				prodId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Id"");
				parItemId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Parent Order Item Id"");
				pLineId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id"");
			//Get the parent item name for the child
				
				inp1.Reset();
				out1.Reset();
	
				inp1.SetProperty(""BusinessObject"",""STC ECommerce Order BO"");
				inp1.SetProperty(""BusinessComponent"",""STC ECom Order Item BC"");
				inp1.SetProperty(""SearchExpression"",""[STC Parent Portal Order Id]='""+portaloid+""' AND [STC Portal Line Item Id]='""+parItemId+""'"");
				inp1.SetProperty(""Field0"",""STC Prod Name"");
				inp1.SetProperty(""Field1"",""STC Prod Id"");
				inp1.SetProperty(""Field2"",""STC Portal Line Item Id"");
		
				QBS.InvokeMethod(""SiebelQuery"",inp1,out1);
				parName=out1.GetProperty(""Output0"");
				parId=out1.GetProperty(""Output1"");
				parLineId=out1.GetProperty(""Output2"");
	
				if(parName ==''||parName==""""||parId ==''||parId=="""")
				{
					TheApplication().RaiseErrorText(""No parent Line Item for the mentioned Child Item"");
				}
			//Get the Relation of the Child product with the parent
				inp1.Reset();
				out1.Reset();
	
				SearchSpec=""[RCOIS Enhanced Chid Prd Structure BC.Sub Obj Id]='""+prodId+""' AND [RCOIS Enhanced Chid Prd Structure BC.Last Vers]='999999999' AND [RCOIS Enhanced Parent Prd Structure BC.Par Rel Id] IS NULL AND [RCOIS Enhanced Parent Prd Structure BC.Last Vers]='999999999' AND [RCOIS Enhanced PROD Admin BC.Name]='""+parName+""'"";
				inp1.SetProperty(""SearchSpec"",SearchSpec);
				inp1.SetProperty(""OutputIntObjectName"",""RCOIS Enhanced Admin ISS Product Deftn Custom"");
				ESiebelAdapter.InvokeMethod(""Query"",inp1,out1);
	
				var NumChild1=out1.GetProperty(""NumOutputObjects"");
				if(out1.GetChild(0).GetChild(0).GetChildCount()>=1)
				{
						NumChild1=out1.GetChild(0).GetChild(0).GetChildCount();
	
				}
				if (NumChild1<=0)
				{
					TheApplication().RaiseErrorText(""No Product Relationship"");
				}
				origId="""";pparRelId="""";
				for(var j=0;j<NumChild1;j++)
				{
					if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChildCount()>=1)
					{
						if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChildCount()>=1)
						{
							if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
							{
								if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount() >=1)
								{
									if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
									{
										origId=out1.GetChild(0).GetChild(0).GetChild(j).GetProperty(""Orig Id"");
										pparRelId=out1.GetChild(0).GetChild(0).GetChild(j).GetProperty(""Par Rel Id"");
									}
								}
							}
						}
					}
				}
				if((origId =="""" || origId=='') && (pparRelId =="""" || pparRelId==''))
				{
					inp1.Reset();
					out1.Reset();
		
					inp1.SetProperty(""OrderId"",orderid);
					inp1.SetProperty(""LineItemId"",lineitemid);
					inp1.SetProperty(""AddProdId"",prodId);
					inp1.SetProperty(""Io"",io);
					var tWrapper=TheApplication().NewPropertySet();
					tWrapper.AddChild(OrderInstance.Copy());
					inp1.AddChild(tWrapper.GetChild(0));
					// To get parent path to add the product	
					GetRootPath(inp1,out1);
					
					if(out1.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
					{
						TheApplication().RaiseErrorText(""GetRootPath Function Execption"");
					}
		
					if(out1.GetProperty(""Par Rel Id"") == null || out1.GetProperty(""Par Rel Id"") == '')
					{
						PortItemId=out1.GetProperty(""Orig Id"");
					}
					else
					{
						PortItemId=out1.GetProperty(""Par Rel Id"")
					}
					if (PortItemId==""""||PortItemId==null)
					{
						TheApplication().RaiseErrorText(""No RelationShip for the product"");
					}
					PPath=out1.GetProperty(""ParentPath"");
					CheckFlag=out1.GetProperty(""CheckFlag"");
					//TheApplication().RaiseErrorText(""Null RelationShip IDs"");
					inp1.Reset();
					out1.Reset();
		
					inp1.SetProperty(""ObjId"",orderid);
					inp1.SetProperty(""RootId"",lineitemid);
					inp1.SetProperty(""Prod Item Id"",prodId);
					inp1.SetProperty(""Name"",prodName);
					inp1.SetProperty(""Product Id"",prodId);
					inp1.SetProperty(""Port Item Id"",PortItemId);
					inp1.SetProperty(""Quantity"",""1"");
					inp1.SetProperty(""Parent Path"",PPath);
					inp1.SetProperty(""AutoResolve"",""Y"");
			
					try
					{
						if(PortItemId != null && PPath !=null && CheckFlag)
						{
							RCOIS.InvokeMethod(""AddItem"",inp1,out1);
						}
					}
					catch(a)
					{
					
						if(a.errCode == 6881438)
						{		
							inp1.Reset();
							out1.Reset();
							inp1.SetProperty(""ObjId"",orderid);
							inp1.SetProperty(""RootId"",lineitemid);
							RCOIS.InvokeMethod(""RemoveFailedRequests"",inp1,out1);
						}
					}
				}
				else
				{
					var nCount=ParentStruc.GetChildCount();
					for(var k=0;k<nCount;k++)
					{
						if(ParentStruc.GetChild(k).GetType()==parLineId)
						{
							inp1.Reset();
							out1.Reset();

							inp1.SetProperty(""ObjId"",orderid);
							inp1.SetProperty(""RootId"",lineitemid);
							inp1.SetProperty(""Prod Item Id"",prodId);
							inp1.SetProperty(""Name"",prodName);
							inp1.SetProperty(""Product Id"",prodId);
							if(pparRelId == null || pparRelId == '' ||pparRelId=="""")
							{
								inp1.SetProperty(""Port Item Id"",origId);
								PortItemId=origId;
							}
							else
							{
								inp1.SetProperty(""Port Item Id"",pparRelId);
								PortItemId=pparRelId;
							}
							//inp1.SetProperty(""Port Item Id"",PortItemId);
							inp1.SetProperty(""Quantity"",""1"");
							inp1.SetProperty(""Parent Path"",ParentStruc.GetChild(k).GetProperty(""ParentId""));
							PPath=ParentStruc.GetChild(k).GetProperty(""ParentId"");
							inp1.SetProperty(""AutoResolve"",""Y"");

							try
							{
								if(PortItemId != null && PPath !=null)
								{
									RCOIS.InvokeMethod(""AddItem"",inp1,out1);
								}
							}
							catch(a)
							{

								if(a.errCode == 6881438)
								{
									inp1.Reset();
									out1.Reset();
									inp1.SetProperty(""ObjId"",orderid);
									inp1.SetProperty(""RootId"",lineitemid);
									RCOIS.InvokeMethod(""RemoveFailedRequests"",inp1,out1);
								}
							}
						}
					}
				}
			
			}
		}
		

	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
	}
}
"
function AddChildProducts(Inputs,Outputs,RCOIS)
{
	var orderid=Inputs.GetProperty(""OrderId"");
	var lineitemid=Inputs.GetProperty(""LineItemId"");
	var io=Inputs.GetProperty(""IntObjName"");
	var portaloid=Inputs.GetProperty(""Portal Order Id"");
	var OrderType=Inputs.GetProperty(""Order Type"");
	var OrderInstance=Inputs.GetChild(0).Copy();

	var WBS=TheApplication().GetService(""Workflow Process Manager"");
	var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");
	var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");
	var QBS=TheApplication().GetService(""STC Siebel Operation BS"");

	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var inp1=TheApplication().NewPropertySet();
	var out1=TheApplication().NewPropertySet();
	var pName="""",SearchSpec="""",parName="""",prodName="""",prodId="""",parItemId="""",parId="""",origId="""",pparRelId="""",parLineId="""",pLineId="""",PPath="""",PortItemId="""";
	var CheckFlag=false;
	var doDiscontinue=false;

	var cnt=0;

	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

		inp.AddChild(OrderInstance.Copy());
		inp.SetProperty(""Portal Order Id"",portaloid);
		inp.SetProperty(""Order Id"",orderid);
		inp.SetProperty(""Order Line Id"",lineitemid);
		inp.SetProperty(""Order Type"",Inputs.GetProperty(""Order Type""));

		GetAddedParentPath(inp,out);
		var ParentStruc=out.GetChild(0);

		inp.Reset();
		out.Reset();

		if(OrderType==""No Provide"" && (portaloid !="""" || portaloid != null || typeof(portaloid)==""undefined""))
		{
			//SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Status] = 'InProgress' AND [Line Item.STC Order Identifier] <> 'Contractual' AND [Line Item.STC Order Identifier] <> 'Pre-Booking' AND [Line Item.STC Parent Order Item Id] IS NOT NULL"";
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Order CRM Id]='""+orderid+""' AND [Line Item.STC Status] = 'InProgress' AND [Line Item.STC Order Identifier] <> 'Contractual' AND [Line Item.STC Order Identifier] <> 'Pre-Booking' AND [Line Item.STC Parent Order Item Id] IS NOT NULL"";
		}
		else if (OrderType==""Provide"" && (portaloid !="""" || portaloid != null || typeof(portaloid)==""undefined""))
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Status] = 'Pending' AND [Line Item.STC Order Identifier] = 'Contractual' AND [Line Item.STC Order CRM Id]='""+orderid+""' AND [Line Item.STC Parent Order Item Id] IS NOT NULL"";
		}
		else
		{
			TheApplication().RaiseErrorText(""Improper input Arguments"");
		}

		//SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending') AND [Line Item.STC Parent Order Item Id] IS NOT NULL"";
		inp.SetProperty(""OutputIntObjectName"",""STC ECommerce Order IO"");
		inp.SetProperty(""SearchSpec"",SearchSpec);
		//To Get the Ecommerce Line Item Structure
		ESiebelAdapter.InvokeMethod(""Query"",inp,out);
		var NumChild=out.GetProperty(""NumOutputObjects"");
		if(out.GetChild(0).GetChild(0).GetChildCount()>=1)
		{
			if(out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
			{
				cnt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
			}
		}
		if (cnt>=1)
		{
			//TheApplication().RaiseErrorText(""No Child Item"");
		
			for(var i=0;i<cnt;i++)
			{
				PortItemId="""";
				prodName=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Name"");
				prodId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Id"");
				parItemId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Parent Order Item Id"");
				pLineId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id"");
			//Get the parent item name for the child
				
				inp1.Reset();
				out1.Reset();
	
				inp1.SetProperty(""BusinessObject"",""STC ECommerce Order BO"");
				inp1.SetProperty(""BusinessComponent"",""STC ECom Order Item BC"");
				inp1.SetProperty(""SearchExpression"",""[STC Parent Portal Order Id]='""+portaloid+""' AND [STC Portal Line Item Id]='""+parItemId+""'"");
				inp1.SetProperty(""Field0"",""STC Prod Name"");
				inp1.SetProperty(""Field1"",""STC Prod Id"");
				inp1.SetProperty(""Field2"",""STC Portal Line Item Id"");
		
				QBS.InvokeMethod(""SiebelQuery"",inp1,out1);
				parName=out1.GetProperty(""Output0"");
				parId=out1.GetProperty(""Output1"");
				parLineId=out1.GetProperty(""Output2"");
	
				if(parName ==''||parName==""""||parId ==''||parId=="""")
				{
					TheApplication().RaiseErrorText(""No parent Line Item for the mentioned Child Item"");
				}
			//Get the Relation of the Child product with the parent
				inp1.Reset();
				out1.Reset();
	
				SearchSpec=""[RCOIS Enhanced Chid Prd Structure BC.Sub Obj Id]='""+prodId+""' AND [RCOIS Enhanced Chid Prd Structure BC.Last Vers]='999999999' AND [RCOIS Enhanced Parent Prd Structure BC.Par Rel Id] IS NULL AND [RCOIS Enhanced Parent Prd Structure BC.Last Vers]='999999999' AND [RCOIS Enhanced PROD Admin BC.Name]='""+parName+""'"";
				inp1.SetProperty(""SearchSpec"",SearchSpec);
				inp1.SetProperty(""OutputIntObjectName"",""RCOIS Enhanced Admin ISS Product Deftn Custom"");
				ESiebelAdapter.InvokeMethod(""Query"",inp1,out1);
	
				var NumChild1=out1.GetProperty(""NumOutputObjects"");
				if(out1.GetChild(0).GetChild(0).GetChildCount()>=1)
				{
						NumChild1=out1.GetChild(0).GetChild(0).GetChildCount();
	
				}
				if (NumChild1<=0)
				{
					TheApplication().RaiseErrorText(""No Product Relationship"");
				}
				origId="""";pparRelId="""";
				for(var j=0;j<NumChild1;j++)
				{
					if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChildCount()>=1)
					{
						if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChildCount()>=1)
						{
							if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
							{
								if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount() >=1)
								{
									if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
									{
										origId=out1.GetChild(0).GetChild(0).GetChild(j).GetProperty(""Orig Id"");
										pparRelId=out1.GetChild(0).GetChild(0).GetChild(j).GetProperty(""Par Rel Id"");
									}
								}
							}
						}
					}
				}
				if((origId =="""" || origId=='') && (pparRelId =="""" || pparRelId==''))
				{
					inp1.Reset();
					out1.Reset();
		
					inp1.SetProperty(""OrderId"",orderid);
					inp1.SetProperty(""LineItemId"",lineitemid);
					inp1.SetProperty(""AddProdId"",prodId);
					inp1.SetProperty(""Io"",io);
					var tWrapper=TheApplication().NewPropertySet();
					tWrapper.AddChild(OrderInstance.Copy());
					inp1.AddChild(tWrapper.GetChild(0));
					// To get parent path to add the product	
					GetRootPath(inp1,out1);
					
					if(out1.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
					{
						TheApplication().RaiseErrorText(""GetRootPath Function Execption"");
					}
		
					if(out1.GetProperty(""Par Rel Id"") == null || out1.GetProperty(""Par Rel Id"") == '')
					{
						PortItemId=out1.GetProperty(""Orig Id"");
					}
					else
					{
						PortItemId=out1.GetProperty(""Par Rel Id"")
					}
					if (PortItemId==""""||PortItemId==null)
					{
						TheApplication().RaiseErrorText(""No RelationShip for the product"");
					}
					PPath=out1.GetProperty(""ParentPath"");
					CheckFlag=out1.GetProperty(""CheckFlag"");
					//TheApplication().RaiseErrorText(""Null RelationShip IDs"");
					inp1.Reset();
					out1.Reset();
		
					inp1.SetProperty(""ObjId"",orderid);
					inp1.SetProperty(""RootId"",lineitemid);
					inp1.SetProperty(""Prod Item Id"",prodId);
					inp1.SetProperty(""Name"",prodName);
					inp1.SetProperty(""Product Id"",prodId);
					inp1.SetProperty(""Port Item Id"",PortItemId);
					inp1.SetProperty(""Quantity"",""1"");
					inp1.SetProperty(""Parent Path"",PPath);
					inp1.SetProperty(""AutoResolve"",""Y"");
			
					try
					{
						if(PortItemId != null && PPath !=null && CheckFlag)
						{
							RCOIS.InvokeMethod(""AddItem"",inp1,out1);
						}
					}
					catch(a)
					{
					
						if(a.errCode == 6881438)
						{		
							inp1.Reset();
							out1.Reset();
							inp1.SetProperty(""ObjId"",orderid);
							inp1.SetProperty(""RootId"",lineitemid);
							RCOIS.InvokeMethod(""RemoveFailedRequests"",inp1,out1);
						}
					}
				}
				else
				{
					var nCount=ParentStruc.GetChildCount();
					for(var k=0;k<nCount;k++)
					{
						if(ParentStruc.GetChild(k).GetType()==parLineId)
						{
							inp1.Reset();
							out1.Reset();

							inp1.SetProperty(""ObjId"",orderid);
							inp1.SetProperty(""RootId"",lineitemid);
							inp1.SetProperty(""Prod Item Id"",prodId);
							inp1.SetProperty(""Name"",prodName);
							inp1.SetProperty(""Product Id"",prodId);
							if(pparRelId == null || pparRelId == '' ||pparRelId=="""")
							{
								inp1.SetProperty(""Port Item Id"",origId);
								PortItemId=origId;
							}
							else
							{
								inp1.SetProperty(""Port Item Id"",pparRelId);
								PortItemId=pparRelId;
							}
							//inp1.SetProperty(""Port Item Id"",PortItemId);
							inp1.SetProperty(""Quantity"",""1"");
							inp1.SetProperty(""Parent Path"",ParentStruc.GetChild(k).GetProperty(""ParentId""));
							PPath=ParentStruc.GetChild(k).GetProperty(""ParentId"");
							inp1.SetProperty(""AutoResolve"",""Y"");

							try
							{
								if(PortItemId != null && PPath !=null)
								{
									RCOIS.InvokeMethod(""AddItem"",inp1,out1);
								}
							}
							catch(a)
							{

								if(a.errCode == 6881438)
								{
									inp1.Reset();
									out1.Reset();
									inp1.SetProperty(""ObjId"",orderid);
									inp1.SetProperty(""RootId"",lineitemid);
									RCOIS.InvokeMethod(""RemoveFailedRequests"",inp1,out1);
								}
							}
						}
					}
				}
			
			}
		}
		

	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
	}
}
"
function AddMultipleProduct(Inputs,Outputs,RCOIS,QBS)
{
	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var PortItemId,PPath,addprod;
	var PlanNameArray,PlanName;
	var ordid=Inputs.GetProperty(""OrderId"");
	var oliid=Inputs.GetProperty(""LineItemId"");
	var productid=Inputs.GetProperty(""RootProductId"");
	var io=Inputs.GetProperty(""IntObjName"");
	var ordType=Inputs.GetProperty(""OrderType"");
	var OrderInstance=TheApplication().NewPropertySet();
	var GetRootPOrderIns=TheApplication().NewPropertySet();
	var CheckFlag=false;
	var out2=TheApplication().NewPropertySet();

	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

		PlanName=Inputs.GetProperty(""AddProdName"");
		PlanNameArray=PlanName.split("","");
		var j=0;
		var tmpArrL=PlanNameArray.length;

		for(var i=0;i<PlanNameArray.length;i++)
		{
			inp.SetProperty(""BusinessObject"",""Internal Product"");
			inp.SetProperty(""BusinessComponent"",""Internal Product - ISS Admin"");
			inp.SetProperty(""SearchExpression"",""[Name]='""+PlanNameArray[i]+""'"");
			inp.SetProperty(""Field0"",""Id"");
	
			QBS.InvokeMethod(""SiebelQuery"",inp,out);
			addprod=out.GetProperty(""Output0"");	

			inp.Reset();
			out.Reset();
			inp.SetProperty(""ObjId"",ordid);
			inp.SetProperty(""RootId"",oliid);

			RCOIS.InvokeMethod(""GetInstance"",inp,out);
			if(i==0)
			{
			
				OrderInstance.AddChild(out.GetChild(0));
			}
			
			GetRootPOrderIns.AddChild(out.GetChild(0));


			inp.Reset();
			out.Reset();

			inp.SetProperty(""OrderId"",ordid);
			inp.SetProperty(""LineItemId"",oliid);
			inp.SetProperty(""AddProdId"",addprod);
			inp.SetProperty(""Io"",io);
			inp.AddChild(GetRootPOrderIns.GetChild(0));
			// To get parent path to add the product	
			GetRootPath(inp,out);
			
			if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
			{
				TheApplication().RaiseErrorText(""GetRootPath Function Execption"");
			}

			if(out.GetProperty(""Par Rel Id"") == null || out.GetProperty(""Par Rel Id"") == '')
			{
				PortItemId=out.GetProperty(""Orig Id"");
			}
			else
			{
				PortItemId=out.GetProperty(""Par Rel Id"")
			}
			PPath=out.GetProperty(""ParentPath"");
			CheckFlag=out.GetProperty(""CheckFlag"");
			// Add the product to Order
			inp.Reset();
			out.Reset();

			inp.SetProperty(""ObjId"",ordid);
			inp.SetProperty(""RootId"",oliid);
			inp.SetProperty(""Prod Item Id"",addprod);
			inp.SetProperty(""Name"",PlanNameArray[i]);
			inp.SetProperty(""Product Id"",addprod);
			inp.SetProperty(""Port Item Id"",PortItemId);
			inp.SetProperty(""Quantity"",""1"");
			inp.SetProperty(""Parent Path"",PPath);
			inp.SetProperty(""AutoResolve"",""Y"");
	
			try
			{
				if(PortItemId != null && PPath !=null && CheckFlag)
				{
					RCOIS.InvokeMethod(""AddItem"",inp,out);
				}
			}
			catch(a)
			{
			
				if(a.errCode == 6881438)
				{
					

					inp.Reset();
					out.Reset();
			
					inp.SetProperty(""ObjId"",ordid);
					inp.SetProperty(""RootId"",oliid);
					inp.SetProperty(""IntObjName"",io);
		
					RCOIS.InvokeMethod(""GetDetailedReqExpl"",inp,out);

					Outputs.SetType(""DetailedExplanation"");
					Outputs.AddChild(out.Copy());
					Outputs.GetChild(j).SetType(""Mismatch ""+j);
					j++;

					inp.Reset();
					out.Reset();

					inp.SetProperty(""ObjId"",ordid);
					inp.SetProperty(""RootId"",oliid);

					RCOIS.InvokeMethod(""RemoveFailedRequests"",inp,out);


					
				}
			}
	
			GetRootPOrderIns.RemoveChild(0);
		}

		inp.Reset();
		out.Reset();
			
		inp.SetProperty(""ObjId"",ordid);
		inp.SetProperty(""RootId"",oliid);

		RCOIS.InvokeMethod(""GetInstance"",inp,out);

		inp.Reset();
		//out.Reset();
		
		inp.SetProperty(""OrderId"",ordid);
		inp.SetProperty(""LineItemId"",oliid);
		inp.SetProperty(""IntObjName"",io);
		inp.SetProperty(""Portal Order Id"",Inputs.GetProperty(""Portal Order Id""));
		inp.SetProperty(""Order Type"",ordType);
		inp.AddChild(out.GetChild(0).Copy());
		out.Reset();

		AddChildProducts(inp,out,RCOIS);
		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			TheApplication().RaiseErrorText(""Add Child Products Function Execption"");
		}

		inp.Reset();
		out.Reset();
		
		inp.SetProperty(""OrderId"",ordid);
		inp.SetProperty(""LineItemId"",oliid);
		inp.SetProperty(""IntObjName"",io);
		inp.AddChild(OrderInstance.GetChild(0).Copy());
		
		if(ordType==""No Provide"")
		{
			CallOrderSyncWF(inp,out,RCOIS);
			if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
			{
				TheApplication().RaiseErrorText(""CallOrderSyncWF Function Execption"");
			}
		}
		

			
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
		
	}
}
function AddProduct (Inputs,Outputs)
{
	var ordid=Inputs.GetProperty(""Header"");
	var oliid=Inputs.GetProperty(""Item"");
	var productid=Inputs.GetProperty(""Product"");
	var io=Inputs.GetProperty(""IO"");
	var addprodname=Inputs.GetProperty(""AddProdName"");
	var ordertype=Inputs.GetProperty(""OrderType"");
	var POrderId=Inputs.GetProperty(""Portal Order Id"");

	var isssvc=TheApplication().GetService(""ISS Copy Service"");
	var rcois=TheApplication().GetService(""Remote Complex Object Instance Service"");
	var Qbs=TheApplication().GetService(""STC Siebel Operation BS"");
	

	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	
	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

//		Get Plan Comma Seperated List
		GetPlanList(Inputs,Outputs);

		addprodname=Outputs.GetProperty(""Plan List"");

		if(addprodname.length<=0)
		{
			TheApplication().RaiseErrorText(""GetPlanList Function Execption"");
		}


//		Executing ISS Copy to load the current order
		inp.SetProperty(""ParentObjectId"",ordid);
		inp.SetProperty(""IntegrationObjectName"",io);
		inp.SetProperty(""RootId"",oliid);
		inp.SetProperty(""ProductId"",productid);
		inp.SetProperty(""SearchSpec"",""[Header.Id]='""+ordid+""' AND [Line Item.Root Id]='""+oliid+""'"");
		isssvc.InvokeMethod(""LoadEAI"",inp,out);

		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			TheApplication().RaiseErrorText(""ISS Copy Service Load EAI Execption"");
		}

		inp.Reset();
		out.Reset();

//		Executing RCOIS Load Instance method

		inp.SetProperty(""IntObjName"",io);
		inp.SetProperty(""ObjId"",ordid);
		inp.SetProperty(""RootId"",oliid);
		inp.SetProperty(""TriggerEvent"",""Y"");
		inp.SetProperty(""Product Id"",productid);
		inp.SetProperty(""ExternalScript"",""Y"");
		
		rcois.InvokeMethod(""LoadInstance"",inp,out);

		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			TheApplication().RaiseErrorText(""RCOIS Load Instance Execption"");
		}

//		Executing the function UnresolveLinks to resolve the unresolved Links of the order

		var unRLinks=UnresolveLinks(inp,out);

		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			if(out.GetProperty(""Error Code"") != 7668184)
			{
				TheApplication().RaiseErrorText(""UnresolveLinks Function Execption"");
				
			}
		}
		if(unRLinks.GetChildCount() > 0)
		{
			inp.AddChild(unRLinks.GetChild(0).Copy());
		}

//		Executing Create Session for order with Links

		if(out.GetProperty(""CreateSession"")==""Y"")
		{
			rcois.InvokeMethod(""CreateSession"",inp,out);
		}
		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			TheApplication().RaiseErrorText(""RCOIS Create Session Execption"");
		}


		inp.Reset();
		out.Reset();

//		Customize and add multiple products provided in the input to the order

		inp.SetProperty(""OrderId"",ordid);
		inp.SetProperty(""LineItemId"",oliid);
		inp.SetProperty(""AddProdName"",addprodname);
		inp.SetProperty(""IntObjName"",io);
		inp.SetProperty(""RootProductId"",productid);
		inp.SetProperty(""OrderType"",ordertype);
		inp.SetProperty(""Portal Order Id"",POrderId);

		AddMultipleProduct(inp,out,rcois,Qbs);
		
		if(out.GetProperty(""Error Code"") != null && out.GetProperty(""Error Code"") != """")
		{
			TheApplication().RaiseErrorText(""AddMultipleProduct Function Execption"");
		}

		inp.Reset();
		out.Reset();

//		Sync Instance for provide order
		if(ordertype==""Provide"")
		{
			inp.SetProperty(""ObjId"",ordid);
			inp.SetProperty(""RootId"",oliid);
			inp.SetProperty(""IntObjName"",io);
			rcois.InvokeMethod(""SyncInstance"",inp,out);
		}
//		Unload Complex product Instance
		inp.SetProperty(""ObjId"",ordid);
		inp.SetProperty(""RootId"",oliid);
		inp.SetProperty(""IntObjName"",io);

		rcois.InvokeMethod(""UnloadInstance"",inp,out);


	}
	catch (e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
	}
}
function CallOrderSyncWF(Inputs , Outputs ,RCOIS)
{
	var ordid=Inputs.GetProperty(""OrderId"");
	var oliid=Inputs.GetProperty(""LineItemId"");
	var io=Inputs.GetProperty(""IntObjName"");
	var OrderInstance=TheApplication().NewPropertySet();

	var WBS=TheApplication().GetService(""Workflow Process Manager"");
	var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");
	var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");

	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();

	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

		inp.Reset();
		out.Reset();
			
		inp.SetProperty(""ObjId"",ordid);
		inp.SetProperty(""RootId"",oliid);

		RCOIS.InvokeMethod(""GetInstance"",inp,out);

		inp.Reset();

		//Convert Modified Order Items to Asset
		inp.SetProperty(""MapName"",""RCOIS SIS OM Order to SIS OM Asset v1"");
		inp.SetProperty(""OutputIntObjectName"",""SIS OM Asset"");
		inp.AddChild(out.GetChild(0).Copy());
		out.Reset();
		DMExecute.InvokeMethod(""Execute"",inp,out);


		var ModifiedAsset=out.GetChild(0).Copy();

		//Convert Original Order Items to Asset
		inp.Reset();
		out.Reset();

		inp.SetProperty(""MapName"",""RCOIS SIS OM Order to SIS OM Asset v1.1"");
		inp.SetProperty(""OutputIntObjectName"",""SIS OM Asset"");
		OrderInstance=Inputs.GetChild(0).Copy();
		inp.AddChild(OrderInstance.Copy());
		DMExecute.InvokeMethod(""Execute"",inp,out);

		var OriginalAsset=out.GetChild(0).Copy();
			

		inp.Reset();
		out.Reset();
			
		//Order Header
		inp.SetProperty(""OutputIntObjectName"",io);
		inp.SetProperty(""PrimaryRowId"",ordid);
		inp.SetProperty(""SearchSpec"",""[Header.Id] = '"" +ordid+""' AND [Line Item.Id] = 'SomeBogusId'"");
		ESiebelAdapter.InvokeMethod(""Query"",inp,out);
		var DocHeader=out.GetChild(0).Copy();



		//Sync WF Execution
		inp.Reset();
		out.Reset();
		var inp1=TheApplication().NewPropertySet();

		inp.SetProperty(""ProcessName"",""RCOIS Enhancement Delta Apply WF"");

		inp1.Reset();
		inp1=ModifiedAsset.Copy();
		inp1.SetType(""Modified Asset"");
		inp.AddChild(inp1.Copy());
			
		inp1.Reset();
		inp1=OriginalAsset.Copy();
		inp1.SetType(""Original Asset"");
		inp.AddChild(inp1.Copy());

		inp1.Reset();
		inp1=DocHeader.Copy();
		inp1.SetType(""Document Header"");
		inp.AddChild(inp1.Copy());

		var out2=TheApplication().NewPropertySet();
		inp.SetProperty(""Object Id"",ordid);
		//Sync Flag to sync order
		inp.SetProperty(""Sync"",""Y"");
		inp.SetProperty(""Order Line Item Id"",oliid);
		out2.SetType(""Delta Document"");
		out.AddChild(out2.Copy());
		out2.Reset();

		WBS.InvokeMethod(""RunProcess"",inp,out);


	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
		
	}

}
function GetAddedParentPath(Inputs,Outputs)
{
	
	var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");

	var orderid=Inputs.GetProperty(""Order Id"");
	var lineitemid=Inputs.GetProperty(""Order Line Id"");
	var PortalOrderId=Inputs.GetProperty(""Portal Order Id"");
	var OrderType=Inputs.GetProperty(""Order Type"");
	var ESA=TheApplication().GetService(""EAI Siebel Adapter"");
	var SearchSpec=""""
	
	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var PlanList,tmp,pid,pitemid,val,pName="""";

	var Qbs=TheApplication().GetService(""STC Siebel Operation BS"");
	
	var out1=TheApplication().NewPropertySet();
	var OrderIns=TheApplication().NewPropertySet();
	OrderIns=Inputs.GetChild(0);
	try
	{
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");
		Outputs.SetProperty(""Plan List"","""");

		if(OrderType==""No Provide"" && (PortalOrderId !="""" || PortalOrderId != null || typeof(PortalOrderId)==""undefined""))
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Parent Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Status] = 'InProgress' AND [Line Item.STC Order Identifier] <> 'Contractual' AND [Line Item.STC Order Identifier] <> 'Pre-Booking' AND [Line Item.STC Parent Order Item Id] IS NULL"";
		}
		else if (OrderType==""Provide"" && (PortalOrderId !="""" || PortalOrderId != null || typeof(PortalOrderId)==""undefined""))
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Parent Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Status] = 'Pending' AND [Line Item.STC Order Identifier] = 'Contractual' AND [Line Item.STC Order CRM Id]='""+orderid+""' AND [Line Item.STC Parent Order Item Id] IS NULL"";
		}
		else
		{
			TheApplication().RaiseErrorText(""Improper input Arguments"");
		}

		inp.SetProperty(""SearchSpec"",SearchSpec);
		inp.SetProperty(""OutputIntObjectName"",""STC ECommerce Order IO"");
		ESA.InvokeMethod(""Query"",inp,out);

		PlanList="""";
		var NumItems=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
		var poutput=out.Copy();

		inp.Reset();
		out.Reset();

		inp.SetProperty(""MapName"",""RCOIS Enhanced Parent Path Map v1"");
		inp.SetProperty(""OutputIntObjectName"",""RCOIS Enhancement Line Item IO"");
		inp.SetProperty(""OrderId"",orderid);
		inp.SetProperty(""RootLineItemId"",lineitemid);
		inp.AddChild(OrderIns.Copy());
		inp.SetProperty(""ProdName"","""");
		
		DMExecute.InvokeMethod(""Execute"",inp,out1);

		var tmpChildC=out1.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();	
		var tmpLineItem,previousId='',p=0,r=0,checkflag=false,checkflag1=false;
		var prevpitemid=new Array();
		var previntegid=new Array();
		var tDetails=TheApplication().NewPropertySet();
		var tWrapper=TheApplication().NewPropertySet();
		for(var k=0;k<tmpChildC;k++)
		{
			tmpLineItem=out1.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(k);
			
			for(var i=0;i<NumItems;i++)
			{	
				tmp="""";val="""";
				checkflag=false;
				checkflag1=false;
				tmp=poutput.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Name"");
				pid=poutput.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Id"");
				pitemid=poutput.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id"");
			
				for(var q=0;q<prevpitemid.length;q++)
				{
					if(pitemid==prevpitemid[q])
						checkflag=true;

				}
				for(var r=0;r<previntegid.length;r++)
				{
					if(tmpLineItem.GetProperty(""Integration Id"")==previntegid[r])
						checkflag1=true;

				}
				if(OrderType==""No Provide"")
				{
					if(tmpLineItem.GetProperty(""Product Id"")==pid &&  tmpLineItem.GetProperty(""Action Code"")==""Add"" && !(checkflag) && !(checkflag1))
					{		
						tDetails.SetType(pitemid);
						tDetails.SetProperty(""PName"",tmp);
						tDetails.SetProperty(""PId"",pid);
						tDetails.SetProperty(""ParentId"",tmpLineItem.GetProperty(""Integration Id""));
						previntegid[r]=tmpLineItem.GetProperty(""Integration Id"");
						r++;
						prevpitemid[p]=pitemid;
						p++;
						tWrapper.AddChild(tDetails.Copy());
					}
				}
				else if(OrderType==""Provide"")
				{
					if(tmpLineItem.GetProperty(""Product Id"")==pid && !(checkflag) && !(checkflag1))
					{		
						tDetails.SetType(pitemid);
						tDetails.SetProperty(""PName"",tmp);
						tDetails.SetProperty(""PId"",pid);
						tDetails.SetProperty(""ParentId"",tmpLineItem.GetProperty(""Integration Id""));
						previntegid[r]=tmpLineItem.GetProperty(""Integration Id"");
						r++;
						prevpitemid[p]=pitemid;
						p++;
						tWrapper.AddChild(tDetails.Copy());
					}
				}
				

			}
			
		}
		Outputs.AddChild(tWrapper.Copy());
		
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
	}
}

"
function GetAddedParentPath(Inputs,Outputs)
{
	
	var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");

	var orderid=Inputs.GetProperty(""Order Id"");
	var lineitemid=Inputs.GetProperty(""Order Line Id"");
	var PortalOrderId=Inputs.GetProperty(""Portal Order Id"");
	var OrderType=Inputs.GetProperty(""Order Type"");
	var ESA=TheApplication().GetService(""EAI Siebel Adapter"");
	var SearchSpec=""""
	
	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var PlanList,tmp,pid,pitemid,val,pName="""";

	var Qbs=TheApplication().GetService(""STC Siebel Operation BS"");
	
	var out1=TheApplication().NewPropertySet();
	var OrderIns=TheApplication().NewPropertySet();
	OrderIns=Inputs.GetChild(0);
	try
	{
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");
		Outputs.SetProperty(""Plan List"","""");

		if(OrderType==""No Provide"" && (PortalOrderId !="""" || PortalOrderId != null || typeof(PortalOrderId)==""undefined""))
		{
			//SearchSpec=""[Header.STC Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Parent Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Status] = 'InProgress' AND [Line Item.STC Order Identifier] <> 'Contractual' AND [Line Item.STC Order Identifier] <> 'Pre-Booking' AND [Line Item.STC Parent Order Item Id] IS NULL"";
			SearchSpec=""[Header.STC Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Parent Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Order CRM Id]='""+orderid+""' AND [Line Item.STC Status] = 'InProgress' AND [Line Item.STC Order Identifier] <> 'Contractual' AND [Line Item.STC Order Identifier] <> 'Pre-Booking' AND [Line Item.STC Parent Order Item Id] IS NULL"";

		}
		else if (OrderType==""Provide"" && (PortalOrderId !="""" || PortalOrderId != null || typeof(PortalOrderId)==""undefined""))
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Parent Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Status] = 'Pending' AND [Line Item.STC Order Identifier] = 'Contractual' AND [Line Item.STC Order CRM Id]='""+orderid+""' AND [Line Item.STC Parent Order Item Id] IS NULL"";
		}
		else
		{
			TheApplication().RaiseErrorText(""Improper input Arguments"");
		}

		inp.SetProperty(""SearchSpec"",SearchSpec);
		inp.SetProperty(""OutputIntObjectName"",""STC ECommerce Order IO"");
		ESA.InvokeMethod(""Query"",inp,out);

		PlanList="""";
		var NumItems=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
		var poutput=out.Copy();

		inp.Reset();
		out.Reset();

		inp.SetProperty(""MapName"",""RCOIS Enhanced Parent Path Map v1"");
		inp.SetProperty(""OutputIntObjectName"",""RCOIS Enhancement Line Item IO"");
		inp.SetProperty(""OrderId"",orderid);
		inp.SetProperty(""RootLineItemId"",lineitemid);
		inp.AddChild(OrderIns.Copy());
		inp.SetProperty(""ProdName"","""");
		
		DMExecute.InvokeMethod(""Execute"",inp,out1);

		var tmpChildC=out1.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();	
		var tmpLineItem,previousId='',p=0,r=0,checkflag=false,checkflag1=false;
		var prevpitemid=new Array();
		var previntegid=new Array();
		var tDetails=TheApplication().NewPropertySet();
		var tWrapper=TheApplication().NewPropertySet();
		for(var k=0;k<tmpChildC;k++)
		{
			tmpLineItem=out1.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(k);
			
			for(var i=0;i<NumItems;i++)
			{	
				tmp="""";val="""";
				checkflag=false;
				checkflag1=false;
				tmp=poutput.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Name"");
				pid=poutput.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Id"");
				pitemid=poutput.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id"");
			
				for(var q=0;q<prevpitemid.length;q++)
				{
					if(pitemid==prevpitemid[q])
						checkflag=true;

				}
				for(var r=0;r<previntegid.length;r++)
				{
					if(tmpLineItem.GetProperty(""Integration Id"")==previntegid[r])
						checkflag1=true;

				}
				if(OrderType==""No Provide"")
				{
					if(tmpLineItem.GetProperty(""Product Id"")==pid &&  tmpLineItem.GetProperty(""Action Code"")==""Add"" && !(checkflag) && !(checkflag1))
					{		
						tDetails.SetType(pitemid);
						tDetails.SetProperty(""PName"",tmp);
						tDetails.SetProperty(""PId"",pid);
						tDetails.SetProperty(""ParentId"",tmpLineItem.GetProperty(""Integration Id""));
						previntegid[r]=tmpLineItem.GetProperty(""Integration Id"");
						r++;
						prevpitemid[p]=pitemid;
						p++;
						tWrapper.AddChild(tDetails.Copy());
					}
				}
				else if(OrderType==""Provide"")
				{
					if(tmpLineItem.GetProperty(""Product Id"")==pid && !(checkflag) && !(checkflag1))
					{		
						tDetails.SetType(pitemid);
						tDetails.SetProperty(""PName"",tmp);
						tDetails.SetProperty(""PId"",pid);
						tDetails.SetProperty(""ParentId"",tmpLineItem.GetProperty(""Integration Id""));
						previntegid[r]=tmpLineItem.GetProperty(""Integration Id"");
						r++;
						prevpitemid[p]=pitemid;
						p++;
						tWrapper.AddChild(tDetails.Copy());
					}
				}
				

			}
			
		}
		Outputs.AddChild(tWrapper.Copy());
		
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
	}
}

"
function GetPlanList(Inputs,Outputs)
{
	var PortalOrderId=Inputs.GetProperty(""Portal Order Id"");
	var OrderType=Inputs.GetProperty(""OrderType"");
	var ESA=TheApplication().GetService(""EAI Siebel Adapter"");
	var SearchSpec="""";//=Inputs.GetProperty(""SearchSpec"");
	var ordid=Inputs.GetProperty(""Header"");
	
	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var PlanList,tmp,pcat,ppart,val;

	var Qbs=TheApplication().GetService(""STC Siebel Operation BS"");


	try
	{
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");
		Outputs.SetProperty(""Plan List"","""");

		if(OrderType==""No Provide"" && (PortalOrderId !="""" || PortalOrderId != null || typeof(PortalOrderId)==""undefined""))
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Parent Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Status] = 'InProgress' AND [Line Item.STC Order Identifier] <> 'Contractual' AND [Line Item.STC Order Identifier] <> 'Pre-Booking' AND [Line Item.STC Parent Order Item Id] IS NULL"";
		}
		else if (OrderType==""Provide"" && (PortalOrderId !="""" || PortalOrderId != null || typeof(PortalOrderId)==""undefined""))
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Parent Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Status] = 'Pending' AND [Line Item.STC Order Identifier] = 'Contractual' AND [Line Item.STC Order CRM Id]='""+ordid+""' AND [Line Item.STC Parent Order Item Id] IS NULL"";
		}
		else
		{
			TheApplication().RaiseErrorText(""Improper input Arguments"");
		}

		inp.SetProperty(""SearchSpec"",SearchSpec);
		inp.SetProperty(""OutputIntObjectName"",""STC ECommerce Order IO"");
		ESA.InvokeMethod(""Query"",inp,out);

		PlanList="""";
		var NumItems=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
		for(var i=0;i<NumItems;i++)
		{	
			tmp="""";val="""";
			tmp=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Name"");
			pcat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Item Category"");
			ppart=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Part Code"");
			//var test=pcat.search(""Device"");
			
			/*//[NAVIN:27Feb2020:Commented Default Device Insurance Product Addition for Eshop Devices]
			if((pcat.search(""Device""))>=0)
			{
				val=MatchDeviceAndGetIns(Qbs,ppart);
				if(typeof(val)!=""undefined"")
				{
					tmp=tmp+"",""+val;
				}
			}*/
			if(i==0)
				PlanList=tmp;
			else
				PlanList=PlanList+"",""+tmp;

		}
		Outputs.SetProperty(""Plan List"",PlanList);
		
		//SortEcomLineItem(Inputs,Outputs);
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
		Outputs.SetProperty(""Plan List"","""");
	}
	finally
	{

		
	}
}
function GetPlanList(Inputs,Outputs)
{
	var PortalOrderId=Inputs.GetProperty(""Portal Order Id"");
	var OrderType=Inputs.GetProperty(""OrderType"");
	var ESA=TheApplication().GetService(""EAI Siebel Adapter"");
	var SearchSpec="""";//=Inputs.GetProperty(""SearchSpec"");
	var ordid=Inputs.GetProperty(""Header"");
	
	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var PlanList,tmp,pcat,ppart,val;
	var prodCat="""", prodCatList="""", prodItemCatList="""";

	var Qbs=TheApplication().GetService(""STC Siebel Operation BS"");


	try
	{
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");
		Outputs.SetProperty(""Plan List"","""");

		if(OrderType==""No Provide"" && (PortalOrderId !="""" || PortalOrderId != null || typeof(PortalOrderId)==""undefined""))
		{
			//SearchSpec=""[Header.STC Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Parent Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Status] = 'InProgress' AND [Line Item.STC Order Identifier] <> 'Contractual' AND [Line Item.STC Order Identifier] <> 'Pre-Booking' AND [Line Item.STC Parent Order Item Id] IS NULL"";
			SearchSpec=""[Header.STC Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Parent Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Order CRM Id]='""+ordid+""' AND [Line Item.STC Status] = 'InProgress' AND [Line Item.STC Order Identifier] <> 'Contractual' AND [Line Item.STC Order Identifier] <> 'Pre-Booking' AND [Line Item.STC Parent Order Item Id] IS NULL"";
		}
		else if (OrderType==""Provide"" && (PortalOrderId !="""" || PortalOrderId != null || typeof(PortalOrderId)==""undefined""))
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Parent Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Status] = 'Pending' AND [Line Item.STC Order Identifier] = 'Contractual' AND [Line Item.STC Order CRM Id]='""+ordid+""' AND [Line Item.STC Parent Order Item Id] IS NULL"";
		}
		else
		{
			TheApplication().RaiseErrorText(""Improper input Arguments"");
		}

		inp.SetProperty(""SearchSpec"",SearchSpec);
		inp.SetProperty(""OutputIntObjectName"",""STC ECommerce Order IO"");
		ESA.InvokeMethod(""Query"",inp,out);

		PlanList="""";
		var NumItems=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
		for(var i=0;i<NumItems;i++)
		{	
			tmp="""";val="""";
			tmp=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Name"");
			prodCat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Category"");
			pcat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Item Category"");
			ppart=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Part Code"");
			//var test=pcat.search(""Device"");
			
			/*//[NAVIN:27Feb2020:Commented Default Device Insurance Product Addition for Eshop Devices]
			if((pcat.search(""Device""))>=0)
			{
				val=MatchDeviceAndGetIns(Qbs,ppart);
				if(typeof(val)!=""undefined"")
				{
					tmp=tmp+"",""+val;
				}
			}*/
			if(i==0)
				prodCatList = prodCat;
			else
			{
				if (prodCat == ""Plan"")
					prodCatList = prodCat+"",""+prodCatList;
				else
					prodCatList = prodCatList+"",""+prodCat;
			}
			
			if(i==0)
				prodItemCatList = pcat;
			else
			{
				if (prodCat == ""Plan"")
					prodItemCatList = pcat+"",""+prodItemCatList;
				else
					prodItemCatList = prodItemCatList+"",""+pcat;
			}
			
			if(i==0)
				PlanList=tmp;
			else
			{
				if (prodCat == ""Plan"")
					PlanList=tmp+"",""+PlanList;
				else
					PlanList=PlanList+"",""+tmp;
			}
				

		}
		Outputs.SetProperty(""Plan List"", PlanList);
		Outputs.SetProperty(""ProdCatList"", prodCatList);
		Outputs.SetProperty(""ProdItemCatList"", prodItemCatList);
		//SortEcomLineItem(Inputs,Outputs);
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
		Outputs.SetProperty(""Plan List"","""");
		Outputs.SetProperty(""ProdCatList"", """");
		Outputs.SetProperty(""ProdItemCatList"", """");
	}
	finally
	{

		
	}
}
function GetPlanList(Inputs,Outputs)
{
	var PortalOrderId=Inputs.GetProperty(""Portal Order Id"");
	var OrderType=Inputs.GetProperty(""OrderType"");
	var ESA=TheApplication().GetService(""EAI Siebel Adapter"");
	var SearchSpec="""";//=Inputs.GetProperty(""SearchSpec"");
	var ordid=Inputs.GetProperty(""Header"");
	
	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var PlanList,tmp,pcat,ppart,val;

	var Qbs=TheApplication().GetService(""STC Siebel Operation BS"");


	try
	{
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");
		Outputs.SetProperty(""Plan List"","""");

		if(OrderType==""No Provide"" && (PortalOrderId !="""" || PortalOrderId != null || typeof(PortalOrderId)==""undefined""))
		{
			//SearchSpec=""[Header.STC Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Parent Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Status] = 'InProgress' AND [Line Item.STC Order Identifier] <> 'Contractual' AND [Line Item.STC Order Identifier] <> 'Pre-Booking' AND [Line Item.STC Parent Order Item Id] IS NULL"";
			SearchSpec=""[Header.STC Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Parent Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Order CRM Id]='""+ordid+""' AND [Line Item.STC Status] = 'InProgress' AND [Line Item.STC Order Identifier] <> 'Contractual' AND [Line Item.STC Order Identifier] <> 'Pre-Booking' AND [Line Item.STC Parent Order Item Id] IS NULL"";
		}
		else if (OrderType==""Provide"" && (PortalOrderId !="""" || PortalOrderId != null || typeof(PortalOrderId)==""undefined""))
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Parent Portal Order Id] = '""+PortalOrderId+""' AND [Line Item.STC Status] = 'Pending' AND [Line Item.STC Order Identifier] = 'Contractual' AND [Line Item.STC Order CRM Id]='""+ordid+""' AND [Line Item.STC Parent Order Item Id] IS NULL"";
		}
		else
		{
			TheApplication().RaiseErrorText(""Improper input Arguments"");
		}

		inp.SetProperty(""SearchSpec"",SearchSpec);
		inp.SetProperty(""OutputIntObjectName"",""STC ECommerce Order IO"");
		ESA.InvokeMethod(""Query"",inp,out);

		PlanList="""";
		var NumItems=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
		for(var i=0;i<NumItems;i++)
		{	
			tmp="""";val="""";
			tmp=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Name"");
			pcat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Item Category"");
			ppart=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Part Code"");
			//var test=pcat.search(""Device"");
			
			/*//[NAVIN:27Feb2020:Commented Default Device Insurance Product Addition for Eshop Devices]
			if((pcat.search(""Device""))>=0)
			{
				val=MatchDeviceAndGetIns(Qbs,ppart);
				if(typeof(val)!=""undefined"")
				{
					tmp=tmp+"",""+val;
				}
			}*/
			if(i==0)
				PlanList=tmp;
			else
				PlanList=PlanList+"",""+tmp;

		}
		Outputs.SetProperty(""Plan List"",PlanList);
		
		//SortEcomLineItem(Inputs,Outputs);
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
		Outputs.SetProperty(""Plan List"","""");
	}
	finally
	{

		
	}
}
function GetRootPath (Inputs,Outputs)
{
	var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");
	var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");
	var Qbs=TheApplication().GetService(""STC Siebel Operation BS"");

	var orderid=Inputs.GetProperty(""OrderId"");
	var lineitemid=Inputs.GetProperty(""LineItemId"");
	var addprod=Inputs.GetProperty(""AddProdId"");
	var Io=Inputs.GetProperty(""Io"");
	var pName='';
	var doDiscontinue=false;

	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var out1=TheApplication().NewPropertySet();
	var OrderIns=TheApplication().NewPropertySet();
	OrderIns=Inputs.GetChild(0);

	
	var SearchSpec=""[RCOIS Enhanced Chid Prd Structure BC.Sub Obj Id]='""+addprod+""' AND [RCOIS Enhanced Chid Prd Structure BC.Last Vers]='999999999' AND [RCOIS Enhanced Parent Prd Structure BC.Par Rel Id] IS NULL AND [RCOIS Enhanced Parent Prd Structure BC.Last Vers]='999999999'""
	
	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

		inp.SetProperty(""SearchSpec"",SearchSpec);
		inp.SetProperty(""OutputIntObjectName"",""RCOIS Enhanced Admin ISS Product Deftn Custom"");
		//To Get the relation defined in product structure
		ESiebelAdapter.InvokeMethod(""Query"",inp,out);

		var NumChild=out.GetProperty(""NumOutputObjects"");
		
		inp.Reset();
		
		inp.SetProperty(""MapName"",""RCOIS Enhanced Parent Path Map v1"");
		inp.SetProperty(""OutputIntObjectName"",""RCOIS Enhancement Line Item IO"");
		inp.SetProperty(""OrderId"",orderid);
		inp.SetProperty(""RootLineItemId"",lineitemid);
		inp.AddChild(OrderIns.Copy());
		inp.SetProperty(""ProdName"","""");
		
		DMExecute.InvokeMethod(""Execute"",inp,out1);

		for (var i=0;i<NumChild;i++)
		{
			if(!doDiscontinue)
			{
				if(out.GetChild(0).GetChild(0).GetChild(i).GetChild(0).GetChildCount()>0)
				{
					pName=out.GetChild(0).GetChild(0).GetChild(i).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetProperty(""Name"");
				}
				var tmpChildC=out1.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
				
				var tmpLineItem;
				for(var k=0;k<tmpChildC;k++)
				{
					var tmpLineItem=out1.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(k);
				//To check whether the product has parent relation id defined 
					if((out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Par Rel Id"") != null || out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Par Rel Id"") != '')&& pName.length>0)
					{ 
						if(tmpLineItem.GetProperty(""Name"")==pName)
						{
							
							Outputs.SetProperty(""ParentPath"",tmpLineItem.GetProperty(""Integration Id""));
							Outputs.SetProperty(""RootParentPath"",tmpLineItem.GetProperty(""Root Integration Id""));
							Outputs.SetProperty(""ParentParentId"",tmpLineItem.GetProperty(""Parent Id""));
							Outputs.SetProperty(""ParentProdName"",tmpLineItem.GetProperty(""Name""));
							Outputs.SetProperty(""ActionCode"",tmpLineItem.GetProperty(""Action Code""));
							Outputs.SetProperty(""Orig Id"",out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Orig Id""));
							Outputs.SetProperty(""Par Rel Id"",out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Par Rel Id""));
							doDiscontinue=true;	
							Outputs.SetProperty(""CheckFlag"",doDiscontinue);
										
							break;
						}
						
					}
					else
					{
						var inp2=TheApplication().NewPropertySet();
						var out2=TheApplication().NewPropertySet();

						inp2.SetProperty(""BusinessObject"",""Internal Product"");
						inp2.SetProperty(""BusinessComponent"",""Internal Product - ISS Admin"");
						inp2.SetProperty(""SearchExpression"",""[VOD Row Id]='""+out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Vod Id"")+""'"");
						inp2.SetProperty(""Field0"",""Name"");
						Qbs.InvokeMethod(""SiebelQuery"",inp2,out2);
						pName=out2.GetProperty(""Output0"");

						if(tmpLineItem.GetProperty(""Name"")==pName)
						{
							
							Outputs.SetProperty(""ParentPath"",tmpLineItem.GetProperty(""Integration Id""));
							Outputs.SetProperty(""RootParentPath"",tmpLineItem.GetProperty(""Root Integration Id""));
							Outputs.SetProperty(""ParentParentId"",tmpLineItem.GetProperty(""Parent Id""));
							Outputs.SetProperty(""ParentProdName"",tmpLineItem.GetProperty(""Name""));
							Outputs.SetProperty(""ActionCode"",tmpLineItem.GetProperty(""Action Code""));
							Outputs.SetProperty(""Orig Id"",out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Orig Id""));
							Outputs.SetProperty(""Par Rel Id"",out.GetChild(0).GetChild(0).GetChild(i).GetProperty(""Par Rel Id""));
							doDiscontinue=true;	
							Outputs.SetProperty(""CheckFlag"",doDiscontinue);
										
							break;
						}
						inp2=null;
						out2=null;

					}
				}

			}
			else
			{
				break;
			}
		}
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
		pName=null;
	}

}
function MatchDeviceAndGetIns(Qbs,Devicepart)
{

	var inp1=TheApplication().NewPropertySet();
	var out1=TheApplication().NewPropertySet();

	try
	{
		var val=TheApplication().InvokeMethod(""LookupValue"",""STC_INSURANCE_DEVICES"",Devicepart);
		//var testv=val.search(""^DEVICE"");
		if((val.search(""^DEVICE""))>=0)
		{
			var DevInsPart=TheApplication().InvokeMethod(""LookupValue"",""STC_ECOM_DEVICE_INSURANCE_PART"",""STC_ECOM_DEVICE_INSURANCE_PART"");
			inp1.SetProperty(""BusinessComponent"",""Internal Product - ISS Admin"");
			inp1.SetProperty(""SearchExpression"",""[Part #]='""+DevInsPart+""'"");
			inp1.SetProperty(""BusinessObject"",""Admin ISS Product Definition"");
			inp1.SetProperty(""Field1"",""Name"");

			Qbs.InvokeMethod(""SiebelQuery"",inp1,out1);

			var pIns=out1.GetProperty(""Output1"");

			inp1.Reset();
			out1.Reset();

		}
	}
	
	catch(e)
	{
	}
	finally
	{
	}

	return pIns;
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	try
	{
		switch(MethodName)
		{
			case ""AddProduct"":
				Outputs.SetProperty(""Error Code"",""0000"");
				Outputs.SetProperty(""Error Message"",""SUCCESS"");
				AddProduct(Inputs , Outputs);
				var eC=Outputs.GetProperty(""Error Code"");
				var eM=Outputs.GetProperty(""Error Message"");
				if(eC.length > 0 && eM.length > 0)
				{
					TheApplication().RaiseErrorText(""Add Product Function Execption"");
				}
				Outputs.SetProperty(""Error Code"",""0000"");
				Outputs.SetProperty(""Error Message"",""SUCCESS"");
				
				
				return(CancelOperation);
			default:
				return(ContinueOperation);
		}

	}
	catch(e)
	{
		Outputs.SetProperty(""Error Code"",e.errCode);
		Outputs.SetProperty(""Error Message"",e.errText);
	}
	finally
	{
		//Inputs.Reset();
		//Outputs.Reset();
	}
	return (ContinueOperation);
}
function UnresolveLinks(Inputs,Outputs)
{
	var i=0;
	var tmp=0;
	var name;
	var cnt;
	var UnrsvLinks=TheApplication().NewPropertySet();
	var Out=TheApplication().NewPropertySet();
	Out=Outputs;

	var inp2=TheApplication().NewPropertySet();
	var out2=TheApplication().NewPropertySet();

	var result=TheApplication().NewPropertySet();

	var Qbs=TheApplication().GetService(""STC Siebel Operation BS"");

	var bo="""",bc="""",sspec="""",ordid="""",oliid="""",field="""",idval="""";

	ordid=Inputs.GetProperty(""ObjId"");
	oliid=Inputs.GetProperty(""RootId"")

	try
	{
//		Setting the Error Code and Message for parent function
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"","""");

		for(i=0;i<Outputs.GetChildCount();i++)
		{
			if (Outputs.GetChild(i).GetType()==""UnresolvedLinks"")
			{
				UnrsvLinks=Outputs.GetChild(i);
			}
			if (Outputs.GetChild(i).GetType()==""Links"")
			{
				result.AddChild(Outputs.GetChild(i).Copy());
			}
		}
		cnt=UnrsvLinks.GetChildCount();
		//Resolving the unresolved links for createsession
		for(i=0;i<UnrsvLinks.GetChildCount();i++)
		{
			//inp2.SetProperty(""BusinessComponent"",UnrsvLinks.GetChild(i).GetProperty(""BusComp""));
			bc=UnrsvLinks.GetChild(i).GetProperty(""BusComp"");
			bo=UnrsvLinks.GetChild(i).GetProperty(""BusObj"");
			sspec=UnrsvLinks.GetChild(i).GetProperty(""SEARCH_SPEC"");
			field=UnrsvLinks.GetChild(i).GetProperty(""Field"");
			idval=UnrsvLinks.GetChild(i).GetProperty(""ID"");

			if(bc==""Order Entry - Line Items"")
			{				
				if(sspec.length > 0)
					inp2.SetProperty(""SearchExpression"",""[Id]='""+oliid+""' ""+""AND ""+sspec);
				else
					inp2.SetProperty(""SearchExpression"",""[Id]='""+oliid+""'"");
				inp2.SetProperty(""BusinessObject"",bo);
				inp2.SetProperty(""BusinessComponent"",bc);
			}
			else if (bc==""Order Entry - Orders"")
			{

				if(sspec.length > 0)
					inp2.SetProperty(""SearchExpression"",""[Id]='""+ordid+""' ""+""AND ""+sspec);
				else
					inp2.SetProperty(""SearchExpression"",""[Id]='""+ordid+""'"");
				inp2.SetProperty(""BusinessObject"",bo);
				inp2.SetProperty(""BusinessComponent"",bc);

			}
			else
			{
				if(sspec.length > 0)
					inp2.SetProperty(""SearchExpression"",""[Id]='""+ordid+""' ""+""AND ""+sspec);
				else
					inp2.SetProperty(""SearchExpression"",""[Id]='""+ordid+""'"");
				inp2.SetProperty(""BusinessObject"",bo);
				inp2.SetProperty(""BusinessComponent"",bc);
			}
			inp2.SetProperty(""Field0"",field);
			Qbs.InvokeMethod(""SiebelQuery"",inp2,out2);

			result.GetChild(0).SetProperty(idval,out2.GetProperty(""Output0""));

			inp2.Reset();
			out2.Reset();
		
		}
		

	}
	catch(e)
	{
		Outputs.SetProperty(""Error Message"",e.errText);
		Outputs.SetProperty(""Error Code"",e.errCode);
	}
	finally
	{
	}
	return result;
}

"
"#include ""eaisiebel.js""

/*
 * Configuration information
 *    : Stores the default information
 *    : Get initialized at Start
 */
 
var CONFIGNAME  = new Array;
var CONFIGVALUE = new Array;

var m_sW32StrLib;
var m_sUnixStrLib;
var m_sVendorDll;
var m_sPrimaryId;
var m_sMerchantId;
var m_oICSMethod;
var m_debug;
var m_logFile;
var m_plateform = ""Unix"";
var m_sAmount;
var m_convService;

var err = ""OK"";
var errParamCount = 0;
var errParamArray = new Array ();

var ICS2OfferFields = new Array (
               ""amount"",
               ""merchant_product_sku"",
               ""product_code"",
               ""product_name"",
               ""quantity"",
               ""tax_amount"");
               
var ICS2OBJS = new Array;

ICS2OBJS[""Authorization""] = new Object ();
ICS2OBJS[""Authorization""].OIntObjName = ""CreditCard - Authorization (CyberSource Output)"";
ICS2OBJS[""Authorization""].IIntObjName = ""CreditCard - Authorization (CyberSource Input)"";
ICS2OBJS[""Authorization""].Application = ""ics_auth"";
ICS2OBJS[""Authorization""].PrimaryComp = ""Quote"";
ICS2OBJS[""Authorization""].OutputFields = new Array (
               ""ics_rcode"",
               ""ics_rflag"",
               ""ics_rmsg"",
               ""request_id"",
               ""auth_rcode"",
               ""auth_rflag"",
               ""auth_rmsg"",
               ""auth_auth_code"",
               ""auth_auth_amount"",
               ""auth_auth_time"",
               ""auth_auth_avs"",
               ""auth_auth_response"",
               ""auth_cv_result"");

ICS2OBJS[""AuthCharge""] = new Object ();
ICS2OBJS[""AuthCharge""].OIntObjName = ""CreditCard - AuthCharge (CyberSource Output)"";
ICS2OBJS[""AuthCharge""].IIntObjName = ""CreditCard - Authorization (CyberSource Input)"";
ICS2OBJS[""AuthCharge""].Application = ""ics_auth, ics_bill"";
ICS2OBJS[""AuthCharge""].PrimaryComp = ""Quote"";
ICS2OBJS[""AuthCharge""].OutputFields = new Array (
               ""ics_rcode"",
               ""ics_rflag"",
               ""ics_rmsg"",
               ""request_id"",
               ""auth_rcode"",
               ""auth_rflag"",
               ""auth_rmsg"",
               ""auth_auth_code"",
               ""auth_auth_amount"",
               ""auth_auth_time"",
               ""auth_auth_avs"",
               ""auth_auth_response"",
               ""auth_cv_result"",
               ""bill_rcode"",
               ""bill_rflag"",
               ""bill_rmsg"",
               ""bill_bill_amount"",
               ""bill_bill_request_time"",
               ""bill_trans_ref_no"");

ICS2OBJS[""Charge""] = new Object (); 
ICS2OBJS[""Charge""].OIntObjName = ""CreditCard - Charge (CyberSource Output)"";
ICS2OBJS[""Charge""].IIntObjName = ""CreditCard - Charge (CyberSource Input)"";
ICS2OBJS[""Charge""].Application = ""ics_bill"";
ICS2OBJS[""Charge""].PrimaryComp = ""Order Entry - Orders"";
ICS2OBJS[""Charge""].OutputFields = new Array (
               ""ics_rcode"",
               ""ics_rflag"",
               ""ics_rmsg"",
               ""request_id"",
               ""bill_rcode"",
               ""bill_rflag"",
               ""bill_rmsg"",
               ""bill_bill_amount"",
               ""bill_bill_request_time"",
               ""bill_trans_ref_no"");
   
ICS2OBJS[""Refund""] = new Object ();               
ICS2OBJS[""Refund""].OIntObjName = ""CreditCard - Refund (CyberSource Output)"";
ICS2OBJS[""Refund""].IIntObjName = ""CreditCard - Refund (CyberSource Input)"";
ICS2OBJS[""Refund""].Application = ""ics_credit"";
ICS2OBJS[""Refund""].PrimaryComp = ""Order Entry - Orders"";
ICS2OBJS[""Refund""].OutputFields = new Array (
               ""ics_rcode"",
               ""ics_rflag"",
               ""ics_rmsg"",
               ""request_id"",
               ""credit_rcode"",
               ""credit_rflag"",
               ""credit_rmsg"",
               ""credit_credit_amount"",
               ""credit_credit_request_time"",
               ""credit_auth_response"",
               ""credit_trans_ref_no"");"
function CallCyberSource (inputXML, outputXML)
{
   var oXMLService = null;    // CC XML Converter service
   var oIMsg;                 // Input Siebel Message
   var oOMsg;                 // Output Siebel Message
   var oIIntObj;
   var oOIntObj;
   
   var oRequest     = null;    // oRequest ics_msg
   var oResult      = null;    // Result ics_msg
   
   var pChar;
   var icsRcode;
   var icsRflag;
   var icsRmsg;
   var requestId;
   var responseCode;
   var count;
   var errString;
   var xmlString;
   
   
   LogMessage (""\n#TRANSACTION\n------------"");
   
   // Get the XML Converter Service
   if ((oXMLService = TheApplication().GetService (""CC XML Converter"")) == null)
   {
      err = ""ERR_LOADING_BUS_SERV"";
      errParamArray[errParamCount++] = ""CC XML Converter"";
      return (err);
   }
   
   // Create new property sets
   if ((oIIntObj = TheApplication().NewPropertySet()) == null ||
       (oOIntObj = TheApplication().NewPropertySet()) == null)
   {
      err = ""ERR_CREATING_PROP_SET"";
      return (err);
   }
   
   xmlString = inputXML.GetValue();
   
   // Convert XML to integration object
   oXMLService.InvokeMethod(""XMLToPropSet"", inputXML, oIIntObj);
   
   LogMessage(""If the log ended here, it means the environment is not setup correctly."");
   
   // Create request ics_msg
   oRequest = SendCmd (""ics_init"", 0, null, null);

   if (oRequest == null)
   {
      LogMessage(""'ics_init' function returns null"");
      responseCode = 19;
   }
   else 
   {
      // Fill the request with input integration object
      FillRequestObj(oIIntObj, oRequest);

      for (count = 0; count < CONFIGNAME.length; count++)
      {
         if (SendCmd (""ics_fgetbyname"", oRequest, CONFIGNAME[count]) == """")
         {
            SendCmd (""ics_fadd"", oRequest, CONFIGNAME[count], CONFIGVALUE[count]);
            if (CONFIGNAME[count] == ""merchant_id"")
               m_sMerchantId = CONFIGVALUE[count];
         }
      }
      
      // Send request to CyberSource
      oResult = SendCmd (""ics_send"", oRequest, null, null);
      
      if (oResult == null)
      {
         SendCmd (""ics_destroy"", oRequest, null, null);
         responseCode = 19;
      }
      else
      {
         icsRcode  = SendCmd (""ics_fgetbyname"", oResult, ""ics_rcode"", null);
         icsRflag  = SendCmd (""ics_fgetbyname"", oResult, ""ics_rflag"", null);
         icsRmsg   = SendCmd (""ics_fgetbyname"", oResult, ""ics_rmsg"", null);
         
         FillOutIntObj(oResult, oOIntObj);
         responseCode = SetResponseCode(icsRflag);
      }
   }
   
   oOIntObj.SetProperty (""SiebelResponseCode"", responseCode);
   oOIntObj.SetProperty (""VendorErrorCode"", icsRflag);
   oOIntObj.SetProperty (""VendorErrorMessage"", icsRmsg);
   
   // Convert integration object to XML
   oXMLService.InvokeMethod(""PropSetToXML"", oOIntObj, outputXML);
      
   xmlString = outputXML.GetValue();
  
   if (oRequest)
   {
      SendCmd (""ics_destroy"", oRequest, null, null);
   }
   if (oResult)
   {
      SendCmd (""ics_destroy"", oResult, null, null);
   }      
}
function FillOutIntObj(oResult, oIntObj)
{
   var oObjChild;
   var oIntComp;
   var count;
   var value;
   var icsRflag;
   var siebelRespCode;

   LogMessage (""\nResults :"");
   
   oIntObj.SetType (""SiebelMessage"");
   oIntObj.SetProperty (""MessageType"", ""Integration Object"");
   oIntObj.SetProperty (""IntObjectFormat"", ""XML Hierarchical"");
   oIntObj.SetProperty (""IntObjectName"", m_oICSMethod.OIntObjName);
    
   // Create new property sets
   if ((oObjChild = TheApplication().NewPropertySet()) == null ||
       (oIntComp = TheApplication().NewPropertySet()) == null)
   {
      err = ""ERR_CREATING_PROP_SET"";
      return (err);
   }
   
   oObjChild.SetType (""ListOfRecords"");
   oIntComp.SetType (""Record"");
   oIntComp.SetProperty (""row_id"", m_sPrimaryId);
   oIntComp.SetProperty (""merchant_id"", m_sMerchantId);
   oIntComp.SetProperty (""requested_amount"", m_sAmount);
   
   for (count = 0; count < m_oICSMethod.OutputFields.length; count++)
   {
   
      value  = SendCmd (""ics_fgetbyname"", oResult, 
                        m_oICSMethod.OutputFields[count], null);
      if (value != """")
      {
         oIntComp.SetProperty (m_oICSMethod.OutputFields[count], value);
         LogMessage (""\t"" + m_oICSMethod.OutputFields[count] + "" = "" + value);
      }
   }

   icsRflag = SendCmd (""ics_fgetbyname"", oResult, ""ics_rflag"", null);
   siebelRespCode = SetResponseCode (icsRflag);
   oIntComp.SetProperty (""siebel_response_code"", siebelRespCode);

   oObjChild.AddChild (oIntComp);
   oIntObj.AddChild (oObjChild);
   			
}
function FillRequestObj(oPropSet, oRequest)
{
   	var propName   = """";
   	var propVal    = """";
   	var oIntComp   = null;
   	var oObjChild  = null;
   	var offer      = new Array;
   	var offerCount = 0;
   	var offerStr;

    if ((oObjChild = oPropSet.GetChild(0)) == null ||
        (oIntComp = oObjChild.GetChild(0)) == null)
    {
      err = ""ERR_XML_FORMAT"";
      return (err);
    }

    propName = oIntComp.GetFirstProperty();
    while (propName != """")
    {
       propVal = oIntComp.GetProperty(propName);
       
       // Check to see if it's an offer field
       var offerField = 0;
       for (var count = 0; count < ICS2OfferFields.length; count++)
       {
          if (propName == ICS2OfferFields[count])
          {
             if (propName == ""amount"")
             {
                m_sAmount = propVal;
             }
             // offer field
             offerField = 1;
             offer[offerCount] = propName + "":"" + propVal;
             offerCount++;
             break;
          }
       }
       
       if (offerField == 0)
       {
          // Check to see if it's the row id.
          if (propName == ""merchant_ref_number"")
          {
             m_sPrimaryId = propVal;
             SendCmd (""ics_fadd"", oRequest, propName, propVal);
          }
          else if ((propName == ""merchant_id"") && (propVal != """"))
          {
             m_sMerchantId = propVal;
             SendCmd (""ics_fadd"", oRequest, propName, propVal);
          }
          else if (propName == ""customer_name"")
          {
             var space = propVal.lastIndexOf("" "");
             var last = propVal.length;
             SendCmd (""ics_fadd"", oRequest, ""customer_firstname"", 
                      propVal.substring(0, space));
             SendCmd (""ics_fadd"", oRequest, ""customer_lastname"", 
                      propVal.substring(space+1));
          }
          else if (propVal != """")
          {
             SendCmd (""ics_fadd"", oRequest, propName, propVal);
          }
          LogMessage (""\t"" + propName + "" = "" + propVal);
       }
       
       propName = oIntComp.GetNextProperty();
    }

    // Construct offer Fields
    offerStr = offer.join(""^"");
    SendCmd (""ics_fadd"", oRequest, ""offer0"", offerStr);
    LogMessage (""\t"" + ""offer0 = "" + offerStr);
    
    // Set the application Name
    SendCmd (""ics_fadd"", oRequest, ""ics_applications"", m_oICSMethod.Application);
    LogMessage (""\t"" + ""ics_applications = "" + m_oICSMethod.Application);

}
function Initialize (inputXML, outputXML)
{
   var oIPropSet;
   var oOPropSet;
   var oXMLService;
   var name;
   var value;
   var xmlString;
   var count;
   var errString;

   if (GetProperty (""DEBUG"") == ""1"")
      m_debug = 1;
   else
      m_debug = 0;
   
   m_sW32StrLib = GetProperty (""W32 String Library"");
   m_sUnixStrLib = GetProperty (""Unix String Library"");
   m_logFile    = GetProperty (""Log File Name""); 
        
   LogMessage (""***Initialize***"");

   // Get the ""CC XML Converter"" Service
   if ((oXMLService = TheApplication().GetService (""CC XML Converter"")) == null)
   {
      err = ""ERR_LOADING_BUS_SERV"";
      errParamArray[errParamCount++] = ""CC XML Converter"";
      return (err);
   }

   // Get the ""Credit Card Transaction Service"" Service   
   if ((m_convService = TheApplication().GetService (""Credit Card Transaction Service"")) == null)
   {
      err = ""ERR_LOADING_BUS_SERV"";
      errParamArray[errParamCount++] = ""Credit Card Transaction Service"";
      return (err);
   }
   
   // Initialize the property sets
   if ((oIPropSet = TheApplication().NewPropertySet()) == null ||
       (oOPropSet = TheApplication().NewPropertySet()) == null)
   {
      err = ""ERR_CREATING_PROP_SET"";
      return (err);
   }
   
   xmlString = inputXML.GetValue();
   
   // Conver XML string to property set
   oXMLService.InvokeMethod(""XMLToPropSet"", inputXML, oIPropSet);
   
   name = oIPropSet.GetFirstProperty();
   for (count = 0; name != """";)
   {
      value = oIPropSet.GetProperty(name);
      
      if (name == ""Plateform"")
      {
         if (value != """")
         {
            m_plateform = value;
         }
      }
      else if (name != ""VendorDll"")
      {
         CONFIGNAME[count]  = name;
         CONFIGVALUE[count] = value;
         count++;
      }
      else 
      {
         m_sVendorDll = value;
      }
      
      name = oIPropSet.GetNextProperty();
   }

   LogMessage (""Runing on "" + m_plateform + "" Plateform"");
   
   oOPropSet.SetValue (""OK"");
   oOPropSet.SetProperty (""SiebelResponseCode"", ""1"");
   
   oXMLService.InvokeMethod(""PropSetToXML"", oOPropSet, outputXML);
   
   xmlString = outputXML.GetValue();
}
function LogMessage (Msg)
{
   if (m_debug)
   {
      var fp = Clib.fopen (m_logFile, ""at+"");
      if (fp != null)
      {
         Clib.fputs (Msg, fp);
         Clib.fputs (""\n"", fp);
         Clib.fclose (fp);
      }
   }  
}
function SendCmd (method, param0, param1, param2)
{
   var pChar;
   var bValue = new Buffer();
   var sValue = ""                                                                                                                                                                                            "";
   var oRetVal;
   var sChar;
   var length = 0;
   
   if (param1 == null)
   {
      if (m_plateform == ""Unix"")
         oRetVal = SElib.dynamicLink (m_sVendorDll, method, param0);
      else 
         oRetVal = SElib.dynamicLink (m_sVendorDll, method, CDECL, param0);
   }
   else if (param2 == null)
   {
      if (method == ""ics_fget"" || method == ""ics_fgetbyname"")
      {
          if (m_plateform == ""Unix"")
             pChar = SElib.dynamicLink (m_sVendorDll, method, param0, param1);
          else 
             pChar = SElib.dynamicLink (m_sVendorDll, method, CDECL, param0, param1);
          if (pChar != 0)
          {
             // Copying the string pointed by pChar to bValue buffer
             sChar = SElib.peek (pChar);
  	         while (sChar != 0 && length <= 255)
  	         {
  	            length++;
                    bValue.putValue(sChar,1);
  	            sChar = SElib.peek (pChar+length);
  	         }
                 bValue.cursor = 0;
	         oRetVal = bValue.getString();
          }
          else
             oRetVal = """";
      }          
      else
          oRetVal = """";
   }
   else  // method == ""ics_fadd""
   {
      var param2UTF8;
      var inputPropSet;
      var outputPropSet;
    
      // Create new property sets
      if ((inputPropSet = TheApplication().NewPropertySet()) == null ||
          (outputPropSet = TheApplication().NewPropertySet()) == null)
      {
         err = ""ERR_CREATING_PROP_SET"";
      }
      
      inputPropSet.SetProperty(""UTF16"", param2);
      m_convService.InvokeMethod(""ConvertUTF16ToUTF8"", inputPropSet, outputPropSet);
      param2UTF8 = new Buffer(outputPropSet.GetProperty(""UTF8""));
      
      if (m_plateform == ""Unix"")
         oRetVal = SElib.dynamicLink (m_sVendorDll, method, param0, param1, param2UTF8.toString());
      else
         oRetVal = SElib.dynamicLink (m_sVendorDll, method, CDECL, param0, param1, param2UTF8.toString());
   }
   
   return (oRetVal);

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   var count;
   
   err = ""OK"";
   errParamCount = 0;
   errParamArray.length = 0;
   
   if (MethodName == ""Start"")
   {
      Initialize (Inputs, Outputs);
   }
   else if (MethodName == ""Authorization"" ||
            MethodName == ""AuthCharge""    ||
            MethodName == ""Charge""        ||
            MethodName == ""Refund"")
   {
      m_oICSMethod = ICS2OBJS[MethodName];
      CallCyberSource (Inputs, Outputs);
   }
   else
   {
      ThrowError(""The MethodName, "" + MethodName +
                 "", is not supported by CyberSource Adapter service."");
   }
   
   Outputs.SetProperty (""SiebelErrorSymbol"", err);
   for (count = 0; count < errParamCount; count++)
   {
      var key;
      Clib.sprintf (key, ""SiebelErrorParam%d"", count);
      Outputs.SetProperty (key, errParamArray[count]);
   }
   
   return (CancelOperation);
}
function SetResponseCode (rFlag)
{  
   var propSet;
   var errFlag;
   
   // Initialize the property sets
   if ((propSet = TheApplication().NewPropertySet()) == null)
   {
      err = ""ERR_CREATING_PROP_SET"";
   }
   propSet.SetValue (rFlag);
   errFlag = propSet.GetValue ();
   
   if (errFlag == ""SOK"")
   {
      return (1);
   }
   else if (errFlag == ""ETIMEOUT"")
   {
      return (21);
   }
   else if (errFlag == ""ESYSTEM"")
   {
      return (20);
   }
   else if (errFlag == ""DAVSNO"")
   {
      return (10);
   }
   else if (errFlag == ""DCARDEXPIRED"")
   {
      return (5);
   }
   else if (errFlag == ""DCARDREFUSED"")
   {
      return (8);
   }
   else if (errFlag == ""DINVALIDDATA"")
   {
      return (6);
   }
   else if (errFlag == ""DINVALIDCARD"")
   {
      return (7);
   }
   else if (errFlag == ""DMISSINGFIELD"")
   {
      return (11);
   }
   else if (errFlag == ""DNOAUTH"")
   {
      return (15);
   }
   else if (errFlag == ""DNOBILL"")
   {
      return (16);
   }
   else if (errFlag == ""DNTFDECLINED"")
   {
      return (3);
   }
   else if (errFlag == ""DCALL"")
   {
      return (2);
   }
   else
   {
      return (19);
   }
}
#include "eaisiebel.js"
function MapAccount(Inputs, Outputs) 
{

	var iDNBObj;
	var iDNBComp;
	var oDNBObj;
	var oDNBCompAccount;
	var oDNBCompSIC;
	var sicCount;
	
	
	iDNBObj=Inputs.GetIntObj (""DNB Account Update (Performance)"");

	
	oDNBObj=Outputs.CreateIntObj (""DNB Account (Performance)"");

	
	
	
	
	
	while (iDNBObj.NextInstance()) 
	{
		
		iDNBComp=iDNBObj.GetPrimaryIntComp(""DNB Account Update"");
		oDNBObj.NewInstance();
		oDNBCompAccount=oDNBObj.CreatePrimaryIntComp(""DNB Account"");
	
		
		while (iDNBComp.NextRecord ()) 
		{
			oDNBCompAccount.NewRecord();
			oDNBCompSIC=oDNBCompAccount.CreateIntComp(""DNB Account SIC"");
				
			PopulateAccntRecord(iDNBComp,oDNBCompAccount);
			PopulateSICRecord(iDNBComp,oDNBCompSIC);
			
		}
	}			
 return;
}
function PopulateAccntRecord(iDNBComp,oDNBCompAccount){

	oDNBCompAccount.SetCopySource(iDNBComp);
	
	
	// CopyFieldValue(dest,source)		
	oDNBCompAccount.CopyFieldValue(""Accounting Firm Name"",""Accounting Firm Name"");
	oDNBCompAccount.CopyFieldValue(""Annual Sales Local Currency"", ""Annual Sales Local Currency"");
	oDNBCompAccount.CopyFieldValue(""Annual Sales Local Currency CD"", ""Annual Sales Local Currency CD"");
	oDNBCompAccount.CopyFieldValue(""Bank Address"",""Bank Address"");
	oDNBCompAccount.CopyFieldValue(""Bank City"",""Bank City"");
	oDNBCompAccount.CopyFieldValue(""Bank DUNS Number"",""Bank DUNS Number"");
	oDNBCompAccount.CopyFieldValue(""Bank Name"",""Bank Name"");
	oDNBCompAccount.CopyFieldValue(""Bank State"",""Bank State"");
	oDNBCompAccount.CopyFieldValue(""Bank Zip"",""Bank Zip"");
	oDNBCompAccount.CopyFieldValue(""Base Year Employee"",""Base Year Employees"");
	oDNBCompAccount.CopyFieldValue(""Base Year Sales"",""Base Year Sales"");
	oDNBCompAccount.CopyFieldValue(""Business Name"",""Business Name"");
	oDNBCompAccount.CopyFieldValue(""Cable Telex Number"",""Cable Telex Number"");
	oDNBCompAccount.CopyFieldValue(""Carrier Router Code"",""Carrier Router Code"");
	oDNBCompAccount.CopyFieldValue(""City Code"",""City Code"");
	oDNBCompAccount.CopyFieldValue(""Continent Code"",""Continent Code"");
	oDNBCompAccount.CopyFieldValue(""Country Name"",""Country Name"");
	oDNBCompAccount.CopyFieldValue(""Country Telephone Access Code"",""Country Phone Access Code"");
	oDNBCompAccount.CopyFieldValue(""County Code"",""County Code"");
	oDNBCompAccount.CopyFieldValue(""County Name"",""County Name"");
	oDNBCompAccount.CopyFieldValue(""DUNS Number"",""DUNS Number"");
	oDNBCompAccount.CopyFieldValue(""Dias Code"",""Dias Code"");
	oDNBCompAccount.CopyFieldValue(""Division Indicator"",""Division Indicator"");
	oDNBCompAccount.CopyFieldValue(""Domestic Ultimate Business Name"",""Domestic Ultimate Business Name"");
	oDNBCompAccount.CopyFieldValue(""Domestic Ultimate Country Code"",""Domestic Ultimate Country Code"");
	oDNBCompAccount.CopyFieldValue(""Domestic Ultimate DUNS"",""Domestic Ultimate DUNS Number"");
	oDNBCompAccount.CopyFieldValue(""Domestic Ultimate FIPS Country"",""Domestic Ultimate FIPS Country"");
	oDNBCompAccount.CopyFieldValue(""Domestic Ultimate State Abbrev"",""Domestic Ultimate State Abbr"");
	oDNBCompAccount.CopyFieldValue(""Employee Here"",""Employee Here"");
	oDNBCompAccount.CopyFieldValue(""Employee Here Code"",""Employee Here Code"");
	oDNBCompAccount.CopyFieldValue(""Employee Total"",""Employee Total"");
	oDNBCompAccount.CopyFieldValue(""Employee Total Code"",""Employee Total Code"");
	oDNBCompAccount.CopyFieldValue(""FIPS City Code"",""FIPS City Code"");
	oDNBCompAccount.CopyFieldValue(""FIPS Country Code"",""FIPS Country Code"");
	oDNBCompAccount.CopyFieldValue(""FIPS MSA Code"",""FIPS MSA Code"");
	oDNBCompAccount.CopyFieldValue(""FIPS Subdivision 1 Code"",""FIPS Subdivision 1 Code"");
	oDNBCompAccount.CopyFieldValue(""FIPS Subdivision 2 Code"",""FIPS Subdivision 2 Code"");
	oDNBCompAccount.CopyFieldValue(""Family Update Date"",""Familty Update Date"");
	oDNBCompAccount.CopyFieldValue(""Geocode Accuracy"",""Geocode Accuracy"");
	oDNBCompAccount.CopyFieldValue(""Global Ultimate Business Name"",""Global Ultimate Business Name"");
	oDNBCompAccount.CopyFieldValue(""Global Ultimate Country Code"",""Global Ultimate Country Code"");
	oDNBCompAccount.CopyFieldValue(""Global Ultimate DUNS"",""Global Ultimate DUNS Number"");
	oDNBCompAccount.CopyFieldValue(""Global Ultimate FIPS Country"",""Global Ultimate FIPS Country"");
	oDNBCompAccount.CopyFieldValue(""Global Ultimate Indicator"",""Global Ultimate Indicator"");
	oDNBCompAccount.CopyFieldValue(""Global Ultimate State Abbrev"",""Global Ultimate State Abbr"");
	oDNBCompAccount.CopyFieldValue(""Hierarchy Code"",""Hierarchy Code"");
	oDNBCompAccount.CopyFieldValue(""Import Export Code"",""Import Export Code"");
	oDNBCompAccount.CopyFieldValue(""Latitude"",""Latitude"");
	oDNBCompAccount.CopyFieldValue(""Legal Status"",""Legal Status"");
	oDNBCompAccount.CopyFieldValue(""Line of Business"",""Line of Business"");
	oDNBCompAccount.CopyFieldValue(""Location Type"",""Loc Type Stat Indicator"");
	oDNBCompAccount.CopyFieldValue(""Longitude"",""Longitude"");
	oDNBCompAccount.CopyFieldValue(""Mail Address"",""Mail Address"");
	oDNBCompAccount.CopyFieldValue(""Mail Address 2"",""Mail Address 2"");
	oDNBCompAccount.CopyFieldValue(""Mail City"",""Mail City"");
	oDNBCompAccount.CopyFieldValue(""Mail State"",""Mail State"");
	oDNBCompAccount.CopyFieldValue(""Mail Zip"",""Mail Zip"");
	oDNBCompAccount.CopyFieldValue(""Main Fax 2"",""Fax Number"");
	oDNBCompAccount.CopyFieldValue(""Main Phone 2"",""Telephone"");
	oDNBCompAccount.CopyFieldValue(""Major Industry Category"",""Major Industry Category"");
	oDNBCompAccount.CopyFieldValue(""Manufacturing Indicator"",""Manufacturing Indicator"");
	oDNBCompAccount.CopyFieldValue(""Minority Owned Indicator"",""Minority Owned Indicator"");
	oDNBCompAccount.CopyFieldValue(""National Identification Number"",""National Id Number 1"");
	oDNBCompAccount.CopyFieldValue(""Number of Family Members"",""Number Family Members"");
	oDNBCompAccount.CopyFieldValue(""Owns Rents"",""Owns Rents"");
	oDNBCompAccount.CopyFieldValue(""Parent HQ DUNS"",""Parent DUNS Number"");
	oDNBCompAccount.CopyFieldValue(""Parent/HQ  Name"",""Parent/HQ Name"");
	oDNBCompAccount.CopyFieldValue(""Parent/HQ Country Code"",""Parent/HQ Country Code"");
	oDNBCompAccount.CopyFieldValue(""Parent/HQ FIPS Country Code"",""Parent/HQ FIPS Country Code"");
	oDNBCompAccount.CopyFieldValue(""Parent/HQ State"",""Parent/HQ State"");
	oDNBCompAccount.CopyFieldValue(""Percent Growth Employee in 3 yr"",""Percent Growth Employee in 3 Year"");
	oDNBCompAccount.CopyFieldValue(""Percent Growth Employee in 5 yr"",""Percent Growth Employee in 5 Year"");
	oDNBCompAccount.CopyFieldValue(""Percent Growth Sales in 3 yr"",""Percent Growth Sales in 3 Year"");
	oDNBCompAccount.CopyFieldValue(""Percent Growth Sales in 5 yr"",""Percent Growth Sales in 5 Year"");
	oDNBCompAccount.CopyFieldValue(""Physical Address"",""Physical Street Address"");
	oDNBCompAccount.CopyFieldValue(""Physical City"",""Physical City"");
	oDNBCompAccount.CopyFieldValue(""Physical State"",""Physical State"");
	oDNBCompAccount.CopyFieldValue(""Physical Zip"",""Physical Zip"");
	oDNBCompAccount.CopyFieldValue(""Population Code"",""Population Code"");
	oDNBCompAccount.CopyFieldValue(""Primary Local Activity Code"",""Primary Local Activity Code"");
	oDNBCompAccount.CopyFieldValue(""Primary SIC Code"",""SIC1"");
	oDNBCompAccount.CopyFieldValue(""Public Private Indicator"",""Public Private Indicator"");
	oDNBCompAccount.CopyFieldValue(""SMSA Code"",""SMSA Code"");
	oDNBCompAccount.CopyFieldValue(""SMSA Name"",""SMSA Name"");
	oDNBCompAccount.CopyFieldValue(""Sales Volumne"",""Sales Volumne"");
	oDNBCompAccount.CopyFieldValue(""Sales Volumne Code"",""Sales Volumne Code"");
	oDNBCompAccount.CopyFieldValue(""Second Street Address"",""Second Street Address"");
	oDNBCompAccount.CopyFieldValue(""Second Trade Style"",""Second Trade Style"");
	oDNBCompAccount.CopyFieldValue(""Site Status"",""Site Status"");
	oDNBCompAccount.CopyFieldValue(""Small Business Indicator"",""Small Business Indicator"");
	oDNBCompAccount.CopyFieldValue(""Square Footage"",""Square Footage"");
	oDNBCompAccount.CopyFieldValue(""State Code"",""State Code"");
	oDNBCompAccount.CopyFieldValue(""State Name"",""State Name"");
	oDNBCompAccount.CopyFieldValue(""Subsidiary Indicator"",""Subsidiary Indicator"");
	oDNBCompAccount.CopyFieldValue(""Trade Style"",""Trade Style"");
	oDNBCompAccount.CopyFieldValue(""Trend Sales in 5 yr"",""Trend Sales in 5 Year"");
	oDNBCompAccount.CopyFieldValue(""Trend Year Employee in 3 yr"",""Trend Year Employee in 3 Year"");
	oDNBCompAccount.CopyFieldValue(""Trend Year Employee in 5 yr"",""Trend Year Employee in 5 Year"");
	oDNBCompAccount.CopyFieldValue(""Trend Year Sales in 3 yr"",""Trend Year Sales in 3 Year"");
	oDNBCompAccount.CopyFieldValue(""Year Started 1"",""Year Started"");
	
	}
function PopulateSICRecord(iDNBComp,oDNBCompSIC) 
{
	var		sic1;
	var		sic2;
	var		sic3;
	var		sic4;
	var		sic5;
	var		sic6;
	
	sic1 = iDNBComp.GetFieldValue(""SIC1"");
	sic2 = iDNBComp.GetFieldValue(""SIC2"");
	sic3 = iDNBComp.GetFieldValue(""SIC3"");
	sic4 = iDNBComp.GetFieldValue(""SIC4"");
	sic5 = iDNBComp.GetFieldValue(""SIC5"");
	sic6 = iDNBComp.GetFieldValue(""SIC6"");

	if (sic1 != null && sic1 != """" && sic1 != ""0000"")
	{
	oDNBCompSIC.NewRecord();
	oDNBCompSIC.SetCopySource(iDNBComp);		
	oDNBCompSIC.CopyFieldValue(""DUNS Number"",""DUNS Number"");
	oDNBCompSIC.CopyFieldValue(""SIC"", ""SIC1"");
	}
	
	if (sic2 != null && sic2 != """" && sic2 != ""0000"")
	{
	oDNBCompSIC.NewRecord();
	oDNBCompSIC.SetCopySource(iDNBComp);		
	oDNBCompSIC.CopyFieldValue(""DUNS Number"",""DUNS Number"");
	oDNBCompSIC.CopyFieldValue(""SIC"", ""SIC2"");
	}
	
	if (sic3 != null && sic3 != """" && sic3 != ""0000"")
	{
	oDNBCompSIC.NewRecord();
	oDNBCompSIC.SetCopySource(iDNBComp);		
	oDNBCompSIC.CopyFieldValue(""DUNS Number"",""DUNS Number"");
	oDNBCompSIC.CopyFieldValue(""SIC"", ""SIC3"");
	}
	
	if (sic4 != null && sic4 != """" && sic4 != ""0000"")
	{
	oDNBCompSIC.NewRecord();
	oDNBCompSIC.SetCopySource(iDNBComp);		
	oDNBCompSIC.CopyFieldValue(""DUNS Number"",""DUNS Number"");
	oDNBCompSIC.CopyFieldValue(""SIC"", ""SIC4"");
	}
	
	if (sic5 != null && sic5 != """" && sic5 != ""0000"")
	{
	oDNBCompSIC.NewRecord();
	oDNBCompSIC.SetCopySource(iDNBComp);		
	oDNBCompSIC.CopyFieldValue(""DUNS Number"",""DUNS Number"");
	oDNBCompSIC.CopyFieldValue(""SIC"", ""SIC5"");
	}
	
	if (sic6 != null && sic6 != """" && sic6 != ""0000"")
	{
	oDNBCompSIC.NewRecord();
	oDNBCompSIC.SetCopySource(iDNBComp);		
	oDNBCompSIC.CopyFieldValue(""DUNS Number"",""DUNS Number"");
	oDNBCompSIC.CopyFieldValue(""SIC"", ""SIC6"");
	}
		
	return;
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{	
	return EAIExecuteMap(MethodName,Inputs,Outputs);

}
#include "eaisiebel.js"
function MapContact(Inputs, Outputs) 
{

	var iDNBObj;
	var iDNBComp;
	var oDNBObj;
	var oDNBCompContact;
//	var oDNBCompSIC;
	var sicCount;
	
	
	iDNBObj=Inputs.GetIntObj (""DNB Account Update (Performance)"");

	
	oDNBObj=Outputs.CreateIntObj (""DNB Contact (Performance)"");

	
	
	
	
	
	while (iDNBObj.NextInstance()) 
	{
		
		iDNBComp=iDNBObj.GetPrimaryIntComp(""DNB Account Update"");
//		oDNBObj.NewInstance();
//		oDNBCompContact=oDNBObj.CreatePrimaryIntComp(""DNB Contact"");
	
		
		while (iDNBComp.NextRecord ()) 
		{
//			PopulateContactRecord (iDNBComp, oDNBCompContact);
			PopulateContactRecord (iDNBComp, oDNBObj);
			
//			oDNBCompAccount.NewRecord();
//			oDNBCompSIC=oDNBCompAccount.CreateIntComp(""DNB Account SIC"");
				
//			PopulateAccntRecord(iDNBComp,oDNBCompAccount);
//			PopulateSICRecord(iDNBComp,oDNBCompSIC);
			
		}
	}			
 return;
}
function PopulateContactRecord (iDNBComp, oDNBObj)
{
   var   lastName;
   var   firstName;
   var   mrc;
   var   oDNBCompMRC;
   var   oDNBCompContact;

   lastName = iDNBComp.GetFieldValue (""CEO Last Name"");
   firstName = iDNBComp.GetFieldValue (""CEO First Name"");
   mrc = iDNBComp.GetFieldValue (""CEO MRC Code"");

   if (lastName != null && lastName != """" && firstName != null && firstName != """")
   {
      oDNBObj.NewInstance();
      oDNBCompContact=oDNBObj.CreatePrimaryIntComp(""DNB Contact"");
      oDNBCompContact.NewRecord ();

      oDNBCompContact.SetCopySource (iDNBComp);

      oDNBCompContact.SetFieldValue (""CEO Indicator"", ""Y"");
      oDNBCompContact.SetFieldValue (""Reporting Level"", ""1"");

      // CopyFieldValue (dest, source)
      oDNBCompContact.CopyFieldValue (""DUNS Number"", ""DUNS Number"");
      oDNBCompContact.CopyFieldValue (""First Name"", ""CEO First Name"");
      oDNBCompContact.CopyFieldValue (""Full Name"", ""CEO Full Name"");
      oDNBCompContact.CopyFieldValue (""Gender"", ""CEO Gender Code"");
      oDNBCompContact.CopyFieldValue (""Last Name"", ""CEO Last Name"");
      oDNBCompContact.CopyFieldValue (""Middle Initial"", ""CEO Middle Initial"");
      oDNBCompContact.CopyFieldValue (""Prefix"", ""CEO Prefix"");
      oDNBCompContact.CopyFieldValue (""Primary MRC"", ""CEO MRC Code"");
      oDNBCompContact.CopyFieldValue (""Suffix"", ""CEO Suffix"");
      oDNBCompContact.CopyFieldValue (""Title"", ""CEO Title"");
      
      if (mrc != null && mrc != """")
      {
         oDNBCompMRC = oDNBCompContact.CreateIntComp(""DNB Contact MRC"");
         oDNBCompMRC.NewRecord ();
         oDNBCompMRC.SetFieldValue (""MRC Code"", mrc);
      }
   }

   lastName = iDNBComp.GetFieldValue (""First Executive Last Name"");
   firstName = iDNBComp.GetFieldValue (""First Executive First Name"");
   mrc = iDNBComp.GetFieldValue (""First Executive MRC Code"");

   if (lastName != null && lastName != """" && firstName != null && firstName != """")
   {
      oDNBObj.NewInstance();
      oDNBCompContact=oDNBObj.CreatePrimaryIntComp(""DNB Contact"");
      oDNBCompContact.NewRecord ();

      oDNBCompContact.SetCopySource (iDNBComp);

      oDNBCompContact.SetFieldValue (""CEO Indicator"", ""N"");
      oDNBCompContact.SetFieldValue (""Reporting Level"", ""2"");

      // CopyFieldValue (dest, source)
      oDNBCompContact.CopyFieldValue (""DUNS Number"", ""DUNS Number"");
      oDNBCompContact.CopyFieldValue (""First Name"", ""First Executive First Name"");
      oDNBCompContact.CopyFieldValue (""Full Name"", ""First Executive Full Name"");
      oDNBCompContact.CopyFieldValue (""Gender"", ""First Executive Gender Code"");
      oDNBCompContact.CopyFieldValue (""Last Name"", ""First Executive Last Name"");
      oDNBCompContact.CopyFieldValue (""Middle Initial"", ""First Executive Middle Initial"");
      oDNBCompContact.CopyFieldValue (""Prefix"", ""First Executive Prefix"");
      oDNBCompContact.CopyFieldValue (""Primary MRC"", ""First Executive MRC Code"");
      oDNBCompContact.CopyFieldValue (""Suffix"", ""First Executive Suffix"");
      oDNBCompContact.CopyFieldValue (""Title"", ""First Executive Title"");
      
      if (mrc != null && mrc != """")
      {
         oDNBCompMRC = oDNBCompContact.CreateIntComp(""DNB Contact MRC"");
         oDNBCompMRC.NewRecord ();
         oDNBCompMRC.SetFieldValue (""MRC Code"", mrc);
      }
   }

   lastName = iDNBComp.GetFieldValue (""Second Executive Last Name"");
   firstName = iDNBComp.GetFieldValue (""Second Executive First Name"");
   mrc = iDNBComp.GetFieldValue (""Second Executive MRC Code"");

   if (lastName != null && lastName != """" && firstName != null && firstName != """")
   {
      oDNBObj.NewInstance();
      oDNBCompContact=oDNBObj.CreatePrimaryIntComp(""DNB Contact"");
      oDNBCompContact.NewRecord ();

      oDNBCompContact.SetCopySource (iDNBComp);

      oDNBCompContact.SetFieldValue (""CEO Indicator"", ""N"");
      oDNBCompContact.SetFieldValue (""Reporting Level"", ""3"");

      // CopyFieldValue (dest, source)
      oDNBCompContact.CopyFieldValue (""DUNS Number"", ""DUNS Number"");
      oDNBCompContact.CopyFieldValue (""First Name"", ""Second Executive First Name"");
      oDNBCompContact.CopyFieldValue (""Full Name"", ""Second Executive Full Name"");
      oDNBCompContact.CopyFieldValue (""Gender"", ""Second Executive Gender Code"");
      oDNBCompContact.CopyFieldValue (""Last Name"", ""Second Executive Last Name"");
      oDNBCompContact.CopyFieldValue (""Middle Initial"", ""Second Executive Middle Initial"");
      oDNBCompContact.CopyFieldValue (""Prefix"", ""Second Executive Prefix"");
      oDNBCompContact.CopyFieldValue (""Primary MRC"", ""Second Executive MRC Code"");
      oDNBCompContact.CopyFieldValue (""Suffix"", ""Second Executive Suffix"");
      oDNBCompContact.CopyFieldValue (""Title"", ""Second Executive Title"");
      
      if (mrc != null && mrc != """")
      {
         oDNBCompMRC = oDNBCompContact.CreateIntComp(""DNB Contact MRC"");
         oDNBCompMRC.NewRecord ();
         oDNBCompMRC.SetFieldValue (""MRC Code"", mrc);
      }
   }

   lastName = iDNBComp.GetFieldValue (""Third Executive Last Name"");
   firstName = iDNBComp.GetFieldValue (""Third Executive First Name"");
   mrc = iDNBComp.GetFieldValue (""Third Executive MRC Code"");

   if (lastName != null && lastName != """" && firstName != null && firstName != """")
   {
      oDNBObj.NewInstance();
      oDNBCompContact=oDNBObj.CreatePrimaryIntComp(""DNB Contact"");
      oDNBCompContact.NewRecord ();

      oDNBCompContact.SetCopySource (iDNBComp);

      oDNBCompContact.SetFieldValue (""CEO Indicator"", ""N"");
      oDNBCompContact.SetFieldValue (""Reporting Level"", ""4"");

      // CopyFieldValue (dest, source)
      oDNBCompContact.CopyFieldValue (""DUNS Number"", ""DUNS Number"");
      oDNBCompContact.CopyFieldValue (""First Name"", ""Third Executive First Name"");
      oDNBCompContact.CopyFieldValue (""Full Name"", ""Third Executive Full Name"");
      oDNBCompContact.CopyFieldValue (""Gender"", ""Third Executive Gender Code"");
      oDNBCompContact.CopyFieldValue (""Last Name"", ""Third Executive Last Name"");
      oDNBCompContact.CopyFieldValue (""Middle Initial"", ""Third Executive Middle Initial"");
      oDNBCompContact.CopyFieldValue (""Prefix"", ""Third Executive Prefix"");
      oDNBCompContact.CopyFieldValue (""Primary MRC"", ""Third Executive MRC Code"");
      oDNBCompContact.CopyFieldValue (""Suffix"", ""Third Executive Suffix"");
      oDNBCompContact.CopyFieldValue (""Title"", ""Third Executive Title"");
      
      if (mrc != null && mrc != """")
      {
         oDNBCompMRC = oDNBCompContact.CreateIntComp(""DNB Contact MRC"");
         oDNBCompMRC.NewRecord ();
         oDNBCompMRC.SetFieldValue (""MRC Code"", mrc);
      }
   }
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{	
	return EAIExecuteMap(MethodName,Inputs,Outputs);

}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// DESCRIPTION
//    Javascript maps to Siebel Discount from Oracle Discount
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function A_Discount(InputMsg,OutputMsg)
{
    //Variable to hold the input integration object
    var OracleIntObject;
    
    //Variable to hold the output integration object
    var SiebelIntObject;
    
    //Locate the input integration object in the input message
    OracleIntObject = InputMsg.GetIntObj(""Discount - Get Oracle Discount (Oracle)"");
    
    //If the integration object exists in the input message
    if(OracleIntObject.Exists())
    {
    	//Create the output integration object in the output message
		SiebelIntObject = OutputMsg.CreateIntObj(""Discount - Get Oracle Discount (Siebel)"");
		
		while(OracleIntObject.NextInstance())
		{	
			SiebelIntObject.NewInstance();
			CopyFields(OracleIntObject, SiebelIntObject);
		}
	}
}
function CopyFields(OracleIntObject,SiebelIntObject)
{
	// Variable to hold the Oracle side integration components
	var OracleDiscountIntComp, OraclePriceBreakIntComp ;
	
	// Variable to hold the Siebel side integration Components
	var SiebelDiscountIntComp, SiebelDiscountItemIntComp;
	
	// Get the primary integration component from the OracleIntegration Object (Oracle)
	OracleDiscountIntComp = OracleIntObject.GetPrimaryIntComp(""SIE_DISCOUNT_LINES_V"");
	
	var EarliestDate = ""01/01/1980 00:00:00"";
	
			
	if(OracleDiscountIntComp.Exists())
	{
		SiebelDiscountIntComp = SiebelIntObject.CreatePrimaryIntComp(""Volume Discount"") ;
							
		while (OracleDiscountIntComp.NextRecord())
	  	{
			// Process delete operation
			if(ProcessDelete(OracleDiscountIntComp, SiebelDiscountIntComp)) return;
			
			SiebelDiscountIntComp.NewRecord();
			SiebelDiscountIntComp.SetCopySource(OracleDiscountIntComp);
			
 			// Set the operation code for this Siebel integration component.
			SetOperationCode(SiebelDiscountIntComp, OracleDiscountIntComp);
			
 			SiebelDiscountIntComp.CopyFieldValue(""Name"", ""NAME"");
 			SiebelDiscountIntComp.CopyFieldValue(""Integration Id"", ""INTEGRATION_ID"");
 			SiebelDiscountIntComp.CopyFieldValue(""Description"", ""DESCRIPTION"");
 			
 			var DStartDt = OracleDiscountIntComp.GetFieldValue(""START_DATE_ACTIVE"");
			var DEndDt = OracleDiscountIntComp.GetFieldValue(""END_DATE_ACTIVE"");
											
			if ((DStartDt == null) || (DStartDt == """"))
			{
				DStartDt = EarliestDate;
			}
					
			if ((DEndDt != null) && (DEndDt != """") &&
				(SiebeltoDate(DStartDt).getTime() > SiebeltoDate(DEndDt).getTime()))
			{
		  		DEndDt = DStartDt;
	  		}
	  		
	  		  						  				
	  		SiebelDiscountIntComp.SetFieldValue(""Start Date"", DStartDt);
	  		SiebelDiscountIntComp.SetFieldValue(""End Date"", DEndDt) ;
 		 		
	 										
				
			// SIE_PRICE_BREAK_LINES_V
			
 			OraclePriceBreakIntComp = 
 				OracleDiscountIntComp.GetIntComp(""SIE_PRICE_BREAK_LINES_V"");
 				
 			if(OraclePriceBreakIntComp.Exists())
			{
				SiebelDiscountItemIntComp = 
					SiebelDiscountIntComp.CreateIntComp(""Volume Discount Item"");
					
				while(OraclePriceBreakIntComp.NextRecord())
				{
					SiebelDiscountItemIntComp.NewRecord();
					SiebelDiscountItemIntComp.SetCopySource(OraclePriceBreakIntComp);
					
					// Set the Operation Code for this component
					SetOperationCode(SiebelDiscountItemIntComp, OraclePriceBreakIntComp);
					
					var CalculatedAmount, DiscountName;
					var Percent = OraclePriceBreakIntComp.GetFieldValue(""PERCENT"");
					var Price 	= OraclePriceBreakIntComp.GetFieldValue(""PRICE"");
					var Amount 	= OraclePriceBreakIntComp.GetFieldValue(""AMOUNT"");
					var BasePrice = OraclePriceBreakIntComp.GetFieldValue(""LIST_PRICE"");
					
					if (Percent == null || Percent =="""") 
					{
						if (Price != null && Price != """")
						{
							CalculatedAmount = BasePrice - Price;
							Percent = CalculatedAmount * (100 / BasePrice);
						}
					
						else if (Amount != null && Amount != """")
						{
							Percent = Amount * (100 / BasePrice);
						}
					}
					
					DiscountName = OraclePriceBreakIntComp.GetFieldValue(""NAME"");
					DiscountName = DiscountName	+ ""-"" + Percent + ""%"" ;
					SiebelDiscountItemIntComp.SetFieldValue(""Name"", DiscountName);
					SiebelDiscountItemIntComp.CopyFieldValue(""Integration Id"", ""INTEGRATION_ID"");
					SiebelDiscountItemIntComp.CopyFieldValue (""Minimum Quantity"", ""PRICE_BREAK_LINES_LOW_RANGE"");
					SiebelDiscountItemIntComp.CopyFieldValue(""Maximum Quantity"", ""PRICE_BREAK_LINES_HIGH_RANGE"");
					SiebelDiscountItemIntComp.SetFieldValue(""Discount Percent"", Percent);
								
				} ///~ while(OraclePriceBreakIntComp.NextRecord())
			} ///~ if(OraclePriceBreakIntComp.Exists())
		
	} ///~ while (OracleDiscountIntComp.NextRecord())
  } ///~ if (OracleDiscountIntComp.Exists())
} ///~ End of function CopyFields"
function ProcessDelete(OracleComp, SiebelComp)
{
	// If not a delete return false.
	// If delete (X or D) perform delete through COM interface.  X indicates that
	// there should be a D at a lower level.
	// 
	// For Discounts we expect deletes at price break level only.  We should see:
	//   X  Discount
	//   X  Discount Lines
	//   D  Price Break
	
	var opCode;
	
	opCode = OracleComp.GetFieldValue(""SysOp"");
	if (opCode == ""D"")
	{
		// Delete of Discount not supported.
		EAIRaiseError(TranslateMessage(""ORA_MSG_INVALID_DELETION,SIE_DISCOUNT_LINES_V""));
	}
	else if (opCode == ""X"")
	{
		// Expect delete at price break
		OracleComp = OracleComp.GetIntComp(""SIE_PRICE_BREAK_LINES_V"");
		if (!OracleComp.Exists() || !OracleComp.NextRecord())
			EAIRaiseError(TranslateMessage(
				""ORA_MSG_MISSING_COMPONENT,SIE_PRICE_BREAK_LINES_V,SIE_DISCOUNT_LINES_V""));
		
		opCode = OracleComp.GetFieldValue(""SysOp"");
		if (opCode == ""D"")
		{
			// Delete price break
					
			with (SiebelComp)
			{
				NewRecord ();
				SetCopySource(OracleComp);
				SetFieldValue(""operation"", ""upsert"");
				CopyFieldValue(""Integration Id"", ""DISCOUNT_LINE_ID"");
			}
			
			var SiebelDiscountItemIntComp = SiebelComp.CreateIntComp (""Volume Discount Item"");	
			with (SiebelDiscountItemIntComp)
			{
				NewRecord ();
				SetCopySource(OracleComp);
				SetFieldValue(""operation"", ""delete"");
				var IntegrationId = OracleComp.GetFieldValue(""DISCOUNT_LINE_ID"") + ""-"" +
					OracleComp.GetFieldValue(""PRICE_BREAK_LINES_LOW_RANGE"");
				SetFieldValue(""Integration Id"", IntegrationId);
			}	
			
			return true;
		}
		else
		EAIRaiseError(TranslateMessage(
			""ORA_MSG_INVALID_SYSOP,""+opCode+"",SIE_PRICE_BREAK_LINES_V""));
	}
		
	else return false;  // Not a delete
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"/**
 * This function will read the field 'SysOp' from the Oracle integration 
 * component and depending on the value of that field, we will have to
 * populate the Siebel integration component with the values
 * ""delete"" or ""upsert"". The field that should be populated in the Siebel
 * side is ""operation"".
 */
function SetOperationCode(SiebelIntComp, OracleIntComp)
{
	var opCode = OracleIntComp.GetFieldValue(""SysOp"");
	if(opCode == ""D"")
	{
		SiebelIntComp.SetFieldValue (""operation"", ""delete"");
	}
	else
		SiebelIntComp.SetFieldValue (""operation"", ""sync"");
}
function SiebeltoDate(SiebelDate)
{
	var split1 = SiebelDate.split(""/"");
	var split2 = split1[2].split("" "");
	var split3 = split2[1].split("":"");
	return new Date(split2[0], split1[0]-1, split1[1], split3[0], split3[1], split3[2]);
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created by Richard Exley - November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
"
function dateToString(dateObj, incr) {
	var strDate = """";
	strDate += dateObj.getMonth()+1 + ""/"" + (dateObj.getDate()+incr) + ""/"" + dateObj.getFullYear();
	strDate += "" "" + dateObj.getHours() + "":"" + dateObj.getMinutes() + "":"" + (dateObj.getSeconds() + incr);
	return strDate;
}
#include "eaisiebel.js"
"//#define INT_OBJ_NAME   ""IntObjName""
//#define ROOT_COMP_NAME ""RootCompName""

function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{	
   var INT_OBJ_NAME = ""IntObjName"";
   var ROOT_COMP_NAME = ""RootCompName"";

   var intObjName = Inputs.GetProperty (INT_OBJ_NAME);
   var rootCompName = Inputs.GetProperty (ROOT_COMP_NAME);
   
   var mapOutput = EAICreateIntMsgOut (Outputs);

   var outIntObj = mapOutput.CreateIntObj (intObjName);

   outIntObj.NewInstance ();

   var rootComp = outIntObj.CreatePrimaryIntComp (rootCompName);

   rootComp.NewRecord ();
     
   var propName = """";
   var propVal = """";
   propName = Inputs.GetFirstProperty();
   while (propName != """")
   {
      propVal = Inputs.GetProperty(propName);
      if ((propName != INT_OBJ_NAME) && (propName != ROOT_COMP_NAME))
      {
         rootComp.SetFieldValue(propName, propVal);
      }
      propName = Inputs.GetNextProperty();
   }
 
   return (CancelOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""TestBS"") {
		var bsTest = TheApplication().GetService(""TECHM BS IF COMMON"");
		//if(!defined(bsTest))
       	//bsTest = TheApplication().GetService(""TECHM BS IF COMMON"");

		var mpsInp	= TheApplication().NewPropertySet();
		var mpsOp	= TheApplication().NewPropertySet();
		
		mpsInp.SetProperty(""Sub Type"",""SEQ"");
		mpsInp.SetProperty(""BC Short Name"",""NMASSOC"");
		mpsInp.SetProperty(""Prefix"","""");
		mpsInp.SetProperty(""Length"",""6"");
		mpsInp.SetProperty(""SysPrefPrefix"",""RMS"");
	
		bsTest.InvokeMethod(""Get Next Id"", mpsInp, mpsOp);

		var msNextId = mpsOp.GetProperty(""Next Id"");
		var test= ""123"";
		
		return (CancelOperation);
	} else
		return (ContinueOperation);
}
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
    CanInvoke = true;
	return (CancelOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var msg = Inputs.GetProperty(""InputMessage"");
	var outMsg = ""What do you mean by "" + msg + ""?"";
	Outputs.SetProperty(""OutputMessage"", outMsg);
	return (CancelOperation);
}
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
    CanInvoke = true;
	return (CancelOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var name = Inputs.GetProperty(""Name"");
	var question = Inputs.GetProperty(""Question"");
	var hint = Inputs.GetProperty(""Hint"");	
	
	var answer = ""Dear "" + name + "", I can't answer your question ["" + question + ""]. Call 1-800-INEEDHELP."";
	Outputs.SetProperty(""Answer"", answer);
	Outputs.SetProperty(""Hint"", ""Your hint didn't help me find the answer."");
	Outputs.SetProperty(""RandomThought"", ""I think you should try Yoga."");
	return (CancelOperation);
}
function CheckActivity (Inputs, Outputs)
{
	var theApp;
	var oppBO;
	var postnBC, actionBC, oppBC;
	var oppId, employeeId;


	theApp = TheApplication();	
    oppBO = theApp.ActiveBusObject();
    oppBC = oppBO.GetBusComp(""Opportunity"");
    postnBC = oppBO.GetBusComp(""Position"");
    actionBC = oppBO.GetBusComp(""Action"");
    
    oppId = oppBC.GetFieldValue(""Id"");
    employeeId = postnBC.GetFieldValue(""Primary Employee Id"");
	
	actionBC.ClearToQuery() ;
	
	actionBC.SetSearchSpec(""Owned By Id"", employeeId);
	actionBC.ExecuteQuery();

	if (actionBC.FirstRecord())
 	   Outputs.SetProperty(""PopupMessage"", ""Y"");
 	else
 	   Outputs.SetProperty(""PopupMessage"", ""N"");

	return;
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   if (MethodName==""CheckActivity"")
   {
	    CheckActivity(Inputs,Outputs);
        return (CancelOperation);
   }
   else
	    return (ContinueOperation);
	    
}
function Func_CopyPropSet( Inputs, Outputs)
{
  var propName = """";
  var propVal = """";
  var child;

  Outputs.SetType(Inputs.GetType());
  Outputs.SetValue(Inputs.GetValue());

  propName = Inputs.GetFirstProperty();
  while (propName != """")
  {
    propVal = Inputs.GetProperty(propName);
    Outputs.SetProperty(propName, propVal);
    propName = Inputs.GetNextProperty();  
  }    

  for (var i = 0; i < Inputs.GetChildCount(); i++)
  {
  	 child = Inputs.GetChild(i);
     Outputs.AddChild(child.Copy());
  }

}
function Func_CreateSignOn(Inputs)
{
  var child;
  var grdChild;

  // Enumerate the first layer header definition  
  for (var i=0; i < Inputs.GetChildCount(); i++)
  { 
  
  	child = Inputs.GetChild(i);
  	
  	if ( child.GetType() == ""UsrLoginSegment"")
  	{  	 
  	        
		for (var j=0; j < child.GetChildCount(); j++)
		{
		    grdChild = child.GetChild(j);
		    
			if (grdChild.GetType() == ""LoginUserId"")
			{
				grdChild.SetValue(""UserId"");   
			}
			
			if (grdChild.GetType() == ""LoginCurPassword"")
			{
				grdChild.SetValue(""PASSWD"");
			}
		}
		
  	}
  	else
  	{
  	  // Remove other header definitions
  	  Inputs.RemoveChild(i--);
  	}
  	
  }

}
function Func_GenerateHeader (Inputs, Outputs)
{
  var child;

  // Enumerate the first layer header definition  
  for (var i = 0; i < Outputs.GetChildCount(); i++)
  {
  	child = Outputs.GetChild(i);
  	
  	if ( child.GetType() == ""SignonRq"")
  	{  	 
  	  // Create SignOn Segment
  	  Func_CreateSignOn(child);
  	}
  	else if (child.GetType() != ""xxxSvcRq"")
  	{
  	  // Remove other header definitions
  	  Outputs.RemoveChild(i--);
  	}
  }  
}
function Func_PreProcessBody (Inputs, Outputs)
{

  var serviceName;
  
  if (Inputs.PropertyExists(""SiebelFINSObjType""))
  {
      Func_CopyPropSet(Inputs, Outputs);
  }   
  else if (Inputs.PropertyExists(""Service Name""))
  {
  	  serviceName = Inputs.GetProperty(""Service Name"");	  	 
  	  Outputs.SetType(serviceName);
  	  Outputs.AddChild(Inputs.Copy());
  }
  else
  {
  	  Func_CopyPropSet(Inputs, Outputs);
  }  

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
    var retVal = CancelOperation;

    if (MethodName == ""GenerateHeader"") {
  		Func_GenerateHeader(Inputs, Outputs);
    }
    else if (MethodName == ""PreProcessBody"") {
        Func_PreProcessBody(Inputs, Outputs);
    }
    else {
       retVal = ContinueOperation;
    }
    
	return (retVal);
}
function CheckForErrors(Inputs, Outputs)
{
		var errorText;

		errorText = Inputs.GetValue(); 

		if(errorText.indexOf("faultMessage"")==-1)
			Outputs.SetValue("false"");
		else
			Outputs.SetValue(""true"");

}
function DisplayErrors(Inputs, Outputs)
{
	var errorText=Inputs.GetValue();
	TheApplication().RaiseErrorText(errorText);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{

	if(MethodName==""TranslateErrors"")
	{
		TranslateErrors(Inputs, Outputs);
	}
	if(MethodName==""WriteErrosToLog"")
	{
		WriteErrosToLog(Inputs, Outputs);
	}
	if(MethodName==""DisplayErrors"")
	{
		DisplayErrors(Inputs, Outputs);
	}
	if(MethodName==""CheckForErrors"")
	{
		CheckForErrors(Inputs, Outputs);
	}
	return (CancelOperation);
}
function TranslateErrors(Inputs, Outputs)
{
	var errorMessages;
	var errorText;
	errorMessages = Inputs.GetValue();
	//var fp = Clib.fopen(""c:\\debug.log"",""w"");
	//Clib.fputs(""Input Error Message""+errorMessages+""\n\n\n"" ,fp);
	var translatedErrors;
	translatedErrors=""Following Error Has Occured in Process: "";
	var firstindex;
	var lastindex;
	var faultMessage;
	var codefindx,codelindx,argfindx,arglindx,arg,code;

			codefindx = errorMessages.indexOf(""processName"");
			if(codefindx>-1)
			{
				codelindx = errorMessages.indexOf(""&lt;"",codefindx+15);
				if(codelindx>-1)
					translatedErrors = translatedErrors + errorMessages.substring(codefindx+15, codelindx);
			}


			codefindx = errorMessages.indexOf("flowName"");
			if(codefindx>-1)
			{
				codelindx = errorMessages.indexOf(""&lt;"",codefindx+12);
				if(codelindx>-1)
					translatedErrors = translatedErrors +""\nFlow Name: ""+ errorMessages.substring(codefindx+12, codelindx);
			}

			codefindx = errorMessages.indexOf("flowContext"");
			if(codefindx>-1)
			{
				codelindx = errorMessages.indexOf(""&lt;"",codefindx+15);
				if(codelindx>-1)
					translatedErrors = translatedErrors +""\nFlow Context: ""+ errorMessages.substring(codefindx+15, codelindx);
			}

			codefindx = errorMessages.indexOf(""processCallStack"");
			if(codefindx>-1)
			{
				codelindx = errorMessages.indexOf(""&lt;"",codefindx+20);
				if(codelindx>-1)
					translatedErrors = translatedErrors +""\nProcess Call Stack: ""+ errorMessages.substring(codefindx+20, codelindx);
			}

	translatedErrors = translatedErrors +""\nError Messages: \n\n"";
	codefindx=0;
	codelindx=0
	firstindex=0;
	var count=0;
	while(true)
	{
		while(true)
		{
			firstindex = errorMessages.indexOf(""errorMessage"",firstindex);
			var tempIndx = errorMessages.indexOf(""errorMessageSet"",firstindex);
			if(firstindex != tempIndx || firstindex == -1)
				break;
			else
				firstindex = firstindex + 14;
		}
		count++;
		if(firstindex == -1)	
		{
			//Clib.fputs(""No occurence of <errorMessage>. Loop End.\n"",fp);
			break;
		}
		else
		{	lastindex = errorMessages.indexOf(""errorMessage"",firstindex+16);
			if(lastindex == -1)	
			{
				//Clib.fputs(""No occurence of </errorMessage>. Loop End\n"",fp);
				break;
			}

			faultMessage = errorMessages.substring(firstindex+16, lastindex-9);	

			codefindx = faultMessage.indexOf(""code"");
			codelindx = faultMessage.indexOf(""code"",codefindx+8);
			errorText="""";
			if(codelindx>-1)
			{
				code = faultMessage.substring(codefindx+8, codelindx-9);
				errorText = code;


				argfindx=0;
				while(true)
				{
					argfindx = faultMessage.indexOf(""argument"",argfindx);
					if(argfindx == -1)	
						break;
					arglindx = faultMessage.indexOf(""argument"",argfindx+13);
					if(arglindx == -1)	
						break;
					arg = faultMessage.substring(argfindx+13, arglindx-9);
					errorText = errorText +""|""+ arg
					argfindx = arglindx+13;
				}
				//Clib.fputs(""Translating Error Message:\n""+errorText,fp);
				var e;
				try{
					errorText = TranslateMessage_2(errorText);
				}catch(e)
				{
					//Clib.fputs(e,fp);
					errorText="""";
				}	
				//Clib.fputs(""Translated Error Message:\n""+errorText,fp);
			}		
			if(codelindx==-1 || errorText=="""")
			{
				//Clib.fputs(""No error code/ no error message present for code.Finding <text>"",fp);
				var textfindx = faultMessage.indexOf(""text&gt;"",0);
				if(textfindx>-1)
				{

					var textlindx = faultMessage.indexOf(""text&gt;"",textfindx+8);
					if(textlindx>-1)
					{
						errorText = faultMessage.substring(textfindx+8, textlindx-9);
					}
					else
					{
						errorText = ""Not able to translate <errorMessage> node as it doesnot have valid data. XML =>""+faultMessage;
					}
						//Clib.fputs(""<text> found =>""+errorText+""\n"",fp);
				}
				else
				{
					//Clib.fputs(""No <text> present in =>.""+faultMessage+"" \n"",fp);
					errorText = ""Not able to translate <errorMessage> node as it doesnot have valid data. XML =>""+faultMessage;
				}

			}
			translatedErrors = translatedErrors + ""[Error] "" + errorText  + ""\n"" ;
		}
		firstindex=lastindex+16;
	}
	//Clib.fputs(""Translation Complete. Translated Message=>\n""+translatedErrors,fp);
	Outputs.SetValue(translatedErrors);	
	//Clib.fclose(fp);
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in January 2005
	//
	// Message is a string of pipe '|' separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// CUIF_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example :
	//
	// Message:
	//   CUIF_MSG_PARENT_ACC_NOT_SYNCED|Siebel Systems|CUIF_MSG_SYNC_ACC_FIRST|Siebel Systems
	// Parameterized text:
	//   CUIF_MSG_PARENT_ACC_NOT_SYNCED=""Parent Account '%1' not synced""
	//   CUIF_MSG_SYNC_ACC_FIRST="" please Sync '%1' first.""
	// Result:
	//   ""Parent Account 'Siebel Systems' not synced please Sync 'Siebel Systems' first.""
	//
	// Warning!!!  The pipe '|' is the delimiter so if u have '|' in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""CUIF_MSG"";
	var LOVType = ""CUIF_MESSAGE"";
	
	if (Message.substring(0,8) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split('|');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,8) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,8) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function TranslateMessage_2(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in January 2005
	//
	// Message is a string of pipe '|' separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent Name of the Message object, as defined in Siebel Tools, whose text
	// contains the acrual error messagein turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// CUIF_MSG the message is returned untranslated.  A message can have 
	// up to five parameters, %1,%2,...,%5.  You can modify the script code to support as many
	// parameters you want. 
	// An example :
	//
	// Message:
	//   CUIF_MSG_PARENT_ACC_NOT_SYNCED|Siebel Systems
	// Parameterized text:
	//   CUIF_MSG_PARENT_ACC_NOT_SYNCED=""Parent Account '%1' not synced please Sync '%1' first.""
	//   
	// Result:
	//   ""Parent Account 'Siebel Systems' not synced please Sync 'Siebel Systems' first.""
	//
	// Warning!!!  The pipe '|' is the delimiter so if u have '|' in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""UAN"";
	var category = ""Genesis Error Messages"";
	var oMessage;
	
	/*if (Message.substring(0,3) != prefix)
		// Don't translate
		return (Message);*/
	
	var pieces = Message.split('|');
	var piecesLen = pieces.length;

	switch(piecesLen)
	{
		case 1:
			oMessage = TheApplication().LookupMessage (category, pieces[0]);
			break;
		case 2:
			oMessage = TheApplication().LookupMessage (category, pieces[0], pieces[1]);
			break;
		case 3:
			oMessage = TheApplication().LookupMessage (category, pieces[0], pieces[1], pieces[2]);
			break;
		case 4:
			oMessage = TheApplication().LookupMessage (category, pieces[0], pieces[1], pieces[2], pieces[3]);
			break;
		case 5:
			oMessage = TheApplication().LookupMessage (category, pieces[0], pieces[1], pieces[2], pieces[3], pieces[4]);
			break;
		case 6:
			oMessage = TheApplication().LookupMessage (category, pieces[0], pieces[1], pieces[2], pieces[3], pieces[4], pieces[5]);
			break;
		default:
			oMessage = TheApplication().LookupMessage (category, pieces[0], pieces[1], pieces[2], pieces[3], pieces[4], pieces[5]);
			break;
	}
	return (oMessage);
}
function WriteErrosToLog(Inputs, Outputs)
{
	var errorText=Inputs.GetProperty(""ErrorMessages"");
	var tm = Clib.localtime(Clib.time());
	var tmStr = Clib.asctime(tm);
	errorText= tmStr + "" : "" + errorText;
	var logFileName= Inputs.GetProperty(""LogFileName"");

	var fp = Clib.fopen(logFileName,""a"");
	if ( fp == null )
	{
		TheApplication().RaiseErrorText(""\aError opening file for reading.\n"");
	}
	else
	{
		Clib.fputs(errorText, fp);
	}
	Clib.fclose(fp);
}
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{

  /*
   *  The methods are intercepted in the following cases
   *  CopyQuote, CopyOrder, 
   *  ReviseCopyQuote, ReviseCopyOrder,ReviseCopyAgreement
   *
   *  However, QuoteToSalesOrder(when a quote is converted to an order)
   *  AutoAgreement,
   *  
	 */
	if (MethodName == ""Copy"")
	{
		var copyContext = Inputs.GetProperty(""CopySignalName"");
		if (copyContext == ""CopyQuote"" || 
		    copyContext == ""ReviseCopyQuote"" 
		   )
		{
			syncQuoteLineswithOracle(Inputs,Outputs);
		} 
		else if (copyContext == ""CopyOrder"" ||
		        copyContext == ""ReviseCopyOrder""
		         )
		{
			syncOrderLineswithOracle(Inputs,Outputs);
		}
		else if (copyContext == ""ReviseCopyAgreement"")
		{
		  syncAgreementLineswithOracle(Inputs,Outputs);
		}
	}
}
"
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
		return (ContinueOperation);
}
function syncAgreementLineswithOracle(Inputs, Outputs)
{

	var prodId = new Array ;
	var rootAgreementItemId = new Array;
	var sourceAgreementId = new Array;
	var sourceConfigHeader = new Array;
	var sourceConfigRevNbr = new Array;
	var svc1;
	var bOracleProduct;
	
	var sourceConfigHeader;
	var sourceConfigRevNbr
	
	var bo = TheApplication().GetBusObject(""Service Agreement"");
	var destAgreementId = Inputs.GetProperty(""RowId"");
	var bc = bo.GetBusComp(""FS Agreement Item"");

   //get the source configuration information
	try 
	{
		bc.ClearToQuery();
		
		var bcSearchStr = ""[Agreement Id] ='"" 

		bcSearchStr = bcSearchStr + destAgreementId 	                             	               
		bcSearchStr = bcSearchStr + ""'"";                             	               
		bcSearchStr = bcSearchStr + "" AND "" ;
		bcSearchStr = bcSearchStr + ""[Id]=[Root Agreement Item Id]""; //to check only for root items
		bc.SetSearchExpr(bcSearchStr);
		bc.ExecuteQuery();
		
		var countRecs = bc.CountRecords();
		var i = 0;
		
		var isOCPi = TheApplication().NewPropertySet();
		var isOCPo = TheApplication().NewPropertySet();
		var bOracleProduct;
		var isOCPSvc;

		
		if (bc.FirstRecord())
		{
			do 
			{
				var productId = bc.GetFieldValue(""Product Id"");
				
				isOCPi.SetProperty(""BusCompName"",bc.Name())
				isOCPi.SetProperty(""ProductId"",productId);
					
				isOCPSvc = TheApplication().GetService(""CZSessionManagement"");
				isOCPSvc.InvokeMethod(""IsOracleConfigurableProduct"", isOCPi, isOCPo);
		
				bOracleProduct = isOCPo.GetProperty(""IsOracleProduct"");

				if (bOracleProduct==""true"")
				{					
					prodId[i] = bc.GetFieldValue(""Root Product Id"");
					rootAgreementItemId[i] = bc.GetFieldValue(""Root Agreement Item Id"");
					sourceAgreementId[i] = bc.GetFieldValue(""Agreement Id"")
					sourceConfigHeader[i] =  bc.GetFieldValue(""External Configurator Reference 1"");
					sourceConfigRevNbr[i] = bc.GetFieldValue(""External Configurator Reference 2"");
					i++;
				}
			} while(bc.NextRecord())
		}

	 	
	    // update the rows		 	    
	    for (var k = 0; k< prodId.length; k++)
	    { 
			var indata1 =TheApplication().NewPropertySet ();
			var outdata1 = TheApplication().NewPropertySet ();
			indata1.SetProperty (""RootItemId"", rootAgreementItemId[k]);
			indata1.SetProperty (""QuoteorOrderorAgreementId"", destAgreementId);
			indata1.SetProperty(""SourceConfigHeader"",sourceConfigHeader[k]);
			indata1.SetProperty(""SourceConfigRevNbr"",sourceConfigRevNbr[k]);
			indata1.SetProperty(""BusinessObject"",bo.Name());					
			indata1.SetProperty(""BusinessComponent"",bc.Name());
			
			var svc1 = TheApplication().GetService(""CZIntegCopyConfigService"");
			svc1.InvokeMethod(""CopyOracleConfiguration"", indata1, outdata1);
	
	    }
	}
	catch  (e) 
	{
	  TheApplication().RaiseErrorText(e.toString());
	//	TheApplication().Trace(e.toString());
		throw e;
	}
	finally
	{
			indata1 = null;
			outdata1 = null
			svc1 = null;
		  bOracleProduct = null;
			isOCPi = null;
			isOCPo = null;
			isOCPSvc = null;
			sourceConfigHeader = null;
			sourceConfigRevNbr = null;
			destAgreementId  = null;
			bo = null;
			bc = null;;
			prodId = null;
			rootAgreementItemId = null;
			sourceAgreementId =  null;
			sourceConfigHeader = null;
			sourceConfigRevNbr = null;
	}
  }
function syncOrderLineswithOracle(Inputs, Outputs)
{

 	var prodId = new Array ;
	var rootOrderItemId = new Array;
	var sourceOrderId = new Array;
    var sourceConfigHeader = new Array;
    var sourceConfigRevNbr = new Array;

	var svc1;
	var bOracleProduct;
 
	var sourceConfigHeader;
	var sourceConfigRevNbr

	var searchSpec = Inputs.GetProperty(""SearchSpec"");
	var destOrderId = Inputs.GetProperty(""RowId"");
	var bo = TheApplication().GetBusObject(""Order Entry"");
	var bc = bo.GetBusComp(""Order Entry - Line Items"");

   //get the source configuration information
	try 
	{
		bc.ClearToQuery();
		
		var bcSearchStr = ""[Order Header Id] ='"" 
		/*bcSearchStr = bcSearchStr + 
		              searchSpec.substring(searchSpec.indexOf(""'"") +1,
		                     	               searchSpec.lastIndexOf(""'""))*/
		bcSearchStr = bcSearchStr + destOrderId 	                             	               
		bcSearchStr = bcSearchStr + ""'"";                             	               
		bcSearchStr = bcSearchStr + "" AND "" ;
		bcSearchStr = bcSearchStr + ""[IsRootItem] = 'Y'"";
		bc.SetSearchExpr(bcSearchStr);
		bc.ExecuteQuery();
		
		var countRecs = bc.CountRecords();
		var i = 0;
		
	  	var isOCPi = TheApplication().NewPropertySet();
    		var isOCPo = TheApplication().NewPropertySet();
	    	var bOracleProduct;
	    	var isOCPSvc;
		
		if (bc.FirstRecord())
		{
			do 
			{
								
				var productId = bc.GetFieldValue(""Product Id"");
				
				isOCPi.SetProperty(""BusCompName"",bc.Name())
				isOCPi.SetProperty(""ProductId"",productId);
					
				isOCPSvc = TheApplication().GetService(""CZSessionManagement"");
				isOCPSvc.InvokeMethod(""IsOracleConfigurableProduct"", isOCPi, isOCPo);
		
				bOracleProduct = isOCPo.GetProperty(""IsOracleProduct"");

				if (bOracleProduct == ""true"")
				{					
					prodId[i] = bc.GetFieldValue(""Root Product Id"");
					rootOrderItemId[i] = bc.GetFieldValue(""Root Order Item Id"");
					sourceOrderId[i] = bc.GetFieldValue(""Order Header Id"")
					sourceConfigHeader[i] =  bc.GetFieldValue(""External Configurator Reference 1"");
					sourceConfigRevNbr[i] = bc.GetFieldValue(""External Configurator Reference 2"");
					i++;
				}
			} while(bc.NextRecord())
		}

	 	
	    // update the rows		 	    
	    for (var k = 0; k< prodId.length; k++)
	    { 
			var indata1 =TheApplication().NewPropertySet ();
			var outdata1 = TheApplication().NewPropertySet ();
			indata1.SetProperty (""RootItemId"", rootOrderItemId[k]);
			indata1.SetProperty (""QuoteorOrderorAgreementId"", destOrderId);
			indata1.SetProperty(""SourceConfigHeader"",sourceConfigHeader[k]);
			indata1.SetProperty(""SourceConfigRevNbr"",sourceConfigRevNbr[k]);
			indata1.SetProperty(""BusinessObject"",bo.Name());					
			indata1.SetProperty(""BusinessComponent"",bc.Name());
			
			var svc1 = TheApplication().GetService(""CZIntegCopyConfigService"");
			svc1.InvokeMethod(""CopyOracleConfiguration"", indata1, outdata1);
	
	    }
  	}
	catch  (e) 
	{
		TheApplication().RaiseErrorText(e.toString());
	//	TheApplication().Trace(e.toString());
		throw e;
	}
	finally
	{
		indata1 = null;
		outdata1 = null
		svc1 = null;
  			bOracleProduct = null;
		isOCPi = null;
		isOCPo = null;
		isOCPSvc = null;
		sourceConfigHeader = null;
		sourceConfigRevNbr = null;
		searchSpec  = null;
		destOrderId  = null;
		bo = null;
		bc = null;;
		prodId = null;
		rootOrderItemId = null;
		sourceOrderId =  null;
		sourceConfigHeader = null;
		sourceConfigRevNbr = null;
	}
  }
function syncQuoteLineswithOracle(Inputs, Outputs)
{

	var prodId = new Array ;
	var rootQuoteItemId = new Array;
	var sourceQuoteId = new Array;
	var sourceConfigHeader = new Array;
	var sourceConfigRevNbr = new Array;
	
	var svc1;
	var bOracleProduct;
	
	var sourceConfigHeader;
	var sourceConfigRevNbr
	
	var searchSpec = Inputs.GetProperty(""SearchSpec"");
	var destQuoteId = Inputs.GetProperty(""RowId"");
	var bo = TheApplication().GetBusObject(""Quote"");
	var bc = bo.GetBusComp(""Quote Item"");

   //get the source configuration information
	try 
	{
		bc.ClearToQuery();
		
		var bcSearchStr = ""[Quote Id] ='"" 
		/*bcSearchStr = bcSearchStr + 
		              searchSpec.substring(searchSpec.indexOf(""'"") +1,
		                     	               searchSpec.lastIndexOf(""'""))*/
		bcSearchStr = bcSearchStr + destQuoteId 	                             	               
		bcSearchStr = bcSearchStr + ""'"";                             	               
		bcSearchStr = bcSearchStr + "" AND "" ;
		bcSearchStr = bcSearchStr + ""[IsRootItem] = 'Y'"";
		bc.SetSearchExpr(bcSearchStr);
		bc.ExecuteQuery();
		
		var countRecs = bc.CountRecords();
		var i = 0;
		
		var isOCPi = TheApplication().NewPropertySet();
		var isOCPo = TheApplication().NewPropertySet();
		var bOracleProduct;
		var isOCPSvc;

		
		if (bc.FirstRecord())
		{
			do 
			{
										
				var productId = bc.GetFieldValue(""Product Id"");
				
				isOCPi.SetProperty(""BusCompName"",bc.Name())
				isOCPi.SetProperty(""ProductId"",productId);
					
				isOCPSvc = TheApplication().GetService(""CZSessionManagement"");
				isOCPSvc.InvokeMethod(""IsOracleConfigurableProduct"", isOCPi, isOCPo);
		
				bOracleProduct = isOCPo.GetProperty(""IsOracleProduct"");

				if (bOracleProduct == ""true"")
				{					
					prodId[i] = bc.GetFieldValue(""Root Product Id"");
					rootQuoteItemId[i] = bc.GetFieldValue(""Root Quote Item Id"");
					sourceQuoteId[i] = bc.GetFieldValue(""Quote Id"")
					sourceConfigHeader[i] =  bc.GetFieldValue(""External Configurator Reference 1"");
					sourceConfigRevNbr[i] = bc.GetFieldValue(""External Configurator Reference 2"");
					i++;
				}
			} while(bc.NextRecord())
		}

	 	
    // update the rows		 	    
    for (var k = 0; k< prodId.length; k++)
    { 
		var indata1 =TheApplication().NewPropertySet ();
		var outdata1 = TheApplication().NewPropertySet ();
		indata1.SetProperty (""RootItemId"", rootQuoteItemId[k]);
		indata1.SetProperty (""QuoteorOrderorAgreementId"", destQuoteId);
		indata1.SetProperty(""SourceConfigHeader"",sourceConfigHeader[k]);
		indata1.SetProperty(""SourceConfigRevNbr"",sourceConfigRevNbr[k]);
		indata1.SetProperty(""BusinessObject"",bo.Name());					
		indata1.SetProperty(""BusinessComponent"",bc.Name());
		
		var svc1 = TheApplication().GetService(""CZIntegCopyConfigService"");
		svc1.InvokeMethod(""CopyOracleConfiguration"", indata1, outdata1);
				
	    }
	}
	catch  (e) 
	{
	  TheApplication().RaiseErrorText(e.toString());
	//	TheApplication().Trace(e.toString());
		throw e;
	}
	finally
	{

			indata1 = null;
			outdata1 = null
			svc1 = null;
	  	bOracleProduct = null;
			isOCPi = null;
			isOCPo = null;
			isOCPSvc = null;
			sourceConfigHeader = null;
			sourceConfigRevNbr = null;
			searchSpec  = null;
			destQuoteId  = null;
			bo = null;
			bc = null;
			prodId = null;
			rootQuoteItemId = null;
			sourceQuoteId =  null;
			sourceConfigHeader = null;
			sourceConfigRevNbr = null;

	}
  }
"var existingRootItems = new Array;

//when saving as a favorite, the process of obtaining the
//destination quote is slightly different - it is
//not available in the input property set
//get the source fro quote bo, and
//get the destination from template header bc



//when there are existing items in a quote or an order
//we need to keep track of those items so we do not
//run copy config on existing line items







"
"//this is a compare function need to sort
//the elements in the existing items array
//so that a binary search can be performed to
//see if copy config needs to be called
//on existing items.
function ListCompareFunction(Item1, Item2)
{
  var val1= Item1;
  var val2= Item2;
  return Clib.strcmpi(Item1,Item2);
}
"
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{

  //For saving as favorites,
  //quote and order are both stored in 
  //S_DOC_QUOTE(header) and S_QUOTE_ITEM(line item).  Therefore the same
  //routine should work fine.

  if (MethodName == ""SaveAsTemplate"") // this saving as favorites
  {
    syncFavQuoteTemplateLineswithOracle(Inputs, Outputs);
  }
  //restoring from favorites
  //either adding from individual lines or adding all the lines
  else if (MethodName = ""OrderTemplate"" || MethodName == ""OrderTemplateSelectItems"") //restoring from favorites
  {
	   syncTargetLineswithOracle(Inputs, Outputs);
  }

  

	return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
  
  //when there are existing items in a quote or an order
  //we need to keep track of those items so we do not
  //run copy config on existing line items 
  
  if (MethodName == ""OrderTemplate"" || MethodName == ""OrderTemplateSelectItems"") // on restoring from Favourites
  {
    var SysPrefName =  ""Enable AIA OrderToCash"";
    var SysPrefVal;
    var SysPrefBo = TheApplication().GetBusObject(""System Preferences"");
    var SysPrefBc = SysPrefBo.GetBusComp(""System Preferences"");
    SysPrefBc.ClearToQuery();
    SysPrefBc.ActivateField(""Value"");
    SysPrefBc.SetViewMode(AllView);
    SysPrefBc.SetSearchSpec(""Name"", SysPrefName);
    SysPrefBc.ExecuteQuery( ForwardOnly );

    if (SysPrefBc.FirstRecord())
    {
        SysPrefVal = SysPrefBc.GetFieldValue(""Value"");
    }
    if(SysPrefVal == ""TRUE"")
    {
        storeAllexistingRootItems(Inputs,Outputs)
    }    
  }
  
   return (ContinueOperation);
}
function getDestOrderorQuoteId(Inputs, Outputs)
{

	try
	{
		var destId;
		
		 //template name is unique, so querying by template
		 //name should be good.		
		var sourceName = Inputs.GetProperty(""TemplateName"");
		
		//saving from either quotes or orders as favorites uses
		//the same business objects and business components
		var templatebo = TheApplication().GetBusObject(""Quote"");
		var templatebc = templatebo.GetBusComp(""Quote Catalog - Template Header"");

		var templateSearch = ""[Name] = '"" + sourceName + ""'"";
		templateSearch = templateSearch + "" AND "" ;
		templateSearch = templateSearch + ""[Quote Type] = 'Template'"";
		
		templatebc.ClearToQuery();
		templatebc.SetSearchExpr(templateSearch);
		templatebc.ExecuteQuery();
	
		var countRecs = templatebc.CountRecords();
		if (templatebc.FirstRecord())
		{
			destId = templatebc.GetFieldValue(""Quote Number"");
		}
		
		return destId;
	}
	catch  (e) 
	{
	//	TheApplication().Trace(e.toString());
		throw e;
	}
	finally
	{
		 countRecs = null;
		 templatebo = null;
		 templatebc=null;
		 templateSearch = null;
	}

	
}
function storeAllexistingRootItems(Inputs, Outputs)
{
	var prodId = new Array ;
	var srcrootQuoteorOrderItemId = new Array;
	var sourceConfigHeader = new Array;
	var sourceConfigRevNbr = new Array;
	
	var svc1;
	var bOracleProduct;
	
	var sourceConfigHeader;
	var sourceConfigRevNbr
	var srcQuoteorOrderId = Inputs.GetProperty(""TargetRowId"");
	
	var bo;
	var bc;
	var fromBusComp;
	var fromBusObj;
	var bcSearchStr
	var rootItemIdColName;
    
   //get the source configuration information
	try 
	{
	
 	 fromBusComp = Inputs.GetProperty(""FromBusCompName"");

  	if (fromBusComp == ""Quote"")
  	{
			bo = TheApplication().GetBusObject(""Quote"");
			bc = bo.GetBusComp(""Quote Item"");
			bcSearchStr = ""[Quote Id] ='"" ;
			rootItemIdColName = ""Root Quote Item Id"";
	  }
	  else 
	  {
	  	bo = TheApplication().GetBusObject(""Order Entry"");
	  	bc = bo.GetBusComp(""Order Entry - Line Items""); 
	  	bcSearchStr = ""[Order Header Id] ='"";
			rootItemIdColName = ""Root Order Item Id"";
	  }
		 
		bc.ClearToQuery();

		bcSearchStr = bcSearchStr + srcQuoteorOrderId;
		bcSearchStr = bcSearchStr + ""'"";                             	               
		bcSearchStr = bcSearchStr + "" AND "" ;
		bcSearchStr = bcSearchStr + ""[IsRootItem] = 'Y'"";
		bc.SetSearchExpr(bcSearchStr);
		bc.ExecuteQuery();
		
		var countRecs = bc.CountRecords();
		var i = 0;
		
		var isOCPi = TheApplication().NewPropertySet();
		var isOCPo = TheApplication().NewPropertySet();
		var bOracleProduct;
		var isOCPSvc;
		
		//collect all existing items
		if (bc.FirstRecord())
		{
			do 
			{
							
				var productId = bc.GetFieldValue(""Product Id"");
			
				isOCPi.SetProperty(""BusCompName"",""Template Item"")
				isOCPi.SetProperty(""ProductId"",productId);
				
				var isOCPSvc = TheApplication().GetService(""CZSessionManagement"");
				isOCPSvc.InvokeMethod(""IsOracleConfigurableProduct"", isOCPi, isOCPo);
	
				bOracleProduct = isOCPo.GetProperty(""IsOracleProduct"");
	
				if (bOracleProduct == ""true"")
				{					
					existingRootItems[i] = bc.GetFieldValue(rootItemIdColName);
					i++;
				}
			} while(bc.NextRecord())
		}
	}
	catch (e) 
	{
	//	TheApplication().Trace(e.toString());
	  TheApplication().RaiseErrorText(e.toString());
		throw e;
	}
	finally
	{
		bOracleProduct = null;
		bcSearchStr = null;
		bo = null;
		bc = null;
	}
	 	 
}
"//this routine gets executed when
//saving an order or quote as a favorite.
function syncFavQuoteTemplateLineswithOracle(Inputs, Outputs)
{

	var prodId = new Array ;
	var rootQuoteItemId = new Array;
	var sourceConfigHeader = new Array;
	var sourceConfigRevNbr = new Array;
	
	var svc1;
	var bOracleProduct;
	
	var sourceConfigHeader;
	var sourceConfigRevNbr
	var destQuoteId;
	
	var bo;
	var bc;
	  
	  //get the source configuration information
	try 
	{
	
		var bo = TheApplication().GetBusObject(""Quote"");
		var bc = bo.GetBusComp(""Quote Item"");
	
	   //get the destination quote id by looking up
	   //templates(favorites) by its name.  Names are
	   //unique and we should be ok here.	
	  	destQuoteId = getDestOrderorQuoteId(Inputs, Outputs)
	
		bc.ClearToQuery();
		
		var bcSearchStr = ""[Quote Id] ='"" 
		bcSearchStr = bcSearchStr + destQuoteId 	                             	               
		bcSearchStr = bcSearchStr + ""'"";                             	               
		bcSearchStr = bcSearchStr + "" AND "" ;
		bcSearchStr = bcSearchStr + ""[IsRootItem] = 'Y'"";
		bc.SetSearchExpr(bcSearchStr);
		bc.ExecuteQuery();
		
		var countRecs = bc.CountRecords();
		var i = 0;
		
		//get all the records for which copy config needs
		//to be called.  Get only the root, the two columns,
		//External Configurator Reference 1 and 
		//External Configurator Reference 2 will have the
		//same values anyway for all the lines in a particular
		//quote/order
	
	    var isOCPi = TheApplication().NewPropertySet();
	    var isOCPo = TheApplication().NewPropertySet();
	    var bOracleProduct;
	    var isOCPSvc;
	    
		if (bc.FirstRecord())
		{
			do 
			{
							
				var productId = bc.GetFieldValue(""Product Id"");
			
				isOCPi.SetProperty(""BusCompName"",""Template Item"")
				isOCPi.SetProperty(""ProductId"",productId);
				
				isOCPSvc = TheApplication().GetService(""CZSessionManagement"");
				isOCPSvc.InvokeMethod(""IsOracleConfigurableProduct"", isOCPi, isOCPo);
	
				bOracleProduct = 		isOCPo.GetProperty(""IsOracleProduct"");
	
				if (bOracleProduct==""true"")
				{					
					prodId[i] = bc.GetFieldValue(""Root Product Id"");
					rootQuoteItemId[i] = bc.GetFieldValue(""Root Quote Item Id"");
					sourceConfigHeader[i] =  bc.GetFieldValue(""External Configurator Reference 1"");
					sourceConfigRevNbr[i] = bc.GetFieldValue(""External Configurator Reference 2"");
					i++;
				}
			} while(bc.NextRecord())
		}
	
	 	
		
	   // update the rows		 	    
	   for (var k = 0; k< prodId.length; k++)
	   { 
				var indata1 =TheApplication().NewPropertySet ();
				var outdata1 = TheApplication().NewPropertySet ();
				indata1.SetProperty (""RootItemId"", rootQuoteItemId[k]);
				indata1.SetProperty (""QuoteorOrderorAgreementId"", destQuoteId);
				indata1.SetProperty(""SourceConfigHeader"",sourceConfigHeader[k]);
				indata1.SetProperty(""SourceConfigRevNbr"",sourceConfigRevNbr[k]);
				indata1.SetProperty(""BusinessObject"",bo.Name());					
				indata1.SetProperty(""BusinessComponent"",bc.Name());
				
				var svc1 = TheApplication().GetService(""CZIntegCopyConfigService"");
				svc1.InvokeMethod(""CopyOracleConfiguration"", indata1, outdata1);
				
	    }
	}
	catch  (e) 
	{
	//	TheApplication().Trace(e.toString());
		TheApplication().RaiseErrorText(e.toString());
		throw e;
	}
	finally
	{
	
		indata1 = null;
		outdata1 = null
		svc1 = null;
		bOracleProduct = null;
		isOCPi = null;
		isOCPo = null;
		isOCPSvc = null;
		sourceConfigHeader = null;
		sourceConfigRevNbr = null;
		destQuoteId  = null;
		bo = null;
		bc = null;
		prodId = null;
		rootQuoteItemId = null;
		sourceConfigHeader = null;
		sourceConfigRevNbr = null;

	}
  }
"//this routine gets executed when
//retoring a favorite into an order or quote 
function syncTargetLineswithOracle(Inputs, Outputs)
{

		var prodId = new Array ;
		var rootQuoteorOrderItemId = new Array;
		var sourceConfigHeader = new Array;
		var sourceConfigRevNbr = new Array;
		
		
				  
    var destQuoteorOrderId = Inputs.GetProperty(""TargetRowId"");	                       

		var svc1;
		var bOracleProduct;
		
		var sourceConfigHeader;
		var sourceConfigRevNbr
		var bo;
		var bc;
		var fromBusComp;
		var fromBusObj;
		var bcSearchStr;
		var rootItemIdColName;

    //get the target configuration information
		try 
		{
		
		  fromBusObj = Inputs.GetProperty(""FromBusObjName"");
			fromBusComp = Inputs.GetProperty(""FromBusCompName"");

			if (fromBusComp == ""Quote"")
	  	{
				bo = TheApplication().GetBusObject(""Quote"");
				bc = bo.GetBusComp(""Quote Item"");
				bcSearchStr = ""[Quote Id] ='"" ;
				rootItemIdColName = ""Root Quote Item Id"";
		  }
		  else 
		  {
		  	bo = TheApplication().GetBusObject(""Order Entry (Sales)"");
		  	bc = bo.GetBusComp(""Order Entry - Line Items""); 
		  	bcSearchStr = ""[Order Header Id] ='"";
				rootItemIdColName = ""Root Order Item Id"";
		  }

			bc.ClearToQuery();
			
			bcSearchStr = bcSearchStr + destQuoteorOrderId 	                             	               
			bcSearchStr = bcSearchStr + ""'"";                             	               
			bcSearchStr = bcSearchStr + "" AND "" ;
			bcSearchStr = bcSearchStr + ""[IsRootItem] = 'Y'"";
			bc.SetSearchExpr(bcSearchStr);
			bc.ExecuteQuery();
			
			var countRecs = bc.CountRecords();
			var i = 0;
			
			var isOCPi = TheApplication().NewPropertySet();
			var isOCPo = TheApplication().NewPropertySet();
			var bOracleProduct ;
			var isOCPSvc;
	  	    
			if (bc.FirstRecord())
			{
				do 
				{
								
					var productId = bc.GetFieldValue(""Product Id"");
					
					isOCPi.SetProperty(""BusCompName"",bc.Name())
					isOCPi.SetProperty(""ProductId"",productId);
						
					isOCPSvc = TheApplication().GetService(""CZSessionManagement"");
					isOCPSvc.InvokeMethod(""IsOracleConfigurableProduct"", isOCPi, isOCPo);
			
					bOracleProduct = isOCPo.GetProperty(""IsOracleProduct"");

					if (bOracleProduct == ""true"")
					{			

						//check to see if this is a newly added item
						//existing items are stored in the array existingRootItems
						
						var rootItemId = bc.GetFieldValue(rootItemIdColName);
						Clib.qsort(existingRootItems, ListCompareFunction);
						var found = Clib.bsearch(rootItemId,existingRootItems,ListCompareFunction)
						
						//only if this was not existing and was newly 
						//added when selected from favorites
						
						if (found == null)
						{
							prodId[i] = bc.GetFieldValue(""Root Product Id"");
							rootQuoteorOrderItemId[i] = bc.GetFieldValue(rootItemIdColName);
							sourceConfigHeader[i] =  bc.GetFieldValue(""External Configurator Reference 1"");
							sourceConfigRevNbr[i] = bc.GetFieldValue(""External Configurator Reference 2"");
							i++;
						}
					}
				} while(bc.NextRecord())
			}
	
		 	
		 	for (var l = 0; l< existingRootItems.length; l++)
		 	{
		 	  existingRootItems[i]= null;
		 	}
		 	
			// update the rows		 	    
			for (var k = 0; k< prodId.length; k++)
			{ 
				var indata1 =TheApplication().NewPropertySet ();
				var outdata1 = TheApplication().NewPropertySet ();
				indata1.SetProperty (""RootItemId"", rootQuoteorOrderItemId[k]);
				indata1.SetProperty (""QuoteorOrderorAgreementId"", destQuoteorOrderId);
				indata1.SetProperty(""SourceConfigHeader"",sourceConfigHeader[k]);
				indata1.SetProperty(""SourceConfigRevNbr"",sourceConfigRevNbr[k]);
				indata1.SetProperty(""BusinessObject"",bo.Name());					
				indata1.SetProperty(""BusinessComponent"",bc.Name());
				
				var svc1 = TheApplication().GetService(""CZIntegCopyConfigService"");
				svc1.InvokeMethod(""CopyOracleConfiguration"", indata1, outdata1);
			
			}
	    }
		catch  (e) 
		{
		//	TheApplication().Trace(e.toString());
		 	TheApplication().RaiseErrorText(e.toString());
			throw e;
		}
		finally
		{

			indata1 = null;
			outdata1 = null
			svc1 = null;
			svc1 = null;
	  	bOracleProduct = null;
			isOCPi = null;
			isOCPo = null;
			isOCPSvc = null;
			sourceConfigHeader = null;
			sourceConfigRevNbr = null;
			destQuoteorOrderId  = null;
			bo = null;
			bc = null;
			prodId = null;
			rootQuoteorOrderItemId = null;
			sourceConfigHeader = null;
			sourceConfigRevNbr = null;
		  fromBusComp = null;
		  fromBusObj = null;
		  bcSearchStr = null;
		  rootItemIdColName=null;
	
		}
  }
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{
	if (MethodName == ""ISS_TIME"") {		
	}	
		
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if (MethodName == ""iss_predelete"") {
		TheApplication().SetProfileAttr (""IDS_PREDELETE"", Inputs.GetProperty (""XML String""));		
		TheApplication().SetProfileAttr (""IDS_IDT"", """");
		TheApplication().SetProfileAttr (""IDS_SYSTEM"", """");
		TheApplication().SetProfileAttr (""IDS_IO_NAME"", """");
		TheApplication().SetProfileAttr (""IDS_LOADFILE"", """");
		TheApplication().SetProfileAttr (""IDS_PAGE_SIZE"", """");
		TheApplication().SetProfileAttr (""IDS_IO_ID"", """");
		TheApplication().SetProfileAttr (""IDS_URL"", """");
						
		return (CancelOperation);
	}  else if (MethodName == ""iss_prewrite"") {
		TheApplication().SetProfileAttr (""IDS_PREWRITE"", Inputs.GetProperty (""XML String""));		
		TheApplication().SetProfileAttr (""IDS_IDT"", """");
		TheApplication().SetProfileAttr (""IDS_SYSTEM"", """");
		TheApplication().SetProfileAttr (""IDS_IO_NAME"", """");
		TheApplication().SetProfileAttr (""IDS_LOADFILE"", """");
		TheApplication().SetProfileAttr (""IDS_PAGE_SIZE"", """");
		TheApplication().SetProfileAttr (""IDS_IO_ID"", """");
		TheApplication().SetProfileAttr (""IDS_URL"", """");
						
		return (CancelOperation);
	}  else if (MethodName == ""iss_reset"") {
		TheApplication().SetProfileAttr (""IDS_IDT"", """");
		TheApplication().SetProfileAttr (""IDS_SYSTEM"", """");
		TheApplication().SetProfileAttr (""IDS_IO_NAME"", """");
		TheApplication().SetProfileAttr (""IDS_LOADFILE"", """");
		TheApplication().SetProfileAttr (""IDS_PAGE_SIZE"", """");
		TheApplication().SetProfileAttr (""IDS_PREDELETE"", """");
		TheApplication().SetProfileAttr (""IDS_PREWRITE"", """");
		TheApplication().SetProfileAttr (""IDS_IO_ID"", """");
		TheApplication().SetProfileAttr (""IDS_URL"", """");
		
		return (CancelOperation);
	}
	
	return (ContinueOperation);
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// CREATOR		:	CAROLINE M.
// LAST UPDATED	:	12/28/2000
//
// DESCRIPTION
//    Javascript maps from Oracle Organization to Siebel Inventory Location
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyIntegrationObjectData (OracleIntObject, SiebelIntObject)
{
	var OracleOrgIntComp, SiebelInvLocIntComp;

	OracleOrgIntComp = OracleIntObject.GetPrimaryIntComp (""SIE_INVLOC_V"");

	if (OracleOrgIntComp.Exists ())
	{
		// INVENTORY LOCATION

		SiebelInvLocIntComp = SiebelIntObject.CreatePrimaryIntComp (""FS Inventory Location OraCon"");

		while (OracleOrgIntComp.NextRecord ())
		{
			 
			 
				SiebelInvLocIntComp.NewRecord ();
				SiebelInvLocIntComp.SetCopySource (OracleOrgIntComp);
				
				SiebelInvLocIntComp.CopyFieldValue (""Integration Id"", ""ORGANIZATION_ID"");
				SiebelInvLocIntComp.CopyFieldValue (""Inventory Name"",""NAME"");
				SiebelInvLocIntComp.SetFieldValue (""Inventory Type"",  ""Warehouse"");
			 
			
			// ORGANIZATION
			
			var SiebelOrgIntComp = SiebelInvLocIntComp.CreateIntComp(""FS Inventory Location OraCon_Organization"");
			
			 
			 
				SiebelOrgIntComp.NewRecord ();
				SiebelOrgIntComp.SetCopySource (OracleOrgIntComp);
				SiebelOrgIntComp.CopyFieldValue (""Organization Integration Id"", ""OPERATING_UNIT"");
				SiebelOrgIntComp.SetFieldValue (""IsPrimaryMVG"",""Y"");
			 
						
		}
	}
	else
	{
		EAIRaiseError(TranslateMessage(
			""ORA_MSG_MISSING_COMPONENT,SIE_INVLOC_V,InvLoc  - Get Oracle Org (Oracle)""));
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created by Richard Exley - November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
"
function UpsertSiebelInvLoc (InputMsg, OutputMsg)
{
	var SiebelIntObject;
	var OracleIntObject;

	OracleIntObject = InputMsg.GetIntObj(""InvLoc - Get Oracle Org (Oracle)"");

	if (OracleIntObject.Exists ())
	{
		SiebelIntObject = OutputMsg.CreateIntObj (""InvLoc - Get Oracle Org (Siebel)"");

		while (OracleIntObject.NextInstance ())
		{
			SiebelIntObject.NewInstance ();

			CopyIntegrationObjectData (OracleIntObject, SiebelIntObject);
		}
	}
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// CREATOR		:	CAROLINE M.
// LAST UPDATED	:	12/28/2000
//
// DESCRIPTION
//    Javascript maps from Oracle Organization to Siebel Inventory Location
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyIntegrationObjectData (OracleIntObject, SiebelIntObject)
{
	var OracleOrgIntComp, SiebelInvLocIntComp;

	OracleOrgIntComp = OracleIntObject.GetPrimaryIntComp (""SIE_INVLOC_V"");

	if (OracleOrgIntComp.Exists ())
	{
		// INVENTORY LOCATION

		SiebelInvLocIntComp = SiebelIntObject.CreatePrimaryIntComp (""FS Inventory Location OraCon"");

		while (OracleOrgIntComp.NextRecord ())
		{
			 
			 
				SiebelInvLocIntComp.NewRecord ();
				SiebelInvLocIntComp.SetCopySource (OracleOrgIntComp);
				
				SiebelInvLocIntComp.CopyFieldValue (""Integration Id"", ""ORGANIZATION_ID"");
				SiebelInvLocIntComp.CopyFieldValue (""Inventory Name"",""NAME"");
				SiebelInvLocIntComp.SetFieldValue (""Inventory Type"",  ""Warehouse"");
		 
			
			// ORGANIZATION
			
			var SiebelOrgIntComp = SiebelInvLocIntComp.CreateIntComp(""FS Inventory Location OraCon_Organization"");
			
			 
		 
				SiebelOrgIntComp.NewRecord ();
				SiebelOrgIntComp.SetCopySource (OracleOrgIntComp);
				SiebelOrgIntComp.CopyFieldValue (""Organization Integration Id"", ""OPERATING_UNIT"");
				SiebelOrgIntComp.SetFieldValue (""IsPrimaryMVG"",""Y"");
		 
						
		}
	}
	else
	{
		EAIRaiseError(TranslateMessage(
			""ORA_MSG_MISSING_COMPONENT,SIE_INVLOC_V,InvLoc  - Get Oracle Org (Oracle)""));
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created by Richard Exley - November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
"
function UpsertSiebelInvLoc (InputMsg, OutputMsg)
{
	var SiebelIntObject;
	var OracleIntObject;

	OracleIntObject = InputMsg.GetIntObj(""InvLoc - Get Oracle11i Org (Oracle)"");

	if (OracleIntObject.Exists ())
	{
		SiebelIntObject = OutputMsg.CreateIntObj (""InvLoc - Get Oracle11i Org (Siebel)"");

		while (OracleIntObject.NextInstance ())
		{
			SiebelIntObject.NewInstance ();

			CopyIntegrationObjectData (OracleIntObject, SiebelIntObject);
		}
	}
}
"// (declarations)

// List of hardcoded strings

// IO Identifiers
var mstrOutputIOName                            = ""LSMCSetAllocatedExpenseItem"";
var mstrOutputTypeListOfExpenseItems            = ""ListOfLSMCSetAllocatedExpenseItem"";
var mstrOutputTypeExpenseItem                   = ""Expense Item"";

var mstrTypeListOfExpenseItemEmployees          = ""ListOfLS MC Employee Expense Item"";
var mstrTypeListOfExpenseItemContacts           = ""ListOfLS MC Contact Expense Item"";
var mstrTypeListOfBudgetContacts                = ""ListOfLS MC Budget Contact"";
var mstrTypeListOfExpenseItemContactAllocations = ""ListOfLS MC Contact Expense Item Allocation"";

var mstrTypeExpenseItemContactAllocation        = ""LS MC Contact Expense Item Allocation"";

// BC [LS MC Contact Expense Item Allocation]
var mstrPropertyAllocatedAmount                 = ""Allocated Amount"";
var mstrPropertyDescription                     = ""Description"";
var mstrPropertyReportingState                  = ""Reporting State"";

// BC [LS MC Budget Contact]
var mstrPropertyBudgetState                     = ""Budget State"";

// BC [Expense Item]
var mstrPropertyAllocationDate                  = ""LS MC Allocation Date"";
var mstrPropertyAllocationStatusCode            = ""LS MC Allocation Status Code"";
var mstrPropertyTransactionState                = ""LS MC Transaction State"";
var mstrPropertyComplianceFlag                  = ""LS MC Compliance Flag"";
var mstrPropertyConvertedAmount                 = ""Amount"";
var mstrPropertyExpenseItemType                 = ""Expense Item Type"";
var mstrPropertyExchangeRate                    = ""Exchange Rate""

// Texts for Allocation Status (Have to be kept in synch with the LICs 
// of the LOV Type ""LS_MC_STATUS"")
var mstrLICAllocated                            = ""Allocated"";
var mstrLICNoAllocationNeeded                   = ""Allocation Not Needed"";
var mstrLICNotAllocated                         = ""Not Allocated"";

// Texts for Allocation Description (not through LOV)
var mstrDescNoAllocationDefined                 = ""No Allocation rules defined for this state"";
var mstrDescAllocationPerformed                 = ""Allocation performed"";
var mstrDescAllocationNotNeeded                 = ""No Alocation required"";"
function AllocateExpenseItem (oPSInExpenseItem, oPSOutExpenseItem)
{
 // =======================================================================
 // Purpose:   Performs the allocation of expenses to contacts in accordance with
 //            Marketing Compliance for Pharmaceutical companies
 // =======================================================================
 // I M P O R T A N T   N O T E :
 // Please read the comment in Disclaimer()
 // =======================================================================
 // Arguments:
 //  Inputs - Propertyset with the following structure
 //
 //    Type = <ExpenseItem>
 //       p[LS MC Compliance Flag]    = Y -> A Compliance relevant expense
 //                                     N -> Not a compliance relevant expense
 //       p[Converted Amount]         = Amount to be expensed
 //       p[Expense Item Type]        = Type of the item (only evaluated whether ""Gift"" or not)
 //       p[LS MC Transaction State]  = two kletter code of the state of the transaction (not evaluated)
 //       p[...]                      = other (not evaluated) properties
 //       ChildPS[0.0.0.0] Type = <ListOfExpenseItemContacts>
 //          ChildPS[0.0.0.0.0] Type = <ExpenseItemContact>
 //             p[...]      = other (not evaluated) properties
 //             ChildPS[0.0.0.0.0.0] Type = <ListOfBudgetContacts>
 //                ChildPS[0.0.0.0.0.0.0] Type = <BudgetContact>
 //                   p[Budget State] = two letter code for the reporting state
 //                   p[...]          = other (not evaluated) properties
 //       ChildPS[0.0.0.1] Type = <ListOfExpenseItemEmployees>
 //          ChildPS[0.0.0.1.0] Type = <ExpenseItemEmployee>
 //             p[...]                = other (not evaluated) properties (We evaluate only the number
 //                                     employee records)
 // --------------------------------------------------------------------------      
 //  Outputs - Propertyset with the following structure
 //
 //    Type = <ExpenseItem>
 //       p[LS MC Allocation Date]        = Date of the Allocation
 //       p[LS MC Allocation Status Code] = Status code of the Allocation
 //                                         Allocation Not Required
 //                                         Allocated
 //                                         Not Allocated (= Predefault)
 //       p[...]
 //       ChildPS[0.0.0.0] Type = <ListOfExpenseItemContacts>
 //          ChildPS[0.0.0.0.0] Type = <ExpenseItemContact>
 //             p[...]
 //             ChildPS[0.0.0.0.0.0] Type = <ListOfExpenseItemContactAllocations>
 //                ChildPS[0.0.0.0.0.0] Type = <ExpenseItemContactAllocation>
 //                   p[Allocated Amount]
 //                   p[Description]
 //                   p[Reporting State]
 //                   p[...]
 //
 // =======================================================================
 // History:
 //  Date     Author    Description
 //  11/28/05 wback      original creation
 // =======================================================================

 // Extract some base values from the input propertyset
 var currTotalAmount;
 var nExchangeRate        = """";
 var strExpenseItemType   = oPSInExpenseItem.GetProperty(mstrPropertyExpenseItemType);
 var strTransactionState  = oPSInExpenseItem.GetProperty(mstrPropertyTransactionState);
 var strComplianceFlag    = oPSInExpenseItem.GetProperty( mstrPropertyComplianceFlag );
 
 var oPSInListOfContacts  = oPSInExpenseItem.GetChild(0);
 var oPSInListOfEmployees = oPSInExpenseItem.GetChild(1);

 var oPSOutListOfContacts = TheApplication().NewPropertySet();
 oPSOutListOfContacts.SetType(oPSInListOfContacts.GetType());
 
 var numEmployees         = oPSInListOfEmployees.GetChildCount() +1;
 var numContacts          = oPSInListOfContacts.GetChildCount();
 var blnAlloc             = false;    // Has an Allocation been performed
 var blnResult            = false;        // Return value of the Allocation rule
 var blnCompliance        = false;        // Is the expense item compliance relevant
 
 // Calculate the converted Expense Total
 if (oPSInExpenseItem.PropertyExists(mstrPropertyExchangeRate))
 {
  nExchangeRate = oPSInExpenseItem.GetProperty(mstrPropertyExchangeRate);
 }
 if (nExchangeRate == """")
 {
  nExchangeRate = ""1"";
 }
 currTotalAmount = oPSInExpenseItem.GetProperty(mstrPropertyConvertedAmount) * nExchangeRate
 
 if (oPSInExpenseItem.GetProperty( mstrPropertyComplianceFlag ) == ""Y"")
 {
  // Customers can write here their own code to determine,
  // whether a certain expense item is compliance relevant.
  blnCompliance = true;
 } 

 for (var i = 0; i < numContacts; i++)
 {
  // Process each individual contact
  var oPSInContact = oPSInListOfContacts.GetChild(i);
  var oPSOutContact = TheApplication().NewPropertySet();
  oPSOutContact.SetType(oPSInContact.GetType());
  oPSOutContact.SetProperty(""Id"", oPSInContact.GetProperty(""Id""));
    //CopyProperties(oPSInContact, oPSOutContact);
  
  if (oPSInContact.GetChildCount() > 0)
  {
   var oPSInListOfBudgets = oPSInContact.GetChild(0);
   var oPSOutListOfAllocations = TheApplication().NewPropertySet();
   oPSOutListOfAllocations.SetType( mstrTypeListOfExpenseItemContactAllocations );
   
   var numBudgets = oPSInListOfBudgets.GetChildCount();
   for (var j = 0; j < numBudgets; j++)
   {
    // Evaluate the budget state call the corresponding allocation rule
    var oPSInBudget = oPSInListOfBudgets.GetChild(j);
    var strReportingState = oPSInBudget.GetProperty(mstrPropertyBudgetState);
    var oPSOutAllocation = TheApplication().NewPropertySet();
    oPSOutAllocation.SetType( mstrTypeExpenseItemContactAllocation );
    oPSOutAllocation.SetProperty(mstrPropertyDescription, mstrDescAllocationNotNeeded);
    oPSOutAllocation.SetProperty(mstrPropertyAllocatedAmount, ""0.00"");
    
    if (strComplianceFlag == ""Y"")
    {
     switch (strReportingState)
     {
      case ""CA"":
       // California allocation rules - you might want to call your own function instead
       blnResult = AllocationRule_CA(currTotalAmount, strExpenseItemType, strTransactionState, 
                                     numEmployees,    numContacts,        oPSOutAllocation);
       break;
      case ""DC"":
       // D.C. allocation rules - you might want to call your own function instead
       blnResult = AllocationRule_CA(currTotalAmount, strExpenseItemType, strTransactionState, 
                                     numEmployees,    numContacts,        oPSOutAllocation);
       break;
      case ""ME"":
       // Maine allocation rules - you might want to call your own function instead
       blnResult = AllocationRule_CA(currTotalAmount, strExpenseItemType, strTransactionState, 
                                     numEmployees,    numContacts,        oPSOutAllocation);
       break;
      case ""MN"":
       // Minnesota allocation rules - you might want to call your own function instead
       blnResult = AllocationRule_CA(currTotalAmount, strExpenseItemType, strTransactionState, 
                                     numEmployees,    numContacts,        oPSOutAllocation);
       break;
      case ""VT"":
       // Vermont allocation rules - you might want to call your own function instead
       blnResult = AllocationRule_CA(currTotalAmount, strExpenseItemType, strTransactionState, 
                                     numEmployees,    numContacts,        oPSOutAllocation);
       break;
      case ""WV"":
       // West Virginia allocation rules - you might want to call your own function instead
       blnResult = AllocationRule_CA(currTotalAmount, strExpenseItemType, strTransactionState, 
                                     numEmployees,    numContacts,        oPSOutAllocation);
       break;
      default:
       // Default allocation rule: - you might want to call your own function instead
       blnResult = AllocationRule_Default(currTotalAmount, strExpenseItemType, strTransactionState, 
                                     numEmployees,    numContacts,        oPSOutAllocation);
       break;
       
     }
    }
    else
    {
     blnResult = false;
    }
    oPSOutAllocation.SetProperty(mstrPropertyReportingState, strReportingState);
    if (blnResult)
    {
     // Save the fact that we allocated at least for ONE contact
     blnAlloc = true;
    }
    oPSOutListOfAllocations.AddChild(oPSOutAllocation);
   }
   oPSOutContact.AddChild(oPSOutListOfAllocations);
  }
  oPSOutListOfContacts.AddChild(oPSOutContact);
 }
 oPSOutExpenseItem.AddChild(oPSOutListOfContacts);
 if (blnAlloc)
 {
  // Since we performed the allocation for at least ONE contact, we will set
  // the status to ""Allocated""
  oPSOutExpenseItem.SetProperty( mstrPropertyAllocationStatusCode,mstrLICAllocated)
 }
 else
 {
  // Since we did not perform any allocation, we will set
  // the status to ""Allocation Not Needed""
  oPSOutExpenseItem.SetProperty( mstrPropertyAllocationStatusCode,mstrLICNoAllocationNeeded)
 }
}
function AllocateExpenses(Inputs, Outputs)
{
 // =======================================================================
 // Purpose:   Shell for Allocation of expenses to contacts in accordance with
 //            Marketing Compliance for Pharmaceutical companies
 // =======================================================================
 // I M P O R T A N T   N O T E :
 // Please read the comment in Disclaimer()
 // =======================================================================
 // Arguments:
 //  Inputs - Propertyset with the following structure (IO: )
 //
 //    ChildPS[0] Type = ""Siebel Message""
 //       p[MessageType]     = ""Integration Object""
 //       p[IntObjectName]   = ""LSMCGetUnallocatedExpenseItem""
 //       p[IntObjectFormat] = ""Siebel Hierarchical""
 //       ChildPS[0.0] Type = ""ListOfLSMCGetUnallocatedExpenseItem""
 //          ChildPS[0.0.0] = Type = ""Expense Item""
   //             p[LS MC Compliance Flag]
   //             p[Amount]
   //             p[Exchange Rate]
   //             p[Expense Item Type]
   //             p[LS MC Transaction State]
 //             p[...]
 //             ChildPS[0.0.0.0] Type = <ListOfExpenseItemContacts>
 //                ChildPS[0.0.0.0.0] Type = <ExpenseItemContact>
 //                   p[...]
 //                   ChildPS[0.0.0.0.0.0] Type = <ListOfBudgetContacts>
 //                      ChildPS[0.0.0.0.0.0.0] Type = <BudgetContact>
 //                         p[Budget State]
 //                         p[...]
 //             ChildPS[0.0.0.1] Type = <ListOfExpenseItemEmployees>
 //                ChildPS[0.0.0.1.0] Type = <ExpenseItemEmployee>
 //                   p[...]
 // --------------------------------------------------------------------------      
 //  Outputs - Propertyset with the following structure (IO: )
   //
 //    ChildPS[0] Type = ""Siebel Message""
 //       p[MessageType]     = ""Integration Object""
 //       p[IntObjectName]   = ...
 //       p[IntObjectFormat] = ""Siebel Hierarchical""
 //       ChildPS[0.0] Type = <ListOfExpenseItems>
 //          ChildPS[0.0.0] = Type = <ExpenseItem>
 //             p[LS MC Allocation Date]
   //             p[LS MC Allocation Status Code]
 //             p[...]
 //             ChildPS[0.0.0.0] Type = <ListOfExpenseItemContacts>
 //                ChildPS[0.0.0.0.0] Type = <ExpenseItemContact>
 //                   p[...]
 //                   ChildPS[0.0.0.0.0.0] Type = <ListOfExpenseItemContactAllocations>
 //                      ChildPS[0.0.0.0.0.0] Type = <ExpenseItemContactAllocation>
 //                         p[Allocated Amount]
 //                         p[Description]
 //                         p[Reporting State]
 //                         p[...]
   //
 // =======================================================================
 // History:
 //  Date     Author    Description
 //  11/22/05 wback      original creation
 // =======================================================================
 
 // -----------------------------------------------------------------------
 // There are three main steps:
 //   1. Evaluating the Input property set
 //   2. Process ""hardcoded"" Allocation rules
 //   3. Format the Output property set
 // The steps 2 and 3 are done partially in AllocateExpenseItem (i.e. for an individual
 // expense item)
 // -----------------------------------------------------------------------
 
 // ----------------------------------------------
 // 1. Evaluating the Input property set
 //    We have to perform the following sub-steps:
 //    1.1 Extract the child property set containing the Expense Items
 //    1.2 Process each of the expense items:
 //    1.2.1. Call AllocateExpense (i.e. for an individual expense item) with 
 //    1.2.2. Set the returned Output Propertyset 
 // ----------------------------------------------
  
 // Extract the collection of expense items from the input propertyset and
 // assign it to oPSInListOfExpenseItems
 var oPSInSiebelMessage      = Inputs.GetChild(0);
 var oPSInListOfExpenseItems = oPSInSiebelMessage.GetChild(0);        // ListOfExpenseItems
 var nExpenseItems           = oPSInListOfExpenseItems.GetChildCount();   // Number of Expense Items
 var now                     = new Date();
 var TimeStamp               = now.toLocaleString()
 
mstrLICAllocated             = TheApplication().InvokeMethod(""LookupValue"",""LS_MC_STATUS"", ""Allocated"");
mstrLICNoAllocationNeeded    = TheApplication().InvokeMethod(""LookupValue"",""LS_MC_STATUS"", ""Allocation Not Needed"");
mstrLICNotAllocated          = TheApplication().InvokeMethod(""LookupValue"",""LS_MC_STATUS"", ""Not Allocated"");


 // In any case, we have to create the shell for the OutputPS
 
 // Outputs = TheApplication().NewPropertySet();
 var oPSOutSiebelMessage       = TheApplication().NewPropertySet();
 oPSOutSiebelMessage.SetType(""SiebelMessage"");
 oPSOutSiebelMessage.SetProperty(""MessageId"", oPSInSiebelMessage.GetProperty(""MessageId""));
 oPSOutSiebelMessage.SetProperty(""MessageType"", ""Integration Object"");
 oPSOutSiebelMessage.SetProperty(""IntObjectName"", mstrOutputIOName);
 oPSOutSiebelMessage.SetProperty(""IntObjectFormat"", ""Siebel Hierarchical"");
  
 var oPSOutListOfExpenseItems  = TheApplication().NewPropertySet();
 oPSOutListOfExpenseItems.SetType( mstrOutputTypeListOfExpenseItems );
 
 
 // Is there at least ONE expense item to process?
 if (nExpenseItems > 0)
 {
  // There is at least ONE Expense item definition
  
  for ( var nExpenseItemCounter = 0; 
        nExpenseItemCounter < nExpenseItems; 
        nExpenseItemCounter++ )
  {
   
   // Extract exactly ONE expense item for processing
     var oPSInExpenseItem  = oPSInListOfExpenseItems.GetChild(nExpenseItemCounter);
     var oPSOutExpenseItem = TheApplication().NewPropertySet();
     oPSOutExpenseItem.SetType( mstrOutputTypeExpenseItem );
     oPSOutExpenseItem.SetProperty(""Id"", oPSInExpenseItem.GetProperty(""Id""));
     //CopyProperties(oPSInExpenseItem, oPSOutExpenseItem);
   
   // Get the actual Date-Time stamp
     now = new Date();
     TimeStamp = now.toLocaleString();

   // Pre-build the output property (-sub-) set
   BuildOutputExpenseItem(oPSInExpenseItem, oPSOutExpenseItem, TimeStamp);
     
     // We have to call the allocation engine 
     // for exactly ONE expense item
     AllocateExpenseItem(oPSInExpenseItem, oPSOutExpenseItem);
     
     // Add the definitions to the Output
     oPSOutListOfExpenseItems.AddChild(oPSOutExpenseItem);
  }
 }
 oPSOutSiebelMessage.AddChild(oPSOutListOfExpenseItems);
 Outputs.AddChild(oPSOutSiebelMessage);
}
function AllocationRule_CA(currTotalAmount, strExpenseItemType, strTransactionState, numEmployees, numContacts, oPSAlloc)
{
 // =======================================================================
 // Purpose:   Performs the allocation of expenses to contacts in accordance with
 //            Marketing Compliance for Pharmaceutical companies
 // =======================================================================
 // I M P O R T A N T   N O T E :
 // Please read the comment in Disclaimer()
 // =======================================================================
 // Arguments:
 // Input:
 //  currTotalAmount      = Total Amount expensed
 //    strExpenseItemType   = Type of the expense item (We only evaluate ""Gift"")
 //    strTransactionState  = State, where the transaction took place (not evaluated here)
 //    numEmployees         = Number of employees (incl. reporter of expenses)
 //    numContacts          = Number of ""entertained"" Health Care Professionals
 // Output (By reference):
 //    oPSAlloc - Propertyset holding the definition of one specific Allocation
 //                This is an output property set with the following defined Properties:
 //       mstrPropertyAllocatedAmount  (e.g.: ""Allocated Amount"")
 //       mstrPropertyDescription      (e.g.: ""Description"")
 //       [mstrPropertyReportingState]   (e.g.: ""Reporting State"")
 // =======================================================================
 
 var currAllocated = 0.00;
 
 if (strExpenseItemType == ""Gifts"")
 {
  // State Rules II
  if (numContacts > 0)
  {
   currAllocated = currTotalAmount / numContacts;
  }
 }
 else
 { 
  // State Rule I
  var numTotal = numEmployees + numContacts;
  if (numTotal > 0) 
  {
   currAllocated = currTotalAmount / numTotal;
  }
 }
 oPSAlloc.SetProperty(mstrPropertyDescription, mstrDescAllocationPerformed);
 oPSAlloc.SetProperty(mstrPropertyAllocatedAmount, currAllocated.toString());
 
 return (true);
}
function AllocationRule_Default (currTotalAmount, strExpenseItemType, strTransactionState, numEmployees, numContacts, oPSAlloc)
{
 // =======================================================================
 // Purpose:   Performs the allocation of expenses to contacts in accordance with
 //            Marketing Compliance for Pharmaceutical companies
 // =======================================================================
 // I M P O R T A N T   N O T E :
 // Please read the comment in Disclaimer()
 // =======================================================================
 // Arguments:
 // Input:
 //  currTotalAmount      = Total Amount expensed
 //    strExpenseItemType   = Type of the expense item (We only evaluate ""Gift"")
 //    strTransactionState  = State, where the transaction took place (not evaluated here)
 //    numEmployees         = Number of employees (incl. reporter of expenses)
 //    numContacts          = Number of ""entertained"" Health Care Professionals
 // Output (By reference):
 //    oPSAlloc - Propertyset holding the definition of one specific Allocation
 //                This is an output property set with the following defined Properties:
 //       mstrPropertyAllocatedAmount  (e.g.: ""Allocated Amount"")
 //       mstrPropertyDescription      (e.g.: ""Description"")
 //       [mstrPropertyReportingState]   (e.g.: ""Reporting State"")
 // =======================================================================
 
 oPSAlloc.SetProperty(mstrPropertyDescription, mstrDescNoAllocationDefined);
 oPSAlloc.SetProperty(mstrPropertyAllocatedAmount, ""0.00"");
 return (false);
}
function BuildOutputExpenseItem(oPSIn, oPSOut, TimeStamp)
{
 // =======================================================================
 // Purpose:   Builds the structure of the Output property sub set for 
 //            an expense item using the input property set as template.
 // =======================================================================
 // I M P O R T A N T   N O T E :
 // Please read the comment in Disclaimer()
 // =======================================================================
 // oPSOut.SetType(""Expense Item"");
 oPSOut.SetProperty(""Id"", oPSIn.GetProperty(""Id""));
// oPSOut.SetProperty(mstrPropertyAllocationDate, TimeStamp);
 oPSOut.SetProperty(mstrPropertyAllocationStatusCode, mstrLICNoAllocationNeeded);
}
function CopyProperties(oPSSrc, oPSTrg)
{
   var propName = """";
   var propVal = """";

   propName = oPSSrc.GetFirstProperty();

   // stay in loop if the property name is not null
   // or a null string
   while ((propName != """") && (propName != null)) 
   {
  oPSTrg.SetProperty(propName, oPSSrc.GetProperty(propName));
      propName = oPSSrc.GetNextProperty();
   }
}
"
function Disclaimer()
{
 // =======================================================================
 // I M P O R T A N T   N O T E :
 // =======================================================================
 // Please be aware that all references to property names and the expected/
 // provided structure of property sets are hardcoded.
 // If relevant modifications are made to the IOs, the corresponding
 // changes/additions must be made manually to the code. 
 // Please see the (declarations) section for definitions of strings used in the code
 // =======================================================================
 // The code provided in the Business Service ""MarketingComplianceExpenseAllocation]
 // is only the absolute minimum code required to test the data exchange with the 
 // Expense Item Allocation Engine. Only the bare minimum of error handling is implemented.
 // Nevertheless, the code can give to developers an idea, how to implement their
 // own Allocation Engine in eScript.
 // =======================================================================
 // Siebel is in no way responsible for any damages resulting directly or 
 // indirectly from this code.
 // =======================================================================
 // Please keep in mind that this code is used primarily for testing. The currently 
 // implemented version branches always to the same rules algorithm, AllocationRule_CA().
 // To implement different algorithms, you can easily add your own functions for the 
 // individual states.
 // =======================================================================
 
}
"
"
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
 // =======================================================================
 // I M P O R T A N T   N O T E :
 // Please read the comment in Disclaimer()
 // =======================================================================
 // History:
 // Date     Author   Description
 // 11/22/05 wback    original creation
 // =======================================================================
 if (MethodName == ""Allocate"")
 {
  // Allow the method ""Allocate"" to be invoked
  CanInvoke = true;
 }
 return (ContinueOperation);
}
"
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
 // =======================================================================
 // I M P O R T A N T   N O T E :
 // Please read the comment in Disclaimer()
 // =======================================================================
 // History:
 // Date     Author   Description
 // 11/22/05 wback    original creation
 // =======================================================================
 if (MethodName == ""Allocate"")
 {

  // Call the function ""AllocateExpenses""
  AllocateExpenses (Inputs, Outputs);
  Inputs.Reset();
  Inputs = Outputs.Copy();

  // Prevent a call to the C++ code
  return (CancelOperation);
 }
 return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""GetIntObjOutput"")
	{
		var GetIntObjOutputSoapOut_clnparameters = TheApplication().NewPropertySet();
		GetIntObjOutputSoapOut_clnparameters.SetType(""GetIntObjOutputSoapOut:parameters"");
		GetIntObjOutputSoapOut_clnparameters.SetProperty(""MessageId"", """");
		GetIntObjOutputSoapOut_clnparameters.SetProperty(""MessageType"", ""Integration Object"");
		GetIntObjOutputSoapOut_clnparameters.SetProperty(""IntObjectFormat"", ""Siebel Hierarchical"");
		GetIntObjOutputSoapOut_clnparameters.SetProperty(""IntObjectName"", ""GetIntObjOutputResponse_1"");
		Outputs.AddChild(GetIntObjOutputSoapOut_clnparameters);
		
		var ListOfGetIntObjOutputResponse_1 = TheApplication().NewPropertySet();
		ListOfGetIntObjOutputResponse_1.SetType(""ListOfGetIntObjOutputResponse_1"");	
		GetIntObjOutputSoapOut_clnparameters.AddChild(ListOfGetIntObjOutputResponse_1);	
		
		
		var GetIntObjOutputResponse = TheApplication().NewPropertySet();
		GetIntObjOutputResponse.SetType(""GetIntObjOutputResponse"");	
		ListOfGetIntObjOutputResponse_1.AddChild(GetIntObjOutputResponse);	
		
		var ListOfGetIntObjOutputResult = TheApplication().NewPropertySet();
		ListOfGetIntObjOutputResult.SetType(""ListOfGetIntObjOutputResult"");	
		GetIntObjOutputResponse.AddChild(ListOfGetIntObjOutputResult);
		
		var GetIntObjOutputResult = TheApplication().NewPropertySet();
		GetIntObjOutputResult.SetType(""GetIntObjOutputResult"");	
		ListOfGetIntObjOutputResult.AddChild(GetIntObjOutputResult);
		
		var ListOfListOfAccountInterface = TheApplication().NewPropertySet();
		ListOfListOfAccountInterface.SetType(""ListOfListOfAccountInterface"");	
		GetIntObjOutputResult.AddChild(ListOfListOfAccountInterface);
		
		var ListOfAccountInterface = TheApplication().NewPropertySet();
		ListOfAccountInterface.SetType(""ListOfAccountInterface"");	
		ListOfListOfAccountInterface.AddChild(ListOfAccountInterface);
		
		var ListOfAccount = TheApplication().NewPropertySet();
		ListOfAccount.SetType(""ListOfAccount"");	
		ListOfAccountInterface.AddChild(ListOfAccount);
		
		var Account = TheApplication().NewPropertySet();
		Account.SetType(""Account"");	
		ListOfAccount.AddChild(Account);
		
		var ListOfAccount_0 = TheApplication().NewPropertySet();
		ListOfAccount_0.SetType(""ListOfAccount_0"");	
		Account.AddChild(ListOfAccount_0);
		
		var Account_0 = TheApplication().NewPropertySet();
		Account_0.SetType(""Account_0"");
		Account_0.SetProperty(""Type"", ""Tester"");
		Account_0.SetProperty(""AccountId"", ""10-12345"");	
		Account_0.SetProperty(""Name"", ""Fido Dido"");
		Account_0.SetProperty(""AccountStatus"", ""Active"");
		ListOfAccount_0.AddChild(Account_0);
		
		var ListOfListOfAccountAddressInterface = TheApplication().NewPropertySet();
		ListOfListOfAccountAddressInterface.SetType(""ListOfListOfAccountAddressInterface"");	
		Account_0.AddChild(ListOfListOfAccountAddressInterface);
		
		var ListOfAccountAddressInterface = TheApplication().NewPropertySet();
		ListOfAccountAddressInterface.SetType(""ListOfAccountAddressInterface"");	
		ListOfListOfAccountAddressInterface.AddChild(ListOfAccountAddressInterface);
		
		var ListOfAccountAddress = TheApplication().NewPropertySet();
		ListOfAccountAddress.SetType(""ListOfAccountAddress"");	
		ListOfAccountAddressInterface.AddChild(ListOfAccountAddress);
		
		var AccountAddress = TheApplication().NewPropertySet();
		AccountAddress.SetType(""AccountAddress"");	
		ListOfAccountAddress.AddChild(AccountAddress);
		
		var ListOfAccountAddress_0 = TheApplication().NewPropertySet();
		ListOfAccountAddress_0.SetType(""ListOfAccountAddress_0"");	
		AccountAddress.AddChild(ListOfAccountAddress_0);
		
		var AccountAddress_0 = TheApplication().NewPropertySet();
		AccountAddress_0.SetType(""AccountAddress_0"");
		AccountAddress_0.SetProperty(""Address"", ""2211 BridgePointe Pkwy"");	
		ListOfAccountAddress_0.AddChild(AccountAddress_0);
		
		var AccountAddress_0_2 = TheApplication().NewPropertySet();
		AccountAddress_0_2.SetType(""AccountAddress_0"");
		AccountAddress_0_2.SetProperty(""Address"", ""2207 BridgePointe Pkwy"");	
		ListOfAccountAddress_0.AddChild(AccountAddress_0_2);

		return (CancelOperation);	
	}
	else if(MethodName == ""echo"")
	{
		Outputs.SetProperty("faultactor"","""")
		Outputs.SetProperty("faultcode"",""soap:Client"")
		Outputs.SetProperty("faultstring"",""Server did not recognize the value of HTTP Header SOAPAction: http://www.siebel.com/atf/echo/soapFault."")
		Outputs.SetProperty("faultactor"","""")
		
		var ps = TheApplication().NewPropertySet();
		ps.SetType(""_XMLHierarchy"");
		
		var ps1 = TheApplication().NewPropertySet();
		ps1.SetType(""detail"");
		
		ps.AddChild(ps1);
		
		Outputs.AddChild(ps);
		return (CancelOperation);	
		
	}
	return (ContinueOperation);
}
function Init(Inputs, Outputs)
{
	with(Outputs)
	{
		SetProperty(""Account Id"","""");
		SetProperty(""Address"","""");
		SetProperty(""Address Name"","""");
		SetProperty(""Attr 1"","""");
		SetProperty(""Attr 2"","""");
		SetProperty(""Attr 3"","""");
		SetProperty(""Block No"","""");
		SetProperty(""Building Name"","""");
		SetProperty(""City"","""");
		SetProperty(""Contact Id"","""");
		SetProperty(""Country"","""");
		SetProperty(""Date Of Birth"","""");
		SetProperty(""Email Address"","""");
		SetProperty(""First Name"","""");
		SetProperty(""Flat No"","""");
		SetProperty(""Gender"","""");
		SetProperty(""Governorate"","""");
		SetProperty(""ID Type"","""");
		SetProperty(""ID#"","""");
		SetProperty(""Last Name"","""");
		SetProperty(""MSISDN"","""");
		SetProperty(""Middle Name"","""");
		SetProperty(""Program Name"","""");
		SetProperty(""Road No"","""");
		SetProperty(""Street Address"","""");
		SetProperty(""Street Address 2"","""");
		SetProperty(""Title"","""");
		SetProperty(""Name"","""");
		SetProperty(""Tier"", """");
		SetProperty(""Postal Code"", """");
		SetProperty(""Work Phone"", """");
		SetProperty(""Age"", """");
		SetProperty(""Product Name"", """");
		SetProperty(""Redemption Type"", """");
		SetProperty(""Product Name Accrual"", """");
		SetProperty(""Points"", """");
		SetProperty(""List Price"","""");
		SetProperty(""STC Redem Points"","""");
		SetProperty(""Attr 4"","""");
		//LMS Bug Fixes below
		SetProperty(""STC Transfer Points"","""");
		SetProperty(""STC Transfer To Member"","""");
		SetProperty(""STC Transfer To Member Id"","""");
		SetProperty(""STC Transfer To Member Number"","""");
		SetProperty(""Program Id"","""");
		SetProperty(""STC Transfer To Member Program Id"","""");
		//LMS Bug Fixes above
		/*[31Jul2016][NAVINR][LoyaltyAirmiles_Phase2]*/
		SetProperty(""Parent Member Id"","""");
		SetProperty(""STC Airline Partner Name"","""");
		SetProperty(""STC Partner Id"","""");
		SetProperty(""STC Airline FFP Number"","""");
		SetProperty(""STC External Points"","""");
		SetProperty(""STCRedemptionPointReadOnlyFlag"","""");
		/*[31Jul2016][NAVINR][LoyaltyAirmiles_Phase2]*/
		
	}
	return (CancelOperation);
}
function PreInsert(Inputs, Outputs)
{

}
function Query(Inputs, Outputs)
{

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if( MethodName == ""Init"")
	{
		Init(Inputs, Outputs);
		return (CancelOperation);
	}
	else
	{
		return (CancelOperation);
	}
}
"var mstrDebugFile    = ""D:\\Propertysets.log"";
var err = ""OK"";"
function Debug_LogData(DataString, file) 
{ 
   // ---------------------------------------------------------------- 
   // Use the Debug_PropertySetToFile(PropSet, fileName, title) API  
   // and the Debug_TextToFile(fileName, text) API in your script. 
   // Note that fileName must be double slashed, as demonstrated in the examples below: 
   // Debug_PropertySetToFile(InputsPS, ""c:\\temp\\PSexport.txt"", ""Input Propertyset""); 
   // Debug_TextToFile(""c:\\temp\\MyLog.txt"", ""MyText""); 
   // ---------------------------------------------------------------- 
   try { 
      var fp = Clib.fopen (file, ""at+"");
      if (fp != null)
      {
         Clib.fputs (DataString, fp);
         Clib.fputs (""\n"", fp);
         Clib.fclose (fp);
      }
   } 
   catch (e){ 
   	  // no action 
   } 
}
function Disclaimer() 
 { 
    // ======================================================================= 
    // I M P O R T A N T   N O T E : 
    // ======================================================================= 
    // Please be aware that all references to property names and the expected provided structure of property sets are hardcoded. 
    // If relevant modifications are made to the IOs, the corresponding changes/additions must be made manually to the code. 
    // Please see the (declarations) section for definitions of strings used in the code 
    // ======================================================================= 
    // Oracle is in no way responsible for any damages resulting directly or indirectly from this code. 
    // ======================================================================= 
        
 }
function ExecutePostLaunchWorkflow (Inputs, Outputs)
{
	var CustomIO                 = Inputs.GetChild(0);  
 	var ChildCustomIO            = CustomIO.GetChild(0);   
    var grandChildCustomIO       = ChildCustomIO.GetChild(0); 
    var CustomWorkflowIO		 = grandChildCustomIO.GetChild(0);
    var CustomWorkflowType		 = CustomWorkflowIO.GetType();
    var nChildren				 = CustomWorkflowIO.GetChildCount(); 
	var isSegmentExists		     = "false""; 
	var jobID					 = """";
	var jobState				 = """";
    
    //Get the Inputs
    var CampaignId = CustomWorkflowIO.GetProperty(""Campaign Id"");
    Inputs.SetProperty(""Campaign Id"", CampaignId);
    var StageId = CustomWorkflowIO.GetProperty(""Stage Id"");
    Inputs.SetProperty(""Stage Id"", StageId);
	if (nChildren > 0)  
    {  
       for ( var nChildrenCounter = 0;  
             nChildrenCounter < nChildren;  
             nChildrenCounter++ )  
       { 
		    var IOType  = CustomWorkflowIO.GetChild(nChildrenCounter).GetType(); 
		    if (IOType == ""ListOfSegment Virtual"")
		    {
		    	var SegVirt = CustomWorkflowIO.GetChild(nChildrenCounter).GetChild(0);
		    	var SegVirtType=SegVirt.GetType();
		    	var segPath = SegVirt.GetProperty(""Segment Path"");
		    	Inputs.SetProperty(""Segment Path"", segPath);
				if(segPath != """")
				{
					isSegmentExists	= ""true"";
				}
		    }
		    if (IOType == ""ListOfSegment Tree Virtual"")
		    {
		    	var SegTreeVirt = CustomWorkflowIO.GetChild(nChildrenCounter).GetChild(0);
		    	var segTreePath = SegTreeVirt.GetProperty(""Segment Tree Path"");
		    	Inputs.SetProperty(""Segment Tree Path"", segTreePath);
				if(segTreePath != """")
				{
					isSegmentExists	= ""true"";
				}
		    }
		}
	}

	//Get the sessionId from the Analytics Server
	//Logon(Inputs, Outputs);
	if(isSegmentExists == ""true"")
	{ 
	Logon(Inputs, Outputs);

	var sessionID = Outputs.GetProperty(""sessionID"");
	Inputs.SetProperty(""sessionID"", sessionID);
	
	//Call the saveResultSet
	SaveResultSet(Inputs, Outputs);
	jobID = Outputs.GetProperty(""jobID"");	
	jobState = Outputs.GetProperty(""jobState"");
	}
	
	while(jobState == ""Running"" || jobState == ""Queued"")
	{
		// Assume we are running on UNIX
		// If libc.so does not load (or any exception), we are running 
		// on NT and make the WIN32 call
		// Sleep for 2 seconds
		try
		{
		    SElib.dynamicLink(""libc.so"", ""sleep"", 5)
		}
		catch(e)
		{
		    SElib.dynamicLink(""kernel32.dll"", ""Sleep"", STDCALL, 5000)
		} 
		Inputs.SetProperty(""jobID"", jobID);
		GetJobInfo(Inputs, Outputs);
		jobState = Outputs.GetProperty(""jobState"");
	}	
	
	if(jobState == ""Error"")
	{
		var errorMessage = Outputs.GetProperty(""errorMessage"");
		Outputs.SetProperty(""Success Flag"", ""N"");
		Outputs.SetProperty(""errorMessage"", errorMessage);
	}
	else
	{
		Outputs.SetProperty(""Success Flag"", ""Y"");
		Outputs.SetProperty(""errorMessage"", """");
	}
}
function ExecutePostLoadWorkflow (Inputs, Outputs)
{
 	var CustomIO                 = Inputs.GetChild(0);  
 	var ChildCustomIO            = CustomIO.GetChild(0);   
    var grandChildCustomIO       = ChildCustomIO.GetChild(0); 
    var CustomWorkflowIO		 = grandChildCustomIO.GetChild(0);
    var CustomWorkflowType		 = CustomWorkflowIO.GetType();
    var nChildren				 = CustomWorkflowIO.GetChildCount(); 
    
    var CampaignId = CustomWorkflowIO.GetProperty(""Campaign Id"");
    
    //Get the handle to the Campaign BC
    var CampaignBO = TheApplication().GetBusObject(""Campaign"");
    var CampaignBC = CampaignBO.GetBusComp(""Campaign"");    
     
    //Get the treatment info  
    CampaignBC.ActivateField(""Primary Treatment Id"");
    CampaignBC.SetSearchSpec(""Id"",CampaignId);
    CampaignBC.SetViewMode(AllView);
    CampaignBC.ExecuteQuery();
    var TreatmentID = CampaignBC.GetFieldValue(""Primary Treatment Id"");
    
    CampaignBC = null;
    CampaignBO = null;

	//Get the Offder BC
    var OfferBO = TheApplication().GetBusObject(""Offer"");
    var OfferBC = OfferBO.GetBusComp(""Offer"");    
    
    //Get the priority
    OfferBC.ActivateField(""Priority"");
    OfferBC.SetSearchSpec(""Id"",TreatmentID);
    OfferBC.SetViewMode(AllView);
    OfferBC.ExecuteQuery();
    var rec= OfferBC.FirstRecord();
    while(rec)
    {
    	var Priority = OfferBC.GetFieldValue(""Priority"");
    	rec = OfferBC.NextRecord();
    }
       
    OfferBC = null;
    OfferBO = null;
    
    Outputs.SetProperty(""Success Flag"", ""Y"");
	Outputs.SetProperty(""errorMessage"", ""None"");   
}
function ExecutePreLoadWorkflow (Inputs, Outputs)
{
	Debug_LogData(""Inside ExecutePreLoadWorkflow"", mstrDebugFile);

 	var CustomIO                 = Inputs.GetChild(0);  
 	var ChildCustomIO            = CustomIO.GetChild(0);   
    var grandChildCustomIO       = ChildCustomIO.GetChild(0); 
    var CustomWorkflowIO		 = grandChildCustomIO.GetChild(0);
    var CustomWorkflowType		 = CustomWorkflowIO.GetType();
    var nChildren				 = CustomWorkflowIO.GetChildCount(); 
	var isSegmentExists		     = "false""; 
	var jobID					 = """";
	var jobState				 = """";
    
    //Get the inputs
    var CampaignId = CustomWorkflowIO.GetProperty(""Campaign Id"");
    Inputs.SetProperty(""Campaign Id"", CampaignId);
    var StageId = CustomWorkflowIO.GetProperty(""Stage Id"");
    Inputs.SetProperty(""Stage Id"", StageId);
	if (nChildren > 0)  
    {  
       for ( var nChildrenCounter = 0;  
             nChildrenCounter < nChildren;  
             nChildrenCounter++ )  
       { 
		    var IOType  = CustomWorkflowIO.GetChild(nChildrenCounter).GetType(); 
		    if (IOType == ""ListOfSegment Virtual"")
		    {
		    	var SegVirt = CustomWorkflowIO.GetChild(nChildrenCounter).GetChild(0);
		    	var SegVirtType=SegVirt.GetType();
		    	var segPath = SegVirt.GetProperty(""Segment Path"");
		    	Inputs.SetProperty(""Segment Path"", segPath);
				if(segPath != """")
				{
					isSegmentExists	= ""true"";
				}	
		    }
		    if (IOType == ""ListOfSegment Tree Virtual"")
		    {
		    	var SegTreeVirt = CustomWorkflowIO.GetChild(nChildrenCounter).GetChild(0);
		    	var segTreePath = SegTreeVirt.GetProperty(""Segment Tree Path"");
		    	Inputs.SetProperty(""Segment Tree Path"", segTreePath);
				if(segTreePath != """")
				{
					isSegmentExists	= ""true"";
				}
		    }
		}
	}

	//Get the sessionId from the Analytics Server
	//Logon(Inputs, Outputs);
	if(isSegmentExists == ""true"")
	{
	Logon(Inputs, Outputs);

	var sessionID = Outputs.GetProperty(""sessionID"");
	Inputs.SetProperty(""sessionID"", sessionID);
	
	//Call the saveResultSet
	SaveResultSet(Inputs, Outputs);
	jobID = Outputs.GetProperty(""jobID"");
	jobState = Outputs.GetProperty(""jobState"");
	}
	
	while(jobState == ""Running"" || jobState == ""Queued"")
	{
		// Assume we are running on UNIX
		// If libc.so does not load (or any exception), we are running 
		// on NT and make the WIN32 call
		// Sleep for 2 seconds
		try
		{
		    SElib.dynamicLink(""libc.so"", ""sleep"", 5)
		}
		catch(e)
		{
		    SElib.dynamicLink(""kernel32.dll"", ""Sleep"", STDCALL, 5000)
		} 
		Inputs.SetProperty(""jobID"", jobID);
		GetJobInfo(Inputs, Outputs);
		jobState = Outputs.GetProperty(""jobState"");
	}	
	
	if(jobState == ""Error"")
	{
		var errorMessage = Outputs.GetProperty(""errorMessage"");
		Outputs.SetProperty(""Success Flag"", ""N"");
		Outputs.SetProperty(""errorMessage"", errorMessage);
	}
	else
	{
		Outputs.SetProperty(""Success Flag"", ""Y"");
		Outputs.SetProperty(""errorMessage"", """");
	}
	
}
function GetJobInfo(Inputs, Outputs)
{
	var userName	 = ""sadmin"";
	var userPassword = ""sadmin"";
 	
	var svcJob      		= TheApplication().GetService(""JobManagementServiceSoap"");
	var wsInputJob 			= TheApplication().NewPropertySet();
	var wsOutputJob 		= TheApplication().NewPropertySet();
	var getJobInfoInput 	= TheApplication().NewPropertySet(); // IO
	var ListOfJobInfo		= TheApplication().NewPropertySet(); 
	var getJobInfo	 		= TheApplication().NewPropertySet(); // IC
	
	// set Type and property for IC saveResultSet
	getJobInfo.SetType(""getJobInfo""); 			
	getJobInfo.SetProperty(""sessionID"", Inputs.GetProperty(""sessionID""));
	getJobInfo.SetProperty(""jobID"", Inputs.GetProperty(""jobID""));
		
	// Set types for ListOfsaveResultSet and root IO
	ListOfJobInfo.SetType(""ListOfgetJobInfo"");
	getJobInfoInput.SetType(""getJobInfoIn:parameters"");
	
	// assemble input property set for the service, bottom up
	ListOfJobInfo.AddChild(getJobInfo);
	getJobInfoInput.AddChild(ListOfJobInfo);
	wsInputJob.AddChild(getJobInfoInput);
	
	//Invoke the service
	try
	{
		svcJob.InvokeMethod(""getJobInfo"", wsInputJob, wsOutputJob);
	}
	catch(e)
	{
		if (wsOutputJob.GetChildCount() > 0) 
		{
			var faultString = wsOutputJob.GetProperty("faultstring"");
			Outputs.SetProperty(""jobState"", ""Error"");
			Outputs.SetProperty(""errorMessage"", faultString);									
		}
	}
	
	//Get the Job Id from the output
	if (wsOutputJob.GetChildCount() > 0) 
	{
		var saveResultIOOutput = wsOutputJob.GetChild(0);
		if (saveResultIOOutput.GetType() == ""getJobInfoOut:parameters"") 
		{
			if (saveResultIOOutput.GetChildCount() > 0)
			{
				var ListOfsaveResultSetOutput = saveResultIOOutput.GetChild(0);
				if (ListOfsaveResultSetOutput.GetType() == ""sawsoap:jobInfo"") 
				{
					if (ListOfsaveResultSetOutput.GetChildCount() > 0)
					{
						var saveResultSetOutput = ListOfsaveResultSetOutput.GetChild(0);
						if (saveResultSetOutput.GetType() == ""jobStats"")
						{
							var jobID = saveResultSetOutput.GetChild(0).GetValue();
							Outputs.SetProperty(""jobID"", jobID);
							var jobState = saveResultSetOutput.GetChild(3).GetValue();
							Outputs.SetProperty(""jobState"", jobState);
							if (jobState == ""Error"")
							{	
								var exceptionOutput = saveResultSetOutput.GetChild(8);
								var excOutMsg="""";
								var excOutMsg1="""";
								if (exceptionOutput.GetType() == ""exception"")
								{
									var exceptionMsg = exceptionOutput.GetChild(0).GetValue();
									excOutMsg = exceptionOutput.GetChild(1);
									if (excOutMsg.GetType() == ""exception"")
									{
										excOutMsg1 = excOutMsg.GetChild(0).GetValue();
									}
								}
								var ExpDispMsg=	exceptionMsg + "" "" + excOutMsg1;
								Outputs.SetProperty(""errorMessage"", ExpDispMsg);									
							}
						}												
					}
				}
			}
		}
	}
}
function Logon(Inputs, Outputs)
{
	var userName	 = ""sadmin"";
	var userPassword = ""sadmin"";
 	
	var svcLogon    = TheApplication().GetService(""SAWSessionServiceSoap"");
	var wsInput 	= TheApplication().NewPropertySet();
	var wsOutput 	= TheApplication().NewPropertySet();
	var logonInput 	= TheApplication().NewPropertySet(); // IO
	var ListOflogon = TheApplication().NewPropertySet(); // Lof IC Logon
	var logon 		= TheApplication().NewPropertySet(); // IC
	
	// set Type and property for IC logon
	logon.SetType(""logon""); 			
	logon.SetProperty(""name"", userName);
	logon.SetProperty(""password"", userPassword);
	
	// Set types for LOflogon and root IO
	ListOflogon.SetType(""ListOflogon"");
	logonInput.SetType(""logonIn:parameters"");
	
	// assemble input property set for the service, bottom up
	ListOflogon.AddChild(logon);
	logonInput.AddChild(ListOflogon);
	wsInput.AddChild(logonInput);
	
	//Invoke the service
	try
	{
		svcLogon.InvokeMethod(""logon"", wsInput, wsOutput);
	}
	catch(e)
	{
		if (wsOutput.GetChildCount() > 0) 
		{
			var faultString = wsOutput.GetProperty("faultstring"");
			Outputs.SetProperty(""jobState"", ""Error"");
			Outputs.SetProperty(""errorMessage"", faultString);									
		}
		else
		{
			Outputs.SetProperty(""jobState"", ""Error"");
			Outputs.SetProperty(""errorMessage"", ""Login Failed"");
		}
	}
	
	//Retrieve sessionID from wsOutput
	//		->logonResult(""logonOut:parameters"")
	//			->ListOflogonResult(""ListOflogon"")
	//				->logonResult(""logonResult""), [""sessionID""]

	if (wsOutput.GetChildCount() > 0)
	{
	var logonResultIOOutput = wsOutput.GetChild(0);
		if (logonResultIOOutput.GetType() == ""logonOut:parameters"") 
		{
			if (logonResultIOOutput.GetChildCount() > 0) 			
			{
				var ListOflogonResultOutput = logonResultIOOutput.GetChild(0);
				if (ListOflogonResultOutput.GetType() == ""ListOflogonResult"") {
					if (ListOflogonResultOutput.GetChildCount() > 0) 
					{
						var logonResultOutput = ListOflogonResultOutput.GetChild(0);
						if (logonResultOutput.GetType() == ""logonResult"")
						{
							var sessionID = logonResultOutput.GetProperty(""sessionID"");
							Outputs.SetProperty(""sessionID"", sessionID);
						}
					}
				}
			}
		}
	}	

}
function SaveResultSet(Inputs, Outputs)
{
	var userName	 = ""sadmin"";
	var userPassword = ""sadmin"";
 	
	var svcJob      		= TheApplication().GetService(""JobManagementServiceSoap"");
	var wsInputJob 			= TheApplication().NewPropertySet();
	var wsOutputJob 		= TheApplication().NewPropertySet();
	var saveResultSetInput 	= TheApplication().NewPropertySet(); // IO
	var ListOfsaveResultSet = TheApplication().NewPropertySet(); 
	var saveResultSet 		= TheApplication().NewPropertySet(); // IC
	
	// set Type and property for IC saveResultSet
	saveResultSet.SetType(""saveResultSet""); 			
	saveResultSet.SetProperty(""sessionID"", Inputs.GetProperty(""sessionID""));
	var segPath = Inputs.GetProperty(""Segment Path"");
	if (segPath != """")
	{
		saveResultSet.SetProperty(""segmentPath"", segPath);
	}
	var segTreePath = Inputs.GetProperty(""Segment Tree Path"");
	if (segTreePath != """")
	{
		saveResultSet.SetProperty(""treeNodePath"", segTreePath);
	}
	
	// Set types for ListOfsaveResultSet and root IO
	ListOfsaveResultSet.SetType(""ListOfsaveResultSet"");
	saveResultSetInput.SetType(""saveResultSetIn:parameters"");
	
	// assemble input property set for the service, bottom up
	ListOfsaveResultSet.AddChild(saveResultSet);
	saveResultSetInput.AddChild(ListOfsaveResultSet);
	wsInputJob.AddChild(saveResultSetInput);
	
	//Invoke the service
	try
	{
		svcJob.InvokeMethod(""saveResultSet"", wsInputJob, wsOutputJob);
	}
	catch(e)
	{
		if (wsOutputJob.GetChildCount() > 0) 
		{
			var faultString = wsOutputJob.GetProperty("faultstring"");
			Outputs.SetProperty(""jobState"", ""Error"");
			Outputs.SetProperty(""errorMessage"", faultString);									
		}
	}
	
	//Get the Job Id from the output
	if (wsOutputJob.GetChildCount() > 0) 
	{
		var saveResultIOOutput = wsOutputJob.GetChild(0);
		if (saveResultIOOutput.GetType() == ""saveResultSetOut:parameters"") 
		{
			if (saveResultIOOutput.GetChildCount() > 0)
			{
				var ListOfsaveResultSetOutput = saveResultIOOutput.GetChild(0);
				if (ListOfsaveResultSetOutput.GetType() == ""sawsoap:jobInfo"") 
				{
					if (ListOfsaveResultSetOutput.GetChildCount() > 0) {
						var saveResultSetOutput = ListOfsaveResultSetOutput.GetChild(0);
						if (saveResultSetOutput.GetType() == ""jobStats"")
						{
							var jobID = saveResultSetOutput.GetChild(0).GetValue();
							Outputs.SetProperty(""jobID"", jobID);
							var jobState = saveResultSetOutput.GetChild(3).GetValue();
							Outputs.SetProperty(""jobState"", jobState);
													
						}
					}
				}
			}
		}
	}

}
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
    if (MethodName == ""ExecutePreLoadWorkflow"")  
    {  
       CanInvoke = true;  
    } 
    else if (MethodName == ""ExecutePostLoadWorkflow"")  
    {  
       CanInvoke = true;  
    } 
    else if (MethodName == ""ExecutePostLaunchWorkflow"")  
    {  
       CanInvoke = true;  
    }  
    return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   
  if (MethodName == ""ExecutePreLoadWorkflow"")
   {
   
       // Call the function ""ExecutePreLoadWorkflow""
       ExecutePreLoadWorkflow (Inputs, Outputs);
                    
       // Prevent a call to the C++ code
       return (CancelOperation);
   }
   else if (MethodName == ""ExecutePostLoadWorkflow"")
   {
   
       // Call the function ""ExecutePostLoadWorkflow""
       ExecutePostLoadWorkflow (Inputs, Outputs);
       
       // Prevent a call to the C++ code
       return (CancelOperation);
   }
   else if (MethodName == ""ExecutePostLaunchWorkflow"")
   {
   
       // Call the function ""ExecutePostLaunchWorkflow""
       ExecutePostLaunchWorkflow (Inputs, Outputs);
       
       // Prevent a call to the C++ code
       return (CancelOperation);
   } 
   
   return (ContinueOperation);  

}
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{
	var a = 3;
}
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
	var a = 3;
	return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var a = 3;
	return (ContinueOperation);
}
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{
	var a = 3;
}
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
	var a = 3;
	return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var a = 3;
	return (ContinueOperation);
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 6 $
//      $Date: 01/15/01 10:29a $
//    $Author: S.Garg $ of last update
//
// CREATOR:    P. Lim
//
// DESCRIPTION
//    Javascript maps from Siebel Order & Quote to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
/* This function shared by ""Simulate Order"" and ""Create Order"" */"
function ConvertMonth(cardExpMonth)
{ // general utility function
	var nMonth; 
	if ( cardExpMonth == ""January"" )
		{
			nMonth = ""01"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""February"" )
		{
			nMonth = ""02"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""March"" )
		{
			nMonth = ""03"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""April"" )
		{
			nMonth = ""04"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""May"" )
		{
			nMonth = ""05"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""June"" )
		{
			nMonth = ""06"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""July"" )
		{
			nMonth = ""07"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""August"" )
		{
			nMonth = ""08"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""September"" )
		{
			nMonth = ""09"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""October"" )
		{
			nMonth = ""10"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""November"" )
		{
			nMonth = ""11"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""December"" )
		{
			nMonth = ""12"";
			return nMonth ;
		}
	else
		{
			nMonth = ""01"";
			return nMonth ;
		}
}
function Create77SAP46COrder_SiebelToBAPI (inputMsg, outputMsg, InputIntObjName, OutputIntObjName)
{ // referenced by script CreateSAP46COrder_SiebelToBAPI
   /*
    * Input Objects' Integration Components
    *   Order Object (SAP 46C Order)
    *     Order (order)
    *       Order Line Item (item)
    *
    * Output Object's Integration Components:
    *   BAPI Import Object (SAP 46C Order - Create SAP Order (BAPI Import))
    *     Import Parameters
    *       ORDER_PARTNERS
    *       ORDER_ITEMS_IN
    *       ORDER_PARTNERS
    *		ORDER_CONDITIONS_IN
    *		ORDER_CFGS_INST
    *		ORDER_CFGS_REF
    *		ORDER_CFGS_VALUE
    *		ORDER_SCHEDULES_IN
    */

   /*
    * Set up EAI Lookup maps
    */
   var orderTypeLM = EAIGetValueMap (""SAP Order Types"",     	""Siebel Outbound"");
   var incotermsLM = EAIGetValueMap (""SAP Incoterms"",      		""Siebel Outbound"");
   var payTermsLM  = EAIGetValueMap (""SAP Payment Terms"",   	""Siebel Outbound"");
   var currencyLM  = EAIGetValueMap (""SAP Currency Code"",		""Siebel Outbound"");
   var cCardLM	   = EAIGetValueMap (""SAP Credit Card Type"",	""Siebel Outbound"");
   var uomLM       = EAIGetValueMap (""SAP Unit of Measure"", 	""Siebel Outbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iOrderObj;  // Order object instance
   var iOrderComp; // Order
   var iCardComp; // Card (Payments)
   var iItemComp;  // Order Line Item
   var iAttrComp;  // Item Attribute Component

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oCFDOrderObj;        // BAPI Order instance
   var oCFDImportComp;      // BAPI Import parameters
   var oCFDItemComp;        // BAPI Order Item
   var oCFDPartnerComp;     // BAPI Order Partners
   var oCFDCardComp;     	// BAPI Card Component
   var oCFDCfgInstComp;
   var oCFDCfgValComp;
   var oCFDCfgRefComp;
   var oCFDScheduleComp;
   var oCFDCondValComp;


   /*
    * Find and create top-level integration object
    */
   iOrderObj    = inputMsg.GetIntObj (InputIntObjName);
   oCFDOrderObj = outputMsg.CreateIntObj (OutputIntObjName);
   
   /*
    * Read int object instances from EAI message
    */
   while (iOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object in output message
       */
      oCFDOrderObj.NewInstance ();

      /*
       * Read ""Order"" component
       */
      iOrderComp     = iOrderObj.GetPrimaryIntComp (""Order Entry - Orders"");
      oCFDImportComp = oCFDOrderObj.CreatePrimaryIntComp (""Import Parameters"");
     
      if (iOrderComp.NextRecord ())
      {
         /*
          * Return an error if Integration Id is not null
          */
         if (iOrderComp.GetFieldValue (""Integration Id"") != """")
         {
              var IntId = iOrderComp.GetFieldValue (""Integration Id"");
              EAIRaiseError(LocalizeMessage(""ERR_MSG_ORDER_ALREADY_SUBMITTED,""+IntId+""""));

         }
        
         /*
          * Write ""Import Parameters"" component
          */
         oCFDImportComp.NewRecord ();
         oCFDImportComp.SetCopySource  (iOrderComp);
         
         var priceList =  null;
         priceList = iOrderComp.GetFieldValue (""Price List Id"");
         var currencyCode = currencyLM.Translate (iOrderComp.GetFieldValue (""Currency Code""));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DOC_NUMBER"", null);
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DOC_TYPE"",   orderTypeLM.Translate (iOrderComp.GetFieldValue (""Order Type"")));
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-CURRENCY"",  currencyCode );
         /*
         	*CR # 12-79SPMF to add validation for Sales Area in SAP
         */
         var salesOrg  = iOrderComp.GetFieldValue (""SAP Sales Organization (MO)"");
         var distChannel  = iOrderComp.GetFieldValue (""SAP Distribution Channel (MO)"");
         var division  = iOrderComp.GetFieldValue (""SAP Division (MO)"");
         if ((salesOrg != """") && (distChannel != """") && (division != """") )
         	 	{
         	 		oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_ORG"",  ""SAP Sales Organization (MO)"");
         	 		oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DISTR_CHAN"", ""SAP Distribution Channel (MO)"");
         	 		oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DIVISION"",   ""SAP Division (MO)"");
         	 	}
//nbc    else
//nbc     		{
//nbc     			EAIRaiseError(LocalizeMessage(""ERR_MSG_SALES_AREA_NOT_FOUND,""+salesOrg+"",""+distChannel+"",""+division+""""));
//nbc      		}
         if (iOrderComp.GetFieldValue (""Requested Ship Date"") != """")
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",   ""Requested Ship Date"");
               
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",       ""Order Date"");
            }
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DATE_TYPE"",  ""1"");
         if (iOrderComp.GetFieldValue (""Account Order Number"") != """")
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_NO_C"",   ""Account Order Number"");
               
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_NO_C"",       ""Order Number"");
            }
         
         
         
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_DATE"", ""Order Date"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REF_1"",      ""Order Number"");
         
         // Set NAME only if ""Contact Id"" is not null.
         if (iOrderComp.GetFieldValue (""Contact Id"") != null)
         {
            oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-NAME"", EAIFormatPersonName (iOrderComp.GetFieldValue (""Contact First Name""),
                                                                                       iOrderComp.GetFieldValue (""Contact Last Name"")));
         }         
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-TELEPHONE"",  ""Contact Work Phone #"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-INCOTERMS1"", incotermsLM.Translate (iOrderComp.GetFieldValue(""Freight Terms"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-INCOTERMS2"", ""Freight Terms Info"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-PMNTTRMS"",   payTermsLM.Translate (iOrderComp.GetFieldValue (""Payment Term"")));
         
         if (iOrderComp.GetFieldValue (""Partial Ship"") != ""Y"")
            {
               oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       ""X"");
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       null);
            }
            
         
         var date = iOrderComp.GetFieldValue ( ""Pricing Date"");
         oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-PRICE_DATE"", date );
         

         /*
          * Write ""ORDER_PARTNERS"" component  
          */
                  
         oCFDPartnerComp = oCFDImportComp.CreateIntComp (""ORDER_PARTNERS"", oCFDImportComp);

         // Sold to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""AG"");

         var soldtoparty =  iOrderComp.GetFieldValue (""Account Integration Id"");
         var array = soldtoparty.split("":"");
         var AccountIntId = array[0];
         
         
         oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId);

         // Ship To partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""WE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Ship To Account Integration Id"");

         // Payer partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RG"");
         var payerId = iOrderComp.GetFieldValue (""Payer Account Integration Id"");
         if (payerId == null || payerId == """")
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId );
         	}
         else
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", payerId );
         	}
         
         // Bill to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Bill To Account Integration Id"");

		/*
		 * Read and update Credit Card Info
		 *
		 */
		 iCardComp = iOrderComp.GetIntComp (""Payments"");
		 if (iCardComp.NextRecord ())
		 {
		 var ccType = cCardLM.Translate (iCardComp.GetFieldValue (""Payment Type""));
		 var ccNum = iCardComp.GetFieldValue (""Account Number"");
		 if ( ccNum != null && ccNum != """" )
		 
		 	{
		 		oCFDCardComp = oCFDImportComp.CreateIntComp (""ORDER_CCARD"");
		 		oCFDCardComp.NewRecord();
		 		oCFDCardComp.SetCopySource (iCardComp);
		 		var cardExpDate = iCardComp.GetFieldValue ( ""Expiration Date"");
		 		if ( cardExpDate == null || cardExpDate == """" )
		 			{
		 				var cardExpYear	= iCardComp.GetFieldValue (""Expiration Year"" );
		 				var cardExpMonth  = iCardComp.GetFieldValue (""Expiration Month"" );
		 				var cardExpDay;
		 				
		 				var nMonth = ConvertMonth (cardExpMonth);
		 				cardExpDay = GetDaysInAMonth(nMonth, cardExpYear);
		 				var cardExpFullDate = nMonth + ""/"" + cardExpDay + ""/"" + cardExpYear + "" 00:00:00"";
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpFullDate );
		 			}
		 		else
		 			{
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpDate );
		 			}
		 		oCFDCardComp.SetFieldValue		(""CC_TYPE"", 		ccType);
		 		oCFDCardComp.SetFieldValue		(""CC_NUMBER"", 		ccNum );
		 		oCFDCardComp.CopyFieldValue		(""CC_NAME"", 		""Card Holder"" );
				oCFDCardComp.CopyFieldValue		(""AUTHAMOUNT"", 		""Transaction Amount"" );
		 		oCFDCardComp.SetFieldValue		(""CURRENCY"", 		currencyCode );
		 	}
		 }
         /*
          * Read ""Order Line Item"" Integration Component
          */
         iItemComp    = iOrderComp.GetIntComp        (""Order Entry - Line Items"");
         oCFDItemComp = oCFDImportComp.CreateIntComp (""ORDER_ITEMS_IN"", oCFDImportComp);
         oCFDCondValComp = oCFDImportComp.CreateIntComp (""ORDER_CONDITIONS_IN"");
         oCFDCfgValComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_VALUE"", oCFDImportComp);       
         oCFDCfgRefComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_REF"", oCFDImportComp);         
         oCFDCfgInstComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_INST"", oCFDImportComp);
         oCFDScheduleComp = oCFDImportComp.CreateIntComp (""ORDER_SCHEDULES_IN"", oCFDImportComp);                  
         while (iItemComp.NextRecord ())
         {
/*            var posVariable =""00000"";

              Clib.sprintf(posVariable,""%06.6s"",iItemComp.GetFieldValue(""Line Number""));
            var itemNumber = posVariable;
                  
            var parentItemNum =  iItemComp.GetFieldValue (""Parent Order Item Id"");                  
            if((parentItemNum == null) || (parentItemNum ==""""))
            {*/
            oCFDItemComp.NewRecord ();
            oCFDItemComp.SetCopySource  (iItemComp);
            var itemNumber = iItemComp.GetFieldValue(""Line Number"");
            oCFDItemComp.CopyFieldValue (""ITM_NUMBER"",     ""Line Number""); 
            //oCFDItemComp.SetFieldValue (""HG_LV_ITEM"",     ""000000"");
            oCFDItemComp.SetFieldValue (""PO_ITM_NO"",      itemNumber);
            oCFDItemComp.CopyFieldValue (""MATERIAL"",       ""Product Integration Id"");
            
            if (iItemComp.GetFieldValue (""Partial Ship"") != ""Y"")
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""C"");
                }
            else
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""D"");
                }
           

            oCFDItemComp.CopyFieldValue (""PLANT"",          ""Source Inventory Location"");
            oCFDItemComp.SetFieldValue  (""SALES_UNIT"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
            oCFDItemComp.CopyFieldValue (""SHORT_TEXT"",     ""Description"");

		 		oCFDCondValComp.NewRecord();
		 		oCFDCondValComp.SetCopySource (iItemComp);           
           
            var siebelPrice = iItemComp.GetFieldValue ( ""Unit Price"" );
            var itemPrice = iItemComp.GetFieldValue ( ""Item Price"" );            
            
            if ((  siebelPrice != 0) || (  priceList != """" ))
            
            {
             	itemPrice = itemPrice / 10; // to fix SAP multiplication bug
             	oCFDCondValComp.SetFieldValue  (""COND_TYPE"",      ""PN00"");
            	//oCFDItemComp.SetFieldValue  (""PURCH_NO_C"",     ""X"");
                oCFDCondValComp.SetFieldValue (""COND_VALUE"",     itemPrice);
                oCFDCondValComp.SetFieldValue (""ITM_NUMBER"",     itemNumber);                
            }
            else
             	oCFDCondValComp.SetFieldValue  (""COND_TYPE"",      ""PR00"");
                oCFDCondValComp.SetFieldValue (""ITM_NUMBER"",     itemNumber);                             	
		 //Fright Value only if Siebel is Pricing Master		

            if ((  siebelPrice != 0) || (  priceList != """" ))
            var siebelFreight = iItemComp.GetFieldValue(""Freight Amount"");
		 if ((siebelFreight != 0) || (siebelFreight != """"))
		 {oCFDCondValComp.NewRecord();
		 oCFDCondValComp.SetCopySource (iItemComp);  
            
            {
             	var siebelFreight = siebelFreight / 10;// to fix SAP multiplication bug
             	oCFDCondValComp.SetFieldValue  (""COND_TYPE"",      ""KF00"");
                oCFDCondValComp.SetFieldValue (""COND_VALUE"",     siebelFreight);
                oCFDCondValComp.SetFieldValue (""ITM_NUMBER"",     itemNumber);                                
			}
			}
            oCFDScheduleComp.NewRecord ();
            oCFDScheduleComp.SetCopySource  (iItemComp);
            oCFDScheduleComp.CopyFieldValue (""SCHED_LINE"",     ""Line Number"");
            oCFDScheduleComp.SetFieldValue (""ITM_NUMBER"",     itemNumber);            
            oCFDScheduleComp.CopyFieldValue (""REQ_QTY"",     ""Quantity Requested"");            
            oCFDScheduleComp.CopyFieldValue (""REQ_DATE"",     ""Due Date"");            

/*
            oCFDCfgRefComp.NewRecord ();
            oCFDCfgRefComp.SetCopySource  (iItemComp);
            oCFDCfgRefComp.SetFieldValue (""POSEX"",     itemNumber);
            oCFDCfgRefComp.SetFieldValue (""CONFIG_ID"",     itemNumber);            
            oCFDCfgRefComp.SetFieldValue (""ROOT_ID"",     itemNumber);            


            oCFDCfgInstComp.NewRecord ();
            oCFDCfgInstComp.SetCopySource  (iItemComp);
            oCFDCfgInstComp.SetFieldValue (""INST_ID"",     itemNumber);
            oCFDCfgInstComp.SetFieldValue (""CONFIG_ID"",   itemNumber);            
            oCFDCfgInstComp.SetFieldValue (""OBJ_TYPE"",     ""MARA"");            
            oCFDCfgInstComp.SetFieldValue (""OBJ_KEY"",     ""MATERIAL"");            
            oCFDCfgInstComp.SetFieldValue (""QUANTITY"",     ""1"");            


           
      
                    
          // Read ""Order Line Item Attribute Value"" Integration Component
          
         iAttrComp    = iItemComp.GetIntComp        (""Order Item XA"");

         
         while (iAttrComp.NextRecord ())
         {

            oCFDCfgValComp.NewRecord ();
            oCFDCfgValComp.SetCopySource  (iAttrComp);
            oCFDCfgValComp.CopyFieldValue (""CHARC"",     ""Name"");
            oCFDCfgValComp.CopyFieldValue (""VALUE"",     ""Value"");
            oCFDCfgValComp.CopyFieldValue (""CHARC_TXT"", ""Description"");
            oCFDCfgValComp.SetFieldValue (""INST_ID"", itemNumber);
            oCFDCfgValComp.SetFieldValue (""CONFIG_ID"", itemNumber);
		}
		
}  // end if condition for Parent item num  
*/   
         } //order items read
      }
      
   }
}
function CreateOrder ()
{ // referenced by script QuoteToOrderSubmit
	var OrgBusObject = TheApplication().GetBusObject(""Order Entry"");
	var SABusComp = OrgBusObject.GetBusComp(""Order Entry - Orders"");
	var orderType= TheApplication().InvokeMethod (""LookupValue"", 	""FS_ORDER_TYPE"", ""Sales Order"");
    var orderCode= TheApplication().InvokeMethod (""LookupValue"", 	""FS_ORDER_TYPE_CODE"", ""Sales"");
	
	SABusComp.NewRecord(0);
	SABusComp.SetFieldValue			(""Active"",				""Y"");
    SABusComp.SetFieldValue 		(""Order Type"",   		orderType);	
	SABusComp.SetFieldValue 		(""Order Type Code"",   	orderCode);	
	// SABusComp.SetFieldValue			(""Price List Id"",		priceList);
	SABusComp.WriteRecord();
	return SABusComp.GetFieldValue	(""Id"");
	
}
function CreateSAP46COrder_BAPIToSiebel (inputMsg, outputMsg)
{  // referenced by workflow Order - Create SAP 46C Order
   /* Input Objects' Integration Components
    *   BAPI Export (SAP 46C Order - Create SAP Order (BAPI Output))
    *     Export Parameters (output)
    *
    * Output Object's Integration Components:
    *   Order Object (SAP 46C Order)
    *     Order (oOrder)
    *     
    */

   /*
    * Set up EAI Lookup objects
    */
   var currencyLM = new CSSEAIValueMap (""SAP Currency Code"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iOrderObj;   	// BAPI Order instance
   var iExportComp; 	// BAPI Export Parameters
   var iReturnComp; 	// BAPI Return component
   var iItemComp;	   	// BAPI Line Items
   var iIItemComp;	   	// BAPI Inpout Line Items ( ""ORDER_ITEMS_IN"") To fetch Pricing Master Info
   var iSchedItemComp; 	// BAPI Schedule Line Items

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;      // Siebel Order instance
   var oOrderComp;     // Order
   var oRFCOrderComp;  // Create Output for RFC_* Table
   var oItemComp;      // Order Line Item
   var oRFCItemComp;   // Output Line Item for RFC_* Table to store pricing info
   var oSchedItemComp  // Schedule Line Item

   /*
    * Find and create top-level integration object
    */
   iOrderObj = inputMsg.GetIntObj(""SAP 46C Order - Create SAP Order (BAPI Output)"");
   oOrderObj = outputMsg.CreateIntObj (""SAP 46C Order"");

   /*
    * Read int object instances from EAI message
    */
   while (iOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object
       */
      oOrderObj.NewInstance ();

      /*
       * Create ""Order"" component in output message
       */
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order Entry - Orders"");
      oOrderComp.NewRecord();
      // Set ""Id"" so Siebel Adapter can synchronize
      oOrderComp.SetFieldValue (""Id"", inputId);

      /*
       * Read ""Export Parameters"" component
       */
      iExportComp = iOrderObj.GetPrimaryIntComp (""Export Parameters"");
      if (iExportComp.NextRecord ())
      {
      
         /*
          * Update ""Order"" component
          */
         oOrderComp.SetCopySource  (iExportComp);
         
         
		 
		 oOrderComp.SetFieldValue 		(""As Of Date"", 		Timestamp());
		 oOrderComp.SetFieldValue 		(""EAI Sync Date"", 		Timestamp());

         oOrderComp.CopyFieldValue 		(""Integration Id"",  ""SALESDOCUMENT"");
         
         iReturnComp = iExportComp.GetIntComp   (""RETURN"");
         while (iReturnComp.NextRecord ())
         {
            var errorType = iReturnComp.GetFieldValue (""TYPE"");
            if (errorType == ""E"")
            {
            	oOrderComp.SetCopySource  (iReturnComp);
            	oOrderComp.CopyFieldValue (""Back Office Error Text"", ""MESSAGE"");
            	break;
            }
          }         
      }
   }
}
function CreateSAP46COrder_SiebelToBAPI (inputMsg, outputMsg)
{ // referenced by workflow Order - Create SAP 46C Order
   /* Uses same map as CreateFromData() */
   Create77SAP46COrder_SiebelToBAPI (inputMsg, outputMsg,
                                        ""SAP 46C Order"",
                                        ""SAP 46C Order - Create SAP Order (BAPI Input)"");
}
function CreateSAP46COrder_SiebelToBAPICOMMIT (inputMsg, outputMsg)
{  // referenced by workflow Order - Create SAP 46C Order
	/*
	 * Set up EAI Output Message Objects
	 */
	 var oCommitObj;	// BAPI instance
	 var oCommitComp;	// BAPI Component
	 
	oCommitObj	= outputMsg.CreateIntObj (""Account - Commit SAP 46C Transaction (BAPI Input)"");
    oCommitObj.NewInstance();
    oCommitComp = oCommitObj.CreatePrimaryIntComp (""Import Parameters"");
    oCommitComp.NewRecord ();
   
}
function GetDaysInAMonth(nMonth, nYear)
{ // general utility function

	// Jan, Mar, May, Jul, Aug, Oct, Dec have 31 days each
	// Apr, Jun, Sept, Nov have 30 days each
	// Feb, for now, has 28 days.
	var daysInMonth = new Array(31,28,31,30,31,30,31,31,30,31,30,31);
	var nCurrentDays;


	// Only February can be either 28 or 29, depending on whether the year is a leap year
	if (nMonth == 2)
	{
		// If the year is divisible by 4, it is a leap year
		if (nYear%4 == 0)
		{
			// If the year is a century, then it should be divisible by 400 to be a leap year.
			if (nYear%100 == 0)
			{
				// If it is a century and divisible by 400, it is a leap year.
				if (nYear%400 == 0) { nCurrentDays = 29;}

				// If it is a century and NOT divisible by 400 (e.g. 1900), it is NOT a leap year.
				else	{ nCurrentDays = 28;}
			}
		
			// If it is not a century and divisible by 4, it is a leap year.
			else { nCurrentDays = 29;}
		}

		// If a year is NOT divisible by 4, it is not a leap year
		else { nCurrentDays = 28; }
	}


	// If the month is NOT Feb, calculating days in a month is straight-forward.
	// eScript array index starts with 0, not 1.
	else
	{ nCurrentDays = daysInMonth[nMonth - 1]; }

	return nCurrentDays;

}
function GetOrderId (orderId)
{ // Called from script OrderStatus
	var OrdBusObject = TheApplication().GetBusObject(""Order Entry"");
	var OrdBusComp = OrdBusObject.GetBusComp(""Order Entry - Orders"");
	
	OrdBusComp.ClearToQuery();
	OrdBusComp.SetViewMode (AllView); // 12-8NF9TR
	OrdBusComp.SetSearchSpec(""Integration Id"", orderId);
	OrdBusComp.ActivateField(""Id"");
	OrdBusComp.ExecuteQuery();
	
	if(OrdBusComp.FirstRecord())
	{
	   return OrdBusComp.GetFieldValue(""Id"");
	}
      	else
           return null;
	
}
function GetSAP46CGetDetailedList_BAPIToSiebel (inputMsg, outputMsg)
{  // referenced by workflow Order - Get Detailed List SAP 46C Order
   /*
    * Input Objects' Integration Components
    *   BAPI Export (SAP 46C Order - Get Detailed List (BAPI Output))
    *     Export Parameters (output)
    *       Order Header (header)
    *         Order Item (item)
    *           Order Item Delivery Item (deliv)
    *
    * Output Object's Integration Components:
    *   Order Object (SAP 46C Order)
    *     Order (oOrder)
    *       Get Status Output
    *       Get Status Header
    *         Get Status Item
    *           Get Status Item Delivery Item
    *       Order Line Item
    *         Order Line Item Action
    */

   /*
    * Set up EAI Lookup objects
    */
   var currencyLM = new CSSEAIValueMap (""SAP Currency Code"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iGSOrderObj;        // BAPI Order instance
   var iGSExportComp;      // BAPI Export Parameters
   var iGSHeaderComp;      // BAPI Order Headers for Document Numbers ***
   var iGSItemComp;        // BAPI Order Item Data for Document Numbers ***
   var iGSCondComp; 	   // BAPI Condition Records
   var iGSScheduleComp;    // BAPI Order Schedule Lines for Document Numbers ***
   var iGSHeaderStatusComp;// BAPI Header Status for Document Numbers ***
   var iGSItemStatusComp;  // BAPI item Status for Document Numbers ***
   var iGSDocFlowComp;     // BAPI Document Flows for Document Numbers ***
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;        // Siebel Orderinstance
   var oOrderComp;       // Order
   var oItemComp;        // Order Line Item
   var oScheduleComp;    // Order Line Item Action
   var oDelivComp;       // Order Line Item Action
   var oDocFlowComp;     // Order XA
      

   /*
    * Find and create top-level integration object
    */
   iGSOrderObj = inputMsg.GetIntObj(""SAP 46C Order - Get Detailed List (BAPI Output)"");
   oOrderObj = outputMsg.CreateIntObj (""SAP 46C Order"");

   /*
    * Read int object instances from EAI message
    */

   while (iGSOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object in output message
       */
      oOrderObj.NewInstance ();
      
      /*
       * Create ""Order"" component
       */
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order Entry - Orders"");
      oOrderComp.NewRecord ();
      // Set ""Id"" so Siebel Adapter can synchronize
      oOrderComp.SetFieldValue (""Id"", inputId);
      
      /*
       * Read ""Export Parameters"" component
       */
      iGSExportComp = iGSOrderObj.GetPrimaryIntComp (""Export Parameters"");
      
   
      if (iGSExportComp.NextRecord())
      {
         /*
          * Read ""Order Header"" component
          */
         iGSHeaderComp = iGSExportComp.GetIntComp (""ORDER_HEADERS_OUT"");
         
         if (iGSHeaderComp.NextRecord ())
         {
            /*
             * Update ""Order"" component
             */
            oOrderComp.SetCopySource  (iGSHeaderComp);
            
            // EAI Lookup code ""SAP Currency""
            var currencyCode = currencyLM.Translate (iGSHeaderComp.GetFieldValue (""CURRENCY""));
   
            if (currencyCode != null && currencyCode != """")
              {     
                 oOrderComp.SetFieldValue  (""Currency Code"", currencyCode);
              }     
            oOrderComp.CopyFieldValue (""Requested Ship Date"",     ""REQ_DATE_H"");
            oOrderComp.CopyFieldValue (""Integration Id"",          ""DOC_NUMBER"");
            oOrderComp.CopyFieldValue (""Account Order Number"",    ""PURCH_NO"");
            
            // Delivery Block
            var sapDelBlock = iGSHeaderComp.GetFieldValue ( ""DLV_BLOCK"" );
		    var delBlock = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_HEADER_DELIV_BLOCK"", sapDelBlock);
		    oOrderComp.SetFieldValue (""Delivery Block"",          delBlock);
		    
		    // Billing Block
		    //var sapBillBlock = iGSHeaderComp.GetFieldValue ( ""BILL_BLOCK"" );
		    //var billBlock = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_HEADER_BILL_BLOCK"", sapBillBlock);
		    //oOrderComp.SetFieldValue (""Billing Block"",          billBlock);
		    
		    var salesdoc =  iGSHeaderComp.GetFieldValue (""DOC_NUMBER"");
                    
        
         iGSHeaderStatusComp = iGSExportComp.GetIntComp (""ORDER_STATUSHEADERS_OUT"");
         
         if (iGSHeaderStatusComp.NextRecord ())
         {
           
           	 oOrderComp.SetCopySource  (iGSHeaderStatusComp);
   	      // Overall processing status of document
			 var sapOStatus = iGSHeaderStatusComp.GetFieldValue ( ""PRC_STAT_H"" );
        	 if ( sapOStatus == ""C"" )
           		{
           			oOrderComp.SetFieldValue ( ""Status"" , 	TheApplication().InvokeMethod (""LookupValue"", ""FS_ORDER_STATUS"", ""Closed""));
           		}
            		else if ( sapOStatus == ""B"" )
           		{
              		oOrderComp.SetFieldValue ( ""Status"" , 	TheApplication().InvokeMethod (""LookupValue"", ""FS_ORDER_STATUS"", ""Partially Shipped""));	
           		}
            	  		else 
           			{
           	   			oOrderComp.SetFieldValue ( ""Status"" , 	TheApplication().InvokeMethod (""LookupValue"", ""FS_ORDER_STATUS"", ""Open""));             	 
            		} 
                     
         // Delivery status
			 var sapDStatus = iGSHeaderStatusComp.GetFieldValue ( ""DELIV_STAT"" );
        	 if ( sapDStatus == ""C"" )
        		{
       	    		oOrderComp.SetFieldValue ( ""Delivery Status"" , 	TheApplication().InvokeMethod (""LookupValue"", ""FS_DELIVERY_STATUS"", ""Closed""));
           		}
            		else if ( sapDStatus == ""B"" )
           		{
              		oOrderComp.SetFieldValue ( ""Delivery Status"" , 	TheApplication().InvokeMethod (""LookupValue"", ""FS_DELIVERY_STATUS"", ""Partially Shipped""));	
           		}
              			else 
           			{
           	   			oOrderComp.SetFieldValue ( ""Delivery Status"" , 	TheApplication().InvokeMethod (""LookupValue"", ""FS_DELIVERY_STATUS"", ""Open""));             	 
            		}               	                    
            
         } 
                           	                    
	      /*
           * Item
           */
          
          iGSItemComp = iGSExportComp.GetIntComp (""ORDER_ITEMS_OUT"");

          
          oItemComp = oOrderComp.CreateIntComp (""Order Entry - Line Items"", false);
                      
          while (iGSItemComp.NextRecord ())
           	 {
         	     //var parItemnum = iGSItemComp.GetFieldValue (""HG_LV_ITEM"");
         	     //if (parItemnum == ""000000"" || parItemnum == """") // remove this if clause in case you want to get Child Component of Configurable Materials
				//{               
               
            	 var itemMaterial = iGSItemComp.GetFieldValue (""MATERIAL"");
               
              	 oItemComp.NewRecord ();
               	 oItemComp.SetCopySource (iGSItemComp);
               	 var itemnum  = iGSItemComp.GetFieldValue (""ITM_NUMBER"");
            	 var qtyReq   = iGSItemComp.GetFieldValue (""REQ_QTY"");
             	 var itemReqDate 	   = iGSItemComp.GetFieldValue (""REQ_DATE"");
            	 oItemComp.CopyFieldValue (""Product Integration Id"", ""MATERIAL"");
               	 oItemComp.CopyFieldValue (""Line Number"",            ""ITM_NUMBER"");
               	 oItemComp.CopyFieldValue (""Description"",            ""SHORT_TEXT"");
               	 var itemUOM = iGSItemComp.GetFieldValue (""SALES_UNIT"");
		       	 oItemComp.CopyFieldValue (""Product Unit of Measure"",""SALES_UNIT"");
                 oItemComp.SetFieldValue (""Quantity Requested"", qtyReq);
				 oItemComp.CopyFieldValue (""Quantity Shipped"",  ""REF_QTY"");
                 oItemComp.SetFieldValue (""Due Date"", itemReqDate);
				 oItemComp.CopyFieldValue (""NRC CxTotal"", ""NET_VALUE""); // nbc 7.8.2 
              
            	 var condFlag = false;
		         iGSCondComp = iGSExportComp.GetIntComp (""ORDER_CONDITIONS_OUT"");	                 
                 while (iGSCondComp.NextRecord ())
                 {
                  oItemComp.SetCopySource (iGSCondComp);
                 	if ((iGSCondComp.GetFieldValue (""ITM_NUMBER"") == itemnum)) 
                  		{
                 			if ((iGSCondComp.GetFieldValue (""COND_TYPE"") == ""PN00""))
                 			 {	var netPrice = 0;
                 				var netValue = 0;
                 				if (itemUOM == (iGSCondComp.GetFieldValue (""COND_D_UNT"")))
                					{oItemComp.CopyFieldValue  (""Unit Price"",   ""COND_VALUE"");
                 				 	oItemComp.CopyFieldValue  (""Adjusted List Price"",   ""COND_VALUE"");
									oItemComp.CopyFieldValue  (""Net Price"",   ""COND_VALUE""); // nbc 7.8.2 SAP 4x Net Price
                 					}
                 			  	else
              						{netValue = (iGSCondComp.GetFieldValue (""CONDVALUE""));
                 					 	if (netValue != 0)
                 			 		 		{netPrice = (netValue / qtyReq); 
                 			 	 	 		 oItemComp.SetFieldValue  (""Unit Price"",   netPrice);
               	 			 	 			 oItemComp.SetFieldValue  (""Adjusted List Price"",   netPrice);
										     oItemComp.SetFieldValue  (""Net Price"",   netPrice); //nbc 7.8.2 SAP 4x Net Price
               	 			 	 			}
               	 			 	 	}
               	 			 	condFlag = true;
               	 	     	}
               	 		
               	   			if ((iGSCondComp.GetFieldValue (""COND_TYPE"") == ""PR00"") && (condFlag == false))
	               				{	
                 					var netPrice= 0;
                 					var netValue = 0;
                 					if (itemUOM == (iGSCondComp.GetFieldValue (""COND_D_UNT"")))
                 			    		{oItemComp.CopyFieldValue  (""Unit Price"",   ""COND_VALUE"");
                 				 		oItemComp.CopyFieldValue  (""Adjusted List Price"",   ""COND_VALUE"");
										oItemComp.CopyFieldValue  (""Net Price"",   ""COND_VALUE""); //nbc 7.8.2 SAP 4x Net Price										
                 						}
                 					else
                 						{ netValue = (iGSCondComp.GetFieldValue (""CONDVALUE""));
                 			 	  		if (netValue != 0)
                 			 		 		{netPrice = (netValue / qtyReq); 
                 			 		  		oItemComp.SetFieldValue  (""Unit Price"",  netPrice);
               	 			 	      		oItemComp.SetFieldValue  (""Adjusted List Price"",  netPrice); 
											oItemComp.SetFieldValue  (""Net Price"",  netPrice); //nbc 7.8.2 SAP 4x Net Price
               	 			 	      		}
               	 			 	 		}
               	 		 		}
               	 		
               	 	if ((iGSCondComp.GetFieldValue (""COND_TYPE"") == ""KF00""))
                 		{
                 		 oItemComp.CopyFieldValue  (""Freight Amount"",   ""CONDVALUE"");
               	 		}
               	 			
               	 	if ((iGSCondComp.GetFieldValue (""COND_TYPE"") == ""UTXJ""))
                 		{
                 		 oItemComp.CopyFieldValue  (""Tax Amount"",   ""CONDVALUE"");
               	 		}
               	 	} // end if ((iGSCondComp.GetFieldValue (""ITM_NUMBER"") == itemnum)) 
               	 } // end while (iGSCondComp.NextRecord ())
		 
                 iGSItemStatusComp = iGSExportComp.GetIntComp (""ORDER_STATUSITEMS_OUT"");
                 while (iGSItemStatusComp.NextRecord ())
           	     {
           	       oItemComp.SetCopySource  (iGSItemStatusComp);
           	        var iStatusItemNum = iGSItemStatusComp.GetFieldValue (""ITM_NUMBER"");
           	        if (iStatusItemNum == itemnum)
           	        {
           	          var sapStatus = iGSItemStatusComp.GetFieldValue ( ""DLV_STAT_I"" );
		 	          var itemStatus= TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_ITEM_DELIV_STATUS"", sapStatus);
                      oItemComp.SetFieldValue (""Delivery Status"",        itemStatus);
                    }
                  }

          // Item Schedule

		         iGSScheduleComp = iGSExportComp.GetIntComp (""ORDER_SCHEDULES_OUT"");
		         oScheduleComp   = oItemComp.CreateIntComp (""Order Entry - Line Item Actions"");
                 while (iGSScheduleComp.NextRecord ())
           	      { 
           	       var itemnum2  = iGSScheduleComp.GetFieldValue (""ITM_NUMBER"");
                   var schednum = iGSScheduleComp.GetFieldValue (""SCHED_LINE"");
                   var intId;
                   if (itemnum2 == itemnum)
                   {
           
                    oScheduleComp.NewRecord ();
                    oScheduleComp.SetCopySource  (iGSScheduleComp);
                
                    intId = inputId + ""-"" + itemnum2 + ""-"" + schednum;
                    oScheduleComp.SetFieldValue (""Line Item Action Number"",     intId);
                    oScheduleComp.SetFieldValue (""Integration Id"",     intId);
                    oScheduleComp.CopyFieldValue (""Actual Start Date"",           ""GI_DATE"");
                    oScheduleComp.CopyFieldValue (""Confirmed Qty"",               ""CONFIR_QTY"");
                    var reqDate = iGSScheduleComp.GetFieldValue ( ""REQ_DATE"");
                    oScheduleComp.SetFieldValue (""Planned Start Date"" ,          reqDate);
                    var shipValue = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_PART_MOVEMENT_TYPE"", ""Schedule"");
                    oScheduleComp.SetFieldValue  (""Line Item Action Type"",   shipValue);
                
                   } 
           	     }
           	   

          	/*	
             * Item Document Flow
			 */
			 
		 		 iGSDocFlowComp = iGSExportComp.GetIntComp (""ORDER_FLOWS_OUT"");
                   var prevDoc = null;
                   var prevItem = null;

				while (iGSDocFlowComp.NextRecord ())
           	      { 
           	       var itemnum3 = null; 
				   var docCat = iGSDocFlowComp.GetFieldValue (""DOCCATEGOR"");          	      
         	       var ordernum2  = iGSDocFlowComp.GetFieldValue (""PRECSDDOC"");
                   var subqDoc  = iGSDocFlowComp.GetFieldValue (""SUBSSDDOC"");
                   var subqItem = iGSDocFlowComp.GetFieldValue (""SUBSITDOC"");
         	       
           	       itemnum3   = iGSDocFlowComp.GetFieldValue (""PREDITDOC"");
                   if ((itemnum3 == itemnum) && (docCat == ""J""))
 					{
                    oScheduleComp.NewRecord ();
                    oScheduleComp.SetCopySource  (iGSDocFlowComp);
                    var itemActionNum = subqDoc + ""-"" + subqItem ;
                    oScheduleComp.SetFieldValue  (""Line Item Action Number"",  itemActionNum);
                    oScheduleComp.CopyFieldValue (""Confirmed Qty"",       ""REF_QTY"");
                    oScheduleComp.CopyFieldValue (""Planned Start Date"",       ""CREAT_DATE"");
                    oScheduleComp.SetFieldValue  (""Integration Id"",  itemActionNum);
                    var shipValue = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_PART_MOVEMENT_TYPE"", ""Delivery"");
                
                    oScheduleComp.SetFieldValue  (""Line Item Action Type"",   shipValue);
                    prevDoc = subqDoc;
                    prevItem = subqItem;
                    }
                    
                    
                    else if ((docCat == ""R"") && (prevDoc == ordernum2) && (prevItem == itemnum3))
                    {
                    oScheduleComp.NewRecord ();
                    oScheduleComp.SetCopySource  (iGSDocFlowComp);
                    var itemActionNum1 = subqDoc + ""-"" + subqItem ;
                    oScheduleComp.SetFieldValue  (""Line Item Action Number"",  itemActionNum1);
                    oScheduleComp.CopyFieldValue (""Confirmed Qty"",       ""REF_QTY"");
                    oScheduleComp.CopyFieldValue (""Planned Start Date"",       ""CREAT_DATE"");
                    oScheduleComp.SetFieldValue  (""Integration Id"",  itemActionNum1);
                    var shipValue = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_PART_MOVEMENT_TYPE"", ""Ship"");
                
                    oScheduleComp.SetFieldValue  (""Line Item Action Type"",   shipValue);
                    prevDoc = subqDoc;
                    prevItem = subqItem;
					}
                    
                  }

	        }
	      //} // endif for (parItemnum == ""000000"") 
		}
 	 }
                
   }
}
function GetSAP46CGetDetailedList_SiebelToBAPI (inputMsg, outputMsg)
{  // referenced by workflow Order - Get Detailed List SAP 46C Order
   /* Input Objects' Integration Components
    *   Order Object (SAP 46C Order)
    *     Order
    *
    * Output Object's Integration Components:
    *   BAPI Import (SAP 46C Order - Get Detailed List (BAPI Input))
    *     Import Parameters
    */

   /*
    * Set up EAI Lookup objects
    */

   /*
    * Set up EAI Input Message objects
    */
   var iOrderObj;    // Siebel Order instance
   var iOrderComp;   // Order

   /*
    * Set up EAI Output Message objects
    */
   var oGSObj;           // BAPI instance
   var oGSImportComp;    // Import Parameters
   var oGSSalesDocComp;  // Import Parameters

   /*
    * Find and create top-level integration object
    */
   iOrderObj = inputMsg.GetIntObj (""SAP 46C Order"");
   oGSObj    = outputMsg.CreateIntObj (""SAP 46C Order - Get Detailed List (BAPI Input)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iOrderObj.NextInstance ())
   {
      /*
       * Create ""Get Status"" object
       */
      oGSObj.NewInstance ();

      /*
       * Read ""Order"" component
       iOrderComp     = iOrderObj.GetPrimaryIntComp (""Order Entry - Orders"");
      oCFDImportComp = oCFDOrderObj.CreatePrimaryIntComp (""Import Parameters"");

       */
      iOrderComp      = iOrderObj.GetPrimaryIntComp (""Order Entry - Orders"");
      oGSImportComp   = oGSObj.CreatePrimaryIntComp (""Import Parameters"");

      
      if (iOrderComp.NextRecord ())
      {

          
         oGSImportComp.NewRecord ();
         oGSImportComp.SetCopySource  (iOrderComp);
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-ADDRESS"",   ""X""); 
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-BILLPLAN"",  ""X"");
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-BUSINESS"",  ""X"");
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-CONFIGURE"", ""X"");
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-CONTRACT"",  ""X""); 
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-CREDCARD"",  ""X""); 
         oGSImportComp.SetFieldValue (""I_BAPI_VIEW-FLOW"",      ""X"");
         oGSImportComp.SetFieldValue (""I_BAPI_VIEW-HEADER"",    ""X"");
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-INCOMP_LOG"",""X""); 
         oGSImportComp.SetFieldValue (""I_BAPI_VIEW-ITEM"",      ""X"");
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-PARTNER"",   ""X""); 
         oGSImportComp.SetFieldValue (""I_BAPI_VIEW-SDCOND"",    ""X"");
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-SDCOND_ADD"",""X"");
         oGSImportComp.SetFieldValue (""I_BAPI_VIEW-SDSCHEDULE"",""X"");
         oGSImportComp.SetFieldValue (""I_BAPI_VIEW-STATUS_H"",  ""X"");
         oGSImportComp.SetFieldValue (""I_BAPI_VIEW-STATUS_I"",  ""X"");
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-TEXT"",      ""X""); 
         oGSImportComp.SetFieldValue (""I_MEMORY_READ"",         ""A"");
         oGSSalesDocComp = oGSImportComp.CreateIntComp (""SALES_DOCUMENTS"");         
         oGSSalesDocComp.NewRecord ();
         oGSSalesDocComp.SetCopySource  (iOrderComp);
         oGSSalesDocComp.CopyFieldValue (""VBELN"", ""Integration Id"");
      
      }

   }   
}
function LocalizeMessage(Message)
{ // general utility function
	// Function to perform message language translation and parameterization.
	//
	// Created by Richard Exley - November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ERR_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ERR_MSG"";
	var LOVType = ""CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function OrderStatus (inputMsg,outputMsg )
{ // referenced from workflow Order - Change SAP 46C Order Status
	// var theApp = TheApplication();
	
   /* Input Objects' Integration Components
	*   Order IDOC (SAP 46C Order Status (IDOC 4x))
	*
	*/

   
   /*
	* Set up EAI Input Message objects
	*/
	var iIDOCObj;   // IDOC instance
	var iIDOCComp;  // top level IDOC segment
	var iORDERComp; // IDOC Order Header
	
   /*
    * Set up EAI Output Message objects (Dummy)
    */
   var oOrderObj;      // Order object instance
   var oOrderComp;     // Order (header)
   var oOrderItemComp; // Order Item (item)
	
   /*
	* Find and create top-level integration object
	*/
	iIDOCObj    = inputMsg.GetIntObj (""SAP 46C Order Status (IDOC 4x)"");
	oOrderObj = outputMsg.CreateIntObj (""SAP 46C Order"");
	
   /*
	* Read int object instances from EAI message
	*/
	while (iIDOCObj.NextInstance ())
	{
	   
       /*
		* Read virtual root component that IDOC RFC Adapter populates
		*/
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		oOrderObj.NewInstance ();
		oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order Entry - Orders"");
		iIDOCComp.NextRecord ();

	   /*
		* Read ""ORDER"" component
		*/
        iORDERComp = iIDOCComp.GetIntComp (""E2EDK01005"");
		if (iORDERComp.NextRecord ())
		    {
			   
			    var orderNo = iORDERComp.GetFieldValue ( ""BELNR"" );
			    var orderId;
				
				orderId = GetOrderId(orderNo);
				
				outputMsg.SetArgument (""Object Id"", orderId);
                
				var wfManager = TheApplication().GetService(""EAI Business Integration Manager (Server Request)"");
    
    			var input = TheApplication().NewPropertySet();
		    	var output = TheApplication().NewPropertySet();
		    	input.SetProperty(""ProcessName"", ""Order - Get Detailed List SAP 46C Order"");
    			input.SetProperty(""RowId"", orderId);
    			wfManager.InvokeMethod(""RunProcess"", input, output);
    			// TheApplication().MsgBox(""Get Status WF Invoked Sucessfully"");
    		}	
	

	}

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"
function Simulate77SAP46COrder_SiebelToBAPI (inputMsg, outputMsg, InputIntObjName, OutputIntObjName)
{ // referenced by script SimulateSAP46COrder_SiebelToBAPI
   /*
    * Input Objects' Integration Components
    *   Order Object (SAP 46C Order)
    *     Order Entry - Orders (order header)
    *       Order Entry - Line Items (item)
    *        Order Item XA (attributes)
    *
    * Output Object's Integration Components:
    *   BAPI Import Object (SAP 46C Order - Create SAP Order (BAPI Import))
    *     Import Parameters
    *      ORDER_HEADER_IN
    *       ORDER_PARTNERS
    *       ORDER_CCARD
    *       ORDER_ITEMS_IN
    *		ORDER_CFGS_INST
    *		ORDER_CFGS_REF
    *		ORDER_CFGS_VALUE
    */

   /*
    * Set up EAI Lookup maps
    */
   var orderTypeLM = EAIGetValueMap (""SAP Order Types"",     	""Siebel Outbound"");
   var incotermsLM = EAIGetValueMap (""SAP Incoterms"",      		""Siebel Outbound"");
   var payTermsLM  = EAIGetValueMap (""SAP Payment Terms"",   	""Siebel Outbound"");
   var currencyLM  = EAIGetValueMap (""SAP Currency Code"",		""Siebel Outbound"");
   var cCardLM	   = EAIGetValueMap (""SAP Credit Card Type"",	""Siebel Outbound"");
   var uomLM       = EAIGetValueMap (""SAP Unit of Measure"", 	""Siebel Outbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iOrderObj;  // Order object instance
   var iOrderComp; // Order
   var iCardComp; // Payments
   var iItemComp;  // Order Line Item
   var iAttrComp;  // Item Attribute Component

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oCFDOrderObj;        // BAPI Order instance
   var oCFDImportComp;      // BAPI Import parameters
   var oCFDItemComp;        // BAPI Order Item
   var oCFDPartnerComp;     // BAPI Order Partners
   var oCFDCardComp;     	// BAPI Card Component
   var oCFDCfgInstComp;
   var oCFDCfgValComp;
   var oCFDCfgRefComp;


   /*
    * Find and create top-level integration object
    */
   iOrderObj    = inputMsg.GetIntObj (InputIntObjName);
   oCFDOrderObj = outputMsg.CreateIntObj (OutputIntObjName);
   
   /*
    * Read int object instances from EAI message
    */
   while (iOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object in output message
       */
      oCFDOrderObj.NewInstance ();

      /*
       * Read ""Order"" component
       */
      iOrderComp     = iOrderObj.GetPrimaryIntComp (""Order Entry - Orders"");
      oCFDImportComp = oCFDOrderObj.CreatePrimaryIntComp (""Import Parameters"");
     
      if (iOrderComp.NextRecord ())
      {
         /*
          * Return an error if Integration Id is not null
          */
         if (iOrderComp.GetFieldValue (""Integration Id"") != """")
         {
              var IntId = iOrderComp.GetFieldValue (""Integration Id"");
              EAIRaiseError(LocalizeMessage(""ERR_MSG_ORDER_ALREADY_SUBMITTED,""+IntId+""""));

         }
        
         /*
          * Write ""Import Parameters"" component
          */
         oCFDImportComp.NewRecord ();
         oCFDImportComp.SetCopySource  (iOrderComp);
         
         var priceList =  null;
         priceList = iOrderComp.GetFieldValue (""Price List Id"");
         var currencyCode = currencyLM.Translate (iOrderComp.GetFieldValue (""Currency Code""));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DOC_NUMBER"", null);
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DOC_TYPE"",   orderTypeLM.Translate (iOrderComp.GetFieldValue (""Order Type"")));
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-CURRENCY"",  currencyCode );
         /*
         	*CR # 12-79SPMF to add validation for Sales Area in SAP
         */
         var salesOrg  = iOrderComp.GetFieldValue (""SAP Sales Organization (MO)"");
         var distChannel  = iOrderComp.GetFieldValue (""SAP Distribution Channel (MO)"");
         var division  = iOrderComp.GetFieldValue (""SAP Division (MO)"");
         if ((salesOrg != """") && (distChannel != """") && (division != """") )
			{
				oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_ORG"",  ""SAP Sales Organization (MO)"");
				oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DISTR_CHAN"", ""SAP Distribution Channel (MO)"");
				oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DIVISION"",   ""SAP Division (MO)"");
			}
		else
			{
         		EAIRaiseError(LocalizeMessage(""ERR_MSG_SALES_AREA_NOT_FOUND,""+salesOrg+"",""+distChannel+"",""+division+""""));
         	}
         if (iOrderComp.GetFieldValue (""Requested Ship Date"") != """")
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",   ""Requested Ship Date"");
               
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",       ""Order Date"");
            }
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DATE_TYPE"",  ""1"");
         if (iOrderComp.GetFieldValue (""Account Order Number"") != """")
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_NO"",   ""Account Order Number"");
               
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_NO"",       ""Order Number"");
            }
         
         
         
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_DATE"", ""Order Date"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REF_1"",      ""Order Number"");
         
         // Set NAME only if ""Contact Id"" is not null.
         if (iOrderComp.GetFieldValue (""Contact Id"") != null)
         {
            oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-NAME"", EAIFormatPersonName (iOrderComp.GetFieldValue (""Contact First Name""),
                                                                                       iOrderComp.GetFieldValue (""Contact Last Name"")));
         }         
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-TELEPHONE"",  ""Contact Work Phone #"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-INCOTERMS1"", incotermsLM.Translate (iOrderComp.GetFieldValue(""Freight Terms"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-INCOTERMS2"", ""Freight Terms Info"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-PMNTTRMS"",   payTermsLM.Translate (iOrderComp.GetFieldValue (""Payment Term"")));
         
         if (iOrderComp.GetFieldValue (""Partial Ship"") != ""Y"")
            {
               oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       ""X"");
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       null);
            }
            
         
         var date = iOrderComp.GetFieldValue ( ""Pricing Date"");
         oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-PRICE_DATE"", date );
         

         /*
          * Write ""ORDER_PARTNERS"" component  
          */
                  
         oCFDPartnerComp = oCFDImportComp.CreateIntComp (""ORDER_PARTNERS"", oCFDImportComp);

         // Sold to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""AG"");

         var soldtoparty =  iOrderComp.GetFieldValue (""Account Integration Id"");
         var array = soldtoparty.split("":"");
         var AccountIntId = array[0];
         
         
         oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId);

         // Ship To partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""WE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Ship To Account Integration Id"");

         // Payer partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RG"");
         var payerId = iOrderComp.GetFieldValue (""Payer Account Integration Id"");
         if (payerId == null || payerId == """")
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId );
         	}
         else
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", payerId );
         	}
         
         // Bill to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Bill To Account Integration Id"");

		/*
		 * Read and update Credit Card Info
		 *
		 */
		 iCardComp = iOrderComp.GetIntComp (""Payments"");
      if (iCardComp.NextRecord ())
      {
		 var ccType = cCardLM.Translate (iCardComp.GetFieldValue (""Payment Type""));
		 var ccNum = iCardComp.GetFieldValue ( ""Account Number"");
		 if ( ccNum != null && ccNum != """" )
		 
		 	{
		 		oCFDCardComp = oCFDImportComp.CreateIntComp (""ORDER_CCARD"");
		 		oCFDCardComp.NewRecord();
		 		oCFDCardComp.SetCopySource (iCardComp);
		 		var cardExpDate = iCardComp.GetFieldValue ( ""Expiration Date"");
		 		if ( cardExpDate == null || cardExpDate == """" )
		 			{
		 				var cardExpYear	= iCardComp.GetFieldValue (""Expiration Year"" );
		 				var cardExpMonth  = iCardComp.GetFieldValue (""Expiration Month"" );
		 				var cardExpDay;
		 				
		 				var nMonth = ConvertMonth (cardExpMonth);
		 				cardExpDay = GetDaysInAMonth(nMonth, cardExpYear);
		 				var cardExpFullDate = nMonth + ""/"" + cardExpDay + ""/"" + cardExpYear + "" 00:00:00"";
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpFullDate );
		 			}
		 		else
		 			{
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpDate );
		 			}
		 		oCFDCardComp.SetFieldValue		(""CC_TYPE"", 		ccType);
		 		oCFDCardComp.SetFieldValue		(""CC_NUMBER"", 		ccNum );
		 		oCFDCardComp.CopyFieldValue		(""CC_NAME"", 		""Card Holder"" );
				oCFDCardComp.CopyFieldValue		(""AUTHAMOUNT"", 		""Transaction Amount"" );
		 		oCFDCardComp.SetFieldValue		(""CURRENCY"", 		currencyCode );
		 	}
	   }
         /*
          * Read ""Order Line Item"" Integration Component
          */
         iItemComp    = iOrderComp.GetIntComp        (""Order Entry - Line Items"");
         oCFDItemComp = oCFDImportComp.CreateIntComp (""ORDER_ITEMS_IN"", oCFDImportComp);
         //oCFDCondValComp = oCFDImportComp.CreateIntComp (""ORDER_CONDITIONS_IN"");
         oCFDCfgValComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_VALUE"", oCFDImportComp);       
         oCFDCfgRefComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_REF"", oCFDImportComp);         
         oCFDCfgInstComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_INST"", oCFDImportComp);
         //oCFDScheduleComp = oCFDImportComp.CreateIntComp (""ORDER_SCHEDULES_IN"", oCFDImportComp);                  
         while (iItemComp.NextRecord ())
         {
            var itemNum =  iItemComp.GetFieldValue (""Line Number"");
/*           var Posex_Hilfsvariable =""00000"";

            Clib.sprintf(Posex_Hilfsvariable,""%06.6s"",iItemComp.GetFieldValue(""Line Number""));
            var itemNumber = Posex_Hilfsvariable;
                  
            var parentItemNum =  iItemComp.GetFieldValue (""Parent Order Item Id"");                  
            if((parentItemNum == null) || (parentItemNum ==""""))
            {*/
            oCFDItemComp.NewRecord ();
            oCFDItemComp.SetCopySource  (iItemComp);
            var itemNumber = iItemComp.GetFieldValue(""Line Number"");
            oCFDItemComp.CopyFieldValue (""ITM_NUMBER"",     ""Line Number"");
            //oCFDItemComp.SetFieldValue (""HG_LV_ITEM"",     ""000000"");
            oCFDItemComp.CopyFieldValue (""PO_ITM_NO"",      ""Line Number"");
            oCFDItemComp.CopyFieldValue (""MATERIAL"",       ""Product Integration Id"");
            
            if (iItemComp.GetFieldValue (""Partial Ship"") != ""Y"")
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""C"");
                }
            else
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""D"");
                }
              var plant = iItemComp.GetFieldValue (""Source Inventory Location"");
              //if (plant == """")
              //{EAIRaiseError(""Please Specify Plant in Item # "" + itemNumber);}
            
            oCFDItemComp.CopyFieldValue (""PLANT"",          ""Source Inventory Location"");
            oCFDItemComp.SetFieldValue  (""SALES_UNIT"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
            oCFDItemComp.CopyFieldValue (""SHORT_TEXT"",     ""Description"");
            oCFDItemComp.CopyFieldValue (""REQ_DATE"",       ""Due Date"");
            oCFDItemComp.SetFieldValue  (""DATE_TYPE"",      ""1"");
            oCFDItemComp.CopyFieldValue (""REQ_QTY"",        ""Quantity Requested"");
	            
            var siebelPrice = iItemComp.GetFieldValue ( ""Unit Price"" );
            if ((  siebelPrice != 0) || (  priceList != """" ))
            
            {
             	oCFDItemComp.SetFieldValue  (""CD_TYPE2"",      ""PN00"");
            	oCFDItemComp.SetFieldValue  (""PURCH_NO_C"",     ""X"");
			    oCFDItemComp.CopyFieldValue (""CD_VALUE2"",     ""Item Price"");
            	oCFDItemComp.SetFieldValue  (""CD_P_UNT2"",     ""1"");
            	oCFDItemComp.SetFieldValue  (""CD_D_UNT2"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
            	
             	oCFDItemComp.SetFieldValue  (""CD_TYPE3"",      ""KF00"");
                oCFDItemComp.CopyFieldValue (""CD_VALUE3"",     ""Freight Amount"");
  


            }
            else
             	oCFDItemComp.SetFieldValue  (""CD_TYPE2"",      ""PR00"");
                // oCFDItemValComp.SetFieldValue (""ITM_NUMBER"",     itemNumber);  
                                           	
//}  // end if condition for Parent item num

/*
            oCFDCfgRefComp.NewRecord ();
            oCFDCfgRefComp.SetCopySource  (iItemComp);
            oCFDCfgRefComp.SetFieldValue (""POSEX"",     itemNumber);
            oCFDCfgRefComp.SetFieldValue (""CONFIG_ID"",     itemNumber);            
            oCFDCfgRefComp.SetFieldValue (""ROOT_ID"",     itemNumber);            


            oCFDCfgInstComp.NewRecord ();
            oCFDCfgInstComp.SetCopySource  (iItemComp);
            oCFDCfgInstComp.SetFieldValue (""INST_ID"",     itemNumber);
            oCFDCfgInstComp.SetFieldValue (""CONFIG_ID"",   itemNumber);            
            oCFDCfgInstComp.SetFieldValue (""OBJ_TYPE"",     ""MARA"");            
            oCFDCfgInstComp.SetFieldValue (""OBJ_KEY"",     ""MATERIAL"");            
            oCFDCfgInstComp.SetFieldValue (""QUANTITY"",     ""1"");            

*/
           
      
                    /*
          * Read ""Order Line Item Attribute Value"" Integration Component
          */
/*         iAttrComp    = iItemComp.GetIntComp        (""Order Item XA"");

         
         while (iAttrComp.NextRecord ())
         {

            oCFDCfgValComp.NewRecord ();
            oCFDCfgValComp.SetCopySource  (iAttrComp);
            oCFDCfgValComp.CopyFieldValue (""CHARC"",     ""Name"");
            oCFDCfgValComp.CopyFieldValue (""VALUE"",     ""Value"");
            oCFDCfgValComp.CopyFieldValue (""CHARC_TXT"", ""Description"");
            oCFDCfgValComp.SetFieldValue (""INST_ID"", itemNumber);
            oCFDCfgValComp.SetFieldValue (""CONFIG_ID"", itemNumber);
		}
  */   
         } //order items read
      }
      
   }
}
function SimulateSAP46COrder_BAPIToSiebel (inputMsg, outputMsg)
{  // referenced by workflow Order - Simulate SAP 46C Order
   /* Input Objects' Integration Components
    *   BAPI Export (SAP 46C Order - Simulate SAP Order (BAPI Output))
    *     Export Parameters (output)
    *
    * Output Object's Integration Components:
    *   Order Object (SAP 46C Order)
    */

   /*
    * Set up EAI Lookup objects
    */
   var currencyLM 	 = new CSSEAIValueMap (""SAP Currency Code"", ""Siebel Inbound"");
   var ccStatusLM	 = new CSSEAIValueMap (""SAP Credit Card Approval Code"", ""Siebel Inbound"");
   var cCardLM	 	 = new CSSEAIValueMap (""SAP Credit Card Type"", ""Siebel Inbound"");
  

   /*
    * Set up EAI Input Message objects
    */
   var iSimOrderObj;   // BAPI Order instance
   var iSimExportComp; // BAPI Export Parameters
   var iSimItemComp;   // BAPI Order Items
   var iSimIItemComp;  // BAPI Order Input Item Comp to retieve value for Fix Pricing flag
   var iSchedItemComp; // BAPI Schedule Line Items
   var iSimCCardComp;  // BAPI Credit Card Export Comp

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;      // Siebel Order instance
   var oOrderComp;     // Order
   var oCardComp;	   // Order Card Payment Comp
   var oOutputComp; // Simulate Output RFC_*
   var oItemComp;   // Simulate Item Output RFC_*
   var oSimItemComp;   // Simulate Item
   // var oItemComp;      // Item
   var oSchedItemComp; // Schedule Line Item

   /*
    * Find and create top-level integration object
    */
   iSimOrderObj = inputMsg.GetIntObj (""SAP 46C Order - Simulate SAP Order (BAPI Output)"");
   oOrderObj = outputMsg.CreateIntObj (""SAP 46C Order"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iSimOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object
       */
      oOrderObj.NewInstance ();

      /*
       * Create ""Order"" component in output message
       */
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order Entry - Orders"");
      oOrderComp.NewRecord ();
      
      // Set ""Id"" so Siebel Adapter can synchronize
      oOrderComp.SetFieldValue (""Id"", inputId);
      
      /*
       * Read ""Export Parameters"" component
       */
      iSimExportComp = iSimOrderObj.GetPrimaryIntComp (""Export Parameters"");
      
      if (iSimExportComp.NextRecord ())
      {
         
         /*
          * Update ""Order"" component
          */
         oOrderComp.SetCopySource  (iSimExportComp);
         oOrderComp.SetFieldValue(""As Of Date"", Timestamp());
		 
         var sapDelBlock = iSimExportComp.GetFieldValue ( ""SHIP_TO_PARTY-DLV_BLOCK"" );
		 var delBlock = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_HEADER_DELIV_BLOCK"", sapDelBlock);
         oOrderComp.SetFieldValue (""Delivery Block"",     delBlock);
         
         // sapBlock 		= null;
         var sapBillBlock = iSimExportComp.GetFieldValue ( ""BILLING_PARTY-BILL_BLOCK"" );
		 var billBlock = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_HEADER_BILL_BLOCK"", sapBillBlock);
         oOrderComp.SetFieldValue (""Billing Block"",     billBlock);

		 // oOrderComp.CopyFieldValue (""Billing Block"",      ""BILLING_PARTY-BILL_BLOCK"");
         var errorMessage = iSimExportComp.GetFieldValue ( ""RETURN-MESSAGE"");
         if (errorMessage == null)
         oOrderComp.SetFieldValue (""Back Office Error Text"", "" "");
         else
         oOrderComp.CopyFieldValue (""Back Office Error Text"",     ""RETURN-MESSAGE"");
		 
		 
         // var currencyCode = currencyLM.Translate (iSimExportComp.GetFieldValue (""SOLD TO PARTY-CURRENCY""));
         
         // if (currencyCode != null && currencyCode != """")
            // {
              // oOrderComp.SetFieldValue  (""Currency Code"", currencyCode);
            // }

         var returnCode = iSimExportComp.GetFieldValue (""RETURN-CODE"");
         
         if ( (returnCode == ""V1154"") || (returnCode == ""V1038"") )
            {
              oOrderComp.SetFieldValue (""Credit Status"",             ""N"");
            }
         else
            {
              oOrderComp.SetFieldValue (""Credit Status"",             ""Y"");
            }

		// Just to Store Order Id so that Net Price at Item Table can be stored for Pricing Ref Purpose.
      	//oOutputComp = oOrderComp.CreateIntComp (""Order Entry - Get SAP Order Status Header"");
      	//oOutputComp.NewRecord();
      	//oOutputComp.SetFieldValue (""Input Id"", inputId);
        //oOutputComp.SetFieldValue (""Order Number"", inputId);

         /*
          * Read ""ORDER_CCARD_EX"" component
          */
		 
		  iSimCCardComp = iSimExportComp.GetIntComp (""ORDER_CCARD_EX"");
		  oCardComp = oOrderComp.CreateIntComp (""Payments"", false);
          var cardStatus;
          var cardLineNo = 0;
          while (iSimCCardComp.NextRecord())
          {
         	 cardStatus = iSimCCardComp.GetFieldValue ( ""CC_STAT_EX"");
         	 if ( cardStatus != null && cardStatus != """" )
         	 {
         	 oCardComp.NewRecord ();
             oCardComp.SetCopySource  (iSimCCardComp);
         	 
         	 	cardLineNo++;
         		var cardIntId = inputId + ""-"" + cardLineNo; 
         		oCardComp.SetFieldValue ( ""Integration Id"", cardIntId);
         	 
         	 	oOrderComp.SetCopySource (iSimCCardComp);
         		
         	 	oCardComp.CopyFieldValue (""Account Number"", ""CC_NUMBER"");
         		oCardComp.CopyFieldValue (""Card Holder"", ""CC_NAME"");
         	 	oCardComp.CopyFieldValue (""Authorization Date"", ""AUTH_DATE"");
           	 	oCardComp.CopyFieldValue (""Authorization Code"", ""CC_AUTTH_NO"");
           	 	// oCardComp.CopyFieldValue (""Credit Card Approval Code"", ""AUTH_REFNO"");
           	 	//oCardComp.CopyFieldValue (""Transaction Amount"", ""CC_RE_AMOUNT"");
          	 	oCardComp.CopyFieldValue (""Transaction Amount"", ""AUTHAMOUNT"");
           	 	//var ccStatus = ccStatusLM.Translate (iSimCCardComp.GetFieldValue (""CC_STAT_EX""));
           	 	//var LDccStatus = TheApplication().InvokeMethod (""LookupValue"", ""FUNDRQ_STATUS"", ccStatus);
           	 	var ccStat = iSimCCardComp.GetFieldValue ( ""CC_STAT_EX"");
           	 	var ccReact = iSimCCardComp.GetFieldValue ( ""CC_REACT"");
           	 	
           	 	if (ccStat == ""C"")
           	 		{ if (ccReact == ""A"")
           	 			{ oCardComp.SetFieldValue (""Payment Status"", TheApplication().InvokeMethod (""LookupValue"", ""FUNDRQ_STATUS"", ""Authorized"") );}
           	 		  else
           	 		  	{ oCardComp.SetFieldValue (""Payment Status"", TheApplication().InvokeMethod (""LookupValue"", ""FUNDRQ_STATUS"", ""Declined"") );}
           	 		 }
           	 	else
           	 		{ oCardComp.SetFieldValue (""Payment Status"", TheApplication().InvokeMethod (""LookupValue"", ""FUNDRQ_STATUS"", ""AVS Failed"") );}
           	 	// oCardComp.SetFieldValue (""Payment Status"", LDccStatus );         		
				oCardComp.CopyFieldValue (""Expiration Date"", ""CC_VALID_T"" );
				oCardComp.CopyFieldValue (""Transaction Message"", ""CC_REACT_T"" );
				var expDate = iSimCCardComp.GetFieldValue (""CC_VALID_T"");
				// var array = expDate.split(""/"");
         		var expMonth = expDate.substring(0,2);
         		if (expMonth < 10)
         			{expMonth = expDate.substring(1,2);}
         		var expYear = expDate.substring(6,10);
         		oCardComp.SetFieldValue (""Expiration Month"", expMonth );
				oCardComp.SetFieldValue (""Expiration Year"", expYear );
				var paymentMethod = TheApplication().InvokeMethod (""LookupValue"", ""PAYMENT_METHOD_CODE"", ""Credit Card"");
                oCardComp.SetFieldValue  (""Payment Method"",   paymentMethod);
				var cardType = cCardLM.Translate (iSimCCardComp.GetFieldValue (""CC_TYPE""));
           	 	var LDCardType = TheApplication().InvokeMethod (""LookupValue"", ""PAYMENT_TYPE_CODE"", cardType);
           	 	oCardComp.SetFieldValue	 (""Payment Type"", LDCardType);
         	 }
          }
         		


         /*
          * Read ""ORDERS_ITEMS_OUT"" component
          */

         iSimItemComp = iSimExportComp.GetIntComp (""ORDER_ITEMS_OUT"");
         iSimIItemComp = iSimExportComp.GetIntComp ( ""ORDER_ITEMS_IN"");
         oSimItemComp = oOrderComp.CreateIntComp (""Order Entry - Line Items"", false);
         while (iSimItemComp.NextRecord ())
         {
            var parItemnum = iSimItemComp.GetFieldValue ( ""HG_LV_ITEM"" );
            if (parItemnum == null || parItemnum == ""000000"" || parItemnum == """") // please comment this if statement if you want to support child componenets of Config Product
            {
            oSimItemComp.NewRecord ();
            oSimItemComp.SetCopySource  (iSimItemComp);
            
            iSimIItemComp.NextRecord ();
            
            var fixPrice = iSimIItemComp.GetFieldValue ( ""PURCH_NO_C"" );
                        
            
		    var netVal          = iSimItemComp.GetFieldValue (""SUBTOTAL_2""); // nbc
			// start - adjustment to SAP bug (nbc)
			if (fixPrice == ""X"") 
			 { 
				netVal = netVal / 10; 
			 } 
			// End - adjustment to SAP bug (nbc)
            var qtyReq			= iSimItemComp.GetFieldValue (""REQ_QTY"");
            var netTax		= null;
            if ( qtyReq != 0 )
             {
            	var netPrice 		= netVal / qtyReq ; 
             }
            
            if (fixPrice != ""X"")
             {
            	oSimItemComp.SetFieldValue    (""Adjusted List Price"",         netPrice);
            	oSimItemComp.CopyFieldValue   (""Tax Amount"",                ""SUBTOTAL_5"");	
            	oSimItemComp.CopyFieldValue   (""Freight Amount"",            ""SUBTOTAL_4"");
				oSimItemComp.SetFieldValue    (""Net Price"",   	   	netPrice); //nbc
             }
            else
            {
				oSimItemComp.CopyFieldValue   (""Tax Amount"",                ""SUBTOTAL_5"");	
            	oSimItemComp.SetFieldValue    (""Freight Amount"",            ""0"");
				oSimItemComp.SetFieldValue    (""Net Price"",      	netPrice); //nbc
            }
            
            
            var itemReqDate = iSimItemComp.GetFieldValue (""DLV_DATE""); 
            var itemnum = iSimItemComp.GetFieldValue (""ITM_NUMBER"");
            var itemCurrency = currencyLM.Translate (iSimItemComp.GetFieldValue (""CURRENCY""));
            
            oSimItemComp.SetFieldValue     (""Currency Code"",             itemCurrency );                   
            oSimItemComp.CopyFieldValue    (""Line Number"",                ""ITM_NUMBER"");
            oSimItemComp.CopyFieldValue    (""Quantity Requested"",        ""REQ_QTY"");
            oSimItemComp.CopyFieldValue    (""Product Integration Id"",        ""MATERIAL"");
            oSimItemComp.CopyFieldValue    (""Source Inventory Location"",        ""PLANT"");
			oSimItemComp.SetFieldValue     (""NRC CxTotal"",        netVal); // nbc
            
            
                  
           /*
            * Read ""ORDER_SCHEDULE_EX"" component
            */
            
            iSchedItemComp = iSimExportComp.GetIntComp   (""ORDER_SCHEDULE_EX"");
            oSchedItemComp = oSimItemComp.CreateIntComp (""Order Entry - Line Item Actions"", false);
		
			var firstScheduleLine = 1;
			
        
            while (iSchedItemComp.NextRecord ())
             {
               var itemnum2  = iSchedItemComp.GetFieldValue (""ITM_NUMBER"");
               var schednum = iSchedItemComp.GetFieldValue (""SCHED_LINE"");
               var intId;
               if (itemnum2 == itemnum)
               {
           
                oSchedItemComp.NewRecord ();
                oSchedItemComp.SetCopySource  (iSchedItemComp);
                
                intId = inputId + ""-"" + itemnum2 + ""-"" + schednum;
               
                // oSchedItemComp.SetFieldValue (""Integration Id"",             intId);
                oSchedItemComp.CopyFieldValue (""Quantity"",                   ""REQ_QTY"");
                oSchedItemComp.SetFieldValue (""Line Item Action Number"",     intId);
                // oSchedItemComp.SetFieldValue  (""Quantity"",     qtyReq);                
                oSchedItemComp.CopyFieldValue (""Actual Start Date"",           ""GI_DATE"");
                oSchedItemComp.CopyFieldValue (""Confirmed Qty"",               ""CONFIR_QTY"");
                var reqDate = iSchedItemComp.GetFieldValue ( ""REQ_DATE"");
                oSchedItemComp.SetFieldValue (""Planned Start Date"" ,          reqDate);
                // Checking for First Schedule Line, as it contains actual Req Delivery Date and setting it for Item Req Delv Date
                if ( firstScheduleLine == 1 )
                	{
                		oSimItemComp.SetFieldValue    (""Due Date"",      reqDate );
                	}
                firstScheduleLine++;
                
                var shipValue = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_PART_MOVEMENT_TYPE"", ""Schedule"");
                   oSchedItemComp.SetFieldValue  (""Line Item Action Type"",   shipValue);

                // oSchedItemComp.SetFieldValue  (""Line Item Action Type"",      ""Schedule"");
                }
             }
			} //endif (parItemnum == ""000000"" || parItemnum == """")

         }

      }
   }
}
function SimulateSAP46COrder_SiebelToBAPI (inputMsg, outputMsg)
{  // referenced by workflow Order - Simulate SAP 46C Order
   /* Uses same map as CreateFromData() */
   Simulate77SAP46COrder_SiebelToBAPI (inputMsg, outputMsg, 
                                        ""SAP 46C Order"", 
                                        ""SAP 46C Order - Simulate SAP Order (BAPI Input)"");
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", d.getMonth()+1, d.getDate(), d.getFullYear(), d.getHours(), d.getMinutes(), d.getSeconds()); 
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 6 $
//      $Date: 01/15/01 10:29a $
//    $Author: S.Garg $ of last update
//
// CREATOR:    P. Lim
//
// DESCRIPTION
//    Javascript maps from Siebel Order & Quote to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
/* This function shared by ""Simulate Order"" and ""Create Order"" */"
function ConvertMonth(cardExpMonth)
{ // general utility function
	var nMonth; 
	if ( cardExpMonth == ""January"" )
		{
			nMonth = ""01"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""February"" )
		{
			nMonth = ""02"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""March"" )
		{
			nMonth = ""03"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""April"" )
		{
			nMonth = ""04"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""May"" )
		{
			nMonth = ""05"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""June"" )
		{
			nMonth = ""06"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""July"" )
		{
			nMonth = ""07"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""August"" )
		{
			nMonth = ""08"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""September"" )
		{
			nMonth = ""09"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""October"" )
		{
			nMonth = ""10"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""November"" )
		{
			nMonth = ""11"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""December"" )
		{
			nMonth = ""12"";
			return nMonth ;
		}
	else
		{
			nMonth = ""01"";
			return nMonth ;
		}
}
function Create77SAP47Order_SiebelToBAPI (inputMsg, outputMsg, InputIntObjName, OutputIntObjName)
{ // referenced by script CreateSAP47Order_SiebelToBAPI
   /*
    * Input Objects' Integration Components
    *   Order Object (SAP 47 Order)
    *     Order (order)
    *       Order Line Item (item)
    *
    * Output Object's Integration Components:
    *   BAPI Import Object (SAP 47 Order - Create SAP Order (BAPI Import))
    *     Import Parameters
    *       ORDER_PARTNERS
    *       ORDER_ITEMS_IN
    *       ORDER_PARTNERS
    *		ORDER_CONDITIONS_IN
    *		ORDER_CFGS_INST
    *		ORDER_CFGS_REF
    *		ORDER_CFGS_VALUE
    *		ORDER_SCHEDULES_IN
    */

   /*
    * Set up EAI Lookup maps
    */
   var orderTypeLM = EAIGetValueMap (""SAP Order Types"",     	""Siebel Outbound"");
   var incotermsLM = EAIGetValueMap (""SAP Incoterms"",      		""Siebel Outbound"");
   var payTermsLM  = EAIGetValueMap (""SAP Payment Terms"",   	""Siebel Outbound"");
   var currencyLM  = EAIGetValueMap (""SAP Currency Code"",		""Siebel Outbound"");
   var cCardLM	   = EAIGetValueMap (""SAP Credit Card Type"",	""Siebel Outbound"");
   var uomLM       = EAIGetValueMap (""SAP Unit of Measure"", 	""Siebel Outbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iOrderObj;  // Order object instance
   var iOrderComp; // Order
   var iCardComp; // Card (Payments)
   var iItemComp;  // Order Line Item
   var iAttrComp;  // Item Attribute Component

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oCFDOrderObj;        // BAPI Order instance
   var oCFDImportComp;      // BAPI Import parameters
   var oCFDItemComp;        // BAPI Order Item
   var oCFDPartnerComp;     // BAPI Order Partners
   var oCFDCardComp;     	// BAPI Card Component
   var oCFDCfgInstComp;
   var oCFDCfgValComp;
   var oCFDCfgRefComp;
   var oCFDScheduleComp;
   var oCFDCondValComp;


   /*
    * Find and create top-level integration object
    */
   iOrderObj    = inputMsg.GetIntObj (InputIntObjName);
   oCFDOrderObj = outputMsg.CreateIntObj (OutputIntObjName);
   
   /*
    * Read int object instances from EAI message
    */
   while (iOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object in output message
       */
      oCFDOrderObj.NewInstance ();

      /*
       * Read ""Order"" component
       */
      iOrderComp     = iOrderObj.GetPrimaryIntComp (""Order Entry - Orders"");
      oCFDImportComp = oCFDOrderObj.CreatePrimaryIntComp (""Import Parameters"");
     
      if (iOrderComp.NextRecord ())
      {
         /*
          * Return an error if Integration Id is not null
          */
         if (iOrderComp.GetFieldValue (""Integration Id"") != """")
         {
              var IntId = iOrderComp.GetFieldValue (""Integration Id"");
              EAIRaiseError(LocalizeMessage(""ERR_MSG_ORDER_ALREADY_SUBMITTED,""+IntId+""""));

         }
        
         /*
          * Write ""Import Parameters"" component
          */
         oCFDImportComp.NewRecord ();
         oCFDImportComp.SetCopySource  (iOrderComp);
         
         var priceList =  null;
         priceList = iOrderComp.GetFieldValue (""Price List Id"");
         var currencyCode = currencyLM.Translate (iOrderComp.GetFieldValue (""Currency Code""));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DOC_NUMBER"", null);
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DOC_TYPE"",   orderTypeLM.Translate (iOrderComp.GetFieldValue (""Order Type"")));
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-CURRENCY"",  currencyCode );
         /*
         	*CR # 12-79SPMF to add validation for Sales Area in SAP
         */
         var salesOrg  = iOrderComp.GetFieldValue (""SAP Sales Organization (MO)"");
         var distChannel  = iOrderComp.GetFieldValue (""SAP Distribution Channel (MO)"");
         var division  = iOrderComp.GetFieldValue (""SAP Division (MO)"");
         if ((salesOrg != """") && (distChannel != """") && (division != """") )
         	 	{
         	 		oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_ORG"",  ""SAP Sales Organization (MO)"");
         	 		oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DISTR_CHAN"", ""SAP Distribution Channel (MO)"");
         	 		oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DIVISION"",   ""SAP Division (MO)"");
         	 	}
//nbc    else
//nbc     		{
//nbc     			EAIRaiseError(LocalizeMessage(""ERR_MSG_SALES_AREA_NOT_FOUND,""+salesOrg+"",""+distChannel+"",""+division+""""));
//nbc      		}
         if (iOrderComp.GetFieldValue (""Requested Ship Date"") != """")
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",   ""Requested Ship Date"");
               
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",       ""Order Date"");
            }
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DATE_TYPE"",  ""1"");
         if (iOrderComp.GetFieldValue (""Account Order Number"") != """")
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_NO_C"",   ""Account Order Number"");
               
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_NO_C"",       ""Order Number"");
            }
         
         
         
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_DATE"", ""Order Date"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REF_1"",      ""Order Number"");
         
         // Set NAME only if ""Contact Id"" is not null.
         if (iOrderComp.GetFieldValue (""Contact Id"") != null)
         {
            oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-NAME"", EAIFormatPersonName (iOrderComp.GetFieldValue (""Contact First Name""),
                                                                                       iOrderComp.GetFieldValue (""Contact Last Name"")));
         }         
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-TELEPHONE"",  ""Contact Work Phone #"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-INCOTERMS1"", incotermsLM.Translate (iOrderComp.GetFieldValue(""Freight Terms"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-INCOTERMS2"", ""Freight Terms Info"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-PMNTTRMS"",   payTermsLM.Translate (iOrderComp.GetFieldValue (""Payment Term"")));
         
         if (iOrderComp.GetFieldValue (""Partial Ship"") != ""Y"")
            {
               oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       ""X"");
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       null);
            }
            
         
         var date = iOrderComp.GetFieldValue ( ""Pricing Date"");
         oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-PRICE_DATE"", date );
         

         /*
          * Write ""ORDER_PARTNERS"" component  
          */
                  
         oCFDPartnerComp = oCFDImportComp.CreateIntComp (""ORDER_PARTNERS"", oCFDImportComp);

         // Sold to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""AG"");

         var soldtoparty =  iOrderComp.GetFieldValue (""Account Integration Id"");
         var array = soldtoparty.split("":"");
         var AccountIntId = array[0];
         
         
         oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId);

         // Ship To partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""WE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Ship To Account Integration Id"");

         // Payer partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RG"");
         var payerId = iOrderComp.GetFieldValue (""Payer Account Integration Id"");
         if (payerId == null || payerId == """")
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId );
         	}
         else
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", payerId );
         	}
         
         // Bill to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Bill To Account Integration Id"");

		/*
		 * Read and update Credit Card Info
		 *
		 */
		 iCardComp = iOrderComp.GetIntComp (""Payments"");
		 if (iCardComp.NextRecord ())
		 {
		 var ccType = cCardLM.Translate (iCardComp.GetFieldValue (""Payment Type""));
		 var ccNum = iCardComp.GetFieldValue (""Account Number"");
		 if ( ccNum != null && ccNum != """" )
		 
		 	{
		 		oCFDCardComp = oCFDImportComp.CreateIntComp (""ORDER_CCARD"");
		 		oCFDCardComp.NewRecord();
		 		oCFDCardComp.SetCopySource (iCardComp);
		 		var cardExpDate = iCardComp.GetFieldValue ( ""Expiration Date"");
		 		if ( cardExpDate == null || cardExpDate == """" )
		 			{
		 				var cardExpYear	= iCardComp.GetFieldValue (""Expiration Year"" );
		 				var cardExpMonth  = iCardComp.GetFieldValue (""Expiration Month"" );
		 				var cardExpDay;
		 				
		 				var nMonth = ConvertMonth (cardExpMonth);
		 				cardExpDay = GetDaysInAMonth(nMonth, cardExpYear);
		 				var cardExpFullDate = nMonth + ""/"" + cardExpDay + ""/"" + cardExpYear + "" 00:00:00"";
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpFullDate );
		 			}
		 		else
		 			{
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpDate );
		 			}
		 		oCFDCardComp.SetFieldValue		(""CC_TYPE"", 		ccType);
		 		oCFDCardComp.SetFieldValue		(""CC_NUMBER"", 		ccNum );
		 		oCFDCardComp.CopyFieldValue		(""CC_NAME"", 		""Card Holder"" );
				oCFDCardComp.CopyFieldValue		(""AUTHAMOUNT"", 		""Transaction Amount"" );
		 		oCFDCardComp.SetFieldValue		(""CURRENCY"", 		currencyCode );
		 	}
		 }
         /*
          * Read ""Order Line Item"" Integration Component
          */
         iItemComp    = iOrderComp.GetIntComp        (""Order Entry - Line Items"");
         oCFDItemComp = oCFDImportComp.CreateIntComp (""ORDER_ITEMS_IN"", oCFDImportComp);
         oCFDCondValComp = oCFDImportComp.CreateIntComp (""ORDER_CONDITIONS_IN"");
         oCFDCfgValComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_VALUE"", oCFDImportComp);       
         oCFDCfgRefComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_REF"", oCFDImportComp);         
         oCFDCfgInstComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_INST"", oCFDImportComp);
         oCFDScheduleComp = oCFDImportComp.CreateIntComp (""ORDER_SCHEDULES_IN"", oCFDImportComp);                  
         while (iItemComp.NextRecord ())
         {
/*            var posVariable =""00000"";

              Clib.sprintf(posVariable,""%06.6s"",iItemComp.GetFieldValue(""Line Number""));
            var itemNumber = posVariable;
                  
            var parentItemNum =  iItemComp.GetFieldValue (""Parent Order Item Id"");                  
            if((parentItemNum == null) || (parentItemNum ==""""))
            {*/
            oCFDItemComp.NewRecord ();
            oCFDItemComp.SetCopySource  (iItemComp);
            var itemNumber = iItemComp.GetFieldValue(""Line Number"");
            oCFDItemComp.CopyFieldValue (""ITM_NUMBER"",     ""Line Number""); 
            //oCFDItemComp.SetFieldValue (""HG_LV_ITEM"",     ""000000"");
            oCFDItemComp.SetFieldValue (""PO_ITM_NO"",      itemNumber);
            oCFDItemComp.CopyFieldValue (""MATERIAL"",       ""Product Integration Id"");
            
            if (iItemComp.GetFieldValue (""Partial Ship"") != ""Y"")
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""C"");
                }
            else
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""D"");
                }
           

            oCFDItemComp.CopyFieldValue (""PLANT"",          ""Source Inventory Location"");
            oCFDItemComp.SetFieldValue  (""SALES_UNIT"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
            oCFDItemComp.CopyFieldValue (""SHORT_TEXT"",     ""Description"");

		 		oCFDCondValComp.NewRecord();
		 		oCFDCondValComp.SetCopySource (iItemComp);           
           
            var siebelPrice = iItemComp.GetFieldValue ( ""Unit Price"" );
            var itemPrice = iItemComp.GetFieldValue ( ""Item Price"" );            
            
            if ((  siebelPrice != 0) || (  priceList != """" ))
            
            {
             	itemPrice = itemPrice / 10; // to fix SAP multiplication bug
             	oCFDCondValComp.SetFieldValue  (""COND_TYPE"",      ""PN00"");
            	//oCFDItemComp.SetFieldValue  (""PURCH_NO_C"",     ""X"");
                oCFDCondValComp.SetFieldValue (""COND_VALUE"",     itemPrice);
                oCFDCondValComp.SetFieldValue (""ITM_NUMBER"",     itemNumber);                
            }
            else
             	oCFDCondValComp.SetFieldValue  (""COND_TYPE"",      ""PR00"");
                oCFDCondValComp.SetFieldValue (""ITM_NUMBER"",     itemNumber);                             	
		 //Fright Value only if Siebel is Pricing Master		

            if ((  siebelPrice != 0) || (  priceList != """" ))
            var siebelFreight = iItemComp.GetFieldValue(""Freight Amount"");
		 if ((siebelFreight != 0) || (siebelFreight != """"))
		 {oCFDCondValComp.NewRecord();
		 oCFDCondValComp.SetCopySource (iItemComp);  
            
            {
             	var siebelFreight = siebelFreight / 10;// to fix SAP multiplication bug
             	oCFDCondValComp.SetFieldValue  (""COND_TYPE"",      ""KF00"");
                oCFDCondValComp.SetFieldValue (""COND_VALUE"",     siebelFreight);
                oCFDCondValComp.SetFieldValue (""ITM_NUMBER"",     itemNumber);                                
			}
			}
            oCFDScheduleComp.NewRecord ();
            oCFDScheduleComp.SetCopySource  (iItemComp);
            oCFDScheduleComp.CopyFieldValue (""SCHED_LINE"",     ""Line Number"");
            oCFDScheduleComp.SetFieldValue (""ITM_NUMBER"",     itemNumber);            
            oCFDScheduleComp.CopyFieldValue (""REQ_QTY"",     ""Quantity Requested"");            
            oCFDScheduleComp.CopyFieldValue (""REQ_DATE"",     ""Due Date"");            

/*
            oCFDCfgRefComp.NewRecord ();
            oCFDCfgRefComp.SetCopySource  (iItemComp);
            oCFDCfgRefComp.SetFieldValue (""POSEX"",     itemNumber);
            oCFDCfgRefComp.SetFieldValue (""CONFIG_ID"",     itemNumber);            
            oCFDCfgRefComp.SetFieldValue (""ROOT_ID"",     itemNumber);            


            oCFDCfgInstComp.NewRecord ();
            oCFDCfgInstComp.SetCopySource  (iItemComp);
            oCFDCfgInstComp.SetFieldValue (""INST_ID"",     itemNumber);
            oCFDCfgInstComp.SetFieldValue (""CONFIG_ID"",   itemNumber);            
            oCFDCfgInstComp.SetFieldValue (""OBJ_TYPE"",     ""MARA"");            
            oCFDCfgInstComp.SetFieldValue (""OBJ_KEY"",     ""MATERIAL"");            
            oCFDCfgInstComp.SetFieldValue (""QUANTITY"",     ""1"");            


           
      
                    
          // Read ""Order Line Item Attribute Value"" Integration Component
          
         iAttrComp    = iItemComp.GetIntComp        (""Order Item XA"");

         
         while (iAttrComp.NextRecord ())
         {

            oCFDCfgValComp.NewRecord ();
            oCFDCfgValComp.SetCopySource  (iAttrComp);
            oCFDCfgValComp.CopyFieldValue (""CHARC"",     ""Name"");
            oCFDCfgValComp.CopyFieldValue (""VALUE"",     ""Value"");
            oCFDCfgValComp.CopyFieldValue (""CHARC_TXT"", ""Description"");
            oCFDCfgValComp.SetFieldValue (""INST_ID"", itemNumber);
            oCFDCfgValComp.SetFieldValue (""CONFIG_ID"", itemNumber);
		}
		
}  // end if condition for Parent item num  
*/   
         } //order items read
      }
      
   }
}
function CreateOrder ()
{ // referenced by script QuoteToOrderSubmit
	var OrgBusObject = TheApplication().GetBusObject(""Order Entry"");
	var SABusComp = OrgBusObject.GetBusComp(""Order Entry - Orders"");
	var orderType= TheApplication().InvokeMethod (""LookupValue"", 	""FS_ORDER_TYPE"", ""Sales Order"");
    var orderCode= TheApplication().InvokeMethod (""LookupValue"", 	""FS_ORDER_TYPE_CODE"", ""Sales"");
	
	SABusComp.NewRecord(0);
	SABusComp.SetFieldValue			(""Active"",				""Y"");
    SABusComp.SetFieldValue 		(""Order Type"",   		orderType);	
	SABusComp.SetFieldValue 		(""Order Type Code"",   	orderCode);	
	// SABusComp.SetFieldValue			(""Price List Id"",		priceList);
	SABusComp.WriteRecord();
	return SABusComp.GetFieldValue	(""Id"");
	
}
function CreateSAP47Order_BAPIToSiebel (inputMsg, outputMsg)
{  // referenced by workflow Order - Create SAP 47 Order
   /* Input Objects' Integration Components
    *   BAPI Export (SAP 47 Order - Create SAP Order (BAPI Output))
    *     Export Parameters (output)
    *
    * Output Object's Integration Components:
    *   Order Object (SAP 47 Order)
    *     Order (oOrder)
    *     
    */

   /*
    * Set up EAI Lookup objects
    */
   var currencyLM = new CSSEAIValueMap (""SAP Currency Code"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iOrderObj;   	// BAPI Order instance
   var iExportComp; 	// BAPI Export Parameters
   var iReturnComp; 	// BAPI Return component
   var iItemComp;	   	// BAPI Line Items
   var iIItemComp;	   	// BAPI Inpout Line Items ( ""ORDER_ITEMS_IN"") To fetch Pricing Master Info
   var iSchedItemComp; 	// BAPI Schedule Line Items

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;      // Siebel Order instance
   var oOrderComp;     // Order
   var oRFCOrderComp;  // Create Output for RFC_* Table
   var oItemComp;      // Order Line Item
   var oRFCItemComp;   // Output Line Item for RFC_* Table to store pricing info
   var oSchedItemComp  // Schedule Line Item

   /*
    * Find and create top-level integration object
    */
   iOrderObj = inputMsg.GetIntObj(""SAP 47 Order - Create SAP Order (BAPI Output)"");
   oOrderObj = outputMsg.CreateIntObj (""SAP 47 Order"");

   /*
    * Read int object instances from EAI message
    */
   while (iOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object
       */
      oOrderObj.NewInstance ();

      /*
       * Create ""Order"" component in output message
       */
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order Entry - Orders"");
      oOrderComp.NewRecord();
      // Set ""Id"" so Siebel Adapter can synchronize
      oOrderComp.SetFieldValue (""Id"", inputId);

      /*
       * Read ""Export Parameters"" component
       */
      iExportComp = iOrderObj.GetPrimaryIntComp (""Export Parameters"");
      if (iExportComp.NextRecord ())
      {
      
         /*
          * Update ""Order"" component
          */
         oOrderComp.SetCopySource  (iExportComp);
         
         
		 
		 oOrderComp.SetFieldValue 		(""As Of Date"", 		Timestamp());
		 oOrderComp.SetFieldValue 		(""EAI Sync Date"", 		Timestamp());

         oOrderComp.CopyFieldValue 		(""Integration Id"",  ""SALESDOCUMENT"");
         
         iReturnComp = iExportComp.GetIntComp   (""RETURN"");
         while (iReturnComp.NextRecord ())
         {
            var errorType = iReturnComp.GetFieldValue (""TYPE"");
            if (errorType == ""E"")
            {
            	oOrderComp.SetCopySource  (iReturnComp);
            	oOrderComp.CopyFieldValue (""Back Office Error Text"", ""MESSAGE"");
            	break;
            }
          }         
      }
   }
}
function CreateSAP47Order_SiebelToBAPI (inputMsg, outputMsg)
{ // referenced by workflow Order - Create SAP 47 Order
   /* Uses same map as CreateFromData() */
   Create77SAP47Order_SiebelToBAPI (inputMsg, outputMsg,
                                        ""SAP 47 Order"",
                                        ""SAP 47 Order - Create SAP Order (BAPI Input)"");
}
function CreateSAP47Order_SiebelToBAPICOMMIT (inputMsg, outputMsg)
{  // referenced by workflow Order - Create SAP 47 Order
	/*
	 * Set up EAI Output Message Objects
	 */
	 var oCommitObj;	// BAPI instance
	 var oCommitComp;	// BAPI Component
	 
	oCommitObj	= outputMsg.CreateIntObj (""Account - Commit SAP 47 Transaction (BAPI Input)"");
    oCommitObj.NewInstance();
    oCommitComp = oCommitObj.CreatePrimaryIntComp (""Import Parameters"");
    oCommitComp.NewRecord ();
   
}
function GetDaysInAMonth(nMonth, nYear)
{ // general utility function

	// Jan, Mar, May, Jul, Aug, Oct, Dec have 31 days each
	// Apr, Jun, Sept, Nov have 30 days each
	// Feb, for now, has 28 days.
	var daysInMonth = new Array(31,28,31,30,31,30,31,31,30,31,30,31);
	var nCurrentDays;


	// Only February can be either 28 or 29, depending on whether the year is a leap year
	if (nMonth == 2)
	{
		// If the year is divisible by 4, it is a leap year
		if (nYear%4 == 0)
		{
			// If the year is a century, then it should be divisible by 400 to be a leap year.
			if (nYear%100 == 0)
			{
				// If it is a century and divisible by 400, it is a leap year.
				if (nYear%400 == 0) { nCurrentDays = 29;}

				// If it is a century and NOT divisible by 400 (e.g. 1900), it is NOT a leap year.
				else	{ nCurrentDays = 28;}
			}
		
			// If it is not a century and divisible by 4, it is a leap year.
			else { nCurrentDays = 29;}
		}

		// If a year is NOT divisible by 4, it is not a leap year
		else { nCurrentDays = 28; }
	}


	// If the month is NOT Feb, calculating days in a month is straight-forward.
	// eScript array index starts with 0, not 1.
	else
	{ nCurrentDays = daysInMonth[nMonth - 1]; }

	return nCurrentDays;

}
function GetOrderId (orderId)
{ // Called from script OrderStatus
	var OrdBusObject = TheApplication().GetBusObject(""Order Entry"");
	var OrdBusComp = OrdBusObject.GetBusComp(""Order Entry - Orders"");
	
	OrdBusComp.ClearToQuery();
	OrdBusComp.SetViewMode (AllView); // 12-8NF9TR
	OrdBusComp.SetSearchSpec(""Integration Id"", orderId);
	OrdBusComp.ActivateField(""Id"");
	OrdBusComp.ExecuteQuery();
	
	if(OrdBusComp.FirstRecord())
	{
	   return OrdBusComp.GetFieldValue(""Id"");
	}
      	else
           return null;
	
}
function GetSAP47GetDetailedList_BAPIToSiebel (inputMsg, outputMsg)
{  // referenced by workflow Order - Get Detailed List SAP 47 Order
   /*
    * Input Objects' Integration Components
    *   BAPI Export (SAP 47 Order - Get Detailed List (BAPI Output))
    *     Export Parameters (output)
    *       Order Header (header)
    *         Order Item (item)
    *           Order Item Delivery Item (deliv)
    *
    * Output Object's Integration Components:
    *   Order Object (SAP 47 Order)
    *     Order (oOrder)
    *       Get Status Output
    *       Get Status Header
    *         Get Status Item
    *           Get Status Item Delivery Item
    *       Order Line Item
    *         Order Line Item Action
    */

   /*
    * Set up EAI Lookup objects
    */
   var currencyLM = new CSSEAIValueMap (""SAP Currency Code"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iGSOrderObj;        // BAPI Order instance
   var iGSExportComp;      // BAPI Export Parameters
   var iGSHeaderComp;      // BAPI Order Headers for Document Numbers ***
   var iGSItemComp;        // BAPI Order Item Data for Document Numbers ***
   var iGSCondComp; 	   // BAPI Condition Records
   var iGSScheduleComp;    // BAPI Order Schedule Lines for Document Numbers ***
   var iGSHeaderStatusComp;// BAPI Header Status for Document Numbers ***
   var iGSItemStatusComp;  // BAPI item Status for Document Numbers ***
   var iGSDocFlowComp;     // BAPI Document Flows for Document Numbers ***
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;        // Siebel Orderinstance
   var oOrderComp;       // Order
   var oItemComp;        // Order Line Item
   var oScheduleComp;    // Order Line Item Action
   var oDelivComp;       // Order Line Item Action
   var oDocFlowComp;     // Order XA
      

   /*
    * Find and create top-level integration object
    */
   iGSOrderObj = inputMsg.GetIntObj(""SAP 47 Order - Get Detailed List (BAPI Output)"");
   oOrderObj = outputMsg.CreateIntObj (""SAP 47 Order"");

   /*
    * Read int object instances from EAI message
    */

   while (iGSOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object in output message
       */
      oOrderObj.NewInstance ();
      
      /*
       * Create ""Order"" component
       */
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order Entry - Orders"");
      oOrderComp.NewRecord ();
      // Set ""Id"" so Siebel Adapter can synchronize
      oOrderComp.SetFieldValue (""Id"", inputId);
      
      /*
       * Read ""Export Parameters"" component
       */
      iGSExportComp = iGSOrderObj.GetPrimaryIntComp (""Export Parameters"");
      
   
      if (iGSExportComp.NextRecord())
      {
         /*
          * Read ""Order Header"" component
          */
         iGSHeaderComp = iGSExportComp.GetIntComp (""ORDER_HEADERS_OUT"");
         
         if (iGSHeaderComp.NextRecord ())
         {
            /*
             * Update ""Order"" component
             */
            oOrderComp.SetCopySource  (iGSHeaderComp);
            
            // EAI Lookup code ""SAP Currency""
            var currencyCode = currencyLM.Translate (iGSHeaderComp.GetFieldValue (""CURRENCY""));
   
            if (currencyCode != null && currencyCode != """")
              {     
                 oOrderComp.SetFieldValue  (""Currency Code"", currencyCode);
              }     
            oOrderComp.CopyFieldValue (""Requested Ship Date"",     ""REQ_DATE_H"");
            oOrderComp.CopyFieldValue (""Integration Id"",          ""DOC_NUMBER"");
            oOrderComp.CopyFieldValue (""Account Order Number"",    ""PURCH_NO"");
            
            // Delivery Block
            var sapDelBlock = iGSHeaderComp.GetFieldValue ( ""DLV_BLOCK"" );
		    var delBlock = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_HEADER_DELIV_BLOCK"", sapDelBlock);
		    oOrderComp.SetFieldValue (""Delivery Block"",          delBlock);
		    
		    // Billing Block
		    //var sapBillBlock = iGSHeaderComp.GetFieldValue ( ""BILL_BLOCK"" );
		    //var billBlock = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_HEADER_BILL_BLOCK"", sapBillBlock);
		    //oOrderComp.SetFieldValue (""Billing Block"",          billBlock);
		    
		    var salesdoc =  iGSHeaderComp.GetFieldValue (""DOC_NUMBER"");
                    
        
         iGSHeaderStatusComp = iGSExportComp.GetIntComp (""ORDER_STATUSHEADERS_OUT"");
         
         if (iGSHeaderStatusComp.NextRecord ())
         {
           
           	 oOrderComp.SetCopySource  (iGSHeaderStatusComp);
   	      // Overall processing status of document
			 var sapOStatus = iGSHeaderStatusComp.GetFieldValue ( ""PRC_STAT_H"" );
        	 if ( sapOStatus == ""C"" )
           		{
           			oOrderComp.SetFieldValue ( ""Status"" , 	TheApplication().InvokeMethod (""LookupValue"", ""FS_ORDER_STATUS"", ""Closed""));
           		}
            		else if ( sapOStatus == ""B"" )
           		{
              		oOrderComp.SetFieldValue ( ""Status"" , 	TheApplication().InvokeMethod (""LookupValue"", ""FS_ORDER_STATUS"", ""Partially Shipped""));	
           		}
            	  		else 
           			{
           	   			oOrderComp.SetFieldValue ( ""Status"" , 	TheApplication().InvokeMethod (""LookupValue"", ""FS_ORDER_STATUS"", ""Open""));             	 
            		} 
                     
         // Delivery status
			 var sapDStatus = iGSHeaderStatusComp.GetFieldValue ( ""DELIV_STAT"" );
        	 if ( sapDStatus == ""C"" )
        		{
       	    		oOrderComp.SetFieldValue ( ""Delivery Status"" , 	TheApplication().InvokeMethod (""LookupValue"", ""FS_DELIVERY_STATUS"", ""Closed""));
           		}
            		else if ( sapDStatus == ""B"" )
           		{
              		oOrderComp.SetFieldValue ( ""Delivery Status"" , 	TheApplication().InvokeMethod (""LookupValue"", ""FS_DELIVERY_STATUS"", ""Partially Shipped""));	
           		}
              			else 
           			{
           	   			oOrderComp.SetFieldValue ( ""Delivery Status"" , 	TheApplication().InvokeMethod (""LookupValue"", ""FS_DELIVERY_STATUS"", ""Open""));             	 
            		}               	                    
            
         } 
                           	                    
	      /*
           * Item
           */
          
          iGSItemComp = iGSExportComp.GetIntComp (""ORDER_ITEMS_OUT"");

          
          oItemComp = oOrderComp.CreateIntComp (""Order Entry - Line Items"", false);
                      
          while (iGSItemComp.NextRecord ())
           	 {
         	     //var parItemnum = iGSItemComp.GetFieldValue (""HG_LV_ITEM"");
         	     //if (parItemnum == ""000000"" || parItemnum == """") // remove this if clause in case you want to get Child Component of Configurable Materials
				//{               
               
            	 var itemMaterial = iGSItemComp.GetFieldValue (""MATERIAL"");
               
              	 oItemComp.NewRecord ();
               	 oItemComp.SetCopySource (iGSItemComp);
               	 var itemnum  = iGSItemComp.GetFieldValue (""ITM_NUMBER"");
            	 var qtyReq   = iGSItemComp.GetFieldValue (""REQ_QTY"");
             	 var itemReqDate 	   = iGSItemComp.GetFieldValue (""REQ_DATE"");
            	 oItemComp.CopyFieldValue (""Product Integration Id"", ""MATERIAL"");
               	 oItemComp.CopyFieldValue (""Line Number"",            ""ITM_NUMBER"");
               	 oItemComp.CopyFieldValue (""Description"",            ""SHORT_TEXT"");
               	 var itemUOM = iGSItemComp.GetFieldValue (""SALES_UNIT"");
		       	 oItemComp.CopyFieldValue (""Product Unit of Measure"",""SALES_UNIT"");
                 oItemComp.SetFieldValue (""Quantity Requested"", qtyReq);
				 oItemComp.CopyFieldValue (""Quantity Shipped"",  ""REF_QTY"");
                 oItemComp.SetFieldValue (""Due Date"", itemReqDate);
				 oItemComp.CopyFieldValue (""NRC CxTotal"", ""NET_VALUE""); // nbc 7.8.2 
              
            	 var condFlag = false;
		         iGSCondComp = iGSExportComp.GetIntComp (""ORDER_CONDITIONS_OUT"");	                 
                 while (iGSCondComp.NextRecord ())
                 {
                  oItemComp.SetCopySource (iGSCondComp);
                 	if ((iGSCondComp.GetFieldValue (""ITM_NUMBER"") == itemnum)) 
                  		{
                 			if ((iGSCondComp.GetFieldValue (""COND_TYPE"") == ""PN00""))
                 			 {	var netPrice = 0;
                 				var netValue = 0;
                 				if (itemUOM == (iGSCondComp.GetFieldValue (""COND_D_UNT"")))
                					{oItemComp.CopyFieldValue  (""Unit Price"",   ""COND_VALUE"");
                 				 	oItemComp.CopyFieldValue  (""Adjusted List Price"",   ""COND_VALUE"");
									oItemComp.CopyFieldValue  (""Net Price"",   ""COND_VALUE""); // nbc 7.8.2 SAP 4x Net Price
                 					}
                 			  	else
              						{netValue = (iGSCondComp.GetFieldValue (""CONDVALUE""));
                 					 	if (netValue != 0)
                 			 		 		{netPrice = (netValue / qtyReq); 
                 			 	 	 		 oItemComp.SetFieldValue  (""Unit Price"",   netPrice);
               	 			 	 			 oItemComp.SetFieldValue  (""Adjusted List Price"",   netPrice);
										     oItemComp.SetFieldValue  (""Net Price"",   netPrice); //nbc 7.8.2 SAP 4x Net Price
               	 			 	 			}
               	 			 	 	}
               	 			 	condFlag = true;
               	 	     	}
               	 		
               	   			if ((iGSCondComp.GetFieldValue (""COND_TYPE"") == ""PR00"") && (condFlag == false))
	               				{	
                 					var netPrice= 0;
                 					var netValue = 0;
                 					if (itemUOM == (iGSCondComp.GetFieldValue (""COND_D_UNT"")))
                 			    		{oItemComp.CopyFieldValue  (""Unit Price"",   ""COND_VALUE"");
                 				 		oItemComp.CopyFieldValue  (""Adjusted List Price"",   ""COND_VALUE"");
										oItemComp.CopyFieldValue  (""Net Price"",   ""COND_VALUE""); //nbc 7.8.2 SAP 4x Net Price										
                 						}
                 					else
                 						{ netValue = (iGSCondComp.GetFieldValue (""CONDVALUE""));
                 			 	  		if (netValue != 0)
                 			 		 		{netPrice = (netValue / qtyReq); 
                 			 		  		oItemComp.SetFieldValue  (""Unit Price"",  netPrice);
               	 			 	      		oItemComp.SetFieldValue  (""Adjusted List Price"",  netPrice); 
											oItemComp.SetFieldValue  (""Net Price"",  netPrice); //nbc 7.8.2 SAP 4x Net Price
               	 			 	      		}
               	 			 	 		}
               	 		 		}
               	 		
               	 	if ((iGSCondComp.GetFieldValue (""COND_TYPE"") == ""KF00""))
                 		{
                 		 oItemComp.CopyFieldValue  (""Freight Amount"",   ""CONDVALUE"");
               	 		}
               	 			
               	 	if ((iGSCondComp.GetFieldValue (""COND_TYPE"") == ""UTXJ""))
                 		{
                 		 oItemComp.CopyFieldValue  (""Tax Amount"",   ""CONDVALUE"");
               	 		}
               	 	} // end if ((iGSCondComp.GetFieldValue (""ITM_NUMBER"") == itemnum)) 
               	 } // end while (iGSCondComp.NextRecord ())
		 
                 iGSItemStatusComp = iGSExportComp.GetIntComp (""ORDER_STATUSITEMS_OUT"");
                 while (iGSItemStatusComp.NextRecord ())
           	     {
           	       oItemComp.SetCopySource  (iGSItemStatusComp);
           	        var iStatusItemNum = iGSItemStatusComp.GetFieldValue (""ITM_NUMBER"");
           	        if (iStatusItemNum == itemnum)
           	        {
           	          var sapStatus = iGSItemStatusComp.GetFieldValue ( ""DLV_STAT_I"" );
		 	          var itemStatus= TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_ITEM_DELIV_STATUS"", sapStatus);
                      oItemComp.SetFieldValue (""Delivery Status"",        itemStatus);
                    }
                  }

          // Item Schedule

		         iGSScheduleComp = iGSExportComp.GetIntComp (""ORDER_SCHEDULES_OUT"");
		         oScheduleComp   = oItemComp.CreateIntComp (""Order Entry - Line Item Actions"");
                 while (iGSScheduleComp.NextRecord ())
           	      { 
           	       var itemnum2  = iGSScheduleComp.GetFieldValue (""ITM_NUMBER"");
                   var schednum = iGSScheduleComp.GetFieldValue (""SCHED_LINE"");
                   var intId;
                   if (itemnum2 == itemnum)
                   {
           
                    oScheduleComp.NewRecord ();
                    oScheduleComp.SetCopySource  (iGSScheduleComp);
                
                    intId = inputId + ""-"" + itemnum2 + ""-"" + schednum;
                    oScheduleComp.SetFieldValue (""Line Item Action Number"",     intId);
                    oScheduleComp.SetFieldValue (""Integration Id"",     intId);
                    oScheduleComp.CopyFieldValue (""Actual Start Date"",           ""GI_DATE"");
                    oScheduleComp.CopyFieldValue (""Confirmed Qty"",               ""CONFIR_QTY"");
                    var reqDate = iGSScheduleComp.GetFieldValue ( ""REQ_DATE"");
                    oScheduleComp.SetFieldValue (""Planned Start Date"" ,          reqDate);
                    var shipValue = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_PART_MOVEMENT_TYPE"", ""Schedule"");
                    oScheduleComp.SetFieldValue  (""Line Item Action Type"",   shipValue);
                
                   } 
           	     }
           	   

          	/*	
             * Item Document Flow
			 */
			 
		 		 iGSDocFlowComp = iGSExportComp.GetIntComp (""ORDER_FLOWS_OUT"");
                   var prevDoc = null;
                   var prevItem = null;

				while (iGSDocFlowComp.NextRecord ())
           	      { 
           	       var itemnum3 = null; 
				   var docCat = iGSDocFlowComp.GetFieldValue (""DOCCATEGOR"");          	      
         	       var ordernum2  = iGSDocFlowComp.GetFieldValue (""PRECSDDOC"");
                   var subqDoc  = iGSDocFlowComp.GetFieldValue (""SUBSSDDOC"");
                   var subqItem = iGSDocFlowComp.GetFieldValue (""SUBSITDOC"");
         	       
           	       itemnum3   = iGSDocFlowComp.GetFieldValue (""PREDITDOC"");
                   if ((itemnum3 == itemnum) && (docCat == ""J""))
 					{
                    oScheduleComp.NewRecord ();
                    oScheduleComp.SetCopySource  (iGSDocFlowComp);
                    var itemActionNum = subqDoc + ""-"" + subqItem ;
                    oScheduleComp.SetFieldValue  (""Line Item Action Number"",  itemActionNum);
                    oScheduleComp.CopyFieldValue (""Confirmed Qty"",       ""REF_QTY"");
                    oScheduleComp.CopyFieldValue (""Planned Start Date"",       ""CREAT_DATE"");
                    oScheduleComp.SetFieldValue  (""Integration Id"",  itemActionNum);
                    var shipValue = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_PART_MOVEMENT_TYPE"", ""Delivery"");
                
                    oScheduleComp.SetFieldValue  (""Line Item Action Type"",   shipValue);
                    prevDoc = subqDoc;
                    prevItem = subqItem;
                    }
                    
                    
                    else if ((docCat == ""R"") && (prevDoc == ordernum2) && (prevItem == itemnum3))
                    {
                    oScheduleComp.NewRecord ();
                    oScheduleComp.SetCopySource  (iGSDocFlowComp);
                    var itemActionNum1 = subqDoc + ""-"" + subqItem ;
                    oScheduleComp.SetFieldValue  (""Line Item Action Number"",  itemActionNum1);
                    oScheduleComp.CopyFieldValue (""Confirmed Qty"",       ""REF_QTY"");
                    oScheduleComp.CopyFieldValue (""Planned Start Date"",       ""CREAT_DATE"");
                    oScheduleComp.SetFieldValue  (""Integration Id"",  itemActionNum1);
                    var shipValue = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_PART_MOVEMENT_TYPE"", ""Ship"");
                
                    oScheduleComp.SetFieldValue  (""Line Item Action Type"",   shipValue);
                    prevDoc = subqDoc;
                    prevItem = subqItem;
					}
                    
                  }

	        }
	      //} // endif for (parItemnum == ""000000"") 
		}
 	 }
                
   }
}
function GetSAP47GetDetailedList_SiebelToBAPI (inputMsg, outputMsg)
{  // referenced by workflow Order - Get Detailed List SAP 47 Order
   /* Input Objects' Integration Components
    *   Order Object (SAP 47 Order)
    *     Order
    *
    * Output Object's Integration Components:
    *   BAPI Import (SAP 47 Order - Get Detailed List (BAPI Input))
    *     Import Parameters
    */

   /*
    * Set up EAI Lookup objects
    */

   /*
    * Set up EAI Input Message objects
    */
   var iOrderObj;    // Siebel Order instance
   var iOrderComp;   // Order

   /*
    * Set up EAI Output Message objects
    */
   var oGSObj;           // BAPI instance
   var oGSImportComp;    // Import Parameters
   var oGSSalesDocComp;  // Import Parameters

   /*
    * Find and create top-level integration object
    */
   iOrderObj = inputMsg.GetIntObj (""SAP 47 Order"");
   oGSObj    = outputMsg.CreateIntObj (""SAP 47 Order - Get Detailed List (BAPI Input)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iOrderObj.NextInstance ())
   {
      /*
       * Create ""Get Status"" object
       */
      oGSObj.NewInstance ();

      /*
       * Read ""Order"" component
       iOrderComp     = iOrderObj.GetPrimaryIntComp (""Order Entry - Orders"");
      oCFDImportComp = oCFDOrderObj.CreatePrimaryIntComp (""Import Parameters"");

       */
      iOrderComp      = iOrderObj.GetPrimaryIntComp (""Order Entry - Orders"");
      oGSImportComp   = oGSObj.CreatePrimaryIntComp (""Import Parameters"");

      
      if (iOrderComp.NextRecord ())
      {

          
         oGSImportComp.NewRecord ();
         oGSImportComp.SetCopySource  (iOrderComp);
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-ADDRESS"",   ""X""); 
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-BILLPLAN"",  ""X"");
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-BUSINESS"",  ""X"");
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-CONFIGURE"", ""X"");
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-CONTRACT"",  ""X""); 
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-CREDCARD"",  ""X""); 
         oGSImportComp.SetFieldValue (""I_BAPI_VIEW-FLOW"",      ""X"");
         oGSImportComp.SetFieldValue (""I_BAPI_VIEW-HEADER"",    ""X"");
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-INCOMP_LOG"",""X""); 
         oGSImportComp.SetFieldValue (""I_BAPI_VIEW-ITEM"",      ""X"");
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-PARTNER"",   ""X""); 
         oGSImportComp.SetFieldValue (""I_BAPI_VIEW-SDCOND"",    ""X"");
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-SDCOND_ADD"",""X"");
         oGSImportComp.SetFieldValue (""I_BAPI_VIEW-SDSCHEDULE"",""X"");
         oGSImportComp.SetFieldValue (""I_BAPI_VIEW-STATUS_H"",  ""X"");
         oGSImportComp.SetFieldValue (""I_BAPI_VIEW-STATUS_I"",  ""X"");
      // oGSImportComp.SetFieldValue (""I_BAPI_VIEW-TEXT"",      ""X""); 
         oGSImportComp.SetFieldValue (""I_MEMORY_READ"",         ""A"");
         oGSSalesDocComp = oGSImportComp.CreateIntComp (""SALES_DOCUMENTS"");         
         oGSSalesDocComp.NewRecord ();
         oGSSalesDocComp.SetCopySource  (iOrderComp);
         oGSSalesDocComp.CopyFieldValue (""VBELN"", ""Integration Id"");
      
      }

   }   
}
function LocalizeMessage(Message)
{ // general utility function
	// Function to perform message language translation and parameterization.
	//
	// Created by Richard Exley - November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ERR_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ERR_MSG"";
	var LOVType = ""CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function OrderStatus (inputMsg,outputMsg )
{ // referenced from workflow Order - Change SAP 47 Order Status
	// var theApp = TheApplication();
	
   /* Input Objects' Integration Components
	*   Order IDOC (SAP 47 Order Status (IDOC 4x))
	*
	*/

   
   /*
	* Set up EAI Input Message objects
	*/
	var iIDOCObj;   // IDOC instance
	var iIDOCComp;  // top level IDOC segment
	var iORDERComp; // IDOC Order Header
	
   /*
    * Set up EAI Output Message objects (Dummy)
    */
   var oOrderObj;      // Order object instance
   var oOrderComp;     // Order (header)
   var oOrderItemComp; // Order Item (item)
	
   /*
	* Find and create top-level integration object
	*/
	iIDOCObj    = inputMsg.GetIntObj (""SAP 47 Order Status (IDOC 4x)"");
	oOrderObj = outputMsg.CreateIntObj (""SAP 47 Order"");
	
   /*
	* Read int object instances from EAI message
	*/
	while (iIDOCObj.NextInstance ())
	{
	   
       /*
		* Read virtual root component that IDOC RFC Adapter populates
		*/
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		oOrderObj.NewInstance ();
		oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order Entry - Orders"");
		iIDOCComp.NextRecord ();

	   /*
		* Read ""ORDER"" component
		*/
        iORDERComp = iIDOCComp.GetIntComp (""E2EDK01005"");
		if (iORDERComp.NextRecord ())
		    {
			   
			    var orderNo = iORDERComp.GetFieldValue ( ""BELNR"" );
			    var orderId;
				
				orderId = GetOrderId(orderNo);
				
				outputMsg.SetArgument (""Object Id"", orderId);
                
				var wfManager = TheApplication().GetService(""EAI Business Integration Manager (Server Request)"");
    
    			var input = TheApplication().NewPropertySet();
		    	var output = TheApplication().NewPropertySet();
		    	input.SetProperty(""ProcessName"", ""Order - Get Detailed List SAP 47 Order"");
    			input.SetProperty(""RowId"", orderId);
    			wfManager.InvokeMethod(""RunProcess"", input, output);
    			// TheApplication().MsgBox(""Get Status WF Invoked Sucessfully"");
    		}	
	

	}

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"
function Simulate77SAP47Order_SiebelToBAPI (inputMsg, outputMsg, InputIntObjName, OutputIntObjName)
{ // referenced by script SimulateSAP47Order_SiebelToBAPI
   /*
    * Input Objects' Integration Components
    *   Order Object (SAP 47 Order)
    *     Order Entry - Orders (order header)
    *       Order Entry - Line Items (item)
    *        Order Item XA (attributes)
    *
    * Output Object's Integration Components:
    *   BAPI Import Object (SAP 47 Order - Create SAP Order (BAPI Import))
    *     Import Parameters
    *      ORDER_HEADER_IN
    *       ORDER_PARTNERS
    *       ORDER_CCARD
    *       ORDER_ITEMS_IN
    *		ORDER_CFGS_INST
    *		ORDER_CFGS_REF
    *		ORDER_CFGS_VALUE
    */

   /*
    * Set up EAI Lookup maps
    */
   var orderTypeLM = EAIGetValueMap (""SAP Order Types"",     	""Siebel Outbound"");
   var incotermsLM = EAIGetValueMap (""SAP Incoterms"",      		""Siebel Outbound"");
   var payTermsLM  = EAIGetValueMap (""SAP Payment Terms"",   	""Siebel Outbound"");
   var currencyLM  = EAIGetValueMap (""SAP Currency Code"",		""Siebel Outbound"");
   var cCardLM	   = EAIGetValueMap (""SAP Credit Card Type"",	""Siebel Outbound"");
   var uomLM       = EAIGetValueMap (""SAP Unit of Measure"", 	""Siebel Outbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iOrderObj;  // Order object instance
   var iOrderComp; // Order
   var iCardComp; // Payments
   var iItemComp;  // Order Line Item
   var iAttrComp;  // Item Attribute Component

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oCFDOrderObj;        // BAPI Order instance
   var oCFDImportComp;      // BAPI Import parameters
   var oCFDItemComp;        // BAPI Order Item
   var oCFDSchedComp;		// For EPrice CR 
   var oCFDPartnerComp;     // BAPI Order Partners
   var oCFDCardComp;     	// BAPI Card Component
   var oCFDCfgInstComp;
   var oCFDCfgValComp;
   var oCFDCfgRefComp;


   /*
    * Find and create top-level integration object
    */
   iOrderObj    = inputMsg.GetIntObj (InputIntObjName);
   oCFDOrderObj = outputMsg.CreateIntObj (OutputIntObjName);
   
   /*
    * Read int object instances from EAI message
    */
   while (iOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object in output message
       */
      oCFDOrderObj.NewInstance ();

      /*
       * Read ""Order"" component
       */
      iOrderComp     = iOrderObj.GetPrimaryIntComp (""Order Entry - Orders"");
      oCFDImportComp = oCFDOrderObj.CreatePrimaryIntComp (""Import Parameters"");
     
      if (iOrderComp.NextRecord ())
      {
         /*
          * Return an error if Integration Id is not null
          */
         if (iOrderComp.GetFieldValue (""Integration Id"") != """")
         {
              var IntId = iOrderComp.GetFieldValue (""Integration Id"");
              EAIRaiseError(LocalizeMessage(""ERR_MSG_ORDER_ALREADY_SUBMITTED,""+IntId+""""));

         }
        
         /*
          * Write ""Import Parameters"" component
          */
         oCFDImportComp.NewRecord ();
         oCFDImportComp.SetCopySource  (iOrderComp);
         
         var priceList =  null;
         priceList = iOrderComp.GetFieldValue (""Price List Id"");
         var currencyCode = currencyLM.Translate (iOrderComp.GetFieldValue (""Currency Code""));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DOC_NUMBER"", null);
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DOC_TYPE"",   orderTypeLM.Translate (iOrderComp.GetFieldValue (""Order Type"")));
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-CURRENCY"",  currencyCode );
         /*
         	*CR # 12-79SPMF to add validation for Sales Area in SAP
         */
         var salesOrg  = iOrderComp.GetFieldValue (""SAP Sales Organization (MO)"");
         var distChannel  = iOrderComp.GetFieldValue (""SAP Distribution Channel (MO)"");
         var division  = iOrderComp.GetFieldValue (""SAP Division (MO)"");
         if ((salesOrg != """") && (distChannel != """") && (division != """") )
			{
				oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_ORG"",  ""SAP Sales Organization (MO)"");
				oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DISTR_CHAN"", ""SAP Distribution Channel (MO)"");
				oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DIVISION"",   ""SAP Division (MO)"");
			}
		else
			{
         		EAIRaiseError(LocalizeMessage(""ERR_MSG_SALES_AREA_NOT_FOUND,""+salesOrg+"",""+distChannel+"",""+division+""""));
         	}
         if (iOrderComp.GetFieldValue (""Requested Ship Date"") != """")
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",   ""Requested Ship Date"");
               
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",       ""Order Date"");
            }
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DATE_TYPE"",  ""1"");
         if (iOrderComp.GetFieldValue (""Account Order Number"") != """")
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_NO"",   ""Account Order Number"");
               
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_NO"",       ""Order Number"");
            }
         
         
         
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_DATE"", ""Order Date"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REF_1"",      ""Order Number"");
         
         // Set NAME only if ""Contact Id"" is not null.
         if (iOrderComp.GetFieldValue (""Contact Id"") != null)
         {
            oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-NAME"", EAIFormatPersonName (iOrderComp.GetFieldValue (""Contact First Name""),
                                                                                       iOrderComp.GetFieldValue (""Contact Last Name"")));
         }         
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-TELEPHONE"",  ""Contact Work Phone #"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-INCOTERMS1"", incotermsLM.Translate (iOrderComp.GetFieldValue(""Freight Terms"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-INCOTERMS2"", ""Freight Terms Info"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-PMNTTRMS"",   payTermsLM.Translate (iOrderComp.GetFieldValue (""Payment Term"")));
         
         if (iOrderComp.GetFieldValue (""Partial Ship"") != ""Y"")
            {
               oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       ""X"");
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       null);
            }
            
         
         var date = iOrderComp.GetFieldValue ( ""Pricing Date"");
         oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-PRICE_DATE"", date );
         

         /*
          * Write ""ORDER_PARTNERS"" component  
          */
                  
         oCFDPartnerComp = oCFDImportComp.CreateIntComp (""ORDER_PARTNERS"", oCFDImportComp);

         // Sold to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""AG"");

         var soldtoparty =  iOrderComp.GetFieldValue (""Account Integration Id"");
         var array = soldtoparty.split("":"");
         var AccountIntId = array[0];
         
         
         oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId);

         // Ship To partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""WE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Ship To Account Integration Id"");

         // Payer partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RG"");
         var payerId = iOrderComp.GetFieldValue (""Payer Account Integration Id"");
         if (payerId == null || payerId == """")
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId );
         	}
         else
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", payerId );
         	}
         
         // Bill to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Bill To Account Integration Id"");

		/*
		 * Read and update Credit Card Info
		 *
		 */
		 iCardComp = iOrderComp.GetIntComp (""Payments"");
      if (iCardComp.NextRecord ())
      {
		 var ccType = cCardLM.Translate (iCardComp.GetFieldValue (""Payment Type""));
		 var ccNum = iCardComp.GetFieldValue ( ""Account Number"");
		 if ( ccNum != null && ccNum != """" )
		 
		 	{
		 		oCFDCardComp = oCFDImportComp.CreateIntComp (""ORDER_CCARD"");
		 		oCFDCardComp.NewRecord();
		 		oCFDCardComp.SetCopySource (iCardComp);
		 		var cardExpDate = iCardComp.GetFieldValue ( ""Expiration Date"");
		 		if ( cardExpDate == null || cardExpDate == """" )
		 			{
		 				var cardExpYear	= iCardComp.GetFieldValue (""Expiration Year"" );
		 				var cardExpMonth  = iCardComp.GetFieldValue (""Expiration Month"" );
		 				var cardExpDay;
		 				
		 				var nMonth = ConvertMonth (cardExpMonth);
		 				cardExpDay = GetDaysInAMonth(nMonth, cardExpYear);
		 				var cardExpFullDate = nMonth + ""/"" + cardExpDay + ""/"" + cardExpYear + "" 00:00:00"";
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpFullDate );
		 			}
		 		else
		 			{
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpDate );
		 			}
		 		oCFDCardComp.SetFieldValue		(""CC_TYPE"", 		ccType);
		 		oCFDCardComp.SetFieldValue		(""CC_NUMBER"", 		ccNum );
		 		oCFDCardComp.CopyFieldValue		(""CC_NAME"", 		""Card Holder"" );
				oCFDCardComp.CopyFieldValue		(""AUTHAMOUNT"", 		""Transaction Amount"" );
		 		oCFDCardComp.SetFieldValue		(""CURRENCY"", 		currencyCode );
		 	}
	   }
         /*
          * Read ""Order Line Item"" Integration Component
          */
         iItemComp    = iOrderComp.GetIntComp        (""Order Entry - Line Items"");
         oCFDItemComp = oCFDImportComp.CreateIntComp (""ORDER_ITEMS_IN"", oCFDImportComp);
         //oCFDCondValComp = oCFDImportComp.CreateIntComp (""ORDER_CONDITIONS_IN"");
         oCFDCfgValComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_VALUE"", oCFDImportComp);       
         oCFDCfgRefComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_REF"", oCFDImportComp);         
         oCFDCfgInstComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_INST"", oCFDImportComp);
         // For EPrice CR
         oCFDSchedComp = oCFDImportComp.CreateIntComp (""ORDER_SCHEDULE_IN"", oCFDImportComp);                  
         while (iItemComp.NextRecord ())
         {
            var itemNum =  iItemComp.GetFieldValue (""Line Number"");
/*           var Posex_Hilfsvariable =""00000"";

            Clib.sprintf(Posex_Hilfsvariable,""%06.6s"",iItemComp.GetFieldValue(""Line Number""));
            var itemNumber = Posex_Hilfsvariable;
                  
            var parentItemNum =  iItemComp.GetFieldValue (""Parent Order Item Id"");                  
            if((parentItemNum == null) || (parentItemNum ==""""))
            {*/
            oCFDItemComp.NewRecord ();
            oCFDItemComp.SetCopySource  (iItemComp);
            var itemNumber = iItemComp.GetFieldValue(""Line Number"");
            oCFDItemComp.CopyFieldValue (""ITM_NUMBER"",     ""Line Number"");
            //oCFDItemComp.SetFieldValue (""HG_LV_ITEM"",     ""000000"");
            oCFDItemComp.CopyFieldValue (""PO_ITM_NO"",      ""Line Number"");
            oCFDItemComp.CopyFieldValue (""MATERIAL"",       ""Product Integration Id"");
            
            if (iItemComp.GetFieldValue (""Partial Ship"") != ""Y"")
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""C"");
                }
            else
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""D"");
                }
              var plant = iItemComp.GetFieldValue (""Source Inventory Location"");
              //if (plant == """")
              //{EAIRaiseError(""Please Specify Plant in Item # "" + itemNumber);}
            
            oCFDItemComp.CopyFieldValue (""PLANT"",          ""Source Inventory Location"");
            oCFDItemComp.SetFieldValue  (""SALES_UNIT"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
            oCFDItemComp.CopyFieldValue (""SHORT_TEXT"",     ""Description"");
            /* For EPrice CR
            oCFDItemComp.CopyFieldValue (""REQ_DATE"",       ""Due Date"");
            oCFDItemComp.SetFieldValue  (""DATE_TYPE"",      ""1"");
            oCFDItemComp.CopyFieldValue (""REQ_QTY"",        ""Quantity Requested"");*/
	            
            var siebelPrice = iItemComp.GetFieldValue ( ""Unit Price"" );
            if ((  siebelPrice != 0) || (  priceList != """" ))
            
            {
             	oCFDItemComp.SetFieldValue  (""CD_TYPE2"",      ""PN00"");
            	oCFDItemComp.SetFieldValue  (""PURCH_NO_C"",     ""X"");
			    oCFDItemComp.CopyFieldValue (""CD_VALUE2"",     ""Item Price"");
            	oCFDItemComp.SetFieldValue  (""CD_P_UNT2"",     ""1"");
            	oCFDItemComp.SetFieldValue  (""CD_D_UNT2"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
            	
             	oCFDItemComp.SetFieldValue  (""CD_TYPE3"",      ""KF00"");
                oCFDItemComp.CopyFieldValue (""CD_VALUE3"",     ""Freight Amount"");
  


            }
            else
            {
             	oCFDItemComp.SetFieldValue  (""CD_TYPE2"",      ""PR00"");
            }
            
            //For EPrice CR
            oCFDSchedComp.NewRecord ();
            oCFDSchedComp.SetCopySource  (iItemComp);
            oCFDSchedComp.SetFieldValue (""DATE_TYPE"",     ""1"");
            oCFDSchedComp.CopyFieldValue (""REQ_DATE"",     ""Due Date"");
            oCFDSchedComp.CopyFieldValue (""REQ_QTY"",      ""Quantity Requested"");
            oCFDSchedComp.CopyFieldValue (""ITM_NUMBER"",      ""Line Number"");
            oCFDSchedComp.CopyFieldValue (""SCHED_LINE"",      ""0001"");
                   
            
                // oCFDItemValComp.SetFieldValue (""ITM_NUMBER"",     itemNumber);  
                                           	
//}  // end if condition for Parent item num

/*
            oCFDCfgRefComp.NewRecord ();
            oCFDCfgRefComp.SetCopySource  (iItemComp);
            oCFDCfgRefComp.SetFieldValue (""POSEX"",     itemNumber);
            oCFDCfgRefComp.SetFieldValue (""CONFIG_ID"",     itemNumber);            
            oCFDCfgRefComp.SetFieldValue (""ROOT_ID"",     itemNumber);            


            oCFDCfgInstComp.NewRecord ();
            oCFDCfgInstComp.SetCopySource  (iItemComp);
            oCFDCfgInstComp.SetFieldValue (""INST_ID"",     itemNumber);
            oCFDCfgInstComp.SetFieldValue (""CONFIG_ID"",   itemNumber);            
            oCFDCfgInstComp.SetFieldValue (""OBJ_TYPE"",     ""MARA"");            
            oCFDCfgInstComp.SetFieldValue (""OBJ_KEY"",     ""MATERIAL"");            
            oCFDCfgInstComp.SetFieldValue (""QUANTITY"",     ""1"");            

*/
           
      
                    /*
          * Read ""Order Line Item Attribute Value"" Integration Component
          */
/*         iAttrComp    = iItemComp.GetIntComp        (""Order Item XA"");

         
         while (iAttrComp.NextRecord ())
         {

            oCFDCfgValComp.NewRecord ();
            oCFDCfgValComp.SetCopySource  (iAttrComp);
            oCFDCfgValComp.CopyFieldValue (""CHARC"",     ""Name"");
            oCFDCfgValComp.CopyFieldValue (""VALUE"",     ""Value"");
            oCFDCfgValComp.CopyFieldValue (""CHARC_TXT"", ""Description"");
            oCFDCfgValComp.SetFieldValue (""INST_ID"", itemNumber);
            oCFDCfgValComp.SetFieldValue (""CONFIG_ID"", itemNumber);
		}
  */   
         } //order items read
      }
      
   }
}
function SimulateSAP47Order_BAPIToSiebel (inputMsg, outputMsg)
{  // referenced by workflow Order - Simulate SAP 47 Order
   /* Input Objects' Integration Components
    *   BAPI Export (SAP 47 Order - Simulate SAP Order (BAPI Output))
    *     Export Parameters (output)
    * Output Object's Integration Components:
    *   Order Object (SAP 47 Order)
    * Set up EAI Lookup objects
    */
   var currencyLM 	 = new CSSEAIValueMap (""SAP Currency Code"", ""Siebel Inbound"");
   var ccStatusLM	 = new CSSEAIValueMap (""SAP Credit Card Approval Code"", ""Siebel Inbound"");
   var cCardLM	 	 = new CSSEAIValueMap (""SAP Credit Card Type"", ""Siebel Inbound"");

   // * Set up EAI Input Message objects
   var iSimOrderObj;   // BAPI Order instance
   var iSimExportComp; // BAPI Export Parameters
   var iSimItemComp;   // BAPI Order Items
   var iSimIItemComp;  // BAPI Order Input Item Comp to retieve value for Fix Pricing flag
   var iSchedItemComp; // BAPI Schedule Line Items
   var iCondComp;	   //For EPrice CR
   var iSimCCardComp;  // BAPI Credit Card Export Comp

   var inputId = inputMsg.GetArgument (""Siebel Order Id"");
   //* Set up EAI Output Message objects
   var oOrderObj;      // Siebel Order instance
   var oOrderComp;     // Order
   var oCardComp;	   // Order Card Payment Comp
   var oOutputComp; // Simulate Output RFC_*
   var oItemComp;   // Simulate Item Output RFC_*
   var oSimItemComp;   // Simulate Item
   // var oItemComp;      // Item
   var oSchedItemComp; // Schedule Line Item

   //* Find and create top-level integration object
   iSimOrderObj = inputMsg.GetIntObj (""SAP 47 Order - Simulate SAP Order (BAPI Output)"");
   oOrderObj = outputMsg.CreateIntObj (""SAP 47 Order"");

    //* Read int object instances from EAI message
   while (iSimOrderObj.NextInstance ())
   {
      oOrderObj.NewInstance ();
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order Entry - Orders"");
      oOrderComp.NewRecord ();
      oOrderComp.SetFieldValue (""Id"", inputId);
      iSimExportComp = iSimOrderObj.GetPrimaryIntComp (""Export Parameters"");
      
      if (iSimExportComp.NextRecord ())
      {
         oOrderComp.SetCopySource  (iSimExportComp);
         oOrderComp.SetFieldValue(""As Of Date"", Timestamp());
         var sapDelBlock = iSimExportComp.GetFieldValue ( ""SHIP_TO_PARTY-DLV_BLOCK"" );
		 var delBlock = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_HEADER_DELIV_BLOCK"", sapDelBlock);
         oOrderComp.SetFieldValue (""Delivery Block"",     delBlock);
         var sapBillBlock = iSimExportComp.GetFieldValue ( ""BILLING_PARTY-BILL_BLOCK"" );
		 var billBlock = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_HEADER_BILL_BLOCK"", sapBillBlock);
         oOrderComp.SetFieldValue (""Billing Block"",     billBlock);
         var errorMessage = iSimExportComp.GetFieldValue ( ""RETURN-MESSAGE"");
         if (errorMessage == null)
         oOrderComp.SetFieldValue (""Back Office Error Text"", "" "");
         else
         oOrderComp.CopyFieldValue (""Back Office Error Text"",     ""RETURN-MESSAGE"");

         var returnCode = iSimExportComp.GetFieldValue (""RETURN-CODE"");
         
         if ( (returnCode == ""V1154"") || (returnCode == ""V1038"") )
            {
              oOrderComp.SetFieldValue (""Credit Status"",             ""N"");
            }
         else
            {
              oOrderComp.SetFieldValue (""Credit Status"",             ""Y"");
            }

          //* Read ""ORDER_CCARD_EX"" component
		  iSimCCardComp = iSimExportComp.GetIntComp (""ORDER_CCARD_EX"");
		  oCardComp = oOrderComp.CreateIntComp (""Payments"", false);
          var cardStatus;
          var cardLineNo = 0;
          while (iSimCCardComp.NextRecord())
          {
         	 cardStatus = iSimCCardComp.GetFieldValue ( ""CC_STAT_EX"");
         	 if ( cardStatus != null && cardStatus != """" )
         	 {
         	 oCardComp.NewRecord ();
             oCardComp.SetCopySource  (iSimCCardComp);
         	 
         	 	cardLineNo++;
         		var cardIntId = inputId + ""-"" + cardLineNo; 
         		oCardComp.SetFieldValue ( ""Integration Id"", cardIntId);
         	 	oOrderComp.SetCopySource (iSimCCardComp);
         	 	oCardComp.CopyFieldValue (""Account Number"", ""CC_NUMBER"");
         		oCardComp.CopyFieldValue (""Card Holder"", ""CC_NAME"");
         	 	oCardComp.CopyFieldValue (""Authorization Date"", ""AUTH_DATE"");
           	 	oCardComp.CopyFieldValue (""Authorization Code"", ""CC_AUTTH_NO"");
           	 	// oCardComp.CopyFieldValue (""Credit Card Approval Code"", ""AUTH_REFNO"");
           	 	//oCardComp.CopyFieldValue (""Transaction Amount"", ""CC_RE_AMOUNT"");
          	 	oCardComp.CopyFieldValue (""Transaction Amount"", ""AUTHAMOUNT"");
           	 	var ccStat = iSimCCardComp.GetFieldValue ( ""CC_STAT_EX"");
           	 	var ccReact = iSimCCardComp.GetFieldValue ( ""CC_REACT"");
           	 	
           	 	if (ccStat == ""C"")
           	 		{ if (ccReact == ""A"")
           	 			{ oCardComp.SetFieldValue (""Payment Status"", TheApplication().InvokeMethod (""LookupValue"", ""FUNDRQ_STATUS"", ""Authorized"") );}
           	 		  else
           	 		  	{ oCardComp.SetFieldValue (""Payment Status"", TheApplication().InvokeMethod (""LookupValue"", ""FUNDRQ_STATUS"", ""Declined"") );}
           	 		 }
           	 	else
           	 		{ oCardComp.SetFieldValue (""Payment Status"", TheApplication().InvokeMethod (""LookupValue"", ""FUNDRQ_STATUS"", ""AVS Failed"") );}
   				oCardComp.CopyFieldValue (""Expiration Date"", ""CC_VALID_T"" );
				oCardComp.CopyFieldValue (""Transaction Message"", ""CC_REACT_T"" );
				var expDate = iSimCCardComp.GetFieldValue (""CC_VALID_T"");
         		var expMonth = expDate.substring(0,2);
         		if (expMonth < 10)
         			{expMonth = expDate.substring(1,2);}
         		var expYear = expDate.substring(6,10);
         		oCardComp.SetFieldValue (""Expiration Month"", expMonth );
				oCardComp.SetFieldValue (""Expiration Year"", expYear );
				var paymentMethod = TheApplication().InvokeMethod (""LookupValue"", ""PAYMENT_METHOD_CODE"", ""Credit Card"");
                oCardComp.SetFieldValue  (""Payment Method"",   paymentMethod);
				var cardType = cCardLM.Translate (iSimCCardComp.GetFieldValue (""CC_TYPE""));
           	 	var LDCardType = TheApplication().InvokeMethod (""LookupValue"", ""PAYMENT_TYPE_CODE"", cardType);
           	 	oCardComp.SetFieldValue	 (""Payment Type"", LDCardType);
         	 }
          }

          //* Read ""ORDERS_ITEMS_OUT"" component
         iSimItemComp = iSimExportComp.GetIntComp (""ORDER_ITEMS_OUT"");
         iSimIItemComp = iSimExportComp.GetIntComp ( ""ORDER_ITEMS_IN"");
         oSimItemComp = oOrderComp.CreateIntComp (""Order Entry - Line Items"", false);
         while (iSimItemComp.NextRecord ())
         {
            var parItemnum = iSimItemComp.GetFieldValue ( ""HG_LV_ITEM"" );
            if (parItemnum == null || parItemnum == ""000000"" || parItemnum == """") // please comment this if statement if you want to support child componenets of Config Product
            {
            oSimItemComp.NewRecord ();
            oSimItemComp.SetCopySource  (iSimItemComp);
            iSimIItemComp.NextRecord ();
            var fixPrice = iSimIItemComp.GetFieldValue ( ""PURCH_NO_C"" );
		    var netVal          = iSimItemComp.GetFieldValue (""SUBTOTAL_2""); // nbc
		    var itemUOM 		= iSimItemComp.GetFieldValue (""SALES_UNIT""); // For EPrice CR
		    var qtyReq			= iSimItemComp.GetFieldValue (""REQ_QTY"");
     	    var itemReqDate = iSimItemComp.GetFieldValue (""DLV_DATE""); 
            var itemnum = iSimItemComp.GetFieldValue (""ITM_NUMBER"");
            var itemCurrency = currencyLM.Translate (iSimItemComp.GetFieldValue (""CURRENCY""));
            oSimItemComp.SetFieldValue     (""Currency Code"",             itemCurrency );                   
            oSimItemComp.CopyFieldValue    (""Line Number"",                ""ITM_NUMBER"");
            //oSimItemComp.CopyFieldValue    (""Quantity Requested"",        ""REQ_QTY"");
            oSimItemComp.SetFieldValue    (""Quantity Requested"",        qtyReq);
            oSimItemComp.CopyFieldValue    (""Product Integration Id"",        ""MATERIAL"");
            oSimItemComp.CopyFieldValue    (""Source Inventory Location"",        ""PLANT"");
            var netTax		= null;
                      
            // For EPrice CR
            var condFlag = false;
            iCondComp = iSimExportComp.GetIntComp (""ORDER_CONDITION_EX"");
            while (iCondComp.NextRecord ())
            {
             oSimItemComp.SetCopySource  (iCondComp);
             if ((iCondComp.GetFieldValue (""ITM_NUMBER"") == itemnum)) 
             {
             if ((iCondComp.GetFieldValue (""COND_TYPE"") == ""PN00""))
                 			 {	var netPrice = 0;
                 				var netValue = 0;
                 				if (itemUOM == (iCondComp.GetFieldValue (""COND_UNIT"")))
                					{
                					if (fixPrice != ""X"")
            						{ 
                					oSimItemComp.CopyFieldValue  (""Unit Price"",   ""COND_VALUE"");
                 				 	oSimItemComp.CopyFieldValue  (""Adjusted List Price"",   ""COND_VALUE"");
									oSimItemComp.CopyFieldValue  (""Net Price"",   ""COND_VALUE""); // nbc 7.8.2 SAP 4x Net Price
									oSimItemComp.CopyFieldValue     (""NRC CxTotal"", ""CONDVALUE"");
									}
									else
									{
									var sNetPrice = iCondComp.GetFieldValue (""COND_VALUE"");
									var netPrice = sNetPrice /10;
									var netVal = netPrice * qtyReq;
									oSimItemComp.SetFieldValue    (""Net Price"",      	netPrice);
									oSimItemComp.SetFieldValue     (""NRC CxTotal"", netVal);
									}
                 					}
                 			  	else
              						{netValue = (iCondComp.GetFieldValue (""CONDVALUE""));
                 					 	if (netValue != 0)
                 			 		 		{netPrice = (netValue / qtyReq); 
                 			 		 		if (fixPrice != ""X"")
            								{ 
                 			 	 	 		 oSimItemComp.SetFieldValue  (""Unit Price"",   netPrice);
               	 			 	 			 oSimItemComp.SetFieldValue  (""Adjusted List Price"",   netPrice);
										     oSimItemComp.SetFieldValue  (""Net Price"",   netPrice); //nbc 7.8.2 SAP 4x Net Price
										     oSimItemComp.CopyFieldValue     (""NRC CxTotal"", ""CONDVALUE"");
										     }
										     else
										     {
										     var sNetPrice = iCondComp.GetFieldValue (""COND_VALUE"");
											 var netPrice = sNetPrice /10;
											 var netVal = netPrice * qtyReq;
											 oSimItemComp.SetFieldValue    (""Net Price"",      	netPrice);
											 oSimItemComp.SetFieldValue     (""NRC CxTotal"", netVal);
										     }
               	 			 	 			}
               	 			 	 	}
               	 			 	condFlag = true;
               	 	     	}          	 		
               	   			if ((iCondComp.GetFieldValue (""COND_TYPE"") == ""PR00"") && (condFlag == false))
	               				{	
                 					var netPrice= 0;
                 					var netValue = 0;
                 					if (itemUOM == (iCondComp.GetFieldValue (""COND_UNIT"")))
                 			    		{
                 			    		if (fixPrice != ""X"")
            							{ 
                 			    		oSimItemComp.CopyFieldValue  (""Unit Price"",   ""COND_VALUE"");
                 				 		oSimItemComp.CopyFieldValue  (""Adjusted List Price"",   ""COND_VALUE"");
										oSimItemComp.CopyFieldValue  (""Net Price"",   ""COND_VALUE""); //nbc 7.8.2 SAP 4x Net Price										
										oSimItemComp.CopyFieldValue     (""NRC CxTotal"", ""CONDVALUE"");
										}
										else
										{
										var sNetPrice = iCondComp.GetFieldValue (""COND_VALUE"");
										var netPrice = sNetPrice /10;
										var netVal = netPrice * qtyReq;
										oSimItemComp.SetFieldValue    (""Net Price"",      	netPrice);
										oSimItemComp.SetFieldValue     (""NRC CxTotal"", netVal);
										}
                 						}
                 					else
                 						{ netValue = (iCondComp.GetFieldValue (""CONDVALUE""));
                 			 	  		if (netValue != 0)
                 			 		 		{netPrice = (netValue / qtyReq); 
                 			 		 		if (fixPrice != ""X"")
            								{ 
                 			 		  		oSimItemComp.SetFieldValue  (""Unit Price"",  netPrice);
               	 			 	      		oSimItemComp.SetFieldValue  (""Adjusted List Price"",  netPrice); 
											oSimItemComp.SetFieldValue  (""Net Price"",  netPrice); //nbc 7.8.2 SAP 4x Net Price
											oSimItemComp.CopyFieldValue     (""NRC CxTotal"", ""CONDVALUE"");
											}
											else
											{
											var sNetPrice = iCondComp.GetFieldValue (""COND_VALUE"");
											var netPrice = sNetPrice /10;
											var netVal = netPrice * qtyReq;
											oSimItemComp.SetFieldValue    (""Net Price"",      	netPrice);
											oSimItemComp.SetFieldValue     (""NRC CxTotal"", netVal);
											}
               	 			 	      		}
               	 			 	 		}
               	 		 		}
               	 		
               	 	if ((iCondComp.GetFieldValue (""COND_TYPE"") == ""KF00""))
                 		{
                 		if (fixPrice != ""X"")
            			{
                 		 oSimItemComp.CopyFieldValue  (""Freight Amount"",   ""CONDVALUE"");
                 		 }
                 		 else
                 		 {
                 		 oSimItemComp.SetFieldValue  (""Freight Amount"",   ""0"");
                 		 }
               	 		}
               	 			
               	 	if ((iCondComp.GetFieldValue (""COND_TYPE"") == ""UTXJ""))
                 		{
                 		 oSimItemComp.CopyFieldValue  (""Tax Amount"",   ""CONDVALUE"");
               	 		}
           } //if
           } //while
                        
            //* Read ""ORDER_SCHEDULE_EX"" component
            iSchedItemComp = iSimExportComp.GetIntComp   (""ORDER_SCHEDULE_EX"");
            oSchedItemComp = oSimItemComp.CreateIntComp (""Order Entry - Line Item Actions"", false);
			var firstScheduleLine = 1;
            while (iSchedItemComp.NextRecord ())
             {
               var itemnum2  = iSchedItemComp.GetFieldValue (""ITM_NUMBER"");
               var schednum = iSchedItemComp.GetFieldValue (""SCHED_LINE"");
               var schedQty = iSchedItemComp.GetFieldValue (""REQ_QTY"");
               var intId;
               if (itemnum2 == itemnum)
               {
           
                oSchedItemComp.NewRecord ();
                oSchedItemComp.SetCopySource  (iSchedItemComp);
                intId = inputId + ""-"" + itemnum2 + ""-"" + schednum;
                //oSchedItemComp.CopyFieldValue (""Quantity"",                   ""REQ_QTY"");
                oSchedItemComp.SetFieldValue (""Quantity"",                   schedQty);
                oSchedItemComp.SetFieldValue (""Line Item Action Number"",     intId);
                oSchedItemComp.CopyFieldValue (""Actual Start Date"",           ""GI_DATE"");
                oSchedItemComp.CopyFieldValue (""Confirmed Qty"",               ""CONFIR_QTY"");
                var reqDate = iSchedItemComp.GetFieldValue ( ""REQ_DATE"");
                oSchedItemComp.SetFieldValue (""Planned Start Date"" ,          reqDate);
                // Checking for First Schedule Line, as it contains actual Req Delivery Date and setting it for Item Req Delv Date
                if ( firstScheduleLine == 1 )
                	{
                		oSimItemComp.SetFieldValue    (""Due Date"",      reqDate );
                	}
                firstScheduleLine++;
                
                var shipValue = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_PART_MOVEMENT_TYPE"", ""Schedule"");
                   oSchedItemComp.SetFieldValue  (""Line Item Action Type"",   shipValue);
                }
             }
			} //endif (parItemnum == ""000000"" || parItemnum == """")
         }
      }
   }
}
function SimulateSAP47Order_SiebelToBAPI (inputMsg, outputMsg)
{  // referenced by workflow Order - Simulate SAP 47 Order
   /* Uses same map as CreateFromData() */
   Simulate77SAP47Order_SiebelToBAPI (inputMsg, outputMsg, 
                                        ""SAP 47 Order"", 
                                        ""SAP 47 Order - Simulate SAP Order (BAPI Input)"");
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", d.getMonth()+1, d.getDate(), d.getFullYear(), d.getHours(), d.getMinutes(), d.getSeconds()); 
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 6 $
//      $Date: 01/15/01 10:29a $
//    $Author: S.Garg $ of last update
//
// CREATOR:    P. Lim
//
// DESCRIPTION
//    Javascript maps from Siebel Order & Quote to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
/* This function shared by ""Simulate Order"" and ""Create Order"" */"
function ConvertMonth(cardExpMonth)
{
	var nMonth; 
	if ( cardExpMonth == ""January"" )
		{
			nMonth = ""01"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""February"" )
		{
			nMonth = ""02"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""March"" )
		{
			nMonth = ""03"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""April"" )
		{
			nMonth = ""04"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""May"" )
		{
			nMonth = ""05"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""June"" )
		{
			nMonth = ""06"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""July"" )
		{
			nMonth = ""07"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""August"" )
		{
			nMonth = ""08"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""September"" )
		{
			nMonth = ""09"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""October"" )
		{
			nMonth = ""10"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""November"" )
		{
			nMonth = ""11"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""December"" )
		{
			nMonth = ""12"";
			return nMonth ;
		}
	else
		{
			nMonth = ""01"";
			return nMonth ;
		}
}
function CreateOrder ()
{
	var OrgBusObject = TheApplication().GetBusObject(""Order Entry"");
	var SABusComp = OrgBusObject.GetBusComp(""Order Entry - Orders"");
	var orderType= TheApplication().InvokeMethod (""LookupValue"", 	""FS_ORDER_TYPE"", ""Sales Order"");
    var orderCode= TheApplication().InvokeMethod (""LookupValue"", 	""FS_ORDER_TYPE_CODE"", ""Sales"");
	
	SABusComp.NewRecord(0);
	SABusComp.SetFieldValue			(""Active"",				""Y"");
    SABusComp.SetFieldValue 		(""Order Type"",   		orderType);	
	SABusComp.SetFieldValue 		(""Order Type Code"",   	orderCode);	
	// SABusComp.SetFieldValue			(""Price List Id"",		priceList);
	SABusComp.WriteRecord();
	return SABusComp.GetFieldValue	(""Id"");
	
}
function CreateSAP4xOrder_BAPIToSiebel (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   BAPI Export (SAP 4x Order - Create SAP Order (BAPI Output))
    *     Export Parameters (output)
    *
    * Output Object's Integration Components:
    *   Order Object (SAP 4x Order)
    *     Order (oOrder)
    *     
    */

   /*
    * Set up EAI Lookup objects
    */
   var currencyLM = new CSSEAIValueMap (""SAP Currency Code"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iOrderObj;   	// BAPI Order instance
   var iExportComp; 	// BAPI Export Parameters
   var iItemComp;	   	// BAPI Line Items
   var iIItemComp;	   	// BAPI Inpout Line Items ( ""ORDER_ITEMS_IN"") To fetch Pricing Master Info
   var iSchedItemComp; 	// BAPI Schedule Line Items

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;      // Siebel Order instance
   var oOrderComp;     // Order
   var oRFCOrderComp;  // Create Output for RFC_* Table
   var oItemComp;      // Order Line Item
   var oRFCItemComp;   // Output Line Item for RFC_* Table to store pricing info
   var oSchedItemComp  // Schedule Line Item

   /*
    * Find and create top-level integration object
    */
   iOrderObj = inputMsg.GetIntObj(""SAP 4x Order - Create SAP Order (BAPI Output)"");
   oOrderObj = outputMsg.CreateIntObj (""SAP 4x Order(Sync)"");

   /*
    * Read int object instances from EAI message
    */
   while (iOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object
       */
      oOrderObj.NewInstance ();

      /*
       * Create ""Order"" component in output message
       */
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order Entry - Orders"");
      oOrderComp.NewRecord();
      // Set ""Id"" so Siebel Adapter can synchronize
      oOrderComp.SetFieldValue (""Id"", inputId);

      /*
       * Read ""Export Parameters"" component
       */
      iExportComp = iOrderObj.GetPrimaryIntComp (""Export Parameters"");
      if (iExportComp.NextRecord ())
      {
      
         /*
          * Update ""Order"" component
          */
         oOrderComp.SetCopySource  (iExportComp);
         
         
		 
		 oOrderComp.SetFieldValue 		(""As Of Date"", 		Timestamp());

         oOrderComp.CopyFieldValue 		(""Integration Id"",  ""SALESDOCUMENT"");
         
         var sapDelBlock 	= iExportComp.GetFieldValue	( ""SHIP_TO_PARTY-DLV_BLOCK"" );
		 var delBlock 		= TheApplication().InvokeMethod	(""LookupValue"", ""SAP_SO_HEADER_DELIV_BLOCK"", sapDelBlock);
         var sapBillBlock	= iExportComp.GetFieldValue	( ""BILLING_PARTY-BILL_BLOCK"" );
		 var billBlock 		= TheApplication().InvokeMethod	(""LookupValue"", ""SAP_SO_HEADER_BILL_BLOCK"", sapBillBlock);
         oOrderComp.SetFieldValue 		(""Billing Block"",     		billBlock);
		 oOrderComp.SetFieldValue 		(""Delivery Block"",    		delBlock);
         oOrderComp.CopyFieldValue		(""Back Office Error Text"",  ""RETURN-MESSAGE"");
         var submitFailure = iExportComp.GetFieldValue ( ""RETURN-MESSAGE"");
         if ( submitFailure == null || submitFailure == """")
         	{
         		oOrderComp.SetFieldValue 		(""EAI Sync Date"", 	Timestamp());
         		var submitStatus  = TheApplication().InvokeMethod	(""LookupValue"", ""EAI_ORDER_SYNC_STATUS"", ""Created in Back Office"");
         		oOrderComp.SetFieldValue(""Back Office Process Status"",    		submitStatus);
         	}
         else
         	{
         		var submitStatus  = TheApplication().InvokeMethod	(""LookupValue"", ""EAI_ORDER_SYNC_STATUS"", ""Error on Creating"");
         		oOrderComp.SetFieldValue(""Back Office Process Status"",    		submitStatus);
         	}
         
         	
         var salesdoc =  iExportComp.GetFieldValue (""SALESDOCUMENT"");
		 var currencyCode = currencyLM.Translate (iExportComp.GetFieldValue (""SOLD_TO_PARTY-CURRENCY""));
		 if (currencyCode != null && currencyCode != """")
          {
            // oOrderComp.SetFieldValue  (""Currency Code"", currencyCode);
            // SGARG 08/29/2001 : Removed as Sold to Party Currency code can be different from Document Currency Code which is not part of output of this BAPI but is of Get Status BAPI
            // So Siebel Order Currency will be updated in GetStatus Map only
          }
		 // Return Number can be different depending on the customization and other factors
         if ( (iExportComp.GetFieldValue (""RETURN-ID"") == ""V1"") && ((iExportComp.GetFieldValue (""RETURN-NUMBER"") == ""154"") || (iExportComp.GetFieldValue (""RETURN-NUMBER"") == ""38"") ) )
         
            {
              oOrderComp.SetFieldValue (""Credit Status"",             ""N"");
            }
         else
            {
              oOrderComp.SetFieldValue (""Credit Status"",             ""Y"");
            }

		 oRFCOrderComp = oOrderComp.CreateIntComp (""Order Entry - Get SAP Order Status Header"");
      	 oRFCOrderComp.NewRecord();
      	 oRFCOrderComp.SetFieldValue (""Input Id"", inputId);
         oRFCOrderComp.SetFieldValue (""Order Number"", inputId);

         /*
          * Read ""ORDERS_ITEMS_OUT"" component
          */

         iItemComp = iExportComp.GetIntComp   (""ORDER_ITEMS_OUT"");
         iIItemComp = iExportComp.GetIntComp   (""ORDER_ITEMS_IN"");
         oItemComp = oOrderComp.CreateIntComp (""Order Entry - Line Items"", false);
         oRFCItemComp   =  oRFCOrderComp.CreateIntComp ( ""Order Entry - Get SAP Order Status Item"", false);

         while (iItemComp.NextRecord ())
         {
            oItemComp.NewRecord ();
            oItemComp.SetCopySource     (iItemComp);
            iIItemComp.NextRecord ();
            
            var fixPrice = iIItemComp.GetFieldValue ( ""PURCH_NO_C"" );
            var currencyCodeitem = currencyLM.Translate (iItemComp.GetFieldValue (""CURRENCY""));
            var intIdItem;
            
            var itemnum  = iItemComp.GetFieldValue (""ITM_NUMBER"");
            
            var intIdItem = salesdoc + ""-"" + itemnum;
            
            if (currencyCodeitem != null && currencyCodeitem != """")
            {
              // oItemComp.SetFieldValue  (""Currency Code"", currencyCodeitem);
              // can't set at item level at Currency at Item level is Calculated field
            }
            
            var totPrice       = iItemComp.GetFieldValue (""NET_VALUE"");
            var qtyReq			= iItemComp.GetFieldValue(""REQ_QTY"");
            
            if ( qtyReq != 0)
            {
            	var netPrice 		= totPrice / qtyReq;
            }
            
            if (fixPrice != ""X"")
            {
            	oItemComp.SetFieldValue    (""Adjusted List Price"",         netPrice);
            	oItemComp.CopyFieldValue    (""Freight Amount"",             	""SUBTOTAL_4"");
            }
            else
            {
            	// we don't want to update Freight if Siebel is Pricing Master.
            	oItemComp.SetFieldValue    (""Freight Amount"",             	""0"" );
            }
            	
            var itemReqDate = iItemComp.GetFieldValue (""DLV_DATE"");
            var itemCurrency = currencyLM.Translate (iItemComp.GetFieldValue (""CURRENCY""));
            
            oItemComp.SetFieldValue     (""Currency Code"",             	itemCurrency );                            
            oItemComp.CopyFieldValue    (""Tax Amount"",                 	""SUBTOTAL_5"");
            oItemComp.SetFieldValue     (""SAP 4x Net Price"",       		totPrice);
            oItemComp.SetFieldValue     (""Integration Id"",            	intIdItem);
            oItemComp.SetFieldValue     (""Order Header Id"",             inputId);
            // oItemComp.CopyFieldValue    (""Due Date"",      				""DLV_DATE"");
            oItemComp.CopyFieldValue    (""Line Number"",                ""ITM_NUMBER"");
            oItemComp.SetFieldValue     (""Quantity Requested"",        	qtyReq);
            oItemComp.CopyFieldValue    (""Product Integration Id"",      ""MATERIAL"");
            oItemComp.CopyFieldValue    (""Source Inventory Location"",   ""PLANT"");
           /*
           	* This section was added to dump Pricing Values in RFC_* table for comparison purpose in 
           	* Bus Comp Freight & Tax Calculated fields ( Pls see ""SAP 4x Freight"" & ""SAP 4x Tax"" Fields in ""Order Entry - Line Items"" Bus Comp)
           	*/
            oRFCItemComp.NewRecord ();
            oRFCItemComp.SetCopySource  (iItemComp);
            oRFCItemComp.SetFieldValue (""Input Id"" , 		inputId );
            oRFCItemComp.SetFieldValue (""Requested Quantity"" , qtyReq );
            
            oRFCItemComp.CopyFieldValue (""Item Number"", 	""ITM_NUMBER"");
            oRFCItemComp.SetFieldValue (""Net Value"", 		totPrice );
			oRFCItemComp.SetFieldValue (""Net Price"", 		netPrice );            

            
            
   
           /*
            * Read ""ORDER_SCHEDULE_EX"" component
            */
            iSchedItemComp = iExportComp.GetIntComp   (""ORDER_SCHEDULE_EX"");
            oSchedItemComp = oItemComp.CreateIntComp (""Order Entry - Line Item Actions"", false);
			var firstScheduleLine = 1;
         
            while (iSchedItemComp.NextRecord ())
             {
               var itemnum2  = iSchedItemComp.GetFieldValue (""ITM_NUMBER"");
               var schednum  = iSchedItemComp.GetFieldValue (""SCHED_LINE"");
               var intId;
               var shipValue = TheApplication().InvokeMethod (""LookupValue"",   ""SAP_SO_PART_MOVEMENT_TYPE"", ""Schedule"");
               if (itemnum2 == itemnum)
               {
                oSchedItemComp.NewRecord ();
                oSchedItemComp.SetCopySource  (iSchedItemComp);
                intId = salesdoc + ""-"" + itemnum2 + ""-"" + schednum;
                oSchedItemComp.SetFieldValue  (""Line Item Action Number"",		intId);
                oSchedItemComp.SetFieldValue  (""Line Number"",					itemnum2);
                oSchedItemComp.SetFieldValue  (""Order Header Id"",     			inputId);
                oSchedItemComp.SetFieldValue  (""Integration Id"",     			intId);
                oSchedItemComp.SetFieldValue  (""Quantity"",     					qtyReq);                
                oSchedItemComp.CopyFieldValue (""Confirmed Qty"",                 ""CONFIR_QTY"");
                oSchedItemComp.CopyFieldValue (""Actual Start Date"",             ""REQ_DATE"");
                var reqDate = iSchedItemComp.GetFieldValue ( ""REQ_DATE"");
                oSchedItemComp.SetFieldValue (""Planned Start Date"" ,          reqDate);
                // Checking for First Schedule Line, as it contains actual Req Delivery Date and setting it for Item Req Delv Date
                if ( firstScheduleLine == 1 )
                	{
                		oItemComp.SetFieldValue    (""Due Date"",      reqDate );
                	}
                firstScheduleLine++;
                
                // oSchedItemComp.SetFieldValue  (""Planned Start Date"",      		itemReqDate );
                oSchedItemComp.SetFieldValue  (""Line Item Action Type"",   		shipValue);
                }
             }

         }
      }
   }
}
function CreateSAP4xOrder_SiebelToBAPI (inputMsg, outputMsg)
{
   /* Uses same map as CreateFromData() */
   CreateSimulateSAP4xOrder_SiebelToBAPI (inputMsg, outputMsg,
                                        ""SAP 4x Order"",
                                        ""SAP 4x Order - Create SAP Order (BAPI Input)"");
}
"/*
function CreateSimulateSAP4xOrder_SiebelToBAPI (inputMsg, outputMsg, InputIntObjName, OutputIntObjName)
{
   **
    * Input Objects' Integration Components
    *   Order Object (SAP 4x Order)
    *     Order (order)
    *       Order Line Item (item)
    *
    * Output Object's Integration Components:
    *   BAPI Import Object (SAP 4x Order - Create SAP Order (BAPI Import))
    *     Import Parameters
    *       ORDER_PARTNERS
    *       ORDER_ITEMS_IN
    *       ORDER_PARTNERS
    **

   **
    * Set up EAI Lookup maps
    **
   var orderTypeLM = EAIGetValueMap (""SAP Order Types"",     	""Siebel Outbound"");
   var incotermsLM = EAIGetValueMap (""SAP Incoterms"",      		""Siebel Outbound"");
   var payTermsLM  = EAIGetValueMap (""SAP Payment Terms"",   	""Siebel Outbound"");
   var currencyLM  = EAIGetValueMap (""SAP Currency Code"",		""Siebel Outbound"");
   var cCardLM	   = EAIGetValueMap (""SAP Credit Card Type"",	""Siebel Outbound"");
   var uomLM       = EAIGetValueMap (""SAP Unit of Measure"", 	""Siebel Outbound"");

   **
    * Set up EAI Input Message objects
    **
   var iOrderObj;  // Order object instance
   var iOrderComp; // Order
   var iItemComp;  // Order Line Item

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   **
    * Set up EAI Output Message objects
    **
    
   var oCFDOrderObj;        // BAPI Order instance
   var oCFDImportComp;      // BAPI Import parameters
   var oCFDItemComp;        // BAPI Order Item
   var oCFDPartnerComp;     // BAPI Order Partners
   var oCFDCardComp;     	// BAPI Card Component


   **
    * Find and create top-level integration object
    **
    
   iOrderObj    = inputMsg.GetIntObj (InputIntObjName);
   oCFDOrderObj = outputMsg.CreateIntObj (OutputIntObjName);
   
   **
    * Read int object instances from EAI message
    **
    
   while (iOrderObj.NextInstance ())
   {
      **
       * Create ""Order"" object in output message
       **
       
      oCFDOrderObj.NewInstance ();

      **
       * Read ""Order"" component
       **
       
      iOrderComp     = iOrderObj.GetPrimaryIntComp (""Order Entry - Orders"");
      oCFDImportComp = oCFDOrderObj.CreatePrimaryIntComp (""Import Parameters"");
     
      if (iOrderComp.NextRecord ())
      {
         **
          * Return an error if Integration Id is not null
          **
          
         if (iOrderComp.GetFieldValue (""Integration Id"") != """")
         {
              var IntId = iOrderComp.GetFieldValue (""Integration Id"");
              EAIRaiseError(LocalizeMessage(""ERR_MSG_ORDER_ALREADY_SUBMITTED,""+IntId+""""));

         }
        
         **
          * Write ""Import Parameters"" component
          **
          
         oCFDImportComp.NewRecord ();
         oCFDImportComp.SetCopySource  (iOrderComp);
         
         var priceList =  null;
         priceList = iOrderComp.GetFieldValue (""Price List Id"");
         var currencyCode = currencyLM.Translate (iOrderComp.GetFieldValue (""Currency Code""));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DOC_NUMBER"", null);
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DOC_TYPE"",   orderTypeLM.Translate (iOrderComp.GetFieldValue (""Order Type"")));
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-CURRENCY"",  currencyCode );
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-COLLECT_NO"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_ORG"",  ""SAP Sales Organization (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DISTR_CHAN"", ""SAP Distribution Channel (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DIVISION"",   ""SAP Division (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_GRP"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_OFF"",  null);
         if (iOrderComp.GetFieldValue (""Requested Ship Date"") != """")
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",   ""Requested Ship Date"");
               
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",       ""Order Date"");
            }
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DATE_TYPE"",  ""1"");
         if (iOrderComp.GetFieldValue (""Account Order Number"") != """")
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_NO"",   ""Account Order Number"");
               
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_NO"",       ""Order Number"");
            }
         
         
         
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_DATE"", ""Order Date"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PO_METHOD"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PO_SUPPLEM"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REF_1"",      ""Order Number"");
         
         // Set NAME only if ""Contact Id"" is not null.
         if (iOrderComp.GetFieldValue (""Contact Id"") != null)
         {
            oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-NAME"", EAIFormatPersonName (iOrderComp.GetFieldValue (""Contact First Name""),
                                                                                       iOrderComp.GetFieldValue (""Contact Last Name"")));
         }         
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-TELEPHONE"",  ""Contact Work Phone #"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PRICE_GRP"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GROUP"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_DIST"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PRICE_LIST"", null);
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-INCOTERMS1"", incotermsLM.Translate (iOrderComp.GetFieldValue(""Freight Terms"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-INCOTERMS2"", ""Freight Terms Info"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-PMNTTRMS"",   payTermsLM.Translate (iOrderComp.GetFieldValue (""Payment Term"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DLV_BLOCK"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-BILL_BLOCK"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-ORD_REASON"", null);
         
         if (iOrderComp.GetFieldValue (""Partial Ship"") != ""Y"")
            {
               oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       ""X"");
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       null);
            }
            
         
         var date = iOrderComp.GetFieldValue ( ""Pricing Date"");
         oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-PRICE_DATE"", date );
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-QT_VALID_F"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-QT_VALID_T"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CT_VALID_F"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CT_VALID_T"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP1"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP2"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP3"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP4"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP5"",  null);
         

         **
          * Write ""ORDER_PARTNERS"" component  
          **
          
                  
         oCFDPartnerComp = oCFDImportComp.CreateIntComp (""ORDER_PARTNERS"", oCFDImportComp);

         // Sold to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""AG"");

         var soldtoparty =  iOrderComp.GetFieldValue (""Account Integration Id"");
         var array = soldtoparty.split("":"");
         var AccountIntId = array[0];
         
         
         oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId);

         // Ship To partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""WE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Ship To Account Integration Id"");

         // Payer partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RG"");
         var payerId = iOrderComp.GetFieldValue (""Payer Account Integration Id"");
         if (payerId == null || payerId == """")
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId );
         	}
         else
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", payerId );
         	}
         
         // Bill to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Bill To Account Integration Id"");

		**
		 * Read and update Credit Card Info
		 *
		 **
		 var ccType = cCardLM.Translate (iOrderComp.GetFieldValue (""Credit Card Name""));
		 var ccNum = iOrderComp.GetFieldValue ( ""Credit Card Number"");
		 if ( ccNum != null && ccNum != """" )
		 
		 	{
		 		oCFDCardComp = oCFDImportComp.CreateIntComp (""ORDER_CCARD"");
		 		oCFDCardComp.NewRecord();
		 		oCFDCardComp.SetCopySource (iOrderComp);
		 		var cardExpDate = iOrderComp.GetFieldValue ( ""Credit Card Expiration Date"");
		 		if ( cardExpDate == null || cardExpDate == """" )
		 			{
		 				var cardExpYear	= iOrderComp.GetFieldValue (""Credit Card Expiration Year"" );
		 				var cardExpMonth  = iOrderComp.GetFieldValue (""Credit Card Expiration Month"" );
		 				var cardExpDay;
		 				
		 				var nMonth = ConvertMonth (cardExpMonth);
		 				// EAIRaiseError(""ERR_MSG_ORDER_ALREADY_SUBMITTED"");
		 				cardExpDay = GetDaysInAMonth(nMonth, cardExpYear);
		 				var cardExpFullDate = nMonth + ""/"" + cardExpDay + ""/"" + cardExpYear + "" 00:00:00"";
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpFullDate );
		 				// oCFDCardComp.SetFieldValue (""CC_VALID_T"", ""05/31/2004 00:00:00"" );
		 			}
		 		else
		 			{
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpDate );
		 			}
		 		oCFDCardComp.SetFieldValue		(""CC_TYPE"", 		ccType);
		 		oCFDCardComp.SetFieldValue		(""CC_NUMBER"", 		ccNum );
		 		oCFDCardComp.CopyFieldValue		(""CC_NAME"", 		""Credit Card Holder"" );
				oCFDCardComp.CopyFieldValue		(""AUTHAMOUNT"", 		""Credit Card Transaction Amount"" );
		 		oCFDCardComp.SetFieldValue		(""CURRENCY"", 		currencyCode );
		 	}
         **
          * Read ""Order Line Item"" Integration Component
          **
          
         iItemComp    = iOrderComp.GetIntComp        (""Order Entry - Line Items"");
         oCFDItemComp = oCFDImportComp.CreateIntComp (""ORDER_ITEMS_IN"", oCFDImportComp);
         
         while (iItemComp.NextRecord ())
         {

            oCFDItemComp.NewRecord ();
            oCFDItemComp.SetCopySource  (iItemComp);
            oCFDItemComp.CopyFieldValue (""ITM_NUMBER"",     ""Line Number"");
            oCFDItemComp.CopyFieldValue (""HG_LV_ITEM"",     null);
            oCFDItemComp.CopyFieldValue (""PO_ITM_NO"",      ""null"");
            oCFDItemComp.CopyFieldValue (""MATERIAL"",       ""Product Integration Id"");
            oCFDItemComp.CopyFieldValue (""CUST_MAT"",       null);
            oCFDItemComp.CopyFieldValue (""BATCH"",          null);
            oCFDItemComp.CopyFieldValue (""DLV_GROUP"",      null);
            
            if (iItemComp.GetFieldValue (""Partial Ship"") != ""Y"")
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""C"");
                }
            else
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""D"");
                }
            
            oCFDItemComp.CopyFieldValue (""REASON_REJ"",     null);
            oCFDItemComp.CopyFieldValue (""BILL_BLOCK"",     null);
            oCFDItemComp.CopyFieldValue (""BILL_DATE"",      null);
            oCFDItemComp.CopyFieldValue (""PLANT"",          ""Source Inventory Location"");
            oCFDItemComp.CopyFieldValue (""STORE_LOC"",      null);
            oCFDItemComp.CopyFieldValue (""TARGET_QTY"",     null);
            oCFDItemComp.CopyFieldValue (""TARGET_QU"",      null);
            oCFDItemComp.CopyFieldValue (""REQ_QTY"",        ""Quantity Requested"");
            // var baseUOM = iItemComp.GetFieldValue (""Unit of Measure"");
            // var baseUOMLI = TheApplication().InvokeMethod (""LookupValue"", ""UNIT_OF_MEASURE "", baseUOM);
            oCFDItemComp.SetFieldValue  (""SALES_UNIT"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
            oCFDItemComp.CopyFieldValue (""ITEM_CATEG"",     null);
            oCFDItemComp.CopyFieldValue (""SHORT_TEXT"",     ""Description"");
            oCFDItemComp.CopyFieldValue (""REQ_DATE"",       ""Due Date"");
            oCFDItemComp.SetFieldValue  (""DATE_TYPE"",      ""1"");
            oCFDItemComp.CopyFieldValue (""REQ_TIME"",       null);
           
           
            var siebelPrice = iItemComp.GetFieldValue ( ""Unit Price"" );
            if ((  siebelPrice != 0) || (  priceList != """" ))
            
            {
             	oCFDItemComp.SetFieldValue  (""CD_TYPE2"",      ""PN00"");
            	oCFDItemComp.SetFieldValue  (""PURCH_NO_C"",     ""X"");
                oCFDItemComp.CopyFieldValue (""CD_VALUE2"",     ""Item Price"");
            	oCFDItemComp.SetFieldValue  (""CD_P_UNT2"",     ""1"");
            	oCFDItemComp.SetFieldValue  (""CD_D_UNT2"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
            // Transfer Siebel Header freight only in case of Siebel is Pricing Master
            oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-CD_TYPE1"",   ""HB00"");
         	oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CD_VALUE1"",  ""Freight"");
         	oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CD_P_UNT1"",   ""1"");
         	oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-CD_D_UNT1"",  uomLM.Translate(iOrderComp.GetFieldValue(""Unit of Measure"")));
           	}
           else
           {
           		oCFDItemComp.SetFieldValue  (""CD_TYPE2"",      ""PB00"");	
           		// oCFDItemComp.CopyFieldValue (""CD_VALUE2"",     null);
            	oCFDItemComp.SetFieldValue  (""CD_P_UNT2"",     ""1"");
            	oCFDItemComp.SetFieldValue  (""CD_D_UNT2"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
            }
            
                           
           
           
           
            oCFDItemComp.CopyFieldValue (""PRC_GROUP1"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP2"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP3"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP4"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP5"",     null);
            oCFDItemComp.CopyFieldValue (""PROD_HIERA"",     null);
            oCFDItemComp.CopyFieldValue (""MATL_GROUP"",     null);
                 
         } //order items read
      }
      
   }
}
*/"
function GetDaysInAMonth(nMonth, nYear)
{

	// Jan, Mar, May, Jul, Aug, Oct, Dec have 31 days each
	// Apr, Jun, Sept, Nov have 30 days each
	// Feb, for now, has 28 days.
	var daysInMonth = new Array(31,28,31,30,31,30,31,31,30,31,30,31);
	var nCurrentDays;


	// Only February can be either 28 or 29, depending on whether the year is a leap year
	if (nMonth == 2)
	{
		// If the year is divisible by 4, it is a leap year
		if (nYear%4 == 0)
		{
			// If the year is a century, then it should be divisible by 400 to be a leap year.
			if (nYear%100 == 0)
			{
				// If it is a century and divisible by 400, it is a leap year.
				if (nYear%400 == 0) { nCurrentDays = 29;}

				// If it is a century and NOT divisible by 400 (e.g. 1900), it is NOT a leap year.
				else	{ nCurrentDays = 28;}
			}
		
			// If it is not a century and divisible by 4, it is a leap year.
			else { nCurrentDays = 29;}
		}

		// If a year is NOT divisible by 4, it is not a leap year
		else { nCurrentDays = 28; }
	}


	// If the month is NOT Feb, calculating days in a month is straight-forward.
	// eScript array index starts with 0, not 1.
	else
	{ nCurrentDays = daysInMonth[nMonth - 1]; }

	return nCurrentDays;

}
function GetOrderId (orderId)
{
	var OrdBusObject = TheApplication().GetBusObject(""Order Entry"");
	var OrdBusComp = OrdBusObject.GetBusComp(""Order Entry - Orders"");
	
	OrdBusComp.ClearToQuery();
	OrdBusComp.SetViewMode (AllView);
	OrdBusComp.SetSearchSpec(""Integration Id"", orderId);
	OrdBusComp.ActivateField(""Id"");
	OrdBusComp.ExecuteQuery();
	
	if(OrdBusComp.FirstRecord())
	{
	   return OrdBusComp.GetFieldValue(""Id"");
	}
      	else
           return null;
	
}
function GetSAP4xOrderStatus_BAPIToSiebel (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   BAPI Export (SAP 4x Order - Get SAP Order Status (BAPI Output))
    *     Export Parameters (output)
    *       Order Header (header)
    *         Order Item (item)
    *           Order Item Delivery Item (deliv)
    *
    * Output Object's Integration Components:
    *   Order Object (SAP 4x Order(Get Status))
    *     Order (oOrder)
    *       Get Status Output
    *       Get Status Header
    *         Get Status Item
    *           Get Status Item Delivery Item
    *       Order Line Item
    *         Order Line Item Action
    */

   /*
    * Set up EAI Lookup objects
    */
   var currencyLM = new CSSEAIValueMap (""SAP Currency Code"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iGSOrderObj;   // BAPI Order instance
   var iGSExportComp; // BAPI Export Parameters
   var iGSHeaderComp; // BAPI Order Header
   var iGSItemComp;   // BAPI Order Item
   var iGSDelivComp;  // BAPI Order Item Delivery Item

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;     // Siebel Orderinstance
   var oOrderComp;    // Order
   var oItemComp;     // Order Line Item
   var oDelivComp;    // Order Line Item Action
   //var oGSOutputComp; // Create Output
   //var oGSHeaderComp; // Create Header
   //var oGSItemComp;   // Create Item
   //var oGSDelivComp;  // Create Item Delivery Item


   /*
    * Find and create top-level integration object
    */
   iGSOrderObj = inputMsg.GetIntObj(""SAP 4x Order - Get Status SAP Order (BAPI Output)"");
   oOrderObj = outputMsg.CreateIntObj (""SAP 4x Order(Get Status)"");

   /*
    * Read int object instances from EAI message
    */

   while (iGSOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object in output message
       */
      oOrderObj.NewInstance ();
      
      /*
       * Create ""Order"" component
       */
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order Entry - Orders"");
      oOrderComp.NewRecord ();
      // Set ""Id"" so Siebel Adapter can synchronize
      oOrderComp.SetFieldValue (""Id"", inputId);
      
      /*
       * Read ""Export Parameters"" component
       */
      iGSExportComp = iGSOrderObj.GetPrimaryIntComp (""Export Parameters"");
      
      /*
       * Create the output component. Defer creation if the ""Export Parameters"" component
       * does not exist.
       *
       */
      //oGSOutputComp = oOrderComp.CreateIntComp (""Get Status Output"", iGSExportComp.Exists());
      if (iGSExportComp.NextRecord())
      {
         var errorMessage = iGSExportComp.GetFieldValue ( ""RETURN-MESSAGE"");
         /*
          * Read ""Order Header"" component
          */
         iGSHeaderComp = iGSExportComp.GetIntComp (""Order Header"");
         //oGSHeaderComp = oOrderComp.CreateIntComp (""Get Status Header"", iGSHeaderComp.Exists());

         // Singleton entry in input - 'if' is symbolic of not looping
         if (iGSHeaderComp.NextRecord ())
         {
           
            /*
             * Update ""Order"" component
             */
            oOrderComp.SetCopySource  (iGSHeaderComp);
            
            // EAI Lookup code ""SAP Currency""
            var currencyCode = currencyLM.Translate (iGSHeaderComp.GetFieldValue (""CURRENCY""));
   
            if (currencyCode != null && currencyCode != """")
              {     
                 oOrderComp.SetFieldValue  (""Currency Code"", currencyCode);
              }     
                 
                 // We are checking the status the order;
				 // hence, set only the As Of Date/Status Date to now.
				 oOrderComp.SetFieldValue(""As Of Date"", Timestamp());
				 oOrderComp.SetFieldValue(""Back Office Error Text"", errorMessage);
                 
                 oOrderComp.CopyFieldValue (""Requested Ship Date"",     ""REQ_DATE_H"");
                 var sapBlock = iGSHeaderComp.GetFieldValue ( ""DLV_BLOCK"" );
			     var delBlock = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_HEADER_DELIV_BLOCK"", sapBlock);
                 oOrderComp.SetFieldValue (""Delivery Block"",          delBlock);
                 //oOrderComp.CopyFieldValue (""Delivery Status"",         ""DLV_STAT_H"");
                 // oOrderComp.CopyFieldValue (""Order Date"",              ""DOC_DATE"");
                 var sapStatus = iGSHeaderComp.GetFieldValue ( ""PRC_STAT_H"" );
                 if ( sapStatus == ""C"" )
                 	{
                 		oOrderComp.SetFieldValue ( ""Status"" , 	TheApplication().InvokeMethod (""LookupValue"", ""FS_ORDER_STATUS"", ""Closed""));
                 	}
                 else if ( sapStatus == ""B"" )
                 	{
                 		oOrderComp.SetFieldValue ( ""Status"" , 	TheApplication().InvokeMethod (""LookupValue"", ""FS_ORDER_STATUS"", ""Partially Shipped""));	
                 	}
                 else 
                 	{
                 		oOrderComp.SetFieldValue ( ""Status"" , 	TheApplication().InvokeMethod (""LookupValue"", ""FS_ORDER_STATUS"", ""Open""));	
                 	}	
                 oOrderComp.CopyFieldValue (""Integration Id"",           ""DOC_NUMBER"");
               	 oOrderComp.CopyFieldValue (""Account Order Number"",     ""PURCH_NO"");               	 
               	                	                 
                 
                 var salesdoc =  iGSHeaderComp.GetFieldValue (""DOC_NUMBER"");
            /*
             * Read ""Order Item"" component
             */
            iGSItemComp = iGSHeaderComp.GetIntComp (""Order Item"");
            
            //oGSItemComp = oGSHeaderComp.CreateIntComp (""Get Status Item"", iGSItemComp.Exists());
            oItemComp   = oOrderComp.CreateIntComp (""Order Entry - Line Items"", iGSItemComp.Exists());
            while (iGSItemComp.NextRecord ())
            {
               
               /*
                * Write ""Order Line Item"" component
                */
               /*
                 NOTES: 
                 1. REF_QTY stores QTY submitted to next document (in this case, the deliveries).
                 So, this is equivalent to sum(item.DLV_QTY)
                 2. P Lim 5/28/99. Force prices into SAP. Do not update S_ORDER_ITEM.UNI_PRI (discount price).
                 SAP Line Items view will show Siebel prices AND SAP prices on same list view.
                 item.NET_PRICE UNIT_PRI
                 3. SAP columns not mapped to S_ORDER_ITEM (and exposed in SAP Line Items applet):
                 CUM_CF_QTY    NUMBER(15)
                 COND_P_UNT    VARCHAR2(5)
                 COND_UNIT     VARCHAR2(3)
               */
               
               var itemMaterial = iGSItemComp.GetFieldValue (""MATERIAL"");
               
               oItemComp.NewRecord ();
               oItemComp.SetCopySource  (iGSItemComp);
               
               var intIdItem;
            
               var itemnum  = iGSItemComp.GetFieldValue (""ITM_NUMBER"");
            
               var intIdItem = salesdoc + ""-"" + itemnum;
               
                
                var netVal		       = iGSItemComp.GetFieldValue (""NET_VALUE"");
                var qtyReq 			   = iGSItemComp.GetFieldValue (""REQ_QTY"");
                var netPrice 	       = netVal / qtyReq;
                var itemReqDate 	   = iGSItemComp.GetFieldValue (""REQ_DATE"");
               
               oItemComp.SetFieldValue  (""Product Integration Id"", itemMaterial);
               oItemComp.SetFieldValue  (""Order Header Id"", inputId );
               oItemComp.CopyFieldValue (""Line Number"",            ""ITM_NUMBER"");
               oItemComp.SetFieldValue (""Quantity Requested"",       qtyReq);
               oItemComp.CopyFieldValue (""Quantity Shipped"",       ""REF_QTY"");
               oItemComp.CopyFieldValue (""Due Date"",               ""REQ_DATE"");
               oItemComp.CopyFieldValue (""Description"",            ""SHORT_TEXT"");
			   var sapStatus = iGSItemComp.GetFieldValue ( ""DLV_STAT_I"" );
			   var itemStatus= TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_ITEM_DELIV_STATUS"", sapStatus);
               oItemComp.SetFieldValue (""Delivery Status"",        itemStatus);
               oItemComp.SetFieldValue    (""Unit Price"",   netPrice);
               oItemComp.SetFieldValue    (""Adjusted List Price"",   netPrice);
               oItemComp.SetFieldValue    (""SAP 4x Net Price"",   	netVal);
               oItemComp.CopyFieldValue (""Product Unit of Measure"",""SALES_UNIT"");
               oItemComp.SetFieldValue  (""Integration Id"",         intIdItem);

               
               /*
                * Read ""Order Item Delivery Item"" component
                */
               var loop = 0;
               iGSDelivComp = iGSItemComp.GetIntComp (""Order Item Delivery Item"");
               oDelivComp   = oItemComp.CreateIntComp   (""Order Entry - Line Item Actions(Delivery Status)"", iGSDelivComp.Exists());
               
               while (iGSDelivComp.NextRecord ())
               {
               var delivNum = null;
               var delivItem = null;
               
               // loop++;
               delivNum  = iGSDelivComp.GetFieldValue (""DELIV_NUMB"");
               delivItem  = iGSDelivComp.GetFieldValue (""DELIV_ITEM"");
               // var delivLineNum = iGSDelivComp.GetFieldValue (""ITM_NUMBER"");
               if ( delivNum != null ) 
                  {
                //  oDelivComp   = oItemComp.CreateIntComp   (""Order Entry - Line Item Actions(Delivery Status)"", iGSDelivComp.Exists());
                
                                  
                  /*
                   * Write ""Item Delivery Item"" component
                   */
                  
                  oDelivComp.NewRecord ();
                  oDelivComp.SetCopySource  (iGSDelivComp);
                  
                  var itemActionNum = delivNum + ""-"" + delivItem;
                  // var itemActionNum1 = intIdItem + loop;
                  
                  oDelivComp.CopyFieldValue (""Confirmed Qty"",       ""DLV_QTY"");                  
                  oDelivComp.CopyFieldValue (""Planned Start Date"",       ""DELIV_DATE"");
                  oDelivComp.SetFieldValue  (""Line Item Action Number"",  itemActionNum);
                  oDelivComp.SetFieldValue  (""Quantity"",  qtyReq);
                  oDelivComp.SetFieldValue  (""Integration Id"",  itemActionNum);
                  // oDelivComp.SetFieldValue  (""Id"",  itemActionNum1);
                  oDelivComp.SetFieldValue  (""Order Header Id"",  inputId);
                  var shipValue = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_PART_MOVEMENT_TYPE"", ""Delivery"");
                  // TheApplication().MsgBox ("foo is: "" + foo);
                  oDelivComp.SetFieldValue  (""Line Item Action Type"",   shipValue);

   				  // oDelivComp.SetFieldValue  (""Line Item Action Type"",   ""Delivery"");
                  }
              }
            }
         }
      }
   }
}
function GetSAP4xOrderStatus_SiebelToBAPI (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   Order Object (SAP 4x Order(Get Status))
    *     Order
    *
    * Output Object's Integration Components:
    *   BAPI Import (SAP 4x Order - Get Status SAP Order (BAPI Input))
    *     Import Parameters
    */

   /*
    * Set up EAI Lookup objects
    */

   /*
    * Set up EAI Input Message objects
    */
   var iOrderObj;    // Siebel Order instance
   var iOrderComp;   // Order

   /*
    * Set up EAI Output Message objects
    */
   var oGSObj;         // BAPI instance
   var oGSImportComp;  // Import Parameters

   /*
    * Find and create top-level integration object
    */
   iOrderObj = inputMsg.GetIntObj (""SAP 4x Order(Get Status)"");
   oGSObj    = outputMsg.CreateIntObj (""SAP 4x Order - Get Status SAP Order (BAPI Input)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iOrderObj.NextInstance ())
   {
      /*
       * Create ""Get Status"" object
       */
      oGSObj.NewInstance ();

      /*
       * Read ""Order"" component
       */
      iOrderComp = iOrderObj.GetPrimaryIntComp (""Order Entry - Orders"");
      oGSImportComp = oGSObj.CreatePrimaryIntComp (""Import Parameters"");
      if (iOrderComp.NextRecord ())
      {
         /*
          * Write ""Import Parameters"" component
          */
         oGSImportComp.NewRecord ();
         oGSImportComp.SetCopySource  (iOrderComp);
         oGSImportComp.CopyFieldValue (""SALESDOCUMENT"", ""Integration Id"");
      }
   }
}
function LocalizeMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created by Richard Exley - November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ERR_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ERR_MSG"";
	var LOVType = ""CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function OrderStatus (inputMsg,outputMsg )
{
	// var theApp = TheApplication();
	
   /* Input Objects' Integration Components
	*   Order IDOC (SAP 4x Order Status (IDOC))
	*
	*/

   
   /*
	* Set up EAI Input Message objects
	*/
	var iIDOCObj;   // IDOC instance
	var iIDOCComp;  // top level IDOC segment
	var iORDERComp; // IDOC Order Header
	
   /*
    * Set up EAI Output Message objects (Dummy)
    */
   var oOrderObj;      // Order object instance
   var oOrderComp;     // Order (header)
   var oOrderItemComp; // Order Item (item)
	
   /*
	* Find and create top-level integration object
	*/
	iIDOCObj    = inputMsg.GetIntObj (""SAP 4x Order Status (IDOC 4x)"");
	oOrderObj = outputMsg.CreateIntObj (""SAP 4x Order"");
	
   /*
	* Read int object instances from EAI message
	*/
	while (iIDOCObj.NextInstance ())
	{
	   
       /*
		* Read virtual root component that IDOC RFC Adapter populates
		*/
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		oOrderObj.NewInstance ();
		oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order Entry - Orders"");
		iIDOCComp.NextRecord ();

	   /*
		* Read ""ORDER"" component
		*/
        iORDERComp = iIDOCComp.GetIntComp (""E2EDK01005"");
		if (iORDERComp.NextRecord ())
		    {
			   
			    var orderNo = iORDERComp.GetFieldValue ( ""BELNR"" );
			    var orderId;
				
				orderId = GetOrderId(orderNo);
				
				outputMsg.SetArgument (""Object Id"", orderId);
                
				var wfManager = TheApplication().GetService(""EAI Business Integration Manager (Server Request)"");
    
    			var input = TheApplication().NewPropertySet();
		    	var output = TheApplication().NewPropertySet();
		    	input.SetProperty(""ProcessName"", ""Order - Get SAP 4x Order Status"");
    			input.SetProperty(""RowId"", orderId);
    			wfManager.InvokeMethod(""RunProcess"", input, output);
    			// TheApplication().MsgBox(""Get Status WF Invoked Sucessfully"");
    		}	
	

	}

}
function OrderToQuote (inputMsg, outputMsg)
{
   /* Input Object's Integration Components:
    *   SAP 4x Order
    *     Order Entry - Orders (header)
    *       Order Entry - Line Items (item)
    *
    *
    * Input Objects' Integration Components
    *   SAP 4x Quote
    *     Quote (header)
    *       Quote Item (item)
    */

   /*
    * Set up EAI Lookup objects
    */

   /*
    * Set up EAI Input Message objects
    */
   var iOrderObj;      // Order object instance
   var iOrderComp;     // Order (header)
   var iOrderItemComp; // Order Item (item)
   var iOrderCardComp;	   // Order Card Payment Comp
   var iOrderIActComp; // Order Item Action (sched lines)

   /*
    * Set up EAI Output Message objects
    */
   var oQuoteObj;      // Quote object instance
   var oQuoteComp;     // Quote (header)
   var oQuoteItemComp; // Quote Item (item)
   var oQuoteIActComp; // Quote Item Action (sched lines)

   // Get quote number that started all this
   var quoteNumber = inputMsg.GetArgument (""Quote Id"");
   
   /*
    * Find and create top-level integration object
    */
   iOrderObj = inputMsg.GetIntObj (""SAP 4x Order(Sync)"");
   oQuoteObj = outputMsg.CreateIntObj (""SAP 4x Quote(Sync)"");

   /*
    * Read int object instances from EAI message
    */
   while (iOrderObj.NextInstance ())
   {
      /*
      * Read ""Order Header"" component
      */
      iOrderComp = iOrderObj.GetPrimaryIntComp (""Order Entry - Orders"");
      oQuoteObj.NewInstance ();
      oQuoteComp = oQuoteObj.CreatePrimaryIntComp (""Quote"");
      while (iOrderComp.NextRecord ())
      {
         oQuoteComp.NewRecord ();
         oQuoteComp.SetCopySource  (iOrderComp);
         var quoteNumber = iOrderComp.GetFieldValue (""Id"");
         // oQuoteComp.CopyFieldValue (""Bill To Account Integration Id"", ""Bill To Account Integration Id"");
         oQuoteComp.CopyFieldValue (""Billing Block"",      ""Billing Block"");
         oQuoteComp.CopyFieldValue (""Delivery Block"",      ""Delivery Block"");
         oQuoteComp.CopyFieldValue (""Credit Check Passed Flag"", ""Credit Status"" );
         oQuoteComp.SetFieldValue  (""Last Validated SAP Date"", Timestamp());
         oQuoteComp.SetFieldValue  (""Id"", 		quoteNumber);
         oQuoteComp.CopyFieldValue (""Currency Code"",      ""Currency Code"");
         var errorMsg = iOrderComp.GetFieldValue (""Back Office Error Text"");
         if ( errorMsg == null || errorMsg == """")
         	{
         		oQuoteComp.SetFieldValue (""EAI Error Message"",      "" "" );
         	}
         else
         	{
         		oQuoteComp.SetFieldValue (""EAI Error Message"",      errorMsg );
         	}
         oQuoteComp.CopyFieldValue (""EAI Error Message"",      ""Back Office Error Text"");
         // oQuoteComp.CopyFieldValue (""Requested Ship Date"", 
         /*
          * Order Card Comp to Quote Card Fields
         */
         
         iOrderCardComp = iOrderComp.GetIntComp (""Payments"");

         while (iOrderCardComp.NextRecord ())
         {
         oQuoteComp.SetCopySource  (iOrderCardComp);

         oQuoteComp.CopyFieldValue ( ""Credit Card Number"", ""Account Number"" );
         oQuoteComp.CopyFieldValue ( ""Credit Card Transaction Time"", ""Authorization Date"" );
         oQuoteComp.CopyFieldValue ( ""Credit Card Transaction ID"", ""Credit Card Transaction ID"" );
         oQuoteComp.CopyFieldValue ( ""Credit Card Authorization Code"", ""Authorization Code"" );
         oQuoteComp.CopyFieldValue ( ""Credit Card Transaction Amount"", ""Transaction Amount"" );
         oQuoteComp.CopyFieldValue ( ""Credit Card Transaction Status"", ""Payment Status"" );
        }

         /*
         * Read the ""Quote Item"" component
         */
         iOrderItemComp = iOrderComp.GetIntComp (""Order Entry - Line Items"");
         oQuoteItemComp = oQuoteComp.CreateIntComp (""Quote Item"", false);

         while (iOrderItemComp.NextRecord ())
         {
            // var lineNo = iOrderItemComp.GetFieldValue ( ""Line Number"" );
            // var lineId = quoteNumber + ""-"" + lineNo ;
            oQuoteItemComp.NewRecord ();
            oQuoteItemComp.SetCopySource  (iOrderItemComp);

            // oQuoteItemComp.CopyFieldValue (""Currency Code"",           ""Currency Code""); // Calculated from Header
            
            var fixPrice = iOrderItemComp.GetFieldValue ( ""Fix Price Flag"");
            oQuoteItemComp.CopyFieldValue (""Freight Amount"",   ""Freight Amount"");
            oQuoteItemComp.SetFieldValue ( ""Quote Id"",       quoteNumber);
            oQuoteItemComp.CopyFieldValue (""Line Number"",   ""Line Number"");
            var ReqQty = iOrderItemComp.GetFieldValue (""Quantity Requested"");
            oQuoteItemComp.CopyFieldValue    (""Source Inventory Location"",        ""Source Inventory Location"");
            
            var NetPrice = iOrderItemComp.GetFieldValue (""SAP 4x Net Price"");
            var UnitNetPrice = NetPrice / ReqQty;
            
            oQuoteItemComp.SetFieldValue (""Quantity Requested"", ReqQty );
            oQuoteItemComp.SetFieldValue (""Net Price"", NetPrice );
            if ( fixPrice != ""Y"" )
            {
            	oQuoteItemComp.SetFieldValue (""Adjusted List Price"", UnitNetPrice);
            }	
            oQuoteItemComp.CopyFieldValue (""Tax Amt"",                 ""Tax Amount"");

            /*
            * Read the ""Quote Item - Schedule Lines"" component
            */
            iOrderIActComp = iOrderItemComp.GetIntComp (""Order Entry - Line Item Actions"");
            oQuoteIActComp = oQuoteItemComp.CreateIntComp (""Quote - SAP 4x Schedule Line Item"", oQuoteComp);
			
			var schedNo = null;
            while (iOrderIActComp.NextRecord ())
            {
               schedNo = schedNo + 1 ;
               // var schedNo = iOrderIActComp.GetFieldValue ( ""Line Item Action Number"" );
               // var schedId = lineId + ""-"" + schedNo ;
               oQuoteIActComp.NewRecord ();
               oQuoteIActComp.SetCopySource  (iOrderIActComp);

               oQuoteIActComp.CopyFieldValue (""Required Delivery Date"",       ""Planned Start Date"");
               // oQuoteIActComp.SetFieldValue (""Line Item Action Type"",   ""Schedule"");
               oQuoteIActComp.SetFieldValue (""Schedule Line No"", schedNo );
               oQuoteIActComp.CopyFieldValue (""Confirmed Date"",      ""Actual Start Date"");
               oQuoteIActComp.CopyFieldValue (""Required Qty"",                ""Quantity"");
               oQuoteIActComp.CopyFieldValue (""Confirmed Qty"",                ""Confirmed Qty"");
               oQuoteIActComp.SetFieldValue ( ""Quote Id"",     quoteNumber);
               // oQuoteIActComp.SetFieldValue ( ""Item Line No"",     lineNo);
            }
         }
      }
   }
}
function QuoteToOrder (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   SAP 4x Quote
    *     Quote (header)
    *       Quote Item (item)
    *
    * Output Object's Integration Components:
    *   SAP 4x Order
    *     Order Entry - Orders (header)
    *       Order Entry - Line Items (item)
    */

   /*
    * Set up EAI Lookup objects
    */

   /*
    * Set up EAI Input Message objects
    */
   var iQuoteObj;      // Quote object instance
   var iQuoteComp;     // Quote (header)
   var iQuoteItemComp; // Quote Item (item)

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;      // Order object instance
   var oOrderComp;     // Order (header)
   var oOrderItemComp; // Order Item (item)
  
   // Should we create an Order?
   var createorder = inputMsg.GetArgument (""Create Order"");

   /*
    * Find and create top-level integration object
    */
   iQuoteObj = inputMsg.GetIntObj (""SAP 4x Quote"");
   oOrderObj = outputMsg.CreateIntObj (""SAP 4x Order(Quote)"");

   /*
    * Read int object instances from EAI message
    */
   while (iQuoteObj.NextInstance ())
   {
      /*
      * Read ""Quote Header"" component
      */
      iQuoteComp = iQuoteObj.GetPrimaryIntComp (""Quote"");
      oOrderObj.NewInstance ();
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order Entry - Orders"");
      while (iQuoteComp.NextRecord ())
      {
         oOrderComp.NewRecord ();
         oOrderComp.SetCopySource  (iQuoteComp);
         oOrderComp.CopyFieldValue (""Account Integration Id"", ""Account Integration Id"");
         oOrderComp.SetFieldValue  (""Active"",             ""Y"");
         oOrderComp.CopyFieldValue (""Bill To Account Integration Id"", ""Bill To Account Integration Id"");
         oOrderComp.CopyFieldValue (""Contact First Name"", ""Contact First Name"");
         oOrderComp.CopyFieldValue (""Contact Last Name"", ""Contact Last Name"");
         oOrderComp.CopyFieldValue (""Contact Work Phone #"", ""Contact Work Phone #"");
         oOrderComp.CopyFieldValue (""Currency Code"", ""Currency Code"");
         oOrderComp.CopyFieldValue (""Freight"",            ""Freight Total"");
         oOrderComp.CopyFieldValue (""Price List Id"",      ""Price List Id"");
         oOrderComp.CopyFieldValue (""Freight Terms"",      ""Freight Terms"");
         oOrderComp.CopyFieldValue (""Freight Terms Info"", ""Freight Terms Info"");
         // oOrderComp.CopyFieldValue ( ""Id"",                 ""Id""); 
         var quoteNum = iQuoteComp.GetFieldValue (""Quote Number"");
         oOrderComp.SetFieldValue ( ""Order Number"",       quoteNum); 
         // var orderType= TheApplication().InvokeMethod (""LookupValue"", ""FS_ORDER_TYPE"", ""Sales Order"");
         oOrderComp.SetFieldValue ( ""Order Type"",         ""Sales Order"");   //Maybe this should map from Quote Type?
         // oOrderComp.SetFieldValue ( ""Order Type"",         orderType);   //Maybe this should map from Quote Type?
         oOrderComp.CopyFieldValue (""Partial Ship"",       ""Partial Ship"");
         oOrderComp.SetFieldValue ( ""Integration Id"",      null);
         oOrderComp.CopyFieldValue (""Payment Term"",       ""Payment Term"");
         oOrderComp.CopyFieldValue (""Pricing Date"",       ""Pricing Date"");
         var poNumber = iQuoteComp.GetFieldValue ( ""Purchase order Number"" );
         if ( poNumber == null )
         {
         	oOrderComp.SetFieldValue (""Account Order Number"", quoteNum );
         }
         else
         {
         	oOrderComp.SetFieldValue (""Account Order Number"", poNumber );
         }
         oOrderComp.CopyFieldValue (""Payer Account Integration Id"",       ""Payer Account Integration Id"");
         oOrderComp.CopyFieldValue (""Quote Id"",           ""Id"");
         oOrderComp.CopyFieldValue (""Requested Ship Date"", ""Requested Ship Date"");
         oOrderComp.CopyFieldValue (""SAP Distribution Channel (MO)"", ""SAP Distribution Channel (MO)"");
         oOrderComp.CopyFieldValue (""SAP Division (MO)"", ""SAP Division (MO)"");
         oOrderComp.CopyFieldValue (""SAP Sales Organization (MO)"", ""SAP Sales Organisation (MO)"");
         oOrderComp.CopyFieldValue (""Ship To Account Integration Id"", ""Ship To Account Integration Id"");
         
         
         oOrderComp.CopyFieldValue (""Credit Card Holder"", ""Credit Card Holder"");
         var cCard = iQuoteComp.GetFieldValue ( ""Credit Card Name"");
         // var cCardType = TheApplication().InvokeMethod (""LookupValue"", ""PAY_ACCNT_CD"", cCard);
         oOrderComp.SetFieldValue (""Credit Card Name"", cCard );
         oOrderComp.CopyFieldValue (""Credit Card Number"", ""Credit Card Number"");
         // CR# 12-9RTEQV ( Change Expiration Date to Month & Year)
         //oOrderComp.CopyFieldValue (""Credit Card Expiration Date"", ""Credit Card Expiration Date"");
         oOrderComp.CopyFieldValue (""Credit Card Expiration Month"", ""Credit Card Expiration Month"");
		 oOrderComp.CopyFieldValue (""Credit Card Expiration Year"", ""Credit Card Expiration Year"");

         
         /*
         * Read the ""Quote Item"" component
         */
         iQuoteItemComp = iQuoteComp.GetIntComp (""Quote Item"");
         oOrderItemComp = oOrderComp.CreateIntComp (""Order Entry - Line Items"", oOrderComp);

         while (iQuoteItemComp.NextRecord ())
         {
            oOrderItemComp.NewRecord ();
            oOrderItemComp.SetCopySource  (iQuoteItemComp);

            oOrderItemComp.CopyFieldValue (""Description"",             ""Description"");
            oOrderItemComp.CopyFieldValue (""Due Date"",                ""Requested Delivery Date"");
            // oOrderItemComp.CopyFieldValue (""Freight Amount"",          ""Freight Amount"");
            oOrderItemComp.CopyFieldValue (""Item Price"",              ""Item Price"");
            oOrderItemComp.CopyFieldValue (""Line Number"",             ""Line Number"");
            oOrderItemComp.CopyFieldValue (""Note"",                    ""Note"");
            oOrderItemComp.SetFieldValue ( ""Order Number"",            quoteNum);
            // oOrderItemComp.SetFieldValue ( ""Order Header Id"",         ordernumber);
            oOrderItemComp.CopyFieldValue (""Partial Ship"",            ""Partial Ship"");
            oOrderItemComp.CopyFieldValue (""Pricing Comments"",        ""Pricing Comments"");
            oOrderItemComp.CopyFieldValue (""Product Integration Id"",  ""Product Integration Id"");
            oOrderItemComp.CopyFieldValue (""Unit of Measure"", 		  ""Unit of Measure"");
            oOrderItemComp.CopyFieldValue (""Quantity Requested"",      ""Quantity Requested"");
            oOrderItemComp.CopyFieldValue (""Source Inventory Location"", ""Source Inventory Location"");
            // oOrderItemComp.CopyFieldValue (""Tax Amount"",                 ""Tax Amt"");
            oOrderItemComp.CopyFieldValue (""Unit Price"",              ""Unit Price"");
            
         }
      }
   }
}
function QuoteToOrderSubmit (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   SAP 4x Quote
    *     Quote (header)
    *       Quote Item (item)
    *
    * Output Object's Integration Components:
    *   SAP 4x Order
    *     Order Entry - Orders (header)
    *       Order Entry - Line Items (item)
    */

   /*
    * Set up EAI Lookup objects
    */

   /*
    * Set up EAI Input Message objects
    */
   var iQuoteObj;      // Quote object instance
   var iQuoteComp;     // Quote (header)
   var iQuoteOrgComp;  // Quote Organization Comp (MVG Association)
   var iQuoteItemComp; // Quote Item (item)

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;      // Order object instance
   var oOrderComp;     // Order (header)
   var oOrderOrgComp;  // Order Organization Comp (MVG Association)
   var oOrderItemComp; // Order Item (item)
   var oOrderCardComp; // Order Card Comp (Payment Comp)
  
   // Should we create an Order?
   // var createorder = inputMsg.GetArgument (""Create Order"");

   /*
    * Find and create top-level integration object
    */
   iQuoteObj = inputMsg.GetIntObj (""SAP 4x Quote"");
   oOrderObj = outputMsg.CreateIntObj (""SAP 4x Order(Quote)"");

   /*
    * Read int object instances from EAI message
    */
   while (iQuoteObj.NextInstance ())
   {
      /*
      * Read ""Quote Header"" component
      */
      iQuoteComp = iQuoteObj.GetPrimaryIntComp (""Quote"");
      oOrderObj.NewInstance ();
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order Entry - Orders"");
      while (iQuoteComp.NextRecord ())
      {
         oOrderComp.NewRecord ();
         oOrderComp.SetCopySource  (iQuoteComp);
         oOrderComp.CopyFieldValue (""Account Id"",            ""Account Id"");
         oOrderComp.CopyFieldValue (""Bill To Account Id"",            ""Bill To Account Id"");
         oOrderComp.CopyFieldValue (""Ship To Account Id"",            ""Ship To Account Id"");
         oOrderComp.CopyFieldValue (""Primary Payer Account Id"",            ""Payer Account Id"");
         oOrderComp.SetFieldValue  (""Active"",             ""Y"");
         oOrderComp.CopyFieldValue (""Contact Id"", ""Contact Id"");
         oOrderComp.CopyFieldValue (""Price List Id"", ""Price List Id"");
         oOrderComp.CopyFieldValue (""Discount"", ""Discount"");
         oOrderComp.CopyFieldValue (""Discount Amount"", ""Discount Amount"");
         oOrderComp.CopyFieldValue (""Discount Reason"", ""Discount Reason"");
         oOrderComp.CopyFieldValue (""Price List"", ""Price List"");
         // oOrderComp.CopyFieldValue (""Payment Method"", ""Payment Method"");
         oOrderComp.CopyFieldValue (""Currency Code"", ""Currency Code"");
         oOrderComp.CopyFieldValue (""Freight"",            ""Freight Total"");
         oOrderComp.CopyFieldValue (""Freight Terms"",      ""Freight Terms"");
         oOrderComp.CopyFieldValue (""Freight Terms Info"", ""Freight Terms Info"");
		 var orgId = iQuoteComp.GetFieldValue (""Primary Organization Id"");
         // var priceList = iQuoteComp.GetFieldValue ( ""Price List Id"");
         // oOrderComp.SetFieldValue ( ""Order Date"",); don't forget this - should be today()

         // Only for Create
         var ordernumber = """";
        
            // This is to workaround the problem where the pre-default on Order Number
            // does not take effect through the Siebel Adapter.
            
            
            ordernumber = CreateOrder();

            outputMsg.SetArgument (""Object Id"", ordernumber);
        
         
         oOrderComp.SetFieldValue ( ""Id"",                 ordernumber); 
         // oOrderComp.SetFieldValue ( ""Order Number"",       ordernumber); 

         var orderType= TheApplication().InvokeMethod (""LookupValue"", ""FS_ORDER_TYPE"", ""Sales Order"");
         oOrderComp.SetFieldValue (""Order Type"",   orderType);
         oOrderComp.CopyFieldValue (""Primary Organization Id"",       ""Primary Organization Id"");
         // oOrderComp.CopyFieldValue (""Primary Organization"",      	 ""Primary Organization"");
         oOrderComp.CopyFieldValue (""Partial Ship"",       ""Partial Ship"");
         oOrderComp.SetFieldValue ( ""Integration Id"",      null);
         oOrderComp.CopyFieldValue (""Payment Term"",       ""Payment Term"");
         // Not there in Quoute ??? oOrderComp.CopyFieldValue (""Pricing Date"",       ""Pricing Date"");
         var poNumber = iQuoteComp.GetFieldValue ( ""Purchase order Number"" );
         if ( poNumber == null )
         {
         	oOrderComp.SetFieldValue (""Account Order Number"", ordernumber );
         }
         else
         {
         	oOrderComp.SetFieldValue (""Account Order Number"", poNumber );
         }	

         // oOrderComp.CopyFieldValue (""Payer Account Integration Id"",       	""Payer Account Integration Id"");
         oOrderComp.CopyFieldValue (""Quote Id"",           						""Id"");
         oOrderComp.CopyFieldValue (""Requested Ship Date"", 						""Requested Ship Date"");
         // Credit Card Comp Mapping
         var paymentType = iQuoteComp.GetFieldValue (""Credit Card Name"");
         var ccNumber = iQuoteComp.GetFieldValue (""Credit Card Number"");
         if ((paymentType != """") && (ccNumber != """"))
         {
            oOrderCardComp = oOrderComp.CreateIntComp (""Payments"");
            oOrderCardComp.NewRecord ();
            oOrderCardComp.SetCopySource (iQuoteComp);
            oOrderCardComp.CopyFieldValue (""Account Number"",      					""Credit Card Number"");
            // oOrderCardComp.CopyFieldValue (""Credit Card Transaction ID"",               ""Credit Card Transaction ID"");
            oOrderCardComp.CopyFieldValue (""Authorization Code"",              	""Credit Card Authorization Code"");
            oOrderCardComp.CopyFieldValue (""Transaction Amount"",           ""Credit Card Transaction Amount"");
            oOrderCardComp.CopyFieldValue (""Payment Status"",           ""Credit Card Transaction Status"");
            oOrderCardComp.CopyFieldValue (""Expiration Month"",             ""Credit Card Expiration Month"");
            oOrderCardComp.CopyFieldValue (""Expiration Year"",              ""Credit Card Expiration Year"");
            // CR# 12-9RTEQV ( Change Expiration Date to Month & Year)
            // oOrderComp.CopyFieldValue (""Credit Card Expiration Date"",              ""Credit Card Expiration Date"");
            oOrderCardComp.CopyFieldValue (""Card Holder"",              			""Credit Card Holder"");
            oOrderCardComp.CopyFieldValue (""Payment Type"",              		""Credit Card Name"");
            // oOrderComp.SetFieldValue  (""Credit Card Name"",              			""Visa"");
            // oOrderComp.CopyFieldValue (""Credit Card Transaction Response Code"",    ""Credit Card Transaction Response Code"");
            var paymentMethod = TheApplication().InvokeMethod (""LookupValue"", ""PAYMENT_METHOD_CODE"", ""Credit Card"");
            oOrderCardComp.SetFieldValue  (""Payment Method"",   paymentMethod);
         }
      
        /*	
         *	Read the ""Quote_Organization"" Component for Copying Organization 
         */
         iQuoteOrgComp = iQuoteComp.GetIntComp(""Quote_Organization"");
         oOrderOrgComp = oOrderComp.CreateIntComp (""Order Entry - Orders_Organization"");
         
         while (iQuoteOrgComp.NextRecord())
         {
         	oOrderOrgComp.NewRecord ();
         	oOrderOrgComp.SetCopySource (iQuoteOrgComp);
         	
         	oOrderOrgComp.CopyFieldValue ( ""IsPrimaryMVG"",			""IsPrimaryMVG"");
         	oOrderOrgComp.CopyFieldValue ( ""Organization Id"",		""Organization Id"");
         }
        
         /*
         * Read the ""Quote Item"" component
         */
         iQuoteItemComp = iQuoteComp.GetIntComp (""Quote Item"");
         oOrderItemComp = oOrderComp.CreateIntComp (""Order Entry - Line Items"", false );

         while (iQuoteItemComp.NextRecord ())
         {
            oOrderItemComp.NewRecord ();
            oOrderItemComp.SetCopySource  (iQuoteItemComp);
			//    EAIRaiseError(""ERR_MSG_ORDER_ALREADY_SUBMITTED"");	  
            oOrderItemComp.CopyFieldValue (""Base Price"",              		""Base Price"");
            oOrderItemComp.CopyFieldValue (""Class Registration Number"", 	""Class Registration Number"");
            // oOrderItemComp.CopyFieldValue (""Covered Product"",         		""Covered Product"");
            oOrderItemComp.CopyFieldValue (""Description"",             		""Description"");
            oOrderItemComp.CopyFieldValue (""Discount Amount"",       ""Discount Amount"");
            
            oOrderItemComp.CopyFieldValue (""Discount Percent"",       		""Discount Percent"");
            oOrderItemComp.CopyFieldValue (""Due Date"",                		""Requested Delivery Date"");
            oOrderItemComp.CopyFieldValue (""Effective Pricing Period Id"", 	""Period Id"");
            oOrderItemComp.CopyFieldValue (""Freight Amount"",          		""Freight Amount"");
            oOrderItemComp.CopyFieldValue (""Unit Price"",              		""Unit Price"");
            oOrderItemComp.CopyFieldValue (""Item Price"",     				""Item Price"");
            oOrderItemComp.CopyFieldValue (""Adjusted List Price"",     		""Adjusted List Price"");
            oOrderItemComp.CopyFieldValue (""Line Number"",             		""Line Number"");
            oOrderItemComp.CopyFieldValue (""Note"",                    		""Note"");
            // oOrderItemComp.SetFieldValue ( ""Order Number"",            		ordernumber);
            oOrderItemComp.SetFieldValue ( ""Order Header Id"",         		ordernumber);
            oOrderItemComp.SetFieldValue ( ""Order Type"",              		orderType);
            oOrderItemComp.CopyFieldValue (""Partial Ship"",            		""Partial Ship"");
            oOrderItemComp.CopyFieldValue (""Pricing Comments"",        		""Pricing Comments"");
            // oOrderItemComp.CopyFieldValue (""Product"",                 		""Product"");
            oOrderItemComp.CopyFieldValue (""Product Id"",              		""Product Id"");
            // oOrderItemComp.CopyFieldValue (""Product Integration Id"",  		""Product Integration Id"");
            // oOrderItemComp.CopyFieldValue (""Product Unit of Measure"", 		""Unit of Measure"");
            oOrderItemComp.CopyFieldValue (""Quantity Requested"",      		""Quantity"");
            // oOrderItemComp.CopyFieldValue (""Ship To Account Integration Id"",""Ship To Account Integration Id"");
            oOrderItemComp.CopyFieldValue (""Source Inventory Location"", 	""Source Inventory Location"");
            // oOrderItemComp.CopyFieldValue (""Source Inventory Loc Id"", 		""Source Inventory Location Id"");
            oOrderItemComp.CopyFieldValue (""Volume Discount Item"", 	""Volume Discount Item"");
            oOrderItemComp.CopyFieldValue (""Volume Discount Item Id"", 	""Volume Discount Item Id"");
            // oOrderItemComp.CopyFieldValue (""Exclude Pricing Flag"", 	""Exclude Pricing Flag"");
            oOrderItemComp.CopyFieldValue (""Volume Upsell Item"", 	""Volume Upsell Item"");
            oOrderItemComp.CopyFieldValue (""Volume Upsell Item Id"", 	""Volume Upsell Item Id"");
            oOrderItemComp.CopyFieldValue (""Volume Discount Id"", 	""Volume Discount Id"");
            oOrderItemComp.CopyFieldValue (""Volume Upsell Message"", 	""Volume Upsell Message"");
            oOrderItemComp.CopyFieldValue (""Price List Id"", 	""Price List Id"");
            oOrderItemComp.CopyFieldValue (""Discount Source"", 	""Discount Source"");
            oOrderItemComp.CopyFieldValue (""Asset Id"", 	""Covered Asset Id"");
            oOrderItemComp.CopyFieldValue (""Volume Discount Method"", 	""Volume Discount Method"");
            oOrderItemComp.CopyFieldValue (""Write-In Product"", 	""Write-In Product"");
            // oOrderItemComp.CopyFieldValue (""Product Port Id"", 	""Product Port Id"");
            oOrderItemComp.CopyFieldValue (""Prod Item Id"", 	""Prod Item Id"");
            oOrderItemComp.CopyFieldValue (""Promotion Item Flag"", 	""Promotion Item Flag"");
            oOrderItemComp.CopyFieldValue (""Covered Product Id"", 	""Covered Product Id"");
            // oOrderItemComp.CopyFieldValue (""Parent Order Item Id"", 	""Parent Quote Item Id"");
            // oOrderItemComp.CopyFieldValue (""Root Order Item Id"", 	""Root Quote Item Id"");
            // oOrderItemComp.CopyFieldValue (""Root Product Id"", 	""Root Product Id"");
            
            
            // EAI Insert Position		AFTER
            // Calculate PriceAll Pre Final Method Invoke 0		RefreshParentMvgBC
            // Calculate Price Post Method Invoke 0		UpdateServicePrice
            // Pricing Enabled		Y
            // Order Header Id
            oOrderItemComp.CopyFieldValue (""Tax Amount"",                 	""Tax Amt"");
           
		}
      }
   }
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"
"/*
function SimulateSAP4xOrder_BAPIToSiebel (inputMsg, outputMsg)
{
   ** Input Objects' Integration Components
    *   BAPI Export (SAP 4x Order - Simulate SAP Order (BAPI Output))
    *     Export Parameters (output)
    *
    * Output Object's Integration Components:
    *   Order Object (SAP 4x Order)
    *     Order (oOrder)
    *       Simulate Output
    *		Simulate Item
    *		Order Item
    **

   **
    * Set up EAI Lookup objects
    **
    
   var currencyLM 	 = new CSSEAIValueMap (""SAP Currency Code"", ""Siebel Inbound"");
   var ccStatusLM	 = new CSSEAIValueMap (""SAP Credit Card Approval Code"", ""Siebel Inbound"");
   var cCardLM	 	 = new CSSEAIValueMap (""SAP Credit Card Type"", ""Siebel Inbound"");
  

   **
    * Set up EAI Input Message objects
    **
    
   var iSimOrderObj;   // BAPI Order instance
   var iSimExportComp; // BAPI Export Parameters
   var iSimItemComp;   // BAPI Order Items
   var iSimIItemComp;  // BAPI Order Input Item Comp to retieve value for Fix Pricing flag
   var iSchedItemComp; // BAPI Schedule Line Items
   var iSimCCardComp;  // BAPI Credit Card Export Comp

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   **
    * Set up EAI Output Message objects
    **
    
   var oOrderObj;      // Siebel Order instance
   var oOrderComp;     // Order
   var oOutputComp; // Simulate Output RFC_*
   var oItemComp;   // Simulate Item Output RFC_*
   var oSimItemComp;   // Simulate Item
   // var oItemComp;      // Item
   var oSchedItemComp; // Schedule Line Item

   **
    * Find and create top-level integration object
    **
    
   iSimOrderObj = inputMsg.GetIntObj (""SAP 4x Order - Simulate SAP Order (BAPI Output)"");
   oOrderObj = outputMsg.CreateIntObj (""SAP 4x Order(Sync)"");
   
   **
    * Read int object instances from EAI message
    **
    
   while (iSimOrderObj.NextInstance ())
   {
      **
       * Create ""Order"" object
       **
       
      oOrderObj.NewInstance ();

      **
       * Create ""Order"" component in output message
       **
       
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order Entry - Orders"");
      oOrderComp.NewRecord ();
      
      // Set ""Id"" so Siebel Adapter can synchronize
      oOrderComp.SetFieldValue (""Id"", inputId);
      
      **
       * Read ""Export Parameters"" component
       **
       
      iSimExportComp = iSimOrderObj.GetPrimaryIntComp (""Export Parameters"");
      
      if (iSimExportComp.NextRecord ())
      {
         
         **
          * Update ""Order"" component
          **
          
         oOrderComp.SetCopySource  (iSimExportComp);
         oOrderComp.SetFieldValue(""As Of Date"", Timestamp());
		 
         var sapDelBlock = iSimExportComp.GetFieldValue ( ""SHIP_TO_PARTY-DLV_BLOCK"" );
		 var delBlock = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_HEADER_DELIV_BLOCK"", sapDelBlock);
         oOrderComp.SetFieldValue (""Delivery Block"",     delBlock);
         
         // sapBlock 		= null;
         var sapBillBlock = iSimExportComp.GetFieldValue ( ""BILLING_PARTY-BILL_BLOCK"" );
		 var billBlock = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_HEADER_BILL_BLOCK"", sapBillBlock);
         oOrderComp.SetFieldValue (""Billing Block"",     billBlock);

		 // oOrderComp.CopyFieldValue (""Billing Block"",      ""BILLING_PARTY-BILL_BLOCK"");
         oOrderComp.CopyFieldValue (""Back Office Error Text"",     ""RETURN-MESSAGE"");
		 
		 
         // var currencyCode = currencyLM.Translate (iSimExportComp.GetFieldValue (""SOLD TO PARTY-CURRENCY""));
         
         // if (currencyCode != null && currencyCode != """")
            // {
              // oOrderComp.SetFieldValue  (""Currency Code"", currencyCode);
            // }

         var returnCode = iSimExportComp.GetFieldValue (""RETURN-CODE"");
         
         if ( (returnCode == ""V1154"") || (returnCode == ""V1038"") )
            {
              oOrderComp.SetFieldValue (""Credit Status"",             ""N"");
            }
         else
            {
              oOrderComp.SetFieldValue (""Credit Status"",             ""Y"");
            }

		// Just to Store Order Id so that Net Price at Item Table can be stored for Pricing Ref Purpose.
      	oOutputComp = oOrderComp.CreateIntComp (""Order Entry - Get SAP Order Status Header"");
      	oOutputComp.NewRecord();
      	oOutputComp.SetFieldValue (""Input Id"", inputId);
        oOutputComp.SetFieldValue (""Order Number"", inputId);

         **
          * Read ""ORDER_CCARD_EX"" component
          **
          
		 	 
		  iSimCCardComp = iSimExportComp.GetIntComp (""ORDER_CCARD_EX"");
          var cardStatus;
          while (iSimCCardComp.NextRecord())
          {
         	 cardStatus = iSimCCardComp.GetFieldValue ( ""CC_STAT_EX"");
         	 if ( cardStatus != null && cardStatus != """" )
         	 {
         	 	oOrderComp.SetCopySource (iSimCCardComp);
         		
         	 	oOrderComp.CopyFieldValue (""Credit Card Number"", ""CC_NUMBER"");
         		// oOrderComp.CopyFieldValue (""Credit Card Holder"", ""CC_NAME"");
         	 	oOrderComp.CopyFieldValue (""Credit Card Transaction Time"", ""AUTH_DATE"");
           	 	oOrderComp.CopyFieldValue (""Credit Card Transaction ID"", ""CC_AUTTH_NO"");
           	 	oOrderComp.CopyFieldValue (""Credit Card Approval Code"", ""AUTH_REFNO"");
           	 	oOrderComp.CopyFieldValue (""Credit Card Transaction Amount"", ""AUTHAMOUNT"");
           	 	var ccStatus = ccStatusLM.Translate (iSimCCardComp.GetFieldValue (""CC_STAT_EX""));
           	 	oOrderComp.SetFieldValue (""Credit Card Transaction Status"", ccStatus );         		
				oOrderComp.CopyFieldValue (""Credit Card Expiration Date"", ""CC_VALID_T"" );
           	 	
           	 	
         	 }
          }
         		


         **
          * Read ""ORDERS_ITEMS_OUT"" component
          **
          

         iSimItemComp = iSimExportComp.GetIntComp (""ORDER_ITEMS_OUT"");
         iSimIItemComp = iSimExportComp.GetIntComp ( ""ORDER_ITEMS_IN"");
         oSimItemComp = oOrderComp.CreateIntComp (""Order Entry - Line Items"", false);
         oItemComp   =  oOutputComp.CreateIntComp ( ""Order Entry - Get SAP Order Status Item"", false);
         while (iSimItemComp.NextRecord ())
         {
            oSimItemComp.NewRecord ();
            oSimItemComp.SetCopySource  (iSimItemComp);
            
            iSimIItemComp.NextRecord ();
            
            var fixPrice = iSimIItemComp.GetFieldValue ( ""PURCH_NO_C"" );
                        
            
		    var netVal          = iSimItemComp.GetFieldValue (""NET_VALUE"");
            var qtyReq			= iSimItemComp.GetFieldValue (""REQ_QTY"");
            var netTax		= null;
            if ( qtyReq != 0 )
             {
            	var netPrice 		= netVal / qtyReq ; 
             }
            
            if (fixPrice != ""X"")
             {
            	oSimItemComp.SetFieldValue    (""Adjusted List Price"",         netPrice);
            	oSimItemComp.CopyFieldValue   (""Tax Amount"",                ""SUBTOTAL_5"");	
            	oSimItemComp.CopyFieldValue   (""Freight Amount"",            ""SUBTOTAL_4"");
       			oSimItemComp.SetFieldValue    (""SAP 4x Net Price"",      	netVal);
             }
            else
            {
            	oSimItemComp.SetFieldValue    (""Fix Price Flag"", ""Y"" );
            	oSimItemComp.CopyFieldValue   (""Tax Amount"",                ""SUBTOTAL_5"");	
            	oSimItemComp.SetFieldValue    (""Freight Amount"",            ""0"");
       			oSimItemComp.SetFieldValue    (""SAP 4x Net Price"",      	netVal);
            }
            
            
            var itemReqDate = iSimItemComp.GetFieldValue (""DLV_DATE""); 
            var itemnum = iSimItemComp.GetFieldValue (""ITM_NUMBER"");
            var itemCurrency = currencyLM.Translate (iSimItemComp.GetFieldValue (""CURRENCY""));
            
            oSimItemComp.SetFieldValue     (""Currency Code"",             itemCurrency );                   
            oSimItemComp.CopyFieldValue    (""Product Unit of Measure"",    ""SALES_UNIT"");
            oSimItemComp.CopyFieldValue    (""Line Number"",                ""ITM_NUMBER"");
            oSimItemComp.SetFieldValue     (""Order Header Id"",             inputId);
            oSimItemComp.CopyFieldValue    (""Quantity Requested"",        ""REQ_QTY"");
            oSimItemComp.CopyFieldValue    (""Product Integration Id"",        ""MATERIAL"");
            oSimItemComp.CopyFieldValue    (""Source Inventory Location"",        ""PLANT"")
            
            oItemComp.NewRecord ();
            oItemComp.SetCopySource  (iSimItemComp);
            oItemComp.SetFieldValue (""Input Id"" , inputId );
            oItemComp.CopyFieldValue (""Item Number"", ""ITM_NUMBER"");
            oItemComp.CopyFieldValue (""Requested Quantity"", ""REQ_QTY"");
            oItemComp.SetFieldValue (""Net Value"", netVal );
            
            oItemComp.SetFieldValue (""Net Price"", netPrice );
            
         

            
           **
            * Read ""ORDER_SCHEDULE_EX"" component
            **
            
            
            iSchedItemComp = iSimExportComp.GetIntComp   (""ORDER_SCHEDULE_EX"");
            oSchedItemComp = oSimItemComp.CreateIntComp (""Order Entry - Line Item Actions"", false);
		
			var firstScheduleLine = 1;
			
        
            while (iSchedItemComp.NextRecord ())
             {
               var itemnum2  = iSchedItemComp.GetFieldValue (""ITM_NUMBER"");
               var schednum = iSchedItemComp.GetFieldValue (""SCHED_LINE"");
               var intId;
               if (itemnum2 == itemnum)
               {
           
                oSchedItemComp.NewRecord ();
                oSchedItemComp.SetCopySource  (iSchedItemComp);
                
                intId = inputId + ""-"" + itemnum2 + ""-"" + schednum;
               
                // oSchedItemComp.SetFieldValue (""Integration Id"",             intId);
                oSchedItemComp.CopyFieldValue (""Quantity"",                   ""REQ_QTY"");
                oSchedItemComp.SetFieldValue (""Line Item Action Number"",     intId);
                oSchedItemComp.SetFieldValue  (""Line Number"",     itemnum);
                oSchedItemComp.SetFieldValue  (""Order Header Id"",     inputId);
                // oSchedItemComp.SetFieldValue  (""Quantity"",     qtyReq);                
                oSchedItemComp.CopyFieldValue (""Actual Start Date"",           ""GI_DATE"");
                oSchedItemComp.CopyFieldValue (""Confirmed Qty"",               ""CONFIR_QTY"");
                var reqDate = iSchedItemComp.GetFieldValue ( ""REQ_DATE"");
                oSchedItemComp.SetFieldValue (""Planned Start Date"" ,          reqDate);
                // Checking for First Schedule Line, as it contains actual Req Delivery Date and setting it for Item Req Delv Date
                if ( firstScheduleLine == 1 )
                	{
                		oSimItemComp.SetFieldValue    (""Due Date"",      reqDate );
                	}
                firstScheduleLine++;
                
                var shipValue = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_PART_MOVEMENT_TYPE"", ""Schedule"");
                  // TheApplication().MsgBox ("foo is: "" + foo);
                  oSchedItemComp.SetFieldValue  (""Line Item Action Type"",   shipValue);

                // oSchedItemComp.SetFieldValue  (""Line Item Action Type"",      ""Schedule"");
                }
             }


         }

      }
   }
}
*/"
function SimulateSAP4xOrder_SiebelToBAPI (inputMsg, outputMsg)
{
   /* Uses same map as CreateFromData() */
   CreateSimulateSAP4xOrder_SiebelToBAPI (inputMsg, outputMsg, 
                                        ""SAP 4x Order"", 
                                        ""SAP 4x Order - Simulate SAP Order (BAPI Input)"");
}
function SimulateSAP4xQuoteToOrder_SiebelToBAPI (inputMsg, outputMsg)

{
   /*
    * Input Objects' Integration Components
    *   Order Object (SAP 4x Order)
    *     Order (order)
    *       Order Line Item (item)
    *
    * Output Object's Integration Components:
    *   BAPI Import Object (SAP 4x Order - Create SAP Order (BAPI Import))
    *     Import Parameters
    *       ORDER_PARTNERS
    *       ORDER_ITEMS_IN
    *       ORDER_PARTNERS
    */

   /*
    * Set up EAI Lookup maps
    */
   var orderTypeLM = EAIGetValueMap (""SAP Order Types"",     ""Siebel Outbound"");
   var incotermsLM = EAIGetValueMap (""SAP Incoterms"",       ""Siebel Outbound"");
   var cCardLM	   = EAIGetValueMap (""SAP Credit Card Type"",""Siebel Outbound"");
   var currencyLM  = EAIGetValueMap (""SAP Currency Code"",	""Siebel Outbound"");
   var payTermsLM  = EAIGetValueMap (""SAP Payment Terms"",   ""Siebel Outbound"");
   var uomLM       = EAIGetValueMap (""SAP Unit of Measure"", ""Siebel Outbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iOrderObj;  // Order object instance
   var iOrderComp; // Order
   var iItemComp;  // Order Line Item

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oCFDOrderObj;        // BAPI Order instance
   var oCFDImportComp;      // BAPI Import parameters
   var oCFDItemComp;        // BAPI Order Item
   var oCFDPartnerComp;     // BAPI Order Partners
   var oCFDCardComp;     	// BAPI Card Component


   /*
    * Find and create top-level integration object
    */
   iOrderObj    = inputMsg.GetIntObj (""SAP 4x Order(Quote)"");
   oCFDOrderObj = outputMsg.CreateIntObj (""SAP 4x Order - Simulate SAP Order (BAPI Input)"");
 
   
   /*
    * Read int object instances from EAI message
    */
   while (iOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object in output message
       */
      oCFDOrderObj.NewInstance ();

      /*
       * Read ""Order"" component
       */
      iOrderComp     = iOrderObj.GetPrimaryIntComp (""Order Entry - Orders"");
      oCFDImportComp = oCFDOrderObj.CreatePrimaryIntComp (""Import Parameters"");
     
      if (iOrderComp.NextRecord ())
         {
         /*
          * Write ""Import Parameters"" component
          */
         oCFDImportComp.NewRecord ();
         oCFDImportComp.SetCopySource  (iOrderComp);
         
         var priceList =  null;
         var currencyCode = currencyLM.Translate (iOrderComp.GetFieldValue (""Currency Code""));
         priceList = iOrderComp.GetFieldValue (""Price List Id"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DOC_NUMBER"", null);
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DOC_TYPE"",   orderTypeLM.Translate (iOrderComp.GetFieldValue (""Order Type"")));
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-CURRENCY"",  currencyCode );
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-COLLECT_NO"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_ORG"",  ""SAP Sales Organization (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DISTR_CHAN"", ""SAP Distribution Channel (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DIVISION"",   ""SAP Division (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_GRP"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_OFF"",  null);
         if (iOrderComp.GetFieldValue (""Requested Ship Date"") != """")
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",   ""Requested Ship Date"");
               
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",       ""Order Date"");
            }
         // oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"", ""Requested Ship Date"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DATE_TYPE"",  ""1"");
         if (iOrderComp.GetFieldValue (""Account Order Number"") != """")
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_NO"",   ""Account Order Number"");
               
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_NO"",       ""Order Number"");
            }
         
         
         
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_DATE"", ""Order Date"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PO_METHOD"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PO_SUPPLEM"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REF_1"",      ""Order Number"");
         
         // Set NAME only if ""Contact Id"" is not null.
         if (iOrderComp.GetFieldValue (""Contact Id"") != null)
         {
            oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-NAME"", EAIFormatPersonName (iOrderComp.GetFieldValue (""Contact First Name""),
                                                                                       iOrderComp.GetFieldValue (""Contact Last Name"")));
         }         
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-TELEPHONE"",  ""Contact Work Phone #"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PRICE_GRP"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GROUP"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_DIST"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PRICE_LIST"", null);
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-INCOTERMS1"", incotermsLM.Translate (iOrderComp.GetFieldValue(""Freight Terms"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-INCOTERMS2"", ""Freight Terms Info"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-PMNTTRMS"",   payTermsLM.Translate (iOrderComp.GetFieldValue (""Payment Term"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DLV_BLOCK"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-BILL_BLOCK"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-ORD_REASON"", null);
         // Partial Delivery Mapping Commented as Partial Ship Flag is not exposed in Quote UI. Once it has been exposed just decomment following code.
         // if (iOrderComp.GetFieldValue (""Partial Ship"") != ""Y"")
            // {
               // oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       ""X"");
            // }
         // else
            // {
               // oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       null);
            // }
            
         
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PRICE_DATE"", ""Pricing Date"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-QT_VALID_F"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-QT_VALID_T"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CT_VALID_F"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CT_VALID_T"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP1"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP2"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP3"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP4"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP5"",  null);
         

         /*
          * Write ""ORDER_PARTNERS"" component  
          */
                  
         oCFDPartnerComp = oCFDImportComp.CreateIntComp (""ORDER_PARTNERS"", oCFDImportComp);

         // Sold to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""AG"");

         var soldtoparty =  iOrderComp.GetFieldValue (""Account Integration Id"");
         var array = soldtoparty.split("":"");
         var AccountIntId = array[0];
         var payerId = iOrderComp.GetFieldValue (""Payer Account Integration Id"");
         
         
         oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId);

         // Ship To partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""WE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Ship To Account Integration Id"");

         // Payer partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RG"");
         if ( payerId == null || payerId == """" )
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId);
         	}
         else
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", payerId);
         	}
         	

         // Bill to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Bill To Account Integration Id"");

	    	/*
		 * Read and update Credit Card Info
		 *
		 */
		 var ccType = cCardLM.Translate (iOrderComp.GetFieldValue (""Credit Card Name""));
		 var ccNum = iOrderComp.GetFieldValue ( ""Credit Card Number"");
		 if ( ccNum != null && ccNum != """" )
		 
		 	{
		 		oCFDCardComp = oCFDImportComp.CreateIntComp (""ORDER_CCARD"");
		 		oCFDCardComp.NewRecord();
		 		oCFDCardComp.SetCopySource (iOrderComp);
		 		var cardExpDate = iOrderComp.GetFieldValue ( ""Credit Card Expiration Date"");
		 		if ( cardExpDate == null || cardExpDate == """" )
		 			{
		 				var cardExpYear	= iOrderComp.GetFieldValue (""Credit Card Expiration Year"" );
		 				var cardExpMonth  = iOrderComp.GetFieldValue (""Credit Card Expiration Month"" );
		 				var nMonth = ConvertMonth (cardExpMonth); // 12-9RTEQV
		 				var cardExpDay;
		 				cardExpDay = GetDaysInAMonth(nMonth, cardExpYear);
		 				// Modification for CR # 12-9RTEQV( Instead of Expiration Date now we are using Month & Year Seoerately)
		 				// if ( cardExpMonth < 10 )
		 					// {
		 					//	var cardExpFullDate = ""0"" + cardExpMonth + ""/"" + cardExpDay + ""/"" + cardExpYear + "" 00:00:00"";
		 					// }
		 				// else
		 				// 	{
		 						var cardExpFullDate = nMonth + ""/"" + cardExpDay + ""/"" + cardExpYear + "" 00:00:00"";
		 				// 	}
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpFullDate );
		 			}
		 		else
		 			{
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpDate );
		 			}
		 			
		 		oCFDCardComp.SetFieldValue		(""CC_TYPE"", 		ccType);
		 		oCFDCardComp.SetFieldValue		(""CC_NUMBER"", 		ccNum );
		 		oCFDCardComp.CopyFieldValue		(""CC_NAME"", 		""Credit Card Holder"" );
				oCFDCardComp.CopyFieldValue		(""AUTHAMOUNT"", 		""Credit Card Transaction Amount"" );
		 		oCFDCardComp.SetFieldValue		(""CURRENCY"", 		currencyCode );
		 	} 
	     
         /*
          * Read ""Order Line Item"" Integration Component
          */
         iItemComp    = iOrderComp.GetIntComp        (""Order Entry - Line Items"");
         oCFDItemComp = oCFDImportComp.CreateIntComp (""ORDER_ITEMS_IN"", oCFDImportComp);
         
         while (iItemComp.NextRecord ())
         {

            oCFDItemComp.NewRecord ();
            oCFDItemComp.SetCopySource  (iItemComp);
            oCFDItemComp.CopyFieldValue (""ITM_NUMBER"",     ""Line Number"");
            oCFDItemComp.CopyFieldValue (""HG_LV_ITEM"",     null);
            oCFDItemComp.CopyFieldValue (""PO_ITM_NO"",      ""null"");
            oCFDItemComp.CopyFieldValue (""MATERIAL"",       ""Product Integration Id"");
            oCFDItemComp.CopyFieldValue (""CUST_MAT"",       null);
            oCFDItemComp.CopyFieldValue (""BATCH"",          null);
            oCFDItemComp.CopyFieldValue (""DLV_GROUP"",      null);
            
            if (iItemComp.GetFieldValue (""Partial Ship"") != ""Y"")
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""C"");
                }
            else
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""D"");
                }
            var qty;
            var SAPQty;
            qty = iItemComp.GetFieldValue ( ""Quantity Requested"" );
            SAPQty = qty ;
            oCFDItemComp.CopyFieldValue (""REASON_REJ"",     null);
            oCFDItemComp.CopyFieldValue (""BILL_BLOCK"",     null);
            oCFDItemComp.CopyFieldValue (""BILL_DATE"",      null);
            oCFDItemComp.CopyFieldValue (""PLANT"",          ""Source Inventory Location"");
            oCFDItemComp.CopyFieldValue (""STORE_LOC"",      null);
            oCFDItemComp.CopyFieldValue (""TARGET_QTY"",     null);
            oCFDItemComp.CopyFieldValue (""TARGET_QU"",      null);
            oCFDItemComp.SetFieldValue (""REQ_QTY"",        SAPQty);
            oCFDItemComp.SetFieldValue  (""SALES_UNIT"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
            oCFDItemComp.CopyFieldValue (""ITEM_CATEG"",     null);
            oCFDItemComp.CopyFieldValue (""SHORT_TEXT"",     ""Description"");
            oCFDItemComp.CopyFieldValue (""REQ_DATE"",       ""Due Date"");
            oCFDItemComp.SetFieldValue  (""DATE_TYPE"",      ""1"");
            oCFDItemComp.CopyFieldValue (""REQ_TIME"",       null);
           
            
            var siebelPrice = iItemComp.GetFieldValue ( ""Unit Price"" );
            if ((  siebelPrice != 0) || (  priceList != """" ))
            
            {
             	oCFDItemComp.SetFieldValue  (""CD_TYPE2"",      ""PN00"");
            	oCFDItemComp.SetFieldValue  (""PURCH_NO_C"",     ""X"");
                oCFDItemComp.CopyFieldValue (""CD_VALUE2"",     ""Item Price"");
            	oCFDItemComp.SetFieldValue  (""CD_P_UNT2"",     ""1"");
            	oCFDItemComp.SetFieldValue  (""CD_D_UNT2"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-CD_TYPE1"",   ""HD00"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CD_VALUE1"",  ""Freight"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CD_P_UNT1"",   ""1"");
         // oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-CD_D_UNT1"",  uomLM.Translate(iOrderComp.GetFieldValue(""Product Unit of Measure"")));
            }
           else
           {
           		oCFDItemComp.SetFieldValue  (""CD_TYPE2"",      ""PB00"");	
           		// oCFDItemComp.CopyFieldValue (""CD_VALUE2"",     null);
            	oCFDItemComp.SetFieldValue  (""CD_P_UNT2"",     ""1"");
            	oCFDItemComp.SetFieldValue  (""CD_D_UNT2"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
           }
           
          
            oCFDItemComp.CopyFieldValue (""PRC_GROUP1"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP2"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP3"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP4"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP5"",     null);
            oCFDItemComp.CopyFieldValue (""PROD_HIERA"",     null);
            oCFDItemComp.CopyFieldValue (""MATL_GROUP"",     null);
                 
         } 
      }
      
   }
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", d.getMonth()+1, d.getDate(), d.getFullYear(), d.getHours(), d.getMinutes(), d.getSeconds()); 
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 4 $
//      $Date: 12/10/99 10:29a $
//    $Author: Achaudhr $ of last update
//
// CREATOR:    P. Lim
//
// DESCRIPTION
//    Javascript maps from Siebel Order to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
/* This function shared by ""Simulate Order"" and ""Create Order"" */
"
function CreateSAPOrder_BAPIToSiebel (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   BAPI Export (Order - Create SAP Order (BAPI Output))
    *     Export Parameters (output)
    *
    * Output Object's Integration Components:
    *   Order Object (Order - Create SAP Order (Siebel))
    *     Order (oOrder)
    *       Create Output
    */

   /*
    * Set up EAI Lookup objects
    */
   var currencyLM = new CSSEAIValueMap (""SAP Currency Code"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iCFDOrderObj;   // BAPI Order instance
   var iCFDExportComp; // BAPI Export Parameters

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;      // Siebel Order instance
   var oOrderComp;     // Order
   var oCFDOutputComp; // Create Output

   /*
    * Find and create top-level integration object
    */
   iCFDOrderObj = inputMsg.GetIntObj(""Order - Create SAP Order (BAPI Output)"");
   oOrderObj = outputMsg.CreateIntObj (""Order - Create SAP Order (Siebel)"");

   /*
    * Read int object instances from EAI message
    */
   while (iCFDOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object
       */
      oOrderObj.NewInstance ();

      /*
       * Create ""Order"" component in output message
       */
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order"");
      oOrderComp.NewRecord();
      // Set ""Id"" so Siebel Adapter can synchronize
      oOrderComp.SetFieldValue (""Id"", inputId);

      /*
       * Read ""Export Parameters"" component
       */
      iCFDExportComp = iCFDOrderObj.GetPrimaryIntComp (""Export Parameters"");
      oCFDOutputComp = oOrderComp.CreateIntComp (""Create Output"", oOrderComp);
      if (iCFDExportComp.NextRecord ())
      {
         /*
          * Write ""Create Output"" component
          */
         oCFDOutputComp.NewRecord ();
         oCFDOutputComp.SetCopySource  (iCFDExportComp);
         oCFDOutputComp.SetFieldValue  (""Input Id"",     inputId);
         oCFDOutputComp.CopyFieldValue (""Bill To Customer"",  ""BILLING_PARTY-PAYER"");
         oCFDOutputComp.CopyFieldValue (""Bill To Name"",      ""BILLING_PARTY-NAME"");
         oCFDOutputComp.CopyFieldValue (""Order Number"",      ""SALESDOCUMENT"");
         oCFDOutputComp.CopyFieldValue (""Return Code"",       ""RETURN-CODE"");
         oCFDOutputComp.CopyFieldValue (""Return Log Msg No"", ""RETURN-LOG_MSG_NO"");
         oCFDOutputComp.CopyFieldValue (""Return Log No"",     ""RETURN-LOG_NO"");
         oCFDOutputComp.CopyFieldValue (""Return Message"",    ""RETURN-MESSAGE"");
         oCFDOutputComp.CopyFieldValue (""Return Type"",       ""RETURN-TYPE"");
         oCFDOutputComp.CopyFieldValue (""Ship To Customer"",  ""SHIP_TO_PARTY-SHIP_TO"");
         oCFDOutputComp.CopyFieldValue (""Ship To Name"",      ""SHIP_TO_PARTY-NAME"");
         oCFDOutputComp.CopyFieldValue (""Sold To Customer"",  ""SOLD_TO_PARTY-SOLD_TO"");
         oCFDOutputComp.CopyFieldValue (""Sold To Name"",      ""SOLD_TO_PARTY-NAME"");

         /*
          * Update ""Order"" component
          */
         oOrderComp.SetCopySource  (iCFDExportComp);
         oOrderComp.CopyFieldValue (""Integration Id"",                 ""SALESDOCUMENT"");
         oOrderComp.CopyFieldValue (""Ship To Account Integration Id"", ""SHIP_TO_PARTY-SHIP_TO"");
         oOrderComp.CopyFieldValue (""Bill To Account Integration Id"", ""BILLING_PARTY-PAYER"");

         var currencyCode = currencyLM.Translate (iCFDExportComp.GetFieldValue (""SOLD_TO_PARTY-CURRENCY""));
         if (currencyCode != null && currencyCode != """")
            oOrderComp.SetFieldValue  (""Currency Code"", currencyCode);
      }
   }
}
"
function CreateSAPOrder_SiebelToBAPI (inputMsg, outputMsg)
{
   /* Uses same map as CreateFromData() */
   CreateSimulateSAPOrder_SiebelToBAPI (inputMsg, outputMsg,
                                        ""Order - Create SAP Order (Siebel)"",
                                        ""Order - Create SAP Order (BAPI Input)"");
}
"
function CreateSimulateSAPOrder_SiebelToBAPI (inputMsg, outputMsg, InputIntObjName, OutputIntObjName)
{
   /*
    * Input Objects' Integration Components
    *   Order Object (Order - Create SAP Order (Siebel))
    *     Order (order)
    *       Order Line Item (item)
    *
    * Output Object's Integration Components:
    *   BAPI Import Object (Order - Create SAP Order (BAPI Import))
    *     Import Parameters
    *       ORDER_PARTNERS
    *       ORDER_ITEMS_IN
    */

   /*
    * Set up EAI Lookup maps
    */
   var orderTypeLM = EAIGetValueMap (""SAP Order Types"",     ""Siebel Outbound"");
   var incotermsLM = EAIGetValueMap (""SAP Incoterms"",       ""Siebel Outbound"");
   var payTermsLM  = EAIGetValueMap (""SAP Payment Terms"",   ""Siebel Outbound"");
   var uomLM       = EAIGetValueMap (""SAP Unit of Measure"", ""Siebel Outbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iOrderObj;  // Order object instance
   var iOrderComp; // Order
   var iItemComp;  // Order Line Item

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oCFDOrderObj;    // BAPI Order instance
   var oCFDImportComp;  // BAPI Import parameters
   var oCFDItemComp;    // BAPI Order Item
   var oCFDPartnerComp; // BAPI Order Partners

   /*
    * Find and create top-level integration object
    */
   iOrderObj = inputMsg.GetIntObj (InputIntObjName);
   oCFDOrderObj = outputMsg.CreateIntObj (OutputIntObjName);
   
   /*
    * Read int object instances from EAI message
    */
   while (iOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object in output message
       */
      oCFDOrderObj.NewInstance ();

      /*
       * Read ""Order"" component
       */
      iOrderComp = iOrderObj.GetPrimaryIntComp (""Order"");
      oCFDImportComp = oCFDOrderObj.CreatePrimaryIntComp (""Import Parameters"");
      if (iOrderComp.NextRecord ())
      {
         /*
          * Return an error if Integration Id is not null
          */
         if (iOrderComp.GetFieldValue (""Integration Id"") != """")
         {
            EAIRaiseError (""This order has already been submitted to the external system."");
         }

         /*
          * Write ""Import Parameters"" component
          */
         oCFDImportComp.NewRecord ();
         oCFDImportComp.SetCopySource  (iOrderComp);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DOC_NUMBER"", null);
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DOC_TYPE"", 
                                        orderTypeLM.Translate (iOrderComp.GetFieldValue (""Order Type"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-COLLECT_NO"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_ORG"",  ""SAP Sales Organization"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DISTR_CHAN"", ""SAP Distribution Channel"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DIVISION"",   ""SAP Division"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_GRP"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_OFF"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"", ""Requested Ship Date"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DATE_TYPE"",  ""1"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_NO"",   ""Order Number"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_DATE"", ""Order Date"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PO_METHOD"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PO_SUPPLEM"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REF_1"",      ""Account Order Number"");

         // Set NAME only if ""Contact Id"" is not null.
         if (iOrderComp.GetFieldValue (""Contact Id"") != null)
         {
            oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-NAME"",
                                          EAIFormatPersonName (iOrderComp.GetFieldValue (""Contact First Name""),
                                                               iOrderComp.GetFieldValue (""Contact Last Name"")));
         }

         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-TELEPHONE"",  ""Contact Work Phone #"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PRICE_GRP"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GROUP"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_DIST"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PRICE_LIST"", null);
         oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-INCOTERMS1"", 
                                       incotermsLM.Translate (iOrderComp.GetFieldValue (""Freight Terms"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-INCOTERMS2"", ""Freight Terms Info"");
         oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-PMNTTRMS"", 
                                       payTermsLM.Translate (iOrderComp.GetFieldValue (""Payment Term"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DLV_BLOCK"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-BILL_BLOCK"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-ORD_REASON"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PRICE_DATE"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-QT_VALID_F"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-QT_VALID_T"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CT_VALID_F"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CT_VALID_T"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP1"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP2"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP3"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP4"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP5"",  null);

         /*
          * Write ""ORDER_PARTNERS"" component (pivot from values in iOrderComp!)
          */
         /*
           NOTES:
           1. one row each Sold-to, Ship-to and Bill-to account,
              so we must pivot S_ORDER columns into rows using a UNION.
              SAP BAPI will return error if required ones are missing
           2. SO partner types are stored in TPAR.
           3. RE is for Bill-to, but we map RG (payer) to S_ORDER.BL_OU_ID
           4. P Lim. 5/19/99. We must always pass a row for 'AG' partner role because
              for some reason, SAP reuses the last function call's values.
         */
         oCFDPartnerComp = oCFDImportComp.CreateIntComp (""ORDER_PARTNERS"", oCFDImportComp);

         // Sold to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""AG"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Account Integration Id"");

         // Ship To partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""WE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Ship To Account Integration Id"");

         // Payer partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RG"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Bill To Account Integration Id"");

         /*
          * Read ""Order Line Item"" component
          */
         iItemComp = iOrderComp.GetIntComp (""Order Line Item"");
         oCFDItemComp = oCFDImportComp.CreateIntComp (""ORDER_ITEMS_IN"", oCFDImportComp);
         while (iItemComp.NextRecord ())
         {
            /*
             * Write ""ORDER_ITEMS_IN"" component
             */
            oCFDItemComp.NewRecord ();
            oCFDItemComp.SetCopySource  (iItemComp);
            oCFDItemComp.CopyFieldValue (""ITM_NUMBER"",     ""Line Number"");
            oCFDItemComp.CopyFieldValue (""HG_LV_ITEM"",     null);
            oCFDItemComp.CopyFieldValue (""PO_ITM_NO"",      ""Line Number"");
            oCFDItemComp.CopyFieldValue (""MATERIAL"",       ""Product Integration Id"");
            oCFDItemComp.CopyFieldValue (""CUST_MAT"",       null);
            oCFDItemComp.CopyFieldValue (""BATCH"",          null);
            oCFDItemComp.CopyFieldValue (""DLV_GROUP"",      null);
            oCFDItemComp.CopyFieldValue (""PART_DLV"",       null);
            oCFDItemComp.CopyFieldValue (""REASON_REJ"",     null);
            oCFDItemComp.CopyFieldValue (""BILL_BLOCK"",     null);
            oCFDItemComp.CopyFieldValue (""BILL_DATE"",      null);
            oCFDItemComp.CopyFieldValue (""PLANT"",          null);
            oCFDItemComp.CopyFieldValue (""STORE_LOC"",      null);
            oCFDItemComp.CopyFieldValue (""TARGET_QTY"",     null);
            oCFDItemComp.CopyFieldValue (""TARGET_QU"",      null);
            oCFDItemComp.CopyFieldValue (""REQ_QTY"",        ""Quantity Requested"");
            oCFDItemComp.SetFieldValue  (""SALES_UNIT"", 
                                         uomLM.Translate (iItemComp.GetFieldValue (""Product Unit of Measure"")));
            oCFDItemComp.CopyFieldValue (""ITEM_CATEG"",     null);
            oCFDItemComp.CopyFieldValue (""SHORT_TEXT"",     ""Description"");
            oCFDItemComp.CopyFieldValue (""REQ_DATE"",       ""Due Date"");
            oCFDItemComp.SetFieldValue  (""DATE_TYPE"",      ""1"");
            oCFDItemComp.CopyFieldValue (""REQ_TIME"",       null);
            oCFDItemComp.SetFieldValue  (""COND_TYPE"",      ""PB00"");
            // Item Price is price after discounts (i.e. net price)
            oCFDItemComp.CopyFieldValue (""COND_VALUE"",     ""Item Price"");
            oCFDItemComp.SetFieldValue  (""COND_P_UNT"",     ""1"");
            oCFDItemComp.SetFieldValue  (""COND_D_UNT"", 
                                         uomLM.Translate (iItemComp.GetFieldValue (""Product Unit of Measure"")));
            oCFDItemComp.CopyFieldValue (""PRC_GROUP1"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP2"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP3"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP4"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP5"",     null);
            oCFDItemComp.CopyFieldValue (""PROD_HIERA"",     null);
            oCFDItemComp.CopyFieldValue (""MATL_GROUP"",     null);
         }
      }
   }
}
"
function GetSAPOrderStatus_BAPIToSiebel (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   BAPI Export (Order - Get SAP Order Status (BAPI Output))
    *     Export Parameters (output)
    *       Order Header (header)
    *         Order Item (item)
    *           Order Item Delivery Item (deliv)
    *
    * Output Object's Integration Components:
    *   Order Object (Order - Get SAP Order Status (Siebel))
    *     Order (oOrder)
    *       Get Status Output
    *       Get Status Header
    *         Get Status Item
    *           Get Status Item Delivery Item
    *       Order Line Item
    *         Order Line Item Action
    */

   /*
    * Set up EAI Lookup objects
    */
   var currencyLM = EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iGSOrderObj;   // BAPI Order instance
   var iGSExportComp; // BAPI Export Parameters
   var iGSHeaderComp; // BAPI Order Header
   var iGSItemComp;   // BAPI Order Item
   var iGSDelivComp;  // BAPI Order Item Delivery Item

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;     // Siebel Orderinstance
   var oOrderComp;    // Order
   var oItemComp;     // Order Line Item
   var oDelivComp;    // Order Line Item Action
   var oGSOutputComp; // Create Output
   var oGSHeaderComp; // Create Header
   var oGSItemComp;   // Create Item
   var oGSDelivComp;  // Create Item Delivery Item


   /*
    * Find and create top-level integration object
    */
   iGSOrderObj = inputMsg.GetIntObj(""Order - Get SAP Order Status (BAPI Output)"");
   oOrderObj = outputMsg.CreateIntObj (""Order - Get SAP Order Status (Siebel)"");

   /*
    * Read int object instances from EAI message
    */

   while (iGSOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object in output message
       */
      oOrderObj.NewInstance ();
      
      /*
       * Create ""Order"" component
       */
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order"");
      oOrderComp.NewRecord ();
      // Set ""Id"" so Siebel Adapter can synchronize
      oOrderComp.SetFieldValue (""Id"", inputId);
      
      /*
       * Read ""Export Parameters"" component
       */
      iGSExportComp = iGSOrderObj.GetPrimaryIntComp (""Export Parameters"");
      
      /*
       * Create the output component. Defer creation if the ""Export Parameters"" component
       * does not exist.
       *
       */
      oGSOutputComp = oOrderComp.CreateIntComp (""Get Status Output"", iGSExportComp.Exists());
      if (iGSExportComp.NextRecord())
      {
         /*
          * Write ""Create Output"" component
          */
         oGSOutputComp.NewRecord ();
         oGSOutputComp.SetCopySource  (iGSExportComp);
         oGSOutputComp.SetFieldValue  (""Input Id"",     inputId);
         oGSOutputComp.CopyFieldValue (""Return Code"",       ""RETURN-CODE"");
         oGSOutputComp.CopyFieldValue (""Return Log Msg No"", ""RETURN-LOG_MSG_NO"");
         oGSOutputComp.CopyFieldValue (""Return Log No"",     ""RETURN-LOG_NO"");
         oGSOutputComp.CopyFieldValue (""Return Message"",    ""RETURN-MESSAGE"");
         oGSOutputComp.CopyFieldValue (""Return Type"",       ""RETURN-TYPE"");
         
         /*
          * Read ""Order Header"" component
          */
         iGSHeaderComp = iGSExportComp.GetIntComp (""Order Header"");
         oGSHeaderComp = oOrderComp.CreateIntComp (""Get Status Header"", iGSHeaderComp.Exists());

         // Singleton entry in input - 'if' is symbolic of not looping
         if (iGSHeaderComp.NextRecord ())
         {
            /*
             * Write ""Get Status Header"" component
             */
            oGSHeaderComp.NewRecord ();
            oGSHeaderComp.SetCopySource  (iGSHeaderComp);
            oGSHeaderComp.SetFieldValue  (""Input Id"",    inputId);
            oGSHeaderComp.CopyFieldValue (""Currency"",        ""CURRENCY"");
            oGSHeaderComp.CopyFieldValue (""Delivery Block"",  ""DLV_BLOCK"");
            oGSHeaderComp.CopyFieldValue (""Delivery Status"", ""DLV_STAT_H"");
            oGSHeaderComp.CopyFieldValue (""Order Date"",      ""DOC_DATE"");
            oGSHeaderComp.CopyFieldValue (""Order Number"",    ""DOC_NUMBER"");
            oGSHeaderComp.CopyFieldValue (""Pricing Status"",  ""PRC_STAT_H"");
            oGSHeaderComp.CopyFieldValue (""Purchase Order"",  ""PURCH_NO"");
            oGSHeaderComp.CopyFieldValue (""Requested Date"",  ""REQ_DATE_H"");
            
            /*
             * Update ""Order"" component
             */
            oOrderComp.SetCopySource  (iGSHeaderComp);
            
            // EAI Lookup code ""SAP Currency""
            var currencyCode = currencyLM.Translate (iGSHeaderComp.GetFieldValue (""CURRENCY""));
            if (currencyCode != null && currencyCode != """")
               oOrderComp.SetFieldValue  (""Currency Code"", currencyCode);
            
            oOrderComp.CopyFieldValue (""Requested Ship Date"",     ""REQ_DATE_H"");
            /* P Lim 6/9/99. 12-LGEKF. Removed mapping of SAP Purch_no to Siebel ORDER_NUM */
            // oOrderComp.SetFieldValue (""Order Number"",    ""PURCH_NO"");
            
            /*
             * Read ""Order Item"" component
             */
            iGSItemComp = iGSHeaderComp.GetIntComp (""Order Item"");
            
            oGSItemComp = oGSHeaderComp.CreateIntComp (""Get Status Item"", iGSItemComp.Exists());
            oItemComp   = oOrderComp.CreateIntComp (""Order Line Item"", iGSItemComp.Exists());
            while (iGSItemComp.NextRecord ())
            {
               /*
                * Write ""Get Status Item"" component
                */
               oGSItemComp.NewRecord ();
               oGSItemComp.SetCopySource  (iGSItemComp);
               oGSItemComp.SetFieldValue  (""Input Id"",                  inputId);
               oGSItemComp.CopyFieldValue (""Condition Pricing Unit"",        ""COND_P_UNT"");
               oGSItemComp.CopyFieldValue (""Condition Unit"",                ""COND_UNIT"");
               oGSItemComp.CopyFieldValue (""Cumulative Confirmed Quantity"", ""CUM_CF_QTY"");
               oGSItemComp.CopyFieldValue (""Delivery Status"",               ""DLV_STAT_I"");
               oGSItemComp.CopyFieldValue (""Item Number"",                   ""ITM_NUMBER"");
               oGSItemComp.CopyFieldValue (""Material Part #"",               ""MATERIAL"");
               oGSItemComp.CopyFieldValue (""Material Short Text"",           ""SHORT_TEXT"");
               oGSItemComp.CopyFieldValue (""Net Price"",                     ""NET_PRICE"");
               oGSItemComp.CopyFieldValue (""Net Value"",                     ""NET_VALUE"");
               oGSItemComp.CopyFieldValue (""Reference Quantity"",            ""REF_QTY"");
               oGSItemComp.CopyFieldValue (""Requested Quantity"",            ""REQ_QTY"");
               oGSItemComp.CopyFieldValue (""Requested Ship Date"",           ""REQ_DATE"");
               oGSItemComp.CopyFieldValue (""Sales Unit"",                    ""SALES_UNIT"");
               
               /*
                * Write ""Order Line Item"" component
                */
               /*
                 NOTES: 
                 1. REF_QTY stores QTY submitted to next document (in this case, the deliveries).
                 So, this is equivalent to sum(item.DLV_QTY)
                 2. P Lim 5/28/99. Force prices into SAP. Do not update S_ORDER_ITEM.UNI_PRI (discount price).
                 SAP Line Items view will show Siebel prices AND SAP prices on same list view.
                 item.NET_PRICE UNIT_PRI
                 3. SAP columns not mapped to S_ORDER_ITEM (and exposed in SAP Line Items applet):
                 CUM_CF_QTY    NUMBER(15)
                 COND_P_UNT    VARCHAR2(5)
                 COND_UNIT     VARCHAR2(3)
                 DLV_STAT_I    VARCHAR2(1)
               */
               //var itemMaterial = EAIGetProperty (item.source, ""MATERIAL"");
               var itemMaterial = iGSItemComp.GetFieldValue (""MATERIAL"");
               
               oItemComp.NewRecord ();
               oItemComp.SetCopySource  (iGSItemComp);
               oItemComp.SetFieldValue  (""Product Integration Id"", itemMaterial);
               oItemComp.CopyFieldValue (""Line Number"",            ""ITM_NUMBER"");
               oItemComp.CopyFieldValue (""Quantity Requested"",     ""REQ_QTY"");
               oItemComp.CopyFieldValue (""Quantity Shipped"",       ""REF_QTY"");
               oItemComp.CopyFieldValue (""Due Date"",               ""REQ_DATE"");
               oItemComp.CopyFieldValue (""Description"",            ""SHORT_TEXT"");
               // In 2K: Defaults from buscomp. In 99.5: {fn ifnull(S_ORDER_ITEM.STATUS_CD, 'Open')}
               // item.CopyFieldValue (""Status"",              Open);
               
               /*
                * Read ""Order Item Delivery Item"" component
                */
               iGSDelivComp = iGSItemComp.GetIntComp (""Order Item Delivery Item"");
               
               oGSDelivComp = oGSItemComp.CreateIntComp (""Get Status Item Delivery Item"", iGSDelivComp.Exists());
               oDelivComp   = oItemComp.CreateIntComp (""Order Line Item Action"", iGSDelivComp.Exists());
               
               while (iGSDelivComp.NextRecord ())
               {
                  /*
                   * Write ""Get Status Item Delivery Item"" component
                   */
                  oGSDelivComp.NewRecord ();
                  oGSDelivComp.SetCopySource  (iGSDelivComp);
                  oGSDelivComp.SetFieldValue  (""Input Id"",             inputId);
                  oGSDelivComp.CopyFieldValue (""Delivered Quantity"",   ""DLV_QTY"");
                  oGSDelivComp.CopyFieldValue (""Delivery Date"",        ""DELIV_DATE"");
                  oGSDelivComp.CopyFieldValue (""Delivery Item Number"", ""DELIV_ITEM"");
                  oGSDelivComp.CopyFieldValue (""Delivery Number"",      ""DELIV_NUMB"");
                  oGSDelivComp.CopyFieldValue (""Item Number"",          ""ITM_NUMBER"");
                  
                  /*
                   * Write ""Get Status Item Delivery Item"" component
                   */
                  oDelivComp.NewRecord ();
                  oDelivComp.SetCopySource  (iGSDelivComp);
                  
                  var delivNum  = iGSDelivComp.GetFieldValue (""DELIV_NUMB"");
                  var delivItem = iGSDelivComp.GetFieldValue (""DELIV_ITEM"");
                  if (delivNum == null || delivItem == null)
                  {
                     EAIRaiseError (""'DELIV_NUMB' and 'DELIV_ITEM' fields are not specified."");
                  }
                  var itemActionNum = delivNum + ""-"" + delivItem;
                  oDelivComp.SetFieldValue  (""Line Item Action Number"", itemActionNum);
                  oDelivComp.CopyFieldValue (""Quantity"",                ""DLV_QTY"");
                  oDelivComp.CopyFieldValue (""Actual Start Date"",       ""DELIV_DATE"");
                  oDelivComp.SetFieldValue  (""Product Integration Id"",  itemMaterial);

                  var shipValue = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_PART_MOVEMENT_TYPE"", ""Ship"");
                  // TheApplication().MsgBox ("foo is: "" + foo);
                  oDelivComp.SetFieldValue  (""Line Item Action Type"",   shipValue);
               }
            }
         }
      }
   }
}
"
function GetSAPOrderStatus_SiebelToBAPI (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   Order Object (Order - Get SAP Order nStatus (Siebel))
    *     Order
    *
    * Output Object's Integration Components:
    *   BAPI Import (Order - Get SAP Order Status (BAPI Input))
    *     Import Parameters
    */

   /*
    * Set up EAI Lookup objects
    */

   /*
    * Set up EAI Input Message objects
    */
   var iOrderObj;    // Siebel Order instance
   var iOrderComp;   // Order

   /*
    * Set up EAI Output Message objects
    */
   var oGSObj;         // BAPI instance
   var oGSImportComp;  // Import Parameters

   /*
    * Find and create top-level integration object
    */
   iOrderObj = inputMsg.GetIntObj (""Order - Get SAP Order Status (Siebel)"");
   oGSObj    = outputMsg.CreateIntObj (""Order - Get SAP Order Status (BAPI Input)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iOrderObj.NextInstance ())
   {
      /*
       * Create ""Get Status"" object
       */
      oGSObj.NewInstance ();

      /*
       * Read ""Order"" component
       */
      iOrderComp = iOrderObj.GetPrimaryIntComp (""Order"");
      oGSImportComp = oGSObj.CreatePrimaryIntComp (""Import Parameters"");
      if (iOrderComp.NextRecord ())
      {
         /*
          * Write ""Import Parameters"" component
          */
         oGSImportComp.NewRecord ();
         oGSImportComp.SetCopySource  (iOrderComp);
         oGSImportComp.CopyFieldValue (""SALESDOCUMENT"", ""Integration Id"");
      }
   }
}
"
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"
function SimulateSAPOrder_BAPIToSiebel (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   BAPI Export (Order - Simulate SAP Order (BAPI Output))
    *     Export Parameters (output)
    *
    * Output Object's Integration Components:
    *   Order Object (Order - Simulate SAP Order (Siebel))
    *     Order (oOrder)
    *       Simulate Output
    *         Simulate Item
    */

   /*
    * Set up EAI Lookup objects
    */
   var currencyLM = EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iSimOrderObj;   // BAPI Order instance
   var iSimExportComp; // BAPI Export Parameters
   var iSimItemComp;   // BAPI Order Items

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;      // Siebel Order instance
   var oOrderComp;     // Order
   var oSimOutputComp; // Simulate Output
   var oSimItemComp;   // Simulate Item

   /*
    * Find and create top-level integration object
    */
   iSimOrderObj = inputMsg.GetIntObj (""Order - Simulate SAP Order (BAPI Output)"");
   oOrderObj = outputMsg.CreateIntObj (""Order - Simulate SAP Order (Siebel)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iSimOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object
       */
      oOrderObj.NewInstance ();

      /*
       * Create ""Order"" component in output message
       */
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order"");
      oOrderComp.NewRecord ();
      // Set ""Id"" so Siebel Adapter can synchronize
      oOrderComp.SetFieldValue (""Id"", inputId);

      /*
       * Read ""Export Parameters"" component
       */
      iSimExportComp = iSimOrderObj.GetPrimaryIntComp (""Export Parameters"");
      oSimOutputComp = oOrderComp.CreateIntComp (""Simulate Output"", oOrderComp);
      if (iSimExportComp.NextRecord ())
      {
         /*
          * Write ""Simulate Output"" component
          */
         oSimOutputComp.NewRecord ();
         oSimOutputComp.SetCopySource  (iSimExportComp);
         oSimOutputComp.SetFieldValue  (""Input Id"",          inputId);
         oSimOutputComp.CopyFieldValue (""Bill To Customer"",  ""BILLING_PARTY-PAYER"");
         oSimOutputComp.CopyFieldValue (""Bill To Name"",      ""BILLING_PARTY-NAME"");
         oSimOutputComp.CopyFieldValue (""Order Number"",      ""SALESDOCUMENT"");
         oSimOutputComp.CopyFieldValue (""Return Code"",       ""RETURN-CODE"");
         oSimOutputComp.CopyFieldValue (""Return Log Msg No"", ""RETURN-LOG_MSG_NO"");
         oSimOutputComp.CopyFieldValue (""Return Log No"",     ""RETURN-LOG_NO"");
         oSimOutputComp.CopyFieldValue (""Return Message"",    ""RETURN-MESSAGE"");
         oSimOutputComp.CopyFieldValue (""Return Type"",       ""RETURN-TYPE"");
         oSimOutputComp.CopyFieldValue (""Ship To Customer"",  ""SHIP_TO_PARTY-SHIP_TO"");
         oSimOutputComp.CopyFieldValue (""Ship To Name"",      ""SHIP_TO_PARTY-NAME"");
         oSimOutputComp.CopyFieldValue (""Sold To Customer"",  ""SOLD_TO_PARTY-SOLD_TO"");
         oSimOutputComp.CopyFieldValue (""Sold To Name"",      ""SOLD_TO_PARTY-NAME"");

         /*
          * Update ""Order"" component
          */
         oOrderComp.SetCopySource  (iSimExportComp);
         // P Lim. Do not set Order Integration Id: Simulate BAPI does not return an Order number
         // oOrderComp.CopyFieldValue (""Integration Id"",                 ""SALESDOCUMENT"");
         oOrderComp.CopyFieldValue (""Ship To Account Integration Id"", ""SHIP_TO_PARTY-SHIP_TO"");
         oOrderComp.CopyFieldValue (""Bill To Account Integration Id"", ""BILLING_PARTY-PAYER"");

         var currencyCode = currencyLM.Translate (iSimExportComp.GetFieldValue (""SOLD_TO_PARTY-CURRENCY""));
         if (currencyCode != null && currencyCode != """")
            oOrderComp.SetFieldValue  (""Currency Code"", currencyCode);

         /*
          * Read ""Simulate Item"" component
          */
         iSimItemComp = iSimExportComp.GetIntComp (""Simulate Item"");
         oSimItemComp = oOrderComp.CreateIntComp (""Simulate Item"", oOrderComp);
         while (iSimItemComp.NextRecord ())
         {
            oSimItemComp.NewRecord ();
            oSimItemComp.SetCopySource  (iSimItemComp);
            oSimItemComp.SetFieldValue  (""Input Id"",                   inputId);
            oSimItemComp.CopyFieldValue (""Currency Code"",              ""CURRENCY"");
            oSimItemComp.CopyFieldValue (""Delivery Date"",              ""DLV_DATE"");
            oSimItemComp.CopyFieldValue (""Item Number"",                ""ITM_NUMBER"");
            oSimItemComp.CopyFieldValue (""Material Entered"",           ""MAT_ENTRD"");
            oSimItemComp.CopyFieldValue (""Material Part #"",            ""MATERIAL"");
            oSimItemComp.CopyFieldValue (""Material Short Text"",        ""SHORT_TEXT"");
            oSimItemComp.CopyFieldValue (""Net Value"",                  ""NET_VALUE"");
            oSimItemComp.CopyFieldValue (""Purchase Order Item Number"", ""PO_ITM_NO"");
            oSimItemComp.CopyFieldValue (""Quantity Requested Date"",    ""QTY_REQ_DT"");
            oSimItemComp.CopyFieldValue (""Replenishment Time"",         ""REPL_TIME"");
            oSimItemComp.CopyFieldValue (""Unit"",                       ""SALES_UNIT"");
         }
      }
   }
}
"
function SimulateSAPOrder_SiebelToBAPI (inputMsg, outputMsg)
{
   /* Uses same map as CreateFromData() */
   CreateSimulateSAPOrder_SiebelToBAPI (inputMsg, outputMsg, 
                                        ""Order - Simulate SAP Order (Siebel)"", 
                                        ""Order - Simulate SAP Order (BAPI Input)"");
}
"
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 4 $
//      $Date: 12/10/99 10:29a $
//    $Author: Achaudhr $ of last update
//
// CREATOR:    R.Lankinen
//
// DESCRIPTION
//    Multi-organization Javascript maps from Siebel Order to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
/* This function shared by ""Simulate Order"" and ""Create Order"" */
"
function CreateSAPOrder_BAPIToSiebel (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   BAPI Export (Order - Create SAP Order (BAPI Output))
    *     Export Parameters (output)
    *
    * Output Object's Integration Components:
    *   Order Object (Order - Create SAP Order (Siebel))
    *     Order (oOrder)
    *       Create Output
    */

   /*
    * Set up EAI Lookup objects
    */
   var currencyLM = new CSSEAIValueMap (""SAP Currency Code"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iCFDOrderObj;   // BAPI Order instance
   var iCFDExportComp; // BAPI Export Parameters

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;      // Siebel Order instance
   var oOrderComp;     // Order
   var oCFDOutputComp; // Create Output

   /*
    * Find and create top-level integration object
    */
   iCFDOrderObj = inputMsg.GetIntObj(""Order - Create SAP Order (BAPI Output)"");
   oOrderObj = outputMsg.CreateIntObj (""Order - Create SAP Order (MO)"");

   /*
    * Read int object instances from EAI message
    */
   while (iCFDOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object
       */
      oOrderObj.NewInstance ();

      /*
       * Create ""Order"" component in output message
       */
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order"");
      oOrderComp.NewRecord();
      // Set ""Id"" so Siebel Adapter can synchronize
      oOrderComp.SetFieldValue (""Id"", inputId);

      /*
       * Read ""Export Parameters"" component
       */
      iCFDExportComp = iCFDOrderObj.GetPrimaryIntComp (""Export Parameters"");
      oCFDOutputComp = oOrderComp.CreateIntComp (""Create Output"", oOrderComp);
      if (iCFDExportComp.NextRecord ())
      {
         /*
          * Write ""Create Output"" component
          */
         oCFDOutputComp.NewRecord ();
         oCFDOutputComp.SetCopySource  (iCFDExportComp);
         oCFDOutputComp.SetFieldValue  (""Input Id"",     inputId);
         oCFDOutputComp.CopyFieldValue (""Bill To Customer"",  ""BILLING_PARTY-PAYER"");
         oCFDOutputComp.CopyFieldValue (""Bill To Name"",      ""BILLING_PARTY-NAME"");
         oCFDOutputComp.CopyFieldValue (""Order Number"",      ""SALESDOCUMENT"");
         oCFDOutputComp.CopyFieldValue (""Return Code"",       ""RETURN-CODE"");
         oCFDOutputComp.CopyFieldValue (""Return Log Msg No"", ""RETURN-LOG_MSG_NO"");
         oCFDOutputComp.CopyFieldValue (""Return Log No"",     ""RETURN-LOG_NO"");
         oCFDOutputComp.CopyFieldValue (""Return Message"",    ""RETURN-MESSAGE"");
         oCFDOutputComp.CopyFieldValue (""Return Type"",       ""RETURN-TYPE"");
         oCFDOutputComp.CopyFieldValue (""Ship To Customer"",  ""SHIP_TO_PARTY-SHIP_TO"");
         oCFDOutputComp.CopyFieldValue (""Ship To Name"",      ""SHIP_TO_PARTY-NAME"");
         oCFDOutputComp.CopyFieldValue (""Sold To Customer"",  ""SOLD_TO_PARTY-SOLD_TO"");
         oCFDOutputComp.CopyFieldValue (""Sold To Name"",      ""SOLD_TO_PARTY-NAME"");

         /*
          * Update ""Order"" component
          */
         oOrderComp.SetCopySource  (iCFDExportComp);
         oOrderComp.CopyFieldValue (""Integration Id"",                 ""SALESDOCUMENT"");
         oOrderComp.CopyFieldValue (""Ship To Account Integration Id"", ""SHIP_TO_PARTY-SHIP_TO"");
         oOrderComp.CopyFieldValue (""Bill To Account Integration Id"", ""BILLING_PARTY-PAYER"");
         oOrderComp.SetFieldValue  (""Currency Code"", 
                                    currencyLM.Translate (iCFDExportComp.GetFieldValue (""SOLD_TO_PARTY-CURRENCY"")));
      }
   }
}
"
function CreateSAPOrder_SiebelToBAPI (inputMsg, outputMsg)
{
   /* Uses same map as CreateFromData() */
   CreateSimulateSAPOrder_SiebelToBAPI (inputMsg, outputMsg,
                                        ""Order - Create SAP Order (MO)"",
                                        ""Order - Create SAP Order (BAPI Input)"");
}
"
function CreateSimulateSAPOrder_SiebelToBAPI (inputMsg, outputMsg, InputIntObjName, OutputIntObjName)
{
   /*
    * Input Objects' Integration Components
    *   Order Object (Order - Create SAP Order (MO))
    *     Order (order)
    *       Order Line Item (item)
    *
    * Output Object's Integration Components:
    *   BAPI Import Object (Order - Create SAP Order (BAPI Import))
    *     Import Parameters
    *       ORDER_PARTNERS
    *       ORDER_ITEMS_IN
    */

   /*
    * Set up EAI Lookup maps
    */
   var orderTypeLM = EAIGetValueMap (""SAP Order Types"",     ""Siebel Outbound"");
   var incotermsLM = EAIGetValueMap (""SAP Incoterms"",       ""Siebel Outbound"");
   var payTermsLM  = EAIGetValueMap (""SAP Payment Terms"",   ""Siebel Outbound"");
   var uomLM       = EAIGetValueMap (""SAP Unit of Measure"", ""Siebel Outbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iOrderObj;  // Order object instance
   var iOrderComp; // Order
   var iItemComp;  // Order Line Item

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oCFDOrderObj;    // BAPI Order instance
   var oCFDImportComp;  // BAPI Import parameters
   var oCFDItemComp;    // BAPI Order Item
   var oCFDPartnerComp; // BAPI Order Partners

   /*
    * Find and create top-level integration object
    */
   iOrderObj = inputMsg.GetIntObj (InputIntObjName);
   oCFDOrderObj = outputMsg.CreateIntObj (OutputIntObjName);
   
   /*
    * Read int object instances from EAI message
    */
   while (iOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object in output message
       */
      oCFDOrderObj.NewInstance ();

      /*
       * Read ""Order"" component
       */
      iOrderComp = iOrderObj.GetPrimaryIntComp (""Order"");
      oCFDImportComp = oCFDOrderObj.CreatePrimaryIntComp (""Import Parameters"");
      if (iOrderComp.NextRecord ())
      {
         /*
          * Return an error if Integration Id is not null
          */
         if (iOrderComp.GetFieldValue (""Integration Id"") != """")
         {
            EAIRaiseError (""This order has already been submitted to the external system."");
         }

         /*
          * Write ""Import Parameters"" component
          */
         oCFDImportComp.NewRecord ();
         oCFDImportComp.SetCopySource  (iOrderComp);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DOC_NUMBER"", null);
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DOC_TYPE"", 
                                        orderTypeLM.Translate (iOrderComp.GetFieldValue (""Order Type"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-COLLECT_NO"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_ORG"",  ""SAP Sales Organization (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DISTR_CHAN"", ""SAP Distribution Channel (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DIVISION"",   ""SAP Division (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_GRP"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_OFF"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"", ""Requested Ship Date"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DATE_TYPE"",  ""1"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_NO"",   ""Order Number"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_DATE"", ""Order Date"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PO_METHOD"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PO_SUPPLEM"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REF_1"",      ""Account Order Number"");

         // Set NAME only if ""Contact Id"" is not null.
         if (iOrderComp.GetFieldValue (""Contact Id"") != null)
         {
            oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-NAME"",
                                          EAIFormatPersonName (iOrderComp.GetFieldValue (""Contact First Name""),
                                                               iOrderComp.GetFieldValue (""Contact Last Name"")));
         }

         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-TELEPHONE"",  ""Contact Work Phone #"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PRICE_GRP"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GROUP"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_DIST"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PRICE_LIST"", null);
         oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-INCOTERMS1"", 
                                       incotermsLM.Translate (iOrderComp.GetFieldValue (""Freight Terms"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-INCOTERMS2"", ""Freight Terms Info"");
         oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-PMNTTRMS"", 
                                       payTermsLM.Translate (iOrderComp.GetFieldValue (""Payment Term"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DLV_BLOCK"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-BILL_BLOCK"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-ORD_REASON"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PRICE_DATE"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-QT_VALID_F"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-QT_VALID_T"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CT_VALID_F"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CT_VALID_T"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP1"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP2"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP3"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP4"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP5"",  null);

         /*
          * Write ""ORDER_PARTNERS"" component (pivot from values in iOrderComp!)
          */
         /*
           NOTES:
           1. one row each Sold-to, Ship-to and Bill-to account,
              so we must pivot S_ORDER columns into rows using a UNION.
              SAP BAPI will return error if required ones are missing
           2. SO partner types are stored in TPAR.
           3. RE is for Bill-to, but we map RG (payer) to S_ORDER.BL_OU_ID
           4. P Lim. 5/19/99. We must always pass a row for 'AG' partner role because
              for some reason, SAP reuses the last function call's values.
         */
         oCFDPartnerComp = oCFDImportComp.CreateIntComp (""ORDER_PARTNERS"", oCFDImportComp);

         // Sold to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""AG"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Account Integration Id"");

         // Ship To partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""WE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Ship To Account Integration Id"");

         // Payer partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RG"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Bill To Account Integration Id"");

         /*
          * Read ""Order Line Item"" component
          */
         iItemComp = iOrderComp.GetIntComp (""Order Line Item"");
         oCFDItemComp = oCFDImportComp.CreateIntComp (""ORDER_ITEMS_IN"", oCFDImportComp);
         while (iItemComp.NextRecord ())
         {
            /*
             * Write ""ORDER_ITEMS_IN"" component
             */
            oCFDItemComp.NewRecord ();
            oCFDItemComp.SetCopySource  (iItemComp);
            oCFDItemComp.CopyFieldValue (""ITM_NUMBER"",     ""Line Number"");
            oCFDItemComp.CopyFieldValue (""HG_LV_ITEM"",     null);
            oCFDItemComp.CopyFieldValue (""PO_ITM_NO"",      ""Line Number"");
            oCFDItemComp.CopyFieldValue (""MATERIAL"",       ""Product Integration Id"");
            oCFDItemComp.CopyFieldValue (""CUST_MAT"",       null);
            oCFDItemComp.CopyFieldValue (""BATCH"",          null);
            oCFDItemComp.CopyFieldValue (""DLV_GROUP"",      null);
            oCFDItemComp.CopyFieldValue (""PART_DLV"",       null);
            oCFDItemComp.CopyFieldValue (""REASON_REJ"",     null);
            oCFDItemComp.CopyFieldValue (""BILL_BLOCK"",     null);
            oCFDItemComp.CopyFieldValue (""BILL_DATE"",      null);
            oCFDItemComp.CopyFieldValue (""PLANT"",          null);
            oCFDItemComp.CopyFieldValue (""STORE_LOC"",      null);
            oCFDItemComp.CopyFieldValue (""TARGET_QTY"",     null);
            oCFDItemComp.CopyFieldValue (""TARGET_QU"",      null);
            oCFDItemComp.CopyFieldValue (""REQ_QTY"",        ""Quantity Requested"");
            oCFDItemComp.SetFieldValue  (""SALES_UNIT"", 
                                         uomLM.Translate (iItemComp.GetFieldValue (""Product Unit of Measure"")));
            oCFDItemComp.CopyFieldValue (""ITEM_CATEG"",     null);
            oCFDItemComp.CopyFieldValue (""SHORT_TEXT"",     ""Description"");
            oCFDItemComp.CopyFieldValue (""REQ_DATE"",       ""Due Date"");
            oCFDItemComp.SetFieldValue  (""DATE_TYPE"",      ""1"");
            oCFDItemComp.CopyFieldValue (""REQ_TIME"",       null);
            oCFDItemComp.SetFieldValue  (""COND_TYPE"",      ""PB00"");
            // Item Price is price after discounts (i.e. net price)
            oCFDItemComp.CopyFieldValue (""COND_VALUE"",     ""Item Price"");
            oCFDItemComp.SetFieldValue  (""COND_P_UNT"",     ""1"");
            oCFDItemComp.SetFieldValue  (""COND_D_UNT"", 
                                         uomLM.Translate (iItemComp.GetFieldValue (""Product Unit of Measure"")));
            oCFDItemComp.CopyFieldValue (""PRC_GROUP1"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP2"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP3"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP4"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP5"",     null);
            oCFDItemComp.CopyFieldValue (""PROD_HIERA"",     null);
            oCFDItemComp.CopyFieldValue (""MATL_GROUP"",     null);
         }
      }
   }
}
"
function GetSAPOrderStatus_BAPIToSiebel (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   BAPI Export (Order - Get SAP Order Status (BAPI Output))
    *     Export Parameters (output)
    *       Order Header (header)
    *         Order Item (item)
    *           Order Item Delivery Item (deliv)
    *
    * Output Object's Integration Components:
    *   Order Object (Order - Get SAP Order Status (Siebel))
    *     Order (oOrder)
    *       Get Status Output
    *       Get Status Header
    *         Get Status Item
    *           Get Status Item Delivery Item
    *       Order Line Item
    *         Order Line Item Action
    */

   /*
    * Set up EAI Lookup objects
    */
   var currencyLM = EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iGSOrderObj;   // BAPI Order instance
   var iGSExportComp; // BAPI Export Parameters
   var iGSHeaderComp; // BAPI Order Header
   var iGSItemComp;   // BAPI Order Item
   var iGSDelivComp;  // BAPI Order Item Delivery Item

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;     // Siebel Orderinstance
   var oOrderComp;    // Order
   var oItemComp;     // Order Line Item
   var oDelivComp;    // Order Line Item Action
   var oGSOutputComp; // Create Output
   var oGSHeaderComp; // Create Header
   var oGSItemComp;   // Create Item
   var oGSDelivComp;  // Create Item Delivery Item


   /*
    * Find and create top-level integration object
    */
   iGSOrderObj = inputMsg.GetIntObj(""Order - Get SAP Order Status (BAPI Output)"");
   oOrderObj = outputMsg.CreateIntObj (""Order - Get SAP Order Status (Siebel)"");

   /*
    * Read int object instances from EAI message
    */

   while (iGSOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object in output message
       */
      oOrderObj.NewInstance ();
      
      /*
       * Create ""Order"" component
       */
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order"");
      oOrderComp.NewRecord ();
      // Set ""Id"" so Siebel Adapter can synchronize
      oOrderComp.SetFieldValue (""Id"", inputId);
      
      /*
       * Read ""Export Parameters"" component
       */
      iGSExportComp = iGSOrderObj.GetPrimaryIntComp (""Export Parameters"");
      
      /*
       * Create the output component. Defer creation if the ""Export Parameters"" component
       * does not exist.
       *
       */
      oGSOutputComp = oOrderComp.CreateIntComp (""Get Status Output"", iGSExportComp.Exists());
      if (iGSExportComp.NextRecord())
      {
         /*
          * Write ""Create Output"" component
          */
         oGSOutputComp.NewRecord ();
         oGSOutputComp.SetCopySource  (iGSExportComp);
         oGSOutputComp.SetFieldValue  (""Input Id"",     inputId);
         oGSOutputComp.CopyFieldValue (""Return Code"",       ""RETURN-CODE"");
         oGSOutputComp.CopyFieldValue (""Return Log Msg No"", ""RETURN-LOG_MSG_NO"");
         oGSOutputComp.CopyFieldValue (""Return Log No"",     ""RETURN-LOG_NO"");
         oGSOutputComp.CopyFieldValue (""Return Message"",    ""RETURN-MESSAGE"");
         oGSOutputComp.CopyFieldValue (""Return Type"",       ""RETURN-TYPE"");
         
         /*
          * Read ""Order Header"" component
          */
         iGSHeaderComp = iGSExportComp.GetIntComp (""Order Header"");
         oGSHeaderComp = oOrderComp.CreateIntComp (""Get Status Header"", iGSHeaderComp.Exists());

         // Singleton entry in input - 'if' is symbolic of not looping
         if (iGSHeaderComp.NextRecord ())
         {
            /*
             * Write ""Get Status Header"" component
             */
            oGSHeaderComp.NewRecord ();
            oGSHeaderComp.SetCopySource  (iGSHeaderComp);
            oGSHeaderComp.SetFieldValue  (""Input Id"",    inputId);
            oGSHeaderComp.CopyFieldValue (""Currency"",        ""CURRENCY"");
            oGSHeaderComp.CopyFieldValue (""Delivery Block"",  ""DLV_BLOCK"");
            oGSHeaderComp.CopyFieldValue (""Delivery Status"", ""DLV_STAT_H"");
            oGSHeaderComp.CopyFieldValue (""Order Date"",      ""DOC_DATE"");
            oGSHeaderComp.CopyFieldValue (""Order Number"",    ""DOC_NUMBER"");
            oGSHeaderComp.CopyFieldValue (""Pricing Status"",  ""PRC_STAT_H"");
            oGSHeaderComp.CopyFieldValue (""Purchase Order"",  ""PURCH_NO"");
            oGSHeaderComp.CopyFieldValue (""Requested Date"",  ""REQ_DATE_H"");
            
            /*
             * Update ""Order"" component
             */
            oOrderComp.SetCopySource  (iGSHeaderComp);
            
            // EAI Lookup code ""SAP Currency""
            oOrderComp.SetFieldValue  (""Currency Code"", 
                                       currencyLM.Translate (iGSHeaderComp.GetFieldValue (""CURRENCY"")));
            
            oOrderComp.CopyFieldValue (""Requested Ship Date"",     ""REQ_DATE_H"");
            /* P Lim 6/9/99. 12-LGEKF. Removed mapping of SAP Purch_no to Siebel ORDER_NUM */
            // oOrderComp.SetFieldValue (""Order Number"",    ""PURCH_NO"");
            
            /*
             * Read ""Order Item"" component
             */
            iGSItemComp = iGSHeaderComp.GetIntComp (""Order Item"");
            
            oGSItemComp = oGSHeaderComp.CreateIntComp (""Get Status Item"", iGSItemComp.Exists());
            oItemComp   = oOrderComp.CreateIntComp (""Order Line Item"", iGSItemComp.Exists());
            while (iGSItemComp.NextRecord ())
            {
               /*
                * Write ""Get Status Item"" component
                */
               oGSItemComp.NewRecord ();
               oGSItemComp.SetCopySource  (iGSItemComp);
               oGSItemComp.SetFieldValue  (""Input Id"",                  inputId);
               oGSItemComp.CopyFieldValue (""Condition Pricing Unit"",        ""COND_P_UNT"");
               oGSItemComp.CopyFieldValue (""Condition Unit"",                ""COND_UNIT"");
               oGSItemComp.CopyFieldValue (""Cumulative Confirmed Quantity"", ""CUM_CF_QTY"");
               oGSItemComp.CopyFieldValue (""Delivery Status"",               ""DLV_STAT_I"");
               oGSItemComp.CopyFieldValue (""Item Number"",                   ""ITM_NUMBER"");
               oGSItemComp.CopyFieldValue (""Material Part #"",               ""MATERIAL"");
               oGSItemComp.CopyFieldValue (""Material Short Text"",           ""SHORT_TEXT"");
               oGSItemComp.CopyFieldValue (""Net Price"",                     ""NET_PRICE"");
               oGSItemComp.CopyFieldValue (""Net Value"",                     ""NET_VALUE"");
               oGSItemComp.CopyFieldValue (""Reference Quantity"",            ""REF_QTY"");
               oGSItemComp.CopyFieldValue (""Requested Quantity"",            ""REQ_QTY"");
               oGSItemComp.CopyFieldValue (""Requested Ship Date"",           ""REQ_DATE"");
               oGSItemComp.CopyFieldValue (""Sales Unit"",                    ""SALES_UNIT"");
               
               /*
                * Write ""Order Line Item"" component
                */
               /*
                 NOTES: 
                 1. REF_QTY stores QTY submitted to next document (in this case, the deliveries).
                 So, this is equivalent to sum(item.DLV_QTY)
                 2. P Lim 5/28/99. Force prices into SAP. Do not update S_ORDER_ITEM.UNI_PRI (discount price).
                 SAP Line Items view will show Siebel prices AND SAP prices on same list view.
                 item.NET_PRICE UNIT_PRI
                 3. SAP columns not mapped to S_ORDER_ITEM (and exposed in SAP Line Items applet):
                 CUM_CF_QTY    NUMBER(15)
                 COND_P_UNT    VARCHAR2(5)
                 COND_UNIT     VARCHAR2(3)
                 DLV_STAT_I    VARCHAR2(1)
               */
               //var itemMaterial = EAIGetProperty (item.source, ""MATERIAL"");
               var itemMaterial = iGSItemComp.GetFieldValue (""MATERIAL"");
               
               oItemComp.NewRecord ();
               oItemComp.SetCopySource  (iGSItemComp);
               oItemComp.SetFieldValue  (""Product Integration Id"", itemMaterial);
               oItemComp.CopyFieldValue (""Line Number"",            ""ITM_NUMBER"");
               oItemComp.CopyFieldValue (""Quantity Requested"",     ""REQ_QTY"");
               oItemComp.CopyFieldValue (""Quantity Shipped"",       ""REF_QTY"");
               oItemComp.CopyFieldValue (""Due Date"",               ""REQ_DATE"");
               oItemComp.CopyFieldValue (""Description"",            ""SHORT_TEXT"");
               // In 2K: Defaults from buscomp. In 99.5: {fn ifnull(S_ORDER_ITEM.STATUS_CD, 'Open')}
               // item.CopyFieldValue (""Status"",              Open);
               
               /*
                * Read ""Order Item Delivery Item"" component
                */
               iGSDelivComp = iGSItemComp.GetIntComp (""Order Item Delivery Item"");
               
               oGSDelivComp = oGSItemComp.CreateIntComp (""Get Status Item Delivery Item"", iGSDelivComp.Exists());
               oDelivComp   = oItemComp.CreateIntComp (""Order Line Item Action"", iGSDelivComp.Exists());
               
               while (iGSDelivComp.NextRecord ())
               {
                  /*
                   * Write ""Get Status Item Delivery Item"" component
                   */
                  oGSDelivComp.NewRecord ();
                  oGSDelivComp.SetCopySource  (iGSDelivComp);
                  oGSDelivComp.SetFieldValue  (""Input Id"",             inputId);
                  oGSDelivComp.CopyFieldValue (""Delivered Quantity"",   ""DLV_QTY"");
                  oGSDelivComp.CopyFieldValue (""Delivery Date"",        ""DELIV_DATE"");
                  oGSDelivComp.CopyFieldValue (""Delivery Item Number"", ""DELIV_ITEM"");
                  oGSDelivComp.CopyFieldValue (""Delivery Number"",      ""DELIV_NUMB"");
                  oGSDelivComp.CopyFieldValue (""Item Number"",          ""ITM_NUMBER"");
                  
                  /*
                   * Write ""Get Status Item Delivery Item"" component
                   */
                  oDelivComp.NewRecord ();
                  oDelivComp.SetCopySource  (iGSDelivComp);
                  
                  var delivNum  = iGSDelivComp.GetFieldValue (""DELIV_NUMB"");
                  var delivItem = iGSDelivComp.GetFieldValue (""DELIV_ITEM"");
                  if (delivNum == null || delivItem == null)
                  {
                     EAIRaiseError (""'DELIV_NUMB' and 'DELIV_ITEM' fields are not specified."");
                  }
                  var itemActionNum = delivNum + ""-"" + delivItem;
                  oDelivComp.SetFieldValue  (""Line Item Action Number"", itemActionNum);
                  oDelivComp.CopyFieldValue (""Quantity"",                ""DLV_QTY"");
                  oDelivComp.CopyFieldValue (""Actual Start Date"",       ""DELIV_DATE"");
                  oDelivComp.SetFieldValue  (""Product Integration Id"",  itemMaterial);

                  var shipValue = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_PART_MOVEMENT_TYPE"", ""Ship"");
                  // TheApplication().MsgBox ("foo is: "" + foo);
                  oDelivComp.SetFieldValue  (""Line Item Action Type"",   shipValue);
               }
            }
         }
      }
   }
}
"
function GetSAPOrderStatus_SiebelToBAPI (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   Order Object (Order - Get SAP Order nStatus (Siebel))
    *     Order
    *
    * Output Object's Integration Components:
    *   BAPI Import (Order - Get SAP Order Status (BAPI Input))
    *     Import Parameters
    */

   /*
    * Set up EAI Lookup objects
    */

   /*
    * Set up EAI Input Message objects
    */
   var iOrderObj;    // Siebel Order instance
   var iOrderComp;   // Order

   /*
    * Set up EAI Output Message objects
    */
   var oGSObj;         // BAPI instance
   var oGSImportComp;  // Import Parameters

   /*
    * Find and create top-level integration object
    */
   iOrderObj = inputMsg.GetIntObj (""Order - Get SAP Order Status (Siebel)"");
   oGSObj    = outputMsg.CreateIntObj (""Order - Get SAP Order Status (BAPI Input)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iOrderObj.NextInstance ())
   {
      /*
       * Create ""Get Status"" object
       */
      oGSObj.NewInstance ();

      /*
       * Read ""Order"" component
       */
      iOrderComp = iOrderObj.GetPrimaryIntComp (""Order"");
      oGSImportComp = oGSObj.CreatePrimaryIntComp (""Import Parameters"");
      if (iOrderComp.NextRecord ())
      {
         /*
          * Write ""Import Parameters"" component
          */
         oGSImportComp.NewRecord ();
         oGSImportComp.SetCopySource  (iOrderComp);
         oGSImportComp.CopyFieldValue (""SALESDOCUMENT"", ""Integration Id"");
      }
   }
}
"
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   var result = EAIExecuteMap (MethodName, Inputs, Outputs);

	return result;
}
"
function SimulateSAPOrder_BAPIToSiebel (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   BAPI Export (Order - Simulate SAP Order (BAPI Output))
    *     Export Parameters (output)
    *
    * Output Object's Integration Components:
    *   Order Object (Order - Simulate SAP Order (Siebel))
    *     Order (oOrder)
    *       Simulate Output
    *         Simulate Item
    */

   /*
    * Set up EAI Lookup objects
    */
   var currencyLM = EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iSimOrderObj;   // BAPI Order instance
   var iSimExportComp; // BAPI Export Parameters
   var iSimItemComp;   // BAPI Order Items

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;      // Siebel Order instance
   var oOrderComp;     // Order
   var oSimOutputComp; // Simulate Output
   var oSimItemComp;   // Simulate Item

   /*
    * Find and create top-level integration object
    */
   iSimOrderObj = inputMsg.GetIntObj (""Order - Simulate SAP Order (BAPI Output)"");
   oOrderObj = outputMsg.CreateIntObj (""Order - Simulate SAP Order (Siebel)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iSimOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object
       */
      oOrderObj.NewInstance ();

      /*
       * Create ""Order"" component in output message
       */
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order"");
      oOrderComp.NewRecord ();
      // Set ""Id"" so Siebel Adapter can synchronize
      oOrderComp.SetFieldValue (""Id"", inputId);

      /*
       * Read ""Export Parameters"" component
       */
      iSimExportComp = iSimOrderObj.GetPrimaryIntComp (""Export Parameters"");
      oSimOutputComp = oOrderComp.CreateIntComp (""Simulate Output"", oOrderComp);
      if (iSimExportComp.NextRecord ())
      {
         /*
          * Write ""Simulate Output"" component
          */
         oSimOutputComp.NewRecord ();
         oSimOutputComp.SetCopySource  (iSimExportComp);
         oSimOutputComp.SetFieldValue  (""Input Id"",          inputId);
         oSimOutputComp.CopyFieldValue (""Bill To Customer"",  ""BILLING_PARTY-PAYER"");
         oSimOutputComp.CopyFieldValue (""Bill To Name"",      ""BILLING_PARTY-NAME"");
         oSimOutputComp.CopyFieldValue (""Order Number"",      ""SALESDOCUMENT"");
         oSimOutputComp.CopyFieldValue (""Return Code"",       ""RETURN-CODE"");
         oSimOutputComp.CopyFieldValue (""Return Log Msg No"", ""RETURN-LOG_MSG_NO"");
         oSimOutputComp.CopyFieldValue (""Return Log No"",     ""RETURN-LOG_NO"");
         oSimOutputComp.CopyFieldValue (""Return Message"",    ""RETURN-MESSAGE"");
         oSimOutputComp.CopyFieldValue (""Return Type"",       ""RETURN-TYPE"");
         oSimOutputComp.CopyFieldValue (""Ship To Customer"",  ""SHIP_TO_PARTY-SHIP_TO"");
         oSimOutputComp.CopyFieldValue (""Ship To Name"",      ""SHIP_TO_PARTY-NAME"");
         oSimOutputComp.CopyFieldValue (""Sold To Customer"",  ""SOLD_TO_PARTY-SOLD_TO"");
         oSimOutputComp.CopyFieldValue (""Sold To Name"",      ""SOLD_TO_PARTY-NAME"");

         /*
          * Update ""Order"" component
          */
         oOrderComp.SetCopySource  (iSimExportComp);
         // P Lim. Do not set Order Integration Id: Simulate BAPI does not return an Order number
         // oOrderComp.CopyFieldValue (""Integration Id"",                 ""SALESDOCUMENT"");
         oOrderComp.CopyFieldValue (""Ship To Account Integration Id"", ""SHIP_TO_PARTY-SHIP_TO"");
         oOrderComp.CopyFieldValue (""Bill To Account Integration Id"", ""BILLING_PARTY-PAYER"");
         oOrderComp.SetFieldValue  (""Currency Code"",
                                    currencyLM.Translate (iSimExportComp.GetFieldValue (""SOLD_TO_PARTY-CURRENCY"")));

         /*
          * Read ""Simulate Item"" component
          */
         iSimItemComp = iSimExportComp.GetIntComp (""Simulate Item"");
         oSimItemComp = oOrderComp.CreateIntComp (""Simulate Item"", oOrderComp);
         while (iSimItemComp.NextRecord ())
         {
            oSimItemComp.NewRecord ();
            oSimItemComp.SetCopySource  (iSimItemComp);
            oSimItemComp.SetFieldValue  (""Input Id"",                   inputId);
            oSimItemComp.CopyFieldValue (""Currency Code"",              ""CURRENCY"");
            oSimItemComp.CopyFieldValue (""Delivery Date"",              ""DLV_DATE"");
            oSimItemComp.CopyFieldValue (""Item Number"",                ""ITM_NUMBER"");
            oSimItemComp.CopyFieldValue (""Material Entered"",           ""MAT_ENTRD"");
            oSimItemComp.CopyFieldValue (""Material Part #"",            ""MATERIAL"");
            oSimItemComp.CopyFieldValue (""Material Short Text"",        ""SHORT_TEXT"");
            oSimItemComp.CopyFieldValue (""Net Value"",                  ""NET_VALUE"");
            oSimItemComp.CopyFieldValue (""Purchase Order Item Number"", ""PO_ITM_NO"");
            oSimItemComp.CopyFieldValue (""Quantity Requested Date"",    ""QTY_REQ_DT"");
            oSimItemComp.CopyFieldValue (""Replenishment Time"",         ""REPL_TIME"");
            oSimItemComp.CopyFieldValue (""Unit"",                       ""SALES_UNIT"");
         }
      }
   }
}
"
function SimulateSAPOrder_SiebelToBAPI (inputMsg, outputMsg)
{
   /* Uses same map as CreateFromData() */
   CreateSimulateSAPOrder_SiebelToBAPI (inputMsg, outputMsg, 
                                        ""Order - Simulate SAP Order (Siebel)"", 
                                        ""Order - Simulate SAP Order (BAPI Input)"");
}
"
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// LAST UPDATED	:	12/28/2000
//
// DESCRIPTION
//    Javascript maps from Oracle Operating Unit to Siebel Organization
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyIntegrationObjectData (OracleIntObject, SiebelIntObject)
{
	var OracleOrderIntComp, SiebelOrderIntComp;
	
	OracleOrderIntComp = OracleIntObject.GetPrimaryIntComp (""SO_HEADERS_INTERFACE_ALL"");

	if (OracleOrderIntComp.Exists ())
	{
		// ORDER INTERFACE

		SiebelOrderIntComp = 
			SiebelIntObject.CreatePrimaryIntComp (""Order Entry - Orders"");

		while (OracleOrderIntComp.NextRecord ())
		{
			SiebelOrderIntComp.NewRecord ();
			SiebelOrderIntComp.SetCopySource (OracleOrderIntComp);
			
			SiebelOrderIntComp.CopyFieldValue (""Integration Id"", ""ORIGINAL_SYSTEM_REFERENCE"");
			SiebelOrderIntComp.SetFieldValue  (""Back Office Process Status"", ""Error on Oracle Import"");
			SiebelOrderIntComp.SetFieldValue  (""EAI Sync Date"", Timestamp());
			SiebelOrderIntComp.CopyFieldValue (""Back Office Error Text"",""INTERFACE_STATUS"");
		}
	}
	else
	{
		EAIRaiseError(TranslateMessage(
			""ORA_MSG_MISSING_COMPONENT,SO_HEADERS_INTERFACE_ALL,Order - Get Oracle Order Import Status (Oracle)""));
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
 	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
 	  d.getHours(), d.getMinutes(), d.getSeconds());
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function UpsertSiebelOrder (InputMsg, OutputMsg)
{
	//
	// Declare a variable to hold the Siebel Integration Object.
	//
	var SiebelIntObject;
	
	//
	// Declare a variable to hold the Oracle Integration Object
	//
	var OracleIntObject;

	//
	// Get the Oracle Integration Object from the Input message
	//
	OracleIntObject = InputMsg.GetIntObj(""Order - Get Oracle Order Import Status (Oracle)"");

	//
	// Check the validity of the Oracle Integration Object.
	//
	if (OracleIntObject.Exists ())
	{
		//
		// Create a new Siebel Integration Object on the Output Message.
		//
		SiebelIntObject = OutputMsg.CreateIntObj (""Order - Get Oracle Order Import Status (Siebel)"");

		//
		// Navigate through all the available instances in the Integration Object
		//
		while (OracleIntObject.NextInstance ())
		{
			//
			// Create a new instance in the Oracle Integration Object
			//
			SiebelIntObject.NewInstance ();

			//
			// CopyFields is a user defined function which is written to copy all
			// the fields from the source to the target.
			//
			CopyIntegrationObjectData (OracleIntObject, SiebelIntObject);
		}
	}
}  ///~ End of CreateSiebelProduct function."
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// DESCRIPTION
//    Javascript maps to Siebel Order from Oracle Order
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyFields (OracleIntObject, SiebelIntObject)
{
	// Temporary variable to hold the messages.
	var msg = """";
	
	// 
	// Declare variables to hold the Oracle Primary Integration Component and 
	// The Siebel Primary Integration Component
	// 
	var OracleOrderHeader, SiebelOrderHeader;
	
	var OrderTypeVM 	= EAIGetValueMap (""Oracle Order Type"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderUOM 		= EAIGetValueMap (""Oracle Unit of Measure"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderTefVM 		= EAIGetValueMap (""Oracle Tax Exempt Flag"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderPtcVM 		= EAIGetValueMap (""Oracle Payment Type Code"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderTercVM 	= EAIGetValueMap (""Oracle Tax Exempt Reason"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderSpcVM 		= EAIGetValueMap (""Oracle Shipment Priority Code"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderFtcVM 		= EAIGetValueMap (""Oracle Freight"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);							
	var OrderFcVM 		= EAIGetValueMap (""Oracle Fob Code"", ""Siebel Inbound"");							
	var OrderEnteredStatusVM = EAIGetValueMap (""Oracle Order Status"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderLineStatusVM = EAIGetValueMap (""Oracle Order Line Status"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderLinesSmcVM = EAIGetValueMap (""Oracle Ship Method Code"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);							
	
	
	OracleOrderHeader = OracleIntObject.GetPrimaryIntComp (""SIE_HEADERS_ALL_V"");
	
	if (OracleOrderHeader.Exists ())
	{
		SiebelOrderHeader = SiebelIntObject.CreatePrimaryIntComp (""Order Entry - Orders"");
		
		while (OracleOrderHeader.NextRecord ())
		{
			// Process delete operation
			if(ProcessDelete(OracleOrderHeader, SiebelOrderHeader)) continue;

			var orderNum = OracleOrderHeader.GetFieldValue (""PURCHASE_ORDER_NUM"");
			
			SiebelOrderHeader.NewRecord ();
			SiebelOrderHeader.SetCopySource (OracleOrderHeader);
			SetOperationCode(SiebelOrderHeader, OracleOrderHeader);
			
			SiebelOrderHeader.SetFieldValue  (""Order Number"", orderNum);
			SiebelOrderHeader.CopyFieldValue (""Integration Id"", ""ORIGINAL_SYSTEM_REFERENCE"");
			SiebelOrderHeader.SetFieldValue  (""Back Office Process Status"",""Sync from Back Office"");
			SiebelOrderHeader.SetFieldValue  (""Back Office Error Text"", """");
			SiebelOrderHeader.SetFieldValue  (""EAI Sync Date"", Timestamp());
			SiebelOrderHeader.CopyFieldValue (""Order Date"", ""DATE_ORDERED"");
			SiebelOrderHeader.CopyFieldValue (""Pricing Date"", ""CONVERSION_DATE"");

			SiebelOrderHeader.CopyFieldValue (""Account Integration Id"", ""CUSTOMER_SHARED_ID"");
			SiebelOrderHeader.CopyFieldValue (""Contact Integration Id"", ""ORDERED_BY_CONTACT_SHARED_ID"");
	
			SiebelOrderHeader.CopyFieldValue (""Bill To Account Integration Id"", ""INVOICE_TO_CUSTOMER_SHARED_ID""); //PD# 12-56022B
			SiebelOrderHeader.CopyFieldValue (""Bill To Contact Integration Id"", ""INVOICE_TO_CONTACT_SHARED_ID"");
			SiebelOrderHeader.CopyFieldValue (""Bill To Address Integration Id"", ""INVOICE_TO_ADDRESS_SHARED_ID"");
			
			SiebelOrderHeader.CopyFieldValue (""Ship To Account Integration Id"", ""SHIP_TO_CUSTOMER_SHARED_ID"");
			SiebelOrderHeader.CopyFieldValue (""Ship To Address Integration Id"", ""SHIP_TO_ADDRESS_SHARED_ID"");
			SiebelOrderHeader.CopyFieldValue (""Ship To Contact Integration Id"", ""SHIP_TO_CONTACT_SHARED_ID"");

			SiebelOrderHeader.CopyFieldValue (""Requested Ship Date"", ""DATE_REQUESTED_CURRENT"");
			SiebelOrderHeader.CopyFieldValue (""Ship Instructions"", ""SHIPPING_INSTRUCTIONS"");
			SiebelOrderHeader.CopyFieldValue (""Organization Integration Id"", ""ORG_ID"");
			SiebelOrderHeader.CopyFieldValue (""Comments"", ""PACKING_INSTRUCTIONS"");
			SiebelOrderHeader.CopyFieldValue (""Back Office Order Number"", ""ORDER_NUMBER"");
			SiebelOrderHeader.SetFieldValue (""Status"", OrderEnteredStatusVM.Translate(OracleOrderHeader.GetFieldValue(""HEADER_STATUS"")));
			SiebelOrderHeader.CopyFieldValue (""Hold Flag"",""HOLD_FLAG"");
							
			SiebelOrderHeader.SetFieldValue (""Currency Code"", OracleOrderHeader.GetFieldValue (""CURRENCY_CODE""));
			
			SiebelOrderHeader.SetFieldValue (""Order Type"", OrderTypeVM.Translate (
				OracleOrderHeader.GetFieldValue (""ORDER_TYPE"")));
			
			SiebelOrderHeader.SetFieldValue (""Tax Exempt"", OrderTefVM.Translate (
				OracleOrderHeader.GetFieldValue (""TAX_EXEMPT_FLAG"")));
			
			SiebelOrderHeader.SetFieldValue (""Tax Exempt Reason"", OrderTercVM.Translate (
				OracleOrderHeader.GetFieldValue (""TAX_EXEMPT_REASON_CODE"")));
			
			SiebelOrderHeader.SetFieldValue (""Payment Method"", OrderPtcVM.Translate (
				OracleOrderHeader.GetFieldValue (""PAYMENT_TYPE_CODE"")));
			
			SiebelOrderHeader.SetFieldValue (""Order Priority"", OrderSpcVM.Translate (
				OracleOrderHeader.GetFieldValue (""SHIPMENT_PRIORITY_CODE"")));
		
			SiebelOrderHeader.SetFieldValue (""Freight Terms"", OrderFtcVM.Translate (
				OracleOrderHeader.GetFieldValue (""FREIGHT_TERMS_CODE"")));
			
//			SiebelOrderHeader.SetFieldValue (""Freight Terms Info"", OrderFcVM.Translate (
//				OracleOrderHeader.GetFieldValue (""FOB_CODE"")));
				
			//==================================================================
			// Get the Oracle Order Lines Integration Component from the
			// Oracle Header Integration Component
			//==================================================================
			var OracleOrderLines = OracleOrderHeader.GetIntComp (""SIE_LINES_ALL_V"");
			
			// Declare a variable to hold the Siebel child integration component.
			var SiebelOrderLines;
			
			// Check the validity of the integration component.
			if (OracleOrderLines.Exists ())
			{
				// Create a new child integration component in the Siebel 
				// Primary integration Component
				SiebelOrderLines = SiebelOrderHeader.CreateIntComp (""Order Entry - Line Items"");
				
				// Navigate through all the available records.
				while (OracleOrderLines.NextRecord ())
				{
				
				   var line_orig_sys_ref = OracleOrderLines.GetFieldValue (""ORIGINAL_SYSTEM_LINE_REFERENCE"");
         			
				   if (line_orig_sys_ref == """")
				   {
			         continue;
				   }


					// Create a new record on the Siebel side.
					SiebelOrderLines.NewRecord ();
					
					// Set the copy source as the Oracle Child Integration 
					// Component
					SiebelOrderLines.SetCopySource (OracleOrderLines);
					
					// Copy all the fields.
					SetOperationCode(SiebelOrderLines, OracleOrderLines);

       				SiebelOrderLines.CopyFieldValue (""Integration Id"", ""ORIGINAL_SYSTEM_LINE_REFERENCE"");

					SiebelOrderLines.CopyFieldValue (""Line Number"", ""LINE_NUMBER"");
					SiebelOrderLines.CopyFieldValue (""Product Integration Id"",""INVENTORY_ITEM_ID"");
					SiebelOrderLines.CopyFieldValue (""Quantity Requested"", ""ORDERED_QUANTITY"");
					SiebelOrderLines.CopyFieldValue (""Due Date"", ""DATE_REQUESTED_CURRENT"");
					SiebelOrderLines.CopyFieldValue (""Base Price"", ""LIST_PRICE"");
					SiebelOrderLines.CopyFieldValue (""Unit Price"", ""SELLING_PRICE"");
					SiebelOrderLines.CopyFieldValue (""Ship To Address Integration Id"", ""SHIP_TO_ADDRESS_SHARED_ID"");
					SiebelOrderLines.CopyFieldValue (""Tax Exempt Number"", ""TAX_CODE"");
					SiebelOrderLines.CopyFieldValue (""Quantity To Invoice"", ""QUANTITY_TO_INVOICE"");
					SiebelOrderLines.SetFieldValue (""Status"", OrderLineStatusVM.Translate(OracleOrderLines.GetFieldValue(""LINE_STATUS"")));
					SiebelOrderLines.CopyFieldValue (""Tax Exempt Number"", ""TAX_CODE"");
					SiebelOrderLines.CopyFieldValue (""Hold Flag"",""HOLD_FLAG"");
					SiebelOrderLines.CopyFieldValue (""Cancelled Quantity"",""CANCELLED_QUANTITY"");

					var OracleOrderShipDetails = OracleOrderLines.GetIntComp(""SIE_SHIPMENT_QUANTITIES_V"");

					// If the component exists in the Order Line integration component
					if(OracleOrderShipDetails.Exists()) 
					{
						// Create a new integration object in the siebel side.
						var SiebelOrderShipDetails = SiebelOrderLines.CreateIntComp(""Order Entry - Line Item Actions"");
						// While there are more records
  						SiebelOrderShipDetails.SetCopySource (OracleOrderShipDetails);
						while(OracleOrderShipDetails.NextRecord()) 
						{
							// Create a new record on the Siebel integration component.
							SiebelOrderShipDetails.NewRecord();

							SetOperationCode(SiebelOrderShipDetails, OracleOrderShipDetails);
							// Copy all the fields that are required...
							SiebelOrderShipDetails.CopyFieldValue (""Actual Start Date"",""DATE_SHIPPED"");
							SiebelOrderShipDetails.CopyFieldValue (""Quantity"",""SHIPPED_QUANTITY"");
							SiebelOrderShipDetails.SetFieldValue (""Integration Id"",
							  ""Ship-""+OracleOrderShipDetails.GetFieldValue(""PICKING_LINE_ID""));
							//SiebelOrderShipDetails.SetFieldValue (""Line Item Action Number"",
							  //""Ship-""+OracleOrderShipDetails.GetFieldValue(""PICKING_LINE_ID""));
							SiebelOrderShipDetails.SetFieldValue (""Line Item Action Type"", ""Ship"");
						}

					} 

					var OracleOrderScheduleDetails = OracleOrderLines.GetIntComp(""SIE_SCHEDULE_QUANTITIES_V"");

					// If the component exists in the Order Line integration component
					if(OracleOrderScheduleDetails.Exists()) 
					{
						// Create a new integration object in the siebel side.
						var SiebelOrderScheduleDetails = SiebelOrderLines.CreateIntComp(""Order Entry - Line Item Actions"");
						// While there are more records
  						SiebelOrderScheduleDetails.SetCopySource (OracleOrderScheduleDetails);
  						  						
						while(OracleOrderScheduleDetails.NextRecord()) 
						{
							// Create a new record on the Siebel integration component.
							SiebelOrderScheduleDetails.NewRecord();
						    SetOperationCode(SiebelOrderScheduleDetails, OracleOrderScheduleDetails);
						    // Copy all the fields that are required...
							SiebelOrderScheduleDetails.CopyFieldValue (""Actual Start Date"", ""SCHEDULE_DATE"");
							SiebelOrderScheduleDetails.CopyFieldValue (""Quantity"", ""SCHEDULE_QUANTITY"");
							SiebelOrderScheduleDetails.SetFieldValue (""Integration Id"",
								""Schedule-"" + OracleOrderScheduleDetails.GetFieldValue(""LINE_DETAIL_ID""));
							//SiebelOrderScheduleDetails.SetFieldValue (""Line Item Action Number"",
								//""Schedule-"" + OracleOrderScheduleDetails.GetFieldValue(""LINE_DETAIL_ID""));
							SiebelOrderScheduleDetails.SetFieldValue (""Line Item Action Type"", ""Schedule"");
						}
					} ///~ if(OracleOrderScheduleDetails.Exists())
            	} ///~ end of while(OracleOrderLines.NextRecord())
			} ///~ end of if(OracleOrderLines.Exists())
		} ///~ end of while(OracleOrderHeader.NextRecord())
	} ///~ end of if(OracleOrderHeader.Exists())
} /// ~ End of function CopyFields"
function ProcessDelete(OracleComp, SiebelComp)
{
	// If not a delete return false.
	// If delete (X or D) perform delete through COM interface.  X indicates that
	// there should be a D at a lower level.
	//
	// For Orders we expect deletes at header or line level.
	//
	//   D  SIE_HEADERS_ALL_V
	//        ..OR..
	//   X  SIE_HEADERS_ALL_V
	//   D  SIE_LINES_ALL_V
	
	var opCode;
	
	opCode = OracleComp.GetFieldValue(""SysOp"");
	if (opCode == ""D"")
	{
		// Header delete
		SiebelComp.NewRecord ();
		SiebelComp.SetCopySource(OracleComp);
		SiebelComp.SetFieldValue(""operation"", ""delete"");
		SiebelComp.CopyFieldValue(""Integration Id"", ""ORIGINAL_SYSTEM_REFERENCE"");
				
		return true;
	}
	else if (opCode == ""X"")
	{
		// Expect delete at line level
		OracleComp = OracleComp.GetIntComp(""SIE_LINES_ALL_V"");

		if (!OracleComp.Exists() || !OracleComp.NextRecord())
		{
			EAIRaiseError(TranslateMessage(
				""ORA_MSG_MISSING_COMPONENT,SIE_LINES_ALL_V,SIE_HEADERS_ALL_V""));
		}
			
		opCode = OracleComp.GetFieldValue(""SysOp"");
		if (opCode == ""D"")
		{
			// Delete Order line
			var BusObject = TheApplication().GetBusObject(""Order Entry"");
			var LineComp = BusObject.GetBusComp(""Order Entry - Line Items"");
			LineComp.ActivateField(""Integration Id"");
			LineComp.ActivateField(""Order Header Id"");
			LineComp.SetViewMode(3);
			LineComp.ClearToQuery();
						
			LineComp.SetSearchSpec(""Integration Id"", 
				OracleComp.GetFieldValue(""ORIGINAL_SYSTEM_REFERENCE""));
			
			LineComp.ExecuteQuery();
			LineComp.FirstRecord();
			var HeaderId = LineComp.GetFieldValue(""Order Header Id"");
			var LineId = LineComp.GetFieldValue (""Id"");
			
			SiebelComp.NewRecord ();
			SiebelComp.SetFieldValue(""operation"", ""upsert"");
			SiebelComp.SetFieldValue(""Id"", HeaderId);
			
			var SiebelOrderLines = SiebelComp.CreateIntComp (""Order Entry - Line Items"");	
			SiebelOrderLines.NewRecord ();
			SiebelOrderLines.SetCopySource(OracleComp);
			SiebelOrderLines.SetFieldValue(""operation"", ""delete"");
			SiebelOrderLines.SetFieldValue (""Id"", LineId);
			SiebelOrderLines.SetFieldValue(""Order Header Id"", HeaderId);
			SiebelOrderLines.CopyFieldValue(""Integration Id"", ""ORIGINAL_SYSTEM_REFERENCE"");
							
			return true;
		}
		else
			EAIRaiseError(TranslateMessage(
				""ORA_MSG_INVALID_SYSOP,""+opCode+"",SIE_LINES_ALL_V""));
	}
	else return false;  // Not a delete
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"/*==========================================================================
 * Module		: SetOperationCode
 * Last Updated : 17, Oct 2000
 *==========================================================================*/
function SetOperationCode(SiebelIntComp, OracleIntComp)
{
	// Get the OP-CODE for this particular integration component
	var opCode = OracleIntComp.GetFieldValue(""SysOp"");
	
	// set the appropriate value in the Oracle side
	if(opCode == ""D"")
		SiebelIntComp.SetFieldValue(""operation"", ""delete"");
	else
		SiebelIntComp.SetFieldValue(""operation"", ""upsert"");
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
 	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
 	  d.getHours(), d.getMinutes(), d.getSeconds());
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function UpsertSiebelOrder (InputMsg, OutputMsg)
{
	var SiebelIntObject, OracleIntObject;
	
	OracleIntObject = InputMsg.GetIntObj (""Orders - Get Oracle Orders (Oracle)"");
	
	if (OracleIntObject.Exists ())
	{
		SiebelIntObject = OutputMsg.CreateIntObj (""Orders - Put Oracle Orders (Siebel)"");
		
		while (OracleIntObject.NextInstance ())
		{
			SiebelIntObject.NewInstance (); 
			// 
			// CopyFields is a user defined function that 
			// copies all the fields from the source to the target.
			// 
			CopyFields (OracleIntObject, SiebelIntObject);
		} 
	} 
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// LAST UPDATED	: 01/03/2001
//
// DESCRIPTION
//    Javascript maps from Oracle11i Order to Siebel Order 
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js""
var PriceListId, InvLocId;"
function CopyFields (OracleIntObject, SiebelIntObject)
{
	// The application object's handle
	var theApp = TheApplication();
	
	// Temporary variable to hold the messages.
	var msg = """";
		
	// Declare variables to hold the Oracle Primary Integration Component and 
	// The Siebel Primary Integration Component
	var OracleOrderHeader, SiebelOrderHeader;
	
	var OrderStatusVM 	= EAIGetValueMap (""Oracle11i Order Status"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderLnStatusVM	= EAIGetValueMap (""Oracle11i Order Line Status"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderTefVM 		= EAIGetValueMap (""Oracle11i Tax Exempt Flag"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderTercVM 	= EAIGetValueMap (""Oracle11i Tax Exempt Reason"", ""Siebel Inbound"");
	var OrderPtcVM 		= EAIGetValueMap (""Oracle11i Payment Type Code"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderSpcVM 		= EAIGetValueMap (""Oracle11i Shipment Priority"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderSmcVM 		= EAIGetValueMap (""Oracle11i Ship Method Code"", ""Siebel Inbound"");			
	var OrderFtcVM 		= EAIGetValueMap (""Oracle11i Freight"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);							
	var OrderLinesSmcVM = EAIGetValueMap (""Oracle11i Ship Method Code"", ""Siebel Inbound"");							
	var OrderFcVM 		= EAIGetValueMap (""Oracle11i Fob Code"", ""Siebel Inbound"");							
	
	// Get the primary integration component from the Oracle Integration Object
	OracleOrderHeader = OracleIntObject.GetPrimaryIntComp (""SIE_HEADERS_ALL_V"");
	
	// if the Primary Integration Component is valid, then go ahead with the copying process
	// else raise an error message.
	if (OracleOrderHeader.Exists ())
	{
		SiebelOrderHeader = SiebelIntObject.CreatePrimaryIntComp (""Order Entry - Orders"");
		
		while (OracleOrderHeader.NextRecord ())
		{
			// Process delete operation
			if(ProcessDelete(OracleOrderHeader, SiebelOrderHeader)) continue;
			
			// Create a new record in the Siebel Primary Integration Object
			SiebelOrderHeader.NewRecord ();
			
			SiebelOrderHeader.SetCopySource (OracleOrderHeader);
							
			SetOperationCode(SiebelOrderHeader, OracleOrderHeader);
				
			SiebelOrderHeader.CopyFieldValue (""Integration Id"", ""ORIG_SYS_DOCUMENT_REF"");

			SiebelOrderHeader.SetFieldValue  (""Back Office Process Status"", ""Sync from Back Office"");
			SiebelOrderHeader.SetFieldValue  (""EAI Sync Date"", Timestamp());
			SiebelOrderHeader.SetFieldValue  (""Back Office Error Text"", """");

			SiebelOrderHeader.CopyFieldValue (""Back Office Order Number"", ""ORDER_NUMBER"");
			SiebelOrderHeader.CopyFieldValue (""Order Date"", ""DATE_ORDERED"");

			SiebelOrderHeader.CopyFieldValue (""Account Integration Id"", ""CUSTOMER_SHARED_ID"");
			SiebelOrderHeader.CopyFieldValue (""Contact Integration Id"", ""ORDERED_BY_CONTACT_SHARED_ID"");
		
			SiebelOrderHeader.CopyFieldValue (""Bill To Account Integration Id"", ""INVOICE_CUSTOMER_SHARED_ID""); //PD# 12-56022B
			//CopyFieldValue (""Bill To Contact Integration Id"", ""INVOICE_TO_CONTACT_SHARED_ID"");
			SiebelOrderHeader.CopyFieldValue (""Bill To Address Integration Id"", ""INVOICE_ADDRESS_SHARED_ID"");
				
			SiebelOrderHeader.CopyFieldValue (""Ship To Account Integration Id"", ""SHIP_TO_CUSTOMER_SHARED_ID"");
			SiebelOrderHeader.CopyFieldValue (""Ship To Address Integration Id"", ""SHIP_ADDRESS_SHARED_ID"");
			//CopyFieldValue (""Ship To Contact Integration Id"", ""SHIP_TO_CONTACT_SHARED_ID"");
	
			SiebelOrderHeader.CopyFieldValue (""Requested Ship Date"", ""DATE_REQUESTED_CURRENT"");
			SiebelOrderHeader.SetFieldValue (""Order Priority"", OrderSpcVM.Translate (OracleOrderHeader.GetFieldValue (""SHIPMENT_PRIORITY_CODE"")));
				
			SiebelOrderHeader.SetFieldValue (""Carrier Type"", OrderSmcVM.Translate (OracleOrderHeader.GetFieldValue (""SHIPPING_METHOD_CODE"")));
			SiebelOrderHeader.SetFieldValue (""Freight Terms"", OrderFtcVM.Translate (OracleOrderHeader.GetFieldValue (""FREIGHT_TERMS_CODE"")));
			
//			SiebelOrderHeader.SetFieldValue (""Freight Terms Info"", OrderFcVM.Translate (OracleOrderHeader.GetFieldValue (""FOB_CODE"")));
			
			SiebelOrderHeader.CopyFieldValue (""Ship Instructions"", ""SHIPPING_INSTRUCTIONS"");
			SiebelOrderHeader.CopyFieldValue (""Comments"", ""PACKING_INSTRUCTIONS"");
			//GetPriceListId (OracleOrderHeader, SiebelOrderHeader);
			SiebelOrderHeader.CopyFieldValue (""Price List Integration Id"", ""PRICE_LIST_ID"");
			SiebelOrderHeader.CopyFieldValue (""Currency Code"", ""CURRENCY_CODE"");
			SiebelOrderHeader.SetFieldValue (""Tax Exempt"", OrderTefVM.Translate (OracleOrderHeader.GetFieldValue (""TAX_EXEMPT_FLAG"")));	
			SiebelOrderHeader.CopyFieldValue (""Tax Exempt Number"", ""TAX_EXEMPT_NUMBER"");
			SiebelOrderHeader.SetFieldValue (""Tax Exempt Reason"", OrderTercVM.Translate (OracleOrderHeader.GetFieldValue (""TAX_EXEMPT_REASON_CODE"")));
			var PaymentTermIntId = OracleOrderHeader.GetFieldValue (""TERM_ID"");
			if(PaymentTermIntId != """" && PaymentTermIntId != null)
				SiebelOrderHeader.CopyFieldValue (""Payment Term Integration Id"", ""TERM_ID"");
			var PaymentMethod = OracleOrderHeader.GetFieldValue (""PAYMENT_TYPE_CODE"");
			if(PaymentMethod !="""" && PaymentMethod != null)
			{
				SiebelOrderHeader.SetFieldValue (""Payment Method"", OrderPtcVM.Translate (OracleOrderHeader.GetFieldValue (""PAYMENT_TYPE_CODE"")));
			}
				
			var OrgIntId = 	OracleOrderHeader.GetFieldValue(""ORG_ID"");
			if(OrgIntId != """" && OrgIntId != null)
			{
				SiebelOrderHeader.CopyFieldValue (""Organization Integration Id"", ""ORG_ID"");
			}
				
			SiebelOrderHeader.SetFieldValue (""Status"", OrderStatusVM.Translate (OracleOrderHeader.GetFieldValue (""STATUS"")));
			SiebelOrderHeader.CopyFieldValue (""Hold Flag"", ""HOLD_FLAG"");	

			
			// Get the Oracle Order Lines Integration Component from the
			// Oracle Header Integration Component
			var OracleOrderLines = OracleOrderHeader.GetIntComp (""SIE_LINES_ALL_V"");
			
			// Declare a variable to hold the Siebel child integration component.
			var SiebelOrderLines;
			
			// Check the validity of the integration component.
			if (OracleOrderLines.Exists ())
			{
				// Create a new child integration component in the Siebel 
				// Primary integration Component
				SiebelOrderLines = SiebelOrderHeader.CreateIntComp (""Order Entry - Line Items"");
				
				// Navigate through all the available records.
				while (OracleOrderLines.NextRecord ())
				{
    			   var line_orig_sys_ref = OracleOrderLines.GetFieldValue (""ORIG_SYS_LINE_REF"");
         			
				   if (line_orig_sys_ref == """")
				   {
			         continue;
				   }
				
					// Create a new record on the Siebel side.
					SiebelOrderLines.NewRecord ();
					
					// Set the copy source as the Oracle Child Integration 
					// Component
					SiebelOrderLines.SetCopySource (OracleOrderLines);
					
					// Copy all the fields.
					SetOperationCode(SiebelOrderLines, OracleOrderLines);
					SiebelOrderLines.CopyFieldValue (""Integration Id"", ""ORIG_SYS_LINE_REF"");
					SiebelOrderLines.CopyFieldValue (""Line Number"", ""LINE_NUMBER"");
					//GetProductId (OracleOrderLines, SiebelOrderLines);
					SiebelOrderLines.CopyFieldValue (""Product Integration Id"", ""INVENTORY_ITEM_ID"");
					//if ( (OracleOrderLines.GetFieldValue (""ORDERED_QUANTITY"")) != 0)
					//{
						SiebelOrderLines.CopyFieldValue (""Quantity Requested"", ""ORDERED_QUANTITY"");
					//}
					SiebelOrderLines.CopyFieldValue (""Cancelled Quantity"", ""CANCELLED_QUANTITY"");
					SiebelOrderLines.SetFieldValue (""Price List Id"", PriceListId);
					SiebelOrderLines.CopyFieldValue (""Base Price"", ""UNIT_LIST_PRICE"");
					SiebelOrderLines.CopyFieldValue (""Unit Price"", ""UNIT_SELLING_PRICE"");
					SiebelOrderLines.CopyFieldValue (""Adjusted List Price"", ""UNIT_LIST_PRICE"");					
					//GetInvLocId (OracleOrderLines, SiebelOrderLines);
					SiebelOrderLines.CopyFieldValue (""Source Inventory Loc Integration Id"", ""WAREHOUSE_ID"");
					SiebelOrderLines.CopyFieldValue (""Quantity Shipped"", ""SHIPPED_QUANTITY"");
					SiebelOrderLines.CopyFieldValue (""Due Date"", ""DATE_REQUESTED"");
					SiebelOrderLines.SetFieldValue (""Carrier Code"", OrderLinesSmcVM.Translate (
						OracleOrderLines.GetFieldValue (""SHIPPING_METHOD_CODE"")));
					SiebelOrderLines.CopyFieldValue (""Invoiced Quantity"", ""INVOICED_QUANTITY"");
					SiebelOrderLines.CopyFieldValue (""Tax Exempt Number"", ""TAX_EXEMPT_NUMBER"");
					SiebelOrderLines.SetFieldValue  (""Tax Exempt Reason"", OrderTercVM.Translate (
						OracleOrderLines.GetFieldValue (""TAX_EXEMPT_REASON_CODE"")));
					SiebelOrderLines.SetFieldValue  (""Status"", OrderLnStatusVM.Translate (
						OracleOrderLines.GetFieldValue (""STATUS"")));

					SiebelOrderLines.CopyFieldValue (""Shipment Number"", ""SHIPMENT_NUMBER"");
					SiebelOrderLines.CopyFieldValue (""Scheduled Ship Date"", ""SHIP_DATE"");
					SiebelOrderLines.CopyFieldValue (""Hold Flag"", ""HOLD_FLAG"");
	                    										
					SiebelOrderLines.CopyFieldValue (""Ship to Address Integration Id"", 
						""SHIP_ADDRESS_SHARED_ID"");					
				} ///~ end of while(OracleOrderLines.NextRecord())
			} ///~ end of if(OracleOrderLines.Exists())
		} ///~ end of while(OracleOrderHeader.NextRecord())
	} ///~ end of if(OracleOrderHeader.Exists())
} /// ~ End of function CopyFields"
function GetInvLocId (OracleOrderLines, SiebelOrderLines)
{
	var OrclInvLocId, InvLocIdExists;
	// variable to hold the business object
	var InvLocBusObject = TheApplication().GetBusObject(""FS Inventory Location Mgmt"") ;

	// Get the business component from the business object
	var InvLocBusComp = InvLocBusObject.GetBusComp(""FS Inventory Location"") ;
	InvLocBusComp.ActivateField(""Id"");
	OrclInvLocId = OracleOrderLines.GetFieldValue(""WAREHOUSE_ID"");

	if((OrclInvLocId != """") && (OrclInvLocId != null))
	{
		InvLocBusComp.SetViewMode(3);
		InvLocBusComp.ClearToQuery() ;
		InvLocBusComp.SetSearchSpec(""Integration Id"", OrclInvLocId) ;

		InvLocBusComp.ExecuteQuery() ;
		InvLocIdExists = InvLocBusComp.FirstRecord();

		if (InvLocIdExists)
		{
			InvLocId = InvLocBusComp.GetFieldValue(""Id"") ;
			SiebelOrderLines.SetFieldValue (""Source Inventory Loc Id"", InvLocId);
		}
	}
}
function GetLDC (LookupType, LangIndepntValue) 
{ 
	var LangDepntValue = TheApplication().InvokeMethod(""LookupValue"", LookupType, LangIndepntValue);
	return LangDepntValue;
}
function GetPriceListId (OracleOrderHeader, SiebelOrderHeader)
{
	var OrclPriceListId, PriceListIdExists;
	// variable to hold the business object
	var PriceListBusObject = TheApplication().GetBusObject(""Price List"") ;

	// Get the business component from the business object
	var PriceListBusComp = PriceListBusObject.GetBusComp(""Price List"") ;
	PriceListBusComp.ActivateField(""Id"");
	OrclPriceListId = OracleOrderHeader.GetFieldValue(""PRICE_LIST_ID"");

	if((OrclPriceListId != """") && (OrclPriceListId != null))
	{
		PriceListBusComp.SetViewMode(3);
		PriceListBusComp.ClearToQuery() ;
		PriceListBusComp.SetSearchSpec(""Integration Id"", OrclPriceListId) ;

		PriceListBusComp.ExecuteQuery() ;
		PriceListIdExists = PriceListBusComp.FirstRecord();

		if (PriceListIdExists)
		{
			PriceListId = PriceListBusComp.GetFieldValue(""Id"") ;
			SiebelOrderHeader.SetFieldValue (""Price List Id"", PriceListId);
		}
	}
}
function GetProductId (OracleOrderLines, SiebelOrderLines)
{
	var OrclProductId, ProductIdExists, ProductIdValue;
	// variable to hold the business object
	var ProductBusObject = TheApplication().GetBusObject(""Order Entry (Sales)"") ;

	// Get the business component from the business object
	var ProductBusComp = ProductBusObject.GetBusComp(""Internal Product"") ;
	ProductBusComp.ActivateField(""Id"");
	OrclProductId = OracleOrderLines.GetFieldValue(""INVENTORY_ITEM_ID"");

	if((OrclProductId != """") && (OrclProductId != null))
	{
		ProductBusComp.SetViewMode(3);
		ProductBusComp.ClearToQuery() ;
		ProductBusComp.SetSearchSpec(""Integration Id"", OrclProductId) ;

		ProductBusComp.ExecuteQuery() ;
		ProductIdExists = ProductBusComp.FirstRecord();

		if (ProductIdExists)
		{
			ProductIdValue = ProductBusComp.GetFieldValue(""Id"") ;
			SiebelOrderLines.SetFieldValue (""Product Id"", ProductIdValue);
		}
	}
}
function ProcessDelete(OracleComp, SiebelComp)
{
	// If not a delete return false.
	// If delete (X or D) perform delete through COM interface.  X indicates that
	// there should be a D at a lower level.
	//
	// For Orders we expect deletes at header or line level.
	//
	//   D  SIE_HEADERS_ALL_V
	//        ..OR..
	//   X  SIE_HEADERS_ALL_V
	//   D  SIE_LINES_ALL_V
	
	var opCode;
	
	opCode = OracleComp.GetFieldValue(""SysOp"");
	if (opCode == ""D"")
	{
		SiebelComp.NewRecord ();
		SiebelComp.SetCopySource(OracleComp);
		SiebelComp.SetFieldValue(""operation"", ""delete"");
		SiebelComp.CopyFieldValue(""Integration Id"", ""ORIGINAL_SYSTEM_REFERENCE"");
				
		return true;
	}
	else if (opCode == ""X"")
	{
		// Expect delete at line level
		OracleComp = OracleComp.GetIntComp(""SIE_LINES_ALL_V"");

		if (!OracleComp.Exists() || !OracleComp.NextRecord())
			EAIRaiseError(TranslateMessage(
				""ORA_MSG_MISSING_COMPONENT,SIE_LINES_ALL_V,SIE_HEADERS_ALL_V""));
			
		opCode = OracleComp.GetFieldValue(""SysOp"");
		if (opCode == ""D"")
		{
			// Delete Order line
			var BusObject = TheApplication().GetBusObject(""Order Entry"");
			var LineComp = BusObject.GetBusComp(""Order Entry - Line Items"");
			LineComp.ActivateField(""Integration Id"");
			LineComp.ActivateField(""Order Header Id"");
			LineComp.SetViewMode(3);
			LineComp.ClearToQuery();
						
			LineComp.SetSearchSpec(""Integration Id"", 
				OracleComp.GetFieldValue(""ORIGINAL_SYSTEM_REFERENCE""));
			
			LineComp.ExecuteQuery();
			LineComp.FirstRecord();
			var HeaderId = LineComp.GetFieldValue(""Order Header Id"");
			var LineId = LineComp.GetFieldValue (""Id"");
			
			SiebelComp.NewRecord ();
			SiebelComp.SetFieldValue(""operation"", ""upsert"");
			SiebelComp.SetFieldValue(""Id"", HeaderId);
			
			var SiebelOrderLines = SiebelComp.CreateIntComp (""Order Entry - Line Items"");	
			SiebelOrderLines.NewRecord ();
			SiebelOrderLines.SetCopySource(OracleComp);
			SiebelOrderLines.SetFieldValue(""operation"", ""delete"");
			SiebelOrderLines.SetFieldValue(""Order Header Id"", HeaderId);
			SiebelOrderLines.SetFieldValue(""Id"", LineId);
			SiebelOrderLines.CopyFieldValue(""Integration Id"", ""ORIGINAL_SYSTEM_REFERENCE"");
				
			return true;
		}
		else
			EAIRaiseError(TranslateMessage(
				""ORA_MSG_INVALID_SYSOP,""+opCode+"",SIE_LINES_ALL_V""));
	}
	else return false;  // Not a delete
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
function SetOperationCode(SiebelIntComp, OracleIntComp)
{
	// Get the OP-CODE for this particular integration component
	var opCode = OracleIntComp.GetFieldValue(""SysOp"");
	
	// set the appropriate value in the Oracle side
	if(opCode == ""D"")
		SiebelIntComp.SetFieldValue(""operation"", ""delete"");
	else
		SiebelIntComp.SetFieldValue(""operation"", ""upsert"");
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
 	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
 	  d.getHours(), d.getMinutes(), d.getSeconds());
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function UpsertSiebelOrder (InputMsg, OutputMsg)
{
	// Declare a variable to hold the Siebel Integration Object.
	var SiebelIntObject;
	
	// Declare a variable to hold the Oracle Integration Object
	var OracleIntObject;
	
	// Get the Oracle Integration Object from the Input message
	OracleIntObject = InputMsg.GetIntObj (""Order - Get Oracle11i Order (Oracle)"");
	
	// Check the validity of the Oracle Integration Object.
	if (OracleIntObject.Exists ())
	{
		// Go ahead and create a new Siebel Integration Object on the Output Message.
		SiebelIntObject = OutputMsg.CreateIntObj (""Order - Get Oracle11i Order (Siebel)"");
		
		// Navigate through all the available instances in the Integration Object
		while (OracleIntObject.NextInstance ())
		{
			// Create a new instance in the Oracle Integration Object
			SiebelIntObject.NewInstance (); 
			
			// CopyFields is again a user defined function which is written to copy all // the fields from the source to the target.
			CopyFields (OracleIntObject, SiebelIntObject);
		} ///~ end of while(OracleIntObject.NextInstance())
	} ///~ end of if(OracleIntObject.Exists())
}  ///~ End of UpsertSiebelOrder function."
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// DESCRIPTION
//    Javascript maps from Siebel Order to Oracle Order
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyFields (SiebelIntObject, OracleIntObject, OutputMsg)
{
	// Declare variables to hold the Siebel Primary Integration Component and 
	// The Oracle Primary Integration Component
	var count_line;
	var SiebelOrderHeader, OracleOrderHeader;
	
	var PriceListId, DiscountId, DiscountLineId, PriceDis, calculate_price, percent, PriceList;
	
	var HeaderSharedID, HeaderIntegID, LineSharedID, LineIntegID;
	
	// Open the EAI Value Map for Orders here.
	var OrderEnteredStatusVM = EAIGetValueMap (""Oracle Order Status"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderTypeVM = EAIGetValueMap (""Oracle Order Type"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderUOM 	= EAIGetValueMap (""Oracle Unit of Measure"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
 	var OrderTefVM 	= EAIGetValueMap (""Oracle Tax Exempt Flag"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderPtcVM 	= EAIGetValueMap (""Oracle Payment Type Code"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderTercVM = EAIGetValueMap (""Oracle Tax Exempt Reason"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderSpcVM 	= EAIGetValueMap (""Oracle Shipment Priority Code"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderSmcVM 	= EAIGetValueMap (""Oracle Ship Method Code"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);			
	var OrderFtcVM 	= EAIGetValueMap (""Oracle Freight"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);							
	var OrderFcVM 	= EAIGetValueMap (""Oracle Fob Code"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);	
	var SalesRepIdVM = EAIGetValueMap (""Oracle Sales Rep ID"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);

	var OrderLinesSmcVM = EAIGetValueMap (""Oracle Ship Method Code"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);							
	
	var OraShipToCusId, OraShipToContactId;

	//Get the primary integration component from the Siebel Integration Object
	SiebelOrderHeader = SiebelIntObject.GetPrimaryIntComp (""Order Entry - Orders"");
	
	// if the Primary Integration Component is valid, then go ahead with the copying process
	// else raise an error message.
	
	if (SiebelOrderHeader.Exists ())
	{
		// Create the Oracle Primary Integration Component on the Oracle Integration
		// Component
		OracleOrderHeader = 
			OracleIntObject.CreatePrimaryIntComp (""SIE_HEADERS_INTERFACE_ALL"");
		
		// Navigate through all the available records in the Siebel primary integration //component 
		
		while (SiebelOrderHeader.NextRecord ())
		{
			OracleOrderHeader.NewRecord ();
			OracleOrderHeader.SetCopySource (SiebelOrderHeader);
			OracleOrderHeader.SetFieldValue (""operation"", ""upsert"");
			
			HeaderIntegID = SiebelOrderHeader.GetFieldValue(""Integration Id"");
			
			if (HeaderIntegID != """")
			{
				// Existing Order
				HeaderSharedID = HeaderIntegID;
			}
			else
			{
				// New Order
				HeaderSharedID = SiebelOrderHeader.GetFieldValue (""Id"");
			}
			OracleOrderHeader.SetFieldValue (""ORIGINAL_SYSTEM_REFERENCE"", HeaderSharedID);
			OutputMsg.SetArgument(""ObjectIntegrationId"", HeaderSharedID);
				
			OracleOrderHeader.CopyFieldValue (""PURCHASE_ORDER_NUM"", ""Order Number"");
			OracleOrderHeader.CopyFieldValue (""DATE_ORDERED"", ""Order Date"");
			OracleOrderHeader.CopyFieldValue (""CONVERSION_DATE"", ""Pricing Date"");

			var CustId = SiebelOrderHeader.GetFieldValue (""Account Integration Id"");
			if(CustId != """") 
			{
				OracleOrderHeader.SetFieldValue (""CUSTOMER_SHARED_ID"", CustId);
			}
			else
			{
				EAIRaiseError( TranslateMessage(""ORA_MSG_INVALID_CUST_INTEGRATION_ID, NULL""));
			}
			
			OracleOrderHeader.CopyFieldValue (""SHIP_ADDRESS_SHARED_ID"", 
				""Ship To Address Integration Id"");
				
			OracleOrderHeader.CopyFieldValue (""INVOICE_ADDRESS_SHARED_ID"", 
				""Bill To Address Integration Id"");
				
			OracleOrderHeader.CopyFieldValue (""DATE_REQUESTED_CURRENT"", ""Requested Ship Date"");
			
			var ShipToAccountIntId = 
				SiebelOrderHeader.GetFieldValue (""Ship To Account Integration Id"");
						
			if(ShipToAccountIntId != """" && ShipToAccountIntId != null)
			{
				OraShipToCusId = ShipToAccountIntId;
			}
			else
			{
				OraShipToCusId = CustId;
			}
			OracleOrderHeader.SetFieldValue(""SHIP_TO_CUSTOMER_SHARED_ID"", OraShipToCusId);
				
			var BillToAccountIntId = 
				SiebelOrderHeader.GetFieldValue (""Bill To Account Integration Id"");

			if(BillToAccountIntId != """" && BillToAccountIntId != null)
			{
				OracleOrderHeader.SetFieldValue (""INVOICE_CUSTOMER_SHARED_ID"", BillToAccountIntId);
			}
			else
			{
				OracleOrderHeader.SetFieldValue (""INVOICE_CUSTOMER_SHARED_ID"", CustId);
			}
				
			OracleOrderHeader.CopyFieldValue (""ORDERED_BY_CONTACT_SHARED_ID"", ""Contact Integration Id"");

			// If there is a Ship To Contact specified in the order, map that to 
			// SHIP_TO_CONTACT_SHARED_ID otherwise, map it to Contact Integration Id, 
			// which is the default.
			var ShipToContactIntId = 
				SiebelOrderHeader.GetFieldValue (""Ship To Contact Integration Id"");
				
			if(ShipToContactIntId != """" && ShipToContactIntId != null) 
			{
				OraShipToContactId = ShipToContactIntId;
			}
			else
			{
				OraShipToContactId = SiebelOrderHeader.GetFieldValue (""Contact Integration Id"");
			}
			OracleOrderHeader.SetFieldValue (""SHIP_TO_CONTACT_SHARED_ID"", OraShipToContactId);	
				
			// If there is a Bill To Contact specified in the order, map it to 
			// INVOICE_TO_CONTACT_ID otherwise, map it to Contact Integration Id, 
			// which is the default.
			var BillToContactIntId = 
				SiebelOrderHeader.GetFieldValue (""Bill To Contact Integration Id"");
				
			if(BillToContactIntId != """" && BillToContactIntId != null) 
			{
				OracleOrderHeader.SetFieldValue(""INVOICE_TO_CONTACT_SHARED_ID"", BillToContactIntId);
			}
			else
			{
				OracleOrderHeader.CopyFieldValue (""INVOICE_TO_CONTACT_SHARED_ID"", ""Contact Integration Id"");
			}

			PriceDis = 
				SiebelOrderHeader.GetFieldValue (""Price List Integration Id"").split(""-"");
			PriceListId = (PriceDis.length > 0) ? PriceDis[0] : """";
			DiscountId =  (PriceDis.length > 1) ? PriceDis[1] : """";
				
			OracleOrderHeader.SetFieldValue (""PRICE_LIST_ID"", PriceListId);
				
			OracleOrderHeader.CopyFieldValue (""SHIPPING_INSTRUCTIONS"", ""Ship Instructions"");
			
			var OrgIntId = SiebelOrderHeader.GetFieldValue (""Organization Integration Id"");
			if(OrgIntId != null && OrgIntId != """")
			{
				OracleOrderHeader.CopyFieldValue (""ORG_ID"", ""Organization Integration Id"");
			}
			else
			{
				EAIRaiseError( TranslateMessage(""ORA_MSG_INVALID_ORG_INTEGRATION_ID, NULL""));				
			}
			
			OracleOrderHeader.SetFieldValue (""ENTERED_STATE_NAME"", OrderEnteredStatusVM.Translate (
				SiebelOrderHeader.GetFieldValue (""Status"")));

			OracleOrderHeader.CopyFieldValue (""CREATION_DATE"", ""Created"");
			OracleOrderHeader.CopyFieldValue (""LAST_UPDATE_DATE"", ""Updated"");
			
			OracleOrderHeader.SetFieldValue (""CURRENCY_CODE"", SiebelOrderHeader.GetFieldValue (""Currency Code"", ""USD""));

			OracleOrderHeader.SetFieldValue (""ORDER_TYPE"", OrderTypeVM.Translate (
				SiebelOrderHeader.GetFieldValue (""Order Type"")));

			OracleOrderHeader.SetFieldValue (""TAX_EXEMPT_FLAG"", OrderTefVM.Translate (
				SiebelOrderHeader.GetFieldValue (""Tax Exempt"")));

			OracleOrderHeader.SetFieldValue (""TAX_EXEMPT_REASON_CODE"", OrderTercVM.Translate (
				SiebelOrderHeader.GetFieldValue (""Tax Exempt Reason"")));
				
			OracleOrderHeader.CopyFieldValue (""TAX_EXEMPT_NUM"", ""Tax Exempt Number"");
              	OracleOrderHeader.SetFieldValue (""PAYMENT_TYPE_CODE"", OrderPtcVM.Translate (
              		SiebelOrderHeader.GetFieldValue (""Payment Method"")));
              		
			OracleOrderHeader.SetFieldValue (""SHIPMENT_PRIORITY_CODE"", OrderSpcVM.Translate (
				SiebelOrderHeader.GetFieldValue (""Order Priority"")));

			OracleOrderHeader.SetFieldValue (""SHIP_METHOD_CODE"", OrderSmcVM.Translate (
				SiebelOrderHeader.GetFieldValue (""Carrier Type"")));
				
			OracleOrderHeader.SetFieldValue (""FREIGHT_TERMS_CODE"", OrderFtcVM.Translate (
				SiebelOrderHeader.GetFieldValue (""Freight Terms"")));


//			OracleOrderHeader.SetFieldValue (""FOB_CODE"", OrderFcVM.Translate (
//				SiebelOrderHeader.GetFieldValue (""Freight Terms Info"")));

			OracleOrderHeader.SetFieldValue (""TERMS_ID"", 
				SiebelOrderHeader.GetFieldValue (""Payment Term Integration Id""));
				
			OracleOrderHeader.SetFieldValue (""SALESREP_ID"", SalesRepIdVM.Translate (
				SiebelOrderHeader.GetFieldValue (""Primary Position Contact Id"")));
				
			var HeaderDiscount = SiebelOrderHeader.GetFieldValue(""Discount"");
			if (HeaderDiscount != null && HeaderDiscount != """")
			{
				EAIRaiseError(TranslateMessage(""ORA_MSG_HEADER_DISCOUNT_NOT_ALLOWED,""));
			}

			//
			// ORDER LINES
			//
			var SiebelOrderLines = SiebelOrderHeader.GetIntComp (""Order Entry - Line Items"");
			
			var OracleOrderLines, OraclePriceAdjustments;
				
			if (SiebelOrderLines.Exists ())
			{
				OracleOrderLines = OracleOrderHeader.CreateIntComp (""SIE_LINES_INTERFACE_ALL"");
				count_line =0;					
				while (SiebelOrderLines.NextRecord ())
				{
					count_line = count_line+1;
					var BasePrice = SiebelOrderLines.GetFieldValue (""Base Price"");
					var ItemPrice = SiebelOrderLines.GetFieldValue (""Item Price"");
					
					OracleOrderLines.NewRecord ();
					OracleOrderLines.SetCopySource (SiebelOrderLines);
					OracleOrderLines.SetFieldValue (""operation"", ""upsert"");

					OracleOrderLines.SetFieldValue (""ORIGINAL_SYSTEM_REFERENCE"", HeaderSharedID);
					
					LineIntegID = SiebelOrderLines.GetFieldValue(""Integration Id"");
					
					if (LineIntegID != """")
					{
						// Existing Order Line
						LineSharedID = LineIntegID;
					}
					else
					{
						// New Order Line
						LineSharedID = SiebelOrderLines.GetFieldValue(""Id"");
					}
					OracleOrderLines.SetFieldValue  (""ORIGINAL_SYSTEM_LINE_REFERENCE"", LineSharedID);

					OracleOrderLines.CopyFieldValue (""LINE_NUMBER"", ""Line Number"");
					OracleOrderLines.CopyFieldValue (""ORDERED_QUANTITY"", ""Quantity Requested"");
					OracleOrderLines.CopyFieldValue (""DATE_REQUESTED_CURRENT"", ""Due Date"");
					OracleOrderLines.CopyFieldValue (""LIST_PRICE"", ""Base Price"");
					OracleOrderLines.CopyFieldValue (""SELLING_PRICE"", ""Item Price"");							
					OracleOrderLines.CopyFieldValue (""INVENTORY_ITEM_ID"", ""Product Integration Id"");
					OracleOrderLines.CopyFieldValue (""ORG_ID"", ""Organization Integration Id"");
					OracleOrderLines.CopyFieldValue (""SHIPPED_QUANTITY"", ""Quantity Shipped"");
					OracleOrderLines.SetFieldValue  (""PRICE_LIST_ID"", PriceListId);
					
					OracleOrderLines.SetFieldValue  (""SHIP_ADDRESS_SHARED_ID"", 
						SiebelOrderHeader.GetFieldValue(""Ship To Address Integration Id""));

					OracleOrderLines.SetFieldValue  (""SHIP_TO_CUSTOMER_SHARED_ID"", OraShipToCusId);
					OracleOrderLines.SetFieldValue  (""SHIP_TO_CONTACT_SHARED_ID"", OraShipToContactId);
				
					OracleOrderLines.CopyFieldValue (""CREATION_DATE"", ""Created"");
					OracleOrderLines.CopyFieldValue (""LAST_UPDATE_DATE"", ""Updated"");
					
					OracleOrderLines.SetFieldValue (""UNIT_CODE"", OrderUOM.Translate(
						SiebelOrderLines.GetFieldValue(""Product Unit of Measure"", ""Each"")));

					OracleOrderLines.SetFieldValue (""SHIP_METHOD_CODE"", OrderLinesSmcVM.Translate (
						SiebelOrderLines.GetFieldValue (""Carrier Code"")));

					OracleOrderLines.CopyFieldValue (""WAREHOUSE_ID"", ""Source Inventory Loc Integration Id"");	

					OracleOrderLines.SetFieldValue (""SHIPMENT_PRIORITY_CODE"", OrderSpcVM.Translate (
						SiebelOrderHeader.GetFieldValue (""Order Priority"")));

					OracleOrderLines.SetFieldValue (""TERMS_ID"", 
						SiebelOrderHeader.GetFieldValue(""Payment Term Integration Id""));
				
					if (ItemPrice == null || ItemPrice == """")
					{
						calculate_price = ""Y"";
						OracleOrderLines.SetFieldValue (""CALCULATE_PRICE"", ""Y"");
					}
			 		else
					{
						calculate_price = ""N"";
						OracleOrderLines.SetFieldValue (""CALCULATE_PRICE"", ""N"");
						var DiscountLineId = 
							SiebelOrderLines.GetFieldValue(""Volume Discount Integration Id"");

						var DiscountPercent = 
							SiebelOrderLines.GetFieldValue(""Calculated Net Discount Percent"");

						if (DiscountId != """" && DiscountLineId != null && 
							DiscountLineId != """" && BasePrice != ItemPrice)
						{
							OraclePriceAdjustments = OracleOrderLines.CreateIntComp (""SIE_PRICE_ADJUSTMENTS_INT"");
				
							OraclePriceAdjustments.NewRecord ();
							OraclePriceAdjustments.SetCopySource (SiebelOrderLines);
							OraclePriceAdjustments.CopyFieldValue(""PERCENT"", ""Calculated Net Discount Percent"");
							OraclePriceAdjustments.SetFieldValue (""DISCOUNT_ID"", DiscountId);
							OraclePriceAdjustments.CopyFieldValue(""DISCOUNT_LINE_ID"", ""Volume Discount Integration Id"");
							OraclePriceAdjustments.SetFieldValue (""ORIGINAL_SYSTEM_LINE_REFERENCE"", LineSharedID);
							OraclePriceAdjustments.SetFieldValue (""ORIGINAL_SYSTEM_REFERENCE"", HeaderSharedID);
							OraclePriceAdjustments.SetFieldValue (""OPERATION_CODE"", ""INSERT"");

							OraclePriceAdjustments.CopyFieldValue (""CREATION_DATE"", ""Created"");
							OraclePriceAdjustments.CopyFieldValue (""LAST_UPDATE_DATE"", ""Updated"");
						}
						else if (BasePrice != ItemPrice && DiscountId == """")
						{
							EAIRaiseError(TranslateMessage(""ORA_MSG_DISCOUNT_ID_NULL,""));

						}
						else if (BasePrice != ItemPrice && (DiscountLineId == null || DiscountLineId == """"))
						{
							EAIRaiseError(TranslateMessage(""ORA_MSG_DISCOUNT_LINE_ID_NULL,""));
						}
					}		
				} ///~ while(SiebelOrderLines.NextRecord())
				if ( count_line == 0 ) 
					EAIRaiseError(TranslateMessage(
					""ORA_MSG_MISSING_ORDER_LINE""));
							 
			} ///~ if(SiebelOrderLines.Exists())
			else
			{
				// Exception: No child integration components
				EAIRaiseError(TranslateMessage(
					""ORA_MSG_MISSING_ORDER_LINE""));
			} ///~ else
		} ///~ while(SiebelOrderHeader.NextRecord())
	} ///~ if(SiebelOrderHeader.Exists())
	else
	{
		// Exception: No primary integration component.
		EAIRaiseError(TranslateMessage(
			""ORA_MSG_MISSING_COMPONENT,Order Entry - Orders,Orders - Get/Put Oracle Orders (Siebel)""));
	} ///~ else
} /// ~ End of function CopyFields"
"// Map Siebel Order to Oracle Order
// Returns argument ""ObjectIntegrationId""

function CreateSiebelOrder (InputMsg, OutputMsg)
{
	var SiebelIntObject, OracleIntObject;
	
	OutputMsg.SetArgument(""ObjectIntegrationId"", """");

	SiebelIntObject = InputMsg.GetIntObj (""Orders - Get Oracle Orders (Siebel)"");
	
	if (SiebelIntObject.Exists ())
	{
		// 
		// Go ahead and create a new Oracle Integration Object on the Output Message.
		// 
		OracleIntObject = OutputMsg.CreateIntObj (""Orders - Put Oracle Orders (Oracle)"");
		
		// 
		// Navigate through all the available instances in the Integration Object
		// 
		while (SiebelIntObject.NextInstance ())
		{
			// 
			// Create a new instance in the Oracle Integration Object
			// 
			OracleIntObject.NewInstance (); 
			// 
			// CopyFields is again a user defined function which is written to copy all 
			// the fields from the source to the target.
			// 
			CopyFields (SiebelIntObject, OracleIntObject, OutputMsg);
		}
	}
	
}  ///~ End of CreateSiebelOrder function."
"// Set Integration Id for new order

function OrderLoopBack(InputMsg, OutputMsg)
{
	var SiebelObjectIn, SiebelObjectOut;
	
	var HeaderCompIn, HeaderCompOut, 
		LineCompIn, LineCompOut;
	
	var HeaderSharedID, HeaderIntegId, 
		LineSharedID, LineIntegId; 
	
	/* Check the validation message */
	var ValidationMessage = InputMsg.GetArgument(""Validation Message"");
	
	if (ValidationMessage != """" && ValidationMessage != null)
	{
		EAIRaiseError(TranslateMessage(ValidationMessage));
	}

	SiebelObjectIn = InputMsg.GetIntObj(""Orders - Get Oracle Orders (Siebel)"");
	
	if (SiebelObjectIn.Exists ())
	{
		SiebelObjectOut = 
			OutputMsg.CreateIntObj(""Orders - Get Oracle Orders (Siebel)"");
		
		while (SiebelObjectIn.NextInstance ())
		{
			SiebelObjectOut.NewInstance ();

			HeaderCompIn = SiebelObjectIn.GetPrimaryIntComp (""Order Entry - Orders"");

			// 
			// ORDER HEADER
			//
			if (HeaderCompIn.Exists ())
			{
				HeaderCompOut = SiebelObjectOut.CreatePrimaryIntComp(""Order Entry - Orders"");
								
		    	while (HeaderCompIn.NextRecord ())
				{
					HeaderCompOut.SetCopySource (HeaderCompIn);
					
					HeaderCompOut.NewRecord ();   
						
					HeaderCompOut.CopyFieldValue(""Id"", ""Id"");
					HeaderCompOut.SetFieldValue(""EAI Sync Date"", Timestamp());
					
					HeaderIntegId = HeaderCompIn.GetFieldValue(""Integration Id"");
	 				if (HeaderIntegId == """" || HeaderIntegId == null)
					{
						// New Order
						HeaderCompOut.CopyFieldValue(""Integration Id"", ""Id"");
						HeaderCompOut.SetFieldValue(""Back Office Process Status"", 
							""Creating in Back Office"");
					}
					else
					{
						// Existing Order
						HeaderCompOut.CopyFieldValue(""Integration Id"", ""Integration Id"");
						HeaderCompOut.SetFieldValue(""Back Office Process Status"", 
							""Sync To Back Office"");
					}
					HeaderCompOut.SetFieldValue(""Back Office Error Text"", """");

					//
					// ORDER LINES
					//		
					var LineCompIn = HeaderCompIn.GetIntComp (""Order Entry - Line Items"");
					
					if (LineCompIn.Exists())
					{
						LineCompOut = HeaderCompOut.CreateIntComp(""Order Entry - Line Items"");
									
						while (LineCompIn.NextRecord())
						{
							LineCompOut.SetCopySource (LineCompIn);
				
							LineCompOut.NewRecord();   
	
							LineCompOut.CopyFieldValue(""Id"", ""Id"");

							LineIntegId = LineCompIn.GetFieldValue(
								""Integration Id"");
								
			 				if (LineIntegId == """" || LineIntegId == null)
			 				{
								// New Line
								LineCompOut.CopyFieldValue(""Integration Id"", ""Id"");
							}
							else
							{
								// Existing Line
								LineCompOut.CopyFieldValue(""Integration Id"", ""Integration Id"");
							}
						}
					} // END ORDER LINES
				}
			} // END ORDER HEADER 
		} 
	} 
	else
	{
		EAIRaiseError (TranslateMessage (
			""ORA_MSG_EMPTY,Orders - Get Oracle Orders (Siebel)""));
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{  
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
 	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
 	  d.getHours(), d.getMinutes(), d.getSeconds());
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// LAST UPDATED	:	01/03/2001
//
// DESCRIPTION
//    Javascript maps from Siebel Order to Oracle11i Entities
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyFields (SiebelIntObject, OracleIntObject, OutputMsg)
{
	// Declare variables to hold the Siebel Primary Integration Component and 
	// The Oracle Primary Integration Component
	
	var count_line; 
	
	var SiebelOrderHeader, OracleOrderHeader;
	
	var HeaderSharedID, HeaderIntegID, LineSharedID, LineIntegID;
	
	// Open the EAI Value Map for Orders here.
	var OrderStatusVM 	= EAIGetValueMap (""Oracle11i Order Status"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderTefVM 		= EAIGetValueMap (""Oracle11i Tax Exempt Flag"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderTercVM 	= EAIGetValueMap (""Oracle11i Tax Exempt Reason"", ""Siebel Outbound"");
	var OrderPtcVM 		= EAIGetValueMap (""Oracle11i Payment Type Code"", ""Siebel Outbound"");
	var OrderSpcVM 		= EAIGetValueMap (""Oracle11i Shipment Priority"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderLinesSmcVM = EAIGetValueMap (""Oracle11i Ship Method Code"", ""Siebel Outbound"");
	var OrderFtcVM 		= EAIGetValueMap (""Oracle11i Freight"", ""Siebel Outbound"");
	var OrderFcVM 		= EAIGetValueMap (""Oracle11i Fob Code"", ""Siebel Outbound"");
	var OrderSmcVM 		= EAIGetValueMap (""Oracle11i Ship Method Code"", ""Siebel Outbound"");
	var OrderTypeVM		= EAIGetValueMap (""Oracle11i Order Type"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var SalesRepIdVM 	= EAIGetValueMap (""Oracle11i Sales Rep ID"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);

		
	//Get the primary integration component from the Siebel Integration Object
	SiebelOrderHeader = SiebelIntObject.GetPrimaryIntComp (""Order Entry - Orders"");
	
	// if the Primary Integration Component is valid, then go ahead with the copying process
	// else raise an error message.
	if (SiebelOrderHeader.Exists ())
	{
		// Create the Oracle Primary Integration Component on the Oracle Integration
		// Component
		OracleOrderHeader = 
			OracleIntObject.CreatePrimaryIntComp (""SIE_ORDER_HEADERS_ALL"");
		
		// Navigate to the first record in the Siebel Primary Integration Object and check for 
		// Multiple records if multiple records are found, then navigate through all the 
		// available records in the Siebel primary integration component 
		while (SiebelOrderHeader.NextRecord ())
		{
										
			OracleOrderHeader.NewRecord ();
			OracleOrderHeader.SetCopySource (SiebelOrderHeader);
				
			OracleOrderHeader.SetFieldValue (""OPERATION"", ""create"");
				
			HeaderIntegID = SiebelOrderHeader.GetFieldValue(""Integration Id"");
				
			if (HeaderIntegID != """")
			{
				// Existing Order
				HeaderSharedID = HeaderIntegID;
			}
			else
			{
					// New Order
				HeaderSharedID = SiebelOrderHeader.GetFieldValue (""Id"");
			}
			OracleOrderHeader.SetFieldValue (""ORIG_SYS_DOCUMENT_REF"", HeaderSharedID);
			OutputMsg.SetArgument(""ObjectIntegrationId"", HeaderSharedID);
					
			OracleOrderHeader.CopyFieldValue (""CREATION_DATE"", ""Created"");
			OracleOrderHeader.CopyFieldValue (""LAST_UPDATE_DATE"", ""Updated"");
												
			OracleOrderHeader.SetFieldValue (""ORDER_TYPE"", OrderTypeVM.Translate (SiebelOrderHeader.GetFieldValue (""Order Type"")));
			OracleOrderHeader.CopyFieldValue (""ORDERED_DATE"", ""Order Date"");	
			OracleOrderHeader.CopyFieldValue (""TRANSACTIONAL_CURR_CODE"", ""Currency Code"", ""USD"", ""USD"");
			OracleOrderHeader.CopyFieldValue (""PRICING_DATE"", ""Pricing Date"");	
			OracleOrderHeader.SetFieldValue (""CONVERSION_TYPE_CODE"", ""Corporate"");
			var OracleOrderStatus = OrderStatusVM.Translate (SiebelOrderHeader.GetFieldValue (""Status""));

			OracleOrderHeader.SetFieldValue (""ENTERED_STATE_NAME"", OracleOrderStatus);
			if (OracleOrderStatus == ""BOOKED"")
			{
				OracleOrderHeader.SetFieldValue (""BOOKED_FLAG"", ""Y"");
				OracleOrderHeader.CopyFieldValue (""BOOKED_DATE"", ""Order Date"");
			}

			//
			// SOLD TO (ORDERED BY)
			//
			var CustId = SiebelOrderHeader.GetFieldValue (""Account Integration Id"");
			if(CustId != """") 
			{
				OracleOrderHeader.SetFieldValue (""CUSTOMER_SHARED_ID"", CustId);
			}
			else
			{
				EAIRaiseError( TranslateMessage(""ORA_MSG_INVALID_CUST_INTEGRATION_ID, NULL""));
			}
				
			OracleOrderHeader.CopyFieldValue (""ORDERED_BY_CONTACT_SHARED_ID"", ""Contact Integration Id"");

			//
			// SHIP TO
			//
			OracleOrderHeader.CopyFieldValue (""SHIP_ADDRESS_SHARED_ID"", 
					""Ship To Address Integration Id"");
					
			var ShipToAccountIntId = 
					SiebelOrderHeader.GetFieldValue (""Ship To Account Integration Id"");
							
			if(ShipToAccountIntId != """" && ShipToAccountIntId != null)
			{
				var OraShipToCusId = ShipToAccountIntId;
			}
			else
			{
				OraShipToCusId = CustId;
			}
			OracleOrderHeader.SetFieldValue(""SHIP_TO_CUSTOMER_SHARED_ID"", OraShipToCusId);
					
			//CopyFieldValue (""SHIP_TO_CONTACT_SHARED_ID"", ""Ship To Contact Integration Id"");	
					
			//
			// BILL TO
			//
			OracleOrderHeader.CopyFieldValue (""INVOICE_ADDRESS_SHARED_ID"", 
					""Bill To Address Integration Id"");
					
			var BillToAccountIntId = 
					SiebelOrderHeader.GetFieldValue (""Bill To Account Integration Id"");

			if(BillToAccountIntId != """" && BillToAccountIntId != null)
			{
				OracleOrderHeader.SetFieldValue (""INVOICE_CUSTOMER_SHARED_ID"", BillToAccountIntId);
			}
			else
			{
				OracleOrderHeader.SetFieldValue (""INVOICE_CUSTOMER_SHARED_ID"", CustId);
			}
					
			//CopyFieldValue (""INVOICE_TO_CONTACT_SHARED_ID"", ""Bill To Contact Integration Id"");
				
			OracleOrderHeader.SetFieldValue (""SALESREP_ID"", SalesRepIdVM.Translate (
					SiebelOrderHeader.GetFieldValue (""Primary Position Contact Id"")));
			OracleOrderHeader.CopyFieldValue (""REQUEST_DATE"", ""Requested Ship Date"");
								
			OracleOrderHeader.SetFieldValue (""TAX_EXEMPT_FLAG"", OrderTefVM.Translate (
					SiebelOrderHeader.GetFieldValue (""Tax Exempt"", ""N"", ""N"")));
			OracleOrderHeader.CopyFieldValue (""TAX_EXEMPT_NUMBER"", ""Tax Exempt Number"");
			OracleOrderHeader.SetFieldValue (""TAX_EXEMPT_REASON_CODE"", OrderTercVM.Translate (
					SiebelOrderHeader.GetFieldValue (""Tax Exempt Reason"")));

			OracleOrderHeader.CopyFieldValue (""PRICE_LIST_ID"", ""Price List Integration Id"");
											
			OracleOrderHeader.SetFieldValue (""SHIPMENT_PRIORITY_CODE"", OrderSpcVM.Translate (SiebelOrderHeader.GetFieldValue (""Order Priority"")));

			OracleOrderHeader.SetFieldValue (""SHIPPING_METHOD_CODE"", OrderSmcVM.Translate (
					SiebelOrderHeader.GetFieldValue (""Carrier Type"")));
			OracleOrderHeader.SetFieldValue (""FREIGHT_TERMS_CODE"", OrderFtcVM.Translate (SiebelOrderHeader.GetFieldValue (""Freight Terms"")));


//			OracleOrderHeader.SetFieldValue (""FOB_POINT_CODE"", OrderFcVM.Translate (
//					SiebelOrderHeader.GetFieldValue (""Freight Terms Info"")));

			OracleOrderHeader.CopyFieldValue (""SHIPPING_INSTRUCTIONS"", ""Ship Instructions"");
				
			var OrgIntId = SiebelOrderHeader.GetFieldValue (""Organization Integration Id"");
			if(OrgIntId != null && OrgIntId != """")
			{
				OracleOrderHeader.SetFieldValue (""ORG_ID"", OrgIntId);
			}
			else
			{
				EAIRaiseError( TranslateMessage(""ORA_MSG_INVALID_ORG_INTEGRATION_ID, NULL""));				
			}
				
			OracleOrderHeader.CopyFieldValue (""SOLD_FROM_ORG_ID"", ""Source Inventory Loc Integration Id"");
			OracleOrderHeader.SetFieldValue (""VERSION_NUMBER"", ""1"");
				
			// Setting the Payment details			
			OracleOrderHeader.CopyFieldValue (""PAYMENT_TERM_ID"", ""Payment Term Integration Id"");
			var PaymentType = OrderPtcVM.Translate (
					SiebelOrderHeader.GetFieldValue (""Payment Method""));
			OracleOrderHeader.SetFieldValue (""PAYMENT_TYPE_CODE"", PaymentType);
			if (PaymentType == ""CHECK"")
			{
				OracleOrderHeader.SetFieldValue (""PAYMENT_AMOUNT"", ""0"");
				OracleOrderHeader.SetFieldValue (""CHECK_NUMBER"", ""9999999999"");
			}
			if (PaymentType == ""CASH"")
			{
				OracleOrderHeader.SetFieldValue (""PAYMENT_AMOUNT"", ""0"");
			}
			if (PaymentType == ""CREDIT_CARD"")
			{
				OracleOrderHeader.CopyFieldValue (""CREDIT_CARD_EXPIRATION_DATE"", ""Credit Card Expiration Date"");
				OracleOrderHeader.CopyFieldValue (""CREDIT_CARD_HOLDER_NAME"", ""Credit Card Holder"");
				OracleOrderHeader.CopyFieldValue (""CREDIT_CARD_NUMBER"", ""Credit Card Number"");
			}
			
			// Get the Siebel Child Integration Component from the Siebel Primary 
			// Integration Component
			var SiebelOrderLines = SiebelOrderHeader.GetIntComp (""Order Entry - Line Items"");
			
			// Declare a variable to hold the Oracle child integration component.
			// (SIE_ORDER_LINES_ALL)
			var OracleOrderLines;
										
			// Check the validity of the integration component.
			if (SiebelOrderLines.Exists ())
			{
				// Create a new child integration component in the Oracle 
				// Primary integration 
				// Component
				OracleOrderLines = OracleOrderHeader.CreateIntComp (""SIE_ORDER_LINES_ALL"");
									
				// Navigate through all the available records.
				count_line =0;
				while (SiebelOrderLines.NextRecord ())
				{
				    count_line = count_line + 1;
				
					OracleOrderLines.NewRecord ();
					OracleOrderLines.SetCopySource (SiebelOrderLines);
					OracleOrderLines.SetFieldValue (""OPERATION"", ""create"");
						
					OracleOrderLines.SetFieldValue (""ORIG_SYS_DOCUMENT_REF"", HeaderSharedID);
					
					LineIntegID = SiebelOrderLines.GetFieldValue(""Integration Id"");
						
					if (LineIntegID != """")
					{
						// Existing Order Line
						LineSharedID = LineIntegID;
					}
					else
					{
						// New Order Line
						LineSharedID = SiebelOrderLines.GetFieldValue(""Id"");
					}
					OracleOrderLines.SetFieldValue  (""ORIG_SYS_LINE_REF"", LineSharedID);

					OracleOrderLines.CopyFieldValue (""CREATION_DATE"", ""Created"");
					OracleOrderLines.CopyFieldValue (""LAST_UPDATE_DATE"", ""Updated"");
												
					OracleOrderLines.CopyFieldValue (""LINE_NUMBER"", ""Line Number"");
					OracleOrderLines.CopyFieldValue (""ORDERED_QUANTITY"", ""Quantity Requested"");	
					OracleOrderLines.SetFieldValue (""CALCULATE_PRICE_FLAG"", ""Y"");
					OracleOrderLines.CopyFieldValue (""REQUEST_DATE"", ""Due Date"");
					OracleOrderLines.CopyFieldValue (""SCHEDULE_SHIP_DATE"", ""Scheduled Ship Date"");
					OracleOrderLines.CopyFieldValue (""UNIT_LIST_PRICE"", ""Base Price"");
					OracleOrderLines.CopyFieldValue (""UNIT_SELLING_PRICE"", ""Item Price"");
					OracleOrderLines.CopyFieldValue (""INVENTORY_ITEM_ID"", ""Product Integration Id"");
					OracleOrderLines.CopyFieldValue (""SHIPPED_QUANTITY"", ""Quantity Shipped"");
					OracleOrderLines.SetFieldValue (""SHIPMENT_PRIORITY_CODE"", OrderSpcVM.Translate (SiebelOrderHeader.GetFieldValue (""Order Priority"")));

					OracleOrderLines.SetFieldValue (""SHIPPING_METHOD_CODE"", OrderLinesSmcVM.Translate (
						SiebelOrderLines.GetFieldValue (""Carrier Code"")));
					OracleOrderLines.SetFieldValue (""PRICE_LIST_ID"", 
						SiebelOrderHeader.GetFieldValue (""Price List Integration Id""));
					OracleOrderLines.SetFieldValue (""TAX_EXEMPT_FLAG"", OrderTefVM.Translate (
						SiebelOrderLines.GetFieldValue (""Tax Exempt Flag"", ""N"", ""N"")));
					OracleOrderLines.CopyFieldValue (""TAX_EXEMPT_NUMBER"", ""Tax Exempt Number"");
					OracleOrderLines.SetFieldValue (""TAX_EXEMPT_REASON_CODE"", OrderTercVM.Translate (
						SiebelOrderLines.GetFieldValue (""Tax Exempt Reason"")));
					OracleOrderLines.SetFieldValue (""ORG_ID"", 
						SiebelOrderHeader.GetFieldValue (""Organization Integration Id""));	
					//
					// SHIP TO
					//
					OracleOrderLines.SetFieldValue  (""SHIP_ADDRESS_SHARED_ID"", 
					SiebelOrderHeader.GetFieldValue(""Ship To Address Integration Id""));

					OracleOrderLines.SetFieldValue  (""SHIP_TO_CUSTOMER_SHARED_ID"", OraShipToCusId);
					//SetFieldValue  (""SHIP_TO_CONTACT_SHARED_ID"", 
					//SiebelOrderHeader.GetFieldValue (""Ship To Contact Integration Id""));
					
					OracleOrderLines.SetFieldValue  (""PAYMENT_TERM_ID"", 
						SiebelOrderHeader.GetFieldValue(""Payment Term Integration Id""));
					OracleOrderLines.CopyFieldValue (""SOLD_FROM_ORG_ID"", ""Source Inventory Loc Integration Id"");
					OracleOrderLines.CopyFieldValue (""SHIP_FROM_ORG_ID"", ""Source Inventory Loc Integration Id"");
				} ///~ while(SiebelOrderLines.NextRecord())
				
				if ( count_line == 0 ) 
					EAIRaiseError(TranslateMessage(
					""ORA_MSG_MISSING_ORDER_LINE""));
					
			} ///~ if(SiebelOrderLines.Exists())
			else
			{
				// Raise an exception saying that no child integration 
				// Components were found.
				EAIRaiseError(TranslateMessage(
					""ORA_MSG_MISSING_ORDER_LINE""));
			} ///~ else 
		} ///~ while(SiebelOrderHeader.NextRecord())*/
	} ///~ if(SiebelOrderHeader.Exists())
	else
	{
		// Raise an exception saying that the primary integration component is not found.
		EAIRaiseError (TranslateMessage (""ORA_MSG_MISSING_COMPONENT,Order Entry - Orders,Orders - Get/Put Oracle Orders (Siebel)""));
	} ///~ else
} /// ~ End of function CopyFields"
"// Map Siebel Order to Oracle Order
// Returns argument ""ObjectIntegrationId""

function CreateSiebelOrder (InputMsg, OutputMsg)
{
	var SiebelIntObject, OracleIntObject;
	
	OutputMsg.SetArgument(""ObjectIntegrationId"", """");

	SiebelIntObject = InputMsg.GetIntObj (""Order - Put Oracle11i Order (Siebel)"");
	
	if (SiebelIntObject.Exists ())
	{
		OracleIntObject = OutputMsg.CreateIntObj (""Order - Put Oracle11i Order (Oracle)"");
		
		while (SiebelIntObject.NextInstance ())
		{
			OracleIntObject.NewInstance (); 

			// CopyFields is again a user defined function which is written to copy all 
			// the fields from the source to the target.
			CopyFields (SiebelIntObject, OracleIntObject, OutputMsg);
		}
	}
}
"// Set Integration Id for new order

function OrderLoopBack(InputMsg, OutputMsg)
{
	var SiebelObjectIn, SiebelObjectOut;
	
	var HeaderCompIn, HeaderCompOut, 
		LineCompIn, LineCompOut;
	
	var HeaderSharedID, HeaderIntegId, 
		LineSharedID, LineIntegId; 
	
	/* Check the validation message */
	var ValidationMessage = InputMsg.GetArgument(""Validation Message"");
	
	if (ValidationMessage != """" && ValidationMessage != null)
	{
		EAIRaiseError(TranslateMessage(ValidationMessage));
	}

	SiebelObjectIn = InputMsg.GetIntObj(""Order - Put Oracle11i Order (Siebel)"");
	
	if (SiebelObjectIn.Exists ())
	{
		SiebelObjectOut = 
			OutputMsg.CreateIntObj(""Order - Put Oracle11i Order (Siebel)"");
		
		while (SiebelObjectIn.NextInstance ())
		{
			SiebelObjectOut.NewInstance ();

			HeaderCompIn = SiebelObjectIn.GetPrimaryIntComp (""Order Entry - Orders"");

			// 
			// ORDER HEADER
			//
			if (HeaderCompIn.Exists ())
			{
				HeaderCompOut = SiebelObjectOut.CreatePrimaryIntComp(""Order Entry - Orders"");
								
		    	while (HeaderCompIn.NextRecord ())
				{
					HeaderCompOut.SetCopySource (HeaderCompIn);
					
					HeaderCompOut.NewRecord ();   
							
					HeaderCompOut.CopyFieldValue(""Id"", ""Id"");
					HeaderCompOut.SetFieldValue(""EAI Sync Date"", Timestamp());
						
					HeaderIntegId = HeaderCompIn.GetFieldValue(""Integration Id"");
		 			if (HeaderIntegId == """" || HeaderIntegId == null)
					{
							// New Order
						HeaderCompOut.CopyFieldValue(""Integration Id"", ""Id"");
						HeaderCompOut.SetFieldValue(""Back Office Process Status"", 
							""Creating in Back Office"");
					}
					else
					{
							// Existing Order
						HeaderCompOut.CopyFieldValue(""Integration Id"", ""Integration Id"");
						HeaderCompOut.SetFieldValue(""Back Office Process Status"", 
							""Sync To Back Office"");
					}
					HeaderCompOut.SetFieldValue(""Back Office Error Text"", """");

					//
					// ORDER LINES
					//		
					var LineCompIn = HeaderCompIn.GetIntComp (""Order Entry - Line Items"");
					
					if (LineCompIn.Exists())
					{
						LineCompOut = HeaderCompOut.CreateIntComp(""Order Entry - Line Items"");
									
						while (LineCompIn.NextRecord())
						{
							LineCompOut.SetCopySource (LineCompIn);
				
							LineCompOut.NewRecord();   
		
							LineCompOut.CopyFieldValue(""Id"", ""Id"");

							LineIntegId = LineCompIn.GetFieldValue(
								""Integration Id"");
									
				 			if (LineIntegId == """" || LineIntegId == null)
				 			{
									// New Line
								LineCompOut.CopyFieldValue(""Integration Id"", ""Id"");
							}
							else
							{
									// Existing Line
								LineCompOut.CopyFieldValue(""Integration Id"", ""Integration Id"");
							}
						}
					} // END ORDER LINES
				}
			} // END ORDER HEADER 
		} 
	} 
	else
	{
		EAIRaiseError (TranslateMessage (
			""ORA_MSG_EMPTY,Order - Put Oracle11i Order (Siebel)""));
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
 	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
 	  d.getHours(), d.getMinutes(), d.getSeconds());
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// LAST UPDATED	:	12/28/2000
//
// DESCRIPTION
//    Javascript maps from Oracle Operating Unit to Siebel Organization
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyIntegrationObjectData (OracleIntObject, SiebelIntObject)
{
	//
	// Declare variables to hold the Oracle Primary Integration Component and
	// The Siebel Primary Integration Component
	//
	var OracleOpUnitIntComp, SiebelOrgIntComp;
	
	//var CurrencyCodeVM = EAIGetValueMap (""Oracle Currency Code"", ""Siebel Inbound"", ""USD"");
	
	//
	//Get the primary integration component from the Oracle Integration Object
	//
	OracleOpUnitIntComp = OracleIntObject.GetPrimaryIntComp (""SIE_ORG_V"");

	if (OracleOpUnitIntComp.Exists ())
	{
		// ORGANIZATION

		SiebelOrgIntComp = SiebelIntObject.CreatePrimaryIntComp (""Internal Division"");

		while (OracleOpUnitIntComp.NextRecord ())
		{
			
		
				SiebelOrgIntComp.NewRecord ();
				SiebelOrgIntComp.SetCopySource (OracleOpUnitIntComp);
				
				SiebelOrgIntComp.CopyFieldValue (""Integration Id"", ""OPERATING_UNIT_ID"");
				SiebelOrgIntComp.CopyFieldValue (""Name"",""NAME"");
				var CurrCode = OracleOpUnitIntComp.GetFieldValue (""CURRENCY_CODE"");
				if ((CurrCode == """") || (CurrCode == null))
					CurrCode = ""USD"";
				SiebelOrgIntComp.SetFieldValue (""Currency Code"", CurrCode);
				SiebelOrgIntComp.SetFieldValue (""Organization Flag"", ""Y"");

		
		}
	}
	else
	{
		EAIRaiseError(TranslateMessage(
			""ORA_MSG_MISSING_COMPONENT,SIE_ORG_V,Organization - Get Oracle Operating Unit (Oracle)""));
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function UpsertSiebelOrg (InputMsg, OutputMsg)
{
	//
	// Declare a variable to hold the Siebel Integration Object.
	//
	var SiebelIntObject;

	//
	// Declare a variable to hold the Oracle Integration Object
	//
	var OracleIntObject;

	//
	// Get the Oracle Integration Object from the Input message
	//
	OracleIntObject = InputMsg.GetIntObj(""Organization - Get Oracle Operating Unit (Oracle)"");

	//
	// Check the validity of the Oracle Integration Object.
	//
	if (OracleIntObject.Exists ())
	{
		//
		// Create a new Siebel Integration Object on the Output Message.
		//
		SiebelIntObject = OutputMsg.CreateIntObj (""Organization - Get Oracle Operating Unit (Siebel)"");

		//
		// Navigate through all the available instances in the Integration Object
		//
		while (OracleIntObject.NextInstance ())
		{
			//
			// Create a new instance in the Oracle Integration Object
			//
			SiebelIntObject.NewInstance ();

			//
			// CopyFields is a user defined function which is written to copy all
			// the fields from the source to the target.
			//
			CopyIntegrationObjectData (OracleIntObject, SiebelIntObject);
		}
	}
}  ///~ End of CreateSiebelProduct function."
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// LAST UPDATED	:	12/28/2000
//
// DESCRIPTION
//    Javascript maps from Oracle Operating Unit to Siebel Organization
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyIntegrationObjectData (OracleIntObject, SiebelIntObject)
{
	//
	// Declare variables to hold the Oracle Primary Integration Component and
	// The Siebel Primary Integration Component
	//
	var OracleOpUnitIntComp, SiebelOrgIntComp;
	
	//var CurrencyCodeVM = EAIGetValueMap (""Oracle Currency Code"", ""Siebel Inbound"", ""USD"");
	
	//
	//Get the primary integration component from the Oracle Integration Object
	//
	OracleOpUnitIntComp = OracleIntObject.GetPrimaryIntComp (""SIE_ORG_V"");

	if (OracleOpUnitIntComp.Exists ())
	{
		// ORGANIZATION

		SiebelOrgIntComp = SiebelIntObject.CreatePrimaryIntComp (""Internal Division"");

		while (OracleOpUnitIntComp.NextRecord ())
		{
			 
			 
				SiebelOrgIntComp.NewRecord ();
				SiebelOrgIntComp.SetCopySource (OracleOpUnitIntComp);
				
				SiebelOrgIntComp.CopyFieldValue (""Integration Id"", ""OPERATING_UNIT_ID"");
				SiebelOrgIntComp.CopyFieldValue (""Name"",""NAME"");
				var CurrCode = OracleOpUnitIntComp.GetFieldValue (""CURRENCY_CODE"");
				if ((CurrCode == """") || (CurrCode == null))
				CurrCode = ""USD"";
				SiebelOrgIntComp.SetFieldValue (""Currency Code"", CurrCode);
				SiebelOrgIntComp.SetFieldValue (""Organization Flag"", ""Y"");
				SiebelOrgIntComp.SetFieldValue (""Parent Organization Id"", """");
		 
		}
	}
	else
	{
		EAIRaiseError(TranslateMessage(
			""ORA_MSG_MISSING_COMPONENT,SIE_ORG_V,Organization - Get Oracle Operating Unit (Oracle)""));
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function UpsertSiebelOrg (InputMsg, OutputMsg)
{
	//
	// Declare a variable to hold the Siebel Integration Object.
	//
	var SiebelIntObject;

	//
	// Declare a variable to hold the Oracle Integration Object
	//
	var OracleIntObject;

	//
	// Get the Oracle Integration Object from the Input message
	//
	OracleIntObject = InputMsg.GetIntObj(""Organization - Get Oracle11i Operating Unit (Oracle)"");

	//
	// Check the validity of the Oracle Integration Object.
	//
	if (OracleIntObject.Exists ())
	{
		//
		// Create a new Siebel Integration Object on the Output Message.
		//
		SiebelIntObject = OutputMsg.CreateIntObj (""Organization - Get Oracle11i Operating Unit (Siebel)"");

		//
		// Navigate through all the available instances in the Integration Object
		//
		while (OracleIntObject.NextInstance ())
		{
			//
			// Create a new instance in the Oracle Integration Object
			//
			SiebelIntObject.NewInstance ();

			//
			// CopyFields is a user defined function which is written to copy all
			// the fields from the source to the target.
			//
			CopyIntegrationObjectData (OracleIntObject, SiebelIntObject);
		}
	}
}  ///~ End of CreateSiebelProduct function."
function CallTxnutlR(Inputs,Outputs)
{
   var env_root=  Clib.getenv(""SIEBEL_ROOT"");       
 
   // var env_root= ""m:\\siebel"";
   var pro_path = env_root + ""\\bin\\txnutlr.exe"";
   var cfg_path = env_root + ""\\bin\\enu"";
   var virtual_arg = "" /u * /p * /c * /d * /f * /n *  /i * "";

   Clib.system(pro_path + "" /g "" + cfg_path + virtual_arg );

    return;
}
function CallTxnutlRDebug(Inputs,Outputs)
{
 //   var env_root=  Clib.getenv(""SIEBEL_ROOT"");       
 
   var env_root= ""m:\\siebel"";
   var pro_path = env_root + ""\\bin\\w32ud\\txnutlr.exe"";
   var cfg_path = env_root + ""\\docking\\report"";
   var virtual_arg = "" /u * /p * /c * /d * /f * /n *  /i * "";

   Clib.system(pro_path + "" /g "" + cfg_path + virtual_arg );

    return;
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""CallTxnutlR"") 
       CallTxnutlR(Inputs, Outputs);

    else if(MethodName == ""CallTxnutlRDebug"") 
       CallTxnutlRDebug(Inputs, Outputs);

    else if(MethodName == ""Testpro"") 
       Testpro(Inputs, Outputs );  
 
    else { 
        Outputs.SetProperty(""ErrRet"",""FALSE""); 
        Outputs.SetProperty(""ErrMgs"",MethodName + ""  is not implemented""); 
    } 
 
  return (CancelOperation); 
}
function Testpro(Inputs,Outputs)  
{  
   Clib.system(""dir /p c:\\"");
   
 return;  
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2002, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 1 $
//      $Date: 3/21/2002 5:11pm $
//    $Author: ALAU $ of last update
//
// CREATOR:    Amanda Lau
//
// DESCRIPTION: Sample External Account is a business service which takes 
//              Account Interface integration object as input argument, treats 
//              the input argument as a request, and writes it to a file. It 
//              then reads the response from a file in the form of Account
//              Interface integration object and passes it back as an output 
//              argument. 
//              The file names are specified in the Business Service User Prop. 
//              This business service is indented to be called by External 
//              Account business service which is a web service outbound
//              dispatcher. 
//
///////////////////////////////////////////////////////////////////////////////"
function IsolateIntegrationId (Inputs, Outputs)
{
   var inputPropertySet;
   var siebelMessage;
   var child;
   var property;
   var numOfChild = 0;
   var num = 0;
   var i = 1;   // The first time we use i as a loop counter we start at 1
   var j = 0;

   // Get first value in property set.
   numOfChild = Inputs.GetChildCount();
   inputPropertySet = Inputs.GetChild(0);
   while (inputPropertySet.GetType() != ""SiebelMessage"" && i < numOfChild)
   {
      inputPropertySet = Inputs.GetChild(i);
      i++;
   }
   
   if(inputPropertySet == """") 
   {
      return(CancelOperation);
   }
   
   // Copy the siebel message 
   siebelMessage = inputPropertySet.Copy();

   // There is only one child property set to Siebel Message, ListOf*
   child = siebelMessage.GetChild(0);
   if(child == """")
   {
      return(CancelOperation);
   }
   
   // Loop through the child property sets (ie Accounts, Orders, etc) and remove everything
   // but the integration id.
   numOfChild = child.GetChildCount();
   for(i = 0; i < numOfChild; i++)
   {
      // Get child property (ie Account, Order, etc) at index i
      child = child.GetChild(i);
      // Get the first property of that property set
      property = child.GetFirstProperty();
      // Loop through the properties of this child removing anything
      // that is not an integration id
      while(property != """")
      {
         if(property != ""Integration Id"")
         {
            child.RemoveProperty(property);
         }
         property = child.GetNextProperty();
      }
      num = child.GetChildCount();
      // Loop through the child property sets of this property set (ie Account, Order, etc)
      // and remove them.
      for(j = 0; j < num; j++) 
      {
         child.RemoveChild(i);
      }  
    }         
   Outputs.AddChild(siebelMessage);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   if (MethodName == ""IsolateIntegrationId"")
   {
   		IsolateIntegrationId(Inputs, Outputs);
   		return (CancelOperation);
   }
   return (ContinueOperation);
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// DESCRIPTION
//    Javascript maps to Siebel Price List from Oracle Price List
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function GetLDC (LookupType, LangIndepntValue) 
{ 
	var LangDepntValue = TheApplication().InvokeMethod(""LookupValue"", LookupType, LangIndepntValue);
	return LangDepntValue;
}
function OracleToSiebel (InputMsg,OutputMsg)
{
	// Variables to hold the primary integration components.
	var OraclePrimIntComp, SiebelPrimIntComp ;
	
	// Variables to hold the integration components.
	var OracleIntComp, SiebelIntComp ;
	
	var freightlookup  = EAIGetValueMap(""Oracle Freight"",""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var shippinglookup = EAIGetValueMap (""Oracle Ship Method Code"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	
	// variable to hold the input integration object
	var OracleIntObject;
	
	// variable to hold the output integration object
	var SiebelIntObject;
	
	var EarliestDt = ""01/01/1980 00:00:00"";
	
	
	// Organizations (All Organizations in Siebel)
	var OrgId = new Array();
	var OrgCounter = 0;
	
	
	// Organizations (All Organizations in Siebel)
		
	var OrgBusObject = TheApplication().GetBusObject(""Organizations"") ;
	
	// Get the business component from the business object
	var OrgBusComp = OrgBusObject.GetBusComp(""Organization"") ;
	
	OrgBusComp.SetViewMode(3);
	// Get all organizations
	OrgBusComp.ClearToQuery();
	OrgBusComp.ExecuteQuery();
	
	var hasMoreRecords = OrgBusComp.FirstRecord();
				
	// While there are more records iterate through
	while(hasMoreRecords)
	{
		OrgId[OrgCounter] = OrgBusComp.GetFieldValue(""Id"");
		OrgCounter = OrgCounter + 1;
				
		hasMoreRecords = OrgBusComp.NextRecord();
	}
	
				
		
	// Locate the input integration object in the input message
	OracleIntObject = 
		InputMsg.GetIntObj(""Pricing - Get Oracle Price List (Oracle)"");
	
	// If the integration object exists in the input message	
	if(OracleIntObject.Exists())
	{
		// Create the output integration object in the output message
		SiebelIntObject = 
			OutputMsg.CreateIntObj(""Pricing - Get Oracle Price List (Siebel)"") ;
		
		while(OracleIntObject.NextInstance())
		{	 
			
			SiebelIntObject.NewInstance() ;
			OraclePrimIntComp = OracleIntObject.GetPrimaryIntComp(""SIE_PRICE_LISTS_V"") ;
	
			if(OraclePrimIntComp.Exists())
			{
				// Price List
				SiebelPrimIntComp = SiebelIntObject.CreatePrimaryIntComp(""Price List"") ;
				
				while (OraclePrimIntComp.NextRecord())
				{
				
					SiebelPrimIntComp.NewRecord() ;
					SiebelPrimIntComp.SetCopySource(OraclePrimIntComp) ;
				
					// Set the operation code for this Siebel integration component.
					SetOperationCode(SiebelPrimIntComp, OraclePrimIntComp);
					
					SiebelPrimIntComp.CopyFieldValue(""Currency Code"", ""CURRENCY_CODE"");
					SiebelPrimIntComp.CopyFieldValue(""Description"", ""DESCRIPTION"") ;
					SiebelPrimIntComp.SetFieldValue(""Freight Terms"",freightlookup.Translate(OraclePrimIntComp.GetFieldValue(""FREIGHT_TERMS_CODE"")));
					SiebelPrimIntComp.CopyFieldValue(""Name"", ""NAME"") ;
					SiebelPrimIntComp.CopyFieldValue(""Payment Integration Id"", ""TERMS_ID"") ;
					SiebelPrimIntComp.CopyFieldValue(""Integration Id"", ""INTEGRATION_ID"") ;
		            SiebelPrimIntComp.SetFieldValue (""Type"", ""PRICE LIST"");
					SiebelPrimIntComp.SetFieldValue(""Shipping Method"", shippinglookup.Translate(OraclePrimIntComp.GetFieldValue(""SHIP_METHOD_CODE"")));
					var PLStartDt = OraclePrimIntComp.GetFieldValue(""START_DATE_ACTIVE"");
					var PLEndDt = OraclePrimIntComp.GetFieldValue(""END_DATE_ACTIVE"");
											
					if ((PLStartDt == null) || (PLStartDt == """"))
					{
						PLStartDt = EarliestDt;
					}
					
					if ((PLEndDt != null) && (PLEndDt != """") &&
						(SiebeltoDate(PLStartDt).getTime() > SiebeltoDate(PLEndDt).getTime()))
					{
		  				PLEndDt = PLStartDt;
	  				}
	  						  						  				
	  				SiebelPrimIntComp.SetFieldValue(""Start Date"", PLStartDt);
	  				SiebelPrimIntComp.SetFieldValue(""End Date"", PLEndDt) ;
					
					
					
					// Price List Items
					OracleIntComp = OraclePrimIntComp.GetIntComp(""SIE_PRICE_LIST_LINES_V"") ;
					
					if(OracleIntComp.Exists())
					{
						SiebelIntComp = SiebelPrimIntComp.CreateIntComp(""Internal Product"") ;
						
						SiebelIntComp.SetCopySource(OracleIntComp) ;
						
						while(OracleIntComp.NextRecord())
						{
							SiebelIntComp.NewRecord() ;
							
							// Set the operation code for this Siebel integration component.				
							SetOperationCode(SiebelIntComp, OracleIntComp);
							SiebelIntComp.CopyFieldValue(""List Price"", ""LIST_PRICE"") ;
							SiebelIntComp.CopyFieldValue(""Price List Item Integration Id"", ""INTEGRATION_ID"") ;
							SiebelIntComp.CopyFieldValue(""Integration Id"", ""INVENTORY_ITEM_ID"") ;
							SiebelIntComp.SetFieldValue (""List Price Type Code"", ""STANDARD"");			
							SiebelIntComp.CopyFieldValue(""Volume Discount"", ""DISCOUNT_NAME"");
							SiebelIntComp.CopyFieldValue(""Price List Item Start Date"", ""START_DATE_ACTIVE"");
							SiebelIntComp.CopyFieldValue(""Price List Item End Date"", ""END_DATE_ACTIVE"");
						}
					}
					else
					{		
				
						// Attaching the Price List to all Organizations in Siebel
				
						var SiebelPLOrgIntComp = SiebelPrimIntComp.CreateIntComp(""Price List_Organization"");
						
					    for (var i=0; i<OrgId.length; i++)
						{
							SiebelPLOrgIntComp.NewRecord() ;
														
							// Set the operation code for this Siebel integration component.				
						    SiebelPLOrgIntComp.SetFieldValue(""operation"", ""upsert"");
							SiebelPLOrgIntComp.SetFieldValue(""Division Id"", OrgId[i]);
						}
					}
					
				} // while (OraclePrimIntComp.NextRecord())
			} // if(OraclePrimIntComp.Exists())
		} // while(OracleIntObject.NextInstance())
	} //if(OracleIntObject.Exists())	
} // function OracleToSiebel"
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"/**
 * This function will read the field 'SysOp' from the Oracle integration 
 * component and depending on the value of that field, we will have to
 * populate the Siebel integration component with the values
 * ""delete"" or ""upsert"". The field that should be populated in the Siebel
 * side is ""operation"".
 */
function SetOperationCode(SiebelIntComp, OracleIntComp)
{
	var opCode = OracleIntComp.GetFieldValue(""SysOp"");
	if(opCode == ""D"")
	{
		SiebelIntComp.SetFieldValue (""operation"", ""delete"");
	}
	else
		SiebelIntComp.SetFieldValue (""operation"", ""upsert"");
}
function SiebeltoDate(SiebelDate)
{
	var split1 = SiebelDate.split(""/"");
	var split2 = split1[2].split("" "");
	var split3 = split2[1].split("":"");
	return new Date(split2[0], split1[0]-1, split1[1], split3[0], split3[1], split3[2]);
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 4 $
//      $Date: 12/10/99 10:29a $
//    $Author: Achaudhr $ of last update
//
// CREATOR:    R.Lankinen
//
// DESCRIPTION
//    Multi-organization Javascript maps from Siebel Account to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js"""
function CheckDiscountMatrixGroup (inputMsg, outputMsg) 
{ 
  /*  Referenced in workflow Pricing - Pricing - Receive SAP 46C Discounts or Surcharges
    * Input Object:
    *  Pricing - Send or Receive SAP 46C Condition (COND_A02)
    *       
    *
    * Output Object's Integration Components:
    *  set property ""Adjustment Group Exists"" to TRUE of FALSE in outputMsg
    *  depending on the resilts of the search
    */

   /*
    * Set up EAI Input Message objects
    */
	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Pricing Header


   /*
    * Find and create top-level integration object
    */
	iIDOCObj	= inputMsg.GetIntObj     (""Pricing - Send or Receive SAP 46C Condition (COND_A02)"");
  
	while (iIDOCObj.NextInstance ())
	{
		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();

		// Read ""KOMG"" component (Pricing Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		if (iKOMGComp.NextRecord ())
		{  
  		   	var CondTypeCode 	= iKOMGComp.GetFieldValue (""KSCHL"");
		  	var TableNumber		= iKOMGComp.GetFieldValue (""KOTABNR"");
			var TableUsage		= iKOMGComp.GetFieldValue (""KVEWE"");
		   	var TableName		= TableUsage + TableNumber;
			
			var AdjGrpBusObject = TheApplication().GetBusObject(""Adjustment Group"");
			var AdjGrpBusComp = VolDiscBusObject.GetBusComp(""Adjustment Group"");
		
			AdjGrpBusComp.ClearToQuery();
    		AdjGrpBusComp.SetSearchSpec(""SAP Condition Name"", CondTypeCode);	// need to add into BC
			AdjGrpBusComp.SetSearchSpec(""SAP Table Name"", TableName);			// need to add into BC
			AdjGrpBusComp.ExecuteQuery();
		
			if(AdjGrpBusComp.FirstRecord())	outputMsg.SetArgument(""Adjustment Group Exists"", ""True"");
      		else							outputMsg.SetArgument(""Adjustment Group Exists"", ""False"");
		}
	}
}
function CheckSAPConditionTypeAndScale (inputMsg, outputMsg) 
{ // Start - Function
  /*  Referenced in workflow Pricing - Recieve SAP 46C Condition Records
    * Input Object:
    *  Pricing - Send or Receive SAP 46C Condition (COND_A02)
    *       
    *
    * Output Object's Integration Components:
    *  set property ""Condition Type"" to Price List or Discount Matrices in outputMsg
    *  depending on SAP Prcing Condition Type
    */

   /*
    * Set up EAI Input Message objects
    */
	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Filter
	var iKONHComp; 		// IDOC Header
	var iKONPComp; 		// IDOC Items
	
	var oPriceObj;		//
	var oPriceComp;		//
	
   /*
    * Temp Variables
    */	
   var AdjustmentGroupExists	= false;
   var VolumeDiscountExists 	= false;	
	

   /*
    * EAI Lookup Maps
    */
	var condTypeLM   = EAIGetValueMap (""SAP Pricing Condition Class"", ""Siebel Inbound"", ""Unknown Condition Type"" );

   /*
    * Find and create top-level integration object
    */
	iIDOCObj	= inputMsg.GetIntObj (""Pricing - Send or Receive SAP 46C Condition (COND_A02)"");
  
	if (iIDOCObj.NextInstance ())
	{
		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();

		// Read ""KOMG"" segment
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		if (iKOMGComp.NextRecord ())
		{  

			var UsageCode	= iKOMGComp.GetFieldValue (""KVEWE""); // Condition Table usage
			var TableNbr	= iKOMGComp.GetFieldValue (""KOTABNR""); // Condition Table number
			var CondType	= iKOMGComp.GetFieldValue (""KSCHL""); // Condition Type
			var ExtSysVal	= UsageCode + TableNbr + CondType;

   			var ConditionType 	= condTypeLM.Translate (CondType);
   			outputMsg.SetArgument(""Condition Type"", ConditionType);
  	
			if (ConditionType == ""Discount Matrix"")
			{
			var AdjGrpId	= GetAdjustmentId (ExtSysVal);
				if (AdjGrpId == null)
				{
 					AdjustmentGroupExists 	= false;
				}
				else
				{
					AdjustmentGroupExists 	= true;
				}
			}
			
			// Read ""KONH"" segment (Condition Header)

			iKONHComp = iKOMGComp.GetIntComp (""E2KONH"");
			if (iKONHComp.NextRecord ())
			{
				// Read ""KONP"" segment (Condition Items)
				iKONPComp = iKONHComp.GetIntComp (""E2KONP002"");
				if (iKONPComp.NextRecord ())
				// Check Scale basis indicator
				{
					var VolumeDiscInd	= iKONPComp.GetFieldValue (""KZBZG""); // Scale Basis Indicator
					if (VolumeDiscInd == """")
					{
						VolumeDiscountExists 	= false;
					}
					else
					{
						VolumeDiscountExists 	= true;
					}
				}
			}// iKONHComp
			
		   	oPriceObj = outputMsg.CreateIntObj (""Pricing - Send or Receive SAP 46C Condition (COND_A02)"");
   			oPriceObj.NewInstance ();
   			oPriceComp = oPriceObj.CreatePrimaryIntComp (""Idoc Segments"");
   			oPriceComp.NewRecord ();
   			
   			
   			if (VolumeDiscountExists)
   			{
      			outputMsg.SetArgument(""Volume Discount Exists"", ""True"");
      		}
      		else
      		{
      			outputMsg.SetArgument(""Volume Discount Exists"", ""False"");
   			}

   			if (AdjustmentGroupExists)
   			{
      			outputMsg.SetArgument(""Adjustment Group Exists"", ""True"");
      		}
      		else
      		{
      			outputMsg.SetArgument(""Adjustment Group Exists"", ""False"");
   			}

//		   	var ConditionType 	= condTypeLM.Translate (CondType);
//		   	outputMsg.SetArgument(""Condition Type"", ConditionType);

		} // End - iKOMGComp
	} // End - iIDOCObj.NextInstance
	
   			
			
} // End - Function"
function CreateAdjustmentGroup_46CIDOCToSiebel (inputMsg, outputMsg) 
{ 	// Start
  /*  Referenced in workflow Pricing - Pricing - Create Discount Matrices Dimension
    * Input Integration Object:
    *  Pricing - Send or Receive SAP 46C Condition (COND_A02)
    *       
    *
    * Output Integration Object:
    *  Pricing - Send or Receive SAP 46C Discount Matrix
    */

    // Set up EAI Input Message objects
   	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Condition Structures

	// Set up EAI Output Message objects - Write to Output IntObj
	var oAdjGroupObj;		// Siebel Adjustment Group instance
	var oAdjGroupHeader;	// Adjustment Group
	var oAdjGroupDim;		// Adjustment Dimension

    // EAI Lookup Maps
  	var discTypeLM		= EAIGetValueMap (""SAP Pricing Discount Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );
	var dMatrixNameLM	= EAIGetValueMap (""SAP Condition Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );
	var tblKeyFieldLM	= EAIGetValueMap (""SAP Table Key Field Xref"", ""Siebel Inbound"", ""Unknown XRef Field"" );
	var XRefFieldLM		= EAIGetValueMap (""SAP Key Field"", ""Siebel Inbound"", ""Unknown XRef Field"" );


   //  Find and create top-level integration object	
	iIDOCObj		= inputMsg.GetIntObj     (""Pricing - Send or Receive SAP 46C Condition (COND_A02)"");
	oAdjGroupObj	= outputMsg.CreateIntObj (""Pricing - Send or Receive SAP 46C Discount Matrix"");

	// Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{	// Start Read ""IDOC"" 
	
		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();
	
		// Create ""Adjusmnt Group"" Object
		oAdjGroupObj.NewInstance ();

		// Read ""KOMG"" component (Condition Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		while (iKOMGComp.NextRecord ())
		{  	// Start Read ""KOMG"" Component
			// Map data to ""Adjustment Group"" Intergration Component
			// Create ""Adjustment Group"" component in output message
			oAdjGroupHeader 	= oAdjGroupObj.CreatePrimaryIntComp (""Adjustment Group"");
			oAdjGroupHeader.NewRecord ();
			oAdjGroupHeader.SetCopySource (iKOMGComp);
			oAdjGroupHeader.SetFieldValue (""operation"", ""sync""); // Set operation method

			var UsageCode	= iKOMGComp.GetFieldValue (""KVEWE""); // Condition Table usage
			var TableNbr	= iKOMGComp.GetFieldValue (""KOTABNR""); // Condition Table number
			var CondType	= iKOMGComp.GetFieldValue (""KSCHL""); // Condition Type
			var ExtSysVal	= UsageCode + TableNbr + CondType;
			
			// Intergration Id
			oAdjGroupHeader.SetFieldValue (""Integration Id"", ExtSysVal);

			// Name
			var GroupName	= dMatrixNameLM.Translate (iKOMGComp.GetFieldValue (""KSCHL""));	// Condition Type
			oAdjGroupHeader.SetFieldValue (""Name"", GroupName);
			oAdjGroupHeader.SetFieldValue (""Description"", GroupName);

			// Discount Matrix Type
			var DiscType	= discTypeLM.Translate (iKOMGComp.GetFieldValue (""KSCHL""));	// Condition Type
			var MatrixType	= TheApplication().InvokeMethod (""LookupValue"", ""ADJ_GROUP_TYPE"", DiscType);
			oAdjGroupHeader.SetFieldValue (""Adjustment Group Type"", 	MatrixType);

			// Setup SAP Parameters
//			oAdjGroupHeader.SetFieldValue (""SAP Table Name"", TableName);	// Not yet maintained in BC
//			oAdjGroupHeader.CopyFieldValue (""SAP Condition Name"",""KSCHL"");	// Not yet maintained in BC

			// Set Status to ""Active""
//			var Status	= TheApplication().InvokeMethod (""LookupValue"", ""MATRIX_DEFN_STATUS"", ""Active"");	
//			oAdjGroupHeader.SetFieldValue (""Status"", Status); 


			// Set up Adjustment Dimension
			oAdjGroupDim = oAdjGroupHeader.CreateIntComp (""Adjustment Dimension"", false);
				
			// Get SAP TBL Key Field(s)
			var TBLKeys		= tblKeyFieldLM.Translate (ExtSysVal);	// Application + Table + Condition Type
			var keyArray	= TBLKeys.split(""::"");
	
			var seqNo		= 10;
			for (var i = 0; i < keyArray.length; i++)
			{
				oAdjGroupDim.NewRecord();
				oAdjGroupDim.SetFieldValue (""operation"", ""sync""); 
				
				var Key		= keyArray[i];
				var XRef	= XRefFieldLM.Translate (Key);
				oAdjGroupDim.SetFieldValue (""Display Sequence"", seqNo);
				oAdjGroupDim.SetFieldValue (""Field"", XRef);
				seqNo		= seqNo + 10;
			}
					
		}	// End Read ""KOMG"" Component
	}	// End Read ""IDOC"" 
}	// End"
function GetAccountId (Customer)
{
	var AccBusObject = TheApplication().GetBusObject(""Account"");
	var AccBusComp = AccBusObject.GetBusComp(""Account"");
		
	AccBusComp.SetViewMode(3);  // All Mode
	AccBusComp.ClearToQuery();
    AccBusComp.SetSearchSpec(""Integration Id"", Customer);
	AccBusComp.ActivateField(""Id"");
	AccBusComp.ExecuteQuery();
		
	if(AccBusComp.FirstRecord())
	{
	   return AccBusComp.GetFieldValue(""Id"");
	}
      	else
           return null;
}
function GetAdjustmentId (ExtSysVal)
{
	var AdjGrpBusObject = TheApplication().GetBusObject(""Adjustment Group"");
	var AdjGrpBusComp = AdjGrpBusObject.GetBusComp(""Adjustment Group"");
		
	AdjGrpBusComp.SetViewMode(3);  // All Mode
	AdjGrpBusComp.ClearToQuery();
    AdjGrpBusComp.SetSearchSpec(""Integration Id"", ExtSysVal);	// 
	AdjGrpBusComp.ActivateField(""Id"");
	AdjGrpBusComp.ExecuteQuery();
		
	if(AdjGrpBusComp.FirstRecord())
	{
	   return AdjGrpBusComp.GetFieldValue(""Id"");
	}
      	else
           return null;
}
function GetCurrencyCode (SalesOrg, DistChan)
{
	var OrgBusObject = TheApplication().GetBusObject(""Organizations"");
	var OrgBusComp = OrgBusObject.GetBusComp(""Organization"");
	
	OrgBusComp.SetViewMode(3);  // All Mode	
	OrgBusComp.ClearToQuery();
    OrgBusComp.SetSearchSpec(""Back Office Sales Organization"", SalesOrg);
	OrgBusComp.SetSearchSpec(""Back Office Distribution Channel"", DistChan);
	OrgBusComp.ActivateField(""Currency Code"");
	OrgBusComp.ExecuteQuery();
		
	if(OrgBusComp.FirstRecord())
	{
	   return OrgBusComp.GetFieldValue(""Currency Code"");
	}
      	else
           return null;
}
function GetProductId (Product)
{
	var PrdBusObject = TheApplication().GetBusObject(""Internal Product"");
	var PrdBusComp = PrdBusObject.GetBusComp(""Internal Product"");
		
	PrdBusComp.SetViewMode(3);  // All Mode
	PrdBusComp.ClearToQuery();
    PrdBusComp.SetSearchSpec(""Integration Id"", Product);
	PrdBusComp.ActivateField(""Id"");
	PrdBusComp.ExecuteQuery();
		
	if(PrdBusComp.FirstRecord())
	{
	   return PrdBusComp.GetFieldValue(""Id"");
	}
      	else
           return null;
}
function GetVolumeDiscountId (Int_ID)
{
	var VolDiscBusObject = TheApplication().GetBusObject(""Admin Volume Discount"");
	var VolDiscBusComp = VolDiscBusObject.GetBusComp(""Volume Discount"");
		
	VolDiscBusComp.SetViewMode(3);  // All Mode
	VolDiscBusComp.ClearToQuery();
    VolDiscBusComp.SetSearchSpec(""Integration Id"", Int_ID);
	VolDiscBusComp.ActivateField(""Id"");
	VolDiscBusComp.ExecuteQuery();
		
	if(VolDiscBusComp.FirstRecord())
	{
	   return VolDiscBusComp.GetFieldValue(""Id"");
	}
      	else
           return null;
}
function ReceiveAdminPriceList_46CIDOCToSiebel (inputIDOC, outputPriceList) 
{ 	// Start
  /*  Referenced in workflow Pricing - Receive SAP 46C Price
    * Input Integration Object:
    *  Pricing - Send or Receive SAP 46C Condition (COND_A02)
    *       
    *
    * Output Integration Object:
    *  Pricing - Send or Receive SAP 46C Price List
    */

    // Set up EAI Input Message objects
   	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Condition Structures
	var iKONHComp; 		// IDOC Condition Header
	var iKONPComp; 		// IDOC Condition Item

	// Set up EAI Output Message objects - Write to Output IntObj
	var oPriceListObj;		// Siebel Price List instance
	var oPriceListHeader;	// Price List
	var oPriceListItem;		// Price List Item
	var oPriceListOrg;		// Price List Org

    // EAI Lookup Maps
	var currLM		= EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"", ""Unknown Currency Code"" );
	var pListNameLM	= EAIGetValueMap (""SAP Condition Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );

   //  Find and create top-level integration object	
	iIDOCObj		= inputIDOC.GetIntObj  	(""Pricing - Send or Receive SAP 46C Condition (COND_A02)"");
	oPriceListObj	= outputPriceList.CreateIntObj 	(""Pricing - Send or Receive SAP 46C Price List"");

	// Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{	// Start Read ""IDOC"" 

		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();
		
		// Create ""PriceList"" Object
		oPriceListObj.NewInstance ();

		// Read ""KOMG"" component (Condition Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		while (iKOMGComp.NextRecord ())
		{  	// Start Read ""KOMG"" Component
			// Map data to ""Price List"" Intergration Component
			// Create ""Price List"" component in output message
			oPriceListHeader = oPriceListObj.CreatePrimaryIntComp (""Price List"");
			oPriceListHeader.NewRecord ();
			oPriceListHeader.SetCopySource (iKOMGComp);
			oPriceListHeader.SetFieldValue (""operation"", ""sync""); // Set operation method

			var Usage		= iKOMGComp.GetFieldValue (""KVEWE""); // Usage of Condition Table
			var CondTbl		= iKOMGComp.GetFieldValue (""KOTABNR""); // Condition Table
			var CondType	= iKOMGComp.GetFieldValue (""KSCHL""); // Condition Type
			var ItemDesc	= iKOMGComp.GetFieldValue (""VAKEY_LONG""); // Description
			var SalesOrg 	= iKOMGComp.GetFieldValue (""VKORG""); // Sales Organization
			var DistChan 	= iKOMGComp.GetFieldValue (""VTWEG""); // Distribution Channel
			var Material 	= iKOMGComp.GetFieldValue (""MATNR""); // Material
			var VarKey	 	= iKOMGComp.GetFieldValue (""VAKEY""); // Variable Key
		
			// Set up Price List name
			var ListName	= pListNameLM.Translate (iKOMGComp.GetFieldValue (""KSCHL"")); // Condition Type
			var PListName	= ListName + Usage + CondTbl + ""::"" + CondType + ""::"" + SalesOrg + ""::"" + DistChan;
			oPriceListHeader.SetFieldValue (""Name"", PListName);
			oPriceListHeader.SetFieldValue (""Description"", PListName);
						
			// Setup Integration Id (Sales Org Code + Distribution Channel Code + Condition Type + Usage + Table)
			var IntegrationId	=	SalesOrg + DistChan + CondType + Usage + CondTbl;
			oPriceListHeader.SetFieldValue (""Integration Id"", IntegrationId);
			oPriceListHeader.SetFieldValue (""Start Date"", Timestamp());

			// Currency Code (Header)
			var CurrencyCode	=	GetCurrencyCode (SalesOrg, DistChan);
			oPriceListHeader.SetFieldValue (""Currency Code"", CurrencyCode);

			// Set up Price List Organization
			oPriceListOrg = oPriceListHeader.CreateIntComp (""Price List_Organization"", false);
			
			var OrgBusObject	= TheApplication().GetBusObject(""Organizations"") ;
			var OrgBusComp 		= OrgBusObject.GetBusComp(""Organization"") ;
			OrgBusComp.SetViewMode(3);  // All Mode

			OrgBusComp.ClearToQuery();
			OrgBusComp.SetSearchSpec(""Back Office Sales Organization"", SalesOrg);
			OrgBusComp.SetSearchSpec(""Back Office Distribution Channel"", DistChan);
			OrgBusComp.ActivateField(""Organization Id"");
			OrgBusComp.ActivateField(""Organization"");
			OrgBusComp.ActivateField(""Location"");
			OrgBusComp.ExecuteQuery();
			
			var hasMoreRecords 	= OrgBusComp.FirstRecord();
			while ( hasMoreRecords )
			{
				var OrgID	 	= OrgBusComp.GetFieldValue(""Organization Id"");
				var OrgName	 	= OrgBusComp.GetFieldValue(""Organization"");
				var Loc		 	= OrgBusComp.GetFieldValue(""Location"");
				oPriceListOrg.NewRecord();
				oPriceListOrg.SetFieldValue (""operation"", ""sync""); 
				oPriceListOrg.SetFieldValue(""Organization Id"", OrgID);
				oPriceListOrg.SetFieldValue(""Organization"", OrgName);
				oPriceListOrg.SetFieldValue(""Location"", Loc);
				oPriceListOrg.SetFieldValue (""IsPrimaryMVG"", ""Y"");
				hasMoreRecords = OrgBusComp.NextRecord();
			}												
			// Set Primary Org Id
			oPriceListHeader.SetFieldValue (""Primary Organization Id"", OrgID);

			// Read ""KONH"" component 
			iKONHComp = iKOMGComp.GetIntComp (""E2KONH"");
			oPriceListItem = oPriceListHeader.CreateIntComp (""Price List Item - UAN"", false);
			while (iKONHComp.NextRecord ())
			{	// Start Read ""KONH"" Component
				oPriceListItem.SetCopySource (iKONHComp);
								
				// Set up Description & Integration Id
				var IntID	= iKONHComp.GetFieldValue (""KNUMH""); 	
				
				// Set up Start & End Dates
				var StrDate		= iKONHComp.GetFieldValue (""DATAB"");
				var EndDate		= iKONHComp.GetFieldValue (""DATBI"");
				var chkDate		= EndDate.substring(0,10); 
				
				// Read ""KONP"" Component
				iKONPComp = iKONHComp.GetIntComp (""E2KONP002"");
				while (iKONPComp.NextRecord ())
				{	// Start Read ""KONP"" Component
					oPriceListItem.NewRecord (); //+
					oPriceListItem.SetCopySource (iKONPComp);
					oPriceListItem.SetFieldValue (""operation"", ""sync""); //+
					
					oPriceListItem.SetFieldValue (""Integration Id"",IntID);
					oPriceListItem.SetFieldValue (""Description"", ItemDesc);
					oPriceListItem.SetFieldValue (""Product Name"", Material);// Material
					oPriceListItem.SetFieldValue (""Product Integration Id"", Material);// Product Integration Id
					oPriceListItem.CopyFieldValue (""Original List Price"", ""KBETR"");// Rate
					oPriceListItem.CopyFieldValue (""Min Sale Price"", ""MXWRT"");// Lower Limit
					oPriceListItem.CopyFieldValue (""Max Sale Price"", ""GKWRT"");// Upper Limit
					oPriceListItem.SetFieldValue (""Start Date"", StrDate);
					if ( chkDate != ""12/31/9999"" )
						{
							oPriceListItem.SetFieldValue (""End Date"", EndDate);
						}

					// Volume Discount
					oPriceListItem.SetFieldValue (""Volume Discount Id"", null); 
					var VolumeDiscInd	= iKONPComp.GetFieldValue (""KZBZG""); // Scale Basis Indicator
					if (VolumeDiscInd != null || VolumeDiscInd != """")
					{
						var VolumeDiscountId = GetVolumeDiscountId (IntID);
						oPriceListItem.SetFieldValue (""Volume Discount Id"", VolumeDiscountId); 	
					}					
					
				}	// End Read ""KONP"" Component			
			}	// End Read ""KONH"" Component							
		}	// End Read ""KOMG"" Component
	}	// End Read ""IDOC"" 
}	// End"
function ReceiveProductBasedAdjustment_46CIDOCToSiebel (inputMsg, outputMsg) 
{ 	// Start
  /*  Referenced in workflow Pricing - Receive SAP 46C Price
    * Input Integration Object:
    *  Pricing - Send or Receive SAP 46C Condition (COND_A02)
    *       
    *
    * Output Integration Object:
    *  Pricing - Send or Receive SAP 46C Discount Matrix
    */

    // Set up EAI Input Message objects
   	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Condition Structures
	var iKONHComp; 		// IDOC Condition Header
	var iKONPComp; 		// IDOC Condition Item

	// Set up EAI Output Message objects - Write to Output IntObj
	var oPBAdjustmentObj;	// Siebel Product-Based instance
	var oAdjustmentGroup;	// Siebel Adjustment Group instance
	var oPBAdjustment;		// Siebel Product-Based Adjustment 
	
    // EAI Lookup Maps
   	var discTypeLM		= EAIGetValueMap (""SAP Pricing Discount Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );
	var dMatrixNameLM	= EAIGetValueMap (""SAP Condition Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );
	var currLM			= EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"", """" );
	var prcClassLM		= EAIGetValueMap (""SAP Pricing Scale Calculation"", ""Siebel Inbound"" );

   //  Find and create top-level integration object	
	iIDOCObj			= inputMsg.GetIntObj     (""Pricing - Send or Receive SAP 46C Condition (COND_A02)"");
	oPBAdjustmentObj	= outputMsg.CreateIntObj (""Pricing - Send or Receive SAP 46C Discount Matrix"");

	// Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{	// Start Read ""IDOC"" 
		oPBAdjustmentObj.NewInstance ();

		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();

		// Read ""KOMG"" component (Condition Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		if (iKOMGComp.NextRecord ())
		{  	// Start Read ""KOMG"" Component 
			// Map data to ""Adjustment"" Intergration Component
			oAdjustmentGroup = oPBAdjustmentObj.CreatePrimaryIntComp (""Adjustment Group"");
			oAdjustmentGroup.NewRecord ();
			oAdjustmentGroup.SetCopySource (iKOMGComp);
//			oAdjustmentGroup.SetFieldValue (""operation"", ""sync""); // Set operation method
			
			var UsageCode	= iKOMGComp.GetFieldValue (""KVEWE""); // Condition Table usage
			var TableNbr	= iKOMGComp.GetFieldValue (""KOTABNR""); // Condition Table number
			var CondType	= iKOMGComp.GetFieldValue (""KSCHL""); // Condition Type
			var SalesOrg 	= iKOMGComp.GetFieldValue (""VKORG""); // Sales Organization Code
			var DistChan 	= iKOMGComp.GetFieldValue (""VTWEG""); // Distribution Channel Code
			var Division 	= iKOMGComp.GetFieldValue (""SPART""); // Division Code
			var Customer 	= iKOMGComp.GetFieldValue (""KUNNR""); // Customer
			var Product 	= iKOMGComp.GetFieldValue (""MATNR""); // Material
			var VarKey	 	= iKOMGComp.GetFieldValue (""VAKEY""); // Variable key
			var ExtSysVal	= UsageCode + TableNbr + CondType;

			// Name
			var GroupName	= dMatrixNameLM.Translate (iKOMGComp.GetFieldValue (""KSCHL""));	// Condition Type
			oAdjustmentGroup.SetFieldValue (""Name"", GroupName);

			// Discount Matrix Type
			var DiscType	= discTypeLM.Translate (iKOMGComp.GetFieldValue (""KSCHL""));	// Condition Type
			var MatrixType	= TheApplication().InvokeMethod (""LookupValue"", ""ADJ_GROUP_TYPE"", DiscType);
			oAdjustmentGroup.SetFieldValue (""Adjustment Group Type"", 	MatrixType);
			
			// Integration Id
			oAdjustmentGroup.SetFieldValue (""Integration Id"", ExtSysVal);
		
			//	Get Adjustment Id
			var AdjGrpId	= GetAdjustmentId (ExtSysVal);
							
   		    // Read ""KONH"" component 
			iKONHComp = iKOMGComp.GetIntComp (""E2KONH"");
			oPBAdjustment = oAdjustmentGroup.CreateIntComp (""Product-Based Adjustment - UAN"", false);
			while (iKONHComp.NextRecord ())
			{	// Start Read ""KONH"" Component
				oPBAdjustment.SetCopySource (iKONHComp);
				
				// Setup Integration Id
				var IntID	= iKONHComp.GetFieldValue (""KNUMH""); 	
				
				// Set up Start & End Dates
				var StrDate		= iKONHComp.GetFieldValue (""DATAB"");
				var EndDate		= iKONHComp.GetFieldValue (""DATBI"");
				var chkDate		= EndDate.substring(0,10);


				// Read ""KONP"" Component
				iKONPComp = iKONHComp.GetIntComp (""E2KONP002"");
				while (iKONPComp.NextRecord ())
				{	// Start Read ""KONP"" Component
					oPBAdjustment.NewRecord ();
					oPBAdjustment.SetCopySource (iKONPComp);
					oPBAdjustment.SetFieldValue (""operation"", ""upsert""); // Set operation method

					oPBAdjustment.SetFieldValue (""Integration Id"", IntID); // Integration Id
					oPBAdjustment.SetFieldValue (""Adjustment Group Id"", AdjGrpId); // Group Id

					// Effective Dates
					oPBAdjustment.SetFieldValue (""Effective Start Date"", StrDate);										
					if ( chkDate !== ""12/31/9999"" )
					{
						oPBAdjustment.SetFieldValue (""Effective End Date"", EndDate);
					}

					//Check Sales Organization
					if (SalesOrg != null || SalesOrg != """")
					{
						oPBAdjustment.SetFieldValue (""Sales Organization Code"", SalesOrg); 	
					}

					//Check Distribution Channel
					if (DistChan != null || DistChan != """")
					{
						oPBAdjustment.SetFieldValue (""Distribution Channel Code"", DistChan); 	
					}
					
					//Check Division Code
					if (Division != null || Division != """")
					{
						oPBAdjustment.SetFieldValue (""Division Code"", Division); 	
					}					
					
					//Check Product
					if (Product != null || Product != """")
					{
						var ProductId = GetProductId (Product);
						oPBAdjustment.SetFieldValue (""Product Id"", ProductId); 	
					}					
					
					//Check Account
					if (Customer != null || Customer != """")
					{
						var AccountId = GetAccountId (Customer);
						oPBAdjustment.SetFieldValue (""Account Id"", AccountId); 	
					}
					
					// Currency Code
					var CurrencyCode	= currLM.Translate (iKONPComp.GetFieldValue (""KONWA""));
					oPBAdjustment.SetFieldValue (""Currency Code"", CurrencyCode); 
					
					// Adjustment Type
					var ConditionType	= prcClassLM.Translate (CondType); // Condition Type
					var AdjustmentType		= TheApplication().InvokeMethod (""LookupValue"", ""PRICER_CALCULATION_SIMPLE_TYPE"", ConditionType);
					oPBAdjustment.SetFieldValue (""Adjustment Type"", AdjustmentType); 

					// Adjusment Amount
					oPBAdjustment.CopyFieldValue (""Adjustment Amount"", ""KBETR"");		// Rate
					
					// Volume Discount
					oPBAdjustment.SetFieldValue (""Volume Discount Id"", null);
					var VolumeDiscInd	= iKONPComp.GetFieldValue (""KZBZG""); // Scale Basis Indicator
					if (VolumeDiscInd != null || VolumeDiscInd != """")
					{
						var VolumeDiscountId = GetVolumeDiscountId (IntID);
						oPBAdjustment.SetFieldValue (""Volume Discount Id"", VolumeDiscountId); 	
					}					
		
				}	// End Read ""KONP"" Component			
			}	// End Read ""KONH"" Component
		}	// End Read ""KOMG"" Component
	}	// End Read ""IDOC"" 
}	// End"
function ReceiveVolumeDiscount_46CIDOCToSiebel (inputMsg, outputMsg) 
{ 	// Start
  /*  Referenced in workflow Pricing - Receive SAP 46C Scales
    * Input Integration Object:
    *  Pricing - Send or Receive SAP 46C Condition (COND_A02)
    *       
    *
    * Output Integration Object:
    *  Pricing - Send or Receive SAP 46C Volume Discount
    */

    // Set up EAI Input Message objects
   	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Condition Structures
	var iKONHComp; 		// IDOC Condition Header
	var iKONPComp; 		// IDOC Condition Item
	var iKONMComp; 		// IDOC Condition Quantity Scale
	var iKONWComp; 		// IDOC Condition Value Scale

	// Set up EAI Output Message objects - Write to Output IntObj
	var oVolDiscountObj;	// Siebel Volume Discount instance
	var oVolDiscountHeader;	// Volume Discount
	var oVolDiscountItem;	// Volume Discount Item

    // EAI Lookup Maps
	var discMethLM	= EAIGetValueMap (""SAP Pricing Scale Type"", ""Siebel Inbound"" );
	var prcClassLM	= EAIGetValueMap (""SAP Pricing Scale Calculation"", ""Siebel Inbound"" );

   //  Find and create top-level integration object	
	iIDOCObj		= inputMsg.GetIntObj     (""Pricing - Send or Receive SAP 46C Condition (COND_A02)"");
	oVolDiscountObj = outputMsg.CreateIntObj (""Pricing - Send or Receive SAP 46C Volume Discount"");

	// Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{	// Start Read ""IDOC"" 

		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();
		
		// Create ""Volume Discount"" Object
// nbc	oVolDiscountObj.NewInstance ();
		
		// Read ""KOMG"" component (Condition Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		while (iKOMGComp.NextRecord ())
		{  	// Start Read ""KOMG"" Component
						
			var Description		= iKOMGComp.GetFieldValue (""VAKEY_LONG""); // Long Description
			var ConditionType	= prcClassLM.Translate (iKOMGComp.GetFieldValue (""KSCHL"")); // Condition Type
			var VarKey			= iKOMGComp.GetFieldValue (""VAKEY""); // Variable Key
			
   		    // Read ""KONH"" component 
			iKONHComp = iKOMGComp.GetIntComp (""E2KONH"");
// nbc		oVolDiscountHeader = oVolDiscountObj.CreatePrimaryIntComp (""Volume Discount"");
			while (iKONHComp.NextRecord ())
			{	// Start Read ""KONH"" Component
				oVolDiscountObj.NewInstance ();	// nbc
				oVolDiscountHeader = oVolDiscountObj.CreatePrimaryIntComp (""Volume Discount""); // nbc
				oVolDiscountHeader.NewRecord ();
				oVolDiscountHeader.SetCopySource (iKONHComp);
				oVolDiscountHeader.SetFieldValue (""operation"", ""sync""); // Set operation method
	
				// Setup Name & Integration Id
				var IntID	= iKONHComp.GetFieldValue (""KNUMH"");
				var Name	= VarKey + ""::"" + IntID;								
								
				// Get Start & End Dates
				var StartDate	= iKONHComp.GetFieldValue (""DATAB"");
				var EndDate		= iKONHComp.GetFieldValue (""DATBI"");
				var chkDate		= EndDate.substring(0,10);
				
				// Read ""KONP"" Component
				iKONPComp = iKONHComp.GetIntComp (""E2KONP002"");
				while (iKONPComp.NextRecord ())
				{	// Start Read ""KONP"" Component
					// Discount Method
					var ScaleType		= discMethLM.Translate (iKONPComp.GetFieldValue (""STFKZ""));
					var DiscountMethod	= TheApplication().InvokeMethod (""LookupValue"", ""IC_COMP_TABLE_TYPE"", ScaleType);
					// Adjustment Type
					var AdjustmentType	= TheApplication().InvokeMethod (""LookupValue"", ""PRICER_CALCULATION_SIMPLE_TYPE"", ConditionType);
										
					var Percentage		= iKONPComp.GetFieldValue (""KRECH"");	
					var minQty;

					if (iKONPComp.GetFieldValue (""KZBZG"") == ""B"")	// Quantity Scale
					{	// Start Read ""KONW"" Component
						iKONWComp = iKONPComp.GetIntComp (""E2KONW"");
						oVolDiscountItem = oVolDiscountHeader.CreateIntComp (""Volume Discount Item"", false);
						while (iKONWComp.NextRecord ())
						{	// Start While iKONWComp
							oVolDiscountItem.NewRecord ();
							oVolDiscountItem.SetCopySource (iKONWComp);
							oVolDiscountItem.SetFieldValue (""operation"", ""sync""); // Set operation method
																 
							minQty		= iKONWComp.GetFieldValue (""KSTBW"");
//							oVolDiscountItem.CopyFieldValue (""Minimum Quantity"", ""KSTBW"");
							if (minQty == 0)
								{
									oVolDiscountItem.SetFieldValue (""Minimum Quantity"", 1);
								}
							else
								{
									oVolDiscountItem.SetFieldValue (""Minimum Quantity"", minQty);
								}
							oVolDiscountItem.SetFieldValue (""Adjustment Type"", AdjustmentType);
							oVolDiscountItem.CopyFieldValue (""Name"", ""KSTBW"");
							oVolDiscountItem.CopyFieldValue (""Description"", ""KSTBW"");
																
							if (Percentage == ""A"") // Percentage
								{
									oVolDiscountItem.CopyFieldValue (""Discount Percent"", ""KBETR"");
								}
							else
								{
									oVolDiscountItem.CopyFieldValue (""Adjustment Amount"", ""KBETR"");
								}
						}	// End While iKONWComp
					}	// End Read ""KONW"" Component
					
				
					if (iKONPComp.GetFieldValue (""KZBZG"") == ""C"")	// Quantity Scale
					{	// Start Read ""KONM"" Component
						iKONMComp = iKONPComp.GetIntComp (""E2KONM"");
						oVolDiscountItem = oVolDiscountHeader.CreateIntComp (""Volume Discount Item"", false);
						while (iKONMComp.NextRecord ())
						{	// Start While iKONMComp
							oVolDiscountItem.NewRecord ();
							oVolDiscountItem.SetCopySource (iKONMComp);
							oVolDiscountItem.SetFieldValue (""operation"", ""sync""); // Set operation method
								
							minQty		= iKONMComp.GetFieldValue (""KSTBM"");
//							oVolDiscountItem.CopyFieldValue (""Minimum Quantity"", ""KSTBM"");
							if (minQty == 0)
								{
									oVolDiscountItem.SetFieldValue (""Minimum Quantity"", 1);
								}
							else
								{
									oVolDiscountItem.SetFieldValue (""Minimum Quantity"", minQty);
								}
							oVolDiscountItem.SetFieldValue (""Adjustment Type"", AdjustmentType);
							oVolDiscountItem.CopyFieldValue (""Name"", ""KSTBM"");
							oVolDiscountItem.CopyFieldValue (""Description"", ""KSTBM"");
							
							if (Percentage == ""A"") // Percentage
								{
									oVolDiscountItem.CopyFieldValue (""Discount Percent"", ""KBETR"");
								}
							else 
								{
									oVolDiscountItem.CopyFieldValue (""Adjustment Amount"", ""KBETR"");
								}

							}	// End While iKONMComp
						}	// End Read ""KONM"" Component

					}	// End Read ""KONP"" Component
					oVolDiscountHeader.SetFieldValue (""Name"", Name); // Name
					oVolDiscountHeader.SetFieldValue (""Description"", Description); // Description
					oVolDiscountHeader.SetFieldValue (""Integration Id"", IntID); // Set Integration Id
					oVolDiscountHeader.SetFieldValue (""Discount Method"", DiscountMethod); // Discount Method
					oVolDiscountHeader.SetFieldValue (""Start Date"", StartDate); // Effectivity Date
					oVolDiscountHeader.SetFieldValue (""End Date"", "" ""); // Effectivity End Date
					if ( chkDate != ""12/31/9999"" )
						{
							oVolDiscountHeader.SetFieldValue (""End Date"", EndDate);
						}			
				}	// End Read ""KONH"" Component
// nbc			oVolDiscountHeader.SetFieldValue (""Name"", Name); // Name
// nbc			oVolDiscountHeader.SetFieldValue (""Description"", Description); // Description
// nbc			oVolDiscountHeader.SetFieldValue (""Integration Id"", IntID); // Set Integration Id
// nbc			oVolDiscountHeader.SetFieldValue (""Discount Method"", DiscountMethod); // Discount Method
// nbc			oVolDiscountHeader.SetFieldValue (""Start Date"", StartDate); // Effectivity Date
// nbc			if ( chkDate != ""12/31/9999"" )
// nbc				{
// nbc					oVolDiscountHeader.SetFieldValue (""End Date"", EndDate);
// nbc				}
		}	// End Read ""KOMG"" Component
	}	// End Read ""IDOC"" 
}	// End"
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{
}
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
	return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", d.getMonth()+1, d.getDate(), d.getFullYear(), d.getHours(), d.getMinutes(), d.getSeconds()); 
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 4 $
//      $Date: 12/10/99 10:29a $
//    $Author: Achaudhr $ of last update
//
// CREATOR:    R.Lankinen
//
// DESCRIPTION
//    Multi-organization Javascript maps from Siebel Account to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js"""
function CheckDiscountMatrixGroup (inputMsg, outputMsg) 
{ 
  /*  Referenced in workflow Pricing - Pricing - Receive SAP 47 Discounts or Surcharges
    * Input Object:
    *  Pricing - Send or Receive SAP 47 Condition (COND_A02)
    *       
    *
    * Output Object's Integration Components:
    *  set property ""Adjustment Group Exists"" to TRUE of FALSE in outputMsg
    *  depending on the resilts of the search
    */

   /*
    * Set up EAI Input Message objects
    */
	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Pricing Header


   /*
    * Find and create top-level integration object
    */
	iIDOCObj	= inputMsg.GetIntObj     (""Pricing - Send or Receive SAP 47 Condition (COND_A02)"");
  
	while (iIDOCObj.NextInstance ())
	{
		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();

		// Read ""KOMG"" component (Pricing Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		if (iKOMGComp.NextRecord ())
		{  
  		   	var CondTypeCode 	= iKOMGComp.GetFieldValue (""KSCHL"");
		  	var TableNumber		= iKOMGComp.GetFieldValue (""KOTABNR"");
			var TableUsage		= iKOMGComp.GetFieldValue (""KVEWE"");
		   	var TableName		= TableUsage + TableNumber;
			
			var AdjGrpBusObject = TheApplication().GetBusObject(""Adjustment Group"");
			var AdjGrpBusComp = VolDiscBusObject.GetBusComp(""Adjustment Group"");
		
			AdjGrpBusComp.ClearToQuery();
    		AdjGrpBusComp.SetSearchSpec(""SAP Condition Name"", CondTypeCode);	// need to add into BC
			AdjGrpBusComp.SetSearchSpec(""SAP Table Name"", TableName);			// need to add into BC
			AdjGrpBusComp.ExecuteQuery();
		
			if(AdjGrpBusComp.FirstRecord())	outputMsg.SetArgument(""Adjustment Group Exists"", ""True"");
      		else							outputMsg.SetArgument(""Adjustment Group Exists"", ""False"");
		}
	}
}
function CheckSAPConditionTypeAndScale (inputMsg, outputMsg) 
{ // Start - Function
  /*  Referenced in workflow Pricing - Recieve SAP 47 Condition Records
    * Input Object:
    *  Pricing - Send or Receive SAP 47 Condition (COND_A02)
    *       
    *
    * Output Object's Integration Components:
    *  set property ""Condition Type"" to Price List or Discount Matrices in outputMsg
    *  depending on SAP Prcing Condition Type
    */

   /*
    * Set up EAI Input Message objects
    */
	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Filter
	var iKONHComp; 		// IDOC Header
	var iKONPComp; 		// IDOC Items
	
	var oPriceObj;		//
	var oPriceComp;		//
	
   /*
    * Temp Variables
    */	
   var AdjustmentGroupExists	= false;
   var VolumeDiscountExists 	= false;	
	

   /*
    * EAI Lookup Maps
    */
	var condTypeLM   = EAIGetValueMap (""SAP Pricing Condition Class"", ""Siebel Inbound"", ""Unknown Condition Type"" );

   /*
    * Find and create top-level integration object
    */
	iIDOCObj	= inputMsg.GetIntObj (""Pricing - Send or Receive SAP 47 Condition (COND_A02)"");
  
	if (iIDOCObj.NextInstance ())
	{
		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();

		// Read ""KOMG"" segment
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		if (iKOMGComp.NextRecord ())
		{  

			var UsageCode	= iKOMGComp.GetFieldValue (""KVEWE""); // Condition Table usage
			var TableNbr	= iKOMGComp.GetFieldValue (""KOTABNR""); // Condition Table number
			var CondType	= iKOMGComp.GetFieldValue (""KSCHL""); // Condition Type
			var ExtSysVal	= UsageCode + TableNbr + CondType;

   			var ConditionType 	= condTypeLM.Translate (CondType);
   			outputMsg.SetArgument(""Condition Type"", ConditionType);
  	
			if (ConditionType == ""Discount Matrix"")
			{
			var AdjGrpId	= GetAdjustmentId (ExtSysVal);
				if (AdjGrpId == null)
				{
 					AdjustmentGroupExists 	= false;
				}
				else
				{
					AdjustmentGroupExists 	= true;
				}
			}
			
			// Read ""KONH"" segment (Condition Header)

			iKONHComp = iKOMGComp.GetIntComp (""E2KONH"");
			if (iKONHComp.NextRecord ())
			{
				// Read ""KONP"" segment (Condition Items)
				iKONPComp = iKONHComp.GetIntComp (""E2KONP002"");
				if (iKONPComp.NextRecord ())
				// Check Scale basis indicator
				{
					var VolumeDiscInd	= iKONPComp.GetFieldValue (""KZBZG""); // Scale Basis Indicator
					if (VolumeDiscInd == """")
					{
						VolumeDiscountExists 	= false;
					}
					else
					{
						VolumeDiscountExists 	= true;
					}
				}
			}// iKONHComp
			
		   	oPriceObj = outputMsg.CreateIntObj (""Pricing - Send or Receive SAP 47 Condition (COND_A02)"");
   			oPriceObj.NewInstance ();
   			oPriceComp = oPriceObj.CreatePrimaryIntComp (""Idoc Segments"");
   			oPriceComp.NewRecord ();
   			
   			
   			if (VolumeDiscountExists)
   			{
      			outputMsg.SetArgument(""Volume Discount Exists"", ""True"");
      		}
      		else
      		{
      			outputMsg.SetArgument(""Volume Discount Exists"", ""False"");
   			}

   			if (AdjustmentGroupExists)
   			{
      			outputMsg.SetArgument(""Adjustment Group Exists"", ""True"");
      		}
      		else
      		{
      			outputMsg.SetArgument(""Adjustment Group Exists"", ""False"");
   			}

//		   	var ConditionType 	= condTypeLM.Translate (CondType);
//		   	outputMsg.SetArgument(""Condition Type"", ConditionType);

		} // End - iKOMGComp
	} // End - iIDOCObj.NextInstance
	
   			
			
} // End - Function"
function CreateAdjustmentGroup_47IDOCToSiebel (inputMsg, outputMsg) 
{ 	// Start
  /*  Referenced in workflow Pricing - Pricing - Create Discount Matrices Dimension
    * Input Integration Object:
    *  Pricing - Send or Receive SAP 47 Condition (COND_A02)
    *       
    *
    * Output Integration Object:
    *  Pricing - Send or Receive SAP 47 Discount Matrix
    */

    // Set up EAI Input Message objects
   	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Condition Structures

	// Set up EAI Output Message objects - Write to Output IntObj
	var oAdjGroupObj;		// Siebel Adjustment Group instance
	var oAdjGroupHeader;	// Adjustment Group
	var oAdjGroupDim;		// Adjustment Dimension

    // EAI Lookup Maps
  	var discTypeLM		= EAIGetValueMap (""SAP Pricing Discount Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );
	var dMatrixNameLM	= EAIGetValueMap (""SAP Condition Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );
	var tblKeyFieldLM	= EAIGetValueMap (""SAP Table Key Field Xref"", ""Siebel Inbound"", ""Unknown XRef Field"" );
	var XRefFieldLM		= EAIGetValueMap (""SAP Key Field"", ""Siebel Inbound"", ""Unknown XRef Field"" );


   //  Find and create top-level integration object	
	iIDOCObj		= inputMsg.GetIntObj     (""Pricing - Send or Receive SAP 47 Condition (COND_A02)"");
	oAdjGroupObj	= outputMsg.CreateIntObj (""Pricing - Send or Receive SAP 47 Discount Matrix"");

	// Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{	// Start Read ""IDOC"" 
	
		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();
	
		// Create ""Adjusmnt Group"" Object
		oAdjGroupObj.NewInstance ();

		// Read ""KOMG"" component (Condition Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		while (iKOMGComp.NextRecord ())
		{  	// Start Read ""KOMG"" Component
			// Map data to ""Adjustment Group"" Intergration Component
			// Create ""Adjustment Group"" component in output message
			oAdjGroupHeader 	= oAdjGroupObj.CreatePrimaryIntComp (""Adjustment Group"");
			oAdjGroupHeader.NewRecord ();
			oAdjGroupHeader.SetCopySource (iKOMGComp);
			oAdjGroupHeader.SetFieldValue (""operation"", ""sync""); // Set operation method

			var UsageCode	= iKOMGComp.GetFieldValue (""KVEWE""); // Condition Table usage
			var TableNbr	= iKOMGComp.GetFieldValue (""KOTABNR""); // Condition Table number
			var CondType	= iKOMGComp.GetFieldValue (""KSCHL""); // Condition Type
			var ExtSysVal	= UsageCode + TableNbr + CondType;
			
			// Intergration Id
			oAdjGroupHeader.SetFieldValue (""Integration Id"", ExtSysVal);

			// Name
			var GroupName	= dMatrixNameLM.Translate (iKOMGComp.GetFieldValue (""KSCHL""));	// Condition Type
			oAdjGroupHeader.SetFieldValue (""Name"", GroupName);
			oAdjGroupHeader.SetFieldValue (""Description"", GroupName);

			// Discount Matrix Type
			var DiscType	= discTypeLM.Translate (iKOMGComp.GetFieldValue (""KSCHL""));	// Condition Type
			var MatrixType	= TheApplication().InvokeMethod (""LookupValue"", ""ADJ_GROUP_TYPE"", DiscType);
			oAdjGroupHeader.SetFieldValue (""Adjustment Group Type"", 	MatrixType);

			// Setup SAP Parameters
//			oAdjGroupHeader.SetFieldValue (""SAP Table Name"", TableName);	// Not yet maintained in BC
//			oAdjGroupHeader.CopyFieldValue (""SAP Condition Name"",""KSCHL"");	// Not yet maintained in BC

			// Set Status to ""Active""
//			var Status	= TheApplication().InvokeMethod (""LookupValue"", ""MATRIX_DEFN_STATUS"", ""Active"");	
//			oAdjGroupHeader.SetFieldValue (""Status"", Status); 


			// Set up Adjustment Dimension
			oAdjGroupDim = oAdjGroupHeader.CreateIntComp (""Adjustment Dimension"", false);
				
			// Get SAP TBL Key Field(s)
			var TBLKeys		= tblKeyFieldLM.Translate (ExtSysVal);	// Application + Table + Condition Type
			var keyArray	= TBLKeys.split(""::"");
	
			var seqNo		= 10;
			for (var i = 0; i < keyArray.length; i++)
			{
				oAdjGroupDim.NewRecord();
				oAdjGroupDim.SetFieldValue (""operation"", ""sync""); 
				
				var Key		= keyArray[i];
				var XRef	= XRefFieldLM.Translate (Key);
				oAdjGroupDim.SetFieldValue (""Display Sequence"", seqNo);
				oAdjGroupDim.SetFieldValue (""Field"", XRef);
				seqNo		= seqNo + 10;
			}
					
		}	// End Read ""KOMG"" Component
	}	// End Read ""IDOC"" 
}	// End"
function GetAccountId (Customer)
{
	var AccBusObject = TheApplication().GetBusObject(""Account"");
	var AccBusComp = AccBusObject.GetBusComp(""Account"");
		
	AccBusComp.SetViewMode(3);  // All Mode
	AccBusComp.ClearToQuery();
    AccBusComp.SetSearchSpec(""Integration Id"", Customer);
	AccBusComp.ActivateField(""Id"");
	AccBusComp.ExecuteQuery();
		
	if(AccBusComp.FirstRecord())
	{
	   return AccBusComp.GetFieldValue(""Id"");
	}
      	else
           return null;
}
function GetAdjustmentId (ExtSysVal)
{
	var AdjGrpBusObject = TheApplication().GetBusObject(""Adjustment Group"");
	var AdjGrpBusComp = AdjGrpBusObject.GetBusComp(""Adjustment Group"");
		
	AdjGrpBusComp.SetViewMode(3);  // All Mode
	AdjGrpBusComp.ClearToQuery();
    AdjGrpBusComp.SetSearchSpec(""Integration Id"", ExtSysVal);	// 
	AdjGrpBusComp.ActivateField(""Id"");
	AdjGrpBusComp.ExecuteQuery();
		
	if(AdjGrpBusComp.FirstRecord())
	{
	   return AdjGrpBusComp.GetFieldValue(""Id"");
	}
      	else
           return null;
}
function GetCurrencyCode (SalesOrg, DistChan)
{
	var OrgBusObject = TheApplication().GetBusObject(""Organizations"");
	var OrgBusComp = OrgBusObject.GetBusComp(""Organization"");
	
	OrgBusComp.SetViewMode(3);  // All Mode	
	OrgBusComp.ClearToQuery();
    OrgBusComp.SetSearchSpec(""Back Office Sales Organization"", SalesOrg);
	OrgBusComp.SetSearchSpec(""Back Office Distribution Channel"", DistChan);
	OrgBusComp.ActivateField(""Currency Code"");
	OrgBusComp.ExecuteQuery();
		
	if(OrgBusComp.FirstRecord())
	{
	   return OrgBusComp.GetFieldValue(""Currency Code"");
	}
      	else
           return null;
}
function GetProductId (Product)
{
	var PrdBusObject = TheApplication().GetBusObject(""Internal Product"");
	var PrdBusComp = PrdBusObject.GetBusComp(""Internal Product"");
		
	PrdBusComp.SetViewMode(3);  // All Mode
	PrdBusComp.ClearToQuery();
    PrdBusComp.SetSearchSpec(""Integration Id"", Product);
	PrdBusComp.ActivateField(""Id"");
	PrdBusComp.ExecuteQuery();
		
	if(PrdBusComp.FirstRecord())
	{
	   return PrdBusComp.GetFieldValue(""Id"");
	}
      	else
           return null;
}
function GetVolumeDiscountId (Int_ID)
{
	var VolDiscBusObject = TheApplication().GetBusObject(""Admin Volume Discount"");
	var VolDiscBusComp = VolDiscBusObject.GetBusComp(""Volume Discount"");
		
	VolDiscBusComp.SetViewMode(3);  // All Mode
	VolDiscBusComp.ClearToQuery();
    VolDiscBusComp.SetSearchSpec(""Integration Id"", Int_ID);
	VolDiscBusComp.ActivateField(""Id"");
	VolDiscBusComp.ExecuteQuery();
		
	if(VolDiscBusComp.FirstRecord())
	{
	   return VolDiscBusComp.GetFieldValue(""Id"");
	}
      	else
           return null;
}
function ReceiveAdminPriceList_47IDOCToSiebel (inputIDOC, outputPriceList) 
{ 	// Start
  /*  Referenced in workflow Pricing - Receive SAP 47 Price
    * Input Integration Object:
    *  Pricing - Send or Receive SAP 47 Condition (COND_A02)
    *       
    *
    * Output Integration Object:
    *  Pricing - Send or Receive SAP 47 Price List
    */

    // Set up EAI Input Message objects
   	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Condition Structures
	var iKONHComp; 		// IDOC Condition Header
	var iKONPComp; 		// IDOC Condition Item

	// Set up EAI Output Message objects - Write to Output IntObj
	var oPriceListObj;		// Siebel Price List instance
	var oPriceListHeader;	// Price List
	var oPriceListItem;		// Price List Item
	var oPriceListOrg;		// Price List Org

    // EAI Lookup Maps
	var currLM		= EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"", ""Unknown Currency Code"" );
	var pListNameLM	= EAIGetValueMap (""SAP Condition Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );

   //  Find and create top-level integration object	
	iIDOCObj		= inputIDOC.GetIntObj  	(""Pricing - Send or Receive SAP 47 Condition (COND_A02)"");
	oPriceListObj	= outputPriceList.CreateIntObj 	(""Pricing - Send or Receive SAP 47 Price List"");

	// Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{	// Start Read ""IDOC"" 

		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();
		
		// Create ""PriceList"" Object
		oPriceListObj.NewInstance ();

		// Read ""KOMG"" component (Condition Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		while (iKOMGComp.NextRecord ())
		{  	// Start Read ""KOMG"" Component
			// Map data to ""Price List"" Intergration Component
			// Create ""Price List"" component in output message
			oPriceListHeader = oPriceListObj.CreatePrimaryIntComp (""Price List"");
			oPriceListHeader.NewRecord ();
			oPriceListHeader.SetCopySource (iKOMGComp);
			oPriceListHeader.SetFieldValue (""operation"", ""sync""); // Set operation method

			var Usage		= iKOMGComp.GetFieldValue (""KVEWE""); // Usage of Condition Table
			var CondTbl		= iKOMGComp.GetFieldValue (""KOTABNR""); // Condition Table
			var CondType	= iKOMGComp.GetFieldValue (""KSCHL""); // Condition Type
			var ItemDesc	= iKOMGComp.GetFieldValue (""VAKEY_LONG""); // Description
			var SalesOrg 	= iKOMGComp.GetFieldValue (""VKORG""); // Sales Organization
			var DistChan 	= iKOMGComp.GetFieldValue (""VTWEG""); // Distribution Channel
			var Material 	= iKOMGComp.GetFieldValue (""MATNR""); // Material
			var VarKey	 	= iKOMGComp.GetFieldValue (""VAKEY""); // Variable Key
		
			// Set up Price List name
			var ListName	= pListNameLM.Translate (iKOMGComp.GetFieldValue (""KSCHL"")); // Condition Type
			var PListName	= ListName + Usage + CondTbl + ""::"" + CondType + ""::"" + SalesOrg + ""::"" + DistChan;
			oPriceListHeader.SetFieldValue (""Name"", PListName);
			oPriceListHeader.SetFieldValue (""Description"", PListName);
						
			// Setup Integration Id (Sales Org Code + Distribution Channel Code + Condition Type + Usage + Table)
			var IntegrationId	=	SalesOrg + DistChan + CondType + Usage + CondTbl;
			oPriceListHeader.SetFieldValue (""Integration Id"", IntegrationId);
			oPriceListHeader.SetFieldValue (""Start Date"", Timestamp());

			// Currency Code (Header)
			var CurrencyCode	=	GetCurrencyCode (SalesOrg, DistChan);
			oPriceListHeader.SetFieldValue (""Currency Code"", CurrencyCode);

			// Set up Price List Organization
			oPriceListOrg = oPriceListHeader.CreateIntComp (""Price List_Organization"", false);
			
			var OrgBusObject	= TheApplication().GetBusObject(""Organizations"") ;
			var OrgBusComp 		= OrgBusObject.GetBusComp(""Organization"") ;
			OrgBusComp.SetViewMode(3);  // All Mode

			OrgBusComp.ClearToQuery();
			OrgBusComp.SetSearchSpec(""Back Office Sales Organization"", SalesOrg);
			OrgBusComp.SetSearchSpec(""Back Office Distribution Channel"", DistChan);
			OrgBusComp.ActivateField(""Organization Id"");
			OrgBusComp.ActivateField(""Organization"");
			OrgBusComp.ActivateField(""Location"");
			OrgBusComp.ExecuteQuery();
			
			var hasMoreRecords 	= OrgBusComp.FirstRecord();
			while ( hasMoreRecords )
			{
				var OrgID	 	= OrgBusComp.GetFieldValue(""Organization Id"");
				var OrgName	 	= OrgBusComp.GetFieldValue(""Organization"");
				var Loc		 	= OrgBusComp.GetFieldValue(""Location"");
				oPriceListOrg.NewRecord();
				oPriceListOrg.SetFieldValue (""operation"", ""sync""); 
				oPriceListOrg.SetFieldValue(""Organization Id"", OrgID);
				oPriceListOrg.SetFieldValue(""Organization"", OrgName);
				oPriceListOrg.SetFieldValue(""Location"", Loc);
				oPriceListOrg.SetFieldValue (""IsPrimaryMVG"", ""Y"");
				hasMoreRecords = OrgBusComp.NextRecord();
			}												
			// Set Primary Org Id
			oPriceListHeader.SetFieldValue (""Primary Organization Id"", OrgID);

			// Read ""KONH"" component 
			iKONHComp = iKOMGComp.GetIntComp (""E2KONH"");
			oPriceListItem = oPriceListHeader.CreateIntComp (""Price List Item - UAN"", false);
			while (iKONHComp.NextRecord ())
			{	// Start Read ""KONH"" Component
				oPriceListItem.SetCopySource (iKONHComp);
								
				// Set up Description & Integration Id
				var IntID	= iKONHComp.GetFieldValue (""KNUMH""); 	
				
				// Set up Start & End Dates
				var StrDate		= iKONHComp.GetFieldValue (""DATAB"");
				var EndDate		= iKONHComp.GetFieldValue (""DATBI"");
				var chkDate		= EndDate.substring(0,10); 
				
				// Read ""KONP"" Component
				iKONPComp = iKONHComp.GetIntComp (""E2KONP002"");
				while (iKONPComp.NextRecord ())
				{	// Start Read ""KONP"" Component
					oPriceListItem.NewRecord (); //+
					oPriceListItem.SetCopySource (iKONPComp);
					oPriceListItem.SetFieldValue (""operation"", ""sync""); //+
					
					oPriceListItem.SetFieldValue (""Integration Id"",IntID);
					oPriceListItem.SetFieldValue (""Description"", ItemDesc);
					oPriceListItem.SetFieldValue (""Product Name"", Material);// Material
					oPriceListItem.SetFieldValue (""Product Integration Id"", Material);// Product Integration Id
					oPriceListItem.CopyFieldValue (""Original List Price"", ""KBETR"");// Rate
					oPriceListItem.CopyFieldValue (""Min Sale Price"", ""MXWRT"");// Lower Limit
					oPriceListItem.CopyFieldValue (""Max Sale Price"", ""GKWRT"");// Upper Limit
					oPriceListItem.SetFieldValue (""Start Date"", StrDate);
					if ( chkDate != ""12/31/9999"" )
						{
							oPriceListItem.SetFieldValue (""End Date"", EndDate);
						}

					// Volume Discount
					oPriceListItem.SetFieldValue (""Volume Discount Id"", null); 
					var VolumeDiscInd	= iKONPComp.GetFieldValue (""KZBZG""); // Scale Basis Indicator
					if (VolumeDiscInd != null || VolumeDiscInd != """")
					{
						var VolumeDiscountId = GetVolumeDiscountId (IntID);
						oPriceListItem.SetFieldValue (""Volume Discount Id"", VolumeDiscountId); 	
					}					
					
				}	// End Read ""KONP"" Component			
			}	// End Read ""KONH"" Component							
		}	// End Read ""KOMG"" Component
	}	// End Read ""IDOC"" 
}	// End"
function ReceiveProductBasedAdjustment_47IDOCToSiebel (inputMsg, outputMsg) 
{ 	// Start
  /*  Referenced in workflow Pricing - Receive SAP 47 Price
    * Input Integration Object:
    *  Pricing - Send or Receive SAP 47 Condition (COND_A02)
    *       
    *
    * Output Integration Object:
    *  Pricing - Send or Receive SAP 47 Discount Matrix
    */

    // Set up EAI Input Message objects
   	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Condition Structures
	var iKONHComp; 		// IDOC Condition Header
	var iKONPComp; 		// IDOC Condition Item

	// Set up EAI Output Message objects - Write to Output IntObj
	var oPBAdjustmentObj;	// Siebel Product-Based instance
	var oAdjustmentGroup;	// Siebel Adjustment Group instance
	var oPBAdjustment;		// Siebel Product-Based Adjustment 
	
    // EAI Lookup Maps
   	var discTypeLM		= EAIGetValueMap (""SAP Pricing Discount Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );
	var dMatrixNameLM	= EAIGetValueMap (""SAP Condition Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );
	var currLM			= EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"", """" );
	var prcClassLM		= EAIGetValueMap (""SAP Pricing Scale Calculation"", ""Siebel Inbound"" );

   //  Find and create top-level integration object	
	iIDOCObj			= inputMsg.GetIntObj     (""Pricing - Send or Receive SAP 47 Condition (COND_A02)"");
	oPBAdjustmentObj	= outputMsg.CreateIntObj (""Pricing - Send or Receive SAP 47 Discount Matrix"");

	// Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{	// Start Read ""IDOC"" 
		oPBAdjustmentObj.NewInstance ();

		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();

		// Read ""KOMG"" component (Condition Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		if (iKOMGComp.NextRecord ())
		{  	// Start Read ""KOMG"" Component 
			// Map data to ""Adjustment"" Intergration Component
			oAdjustmentGroup = oPBAdjustmentObj.CreatePrimaryIntComp (""Adjustment Group"");
			oAdjustmentGroup.NewRecord ();
			oAdjustmentGroup.SetCopySource (iKOMGComp);
//			oAdjustmentGroup.SetFieldValue (""operation"", ""sync""); // Set operation method
			
			var UsageCode	= iKOMGComp.GetFieldValue (""KVEWE""); // Condition Table usage
			var TableNbr	= iKOMGComp.GetFieldValue (""KOTABNR""); // Condition Table number
			var CondType	= iKOMGComp.GetFieldValue (""KSCHL""); // Condition Type
			var SalesOrg 	= iKOMGComp.GetFieldValue (""VKORG""); // Sales Organization Code
			var DistChan 	= iKOMGComp.GetFieldValue (""VTWEG""); // Distribution Channel Code
			var Division 	= iKOMGComp.GetFieldValue (""SPART""); // Division Code
			var Customer 	= iKOMGComp.GetFieldValue (""KUNNR""); // Customer
			var Product 	= iKOMGComp.GetFieldValue (""MATNR""); // Material
			var VarKey	 	= iKOMGComp.GetFieldValue (""VAKEY""); // Variable key
			var ExtSysVal	= UsageCode + TableNbr + CondType;

			// Name
			var GroupName	= dMatrixNameLM.Translate (iKOMGComp.GetFieldValue (""KSCHL""));	// Condition Type
			oAdjustmentGroup.SetFieldValue (""Name"", GroupName);

			// Discount Matrix Type
			var DiscType	= discTypeLM.Translate (iKOMGComp.GetFieldValue (""KSCHL""));	// Condition Type
			var MatrixType	= TheApplication().InvokeMethod (""LookupValue"", ""ADJ_GROUP_TYPE"", DiscType);
			oAdjustmentGroup.SetFieldValue (""Adjustment Group Type"", 	MatrixType);
			
			// Integration Id
			oAdjustmentGroup.SetFieldValue (""Integration Id"", ExtSysVal);
		
			//	Get Adjustment Id
			var AdjGrpId	= GetAdjustmentId (ExtSysVal);
							
   		    // Read ""KONH"" component 
			iKONHComp = iKOMGComp.GetIntComp (""E2KONH"");
			oPBAdjustment = oAdjustmentGroup.CreateIntComp (""Product-Based Adjustment - UAN"", false);
			while (iKONHComp.NextRecord ())
			{	// Start Read ""KONH"" Component
				oPBAdjustment.SetCopySource (iKONHComp);
				
				// Setup Integration Id
				var IntID	= iKONHComp.GetFieldValue (""KNUMH""); 	
				
				// Set up Start & End Dates
				var StrDate		= iKONHComp.GetFieldValue (""DATAB"");
				var EndDate		= iKONHComp.GetFieldValue (""DATBI"");
				var chkDate		= EndDate.substring(0,10);


				// Read ""KONP"" Component
				iKONPComp = iKONHComp.GetIntComp (""E2KONP002"");
				while (iKONPComp.NextRecord ())
				{	// Start Read ""KONP"" Component
					oPBAdjustment.NewRecord ();
					oPBAdjustment.SetCopySource (iKONPComp);
					oPBAdjustment.SetFieldValue (""operation"", ""upsert""); // Set operation method

					oPBAdjustment.SetFieldValue (""Integration Id"", IntID); // Integration Id
					oPBAdjustment.SetFieldValue (""Adjustment Group Id"", AdjGrpId); // Group Id

					// Effective Dates
					oPBAdjustment.SetFieldValue (""Effective Start Date"", StrDate);										
					if ( chkDate != ""12/31/9999"" )
					{
						oPBAdjustment.SetFieldValue (""Effective End Date"", EndDate);
					}

					//Check Sales Organization
					if (SalesOrg != null || SalesOrg != """")
					{
						oPBAdjustment.SetFieldValue (""Sales Organization Code"", SalesOrg); 	
					}

					//Check Distribution Channel
					if (DistChan != null || DistChan != """")
					{
						oPBAdjustment.SetFieldValue (""Distribution Channel Code"", DistChan); 	
					}
					
					//Check Division Code
					if (Division != null || Division != """")
					{
						oPBAdjustment.SetFieldValue (""Division Code"", Division); 	
					}					
					
					//Check Product
					if (Product != null || Product != """")
					{
						var ProductId = GetProductId (Product);
						oPBAdjustment.SetFieldValue (""Product Id"", ProductId); 	
					}					
					
					//Check Account
					if (Customer != null || Customer != """")
					{
						var AccountId = GetAccountId (Customer);
						oPBAdjustment.SetFieldValue (""Account Id"", AccountId); 	
					}
					
					// Currency Code
					var CurrencyCode	= currLM.Translate (iKONPComp.GetFieldValue (""KONWA""));
					oPBAdjustment.SetFieldValue (""Currency Code"", CurrencyCode); 
					
					// Adjustment Type
					var ConditionType	= prcClassLM.Translate (CondType); // Condition Type
					var AdjustmentType		= TheApplication().InvokeMethod (""LookupValue"", ""PRICER_CALCULATION_SIMPLE_TYPE"", ConditionType);
					oPBAdjustment.SetFieldValue (""Adjustment Type"", AdjustmentType); 

					// Adjusment Amount
					oPBAdjustment.CopyFieldValue (""Adjustment Amount"", ""KBETR"");		// Rate
					
					// Volume Discount
					oPBAdjustment.SetFieldValue (""Volume Discount Id"", null);
					var VolumeDiscInd	= iKONPComp.GetFieldValue (""KZBZG""); // Scale Basis Indicator
					if (VolumeDiscInd != null || VolumeDiscInd != """")
					{
						var VolumeDiscountId = GetVolumeDiscountId (IntID);
						oPBAdjustment.SetFieldValue (""Volume Discount Id"", VolumeDiscountId); 	
					}					
		
				}	// End Read ""KONP"" Component			
			}	// End Read ""KONH"" Component
		}	// End Read ""KOMG"" Component
	}	// End Read ""IDOC"" 
}	// End"
function ReceiveVolumeDiscount_47IDOCToSiebel (inputMsg, outputMsg) 
{ 	// Start
  /*  Referenced in workflow Pricing - Receive SAP 47 Scales
    * Input Integration Object:
    *  Pricing - Send or Receive SAP 47 Condition (COND_A02)
    *       
    *
    * Output Integration Object:
    *  Pricing - Send or Receive SAP 47 Volume Discount
    */

    // Set up EAI Input Message objects
   	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Condition Structures
	var iKONHComp; 		// IDOC Condition Header
	var iKONPComp; 		// IDOC Condition Item
	var iKONMComp; 		// IDOC Condition Quantity Scale
	var iKONWComp; 		// IDOC Condition Value Scale

	// Set up EAI Output Message objects - Write to Output IntObj
	var oVolDiscountObj;	// Siebel Volume Discount instance
	var oVolDiscountHeader;	// Volume Discount
	var oVolDiscountItem;	// Volume Discount Item

    // EAI Lookup Maps
	var discMethLM	= EAIGetValueMap (""SAP Pricing Scale Type"", ""Siebel Inbound"" );
	var prcClassLM	= EAIGetValueMap (""SAP Pricing Scale Calculation"", ""Siebel Inbound"" );

   //  Find and create top-level integration object	
	iIDOCObj		= inputMsg.GetIntObj     (""Pricing - Send or Receive SAP 47 Condition (COND_A02)"");
	oVolDiscountObj = outputMsg.CreateIntObj (""Pricing - Send or Receive SAP 47 Volume Discount"");

	// Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{	// Start Read ""IDOC"" 

		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();
		
		// Create ""Volume Discount"" Object
// nbc	oVolDiscountObj.NewInstance ();
		
		// Read ""KOMG"" component (Condition Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		while (iKOMGComp.NextRecord ())
		{  	// Start Read ""KOMG"" Component
						
			var Description		= iKOMGComp.GetFieldValue (""VAKEY_LONG""); // Long Description
			var ConditionType	= prcClassLM.Translate (iKOMGComp.GetFieldValue (""KSCHL"")); // Condition Type
			var VarKey			= iKOMGComp.GetFieldValue (""VAKEY""); // Variable Key
			
   		    // Read ""KONH"" component 
			iKONHComp = iKOMGComp.GetIntComp (""E2KONH"");
// nbc		oVolDiscountHeader = oVolDiscountObj.CreatePrimaryIntComp (""Volume Discount"");
			while (iKONHComp.NextRecord ())
			{	// Start Read ""KONH"" Component
				oVolDiscountObj.NewInstance ();	// nbc
				oVolDiscountHeader = oVolDiscountObj.CreatePrimaryIntComp (""Volume Discount""); // nbc
				oVolDiscountHeader.NewRecord ();
				oVolDiscountHeader.SetCopySource (iKONHComp);
				oVolDiscountHeader.SetFieldValue (""operation"", ""upsert""); // Set operation method
	
				// Setup Name & Integration Id
				var IntID	= iKONHComp.GetFieldValue (""KNUMH"");
				var Name	= VarKey + ""::"" + IntID;								
								
				// Get Start & End Dates
				var StartDate	= iKONHComp.GetFieldValue (""DATAB"");
				var EndDate		= iKONHComp.GetFieldValue (""DATBI"");
				var chkDate		= EndDate.substring(0,10);
				
				// Read ""KONP"" Component
				iKONPComp = iKONHComp.GetIntComp (""E2KONP002"");
				while (iKONPComp.NextRecord ())
				{	// Start Read ""KONP"" Component
					// Discount Method
					var ScaleType		= discMethLM.Translate (iKONPComp.GetFieldValue (""STFKZ""));
					var DiscountMethod	= TheApplication().InvokeMethod (""LookupValue"", ""IC_COMP_TABLE_TYPE"", ScaleType);
					// Adjustment Type
					var AdjustmentType	= TheApplication().InvokeMethod (""LookupValue"", ""PRICER_CALCULATION_SIMPLE_TYPE"", ConditionType);
										
					var Percentage		= iKONPComp.GetFieldValue (""KRECH"");	
					var minQty;
					var maxQty;
					var firstTime		= true;

					if (iKONPComp.GetFieldValue (""KZBZG"") == ""B"")	// Value Scale
					{	// Start Read ""KONW"" Component
						iKONWComp = iKONPComp.GetIntComp (""E2KONW"");
						oVolDiscountItem = oVolDiscountHeader.CreateIntComp (""Volume Discount Item"", false);
						while (iKONWComp.NextRecord ())
						{	// Start While iKONWComp
						
							if (firstTime == true)
							{
								firstTime	= false;
							}
							else
							{
								maxQty		= iKONWComp.GetFieldValue (""KSTBW"");
								maxQty		= maxQty -1;
								oVolDiscountItem.SetFieldValue (""Maximum Quantity"", maxQty);
							}
									
							oVolDiscountItem.NewRecord ();
							oVolDiscountItem.SetCopySource (iKONWComp);
							oVolDiscountItem.SetFieldValue (""operation"", ""sync""); // Set operation method
																 
							minQty		= iKONWComp.GetFieldValue (""KSTBW"");
//							oVolDiscountItem.CopyFieldValue (""Minimum Quantity"", ""KSTBW"");
							if (minQty == 0)
								{
									oVolDiscountItem.SetFieldValue (""Minimum Quantity"", 1);
								}
							else
								{
									oVolDiscountItem.SetFieldValue (""Minimum Quantity"", minQty);
								}
							oVolDiscountItem.SetFieldValue (""Adjustment Type"", AdjustmentType);
							oVolDiscountItem.CopyFieldValue (""Name"", ""KSTBW"");
							oVolDiscountItem.CopyFieldValue (""Description"", ""KSTBW"");
							oVolDiscountItem.CopyFieldValue (""Adjustment Amount"", ""KBETR"");
																
//							if (Percentage == ""A"") // Percentage
//								{
//									oVolDiscountItem.CopyFieldValue (""Discount Percent"", ""KBETR"");
//								}
//							else
//								{
//									oVolDiscountItem.CopyFieldValue (""Adjustment Amount"", ""KBETR"");
//								}
						}	// End While iKONWComp
					}	// End Read ""KONW"" Component
					
				
					if (iKONPComp.GetFieldValue (""KZBZG"") == ""C"")	// Quantity Scale
					{	// Start Read ""KONM"" Component
						iKONMComp = iKONPComp.GetIntComp (""E2KONM"");
						oVolDiscountItem = oVolDiscountHeader.CreateIntComp (""Volume Discount Item"", false);
						while (iKONMComp.NextRecord ())
						{	// Start While iKONMComp
						
							if (firstTime == true)
							{
								firstTime	= false;
							}
							else
							{
								maxQty		= iKONMComp.GetFieldValue (""KSTBM"");
								maxQty		= maxQty -1;
								oVolDiscountItem.SetFieldValue (""Maximum Quantity"", maxQty);
							}
							oVolDiscountItem.NewRecord ();
							oVolDiscountItem.SetCopySource (iKONMComp);
							oVolDiscountItem.SetFieldValue (""operation"", ""sync""); // Set operation method
								
							minQty		= iKONMComp.GetFieldValue (""KSTBM"");
//							oVolDiscountItem.CopyFieldValue (""Minimum Quantity"", ""KSTBM"");
							if (minQty == 0)
								{
									oVolDiscountItem.SetFieldValue (""Minimum Quantity"", 1);
								}
							else
								{
									oVolDiscountItem.SetFieldValue (""Minimum Quantity"", minQty);
								}
							oVolDiscountItem.SetFieldValue (""Adjustment Type"", AdjustmentType);
							oVolDiscountItem.CopyFieldValue (""Name"", ""KSTBM"");
							oVolDiscountItem.CopyFieldValue (""Description"", ""KSTBM"");
							oVolDiscountItem.CopyFieldValue (""Adjustment Amount"", ""KBETR"");
							
//							if (Percentage == ""A"") // Percentage
//								{
//									oVolDiscountItem.CopyFieldValue (""Discount Percent"", ""KBETR"");
//								}
//							else 
//								{
//									oVolDiscountItem.CopyFieldValue (""Adjustment Amount"", ""KBETR"");
//								}

							}	// End While iKONMComp
						}	// End Read ""KONM"" Component

					}	// End Read ""KONP"" Component
					oVolDiscountHeader.SetFieldValue (""Name"", Name); // Name
					oVolDiscountHeader.SetFieldValue (""Description"", Description); // Description
					oVolDiscountHeader.SetFieldValue (""Integration Id"", IntID); // Set Integration Id
					oVolDiscountHeader.SetFieldValue (""Discount Method"", DiscountMethod); // Discount Method
					oVolDiscountHeader.SetFieldValue (""Start Date"", StartDate); // Effectivity Date
					oVolDiscountHeader.SetFieldValue (""End Date"", "" ""); // Effectivity End Date
					if ( chkDate != ""12/31/9999"" )
						{
							oVolDiscountHeader.SetFieldValue (""End Date"", EndDate);
						}			
				}	// End Read ""KONH"" Component
// nbc				oVolDiscountHeader.SetFieldValue (""Name"", Name); // Name
// nbc				oVolDiscountHeader.SetFieldValue (""Description"", Description); // Description
// nbc				oVolDiscountHeader.SetFieldValue (""Integration Id"", IntID); // Set Integration Id
// nbc				oVolDiscountHeader.SetFieldValue (""Discount Method"", DiscountMethod); // Discount Method
// nbc				oVolDiscountHeader.SetFieldValue (""Start Date"", StartDate); // Effectivity Date
// nbc				if ( chkDate != ""12/31/9999"" )
// nbc					{
// nbc						oVolDiscountHeader.SetFieldValue (""End Date"", EndDate);
// nbc					}
		}	// End Read ""KOMG"" Component
	}	// End Read ""IDOC"" 
}	// End"
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{
}
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
	return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", d.getMonth()+1, d.getDate(), d.getFullYear(), d.getHours(), d.getMinutes(), d.getSeconds()); 
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2000, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 5 $
//      $Date: 09/26/00 1:19p $
//    $Author: MFasino $ of last update
//
// CREATOR:    P. Lim
//
// DESCRIPTION
//    Javascript maps from Siebel Product to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js"""
function ReceiveProduct_46CIDOCToSiebel (inputMsg, outputMsg)
{

   /* Input Integration Object
	*  - Product - Receive SAP 46C Material (MATMAS03) 
	*
	* Output Integration Object:
	*  - Product - Receive SAP 46C Material (Siebel 77) 
	*/

	// Set up EAI Input Message objects - Read from Input IntObj
	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iMARAMComp; 	// IDOC Material Header
	var iComp;			// for iterating first level input child components
	var iComp2; 		// for iterating second level input child components

	// Set up EAI Output Message objects - Write to Output IntObj
	var oProductObj;	// Siebel Product instance
	var oProductComp;	// Internal Product
	var oProductOrg;	// Internal Division
	var oProductInv;	// SAP 4x Inventory Location 
	var oProductPriOrg  // Product Primary Organization

	// EAI Lookup maps
	var uomLM   = EAIGetValueMap (""SAP Unit of Measure"", ""Siebel Inbound"" );
	var langLM	= EAIGetValueMap (""SAP Language 4x"",     ""Siebel Outbound"");

	// Map current Siebel language code to SAP language codes 
	var englishLangCode = langLM.Translate (""ENU"");
	var currLangCode    = langLM.Translate (TheApplication().InvokeMethod(""Language""));

    // Assume 'E' for English if there's no translation
	if (!englishLangCode)
	{
		englishLangCode = ""E"";	
	}

	
	// Find and create top-level integration object
	iIDOCObj	= inputMsg.GetIntObj     (""Product - Receive SAP 46C Material (MATMAS03)"");
	oProductObj = outputMsg.CreateIntObj (""Product - Receive SAP 46C Material (Siebel 78)"");

    // Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{
		// Create ""Product"" Object
		oProductObj.NewInstance ();

		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();


		// Read ""MARAM"" component 
		iMARAMComp = iIDOCComp.GetIntComp (""E2MARAM004"");
		if (iMARAMComp.NextRecord ())
		{
            /**
             *  Map data to ""Internal Product"" Intergration Component
             */

			// Create ""Product"" component in output message
			oProductComp = oProductObj.CreatePrimaryIntComp (""Internal Product - ISS Admin"");
			oProductComp.NewRecord ();
			oProductComp.SetCopySource (iMARAMComp);

            // Set operation method
			oProductComp.SetFieldValue (""operation"", ""sync""); 			

			// Set Integration Id 
			oProductComp.CopyFieldValue (""Integration Id"",""MATNR"");
			oProductComp.CopyFieldValue (""Name"",	      ""MATNR"");

            // Set Primary Organization.  Will be done after mapping the Internal Division
			var PrimaryOrg;
			
			// Set Vendor Part Number
			oProductComp.CopyFieldValue (""Vendor Part Number"", ""MFRPN"");

            // Set Unit of Mesaure
			var uomCode = iMARAMComp.GetFieldValue (""MEINS"");
            var pseUM   = TheApplication().InvokeMethod (""LookupValue"", ""UNIT_OF_MEASURE"", uomLM.Translate(uomCode));
			oProductComp.SetFieldValue (""Unit of Measure"", pseUM); 

            // Set Division Code
			var DivCode = iMARAMComp.GetFieldValue(""SPART"");
		  	if ((DivCode != null) && (DivCode != """"))
		  	 {
				oProductComp.SetFieldValue (""SAP Division Code"", DivCode);
			 }
			 else
			 {
			 	oProductComp.SetFieldValue (""SAP Division Code"", """");
			 }
			 
			/*
			 * Check if product is marked as deleted: 
			 *  1) Yes - Set product status as Obselete and remove the orderable and sales product flag.
			 *  2) No  - Remove the product status and check the orderable and sales product flag
			 */

            var pstat	   = iMARAMComp.GetFieldValue (""PSTAT"");
			var lvorm	   = iMARAMComp.GetFieldValue (""LVORM"");
			var dStatus    = TheApplication().InvokeMethod (""LookupValue"", ""IMPL_PHASE"", ""Obsolete"");

			if (lvorm == ""X"") 
			{  
				oProductComp.SetFieldValue (""Orderable"",			 ""N"");
				oProductComp.SetFieldValue (""Sales Product Flag"",	 ""N"");
				oProductComp.SetFieldValue (""Version Status"", dStatus);

			}
			else if (pstat.indexOf ('V') != -1)
			{
				oProductComp.SetFieldValue (""Orderable"",			 ""Y"");
				oProductComp.SetFieldValue (""Sales Product Flag"",	 ""Y"");
				oProductComp.SetFieldValue (""Version Status"", """" );                                                				
			}
			else
			{
				oProductComp.SetFieldValue (""Orderable"",			 ""N"");
				oProductComp.SetFieldValue (""Sales Product Flag"",	 ""N"");
				oProductComp.SetFieldValue (""Version Status"", """" );                                                				
			}
		
		   /*
			* Set Product Part Number. Choose from available languages
			*	1st Choice - Current Language
			*	2nd Choice - English
			*	3rd Choice - First listed
			*/
		   
			// Read ""MAKTM"" component 
			iComp = iMARAMComp.GetIntComp (""E2MAKTM001"");

			var partNum 	   = null;
			var partNumEnglish = null;
			var partNumFirst   = null;

			oProductComp.SetCopySource (iComp);
			
			while (iComp.NextRecord ())
			{
				var spras = iComp.GetFieldValue (""SPRAS"");
				var maktx = iComp.GetFieldValue (""MAKTX"");
		   
				if (spras == currLangCode)
				{
					partNum = maktx;
					break;	 // Found 1st choice
				}
				
				if ((spras == englishLangCode) && !partNumEnglish)
				{
					partNumEnglish = maktx;
				}

				if (!partNumFirst)
				{
					partNumFirst = maktx;
				}
			}

			if (!partNum)
			{
				if (partNumEnglish)
				{
					partNum = partNumEnglish;
				}
				else
				{
					partNum = partNumFirst;
				}
			}

			/* Set Part Number if found */
			if (partNum != """")
			{
				oProductComp.SetFieldValue (""Part #"", partNum);
			}

		   /*
			* Set Product Description. Choose from available languages
			*	1st Choice - Current Language
			*	2nd Choice - English
			*	3rd Choice - First listed
			*/

			// Read ""MAKTM"" component 
			iComp				= iMARAMComp.GetIntComp (""E2MTXHM001"");
			var descText		= null;
			var descTextEnglish = null;
			var descTextFirst	= null;

			while (iComp.NextRecord ())
			{
				if (iComp.GetFieldValue (""TDID"") == ""0001"")
				{
					// Gather this description if it fits one of our choices
					var tdspras = iComp.GetFieldValue (""TDSPRAS"");
					if (!descTextFirst || (tdspras == currLangCode) || (tdspras == englishLangCode))
					{
						var descTextCurr = """";

						iComp2 = iComp.GetIntComp (""E2MTXLM"");
						var line = 0;

						while ( iComp2.NextRecord () )
						{
						 	// Only get first four rows
							descTextCurr += iComp2.GetFieldValue (""TDLINE"") + ""\r\n"";
							line++;
							if (line == 4)
							break;
						}

						// Keep track of appropriate descriptions
						if (tdspras == currLangCode)
						{
							descText = descTextCurr;
							break;	// Found 1st choice
						}

						if ((tdspras == englishLangCode) && !descTextEnglish)
						{
							descTextEnglish = descTextCurr;
						}

						if (!descTextFirst)
						{
							descTextFirst = descTextCurr;
						}
					}
				}
			}
		  
			// Select from our preferred language choices
			if (!descText)
			{
				if (descTextEnglish)
				{
					descText = descTextEnglish;
				}
				else if (descTextFirst)
				{
					descText = descTextFirst;
				}
				else
				{
					descText = """";
				}
			}
 
			oProductComp.SetFieldValue (""Description"", descText);

            /**
             *  Map data to ""Internal Division"" Intergration Component
             */

			// Read ""MVKEM"" 
			iComp = iMARAMComp.GetIntComp( ""E2MVKEM002"" );
		
			oProductOrg    = oProductComp.CreateIntComp( ""Internal Division"", true );
            oProductPriOrg = oProductComp.CreateIntComp (""Internal Product_Organization"", false);						
			oProductOrg.SetCopySource( iComp );
 

            // If division code is not specified in SAP, it means product 
            // belongs to every sales areas with the same SalesOrg and
            // DistChannel.
			while( iComp.NextRecord() )
			{
				var OrgBusObject = TheApplication().GetBusObject(""Organizations"") ;
				var OrgBusComp   = OrgBusObject.GetBusComp(""Organization"") ;
				var SalesOrg     = iComp.GetFieldValue(""VKORG"");
				var DistChannel  = iComp.GetFieldValue(""VTWEG"");
						
				OrgBusComp.SetViewMode(3);  // All Mode
			
                // Find all Sales Area with the same SalesOrg and DistChannel in Siebel
				OrgBusComp.ClearToQuery();
 				OrgBusComp.SetSearchSpec(""Back Office Sales Organization"", SalesOrg);
 				OrgBusComp.SetSearchSpec(""Back Office Distribution Channel"", DistChannel);
				if ((DivCode != null) && (DivCode != """"))
				{
					OrgBusComp.SetSearchSpec(""Back Office Division"", DivCode);
				}
				else
				{
					OrgBusComp.ActivateField(""Back Office Division"");
				}				
			
				OrgBusComp.ExecuteQuery();
				
				var hasMoreRecords = OrgBusComp.FirstRecord();
									
				// While there are records iterate through
				while ( hasMoreRecords )
				{
					var mDivCode;
					if ((DivCode == null) || (DivCode == """"))
					{
						mDivCode = OrgBusComp.GetFieldValue(""Back Office Division"");
					}
					else
					{
					    mDivCode = DivCode;
					}
			
					oProductOrg.NewRecord();

                    // Set Sales Org, Distribution Channel, and Division Code for Siebel Internal Division
					oProductOrg.SetFieldValue(""Back Office Sales Organization"", SalesOrg); 
					oProductOrg.SetFieldValue(""Back Office Distribution Channel"", DistChannel);
					oProductOrg.SetFieldValue(""Back Office Division"", mDivCode);

                    // Mark for deletion
					if ( iComp.GetFieldValue (""LVORM"") != ""X"")
					{
						oProductOrg.SetFieldValue(""Status"", """");
						oProductOrg.SetFieldValue (""Orderable"", ""Y"");
					}
					else
					{
						oProductOrg.SetFieldValue(""Status"", ""Deletion"");
						oProductOrg.SetFieldValue(""Orderable"", ""N"");
					}

                    // Set Minimum Order Unit
					oProductOrg.CopyFieldValue(""Minimum Order Unit"", ""AUMNG"");

                    // Set Primary Plant
					oProductOrg.CopyFieldValue(""Primary Plant"", ""DWERK"");
		   
                    // Set Organization Unit of Mesaure
					var orgUomCode = iComp.GetFieldValue     (""VRKME"");

					if (orgUomCode == null && orgUomCode == """")
					{
						orgUomCode = uomCode;
					}

                    var pseUM = TheApplication().InvokeMethod (""LookupValue"", ""UNIT_OF_MEASURE"", uomLM.Translate(orgUomCode));
					oProductOrg.SetFieldValue(""Unit of Measure"", pseUM);
					
					// Set Primary Organization for Internal Product
					PrimaryOrg = OrgBusComp.GetFieldValue(""Organization Id"");
					oProductPriOrg.NewRecord();					
					oProductPriOrg.SetFieldValue( ""Organization Id"", PrimaryOrg );
					
					hasMoreRecords = OrgBusComp.NextRecord();
				}
			}
			
            // Set the Last Organization as Primary Org
	    	if ((PrimaryOrg != null) && (PrimaryOrg != """"))
			{
	 			oProductPriOrg.SetFieldValue( ""IsPrimaryMVG"", ""Y"" ); 
	 			oProductComp.SetFieldValue (""Primary Organization Id"",			 PrimaryOrg);										
	 		}			

            /**
             *  Map data to ""SAP 4x Inventory Locations"" Intergration Component
             */

			// Read ""MARCM"" component
			iComp = iMARAMComp.GetIntComp( ""E2MARCM003"" );
		
			oProductInv = oProductComp.CreateIntComp( ""SAP 4x Inventory Locations"", false);
			oProductInv.SetCopySource( iComp );
					
			while( iComp.NextRecord() )
			{
				/* This will only display a plant if the material can be sold, ie if a sales org is associated to the material */	 
				if (pstat.indexOf ('V') != -1)
				{
                    var pseInvType = TheApplication().InvokeMethod (""LookupValue"", ""FS_INVLOCTYPE_TYPE"", ""SAP Plant"");
					oProductInv.NewRecord();
					oProductInv.CopyFieldValue( ""Inventory Name"",	""WERKS"" );
					oProductInv.SetFieldValue ( ""Inventory Type"",	pseInvType );
				}
			}
		}
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2000, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 5 $
//      $Date: 09/26/00 1:19p $
//    $Author: MFasino $ of last update
//
// CREATOR:    P. Lim
//
// DESCRIPTION
//    Javascript maps from Siebel Product to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js"""
function ReceiveProduct_47IDOCToSiebel (inputMsg, outputMsg)
{

   /* Input Integration Object
	*  - Product - Receive SAP 47 Material (MATMAS03) 
	*
	* Output Integration Object:
	*  - Product - Receive SAP 47 Material (Siebel 77) 
	*/

	// Set up EAI Input Message objects - Read from Input IntObj
	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iMARAMComp; 	// IDOC Material Header
	var iComp;			// for iterating first level input child components
	var iComp2; 		// for iterating second level input child components

	// Set up EAI Output Message objects - Write to Output IntObj
	var oProductObj;	// Siebel Product instance
	var oProductComp;	// Internal Product
	var oProductOrg;	// Internal Division
	var oProductInv;	// SAP 4x Inventory Location 
	var oProductPriOrg  // Product Primary Organization

	// EAI Lookup maps
	var uomLM   = EAIGetValueMap (""SAP Unit of Measure"", ""Siebel Inbound"" );
	var langLM	= EAIGetValueMap (""SAP Language 4x"",     ""Siebel Outbound"");

	// Map current Siebel language code to SAP language codes 
	var englishLangCode = langLM.Translate (""ENU"");
	var currLangCode    = langLM.Translate (TheApplication().InvokeMethod(""Language""));

    // Assume 'E' for English if there's no translation
	if (!englishLangCode)
	{
		englishLangCode = ""E"";	
	}

	
	// Find and create top-level integration object
	iIDOCObj	= inputMsg.GetIntObj     (""Product - Receive SAP 47 Material (MATMAS03)"");
	oProductObj = outputMsg.CreateIntObj (""Product - Receive SAP 47 Material (Siebel 78)"");

    // Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{
		// Create ""Product"" Object
		oProductObj.NewInstance ();

		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();


		// Read ""MARAM"" component 
		iMARAMComp = iIDOCComp.GetIntComp (""E2MARAM005"");
		if (iMARAMComp.NextRecord ())
		{
            /**
             *  Map data to ""Internal Product"" Intergration Component
             */

			// Create ""Product"" component in output message
			oProductComp = oProductObj.CreatePrimaryIntComp (""Internal Product - ISS Admin"");
			oProductComp.NewRecord ();
			oProductComp.SetCopySource (iMARAMComp);

            // Set operation method
			oProductComp.SetFieldValue (""operation"", ""sync""); 			

			// Set Integration Id 
			oProductComp.CopyFieldValue (""Integration Id"",""MATNR"");
			oProductComp.CopyFieldValue (""Name"",	      ""MATNR"");

            // Set Primary Organization.  Will be done after mapping the Internal Division
			var PrimaryOrg;
			
			// Set Vendor Part Number
			oProductComp.CopyFieldValue (""Vendor Part Number"", ""MFRPN"");

            // Set Unit of Mesaure
			var uomCode = iMARAMComp.GetFieldValue (""MEINS"");
            var pseUM   = TheApplication().InvokeMethod (""LookupValue"", ""UNIT_OF_MEASURE"", uomLM.Translate(uomCode));
			oProductComp.SetFieldValue (""Unit of Measure"", pseUM); 

            // Set Division Code
			var DivCode = iMARAMComp.GetFieldValue(""SPART"");
		  	if ((DivCode != null) && (DivCode != """"))
		  	 {
				oProductComp.SetFieldValue (""SAP Division Code"", DivCode);
			 }
			 else
			 {
			 	oProductComp.SetFieldValue (""SAP Division Code"", """");
			 }
			 
			/*
			 * Check if product is marked as deleted: 
			 *  1) Yes - Set product status as Obselete and remove the orderable and sales product flag.
			 *  2) No  - Remove the product status and check the orderable and sales product flag
			 */

            var pstat	   = iMARAMComp.GetFieldValue (""PSTAT"");
			var lvorm	   = iMARAMComp.GetFieldValue (""LVORM"");
			var dStatus    = TheApplication().InvokeMethod (""LookupValue"", ""IMPL_PHASE"", ""Obsolete"");

			if (lvorm == ""X"") 
			{  
				oProductComp.SetFieldValue (""Orderable"",			 ""N"");
				oProductComp.SetFieldValue (""Sales Product Flag"",	 ""N"");
				oProductComp.SetFieldValue (""Version Status"", dStatus);

			}
			else if (pstat.indexOf ('V') != -1)
			{
				oProductComp.SetFieldValue (""Orderable"",			 ""Y"");
				oProductComp.SetFieldValue (""Sales Product Flag"",	 ""Y"");
				oProductComp.SetFieldValue (""Version Status"", """" );                                                				
			}
			else
			{
				oProductComp.SetFieldValue (""Orderable"",			 ""N"");
				oProductComp.SetFieldValue (""Sales Product Flag"",	 ""N"");
				oProductComp.SetFieldValue (""Version Status"", """" );                                                				
			}
		
		   /*
			* Set Product Part Number. Choose from available languages
			*	1st Choice - Current Language
			*	2nd Choice - English
			*	3rd Choice - First listed
			*/
		   
			// Read ""MAKTM"" component 
			iComp = iMARAMComp.GetIntComp (""E2MAKTM001"");

			var partNum 	   = null;
			var partNumEnglish = null;
			var partNumFirst   = null;

			oProductComp.SetCopySource (iComp);
			
			while (iComp.NextRecord ())
			{
				var spras = iComp.GetFieldValue (""SPRAS"");
				var maktx = iComp.GetFieldValue (""MAKTX"");
		   
				if (spras == currLangCode)
				{
					partNum = maktx;
					break;	 // Found 1st choice
				}
				
				if ((spras == englishLangCode) && !partNumEnglish)
				{
					partNumEnglish = maktx;
				}

				if (!partNumFirst)
				{
					partNumFirst = maktx;
				}
			}

			if (!partNum)
			{
				if (partNumEnglish)
				{
					partNum = partNumEnglish;
				}
				else
				{
					partNum = partNumFirst;
				}
			}

			/* Set Part Number if found */
			if (partNum != """")
			{
				oProductComp.SetFieldValue (""Part #"", partNum);
			}

		   /*
			* Set Product Description. Choose from available languages
			*	1st Choice - Current Language
			*	2nd Choice - English
			*	3rd Choice - First listed
			*/

			// Read ""MAKTM"" component 
			iComp				= iMARAMComp.GetIntComp (""E2MTXHM001"");
			var descText		= null;
			var descTextEnglish = null;
			var descTextFirst	= null;

			while (iComp.NextRecord ())
			{
				if (iComp.GetFieldValue (""TDID"") == ""0001"")
				{
					// Gather this description if it fits one of our choices
					var tdspras = iComp.GetFieldValue (""TDSPRAS"");
					if (!descTextFirst || (tdspras == currLangCode) || (tdspras == englishLangCode))
					{
						var descTextCurr = """";

						iComp2 = iComp.GetIntComp (""E2MTXLM"");
						var line = 0;

						while ( iComp2.NextRecord () )
						{
						 	// Only get first four rows
							descTextCurr += iComp2.GetFieldValue (""TDLINE"") + ""\r\n"";
							line++;
							if (line == 4)
							break;
						}

						// Keep track of appropriate descriptions
						if (tdspras == currLangCode)
						{
							descText = descTextCurr;
							break;	// Found 1st choice
						}

						if ((tdspras == englishLangCode) && !descTextEnglish)
						{
							descTextEnglish = descTextCurr;
						}

						if (!descTextFirst)
						{
							descTextFirst = descTextCurr;
						}
					}
				}
			}
		  
			// Select from our preferred language choices
			if (!descText)
			{
				if (descTextEnglish)
				{
					descText = descTextEnglish;
				}
				else if (descTextFirst)
				{
					descText = descTextFirst;
				}
				else
				{
					descText = """";
				}
			}
 
			oProductComp.SetFieldValue (""Description"", descText);

            /**
             *  Map data to ""Internal Division"" Intergration Component
             */

			// Read ""MVKEM"" 
			iComp = iMARAMComp.GetIntComp( ""E2MVKEM002"" );
		
			oProductOrg    = oProductComp.CreateIntComp( ""Internal Division"", true );
            oProductPriOrg = oProductComp.CreateIntComp (""Internal Product_Organization"", false);						
			oProductOrg.SetCopySource( iComp );
 

            // If division code is not specified in SAP, it means product 
            // belongs to every sales areas with the same SalesOrg and
            // DistChannel.
			while( iComp.NextRecord() )
			{
				var OrgBusObject = TheApplication().GetBusObject(""Organizations"") ;
				var OrgBusComp   = OrgBusObject.GetBusComp(""Organization"") ;
				var SalesOrg     = iComp.GetFieldValue(""VKORG"");
				var DistChannel  = iComp.GetFieldValue(""VTWEG"");
						
				OrgBusComp.SetViewMode(3);  // All Mode
			
                // Find all Sales Area with the same SalesOrg and DistChannel in Siebel
				OrgBusComp.ClearToQuery();
 				OrgBusComp.SetSearchSpec(""Back Office Sales Organization"", SalesOrg);
 				OrgBusComp.SetSearchSpec(""Back Office Distribution Channel"", DistChannel);
				if ((DivCode != null) && (DivCode != """"))
				{
					OrgBusComp.SetSearchSpec(""Back Office Division"", DivCode);
				}
				else
				{
					OrgBusComp.ActivateField(""Back Office Division"");
				}				
			
				OrgBusComp.ExecuteQuery();
				
				var hasMoreRecords = OrgBusComp.FirstRecord();
									
				// While there are records iterate through
				while ( hasMoreRecords )
				{
					var mDivCode;
					if ((DivCode == null) || (DivCode == """"))
					{
						mDivCode = OrgBusComp.GetFieldValue(""Back Office Division"");
					}
					else
					{
					    mDivCode = DivCode;
					}
			
					oProductOrg.NewRecord();

                    // Set Sales Org, Distribution Channel, and Division Code for Siebel Internal Division
					oProductOrg.SetFieldValue(""Back Office Sales Organization"", SalesOrg); 
					oProductOrg.SetFieldValue(""Back Office Distribution Channel"", DistChannel);
					oProductOrg.SetFieldValue(""Back Office Division"", mDivCode);

                    // Mark for deletion
					if ( iComp.GetFieldValue (""LVORM"") != ""X"")
					{
						oProductOrg.SetFieldValue(""Status"", """");
						oProductOrg.SetFieldValue (""Orderable"", ""Y"");
					}
					else
					{
						oProductOrg.SetFieldValue(""Status"", ""Deletion"");
						oProductOrg.SetFieldValue(""Orderable"", ""N"");
					}

                    // Set Minimum Order Unit
					oProductOrg.CopyFieldValue(""Minimum Order Unit"", ""AUMNG"");

                    // Set Primary Plant
					oProductOrg.CopyFieldValue(""Primary Plant"", ""DWERK"");
		   
                    // Set Organization Unit of Mesaure
					var orgUomCode = iComp.GetFieldValue     (""VRKME"");

					if (orgUomCode == null && orgUomCode == """")
					{
						orgUomCode = uomCode;
					}

                    var pseUM = TheApplication().InvokeMethod (""LookupValue"", ""UNIT_OF_MEASURE"", uomLM.Translate(orgUomCode));
					oProductOrg.SetFieldValue(""Unit of Measure"", pseUM);
					
					// Set Primary Organization for Internal Product
					PrimaryOrg = OrgBusComp.GetFieldValue(""Organization Id"");
					oProductPriOrg.NewRecord();					
					oProductPriOrg.SetFieldValue( ""Organization Id"", PrimaryOrg );
					
					hasMoreRecords = OrgBusComp.NextRecord();
				}
			}
			
            // Set the Last Organization as Primary Org
	    	if ((PrimaryOrg != null) && (PrimaryOrg != """"))
			{
	 			oProductPriOrg.SetFieldValue( ""IsPrimaryMVG"", ""Y"" ); 
	 			oProductComp.SetFieldValue (""Primary Organization Id"",			 PrimaryOrg);										
	 		}			

            /**
             *  Map data to ""SAP 4x Inventory Locations"" Intergration Component
             */

			// Read ""MARCM"" component
			iComp = iMARAMComp.GetIntComp( ""E2MARCM004"" );
		
			oProductInv = oProductComp.CreateIntComp( ""SAP 4x Inventory Locations"", false);
			oProductInv.SetCopySource( iComp );
					
			while( iComp.NextRecord() )
			{
				/* This will only display a plant if the material can be sold, ie if a sales org is associated to the material */	 
				if (pstat.indexOf ('V') != -1)
				{
                    var pseInvType = TheApplication().InvokeMethod (""LookupValue"", ""FS_INVLOCTYPE_TYPE"", ""SAP Plant"");
					oProductInv.NewRecord();
					oProductInv.CopyFieldValue( ""Inventory Name"",	""WERKS"" );
					oProductInv.SetFieldValue ( ""Inventory Type"",	pseInvType );
				}
			}
		}
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2000, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 5 $
//      $Date: 09/26/00 1:19p $
//    $Author: MFasino $ of last update
//
// CREATOR:    P. Lim
//
// DESCRIPTION
//    Javascript maps from Siebel Product to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js"""
function ReceiveSAP4xMaterial_IDOCToSiebel (inputMsg, outputMsg)
{
	var app = TheApplication();
	var msg;

   /* Input Objects' Integration Components
	*   Material IDOC (Product - Receive SAP 4x Material (IDOC Input))
	*
	* Output Object's Integration Components:
	*   Product Object (Product - Receive SAP 4x Material (Siebel))
    */

   /*
	* Set up EAI Lookup maps
	*/
	var uomLM       = EAIGetValueMap (""SAP Unit of Measure"", ""Siebel Inbound"");
	var langLM      = EAIGetValueMap (""SAP Language 4x"",     ""Siebel Outbound"");
     

   /*
	* Get the SAP language codes for the current language and for English
	*/

	var currLangCode = langLM.Translate (TheApplication().InvokeMethod(""Language""));
	var englishLangCode = langLM.Translate (""ENU"");

	if (!englishLangCode)
	{
		englishLangCode = ""E"";  // Assume 'E' for English if there's no translation
	}

   /*
	* Set up EAI Input Message objects
	*/
	var iIDOCObj;   // IDOC instance
	var iIDOCComp;  // top level IDOC segment
	var iMARAMComp; // IDOC Material Header
	var iComp;      // for reading child components
	var iComp2;     // for reading child components
	var i = 0;
	var ifalse = 'false';      

   /*
	* Set up EAI Output Message objects
	*/
	var oProductObj;    // Siebel Product instance
	var oProductComp;   // Product
	var oProductOrg;    // Internal Division
    var oProductInv;    // Product Inventory Location

   /*
	* Find and create top-level integration object
	*/
	iIDOCObj    = inputMsg.GetIntObj (""Product - Receive SAP 4x Material (IDOC Input)"");
	oProductObj = outputMsg.CreateIntObj (""Product - Receive SAP 4x Material (Siebel)"");

   /*
	* Read int object instances from EAI message
	*/
	while (iIDOCObj.NextInstance ())
	{
	   /*
	    * Create ""Product"" object
		*/
	    oProductObj.NewInstance ();

       /*
		* Read virtual root component that IDOC RFC Adapter populates
		*/
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();

	   /*
		* Read ""MARAM"" component
		*/
        iMARAMComp = iIDOCComp.GetIntComp (""E2MARAM003"");
		if (iMARAMComp.NextRecord ())
		    {
			   /*
			    * Create ""Product"" component in output message
			    */
			    oProductComp = oProductObj.CreatePrimaryIntComp (""Internal Product"");
			    oProductComp.NewRecord ();
			    oProductComp.SetCopySource (iMARAMComp);

    	   	   /*
			    * Set Integration Id 
			    */
			    
			    oProductComp.CopyFieldValue (""Integration Id"",  ""MATNR"");
			    
			    var uomCode    = iMARAMComp.GetFieldValue (""MEINS"");
                var pstat      = iMARAMComp.GetFieldValue (""PSTAT"");
                var lvorm      = iMARAMComp.GetFieldValue (""LVORM"");
  
 
   oProductComp.SetFieldValue (""operation"",                         ""upsert"");             
 
    
    /*
     * If it's not marked for deletion and pstat contains a V product is orderable
     */
		        if (pstat.indexOf ('V') != -1)
		            {
                        oProductComp.SetFieldValue (""Orderable"",             ""Y"");
                        oProductComp.SetFieldValue (""Sales Product Flag"",    ""Y"");
                    }
                else
                    {
                        oProductComp.SetFieldValue (""Orderable"",             ""N"");
                        oProductComp.SetFieldValue (""Sales Product Flag"",    ""N"");
  
                    }
    /* 
     * Check if product is marked as deleted: delete the product from Siebel 
     */
			    if (lvorm == ""X"") 
		        {  
 			          oProductComp.SetFieldValue (""Orderable"",             ""N"");
                      oProductComp.SetFieldValue (""Sales Product Flag"",    ""N"");
			    }

          
               /*
		        * Set Vendor Part Number, Unit of Measure and Division Code
		        */
			    oProductComp.CopyFieldValue (""Vendor Part Number"",       ""MFRPN"");
			    oProductComp.SetFieldValue( ""Unit of Measure"",uomLM.Translate(uomCode) ); 
			    oProductComp.CopyFieldValue (""SAP Division Code"",        ""SPART"");

               /*
		        * Read ""MAKTM"" component
		        */
			    iComp = iMARAMComp.GetIntComp (""E2MAKTM001"");

               
			   /*
			    * Find part number. Choose from available languages
			    * 1st Choice - Current Language
			    * 2nd Choice - English
			    * 3rd Choice - First listed
			    */

 			    var partNum        = null;
			    var partNumEnglish = null;
			    var partNumFirst   = null;
			    var iname = null;
                oProductComp.SetCopySource (iComp);
                
			    findPartNum: while (iComp.NextRecord ())
			    {
				   var spras = iComp.GetFieldValue (""SPRAS"");
				   var maktx = iComp.GetFieldValue (""MAKTX"");
				   
                   oProductComp.CopyFieldValue (""Name"",         ""MAKTX"");
                   
		       
		            if (spras == currLangCode)
				        {
					        partNum = maktx;
					        break findPartNum;   // Found 1st choice
				        }
				    
				    if ((spras == englishLangCode) && !partNumEnglish)
				        {
					        partNumEnglish = maktx;
				        }

        			if (!partNumFirst)
				        {
					        partNumFirst = maktx;
				        }

			    }

   			    if (!partNum)
			        {
				        if (partNumEnglish)
				            {
					            partNum = partNumEnglish;
				            }
				        else
				            {
					            partNum = partNumFirst;
				            }
			        }

			    /* Set Part Number if found */
			    if (partNum != """")
			       {
				     oProductComp.SetFieldValue (""Part #"", partNum);
			       }

       /*
		* Read ""MVKEM"" component
		*/
        iComp = iMARAMComp.GetIntComp( ""E2MVKEM001"" );
	
 	    oProductOrg = oProductComp.CreateIntComp( ""Internal Division"", false );
	    oProductOrg.SetCopySource( iComp );
	    
 
	    enumOrg: while( iComp.NextRecord() )
		   {
			   if ( iComp.GetFieldValue (""LVORM"") != ""X"" )
			   {
			     oProductOrg.NewRecord();
			   
  		       oProductOrg.SetFieldValue(  ""Status"",                            "" "" );	  
  		       oProductOrg.CopyFieldValue( ""Back Office Sales Organization"",    ""VKORG"" );
			   oProductOrg.CopyFieldValue( ""Back Office Distribution Channel"",  ""VTWEG"" );
			   oProductOrg.CopyFieldValue( ""Minimum Order Unit"",                ""AUMNG"" );
			   oProductOrg.CopyFieldValue( ""Primary Plant"",                     ""DWERK"" );
			   
			    var uomCode    = iMARAMComp.GetFieldValue( ""MEINS"" );
         	    var tmpUomCode = iComp.GetFieldValue     ( ""VRKME"" );

  	           
  	           if( tmpUomCode != null && tmpUomCode != """" )
				  {
			         uomCode = tmpUomCode;
				  }

			   oProductOrg.SetFieldValue( ""Unit of Measure"",uomLM.Translate(uomCode) ); 
              }
               else
               {
                 oProductOrg.NewRecord();
                 
               oProductOrg.SetFieldValue(  ""Status"",                            ""Deletion"" );	  
               oProductOrg.CopyFieldValue( ""Back Office Sales Organization"",    ""VKORG"" );
			   oProductOrg.CopyFieldValue( ""Back Office Distribution Channel"",  ""VTWEG"" );
			   oProductOrg.CopyFieldValue( ""Minimum Order Unit"",                ""AUMNG"" );
			   oProductOrg.CopyFieldValue( ""Primary Plant"",                     ""DWERK"" );
			   oProductOrg.SetFieldValue ( ""Orderable"",                         ""N"");
               
			   		   
			    var uomCode    = iMARAMComp.GetFieldValue( ""MEINS"" );
         	    var tmpUomCode = iComp.GetFieldValue     ( ""VRKME"" );

  	           
  	           if( tmpUomCode != null && tmpUomCode != """" )
				  {
			         uomCode = tmpUomCode;
				  }

			   oProductOrg.SetFieldValue( ""Unit of Measure"",uomLM.Translate(uomCode) ); 
			   		   
			   
               }
		   }


       /*
		* Read ""MARCM"" component
		*/
        iComp = iMARAMComp.GetIntComp( ""E2MARCM003"" );
	
 	    oProductInv = oProductComp.CreateIntComp( ""FS Inventory Location"", false );
	    oProductInv.SetCopySource( iComp );
  	            
        enumInv: while( iComp.NextRecord() )
		    {
		/* This will only display a plant if the material can be sold, ie if a sales org is associated to the material */    
                if (pstat.indexOf ('V') != -1)
                    {
                   	    oProductInv.NewRecord();
					    oProductInv.CopyFieldValue( ""Inventory Name"",   ""WERKS"" );
					    oProductInv.SetFieldValue ( ""Inventory Type"",   ""SAP Plant"" );
                    }
			}
			
       /*
		* Set description. Choose from available languages
		*   1st Choice - Current Language
		*   2nd Choice - English
		*   3rd Choice - First listed
		*/
		iComp               = iMARAMComp.GetIntComp (""E2MTXHM001"");
		var descText        = null;
		var descTextEnglish = null;
		var descTextFirst   = null;

		while (iComp.NextRecord ())
		    {
			    if (iComp.GetFieldValue (""TDID"") == ""0001"")
				    {
					// Gather this description if it fits one of our choices
					var tdspras = iComp.GetFieldValue (""TDSPRAS"");
					    if (!descTextFirst || (tdspras == currLangCode) || (tdspras == englishLangCode))
					        {
						     var descTextCurr = """";
               
						     iComp2 = iComp.GetIntComp (""E2MTXLM"");
						     i = 0;
						     
						     findFirstFour: while ( iComp2.NextRecord () )
						         {
								     descTextCurr += iComp2.GetFieldValue (""TDLINE"") + ""\r\n"";
 							         // Only get first four rows
							         i++;
							             if (i == 4)
								         break findFirstFour;
						         }
               
				 		      // Keep track of appropriate descriptions
						      if (tdspras == currLangCode)
						          {
							          descText = descTextCurr;
							          break;    // Found 1st choice
						          }
						      
						      if ((tdspras == englishLangCode) && !descTextEnglish)
						          {
							          descTextEnglish = descTextCurr;
						          }
					
						      if (!descTextFirst)
						          {
							          descTextFirst = descTextCurr;
						          }

	  			           }

				    }

			 }
      
        // Select from our preferred language choices
		if (!descText)
			{
				if (descTextEnglish)
		  		    {
					    descText = descTextEnglish;
				    }
				else if (descTextFirst)
				    {
 				        descText = descTextFirst;
				    }
				else
				    {
 				        descText = """";
				    }
			}
 
		oProductComp.SetFieldValue (""Description"", descText);

  		    /*
		     * Set Order Cst Flag - NOT ON BUS COMP
		     */
		     iComp = iMARAMComp.GetIntComp (""E2MBEWM001"");

		    while (iComp.NextRecord ())
		    {
			    // oProductComp.SetCopySource  (iComp);
			    // if (iComp.GetFieldValue (""VPRSV""); == ""V"")
				// iComp.CopyFieldValue (""ORDERCST"", ""VERPR"");
				// else
				// iComp.CopyFieldValue (""ORDERCST"", ""STPRS"");
				break;
		    }


        }

    }

}
function ReceiveSAP4xMaterial_IDOCToSiebel_4x (inputMsg, outputMsg)
{

   /* Input Integration Object
	*  - Product - Receive SAP 4x Material (4x IDOC Input)
	*
	* Output Integration Object:
	*  - Product - Receive SAP 4x Material (Siebel)
	*/

	// Set up EAI Input Message objects - Read from Input IntObj
	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iMARAMComp; 	// IDOC Material Header
	var iComp;			// for iterating first level input child components
	var iComp2; 		// for iterating second level input child components

	// Set up EAI Output Message objects - Write to Output IntObj
	var oProductObj;	// Siebel Product instance
	var oProductComp;	// Internal Product
	var oProductOrg;	// Internal Division
	var oProductInv;	// SAP 4x Inventory Location 
	var oProductPriOrg  // Product Primary Organization

	// EAI Lookup maps
	var uomLM   = EAIGetValueMap (""SAP Unit of Measure"", ""Siebel Inbound"" );
	var langLM	= EAIGetValueMap (""SAP Language 4x"",     ""Siebel Outbound"");

	// Map current Siebel language code to SAP language codes 
	var englishLangCode = langLM.Translate (""ENU"");
	var currLangCode    = langLM.Translate (TheApplication().InvokeMethod(""Language""));

    // Assume 'E' for English if there's no translation
	if (!englishLangCode)
	{
		englishLangCode = ""E"";	
	}

	
	// Find and create top-level integration object
	iIDOCObj	= inputMsg.GetIntObj     (""Product - Receive SAP 4x Material (4x IDOC Input)"");
	oProductObj = outputMsg.CreateIntObj (""Product - Receive SAP 4x Material (Siebel)"");

    // Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{
		// Create ""Product"" Object
		oProductObj.NewInstance ();

		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();


		// Read ""MARAM"" component 
		iMARAMComp = iIDOCComp.GetIntComp (""E2MARAM003"");
		if (iMARAMComp.NextRecord ())
		{
            /**
             *  Map data to ""Internal Product"" Intergration Component
             */

			// Create ""Product"" component in output message
			oProductComp = oProductObj.CreatePrimaryIntComp (""Internal Product"");
			oProductComp.NewRecord ();
			oProductComp.SetCopySource (iMARAMComp);

            // Set operation method
			oProductComp.SetFieldValue (""operation"", ""sync""); 			

			// Set Integration Id 
			oProductComp.CopyFieldValue (""Integration Id"",""MATNR"");
			oProductComp.CopyFieldValue (""Name"",	      ""MATNR"");

            // Set Primary Organization.  Will be done after mapping the Internal Division
			var PrimaryOrg;
			
			// Set Vendor Part Number
			oProductComp.CopyFieldValue (""Vendor Part Number"", ""MFRPN"");

            // Set Unit of Mesaure
			var uomCode = iMARAMComp.GetFieldValue (""MEINS"");
            var pseUM   = TheApplication().InvokeMethod (""LookupValue"", ""UNIT_OF_MEASURE"", uomLM.Translate(uomCode));
			oProductComp.SetFieldValue (""Unit of Measure"", pseUM); 

            // Set Division Code
			var DivCode = iMARAMComp.GetFieldValue(""SPART"");
		  	if ((DivCode != null) && (DivCode != """"))
		  	 {
				oProductComp.SetFieldValue (""SAP Division Code"", DivCode);
			 }
			 else
			 {
			 	oProductComp.SetFieldValue (""SAP Division Code"", """");
			 }
			 
			/*
			 * Check if product is marked as deleted: 
			 *  1) Yes - Set product status as Obselete and remove the orderable and sales product flag.
			 *  2) No  - Remove the product status and check the orderable and sales product flag
			 */

            var pstat	   = iMARAMComp.GetFieldValue (""PSTAT"");
			var lvorm	   = iMARAMComp.GetFieldValue (""LVORM"");
			var dStatus    = TheApplication().InvokeMethod (""LookupValue"", ""IMPL_PHASE"", ""Obsolete"");

			if (lvorm == ""X"") 
			{  
				oProductComp.SetFieldValue (""Orderable"",			 ""N"");
				oProductComp.SetFieldValue (""Sales Product Flag"",	 ""N"");
				oProductComp.SetFieldValue (""Version Status"", dStatus);

			}
			else if (pstat.indexOf ('V') != -1)
			{
				oProductComp.SetFieldValue (""Orderable"",			 ""Y"");
				oProductComp.SetFieldValue (""Sales Product Flag"",	 ""Y"");
				oProductComp.SetFieldValue (""Version Status"", """" );                                                				
			}
			else
			{
				oProductComp.SetFieldValue (""Orderable"",			 ""N"");
				oProductComp.SetFieldValue (""Sales Product Flag"",	 ""N"");
				oProductComp.SetFieldValue (""Version Status"", """" );                                                				
			}
		
		   /*
			* Set Product Part Number. Choose from available languages
			*	1st Choice - Current Language
			*	2nd Choice - English
			*	3rd Choice - First listed
			*/
		   
			// Read ""MAKTM"" component 
			iComp = iMARAMComp.GetIntComp (""E2MAKTM001"");

			var partNum 	   = null;
			var partNumEnglish = null;
			var partNumFirst   = null;

			oProductComp.SetCopySource (iComp);
			
			while (iComp.NextRecord ())
			{
				var spras = iComp.GetFieldValue (""SPRAS"");
				var maktx = iComp.GetFieldValue (""MAKTX"");
		   
				if (spras == currLangCode)
				{
					partNum = maktx;
					break;	 // Found 1st choice
				}
				
				if ((spras == englishLangCode) && !partNumEnglish)
				{
					partNumEnglish = maktx;
				}

				if (!partNumFirst)
				{
					partNumFirst = maktx;
				}
			}

			if (!partNum)
			{
				if (partNumEnglish)
				{
					partNum = partNumEnglish;
				}
				else
				{
					partNum = partNumFirst;
				}
			}

			/* Set Part Number if found */
			if (partNum != """")
			{
				oProductComp.SetFieldValue (""Part #"", partNum);
			}

		   /*
			* Set Product Description. Choose from available languages
			*	1st Choice - Current Language
			*	2nd Choice - English
			*	3rd Choice - First listed
			*/

			// Read ""MAKTM"" component 
			iComp				= iMARAMComp.GetIntComp (""E2MTXHM001"");
			var descText		= null;
			var descTextEnglish = null;
			var descTextFirst	= null;

			while (iComp.NextRecord ())
			{
				if (iComp.GetFieldValue (""TDID"") == ""0001"")
				{
					// Gather this description if it fits one of our choices
					var tdspras = iComp.GetFieldValue (""TDSPRAS"");
					if (!descTextFirst || (tdspras == currLangCode) || (tdspras == englishLangCode))
					{
						var descTextCurr = """";

						iComp2 = iComp.GetIntComp (""E2MTXLM"");
						var line = 0;

						while ( iComp2.NextRecord () )
						{
						 	// Only get first four rows
							descTextCurr += iComp2.GetFieldValue (""TDLINE"") + ""\r\n"";
							line++;
							if (line == 4)
							break;
						}

						// Keep track of appropriate descriptions
						if (tdspras == currLangCode)
						{
							descText = descTextCurr;
							break;	// Found 1st choice
						}

						if ((tdspras == englishLangCode) && !descTextEnglish)
						{
							descTextEnglish = descTextCurr;
						}

						if (!descTextFirst)
						{
							descTextFirst = descTextCurr;
						}
					}
				}
			}
		  
			// Select from our preferred language choices
			if (!descText)
			{
				if (descTextEnglish)
				{
					descText = descTextEnglish;
				}
				else if (descTextFirst)
				{
					descText = descTextFirst;
				}
				else
				{
					descText = """";
				}
			}
 
			oProductComp.SetFieldValue (""Description"", descText);

            /**
             *  Map data to ""Internal Division"" Intergration Component
             */

			// Read ""MVKEM"" 
			iComp = iMARAMComp.GetIntComp( ""E2MVKEM001"" );
		
			oProductOrg    = oProductComp.CreateIntComp( ""Internal Division"", true );
            oProductPriOrg = oProductComp.CreateIntComp (""Internal Product_Organization"", false);						
			oProductOrg.SetCopySource( iComp );
 

            // If division code is not specified in SAP, it means product 
            // belongs to every sales areas with the same SalesOrg and
            // DistChannel.
			while( iComp.NextRecord() )
			{
				var OrgBusObject = TheApplication().GetBusObject(""Organizations"") ;
				var OrgBusComp   = OrgBusObject.GetBusComp(""Organization"") ;
				var SalesOrg     = iComp.GetFieldValue(""VKORG"");
				var DistChannel  = iComp.GetFieldValue(""VTWEG"");
						
				OrgBusComp.SetViewMode(3);  // All Mode
			
                // Find all Sales Area with the same SalesOrg and DistChannel in Siebel
				OrgBusComp.ClearToQuery();
 				OrgBusComp.SetSearchSpec(""Back Office Sales Organization"", SalesOrg);
 				OrgBusComp.SetSearchSpec(""Back Office Distribution Channel"", DistChannel);
				if ((DivCode != null) && (DivCode != """"))
				{
					OrgBusComp.SetSearchSpec(""Back Office Division"", DivCode);
				}
				else
				{
					OrgBusComp.ActivateField(""Back Office Division"");
				}				
			
				OrgBusComp.ExecuteQuery();
				
				var hasMoreRecords = OrgBusComp.FirstRecord();
									
				// While there are records iterate through
				while ( hasMoreRecords )
				{
					var mDivCode;
					if ((DivCode == null) || (DivCode == """"))
					{
						mDivCode = OrgBusComp.GetFieldValue(""Back Office Division"");
					}
					else
					{
					    mDivCode = DivCode;
					}
			
					oProductOrg.NewRecord();

                    // Set Sales Org, Distribution Channel, and Division Code for Siebel Internal Division
					oProductOrg.SetFieldValue(""Back Office Sales Organization"", SalesOrg); 
					oProductOrg.SetFieldValue(""Back Office Distribution Channel"", DistChannel);
					oProductOrg.SetFieldValue(""Back Office Division"", mDivCode);

                    // Mark for deletion
					if ( iComp.GetFieldValue (""LVORM"") != ""X"")
					{
						oProductOrg.SetFieldValue(""Status"", """");
						oProductOrg.SetFieldValue (""Orderable"", ""Y"");
					}
					else
					{
						oProductOrg.SetFieldValue(""Status"", ""Deletion"");
						oProductOrg.SetFieldValue(""Orderable"", ""N"");
					}

                    // Set Minimum Order Unit
					oProductOrg.CopyFieldValue(""Minimum Order Unit"", ""AUMNG"");

                    // Set Primary Plant
					oProductOrg.CopyFieldValue(""Primary Plant"", ""DWERK"");
		   
                    // Set Organization Unit of Mesaure
					var orgUomCode = iComp.GetFieldValue     (""VRKME"");

					if (orgUomCode == null && orgUomCode == """")
					{
						orgUomCode = uomCode;
					}

                    var pseUM = TheApplication().InvokeMethod (""LookupValue"", ""UNIT_OF_MEASURE"", uomLM.Translate(orgUomCode));
					oProductOrg.SetFieldValue(""Unit of Measure"", pseUM);
					
					// Set Primary Organization for Internal Product
					PrimaryOrg = OrgBusComp.GetFieldValue(""Organization Id"");
					oProductPriOrg.NewRecord();					
					oProductPriOrg.SetFieldValue( ""Organization Id"", PrimaryOrg );
					
					hasMoreRecords = OrgBusComp.NextRecord();
				}
			}
			
            // Set the Last Organization as Primary Org
	    	if ((PrimaryOrg != null) && (PrimaryOrg != """"))
			{
	 			oProductPriOrg.SetFieldValue( ""IsPrimaryMVG"", ""Y"" );											
	 		}			

            /**
             *  Map data to ""SAP 4x Inventory Locations"" Intergration Component
             */

			// Read ""MARCM"" component
			iComp = iMARAMComp.GetIntComp( ""E2MARCM003"" );
		
			oProductInv = oProductComp.CreateIntComp( ""SAP 4x Inventory Locations"", false);
			oProductInv.SetCopySource( iComp );
					
			while( iComp.NextRecord() )
			{
				/* This will only display a plant if the material can be sold, ie if a sales org is associated to the material */	 
				if (pstat.indexOf ('V') != -1)
				{
                    var pseInvType = TheApplication().InvokeMethod (""LookupValue"", ""FS_INVLOCTYPE_TYPE"", ""SAP Plant"");
					oProductInv.NewRecord();
					oProductInv.CopyFieldValue( ""Inventory Name"",	""WERKS"" );
					oProductInv.SetFieldValue ( ""Inventory Type"",	pseInvType );
				}
			}
		}
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 4 $
//      $Date: 12/10/99 10:29a $
//    $Author: Achaudhr $ of last update
//
// CREATOR:    P. Lim
//
// DESCRIPTION
//    Javascript maps from Siebel Product to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
"
function ReceiveSAPMaterial_IDOCToSiebel (inputMsg, outputMsg)
{
   var app = TheApplication();
   var msg;

   /* Input Objects' Integration Components
    *   Material IDOC (Product - Receive SAP Material (IDOC Input))
    *     E2MARAM
    *       E2MAKTM (part number)
    *       E2MBEWM (order cst flag, orderable flag)
    *       E2MTXHM 
    *         E2MTXLM (description)
    *       E2MVKEM (units of measure)
    *
    * Output Object's Integration Components:
    *   Product Object (Product - Receive SAP Material (Siebel))
    *     Product (oProduct)
    */

   /*
    * Set up EAI Lookup maps
    */
   var uomLM       = EAIGetValueMap (""SAP Unit of Measure"", ""Siebel Inbound"");
   var langLM      = EAIGetValueMap (""SAP Language"", ""Siebel Outbound"");

   /*
    * Get the SAP language codes for the current language and for English
    */

   var currLangCode = langLM.Translate (TheApplication().InvokeMethod(""Language""));
   var englishLangCode = langLM.Translate (""ENU"");
   if (!englishLangCode)
   {
      englishLangCode = ""E"";  // Assume 'E' for English if there's no translation
   }

   /*
    * Set up EAI Input Message objects
    */
   var iIDOCObj;   // IDOC instance
   var iIDOCComp;  // top level IDOC segment
   var iMARAMComp; // IDOC Material Header
   var iComp;      // for reading child components
   var iComp2;     // for reading child components
   var i = 0;

   /*
    * Set up EAI Output Message objects
    */
   var oProductObj;    // Siebel Product instance
   var oProductComp;   // Product

   /*
    * Find and create top-level integration object
    */
   iIDOCObj = inputMsg.GetIntObj (""Product - Receive SAP Material (IDOC Input)"");
   oProductObj = outputMsg.CreateIntObj (""Product - Receive SAP Material (Siebel)"");

   /*
    * Read int object instances from EAI message
    */
   while (iIDOCObj.NextInstance ())
   {
      /*
       * Create ""Product"" object
       */
      oProductObj.NewInstance ();

      /*
       * Read virtual root component that IDOC RFC Adapter populates
       */
      iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
      iIDOCComp.NextRecord ();

      /*
       * Read ""MARAM"" component
       */
      iMARAMComp = iIDOCComp.GetIntComp (""E2MARAM"");
      if (iMARAMComp.NextRecord ())
      {
         /*
          * Create ""Product"" component in output message
          */
         oProductComp = oProductObj.CreatePrimaryIntComp (""Product"");
         oProductComp.NewRecord ();
         oProductComp.SetCopySource (iMARAMComp);

         /*
          * Set Integration Id and Name
          */
         oProductComp.CopyFieldValue (""Name"",           ""MATNR"");
         oProductComp.CopyFieldValue (""Integration Id"", ""MATNR"");

         // msg = ""matnr: "" + iMARAMComp.GetFieldValue (""MATNR"");
         // app.MsgBox(msg);

         /* Check if product is marked as deleted */
         /* P Lim. 3/16/00. Deletes not supported in this release. 
            Next release: Add a column to show that the item is marked for deletion. */
         // if (iMARAMComp.GetFieldValue (""LVORM"") == ""X"")
         // {  /* The product is marked as deleted: delete the product from Siebel */
         //    oProductComp.SetFieldValue (""operation"", ""delete"");
         //   continue;
         // }

         // Set operation to ""upsert"" since we are using the ""Execute"" method.
         oProductComp.SetFieldValue (""operation"", ""upsert"");

         // Defaults to 'N' in buscomp
         // oProductComp.CopyFieldValue (""Position Bill Product Flag"", ""N"");
         // oProductComp.CopyFieldValue (""Compensatable"", ""Y"");
         // Defaults to 'Y' in buscomp
         // oProductComp.CopyFieldValue (""Sales Product Flag"", ""Y"");
         // Defaults to 'N' in buscomp
         // oProductComp.CopyFieldValue (""Sales Service Flag"", ""N"");

         /*
          * Find Orderable Flag
          */
         var pstat = iMARAMComp.GetFieldValue (""PSTAT"");
         // If pstat has a 'V', then material is orderable
         if (pstat.indexOf ('V') != -1)
            oProductComp.SetFieldValue (""Orderable"", ""Y"");
         else
            oProductComp.SetFieldValue (""Orderable"", ""N"");

         /*
          * Find part number. Choose from available languages
          *   1st Choice - Current Language
          *   2nd Choice - English
          *   3rd Choice - First listed
          */
         iComp = iMARAMComp.GetIntComp (""E2MAKTM"");
         var partNum = null;
         var partNumEnglish = null;
         var partNumFirst = null;
         while (iComp.NextRecord ())
         {
            var spras = iComp.GetFieldValue (""SPRAS"");
            var maktx = iComp.GetFieldValue (""MAKTX"");

            if (spras == currLangCode)
            {
               partNum = maktx;
               break;   // Found 1st choice
            }
            if ((spras == englishLangCode) && !partNumEnglish)
            {
               partNumEnglish = maktx;
            }
            if (!partNumFirst)
            {
               partNumFirst = maktx;
            }
         }

         if (!partNum)
         {
            if (partNumEnglish)
            {
               partNum = partNumEnglish;
            }
            else
            {
               partNum = partNumFirst;
            }
         }

         /* Set Part Number if found */
         if (partNum != null)
         {
            oProductComp.SetFieldValue (""Part #"", partNum);
            // PLim 2/19/00. Part # is not required in Siebel Product.
            // else EAIRaiseError (""Unable to find part number for material '"" + iMARAMComp.GetFieldValue (""MATNR"") + ""'."");
         }

         /*
          * Find Unit of Measure
          */
         iComp = iMARAMComp.GetIntComp (""E2MVKEM"");
         var uomCode = null;

         // If no sales area specific unit of measure, use the material base unit of measure
         uomCode = iMARAMComp.GetFieldValue (""MEINS"");

         // Find sales area specific unit of measure (if any)
         while (iComp.NextRecord ())
         {
            if (iComp.GetFieldValue (""VKORG"") == ""0010"" && iComp.GetFieldValue (""VTWEG"") == ""10"")
            {
               if (iComp.GetFieldValue (""LVORM"") == ""X"")
               {  /* the sales area specific info is marked as deleted: set values to empty string */
                  /* uomCode defaults to base unit of measure. */
                  /* NOTE: in the multiorg maps, should delete the product-org intersection row */
                  oProductComp.SetFieldValue (""Minimum Quantity"", """");
               }
               else
               {
                  var tmpUomCode = iComp.GetFieldValue (""VRKME"");
                  if (tmpUomCode != null && tmpUomCode != """")
                  {
                     uomCode = tmpUomCode;
                  }
                  oProductComp.SetCopySource  (iComp);
                  oProductComp.CopyFieldValue (""Minimum Quantity"", ""AUMNG"");
               }

               break;
            }
         }

         // msg = ""uomCode: "" + uomCode;
         // app.MsgBox(msg);
         oProductComp.SetFieldValue (""Unit of Measure"", uomLM.Translate (uomCode));

         /*
          * Set description. Choose from available languages
          *   1st Choice - Current Language
          *   2nd Choice - English
          *   3rd Choice - First listed
          */
         iComp        = iMARAMComp.GetIntComp (""E2MTXHM"");
         var descText = null;
         var descTextEnglish = null;
         var descTextFirst = null;

         while (iComp.NextRecord ())
         {
            if (iComp.GetFieldValue (""TDID"") == ""0001"")
            {
               // Gather this description if it fits one of our choices
               var tdspras = iComp.GetFieldValue (""TDSPRAS"");
               if (!descTextFirst || (tdspras == currLangCode) || (tdspras == englishLangCode))
               {
                  var descTextCurr = """";
                  
                  iComp2 = iComp.GetIntComp (""E2MTXLM"");
                  i = 0;
                  while (iComp2.NextRecord ())
                  {
                     // msg = ""TDLINE: "" + iComp2.GetFieldValue (""TDLINE"");
                     // app.MsgBox(msg);

                     descTextCurr += iComp2.GetFieldValue (""TDLINE"") + ""\r\n"";

                     // Only get first four rows
                     i++;
                     if (i == 4)
                        break;
                  }
                  
                  // Keep track of appropriate descriptions
                  if (tdspras == currLangCode)
                  {
                     descText = descTextCurr;
                     break;    // Found 1st choice
                  }
                  if ((tdspras == englishLangCode) && !descTextEnglish)
                  {
                     descTextEnglish = descTextCurr;
                  }
                  if (!descTextFirst)
                  {
                     descTextFirst = descTextCurr;
                  }
               }
            }
         }
         
         // Select from our preferred language choices
         if (!descText)
         {
            if (descTextEnglish)
            {
               descText = descTextEnglish;
            }
            else if (descTextFirst)
            {
               descText = descTextFirst;
            }
            else
            {
               descText = """";
            }
         }

         // msg = ""descText: "" + descText;
         // app.MsgBox(msg);

         // Note: DTE Automatic string trimming assumed for the Description field.

         oProductComp.SetFieldValue (""Description"", descText);

         /*
          * Set Order Cst Flag
          */
         iComp = iMARAMComp.GetIntComp (""E2MBEWM"");
         while (iComp.NextRecord ())
         {
            // msg = ""VPRSV: "" + iComp.GetFieldValue (""VPRSV"");
            // app.MsgBox(msg);

            /* PLIM: NOT EXPOSED ON BUSCOMP!!! */
            // oProductComp.SetCopySource  (iComp);
            // if (iComp.GetFieldValue (""VPRSV""); == ""V"")
            //   iComp.CopyFieldValue (""ORDERCST"", ""VERPR"");
            // else
            //   iComp.CopyFieldValue (""ORDERCST"", ""STPRS"");

            /* only get first row */
            break;
         }
      }
   }
}
"
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 4 $
//      $Date: 12/10/99 10:29a $
//    $Author: Achaudhr $ of last update
//
// CREATOR:    R.Lankinen
//
// DESCRIPTION
//    Multi-organization Javascript maps from Siebel Product to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
"
function ReceiveSAPMaterial_IDOCToSiebel (inputMsg, outputMsg)
{
	/* Input Objects' Integration Components
	*   Material IDOC (Product - Receive SAP Material (IDOC Input))
	*     E2MARAM
	*       E2MAKTM (part number)
	*       E2MBEWM (order cst flag, orderable flag)
	*       E2MTXHM 
	*         E2MTXLM (description)
	*       E2MVKEM (units of measure)
	*
	* Output Object's Integration Components:
	*   Product Object (Product - Receive SAP Material (MO))
	*     Product (oProduct)
	*/

	/*
	* Set up EAI Lookup maps
	*/
	var uomLM       = EAIGetValueMap (""SAP Unit of Measure"", ""Siebel Inbound"");
	var langLM      = EAIGetValueMap (""SAP Language"", ""Siebel Outbound"");

	/*
	* Get the SAP language codes for the current language and for English
	*/

	var currLangCode = langLM.Translate (TheApplication().InvokeMethod(""Language""));
	var englishLangCode = langLM.Translate (""ENU"");
	if (!englishLangCode)
	{
		englishLangCode = ""E"";  // Assume 'E' for English if there's no translation
	}

	/*
	* Set up EAI Input Message objects
	*/
	var iIDOCObj;   // IDOC instance
	var iIDOCComp;  // top level IDOC segment
	var iMARAMComp; // IDOC Material Header
	var iComp;      // for reading child components
	var iComp2;     // for reading child components
	var i = 0;

	/*
	* Set up EAI Output Message objects
	*/
	var oProductObj;    // Siebel Product instance
	var oProductComp;   // Product
	var oProductOrg;    // Product Organization

	/*
	* Find and create top-level integration object
	*/
	iIDOCObj = inputMsg.GetIntObj (""Product - Receive SAP Material (IDOC Input)"");
	oProductObj = outputMsg.CreateIntObj (""Product - Receive SAP Material (MO)"");

	/*
	* Read int object instances from EAI message
	*/
	enumObj: while (iIDOCObj.NextInstance ())
	{
		/*
		* Create ""Product"" object
		*/
		oProductObj.NewInstance ();

		/*
		* Read virtual root component that IDOC RFC Adapter populates
		*/
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();

		/*
		* Read ""MARAM"" component
		*/
		iMARAMComp = iIDOCComp.GetIntComp (""E2MARAM"");
		if (iMARAMComp.NextRecord ())
		{
			/*
			* Create ""Product"" component in output message
			*/
			oProductComp = oProductObj.CreatePrimaryIntComp (""Product"");
			oProductComp.NewRecord ();
			oProductComp.SetCopySource (iMARAMComp);

			/*
			* Set Integration Id and Name
			*/
			oProductComp.CopyFieldValue (""Name"",           ""MATNR"");
			oProductComp.CopyFieldValue (""Integration Id"", ""MATNR"");

			// Division code:
			oProductComp.CopyFieldValue( ""SAP Division Code"",""SPART"" );

			/* Check if product is marked as deleted */
			/* P Lim. 3/16/00. Deletes not supported in this release. 
				Next release: Add a column to show that the item is marked for deletion. */
			if (iMARAMComp.GetFieldValue (""LVORM"") == ""X"")
			{  /* The product is marked as deleted: delete the product from Siebel */
				oProductComp.SetFieldValue (""operation"", ""delete"");
				continue enumObj;
			}

			// Set operation to ""upsert"" since we are using the ""Execute"" method.
			oProductComp.SetFieldValue (""operation"", ""upsert"");

			// Defaults to 'N' in buscomp
			// oProductComp.CopyFieldValue (""Position Bill Product Flag"", ""N"");
			// oProductComp.CopyFieldValue (""Compensatable"", ""Y"");
			// Defaults to 'Y' in buscomp
			// oProductComp.CopyFieldValue (""Sales Product Flag"", ""Y"");
			// Defaults to 'N' in buscomp
			// oProductComp.CopyFieldValue (""Sales Service Flag"", ""N"");

			/*
			* Find Orderable Flag
			*/
			var pstat = iMARAMComp.GetFieldValue (""PSTAT"");
			// If pstat has a 'V', then material is orderable
			if (pstat.indexOf ('V') != -1)
				oProductComp.SetFieldValue (""Orderable"", ""Y"");
			else
				oProductComp.SetFieldValue (""Orderable"", ""N"");

			/*
			* Find part number. Choose from available languages
			*   1st Choice - Current Language
			*   2nd Choice - English
			*   3rd Choice - First listed
			*/
			iComp = iMARAMComp.GetIntComp (""E2MAKTM"");
			var partNum = null;
			var partNumEnglish = null;
			var partNumFirst = null;
			findPartNum: while (iComp.NextRecord ())
			{
				var spras = iComp.GetFieldValue (""SPRAS"");
				var maktx = iComp.GetFieldValue (""MAKTX"");

				if (spras == currLangCode)
				{
					partNum = maktx;
					break findPartNum;   // Found 1st choice
				}
				if ((spras == englishLangCode) && !partNumEnglish)
				{
					partNumEnglish = maktx;
				}
				if (!partNumFirst)
				{
					partNumFirst = maktx;
				}
			}

			if (!partNum)
			{
				if (partNumEnglish)
				{
					partNum = partNumEnglish;
				}
				else
				{
					partNum = partNumFirst;
				}
			}

			/* Set Part Number if found */
			if (partNum != null)
			{
				oProductComp.SetFieldValue (""Part #"", partNum);
				// PLim 2/19/00. Part # is not required in Siebel Product.
				// else EAIRaiseError (""Unable to find part number for material '"" + iMARAMComp.GetFieldValue (""MATNR"") + ""'."");
			}

			// #####################################

			iComp = iMARAMComp.GetIntComp( ""E2MVKEM"" );
	      oProductOrg = oProductComp.CreateIntComp( ""Product_Organization"",oProductComp );
			oProductOrg.SetCopySource( iComp );

			enumOrg: while( iComp.NextRecord() )
			{
				if( iComp.GetFieldValue(""LVORM"") != ""X"" )
				{
					oProductOrg.NewRecord();

					/*
					* Process Sub-Organization info
					*/
					oProductOrg.CopyFieldValue( ""Back Office Sales Organization"",""VKORG"" );
					oProductOrg.CopyFieldValue( ""Back Office Distribution Channel"",""VTWEG"" );
					oProductOrg.CopyFieldValue( ""Back Office Min Order Units"",""AUMNG"" );

					var uomCode = iMARAMComp.GetFieldValue( ""MEINS"" );
					var tmpUomCode = iComp.GetFieldValue( ""VRKME"" );

					if( tmpUomCode != null && tmpUomCode != """" )
					{
						uomCode = tmpUomCode;
					}

					oProductOrg.SetFieldValue( ""Back Office Unit of Measure"",uomLM.Translate(uomCode) );
				}
			}

			// #####################################

			/*
			* Set description. Choose from available languages
			*   1st Choice - Current Language
			*   2nd Choice - English
			*   3rd Choice - First listed
			*/
			iComp        = iMARAMComp.GetIntComp (""E2MTXHM"");
			var descText = null;
			var descTextEnglish = null;
			var descTextFirst = null;

			while (iComp.NextRecord ())
			{
				if (iComp.GetFieldValue (""TDID"") == ""0001"")
				{
					// Gather this description if it fits one of our choices
					var tdspras = iComp.GetFieldValue (""TDSPRAS"");
					if (!descTextFirst || (tdspras == currLangCode) || (tdspras == englishLangCode))
					{
						var descTextCurr = """";
               
						iComp2 = iComp.GetIntComp (""E2MTXLM"");
						i = 0;
						findFirstFour: while (iComp2.NextRecord ())
						{
							descTextCurr += iComp2.GetFieldValue (""TDLINE"") + ""\r\n"";

							// Only get first four rows
							i++;
							if (i == 4)
								break findFirstFour;
						}
               
						// Keep track of appropriate descriptions
						if (tdspras == currLangCode)
						{
							descText = descTextCurr;
							break;    // Found 1st choice
						}
						if ((tdspras == englishLangCode) && !descTextEnglish)
						{
							descTextEnglish = descTextCurr;
						}
						if (!descTextFirst)
						{
							descTextFirst = descTextCurr;
						}
					}
				}
			}
      
			// Select from our preferred language choices
			if (!descText)
			{
				if (descTextEnglish)
				{
					descText = descTextEnglish;
				}
				else if (descTextFirst)
				{
					descText = descTextFirst;
				}
				else
				{
					descText = """";
				}
			}

			// Note: DTE Automatic string trimming assumed for the Description field.

			oProductComp.SetFieldValue (""Description"", descText);

			/*
			* Set Order Cst Flag
			*/
			iComp = iMARAMComp.GetIntComp (""E2MBEWM"");
			while (iComp.NextRecord ())
			{
				/* PLIM: NOT EXPOSED ON BUSCOMP!!! */
				// oProductComp.SetCopySource  (iComp);
				// if (iComp.GetFieldValue (""VPRSV""); == ""V"")
				//   iComp.CopyFieldValue (""ORDERCST"", ""VERPR"");
				// else
				//   iComp.CopyFieldValue (""ORDERCST"", ""STPRS"");

				/* only get first row */
				break;
			}
		}
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var result = EAIExecuteMap (MethodName, Inputs, Outputs);

	return result;
}
"
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// DESCRIPTION
//    Javascript maps to Siebel Product from Oracle Item
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyIntegrationObjectData (OracleIntObject, SiebelIntObject)
{
	// Declare variables to hold the Oracle Primary Integration Component and
	// The Siebel Primary Integration Component
	var OracleItemIntComp, SiebelProductIntComp;

	var SiebelInternalDivision, SiebelInventoryLocation ;
	var OrclProdInvLocComp, OrclProdOrgComp;
	
	// Open the EAI Value Map for Products here.
	var ProductEAILookup =EAIGetValueMap (""Oracle Unit of Measure"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);


	//Get the primary integration component from the Oracle Integration Object
	OracleItemIntComp = OracleIntObject.GetPrimaryIntComp (""SIE_PRODUCT_V"");

	if (OracleItemIntComp.Exists ())
	{
		// INTERNAL PRODUCT

		SiebelProductIntComp = SiebelIntObject.CreatePrimaryIntComp (""Internal Product_Oracle"");
		

		while (OracleItemIntComp.NextRecord ())
		{
			 
			 
				SiebelProductIntComp.NewRecord ();
				SiebelProductIntComp.SetCopySource (OracleItemIntComp);
				
				SiebelProductIntComp.SetFieldValue (""operation"", ""synchronize"");
				SiebelProductIntComp.CopyFieldValue (""Description"",""DESCRIPTION"");
				SiebelProductIntComp.CopyFieldValue (""Orderable"", ""CUSTOMER_ORDER_ENABLED_FLAG"");
				SiebelProductIntComp.CopyFieldValue (""Sales Product Flag"", ""CUSTOMER_ORDER_FLAG"");
				SiebelProductIntComp.CopyFieldValue (""Sales Service Flag"", ""SERVICE_ITEM_FLAG"");
				SiebelProductIntComp.CopyFieldValue (""Integration Id"", ""INVENTORY_ITEM_ID"");
				SiebelProductIntComp.CopyFieldValue (""Orderable"", ""CUSTOMER_ORDER_ENABLED_FLAG"");
				
				TransformItemSegment(SiebelProductIntComp, OracleItemIntComp);
			    
				SiebelProductIntComp.SetFieldValue (""Unit of Measure"",
					ProductEAILookup.Translate (OracleItemIntComp.GetFieldValue (""PRIMARY_UOM_CODE"")));


		 


			// INTERNAL DIVISION
			
			OrclProdOrgComp = OracleItemIntComp.GetIntComp (""SIE_PROD_ORG_V"");
			
			// Create the Siebel child integration component.
			SiebelInternalDivision = SiebelProductIntComp.CreateIntComp(""Internal Product_Oracle_Organization"", true);
			
			while (OrclProdOrgComp.NextRecord ())
			{
				// Copy all the required fields for the Siebel Child integration component
				 
			 
					SiebelInternalDivision.NewRecord();
					SiebelInternalDivision.SetCopySource(OrclProdOrgComp);
	
					SiebelInternalDivision.SetFieldValue (""operation"", ""synchronize"");
					SiebelInternalDivision.CopyFieldValue (""Back Office Inventory Organization"", ""OPERATING_UNIT"");
					
					// To Set the Primary org for the Item
					var PriItemOrg = OracleItemIntComp.GetFieldValue(""OPERATING_UNIT"");
					var ItemOrg    = OrclProdOrgComp.GetFieldValue(""OPERATING_UNIT"");
					if (PriItemOrg == ItemOrg)
						SiebelInternalDivision.SetFieldValue (""IsPrimaryMVG"",""Y"");
				 
			} // while (OrclProdInvLocComp.NextRecord ())
						
			
			// FS INVENTORY LOCATION
			
			OrclProdInvLocComp = OracleItemIntComp.GetIntComp (""SIE_PROD_INVLOC_V"");
			
			// Create the Siebel child integration component.
			SiebelInventoryLocation = SiebelProductIntComp.CreateIntComp(""FS Inventory Location"", true);
			
			while (OrclProdInvLocComp.NextRecord ())
			{
				// Copy all the required fields for the Siebel Child integration component
				 
			 
					SiebelInventoryLocation.NewRecord();
					SiebelInventoryLocation.SetCopySource(OrclProdInvLocComp);
					
				    SiebelInventoryLocation.SetFieldValue (""operation"", ""synchronize"");
					SiebelInventoryLocation.CopyFieldValue(""Integration Id"", ""ORGANIZATION_ID"");
				 
	
			} // while (OrclProdInvLocComp.NextRecord ())
			
		} // while (OracleItemIntComp.NextRecord ())
	}
	else
	{
		EAIRaiseError(TranslateMessage(
			""ORA_MSG_MISSING_COMPONENT,SIE_PRODUCT_V,Product  - Get Oracle Item (Oracle)""));
	}
}
function GetPrimaryOrg (OracleItemIntComp,SiebelProductIntComp)
{

	var OpUnitId, OrgIdExists, OrgIdValue;
	// variable to hold the business object
	var OrgBusObject = TheApplication().GetBusObject(""Internal Division"") ;

	// Get the business component from the business object
	var OrgBusComp = OrgBusObject.GetBusComp(""Internal Division"") ;
	OrgBusComp.ActivateField(""Id"");
	OpUnitId = OracleItemIntComp.GetFieldValue(""OPERATING_UNIT"");

	if((OpUnitId != """") && (OpUnitId != null))
	{
		OrgBusComp.SetViewMode(3);
		OrgBusComp.ClearToQuery() ;
		OrgBusComp.SetSearchSpec(""Integration Id"", OpUnitId) ;

		OrgBusComp.ExecuteQuery() ;
		OrgIdExists = OrgBusComp.FirstRecord();

		if (OrgIdExists)
		{
			OrgIdValue = OrgBusComp.GetFieldValue(""Id"") ;
			SiebelProductIntComp.SetFieldValue (""Primary Organization Id"", OrgIdValue);
		}
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"/*
* The arguments to this function will be the Siebel primary integration component
* and the Oracle primary Integration Component.
*
*/

function TransformItemSegment(SiebelProductIntComp, OracleItemIntComp)
{
	//
	// Declare variables to hold the values of segments 1-20
	//

	// Declare an array to hold the segments.
	// Declare a variable to hold the delimiters

	var segment, SegmentTotal="""";
	var Delimiter = ""."";

	//
	// Add all the variables together into one variable called SegmentTotal
	//

	for(var i = 1; i <= 20; i++)
	{
		segment = OracleItemIntComp.GetFieldValue (""SEGMENT""+i);
		if(segment.length > 0)
		{
			if(SegmentTotal.length > 100)
				break;
			SegmentTotal += segment + Delimiter;
		}
	}
	if(SegmentTotal.length > 100)
		SegmentTotal = SegmentTotal.substring(0, 100);

	/*if(SegmentTotal.slice(-1,0) == Delimiter)*/
	/*if((SegmentTotal.substring(((SegmentTotal.length)-1),1)) == Delimiter)*/
	if(SegmentTotal.length == 100) or (SegmentTotal.length < 100)
    	SegmentTotal = SegmentTotal.slice(0,-1);

	// Insert the Segment total into the Siebel primary integration component
	SiebelProductIntComp.SetFieldValue (""Name"", SegmentTotal);
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function UpsertSiebelProduct (InputMsg, OutputMsg)
{
	//
	// Declare a variable to hold the Siebel Integration Object.
	//
	var SiebelIntObject;

	//
	// Declare a variable to hold the Oracle Integration Object
	//
	var OracleIntObject;

	//
	// Get the Oracle Integration Object from the Input message
	//
	OracleIntObject = InputMsg.GetIntObj(""Product - Get Oracle Item (Oracle)"");

	//
	// Check the validity of the Oracle Integration Object.
	//
	if (OracleIntObject.Exists ())
	{
		//
		// Create a new Siebel Integration Object on the Output Message.
		//
		SiebelIntObject = OutputMsg.CreateIntObj (""Product - Get Oracle Item (Siebel)"");

		//
		// Navigate through all the available instances in the Integration Object
		//
		while (OracleIntObject.NextInstance ())
		{
			//
			// Create a new instance in the Oracle Integration Object
			//
			SiebelIntObject.NewInstance ();

			//
			// CopyFields is a user defined function which is written to copy all
			// the fields from the source to the target.
			//
			CopyIntegrationObjectData (OracleIntObject, SiebelIntObject);
		}
	}
}  ///~ End of CreateSiebelProduct function."
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// DESCRIPTION
//    Javascript maps to Siebel Product from Oracle Item
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyIntegrationObjectData (OracleIntObject, SiebelIntObject)
{
	// Declare variables to hold the Oracle Primary Integration Component and
	// The Siebel Primary Integration Component
	var OracleItemIntComp, SiebelProductIntComp;

	var SiebelInternalDivision, SiebelInventoryLocation ;
	var OrclProdInvLocComp, OrclProdOrgComp;
	
	// Open the EAI Value Map for Products here.
	var ProductEAILookup =EAIGetValueMap (""Oracle11i Unit of Measure"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);


	//Get the primary integration component from the Oracle Integration Object
	OracleItemIntComp = OracleIntObject.GetPrimaryIntComp (""SIE_PRODUCT_V"");

	if (OracleItemIntComp.Exists ())
	{
		// INTERNAL PRODUCT

		SiebelProductIntComp = SiebelIntObject.CreatePrimaryIntComp (""Internal Product - ISS Admin"");
		

		while (OracleItemIntComp.NextRecord ())
		{
			 
			 
				SiebelProductIntComp.NewRecord ();
				SiebelProductIntComp.SetCopySource (OracleItemIntComp);
				
				SiebelProductIntComp.SetFieldValue (""operation"", ""synchronize"");
				SiebelProductIntComp.CopyFieldValue (""Description"",""DESCRIPTION"");
				SiebelProductIntComp.CopyFieldValue (""Orderable"", ""CUSTOMER_ORDER_ENABLED_FLAG"");
				SiebelProductIntComp.CopyFieldValue (""Sales Product Flag"", ""CUSTOMER_ORDER_FLAG"");
				SiebelProductIntComp.CopyFieldValue (""Sales Service Flag"", ""SERVICE_ITEM_FLAG"");
				SiebelProductIntComp.CopyFieldValue (""Integration Id"", ""INVENTORY_ITEM_ID"");
				SiebelProductIntComp.CopyFieldValue (""Orderable"", ""CUSTOMER_ORDER_ENABLED_FLAG"");
				
				TransformItemSegment(SiebelProductIntComp, OracleItemIntComp);
			    
				var OrclUOM = OracleItemIntComp.GetFieldValue (""PRIMARY_UOM_CODE"");
				SiebelProductIntComp.SetFieldValue (""Unit of Measure"",
					ProductEAILookup.Translate ((OrclUOM.toUpperCase())));
			 


			// INTERNAL DIVISION
			
			OrclProdOrgComp = OracleItemIntComp.GetIntComp (""SIE_PROD_ORG_V"");
			
			// Create the Siebel child integration component.
			SiebelInternalDivision = SiebelProductIntComp.CreateIntComp(""Internal Product - ISS Admin_Organization"");
			
			while (OrclProdOrgComp.NextRecord ())
			{
				// Copy all the required fields for the Siebel Child integration component
				 
				 
					SiebelInternalDivision.NewRecord();
					SiebelInternalDivision.SetCopySource(OrclProdOrgComp);
	
					SiebelInternalDivision.SetFieldValue (""operation"", ""synchronize"");
					// SiebelInternalDivision.CopyFieldValue (""Back Office Inventory Organization"", ""OPERATING_UNIT"");
					SiebelInternalDivision.CopyFieldValue (""Integration Id"", ""OPERATING_UNIT"");
					
					// To Set the Primary org for the Item
					var PriItemOrg = OracleItemIntComp.GetFieldValue(""OPERATING_UNIT"");
					var ItemOrg    = OrclProdOrgComp.GetFieldValue(""OPERATING_UNIT"");
					if (PriItemOrg == ItemOrg)
						SiebelInternalDivision.SetFieldValue (""IsPrimaryMVG"",""Y"");
			 
			} // while (OrclProdInvLocComp.NextRecord ())
						
			
			// FS INVENTORY LOCATION
			
			OrclProdInvLocComp = OracleItemIntComp.GetIntComp (""SIE_PROD_INVLOC_V"");
			
			// Create the Siebel child integration component.
			SiebelInventoryLocation = SiebelProductIntComp.CreateIntComp(""FS Inventory Location"");
			
			while (OrclProdInvLocComp.NextRecord ())
			{
				// Copy all the required fields for the Siebel Child integration component
				 
					SiebelInventoryLocation.NewRecord();
					SiebelInventoryLocation.SetCopySource(OrclProdInvLocComp);
					
					SiebelInventoryLocation.SetFieldValue (""operation"", ""synchronize"");
					SiebelInventoryLocation.CopyFieldValue(""Integration Id"", ""ORGANIZATION_ID"");
				 
					
			} // while (OrclProdInvLocComp.NextRecord ())
			
		} // while (OracleItemIntComp.NextRecord ())
	}
	else
	{
		EAIRaiseError(TranslateMessage(
			""ORA_MSG_MISSING_COMPONENT,SIE_PRODUCT_V,Product  - Get Oracle Item (Oracle)""));
	}
}
function GetPrimaryOrg (OracleItemIntComp,SiebelProductIntComp)
{

	var OpUnitId, OrgIdExists, OrgIdValue;
	// variable to hold the business object
	var OrgBusObject = TheApplication().GetBusObject(""Internal Division"") ;

	// Get the business component from the business object
	var OrgBusComp = OrgBusObject.GetBusComp(""Internal Division"") ;
	OrgBusComp.ActivateField(""Id"");
	OpUnitId = OracleItemIntComp.GetFieldValue(""OPERATING_UNIT"");

	if((OpUnitId != """") && (OpUnitId != null))
	{
		OrgBusComp.SetViewMode(3);
		OrgBusComp.ClearToQuery() ;
		OrgBusComp.SetSearchSpec(""Integration Id"", OpUnitId) ;

		OrgBusComp.ExecuteQuery() ;
		OrgIdExists = OrgBusComp.FirstRecord();

		if (OrgIdExists)
		{
			OrgIdValue = OrgBusComp.GetFieldValue(""Id"") ;
			SiebelProductIntComp.SetFieldValue (""Primary Organization Id"", OrgIdValue);
		}
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"/*
* The arguments to this function will be the Siebel primary integration component
* and the Oracle primary Integration Component.
*
*/

function TransformItemSegment(SiebelProductIntComp, OracleItemIntComp)
{
	//
	// Declare variables to hold the values of segments 1-20
	//

	// Declare an array to hold the segments.
	// Declare a variable to hold the delimiters

	var segment, SegmentTotal="""";
	var Delimiter = ""."";

	//
	// Add all the variables together into one variable called SegmentTotal
	//

	for(var i = 1; i <= 20; i++)
	{
		segment = OracleItemIntComp.GetFieldValue (""SEGMENT""+i);
		if(segment.length > 0)
		{
			if(SegmentTotal.length > 100)
				break;
			SegmentTotal += segment + Delimiter;
		}
	}
	if(SegmentTotal.length > 100)
		SegmentTotal = SegmentTotal.substring(0, 100);

	/*if(SegmentTotal.slice(-1,0) == Delimiter)*/
	/*if((SegmentTotal.substring(((SegmentTotal.length)-1),1)) == Delimiter)*/
	if(SegmentTotal.length == 100) or (SegmentTotal.length < 100)
    	SegmentTotal = SegmentTotal.slice(0,-1);

	// Insert the Segment total into the Siebel primary integration component
	SiebelProductIntComp.SetFieldValue (""Name"", SegmentTotal);
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function UpsertSiebelProduct (InputMsg, OutputMsg)
{
	//
	// Declare a variable to hold the Siebel Integration Object.
	//
	var SiebelIntObject;

	//
	// Declare a variable to hold the Oracle Integration Object
	//
	var OracleIntObject;

	//
	// Get the Oracle Integration Object from the Input message
	//
	OracleIntObject = InputMsg.GetIntObj(""Product - Get Oracle11i Item (Oracle)"");

	//
	// Check the validity of the Oracle Integration Object.
	//
	if (OracleIntObject.Exists ())
	{
		//
		// Create a new Siebel Integration Object on the Output Message.
		//
		SiebelIntObject = OutputMsg.CreateIntObj (""Product - Get Oracle11i Item (Siebel7.8)"");

		//
		// Navigate through all the available instances in the Integration Object
		//
		while (OracleIntObject.NextInstance ())
		{
			//
			// Create a new instance in the Oracle Integration Object
			//
			SiebelIntObject.NewInstance ();

			//
			// CopyFields is a user defined function which is written to copy all
			// the fields from the source to the target.
			//
			CopyIntegrationObjectData (OracleIntObject, SiebelIntObject);
		}
	}
}  ///~ End of CreateSiebelProduct function."
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 6 $
//      $Date: 01/15/01 10:29a $
//    $Author: S.Garg $ of last update
//
// CREATOR:    P. Lim
//
// DESCRIPTION
//    Javascript maps from Siebel Order & Quote to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
/* This function shared by ""Simulate Order"" and ""Create Order"" */"
function ConvertMonth(cardExpMonth)
{
	var nMonth; 
	if ( cardExpMonth == ""January"" )
		{
			nMonth = ""01"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""February"" )
		{
			nMonth = ""02"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""March"" )
		{
			nMonth = ""03"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""April"" )
		{
			nMonth = ""04"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""May"" )
		{
			nMonth = ""05"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""June"" )
		{
			nMonth = ""06"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""July"" )
		{
			nMonth = ""07"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""August"" )
		{
			nMonth = ""08"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""September"" )
		{
			nMonth = ""09"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""October"" )
		{
			nMonth = ""10"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""November"" )
		{
			nMonth = ""11"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""December"" )
		{
			nMonth = ""12"";
			return nMonth ;
		}
	else
		{
			nMonth = ""01"";
			return nMonth ;
		}
}
function GetDaysInAMonth(nMonth, nYear)
{

	// Jan, Mar, May, Jul, Aug, Oct, Dec have 31 days each
	// Apr, Jun, Sept, Nov have 30 days each
	// Feb, for now, has 28 days.
	var daysInMonth = new Array(31,28,31,30,31,30,31,31,30,31,30,31);
	var nCurrentDays;


	// Only February can be either 28 or 29, depending on whether the year is a leap year
	if (nMonth == 2)
	{
		// If the year is divisible by 4, it is a leap year
		if (nYear%4 == 0)
		{
			// If the year is a century, then it should be divisible by 400 to be a leap year.
			if (nYear%100 == 0)
			{
				// If it is a century and divisible by 400, it is a leap year.
				if (nYear%400 == 0) { nCurrentDays = 29;}

				// If it is a century and NOT divisible by 400 (e.g. 1900), it is NOT a leap year.
				else	{ nCurrentDays = 28;}
			}
		
			// If it is not a century and divisible by 4, it is a leap year.
			else { nCurrentDays = 29;}
		}

		// If a year is NOT divisible by 4, it is not a leap year
		else { nCurrentDays = 28; }
	}


	// If the month is NOT Feb, calculating days in a month is straight-forward.
	// eScript array index starts with 0, not 1.
	else
	{ nCurrentDays = daysInMonth[nMonth - 1]; }

	return nCurrentDays;

}
function LocalizeMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created by Richard Exley - November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ERR_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ERR_MSG"";
	var LOVType = ""CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"
function Simulate77SAP46CQuote_BAPIToSiebel (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   BAPI Export (SAP 4x Order - Simulate SAP Order (BAPI Output))
    *     Export Parameters (output)
    *
    * Output Object's Integration Components:
    *   Quote Object (SAP 46C Quote)
    *     Quote (oOrder)
    *       Simulate Output
    *		Simulate Item
    *		Order Item
    */

   /*
    * Set up EAI Lookup objects
    */
   var currencyLM 	 = new CSSEAIValueMap (""SAP Currency Code"", ""Siebel Inbound"");
   var ccStatusLM	 = new CSSEAIValueMap (""SAP Credit Card Approval Code"", ""Siebel Inbound"");
   var cCardLM	 	 = new CSSEAIValueMap (""SAP Credit Card Type"", ""Siebel Inbound"");
  

   /*
    * Set up EAI Input Message objects
    */
   var iSimOrderObj;   // BAPI Order instance
   var iSimExportComp; // BAPI Export Parameters
   var iSimItemComp;   // BAPI Order Items
   var iSimIItemComp;  // BAPI Order Input Item Comp to retieve value for Fix Pricing flag
   var iSchedItemComp; // BAPI Schedule Line Items
   var iSimCCardComp;  // BAPI Credit Card Export Comp

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oQuoteObj;      // Siebel Order instance
   var oQuoteComp;     // Order
   var oCardComp;	   // Order Card Payment Comp
   var oOutputComp; // Simulate Output RFC_*
   var oItemComp;   // Simulate Item Output RFC_*
   var oSimItemComp;   // Simulate Item
   // var oItemComp;      // Item
   var oSchedItemComp; // Schedule Line Item

   /*
    * Find and create top-level integration object
    */
   iSimOrderObj = inputMsg.GetIntObj (""SAP 46C Order - Simulate SAP Order (BAPI Output)"");
   oQuoteObj = outputMsg.CreateIntObj (""SAP 46C Quote"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iSimOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object
       */
      oQuoteObj.NewInstance ();

      /*
       * Create ""Order"" component in output message
       */
      oQuoteComp = oQuoteObj.CreatePrimaryIntComp (""Quote"");
      oQuoteComp.NewRecord ();
      
      // Set ""Id"" so Siebel Adapter can synchronize
      oQuoteComp.SetFieldValue (""Id"", inputId);
      
      /*
       * Read ""Export Parameters"" component
       */
      iSimExportComp = iSimOrderObj.GetPrimaryIntComp (""Export Parameters"");
      
      if (iSimExportComp.NextRecord ())
      {
         
         /*
          * Update ""Order"" component
          */
         oQuoteComp.SetCopySource  (iSimExportComp);
         oQuoteComp.SetFieldValue(""Status As Of Date"", Timestamp());
		 
         var sapDelBlock = iSimExportComp.GetFieldValue ( ""SHIP_TO_PARTY-DLV_BLOCK"" );
		 var delBlock = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_HEADER_DELIV_BLOCK"", sapDelBlock);
         oQuoteComp.SetFieldValue (""Delivery Block"",     delBlock);
         
         // sapBlock 		= null;
         var sapBillBlock = iSimExportComp.GetFieldValue ( ""BILLING_PARTY-BILL_BLOCK"" );
		 var billBlock = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_HEADER_BILL_BLOCK"", sapBillBlock);
         oQuoteComp.SetFieldValue (""Billing Block"",     billBlock);

		 // oQuoteComp.CopyFieldValue (""Billing Block"",      ""BILLING_PARTY-BILL_BLOCK"");
         oQuoteComp.CopyFieldValue (""EAI Error Message"",     ""RETURN-MESSAGE"");
		 
	
         var returnCode = iSimExportComp.GetFieldValue (""RETURN-CODE"");
         
         if ( (returnCode == ""V1154"") || (returnCode == ""V1038"") )
            {
              oQuoteComp.SetFieldValue (""Credit Check Status"",             ""N"");
            }
         else
            {
              oQuoteComp.SetFieldValue (""Credit Check Status"",             ""Y"");
            }

         /*
          * Read ""ORDER_CCARD_EX"" component
          */

         
		  iSimCCardComp = iSimExportComp.GetIntComp (""ORDER_CCARD_EX"");

          var cardStatus;
          var cardLineNo = 0;
          while (iSimCCardComp.NextRecord())
          {
         	 cardStatus = iSimCCardComp.GetFieldValue ( ""CC_STAT_EX"");
         	 if ( cardStatus != null && cardStatus != """" )
         	 {
         oQuoteComp.SetCopySource  (iSimCCardComp);

         oQuoteComp.CopyFieldValue ( ""Credit Card Number"", ""CC_NUMBER"" );
         oQuoteComp.CopyFieldValue ( ""Credit Card Transaction Time"", ""AUTH_DATE"" );
         oQuoteComp.CopyFieldValue (""Card Holder"", ""CC_NAME"");
         oQuoteComp.CopyFieldValue ( ""Credit Card Authorization Code"", ""CC_AUTTH_NO"" );
         oQuoteComp.CopyFieldValue ( ""Credit Card Transaction Amount"", ""AUTHAMOUNT"" );
           	 	var ccStat = iSimCCardComp.GetFieldValue ( ""CC_STAT_EX"");
           	 	var ccReact = iSimCCardComp.GetFieldValue ( ""CC_REACT"");
           	 	
           	 	if (ccStat == ""C"")
           	 		{ if (ccReact = ""A"")
           	 			{ oQuoteComp.SetFieldValue (""Payment Status"", TheApplication().InvokeMethod (""LookupValue"", ""FUNDRQ_STATUS"", ""Authorized"") );}
           	 		  else
           	 		  	{ oquoteComp.SetFieldValue (""Payment Status"", TheApplication().InvokeMethod (""LookupValue"", ""FUNDRQ_STATUS"", ""Declined"") );}
           	 		 }
           	 	else
           	 		{ oQuoteComp.SetFieldValue (""Payment Status"", TheApplication().InvokeMethod (""LookupValue"", ""FUNDRQ_STATUS"", ""AVS Failed"") );}

        }
        }
         	 
         	
				//oCardComp.CopyFieldValue (""Expiration Date"", ""CC_VALID_T"" );
				//oCardComp.CopyFieldValue (""Transaction Message"", ""CC_REACT_T"" );
				//var expDate = iSimCCardComp.GetFieldValue (""CC_VALID_T"");
         		//var expMonth = expDate.substring(0,2);
         		//if (expMonth < 10)
         		//	{expMonth = expDate.substring(1,2);}
         		//var expYear = expDate.substring(6,10);
         		//oCardComp.SetFieldValue (""Expiration Month"", expMonth );
				//oCardComp.SetFieldValue (""Expiration Year"", expYear );
				//var paymentMethod = TheApplication().InvokeMethod (""LookupValue"", ""PAYMENT_METHOD_CODE"", ""Credit Card"");
                //oCardComp.SetFieldValue  (""Payment Method"",   paymentMethod);
				//var cardType = cCardLM.Translate (iSimCCardComp.GetFieldValue (""CC_TYPE""));
           	 	//var LDCardType = TheApplication().InvokeMethod (""LookupValue"", ""PAYMENT_TYPE_CODE"", cardType);
           	 	//oCardComp.SetFieldValue	 (""Payment Type"", LDCardType);
         	 //}
          //}
         		


         /*
          * Read ""ORDERS_ITEMS_OUT"" component
          */

         iSimItemComp = iSimExportComp.GetIntComp (""ORDER_ITEMS_OUT"");
         iSimIItemComp = iSimExportComp.GetIntComp ( ""ORDER_ITEMS_IN"");
         oSimItemComp = oQuoteComp.CreateIntComp (""Quote Item"", false);
         while (iSimItemComp.NextRecord ())
         {
            oSimItemComp.NewRecord ();
            oSimItemComp.SetCopySource  (iSimItemComp);
            
            iSimIItemComp.NextRecord ();
            
            var fixPrice = iSimIItemComp.GetFieldValue ( ""PURCH_NO_C"" );
                        
            
            var netVal          = iSimItemComp.GetFieldValue (""SUBTOTAL_2""); // nbc
            var qtyReq			= iSimItemComp.GetFieldValue (""REQ_QTY"");
            var netTax		= null;
			// start - adjustment to SAP bug (nbc)
			if (fixPrice == ""X"") 
			 { 
				netVal = netVal / 10; 
			 } 
			// end - adjustment to SAP bug (nbc)
            if ( qtyReq != 0 )
             {
            	var netPrice 		= netVal / qtyReq ; 
             }
            
            if (fixPrice != ""X"")
             {
            	oSimItemComp.SetFieldValue    (""Adjusted List Price"",         netPrice);
            	oSimItemComp.CopyFieldValue   (""Tax Amt"",                ""SUBTOTAL_5"");	
            	oSimItemComp.CopyFieldValue   (""Freight Amount"",            ""SUBTOTAL_4"");
       			oSimItemComp.SetFieldValue    (""Net Price"",      	netPrice); // nbc
             }
            else
            {
            	oSimItemComp.SetFieldValue    (""Fix Price Flag"", ""Y"" );
            	oSimItemComp.CopyFieldValue   (""Tax Amt"",                ""SUBTOTAL_5"");	
            	oSimItemComp.SetFieldValue    (""Freight Amount"",            ""0"");
       			oSimItemComp.SetFieldValue    (""Net Price"",      	netPrice); // nbc
            }
            
            
            var itemReqDate = iSimItemComp.GetFieldValue (""DLV_DATE""); 
            var itemnum = iSimItemComp.GetFieldValue (""ITM_NUMBER"");
            oSimItemComp.CopyFieldValue    (""Unit of Measure"",    ""SALES_UNIT"");
            oSimItemComp.CopyFieldValue    (""Line Number"",                ""ITM_NUMBER"");
            oSimItemComp.CopyFieldValue    (""Quantity Requested"",        ""REQ_QTY"");
            oSimItemComp.CopyFieldValue    (""Product Integration Id"",        ""MATERIAL"");
            oSimItemComp.CopyFieldValue    (""Source Inventory Location"",        ""PLANT"");
            oSimItemComp.SetFieldValue     (""NRC CxTotal"", 			netVal); // nbc 7.8.2
   
         

            
           /*
            * Read ""ORDER_SCHEDULE_EX"" component
            */
            
            iSchedItemComp = iSimExportComp.GetIntComp   (""ORDER_SCHEDULE_EX"");
            oSchedItemComp = oSimItemComp.CreateIntComp (""Quote - SAP 4x Schedule Line Item"", false);
		
			var firstScheduleLine = 1;
			
        
            while (iSchedItemComp.NextRecord ())
             {
               var itemnum2  = iSchedItemComp.GetFieldValue (""ITM_NUMBER"");
               var schednum = iSchedItemComp.GetFieldValue (""SCHED_LINE"");
               var intId;
               if (itemnum2 == itemnum)
               {
           
                oSchedItemComp.NewRecord ();
                oSchedItemComp.SetCopySource  (iSchedItemComp);
                
                intId = inputId + ""-"" + itemnum2 + ""-"" + schednum;
               
                oSchedItemComp.SetFieldValue (""Integeration ID"",             intId);
                oSchedItemComp.CopyFieldValue (""Required Qty"",                   ""REQ_QTY"");
                oSchedItemComp.SetFieldValue (""Schedule Line No"",     schednum);
                oSchedItemComp.SetFieldValue  (""Item Line No"",     itemnum);
                oSchedItemComp.SetFieldValue  (""Quote Id"",     inputId);
                oSchedItemComp.CopyFieldValue (""Confirmed Date"",           ""GI_DATE"");
                oSchedItemComp.CopyFieldValue (""Confirmed Qty"",               ""CONFIR_QTY"");
                var reqDate = iSchedItemComp.GetFieldValue ( ""REQ_DATE"");
                oSchedItemComp.SetFieldValue (""Required Delivery Date"" ,          reqDate);
                // Checking for First Schedule Line, as it contains actual Req Delivery Date and setting it for Item Req Delv Date
                if ( firstScheduleLine == 1 )
                	{
                		oSimItemComp.SetFieldValue    (""Requested Delivery Date"",      reqDate );
                	}
                firstScheduleLine++;
                
               }
             }


         }

      }
   }
}
function Simulate77SAP46CQuote_SiebelToBAPI (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   Quote Object (SAP 46C Quote)
    *     Quote (Quote)
    *       Quote Line Item (item)
    *			Quote Line Item attribute Comp
    *
    * Output Object's Integration Components:
    *   BAPI Import Object (SAP 46C Order - Create SAP Order (BAPI Import))
    *     Import Parameters
    *       ORDER_PARTNERS
    *       ORDER_ITEMS_IN
    *       ORDER_PARTNERS
    *		ORDER_CFGS_INST
    *		ORDER_CFGS_REF
    *		ORDER_CFGS_VALUE
    */

   /*
    * Set up EAI Lookup maps
    */
   var orderTypeLM = EAIGetValueMap (""SAP Order Types"",     	""Siebel Outbound"");
   var incotermsLM = EAIGetValueMap (""SAP Incoterms"",      		""Siebel Outbound"");
   var payTermsLM  = EAIGetValueMap (""SAP Payment Terms"",   	""Siebel Outbound"");
   var currencyLM  = EAIGetValueMap (""SAP Currency Code"",		""Siebel Outbound"");
   var cCardLM	   = EAIGetValueMap (""SAP Credit Card Type"",	""Siebel Outbound"");
   var uomLM       = EAIGetValueMap (""SAP Unit of Measure"", 	""Siebel Outbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iQuoteObj;  // Quote object instance
   var iQuoteComp; // Quote
   var iItemComp;  // Quote Line Item
   var iAttrComp;  // Item Attribute Component

   // Store inputId to be denormalized to all RFC table rows
   //var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oCFDOrderObj;        // BAPI Order instance
   var oCFDImportComp;      // BAPI Import parameters
   var oCFDItemComp;        // BAPI Order Item
   var oCFDPartnerComp;     // BAPI Order Partners
   var oCFDCardComp;     	// BAPI Card Component
   var oCFDCfgInstComp;
   var oCFDCfgValComp;
   var oCFDCfgRefComp;


   /*
    * Find and create top-level integration object
    */
   iQuoteObj    = inputMsg.GetIntObj (""SAP 46C Quote"");
   oCFDOrderObj = outputMsg.CreateIntObj (""SAP 46C Order - Simulate SAP Order (BAPI Input)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iQuoteObj.NextInstance ())
   {
      /*
       * Create ""Order"" object in output message
       */
      oCFDOrderObj.NewInstance ();

      /*
       * Read ""Order"" component
       */
      iQuoteComp     = iQuoteObj.GetPrimaryIntComp (""Quote"");
      oCFDImportComp = oCFDOrderObj.CreatePrimaryIntComp (""Import Parameters"");
     
      if (iQuoteComp.NextRecord ())
      {
        
         /*
          * Write ""Import Parameters"" component
          */
         oCFDImportComp.NewRecord ();
         oCFDImportComp.SetCopySource  (iQuoteComp);
         
         var priceList =  null;
         priceList = iQuoteComp.GetFieldValue (""Price List Id"");
         var currencyCode = currencyLM.Translate (iQuoteComp.GetFieldValue (""Currency Code""));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DOC_NUMBER"", null);
         //var docType = TheApplication().InvokeMethod (""LookupValue"", ""FS_ORDER_TYPE"", ""Sales Order"");
         //oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DOC_TYPE"",   orderTypeLM.Translate (docType));
		 oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DOC_TYPE"",   ""TA"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-CURRENCY"",  currencyCode );
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_ORG"",  ""SAP Sales Organisation (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DISTR_CHAN"", ""SAP Distribution Channel (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DIVISION"",   ""SAP Division (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_NO"",       ""Quote Number"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_DATE"", ""Requested Ship Date"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REF_1"",      ""Quote Number"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PRICE_DATE"", ""Start Date"" );
		  // Set NAME only if ""Contact Id"" is not null.
         if (iQuoteComp.GetFieldValue (""Contact Id"") != null)
         {
            oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-NAME"", EAIFormatPersonName (iQuoteComp.GetFieldValue (""Contact First Name""),
                                                                                       iQuoteComp.GetFieldValue (""Contact Last Name"")));
         }         
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-TELEPHONE"",  ""Contact Work Phone #"");
		 if (iQuoteComp.GetFieldValue (""Requested Ship Date"") != """")
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",   ""Requested Ship Date"");
               
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",       ""Start Date"");
            }
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DATE_TYPE"",  ""1"");
                  
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-INCOTERMS1"", incotermsLM.Translate (iQuoteComp.GetFieldValue(""Freight Terms"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-INCOTERMS2"", ""Freight Terms Info"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-PMNTTRMS"",   payTermsLM.Translate (iQuoteComp.GetFieldValue (""Payment Term"")));
         
         if (iQuoteComp.GetFieldValue (""Partial Ship"") != ""Y"")
            {
               oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       ""X"");
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       null);
            }
    

         /*
          * Write ""ORDER_PARTNERS"" component  
          */
                  
         oCFDPartnerComp = oCFDImportComp.CreateIntComp (""ORDER_PARTNERS"", oCFDImportComp);

         // Sold to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iQuoteComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""AG"");

         var soldtoparty =  iQuoteComp.GetFieldValue (""Account Integration Id"");
         var array = soldtoparty.split("":"");
         var AccountIntId = array[0];
         
         
         oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId);

         // Ship To partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iQuoteComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""WE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Ship To Account Integration Id"");

         // Payer partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iQuoteComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RG"");
         var payerId = iQuoteComp.GetFieldValue (""Payer Account Integration Id"");
         if (payerId == null || payerId == """")
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId );
         	}
         else
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", payerId );
         	}
         
         // Bill to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iQuoteComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Bill To Account Integration Id"");

		/*
		 * Read and update Credit Card Info
		 *
		 */
		 var ccType = cCardLM.Translate (iQuoteComp.GetFieldValue (""Credit Card Name""));
		 var ccNum = iQuoteComp.GetFieldValue ( ""Credit Card Number"");
		 if ( ccNum != null && ccNum != """" )
		 
		 	{
		 		oCFDCardComp = oCFDImportComp.CreateIntComp (""ORDER_CCARD"");
		 		oCFDCardComp.NewRecord();
		 		oCFDCardComp.SetCopySource (iQuoteComp);
		 		var cardExpDate = iQuoteComp.GetFieldValue ( ""Credit Card Expiration Date"");
		 		if ( cardExpDate == null || cardExpDate == """" )
		 			{
		 				var cardExpYear	= iQuoteComp.GetFieldValue (""Credit Card Expiration Year"" );
		 				var cardExpMonth  = iQuoteComp.GetFieldValue (""Credit Card Expiration Month"" );
		 				var cardExpDay;
		 				
		 				var nMonth = ConvertMonth (cardExpMonth);
		 				cardExpDay = GetDaysInAMonth(nMonth, cardExpYear);
		 				var cardExpFullDate = nMonth + ""/"" + cardExpDay + ""/"" + cardExpYear + "" 00:00:00"";
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpFullDate );
		 			}
		 		else
		 			{
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpDate );
		 			}
		 		oCFDCardComp.SetFieldValue		(""CC_TYPE"", 		ccType);
		 		oCFDCardComp.SetFieldValue		(""CC_NUMBER"", 		ccNum );
		 		oCFDCardComp.CopyFieldValue		(""CC_NAME"", 		""Credit Card Holder"" );
				//oCFDCardComp.CopyFieldValue		(""AUTHAMOUNT"", 		""Credit Card Transaction Amount"" );
		 		oCFDCardComp.SetFieldValue		(""CURRENCY"", 		currencyCode );
		 	}
         /*
          * Read ""Order Line Item"" Integration Component
 	      */
 	      
         iItemComp    = iQuoteComp.GetIntComp        (""Quote Item"");
         oCFDItemComp = oCFDImportComp.CreateIntComp (""ORDER_ITEMS_IN"", oCFDImportComp);
         oCFDCfgValComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_VALUE"", oCFDImportComp);       
         oCFDCfgRefComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_REF"", oCFDImportComp);         
         oCFDCfgInstComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_INST"", oCFDImportComp);

         while (iItemComp.NextRecord ())
         {
/*           var itemNum =  iItemComp.GetFieldValue (""Line Number"");
            var Posex_Hilfsvariable =""00000"";

            Clib.sprintf(Posex_Hilfsvariable,""%06.6s"",iItemComp.GetFieldValue(""Line Number""));
            var itemNumber = Posex_Hilfsvariable;      
            var parentItemId =  iItemComp.GetFieldValue (""Parent Quote Item Id"");                  
            if((parentItemId == 0) || (parentItemId ==""""))
            {*/
            oCFDItemComp.NewRecord ();
            oCFDItemComp.SetCopySource  (iItemComp);
            var itemNumber = iItemComp.GetFieldValue(""Line Number"");
            oCFDItemComp.SetFieldValue (""ITM_NUMBER"",     itemNumber);
            //oCFDItemComp.SetFieldValue (""HG_LV_ITEM"",     ""000000"");
            oCFDItemComp.CopyFieldValue (""PO_ITM_NO"",      ""Line Number"");
            oCFDItemComp.CopyFieldValue (""MATERIAL"",       ""Product Integration Id"");
            
            if (iItemComp.GetFieldValue (""Partial Ship"") != ""Y"")
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""C"");
                }
            else
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""D"");
                }
            oCFDItemComp.CopyFieldValue (""PLANT"",          ""Source Inventory Location"");
            oCFDItemComp.SetFieldValue  (""SALES_UNIT"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
            oCFDItemComp.CopyFieldValue (""SHORT_TEXT"",     ""Part Number"");
            oCFDItemComp.CopyFieldValue (""REQ_DATE"",       ""Requested Delivery Date"");
            oCFDItemComp.SetFieldValue  (""DATE_TYPE"",      ""1"");
            oCFDItemComp.CopyFieldValue (""REQ_QTY"",        ""Quantity Requested"");
	            
            var siebelPrice = iItemComp.GetFieldValue ( ""Unit Price"" );
            if ((  siebelPrice != 0) || (  priceList != """" ))
            
            {
             	oCFDItemComp.SetFieldValue  (""CD_TYPE2"",      ""PN00"");
            	oCFDItemComp.SetFieldValue  (""PURCH_NO_C"",     ""X"");
                oCFDItemComp.CopyFieldValue (""CD_VALUE2"",     ""Item Price"");
            	oCFDItemComp.SetFieldValue  (""CD_P_UNT2"",     ""1"");
            	oCFDItemComp.SetFieldValue  (""CD_D_UNT2"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
            	
             	oCFDItemComp.SetFieldValue  (""CD_TYPE3"",      ""KF00"");
                oCFDItemComp.CopyFieldValue (""CD_VALUE3"",     ""Freight Amount"");
                oCFDItemComp.SetFieldValue  (""CD_P_UNT3"",     ""1"");
            	oCFDItemComp.SetFieldValue  (""CD_D_UNT3"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));

  


            }
            else
             	oCFDItemComp.SetFieldValue  (""CD_TYPE2"",      ""PR00"");
                // oCFDItemValComp.SetFieldValue (""ITM_NUMBER"",     itemNumber);                             	
}  // end if condition for Parent item num

/*            oCFDCfgRefComp.NewRecord ();
            oCFDCfgRefComp.SetCopySource  (iItemComp);
            oCFDCfgRefComp.SetFieldValue (""POSEX"",     itemNumber);
            oCFDCfgRefComp.SetFieldValue (""CONFIG_ID"",     itemNumber);            
            oCFDCfgRefComp.SetFieldValue (""ROOT_ID"",     itemNumber);            


            oCFDCfgInstComp.NewRecord ();
            oCFDCfgInstComp.SetCopySource  (iItemComp);
            oCFDCfgInstComp.SetFieldValue (""INST_ID"",     itemNumber);
            oCFDCfgInstComp.SetFieldValue (""CONFIG_ID"",   itemNumber);            
            oCFDCfgInstComp.SetFieldValue (""OBJ_TYPE"",     ""MARA"");            
            oCFDCfgInstComp.SetFieldValue (""OBJ_KEY"",     ""MATERIAL"");            
            oCFDCfgInstComp.SetFieldValue (""QUANTITY"",     ""1"");            

*/
           
      
                    /*
          * Read ""Order Line Item Attribute Value"" Integration Component
          */
/*         iAttrComp    = iItemComp.GetIntComp        (""Quote Item XA"");

         
         while (iAttrComp.NextRecord ())
         {

            oCFDCfgValComp.NewRecord ();
            oCFDCfgValComp.SetCopySource  (iAttrComp);
            oCFDCfgValComp.CopyFieldValue (""CHARC"",     ""Name"");
            oCFDCfgValComp.CopyFieldValue (""VALUE"",     ""Value"");
            oCFDCfgValComp.CopyFieldValue (""CHARC_TXT"", ""Description"");
            oCFDCfgValComp.SetFieldValue (""INST_ID"", itemNumber);
            oCFDCfgValComp.SetFieldValue (""CONFIG_ID"", itemNumber);
		}
  */   
       //  } //order items read
      }
      
   }
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", d.getMonth()+1, d.getDate(), d.getFullYear(), d.getHours(), d.getMinutes(), d.getSeconds()); 
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 6 $
//      $Date: 01/15/01 10:29a $
//    $Author: S.Garg $ of last update
//
// CREATOR:    P. Lim
//
// DESCRIPTION
//    Javascript maps from Siebel Order & Quote to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
/* This function shared by ""Simulate Order"" and ""Create Order"" */"
function ConvertMonth(cardExpMonth)
{
	var nMonth; 
	if ( cardExpMonth == ""January"" )
		{
			nMonth = ""01"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""February"" )
		{
			nMonth = ""02"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""March"" )
		{
			nMonth = ""03"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""April"" )
		{
			nMonth = ""04"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""May"" )
		{
			nMonth = ""05"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""June"" )
		{
			nMonth = ""06"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""July"" )
		{
			nMonth = ""07"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""August"" )
		{
			nMonth = ""08"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""September"" )
		{
			nMonth = ""09"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""October"" )
		{
			nMonth = ""10"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""November"" )
		{
			nMonth = ""11"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""December"" )
		{
			nMonth = ""12"";
			return nMonth ;
		}
	else
		{
			nMonth = ""01"";
			return nMonth ;
		}
}
function GetDaysInAMonth(nMonth, nYear)
{

	// Jan, Mar, May, Jul, Aug, Oct, Dec have 31 days each
	// Apr, Jun, Sept, Nov have 30 days each
	// Feb, for now, has 28 days.
	var daysInMonth = new Array(31,28,31,30,31,30,31,31,30,31,30,31);
	var nCurrentDays;


	// Only February can be either 28 or 29, depending on whether the year is a leap year
	if (nMonth == 2)
	{
		// If the year is divisible by 4, it is a leap year
		if (nYear%4 == 0)
		{
			// If the year is a century, then it should be divisible by 400 to be a leap year.
			if (nYear%100 == 0)
			{
				// If it is a century and divisible by 400, it is a leap year.
				if (nYear%400 == 0) { nCurrentDays = 29;}

				// If it is a century and NOT divisible by 400 (e.g. 1900), it is NOT a leap year.
				else	{ nCurrentDays = 28;}
			}
		
			// If it is not a century and divisible by 4, it is a leap year.
			else { nCurrentDays = 29;}
		}

		// If a year is NOT divisible by 4, it is not a leap year
		else { nCurrentDays = 28; }
	}


	// If the month is NOT Feb, calculating days in a month is straight-forward.
	// eScript array index starts with 0, not 1.
	else
	{ nCurrentDays = daysInMonth[nMonth - 1]; }

	return nCurrentDays;

}
function LocalizeMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created by Richard Exley - November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ERR_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ERR_MSG"";
	var LOVType = ""CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"
function Simulate77SAP47Quote_BAPIToSiebel (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   BAPI Export (SAP 4x Order - Simulate SAP Order (BAPI Output))
    *     Export Parameters (output)
    *
    * Output Object's Integration Components:
    *   Quote Object (SAP 47 Quote)
    *     Quote (oOrder)
    *       Simulate Output
    *		Simulate Item
    *		Order Item
    */

    // Set up EAI Lookup objects
   var currencyLM 	 = new CSSEAIValueMap (""SAP Currency Code"", ""Siebel Inbound"");
   var ccStatusLM	 = new CSSEAIValueMap (""SAP Credit Card Approval Code"", ""Siebel Inbound"");
   var cCardLM	 	 = new CSSEAIValueMap (""SAP Credit Card Type"", ""Siebel Inbound"");
   // Set up EAI Input Message objects
   var iSimOrderObj;   // BAPI Order instance
   var iSimExportComp; // BAPI Export Parameters
   var iSimItemComp;   // BAPI Order Items
   var iCondComp;      // For EPrice CR
   var iSimIItemComp;  // BAPI Order Input Item Comp to retieve value for Fix Pricing flag
   var iSchedItemComp; // BAPI Schedule Line Items
   var iSimCCardComp;  // BAPI Credit Card Export Comp
   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");
    // Set up EAI Output Message objects
   var oQuoteObj;      // Siebel Order instance
   var oQuoteComp;     // Order
   var oCardComp;	   // Order Card Payment Comp
   var oOutputComp; // Simulate Output RFC_*
   var oItemComp;   // Simulate Item Output RFC_*
   var oSimItemComp;   // Simulate Item
   // var oItemComp;      // Item
   var oSchedItemComp; // Schedule Line Item
   // Find and create top-level integration object
   iSimOrderObj = inputMsg.GetIntObj (""SAP 47 Order - Simulate SAP Order (BAPI Output)"");
   oQuoteObj = outputMsg.CreateIntObj (""SAP 47 Quote"");

    // Read int object instances from EAI message
   while (iSimOrderObj.NextInstance ())
   {
      oQuoteObj.NewInstance ();
      oQuoteComp = oQuoteObj.CreatePrimaryIntComp (""Quote"");
      oQuoteComp.NewRecord ();
      oQuoteComp.SetFieldValue (""Id"", inputId);
      iSimExportComp = iSimOrderObj.GetPrimaryIntComp (""Export Parameters"");
      if (iSimExportComp.NextRecord ())
      {
         oQuoteComp.SetCopySource  (iSimExportComp);
         oQuoteComp.SetFieldValue(""Status As Of Date"", Timestamp());
         var sapDelBlock = iSimExportComp.GetFieldValue ( ""SHIP_TO_PARTY-DLV_BLOCK"" );
		 var delBlock = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_HEADER_DELIV_BLOCK"", sapDelBlock);
         oQuoteComp.SetFieldValue (""Delivery Block"",     delBlock);
         var sapBillBlock = iSimExportComp.GetFieldValue ( ""BILLING_PARTY-BILL_BLOCK"" );
		 var billBlock = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_HEADER_BILL_BLOCK"", sapBillBlock);
         oQuoteComp.SetFieldValue (""Billing Block"",     billBlock);
         oQuoteComp.CopyFieldValue (""EAI Error Message"",     ""RETURN-MESSAGE"");
         var returnCode = iSimExportComp.GetFieldValue (""RETURN-CODE"");
         if ( (returnCode == ""V1154"") || (returnCode == ""V1038"") )
            {
              oQuoteComp.SetFieldValue (""Credit Check Status"",             ""N"");
            }
         else
            {
              oQuoteComp.SetFieldValue (""Credit Check Status"",             ""Y"");
            }

          // Read ""ORDER_CCARD_EX"" component
		  iSimCCardComp = iSimExportComp.GetIntComp (""ORDER_CCARD_EX"");
          var cardStatus;
          var cardLineNo = 0;
          while (iSimCCardComp.NextRecord())
          {
         	 cardStatus = iSimCCardComp.GetFieldValue ( ""CC_STAT_EX"");
         	 if ( cardStatus != null && cardStatus != """" )
         	 {
         oQuoteComp.SetCopySource  (iSimCCardComp);
         oQuoteComp.CopyFieldValue ( ""Credit Card Number"", ""CC_NUMBER"" );
         oQuoteComp.CopyFieldValue ( ""Credit Card Transaction Time"", ""AUTH_DATE"" );
         oQuoteComp.CopyFieldValue (""Card Holder"", ""CC_NAME"");
         oQuoteComp.CopyFieldValue ( ""Credit Card Authorization Code"", ""CC_AUTTH_NO"" );
         oQuoteComp.CopyFieldValue ( ""Credit Card Transaction Amount"", ""AUTHAMOUNT"" );
           	 	var ccStat = iSimCCardComp.GetFieldValue ( ""CC_STAT_EX"");
           	 	var ccReact = iSimCCardComp.GetFieldValue ( ""CC_REACT"");
           	 	if (ccStat == ""C"")
           	 		{ if (ccReact = ""A"")
           	 			{ oQuoteComp.SetFieldValue (""Payment Status"", TheApplication().InvokeMethod (""LookupValue"", ""FUNDRQ_STATUS"", ""Authorized"") );}
           	 		  else
           	 		  	{ oquoteComp.SetFieldValue (""Payment Status"", TheApplication().InvokeMethod (""LookupValue"", ""FUNDRQ_STATUS"", ""Declined"") );}
           	 		 }
           	 	else
           	 		{ oQuoteComp.SetFieldValue (""Payment Status"", TheApplication().InvokeMethod (""LookupValue"", ""FUNDRQ_STATUS"", ""AVS Failed"") );}
        }
        }
				/*//oCardComp.CopyFieldValue (""Expiration Date"", ""CC_VALID_T"" );
				//oCardComp.CopyFieldValue (""Transaction Message"", ""CC_REACT_T"" );
				//var expDate = iSimCCardComp.GetFieldValue (""CC_VALID_T"");
         		//var expMonth = expDate.substring(0,2);
         		//if (expMonth < 10)
         		//	{expMonth = expDate.substring(1,2);}
         		//var expYear = expDate.substring(6,10);
         		//oCardComp.SetFieldValue (""Expiration Month"", expMonth );
				//oCardComp.SetFieldValue (""Expiration Year"", expYear );
				//var paymentMethod = TheApplication().InvokeMethod (""LookupValue"", ""PAYMENT_METHOD_CODE"", ""Credit Card"");
                //oCardComp.SetFieldValue  (""Payment Method"",   paymentMethod);
				//var cardType = cCardLM.Translate (iSimCCardComp.GetFieldValue (""CC_TYPE""));
           	 	//var LDCardType = TheApplication().InvokeMethod (""LookupValue"", ""PAYMENT_TYPE_CODE"", cardType);
           	 	//oCardComp.SetFieldValue	 (""Payment Type"", LDCardType);
         	 //}
          //}*/

          // Read ""ORDERS_ITEMS_OUT"" component
         iSimItemComp = iSimExportComp.GetIntComp (""ORDER_ITEMS_OUT"");
         iSimIItemComp = iSimExportComp.GetIntComp ( ""ORDER_ITEMS_IN"");
         oSimItemComp = oQuoteComp.CreateIntComp (""Quote Item"", false);
         while (iSimItemComp.NextRecord ())
         {
            oSimItemComp.NewRecord ();
            oSimItemComp.SetCopySource  (iSimItemComp);
            iSimIItemComp.NextRecord ();
            var fixPrice = iSimIItemComp.GetFieldValue ( ""PURCH_NO_C"" );
            var netVal          = iSimItemComp.GetFieldValue (""SUBTOTAL_2""); // nbc
            var qtyReq			= iSimItemComp.GetFieldValue (""REQ_QTY"");
            var itemUOM 		= iSimItemComp.GetFieldValue (""SALES_UNIT""); // For EPrice CR
            //var sQtyReq = qtyReq * 1000;
            var netTax		= null;
            var itemReqDate = iSimItemComp.GetFieldValue (""DLV_DATE""); 
            var itemnum = iSimItemComp.GetFieldValue (""ITM_NUMBER"");
            oSimItemComp.CopyFieldValue    (""Unit of Measure"",    ""SALES_UNIT"");
            oSimItemComp.CopyFieldValue    (""Line Number"",                ""ITM_NUMBER"");
            // oSimItemComp.CopyFieldValue    (""Quantity Requested"",        ""REQ_QTY"");
            oSimItemComp.SetFieldValue    (""Quantity Requested"",        qtyReq);
            oSimItemComp.CopyFieldValue    (""Product Integration Id"",        ""MATERIAL"");
            oSimItemComp.CopyFieldValue    (""Source Inventory Location"",        ""PLANT"");
            //oSimItemComp.SetFieldValue     (""NRC CxTotal"", 			netVal); // nbc 7.8.2
            
			// For EPrice CR
            var condFlag = false;
            iCondComp = iSimExportComp.GetIntComp (""ORDER_CONDITION_EX"");
            while (iCondComp.NextRecord ())
            {
             oSimItemComp.SetCopySource  (iCondComp);
             if ((iCondComp.GetFieldValue (""ITM_NUMBER"") == itemnum)) 
             {
             if ((iCondComp.GetFieldValue (""COND_TYPE"") == ""PN00""))
                 			 {	var netPrice = 0;
                 				var netValue = 0;
                 				if (itemUOM == (iCondComp.GetFieldValue (""COND_UNIT"")))
                					{
                					if (fixPrice != ""X"")
            						{ 
                					oSimItemComp.CopyFieldValue  (""Unit Price"",   ""COND_VALUE"");
                 				 	oSimItemComp.CopyFieldValue  (""Adjusted List Price"",   ""COND_VALUE"");
									oSimItemComp.CopyFieldValue  (""Net Price"",   ""COND_VALUE""); // nbc 7.8.2 SAP 4x Net Price
									oSimItemComp.CopyFieldValue     (""NRC CxTotal"", ""CONDVALUE"");
									}
									else
									{
									var sNetPrice = iCondComp.GetFieldValue (""COND_VALUE"");
									var netPrice = sNetPrice /10;
									var netVal = netPrice * qtyReq;
									oSimItemComp.SetFieldValue    (""Fix Price Flag"", ""Y"" );
									oSimItemComp.SetFieldValue    (""Net Price"",      	netPrice);
									oSimItemComp.SetFieldValue     (""NRC CxTotal"", netVal);
									}
                 					}
                 			  	else
              						{netValue = (iCondComp.GetFieldValue (""CONDVALUE""));
                 					 	if (netValue != 0)
                 			 		 		{netPrice = (netValue / qtyReq); 
                 			 		 		if (fixPrice != ""X"")
            								{ 
                 			 	 	 		 oSimItemComp.SetFieldValue  (""Unit Price"",   netPrice);
               	 			 	 			 oSimItemComp.SetFieldValue  (""Adjusted List Price"",   netPrice);
										     oSimItemComp.SetFieldValue  (""Net Price"",   netPrice); //nbc 7.8.2 SAP 4x Net Price
										     oSimItemComp.CopyFieldValue     (""NRC CxTotal"", ""CONDVALUE"");
										     }
										     else
										     {
										     var sNetPrice = iCondComp.GetFieldValue (""COND_VALUE"");
											 var netPrice = sNetPrice /10;
											 var netVal = netPrice * qtyReq;
											 oSimItemComp.SetFieldValue    (""Fix Price Flag"", ""Y"" );
											 oSimItemComp.SetFieldValue    (""Net Price"",      	netPrice);
											 oSimItemComp.SetFieldValue     (""NRC CxTotal"", netVal);
										     }
               	 			 	 			}
               	 			 	 	}
               	 			 	condFlag = true;
               	 	     	}          	 		
               	   			if ((iCondComp.GetFieldValue (""COND_TYPE"") == ""PR00"") && (condFlag == false))
	               				{	
                 					var netPrice= 0;
                 					var netValue = 0;
                 					if (itemUOM == (iCondComp.GetFieldValue (""COND_UNIT"")))
                 			    		{
                 			    		if (fixPrice != ""X"")
            							{ 
                 			    		oSimItemComp.CopyFieldValue  (""Unit Price"",   ""COND_VALUE"");
                 				 		oSimItemComp.CopyFieldValue  (""Adjusted List Price"",   ""COND_VALUE"");
										oSimItemComp.CopyFieldValue  (""Net Price"",   ""COND_VALUE""); //nbc 7.8.2 SAP 4x Net Price										
										oSimItemComp.CopyFieldValue     (""NRC CxTotal"", ""CONDVALUE"");
										}
										else
										{
										var sNetPrice = iCondComp.GetFieldValue (""COND_VALUE"");
										var netPrice = sNetPrice /10;
										var netVal = netPrice * qtyReq;
										oSimItemComp.SetFieldValue    (""Fix Price Flag"", ""Y"" );
										oSimItemComp.SetFieldValue    (""Net Price"",      	netPrice);
										oSimItemComp.SetFieldValue     (""NRC CxTotal"", netVal);
										}
                 						}
                 					else
                 						{ netValue = (iCondComp.GetFieldValue (""CONDVALUE""));
                 			 	  		if (netValue != 0)
                 			 		 		{netPrice = (netValue / qtyReq); 
                 			 		 		if (fixPrice != ""X"")
            								{ 
                 			 		  		oSimItemComp.SetFieldValue  (""Unit Price"",  netPrice);
               	 			 	      		oSimItemComp.SetFieldValue  (""Adjusted List Price"",  netPrice); 
											oSimItemComp.SetFieldValue  (""Net Price"",  netPrice); //nbc 7.8.2 SAP 4x Net Price
											oSimItemComp.CopyFieldValue     (""NRC CxTotal"", ""CONDVALUE"");
											}
											else
											{
											var sNetPrice = iCondComp.GetFieldValue (""COND_VALUE"");
											var netPrice = sNetPrice /10;
											var netVal = netPrice * qtyReq;
											oSimItemComp.SetFieldValue    (""Fix Price Flag"", ""Y"" );
											oSimItemComp.SetFieldValue    (""Net Price"",      	netPrice);
											oSimItemComp.SetFieldValue     (""NRC CxTotal"", netVal);
											}
               	 			 	      		}
               	 			 	 		}
               	 		 		}
               	 	if ((iCondComp.GetFieldValue (""COND_TYPE"") == ""KF00""))
                 		{
                 		if (fixPrice != ""X"")
            			{
                 		 oSimItemComp.CopyFieldValue  (""Freight Amount"",   ""CONDVALUE"");
                 		 }
                 		 else
                 		 {
                 		 oSimItemComp.SetFieldValue  (""Freight Amount"",   ""0"");
                 		 }
               	 		}
               	 	if ((iCondComp.GetFieldValue (""COND_TYPE"") == ""UTXJ""))
                 		{
                 		 oSimItemComp.CopyFieldValue  (""Tax Amt"",   ""CONDVALUE"");
               	 		}
           } //if
           } //while

            // Read ""ORDER_SCHEDULE_EX"" component
            iSchedItemComp = iSimExportComp.GetIntComp   (""ORDER_SCHEDULE_EX"");
            oSchedItemComp = oSimItemComp.CreateIntComp (""Quote - SAP 4x Schedule Line Item"", false);
			var firstScheduleLine = 1;
            while (iSchedItemComp.NextRecord ())
             {
               var itemnum2  = iSchedItemComp.GetFieldValue (""ITM_NUMBER"");
               var schednum = iSchedItemComp.GetFieldValue (""SCHED_LINE"");
               var schedQty = iSchedItemComp.GetFieldValue (""REQ_QTY"");
               var sSchedQty = schedQty * 1000;
               var intId;
               if (itemnum2 == itemnum)
               {
                oSchedItemComp.NewRecord ();
                oSchedItemComp.SetCopySource  (iSchedItemComp);
                intId = inputId + ""-"" + itemnum2 + ""-"" + schednum;
                oSchedItemComp.SetFieldValue (""Integeration ID"",             intId);
                // oSchedItemComp.CopyFieldValue (""Required Qty"",                   ""REQ_QTY"");
                oSchedItemComp.SetFieldValue (""Required Qty"",                   sSchedQty);
                oSchedItemComp.SetFieldValue (""Schedule Line No"",     schednum);
                oSchedItemComp.SetFieldValue  (""Item Line No"",     itemnum);
                oSchedItemComp.SetFieldValue  (""Quote Id"",     inputId);
                oSchedItemComp.CopyFieldValue (""Confirmed Date"",           ""GI_DATE"");
                oSchedItemComp.CopyFieldValue (""Confirmed Qty"",               ""CONFIR_QTY"");
                var reqDate = iSchedItemComp.GetFieldValue ( ""REQ_DATE"");
                oSchedItemComp.SetFieldValue (""Required Delivery Date"" ,          reqDate);
                // Checking for First Schedule Line, as it contains actual Req Delivery Date and setting it for Item Req Delv Date
                if ( firstScheduleLine == 1 )
                	{
                		oSimItemComp.SetFieldValue    (""Requested Delivery Date"",      reqDate );
                	}
                firstScheduleLine++;
                }
             }
         }
      }
   }
}
function Simulate77SAP47Quote_SiebelToBAPI (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   Quote Object (SAP 47 Quote)
    *     Quote (Quote)
    *       Quote Line Item (item)
    *			Quote Line Item attribute Comp
    *
    * Output Object's Integration Components:
    *   BAPI Import Object (SAP 47 Order - Create SAP Order (BAPI Import))
    *     Import Parameters
    *       ORDER_PARTNERS
    *       ORDER_ITEMS_IN
    *       ORDER_PARTNERS
    *		ORDER_CFGS_INST
    *		ORDER_CFGS_REF
    *		ORDER_CFGS_VALUE
    */

   /*
    * Set up EAI Lookup maps
    */
   var orderTypeLM = EAIGetValueMap (""SAP Order Types"",     	""Siebel Outbound"");
   var incotermsLM = EAIGetValueMap (""SAP Incoterms"",      		""Siebel Outbound"");
   var payTermsLM  = EAIGetValueMap (""SAP Payment Terms"",   	""Siebel Outbound"");
   var currencyLM  = EAIGetValueMap (""SAP Currency Code"",		""Siebel Outbound"");
   var cCardLM	   = EAIGetValueMap (""SAP Credit Card Type"",	""Siebel Outbound"");
   var uomLM       = EAIGetValueMap (""SAP Unit of Measure"", 	""Siebel Outbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iQuoteObj;  // Quote object instance
   var iQuoteComp; // Quote
   var iItemComp;  // Quote Line Item
   var iAttrComp;  // Item Attribute Component

   // Store inputId to be denormalized to all RFC table rows
   //var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oCFDOrderObj;        // BAPI Order instance
   var oCFDImportComp;      // BAPI Import parameters
   var oCFDItemComp;        // BAPI Order Item
   var oCFDSchedComp;		// For EPrice CR
   var oCFDPartnerComp;     // BAPI Order Partners
   var oCFDCardComp;     	// BAPI Card Component
   var oCFDCfgInstComp;
   var oCFDCfgValComp;
   var oCFDCfgRefComp;


   /*
    * Find and create top-level integration object
    */
   iQuoteObj    = inputMsg.GetIntObj (""SAP 47 Quote"");
   oCFDOrderObj = outputMsg.CreateIntObj (""SAP 47 Order - Simulate SAP Order (BAPI Input)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iQuoteObj.NextInstance ())
   {
      /*
       * Create ""Order"" object in output message
       */
      oCFDOrderObj.NewInstance ();

      /*
       * Read ""Order"" component
       */
      iQuoteComp     = iQuoteObj.GetPrimaryIntComp (""Quote"");
      oCFDImportComp = oCFDOrderObj.CreatePrimaryIntComp (""Import Parameters"");
     
      if (iQuoteComp.NextRecord ())
      {
        
         /*
          * Write ""Import Parameters"" component
          */
         oCFDImportComp.NewRecord ();
         oCFDImportComp.SetCopySource  (iQuoteComp);
         
         var priceList =  null;
         priceList = iQuoteComp.GetFieldValue (""Price List Id"");
         var currencyCode = currencyLM.Translate (iQuoteComp.GetFieldValue (""Currency Code""));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DOC_NUMBER"", null);
         //var docType = TheApplication().InvokeMethod (""LookupValue"", ""FS_ORDER_TYPE"", ""Sales Order"");
         //oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DOC_TYPE"",   orderTypeLM.Translate (docType));
		 oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DOC_TYPE"",   ""TA"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-CURRENCY"",  currencyCode );
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_ORG"",  ""SAP Sales Organisation (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DISTR_CHAN"", ""SAP Distribution Channel (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DIVISION"",   ""SAP Division (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_NO"",       ""Quote Number"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_DATE"", ""Requested Ship Date"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REF_1"",      ""Quote Number"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PRICE_DATE"", ""Start Date"" );
		  // Set NAME only if ""Contact Id"" is not null.
         if (iQuoteComp.GetFieldValue (""Contact Id"") != null)
         {
            oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-NAME"", EAIFormatPersonName (iQuoteComp.GetFieldValue (""Contact First Name""),
                                                                                       iQuoteComp.GetFieldValue (""Contact Last Name"")));
         }         
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-TELEPHONE"",  ""Contact Work Phone #"");
		 if (iQuoteComp.GetFieldValue (""Requested Ship Date"") != """")
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",   ""Requested Ship Date"");
               
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",       ""Start Date"");
            }
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DATE_TYPE"",  ""1"");
                  
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-INCOTERMS1"", incotermsLM.Translate (iQuoteComp.GetFieldValue(""Freight Terms"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-INCOTERMS2"", ""Freight Terms Info"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-PMNTTRMS"",   payTermsLM.Translate (iQuoteComp.GetFieldValue (""Payment Term"")));
         
         if (iQuoteComp.GetFieldValue (""Partial Ship"") != ""Y"")
            {
               oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       ""X"");
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       null);
            }
    

         /*
          * Write ""ORDER_PARTNERS"" component  
          */
                  
         oCFDPartnerComp = oCFDImportComp.CreateIntComp (""ORDER_PARTNERS"", oCFDImportComp);

         // Sold to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iQuoteComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""AG"");

         var soldtoparty =  iQuoteComp.GetFieldValue (""Account Integration Id"");
         var array = soldtoparty.split("":"");
         var AccountIntId = array[0];
         
         
         oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId);

         // Ship To partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iQuoteComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""WE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Ship To Account Integration Id"");

         // Payer partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iQuoteComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RG"");
         var payerId = iQuoteComp.GetFieldValue (""Payer Account Integration Id"");
         if (payerId == null || payerId == """")
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId );
         	}
         else
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", payerId );
         	}
         
         // Bill to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iQuoteComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Bill To Account Integration Id"");

		/*
		 * Read and update Credit Card Info
		 *
		 */
		 var ccType = cCardLM.Translate (iQuoteComp.GetFieldValue (""Credit Card Name""));
		 var ccNum = iQuoteComp.GetFieldValue ( ""Credit Card Number"");
		 if ( ccNum != null && ccNum != """" )
		 
		 	{
		 		oCFDCardComp = oCFDImportComp.CreateIntComp (""ORDER_CCARD"");
		 		oCFDCardComp.NewRecord();
		 		oCFDCardComp.SetCopySource (iQuoteComp);
		 		var cardExpDate = iQuoteComp.GetFieldValue ( ""Credit Card Expiration Date"");
		 		if ( cardExpDate == null || cardExpDate == """" )
		 			{
		 				var cardExpYear	= iQuoteComp.GetFieldValue (""Credit Card Expiration Year"" );
		 				var cardExpMonth  = iQuoteComp.GetFieldValue (""Credit Card Expiration Month"" );
		 				var cardExpDay;
		 				
		 				var nMonth = ConvertMonth (cardExpMonth);
		 				cardExpDay = GetDaysInAMonth(nMonth, cardExpYear);
		 				var cardExpFullDate = nMonth + ""/"" + cardExpDay + ""/"" + cardExpYear + "" 00:00:00"";
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpFullDate );
		 			}
		 		else
		 			{
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpDate );
		 			}
		 		oCFDCardComp.SetFieldValue		(""CC_TYPE"", 		ccType);
		 		oCFDCardComp.SetFieldValue		(""CC_NUMBER"", 		ccNum );
		 		oCFDCardComp.CopyFieldValue		(""CC_NAME"", 		""Credit Card Holder"" );
				//oCFDCardComp.CopyFieldValue		(""AUTHAMOUNT"", 		""Credit Card Transaction Amount"" );
		 		oCFDCardComp.SetFieldValue		(""CURRENCY"", 		currencyCode );
		 	}
         /*
          * Read ""Order Line Item"" Integration Component
 	      */
 	      
         iItemComp    = iQuoteComp.GetIntComp        (""Quote Item"");
         oCFDItemComp = oCFDImportComp.CreateIntComp (""ORDER_ITEMS_IN"", oCFDImportComp);
         oCFDCfgValComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_VALUE"", oCFDImportComp);       
         oCFDCfgRefComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_REF"", oCFDImportComp);         
         oCFDCfgInstComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_INST"", oCFDImportComp);
		 // For EPrice CR
         oCFDSchedComp = oCFDImportComp.CreateIntComp (""ORDER_SCHEDULE_IN"", oCFDImportComp);                  
         while (iItemComp.NextRecord ())
         {
/*           var itemNum =  iItemComp.GetFieldValue (""Line Number"");
            var Posex_Hilfsvariable =""00000"";

            Clib.sprintf(Posex_Hilfsvariable,""%06.6s"",iItemComp.GetFieldValue(""Line Number""));
            var itemNumber = Posex_Hilfsvariable;      
            var parentItemId =  iItemComp.GetFieldValue (""Parent Quote Item Id"");                  
            if((parentItemId == 0) || (parentItemId ==""""))
            {*/
            oCFDItemComp.NewRecord ();
            oCFDItemComp.SetCopySource  (iItemComp);
            var itemNumber = iItemComp.GetFieldValue(""Line Number"");
            oCFDItemComp.SetFieldValue (""ITM_NUMBER"",     itemNumber);
            //oCFDItemComp.SetFieldValue (""HG_LV_ITEM"",     ""000000"");
            oCFDItemComp.CopyFieldValue (""PO_ITM_NO"",      ""Line Number"");
            oCFDItemComp.CopyFieldValue (""MATERIAL"",       ""Product Integration Id"");
            
            if (iItemComp.GetFieldValue (""Partial Ship"") != ""Y"")
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""C"");
                }
            else
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""D"");
                }
            oCFDItemComp.CopyFieldValue (""PLANT"",          ""Source Inventory Location"");
            oCFDItemComp.SetFieldValue  (""SALES_UNIT"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
            oCFDItemComp.CopyFieldValue (""SHORT_TEXT"",     ""Part Number"");
            // For EPrice CR
            //oCFDItemComp.CopyFieldValue (""REQ_DATE"",       ""Requested Delivery Date"");
            //oCFDItemComp.SetFieldValue  (""DATE_TYPE"",      ""1"");
            //oCFDItemComp.CopyFieldValue (""REQ_QTY"",        ""Quantity Requested"");
	            
            var siebelPrice = iItemComp.GetFieldValue ( ""Unit Price"" );
            if ((  siebelPrice != 0) || (  priceList != """" ))
            
            {
             	oCFDItemComp.SetFieldValue  (""CD_TYPE2"",      ""PN00"");
            	oCFDItemComp.SetFieldValue  (""PURCH_NO_C"",     ""X"");
                oCFDItemComp.CopyFieldValue (""CD_VALUE2"",     ""Item Price"");
            	oCFDItemComp.SetFieldValue  (""CD_P_UNT2"",     ""1"");
            	oCFDItemComp.SetFieldValue  (""CD_D_UNT2"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
            	
             	oCFDItemComp.SetFieldValue  (""CD_TYPE3"",      ""KF00"");
                oCFDItemComp.CopyFieldValue (""CD_VALUE3"",     ""Freight Amount"");
                oCFDItemComp.SetFieldValue  (""CD_P_UNT3"",     ""1"");
            	oCFDItemComp.SetFieldValue  (""CD_D_UNT3"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));

  


            }
            else
            {
             	oCFDItemComp.SetFieldValue  (""CD_TYPE2"",      ""PR00"");
            }
            
            //For EPrice CR
            oCFDSchedComp.NewRecord ();
            oCFDSchedComp.SetCopySource  (iItemComp);
            oCFDSchedComp.SetFieldValue (""DATE_TYPE"",     ""1"");
            oCFDSchedComp.CopyFieldValue (""REQ_DATE"",     ""Due Date"");
            oCFDSchedComp.CopyFieldValue (""REQ_QTY"",      ""Quantity Requested"");
            oCFDSchedComp.CopyFieldValue (""ITM_NUMBER"",      ""Line Number"");
            oCFDSchedComp.CopyFieldValue (""SCHED_LINE"",      ""0001"");
            
            
                // oCFDItemValComp.SetFieldValue (""ITM_NUMBER"",     itemNumber);                             	
}  // end if condition for Parent item num

/*            oCFDCfgRefComp.NewRecord ();
            oCFDCfgRefComp.SetCopySource  (iItemComp);
            oCFDCfgRefComp.SetFieldValue (""POSEX"",     itemNumber);
            oCFDCfgRefComp.SetFieldValue (""CONFIG_ID"",     itemNumber);            
            oCFDCfgRefComp.SetFieldValue (""ROOT_ID"",     itemNumber);            


            oCFDCfgInstComp.NewRecord ();
            oCFDCfgInstComp.SetCopySource  (iItemComp);
            oCFDCfgInstComp.SetFieldValue (""INST_ID"",     itemNumber);
            oCFDCfgInstComp.SetFieldValue (""CONFIG_ID"",   itemNumber);            
            oCFDCfgInstComp.SetFieldValue (""OBJ_TYPE"",     ""MARA"");            
            oCFDCfgInstComp.SetFieldValue (""OBJ_KEY"",     ""MATERIAL"");            
            oCFDCfgInstComp.SetFieldValue (""QUANTITY"",     ""1"");            

*/
           
      
                    /*
          * Read ""Order Line Item Attribute Value"" Integration Component
          */
/*         iAttrComp    = iItemComp.GetIntComp        (""Quote Item XA"");

         
         while (iAttrComp.NextRecord ())
         {

            oCFDCfgValComp.NewRecord ();
            oCFDCfgValComp.SetCopySource  (iAttrComp);
            oCFDCfgValComp.CopyFieldValue (""CHARC"",     ""Name"");
            oCFDCfgValComp.CopyFieldValue (""VALUE"",     ""Value"");
            oCFDCfgValComp.CopyFieldValue (""CHARC_TXT"", ""Description"");
            oCFDCfgValComp.SetFieldValue (""INST_ID"", itemNumber);
            oCFDCfgValComp.SetFieldValue (""CONFIG_ID"", itemNumber);
		}
  */   
       //  } //order items read
      }
      
   }
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", d.getMonth()+1, d.getDate(), d.getFullYear(), d.getHours(), d.getMinutes(), d.getSeconds()); 
}
"/**********************************************************************************************************
Purpose 		: Function called from Workflow Process  to  change   the  status of exported   numbers  from PRE-ACTIVATING  to AVAILABLE 
after numbers  are sucessufully Pre-Activated   in  the provisioning system
Author 			: KALYANA TANGIRALA
Date 			: 19-MAY-2006
Input			: Input Property set includes  BatchNo  of  Pre-Activated   NO's  in  the  provisioning system
Outputs		 	: Output property set contianing the err message
Change Log		: Changes made to the function
***********************************************************************************************************
Date(DD/MM/YYYY)	| By		| Description of Change																		
-----------------------------------------------------------------------------------------------------------
19/05/2006		1.0   | Tech Mahindra,KT	| Creation
20060706       | 1.1  | Prasad              | Siebel ES SCR1, Objects Destroyed
20060719       | 1.2  | Kalyana             | Changed Seach Specifications to process Numbers whose Pre-Activation  is ""Failed"" earlier 
20060804       | 1.3  | Kalyana             | Siebel ES SCR 20060803 , Objects Destroyed
----------------------------------------------------------------------------------------------------------*/

function ChangeStatus(BatchNo)
{
	//var BatchNo 	         = Inputs.GetProperty(""BatchNo"");
    var blnIsRecord			 = false; 
	var intCount 			 = 0;
    var boAUCRegistration 	 = TheApplication().GetBusObject(""RMS AUC Registration"");
	//below 1.3 
	//KT 20060804 commented this line  because this  object  is not required
    //var bcAUCRegistration	 = boAUCRegistration.GetBusComp(""RMS AUC Registration"");
	//above 1.3
	var bcAUCNumberMaster 	 = boAUCRegistration.GetBusComp(""RMS AUC Number Master"");	
	var bcAUCNumMstrQry    	 = boAUCRegistration.GetBusComp(""RMS AUC Number Master Query"");
    var bcAUCSIMNumber		 = boAUCRegistration.GetBusComp(""RMS AUC SIM Number"");
	var bcEbc                = boAUCRegistration.GetBusComp(""RMS AUC IMSI  Pre Activation EBC"");
	var bcCnct				 = boAUCRegistration.GetBusComp(""RMS NM Association Number Type Display"");
    var blnIsEBc      	     = false;
    var blnIsCnct			 = false;
    var strErrVal 			= """";
    var strSearchExp        = """";
	var strNumberStatus    = "" "";
	var AssociateId			= """";
  //var strStatus		    = TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""REGISTERED"");
	var Inputs =TheApplication().NewPropertySet();
    var Outputs =TheApplication().NewPropertySet();
	try   {
			with (bcAUCNumMstrQry){
			SetViewMode(AllView);
			ActivateField(""Number String"");
			ActivateField(""AUC Reg Id"");
			ActivateField(""Type Identifier"");
			ActivateField(""Status"");
			//ActivateField(""Is Pre Activated"");
			ActivateField(""PreActivation Id"");
			ActivateField(""Assoc Start Id"");
		    }
	        with(bcEbc) {
			ActivateField(""Batch No"");
			//ActivateField(""Status"");
			//ActivateField(""ICC ID"");
			ActivateField(""Clarity Response Code"");
			ActivateField(""IMSI"");
			ClearToQuery();
			strSearchExp =    strSearchExp +""[Batch No] ='""+BatchNo+""'""; 
            strSearchExp  =     ""(""+strSearchExp +  "" AND "" + ""([Clarity Response Code] = '""+""00000'""+"" OR [Clarity Response Code] ='""+""00001'))"";
			ExecuteQuery(ForwardOnly);
			SetSearchExpr(strSearchExp);
			//SetSearchSpec(""Response Code"",""<>''"");
			ExecuteQuery(ForwardOnly);
			blnIsEBc = FirstRecord();				
	        }  // Eno  of bcEbc
		    //below 1.2
			strSearchExp = """";
			//above 1.2
			while(blnIsEBc) {
			//var IMSItemp = bcEbc.GetFieldValue(""IMSI"");
			//var ICCIDtemp = bcEbc.GetFieldValue(""ICC ID"");
			//var StrStatus = bcEbc.GetFieldValue(""Status"");
			var StrResponseCode = bcEbc.GetFieldValue(""Clarity Response Code"");
			//if (StrStatus == ""REGISTERED"")
			if (StrResponseCode == ""00000"")
			{
				strNumberStatus = TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE"");
			}
			//if (StrStatus == ""FAILED"")
			if (StrResponseCode == ""00001"")
			{
				strNumberStatus = TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""FAILED"");
			}
			with (bcAUCNumMstrQry)
	        {
				ClearToQuery();
				SetViewMode(AllView);
		    	SetSearchSpec(""Number String"",bcEbc.GetFieldValue(""IMSI""));
				SetSearchSpec(""PreActivation Id"",BatchNo);
				bcAUCNumMstrQry.ExecuteQuery(ForwardOnly);
				blnIsRecord = bcAUCNumMstrQry.FirstRecord();
				AssociateId = """";
				if(blnIsRecord)
				{
					AssociateId = bcAUCNumMstrQry.GetFieldValue(""Assoc Start Id"");
				}
				if(AssociateId != """" ) {
					ClearToQuery();
					//below 1.2 
					//Changed Seach Specifications to process Numbers whose Pre-Activation  is ""Failed"" earlier 
					//SetSearchSpec(""Assoc Start Id"",AssociateId);
					//SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""PRE-ACTIVATING""));
					strSearchExp  =    strSearchExp +""[Assoc Start Id] ='""+AssociateId+""'""; 
                    strSearchExp  =    ""(""+strSearchExp+  "" AND "" + ""([Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""PRE-ACTIVATING"")+""'"";
					strSearchExp  =    strSearchExp + "" OR [Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""FAILED"")+""'""+""))"";
					SetSearchExpr(strSearchExp);
					//above 1.2
					ExecuteQuery(ForwardOnly);
					blnIsRecord = FirstRecord();
					while(blnIsRecord)
					{
						SetFieldValue(""Status"",strNumberStatus);
						//bcAUCNumMstrQry.SetFieldValue(""Is Pre Activated"",""Y"");
						WriteRecord();
						blnIsRecord = NextRecord();
					}
					//update status in Number association concat table
					with (bcCnct) {
					SetViewMode(AllView);
					ActivateField(""Status"");
					ClearToQuery()
					//below 1.2
					//SetSearchSpec(""Assoc Start Id"",AssociateId);
					//SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""PRE-ACTIVATING""));
					SetSearchExpr(strSearchExp);
					//above 1.2
					ExecuteQuery(ForwardOnly);
					blnIsCnct = FirstRecord();
					while(blnIsCnct) {
					SetFieldValue(""Status"",strNumberStatus);
					WriteRecord();
					blnIsCnct = NextRecord();
						}	
					}
				    with(bcAUCSIMNumber){	
					SetViewMode(AllView);
					ActivateField(""Status"");
					ClearToQuery();
					//below 1.2
					//SetSearchSpec(""Assoc Start Id"",AssociateId);
					//SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""PRE-ACTIVATING""));
					SetSearchExpr(strSearchExp);
					//above 1.2
					ExecuteQuery(ForwardOnly);
					var blnIsSimNumber = FirstRecord();
					while(blnIsSimNumber)
					{
					SetFieldValue(""Status"",strNumberStatus);
					WriteRecord();
					blnIsSimNumber = NextRecord();
					}
					}
			        }
			        } // End  of with (bcAUCNumMstrQry)
			
			
			/*bcAUCNumMstrQry.SetFieldValue(""Status"",strNumberStatus);
			bcAUCNumMstrQry.WriteRecord();
			//blnIsRecord = bcAUCNumberMaster.NextRecord();
			ClearToQuery();
			SetSearchSpec(""AUC Reg Id"",BatchNo);
			SetSearchSpec(""Number String"",ICCIDtemp);
			ExecuteQuery(ForwardOnly);
			blnIsRecord = bcAUCNumMstrQry.FirstRecord();
			/*if(!blnIsRecord)
			{
			// some code
			}*/
			/*bcAUCNumMstrQry.SetFieldValue(""Status"",strNumberStatus);
			bcAUCNumMstrQry.WriteRecord();*/
			//below 1.2 
			strSearchExp = """";
			//above 1.2
			blnIsEBc = bcEbc.NextRecord(); 
        }// End  of 
        
		//Code for refreshing business component
		Inputs.SetProperty(""Business Object Name"",""RMS AUC Registration"");
		Inputs.SetProperty(""Business Component Name"",""RMS AUC Number Master"");
		var Rfrsh = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
		Rfrsh.InvokeMethod(""Refresh Business Component"",Inputs,Outputs);
//1.1 below, this refresh Buscomp BS should be removed at least from here !!!!
		Rfrsh = null;
//1.1 above
		return(CancelOperation);
        
	} catch(e) {
		throw(e);
        
    }   finally {
       
	    bcAUCNumMstrQry        = null;
		bcAUCNumberMaster      = null;
		bcAUCNumMstrQry        = null;		
        bcEbc                  = null;
//1.1 below
		bcCnct                 = null;
        bcAUCSIMNumber         = null;
//1.1 above
//below 1.3
	//	Inputs                 = null;
	//	Outputs                = null;
//above 1.3
		boAUCRegistration      = null;
    }
}
function PreActivateBatch(&Inputs,&Outputs)
{
    var boAUC 	 = TheApplication().GetBusObject(""RMS AUC Registration"");
	var bcAUC 	 = boAUC.GetBusComp(""RMS AUC Control Table EBC"");	
	var strSearchExp	=	"""";
	var blnIsRec		=	"""";

	try   
	{
		    with (bcAUC)
			{
				ActivateField(""Pre Act Batch Id"");
				ActivateField(""CRM Status"");
				ActivateField(""Clarity Status"");
				ActivateField(""Geneva Status"");
				ClearToQuery();
				strSearchExp	=	""[CRM Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""HCPT_AUC_STATUS"",""Complete"") + ""'""; 
				strSearchExp	+=	"" AND [Clarity Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""HCPT_AUC_STATUS"",""Complete"") + ""'""; 
//				strSearchExp	+=	"" AND [Geneva Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""HCPT_AUC_STATUS"",""COMPLETE"") + ""'""; 
				SetSearchExpr(strSearchExp);

				ExecuteQuery(ForwardOnly);
				blnIsRec = FirstRecord();				
			
				while(blnIsRec) 
				{
					SetFieldValue(""CRM Status"",TheApplication().InvokeMethod(""LookupValue"",""HCPT_AUC_STATUS"",""Processing AUC""));
					WriteRecord();

					Inputs.SetProperty(""BatchNo"",GetFieldValue(""Pre Act Batch Id""));
					ChangeStatus(Inputs, Outputs);

					SetFieldValue(""CRM Status"",TheApplication().InvokeMethod(""LookupValue"",""HCPT_AUC_STATUS"",""AUC Complete""));
					WriteRecord();
					blnIsRec= NextRecord();
				}
			}
					return(CancelOperation);	
	}
	catch(e)
	{
		TheApplication().RaiseErrorText(e.errText);
	}
	finally
	{
			Inputs	= null;
			Outputs	= null;
			boAUC	= null;
			bcAUC	= null;

	}
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060627       | 1.1  | Prasad | SiebelES#51 removed unnecessary code in PreCanInvoke, code is pasted below
	if(MethodName == ""ChangeStatus"") 
	{
		CanInvoke = ""TRUE"";
		return(CancelOperation);
	} 
	else
		return (ContinueOperation);
---------------+------+--------+----------------------------------------------
*/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
if (MethodName == ""PreActivateBatch"")
{
	PreActivateBatch(Inputs, Outputs);
	return(CancelOperation);
}
else
if (MethodName == ""ChangeStatus"") {
		ChangeStatus(Inputs.GetProperty(""BatchNo""));
    return(CancelOperation);
	}
	else {
		return (ContinueOperation);
	}
}
"/**********************************************************************************************************
Purpose 		: Function called from Workflow Process  to  change   the  status of exported   numbers  from REGISTERING  to AVAILABLE 
after numbers  are sucessufully registered   in  the provisioning system
Author 			: KALYANA TANGIRALA
Date 			: 19-MAY-2006
Input			: Input Property set includes  BatchNo  of  Registered   NO's  in  the  provisioning system
Outputs		 	: Output property set contianing the err message
Change Log		: Changes made to the function
***********************************************************************************************************
Date(DD/MM/YYYY)	| By		        | Description of Change																		
-----------------------------------------------------------------------------------------------------------
19/05/2006	   1.0  | Tech Mahindra,KT	| Creation
20060706     | 1.1  | Prasad            | Siebel ES SCR1, Objects Destroyed
20060719     | 1.2  | Kalyana           | Changed Seach Specifications to process Numbers whose Registration
										  is ""Failed"" earlier 
20060804	 |1.3   | Kalyana           | Siebel ES SCR 20060804, Objects Destroyed
----------------------------------------------------------------------------------------------------------*/

function ChangeStatus(BatchNo)
{
	//var BatchNo;
	//BatchNo 	         	= Inputs.GetProperty(""BatchNo"");
    var blnIsRecord			 = false; 
	var intCount 			 = 0;
    var boAUCRegistration 	 = TheApplication().GetBusObject(""RMS AUC Registration"");
//not used??
//	var bcAUCRegistration	 = boAUCRegistration.GetBusComp(""RMS AUC Registration"");
	var bcAUCNumberMaster 	 = boAUCRegistration.GetBusComp(""RMS AUC Number Master"");	
	var bcAUCNumMstrQry    	 = boAUCRegistration.GetBusComp(""RMS AUC Number Master Query"");
	var bcAUCSIMNumber		 = boAUCRegistration.GetBusComp(""RMS AUC SIM Number"");
	var bcEbc                = boAUCRegistration.GetBusComp(""RMS AUC EBC"");
	var bcCnct				 = boAUCRegistration.GetBusComp(""RMS NM Association Number Type Display"");
    var blnIsEBc      	     = false;
    var blnIsCnct			 = false;
    var strErrVal 			 = """";
    var strSearchExp         = """";
	var strNumberStatus      = "" "";
	var AssociateId			 = """";
//below 1.2	
	var strSearchExp1        = """";
//above 1.2
	
   //var strStatus		     = TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""REGISTERED"");
	
    try   {
	    with (bcAUCNumMstrQry)
	    {
			SetViewMode(AllView);
			ActivateField(""Number String"");
			ActivateField(""AUC Reg Id"");
			ActivateField(""Type Identifier"");
			ActivateField(""Status"");
			ActivateField(""Assoc Start Id"");
		}
		with(bcEbc)
	 	{
			ActivateField(""Batch No"");
			//ActivateField(""Status"");
			//ActivateField(""ICC ID"");
			ActivateField(""Response Code"");
			ActivateField(""IMSI"");
			ActivateField(""Request Id"");
			ClearToQuery();
			strSearchExp =    strSearchExp +""[Batch No] ='""+BatchNo+""'""; 
            strSearchExp  =     ""(""+strSearchExp +  "" AND "" + ""([Response Code] = '""+""00000'""+"" OR [Response Code] ='""+""00001'))"";
			SetSearchExpr(strSearchExp);
			//SetSearchSpec(""Response Code"",""<>''"");
			ExecuteQuery(ForwardOnly);
			blnIsEBc = FirstRecord();				
		}
		while(blnIsEBc) 
		{
			//var IMSItemp = bcEbc.GetFieldValue(""IMSI"");
			//var ICCIDtemp = bcEbc.GetFieldValue(""ICC ID"");
			//var StrStatus = bcEbc.GetFieldValue(""Status"");
			var StrResponseCode = bcEbc.GetFieldValue(""Response Code"");
			//if (StrStatus == ""REGISTERED"")
			if (StrResponseCode == ""00000"")
			{
				strNumberStatus = TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE"");
			}
			//if (StrStatus == ""FAILED"")
			if (StrResponseCode == ""00001"")
			{
				strNumberStatus = TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""FAILED"");
			}
			with (bcAUCNumMstrQry)
		    {
				AssociateId = """";
				AssociateId = bcEbc.GetFieldValue(""Request Id"");
				
//				ClearToQuery();
//				SetViewMode(AllView);
			    //SetSearchSpec(""AUC Reg Id"",BatchNo);
			    //bcAUCNumMstrQry.ExecuteQuery(ForwardOnly);
			    //SetSearchSpec(""Number String"",bcEbc.GetFieldValue(""IMSI""));
//			    SetSearchSpec(""Assoc Start Id"",AssociateId);
//			    ExecuteQuery(ForwardOnly);
//			    blnIsRecord = FirstRecord();
			    
//				if(blnIsRecord)
//				{
//					AssociateId = GetFieldValue(""Request Id"");
//				}
				//this to avoid changing of status of all numbers in the repository
				if(AssociateId != """") {
					ClearToQuery();
	                //below 1.2				
					//SetSearchSpec(""Assoc Start Id"",AssociateId);
					//SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""REGISTERING""));
					strSearchExp1  =    strSearchExp1 +""[Assoc Start Id] ='""+AssociateId+""'""; 
                    strSearchExp1  =    ""(""+strSearchExp1+  "" AND "" + ""([Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""REGISTERING"")+""'"";
					strSearchExp1  =    strSearchExp1 + "" OR [Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""FAILED"")+""'""+""))"";
					SetSearchExpr(strSearchExp1);
					//above 1.2
					ExecuteQuery(ForwardOnly);
					blnIsRecord = FirstRecord();
					while(blnIsRecord)
					{
						SetFieldValue(""Status"",strNumberStatus);
						WriteRecord();
						blnIsRecord = NextRecord();
					} // End of while(blnIsRecord)
					//update status in Number association concat table
					with (bcCnct) 
					{
						SetViewMode(AllView);
						ActivateField(""Status"");
						ClearToQuery()
						//SetSearchSpec(""Assoc Start Id"",AssociateId);
						//SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""REGISTERING""));
						SetSearchExpr(strSearchExp1);
						ExecuteQuery(ForwardOnly);
						blnIsCnct = FirstRecord();
						while(blnIsCnct)
						 {
							SetFieldValue(""Status"",strNumberStatus);
							WriteRecord();
							blnIsCnct = NextRecord();
						 }	// while(blnIsCnct)
					 }  //End of with (bcCnct)
				    with(bcAUCSIMNumber)
					{	
					SetViewMode(AllView);
					ActivateField(""Status"");
					ClearToQuery();
					//SetSearchSpec(""Assoc Start Id"",AssociateId);
					//SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""REGISTERING""));
					SetSearchExpr(strSearchExp1);
					ExecuteQuery(ForwardOnly);
					var blnIsSimNumber = FirstRecord();
					   while(blnIsSimNumber)
					   {
					   SetFieldValue(""Status"",strNumberStatus);
					   WriteRecord();
					   blnIsSimNumber = NextRecord();
					   }  //End of  while(blnIsSimNumber)
					}  //with(bcAUCSIMNumber)
     			    }  //if(AssociateId != """")
				    } // End  of with (bcAUCNumMstrQry)
					
			/*bcAUCNumMstrQry.SetFieldValue(""Status"",strNumberStatus);
			bcAUCNumMstrQry.WriteRecord();
			//blnIsRecord = bcAUCNumberMaster.NextRecord();
			ClearToQuery();
			SetSearchSpec(""AUC Reg Id"",BatchNo);
			SetSearchSpec(""Number String"",ICCIDtemp);
			ExecuteQuery(ForwardOnly);
			blnIsRecord = bcAUCNumMstrQry.FirstRecord();
			/*if(!blnIsRecord)
			{
			// some code
			}*/
			/*bcAUCNumMstrQry.SetFieldValue(""Status"",strNumberStatus);
			bcAUCNumMstrQry.WriteRecord();*/
			//below 1.2
			strSearchExp1 = """";
			//above 1.2
			blnIsEBc = bcEbc.NextRecord(); 
		} // End  of while(blnIsEBc)
		var Inputs =TheApplication().NewPropertySet();
	    var Outputs =TheApplication().NewPropertySet();
	    Inputs.SetProperty(""Business Object Name"",""RMS AUC Registration"");
	    Inputs.SetProperty(""Business Component Name"",""RMS AUC Number Master"");
	    var Rfrsh = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
	    Rfrsh.InvokeMethod(""Refresh Business Component"",Inputs,Outputs);
//1.1 below, this refresh Buscomp BS should be removed at least from here !!!!
	    Rfrsh = null;
//1.1 above	   
//1.3 below
 //		Inputs   = null;
//		Outputs  = null;
//1.3 above
	    return(CancelOperation);
    } catch(e) {
				
		bcAUCNumMstrQry        = null;
        bcAUCNumberMaster      = null;
		bcAUCNumMstrQry        = null;		
        bcEbc                  = null; 		
        boAUCRegistration      = null;
	//	throw(e);
    } finally {
		
		bcAUCNumMstrQry        = null;
		bcAUCNumberMaster      = null;
		bcAUCNumMstrQry        = null;		
        bcEbc                  = null; 
//1.1 below
		bcAUCSIMNumber         = null;
		bcCnct                 = null;
//1.1 above        
		boAUCRegistration      = null;	
    }
}
function RegisterBatch(&Inputs,&Outputs)
{
    var boAUC 	 = TheApplication().GetBusObject(""RMS AUC Registration"");
	var bcAUC 	 = boAUC.GetBusComp(""RMS AUC Registration Automation"");	
	var strSearchExp	=	"""";
	var blnIsRec		=	"""";

	try   
	{
		    with (bcAUC)
			{
				ActivateField(""Batch Id"");
				ActivateField(""Batch Status"");
				ClearToQuery();
				strSearchExp	=	""[Batch Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""HCPT_AUC_STATUS"",""COMPLETE"") + ""'""; 
				SetSearchExpr(strSearchExp);
				ExecuteQuery(ForwardOnly);
				blnIsRec = FirstRecord();				
			
				while(blnIsRec) 
				{
					SetFieldValue(""Batch Status"",TheApplication().InvokeMethod(""LookupValue"",""HCPT_AUC_STATUS"",""PROCESSING AUC""));
					WriteRecord();
					Inputs.SetProperty(""BatchNo"",GetFieldValue(""Batch Id""));
					ChangeStatus(Inputs, Outputs);
					SetFieldValue(""Batch Status"",TheApplication().InvokeMethod(""LookupValue"",""HCPT_AUC_STATUS"",""AUC COMPLETE""));
					WriteRecord();
					blnIsRec= NextRecord();
				}
			}
			return(CancelOperation);	
	}
	catch(e)
	{
		TheApplication().RaiseErrorText(e.errText);
	}
	finally
	{
			Inputs	= null;
			Outputs	= null;
			boAUC	= null;
			bcAUC	= null;

	}
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060627       | 1.1  | Prasad | SiebelES#51 removed unnecessary code in PreCanInvoke, code is pasted below
	if(MethodName == ""ChangeStatus"") 
	{
		CanInvoke = ""TRUE"";
		return(CancelOperation);
	} 
	else
		return (ContinueOperation);
-----------------------------------------------------------------------------------
*/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
if (MethodName == ""RegisterBatch"")
{
	RegisterBatch(Inputs, Outputs);
	return(CancelOperation);
}
else if (MethodName == ""ChangeStatus"") {
		//ChangeStatus(Inputs, Outputs);
		ChangeStatus(Inputs.GetProperty(""BatchNo""));
    return(CancelOperation);
	}
	else {
		return (ContinueOperation);
	}
}
"/***********************************************************************************************************
Date           | version| By        | Description of Change																		
-----------------------------------------------------------------------------------------------------------
20060727       1.0      | Kalyana   | Fuction  to  write new record   in RMS AUC Control Table EBC
20070722       1.1       |Kalyana   Added 3G Flg   
20080320		1.2 	|Ramakrishna | Added for New starterpack change
*/
function AddEntry(PreActBatchId,PackageType,Flg3G,PromotionCode,PackageName,PricePlanName)
{
var boAUCRegistration 	    = TheApplication().GetBusObject(""RMS AUC Registration"");
var bcControlEBC	        = boAUCRegistration.GetBusComp(""RMS AUC Control Table EBC"");
   with(bcControlEBC)
    {
        NewRecord(1);
		SetFieldValue(""Pre Act Batch Id"",PreActBatchId);
		SetFieldValue(""CRM Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_STATUS"",""Complete""));		
		//below 1.2
		SetFieldValue(""Clarity Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_STATUS"",""Pending""));		
		SetFieldValue(""Geneva Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_STATUS"",""Complete""));		
		SetFieldValue(""Batch Type"",""Pre Act"");		
		SetFieldValue(""Recent Pool Quantity"", ""0"");	
		SetFieldValue(""PackageName"",PackageName);
		SetFieldValue(""PricePlanName"",PricePlanName);
		SetFieldValue(""STCPackageType"",PackageType);
		//above 1.2
	    //below 1.1 
		SetFieldValue(""3G FLG"",Flg3G);
		//Above 1.1 
		//below 1.2
		SetFieldValue(""Promotion Code"",PromotionCode);
		//Above 1.2
		WriteRecord();
	}
     	bcControlEBC = null;
		boAUCRegistration = null;
}
function ExportBatch(BatchId)
{
		try
		{
			var boAUC	=	TheApplication().GetBusObject(""RMS AUC Registration"");
			var bcAuto	=	boAUC.GetBusComp(""RMS AUC Registration Automation"");
		    var strErrVal	=	"""";
		
			with(bcAuto)
		    {
		        NewRecord(1);
				SetFieldValue(""Batch Id"",BatchId);
				SetFieldValue(""Batch Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_STATUS"",""PENDING""));	
				SetFieldValue(""Batch Type"",""AUC"");		
				WriteRecord();
			}
		}
		catch(e)
		{
			strErrVal	=	e.errText;
//			strErrVal	+=	TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC010"");

			TheApplication().RaiseErrorText(strErrVal);
		}
		finally
		{
			bcAuto = null;
			boAUC = null;
		
			
		}
		return(strErrVal);

}
function ExtractIMSI(strConcatString,strConcatType)
{
	var arrIMSI 	= strConcatString.split ("" / "");
	var arrIMSIType	= strConcatType.split ("" / "");

	var bsSysPref	= TheApplication().GetService(""TECHM BS IF COMMON"");
	var psInp		= TheApplication().NewPropertySet();
	var psOut		= TheApplication().NewPropertySet();
	
	psInp.SetProperty(""RMS_IMSIL_SRCH_STR"","""");
	psInp.SetProperty(""RMS_IMSIR_SRCH_STR"","""");
	bsSysPref.InvokeMethod(""Get SysPref"",psInp,psOut);
	
	var strIMSIL	= psOut.GetProperty(""RMS_IMSIL_SRCH_STR"");
	var strIMSIR	= psOut.GetProperty(""RMS_IMSIR_SRCH_STR"");
	
	var iIMSIL		= 0;
	var iIMSIR		= 0;
	
	var strIMSIType		= """";
	var strIMSI			= """";
	
	for(var i = 0;i < getArrayLength(arrIMSIType);i++) {
		strIMSIType	= arrIMSIType[i];
		//strIMSI		= arrIMSI[i];
		
		if(strIMSIType.indexOf(strIMSIL) != -1) {
			iIMSIL++;
			if(strIMSI == """")
				strIMSI = arrIMSI[i];
			else
				strIMSI = strIMSI + ""/"" + arrIMSI[i];
		}
		if(strIMSIType.indexOf(strIMSIR) != -1) {
			iIMSIR++;
			if(strIMSI == """")
				strIMSI = arrIMSI[i];
			else
				strIMSI = strIMSI + ""/"" + arrIMSI[i];
		}
	}
	
	arrIMSI 	= null;
	arrIMSIType = null;
	
	if(strIMSIR == """") 
		iIMSIR = iIMSIL;
	
	if(iIMSIL == iIMSIR)
		return(strIMSI);
	else
		return(""FALSE"");
	
}
function GetSysPref(strPref)
{
	var bsSysPref	= TheApplication().GetService(""TECHM BS IF COMMON"");
	var psInp		= TheApplication().NewPropertySet();
	var psOut		= TheApplication().NewPropertySet();
	
	psInp.SetProperty(strPref,"""");
	
	bsSysPref.InvokeMethod(""Get SysPref"",psInp,psOut);
	
	return (psOut.GetProperty(strPref));

}
function PreActivateIMSI(&Inputs,&Outputs)
{
	var strSearchSpec = """";
	var strObjId = Inputs.GetProperty(""RowId"");
	var blnIsRecord = false; 
	var blnIsPprItm = false;
	var blnIsExported = false;
	var intCount = 0;
	var marrAssocStartId = new Array();
	var marrAssocStartId2 = new Array();
	var marrAssocStartId3 = new Array();
	var intReturn = ContinueOperation;
	var strErrVal = """";
	var strExportIMSI = """";
	var boAUCRegistration = TheApplication().GetBusObject(""RMS AUC Registration"");
	var bcAUCRegistration = boAUCRegistration.GetBusComp(""RMS AUC Registration"");
	var bcAUCPprItmNum = boAUCRegistration.GetBusComp(""RMS AUC Number Paper Item"");
	var bcAUCNumMstrQry = boAUCRegistration.GetBusComp(""RMS AUC Number Master Query"");
	var bcEbc = boAUCRegistration.GetBusComp(""RMS AUC IMSI  Pre Activation EBC"");
	var boSIMOrder = TheApplication().GetBusObject(""RMS SIM Order"");
	var bcSIMOrder = boSIMOrder.GetBusComp(""RMS SIM Order"");
	var bcCnct = boAUCRegistration.GetBusComp(""RMS NM Association Number Type Display"");
	var blnIsCnct = false;
	var bcSIMOrderLineNum = boAUCRegistration.GetBusComp(""RMS AUC SIM Number"");
	var bcAUCSIMNumber = boAUCRegistration.GetBusComp(""RMS AUC SIM Number"");
	var bcAucPreActivation =  boAUCRegistration.GetBusComp(""RMS AUC Pre Activation BC"");
	var blnIsSIMOrder = false;
	var blnIsSIMOrderLineNum = false;
	var strSearchExp = """";
	var PIN1temp = """";
	var PUK1temp = """";
	var PIN2temp = """";
	var PUK2temp = """";
	var POCtemp = """";
	var strPackageName	= """";
	var strPricePlanName	= """";
	var EndingNumber = """";
	var strIMSIRType = GetSysPref(""RMS_IMSIR_SRCH_ID"");
	marrAssocStartId[intCount] = marrAssocStartId2;
	marrAssocStartId[intCount][0] = marrAssocStartId3;
	try 
	{
		with(bcAUCRegistration) 
		{
			InvokeMethod(""SetAdminMode"",""TRUE"");
	        SetViewMode(AllView);
			WriteRecord();
			ActivateField(""Status"");
			ActivateField(""Action"");
			ActivateField(""Quantity"");
			ActivateField(""Id"");
			ActivateField(""MSISDN Start Number"");
			ActivateField(""Generated Number"");
			ActivateField(""Active Period"");
			ActivateField(""Balance"");
			ActivateField(""Expiry Date"");
			ActivateField(""Grace Period"");
			//ActivateField(""Package Name"");
			ActivateField(""Price Plan Name"");
			ActivateField(""Special Category Type"");
			ActivateField(""MSISDN End Number"");
			ClearToQuery();
			SetSearchSpec(""Id"",strObjId);
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();
			if(!blnIsRecord) 
			{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC005"");
				return(strErrVal);
			} 
			if(bcAUCRegistration.GetFieldValue(""Status"") == TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"",""COMPLETE""))
				blnIsExported = true;
	//	}
		with(bcAUCPprItmNum) 
		{
			ActivateField(""Paper Item Value"");
			ActivateField(""Order Line Number Detail Id"");
		}
        with(bcAUCNumMstrQry)
		{
			SetViewMode(AllView);
			ActivateField(""AUC Reg Id"");
			ActivateField(""Assoc Start Id"");
			ActivateField(""Status"");
			ActivateField(""Number Type Identifier Denorm"");
			ActivateField(""Number Without Delimiter"");  
			ActivateField(""PreActivation Id"");
			ActivateField(""Number"");
			ClearToQuery();
			if(blnIsExported) 
			{
				SetSearchSpec(""AUC Reg Id"",strObjId);
			} 
			else 
			{
				SetSearchSpec(""Number String"",bcAUCRegistration.GetFieldValue(""MSISDN Start Number""));
				SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));
				ExecuteQuery(ForwardOnly);
				blnIsRecord = FirstRecord();
				if(!blnIsRecord)
				{
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC007"");
					return(strErrVal);
				}
				if(blnIsRecord)
				{
					if(bcAUCNumMstrQry.GetFieldValue(""PreActivation Id"") !="""")
					{
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC007"");
					return(strErrVal);
					}
				}
				var MSISDNEndNumber = bcAUCRegistration.GetFieldValue(""MSISDN End Number"");
				if(MSISDNEndNumber != """")
				{
                ClearToQuery();
				SetSearchSpec(""Number String"",bcAUCRegistration.GetFieldValue(""MSISDN End Number""));
				SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));
				ExecuteQuery(ForwardOnly);
				blnIsRecord = FirstRecord();
			    if (blnIsRecord)
				{
				EndingNumber = GetFieldValue(""Number"");
				}
				}
				ClearToQuery();
				strSearchSpec = ""[Number Type Identifier Denorm] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"") + ""'"";
				strSearchSpec = strSearchSpec + "" AND [Number] >= '"" + bcAUCRegistration.GetFieldValue(""Generated Number"") + ""'"";
				if (EndingNumber != """")
				{
				strSearchSpec = strSearchSpec + "" AND [Number] <= '"" + EndingNumber + ""'"";
				}
                strSearchSpec = strSearchSpec + "" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE"") + ""'"";
				strSearchSpec = strSearchSpec + "" AND [Special Category Type] = '"" + bcAUCRegistration.GetFieldValue(""Special Category Type"") + ""'"";
				strSearchSpec = strSearchSpec + "" AND [PreActivation Id] IS NULL "";
				strSearchSpec = strSearchSpec + "" AND [Assoc Start Id] IS NOT NULL AND [Is Associated] = 'Y' "";				
				strSearchSpec = strSearchSpec + "" AND [Block Id] = '"" + bcAUCRegistration.GetFieldValue(""Block Id"") + ""' "";				
				SetSearchExpr(strSearchSpec);
			}
			ExecuteQuery(ForwardOnly);	
			blnIsRecord = FirstRecord();	
			while(blnIsRecord)
			{
				bcAUCPprItmNum.SetSearchSpec(""Assoc Start Id"",GetFieldValue(""Assoc Start Id""));
				bcAUCPprItmNum.ExecuteQuery(ForwardOnly);
				blnIsPprItm = bcAUCPprItmNum.FirstRecord();
				if(!blnIsPprItm)
				{
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC004"");
					return(strErrVal);
				}
				SetArray(marrAssocStartId,intCount,0 ,""?"",""?"",GetFieldValue(""Assoc Start Id"")); 
				if(blnIsPprItm) 
					SetArray(marrAssocStartId,intCount,1 ,""?"",""?"",bcAUCPprItmNum.GetFieldValue(""Paper Item Value"")); 
				else
					SetArray(marrAssocStartId,intCount,1 ,""?"",""?"","""");
				SetArray(marrAssocStartId,intCount,3 ,""?"",""?"",bcAUCPprItmNum.GetFieldValue(""Order Line Number Detail Id""));
				intCount = intCount + 1;
				if(intCount == bcAUCRegistration.GetFieldValue(""Quantity"")) 
					break;
				blnIsRecord = NextRecord();
				marrAssocStartId2 = new Array;
				marrAssocStartId[intCount] = marrAssocStartId2;
			}
			if(intCount < ToInteger(bcAUCRegistration.GetFieldValue(""Quantity"")))
			{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC003"",intCount);
				return(strErrVal);
			}
			for(var intCnt = 0; intCnt < intCount; intCnt++) 
			{
				if(!blnIsExported) 
				{
					with(bcAUCNumMstrQry) 
					{
						SetViewMode(AllView);
						ActivateField(""Status"");
						ActivateField(""AUC Reg Id"");
						ActivateField(""Number Type Identifier Denorm"");
						ActivateField(""Number String"");
						ActivateField(""Number String With Checksum"");
						ActivateField(""Type Id"");
						ClearToQuery();
						SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
						SetSearchSpec(""Number Type Identifier Denorm"",TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI""));
						ExecuteQuery(ForwardOnly);	
					}  // End  of with(bcAUCNumMstrQry)
					blnIsRecord = FirstRecord();
					if(blnIsRecord) 
					{
						with (bcAUCPprItmNum)
						{
							ActivateField(""Paper Item"");
							strSearchExp="""";
							strSearchExp = strSearchExp+""Assoc Start Id ='""+marrAssocStartId[intCnt][0]+""'"";
							//below 1.3
							strSearchExp  =     ""(""+strSearchExp +  "" AND "" + ""(Paper Item = '""+""PIN1'""+"" OR Paper Item ='""+""PUK1'""+"" OR Paper Item ='""+""PIN2'""+"" OR Paper Item ='""+""PUK2'))"";
							//above 1.3
							SetSearchExpr(strSearchExp);
							bcAUCPprItmNum.ExecuteQuery(ForwardOnly);	
							blnIsPprItm = bcAUCPprItmNum.FirstRecord();
						} // End  of  with (bcAUCPprItmNum)
					} // End of if if(blnIsRecord)
					while(blnIsPprItm)
					{
						if(bcAUCPprItmNum.GetFieldValue(""Paper Item"") == ""PIN1"")
						{
							PIN1temp = bcAUCPprItmNum.GetFieldValue(""Paper Item Value"");
							blnIsPprItm= bcAUCPprItmNum.NextRecord();
						}	
						if(bcAUCPprItmNum.GetFieldValue(""Paper Item"") == ""PUK1"")
						{
							PUK1temp = bcAUCPprItmNum.GetFieldValue(""Paper Item Value"");
							blnIsPprItm= bcAUCPprItmNum.NextRecord();
						}
						//below 1.3
						if(bcAUCPprItmNum.GetFieldValue(""Paper Item"") == ""PIN2"")
						{
							PIN2temp = bcAUCPprItmNum.GetFieldValue(""Paper Item Value"");
							blnIsPprItm= bcAUCPprItmNum.NextRecord();
						}	
						if(bcAUCPprItmNum.GetFieldValue(""Paper Item"") == ""PUK2"")
						{
							PUK2temp = bcAUCPprItmNum.GetFieldValue(""Paper Item Value"");
							blnIsPprItm= bcAUCPprItmNum.NextRecord();
						}	
						}
					with(bcSIMOrderLineNum)
					{
						SetViewMode(AllView);
						ActivateField(""Assoc Start Id"");
						ActivateField(""Order Id"");
						ClearToQuery();
						SetSearchSpec(""Assoc Start Id"",marrAssocStartId[intCnt][0]);
						bcSIMOrderLineNum.ExecuteQuery(ForwardOnly);
						blnIsSIMOrderLineNum = bcSIMOrderLineNum.FirstRecord();
					}  // end of  with 
					if(!blnIsSIMOrderLineNum)
					{//some code????
					}
					if (blnIsSIMOrderLineNum)
					{
						with (bcSIMOrder)
						{
							SetViewMode(AllView);
							ActivateField(""Transport Key"");
							ActivateField(""Id"");
							ClearToQuery();
							SetSearchSpec(""Id"",bcSIMOrderLineNum.GetFieldValue(""Order Id""));
							bcSIMOrder.ExecuteQuery(ForwardOnly);	
							blnIsSIMOrder= bcSIMOrder.FirstRecord();
							if(!blnIsSIMOrder)
							{//some code
							}					
							else
							{
								var Transkey = bcSIMOrder.GetFieldValue(""Transport Key"");
							}
						}//end  of   with
					} //  end  of  if 
					with(bcAUCNumMstrQry)
					{
						SetViewMode(AllView);
						ActivateField(""POC"");
						ClearToQuery();
						SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
						ExecuteQuery(ForwardOnly);
						blnIsRecord = FirstRecord();				
					} //  End  of with
					var ICCIDtemp 	= """";
					var IMSItemp	= """";
					var IMSIRtemp	= """";
					var MSISDNtemp	= """";
					while(blnIsRecord) 
					{
						var temp = bcAUCNumMstrQry.GetFieldValue(""Number Type Identifier Denorm"");
						if(temp == ""SIM"")
						{
							ICCIDtemp = bcAUCNumMstrQry.GetFieldValue(""Number String With Checksum"");//KT 26-06-2006
							blnIsRecord = NextRecord();
						}
						else if(temp == ""IMSI"")
						{
							if(bcAUCNumMstrQry.GetFieldValue(""Type Id"") == strIMSIRType) {
								if(IMSIRtemp == """") 
									IMSIRtemp = bcAUCNumMstrQry.GetFieldValue(""Number String"");
								else
									IMSIRtemp = IMSIRtemp + ""/"" + bcAUCNumMstrQry.GetFieldValue(""Number String"");
							} else {
								if(IMSItemp == """")
									IMSItemp = bcAUCNumMstrQry.GetFieldValue(""Number String"");
								else
									IMSItemp = IMSItemp + ""/"" + bcAUCNumMstrQry.GetFieldValue(""Number String"");
							}
							blnIsRecord = NextRecord();
						}
						else if(temp == ""MSISDN"")
						{
							MSISDNtemp = bcAUCNumMstrQry.GetFieldValue(""Number String"");
							POCtemp = bcAUCNumMstrQry.GetFieldValue(""POC"");
							blnIsRecord = NextRecord();
						}  //  END OF IF
					}  //  END  OF WHILE
					if (!blnIsRecord)
					{
						if(strPricePlanName == """")
							strPricePlanName = bcAUCRegistration.GetFieldValue(""Price Plan Name"");
						if(strPackageName == """")
							strPackageName	= bcAUCRegistration.GetFieldValue(""Package Name"");
						bcEbc.NewRecord(1);
						bcEbc.SetFieldValue(""IMSI"",IMSItemp);
						bcEbc.SetFieldValue(""SIM"",ICCIDtemp);
						bcEbc.SetFieldValue(""IMSIR"",IMSIRtemp);
						bcEbc.SetFieldValue(""MSISDN"",MSISDNtemp);
						bcEbc.SetFieldValue(""Ref Id"",bcAUCRegistration.GetFieldValue(""Id""));												
						bcEbc.SetFieldValue(""Batch No"",strObjId);	
						bcEbc.SetFieldValue(""Transport Key"",Transkey);
						//bcEbc.SetFieldValue(""Price Plan Name"",bcAUCRegistration.GetFieldValue(""Price Plan Name""));
						bcEbc.SetFieldValue(""Package Id"",bcAUCRegistration.GetFieldValue(""Package Name""));
						bcEbc.SetFieldValue(""Balance"",bcAUCRegistration.GetFieldValue(""Balance""));
						bcEbc.SetFieldValue(""Expiry Date"",bcAUCRegistration.GetFieldValue(""Expiry Date""));
						bcEbc.SetFieldValue(""Active Period"",bcAUCRegistration.GetFieldValue(""Active Period""));
						bcEbc.SetFieldValue(""Grace Period"",bcAUCRegistration.GetFieldValue(""Grace Period""));
						bcEbc.SetFieldValue(""PIN1"",PIN1temp);
						bcEbc.SetFieldValue(""PUK1"",PUK1temp);
						bcEbc.SetFieldValue(""PIN2"",PIN2temp);
						bcEbc.SetFieldValue(""PUK2"",PUK2temp);
						bcEbc.SetFieldValue(""Special Category"",bcAUCRegistration.GetFieldValue(""Special Category Type""));

						bcEbc.WriteRecord();
					}  // End  of !blnIsRecord
						// Updating  Number Status  to Pre-Activating  in Number Master
					
					with(bcAUCNumMstrQry) 
					{
						SetViewMode(AllView);
						ActivateField(""Number Type Identifier Denorm"");
						ClearToQuery();
						SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
						ExecuteQuery(ForwardOnly);
					}
					blnIsRecord = FirstRecord();
					while(blnIsRecord) 
					{
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""PRE-ACTIVATING""));
						SetFieldValue(""PreActivation Id"",strObjId);
						WriteRecord();				
						with(bcAucPreActivation)
						{
							ActivateField(""Auc Id"");
							ActivateField(""Number Id"");
							SetViewMode(AllView);
							ClearToQuery();
							if(bcAUCNumMstrQry.GetFieldValue(""Number Type Identifier Denorm"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"")){
								NewRecord(1);
								SetFieldValue(""Auc Id"",strObjId);
								SetFieldValue(""Number Id"",bcAUCNumMstrQry.GetFieldValue(""Id""));
								WriteRecord();
							}
						}
						blnIsRecord = NextRecord();
					}  
					with (bcCnct) 
					{
						SetViewMode(AllView);
						ActivateField(""Status"");
						ClearToQuery();
						SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
						ExecuteQuery(ForwardOnly);
						blnIsCnct = FirstRecord();
						while(blnIsCnct) 
						{
							SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""PRE-ACTIVATING""));
							WriteRecord();
							blnIsCnct = NextRecord();
						}	
					}
					with(bcAUCSIMNumber)
					{	
						SetViewMode(AllView);
						ActivateField(""Status"");
						ClearToQuery();
						SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
						ExecuteQuery(ForwardOnly);
						var blnIsSimNumber = FirstRecord();
						while(blnIsSimNumber)
						{
							SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""PRE-ACTIVATING""));
							WriteRecord();
							blnIsSimNumber = NextRecord();
						}
					}
				} // End  of  !blnIsExported
			}   // for loop
// END OF  EBC
			if(!blnIsExported) 
			{
				bcAUCRegistration.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"",""COMPLETE""));
				bcAUCRegistration.WriteRecord();
			}
		}
		if(strErrVal != """")
			Outputs.SetProperty(""ErrMessage"",strErrVal);

	InvokeMethod(""SetAdminMode"",""FALSE"");
	}//End of with
	}// end of try	
	catch(e)
	{
		if (strErrVal=="""") 
		{ 
			var vErr = e.toString();
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrMessage"",vErr);
		} 
		else 
		{
			Outputs.SetProperty(""ErrMessage"",strErrVal);
			Outputs.SetProperty(""ErrCode"",strErrVal);
		}
		return(strErrVal);
	}
	finally 
	{
		bcAUCNumMstrQry   	 = null;
		bcAUCPprItmNum		 = null;			           
		bcEbc                 = null;
		bcSIMOrder            = null;
		bcSIMOrderLineNum     = null;	
		bcCnct			     = null;
		bcAUCSIMNumber		 = null;
		bcAucPreActivation    = null;
		boSIMOrder            = null;	
		bcAUCRegistration     = null;					
		boAUCRegistration     = null;
		if(strErrVal != """")
		Outputs.SetProperty(""ErrMessage"",strErrVal);
		
		Outputs.SetProperty(""PackageName"",strPackageName);
		Outputs.SetProperty(""PricePlanName"",strPricePlanName);
	}	
	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS SIM Order QuerySubmittedBatches           * 
* Author        : Tech Mahindra                                            *
* Description   : This fucntion queries Submitted Starter Pack Batches and Exports batches aynchronously    .            *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 20070421  1.0       Kalyana     Created        
* **************************************************************************************/
function QuerySubmittedBatches(Inputs,Outputs)
{
 var ProcessingRecCount= 0;
    var MaxProcessingBatches =0;
 var RowId;
 var strErrVal = """"; 
 var blnIsRecord = false;
 var strSearchExp = """";
 var boAUCRegistration      = TheApplication().GetBusObject(""RMS AUC Registration"");
 var bcAUCRegistration     	= boAUCRegistration.GetBusComp(""RMS AUC Registration"");
 var boSystemPref    		= TheApplication().GetBusObject(""System Preferences"");   
 var bcSystemPref    		= boSystemPref.GetBusComp(""System Preferences"");
 var psInput     			= TheApplication().NewPropertySet();
 var psOutput				= TheApplication().NewPropertySet();
 try 
 {
 with(bcSystemPref)
 {
	 ActivateField(""Value"");
	 ClearToQuery();
	 SetSearchSpec(""Name"",""RMS_AUC_SP_MAX_BATCHES"");
	 ExecuteQuery(ForwardOnly);
 }
 if(bcSystemPref.FirstRecord())
 {
 	MaxProcessingBatches = bcSystemPref.GetFieldValue(""Value"");
 } 
 with(bcAUCRegistration)
 {
	DeactivateFields();
	ActivateField(""Status"");
	ClearToQuery();
	strSearchExp  = strSearchExp + ""[Action] = '""+TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_ACTION"", ""PRE-ACTIVATE"")+""'"";
	strSearchExp  = strSearchExp + "" AND [Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"")+""'"";
	SetSearchExpr(strSearchExp);
	ExecuteQuery(ForwardOnly);
	blnIsRecord = FirstRecord();
 }
   /* while(blnIsRecord)
    {
    	ProcessingRecCount = ProcessingRecCount+1;
 		blnIsRecord = bcAUCRegistration.NextRecord();
 	} */
 	ProcessingRecCount = bcAUCRegistration.CountRecords();
 	
	 if (ProcessingRecCount >= MaxProcessingBatches)
	 {
	 	return(strErrVal);
	 }
	 else
	 {
		 with(bcAUCRegistration)
		 {
			 //InvokeMethod(""SetAdminMode"",""TRUE"");
			 //SetViewMode(AllView);
			 ActivateField(""Status"");
			 ClearToQuery();
			 strSearchExp = """";
			 strSearchExp= strSearchExp + ""[Action] = '""+TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_ACTION"", ""PRE-ACTIVATE"")+""'"";
			 strSearchExp = strSearchExp + "" AND [Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""SUBMITTED"")+""'"";
			 SetSearchExpr(strSearchExp);
			 ExecuteQuery(ForwardOnly);
			 blnIsRecord = FirstRecord();
			 while(blnIsRecord)
			 {
				 RowId = GetFieldValue(""Id"");
				 //SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
				 //WriteRecord();
				 //Calling Asnchronous WFP 
				 /*var svc = TheApplication().GetService( ""Server Requests"" );
				 var compin = TheApplication().NewPropertySet();
				 Inputs.SetProperty(""Component"", ""WfProcMgr"");
				 Inputs.SetProperty(""Mode"", ""DirectDb"");
				 Inputs.SetProperty(""Method"", ""RunProcess"");
				 //compin.SetProperty(""RowId"",RowId);
				 compin.SetProperty(""ProcessName"", ""RMS AUC Pre-Activation Export Batch"");
				 compin.SetProperty(""WfProcMgr.RowId"",RowId);
				 compin.SetProperty(""RMSAUCPreActiavtionSync"",""N"");
				 Inputs.AddChild(compin);
				 svc.InvokeMethod(""SubmitRequest"",Inputs,Outputs);
				 compin= null;
				 svc   = null;*/
				 
				 var svc	= TheApplication().GetService(""Workflow Process Manager"");
				
				 psInput.SetProperty(""Object Id"",RowId);
				 psInput.SetProperty(""RowId"",RowId);
			
				 psInput.SetProperty(""ProcessName"",""RMS AUC Pre-Activation Export Batch Main"");
				 svc.InvokeMethod(""RunProcess"",psInput,psOutput);
				 
				 //End of WFP Call
				 ProcessingRecCount = ProcessingRecCount+1;
				 if(ProcessingRecCount==MaxProcessingBatches)
				 	break;
				 blnIsRecord= bcAUCRegistration.NextRecord();
				 psInput.Reset();
				 psOutput.Reset();
			 }
		 //InvokeMethod(""SetAdminMode"",""FALSE"");
	 	}//End of with(bcAUCRegistration)
	 } //End of else
 }//end of try
 
    catch(e)
	 {
		 var vErr = e.toString();
		 var vErrText = e.errText;
		 var vErrCode = e.errCode;
		 var vObjId = e.errCode;
		 var vObjName = ""RMS AUC Registration"";
		 var vFunc = ""QuerySubmittedBatches"";
		 var vObjType = ""Business Service"";
		 Outputs.SetProperty(""Error Code"",vErrCode);
		 Outputs.SetProperty(""Error Message"",vErrText);
		 TheApplication().log_exception(""Exception"",vErr,vErrCode,vObjId,vObjName,vFunc,vObjType);
	 }
	 finally 
	 {
		 bcAUCRegistration     = null;     
		 boAUCRegistration     = null;
		 bcSystemPref          = null;
		 boSystemPref          = null;
		 psInput			   = null;
		 psOutput			   = null;
	 } 
 return(strErrVal);
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
---------------+------+--------+----------------------------------------------
*/
function ReadOrderFile(&marrOrdCnct,&marrInputValues,&marrSIMIMSI,&marrNumTypes,&mpsPprId,&marrError,msFileName,msFilePath)
{
	
	var boNMNumberEnquiry = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNMNumberEnquiryForUpdate = boNMNumberEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	
	var boRMSSIMOrder = TheApplication().GetBusObject(""RMS SIM Order""); 
	var bcSIMOrderLineNumInfoforUpdate = boRMSSIMOrder.GetBusComp(""RMS SIM Order Line Num Info for Update"");
	
	var boAUCRegistration = TheApplication().GetBusObject(""RMS AUC Registration"");
	var bcAUCNumberPaperItem = boAUCRegistration.GetBusComp(""RMS AUC Number Paper Item"");
	
	var msInputString 	= """";
	var msTempString 	= """";
	var msTemp			= """";
	var msFile 			= msFileName;
	var mbError			= false;
	var miCnt 			= 0;
	var count			= 0;
	var marrOrdCnct 	= new Array();
	var marrTemp		= new Array();
	var blnIsRecord		= false;
	var strErrVal 		= """";
	
	try	{

	var mfpInputFile 	= Clib.fopen(msFile,""r"");
	while (msInputString != null) 
	{
		msInputString = Clib.fgets(mfpInputFile);

		if(msInputString == null) continue;
			var temp = msInputString.indexOf("";"");
            msInputString = msInputString.substring(0,msInputString.indexOf("";""));
	
		if(msInputString == """") continue;

//		if(Clib.isalpha(msInputString.charAt(0))) {
		
			var StrIMSI = msInputString.substring((msInputString.indexOf("",""))+1,msInputString.indexOf("":KI""));
			var StrKI	 = msInputString.substring((msInputString.indexOf(""KI,""))+3,msInputString.indexOf("":AD""));
			var StrAD   = msInputString.substring((msInputString.indexOf(""AD,""))+3,msInputString.indexOf("":ADKEY""));
			var StrADKEY = msInputString.substring((msInputString.indexOf(""ADKEY,""))+6,msInputString.indexOf("":FSETIND""));
			var StrFSETIND  = msInputString.substring(temp-1,temp);
//		}
		
		with(bcNMNumberEnquiryForUpdate)
		{
			SetViewMode(3);
			ActivateField(""Number String"");
			ActivateField(""Assoc Start Id"")
			ClearToQuery();
			SetSearchSpec(""Number String"",StrIMSI);
			ExecuteQuery();
			var StrNum = bcNMNumberEnquiryForUpdate.GetFieldValue(""Number String"");			
		if (FirstRecord())
		{
			var StrStatus = bcNMNumberEnquiryForUpdate.GetFieldValue(""Status"");		
		}	

		if( StrStatus == TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""UNREGISTERED""))
            var AssStId = bcNMNumberEnquiryForUpdate.GetFieldValue(""Assoc Start Id"");	
		else
	    	{	 
	      		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC006"");
	      		TheApplication().RaiseErrorText(strErrVal);	  
	     	} 
	    }	  

		with(bcSIMOrderLineNumInfoforUpdate)
		{
			SetViewMode(3);
			ActivateField(""SIM Id"");
			ActivateField(""Id"");
			ClearToQuery();
		    SetSearchSpec(""SIM Id"",AssStId);
			ExecuteQuery();
			var SIMId  = bcSIMOrderLineNumInfoforUpdate.GetFieldValue(""SIM Id"");
			
			if (FirstRecord())
			{
			    var StrId = bcSIMOrderLineNumInfoforUpdate.GetFieldValue(""Id"");
			}    
	  	 } // End of ( bcSIMOrderLineNumInfoforUpdate )
	  	 		
		with(bcAUCNumberPaperItem)
		{
		//Commented [RK][27/06/2006]
			//ActivateField(""Order Line Number Detail Id"");
			//ActivateField(""AUC_KI"");
			//ActivateField(""AUC_AD"");
			//ActivateField(""AUC_ADKEY"");
			//ActivateField(""AUC_FSETIND"");
		//Commented [RK][27/06/2006]
			NewRecord(1);
			SetFieldValue(""Order Line Number Detail Id"",StrId);
			SetFieldValue(""AUC_KI"",StrKI);
			SetFieldValue(""AUC_AD"",StrAD);
			SetFieldValue(""AUC_ADKEY"",StrADKEY);
			SetFieldValue(""AUC_FSETIND"",StrFSETIND);
			WriteRecord();
		} // End of ( bcAUCNumberPaperItem )
		
		with(bcNMNumberEnquiryForUpdate)
		{
		  	SetViewMode(AllView);
			ActivateField(""Status"");
			ActivateField(""Assoc Start Id"");
			ClearToQuery();
	
			SetSearchSpec(""Assoc Start Id"",SIMId);
			ExecuteQuery();

			var AssCId  = bcNMNumberEnquiryForUpdate.GetFieldValue(""Assoc Start Id"");
			
			blnIsRecord = FirstRecord();
			while(blnIsRecord)
    		{
		       SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));
		       WriteRecord();
		       bnIsRecord = bcNMNumberEnquiryForUpdate.NextRecord();
			}  
		} // End of ( bcNMNumberEnquiryForUpdate )
	}// End of ( bcNMNumberEnquiryForUpdate )
}
catch(e) 
	{
		marrTemp = null;
		mbError 	= true;
		throw(e);
	} 
	
	finally 
	{
//1.1 below
		bcAUCNumberPaperItem = null;
		bcNMNumberEnquiryForUpdate = null;
		bcSIMOrderLineNumInfoforUpdate = null;
		boAUCRegistration = null;
		boNMNumberEnquiry = null;
		boRMSSIMOrder = null;
//1.1 above
		if (mfpInputFile != null)
			Clib.fclose(mfpInputFile);		
	}
	
	if(mbError)
		return(!mbError);
//	else
//		return(ValidateOrder(marrInputValues,marrSIMIMSI,marrNumTypes,marrOrdCnct,mpsPprId,marrError,mbError));
}
"/**************************************************************************************
* Name          : RMS NM Association Rule Service PreInvoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : funtion for refreshing BC data.                            		  *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0    MBT		 Created      01/12/2003      *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
                                 This function should be actually deleted/defunc.
**************************************************************************************/
function RefreshingBc()
{
	var psrInputs;
	var psrOutputs;
	var bsSIMNMRef;
	
	psrInputs = TheApplication().NewPropertySet();
	psrOutputs = TheApplication().NewPropertySet();
	
	bsSIMNMRef = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
										
	psrInputs.SetProperty(""Business Component Name"",""RMS AUC Registration"");
	psrInputs.SetProperty(""Business Object Name"",""RMS AUC Registration"");
	bsSIMNMRef.InvokeMethod(""Refresh Business Component"",psrInputs,psrOutputs);
	
	psrInputs 	= null;
	psrOutputs 	= null;
//1.1 below
	bsSIMNMRef = null;
//1.1 above
}
"/***************************************************************************
Date(DD/MM/YYYY)	| By		| Description of Change																		
----------------------------------------------------------------------------
05/01/2004			| MBT_MS	| Creation
--------------------------------------------------------------------------*/
/*---------------+------+--------+------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+--------------------------------------------
20060518       | 1.0  | TM     | Creation
20060621       | 1.1  | Garima | SiebelES#21 Use of return() in finally{}
								  SiebelES#19 Release of Object variables
20060706       | 1.2  | Prasad | Siebel ES SCR1, Objects Destroyed, unreferenced objects commented
29072006       | 1.3  | Kalyana| Changed cursor mode from ExecuteQuery()  to ExecuteQuery(ForwardOnly) to export more
								than 10,000 numbers in  one batch
20090205	   | 1.4  | Ashu   | If flag true, directly updating the Status to AVAILABLE instead of REGISTERING.	
---------------+------+--------+--------------------------------------------
*/
function RegisterIMSI(&Inputs,&Outputs)
{
      var strObjId = Inputs.GetProperty(""RowId"");
	  var blnIsRecord = false; 
	  var blnIsPprItm = false;
	  var blnIsExported = false;
	  var strFromStatus = TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""UNREGISTERED""); 
      var strToStatus = TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE"");
	  var intCount = 0;
	  var marrAssocStartId = new Array();
	  var marrAssocStartId2 = new Array();
	  var marrAssocStartId3 = new Array();
 	  var intReturn = ContinueOperation;
  //  var strPprItm = """";
	  var strErrVal = """";
	  var strExportIMSI = """";
//1.2 below UNUSED
/*
	  var prsInputs = TheApplication().NewPropertySet();
	  var prsOutputs = TheApplication().NewPropertySet();
	  var psFileContent = TheApplication().NewPropertySet();
*/
//1.2 above
	  var boAUCRegistration = TheApplication().GetBusObject(""RMS AUC Registration"");
	  var bcAUCRegistration = boAUCRegistration.GetBusComp(""RMS AUC Registration"");
//    var bcAUCNumberMaster = boAUCRegistration.GetBusComp(""RMS AUC Number Master"");	
//	  var bcAUCNumberCnct = boAUCRegistration.GetBusComp(""RMS NM Association Number Type Display"");
	  var bcAUCPprItmNum = boAUCRegistration.GetBusComp(""RMS AUC Number Paper Item"");
	  var bcAUCNumMstrQry = boAUCRegistration.GetBusComp(""RMS AUC Number Master Query"");
	  var bcAUCSIMNumber = boAUCRegistration.GetBusComp(""RMS AUC SIM Number"");
//	  var bsUpdateBlock = TheApplication().GetService(""RMS RMS Block Calc"");
	  var bcEbc = boAUCRegistration.GetBusComp(""RMS AUC EBC""); // KT 27-04-06
	  var boSIMOrder = TheApplication().GetBusObject(""RMS SIM Order"");
      var bcSIMOrder = boSIMOrder.GetBusComp(""RMS SIM Order"");
//	  var bcSIMOrderLine = boSIMOrder.GetBusComp(""RMS SIM Order Line"");
//    var bcSIMOrderLineNumInfo = boSIMOrder.GetBusComp(""RMS SIM Order Line Num Info"");
	  var blnIsSIMOrderLineNumInfo = false;
	  var bcSIMOrderLineNum = boAUCRegistration.GetBusComp(""RMS AUC SIM Number"");
	  var bcAucPreActivation =  boAUCRegistration.GetBusComp(""RMS AUC Pre Activation BC"");
	  var bcCnct = boAUCRegistration.GetBusComp(""RMS NM Association Number Type Display"");
	  var blnIsCnct = false;
//    var blnIsSIMOrderLine = false;
	  var blnIsSIMOrder = false;
//	  var blnIsEBc = false;
	  var strSearchExpr = """";
      var KItemp = """";
      var vByPassClarity = ""N"";
	  marrAssocStartId[intCount] = marrAssocStartId2;
	  marrAssocStartId[intCount][0] = marrAssocStartId3;
	  try
	  {
		with(bcAUCRegistration) 
        {
			    WriteRecord();
			    ActivateField(""Status"");
			    ActivateField(""Action"");
			    ActivateField(""Quantity"");
			    ActivateField(""Id"");
//---------GB 26-09-2006---------
				ActivateField(""Target HLR"");

				// ActivateField(""File Name and Path"");  KT 25-04-2006
			    //ActivateField(""IMSI Number"");  
                //ActivateField(""SIM Number"");
				ActivateField(""IMSI Start Number"");
				ActivateField(""Inconsider Clarity Response"");
				ClearToQuery();
			    SetSearchSpec(""Id"",strObjId);
			    //ExecuteQuery();
				ExecuteQuery(ForwardOnly);
			    blnIsRecord = FirstRecord();
			    if(!blnIsRecord) 
                {
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC005"");
					TheApplication().RaiseErrorText(strErrVal);
                }
                else{
                vByPassClarity = GetFieldValue(""Inconsider Clarity Response""); }
				if(bcAUCRegistration.GetFieldValue(""Status"") == TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"",""COMPLETE""))
					blnIsExported = true;

        }
		
		with(bcAUCPprItmNum) 
		{
			ActivateField(""Paper Item Value"");
			ActivateField(""Order Line Number Detail Id"");
			SetSearchSpec(""Paper Item"",""KI"");  
		}
		
		with(bcAUCSIMNumber)
        {
			ActivateField(""Status"");
			ActivateField(""Status Date"");
			ActivateField(""Current Date"");
		}

        with(bcAUCNumMstrQry)
        {
			SetViewMode(AllView);
			ActivateField(""AUC Reg Id"");
			ActivateField(""Assoc Start Id"");
			ActivateField(""Status"");
			//ActivateField(""Type Identifier"");
			ActivateField(""Number Without Delimiter"");  
			//KT20070905
			ActivateField(""Generated Number"");
			ActivateField(""Status Date"");
			ActivateField(""Current Date"");
			ClearToQuery();
			if(blnIsExported) 
			{
				SetSearchSpec(""AUC Reg Id"",strObjId);
			}
			else 
			{
			    //Code  to  test selected Start number is of Status ""UnRegistered"" or not if export of numbers is pending for long time
			    SetSearchSpec(""Number Without Delimiter"",bcAUCRegistration.GetFieldValue(""IMSI Start Number""));
			    SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""UNREGISTERED""));
			    //below 1.3
			    //ExecuteQuery();
			    ExecuteQuery(ForwardOnly);
			    //above 1.3
				blnIsRecord = FirstRecord();
				if(!blnIsRecord)
				{
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC006"");
			        TheApplication().RaiseErrorText(strErrVal);
				}
			   ClearToQuery();
			   //SetSearchSpec(""Number Type Identifier Denorm"",TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""));
			   SetSearchSpec(""Number Type Identifier Denorm"",TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI""));	
			   SetSearchSpec(""Block Id"",bcAUCRegistration.GetFieldValue(""Block Id""));	
			   SetSearchSpec(""Is Associated"",""Y"");	
			   //SetSearchSpec(""Number Without Delimiter"", "" >= '"" + bcAUCRegistration.GetFieldValue(""IMSI Start Number"") + ""'"");
			   SetSearchSpec(""Number"", "" >= '"" + bcAUCRegistration.GetFieldValue(""Generated Number"") + ""'"");
			   SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""UNREGISTERED"")); 
			}
			//below 1.3
			//ExecuteQuery();
			ExecuteQuery(ForwardOnly);
			//above 1.3 
			blnIsRecord = FirstRecord();	
			
			while(blnIsRecord)
            {	
			    bcAUCPprItmNum.SetSearchSpec(""Assoc Start Id"",GetFieldValue(""Assoc Start Id""));
				//bcAUCPprItmNum.ExecuteQuery();
				bcAUCPprItmNum.ExecuteQuery(ForwardOnly);
				blnIsPprItm = bcAUCPprItmNum.FirstRecord();
				if(!blnIsPprItm)
				{
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC004"");
					TheApplication().RaiseErrorText(strErrVal);
				}
				//marrAssocStartId[intCount][0] = GetFieldValue(""Assoc Start Id""); KT 24-04-2006
				SetArray(marrAssocStartId,intCount,0 ,""?"",""?"",GetFieldValue(""Assoc Start Id"")); 
				if(blnIsPprItm) 
				//	marrAssocStartId[intCount][1] = bcAUCPprItmNum.GetFieldValue(""Paper Item Value"");KT 24-04-2006
				 	SetArray(marrAssocStartId,intCount,1 ,""?"",""?"",bcAUCPprItmNum.GetFieldValue(""Paper Item Value"")); 
				else
					SetArray(marrAssocStartId,intCount,1 ,""?"",""?"","""");
				SetArray(marrAssocStartId,intCount,3 ,""?"",""?"",bcAUCPprItmNum.GetFieldValue(""Order Line Number Detail Id""));
                //SetArray(marrAssocStartId,intCount++,2 ,""?"",""?"",bcAUCPprItmNum.GetFieldValue(""Number Without Delimiter""));
				intCount = intCount + 1;
                if(intCount == bcAUCRegistration.GetFieldValue(""Quantity"")) 
					break;
				blnIsRecord = NextRecord(); 
				marrAssocStartId[intCount] = marrAssocStartId2;	
			}
 		   if(intCount < ToInteger(bcAUCRegistration.GetFieldValue(""Quantity"")))
	 		{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC003"",intCount);
			    TheApplication().RaiseErrorText(strErrVal);
			}
 			// code for EBC
			for(var intCnt = 0; intCnt < intCount; intCnt++) 
			{
		 		if(!blnIsExported) 
				{
					with(bcAUCNumMstrQry) 
					{
						SetViewMode(AllView);
						ActivateField(""Status"");
						ActivateField(""AUC Reg Id"");
						ActivateField(""Block Id"");
						ActivateField(""Number Type Identifier Denorm"");
						ActivateField(""Number String"");
						ClearToQuery();
						SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
						//SetSearchSpec(""Type Identifier"", ""<> '"" + ""MSISDN"" + ""'"");
	 					//blnIsRecord = bcAUCNumMstrQry.FirstRecord();
						//SetSearchSpec(""Type Identifier"",""<>'""+TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")+""'"");
						SetSearchSpec(""Number Type Identifier Denorm"",TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI""));
						//ExecuteQuery();
						ExecuteQuery(ForwardOnly);
						blnIsRecord = FirstRecord();
					}
					//ms:03Nov09 blnIsRecord = FirstRecord();
					//ms:03Nov09 changed while to if as there would be multiple IMSI while(blnIsRecord) {
					if(blnIsRecord) {
						with (bcAUCPprItmNum)
						{
							bcAUCPprItmNum.SetSearchSpec(""Assoc Start Id"",marrAssocStartId[intCnt][0]);
							bcAUCPprItmNum.ExecuteQuery(ForwardOnly);
						    blnIsPprItm = bcAUCPprItmNum.FirstRecord();
					    }
					   if(!blnIsPprItm)
					   {
							strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC004"");
							TheApplication().RaiseErrorText(strErrVal);
					    }
					   else
	                  	KItemp = bcAUCPprItmNum.GetFieldValue(""Paper Item Value"");
						//  code for transport key
	                    with(bcSIMOrderLineNum)
						{
							SetViewMode(AllView);
							ActivateField(""Assoc Start Id"");
							ActivateField(""Order Id"");
							ActivateField(""Concatenated Number"");
							ActivateField(""Concatenated Type"");
							ClearToQuery();
							SetSearchSpec(""Assoc Start Id"",marrAssocStartId[intCnt][0]);
							 bcSIMOrderLineNum.ExecuteQuery(ForwardOnly);
						    blnIsSIMOrderLineNumInfo = bcSIMOrderLineNum.FirstRecord();
						}
						if(!blnIsSIMOrderLineNumInfo)
						{
						 //some code
						}
						if (blnIsSIMOrderLineNumInfo)
						{
		                    with (bcSIMOrder)
							{
								SetViewMode(AllView);
								ActivateField(""Transport Key"");
								ActivateField(""Id"");
								ClearToQuery();
			                    SetSearchSpec(""Id"",bcSIMOrderLineNum.GetFieldValue(""Order Id""));
								bcSIMOrder.ExecuteQuery(ForwardOnly);
								blnIsSIMOrder= bcSIMOrder.FirstRecord();
								if(!blnIsSIMOrder)
								{
								 //some code
								}					
								else
								{
									var Transkey = bcSIMOrder.GetFieldValue(""Transport Key"");
								}
							}
	                    }
						if (blnIsRecord)
						{
							strExportIMSI 	= ExtractIMSI(bcSIMOrderLineNum.GetFieldValue(""Concatenated Number""),bcSIMOrderLineNum.GetFieldValue(""Concatenated Type""));
							
				
							bcEbc.NewRecord(1);
						   	bcEbc.SetFieldValue(""IMSI"",strExportIMSI);												
							bcEbc.SetFieldValue(""Batch No"",strObjId);	
						    bcEbc.SetFieldValue(""KI"",KItemp);
							bcEbc.SetFieldValue(""Transport Key"",Transkey);
							bcEbc.SetFieldValue(""Request Id"",marrAssocStartId[intCnt][0]);
							bcEbc.WriteRecord();
							bcAUCNumMstrQry.WriteRecord();
							blnIsRecord = NextRecord();
						}
				     }	
				    with(bcAUCNumMstrQry) {
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
						ExecuteQuery(ForwardOnly);
                    }
					blnIsRecord = FirstRecord();
					while(blnIsRecord) {
/* 1.4 */			if(vByPassClarity != ""Y""){
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""REGISTERING""));}
					else{
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));}	/* 1.4 */
					SetFieldValue(""AUC Reg Id"",strObjId);
					WriteRecord();				
					with(bcAucPreActivation)
					{
					ActivateField(""Auc Id"");
					ActivateField(""Number Id"");
					SetViewMode(AllView);
					ClearToQuery();
					NewRecord(1);
					SetFieldValue(""Auc Id"",strObjId);
					SetFieldValue(""Number Id"",bcAUCNumMstrQry.GetFieldValue(""Id""));
					WriteRecord();
					}
					blnIsRecord = NextRecord();
				    }  
                    with (bcCnct) {
					SetViewMode(AllView);
					ActivateField(""Status"");
					ClearToQuery();
					SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
					ExecuteQuery(ForwardOnly);
					blnIsCnct = FirstRecord();
					while(blnIsCnct) {
/* 1.4 */			if(vByPassClarity != ""Y""){
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""REGISTERING""));}
					else{
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));}	/* 1.4 */
						WriteRecord();
					blnIsCnct = NextRecord();
					}	
					}
					with(bcAUCSIMNumber){	
					SetViewMode(AllView);
					ActivateField(""Status"");
					ClearToQuery();
					SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
					ExecuteQuery(ForwardOnly);
					var blnIsSimNumber = FirstRecord();
					while(blnIsSimNumber)
					{
/* 1.4 */			if(vByPassClarity != ""Y""){
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""REGISTERING""));}
					else{
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));}	/* 1.4 */
						WriteRecord();
					blnIsSimNumber = NextRecord();
					}
					}
					}
  				    }
        if(!blnIsExported) {
			bcAUCRegistration.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"",""COMPLETE""));
			bcAUCRegistration.WriteRecord();
        	}
            }
		    if(strErrVal != """")
			Outputs.SetProperty(""ErrMessage"",strErrVal);
		    }
        catch(e)
        {
			
		bcAUCNumMstrQry      = null;
		//bcAUCNumberCnct	 = null;
		bcAUCPprItmNum		 = null;	
		boAUCRegistration    = null;	
		//Clib.fclose(fp);
		
		if (strErrVal=="""") {
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrMessage"",e.errText);
		} else {
			Outputs.SetProperty(""ErrMessage"",strErrVal);
			Outputs.SetProperty(""ErrCode"",strErrVal);
		}
		
		throw(e);
		return(strErrVal);
		
	}
finally {
		
		bcAUCNumMstrQry   	= null;
//		bcAUCNumberCnct	 	= null;
		bcAUCPprItmNum		= null;
		bcAUCRegistration	= null;
		bcAUCSIMNumber		= null;
		bcEbc				= null;
		bcSIMOrder			= null;
		bcSIMOrderLineNum   = null;
		bcAucPreActivation	= null;
		bcCnct				= null;
		boAUCRegistration   = null;
		boSIMOrder			= null;

		//Outputs.AddChild(psFileContent);
		//Outputs.SetProperty(""ErrCode"",strErrVal);
		if(strErrVal != """")
		Outputs.SetProperty(""ErrMessage"",strErrVal);
      }
      return(strErrVal);
	  }
"/**********************************************************************************************************
Purpose 		: Function for exporting unregistered IMSI and KI numbers for AUC registration 
Author 			: MBT_MS
Date 			: 05-Jan-2004
Input			: Input Property set includes, File Name and Path, AUC Registration record id
				: Starting IMSI number
Outputs		 	: Output property set contianing the err message
Change Log		: Changes made to the function
***********************************************************************************************************
Date(DD/MM/YYYY)	| By		| Description of Change																		
-----------------------------------------------------------------------------------------------------------
05/01/2004			| MBT_MS	| Creation
----------------------------------------------------------------------------------------------------------*/
/*
function RegisterIMSI_Old(&Inputs)
{
	
	
	var strObjId 				= Inputs.GetProperty(""RowId"");
	//var strActionType 		= Inputs.GetProperty(""Action"");
	//var strFilePathName 		= Inputs.GetProperty(""FilePathName"");
			
	var fp;
	
	var blnIsRecord			= false; 
	var blnIsPprItm			= false;
	var blnIsExported		= false;
	
	var strFromStatus		= TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""UNREGISTERED"")
	var strToStatus			= TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE"")
	
	var intCount 			= 0;
	var marrAssocStartId	= new Array();
	var intReturn 			= ContinueOperation;
	//var strPprItm			= """";
	var strErrVal 			= """";
	
	var prsInputs			= TheApplication().NewPropertySet();
	var prsOutputs			= TheApplication().NewPropertySet();
	
	var boAUCRegistration 	= TheApplication().GetBusObject(""RMS AUC Registration"");
	var bcAUCRegistration	= boAUCRegistration.GetBusComp(""RMS AUC Registration"");
	//var bcAUCNumberMaster = boAUCRegistration.GetBusComp(""RMS AUC Number Master"");	
	var bcAUCNumberCnct		= boAUCRegistration.GetBusComp(""RMS NM Association Number Type Display"");
	var bcAUCPprItmNum		= boAUCRegistration.GetBusComp(""RMS AUC Number Paper Item"");
	var bcAUCNumMstrQry   	 = boAUCRegistration.GetBusComp(""RMS AUC Number Master Query"");
	var bcAUCSIMNumber		= boAUCRegistration.GetBusComp(""RMS AUC SIM Number"");
	
	var bsUpdateBlock		= TheApplication().GetService(""RMS NM Block Calc"");
	
	try{
				
		with(bcAUCRegistration) {
			ActivateField(""Status"");
			ActivateField(""Action"");
			ActivateField(""Quantity"");
			ActivateField(""File Name and Path"");
			ActivateField(""IMSI Number"");
			ClearToQuery();
			SetSearchSpec(""Id"",strObjId);
			ExecuteQuery()
			
			blnIsRecord = FirstRecord();
			if(!blnIsRecord) return false;
			if(bcAUCRegistration.GetFieldValue(""Status"") == TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"",""COMPLETE""))
				blnIsExported = true;
		}
		
		fp=Clib.fopen(bcAUCRegistration.GetFieldValue(""File Name and Path""),""wt"");

		if(fp==null) 
		{
			fp = Clib.fopen(bcAUCRegistration.GetFieldValue(""File Name and Path""),""a"");
			if(fp==null)
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC001"");
				TheApplication().RaiseErrorText(""RETURN"");
		}

		with(bcAUCPprItmNum) 
		{
			ActivateField(""Paper Item Value"");
			ActivateField(""Order Line Number Detail Id"");
			SetSearchSpec(""Paper Item"",""KI"");
		}
		
		with(bcAUCSIMNumber) 
		{
			ActivateField(""Status"");
		}
		
		
		with(bcAUCNumMstrQry)
		{
			SetViewMode(AllView);
			ActivateField(""AUC Reg Id"");
			ActivateField(""Assoc Start Id"");
			ActivateField(""Status"");
			ActivateField(""Type Identifier"");
			ActivateField(""Number Without Delimiter"");
			ClearToQuery();
			if(blnIsExported) 
			{
				SetSearchSpec(""AUC Reg Id"",strObjId);
			}
			else 
			{
				SetSearchSpec(""Type Identifier"",""IMSI"");
				SetSearchSpec(""Number Without Delimiter"", "" >= '"" + bcAUCRegistration.GetFieldValue(""IMSI Number"") + ""'"");
				SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""UNREGISTERED""));
			}
			ExecuteQuery();
					
			blnIsRecord = FirstRecord();	
			
			while(blnIsRecord)
			{	
				
				bcAUCPprItmNum.SetSearchSpec(""Assoc Start Id"",GetFieldValue(""Assoc Start Id""));
				bcAUCPprItmNum.ExecuteQuery();
				blnIsPprItm = bcAUCPprItmNum.FirstRecord();
				
				marrAssocStartId[intCount][0] = GetFieldValue(""Assoc Start Id"");
				if(blnIsPprItm) 
					marrAssocStartId[intCount][1] = bcAUCPprItmNum.GetFieldValue(""Paper Item Value"");
				else
					marrAssocStartId[intCount][1] = """";
				marrAssocStartId[intCount][3] = bcAUCPprItmNum.GetFieldValue(""Order Line Number Detail Id"");
				marrAssocStartId[intCount++][2] = GetFieldValue(""Number Without Delimiter"");
				if(intCount == bcAUCRegistration.GetFieldValue(""Quantity"")) break;
				blnIsRecord = NextRecord();	
			}
		}
			
		if(intCount < ToInteger(intCount))
		{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC003"",intCount);
				TheApplication().RaiseErrorText(""RETURN"");
		}
  		
		blnIsRecord = bcAUCNumMstrQry.FirstRecord();
		
		for(var intCnt = 0; intCnt < intCount; intCnt++) 
		{
			
			Clib.fputs(marrAssocStartId[intCnt][2] + "" "" + marrAssocStartId[intCnt][1] + ""\n"", fp);
			
			if(!blnIsExported) 
			{
				with(bcAUCNumMstrQry)
				{
					SetViewMode(AllView);
					ActivateField(""Status"");
					ActivateField(""AUC Reg Id"");
					ActivateField(""Block Id"");
					ClearToQuery();
					SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
					ExecuteQuery(ForwardOnly);
					
					blnIsRecord = FirstRecord();
					
					while(blnIsRecord)
					{
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));
						SetFieldValue(""AUC Reg Id"",strObjId);
						WriteRecord();
						
						prsInputs.SetProperty(""From Status"",strFromStatus);
						prsInputs.SetProperty(""To Status"",strToStatus);
						prsInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
						bsUpdateBlock.InvokeMethod(""UpdateNumberBlock"",prsInputs,prsOutputs);
							
						blnIsRecord = bcAUCNumMstrQry.NextRecord();
					}
				}
				
				with(bcAUCSIMNumber) {
					ClearToQuery();
					SetSearchSpec(""Id"",marrAssocStartId[intCnt][3]);
					ExecuteQuery(ForwardOnly);
					if (FirstRecord()) {
					//var tstStatus = GetFieldValue(""Status"");
						SetFieldValue(""Status"", TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));
						var tostatus = TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE"");
						var statusbefore = GetFieldValue(""Status"");
						WriteRecord();
						var statusafter = GetFieldValue(""Status"");
					}
				}	
				
				with(bcAUCNumberCnct) {
					SetViewMode(AllView);
					ActivateField(""Status"");
					ClearToQuery();
					SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
					ExecuteQuery(ForwardOnly);
					
					blnIsRecord = FirstRecord();
					
					while(blnIsRecord) {
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));
						WriteRecord();
						
						blnIsRecord = bcAUCNumberCnct.NextRecord();
					}
				}
				
				
			}
		}
		if(!blnIsExported) {
			bcAUCRegistration.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"",""COMPLETE""));
			bcAUCRegistration.WriteRecord();
		}
		
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC002"");		
		
	} catch(e) {
		
		boAUCRegistration   = null;		
		bcAUCNumMstrQry   = null;
		bcAUCNumberCnct	 = null;
		bcAUCPprItmNum		 = null;	
		//Clib.fclose(fp);
		var errCode = e.errCode;
		var errTest = e.errText
		//throw(errTest);
		return(strErrVal);
		//throw(e);
	} finally {
		boAUCRegistration   = null;		
		bcAUCNumMstrQry   = null;
		bcAUCNumberCnct	 = null;
		bcAUCPprItmNum		 = null;	
		Clib.fclose(fp);
		return(strErrVal);
		
	}
}
*/"
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{

}
"/**********************************************************************************************************
Purpose 		: Function called from ImportIMSI event 
Author 			: MBT_MS
Date 			: 05-Jan-2004
Input			: Input Property set includes, File Name and Path, AUC Registration record id
				: Starting IMSI number
Outputs		 	: Output property set contianing the err message
Change Log		: Changes made to the function
***********************************************************************************************************
Date           | version| By        | Description of Change																		
-----------------------------------------------------------------------------------------------------------
05/01/2004     | 1.0    | MBT_MS	| Creation
20060627       | 1.1    | Prasad    | SiebelES#51 removed unnecessary code in PreCanInvoke, code is pasted below
20060727       |1.2     | Kalyana   | Changed  code  to  call New Function AddEntry()
20070419       |1.3     | Kalyana   | Added new method ValidatePreactivation
----------------------------------------------------------------------------------------------------------
*/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{					
	var intReturn   	= ContinueOperation;
	var strErrVal 		= """";
/* ------------------------------------------------*/
/*	var marrOrdCnct 	= new Array();
	var marrInputParams = new Array();
	var marrSIMIMSI		= new Array();
	var marrNumTypes	= new Array();
	var mpsPprId		= TheApplication().NewPropertySet();
	var marrError 		= new Array();
	var msFullFileName	= Inputs.GetProperty(""FileName"");
	var msFileName 		= Inputs.GetProperty(""FileName"").substring(Inputs.GetProperty(""FileName"").lastIndexOf(""/"") + 1);
  */  
/* ------------------------------------------------*/	

	switch(MethodName) 
	    {
//	
/*Commented [GB][21/06/2006]
	
		case ""ReadOrderFile"" : 
		    {
//			strErrVal = RegisterIMSI(Inputs,Outputs);
			if(ReadOrderFile(marrOrdCnct,marrInputParams,marrSIMIMSI,marrNumTypes,mpsPprId,marrError,msFullFileName)) 
				 strErrVal = UpdateNumbers(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrNumTypes,msFullFileName);

// ------------------------------------------------------------------------------------|
//			Enable the following script, if an error file is required to be generated  |
// ------------------------------------------------------------------------------------|

			else
		          {
				GenerateErrorFile(marrInputParams,marrError,msFileName);
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD019"");
			      }
			intReturn = CancelOperation;
//	        TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));
			RefreshingBc();
			break;
		      }
*/
//Commented [GB][21/06/2006]		

//		case ""DeregisterIMSI"" : { break; }	
		
        case ""RegisterIMSI"" :
		{
		    strErrVal = RegisterIMSI(Inputs,Outputs);
		    if(strErrVal != """") 
		 	TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));
		 	
			//TheApplication().RaiseError(strErrVal);
			var BatchId = Inputs.GetProperty(""RowId"");
			strErrVal = ExportBatch(BatchId);
			if(strErrVal != """") 
			TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));   
		   	RefreshingBc();
		   	return(CancelOperation);
		    break;
		}

		case ""PreActivateIMSI"" :
		{
			var PreActBatchId           = Inputs.GetProperty(""RowId"");
			var boAUCRegistration 	    = TheApplication().GetBusObject(""RMS AUC Registration"");
	        var bcAUCRegistration	    = boAUCRegistration.GetBusComp(""RMS AUC Registration"");
			with(bcAUCRegistration)
			{
				InvokeMethod(""SetAdminMode"",""TRUE"");
		        SetViewMode(AllView);
				ActivateField(""Status"");
				ActivateField(""File Name and Path"");
				ClearToQuery();
				SetSearchSpec(""Id"",PreActBatchId);
				if(Inputs.GetProperty(""RMSAUCPreActiavtionSync"") != ""Y"")
					SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"", ""SUBMITTED""));
				ExecuteQuery(ForwardOnly);
				var blnIsRecord = bcAUCRegistration.FirstRecord();
				if(blnIsRecord) 
				{
					SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"", ""PROCESSING""));
					WriteRecord();
					InvokeMethod(""RefreshRecord"");
					InvokeMethod(""UpdateLinks"");
					//InvokeMethod(""SetAdminMode"",""FALSE"");
					strErrVal = PreActivateIMSI(Inputs,Outputs);
					//if(strErrVal != """") 
					if(Outputs.GetProperty(""ErrMessage"")!="""")
					{
						ActivateField(""Status"");
						ActivateField(""File Name and Path"");
						ClearToQuery();
						SetSearchSpec(""Id"",PreActBatchId);
						ExecuteQuery(ForwardOnly);
						var blnIsRecord1 = bcAUCRegistration.FirstRecord();
						if(blnIsRecord1) 
						{
							SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"", ""PENDING""));
							if(Inputs.GetProperty(""RMSAUCPreActiavtionSync"") != ""Y"")
								SetFieldValue(""File Name and Path"",Outputs.GetProperty(""ErrMessage"").substring(0, 2000));
							WriteRecord();
							InvokeMethod(""RefreshRecord"");
							InvokeMethod(""UpdateLinks"");
						}
						if(Inputs.GetProperty(""RMSAUCPreActiavtionSync"") == ""Y"")
							TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage"")); 
						//}//end of else
					}//end of if(Outputs.  
					//TheApplication().RaiseError(strErrVal);
					//below 1.2 	   		
					//RefreshingBc();
					//No error then write Entry in Control table
					else
					{	
						var test = Inputs.GetProperty(""3GFlg"");
						var PackageType = Inputs.GetProperty(""PackageType"");
			   			AddEntry(PreActBatchId,PackageType,Inputs.GetProperty(""3GFlg""),Inputs.GetProperty(""PromotionCode""),Outputs.GetProperty(""PackageName""),Outputs.GetProperty(""PricePlanName""));
					//Calling SIM Pairing File BS for Asynch
				/*		if(Inputs.GetProperty(""RMSAUCPreActiavtionSync"") != ""Y"")
						{
							var psinputs = TheApplication().NewPropertySet();
						    var psoutputs = TheApplication().NewPropertySet();
						    var bsPreactivate = TheApplication().GetService(""RMS PreActivated Numbers File"");
							psinputs.SetProperty(""Object Id"",PreActBatchId);		 		
							bsPreactivate.InvokeMethod(""GenerateFile"",psinputs,psoutputs);
							psinputs = null;
							psoutputs = null;
							bsPreactivate = null;
						}
					*/
					}
					RefreshingBc();
				}//End of if(blnIsRecord) 
				InvokeMethod(""SetAdminMode"",""FALSE"");
			}// with(bcAUCRegistration)
			bcAUCRegistration = null;
			boAUCRegistration = null;
//above 1.2
			return(CancelOperation);
	    	break;
		}
//Below 1.3
		case ""ValidatePreactivation"" :
		{
			strErrVal = ValidatePreactivation(Inputs,Outputs);
			//if(strErrVal != """") 
			//TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));   
			Outputs.SetProperty(""StrErrVal"",strErrVal);
			return(CancelOperation);
	    	break;
		}
//Above 1.3	
		case ""QuerySubmittedBatches"" :
		{
			strErrVal=QuerySubmittedBatches(Inputs,Outputs);
			if(strErrVal != """") 
			TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));   
			return(CancelOperation);
	    	break;
		}
    }
	return(intReturn);
}
function SetArray(arrArray,d1,d2,d3,d4,value)
{
	try{
//var strSTEng = TheApplication().GetProfileAttr(""RMS_ST_ENGINE"");
/*var strSTEng = ""Y"";
if ((d2 != ""?"")) {
if ((typeof(arrArray[d1]) != "function"")&& (strSTEng == ""Y""))
{
arrArray[d1] = new Array();
}
} else {
arrArray[d1] = value;
return(true);
}
if ((d3 != ""?"")) {
if ((typeof(arrArray[d1][d2]) != "function"")&& (strSTEng == ""Y""))
arrArray[d1][d2] = new Array();
} else {
arrArray[d1][d2] = value;
return(true);
}
if ((d4 != ""?"")) {
if((typeof(arrArray[d1][d2][d3]) != "function"")&& (strSTEng == ""Y""))
arrArray[d1][d2][d3] = new Array();
} else {
arrArray[d1][d2][d3] = value;
return(true);
}*/
var strSTEng = ""Y"";
if ((d2 == ""?"")) {
arrArray[d1] = value;
return(true);
}
if ((d3 == ""?"")) {
arrArray[d1][d2] = value;
return(true);
}
if ((d4 == ""?"")) {
arrArray[d1][d2][d3] = value;
return(true);
}
} 
catch(e) {
var test = e.errText;
throw(e);
}
}
"/**************************************************************************************
* Name          : RMS SIM Order ValidateLineItemNumbers Function			 	      * 
* Author        : Tech Mahindra                                            *
* Description   : Checks if Starting Number is overlapping any SIM Order			 .      				  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 20060709		1.0   		  Kalyana     Created        
* 20061009      1.1           Kalyana     Changed Search Spec to make SIM Ordering asynchronous
**************************************************************************************/

function ValidateEndNumber(StartingNumber,EndingNumber)
{

	var intPrevStartNum;
	var intPrevEndNum;
	var strErrVal = """";	
	var blnIsRecord;
	var strSearchExp = """";
	var boAUCRegistration 	    = TheApplication().GetBusObject(""RMS AUC Registration"");
	var bcAUCRegistration	    = boAUCRegistration.GetBusComp(""RMS AUC Registration"");
    try 
	{
	with(bcAUCRegistration)
		{
		SetViewMode(AllView);
		ActivateField(""MSISDN Start Number"");
		ActivateField(""MSISDN End Number"");
		ClearToQuery();
		//below 1.1
		//SetSearchSpec(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW""));
		strSearchExp= strSearchExp + ""[Action] = '""+TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_ACTION"", ""PRE-ACTIVATE"")+""'"";
		strSearchExp = strSearchExp+"" AND [Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"")+""'"";
		strSearchExp = strSearchExp + "" OR [Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""SUBMITTED"")+""'"";
		//strSearchExp= strSearchExp + ""AND [Action] = '""+TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_ACTION"", ""PRE-ACTIVATE"")+""'"";
		SetSearchExpr(strSearchExp);
		//above 1.1
		ExecuteQuery(ForwardOnly);
        blnIsRecord = FirstRecord();
	 	}
   while(blnIsRecord)
      {
        intPrevStartNum 	= bcAUCRegistration.GetFieldValue(""MSISDN Start Number"");
		intPrevEndNum   	= bcAUCRegistration.GetFieldValue(""MSISDN End Number"");
		//var AUCRegId        = bcAUCRegistration.GetFieldValue(""Id"");
//----------------------------------------------------------------
// Raise an error if start number has been used in another Starter Pack Batch				
//----------------------------------------------------------------		
        if((StartingNumber >= intPrevStartNum) && (StartingNumber <= intPrevEndNum)){
		//strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder009"",SIMOrderNo,LineItemNo);
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC012"",bcAUCRegistration.GetFieldValue(""Id""));	
		return(strErrVal);									
        }
//----------------------------------------------------------------
// Raise an error if end number has been used in Starter Pack Batch		
//----------------------------------------------------------------
        if((EndingNumber >= intPrevStartNum) && (EndingNumber <= intPrevEndNum)){
		//strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder009"",SIMOrderNo,LineItemNo);
	    strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC012"",bcAUCRegistration.GetFieldValue(""Id""));	
		return(strErrVal);	
		}
	    blnIsRecord = bcAUCRegistration.NextRecord();
		}
	    return(strErrVal);
	   }
       catch(e)
	   {
		if (strErrVal=="""") 
		{
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrMessage"",e.errText);
		} 
		throw(e);
		return(strErrVal);
	    }
	   finally 
		{
			bcAUCRegistration     = null;					
			boAUCRegistration     = null;
		}	
		return(strErrVal);
}
"/**********************************************************************************************************
Purpose 		: Function called from RegisterIMSI event   for    Pre-Activation
Author 			: KALYANA TANGIRALA
***********************************************************************************************************
Date(DD/MM/YYYY)	| By		| Description of Change																		
-----------------------------------------------------------------------------------------------------------
20070419			| Tech Mahindra,KT	| Creation
----------------------------------------------------------------------------------------------------------*/
/*---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By       | Description of Change
---------------+------+--------+----------------------------------------------
20070419     | 1.0  | Kalyana | Creation
---------------+------+--------+----------------------------------------------
*/
function ValidatePreactivation(&Inputs,&Outputs)
{
	var strSearchSpec           = """";
	var strObjId 			    = Inputs.GetProperty(""RowId"");
	var blnIsRecord			    = false; 
	var blnIsPprItm			    = false;
	var blnIsExported		    = false;
	var intCount 			    = 0;
	var strErrVal 			    = """";
	//new variables for JBS
	var strConn;
	var strUserId;
	var strPwd;
	var strLogFile;
    var boSystemPref 	= TheApplication().GetBusObject(""System Preferences""); 		
	var bcSystemPref 	= boSystemPref.GetBusComp(""System Preferences"");
    var MSISDNStartsWithZero = ""N"";
    //
	var boAUCRegistration 	    = TheApplication().GetBusObject(""RMS AUC Registration"");
	var bcAUCRegistration	    = boAUCRegistration.GetBusComp(""RMS AUC Registration"");
	var bcAUCNumMstrQry    	   	= boAUCRegistration.GetBusComp(""RMS AUC Number Master Query"");
 	try 
	{
		   with(bcAUCRegistration) 
		   {
			WriteRecord();
			ActivateField(""Status"");
			ActivateField(""Action"");
			ActivateField(""Quantity"");
			ActivateField(""Id"");
			ActivateField(""MSISDN Start Number"");
			ActivateField(""Special Category Type"");
			ActivateField(""MSISDN End Number"");
			ActivateField(""Generated Number"");
			ClearToQuery();
			SetSearchSpec(""Id"",strObjId);
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();
			if(!blnIsRecord) 
			{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC005"");
				return(strErrVal);
				//TheApplication().RaiseErrorText(strErrVal);
			} 
			}//End of with
		    with(bcAUCNumMstrQry)
		    {
			SetViewMode(AllView);
			ActivateField(""AUC Reg Id"");
			ActivateField(""Assoc Start Id"");
			ActivateField(""Status"");
			//ActivateField(""Type Identifier"");
			ActivateField(""Number Without Delimiter"");  
			ActivateField(""Number String"");  
			ActivateField(""PreActivation Id"");
			ClearToQuery();
			//Code  to  test selected Start number is of Status ""Available"" or not if export of numbers is pending for long time
			SetSearchSpec(""Number String"",bcAUCRegistration.GetFieldValue(""MSISDN Start Number""));
			SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();
			if(!blnIsRecord)
			{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC007"");
				return(strErrVal);
			}
			if(blnIsRecord)
			{
				if(bcAUCNumMstrQry.GetFieldValue(""PreActivation Id"") !="""")
				{
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC007"");
					return(strErrVal);
				 }
			}
                     
		    var strSearchStr = ""[Name]='RMS_AUC_FIND_END_NUMBER_JBS' AND [Value] ='Y'"";
		    bcSystemPref.ClearToQuery();
		    bcSystemPref.SetSearchExpr(strSearchStr);
		    bcSystemPref.ExecuteQuery(ForwardOnly);
			//KT:Java prog will be called for non special category starterpack batches.For Special category SP batches end number will be calculated from siebel only. 
			//Calling Java BS to find end number of the batch 
			if(bcSystemPref.FirstRecord()  && (bcAUCRegistration.GetFieldValue(""Special Category Type"") == """" || bcAUCRegistration.GetFieldValue(""Special Category Type"") == null))
		    {  
            var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	    	var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
		//-----GETTING THE Connection String FROM SYSTEM PREFERENCE------------
		    bcSysPref.ActivateField(""Value"");
			bcSysPref.ClearToQuery();
			bcSysPref.SetSearchSpec(""Name"",""STC_SPLNUM_CONN_STR"");
			bcSysPref.ExecuteQuery();
			if(bcSysPref.FirstRecord()) 
			{	 
				strConn		= 	bcSysPref.GetFieldValue(""Value"");
			}
			//-----GETTING THE UserId FROM SYSTEM PREFERENCE------------
			bcSysPref.ClearToQuery();
			bcSysPref.SetSearchSpec(""Name"",""STC_SPLNUM_USER_ID"");
			bcSysPref.ExecuteQuery();
			if(bcSysPref.FirstRecord()) 
			{	 
				strUserId	= 	bcSysPref.GetFieldValue(""Value"");
			}
			//-----GETTING THE PASSWORD FROM SYSTEM PREFERENCE------------
			bcSysPref.ClearToQuery();
			bcSysPref.SetSearchSpec(""Name"",""STC_SPLNUM_PWD"");
			bcSysPref.ExecuteQuery();
			if(bcSysPref.FirstRecord()) 
			{	 
				strPwd		= 	bcSysPref.GetFieldValue(""Value"");
			}
			//-----GETTING THE LOGFILE FROM SYSTEM PREFERENCE------------
			bcSysPref.ClearToQuery();
			bcSysPref.SetSearchSpec(""Name"",""RMS_AUC_SP_END_NUMBER_LOGFILE"");
			bcSysPref.ExecuteQuery();
			if(bcSysPref.FirstRecord()) 
			{	 
				strLogFile		= 	bcSysPref.GetFieldValue(""Value"");
                strLogFile      = strLogFile+""_""+bcAUCRegistration.GetFieldValue(""Id"")+"".txt"";
			}
			var psInput = TheApplication().NewPropertySet();
		    var psOutput = TheApplication().NewPropertySet();
			var bsJBS = TheApplication().GetService(""RMS Starter Pack Update End Number JBS"");
		    var MSISDNStartNum = bcAUCRegistration.GetFieldValue(""MSISDN Start Number"");
			var test786 = MSISDNStartNum.substring(0,1);
			if (MSISDNStartNum.substring(0,1) == ""0"")
			{
            MSISDNStartsWithZero = ""Y"";
			}
            psInput.SetProperty(""BlockId"",bcAUCRegistration.GetFieldValue(""Block Id""));
            psInput.SetProperty(""SPRowId"",bcAUCRegistration.GetFieldValue(""Id""));
         	psInput.SetProperty(""BatchSize"",ToInteger(bcAUCRegistration.GetFieldValue(""Quantity""))+1);
            psInput.SetProperty(""ConnecString"",strConn);
            psInput.SetProperty(""Password"",strPwd);
            psInput.SetProperty(""UserId"",strUserId);
            psInput.SetProperty(""LogFile"",strLogFile);
            psInput.SetProperty(""SpecialCategory"","""");
            psInput.SetProperty(""StartingNumber"",bcAUCRegistration.GetFieldValue(""Generated Number""));
    		/*
			psInput.SetProperty(""BlockId"",""1-2BZ3W"");
            psInput.SetProperty(""SPRowId"",""9999"");
            psInput.SetProperty(""BatchSize"",""5"");
            psInput.SetProperty(""ConnecString"",""jdbc:oracle:oci:@siebbit"");
            psInput.SetProperty(""Password"",""rmsadmin"");
            psInput.SetProperty(""UserId"",""rmsadmin"");
            psInput.SetProperty(""LogFile"",""C:\\abc_1000.txt"");
            psInput.SetProperty(""SpecialCategory"","""");
            psInput.SetProperty(""StartingNumber"",""687052902"");*/
            bsJBS.InvokeMethod(""StarterPackUpdateEndNumber"",psInput,psOutput);
			var EndingNumber = psOutput.GetProperty(""EndingNumber"");
			if (MSISDNStartsWithZero == ""Y"")
			{
			EndingNumber = ""0""+EndingNumber;
			}
            var StrErrvalue =psOutput.GetProperty(""StrErrVal"");
            psInput   = null;
            psOutput  = null;
            bsJBS     = null;
            bcSysPref = null;
            boSysPref = null;
			//var test123 = StrErrvalue.substring(0,3);

			if (StrErrvalue.substring(0,3) ==""Err"")
			{
			var RecordCount = StrErrvalue.substring(3,StrErrvalue.length);
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC003"",RecordCount);
            return(strErrVal);
            } 
            strErrVal = ValidateEndNumber(bcAUCRegistration.GetFieldValue(""MSISDN Start Number""),EndingNumber);
			if (strErrVal == """")
			{ 
			bcAUCRegistration.SetFieldValue(""MSISDN End Number"",EndingNumber);
			//bcAUCRegistration.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"", ""SUBMITTED""));
			bcAUCRegistration.WriteRecord();	
			return(strErrVal);
			}
			else 
			{
			return(strErrVal);
			}
			}
			//End of Calling Java BS
			else
			{
			ClearToQuery();
			//KT 20070728 Changed SS on Number String to Number
			//strSearchSpec = strSearchSpec + "" AND [Number String] >= '"" + bcAUCRegistration.GetFieldValue(""MSISDN Start Number"") + ""'"";
			//strSearchSpec = ""[Type Identifier] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"") + ""'"";
			strSearchSpec = ""[Number Type Identifier Denorm] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"") + ""'"";
			strSearchSpec = strSearchSpec + "" AND [Number] >= '"" + bcAUCRegistration.GetFieldValue(""Generated Number"") + ""'"";
			strSearchSpec = strSearchSpec + "" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE"") + ""'"";
			strSearchSpec = strSearchSpec + "" AND [Special Category Type] = '"" + bcAUCRegistration.GetFieldValue(""Special Category Type"") + ""'"";
			strSearchSpec = strSearchSpec + "" AND [PreActivation Id] IS NULL "";
			strSearchSpec = strSearchSpec + "" AND [Assoc Start Id] IS NOT NULL AND [Is Associated] = 'Y' "";				
			strSearchSpec = strSearchSpec + "" AND [Block Id] = '"" + bcAUCRegistration.GetFieldValue(""Block Id"") + ""' "";				
			SetSearchExpr(strSearchSpec);
			ExecuteQuery(ForwardOnly);	
			blnIsRecord = FirstRecord();
			}
			while(blnIsRecord)
			{
				intCount = intCount + 1;
				if(intCount == bcAUCRegistration.GetFieldValue(""Quantity"")) 
			      {
			  	    //var EndNumber = ""End Number:""+bcAUCNumMstrQry.GetFieldValue(""Number String"");
					var EndNumber = bcAUCNumMstrQry.GetFieldValue(""Number String"");
					strErrVal = ValidateEndNumber(bcAUCRegistration.GetFieldValue(""MSISDN Start Number""),EndNumber);
					if (strErrVal == """")
					{ 
					bcAUCRegistration.SetFieldValue(""MSISDN End Number"",EndNumber);
					//bcAUCRegistration.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"", ""SUBMITTED""));
					bcAUCRegistration.WriteRecord();	
			        break;
					}
			     	else 
					{
					return(strErrVal);
					}
				  }
			      blnIsRecord = bcAUCNumMstrQry.NextRecord(); 	
		     }
			     if(intCount < ToInteger(bcAUCRegistration.GetFieldValue(""Quantity"")))
			     {
				 strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC003"",intCount);
				 return(strErrVal);
			     }
			/*if(strErrVal != """")
			Outputs.SetProperty(""ErrMessage"",strErrVal);
//return(strErrVal);*/
			}//end of bcSystemPref.FirstRecord()
	        }
	catch(e)
	{
		if (strErrVal=="""") 
		{
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrMessage"",e.errText);
		} 
		throw(e);
		return(strErrVal);
	}
	finally 
	{
		bcAUCNumMstrQry   	 = null;
		bcAUCRegistration     = null;					
		boAUCRegistration     = null;
        bcSystemPref          = null;
        boSystemPref          = null;
		if(strErrVal != """")
		Outputs.SetProperty(""ErrMessage"",strErrVal);
 	    }	
	return(strErrVal);
}
"/**************************************************************************************
* Name          : Delete					  										  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function invoked om Delete event of VBC.                            *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/

function Delete (Inputs, Outputs)
{
	return (CancelOperation);
}
"/**************************************************************************************
* Name          : Init					  										  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function invoked on Initialization event of VBC.                            *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function Init (&Inputs, &Outputs)
{
	Outputs.SetProperty(""File Name"", """");
	Outputs.SetProperty(""Scheme RowId"","""");
	Outputs.SetProperty(""Scheme Name"","""");
	return (CancelOperation);
}
"/**************************************************************************************
* Name          : Insert					  										  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function invoked om Insert event of VBC.                            *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function Insert (Inputs, Outputs)
{
	return (CancelOperation);	
}
"/**************************************************************************************
* Name          : PreInsert				  										      * 
* Author        : Mahindra British Telecom                                            *
* Description   : function invoked on WriteRecord.                            		  *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function PreInsert (Inputs, Outputs)
{
	return (CancelOperation);
}
"/**************************************************************************************
* Name          : Query				  										  		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function invoked on Query event of VBC.                             *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0    MBT		 Created      01/12/2003      *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function Query(&Inputs, &Outputs)
{

	var psNew = TheApplication().NewPropertySet();
	psNew.SetProperty(""File Name"", """");
	psNew.SetProperty(""Scheme RowId"", """");
	psNew.SetProperty(""Scheme Name"","""");

	Outputs.AddChild(psNew);
//1.1 below
	psNew = null;
//1.1 above
	return (CancelOperation);
}
"/**************************************************************************************
* Name          : Service_PreInvoke					  								  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function invoked oon PreInvoke.                            		  *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs){
	
	if (MethodName == ""Init"") {
		return(Init(Inputs, Outputs));
	}
	else if (MethodName == ""Query"") {
		return(Query(Inputs, Outputs));
	}
	else if (MethodName == ""PreInsert"") {
		return(Init(Inputs, Outputs));
	}
	else if (MethodName == ""Insert"") {
		return(Init(Inputs, Outputs));
	}
	else if (MethodName == ""Update"") {
		return(Update(Inputs, Outputs));
	}
	else if (MethodName == ""Delete"") {
		return(Delete(Inputs, Outputs));
	}
	else {
		return (ContinueOperation);
	}
}
"/**************************************************************************************
* Name          : Update					  										  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function invoked on Update event of VBC.                            *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function Update (&Inputs, &Outputs){

	var psChildSet = Inputs.GetChild(0);
	
	Outputs.SetProperty(""Scheme RowId"",psChildSet.GetProperty(""Scheme RowId""));
	Outputs.SetProperty(""Scheme Name"",psChildSet.GetProperty(""Scheme Name""));
	Outputs.SetProperty(""File Name"",psChildSet.GetProperty(""File Name""));
	
	return (CancelOperation);
}
"/**************************************************************************************
* Name          : logPropSet					  									  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function invoked to write to file in case of error                  *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function logPropSet(inputPS, fileName)
{
	// Use EAI XML Write to File business service to write
	// inputPS property set to fileName file in c:\temp directory.
	var fileSvc = TheApplication().GetService(""EAI XML Write to File"");
	var outPS = TheApplication().NewPropertySet();
	var fileLoc = ""c:\\temp\\"" + fileName;
	var tmpProp = inputPS.Copy();
	tmpProp.SetProperty(""FileName"", fileLoc);
	fileSvc.InvokeMethod(""WritePropSet"", tmpProp, outPS);
	// clean up
	outPS = null;
	fileSvc = null;
	tmpProp = null;
}
"/**************************************************************************************
* Name          : string Replace					  								  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function for replacing search spec escape characters                *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function stringReplace (string, from, to)
{
	// Replaces from with to in string
	var stringLength = string.length;
	var fromLength = from.length;
	if ((stringLength == 0) || (fromLength == 0))
	return string;
	var fromIndex = string.indexOf(from);
	if (fromIndex < 0)
	return string;
	var newString = string.substring(0, fromIndex) + to;
	if ((fromIndex + fromLength) < stringLength)
	newString += stringReplace(string.substring(fromIndex+fromLength,
	stringLength), from, to);
	return newString;
}
"/**************************************************************************************
* Name          : RMS MSISDN Port In Service PreInvoke Method     		 	  		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS MSISDN Port In Code File	    		      		              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 06/19/2005 	2.0   		MBT						   	Created      06/19/2005       *
**************************************************************************************/


function ContractValidation(Inputs,Outputs)
    {
    	var boAssetManagement = TheApplication().GetBusObject(""Asset Management"");
    	var bcAssetManagement = boAssetManagement.GetBusComp(""Asset Mgmt - Asset"");
		
		var boSystemPreferences = TheApplication().GetBusObject(""System Preferences"");
		var bcSystemPreferences = boSystemPreferences.GetBusComp(""System Preferences"");
	
		var StrDate = new Date();
		var StrVal;
		var StrDateDiff;
		var mbIsRecord	= false;
		
		var StrServiceAccId  = Inputs.GetProperty(""ServiceAccountId"");
//		var StrServiceAccId  = ""1-21ZW0"";
        try 
        {
		  with(bcAssetManagement)
		     {
		       SetViewMode(AllView);
		       ActivateField(""Product Name"");
		       ActivateField(""Service Account Id"");
		       ActivateField(""EE SIM Chg Allowd Period"");  // Calculated Field ( Today()-[EECC Last Changed Date] )
		       
		       ClearToQuery();
		       SetSearchSpec(""Service Account Id"",StrServiceAccId);
//    		   SetSearchSpec(""Product Name"",TheApplication().InvokeMethod(""LookupValue"", ""EECC_ASSOC_ASSETS"", ""EECC_SIM_CARD"")); //EE_SIM_Card
		       ExecuteQuery();
	   	       mbIsRecord = FirstRecord();
			   if(mbIsRecord) {
			       ClearToQuery();
			       SetSearchSpec(""Root Asset Id"",GetFieldValue(""Id""));
	    		   SetSearchSpec(""Product Name"",TheApplication().InvokeMethod(""LookupValue"", ""EECC_ASSOC_ASSETS"", ""EECC_SIM_CARD"")); //EE_SIM_Card
			       ExecuteQuery();
					if(FirstRecord())		   
			       		StrDateDiff = bcAssetManagement.GetFieldValue(""EE SIM Chg Allowd Period"");
		       	}
      					   
			   with(bcSystemPreferences)  
			   		{
					   SetViewMode(AllView);
				       ActivateField(""Name"");
				       ActivateField(""Value"");
				       ClearToQuery();
				       SetSearchSpec(""Name"",""EE Period Allowed"");  
				       ExecuteQuery();
				       mbIsRecord = FirstRecord();
				       if(mbIsRecord)
				          StrVal = bcSystemPreferences.GetFieldValue(""Value"");
		       		 }	  
			   
			   if( StrDateDiff < StrVal ) 
					Outputs.SetProperty(""ReturnVal"",""Y"");
			   else
					Outputs.SetProperty(""ReturnVal"",""N"");	
		    }	 
} 
catch(e)
     { 
//	 } finally {             
			 boAssetManagement = null;
	         bcAssetManagement = null;
	         boSystemPreferences = null;
	         bcSystemPreferences = null;             
	       	 throw (e) ;
        }
    }
"/**************************************************************************************
* Name          : RMS MSISDN Port In Service PreInvoke Method     		 	  		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS MSISDN Port In Code File	    		      		              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 06/19/2005 	2.0   		MBT						   	Created      06/19/2005       *
20060710       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	switch (MethodName) 
	{
		case ""Contract Validation"":
			ContractValidation(Inputs,Outputs);
			break;
		case ""LastDateUpdation"":
			var bo = TheApplication().GetBusObject(""EECC Service Accounts"");
			var bc = bo.GetBusComp(""CUT Service Sub Accounts"");
			var temp = Inputs.GetProperty(""AssetId"");
			with(bc) 
			{
				SetViewMode(AllView);
				ActivateField(""EE SIM Number"");
				ClearToQuery();
				SetSearchSpec(""Id"",Inputs.GetProperty(""AssetId""));
				ExecuteQuery();
				if(FirstRecord())	
				{
					SetFieldValue(""EE SIM Number"",Inputs.GetProperty(""SIM""));
					WriteRecord();
				}
			}
//1.1 below
			bc = null;
			bo = null;
//1.1 above
			break;			 
		default:
			 return (ContinueOperation);
	}
	return (CancelOperation);
}
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Calculate Available date                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0   		MBT  	Created       01/11/2003                          *
**************************************************************************************/
/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Change Number Status                      				          *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0   		MBT  	Created       01/11/2003                          *
**************************************************************************************/
/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : DeAssociate Code File                      				          *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0   		MBT  	Created       01/11/2003                          *
**************************************************************************************/
/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Is SIM Twice Associated	                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0   		MBT  	Created       01/11/2003                          *
**************************************************************************************/
/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Partial DeAssociate Code File                      				          *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0   		MBT  	Created       01/11/2003                          *
**************************************************************************************/
/**************************************************************************************
* Name          : RMS RMS De-Association						 	          		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Service_PreInvokeMethod										      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/10/2003	1.0   		Mahindra British Telecom   	Created       29/10/2003      *
**************************************************************************************/
"
"/* Name          : RMS NM Association Rule Service PreInvoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Function for calculating Available Date of number.                            		  			  *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function CalcAvailDate(bcNumberScheme, bcNumberMaster, &dtQuarantineDateObj)
{
	with(bcNumberScheme) {

		ActivateField(""Max. Ter. Quarantine Period"");
		ActivateField(""Max. Ter. Quarantine UOM"");
		ClearToQuery();
		SetSearchSpec(""Id"",bcNumberMaster.GetFieldValue(""Scheme Id""));
   		ExecuteQuery();
		
		if(FirstRecord()) {
	   		var dtSysDate = Clib.time();
			var dtSysDateObj = Date.fromSystem(dtSysDate);
			dtSysDateObj.setTime(dtSysDateObj.getTime());
			var dtQuarantineDate = bcNumberMaster.GetFieldValue(""Quarantine Date"");
			dtQuarantineDateObj = new Date(dtQuarantineDate);
	
	
	        switch (bcNumberScheme.GetFieldValue(""Max. Dis. Qurantine UOM"")) {
	  		  	    
		    	case ""Days"": 
	 				
	 				dtQuarantineDateObj.setTime(dtQuarantineDateObj.getTime() + GetFieldValue(""Max. Dis. Quarantine Period"") * 24 * 60 * 60 * 1000);
	        		break;
	            	
				case ""Months"": 
		
			       	dtQuarantineDateObj.setMonth(ToNumber(ToNumber(dtQuarantineDateObj.getMonth()) + ToNumber(GetFieldValue(""Max. Dis. Quarantine Period""))));
					dtQuarantineDateObj.setTime(dtQuarantineDateObj.getTime());		
				break;
				
			    case ""Weeks"": 
					dtQuarantineDateObj.setTime(dtQuarantineDateObj.getTime() + (GetFieldValue(""Max. Dis. Quarantine Period"") * 7 * 24 * 60 * 60 * 1000));
			    break;
		   		
		    	case ""Year"": 
					dtQuarantineDateObj.setFullYear(ToNumber(ToNumber(dtQuarantineDateObj.getFullYear()) + ToNumber(GetFieldValue(""Max. Dis. Quarantine Period""))));
	       			dtQuarantineDateObj.setTime(dtQuarantineDateObj.getTime());		
				break;
	    		
	    	}
	    }
	}
}
"/* Name          : RMS NM Association Rule Service PreInvoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Change Number status as per the source.                            		  			  *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function ChangeNumberStatus(strSource,bcNumberMaster,bcNumberScheme,blnIsSIMTwiceAssociated,blnNumExists,Inputs)
{
	var intArrLen = 0;
	var dtQuarantineDateObj;
	var bsNumberBlock;
	var strSource;
	var strPrevSts;
	var strTypeIdentifier;
	var strToStatus;
	var strCurrStatus;
	var strSIMType  = TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"");
	var strIMSIType = TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"");
	var strMSISDNType= TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"");
	
	var psInputs  = TheApplication().NewPropertySet();
	var psOutputs = TheApplication().NewPropertySet();

	strTypeIdentifier = Inputs.GetProperty(""Type Identifier"");
	strToStatus 	  = Inputs.GetProperty(""To Status"");
	strCurrStatus     = Inputs.GetProperty(""Current Status"");
	
	switch(strSource){

		case ""Change SIM Number"":

//----------------------------------------------------------------------------------------
//Loop through each number in the array, and change the status of the SIM and IMSI Number.
//----------------------------------------------------------------------------------------
				
			for(var intArrLen = 0;intArrLen < strNumber.length;intArrLen++) {
	
				with(bcNumberMaster){
					ActivateField(""Status"");
					ActivateField(""Assigned To"");
					ActivateField(""Block Id"");
					ActivateField(""Type Identifier"");
					ClearToQuery();
					SetSearchSpec(""Number String"",strNumber[intArrLen]);
					ExecuteQuery();
					if(FirstRecord()) {
						if(((GetFieldValue(""Type Identifier"")==""SIM""))||(GetFieldValue(""Type Identifier"")==""IMSI"")){
							strPrevSts = GetFieldValue(""Status"");
							SetFieldValue(""Status"",""Trash"");
							SetFieldValue(""Allocated To"","""");
							SetFieldValue(""Assigned Id"","""");
							SetFieldValue(""Assigned Date"","""");
							WriteRecord();
						}
					}
				}
								
				bsNumberBlock = TheApplication().GetService(""RMS Block Calc"");
				psInputs.SetProperty(""From Status"", strPrevSts);
				psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
				psInputs.SetProperty(""To Status"",GetFieldValue(""Status""));		
				bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);

		    }//end of For		
				 
		break;

//----------------------------------------------------------------------------------------
//Loop through each number in the array, and change the status of the SIM and IMSI Number.
//and MSISDN Number.Status of SIM will be changed only if it is not associated with any 
//other MSISDN number
//----------------------------------------------------------------------------------------				

		case ""Redeployment"":
		
			
				
			for(intArrLen = 0;intArrLen < strNumber.length;intArrLen++) {

				with(bcNumberMaster){
					ActivateField(""Status"");
					ActivateField(""Block Id"");
					ActivateField(""Type Identifier"");
					ClearToQuery();
					SetSearchSpec(""Id"",strNumber[intArrLen]);
					ExecuteQuery();
					while(FirstRecord()) {
						if(((GetFieldValue(""Type Identifier"") == strSIMType)||(GetFieldValue(""Type Identifier"") == strIMSIType)) && blnIsSIMTwiceAssociated == ""N""){
							if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""ALLOCATED"")){
								SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE""));
								WriteRecord();
							}
							if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""QUARANTINE"")){
								SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""TRASHED""));
								WriteRecord();
							}
							if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""LOST"")){
								SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""TRASHED""));
								WriteRecord();
									}
						}
						
						if(GetFieldValue(""Type Identifier"") == strMSISDNType){
							if(strTypeIdentifier == strSIMType){
								if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""ALLOCATED"")){
									SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE""));
									WriteRecord();
								}
							}
							if(strTypeIdentifier == strMSISDNType){
								if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""ALLOCATED"")){
									SetFieldValue(""Status"",strToStatus);
									WriteRecord();
								}
								if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE"")){
									SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""NOT AVAILABLE""));
									WriteRecord();
								}
								if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""LOST"")){
									SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""NOT AVAILABLE""));
									WriteRecord();
								}
							}
						}
						bsNumberBlock = TheApplication().GetService(""RMS RMS Block Calc"");
						psInputs.SetProperty(""From Status"", strCurrStatus);
						psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
						psInputs.SetProperty(""To Status"",GetFieldValue(""Status""));		
						bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);
					}
				 }
			}
					
		break;											
				
		case ""Cancel Order"":		

			for(intArrLen = 0; intArrLen < strNumber.length; intArrLen++){

				with(bcNumberMaster){
					ActivateField(""Status"");
					ActivateField(""Block Id"");
					ActivateField(""Assigned Id"");
					ActivateField(""Type Identifier"");
					ClearToQuery();
					SetSearchSpec(""Number String"", strNumber[intArrLen]);
					ExecuteQuery();
					if(FirstRecord()) {
						if((GetFieldValue(""Type Identifier"")==""SIM"" && blnIsSIMTwiceAssociated == ""N"") ||(GetFieldValue(""Type Identifier"")==""IMSI"")){
							strPrevSts = GetFieldValue(""Status"");
							SetFieldValue(""Status"",""Allocated"");
							SetFieldValue(""Assigned Id"","""");
							SetFieldValue(""Assigned Date"","""");
							SetFieldValue(""Allocated To"","""");
							WriteRecord();
						}
						else if(GetFieldValue(""Type Identifier"")==""MSISDN"") {
							strPrevSts = GetFieldValue(""Scheme Id"");
							SetFieldValue(""Status"",""Quarantine"");
							SetFieldValue(""Assigned Id"","""");
							SetFieldValue(""Reserved To"","""");
							SetFieldValue(""Allocated To"","""");
							WriteRecord();
							
							CalcAvailDate(bcNumberScheme,bcNumberMaster,dtQuarantineDateObj);
							
							SetFieldValue(""Qurantine Date"", GetFieldValue(""Todays Date""));
							SetFieldValue(""Available Date"",DateToString(dtQuarantineDateObj));
							WriteRecord();
						}
						bsNumberBlock = TheApplication().GetService(""RMS Block Calc"");
						psInputs.SetProperty(""From Status"", strPrevSts);
						psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
						psInputs.SetProperty(""To Status"",GetFieldValue(""Status""));		
						bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);
					}
								
				}
			}
		break;	
		
		case ""Disconnect"":		

			for(intArrLen = 0; intArrLen < strNumber.length; intArrLen++){

				with(bcNumberMaster){
					ActivateField(""Status"");
					ActivateField(""Block Id"");
					ActivateField(""Assigned Id"");
					ActivateField(""Type Identifier"");
					ClearToQuery();
					SetSearchSpec(""Number String"", strNumber[intArrLen]);
					ExecuteQuery();
					if(FirstRecord()) {
						if((GetFieldValue(""Type Identifier"")==""SIM"" && blnIsSIMTwiceAssociated == ""N"") ||(GetFieldValue(""Type Identifier"")==""IMSI"")){
							strPrevSts = GetFieldValue(""Status"");
							SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""TRASHED""));
							//SetFieldValue(""Assigned Id"","""");
							//SetFieldValue(""Assigned Date"","""");
							SetFieldValue(""Allocated To"","""");
							WriteRecord();
						}
						else if(GetFieldValue(""Type Identifier"")==""MSISDN"") {
							strPrevSts = GetFieldValue(""Scheme Id"");
							SetFieldValue(""Status"",""Quarantine"");
							//SetFieldValue(""Assigned Id"","""");
							//SetFieldValue(""Reserved To"","""");
							SetFieldValue(""Allocated To"","""");
							WriteRecord();
							
							CalcAvailDate(bcNumberScheme,bcNumberMaster,dtQuarantineDateObj);
							
							SetFieldValue(""Qurantine Date"", GetFieldValue(""Todays Date""));
							SetFieldValue(""Available Date"",DateToString(dtQuarantineDateObj));
							WriteRecord();
						}
						bsNumberBlock = TheApplication().GetService(""RMS Block Calc"");
						psInputs.SetProperty(""From Status"", strPrevSts);
						psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
						psInputs.SetProperty(""To Status"",GetFieldValue(""Status""));		
						bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);
					}
								
				}
			}
		break;	
					   									
		case ""MSISDN Takeover"":
						
			for(intArrLen = 0; intArrLen < strNumber.length; intArrLen++){
					
				with(bcNumberMaster){
					ActivateField(""Status"");
					ActivateField(""Block Id"");
					ActivateField(""Assigned Id"");
					ActivateField(""Type Identifier"");
					ClearToQuery();
					SetSearchSpec(""Number String"",strNumber[intArrLen]);
					ExecuteQuery();
					if(FirstRecord()) {
						if((GetFieldValue(""Type Identifier"")==""SIM"" && blnIsSIMTwiceAssociated == ""N"")||(GetFieldValue(""Type Identifier"")==""IMSI"")){
							strPrevSts = GetFieldValue(""Status"");
							SetFieldValue(""Status"",""Trash"");
							SetFieldValue(""Allocated To"","""");
							SetFieldValue(""Assigned Id"","""");
							SetFieldValue(""Assigned Date"","""");
							WriteRecord();
							
							bsNumberBlock = TheApplication().GetService(""RMS Block Calc"");
							psInputs.SetProperty(""From Status"", strPrevSts);
							psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
							psInputs.SetProperty(""To Status"",GetFieldValue(""Status""));		
							bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);
						}
					}
				}
			}
		break;
	
	case ""SIM Order"":

		with(bcNumberMaster){
			while(blnNumExists) {
				if((GetFieldValue(""Type Identifier"") == strSIMType) || (GetFieldValue(""Type Identifier"") == strIMSIType)) 
					SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASH""));
				else if(GetFieldValue(""Type Identifier"") == strMSISDNType) 
					SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE""));
	
				strPrevSts = GetFieldValue(""Status"");
				SetFieldValue(""Is Associated"", ""N"");
				SetFieldValue(""Assoc Start Id"", """");
				SetFieldValue(""IMSI Assoc"", ""N"");
				WriteRecord();
				
				bsNumberBlock = TheApplication().GetService(""RMS RMS Block Calc"");
				psInputs.SetProperty(""From Status"", strPrevSts);
				psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
				psInputs.SetProperty(""To Status"",GetFieldValue(""Status""));		
				bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);

				blnNumExists = NextRecord();				
			}
		}
		break;
	}
	
	psInputs		= null;
	psOutputs		= null;
	bsNumberBlock	= null;
}
"/* Name          : RMS NM Association Rule Service PreInvoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function for deassociating numbers.                            		  			  *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function DeAssociate(Inputs,&bcNumberMaster,&bcAssocNumberTypeDisplay,&bcNumberAssocDetail,&bcNumberAssocMasterConcat,&bcNumberMasterConcat,&bcNumberScheme)
{
	var strInputNumber;
	var strAssocStartId;
	var strStatus;
	var strSource;
	var strErrVal;
	
	var strCnctId = new Array();
	
	var intRecCnt=0;

	var blnIsSIMTwiceAssociated = ""N"";
	var blnIsRecord;
	var blnNumExists;
	
	
//----------------------------------------
//Get MSISDN as one of the input parameter
//----------------------------------------
	strInputNumber  = Inputs.GetProperty(""Number"");
 	strSource	   	 =  Inputs.GetProperty(""Source"");     

//---------------------------------------------------------------
//Using MSISDN Number to Get Assoc Start ID from Number Master BC
//---------------------------------------------------------------
    		
	with(bcNumberMaster) {
		
		ActivateField(""Assoc Start Id"");
		ActivateField(""Number"");
		ActivateField(""Number String"");
		ActivateField(""IMSI Assoc"");
		ActivateField(""Is Associated"");		
		ActivateField(""IMSI Assoc"");
		ActivateField(""Is Associated"");
		ActivateField(""Type Identifier"");
		ActivateField(""Block Id"");				
		ActivateField(""Status"");
		
		ClearToQuery();
		SetSearchSpec(""Number String"",strInputNumber);
		ExecuteQuery();
		if(FirstRecord()) {
			if(GetFieldValue(""Is Associated"") != ""Y"") {
				strErrVal = ""RMSDA001"";
				return(strErrVal);
			}
			strAssocStartId =GetFieldValue(""Assoc Start Id"");
		}
		else {
			strErrVal = ""RMSDA002"";
			return(strErrVal);
		}

		ClearToQuery();
		SetSearchSpec(""Assoc Start Id"",strAssocStartId);
		ExecuteQuery();
		blnNumExists = FirstRecord();
	}


//------------------------------------------
//Delete Ass Cnct table using Assoc Start Id
//------------------------------------------

	with(bcAssocNumberTypeDisplay) {
		ActivateField(""Assoc Start Id"");
		ClearToQuery()
		SetSearchSpec(""Assoc Start Id"",strAssocStartId);
		ExecuteQuery();
		while(FirstRecord()) {
			strCnctId[intRecCnt++]	= GetFieldValue(""Id"");
			DeleteRecord();
		}
	}

//--------------------------------------------------------------------------
//Using Number Id get the Concat Id from Number Master Concat BC.Also check,
//whether SIM is associated with any other MSISDN number.
//--------------------------------------------------------------------------

	with(bcNumberMasterConcat) {
	
		ActivateField(""Number Id"");
		ActivateField(""Concat Id"");
		
		IsSIMTwiceAssociated(blnIsSIMTwiceAssociated,bcNumberMasterConcat,strAssocStartId);
		strErrVal = ""RMSDA003"";		
		for(var intArrlen = 0;intArrlen < strCnctId.length;intArrlen++) {

				ClearToQuery();
				SetSearchSpec(""Concat Id"", strCnctId[intArrlen]);
				ExecuteQuery();
			
//-----------------------------------------------------------------------------
//Delete the records from Number Master concat having the concat id same as the
//concat id of the input number.
//-----------------------------------------------------------------------------
				while(FirstRecord())
					DeleteRecord();
		}
	}
			

//-----------------------------------------------------------------------------
//Delete the records from Association Detail having the concat id same as the
//concat id of the input number.
//-----------------------------------------------------------------------------

	for(var intArrlen = 0;intArrlen < strCnctId.length;intArrlen++) {

		with(bcNumberAssocDetail){
			ActivateField(""Association Id"");
			ActivateField(""Association Seq Num"");
			ActivateField(""Destination Num Id"");
			ActivateField(""Number Association Concat Id"");
			ActivateField(""Source Num Id"");
			ActivateField(""Row Id"");
			ActivateField(""Parent Ass Id"");
			ClearToQuery();
			SetSearchSpec(""Number Association Concat Id"", strCnctId[intArrlen]);
			ExecuteQuery();
			blnIsRecord=FirstRecord();
			while(FirstRecord())
				DeleteRecord();
		}
	}

//----------------------------------------------------------------------------------
//Delete the records from Association Master concat having the concat id same as the
//concat id of the input number.
//----------------------------------------------------------------------------------
	
	for(var intArrlen = 0;intArrlen < strCnctId.length;intArrlen++) {
			
		with(bcNumberAssocMasterConcat){
			ActivateField(""Association Id"");
			ActivateField(""Concat Id"");
			ActivateField(""Flag"");
			ClearToQuery();
			SetSearchSpec(""Concat Id"",strCnctId[intArrlen]);
			ExecuteQuery();
			blnIsRecord=FirstRecord();
			while(FirstRecord())
				DeleteRecord();
		}
	}
	ChangeNumberStatus(strSource,bcNumberMaster,bcNumberScheme,blnIsSIMTwiceAssociated,blnNumExists,Inputs);
	strErrVal = ""RMSDA003"";
}
"/* Name          : RMS NM Association Rule Service PreInvoke Method				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Function for checking whether SIM number is associated twice.       *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function IsSIMTwiceAssociated(&blnIsSIMTwiceAssociated,bcNumberMasterConcat,strAssocStartId) 
{
	var intRecCnt = 0;
	with(bcNumberMasterConcat) {
		ClearToQuery();
		SetSearchSpec(""Number Id"",strAssocStartId);
		ExecuteQuery();
		var blnIsRecord = FirstRecord();
		while(blnIsRecord) {
			intRecCnt++;
			if(ToInteger(intRecCnt) >= 1)
				break;
		}
		if(ToInteger(intRecCnt) > 1) 
			blnIsSIMTwiceAssociated = ""Y"";
	}
}
"/* Name         : RMS NM Association Rule Service PreInvoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Partial Deassociation.                            		  		  *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function PartialDeassociation(Inputs,bcNumberMaster,bcAssocNumberTypeDisplay,bcNumberAssocDetail,bcNumberAssocMasterConcat,bcNumberMasterConcat,bcNumberScheme)
{
	var strMSISDNNumber;
	var strMSISDNId;
	var strAssocStartId;
	var strConcatId;
	var strSearchExpr;
	var strAssNumber = new Array();
	var strAssNumberType = new Array();
	var strNumberString;
	var intRecCnt=0;
	var intConcatId;
	var blnIsRecord;
	var strStatus;
	var strSource;
	var strErrVal = """";
	var blnIsSIMTwiceAssociated = ""N"";
	
	strMSISDNNumber  = Inputs.GetProperty(""MSISDN Number"");
 	strSource        = Inputs.GetProperty(""Source"");

//-------------------------------------------------------------------------------
// Query Number Master to validate the MSISDN or SIM Number .If SIM Number then 
// querying the number Master to fetch MSISDN number Number using 'Assoc Start Id'
// and then taking the values 'Id' of MSISDN number and 'Assoc Start Id'.
//-------------------------------------------------------------------------------


 	with( bcNumberMaster) {
		ActivateField(""Assoc Start Id"");
		ActivateField(""Type Identifier"");
		ActivateField(""Is Associated"");
		ClearToQuery()
		SetSearchSpec(""Number String"",strMSISDNNumber);
		ExecuteQuery();
		if(FirstRecord()) {
			if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"")) {
				strAssocStartId = GetFieldValue(""Assoc Start Id"");
				strSearchExpr = ""[Assoc Start Id] = '""+ strAssocStartId +""' AND [Type Identifier] = '""+ TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"") +""'"";
				ClearToQuery()
				SetSearchExpr(strSearchExpr);
				ExecuteQuery();
				if(FirstRecord()){
					strMSISDNId     = GetFieldValue(""Id"");
				}
				else{
					strErrVal = ""RMSDA001""
					return(strErrVal);
				}
			}
			else{				
				if(GetFieldValue(""Type Identifier"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")) {
					strErrVal = ""RMSDA001"";
					return(strErrVal);
				}
				if(GetFieldValue(""Is Associated"") != ""Y"") {
					strErrVal = ""RMSDA002"";
					return(strErrVal);
				}
				strMSISDNId = GetFieldValue(""Id"");
			}
		}
		else {
			strErrVal = ""RMSDA001"";
			return(strErrVal);
		}
 	}
 	
//-------------------------------------------------------------------
//Locate the record in Number Mstr-Concat table and delete the record.
//-------------------------------------------------------------------

	with(bcNumberMasterConcat) {

		ActivateField(""Number Id"");
		ActivateField(""Concat Id"");
		
		IsSIMTwiceAssociated(blnIsSIMTwiceAssociated,bcNumberMasterConcat,strAssocStartId);
		
		ClearToQuery();
		SetSearchSpec(""Number Id"",strMSISDNId);
		ExecuteQuery();
		
		if(FirstRecord())
			intConcatId = GetFieldValue(""Concat Id"");
	
		ClearToQuery();
		SetSearchSpec(""Concat Id"",intConcatId);
		ExecuteQuery();
	    blnIsRecord = FirstRecord();

//-----------------------------------------------------------------------------
//Delete the records from Number Master concat having the concat id same as the
//concat id of the input number.
//-----------------------------------------------------------------------------

		while(blnIsRecord){
			strAssNumber[intRecCnt++] = GetFieldValue(""Number Id"");
		    blnIsRecord = NextRecord();
		}
				
		ClearToQuery();
		SetSearchSpec(""Number Id"",strMSISDNId);
		ExecuteQuery();
	    blnIsRecord = FirstRecord();
	    
	    if(FirstRecord()) {
		    strConcatId = GetFieldValue(""Concat Id"");
		    DeleteRecord();
	    }
	}

//-------------------------------------------------------------------------
//Locate the record in Association detai and delete the record.Then rebuild 
//the Concatenated number and update the concate table.
//-------------------------------------------------------------------------
	
	with(bcNumberAssocDetail) {
		ActivateField(""Association Id"");
		ActivateField(""Association Seq Num"");
		ActivateField(""Destination Num Id"");
		ActivateField(""Number Association Concat Id"");
		ActivateField(""Source Num Id"");
		ActivateField(""Row Id"");
		ActivateField(""Parent Ass Id"");
		
		ClearToQuery();
		SetSearchSpec(""Destination Num Id"", strMSISDNId);
		ExecuteQuery();
		if(FirstRecord()) 
			DeleteRecord();
		
		ClearToQuery();
		SetSearchSpec(""Source Num Id"", strAssocStartId);
		ExecuteQuery();
		while(FirstRecord()) {
			if(GetFieldValue(""Source Num Id"") != """") {
				strCnctAssNumber     = strCnctAssNumber + GetFieldValue(""Source Number"");
				strCnctAssNumberType = strCnctAssNumberType + GetFieldValue(""Source Number Type"");
			}
			
			strCnctAssNumber     = strCnctAssNumber + GetFieldValue(""Destination Number"");
			strCnctAssNumberType = strCnctAssNumberType + GetFieldValue(""Destination Number Type"");

			ClearToQuery();
			//SetSearchSpec(""Par Ass Id"", GetFieldValue(""Id""));KT 21-06-06
			SetSearchSpec(""Parent Ass Id"", GetFieldValue(""Id""));
			ExecuteQuery();
		}
	}
	
//-------------------------------------------------------------------------
//Updating the new concatenated number and number type in concat table
//-------------------------------------------------------------------------
	
	with(bcAssocNumberTypeDisplay) {
		ClearToQuery();
		SetSearchSpec(""Id"", strConcatId);
		ExecuteQuery();
		if(FirstRecord()) {
			SetFieldValue(""Associated Number"",strCnctAssNumber);
			SetFieldValue(""Associated Type"",strCnctAssNumberType);
			WriteRecord();
		}
	}
	
	ChangeNumberStatus(bcNumberMaster,bcNumberScheme,blnIsSIMTwiceAssociated,strAssNumber,Inputs);
	
  return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Association Rule Service PreInvoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Service PreInvoke.                            		  			  *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{

	var intReturn = ContinueOperation;	
	var strErrVal = """";

	var boNumberMaster;
	var bcNumberMaster;
	var boNumberAssociation;
	var bcAssocNumberTypeDisplay;
	var bcNumberAssocDetail;
	var bcNumberAssocMasterConcat;
	var bcNumberMasterConcat;
	var boNumberScheme;
	var bcNumberScheme;
	var blnIsPartial;


		boNumberMaster 			  = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
		bcNumberMaster 	          = boNumberMaster.GetBusComp(""RMS NM Number Enquiry For Update""); // RMS NM Number Enquiry 
		boNumberAssociation       = TheApplication().GetBusObject(""RMS NM Number Association"");
		bcAssocNumberTypeDisplay  = boNumberAssociation.GetBusComp(""RMS NM Association Number Type Display"");
		bcNumberAssocDetail       = boNumberAssociation.GetBusComp(""RMS NM Number Association Detail"");
		bcNumberAssocMasterConcat = boNumberAssociation.GetBusComp(""RMS NM Number Association Master Concat"");
		bcNumberMasterConcat      =	boNumberAssociation.GetBusComp(""RMS NM Number Master Concat"");
		boNumberScheme			  = TheApplication().GetBusObject(""RMS NM Number Scheme"");
		bcNumberScheme			  = boNumberScheme.GetBusComp(""RMS NM Number Scheme"");
	
		switch(MethodName){
		
			case ""DeAssociate"":
				intReturn = CancelOperation;
					blnIsPartial = Inputs.GetProperty(""Partial(Y/N)"");
					if(blnIsPartial ==""N""){
						strErrVal = DeAssociate(Inputs,bcNumberMaster,bcAssocNumberTypeDisplay,bcNumberAssocDetail,bcNumberAssocMasterConcat,bcNumberMasterConcat,bcNumberScheme);
						Outputs.SetProperty(""ErrorCode"",strErrVal);
						return(intReturn);
					}	
					else if(blnIsPartial ==""Y""){
						strErrVal = PartialDeassociation(Inputs,bcNumberMaster,bcAssocNumberTypeDisplay,bcNumberAssocDetail,bcNumberAssocMasterConcat,bcNumberMasterConcat,bcNumberScheme);
						Outputs.SetProperty(""ErrorCode"");
						return(intReturn);
					}
			break;
			
		}
		
		bcNumberMaster 	          = null;
		boNumberMaster 			  = null;
		
		bcAssocNumberTypeDisplay  = null;
		bcNumberAssocDetail       = null;
		bcNumberAssocMasterConcat = null;
		bcNumberMasterConcat      =	null;
		boNumberAssociation       = null;
		
		bcNumberScheme			  = null;
		boNumberScheme			  = null;
		return(intReturn);	
		
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed, corrected objects freeing sequqnce
---------------+------+--------+----------------------------------------------
*/
function DeleteFile(Inputs,Outputs)
{
			/*the command to print the file names will be, name sorted
			for dos 
			dir [directory]\[pattern] /ON /B > [directory]\filelist.txt
			for unix??
			ls [directory]/[pattern] | sort > [directory]/filelist.txt
			populate the filenames in a propertyset, simple to call 
			*/
	var strDirPath	=	Inputs.GetProperty(""SysPrefDirPath"");//""C:\\test\\"";
	var FilePath;
	var strArchDays	=	Inputs.GetProperty(""SysPrefArchDays"");
	var strOS		=	Inputs.GetProperty(""SysPrefOS"");
	var strMove		=	Inputs.GetProperty(""SysPrefMove"");
	var strArchDir	=	Inputs.GetProperty(""SysPrefArchDir"");
	var strFileList = 	"""";//TEMPORARY FILE TO HOLD THE LIST OF FILES
	

	var strOS;
	var msCMD;//command string to execute list directory function on the OS
	var msCMDunix;
	
	var intArchive;
try
{
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref = boSysPref.GetBusComp(""System Preferences"");

//-----GETTING THE Move/Delete FROM SYSTEM PREFERENCE------------
		bcSysPref.ActivateField(""Value"");
		
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",strMove);
		bcSysPref.ExecuteQuery();
	
		if(bcSysPref.FirstRecord()) 
		{	 
			strMove = bcSysPref.GetFieldValue(""Value"");
		}

//-----GETTING THE ARCHIVAL PERIOD FROM SYSTEM PREFERENCE------------
		bcSysPref.ActivateField(""Value"");
		
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",strArchDays);
		bcSysPref.ExecuteQuery();
	
		if(bcSysPref.FirstRecord()) 
		{	 
			intArchive = bcSysPref.GetFieldValue(""Value"");
		}
//-------------------------------------------------------------
//------GETTING THE OPERATING SYSTEM TYPE FROM SYSTEM PREFERENCE---

		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",strOS);
		bcSysPref.ExecuteQuery();
	
		if(bcSysPref.FirstRecord()) 
		{	 
			strOS = bcSysPref.GetFieldValue(""Value"");
		}

//-------------------------------------------------------------
//------GETTING THE DIRECTORY PATH FROM SYSTEM PREFERENCE---
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",strDirPath);
		bcSysPref.ExecuteQuery();
	
		if(bcSysPref.FirstRecord()) 
		{	 
			FilePath = bcSysPref.GetFieldValue(""Value"");
		}
//-------------------------------------------------------------


		if	(strMove	==	""N"")	//---REMOVE THE FILES
		{
					//---------------------------------------------------------------
					if(strOS == ""UNIX"")
					{
						msCMDunix="find "" + FilePath + "" -mtime +"" + intArchive +"" -exec rm {} +""; 
						//now execute the command on OS, can be risky
						Clib.system(msCMDunix);
					}
					else
					{
						strFileList = 	FilePath + ""temp_listoffiles.txt"";
						msCMD = ""dir "" + FilePath + "" /TC /OD | find \""/\"" > "" + strFileList;
						//now execute the command on OS, can be risky		
						Clib.system(msCMD);
						DeleteFile_Win(intArchive,FilePath,strFileList,strMove,strArchDir);
					}
					

		}
		else						//---MOVE THE FILES TO ARCHIVE DIR
		{
					//------GETTING THE ARCHIVE DIR PATH FROM SYSTEM PREFERENCE---
					bcSysPref.ClearToQuery();
					bcSysPref.SetSearchSpec(""Name"",strArchDir);
					bcSysPref.ExecuteQuery();
				
					if(bcSysPref.FirstRecord()) 
					{	 
						strArchDir = bcSysPref.GetFieldValue(""Value"");
					}


					if(strOS == ""UNIX"")
					{
						//$ find EXP_ITEM_SOLD_DIR_OUT -mtime -1 -type f -exec mv {} EXP_ITEM_S
						msCMDunix = "find "" + FilePath + "" -mtime +"" + intArchive +"" -type f -exec mv {} "" + strArchDir + "" \\\;""; 
						//now execute the command on OS, can be risky
						Clib.system(msCMDunix);
					}
					else
					{
						strFileList = 	FilePath + ""temp_listoffiles.txt"";
						msCMD = ""dir "" + FilePath + "" /TC /OD | find \""/\"" > "" + strFileList;
						//now execute the command on OS, can be risky		
						Clib.system(msCMD);
						DeleteFile_Win(intArchive,FilePath,strFileList,strMove,strArchDir);
					}

		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	//1.1 below
		 bcSysPref =	null;
		 boSysPref =	null;
	//1.1 above
	}	
	return CancelOperation;
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060710       | 1.1  | Garima | Changed the date time extraction to fetch 0th char onwards for 10 length
---------------+------+--------+----------------------------------------------
*/
function DeleteFile_Win(intArchive,FilePath,strFileList,strMove,strArchDir)
{
		var str;
		var strCreationDate;
		var strFilename;
		var dtFiledate;
		var dtSysdate;
		var strdiff;


try
{		
		var fpr1=Clib.fopen(strFileList,""r"");
		if(fpr1==null)
			TheApplication().RaiseErrorText(""Could not open File"");
		
		str=Clib.fgets(fpr1);
		
		while(!Clib.feof(fpr1))
		{
//1.1 below
				strCreationDate=str.substring(0,10);	//EXTRACTING FILE CREATION DATE
//1.1 above
				if(str != """")
				{
					dtFiledate = new Date(strCreationDate);	
		            dtSysdate = dtFiledate.toSystem();		
		            
					strdiff=(Clib.difftime(Clib.time(),dtSysdate))/86400;	//	CALCULATING DIFF B/W TODAY'S DATE AND FILE CREATION DATE
					
					if(strdiff >= intArchive)		//	FILES CREATED BEFORE ARCHIVAL PERIOD TO BE DELETED
					{
							strFilename=str.substring(39,str.length - 1);	//EXTRACTING FILENAME
							//  FILE SHOULD NOT BE PARENT OR ROOT DIRECTORY and THIS FILE SHOULD NOT BE DELETED
							if (Clib.isalnum(strFilename.charAt(0))  && (strFilename != ""temp_listoffiles.txt""))
							{
								if (strMove	==	""N"")	
								{
									if(Clib.remove(FilePath+strFilename)!=0)
										TheApplication().RaiseErrorText(""Could not delete the File---""+FilePath+strFilename);
								}
								else
								{
									Clib.rename(FilePath+strFilename,strArchDir+strFilename);
									Clib.remove(FilePath+strFilename);
								}
							}
								
					}
					else	// REMAINING FILES ARE NOT TO BE DELETED
					{
						break;
					}
	
				}	
			str=Clib.fgets(fpr1);	
		}//while end
			Clib.fclose(fpr1);
			
		if(Clib.remove(strFileList)!=0)	// REMOVING THE TEMPORARY FILE CREATED
			TheApplication().RaiseErrorText(""Could not delete the File---""+strFileList);

}//try end
	catch(e)  
	{
		if (fpr1 != null)
			Clib.fclose(fpr1);
			
		throw(e);
	}	
	
		
}//function end"
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
try{
		if(MethodName==""DeleteFile"")
			 DeleteFile(Inputs,Outputs);
	}
	catch(e)
	{
		TheApplication().RaiseErrorText(""Error:""+e);
	}
			 
	return (CancelOperation);
}
function GetBatchDetailsForAssoc(Inputs, Outputs)
{
	try
	{
		var vBatchId = """";
		
		vBatchId = Inputs.GetProperty(""BatchId"");

		var boRMSNMMain = TheApplication().GetBusObject(""RMS Starter Pack Automation"");
		var bcRMSNMMain = boRMSNMMain.GetBusComp(""RMS Starter Pack Automation"");

		var strSearchStr = ""[Id] = '"" + vBatchId + ""'"";
		
		with(bcRMSNMMain)
		{
			ActivateField(""Quantity"");
			ActivateField(""R1 Association Rule Type"");
			ActivateField(""Start Number IMSI"");
			ActivateField(""Start Number ICCID"");
			ActivateField(""Block Name ICCID"");
			ActivateField(""Type ICCID"");
			ActivateField(""Scheme Name ICCID"");
			ActivateField(""R1 Association Rule"");
			ActivateField(""Type IMSI"");
			ActivateField(""Scheme Name IMSI"");
			ActivateField(""Block Name IMSI"");
			
			ClearToQuery();
			SetSearchExpr(strSearchStr);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				Outputs.SetProperty(""Quantity 2"",GetFieldValue(""Quantity""));
				Outputs.SetProperty(""R1 Association Rule Type"",GetFieldValue(""R1 Association Rule Type""));
				Outputs.SetProperty(""IMSI Complete Start Number"",GetFieldValue(""Start Number IMSI""));
				Outputs.SetProperty(""ICCID Complete Start Number"",GetFieldValue(""Start Number ICCID""));
				Outputs.SetProperty(""ICCID Block Name"",GetFieldValue(""Block Name ICCID""));
				Outputs.SetProperty(""ICCID Type"",GetFieldValue(""Type ICCID""));
				Outputs.SetProperty(""ICCID Scheme Name"",GetFieldValue(""Scheme Name ICCID""));
				Outputs.SetProperty(""R1 Association Rule Name"",GetFieldValue(""R1 Association Rule""));
				Outputs.SetProperty(""IMSI Type"",GetFieldValue(""Type IMSI""));
				Outputs.SetProperty(""IMSI Scheme Name"",GetFieldValue(""Scheme Name IMSI""));
				Outputs.SetProperty(""IMSI Block Name"",GetFieldValue(""Block Name IMSI""));
			}
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcRMSNMMain = null;
		boRMSNMMain = null;
	}
}
function GetBatchDetailsForGen(Inputs, Outputs)
{
	try
	{
		var vBatchId = """";
		
		vBatchId = Inputs.GetProperty(""BatchId"");

		var boRMSNMMain = TheApplication().GetBusObject(""RMS Starter Pack Automation"");
		var bcRMSNMMain = boRMSNMMain.GetBusComp(""RMS Starter Pack Automation"");

		var strSearchStr = ""[Id] = '"" + vBatchId + ""'"";
		
		with(bcRMSNMMain)
		{
			ActivateField(""Quantity"");
			ActivateField(""Block Name ICCID"");
			ActivateField(""Scheme Name ICCID"");
			ActivateField(""Start Number ICCID String"");
			ActivateField(""Block Name IMSI"");
			ActivateField(""Scheme Name IMSI"");
			ActivateField(""Start Number IMSI String"");
		//	ActivateField(""Block Name MSISDN"");
		//	ActivateField(""Scheme Name MSISDN"");
		//	ActivateField(""Start Number MSISDN String"");
			
			ClearToQuery();
			SetSearchExpr(strSearchStr);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				Outputs.SetProperty(""Quantity 1"",GetFieldValue(""Quantity""));
				Outputs.SetProperty(""ICCID Block Name"",GetFieldValue(""Block Name ICCID""));
				Outputs.SetProperty(""ICCID Scheme Name"",GetFieldValue(""Scheme Name ICCID""));
				Outputs.SetProperty(""ICCID Start Number"",GetFieldValue(""Start Number ICCID String""));
				Outputs.SetProperty(""IMSI Block Name"",GetFieldValue(""Block Name IMSI""));
				Outputs.SetProperty(""IMSI Scheme Name"",GetFieldValue(""Scheme Name IMSI""));
				Outputs.SetProperty(""IMSI Start Number"",GetFieldValue(""Start Number IMSI String""));
			//	Outputs.SetProperty(""MSISDN Block Name"",GetFieldValue(""Block Name MSISDN""));
			//	Outputs.SetProperty(""MSISDN Scheme Name"",GetFieldValue(""Scheme Name MSISDN""));
			//	Outputs.SetProperty(""MSISDN Start Number"",GetFieldValue(""Start Number MSISDN String""));
			}
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcRMSNMMain = null;
		boRMSNMMain = null;
	}
}
function GetBatchDetailsForSIMOrder(Inputs, Outputs)
{
	try
	{
		var vBatchId = """";
		
		vBatchId = Inputs.GetProperty(""BatchId"");

		var boRMSNMMain = TheApplication().GetBusObject(""RMS Starter Pack Automation"");
		var bcRMSNMMain = boRMSNMMain.GetBusComp(""RMS Starter Pack Automation"");

		var strSearchStr = ""[Id] = '"" + vBatchId + ""'"";
		
		with(bcRMSNMMain)
		{
			ActivateField(""Quantity"");
			ActivateField(""Block Name IMSI"");
			ActivateField(""Scheme Name IMSI"");
			ActivateField(""Start Number IMSI"");
			ActivateField(""Bill To Address"");
			ActivateField(""Bill To Organisation"");
			ActivateField(""SIM Card Configuration Name"");
			ActivateField(""Contact Last Name"");
			ActivateField(""PO Reference Number"");
			ActivateField(""SIM Order Description"");
			ActivateField(""SIM Supplier Name"");
			ActivateField(""STC Transport Key"");
			ActivateField(""STC Transport 3GOP Key"");
			ActivateField(""Profile"");
			
			ClearToQuery();
			SetSearchExpr(strSearchStr);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				Outputs.SetProperty(""Quantity 3"",GetFieldValue(""Quantity""));
				Outputs.SetProperty(""IMSI Block Name"",GetFieldValue(""Block Name IMSI""));
				Outputs.SetProperty(""IMSI Scheme Name"",GetFieldValue(""Scheme Name IMSI""));
				Outputs.SetProperty(""IMSI Complete Start Number"",GetFieldValue(""Start Number IMSI""));
				Outputs.SetProperty(""Bill To Address"",GetFieldValue(""Bill To Address""));
				Outputs.SetProperty(""Bill to Organisation"",GetFieldValue(""Bill To Organisation""));
				Outputs.SetProperty(""Card Config"",GetFieldValue(""SIM Card Configuration Name""));
				Outputs.SetProperty(""Contact Last Name"",GetFieldValue(""Contact Last Name""));
				Outputs.SetProperty(""PO Ref Number"",GetFieldValue(""PO Reference Number""));
				Outputs.SetProperty(""SIM Order Description"",GetFieldValue(""SIM Order Description""));
				Outputs.SetProperty(""Supplier Name"",GetFieldValue(""SIM Supplier Name""));
				Outputs.SetProperty(""Transport Key"",GetFieldValue(""STC Transport Key""));
				Outputs.SetProperty(""Transport 3GOp Key"",GetFieldValue(""STC Transport 3GOP Key""));
				Outputs.SetProperty(""Profile"",GetFieldValue(""Profile""));
			}
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcRMSNMMain = null;
		boRMSNMMain = null;
	}
}
function GetBatches(Inputs, Outputs)
{
	try
	{
		var vResponseCode1 = ""99999"";
		var vResponseCode2 = ""99999"";
		var vResponseCode3 = ""99999"";
		var vResponseMessage1 = ""No Batches to Process"";
		var vResponseMessage2 = ""No Batches to Process"";
		var vResponseMessage3 = ""No Batches to Process"";
		var vBatchIdStage1 = ""None"";
		var vBatchIdStage2 = ""None"";
		var vBatchIdStage3 = ""None"";
		
		var boRMSNMMain = TheApplication().GetBusObject(""RMS Starter Pack Automation"");
		var bcRMSNMMain = boRMSNMMain.GetBusComp(""RMS Starter Pack Automation"");

		var strSearchStr1 = ""[Status] = 'Submitted' AND [Sub Status] = 'Submitted'"";
		var strSearchStr2 = ""[Status] = 'Submitted' AND [Sub Status] = 'Number Generation in Progress'"";
		var strSearchStr3 = ""[Status] = 'Numbers Generated' AND [Sub Status] = 'Numbers Generated'"";
	//	var strSearchStr4 = ""[Status] = 'Numbers Generated' AND [Sub Status] = 'R1 Association in Progress'"";
		var strSearchStr5 = ""[Status] = 'R1 Association Complete' AND [Sub Status] = 'R1 Association Complete'"";
	//	var strSearchStr6 = ""[Status] = 'R1 Association Complete' AND [Sub Status] = 'SIM Order in Progress'"";
		
		bcRMSNMMain.ClearToQuery();
		bcRMSNMMain.SetSearchExpr(strSearchStr2);
		bcRMSNMMain.ExecuteQuery(ForwardOnly);
		if(bcRMSNMMain.FirstRecord())
		{
			vBatchIdStage1 = bcRMSNMMain.GetFieldValue(""Id"");
			vResponseCode1 = ""00001"";
			vResponseMessage1 = ""Currently the Batch: "" + vBatchIdStage1 + "" is being Processed"";
		}
		else
		{
			bcRMSNMMain.ClearToQuery();
			bcRMSNMMain.SetSearchExpr(strSearchStr1);
			bcRMSNMMain.ExecuteQuery(ForwardOnly);
			if(bcRMSNMMain.FirstRecord())
			{
				vBatchIdStage1 = bcRMSNMMain.GetFieldValue(""Id"");
				vResponseCode1 = ""00000"";
				vResponseMessage1 = ""Success for the Batch: "" + vBatchIdStage1;
			}
		}
		
	/*	bcRMSNMMain.ClearToQuery();
		bcRMSNMMain.SetSearchExpr(strSearchStr4);
		bcRMSNMMain.ExecuteQuery(ForwardOnly);
		if(bcRMSNMMain.FirstRecord())
		{
			vBatchIdStage2 = bcRMSNMMain.GetFieldValue(""Id"");
			vResponseCode2 = ""00001"";
			vResponseMessage2 = ""Currently the Batch: "" + vBatchIdStage2 + "" is being Processed"";
		}
		else
		{*/
			bcRMSNMMain.ClearToQuery();
			bcRMSNMMain.SetSearchExpr(strSearchStr3);
			bcRMSNMMain.ExecuteQuery(ForwardOnly);
			if(bcRMSNMMain.FirstRecord())
			{
				vBatchIdStage2 = bcRMSNMMain.GetFieldValue(""Id"");
				vResponseCode2 = ""00000"";
				vResponseMessage2 = ""Success for the Batch: "" + vBatchIdStage2;
			}
	/*	}
		
		bcRMSNMMain.ClearToQuery();
		bcRMSNMMain.SetSearchExpr(strSearchStr6);
		bcRMSNMMain.ExecuteQuery(ForwardOnly);
		if(bcRMSNMMain.FirstRecord())
		{
			vBatchIdStage3 = bcRMSNMMain.GetFieldValue(""Id"");
			vResponseCode3 = ""00001"";
			vResponseMessage3 = ""Currently the Batch: "" + vBatchIdStage3 + "" is being Processed"";
		}
		else
		{*/
			bcRMSNMMain.ClearToQuery();
			bcRMSNMMain.SetSearchExpr(strSearchStr5);
			bcRMSNMMain.ExecuteQuery(ForwardOnly);
			if(bcRMSNMMain.FirstRecord())
			{
				vBatchIdStage3 = bcRMSNMMain.GetFieldValue(""Id"");
				vResponseCode3 = ""00000"";
				vResponseMessage3 = ""Success for the Batch: "" + vBatchIdStage3;
			}
	//	}
		Outputs.SetProperty(""ResponseCode1"", vResponseCode1);
		Outputs.SetProperty(""ResponseCode2"", vResponseCode2);
		Outputs.SetProperty(""ResponseCode3"", vResponseCode3);
		Outputs.SetProperty(""ResponseMessage1"", vResponseMessage1);
		Outputs.SetProperty(""ResponseMessage2"", vResponseMessage2);
		Outputs.SetProperty(""ResponseMessage3"", vResponseMessage3);
		Outputs.SetProperty(""BatchIdStage1"", vBatchIdStage1);
		Outputs.SetProperty(""BatchIdStage2"", vBatchIdStage2);
		Outputs.SetProperty(""BatchIdStage3"", vBatchIdStage3);

	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcRMSNMMain = null;
		boRMSNMMain = null;
	}
}
function InsertAssociationMaster(Inputs, Outputs)
{
	try
	{
		var vRowId = ""None"";
		var vAssId = ""None"";
		var vSourceRowId = ""None"";
		var vDestRowId = ""None"";
		Outputs.SetProperty(""MstrRowId"",vRowId);
		Outputs.SetProperty(""AssociationId"",vAssId);
		Outputs.SetProperty(""SourceRowId"",vSourceRowId);
		Outputs.SetProperty(""DestRowId"",vDestRowId);
		var vRuleName = Inputs.GetProperty(""RuleName"");
		var vSourceType = Inputs.GetProperty(""SourceType"");
		var vDestType = Inputs.GetProperty(""DestType"");
		var vDestScheme = Inputs.GetProperty(""DestScheme"");
		var vDestBlock = Inputs.GetProperty(""DestBlock"");
		var vDestStartNum = Inputs.GetProperty(""DestStartNum"");
		var vSourceScheme = Inputs.GetProperty(""SourceScheme"");
		var vSourceBlock = Inputs.GetProperty(""SourceBlock"");
		var vSourceStartNum = Inputs.GetProperty(""SourceStartNum"");
		var vQuantity = Inputs.GetProperty(""Quantity"");

		var boNumAss = TheApplication().GetBusObject(""RMS NM Number Association"");
		var bcNumAss = boNumAss.GetBusComp(""RMS NM Number Association Master"");
		var bcNumAssStartNum = boNumAss.GetBusComp(""RMS NM Number Association Start Number"");
		
		with(bcNumAss)
		{
			InvokeMethod(""SetAdminMode"",""TRUE""); 
			SetViewMode(AllView);
			ActivateField(""Id"");
			ActivateField(""Association Id"");
			ActivateField(""Rule Name"");
			NewRecord(1);
			SetFieldValue(""Rule Name"",vRuleName);
			WriteRecord();
			vRowId = GetFieldValue(""Id"");
			vAssId = GetFieldValue(""Association Id"");
			Outputs.SetProperty(""MstrRowId"",vRowId);
			Outputs.SetProperty(""AssociationId"",vAssId);
		}
		
		with(bcNumAssStartNum)
		{
			InvokeMethod(""SetAdminMode"",""TRUE""); 
			SetViewMode(AllView);
			ActivateField(""Id"");
			ActivateField(""Ass Id"");
			ActivateField(""Scheme Name"");
			ActivateField(""Block Name"");
			ActivateField(""Start Number"");
			ActivateField(""Quantity"");
			ActivateField(""Type"");
			ClearToQuery();
			var strSearchExpr = ""[Ass Id] = '"" + vRowId + ""' AND [Type] = '"" + vSourceType + ""'"";
			SetSearchExpr(strSearchExpr);
			ExecuteQuery(ForwardOnly);
			var isRecord = FirstRecord();
			if(isRecord)   	
			{
				vSourceRowId = GetFieldValue(""Id"");
				SetFieldValue(""Scheme Name"",vSourceScheme);
				SetFieldValue(""Block Name"",vSourceBlock);
			//	SetFieldValue(""Start Number"",vSourceStartNum);
				
				var pickBC = GetPicklistBusComp(""Start Number"");
				with (pickBC)
				{
					ClearToQuery();
					ActivateField(""Number String"");
					SetSearchSpec(""Number String"",vSourceStartNum);
					ExecuteQuery(ForwardOnly);
					if (FirstRecord())
						Pick();
				}
				pickBC = null;
				
				SetFieldValue(""Quantity"",vQuantity);
				WriteRecord();
			}
			
			ClearToQuery();
			var strSearchExpr2 = ""[Ass Id] = '"" + vRowId + ""' AND [Type] = '"" + vDestType + ""'"";
			SetSearchExpr(strSearchExpr2);
			ExecuteQuery(ForwardOnly);
			var isRecord2 = FirstRecord();
			if(isRecord2)   	
			{
				vDestRowId = GetFieldValue(""Id"");
				SetFieldValue(""Scheme Name"",vDestScheme);
				SetFieldValue(""Block Name"",vDestBlock);
			//	SetFieldValue(""Start Number"",vDestStartNum);
				
				var pickBC2 = GetPicklistBusComp(""Start Number"");
				with (pickBC2)
				{
					ClearToQuery();
					ActivateField(""Number String"");
					SetSearchSpec(""Number String"",vDestStartNum);
					ExecuteQuery(ForwardOnly);
					if (FirstRecord())
						Pick();
				}
				pickBC2 = null;
				
				WriteRecord();
			}
			Outputs.SetProperty(""SourceRowId"",vSourceRowId);
			Outputs.SetProperty(""DestRowId"",vDestRowId);
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcNumAssStartNum = null;
		bcNumAss = null;
		boNumAss = null;
	}
}
function InsertICCIDNumGenLog(Inputs, Outputs)
{
	try
	{
		var vRowId = ""None"";
		Outputs.SetProperty(""MstrRowId"",vRowId);
		var vICCIDBlock = Inputs.GetProperty(""ICCIDBlock"");
		var vICCIDScheme = Inputs.GetProperty(""ICCIDScheme"");
		var vICCIDStartNum = Inputs.GetProperty(""ICCIDStartNum"");
		var vQuantity = Inputs.GetProperty(""Quantity"");

		var boNumGen = TheApplication().GetBusObject(""RMS NM Number Generation"");
		var bcNumGen = boNumGen.GetBusComp(""RMS NM Number Generation"");
		
		with(bcNumGen)
		{
			InvokeMethod(""SetAdminMode"",""TRUE""); 
			SetViewMode(AllView);
			ActivateField(""Id"");
			ActivateField(""Scheme Name"");
			ActivateField(""Block Name"");
			ActivateField(""Start String Number"");
			ActivateField(""Quantity Str"");
			NewRecord(1);
			SetFieldValue(""Scheme Name"",vICCIDScheme);
			SetFieldValue(""Block Name"",vICCIDBlock);
			SetFieldValue(""Start String Number"",vICCIDStartNum);
			SetFieldValue(""Quantity Str"",vQuantity);
			WriteRecord();
			vRowId = GetFieldValue(""Id"");
			Outputs.SetProperty(""MstrRowId"",vRowId);
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcNumGen = null;
		boNumGen = null;
	}
}
function InsertIMSINumGenLog(Inputs, Outputs)
{
	try
	{
		var vRowId = ""None"";
		Outputs.SetProperty(""MstrRowId"",vRowId);
		var vIMSIBlock = Inputs.GetProperty(""IMSIBlock"");
		var vIMSIScheme = Inputs.GetProperty(""IMSIScheme"");
		var vIMSIStartNum = Inputs.GetProperty(""IMSIStartNum"");
		var vQuantity = Inputs.GetProperty(""Quantity"");

		var boNumGen = TheApplication().GetBusObject(""RMS NM Number Generation"");
		var bcNumGen = boNumGen.GetBusComp(""RMS NM Number Generation"");
		
		with(bcNumGen)
		{
			InvokeMethod(""SetAdminMode"",""TRUE""); 
			SetViewMode(AllView);
			ActivateField(""Id"");
			ActivateField(""Scheme Name"");
			ActivateField(""Block Name"");
			ActivateField(""Start String Number"");
			ActivateField(""Quantity Str"");
			NewRecord(1);
			SetFieldValue(""Scheme Name"",vIMSIScheme);
			SetFieldValue(""Block Name"",vIMSIBlock);
			SetFieldValue(""Start String Number"",vIMSIStartNum);
			SetFieldValue(""Quantity Str"",vQuantity);
			WriteRecord();
			vRowId = GetFieldValue(""Id"");
			Outputs.SetProperty(""MstrRowId"",vRowId);
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcNumGen = null;
		boNumGen = null;
	}
}
function InsertOrderLineDetail(Inputs, Outputs)
{
	try
	{
		var vRowId = ""None"";
		Outputs.SetProperty(""DetailRowId"",vRowId);
		var vOrderId = Inputs.GetProperty(""OrderId"");
		var vSchemeName = Inputs.GetProperty(""SchemeName"");
		var vBlockName = Inputs.GetProperty(""BlockName"");
		var vStartingNumber = Inputs.GetProperty(""StartingNumber"");
		var vCardConfig = Inputs.GetProperty(""CardConfig"");
		var vQuantity = Inputs.GetProperty(""Quantity"");
		var vSalesChannelName = Inputs.GetProperty(""SalesChannelName"");
		var vOrgNameFinal = vSalesChannelName;
		var vFound = vSalesChannelName.lastIndexOf("", "");
		if(vFound != ""-1"")
		{
			vOrgNameFinal = vSalesChannelName.substring(0, ToNumber(vFound));
		}
		
		var boSIMOrd = TheApplication().GetBusObject(""RMS SIM Order"");
		var bcSIMOrdLine = boSIMOrd.GetBusComp(""RMS SIM Order Line"");
		
		with(bcSIMOrdLine)
		{
			InvokeMethod(""SetAdminMode"",""TRUE""); 
			SetViewMode(AllView);
			ActivateField(""Id"");
			ActivateField(""Rule Name"");
			NewRecord(1);
			SetFieldValue(""Order Id"",vOrderId);
			SetFieldValue(""SIM Card Config Name"",vCardConfig);
			SetFieldValue(""Scheme Name"",vSchemeName);
			SetFieldValue(""Block Name"",vBlockName);
			SetFieldValue(""Starting Number"",vStartingNumber);
			SetFieldValue(""Quantity Ordered"",vQuantity);
			SetFieldValue(""Sales Channel Name"",vOrgNameFinal);
			WriteRecord();
			vRowId = GetFieldValue(""Id"");
			Outputs.SetProperty(""DetailRowId"",vRowId);
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcSIMOrdLine = null;
		boSIMOrd = null;
	}
}
function InsertSIMOrder(Inputs, Outputs)
{
	try
	{
		var vRowId = ""None"";
		var vOrdNum = ""None"";
		var vTransport3GOpKey = ""None"";
		var v3GOpFlg = ""N"";
		if(Inputs.GetProperty(""Transport3GOpKey"") != """")
		{
			v3GOpFlg = ""Y"";
			vTransport3GOpKey = Inputs.GetProperty(""Transport3GOpKey"");
		}
		var vProfile = ""None"";
		var vProfFlg = ""N"";
		if(Inputs.GetProperty(""Profile"") != """")
		{
			vProfFlg = ""Y"";
			vProfile = Inputs.GetProperty(""Profile"");
		}
		Outputs.SetProperty(""MstrRowId"",vRowId);
		Outputs.SetProperty(""OrderNumber"",vOrdNum);
		var vDescription = Inputs.GetProperty(""Description"");
		var vOrganizationName = Inputs.GetProperty(""OrganizationName"");
		var vOrgNameFinal = vOrganizationName;
		var vFound = vOrganizationName.lastIndexOf("", "");
		if(vFound != ""-1"")
		{
			vOrgNameFinal = vOrganizationName.substring(0, ToNumber(vFound));
		}
		
		var vPORequisitionRefNumber = Inputs.GetProperty(""PORequisitionRefNumber"");
		var vSupplierName = Inputs.GetProperty(""SupplierName"");
		var vTransportKey = Inputs.GetProperty(""TransportKey"");
		var vBillToAddress = Inputs.GetProperty(""BillToAddress"");
		var vContactLastName = Inputs.GetProperty(""ContactLastName"");

		var boSIMOrd = TheApplication().GetBusObject(""RMS SIM Order"");
		var bcSIMOrd = boSIMOrd.GetBusComp(""RMS SIM Order"");

		with(bcSIMOrd)
		{
			InvokeMethod(""SetAdminMode"",""TRUE""); 
			SetViewMode(AllView);
			ActivateField(""Id"");
			ActivateField(""Order Number"");
			ActivateField(""Description"");
			ActivateField(""Organization Name"");
			ActivateField(""PO Requisition Ref Number"");
			ActivateField(""Supplier Name"");
			ActivateField(""Transport Key"");
			ActivateField(""Bill To Address"");
			ActivateField(""Contact Last Name"");
			if(v3GOpFlg == ""Y"")
			{
				ActivateField(""Transport 3GOP key"");
			}
			if(vProfFlg == ""Y"")
			{
				ActivateField(""Profile"");
			}

			NewRecord(1);
			SetFieldValue(""Description"",vDescription);
			SetFieldValue(""PO Requisition Ref Number"",vPORequisitionRefNumber);
			SetFieldValue(""Transport Key"",vTransportKey);
			SetFieldValue(""Organization Name"",vOrgNameFinal);

			if(v3GOpFlg == ""Y"")
			{
				SetFieldValue(""Transport 3GOP key"", vTransport3GOpKey);
			}
			if(vProfFlg == ""Y"")
			{
				SetFieldValue(""Profile"", vProfile);
			}

			var pickBC2 = GetPicklistBusComp(""Supplier Name"");
			with (pickBC2)
			{
				InvokeMethod(""SetAdminMode"",""TRUE""); 
				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(""Name"");
				var strSearchExpr2 = ""[Name] = '"" + vSupplierName + ""'"";
				SetSearchExpr(strSearchExpr2);
				ExecuteQuery(ForwardOnly);
				if (FirstRecord())
					Pick();
			}
			pickBC2 = null;

			var pickBC4 = GetPicklistBusComp(""Contact Last Name"");
			with (pickBC4)
			{
				ClearToQuery();
				ActivateField(""Last Name"");
				SetSearchSpec(""Last Name"",vContactLastName);
				ExecuteQuery(ForwardOnly);
				if (FirstRecord())
					Pick();
			}
			pickBC4 = null;

			var pickBC3 = GetPicklistBusComp(""Bill To Address"");
			with (pickBC3)
			{
				ClearToQuery();
				ActivateField(""Street Address"");
				var strSearchExpr = ""[Street Address] = '"" + vBillToAddress + ""'"";
				SetSearchExpr(strSearchExpr);
				ExecuteQuery(ForwardOnly);
				if (FirstRecord())
					Pick();
			}
			pickBC3 = null;

			WriteRecord();
			vRowId = GetFieldValue(""Id"");
			vOrdNum = GetFieldValue(""Order Number"");
			Outputs.SetProperty(""MstrRowId"",vRowId);
			Outputs.SetProperty(""OrderNumber"",vOrdNum);
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcSIMOrd = null;
		boSIMOrd = null;
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""GetBatches"")
	{
		GetBatches(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == ""InsertAssociationMaster"")
	{
		InsertAssociationMaster(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == ""InsertOrderLineDetail"")
	{
		InsertOrderLineDetail(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == ""InsertSIMOrder"")
	{
		InsertSIMOrder(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == ""UpdateBatchStatus"")
	{
		UpdateBatchStatus(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == ""GetBatchDetailsForGen"")
	{
		GetBatchDetailsForGen(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == ""GetBatchDetailsForAssoc"")
	{
		GetBatchDetailsForAssoc(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == ""GetBatchDetailsForSIMOrder"")
	{
		GetBatchDetailsForSIMOrder(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == ""InsertICCIDNumGenLog"")
	{
		InsertICCIDNumGenLog(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == ""InsertIMSINumGenLog"")
	{
		InsertIMSINumGenLog(Inputs, Outputs);
		return(CancelOperation);
	}
	return(ContinueOperation);
}
function UpdateBatchStatus(Inputs, Outputs)
{
	try
	{
		var vBatchId = """";
		var vResponseCode = """";
		var vResponseMessage = """";
		var vStatus = """";
		var vSubStatus = """";
		
		var vAssociationId = ""None"";
		var vAssIdFlg = ""N"";
		if(Inputs.GetProperty(""AssociationId"") != """")
		{
			vAssIdFlg = ""Y"";
			vAssociationId = Inputs.GetProperty(""AssociationId"");
		}
		
		var vOrderNumber = ""None"";
		var vOrdNumFlg = ""N"";
		if(Inputs.GetProperty(""OrderNumber"") != """")
		{
			vOrdNumFlg = ""Y"";
			vOrderNumber = Inputs.GetProperty(""OrderNumber"");
		}
		
		vBatchId = Inputs.GetProperty(""BatchId"");
	//	vResponseCode = Inputs.GetProperty(""PesponseCode"");
	//	vResponseMessage = Inputs.GetProperty(""ResponseMessage"");
		vStatus = Inputs.GetProperty(""Status"");
		vSubStatus = Inputs.GetProperty(""SubStatus"");
		
		var boRMSNMMain = TheApplication().GetBusObject(""RMS Starter Pack Automation"");
		var bcRMSNMMain = boRMSNMMain.GetBusComp(""RMS Starter Pack Automation"");

		var strSearchStr = ""[Id] = '"" + vBatchId + ""'"";
		
		with(bcRMSNMMain)
		{
			ActivateField(""Status"");
			ActivateField(""Sub Status"");
			if(vAssIdFlg == ""Y"")
			{
				ActivateField(""Association Id"");
			}
			if(vOrdNumFlg == ""Y"")
			{
				ActivateField(""Order Number"");
			}

		//	ActivateField(""Response Code"");
		//	ActivateField(""Response Message"");
			ClearToQuery();
			SetSearchExpr(strSearchStr);
			ExecuteQuery(ForwardOnly);
			if(bcRMSNMMain.FirstRecord())
			{
		//		SetFieldValue(""Response Code"",vResponseCode);
		//		SetFieldValue(""Response Message"",vResponseMessage);
				SetFieldValue(""Status"",vStatus);
				SetFieldValue(""Sub Status"",vSubStatus);
				
				if(vAssIdFlg == ""Y"")
				{
					SetFieldValue(""Association Id"", vAssociationId);
				}
				if(vOrdNumFlg == ""Y"")
				{
					SetFieldValue(""Order Number"", vOrderNumber);
				}
				
				WriteRecord();
			}
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcRMSNMMain = null;
		boRMSNMMain = null;
	}
}
"var strGroupCode		= 		""""; // Row ID of the Partner with Type = ""GroupCode""
var strBlkPeriod		=  		""""; // Blocking Period
var strSplCatCheck		=		""""; // Category constraint on numbers returned"
"/*---------+-------+-------------+-----------------------------------------------------------
Date       | Ver   | By          | Comments
-----------+-------+-------------+-----------------------------------------------------------
????????   | 1.0   | TechM       | Creation
20070321   | 1.1   | Prasad      | Changed to use new BC : STC Partner Product
20071107   | 2.0   | Ramakrishna | Added for Wave5 Req
----------------------------------------------------------------------------------------*/
function BlockNumber(&Inputs,&Outputs)
{

	var strPartnerMSISDN	= 		Inputs.GetProperty(""PartnerMSISDN"");
	var strMSISDN			=		Inputs.GetProperty(""MSISDNnumber"");
//2.0 below
	var strOldMSISDN		=		Inputs.GetProperty(""OldMSISDN"");
	var strICCID			=		Inputs.GetProperty(""ICCID"");
	//var strSubcriptionId	=		Inputs.GetProperty(""SubcriptionId"");
	var blnIsRecord;
	
	var boReqQue			= 		TheApplication().GetBusObject(""RMS Number Selection BO"");
	var bcReqQue 			= 		boReqQue.GetBusComp(""RMS Number Selection Request Queue"");
//2.0 above
	
	var boNumEnq			= 		TheApplication().GetBusObject(""RMS NM MSISDN Number Enquiry"");
	var bcNumEnq 			= 		boNumEnq.GetBusComp(""RMS NM MSISDN Number Enquiry"");
	
	var boPartner 			= 		TheApplication().GetBusObject(""Channel Partner"");
	var bcPartner			=		boPartner.GetBusComp(""Channel Partner"");
//1.1 below
	var bcPartnerProduct	= 		boPartner.GetBusComp(""STC Partner Product"");						
//1.1 below

    var strSearchExp         = 		"""";
    
    var blnIsRec; 
    var dtObj;									// Date Object with Current DateTime 
   	var dtBlkDate;    							// Date Object with Time as End of the day, midnight
	var strBlkDate			=		"""";			// String containing ""dtBlkDate"" date in Siebel format
	var strBlkDate1			=		"""";
	var strCurrentDate;


	var tm=Clib.localtime(Clib.time());
	Clib.strftime(strCurrentDate,""%m/%d/%Y %H:%M:%S"",tm);					//	Current time in Siebel format
	
	
	try
	{
	if ( strPartnerMSISDN == """" || strMSISDN == """" || strOldMSISDN == """" || strICCID == """" )
	{
				Outputs.SetProperty(""Error Code"", ""RMSINP001"");
				Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSINP001""));	
	}
	else
	{
		getSystemPref();
		
	if(GetQuota(""Reservation"",bcPartner,bcPartnerProduct,Inputs,Outputs))	// There is sufficient quota for Reservation
	{
		//RK added for wave5
		with (bcReqQue) {
			SetViewMode(AllView);
			ActivateField(""Old MSISDN"");
			ActivateField(""Request Status"");
			ClearToQuery();
			SetSearchSpec(""Old MSISDN"",strOldMSISDN);
			SetSearchSpec(""Request Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_NUMBER_SELECTION_STATUS"",""Pending""));
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();
		}//With END
	   if(!blnIsRecord){ 
	    with (bcNumEnq)
	    {
	    		ActivateField(""Number String Checksum"");
	    		ActivateField(""Number Type Identifier Denorm"");	 
	    		ActivateField(""Status"");	 	    		   		
	    		ActivateField(""Is Associated"");	
				ActivateField(""Record Blocked For"");
				ActivateField(""Record Blocking Date"");

				ClearToQuery();
				

				strSearchExp	+=	""[Number String Checksum] = '"" + strMSISDN + ""' AND "";
				strSearchExp	+=	""[Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""' AND ""; 
				strSearchExp	+=	""[Allocated To] = '"" + strGroupCode + ""' AND "";
				strSearchExp	+=	""[Is Associated] = 'N' AND "";
				strSearchExp	+=	""[Number Type Identifier Denorm] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""MSISDN"") + ""'"";				

//----------- ADD Search spec for category constraints---------

					var strSearchCat	=	"""";
					strSearchCat	+=	"" AND ([Special Category Type] = ''"";

					if(strSplCatCheck != """")	// some constraint on category exists
					{
							var strArr			=	strSplCatCheck.split("";"");
							if (strArr != """")
							{
				
								for (var i = 0; i < strArr.length; i++)
								{
									strSearchCat	+=	"" OR "";
									strSearchCat	+=	""[Special Category Type] = '"";
									strSearchCat	+=	TheApplication().InvokeMethod(""LookupValue"",""RMS_CATEGORY_NAME"",strArr[i]);
									strSearchCat	+=	""'"";	
								}
								
							}
					}
					strSearchCat	+=	"")"";
					strSearchExp	+= strSearchCat;

//-------------------------------------------------------------------------------


				SetSearchExpr(strSearchExp);
				ExecuteQuery(ForwardOnly);
				blnIsRec = FirstRecord();
				
				
				if(blnIsRec)	// MSISDN numbers found
				{

							dtObj			=	Date.fromSystem(Clib.time());		// get the date Object 
						
							//dtObj.setHours(23,59,59,999);//KT 20071113 Commented							// Set the time to end of the day midnight	
							//dtBlkDate		=	new Date(dtObj.getTime() + 1001);	// Add 1001 milliseconds to it to get ""00:00:01""					
							
							//	Numbers to be released on 24:00 hr of the day after the 'strBlkPeriod' days
							//	Add 1001 milliseconds to it to get ""00:00:01"" + the No.of days specified in Block Period 					
							
							//dtBlkDate		=	new Date(dtObj.getTime() + 1001 + (strBlkPeriod * 24 * 60 * 60 * 1000));	
							dtBlkDate		=	new Date(dtObj.getTime() +((strBlkPeriod * 60 * 60 * 1000)/60));
							dtBlkDate		=	dtBlkDate.toSystem();				// Return type as Clib.time 
						
							// Convert to Siebel DATETIME format...
							Clib.strftime(strBlkDate,""%m/%d/%Y %X"",Clib.localtime(dtBlkDate));
							// RK: Convert to format hh:mm dd-mm-yy 
							Clib.strftime(strBlkDate1,""%H:%M %d-%m-%y"",Clib.localtime(dtBlkDate));
					
							// Check if the MSISDN Number is not blocked for any partner at present
							// i.e check if Record Blocking Date <=  Current Date, or is null
							var vRecordBlkDate	=	new Date(GetFieldValue(""Record Blocking Date""));
							var vCurrentDate	=	new Date(strCurrentDate);

							if( vRecordBlkDate.getTime() <= vCurrentDate.getTime()	||	GetFieldValue(""Record Blocking Date"") == null || GetFieldValue(""Record Blocking Date"") == """")
							{
								
									//set block date and blocked for..
									//KT 20071107 Prefixing with WAP 
									var strPartnerMSISDN1 = ""WAP""+strPartnerMSISDN;
									SetFieldValue(""Record Blocked For"",strPartnerMSISDN1);
									SetFieldValue(""Record Blocking Date"",strBlkDate);
									WriteRecord();
									
									//	DECREMENT THE QUERY QUOTA FOR THE PARTNER By ONE
									UpdateReservationQuota(bcPartnerProduct);
									
									//2.0 below
									//RK added for Wave5: logs request into request queue table
									bcReqQue.SetViewMode(AllView);
			
									bcReqQue.NewRecord(NewAfter);
									//bcReqQue.SetFieldValue(""Subscription Id"",strSubcriptionId);
									bcReqQue.SetFieldValue(""Partner MSISDN"",strPartnerMSISDN);
									bcReqQue.SetFieldValue(""New MSISDN"",strMSISDN);	
									bcReqQue.SetFieldValue(""Old MSISDN"",strOldMSISDN);
									bcReqQue.SetFieldValue(""ICCID"",strICCID);
									bcReqQue.SetFieldValue(""Request End Date"",strBlkDate);
									bcReqQue.WriteRecord();
									// RK: To Send reservation end date value in ¿ErrorMessage¿ with format hh:mm dd-mm-yy in case of success  
									Outputs.SetProperty(""Error Message"",strBlkDate1);							
									//2.0 above
									
							}
							else	//	MSISDN Blocked by other partner
						 	{
									Outputs.SetProperty(""Error Code"",""RMS_MSISDN_Blocked"");
									Outputs.SetProperty(""Error Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMS_MSISDN_Blocked""));							
							}
							
					

				}			//if(blnIsRec) ENDS
				
				else		// MSISDN Number Not Found
				{
					
					Outputs.SetProperty(""Error Code"",""RMS_MSISDN_Search"");
					Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_MSISDN_Search""));

				}
				
	    }	//with ENDS
	    }	//for end
	    else{
	    	Outputs.SetProperty(""Error Code"",""RMSWAP009"");
			Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSWAP009"",strOldMSISDN));
	    }
	   } 	// if getquota ends
	   else
	   {
	   }
	}		//if inputs empty check Ends
    }		//try ENDS	
    catch(e) 
    {

		Outputs.SetProperty(""Error Code"", e.errCode);
		Outputs.SetProperty(""Error Message"", e.errText);
		
  	
    }
    finally
    {
    	bcNumEnq	=	null;
    	boNumEnq	=	null;
    	
    	
	return (CancelOperation);
    }

}
function CancelBlocking(&Inputs,&Outputs)
{

	var strPartnerMSISDN	= 		Inputs.GetProperty(""PartnerMSISDN"");

	
	var boNumEnq			= 		TheApplication().GetBusObject(""RMS NM MSISDN Number Enquiry"");
	var bcNumEnq 			= 		boNumEnq.GetBusComp(""RMS NM MSISDN Number Enquiry"");	
	
    var strSearchExp        = 		"""";
    
    var blnIsRec; 
	

	try
	{
	if ( strPartnerMSISDN == """")
	{
				Outputs.SetProperty(""Error Code"", ""RMSINP001"");
				Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSINP001""));	
	}
	else
	{	
	
	    with (bcNumEnq)
	    {
				ActivateField(""Record Blocked For"");
				ActivateField(""Record Blocking Date"");
				ActivateField(""Number Type Identifier Denorm"");	
	    		ActivateField(""Status"");	 	    		   		
	    		ActivateField(""Is Associated"");	
										
				
				ClearToQuery();
				
				
				strSearchExp	+=	""[Record Blocked For] = '"" + strPartnerMSISDN + ""' AND "";				
				strSearchExp	+=	""[Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""' AND ""; 
				strSearchExp	+=	""[Is Associated] = 'N' AND "";
				strSearchExp	+=	""[Number Type Identifier Denorm] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""MSISDN"") + ""'"";				


				SetSearchExpr(strSearchExp);
				ExecuteQuery(ForwardOnly);
				blnIsRec = FirstRecord();
				
				
				if(blnIsRec)		//	Blocked MSISDN numbers found
				{
					
						while(blnIsRec == true) 
						{
		
									//	Set block date and blocked for..
							
							SetFieldValue(""Record Blocked For"","""");
							SetFieldValue(""Record Blocking Date"","""");
							WriteRecord();
							
							blnIsRec	=	NextRecord();											

							
						}			//	While ENDS


				}					//	if ENDS
				else				//	No Numbers are Blocked for the Partner
				{
					Outputs.SetProperty(""Error Code"",""RMS_No_Numbers_Blocked"");
					Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_No_Numbers_Blocked""));
				
				}
				
	    }	//with ENDS
	    
   	}		//if inputs empty check Ends
    }		//try ENDS	
    catch(e) 
    {
    	
		Outputs.SetProperty(""Error Code"", e.errCode);
		Outputs.SetProperty(""Error Message"", e.errText);
		
  	
    }
    finally
    {
    	bcNumEnq	=	null;
    	boNumEnq	=	null;
    	
   	
	return (CancelOperation);
    }

}
function ChangePIN(Inputs, Outputs)
{	
	var blnIsRecord;
	var strRecordPassword;
	var boPartner = TheApplication().GetBusObject(""Channel Partner"");
	var bcPartner = boPartner.GetBusComp(""Channel Partner"");
	var strMSISDN = Inputs.GetProperty(""MSISDN"");
	var strOldPassword = Inputs.GetProperty(""OldPIN"");
	var strNewPassword = Inputs.GetProperty(""NewPIN"");
	
 	try
 	{
 		with(bcPartner)
 		{
 			SetViewMode(AllView);
			ActivateField(""DUNS Number"");
			ActivateField(""Password"");
			ClearToQuery();
			SetSearchSpec(""DUNS Number"",strMSISDN);
			SetSearchSpec(""Partnership Stage"",TheApplication().InvokeMethod(""LookupValue"",""PARTNERSHIP_STAGE"",""Active""));
			SetSearchSpec(""Password"",strOldPassword);
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();
		}
		if(blnIsRecord)
		{
			
			bcPartner.SetFieldValue(""Password"",strNewPassword);
			bcPartner.WriteRecord();
			Outputs.SetProperty(""ErrCode"",""00000"");
			Outputs.SetProperty(""ErrMessage"","""");
		}
		else
		{
			Outputs.SetProperty(""ErrCode"",""00002"");
			Outputs.SetProperty(""ErrMessage"",""No Retailer/Employee Found"");
		}
		//Change by Achin
		var vpartner_id = Inputs.GetProperty(""Partner Id"");
		var mpsInputs = TheApplication().NewPropertySet();
		var mpsOutputs = TheApplication().NewPropertySet();
	    mpsInputs.SetProperty(""Parameter Name"",""UpdateICMTableforPINChange"");
		var mBsGetSysPref = TheApplication().GetService(""STC BS Startup""); 
		mBsGetSysPref.InvokeMethod(""Get SysPref"",mpsInputs,mpsOutputs);
	    var icmChangePin = mpsOutputs.GetProperty(""Parameter Value"");
	    if(icmChangePin == ""Y"")
	    {
	    	var bcICM = boPartner.GetBusComp(""STC ICM Pin Change EBC"");
	    	with(bcICM)
	    	{	
	 			SetViewMode(AllView);
				ActivateField(""PARTNER_ID"");
				ActivateField(""PIN"");
				ClearToQuery();
				SetSearchSpec(""PARTNER_ID"",vpartner_id);
				ExecuteQuery(ForwardOnly);
				var icmRec = FirstRecord();
				if(icmRec)
				{
					SetFieldValue(""PIN"",strNewPassword);
					WriteRecord();
				}
			}//end of bcICM
		}		
	}
 	
 	catch(e)
 	{
 		if(Outputs.GetProperty(""ErrCode"") == ""00000"")
 		{
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrMessage"",e.errText);
		}
	}
	
	finally
	{
 		bcPartner = null;
 		boPartner = null;
 		bcICM = null;
	}
}
"/*---------+-------+---------+-----------------------------------------------------------
Date       | Ver   | By      | Comments
-----------+-------+---------+-----------------------------------------------------------
????????   | 1.0   | TechM   | Creation
20070321   | 1.1   | Prasad  | Changed to use new BC : HCPT Partner Product
20071112   | 1.2   |Kalyana  | Added POC Validation 
20080116   | 1.3   |Kalyana  | Added code to convert POC into Upper Case
----------------------------------------------------------------------------------------*/
function GetNumber(&Inputs,&Outputs)
{


	var strPattern			=		Inputs.GetProperty(""SearchString"");
	var intQuantity	        =		Inputs.GetProperty(""NoOfMSISDN"");
	var strPartnerCode		= 		Inputs.GetProperty(""PartnerCode"");
	var strPOC				=		Inputs.GetProperty(""POC"");
	//
    strPOC                  =       strPOC.toUpperCase();
    //
	var strPartnerId		=		"""";	
	var ResponseText		=		"""";	
	var intCount			= 		0;	
 
	
	var boNumEnq			= 		TheApplication().GetBusObject(""RMS NM MSISDN Number Enquiry"");
	var bcNumEnq 			= 		boNumEnq.GetBusComp(""RMS NM MSISDN Number Enquiry"");	
	
	var boPartner 			= 		TheApplication().GetBusObject(""Channel Partner"");
	var bcPartner			=		boPartner.GetBusComp(""Channel Partner"");
//1.1 below
//	var bcPartnerProduct	= 		boPartner.GetBusComp(""HCPT Partner Product"");						
//1.1 above	

    var strSearchExp        = 		"""";
    
    var blnIsRec; 
	var strCurrentDate;

	var tm=Clib.localtime(Clib.time());
	Clib.strftime(strCurrentDate,""%m/%d/%Y %H:%M:%S"",tm);			//	Current time in Siebel format
	

	try
	{
	//below 1.2
	var POC ="""";
	POC = TheApplication().InvokeMethod(""LookupValue"",""NM_POC"",strPOC)
	//if ( strPattern == """" || intQuantity == """" || strPartnerCode == """" || strPOC == """")
//stc	if ( strPattern == """" || intQuantity == """" || strPartnerCode == """" || strPOC == """" || POC == """")
	if ( strPattern == """" || intQuantity == """" || strPartnerCode == """" )
	//above 1.2
	{
				//ResponseText	=	""\&lt\;ListOfMSISDN\&gt\;"";	
				//ResponseText	+=	""\&lt\;/ListOfMSISDN\&gt\;"";
				ResponseText	=	""<ListOfMSISDN>"";
				ResponseText	+=	""</ListOfMSISDN>"";
				Outputs.SetProperty(""ResponseText"",ResponseText);			
				//below 1.2
				if  (POC == """" && strPOC != """")
				{
				Outputs.SetProperty(""Error Code"", ""RMSINP002"");
			    Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSINP002""));	
				}
				else
				{
				//above 1.2
				Outputs.SetProperty(""Error Code"", ""RMSINP001"");
				Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSINP001""));
				//below 1.2
				}
				//above 1.2	
	}
	else
	{
    getSystemPref();

	////ms 09nov09if(GetQuota(""Query"",bcPartner,bcPartnerProduct,Inputs,Outputs))	// There is sufficient Query quota
////ms 09nov09	{
	
	    with (bcNumEnq)
	    {
	    		ActivateField(""Number String Checksum"");
	    		ActivateField(""Number Type Identifier Denorm"");	 
	    		ActivateField(""Status"");	 	    		   		
	    		ActivateField(""Is Associated"");	
				ActivateField(""Record Blocked For"");
				ActivateField(""Record Blocking Date"");
				ActivateField(""POC"");					
				ActivateField(""Allocated To"");	
				ActivateField(""Special Category Type"");
				ActivateField(""MSISDN HLR ID"");					
											
				ClearToQuery();
				

				if(Clib.strchr(strPattern,'*')	!=	null	||	Clib.strchr(strPattern,'?')	!=	null)
				
					strSearchExp	=	""[Number String Checksum] LIKE '"" + strPattern + ""' AND "";
					
				else if(isNaN(strPattern)	==	false)				// The Pattern is a number containing only digits
				
					strSearchExp	=	""[Number String Checksum] = '"" + strPattern + ""' AND "";
					
				else 												//	The searchString contains some invalid char
				{
					Outputs.SetProperty(""Error Code"",""RMS_InvalidSearchChar"");
					Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_InvalidSearchChar""));
					
				}

				
				strSearchExp	+=	""[Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""' AND ""; 
				strSearchExp	+=	""[Allocated To] = '"" + strGroupCode + ""' AND "";
				strSearchExp	+=	""[Is Associated] = 'N' AND "";
				strSearchExp	+=	""([Record Blocking Date] <= '"" + strCurrentDate + ""' OR [Record Blocking Date] = '') AND "";
				//RK 21-aug-2007				
				strSearchExp	+=	""([Record Blocked For] LIKE 'POS*' OR [Record Blocked For] = '') AND "";
				//rk 21-aug-2007
	//ms 09nov09			strSearchExp	+=	""[Number Type Identifier Denorm] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""MSISDN"") + ""' AND "";				
	strSearchExp	+=	""[Number Type Identifier Denorm] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""MSISDN"") + ""'"";				
	//ms 09nov09			strSearchExp	+=	""[POC] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_POC"",strPOC) + ""'""; 
//----------- ADD Search spec for category constraints---------

					var strSearchCat	=	"""";
					strSearchCat	+=	"" AND ([Special Category Type] = ''"";

					if(strSplCatCheck != """")	// some constraint on category exists
					{
							var strArr			=	strSplCatCheck.split("";"");
							if (strArr != """")
							{
				
								for (var i = 0; i < strArr.length; i++)
								{
									strSearchCat	+=	"" OR "";
									strSearchCat	+=	""[Special Category Type] = '"";
									strSearchCat	+=	TheApplication().InvokeMethod(""LookupValue"",""RMS_CATEGORY_NAME"",strArr[i]);
									strSearchCat	+=	""'"";	
								}
								
							}
					}
					strSearchCat	+=	"")"";
					strSearchExp	+= strSearchCat;
//-------------------------------------------------------------------------------
				SetSearchExpr(strSearchExp);
				ExecuteQuery(ForwardOnly);
				blnIsRec = FirstRecord();
				
				
				if(blnIsRec)	// MSISDN numbers found
				{
					
					//ResponseText	=	""\&lt\;ListOfMSISDN\&gt\;"";				
				    ResponseText	=	""<ListOfMSISDN>"";	

								while(blnIsRec == true && intCount < intQuantity) 
								{
				
									intCount	= intCount + 1;
									
									//	SET Output as 
									
									/*
									<ListOfMSISDN>
									<MSISDN>621111111</MSISDN>
									<MSISDN>621111111</MSISDN>
									<MSISDN>621111111</MSISDN>
									</ListOfMSISDN >
									
									replace '<' with '<' and '>' with '&gt;'
									*/
				
									/*ResponseText	+=	""\&lt\;MSISDN\&gt\;"";	
									ResponseText	+=	GetFieldValue(""Number String Checksum"");
									ResponseText	+=	"" "";
									ResponseText	+=	GetFieldValue(""MSISDN HLR ID"");
									ResponseText	+=	""\&lt\;/MSISDN\&gt\;"";	*/
									ResponseText	+=	""<MSISDN>"";	
									ResponseText	+=	GetFieldValue(""Number String Checksum"");
									ResponseText	+=	"" "";
									ResponseText	+=	(GetFieldValue(""MSISDN HLR ID"")).substring(1);
									ResponseText	+=	""</MSISDN>"";
									
									blnIsRec	=	NextRecord();											
		
									
								}	//	while ENDS

					//ResponseText	+=	""\&lt\;/ListOfMSISDN\&gt\;"";
					ResponseText	+=	""</ListOfMSISDN>"";
			
					Outputs.SetProperty(""ResponseText"",ResponseText);	
					
				}		//	if ENDS
				else	// MSISDN Numbers Not Found
				{
						//<ListOfMSISDN></ListOfMSISDN>
					//RK:04/12/2007
					Outputs.SetProperty(""Error Code"", ""RMS_MSISDN_Search"");
					Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_MSISDN_Search""));
					//RK:04/12/2007
					//ResponseText	+=	""\&lt\;ListOfMSISDN\&gt\;""	+	""\&lt\;/ListOfMSISDN\&gt\;"" ;
					ResponseText	+=	""<ListOfMSISDN>""	+	""</ListOfMSISDN>"" ;
					Outputs.SetProperty(""ResponseText"",ResponseText);									
//					Outputs.SetProperty(""Error Code"",""RMS_MSISDN_Search"");
//					Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_MSISDN_Search""));

				}

				//	DECREMENT THE QUERY QUOTA FOR THE PARTNER By ONE
				UpdateQueryQuota(bcPartnerProduct);	

				
	    }		//	with bcNumEnq ENDS
/*ms 09nov09	   }		//	IF getQuota ends
	   else		//	Query Quota is not Sufficient
	   {
				//ResponseText	=	""\&lt\;ListOfMSISDN\&gt\;"";	
				//ResponseText	+=	""\&lt\;/ListOfMSISDN\&gt\;"";	
				ResponseText	=	""<ListOfMSISDN>"";	
				ResponseText	+=  ""</ListOfMSISDN>"" ;		
	   } ms 09nov09*/
		Outputs.SetProperty(""ResponseText"",ResponseText);
		
						
	}			// if inputs empty ENDS   
    }			//	try ENDS	
    catch(e) 
    {
		Outputs.SetProperty(""ResponseText"",ResponseText);
		Outputs.SetProperty(""Error Code"", e.errCode);
		Outputs.SetProperty(""Error Message"", e.errText);
		
  	
    }
    finally
    {
    	bcNumEnq	=	null;
    	boNumEnq	=	null;
    	    	
	return (CancelOperation);
    }
}
function GetQuota(strQuotaType,bcPartner,bcPartnerProduct,&Inputs,&Outputs)
{
					//	Get THE Specified QUOTA FOR THE Given PARTNER
					

	var Result			=	false;
    var intQuota		=	0;
	var strSearchExp 	=	"""";
    var blnIsRecord;
    var blnIsRecord1;


	var strPartnerMSISDN	= 		Inputs.GetProperty(""PartnerMSISDN"");
					
	var strCurrentDate;
	var tm=Clib.localtime(Clib.time());
	Clib.strftime(strCurrentDate,""%m/%d/%Y"",tm);					//	Current time in Siebel format

	try
	{
						 
		 with(bcPartner)
		 {
						  SetViewMode(AllView);
						
						  ActivateField(""DUNS Number"");
						
						  ClearToQuery();
						  SetSearchSpec(""DUNS Number"",strPartnerMSISDN);
						  ExecuteQuery(ForwardOnly);
						  blnIsRecord = FirstRecord();
						  
		 }	//	end with (bcPartner)
			
			 if(blnIsRecord)
			 {					
			
				  	with(bcPartnerProduct)
				  	{
					
							   SetViewMode(AllView);
							   
							   ActivateField(""HCPT-Product Type"");
							   ActivateField(""Name"");
							   ActivateField(""Minimum Quantity"");
							   ActivateField(""Vendor Id"");
   							   ActivateField(""RX Avg Price Exchange Date"");// QuotaEndDate
							   
							   ClearToQuery();
							   
							   SetSearchSpec(""Vendor Id"",bcPartner.GetFieldValue(""Id""));
							   
							   if(strQuotaType	==	""Query"")
								   SetSearchSpec(""Name"",TheApplication().InvokeMethod(""LookupValue"", ""HCPT_SALES_TYPE"", ""MSISDN Query""));
							   else if(strQuotaType	==	""Reservation"")
							       SetSearchSpec(""Name"",TheApplication().InvokeMethod(""LookupValue"", ""HCPT_SALES_TYPE"", ""MSISDN Reservation""));	

							   ExecuteQuery(ForwardOnly);
							   blnIsRecord1 = FirstRecord();
					  	}	//	end with (bcPartnerProduct)
					  	
					  	
					  	if(blnIsRecord1) 
					  	{
								var vQuotaEndDate	=	new Date(bcPartnerProduct.GetFieldValue(""RX Avg Price Exchange Date""));
								var vCurrentDate	=	new Date(strCurrentDate);
	
								if( vQuotaEndDate.getTime() >= vCurrentDate.getTime())
								{

					  			
							  		intQuota	=	ToInteger(bcPartnerProduct.GetFieldValue(""Minimum Quantity""));
							  		
							  		if(intQuota	>=	1)
							  		{
							  				Result	=	true;
									}
									else
									{
											Outputs.SetProperty(""Error Code"",""RMS_Insufficient_Quota"");
											if (strQuotaType	==	""Query"")
													Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_Insufficient_Quota"",""Query""));
											else if (strQuotaType	==	""Reservation"")
													Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_Insufficient_Quota"",""Reservation""));
											Result	=	false;
									}
								}
								else // Quota expired
								{
									Outputs.SetProperty(""Error Code"",""RMSWAP006"");
									if (strQuotaType	==	""Query"")
											Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSWAP006"",""Query""));
									else if (strQuotaType	==	""Reservation"")
											Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSWAP006"",""Reservation""));

									Result	=	false;
								}
																
					  	}	// if(blnIsRecord1) ENDS
							//KT 20071119 Added validation if quota is not defined for Partner
							else{
									Outputs.SetProperty(""Error Code"",""RMSPTNR006"");
									Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSPTNR006"",strQuotaType));
									//Outputs.SetProperty(""Error Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSPTNR006"",strQuotaType));
			                    }
							//End KT KT 20071119

				}			//	if(blnIsRecord) ENDS
	}
	catch(e)
	{
			Outputs.SetProperty(""Error Code"", e.errCode);
			Outputs.SetProperty(""Error Message"", e.errText); 
	}
	
	finally
	{
		return Result;
	}					

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{

	try
	{
				Outputs.SetProperty(""Error Code"", ""00000"");
				Outputs.SetProperty(""Error Message"", """");	

			if 		(MethodName	==	""GetNumber"")
			{
					GetNumber(Inputs, Outputs);

			}
			
			else if (MethodName	==	""CancelBlocking"")
			{
					CancelBlocking(Inputs, Outputs);
			}
	
			else if (MethodName	==	""BlockNumber"")
			{
					BlockNumber(Inputs, Outputs);
			}
			else if (MethodName	==	""UnblockMSISDN"")
			{
					UnblockMSISDN(Inputs, Outputs);
			}
			
			else if (MethodName	==	""ChangePIN"")
			{
					ChangePIN(Inputs, Outputs);
			}
			

	}
	catch(e)
	{
		
			//	Return an error code rather than throwing an error
			var vErr = e.toString();
			Outputs.SetProperty(""Error Code"",e.errCode);
			//Outputs.SetProperty(""Error Message"",e.errText);
			Outputs.SetProperty(""Error Message"",vErr);
			//	Logging the Exception
			
			var vErr 		=	e.toString();
			var vErrCode 	= 	e.errCode;
			var vObjName 	= 	""RMS Get MSISDN Numbers"";
			var vFunc 		= 	""PreInvokeMethod"";
			var vObjType 	= 	""Business Service"";

			TheApplication().log_exception(""Exception"",vErr,vErrCode,strGroupCode,vObjName,vFunc,vObjType);

	}
	finally 
	{
			return (CancelOperation);
	}


}
function UnblockMSISDN(&Inputs,&Outputs)
{
		//	Cancel Blocking for specified MSISDN Number blocked by the specified Partner

	var strPartnerMSISDN	= 		Inputs.GetProperty(""PartnerMSISDN"");
	var strMSISDN			=		Inputs.GetProperty(""MSISDNnumber"");
	
	var boNumEnq			= 		TheApplication().GetBusObject(""RMS NM MSISDN Number Enquiry"");
	var bcNumEnq 			= 		boNumEnq.GetBusComp(""RMS NM MSISDN Number Enquiry"");	
	
    var strSearchExp        = 		"""";
    
    var blnIsRec; 
	
	try
	{	
	if ( strPartnerMSISDN == """" || strMSISDN == """")
	{
				Outputs.SetProperty(""Error Code"", ""RMSINP001"");
				Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSINP001""));	
	}
	else
	{
	    with (bcNumEnq)
	    {
				ActivateField(""Record Blocked For"");
				ActivateField(""Record Blocking Date"");
				ActivateField(""Number Type Identifier Denorm"");	
	    		ActivateField(""Status"");	 	    		   		
	    		ActivateField(""Is Associated"");	
										
				
				ClearToQuery();
				
				strSearchExp	+=	""[Number String Checksum] = '"" + strMSISDN + ""' AND "";
				strSearchExp	+=	""[Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""' AND ""; 
				strSearchExp	+=	""[Is Associated] = 'N' AND "";
				strSearchExp	+=	""[Number Type Identifier Denorm] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""MSISDN"") + ""'"";				


				SetSearchExpr(strSearchExp);
				ExecuteQuery(ForwardOnly);
				blnIsRec = FirstRecord();
				
				
				if(blnIsRec)		//	Blocked MSISDN number found
				{
					    strPartnerMSISDN = ""WAP""+strPartnerMSISDN;
						if(GetFieldValue(""Record Blocked For"")	==	strPartnerMSISDN)	// Check if the MSISDN is Blocked for the Given Partner
						{
		
									//	Set block date and blocked for..
							
							SetFieldValue(""Record Blocked For"","""");
							SetFieldValue(""Record Blocking Date"","""");
							WriteRecord();
							
						}			//	If ENDS

						else		//	The MSISDN is not blocked by the Specified Partner
						{
							Outputs.SetProperty(""Error Code"",""RMS_MSISDNNotBlockedByPartner"");
							Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_MSISDNNotBlockedByPartner""));
						
						}
				}					//	if ENDS				
				else				//	MSISDN number not found
				{
					Outputs.SetProperty(""Error Code"",""RMS_MSISDN_Search"");
					Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_MSISDN_Search""));
				}
				
	    }	//with ENDS
	    
    }		//if inputs empty check Ends
    }		//try ENDS	
    catch(e) 
    {
    	
		Outputs.SetProperty(""Error Code"", e.errCode);
		Outputs.SetProperty(""Error Message"", e.errText);
		
  	
    }
    finally
    {
    	bcNumEnq	=	null;
    	boNumEnq	=	null;
    	
   	
	return (CancelOperation);
    }


}
function UpdateQueryQuota(bcPartnerProduct)
{
					//	DECREMENT THE QUERY QUOTA FOR THE PARTNER By ONE


	var intQuota	=	0;


	try
	{
			bcPartnerProduct.ActivateField(""Minimum Quantity"");
	  			  			
			intQuota	=	ToInteger(bcPartnerProduct.GetFieldValue(""Minimum Quantity""));
			if(intQuota	>=	1)
	  		{
	  			intQuota		=	intQuota - 1;	
				bcPartnerProduct.SetFieldValue(""Minimum Quantity"",intQuota);
			    bcPartnerProduct.WriteRecord();
			}
			else
			{
				Outputs.SetProperty(""Error Code"",""RMS_Insufficient_Quota"");
				Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_Insufficient_Quota"",""Query""));

			}
	
}	// Try ENDS
catch(e)
{
		Outputs.SetProperty(""Error Code"", e.errCode);
		Outputs.SetProperty(""Error Message"", e.errText); 
}

finally
{
	return (CancelOperation);
}

}
function UpdateReservationQuota(bcPartnerProduct)
{

					//	DECREMENT THE Reservation QUOTA FOR THE PARTNER By ONE

    var intQuota	=	0;

	try
	{						 
	  			//	DECREMENT THE RESERVATION QUOTA
	  			
					bcPartnerProduct.ActivateField(""Minimum Quantity"");	  			
		  			intQuota	=	ToInteger(bcPartnerProduct.GetFieldValue(""Minimum Quantity""));
		  		if(intQuota	>=	1)
		  		{
		  			intQuota		=	intQuota	-	1;	
					bcPartnerProduct.SetFieldValue(""Minimum Quantity"",intQuota);
				

				bcPartnerProduct.WriteRecord();
				}
				else
				{
					Outputs.SetProperty(""Error Code"",""RMS_Insufficient_Quota"");
					Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_Insufficient_Quota"",""Reservation""));

				}
						
	}	//	try ENDS
	catch(e)
	{
				Outputs.SetProperty(""Error Code"", e.errCode);
				Outputs.SetProperty(""Error Message"", e.errText); 
	}	

	finally
	{
		   		 return (CancelOperation);
	}


}
function getSystemPref()
{
	var boSysPref			= 		TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref 			= 		boSysPref.GetBusComp(""System Preferences"");

	try
	{
	
		strGroupCode	=	TheApplication().GetProfileAttr(""GroupCode"");
		strBlkPeriod	=	TheApplication().GetProfileAttr(""Blocking_Period_WAP"");
		strSplCatCheck	=	TheApplication().GetProfileAttr(""SplCatCheck"");	
		
		if(strGroupCode	== """")
		{
				//-----GETTING THE Row Id of partner with type='GroupCode' FROM SYSTEM PREFERENCE------------
				
					bcSysPref.ActivateField(""Value"");
					
					bcSysPref.ClearToQuery();
					bcSysPref.SetSearchSpec(""Name"",""RMS_GroupCode_Partner_POS"");
					bcSysPref.ExecuteQuery();
				
					if(bcSysPref.FirstRecord()) 
					{	 
						strGroupCode = bcSysPref.GetFieldValue(""Value"");
						TheApplication().SetProfileAttr(""GroupCode"",strGroupCode);
					}
		}
		
		if (strBlkPeriod	==	"""")
		{
				//-----GETTING THE Blocking Period FROM SYSTEM PREFERENCE------------
				
					bcSysPref.ActivateField(""Value"");
					
					bcSysPref.ClearToQuery();
					bcSysPref.SetSearchSpec(""Name"",""RMS_Blocking_Period_WAP"");
					bcSysPref.ExecuteQuery();
				
					if(bcSysPref.FirstRecord()) 
					{	 
						strBlkPeriod = bcSysPref.GetFieldValue(""Value"");
						TheApplication().SetProfileAttr(""Blocking_Period_WAP"",strBlkPeriod);
					}
		}

		if (strSplCatCheck	==	"""")
		{
				//-----GETTING THE Category Constraint FROM SYSTEM PREFERENCE------------
				
					bcSysPref.ActivateField(""Value"");
					
					bcSysPref.ClearToQuery();
					bcSysPref.SetSearchSpec(""Name"",""RMS_WAP_VANITY_CHECK"");
					bcSysPref.ExecuteQuery();
				
					if(bcSysPref.FirstRecord()) 
					{	 
						strSplCatCheck = bcSysPref.GetFieldValue(""Value"");
						TheApplication().SetProfileAttr(""SplCatCheck"",strSplCatCheck);
					}
		}

	}	//	Try ENDS
	catch(e)
	{
		Outputs.SetProperty(""Error Code"", e.errCode);
		Outputs.SetProperty(""Error Message"", e.errText);

	}
	finally
	{
    	bcSysPref	=	null;
    	boSysPref	=	null;

    	
	return (CancelOperation);

	}
}
//Your public declarations go here...
function GeneratePortInNumber(Inputs,Outputs)
{
	var MSISDN = """";
	var PoolId = """";
	var MSISDNOwner = ""NONVIVA"";//SUMANK:Port-IN MSISDNs Dealer Name Category Enhancement 12/06/2019
	MSISDN =  Inputs.GetProperty(""MSISDN"");
	var DealerId = Inputs.GetProperty(""DealerId"");
	var OperatorCode = Inputs.GetProperty(""OperatorCode"");
	var BillAccId = Inputs.GetProperty(""BillAccId"");
	var ServiceType = Inputs.GetProperty(""ServiceType"");
	var CreatedUser = Inputs.GetProperty(""CreatedUser"");
	var vChannel = Inputs.GetProperty(""Channel"");//[NAVIN: 25Jul2021: MPOS MNP Number Pool Fix]
	Outputs.SetProperty(""ErrorMessage"","""");
	Outputs.SetProperty(""ErrorCode"","""");
	var AppObj = TheApplication();

	//BELOW: SUMANK:Port-IN MSISDNs Dealer Name Category Enhancement 12/06/2019
	var MSISDNSubStr = MSISDN.substring(0,5);
	var CompMSISDN = AppObj.InvokeMethod(""LookupValue"",""STC_MNP_DEF_POOL"",MSISDNSubStr);
	var CompMSISDNSubStr = CompMSISDN.substring(0,3);
	if(CompMSISDNSubStr == ""YES"")
	{
		MSISDNOwner = ""VIVA"";
	}
	//ABOVE: SUMANK:Port-IN MSISDNs Dealer Name Category Enhancement 12/06/2019

	var psInputsUsr = AppObj.NewPropertySet();
	var psOutputsUsr = AppObj.NewPropertySet();

	psInputsUsr.SetProperty(""CreatedUser"", CreatedUser);
	GetPoolId(psInputsUsr,psOutputsUsr);
	PoolId = psOutputsUsr.GetProperty(""PoolId"");

	if(PoolId == """" || PoolId == '' || PoolId == null)
	{
		//[NAVIN: 25Jul2021: MPOS MNP Number Pool Fix]
		if(vChannel != ""CRM"" && DealerId != null && DealerId != """")
			PoolId = DealerId;
		else
			PoolId = AppObj.InvokeMethod(""LookupValue"",""STC_MNP_DEF_POOL"",""MNPGenericPoolId"");
	}
 
var categoryType = AppObj.InvokeMethod(""LookupValue"",""STC_MNP_CATEGORY_TYPE"",OperatorCode);
try
{
var NumMstrBO = AppObj.GetBusObject(""RMS NM Number Enquiry"");
var NumMstrBC = NumMstrBO.GetBusComp(""RMS NM Number Enquiry For Update"");
var NumGenBO  = AppObj.GetBusObject(""RMS NM Number Generation"");
var NumGenBC  = NumGenBO.GetBusComp(""RMS NM MNP Number Generation"");
var psInputs = AppObj.NewPropertySet();
var psOutputs = AppObj.NewPropertySet();
var blnIsRecord = false;
var ErrorText = """";
var SchemeId  = """";
var TypeId    = """";
var BlockId   = """";
var BlockName = """";

	with (NumMstrBC)
	{
	   ActivateField(""Status"");
	   ActivateField(""Allocated To"");
	   ActivateField(""Record Blocked For"");
	   ActivateField(""Ported Service Provider"");
	   ActivateField(""Port In Out"");
	   ActivateField(""Port Out"");
		ActivateField(""Special Category Type"");
	   SetSearchSpec(""Number String"",MSISDN);
	  // SetSearchSpec(""Port In"",""Y"");
	   ExecuteQuery(ForwardOnly);
	   blnIsRecord = FirstRecord();
	}
	if (blnIsRecord)
	{
		var Status = NumMstrBC.GetFieldValue(""Status"");
		var BlkFor = NumMstrBC.GetFieldValue(""Record Blocked For"");
		if(NumMstrBC.GetFieldValue(""Status"") == AppObj.InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""TRASHED""))
		{
		//Port in number with deactive status then update status to allocated
			with(NumMstrBC)
			{
				SetFieldValue(""Allocated To"",PoolId);
				SetFieldValue(""Status"",AppObj.InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED""));
				SetFieldValue(""Ported Service Provider"",OperatorCode);
				SetFieldValue(""Port In Out"",""N"");
				if(MSISDNOwner != ""VIVA"")//SUMANK:Port-IN MSISDNs Dealer Name Category Enhancement 12/06/2019
				{
					SetFieldValue(""Special Category Type"",categoryType);
				}//SUMANK:Port-IN MSISDNs Dealer Name Category Enhancement 12/06/2019
				SetFieldValue(""Record Blocked For"",BillAccId);
				SetFieldValue(""Port Out"",""N"");
				WriteRecord();
			}  
		}
		else if(Status == TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ASSIGNED"") || Status == TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED""))
		{
			if(BlkFor != BillAccId)
			{
				ErrorText = ""Number is already in use"";
				Outputs.SetProperty(""ErrorMessage"",ErrorText);
				Outputs.SetProperty(""ErrorCode"",""00001"");
			}
		}
	else
	{
	   ErrorText = ""Number is already in use"";
	   Outputs.SetProperty(""ErrorMessage"",ErrorText);
	   Outputs.SetProperty(""ErrorCode"",""00001"");    
	}//end of else
   }//end of blnIsRecord
   else //Generate number
   {
	   with(NumGenBC)
	   {
	   ActivateField(""Block Name"");
	   ActivateField(""Quantity Str"");
	   ActivateField(""Start String Number"");
	   ActivateField(""Block Starting String Number"");
	   ActivateField(""End Number Str"");
	   ActivateField(""Block Starting Number"");
	   ActivateField(""Block Ending Number"");

	   var MSISDNLength = MSISDN.length;
	   var strMSISDN    = """";
	   strMSISDN = MSISDN.substring(2,MSISDNLength);
	   psInputs.SetProperty(""OperCode"", OperatorCode);
	   GetBlockId(psInputs,psOutputs);
	   TypeId = psOutputs.GetProperty(""TypeId"");
	   SchemeId = psOutputs.GetProperty(""SchemeId"");
	   BlockId = psOutputs.GetProperty(""BlockId"");
	   BlockName = psOutputs.GetProperty(""BlockName"");  
	   NewRecord(1);
	   SetFieldValue(""Type Id"",TypeId);
		SetFieldValue(""Scheme Id"",SchemeId);
	   SetFieldValue(""Block Id"",BlockId);
	   SetFieldValue(""Block Name"",BlockName);
	   SetFieldValue(""Quantity Str"",1);
	   SetFieldValue(""Start Number"",strMSISDN);
	   SetFieldValue(""Start String Number"",strMSISDN);
	   SetFieldValue(""End Number Str"",strMSISDN);
	   SetFieldValue(""End Number"",strMSISDN);
	   SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""GENERATED""));
	   WriteRecord();
	   var ObjectId = GetFieldValue(""Id"");
	   var StatusDate = GetFieldValue(""Created""); 
	   }
	   with(NumMstrBC)
	   {
			NewRecord(1);
			SetFieldValue(""Gen Log Id"",ObjectId);
			SetFieldValue(""Type Id"",TypeId);
			SetFieldValue(""Scheme Id"",SchemeId);
			SetFieldValue(""Block Id"",BlockId);
			SetFieldValue(""Number"",MSISDN);
			SetFieldValue(""Number String"",MSISDN);
			SetFieldValue(""Status"",(TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"")));
			SetFieldValue(""Number Without Delimiter"",MSISDN);
			SetFieldValue(""Number String With Checksum"",MSISDN);  
			SetFieldValue(""Status Date"",StatusDate);
			SetFieldValue(""Port In"",""Y"");
			if(MSISDNOwner != ""VIVA"")//SUMANK:Port-IN MSISDNs Dealer Name Category Enhancement 12/06/2019
			{
				SetFieldValue(""Special Category Type"",categoryType);
			}//SUMANK:Port-IN MSISDNs Dealer Name Category Enhancement 12/06/2019

			SetFieldValue(""Record Blocked For"",BillAccId);
			SetFieldValue(""Number Type Identifier Denorm"",TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""));
			SetFieldValue(""Allocated To"",PoolId);
			WriteRecord(); 
	   }
	}

}//end of try
catch(e)
{
var vErr = e.toString();
Outputs.SetProperty(""ErrCode"",e.errCode);
Outputs.SetProperty(""ErrorMessage"",vErr);

}//end of catch
finally
{
NumMstrBC = null;
NumMstrBO = null;
NumGenBC  = null;
NumGenBO  = null;
AppObj	  = null;
}//end of finally
}
function GetBlockId(&psInputs,&psOutputs)
{

 // var boSysPref = TheApplication().GetBusObject(""System Preferences"");
  //   var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
     var NumSchemeBO  = TheApplication().GetBusObject(""RMS NM Number Scheme"");
     var NumBlockBC   = NumSchemeBO.GetBusComp(""RMS NM Number Block"");
     var BlockId = """";
     var OperCode = psInputs.GetProperty(""OperCode"");
/*     bcSysPref.ActivateField(""Value"");
  bcSysPref.ClearToQuery();
  bcSysPref.SetSearchSpec(""Name"",""RMS_PORT_IN_BLOCK_NAME"");
  bcSysPref.ExecuteQuery(ForwardOnly);
  if(bcSysPref.FirstRecord()) 
    {
       BlockId = bcSysPref.GetFieldValue(""Value"");*/
       BlockId = TheApplication().InvokeMethod(""LookupValue"",""RMS_PORT_IN_BLOCK_NAME"",OperCode);
       
       
       with(NumBlockBC)
       {
        ActivateField(""Type"");
        ActivateField(""Scheme Id"");
        ActivateField(""Name"");
        ClearToQuery();
        SetSearchSpec(""Id"",BlockId);
        ExecuteQuery(ForwardOnly);
        if( FirstRecord())
        {
         psOutputs.SetProperty(""BlockId"",GetFieldValue(""Id""));
         psOutputs.SetProperty(""BlockName"",GetFieldValue(""Name""));
         psOutputs.SetProperty(""SchemeId"",GetFieldValue(""Scheme Id""));
         psOutputs.SetProperty(""TypeId"",GetFieldValue(""Type""));
        }
       }
      // }
       NumBlockBC = null; 
       NumSchemeBO = null;
      
      
}
"//Created to get Pool Id of user Created Order for MNP Port In MSISDNs Dealer Name1.2
function GetPoolId(&psInputs,&psOutputs)
{
	var sApp = TheApplication();
	var UserBC = sApp.GetBusObject(""Employee"").GetBusComp(""Employee"");
	var IntDivBC = sApp.GetBusObject(""Internal Division"").GetBusComp(""Internal Division"");
	var Postion = sApp.GetBusObject(""Position"").GetBusComp(""Position"");
	var PriPosId,IntDevId,ContactRec,IntId,PoolId="""";
		
	var CreatedUser = psInputs.GetProperty(""CreatedUser"");
	var vSearchExpr = ""[Id]='""+CreatedUser+""' OR [Login Name]='""+CreatedUser+""'"";//[NAVIN: 25Jul2021: MPOS MNP Number Pool Fix]
	with(UserBC)
	{
	
		ActivateField(""Login Name"");
		ActivateField(""Primary Position Id"");
		ActivateField(""OU Id"");
		ClearToQuery();
		SetViewMode(AllView);
		//SetSearchSpec(""Id"",CreatedUser);
		SetSearchExpr(vSearchExpr);
		ExecuteQuery(ForwardOnly);
		var EmpRec = FirstRecord();
		if(EmpRec)
		{
			var ContactRecId = GetFieldValue(""Id"");
			PriPosId = GetFieldValue(""Primary Position Id"");
			IntDevId = GetFieldValue(""OU Id"");
			with(Postion)
			{
				ActivateField(""Division Id"");
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(""Id"",PriPosId);
				ExecuteQuery(ForwardOnly);
				var ContactRec = FirstRecord();
				if(ContactRec)
				{
				IntId = GetFieldValue(""Division Id"");
				}// end of if(ContactRec)

				with(IntDivBC)
				{
				ActivateField(""STC Grp Partner Id"");
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(""Id"",IntId);
				ExecuteQuery(ForwardOnly);
				var ContactRec = FirstRecord();
				if(ContactRec)
				{
				PoolId = GetFieldValue(""STC Grp Partner Id"");
				}// with(IntDivBC)
				}
			}// end of with(ContactBC)
		}// end of if(EmpRec)
	}// end of with(UserBC)
	
	psOutputs.SetProperty(""PoolId"",PoolId);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs) 
{ 
  
 switch(MethodName)  
     { 
     case ""GeneratePortInNumber"" : 
  { 
  GeneratePortInNumber(Inputs,Outputs); 
  return(CancelOperation); 
     break; 
     } 
     case ""UpdateNumberPortOut"": 
     UpdateNumberPortOut(Inputs, Outputs); 
     return(CancelOperation); 
     break; 
 
 
     } 
  
  
 return (ContinueOperation); 
}
function UpdateNumberPortOut(Inputs, Outputs)
{
var SerAccId = Inputs.GetProperty(""SerAccId"");
var MSISDN;
var PortOut;
var PortIn;
 var boNumEnq;
 var bcNumEnq;

 var strFromStatus;
 var strToStatus;
 var strBlockId;
 var strNumAvlDateDiff;
 var bsDeassociate;
 var psInputs;
 var psOutputs;
 var blnIsRecord;
 var intRetCode = ContinueOperation;
 psInputs = TheApplication().NewPropertySet();
 psOutputs = TheApplication().NewPropertySet();

var BCSerAcc = TheApplication().GetBusObject(""STC Service Account"").GetBusComp(""CUT Service Sub Accounts"");
var boNumberMaster:BusObject    = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
var bcNumberMaster:BusComp            = boNumberMaster.GetBusComp(""RMS NM Number Enquiry For Update""); // RMS NM Number Enquiry 
strToStatus  = TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED"");
with(BCSerAcc)
{
  ActivateField(""DUNS Number"");
 ActivateField(""STC Port Out Flag"");
  ActivateField(""STC Port In Flag"");
   SetViewMode(AllView);
ClearToQuery();
SetSearchSpec(""Id"", SerAccId);
ExecuteQuery();
if(FirstRecord())
{
MSISDN = GetFieldValue(""DUNS Number"");
PortOut = GetFieldValue(""STC Port Out Flag"");
PortIn = GetFieldValue(""STC Port In Flag"");
if(PortOut == ""Y"" || PortIn == ""Yes"")
{
  bsDeassociate  = TheApplication().GetService(""RMS RMS Deassociate Function"");
  boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
  bcNumEnq = boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update""); // 23rd June : RMS NM Number Enquiry 
  with(bcNumEnq) 
  {
   ActivateField(""Number String"");
   ActivateField(""Assoc Start Id"");
   ActivateField(""Block Id"");
   ActivateField(""Status"");
   ActivateField(""Available Date"");
   ActivateField(""Quarantine Date"");
   ActivateField(""Status Date"");
   ActivateField(""Is Associated"");
   ActivateField(""Available Date Reached"");
   ActivateField(""Current Date"");
   ActivateField(""Assigned Id"");
   ActivateField(""Assigned Date"");
   ActivateField(""Allocation Id"");
   ActivateField(""Reserved To"");
   ActivateField(""Sales Code"");
   ActivateField(""Using Type"");
   ActivateField(""Resv Id""); // 23rd June
   ActivateField(""Reservation End Date"");
   ActivateField(""Record Blocked For"");
   ActivateField(""Record Blocking Date"");
   ActivateField(""Disconnect Type"");
   ActivateField(""Artwork Id"");
   ActivateField(""Pre Activation Id"");
   ActivateField(""Allocated To"");
      ActivateField(""Is Associated"");
     ActivateField(""Port Out""); 
   ClearToQuery();
   SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""));
   SetSearchSpec(""Number String"", MSISDN);
   ExecuteQuery(ForwardOnly);
   blnIsRecord = FirstRecord(); 
   if(blnIsRecord)
   {
     if(GetFieldValue(""Is Associated"") == ""Y"")
     {
      psInputs.SetProperty(""Partial(Y/N)"",""Y"");
      psInputs.SetProperty(""Source"",""ThrashPortOut"");
      psInputs.SetProperty(""MSISDN Number"",GetFieldValue(""Number String""));
      bsDeassociate.InvokeMethod(""DeAssociate"",psInputs,psOutputs); 
     }
      SetFieldValue(""Status"",strToStatus);
      SetFieldValue(""Available Date"","""");
         SetFieldValue(""Is Associated"",""N"");
      SetFieldValue(""Quarantine Date"","""");
      SetFieldValue(""Assoc Start Id"","""");
      SetFieldValue(""Assigned Id"","""");
      SetFieldValue(""Assigned Date"","""");
      SetFieldValue(""Allocation Id"","""");
      SetFieldValue(""Reserved To"","""");
      SetFieldValue(""Sales Code"","""");
      SetFieldValue(""Allocated To"","""");
      SetFieldValue(""Using Type"","""");
      SetFieldValue(""Resv Id"","""");
      SetFieldValue(""Reservation End Date"","""");
      SetFieldValue(""Record Blocked For"","""");
      SetFieldValue(""Record Blocking Date"","""");
      SetFieldValue(""Disconnect Type"","""");
      SetFieldValue(""Artwork Id"","""");
      SetFieldValue(""Pre Activation Id"","""");
       SetFieldValue(""Port Out"",""Y"");
        SetFieldValue(""Is Associated"",""N"");
      WriteRecord();
     }
 
}
}// end of PortOut
}// end of ifRec CUTSer
}// end of with
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function Resubmit()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_TERMINATION"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-02.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */

	//var file=Clib.fopen(""/siebelfs/hout.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
        {

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			MInputs.SetProperty(""Object Id"",MRowId);    

			MInputs.SetProperty(""ProcessName"",""STC Number Association Process"");


			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

        }
    }
	MOutputs=null;
	MWorkflowProc=null;
	MInputs=null;
	MRowId=null
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function Resubmit()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-15.06.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_TERMINATION"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-15.06.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */

	//var file=Clib.fopen(""/siebelfs/hout.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
        {

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();
			
			MInputs.SetProperty(""Object Id"",MRowId);    
			
			MInputs.SetProperty(""ProcessName"",""STC Number Association Process"");
			
			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");
			
			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);
			
        }
    }
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null

}
"/**************************************************************************************
* Name          : RMS NM Association Rule CheckNumberType Function  				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Checks if the subtype has been specified if the number type selected*
*				  has a subtype associated to it.                                     *	 
*																					  * 
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	1.0   		MBT						   	Created      01/12/2003       *
**************************************************************************************/

function CheckNumberType(&bcNumSubType,TypeId,strNumberType)
{
	var blnIsRecord;
	var strErrVal ="""";
	
	with(bcNumSubType){
		ActivateField(""Type Id"");
		ClearToQuery();
		SetSearchSpec(""Type Id"",TypeId);
		ExecuteQuery(ForwardBackward);
	}
	
	blnIsRecord = bcNumSubType.FirstRecord(); 

	if(blnIsRecord)
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASR005"", strNumberType);

	return(strErrVal);	
}
"/**************************************************************************************
* Name          : RMS NM Association Rule ValidateRule Function    			 	  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Set the Is Split flag when release	.     					.     *
*																					  * 
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 07/06/2005	1.0   		MBT						   	Created      07/06/2005       *
* 07/06/2005	1.1			MBT							P.Gautaman	 07/06/2005		  *	
**************************************************************************************/
function ReleaseRule(bcAssRulMstr,bcAssRulDtl,Inputs) {
	with(bcAssRulDtl){
		ActivateField(""Split"");
		ClearToQuery();
		ExecuteQuery();
		var mblnIsRecord = FirstRecord();
		while(mblnIsRecord){
			if(GetFieldValue(""Split"")==""Y"") {
				bcAssRulMstr.SetFieldValue(""Is Rule Split"",""Y"");
				break;
			}
			mblnIsRecord = NextRecord();
		}
	}
	bcAssRulMstr.SetFieldValue(""Status"",""Y"");
	bcAssRulMstr.WriteRecord();
}
"/**************************************************************************************
* Name          : RMS NM Association Rule Service PreInvoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS Code file for NM Association Rule .                            *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs){

	var boAssRule;
	var boNumType;

	var bcAssRulDtl;
	var bcAssRulDtlDel;
	var bcAssRulMstr;
	var bcNumType;
	var bcNumSubType;

	var strErrVal = """";

	var intReturn = ContinueOperation;
	
	var blnIsRecord;

	try{
	
		boAssRule		= TheApplication().GetBusObject(""RMS NM Association Rule"");
		bcAssRulMstr 	= boAssRule.GetBusComp(""RMS NM Association Rule Master"");
		bcAssRulDtl 	= boAssRule.GetBusComp(""RMS NM Association Rule Detail"");
		bcAssRulDtlDel 	= boAssRule.GetBusComp(""RMS NM Association Rule Detail For Delete"");
		
		boNumType		= TheApplication().GetBusObject(""RMS NM Number Type"");		
		bcNumSubType	= boNumType.GetBusComp(""RMS NM Number Subtype"");
				
		with(bcAssRulMstr){	
			ActivateField(""Is Valid"");	
			ActivateField(""Is Rule Split"");	
			ClearToQuery();
			SetSearchSpec(""Id"",Inputs.GetProperty(""ObjectId""));
			ExecuteQuery(ForwardBackward);
		}	
		
		blnIsRecord = bcAssRulMstr.FirstRecord();
		
		intReturn = CancelOperation;
		
		Outputs.SetProperty(""Record Exists"",""N"");				

//-------------------------------------------------------
// Check for the new record of association rule master.
//-------------------------------------------------------

		if(blnIsRecord){
			
			Outputs.SetProperty(""Record Exists"",""Y"");
			
			with(bcAssRulDtl){
			
			
				ActivateField(""Sequence"");
				ActivateField(""Source Number Type"");
				ActivateField(""Source Number Type Id"");
				ActivateField(""Source Number Subtype"");
				ActivateField(""Destination Number Type"");
				ActivateField(""Destination Number Type Id"");
				ActivateField(""Destination Number Subtype"");
				ActivateField(""Destination Number Type Identifier"");
				ActivateField(""Parent Rule"");
				ActivateField(""Rule Id"");
				ActivateField(""No of Destinations"");			
				ActivateField(""Split"");							
				ActivateField(""Split Record Id"");
				
				ClearToQuery();
				SetSortSpec(""Sequence(ASCENDING)"");
				ExecuteQuery(ForwardBackward);
			}
			
			switch(MethodName){
		
				case ""ValidateRule"":
				
					intReturn = CancelOperation;	
					strErrVal = ValidateRule(bcAssRulMstr,bcAssRulDtl,bcNumSubType,Inputs);
					if(strErrVal != """")
						TheApplication().RaiseErrorText(strErrVal);
					break;
	
				case ""ReleaseRule"":
				
					intReturn = CancelOperation;	
					ReleaseRule(bcAssRulMstr,bcAssRulDtl,Inputs);			
					break;

				case ""CheckDelete"":
				
					intReturn = CancelOperation;
					if((Inputs.GetProperty(""RuleType"") == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) && (Inputs.GetProperty(""ParentRule"") !="""")){
						bcAssRulDtl.FirstRecord();
						blnIsRecord = bcAssRulDtl.NextRecord();

//---------------------------------------------------------------------------------------------
// Raising an error when user tries to delete a record having child records associated with it. 	    
//---------------------------------------------------------------------------------------------
						if (blnIsRecord){
							strErrVal = ""RMSASR004"";
							TheApplication().RaiseError(strErrVal);
						}
					}
									
					break;
					
					
				case ""DeleteDetail"":											

//--------------------------------------------------------------------------------
// Deleting the Child records if the Rule Type of the master record gets changed.
//--------------------------------------------------------------------------------				
					intReturn = CancelOperation;
						
					with(bcAssRulDtlDel){
						ClearToQuery();
						SetSortSpec(""Sequence(ASCENDING)"");
						ExecuteQuery(ForwardBackward);
					}
				
					blnIsRecord = bcAssRulDtlDel.FirstRecord();	
				
					while(blnIsRecord){
						bcAssRulDtlDel.DeleteRecord();
						blnIsRecord = bcAssRulDtlDel.FirstRecord();
					}
				
					break;
			}
		}	
		
		
		
		bcAssRulMstr 	= null;
		bcAssRulDtl  	= null;
		bcAssRulDtlDel 	= null;
		bcNumSubType	= null;		
		boAssRule 		= null;
		boNumType		= null;
		return (intReturn);
	
	}catch(e){
		
		bcAssRulMstr 	= null;
		bcAssRulDtl  	= null;
		bcAssRulDtlDel 	= null;
		bcNumSubType	= null;
		boAssRule 		= null;
		boNumType		= null;
		throw (e);
	}	
}
"/**************************************************************************************
* Name          : RMS NM Association Rule ValidateRule Function    			 	  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Validates the rule details specified.     					.     *
*																					  * 
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver    By       Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	1.0    MBT		Created      01/12/2003       *
* 27/05/2005	1.1	   MBT		P.Gautaman	 27/05/2005		  *	
20060706      | 1.2  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function ValidateRule(&bcAssRulMstr,&bcAssRulDtl,&bcNumSubType,Inputs)
{
	var strCurrSrcNumType;
	var strCurrDestNumType
	var strPrevDestNumType;
	
	var strCurrSrcTypeId;
	var strCurrDestTypeId;
	
	var strCurrSrcNumSubType;
	var strCurrDestNumSubType;
	var strCurrSplit;
	var strCurrDestTypeIdentifier;
		
	var strPrevDestNumSubType;
	var strPrevDestTypeId ="""";
	var strPrevSplit;
	var strPrevSrcTypeId;
	var strPrevSrcSubType;
	var strPrevDestTypeIdentifier;
	
	var strCurrSequence;
	var strPrevSequence = """";
	
	var strRuleType;
	var strErrVal = """";
		
	var intSeq = 1;	
	var intSplitNoOfDest=0;
	var intNoOfSplitRec=0;
	
	var arrValidNumType = new Array();
	var arrNumTypeSeq = new Array();
	var intValidNumArrCnt = 0;

	var blnIsRecord;
	
	blnIsRecord = bcAssRulDtl.FirstRecord();
	
	strRuleType   = Inputs.GetProperty(""RuleType"");
		
//---------------------------------------------------------------------------
// Display an error if Parent rule hasnt been selected for the first record
// if rule type is Child.
//---------------------------------------------------------------------------

	if(strRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD""))
	{
		if(bcAssRulDtl.GetFieldValue(""Parent Rule"")=="""")
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASR001"");
			return(strErrVal);
		}
		strPrevDestNumType		= bcAssRulDtl.GetFieldValue(""Destination Number Type"");	
		strPrevDestNumSubType  	= bcAssRulDtl.GetFieldValue(""Destination Number Subtype"");
		strPrevDestTypeId 		= bcAssRulDtl.GetFieldValue(""Destination Number Type Id"");
		strPrevSequence         = bcAssRulDtl.GetFieldValue(""Sequence"");
		strPrevSplit			= bcAssRulDtl.GetFieldValue(""Split"");
		strPrevDestTypeIdentifier = bcAssRulDtl.GetFieldValue(""Destination Number Type Identifier"");
		
		
//---------------------------------------------------------------------------
// If subtype hasnt been filled then check if it exists for the number type. 
//---------------------------------------------------------------------------	
		if(strPrevDestNumSubType == """")
		{ 
			strErrVal = CheckNumberType(bcNumSubType,strPrevDestTypeId,strPrevDestNumType);
			if(strErrVal != """")
				return(strErrVal);
		}
//		arrValidNumType[intValidNumArrCnt++]	= bcAssRulDtl.GetFieldValue(""Destination Number Type"");	
//		arrNumTypeSeq[bcAssRulDtl.GetFieldValue(""Destination Number Type"")] = bcAssRulDtl.GetFieldValue(""Sequence"");
		blnIsRecord = bcAssRulDtl.NextRecord();
	}
	var psDestType = TheApplication().NewPropertySet();
	var intDestCnt = 0;
	var intFrstRecCnt = 0;
	while(blnIsRecord)
	{
//------------------------------------------------------
// Display an error if Source Type hasnt been selected.
//------------------------------------------------------
		if(bcAssRulDtl.GetFieldValue(""Source Number Type"")=="""")
		{	
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASR003"");
			return(strErrVal);			
		}
		
		strCurrSrcNumType		= bcAssRulDtl.GetFieldValue(""Source Number Type"");	
		strCurrSrcTypeId  		= bcAssRulDtl.GetFieldValue(""Source Number Type Id"");
		strCurrSrcNumSubType 	= bcAssRulDtl.GetFieldValue(""Source Number Subtype"");
		strCurrSequence 		= bcAssRulDtl.GetFieldValue(""Sequence"");
//----------------------------------------------------------------------------------
// If subtype hasnt been filled then check if it exists for the source number type. 
//----------------------------------------------------------------------------------
		if(strCurrSrcNumSubType == """")
		{
			strErrVal = CheckNumberType(bcNumSubType,strCurrSrcTypeId,strCurrSrcNumType);
			if(strErrVal != """")
				return(strErrVal);
		}		
		strCurrDestNumType		= bcAssRulDtl.GetFieldValue(""Destination Number Type"");	
		strCurrDestNumSubType  	= bcAssRulDtl.GetFieldValue(""Destination Number Subtype"");
		strCurrDestTypeId 		= bcAssRulDtl.GetFieldValue(""Destination Number Type Id"");
		strCurrDestTypeIdentifier = bcAssRulDtl.GetFieldValue(""Destination Number Type Identifier"");				
		strCurrSplit			= bcAssRulDtl.GetFieldValue(""Split"");
//----------------------------------------------------------------------------------
// If subtype hasnt been filled then check if it exists for the source number type. 
//----------------------------------------------------------------------------------		
		if(strCurrDestNumSubType == """")
		{
			strErrVal = CheckNumberType(bcNumSubType,strCurrDestTypeId,strCurrDestNumType);
			if(strErrVal != """")
				return(strErrVal);
		}		
//----------------------------------------------------------------------
// The source number type / subtype should be the same as the previous
// destination number type / subtype if Split is not set to true. 
//----------------------------------------------------------------------
/*		if(intDestCnt == 0)
			UpdateDestTypePS(psDestType,bcAssRulDtl.GetFieldValue(""Source Number Type""),bcAssRulDtl);

		for(var i=0;i<getArrayLength(arrValidNumType);i++) {
			var temp = arrValidNumType[i];
		}
			
		if(intValidNumArrCnt != 0) {
			if(!CheckValidNumberType(arrValidNumType,bcAssRulDtl.GetFieldValue(""Source Number Type"")))
				TheApplication().RaiseErrorText(""Wrong destination Type"");
		}
		for(var i=0;i<getArrayLength(arrValidNumType);i++) {
			var temp = arrValidNumType[i];
		}
		
		UpdateNumberArray(intValidNumArrCnt,arrValidNumType,arrNumTypeSeq,bcAssRulDtl.GetFieldValue(""Destination Number Type""),bcAssRulDtl);*/

		if(intFrstRecCnt == 0) 
		{
			if(bcAssRulDtl.GetFieldValue(""Split"") == ""Y"") 
			{
				for(var i=0;i<bcAssRulDtl.GetFieldValue(""No of Destinations"");i++)
					psDestType.SetProperty(intDestCnt++,bcAssRulDtl.GetFieldValue(""Source Number Type""));
				psDestType.SetProperty(intDestCnt++,bcAssRulDtl.GetFieldValue(""Destination Number Type""));
			}
			else 
			{
				psDestType.SetProperty(intDestCnt++,bcAssRulDtl.GetFieldValue(""Source Number Type""));
				psDestType.SetProperty(intDestCnt++,bcAssRulDtl.GetFieldValue(""Destination Number Type""));
			}
		}


		var intChildCnt = psDestType.GetPropertyCount();
		var blnChck = false;
		for(var i = 0;i<intChildCnt;i++) 
		{
			if(i==0) 
			{
				var temp = psDestType.GetFirstProperty();
				var temp1 = psDestType.GetProperty(psDestType.GetFirstProperty());
				if(bcAssRulDtl.GetFieldValue(""Source Number Type"") == psDestType.GetProperty(psDestType.GetFirstProperty())) 
				{
					blnChck = true;
					psDestType.RemoveProperty(psDestType.GetFirstProperty());
					break;
				}
			}
			else 
			{
//				var temp = psDestType.GetProperty(psDestType.GetNextProperty());
//				var temp1 =psDestType.GetProperty(psDestType.GetNextProperty());
				var intPropIndx = psDestType.GetNextProperty();
				if(bcAssRulDtl.GetFieldValue(""Source Number Type"") == psDestType.GetProperty(intPropIndx)) 
				{
					blnChck = true;
					psDestType.RemoveProperty(intPropIndx);
					break;
				}
			}
		}
		if(!blnChck) 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASR011"",bcAssRulDtl.GetFieldValue(""Sequence""));
			return(strErrVal);
		}	
		if(intFrstRecCnt != 0)
		{
			if(bcAssRulDtl.GetFieldValue(""Split"") == ""Y"") 
			{
				for(var i=0;i<bcAssRulDtl.GetFieldValue(""No of Destinations"");i++)
					psDestType.SetProperty(intDestCnt++,bcAssRulDtl.GetFieldValue(""Source Number Type""));
				psDestType.SetProperty(intDestCnt++,bcAssRulDtl.GetFieldValue(""Destination Number Type""));
			}
			else
				psDestType.SetProperty(intDestCnt++,bcAssRulDtl.GetFieldValue(""Destination Number Type""));
		}
		blnIsRecord = bcAssRulDtl.NextRecord();
		intFrstRecCnt++;
	}			
	blnIsRecord = bcAssRulDtl.FirstRecord();
//---------------------------------------------------				
//Sequencing the records of association rule detail 						
//---------------------------------------------------
	while(blnIsRecord)
	{
		bcAssRulDtl.SetFieldValue(""Sequence"",intSeq);
		intSeq = intSeq + 1;
		bcAssRulDtl.WriteRecord();
		blnIsRecord = bcAssRulDtl.NextRecord();
	}

	bcAssRulMstr.SetFieldValue(""Is Valid"",""Y"");								
	bcAssRulMstr.WriteRecord();
//1.2 below, this statement WILL NOT reach always, there are some returns earlier !!!
	psDestType = null;
//1.2 above
	return(strErrVal);			
}
"/**************************************************************************************
* Name          : RMS NM Association Rule Validate splitted Records			 	  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Validates the rule details specified.     					.     *
*																					  * 
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   	MBT		 Created      			      *
* 28/05/2005 	 1.1	MBT	     P.Gautaman	 28/05/2005		  *	
20060706       | 1.2  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function ValidateSplittedRecords(stSrcNumTypeId,strSrcNumSubType,strDestTypeIdentifier,strSplitRecId,Inputs,strCurrSeq){

		var boAssRule		= TheApplication().GetBusObject(""RMS NM Association Rule"");
		var bcAssRulMstr 	= boAssRule.GetBusComp(""RMS NM Association Rule Master"");
		var bcAssRulDtl 	= boAssRule.GetBusComp(""RMS NM Association Rule Detail"");
		var strErrVal		= """";
		
		var blnIsSplitRec;
		var strPrevSequence = strCurrSeq;
		
		var strPrevSrcTypeId = stSrcNumTypeId;
		var strPrevSrcSubType= strSrcNumSubType;
		var strPrevDestTypeIdentifier = strDestTypeIdentifier;
		
		var strCurrSrcTypeId;
		var strCurrSrcNumSubType;
		var strCurrDestTypeIdentifier;
		var strCurrSequence;
		
		
		with(bcAssRulMstr) {
			ClearToQuery();
			SetSearchSpec(""Id"",Inputs.GetProperty(""ObjectId""));
			ExecuteQuery(ForwardBackward);		
		}
		with(bcAssRulDtl) {
			ActivateField(""Sequence"");
			ActivateField(""Source Number Type"");
			ActivateField(""Source Number Type Id"");
			ActivateField(""Source Number Subtype"");
			ActivateField(""Destination Number Type"");
			ActivateField(""Destination Number Type Id"");
			ActivateField(""Destination Number Subtype"");
			ActivateField(""Destination Number Type Identifier"");
			ActivateField(""Split Record Id"");
			ActivateField(""Parent Rule"");
			ActivateField(""Rule Id"");
			ActivateField(""No of Destinations"");			
			ActivateField(""Split"");							
			
			ClearToQuery();
			SetSortSpec(""Sequence(ASCENDING)"");
			SetSearchSpec(""Split Record Id"",strSplitRecId);
			ExecuteQuery(ForwardBackward);
			blnIsSplitRec = FirstRecord();
			while(blnIsSplitRec) {
			
				strCurrSrcTypeId 	 = GetFieldValue(""Source Number Type Id"");
				strCurrSrcNumSubType = GetFieldValue(""Source Number Subtype"");
				strCurrDestTypeIdentifier = GetFieldValue(""Destination Number Type Identifier"");
				strCurrSequence	= GetFieldValue(""Sequence"");
				if(strCurrSrcTypeId != strPrevSrcTypeId){
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASR007"", strCurrSequence, strPrevSequence);
					return(strErrVal);
				}
				else if(strCurrSrcNumSubType != strPrevSrcSubType) {
						strErrVal = TheApplicaxtion().LookupMessage(""User Defined Errors"",""RMSASR008"", strCurrSequence, strPrevSequence);
						return(strErrVal);			
				}
				else if(strPrevDestTypeIdentifier != strCurrDestTypeIdentifier) {
						strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASR009"", strCurrSequence, strPrevSequence);
						return(strErrVal);						
				}
				
				strPrevSrcTypeId = strCurrSrcTypeId;
				strPrevSrcSubType = strCurrSrcNumSubType;
				strPrevDestTypeIdentifier = strCurrDestTypeIdentifier;
				strPrevSequence = strCurrSequence;
				blnIsSplitRec = NextRecord();
			}
		}

//1.2 below
		bcAssRulDtl  = null;
		bcAssRulMstr = null;
		boAssRule    = null;
//1.2 above
		return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Association Rule Service PreInvoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS Code file for NM Association Rule fro splitting the record      *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/06/2005	 1.0   		 MBT						 Created      01/06/2005      *
**************************************************************************************/
function AddNewRecord(bcAssRulDtl,Inputs) {
	with(bcAssRulDtl) {
		var intNumOfRec = 1;

		while(ToInteger(intNumOfRec) < ToInteger(Inputs.GetProperty(""NumOfDest""))) {
			NewRecord(1);
			SetFieldValue(""Source Number Type"",Inputs.GetProperty(""SourceType""));
			SetFieldValue(""Destination Number Type"",Inputs.GetProperty(""DestType""));
			SetFieldValue(""Split Record Id"",Inputs.GetProperty(""Id""));			
			WriteRecord();
			intNumOfRec++;
		}
	}
}
"/**************************************************************************************
* Name          : RMS NM Association Rule Service PreInvoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS Code file for NM Association Rule .                            *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/06/2005	 1.0   		 MBT						 Created      01/06/2005      *
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	try {
		switch (MethodName) {
			case ""SplitRule"":
				var boAssRule = TheApplication().ActiveBusObject();
				var bcAssRuleDtl = boAssRule.GetBusComp(""RMS NM Association Rule Detail"");
				if(Inputs.GetProperty(""DestType"") == """")  {
					var strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC015"", ""Destination Number Type"");
					TheApplication().RaiseErrorText(strErrVal);
				}
				if(Inputs.GetProperty(""ParentRuleId"") != """") {
					var strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASR010"");
					TheApplication().RaiseErrorText(strErrVal);
				}
					
				AddNewRecord(bcAssRuleDtl,Inputs);

				break;

			default:
				return (ContinueOperation);
		}
	} catch(e) {
		bcAssRuleDtl = null;
		boAssRule = null;
		throw e;
	} finally {
		bcAssRuleDtl = null;
		boAssRule = null;
	}
	return (CancelOperation);
}
"/*-------------+------+--------------+---------------------------
Date(YYYYMMDD) | Ver  | By           | Description of Change
---------------+------+--------------+-----------------------------
20070626       | 1.0  | Ramakrishna  | Creation
---------------+------+--------------+----------------------------*/
function Init (Inputs, Outputs) {
	Outputs.SetProperty(""MSISDN Number"","""");
	Outputs.SetProperty(""Quantity"","""");
	return (CancelOperation);
}
"/*-------------+------+--------------+---------------------------
Date(YYYYMMDD) | Ver  | By           | Description of Change
---------------+------+--------------+-----------------------------
20070626       | 1.0  | Ramakrishna  | Creation
---------------+------+--------------+----------------------------*/
function Query(Inputs, Outputs) {
	try {
		var returnCode = CancelOperation;
		var strSearchspec = Inputs.GetProperty(""search-string"");
		if (strSearchspec == """") {
			var childProp = TheApplication().NewPropertySet();
			childProp.SetProperty(""MSISDN Number"","""");
			childProp.SetProperty(""Quantity"","""");
			Outputs.AddChild(childProp);
			returnCode =  CancelOperation;
		}
		return (returnCode); 
  	}
    catch (e) {
   		var vErr = e.toString();
		var vErrCode = e.errCode;
		var vObjName = ""RMS NM MSISDN Query-Reservation"";
		var vFunc = ""Query"";
		var vObjType = ""Business Service"";
		var vObjId ="""";
		TheApplication().log_exception(""Exception"",vErr,vErrCode,vObjId,vObjName,vFunc,vObjType);
        return (CancelOperation);
   	} 
   	finally {
   		childProp = null;
   	}	 
}
"/*-------------+------+--------------+---------------------------
Date(YYYYMMDD) | Ver  | By           | Description of Change
---------------+------+--------------+-----------------------------
20070626       | 1.0  | Ramakrishna  | Creation
---------------+------+--------------+----------------------------*/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs) {
	var returnCode = ContinueOperation;
	switch(MethodName) {
		case 'Init':
			returnCode = Init(Inputs, Outputs);
			break;
		case 'Query':
			returnCode = Query(Inputs, Outputs);
			break;	
	}
	return (CancelOperation);
}
var strByPassStatus;
"/**************************************************************************************
* Name          : RMS NM Number Allocation AllocDealloc Function					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : The main function for allocating and deallocating.			      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function AllocDealloc(intObjectId){
	
    var boNumberAlloc;
    var bcNumberAlloc;
   
    var strAllocStatus;
    var strErrVal = """";
    
    var blnIsRecord;
               
   	boNumberAlloc = TheApplication().GetBusObject(""RMS NM Number Allocation"");
	bcNumberAlloc = boNumberAlloc.GetBusComp(""RMS NM Number Allocation"");

	with(bcNumberAlloc){
		ActivateField(""Id"");
		ActivateField(""Status"");
		ActivateField(""Scheme Id"");
		ActivateField(""Block Id"");
		ActivateField(""Alloc To"");		
		ActivateField(""Alloc From"");
		ActivateField(""Start Num"");
		ActivateField(""End Num"");
		ActivateField(""End Num String"");
		ActivateField(""Quantity"");
		ActivateField(""Number Id"");
		ActivateField(""Is Sequence"");
		ActivateField(""Is Internal"");
		ActivateField(""Is Paired"");
		ActivateField(""Special Category Name"");

//-----------------------------------------------------------
// Code added for Phase 1A2 for displaying dealer name,
// dealer area code and dealer channel code.
//-----------------------------------------------------------
		ActivateField(""To Dealer Area Code"");
		ActivateField(""To Dealer Name"");
		ActivateField(""To Dealer Channel Code"");
		ActivateField(""From Dealer Area Code"");
		ActivateField(""From Dealer Name"");
		ActivateField(""From Dealer Channel Code"");
		ActivateField(""Alloc Date"");
		ActivateField(""Current Date"");
		ActivateField(""Partner Level"");
		ActivateField(""Processing Message"");
				
		ClearToQuery();
		SetSearchSpec(""Id"",intObjectId);
		ExecuteQuery();
	}

	blnIsRecord = bcNumberAlloc.FirstRecord();
	if(blnIsRecord){
		strAllocStatus	= bcNumberAlloc.GetFieldValue(""Status"");
			
//---------------------------------------------------------------------------------------
// Display an message to refresh the applet if another user is accessing the same record.
//---------------------------------------------------------------------------------------

		//Amit
		//if(strAllocStatus = TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""))
		if((strAllocStatus == TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"")) || (strAllocStatus == TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""COMPLETE"")) )
		//Amit End
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC003"");
	
		if(strErrVal == """"){
//-------------------------------------------------------------------------------------------------------
// Change status to processing so that another user cant access this record till processing is complete.
//-------------------------------------------------------------------------------------------------------
			
			bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
  			bcNumberAlloc.SetUserProperty(""blnFromAllocation"",""Y"")
			bcNumberAlloc.WriteRecord();
			 
			strErrVal = CheckQuantity(bcNumberAlloc);

//---------------------------------------------------------------------------------------------------
//Display the message as completed if successfully allocated (RMSALC006) or deallocated (RMSALC007).
//---------------------------------------------------------------------------------------------------
			if(strErrVal == ""RMSALC006"" || strErrVal == ""RMSALC007"")
			{
			bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""COMPLETE""));
			bcNumberAlloc.SetFieldValue(""Alloc Date"",bcNumberAlloc.GetFieldValue(""Current Date""));
			bcNumberAlloc.SetFieldValue(""Processing Message"",TheApplication().LookupMessage(""User Defined Errors"",strErrVal));
			//  Calling   WF   process   for  XML   generation   KT 22-05-06
	/*		var prsInputs   = TheApplication().NewPropertySet();
			var prsOutputs  = TheApplication().NewPropertySet();
			var bsNumberAlloc	= TheApplication().GetService(""Workflow Process Manager"");
			prsInputs.SetProperty(""RowId"",intObjectId);
			prsInputs.SetProperty(""ProcessName"",""RMS NM Number Allocation"");
			bsNumberAlloc.InvokeMethod(""RunProcess"",prsInputs,prsOutputs);
*/
/*-------------	GB 15-Dec-06-----------------------------
                	if(strErrVal == ""RMSALC006"")
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC006"");
				else
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC007"");	
					
-----------------------------------------------------------*/
				
			}
//--------------------------------------------------------
// If not successful then set the status back to Pending.
//--------------------------------------------------------			
			else
				{
					bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));		
					//AmitManoj bcNumberAlloc.SetFieldValue(""Processing Message"",TheApplication().LookupMessage(""User Defined Errors"",strErrVal));
					bcNumberAlloc.SetFieldValue(""Processing Message"",strErrVal);
				}

			bcNumberAlloc.SetUserProperty(""blnFromAllocation"",""Y"")				
			bcNumberAlloc.WriteRecord();
		}	
	}
	
	
	bcNumberAlloc = null;	
	boNumberAlloc = null;
	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation AllocateNumbers Function				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Allocate the numbers					                              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function AllocateNumbers(bcAllocNum,bcNumberAlloc){

	var intAssocStartId;
	var intNumId;
	var intQuantity = 1;
	
	var strErrVal = """";
	var strStatusBfrAlloc = """";
	
	var blnIsRecord;
	
	blnIsRecord 		= bcAllocNum.FirstRecord();
	
	while(blnIsRecord){
		intNumId 		= bcAllocNum.GetFieldValue(""Id"");
		intAssocStartId = bcAllocNum.GetFieldValue(""Assoc Start Id"");
			
//-----------------------------------
// Update the number for allocation.	
//-----------------------------------	 
		UpdateAllocateNumbers(bcNumberAlloc,bcAllocNum);
		if(bcAllocNum.GetFieldValue(""Is Associated"") == ""Y"") {				

//----------------------------------------------
// Update the associated numbers for allocation.
//----------------------------------------------	
			UpdateAssoNumbers(intNumId,intAssocStartId,bcNumberAlloc);

//------------------------------------------------------------
// Updating the concatenated number record in CX_NUM_ASS_CNCT.
//------------------------------------------------------------	
			UpdateAssCnctNumbers(intAssocStartId,bcNumberAlloc,strStatusBfrAlloc);		
		}
        
		bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));		
		bcNumberAlloc.SetFieldValue(""Quantity"",intQuantity);
		bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));		
        bcNumberAlloc.SetFieldValue(""End Num"",bcAllocNum.GetFieldValue(""Number""));
        bcNumberAlloc.SetFieldValue(""End Num String"",bcAllocNum.GetFieldValue(""Number String""));
		bcNumberAlloc.SetUserProperty(""blnFromAllocation"",""Y"")
		bcNumberAlloc.WriteRecord();
		
		intQuantity = ToInteger(intQuantity) + 1;
		blnIsRecord = bcAllocNum.NextRecord();
	}	
	
	strErrVal = ""RMSALC006"";	
	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation CheckQuantity Function					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Checks the overlapping of numbers as quantity specified.            *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	 1.0   	MBT	     Created      12/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
20060810       | 1.2  | GARIMA | Changed Search Spec as 	Special Category Tpye 
                                is now normal filed  earlier it was joined field
* 08/04/2009   | 1.3  | Ashu   | Updated SearchSpec so that Blocked Numbers are
								not selected at time of De-Allocation of Numbers.
**************************************************************************************/

function CheckQuantity(bcNumberAlloc){

	var boNMAlloc;
	var boNMEnquiry;
	var bcNMAlloc;
	var bcAllocNum;
	
	var strSearchExpr = """";
	var strErrVal = """";
	var strSearchStatus;
	var strEndNum;
	var strOperation;
	var strAssignedExpr;
		
	var blnIsRecord;
	var blnIsSequence;
	
	var intStartNum = 0;
	var intEndNum = 0;
	var intQuantity;
	var intNumId;
	var strIsPaired = ""N"";
	var strSpCategory	= """";
	
	var psOutputs = TheApplication().NewPropertySet();
			
	boNMAlloc		= TheApplication().GetBusObject(""RMS NM Number Allocation"");
	boNMEnquiry		= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNMAlloc		= boNMAlloc.GetBusComp(""RMS NM Number Allocation"");	
	bcAllocNum		= boNMEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	
	intStartNum		= bcNumberAlloc.GetFieldValue(""Start Num"");
	intEndNum		= bcNumberAlloc.GetFieldValue(""End Num"");
	strEndNum		= bcNumberAlloc.GetFieldValue(""End Num String"");
	intQuantity		= bcNumberAlloc.GetFieldValue(""Quantity"");
	intNumId		= bcNumberAlloc.GetFieldValue(""Number Id"");
	blnIsSequence	= bcNumberAlloc.GetFieldValue(""Is Sequence"");
	strOperation 	= bcNumberAlloc.GetFieldValue(""Operation"");
	strIsPaired		= bcNumberAlloc.GetFieldValue(""Is Paired"");
	strSpCategory 	= bcNumberAlloc.GetFieldValue(""Special Category Name"");
	
	strAssignedExpr = ""' OR [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ASSIGNED"") + ""'"";
	strAssignedExpr += "" OR [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""TRASHED"") + ""')"";
	
	if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""ALLOCATE"")){	
		strSearchExpr  	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
							""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
							""' AND ([Allocated To] = '"" + bcNumberAlloc.GetFieldValue(""Alloc From Id"") + ""')"" + 
							"" AND ([Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"");
		if((strByPassStatus == ""ERPASSIGNED_Y"") || (TheApplication().InvokeMethod(""LookupValue"",""RMS_ALLOC_ADMIN"",""ASSIGNED_Y"")== ""ASSIGNED_Y""))
			strSearchExpr+=	strAssignedExpr;
		else
			strSearchExpr+= ""')"";
			
			strSearchExpr+="" AND [Number] >= '"" + intStartNum + ""' AND [Is Associated] = '"" + strIsPaired + ""'"";
			
		//below 1.2
		//if(strSpCategory == """")
		//		strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
		if(strSpCategory == """")
				strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
		//above 1.2
		else
				strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
	//ms changed			
	}
	if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""DEALLOCATE"")){
		strSearchExpr  	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
							""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
							""' AND ([Allocated To] = '"" + bcNumberAlloc.GetFieldValue(""Alloc From Id"") + ""')"" +
							"" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""'"" +
							"" AND [Number] >= '"" + intStartNum + ""' AND [Is Associated] = '"" + strIsPaired + ""'"" +
							"" AND [Record Blocked For] IS NULL"";	//this line 1.3
		//below 1.2
	//	if(strSpCategory == """")
	//			strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
		if(strSpCategory == """")
				strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
		//above 1.2
		else
				strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";

	}
	
				
//-------------------------------------------------------------------
// If Is Sequence is selected then calculating end number so as to 
// retrieve only that set of numbers.
//-------------------------------------------------------------------

	if(blnIsSequence == ""Y""){
		intEndNum = ToNumber(intStartNum);
		intEndNum += (intQuantity - 1);
		strSearchExpr = strSearchExpr + "" AND [Number] <= "" + intEndNum + """"; 
	}
	
//---------------------------
// Populate the end number.
//---------------------------
	
	strErrVal = PopulateEndNum(intNumId,strSearchExpr,blnIsSequence,intStartNum,intEndNum,intQuantity,psOutputs);

	intEndNum 	= ToNumber(psOutputs.GetProperty(""intEndNum""));
	strEndNum 	= psOutputs.GetProperty(""strEndNum"");
	intQuantity = ToNumber(psOutputs.GetProperty(""intQuantity""));
	
    if(strErrVal == """"){

		strSearchExpr = """";
		strSearchExpr	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
							""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
							""' AND ([Status] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING"") +
				 			""' OR [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"") +
				 			""' ) AND ([Id] <> '"" + bcNumberAlloc.GetFieldValue(""Id"") + 
				 			""' OR [Alloc From Id] <> '"" + bcNumberAlloc.GetFieldValue(""Id"") +
              				""' ) AND [Created] < '"" + bcNumberAlloc.GetFieldValue(""Created"") + ""'"";
						 	
//-------------------------------------------------------------------------------------------------------
//Checking for the concurrency of the start number and the end number selected for the given operation
//-------------------------------------------------------------------------------------------------------
		with(bcNMAlloc){
			ClearToQuery();
			ActivateField(""Scheme Id"");
			ActivateField(""Block Id"");
			ActivateField(""Status"");
			ActivateField(""SIM Artwork Id"");
			ActivateField(""Created"");
			ActivateField(""Start Num"");
			ActivateField(""End Num"");
			ActivateField(""Start Num String"");
			ActivateField(""End Num String"");
			SetSearchExpr(strSearchExpr);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}
		
		while(blnIsRecord){
//--------------------------------------------------
// Display an error if start number is overlapping.	
//--------------------------------------------------
			if((intStartNum >= ToNumber(bcNMAlloc.GetFieldValue(""Start Num""))) && (intStartNum <= ToNumber(bcNMAlloc.GetFieldValue(""End Num"")))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC004"",bcNMAlloc.GetFieldValue(""Start Num String""),bcNMAlloc.GetFieldValue(""End Num String""));	
				break;
			}	
//------------------------------------------------
// Display an error if end number is overlapping.
//------------------------------------------------				
			else if((intEndNum >= ToNumber(bcNMAlloc.GetFieldValue(""Start Num""))) && (intEndNum <= ToNumber(bcNMAlloc.GetFieldValue(""End Num"")))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC005"",bcNMAlloc.GetFieldValue(""Start Num String""),bcNMAlloc.GetFieldValue(""End Num String""));	
				break;
			}	
			
//----------------------------------------------------------------
// Display an error if both start and end number are overlapping.
//----------------------------------------------------------------				
			else if((intStartNum <= ToNumber(bcNMAlloc.GetFieldValue(""Start Num""))) && (intEndNum >= ToNumber(bcNMAlloc.GetFieldValue(""End Num"")))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC009"",bcNMAlloc.GetFieldValue(""Start Num String""),bcNMAlloc.GetFieldValue(""End Num String""));	
				break;
			}
				
			blnIsRecord = bcNMAlloc.NextRecord();	
		
		}

//-----------------------------------------------------------------
// Retrieving numbers as per the start number and end number and 
// allocating or deallocating them as per operation selected.
//-----------------------------------------------------------------	
		if(strErrVal == """"){

//========================================== Kadali Srinivas Ver 2.0 ============================================================
			if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""ALLOCATE"")){	
					strSearchExpr  	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
										""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
										""' AND [Allocated To] = '"" + bcNumberAlloc.GetFieldValue(""Alloc From Id"") + ""'"" +
										"" AND ([Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"");
					if((strByPassStatus == ""ERPASSIGNED_Y"") || (TheApplication().InvokeMethod(""LookupValue"",""RMS_ALLOC_ADMIN"",""ASSIGNED_Y"")== ""ASSIGNED_Y""))
						strSearchExpr+=	strAssignedExpr;
					else
						strSearchExpr+= ""')"";
						
						strSearchExpr+=	"" AND [Is Associated] = '"" + strIsPaired + ""'"" + 
										"" AND [Number] >= '"" + intStartNum +
										""' AND [Number] <= '"" + intEndNum + ""'"";
			//below 1.2
			//	if(strSpCategory == """")
			//				strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
				if(strSpCategory == """")
					strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
		//above 1.2
			
				else
					strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
			}
			if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""DEALLOCATE"")){
					strSearchExpr  	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
										""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
										""' AND ([Allocated To] = '"" + bcNumberAlloc.GetFieldValue(""Alloc From Id"") + ""')"" +
										"" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""'"" +
										"" AND [Is Associated] = '"" + strIsPaired + ""'"" + 
										"" AND [Number] >= '"" + intStartNum +
										""' AND [Number] <= '"" + intEndNum + ""'"" +
										"" AND [Record Blocked For] IS NULL"";	//this line 1.3
				//below 1.2
//				if(strSpCategory == """")
//					strSearchExpr+=	"" AND [Special Category Id] IS NULL"";

				if(strSpCategory == """")
					strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
				//above 1.2

				else
					strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
			}										
//======================================== Kadali Srinivas Ver 2.0 =============================================================		
			with(bcAllocNum){
					ActivateField(""Scheme Id"");
					ActivateField(""Block Id"");
					ActivateField(""Allocated To"");
					ActivateField(""Number"");
					ActivateField(""SIM Artwork Id"");					
					ActivateField(""Status"");
					ActivateField(""Status Date"");
					ActivateField(""Assoc Start Id"");
					ActivateField(""Is Associated"");
					ActivateField(""Status Before Allocation"");
					ActivateField(""Allocation Id"");
					//ActivateField(""Allocated To"");
					ActivateField(""Distributor Id"");
					//ActivateField(""Partner Type"");
					ActivateField(""Type Identifier"");
					ActivateField(""SIM Card Id"");
					//ActivateField(""Parent Division Id"");
					ActivateField(""To Dealer Name"");
                    ActivateField(""Dlr Allocated To"");
					ActivateField(""Sales Code"");
					ActivateField(""Record Blocked For"");
					ClearToQuery();
					SetSearchExpr(strSearchExpr);
					ExecuteQuery(ForwardOnly);
			}

			if(bcNumberAlloc.GetFieldValue(""Operation"")==TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""ALLOCATE""))			
					strErrVal = AllocateNumbers(bcAllocNum,bcNumberAlloc);
			else
					strErrVal = DeAllocateNumbers(bcAllocNum,bcNumberAlloc);
		}
	
	}
			
	
	bcNMAlloc = null;
	bcAllocNum = null;
	boNMAlloc = null;
	
//1.1 below
	psOutputs = null;
	boNMEnquiry = null;
//1.1 above
	return(strErrVal);

}
"/**************************************************************************************
* Name          : NM Number Allocation DeAllocateNumbers Function   			 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Deallocate the numbers.       					                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 04/12/2003 	 | 1.0  | 		MBT	  |					   	Created      13/12/2003   *
* 21/07/2006     | 1.1  | Ramakrishna | Changed code Populate Status Before Allocation*
**************************************************************************************/

function DeAllocateNumbers(bcAllocNum,bcNumberAlloc){

	var intAssocStartId;
	var intNumId;
	
	var strErrVal = """";
	var strStatusBfrAlloc;
	
	var blnIsRecord;
	blnIsRecord = bcAllocNum.FirstRecord();
	
	while(blnIsRecord){
		intNumId 			= bcAllocNum.GetFieldValue(""Id"");
		intAssocStartId	  	= bcAllocNum.GetFieldValue(""Assoc Start Id"");
//below 1.1
		//strStatusBfrAlloc 	= bcAllocNum.GetFieldValue(""Status"");
		strStatusBfrAlloc 	= bcAllocNum.GetFieldValue(""Status Before Allocation""); 
//above 1.1
		
		UpdateDeallocateNumbers(bcNumberAlloc,bcAllocNum);
		
//----------------------------------------------------------------------------------------
//Calling the function which changes the status of number and update into reqd tables 	
//-----------------------------------------------------------------------------------------	 
					
		if(bcAllocNum.GetFieldValue(""Is Associated"") == ""Y""){				
//----------------------------------
// Updating the associated numbers.
//----------------------------------	
			UpdateAssoNumbers(intNumId,intAssocStartId,bcNumberAlloc);

//------------------------------------------------------------
// Updating the concatenated number record in CX_NUM_ASS_CNCT.
//------------------------------------------------------------	
			UpdateAssCnctNumbers(intAssocStartId,bcNumberAlloc,strStatusBfrAlloc);		
		}
        
        bcNumberAlloc.SetFieldValue(""End Num"",bcAllocNum.GetFieldValue(""Number""));
        bcNumberAlloc.SetFieldValue(""End Num String"",bcAllocNum.GetFieldValue(""Number String""));
		blnIsRecord = bcAllocNum.NextRecord();
	}
	
	strErrVal = ""RMSALC007"";
	return(strErrVal);	

}
"/**************************************************************************************
* Name          : RMS NM Number Allocation PopulateEndNum Function	    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Populates the end number if quantity specified is available.	      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      11/12/2003       *
**************************************************************************************/

function PopulateEndNum(intNumId,strSearchExpr,blnIsSequence,intStartNum,intEndNum,intQuantity,Outputs){

	var boNumberAlloc;
	var bcNumMstr;
	
	var blnIsRecord;
	
	var strErrVal = """";
	var strEndNum = """";

	var intCount = 0;
	var intVerifier	= 0;

	boNumberAlloc 	= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNumMstr    	= boNumberAlloc.GetBusComp(""RMS NM Number Enquiry For Update"");	
	
	with(bcNumMstr){
		ActivateField(""Number String"");
		ActivateField(""Number"");
		ActivateField(""Scheme Id"");
		ActivateField(""Block Id"");
		ActivateField(""Allocated To"");
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ClearToQuery();
		SetSearchExpr(strSearchExpr);
		ExecuteQuery(ForwardOnly);
		blnIsRecord = FirstRecord();
	}

//-------------------------------------------------------------------
// Display an error if start number is not available for allocation.
//-------------------------------------------------------------------
	if(!blnIsRecord)
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC008"");
	else if(intNumId != bcNumMstr.GetFieldValue(""Id""))
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC008"");
	else{
		while(blnIsRecord){
			if(blnIsSequence == ""Y""){
				intVerifier = ToNumber(intStartNum);
				intVerifier += intCount;
				if(bcNumMstr.GetFieldValue(""Number"") != (intVerifier)){
//------------------------------------------------------------------------
// Display an error if numbers arn't available for allocation in sequence.
//------------------------------------------------------------------------				
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC001"",intCount);
					break;
				}	
			}
			strEndNum 	= ToString(bcNumMstr.GetFieldValue(""Number String""));	
			intEndNum 	= ToNumber(bcNumMstr.GetFieldValue(""Number""));
			intCount 	= intCount + 1;
			
			if(intQuantity == intCount)	
				break;	
				
			blnIsRecord = bcNumMstr.NextRecord();	
			
	 	}
	 	Outputs.SetProperty(""intQuantity"",intQuantity);
	 	Outputs.SetProperty(""strEndNum"", strEndNum);
	 	Outputs.SetProperty(""intEndNum"",intEndNum);

		if((strErrVal == """") && (intQuantity != intCount))
//------------------------------------------------------------------------------------
// Display an error if requested quantity of numbers arn't available for allocation.
//------------------------------------------------------------------------------------		
	 		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC002"",intCount);
	 }
	 	
	 
	 bcNumMstr = null;
	 boNumberAlloc = null;
	 
	 return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation RefreshRecord Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Allocation Code File					              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 03/12/2003 	1.0   		MBT						   	Created      13/12/2003       *
**************************************************************************************/

function RefreshRecord(){

	var psInputs;
	var psOutputs;
	var bsSIMNMRef;
	
	psInputs	= TheApplication().NewPropertySet();
	psOutputs	= TheApplication().NewPropertySet();
	
	bsSIMNMRef 	= TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
										
	psInputs.SetProperty(""Business Component Name"",""RMS NM Number Allocation"");
	psInputs.SetProperty(""Business Object Name"",""RMS NM Number Allocation"");
					
	bsSIMNMRef.InvokeMethod(""Refresh Business Component"",psInputs,psOutputs);

	psInputs	= null;
	psOutputs	= null;
	bsSIMNMRef	= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation Service_PreInvoke Method    		 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Allocation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      10/12/2003       *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs){

	var intObjectId;
	var intReturn = ContinueOperation;
	Outputs.SetProperty(""Error Code"",""00000"");
	//ms var intEndNum;
	//ms var intQuantity;
	
	//ms var strEndNum;
	var strErrVal = """";
	strByPassStatus = Inputs.GetProperty(""ByPassStatus"");
	if(TheApplication().GetSharedGlobal(""ByPassStatus"") != """") 
		strByPassStatus = TheApplication().GetSharedGlobal(""ByPassStatus"");
	intObjectId = Inputs.GetProperty(""Object Id"");
//	var test = TheApplication().GetProfileAttr(""STC GroupCode"");
//	var test2 = TheApplication().GetProfileAttr(""STC PartnerCode"");
//	var test3 = ""hello"";
	
	try{ 
		switch (MethodName){
			case ""Allocate"":
			case ""Deallocate"":
				strErrVal = AllocDealloc(intObjectId);
				RefreshRecord();
			  	intReturn = CancelOperation;
			  	
			  	var isAllocFromGen = TheApplication().GetProfileAttr(""AllocFromGen""); 
			  	
			  	if(strErrVal != """" && isAllocFromGen != ""Y"")
			  	{
					//-------------	GB 15-Dec-06-----------------------------			  	
						  	Outputs.SetProperty(""Error Code"",strErrVal);
						  	
		                	if(strErrVal == ""RMSALC006"")
		                		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC006"");
		                	if (strErrVal == ""RMSALC007"")
		                		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC007"");	
		                		                	
							
							Outputs.SetProperty(""Error Message"",strErrVal);
							
			  		//		TheApplication().RaiseErrorText(strErrVal);
					//-------------	GB -----------------------------
			  	}
			  	break;
		    		    	
		    case ""Validate"":
		    //ms:09/04/2006. changed input arguments as 782 STScript doesnt allow reference for primitive types
		    //variables will be embedded in Outputs propertyset
		    	//old/ strErrVal = Validation(Inputs,intEndNum,strEndNum,intQuantity);
		    	strErrVal = Validation(Inputs,Outputs);
		       	intReturn = CancelOperation;
//---------------------------------------------------------------
// Setting the end number if the required quantity is available.
//---------------------------------------------------------------	   		
				if(strErrVal == """"){
					Outputs.SetProperty(""End Num"",ToNumber(Outputs.GetProperty(""intEndNum"")));
					Outputs.SetProperty(""End Num String"",Outputs.GetProperty(""strEndNum""));
					Outputs.SetProperty(""Quantity"",ToNumber(Outputs.GetProperty(""intQuantity"")));
				}
				else
				{
					 //-------------	GB 15-Dec-06-----------------------------
					 			  
				  	Outputs.SetProperty(""Error Code"",strErrVal);
					Outputs.SetProperty(""Error Message"",strErrVal);				  	
			  		//TheApplication().RaiseErrorText(strErrVal);
			  		
					//-------------	GB -----------------------------
				}
		    	break;	
		    
		    default:
		    	break;
	    }
	}catch(e){
		throw e;
	}	    
   	return(intReturn);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateNumbers Function    		 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update the allocated number	    		                          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 19/04/2005   | 2.0  |	Kadali Srinivas	|		   	Created      xx/xx/2005           *
* 21/04/2006   | 1.1  | Ramakrishna     | Changed code Populate Status Before Allocation  *
**************************************************************************************/

function UpdateAllocateNumbers(bcNumberAlloc,bcAllocNum){
			
	var psBlkInputs;
	var psBlkOutputs;
	
//	var bsRMSBlk;
//	var blnIsRecord;			
	var strStatusAlloc = """";
	var strToStatus = """";
	var strFromStatus = """";
	var	dCurrentDate = """";		
	var intNumId;
//	var strQueryExpr;
	
//	var intCount = 0;
		
	psBlkInputs			= TheApplication().NewPropertySet();
	psBlkOutputs		= TheApplication().NewPropertySet();
	
	/******* MS/09/04/2006  commented as this functionality is not required for STC ***********
	var boChannelPartner:BusObject;	
	var bcDistributorSIMCount:BusComp;
	var bcChannelPartner:BusComp;
	boChannelPartner 		= TheApplication().GetBusObject(""RMS Channel Partner"");
	bcDistributorSIMCount	= boChannelPartner.GetBusComp(""RMS Distributor SIM Count"");
	bcChannelPartner		= boChannelPartner.GetBusComp(""RMS Channel Partner"");
	*******************  MS/09/04/2006 ********************************************************/
	
	intNumId 			= bcAllocNum.GetFieldValue(""Id"");
	strFromStatus 		= bcAllocNum.GetFieldValue(""Status"");
	dCurrentDate		= bcAllocNum.GetFieldValue(""Current Date"");
//---------------------------------------------------------------------------
// If not alllocated to internal division then change status to ""Allocated"".
//---------------------------------------------------------------------------			
	if(ToInteger(bcNumberAlloc.GetFieldValue(""Is Internal""))!= 1){	
		strToStatus =TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"");
        if(strFromStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE"")) {
			bcAllocNum.SetFieldValue(""Status"",strToStatus);
	//below 1.1
			bcAllocNum.SetFieldValue(""Status Before Allocation"",strFromStatus);	
	//above 1.1
			bcAllocNum.SetFieldValue(""Status Date"",dCurrentDate);
        } else {
                                   
	//below 1.1
			bcAllocNum.SetFieldValue(""Status Before Allocation"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));	
	//above 1.1
		
       }
	}
	
	bcAllocNum.SetFieldValue(""Allocation Id"",bcNumberAlloc.GetFieldValue(""Id""));
	//bcAllocNum.SetFieldValue(""Allocated To"",bcNumberAlloc.GetFieldValue(""Alloc To Id""));	
               bcAllocNum.SetFieldValue(""Dlr Allocated To"",bcNumberAlloc.GetFieldValue(""Alloc To Id""));	
	bcAllocNum.SetFieldValue(""Sales Code"",bcNumberAlloc.GetFieldValue(""Alloc To Id""));
 	bcAllocNum.WriteRecord();	
  	
//-------------------------------------------------------------------------------------------------
// This Code is added to Query Partner Management System and get all sub-distributors for the
// specified Partner, and to populate the No. of Allocated SIM Count. (Kadali Srinivas - 29/04/05)
//-------------------------------------------------------------------------------------------------
/* MS/09/04/2006 following script is commented as this functionality is not applicable for STC

	var strPartnerLevel		= bcNumberAlloc.GetFieldValue(""Partner Level"");
	var strTypeIdentfier 	= bcAllocNum.GetFieldValue(""Type Identifier"");
	
	if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")	){
		bcAllocNum.SetFieldValue(""Distributor Id"", bcAllocNum.GetFieldValue(""Allocated To""));		
	}
if(strTypeIdentfier == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"",""SIM"")){
	if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
		strQueryExpr = """";
		strQueryExpr = 	""[Dist Id] = '"" + bcAllocNum.GetFieldValue(""Allocated To"") +  
						""' AND [SIM Card Id] = '"" + bcAllocNum.GetFieldValue(""SIM Card Id"") + ""'"";
	}	

	if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
		strQueryExpr = """";
		strQueryExpr = 	""[Dist Id] = '"" + bcAllocNum.GetFieldValue(""Parent Division Id"") +  
						""' AND [SIM Card Id] = '"" + bcAllocNum.GetFieldValue(""SIM Card Id"") + ""'"";
	}	

	with(bcDistributorSIMCount){
			ClearToQuery();
			ActivateField(""Dist Id"");
			ActivateField(""SIM Card Id"");
			ActivateField(""No. of Alloc Dist Cnt"");
			ActivateField(""No. of Alloc Sub Dist Cnt"");
			SetSearchExpr(strQueryExpr);
			ExecuteQuery();
			blnIsRecord = FirstRecord();

			if(blnIsRecord){
				if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
					intCount = ToInteger(GetFieldValue(""No. of Alloc Dist Cnt"")) + 1;
			  		SetFieldValue(""No. of Alloc Dist Cnt"", intCount);
				  	WriteRecord();
				}
				if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
					intCount = ToInteger(GetFieldValue(""No. of Alloc Sub Dist Cnt"")) + 1;
			  		SetFieldValue(""No. of Alloc Sub Dist Cnt"", intCount);
				  	WriteRecord();
				}	
		 	}
			else{
				var strAllocatedTo = bcAllocNum.GetFieldValue(""Allocated To"");
				with(bcChannelPartner){
					ClearToQuery();
					ActivateField(""Parent Division Id"");
					SetSearchSpec(""Id"",bcAllocNum.GetFieldValue(""Allocated To""));
					ExecuteQuery();
					var blnIsParRec = FirstRecord();
				}
				if(blnIsParRec) {
					NewRecord(1);
					
					SetFieldValue(""Dist Id"", bcAllocNum.GetFieldValue(""Allocated To""));
					SetFieldValue(""SIM Card Id"", bcAllocNum.GetFieldValue(""SIM Card Id""));
					if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
							intCount = ToInteger(GetFieldValue(""No. of Alloc Dist Cnt"")) + 1;
					  		SetFieldValue(""No. of Alloc Dist Cnt"", intCount);
						  	WriteRecord();
					}
					if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
						intCount = ToInteger(GetFieldValue(""No. of Alloc Sub Dist Cnt"")) + 1;
				  		SetFieldValue(""No. of Alloc Sub Dist Cnt"", intCount);
					  	WriteRecord();
					}	
				}
		 }
	}
	
	
}	
MS/09/04/2006                           */
						
	if(bcNumberAlloc.GetFieldValue(""Alloc From"") == """")
		strStatusAlloc = strFromStatus;
	else
		strStatusAlloc = bcAllocNum.GetFieldValue(""Status Before Allocation"");
		
	UpdateMasterAlloc(intNumId,bcNumberAlloc.GetFieldValue(""Id""),strStatusAlloc,bcNumberAlloc.GetFieldValue(""Operation""));
	bcAllocNum.WriteRecord();
	

	psBlkInputs		= null;
	psBlkOutputs	= null;
	//bsRMSBlk		= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateAssCnctNumbers Function 		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update the associated cnct record.  	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function UpdateAssCnctNumbers(intAssocStartId,bcNumberAlloc,strStatusBfrAlloc){
		
	var boNumberMasterConcatNumber;
	var bcNumberMasterAssociationConcat;
	var blnIsRecord;
		
	boNumberMasterConcatNumber = TheApplication().GetBusObject(""RMS NM Number Association"");
	bcNumberMasterAssociationConcat = boNumberMasterConcatNumber.GetBusComp(""RMS NM Association Number Type Display"");
		
	with(bcNumberMasterAssociationConcat){
		ActivateField(""Status"");
		ActivateField(""Allocation Id"");
		SetSearchSpec(""Assoc Start Id"",intAssocStartId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}	
		
    while(blnIsRecord){
//----------------------------------------------------
// Set the status if allocated to an external dealer.
//----------------------------------------------------
		if(bcNumberAlloc.GetFieldValue(""Operation"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_ALLOCATION_OPERATION"", ""ALLOCATE"")){
			if((bcNumberAlloc.GetFieldValue(""Is Internal"") != 1) && (bcNumberMasterAssociationConcat.GetFieldValue(""Status"") ==TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE"")) )
				bcNumberMasterAssociationConcat.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED""));
			bcNumberMasterAssociationConcat.SetFieldValue(""Allocation Id"",bcNumberAlloc.GetFieldValue(""Id""));
		}
		else{
			
			bcNumberMasterAssociationConcat.SetFieldValue(""Allocation Id"","""");
			bcNumberMasterAssociationConcat.SetFieldValue(""Status"",strStatusBfrAlloc);
		}	
		blnIsRecord = bcNumberMasterAssociationConcat.NextRecord();		
	}
	
	bcNumberMasterAssociationConcat	= null;
	boNumberMasterConcatNumber		= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateAssoNumbers Function   		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update the associated numbers.	        		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function UpdateAssoNumbers(intNumId,intAssocStartId,bcNumberAlloc){

	var boNumberMaster; 
	var bcNumberMaster;
	
	var blnIsRecord;
	
	boNumberMaster 		= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNumberMaster		= boNumberMaster.GetBusComp(""RMS NM Number Enquiry For Update"");

//---------------------------------------------------------
//Retriveing the associated numbers from CX_NUM_MSTR
//---------------------------------------------------------
	with(bcNumberMaster){
		ActivateField(""Assoc Start Id"");
		ActivateField(""Id"");
		ActivateField(""Allocation Id"");
		ActivateField(""Allocated To"");
		ActivateField(""Status Before Allocation"");
		ActivateField(""Block Id"");
		ActivateField(""Sales Code"");
		ActivateField(""SIM Card Id"");
		ActivateField(""Distributor Id"");
                                ActivateField(""Dlr Allocated To"");
		//ActivateField(""Parent Division Id"");
		ClearToQuery();		
		SetSearchSpec(""Assoc Start Id"",intAssocStartId);
		SetSearchSpec(""Id"",""<>'""+intNumId+""'"");
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}
	
	while(blnIsRecord){
//-----------------------------------------------------------------------------------------
//Calling the function which changes the status of number and update into reqd tables 	
//-----------------------------------------------------------------------------------------	 
		if(bcNumberAlloc.GetFieldValue(""Operation"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_ALLOCATION_OPERATION"", ""ALLOCATE""))
			UpdateAllocateNumbers(bcNumberAlloc,bcNumberMaster);
		else
			UpdateDeallocateNumbers(bcNumberAlloc,bcNumberMaster);
				
		blnIsRecord = bcNumberMaster.NextRecord();	
	}
	
	
	bcNumberMaster = null;		
	boNumberMaster = null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateDeallocateNumbers Function    	  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Deallocate the number									              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 04/05/2005 	 1.0   	MBT      Created      14/12/2003       *
20060706       | 1.1  | Prasad      | Siebel ES SCR1, Objects Destroyed
20060721       | 1.2  | Ramakrishna | Changed code Populate Status Before Allocation
**************************************************************************************/
function UpdateDeallocateNumbers(bcNumberAlloc,bcAllocNum)
{
//	var boChannelPartner;
//	var bcDistributorSIMCount;
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
	
	var strStatBfrAlloc;
	var strFromStatus;
//	var strPartnerLevel;
	var strTypeIdentfier;
//	var strQueryExpr="""";
//	var blnIsRecord;
//	var intCount;
	var blnBlockUpd	= false;
	
	var psBlkInputs;
	var psBlkOutputs;
	var bsRMSBlk;
	
	with(bcSysPref) {
		ActivateField(""Value"");
		SetSearchSpec(""Name"", ""RMS_BLOCK_UPDATION"");
		SetSearchSpec(""Value"",""Y"");
		ClearToQuery();
		if(FirstRecord())
			blnBlockUpd = true;
	}
	
	/****************************** FUTURE USE MS 22-04-2006***********************************************
	boChannelPartner 		= TheApplication().GetBusObject(""RMS Channel Partner"");
	bcDistributorSIMCount	= boChannelPartner.GetBusComp(""RMS Distributor SIM Count"");
	
	psBlkInputs 	 = TheApplication().NewPropertySet();
	psBlkOutputs 	 = TheApplication().NewPropertySet();
	strStatBfrAlloc  = bcAllocNum.GetFieldValue(""Status Before Allocation"");
	strFromStatus	 = bcAllocNum.GetFieldValue(""Status"");
	strPartnerLevel	 = bcNumberAlloc.GetFieldValue(""Partner Level"");
	strTypeIdentfier = bcAllocNum.GetFieldValue(""Type Identifier"");
	
	if(strTypeIdentfier == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"",""SIM"")){
		if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
			strQueryExpr = """";
			strQueryExpr = 	""[Dist Id] ='"" + bcAllocNum.GetFieldValue(""Allocated To"") +  
					""' AND [SIM Card Id] = '"" + bcAllocNum.GetFieldValue(""SIM Card Id"") + ""'"";
		}
			
		if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
			strQueryExpr = """";
			strQueryExpr = 	""[Dist Id] = '"" + bcAllocNum.GetFieldValue(""Parent Division Id"") +  
					""' AND [SIM Card Id] = '"" + bcAllocNum.GetFieldValue(""SIM Card Id"") + ""'"";
		}	
		if(strQueryExpr != """") {
			with(bcDistributorSIMCount){
				ClearToQuery();
				ActivateField(""Dist Id"");
				ActivateField(""SIM Card Id"");
				ActivateField(""No. of Alloc Dist Cnt"");
				ActivateField(""No. of Alloc Sub Dist Cnt"");
				SetSearchExpr(strQueryExpr);
				ExecuteQuery();
				blnIsRecord = FirstRecord();
				if(blnIsRecord){
					if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
						intCount = ToInteger(GetFieldValue(""No. of Alloc Dist Cnt"")) - 1;
				  		SetFieldValue(""No. of Alloc Dist Cnt"", intCount);
					  	WriteRecord();
					}
					if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
						intCount = ToInteger(GetFieldValue(""No. of Alloc Sub Dist Cnt"")) - 1;
				  		SetFieldValue(""No. of Alloc Sub Dist Cnt"", intCount);
					  	WriteRecord();
					}	
			 	}
			} 
		}
	}
	
    ********************************************************************************************************/
	with(bcAllocNum){
		SetFieldValue(""Allocation Id"","""");
		//MS 22042006 if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")	){
			//SetFieldValue(""Allocated To"","""");	
                                                 SetFieldValue(""Dlr Allocated To"","""");
			SetFieldValue(""Sales Code"","""");
			
		//MS 22042006 }
		//MS 22042006 else{
		//	bcAllocNum.SetFieldValue(""Allocated To"", bcAllocNum.GetFieldValue(""Distributor Id""));
		//MS 22042006 }

		SetFieldValue(""To Dealer Name"","""");
		/*MS 22042006 if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor""))		
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));
		else if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor""))
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED""));
		*/
//below 1.2
		strStatBfrAlloc  = GetFieldValue(""Status Before Allocation"");
		//SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));
		SetFieldValue(""Status"",strStatBfrAlloc);
		SetFieldValue(""Status Before Allocation"","""");
//above 1.2
		SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
		WriteRecord();
	}
		
	UpdateMasterAlloc(bcAllocNum.GetFieldValue(""Id""),bcNumberAlloc.GetFieldValue(""Id""),strStatBfrAlloc,bcNumberAlloc.GetFieldValue(""Operation""));
	if (blnBlockUpd){
		with(psBlkInputs){
				SetProperty(""Object Id"",bcAllocNum.GetFieldValue(""Block Id""));
				SetProperty(""From Status"",strFromStatus);
				SetProperty(""To Status"",strStatBfrAlloc);
			}
			
		bsRMSBlk = TheApplication().GetService(""RMS RMS Block Calc"");
		bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
			
		psBlkInputs		= null;
		psBlkOutputs	= null;
		bsRMSBlk		= null;
	}
//1.1 below
	bcSysPref = null;
	boSysPref = null;
//1.1 above
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateMasterAlloc Function    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Create a new record in the MTM table (CX_MSTR_ALLOC)	    		  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function UpdateMasterAlloc(intNumId,intAllocId,strStatusAlloc,strOperation){

	var boNMAlloc;
	var bcNMMstrAlloc;
	
	boNMAlloc		= TheApplication().GetBusObject(""RMS NM Number Allocation"");
	bcNMMstrAlloc	= boNMAlloc.GetBusComp(""RMS NM Number Master Allocation"");

//------------------------------------------------------------------------------------------------
//Populating the new record in table CX_MSTR_ALLOC with corresponding Number Id and Allocation Id
//------------------------------------------------------------------------------------------------	

	with(bcNMMstrAlloc){
		ActivateField(""Num Id"");
		ActivateField(""Alloc Id"");
		ActivateField(""Status Before Allocation"");
		NewRecord(1);
		SetFieldValue(""Num Id"",intNumId);
		SetFieldValue(""Alloc Id"",intAllocId);
		if(strOperation == TheApplication().InvokeMethod(""LookupValue"", ""NM_ALLOCATION_OPERATION"", ""ALLOCATE""))
			SetFieldValue(""Status Before Allocation"",strStatusAlloc);
		else
			SetFieldValue(""Status Before Allocation"","""");	
			
		WriteRecord();
	}
	
	
	bcNMMstrAlloc 	= null;
	boNMAlloc 		= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation Validation Function						  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Validates if the specified quantity is available and depending on   *
*               : on that populates the end number.                                   *       
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      10/12/2003  
* 20060810      1.1         GARIMAB		Changed Search Spec as 	Special Category Tpye 
                                        is now normal filed  earlier it was joined field
* 08/04/2009	1.2			Ashu        Updated SearchSpec so that Blocked Numbers are
										not selected at time of De-Allocation of Numbers.
**************************************************************************************/

function Validation(Inputs,Outputs){
	    
    var intStartNum;
    var intEndNum;
    var intQuantity;
    var intNumId;
//    var boNMAlloc;
//    var bcNMAlloc;
    
    var strOperation;    
    var strSearchExpr;
    var strAssignedExpr;
//    var strStartNum;
    //var strEndNum;
    var strErrVal = """";
    var blnIsSequence;
    var strIsPaired = ""N"";
	var strSpCategory	= """";
	
    strOperation	= Inputs.GetProperty(""Operation"");      
	intStartNum     = Inputs.GetProperty(""Start Num"");
	intQuantity		= ToNumber(Inputs.GetProperty(""Quantity""));
	intNumId		= Inputs.GetProperty(""Number Id"");
	blnIsSequence	= Inputs.GetProperty(""Is Sequence"");
	strIsPaired		= Inputs.GetProperty(""Is Paired"");
	strSpCategory	= Inputs.GetProperty(""Special Category Name"");
	
	strAssignedExpr = ""' OR [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ASSIGNED"") + ""'"";
	strAssignedExpr += "" OR [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""TRASHED"") + ""')"";
	
	if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""ALLOCATE"")){
		strSearchExpr  =	""[Scheme Id] = '"" + Inputs.GetProperty(""Scheme Id"") +  
							""' AND [Block Id] = '"" + Inputs.GetProperty(""Block Id"") +
							""' AND ([Allocated To] = '""+ Inputs.GetProperty(""Alloc From"")+""')"" + 
							"" AND ([Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"");
		if((strByPassStatus == ""ERPASSIGNED_Y"") || (TheApplication().InvokeMethod(""LookupValue"",""RMS_ALLOC_ADMIN"",""ASSIGNED_Y"")== ""ASSIGNED_Y"")) 
			strSearchExpr+= strAssignedExpr;
		else
			strSearchExpr+= ""')"";
			
		strSearchExpr+= "" AND [Number] >= '"" + intStartNum + ""' AND [Is Associated] = '"" + strIsPaired + ""'"";
						
		//below 1.1
		//if(strSpCategory == """")
			//	strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
		if(strSpCategory == """")
				strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
		//above 1.1
		else
				strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
	}
	if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""DEALLOCATE"")){
		strSearchExpr  =	""[Scheme Id] = '"" + Inputs.GetProperty(""Scheme Id"") +  
							""' AND [Block Id] = '"" + Inputs.GetProperty(""Block Id"") +
							""' AND ([Allocated To] = '""+ Inputs.GetProperty(""Alloc From"")+""')"" + 
							"" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""'"" +
							"" AND [Number] >= '"" + intStartNum + ""' AND [Is Associated] = '"" + strIsPaired + ""'"" +
							"" AND [Record Blocked For] IS NULL"";	//this line 1.2
	//below 1.1
	//	if(strSpCategory == """")
	//			strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
		if(strSpCategory == """")
				strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
	//above 1.1

		else
				strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
	
	}
	
//-------------------------------------------------------------------
// If Is Sequence is selected then calculating end number so as to 
// retrieve only that set of numbers.
//-------------------------------------------------------------------
	if(blnIsSequence == ""Y""){
		intEndNum = ToNumber(intStartNum);
		intEndNum += (intQuantity - 1);
		strSearchExpr = strSearchExpr + "" AND [Number] <= '"" + intEndNum + ""'""; 
	}
	if(intQuantity == """")
		intQuantity = 1;
	
//--------------------------
// Populate the end number.
//--------------------------
	//ms:09/04/2006. changed input arguments as 782 STScript doesnt allow reference for primitive types
	//variables will be embedded in Outputs propertyset
	//Outputs -> strEndNum,intQuantity,intEndNum
	strErrVal = PopulateEndNum(intNumId,strSearchExpr,blnIsSequence,intStartNum,intEndNum,intQuantity,Outputs);

	return (strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation AllocDealloc Function					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : The main function for allocating and deallocating.			      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function AllocDealloc(intObjectId){
	
    var boNumberAlloc;
    var bcNumberAlloc;
   
    var strAllocStatus;
    var strErrVal = """";
    
    var blnIsRecord;
               
   	boNumberAlloc = TheApplication().GetBusObject(""RMS NM Number Allocation"");
	bcNumberAlloc = boNumberAlloc.GetBusComp(""RMS NM Number Allocation"");

	with(bcNumberAlloc){
		ActivateField(""Id"");
		ActivateField(""Status"");
		ActivateField(""Scheme Id"");
		ActivateField(""Block Id"");
		ActivateField(""Alloc To"");		
		ActivateField(""Alloc From"");
		ActivateField(""Start Num"");
		ActivateField(""End Num"");
		ActivateField(""End Num String"");
		ActivateField(""Quantity"");
		ActivateField(""Number Id"");
		ActivateField(""Is Sequence"");
		ActivateField(""Is Internal"");
		ActivateField(""Is Paired"");
		ActivateField(""Special Category Name"");

//-----------------------------------------------------------
// Code added for Phase 1A2 for displaying dealer name,
// dealer area code and dealer channel code.
//-----------------------------------------------------------
		ActivateField(""To Dealer Area Code"");
		ActivateField(""To Dealer Name"");
		ActivateField(""To Dealer Channel Code"");
		ActivateField(""From Dealer Area Code"");
		ActivateField(""From Dealer Name"");
		ActivateField(""From Dealer Channel Code"");
		ActivateField(""Alloc Date"");
		ActivateField(""Current Date"");
		ActivateField(""Partner Level"");
		ActivateField(""Processing Message"");
				
		ClearToQuery();
		SetSearchSpec(""Id"",intObjectId);
		ExecuteQuery();
	}

	blnIsRecord = bcNumberAlloc.FirstRecord();
	if(blnIsRecord){
		strAllocStatus	= bcNumberAlloc.GetFieldValue(""Status"");
			
//---------------------------------------------------------------------------------------
// Display an message to refresh the applet if another user is accessing the same record.
//---------------------------------------------------------------------------------------

		//Amit
		//if(strAllocStatus = TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""))
		if((strAllocStatus == TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"")) || (strAllocStatus == TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""COMPLETE"")) )
		//Amit End
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC003"");
	
		if(strErrVal == """"){
//-------------------------------------------------------------------------------------------------------
// Change status to processing so that another user cant access this record till processing is complete.
//-------------------------------------------------------------------------------------------------------
			
			bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
  			bcNumberAlloc.SetUserProperty(""blnFromAllocation"",""Y"")
			bcNumberAlloc.WriteRecord();
			 
			strErrVal = CheckQuantity(bcNumberAlloc);

//---------------------------------------------------------------------------------------------------
//Display the message as completed if successfully allocated (RMSALC006) or deallocated (RMSALC007).
//---------------------------------------------------------------------------------------------------
			if(strErrVal == ""RMSALC006"" || strErrVal == ""RMSALC007"")
			{
			bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""COMPLETE""));
			bcNumberAlloc.SetFieldValue(""Alloc Date"",bcNumberAlloc.GetFieldValue(""Current Date""));
			bcNumberAlloc.SetFieldValue(""Processing Message"",TheApplication().LookupMessage(""User Defined Errors"",strErrVal));
			//  Calling   WF   process   for  XML   generation   KT 22-05-06
	/*		var prsInputs   = TheApplication().NewPropertySet();
			var prsOutputs  = TheApplication().NewPropertySet();
			var bsNumberAlloc	= TheApplication().GetService(""Workflow Process Manager"");
			prsInputs.SetProperty(""RowId"",intObjectId);
			prsInputs.SetProperty(""ProcessName"",""RMS NM Number Allocation"");
			bsNumberAlloc.InvokeMethod(""RunProcess"",prsInputs,prsOutputs);
*/
/*-------------	GB 15-Dec-06-----------------------------
                	if(strErrVal == ""RMSALC006"")
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC006"");
				else
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC007"");	
					
-----------------------------------------------------------*/
				
			}
//--------------------------------------------------------
// If not successful then set the status back to Pending.
//--------------------------------------------------------			
			else
				{
					bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));		
					//AmitManoj bcNumberAlloc.SetFieldValue(""Processing Message"",TheApplication().LookupMessage(""User Defined Errors"",strErrVal));
					bcNumberAlloc.SetFieldValue(""Processing Message"",strErrVal);
				}

			bcNumberAlloc.SetUserProperty(""blnFromAllocation"",""Y"")				
			bcNumberAlloc.WriteRecord();
		}	
	}
	
	
	bcNumberAlloc = null;	
	boNumberAlloc = null;
	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation AllocateNumbers Function				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Allocate the numbers					                              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function AllocateNumbers(bcAllocNum,bcNumberAlloc){

	var intAssocStartId;
	var intNumId;
	var intQuantity = 1;
	
	var strErrVal = """";
	var strStatusBfrAlloc = """";
	
	var blnIsRecord;
	
	blnIsRecord 		= bcAllocNum.FirstRecord();
	
	while(blnIsRecord){
		intNumId 		= bcAllocNum.GetFieldValue(""Id"");
		intAssocStartId = bcAllocNum.GetFieldValue(""Assoc Start Id"");
			
//-----------------------------------
// Update the number for allocation.	
//-----------------------------------	 
		UpdateAllocateNumbers(bcNumberAlloc,bcAllocNum);
		if(bcAllocNum.GetFieldValue(""Is Associated"") == ""Y"") {				

//----------------------------------------------
// Update the associated numbers for allocation.
//----------------------------------------------	
			UpdateAssoNumbers(intNumId,intAssocStartId,bcNumberAlloc);

//------------------------------------------------------------
// Updating the concatenated number record in CX_NUM_ASS_CNCT.
//------------------------------------------------------------	
			UpdateAssCnctNumbers(intAssocStartId,bcNumberAlloc,strStatusBfrAlloc);		
		}
        
		bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));		
		bcNumberAlloc.SetFieldValue(""Quantity"",intQuantity);
		bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));		
        bcNumberAlloc.SetFieldValue(""End Num"",bcAllocNum.GetFieldValue(""Number""));
        bcNumberAlloc.SetFieldValue(""End Num String"",bcAllocNum.GetFieldValue(""Number String""));
		bcNumberAlloc.SetUserProperty(""blnFromAllocation"",""Y"")
		bcNumberAlloc.WriteRecord();
		
		intQuantity = ToInteger(intQuantity) + 1;
		blnIsRecord = bcAllocNum.NextRecord();
	}	
	
	strErrVal = ""RMSALC006"";	
	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation CheckQuantity Function					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Checks the overlapping of numbers as quantity specified.            *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	 1.0   	MBT	     Created      12/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
20060810       | 1.2  | GARIMA | Changed Search Spec as 	Special Category Tpye 
                                is now normal filed  earlier it was joined field
**************************************************************************************/

function CheckQuantity(bcNumberAlloc){

	var boNMAlloc;
	var boNMEnquiry;
	var bcNMAlloc;
	var bcAllocNum;
	
	var strSearchExpr = """";
	var strErrVal = """";
	var strSearchStatus;
	var strEndNum;
	var strOperation;
		
	var blnIsRecord;
	var blnIsSequence;
	
	var intStartNum = 0;
	var intEndNum = 0;
	var intQuantity;
	var intNumId;
	var strIsPaired = ""N"";
	var strSpCategory	= """";
	
	var psOutputs = TheApplication().NewPropertySet();
			
	boNMAlloc		= TheApplication().GetBusObject(""RMS NM Number Allocation"");
	boNMEnquiry		= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNMAlloc		= boNMAlloc.GetBusComp(""RMS NM Number Allocation"");	
	bcAllocNum		= boNMEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	
	intStartNum		= bcNumberAlloc.GetFieldValue(""Start Num"");
	intEndNum		= bcNumberAlloc.GetFieldValue(""End Num"");
	strEndNum		= bcNumberAlloc.GetFieldValue(""End Num String"");
	intQuantity		= bcNumberAlloc.GetFieldValue(""Quantity"");
	intNumId		= bcNumberAlloc.GetFieldValue(""Number Id"");
	blnIsSequence	= bcNumberAlloc.GetFieldValue(""Is Sequence"");
	strOperation 	= bcNumberAlloc.GetFieldValue(""Operation"");
	strIsPaired		= bcNumberAlloc.GetFieldValue(""Is Paired"");
	strSpCategory 	= bcNumberAlloc.GetFieldValue(""Special Category Name"");
	
	if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""ALLOCATE"")){	
		strSearchExpr  	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
							""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
							""' AND ([Allocated To] = '"" + bcNumberAlloc.GetFieldValue(""Alloc From Id"") + ""'"" + "" OR [Partner Type] = '"" + ""Common Pool')"" +
							"" AND ([Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"") +
							""' OR [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""')"" +
							"" AND [Number] >= '"" + intStartNum + ""' AND [Is Associated] = '"" + strIsPaired + ""'"";
		//below 1.2
		//if(strSpCategory == """")
		//		strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
		if(strSpCategory == """")
				strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
		//above 1.2
		else
				strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
	//ms changed			
	}
	if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""DEALLOCATE"")){
		strSearchExpr  	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
							""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
							""' AND ([Allocated To] = '"" + bcNumberAlloc.GetFieldValue(""Alloc From Id"") + ""'"" + "" OR [Partner Type] = '"" + ""Common Pool')"" +
							"" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""'"" +
							"" AND [Number] >= '"" + intStartNum + ""' AND [Is Associated] = '"" + strIsPaired + ""'"";
		//below 1.2
	//	if(strSpCategory == """")
	//			strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
		if(strSpCategory == """")
				strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
		//above 1.2
		else
				strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";

	}
	
				
//-------------------------------------------------------------------
// If Is Sequence is selected then calculating end number so as to 
// retrieve only that set of numbers.
//-------------------------------------------------------------------

	if(blnIsSequence == ""Y""){
		intEndNum = ToNumber(intStartNum);
		intEndNum += (intQuantity - 1);
		strSearchExpr = strSearchExpr + "" AND [Number] <= "" + intEndNum + """"; 
	}
	
//---------------------------
// Populate the end number.
//---------------------------
	
	strErrVal = PopulateEndNum(intNumId,strSearchExpr,blnIsSequence,intStartNum,intEndNum,intQuantity,psOutputs);

	intEndNum 	= ToNumber(psOutputs.GetProperty(""intEndNum""));
	strEndNum 	= psOutputs.GetProperty(""strEndNum"");
	intQuantity = ToNumber(psOutputs.GetProperty(""intQuantity""));
	
    if(strErrVal == """"){

		strSearchExpr = """";
		strSearchExpr	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
							""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
							""' AND ([Status] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING"") +
				 			""' OR [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"") +
				 			""' ) AND ([Id] <> '"" + bcNumberAlloc.GetFieldValue(""Id"") + 
				 			""' OR [Alloc From Id] <> '"" + bcNumberAlloc.GetFieldValue(""Id"") +
              				""' ) AND [Created] < '"" + bcNumberAlloc.GetFieldValue(""Created"") + ""'"";
						 	
//-------------------------------------------------------------------------------------------------------
//Checking for the concurrency of the start number and the end number selected for the given operation
//-------------------------------------------------------------------------------------------------------
		with(bcNMAlloc){
			ClearToQuery();
			ActivateField(""Scheme Id"");
			ActivateField(""Block Id"");
			ActivateField(""Status"");
			ActivateField(""SIM Artwork Id"");
			ActivateField(""Created"");
			ActivateField(""Start Num"");
			ActivateField(""End Num"");
			ActivateField(""Start Num String"");
			ActivateField(""End Num String"");
			SetSearchExpr(strSearchExpr);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}
		
		while(blnIsRecord){
//--------------------------------------------------
// Display an error if start number is overlapping.	
//--------------------------------------------------
			if((intStartNum >= ToNumber(bcNMAlloc.GetFieldValue(""Start Num""))) && (intStartNum <= ToNumber(bcNMAlloc.GetFieldValue(""End Num"")))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC004"",bcNMAlloc.GetFieldValue(""Start Num String""),bcNMAlloc.GetFieldValue(""End Num String""));	
				break;
			}	
//------------------------------------------------
// Display an error if end number is overlapping.
//------------------------------------------------				
			else if((intEndNum >= ToNumber(bcNMAlloc.GetFieldValue(""Start Num""))) && (intEndNum <= ToNumber(bcNMAlloc.GetFieldValue(""End Num"")))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC005"",bcNMAlloc.GetFieldValue(""Start Num String""),bcNMAlloc.GetFieldValue(""End Num String""));	
				break;
			}	
			
//----------------------------------------------------------------
// Display an error if both start and end number are overlapping.
//----------------------------------------------------------------				
			else if((intStartNum <= ToNumber(bcNMAlloc.GetFieldValue(""Start Num""))) && (intEndNum >= ToNumber(bcNMAlloc.GetFieldValue(""End Num"")))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC009"",bcNMAlloc.GetFieldValue(""Start Num String""),bcNMAlloc.GetFieldValue(""End Num String""));	
				break;
			}
				
			blnIsRecord = bcNMAlloc.NextRecord();	
		
		}

//-----------------------------------------------------------------
// Retrieving numbers as per the start number and end number and 
// allocating or deallocating them as per operation selected.
//-----------------------------------------------------------------	
		if(strErrVal == """"){

//========================================== Kadali Srinivas Ver 2.0 ============================================================
			if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""ALLOCATE"")){	
					strSearchExpr  	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
										""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
										""' AND [Allocated To] = '"" + bcNumberAlloc.GetFieldValue(""Alloc From Id"") + ""'"" +
										"" AND ([Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"") +
										""' OR [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""')"" +
										"" AND [Is Associated] = '"" + strIsPaired + ""'"" + 
										"" AND [Number] >= '"" + intStartNum +
										""' AND [Number] <= '"" + intEndNum + ""'"";
			//below 1.2
			//	if(strSpCategory == """")
			//				strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
				if(strSpCategory == """")
					strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
		//above 1.2
			
				else
					strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
			}
			if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""DEALLOCATE"")){
					strSearchExpr  	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
										""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
										""' AND ([Allocated To] = '"" + bcNumberAlloc.GetFieldValue(""Alloc From Id"") + ""'"" + "" OR [Partner Type] = '"" + ""Common Pool')"" +
										"" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""'"" +
										"" AND [Is Associated] = '"" + strIsPaired + ""'"" + 
										"" AND [Number] >= '"" + intStartNum +
										""' AND [Number] <= '"" + intEndNum + ""'"";
				//below 1.2
//				if(strSpCategory == """")
//					strSearchExpr+=	"" AND [Special Category Id] IS NULL"";

				if(strSpCategory == """")
					strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
				//above 1.2

				else
					strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
			}										
//======================================== Kadali Srinivas Ver 2.0 =============================================================		
			with(bcAllocNum){
					ActivateField(""Scheme Id"");
					ActivateField(""Block Id"");
					ActivateField(""Allocated To"");
					ActivateField(""Number"");
					ActivateField(""SIM Artwork Id"");					
					ActivateField(""Status"");
					ActivateField(""Status Date"");
					ActivateField(""Assoc Start Id"");
					ActivateField(""Is Associated"");
					ActivateField(""Status Before Allocation"");
					ActivateField(""Allocation Id"");
					ActivateField(""Allocated To"");
					ActivateField(""Distributor Id"");
					ActivateField(""Partner Type"");
					ActivateField(""Type Identifier"");
					ActivateField(""SIM Card Id"");
					ActivateField(""Parent Division Id"");
					ActivateField(""To Dealer Name"");
					ActivateField(""Sales Code"");
					ClearToQuery();
					SetSearchExpr(strSearchExpr);
					ExecuteQuery();
			}

			if(bcNumberAlloc.GetFieldValue(""Operation"")==TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""ALLOCATE""))			
					strErrVal = AllocateNumbers(bcAllocNum,bcNumberAlloc);
			else
					strErrVal = DeAllocateNumbers(bcAllocNum,bcNumberAlloc);
		}
	
	}
			
	
	bcNMAlloc = null;
	bcAllocNum = null;
	boNMAlloc = null;
	
//1.1 below
	psOutputs = null;
	boNMEnquiry = null;
//1.1 above
	return(strErrVal);

}
"/**************************************************************************************
* Name          : NM Number Allocation DeAllocateNumbers Function   			 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Deallocate the numbers.       					                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 04/12/2003 	 | 1.0  | 		MBT	  |					   	Created      13/12/2003   *
* 21/07/2006     | 1.1  | Ramakrishna | Changed code Populate Status Before Allocation*
**************************************************************************************/

function DeAllocateNumbers(bcAllocNum,bcNumberAlloc){

	var intAssocStartId;
	var intNumId;
	
	var strErrVal = """";
	var strStatusBfrAlloc;
	
	var blnIsRecord;
	blnIsRecord = bcAllocNum.FirstRecord();
	
	while(blnIsRecord){
		intNumId 			= bcAllocNum.GetFieldValue(""Id"");
		intAssocStartId	  	= bcAllocNum.GetFieldValue(""Assoc Start Id"");
//below 1.1
		//strStatusBfrAlloc 	= bcAllocNum.GetFieldValue(""Status"");
		strStatusBfrAlloc 	= bcAllocNum.GetFieldValue(""Status Before Allocation""); 
//above 1.1
		
		UpdateDeallocateNumbers(bcNumberAlloc,bcAllocNum);
		
//----------------------------------------------------------------------------------------
//Calling the function which changes the status of number and update into reqd tables 	
//-----------------------------------------------------------------------------------------	 
					
		if(bcAllocNum.GetFieldValue(""Is Associated"") == ""Y""){				
//----------------------------------
// Updating the associated numbers.
//----------------------------------	
			UpdateAssoNumbers(intNumId,intAssocStartId,bcNumberAlloc);

//------------------------------------------------------------
// Updating the concatenated number record in CX_NUM_ASS_CNCT.
//------------------------------------------------------------	
			UpdateAssCnctNumbers(intAssocStartId,bcNumberAlloc,strStatusBfrAlloc);		
		}
        
        bcNumberAlloc.SetFieldValue(""End Num"",bcAllocNum.GetFieldValue(""Number""));
        bcNumberAlloc.SetFieldValue(""End Num String"",bcAllocNum.GetFieldValue(""Number String""));
		blnIsRecord = bcAllocNum.NextRecord();
	}
	
	strErrVal = ""RMSALC007"";
	return(strErrVal);	

}
"/**************************************************************************************
* Name          : RMS NM Number Allocation PopulateEndNum Function	    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Populates the end number if quantity specified is available.	      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      11/12/2003       *
**************************************************************************************/

function PopulateEndNum(intNumId,strSearchExpr,blnIsSequence,intStartNum,intEndNum,intQuantity,Outputs){

	var boNumberAlloc;
	var bcNumMstr;
	
	var blnIsRecord;
	
	var strErrVal = """";
	var strEndNum = """";

	var intCount = 0;
	var intVerifier	= 0;

	boNumberAlloc 	= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNumMstr    	= boNumberAlloc.GetBusComp(""RMS NM Number Enquiry For Update"");	
	
	with(bcNumMstr){
		ActivateField(""Number String"");
		ActivateField(""Number"");
		ActivateField(""Scheme Id"");
		ActivateField(""Block Id"");
		ActivateField(""Allocated To"");
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ClearToQuery();
		SetSearchExpr(strSearchExpr);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}

//-------------------------------------------------------------------
// Display an error if start number is not available for allocation.
//-------------------------------------------------------------------
	if(!blnIsRecord)
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC008"");
	else if(intNumId != bcNumMstr.GetFieldValue(""Id""))
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC008"");
	else{
		while(blnIsRecord){
			if(blnIsSequence == ""Y""){
				intVerifier = ToNumber(intStartNum);
				intVerifier += intCount;
				if(bcNumMstr.GetFieldValue(""Number"") != (intVerifier)){
//------------------------------------------------------------------------
// Display an error if numbers arn't available for allocation in sequence.
//------------------------------------------------------------------------				
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC001"",intCount);
					break;
				}	
			}
			strEndNum 	= ToString(bcNumMstr.GetFieldValue(""Number String""));	
			intEndNum 	= ToNumber(bcNumMstr.GetFieldValue(""Number""));
			intCount 	= intCount + 1;
			
			if(intQuantity == intCount)	
				break;	
				
			blnIsRecord = bcNumMstr.NextRecord();	
			
	 	}
	 	Outputs.SetProperty(""intQuantity"",intQuantity);
	 	Outputs.SetProperty(""strEndNum"", strEndNum);
	 	Outputs.SetProperty(""intEndNum"",intEndNum);

		if((strErrVal == """") && (intQuantity != intCount))
//------------------------------------------------------------------------------------
// Display an error if requested quantity of numbers arn't available for allocation.
//------------------------------------------------------------------------------------		
	 		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC002"",intCount);
	 }
	 	
	 
	 bcNumMstr = null;
	 boNumberAlloc = null;
	 
	 return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation RefreshRecord Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Allocation Code File					              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 03/12/2003 	1.0   		MBT						   	Created      13/12/2003       *
**************************************************************************************/

function RefreshRecord(){

	var psInputs;
	var psOutputs;
	var bsSIMNMRef;
	
	psInputs	= TheApplication().NewPropertySet();
	psOutputs	= TheApplication().NewPropertySet();
	
	bsSIMNMRef 	= TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
										
	psInputs.SetProperty(""Business Component Name"",""RMS NM Number Allocation"");
	psInputs.SetProperty(""Business Object Name"",""RMS NM Number Allocation"");
					
	bsSIMNMRef.InvokeMethod(""Refresh Business Component"",psInputs,psOutputs);

	psInputs	= null;
	psOutputs	= null;
	bsSIMNMRef	= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation Service_PreInvoke Method    		 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Allocation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      10/12/2003       *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs){

	var intObjectId;
	var intReturn = ContinueOperation;
	Outputs.SetProperty(""Error Code"",""00000"");
	//ms var intEndNum;
	//ms var intQuantity;
	
	//ms var strEndNum;
	var strErrVal = """";
	
	intObjectId = Inputs.GetProperty(""Object Id"");
//	var test = TheApplication().GetProfileAttr(""HCPT GroupCode"");
//	var test2 = TheApplication().GetProfileAttr(""HCPT PartnerCode"");
//	var test3 = ""hello"";
	
	try{ 
		switch (MethodName){
			case ""Allocate"":
			case ""Deallocate"":
				strErrVal = AllocDealloc(intObjectId);
				RefreshRecord();
			  	intReturn = CancelOperation;
			  	
			  	var isAllocFromGen = TheApplication().GetProfileAttr(""AllocFromGen""); 
			  	
			  	if(strErrVal != """" && isAllocFromGen != ""Y"")
			  	{
					//-------------	GB 15-Dec-06-----------------------------			  	
						  	Outputs.SetProperty(""Error Code"",strErrVal);
						  	
		                	if(strErrVal == ""RMSALC006"")
		                		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC006"");
		                	if (strErrVal == ""RMSALC007"")
		                		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC007"");	
		                		                	
							
							Outputs.SetProperty(""Error Message"",strErrVal);
							
			  		//		TheApplication().RaiseErrorText(strErrVal);
					//-------------	GB -----------------------------
			  	}
			  	break;
		    		    	
		    case ""Validate"":
		    //ms:09/04/2006. changed input arguments as 782 STScript doesnt allow reference for primitive types
		    //variables will be embedded in Outputs propertyset
		    	//old/ strErrVal = Validation(Inputs,intEndNum,strEndNum,intQuantity);
		    	strErrVal = Validation(Inputs,Outputs);
		       	intReturn = CancelOperation;
//---------------------------------------------------------------
// Setting the end number if the required quantity is available.
//---------------------------------------------------------------	   		
				if(strErrVal == """"){
					Outputs.SetProperty(""End Num"",ToNumber(Outputs.GetProperty(""intEndNum"")));
					Outputs.SetProperty(""End Num String"",Outputs.GetProperty(""strEndNum""));
					Outputs.SetProperty(""Quantity"",ToNumber(Outputs.GetProperty(""intQuantity"")));
				}
				else
				{
					 //-------------	GB 15-Dec-06-----------------------------
					 			  
				  	Outputs.SetProperty(""Error Code"",strErrVal);
					Outputs.SetProperty(""Error Message"",strErrVal);				  	
			  		//TheApplication().RaiseErrorText(strErrVal);
			  		
					//-------------	GB -----------------------------
				}
		    	break;	
		    
		    default:
		    	break;
	    }
	}catch(e){
		throw e;
	}	    
   	return(intReturn);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateNumbers Function    		 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update the allocated number	    		                          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 19/04/2005   | 2.0  |	Kadali Srinivas	|		   	Created      xx/xx/2005           *
* 21/04/2006   | 1.1  | Ramakrishna     | Changed code Populate Status Before Allocation  *
**************************************************************************************/

function UpdateAllocateNumbers(bcNumberAlloc,bcAllocNum){
			
	var psBlkInputs;
	var psBlkOutputs;
	
//	var bsRMSBlk;
//	var blnIsRecord;			
	var strStatusAlloc = """";
	var strToStatus = """";
	var strFromStatus = """";
	var	dCurrentDate = """";		
	var intNumId;
//	var strQueryExpr;
	
//	var intCount = 0;
		
	psBlkInputs			= TheApplication().NewPropertySet();
	psBlkOutputs		= TheApplication().NewPropertySet();
	
	/******* MS/09/04/2006  commented as this functionality is not required for STC ***********
	var boChannelPartner:BusObject;	
	var bcDistributorSIMCount:BusComp;
	var bcChannelPartner:BusComp;
	boChannelPartner 		= TheApplication().GetBusObject(""RMS Channel Partner"");
	bcDistributorSIMCount	= boChannelPartner.GetBusComp(""RMS Distributor SIM Count"");
	bcChannelPartner		= boChannelPartner.GetBusComp(""RMS Channel Partner"");
	*******************  MS/09/04/2006 ********************************************************/
	
	intNumId 			= bcAllocNum.GetFieldValue(""Id"");
	strFromStatus 		= bcAllocNum.GetFieldValue(""Status"");
	dCurrentDate		= bcAllocNum.GetFieldValue(""Current Date"");
//---------------------------------------------------------------------------
// If not alllocated to internal division then change status to ""Allocated"".
//---------------------------------------------------------------------------			
	if(ToInteger(bcNumberAlloc.GetFieldValue(""Is Internal""))!= 1){	
		strToStatus =TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"");
		bcAllocNum.SetFieldValue(""Status"",strToStatus);
//below 1.1
		bcAllocNum.SetFieldValue(""Status Before Allocation"",strFromStatus);	
//above 1.1
		bcAllocNum.SetFieldValue(""Status Date"",dCurrentDate);
	}
	
	bcAllocNum.SetFieldValue(""Allocation Id"",bcNumberAlloc.GetFieldValue(""Id""));
	bcAllocNum.SetFieldValue(""Allocated To"",bcNumberAlloc.GetFieldValue(""Alloc To Id""));	
	bcAllocNum.SetFieldValue(""Sales Code"",bcNumberAlloc.GetFieldValue(""Alloc To Id""));
 	bcAllocNum.WriteRecord();	
  	
//-------------------------------------------------------------------------------------------------
// This Code is added to Query Partner Management System and get all sub-distributors for the
// specified Partner, and to populate the No. of Allocated SIM Count. (Kadali Srinivas - 29/04/05)
//-------------------------------------------------------------------------------------------------
/* MS/09/04/2006 following script is commented as this functionality is not applicable for STC

	var strPartnerLevel		= bcNumberAlloc.GetFieldValue(""Partner Level"");
	var strTypeIdentfier 	= bcAllocNum.GetFieldValue(""Type Identifier"");
	
	if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")	){
		bcAllocNum.SetFieldValue(""Distributor Id"", bcAllocNum.GetFieldValue(""Allocated To""));		
	}
if(strTypeIdentfier == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"",""SIM"")){
	if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
		strQueryExpr = """";
		strQueryExpr = 	""[Dist Id] = '"" + bcAllocNum.GetFieldValue(""Allocated To"") +  
						""' AND [SIM Card Id] = '"" + bcAllocNum.GetFieldValue(""SIM Card Id"") + ""'"";
	}	

	if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
		strQueryExpr = """";
		strQueryExpr = 	""[Dist Id] = '"" + bcAllocNum.GetFieldValue(""Parent Division Id"") +  
						""' AND [SIM Card Id] = '"" + bcAllocNum.GetFieldValue(""SIM Card Id"") + ""'"";
	}	

	with(bcDistributorSIMCount){
			ClearToQuery();
			ActivateField(""Dist Id"");
			ActivateField(""SIM Card Id"");
			ActivateField(""No. of Alloc Dist Cnt"");
			ActivateField(""No. of Alloc Sub Dist Cnt"");
			SetSearchExpr(strQueryExpr);
			ExecuteQuery();
			blnIsRecord = FirstRecord();

			if(blnIsRecord){
				if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
					intCount = ToInteger(GetFieldValue(""No. of Alloc Dist Cnt"")) + 1;
			  		SetFieldValue(""No. of Alloc Dist Cnt"", intCount);
				  	WriteRecord();
				}
				if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
					intCount = ToInteger(GetFieldValue(""No. of Alloc Sub Dist Cnt"")) + 1;
			  		SetFieldValue(""No. of Alloc Sub Dist Cnt"", intCount);
				  	WriteRecord();
				}	
		 	}
			else{
				var strAllocatedTo = bcAllocNum.GetFieldValue(""Allocated To"");
				with(bcChannelPartner){
					ClearToQuery();
					ActivateField(""Parent Division Id"");
					SetSearchSpec(""Id"",bcAllocNum.GetFieldValue(""Allocated To""));
					ExecuteQuery();
					var blnIsParRec = FirstRecord();
				}
				if(blnIsParRec) {
					NewRecord(1);
					
					SetFieldValue(""Dist Id"", bcAllocNum.GetFieldValue(""Allocated To""));
					SetFieldValue(""SIM Card Id"", bcAllocNum.GetFieldValue(""SIM Card Id""));
					if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
							intCount = ToInteger(GetFieldValue(""No. of Alloc Dist Cnt"")) + 1;
					  		SetFieldValue(""No. of Alloc Dist Cnt"", intCount);
						  	WriteRecord();
					}
					if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
						intCount = ToInteger(GetFieldValue(""No. of Alloc Sub Dist Cnt"")) + 1;
				  		SetFieldValue(""No. of Alloc Sub Dist Cnt"", intCount);
					  	WriteRecord();
					}	
				}
		 }
	}
	
	
}	
MS/09/04/2006                           */
						
	if(bcNumberAlloc.GetFieldValue(""Alloc From"") == """")
		strStatusAlloc = strFromStatus;
	else
		strStatusAlloc = bcAllocNum.GetFieldValue(""Status Before Allocation"");
		
	UpdateMasterAlloc(intNumId,bcNumberAlloc.GetFieldValue(""Id""),strStatusAlloc,bcNumberAlloc.GetFieldValue(""Operation""));
	bcAllocNum.WriteRecord();
	

	psBlkInputs		= null;
	psBlkOutputs	= null;
	//bsRMSBlk		= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateAssCnctNumbers Function 		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update the associated cnct record.  	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function UpdateAssCnctNumbers(intAssocStartId,bcNumberAlloc,strStatusBfrAlloc){
		
	var boNumberMasterConcatNumber;
	var bcNumberMasterAssociationConcat;
	var blnIsRecord;
		
	boNumberMasterConcatNumber = TheApplication().GetBusObject(""RMS NM Number Association"");
	bcNumberMasterAssociationConcat = boNumberMasterConcatNumber.GetBusComp(""RMS NM Association Number Type Display"");
		
	with(bcNumberMasterAssociationConcat){
		ActivateField(""Status"");
		ActivateField(""Allocation Id"");
		SetSearchSpec(""Assoc Start Id"",intAssocStartId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}	
		
    while(blnIsRecord){
//----------------------------------------------------
// Set the status if allocated to an external dealer.
//----------------------------------------------------
		if(bcNumberAlloc.GetFieldValue(""Operation"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_ALLOCATION_OPERATION"", ""ALLOCATE"")){
			if(bcNumberAlloc.GetFieldValue(""Is Internal"") != 1)
				bcNumberMasterAssociationConcat.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED""));
			bcNumberMasterAssociationConcat.SetFieldValue(""Allocation Id"",bcNumberAlloc.GetFieldValue(""Id""));
		}
		else{
			
			bcNumberMasterAssociationConcat.SetFieldValue(""Allocation Id"","""");
			bcNumberMasterAssociationConcat.SetFieldValue(""Status"",strStatusBfrAlloc);
		}	
		blnIsRecord = bcNumberMasterAssociationConcat.NextRecord();		
	}
	
	bcNumberMasterAssociationConcat	= null;
	boNumberMasterConcatNumber		= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateAssoNumbers Function   		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update the associated numbers.	        		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function UpdateAssoNumbers(intNumId,intAssocStartId,bcNumberAlloc){

	var boNumberMaster; 
	var bcNumberMaster;
	
	var blnIsRecord;
	
	boNumberMaster 		= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNumberMaster		= boNumberMaster.GetBusComp(""RMS NM Number Enquiry For Update"");

//---------------------------------------------------------
//Retriveing the associated numbers from CX_NUM_MSTR
//---------------------------------------------------------
	with(bcNumberMaster){
		ActivateField(""Assoc Start Id"");
		ActivateField(""Id"");
		ActivateField(""Allocation Id"");
		ActivateField(""Allocated To"");
		ActivateField(""Status Before Allocation"");
		ActivateField(""Block Id"");
		ActivateField(""Sales Code"");
		ActivateField(""SIM Card Id"");
		ActivateField(""Distributor Id"");
		ActivateField(""Parent Division Id"");
		ClearToQuery();		
		SetSearchSpec(""Assoc Start Id"",intAssocStartId);
		SetSearchSpec(""Id"",""<>'""+intNumId+""'"");
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}
	
	while(blnIsRecord){
//-----------------------------------------------------------------------------------------
//Calling the function which changes the status of number and update into reqd tables 	
//-----------------------------------------------------------------------------------------	 
		if(bcNumberAlloc.GetFieldValue(""Operation"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_ALLOCATION_OPERATION"", ""ALLOCATE""))
			UpdateAllocateNumbers(bcNumberAlloc,bcNumberMaster);
		else
			UpdateDeallocateNumbers(bcNumberAlloc,bcNumberMaster);
				
		blnIsRecord = bcNumberMaster.NextRecord();	
	}
	
	
	bcNumberMaster = null;		
	boNumberMaster = null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateDeallocateNumbers Function    	  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Deallocate the number									              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 04/05/2005 	 1.0   	MBT      Created      14/12/2003       *
20060706       | 1.1  | Prasad      | Siebel ES SCR1, Objects Destroyed
20060721       | 1.2  | Ramakrishna | Changed code Populate Status Before Allocation
**************************************************************************************/
function UpdateDeallocateNumbers(bcNumberAlloc,bcAllocNum)
{
//	var boChannelPartner;
//	var bcDistributorSIMCount;
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
	
	var strStatBfrAlloc;
	var strFromStatus;
//	var strPartnerLevel;
	var strTypeIdentfier;
//	var strQueryExpr="""";
//	var blnIsRecord;
//	var intCount;
	var blnBlockUpd	= false;
	
	var psBlkInputs;
	var psBlkOutputs;
	var bsRMSBlk;
	
	with(bcSysPref) {
		ActivateField(""Value"");
		SetSearchSpec(""Name"", ""RMS_BLOCK_UPDATION"");
		SetSearchSpec(""Value"",""Y"");
		ClearToQuery();
		if(FirstRecord())
			blnBlockUpd = true;
	}
	
	/****************************** FUTURE USE MS 22-04-2006***********************************************
	boChannelPartner 		= TheApplication().GetBusObject(""RMS Channel Partner"");
	bcDistributorSIMCount	= boChannelPartner.GetBusComp(""RMS Distributor SIM Count"");
	
	psBlkInputs 	 = TheApplication().NewPropertySet();
	psBlkOutputs 	 = TheApplication().NewPropertySet();
	strStatBfrAlloc  = bcAllocNum.GetFieldValue(""Status Before Allocation"");
	strFromStatus	 = bcAllocNum.GetFieldValue(""Status"");
	strPartnerLevel	 = bcNumberAlloc.GetFieldValue(""Partner Level"");
	strTypeIdentfier = bcAllocNum.GetFieldValue(""Type Identifier"");
	
	if(strTypeIdentfier == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"",""SIM"")){
		if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
			strQueryExpr = """";
			strQueryExpr = 	""[Dist Id] ='"" + bcAllocNum.GetFieldValue(""Allocated To"") +  
					""' AND [SIM Card Id] = '"" + bcAllocNum.GetFieldValue(""SIM Card Id"") + ""'"";
		}
			
		if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
			strQueryExpr = """";
			strQueryExpr = 	""[Dist Id] = '"" + bcAllocNum.GetFieldValue(""Parent Division Id"") +  
					""' AND [SIM Card Id] = '"" + bcAllocNum.GetFieldValue(""SIM Card Id"") + ""'"";
		}	
		if(strQueryExpr != """") {
			with(bcDistributorSIMCount){
				ClearToQuery();
				ActivateField(""Dist Id"");
				ActivateField(""SIM Card Id"");
				ActivateField(""No. of Alloc Dist Cnt"");
				ActivateField(""No. of Alloc Sub Dist Cnt"");
				SetSearchExpr(strQueryExpr);
				ExecuteQuery();
				blnIsRecord = FirstRecord();
				if(blnIsRecord){
					if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
						intCount = ToInteger(GetFieldValue(""No. of Alloc Dist Cnt"")) - 1;
				  		SetFieldValue(""No. of Alloc Dist Cnt"", intCount);
					  	WriteRecord();
					}
					if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
						intCount = ToInteger(GetFieldValue(""No. of Alloc Sub Dist Cnt"")) - 1;
				  		SetFieldValue(""No. of Alloc Sub Dist Cnt"", intCount);
					  	WriteRecord();
					}	
			 	}
			} 
		}
	}
	
    ********************************************************************************************************/
	with(bcAllocNum){
		SetFieldValue(""Allocation Id"","""");
		//MS 22042006 if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")	){
			SetFieldValue(""Allocated To"","""");	
			SetFieldValue(""Sales Code"","""");
			
		//MS 22042006 }
		//MS 22042006 else{
			bcAllocNum.SetFieldValue(""Allocated To"", bcAllocNum.GetFieldValue(""Distributor Id""));
		//MS 22042006 }

		SetFieldValue(""To Dealer Name"","""");
		/*MS 22042006 if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor""))		
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));
		else if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor""))
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED""));
		*/
//below 1.2
		strStatBfrAlloc  = GetFieldValue(""Status Before Allocation"");
		//SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));
		SetFieldValue(""Status"",strStatBfrAlloc);
		SetFieldValue(""Status Before Allocation"","""");
//above 1.2
		SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
		WriteRecord();
	}
		
	UpdateMasterAlloc(bcAllocNum.GetFieldValue(""Id""),bcNumberAlloc.GetFieldValue(""Id""),strStatBfrAlloc,bcNumberAlloc.GetFieldValue(""Operation""));
	if (blnBlockUpd){
		with(psBlkInputs){
				SetProperty(""Object Id"",bcAllocNum.GetFieldValue(""Block Id""));
				SetProperty(""From Status"",strFromStatus);
				SetProperty(""To Status"",strStatBfrAlloc);
			}
			
		bsRMSBlk = TheApplication().GetService(""RMS RMS Block Calc"");
		bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
			
		psBlkInputs		= null;
		psBlkOutputs	= null;
		bsRMSBlk		= null;
	}
//1.1 below
	bcSysPref = null;
	boSysPref = null;
//1.1 above
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateMasterAlloc Function    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Create a new record in the MTM table (CX_MSTR_ALLOC)	    		  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function UpdateMasterAlloc(intNumId,intAllocId,strStatusAlloc,strOperation){

	var boNMAlloc;
	var bcNMMstrAlloc;
	
	boNMAlloc		= TheApplication().GetBusObject(""RMS NM Number Allocation"");
	bcNMMstrAlloc	= boNMAlloc.GetBusComp(""RMS NM Number Master Allocation"");

//------------------------------------------------------------------------------------------------
//Populating the new record in table CX_MSTR_ALLOC with corresponding Number Id and Allocation Id
//------------------------------------------------------------------------------------------------	

	with(bcNMMstrAlloc){
		ActivateField(""Num Id"");
		ActivateField(""Alloc Id"");
		ActivateField(""Status Before Allocation"");
		NewRecord(1);
		SetFieldValue(""Num Id"",intNumId);
		SetFieldValue(""Alloc Id"",intAllocId);
		if(strOperation == TheApplication().InvokeMethod(""LookupValue"", ""NM_ALLOCATION_OPERATION"", ""ALLOCATE""))
			SetFieldValue(""Status Before Allocation"",strStatusAlloc);
		else
			SetFieldValue(""Status Before Allocation"","""");	
			
		WriteRecord();
	}
	
	
	bcNMMstrAlloc 	= null;
	boNMAlloc 		= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation Validation Function						  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Validates if the specified quantity is available and depending on   *
*               : on that populates the end number.                                   *       
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      10/12/2003  
* 20060810      1.1         GARIMAB		Changed Search Spec as 	Special Category Tpye 
                                        is now normal filed  earlier it was joined field
**************************************************************************************/

function Validation(Inputs,Outputs){
	    
    var intStartNum;
    var intEndNum;
    var intQuantity;
    var intNumId;
//    var boNMAlloc;
//    var bcNMAlloc;
    
    var strOperation;    
    var strSearchExpr;
//    var strStartNum;
    //var strEndNum;
    var strErrVal = """";
    var blnIsSequence;
    var strIsPaired = ""N"";
	var strSpCategory	= """";
	
    strOperation	= Inputs.GetProperty(""Operation"");      
	intStartNum     = Inputs.GetProperty(""Start Num"");
	intQuantity		= ToNumber(Inputs.GetProperty(""Quantity""));
	intNumId		= Inputs.GetProperty(""Number Id"");
	blnIsSequence	= Inputs.GetProperty(""Is Sequence"");
	strIsPaired		= Inputs.GetProperty(""Is Paired"");
	strSpCategory	= Inputs.GetProperty(""Special Category Name"");
	
	if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""ALLOCATE"")){
		strSearchExpr  =	""[Scheme Id] = '"" + Inputs.GetProperty(""Scheme Id"") +  
							""' AND [Block Id] = '"" + Inputs.GetProperty(""Block Id"") +
							""' AND ([Allocated To] = '""+ Inputs.GetProperty(""Alloc From"")+""'"" + "" OR [Partner Type] = '"" + ""Common Pool')"" +
							"" AND ([Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"") +
							""' OR [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""')"" +
							"" AND [Number] >= '"" + intStartNum + ""' AND [Is Associated] = '"" + strIsPaired + ""'"";
		//below 1.1
		//if(strSpCategory == """")
			//	strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
		if(strSpCategory == """")
				strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
		//above 1.1
		else
				strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
	}
	if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""DEALLOCATE"")){
		strSearchExpr  =	""[Scheme Id] = '"" + Inputs.GetProperty(""Scheme Id"") +  
							""' AND [Block Id] = '"" + Inputs.GetProperty(""Block Id"") +
							""' AND ([Allocated To] = '""+ Inputs.GetProperty(""Alloc From"")+""'"" + "" OR [Partner Type] = '"" + ""Common Pool')"" +
							"" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""'"" +
							"" AND [Number] >= '"" + intStartNum + ""' AND [Is Associated] = '"" + strIsPaired + ""'"";
	//below 1.1
	//	if(strSpCategory == """")
	//			strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
		if(strSpCategory == """")
				strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
	//above 1.1

		else
				strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
	
	}
