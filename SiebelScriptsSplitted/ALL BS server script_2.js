function CreateSimulateSAPOrder_SiebelToBAPI (inputMsg, outputMsg, InputIntObjName, OutputIntObjName)
{
   /*
    * Input Objects' Integration Components
    *   Order Object (Order - Create SAP Order (MO))
    *     Order (order)
    *       Order Line Item (item)
    *
    * Output Object's Integration Components:
    *   BAPI Import Object (Order - Create SAP Order (BAPI Import))
    *     Import Parameters
    *       ORDER_PARTNERS
    *       ORDER_ITEMS_IN
    */

   /*
    * Set up EAI Lookup maps
    */
   var orderTypeLM = EAIGetValueMap (""SAP Order Types"",     ""Siebel Outbound"");
   var incotermsLM = EAIGetValueMap (""SAP Incoterms"",       ""Siebel Outbound"");
   var payTermsLM  = EAIGetValueMap (""SAP Payment Terms"",   ""Siebel Outbound"");
   var uomLM       = EAIGetValueMap (""SAP Unit of Measure"", ""Siebel Outbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iOrderObj;  // Order object instance
   var iOrderComp; // Order
   var iItemComp;  // Order Line Item

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oCFDOrderObj;    // BAPI Order instance
   var oCFDImportComp;  // BAPI Import parameters
   var oCFDItemComp;    // BAPI Order Item
   var oCFDPartnerComp; // BAPI Order Partners

   /*
    * Find and create top-level integration object
    */
   iOrderObj = inputMsg.GetIntObj (InputIntObjName);
   oCFDOrderObj = outputMsg.CreateIntObj (OutputIntObjName);
   
   /*
    * Read int object instances from EAI message
    */
   while (iOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object in output message
       */
      oCFDOrderObj.NewInstance ();

      /*
       * Read ""Order"" component
       */
      iOrderComp = iOrderObj.GetPrimaryIntComp (""Order"");
      oCFDImportComp = oCFDOrderObj.CreatePrimaryIntComp (""Import Parameters"");
      if (iOrderComp.NextRecord ())
      {
         /*
          * Return an error if Integration Id is not null
          */
         if (iOrderComp.GetFieldValue (""Integration Id"") != """")
         {
            EAIRaiseError (""This order has already been submitted to the external system."");
         }

         /*
          * Write ""Import Parameters"" component
          */
         oCFDImportComp.NewRecord ();
         oCFDImportComp.SetCopySource  (iOrderComp);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DOC_NUMBER"", null);
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DOC_TYPE"", 
                                        orderTypeLM.Translate (iOrderComp.GetFieldValue (""Order Type"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-COLLECT_NO"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_ORG"",  ""SAP Sales Organization (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DISTR_CHAN"", ""SAP Distribution Channel (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DIVISION"",   ""SAP Division (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_GRP"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_OFF"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"", ""Requested Ship Date"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DATE_TYPE"",  ""1"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_NO"",   ""Order Number"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_DATE"", ""Order Date"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PO_METHOD"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PO_SUPPLEM"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REF_1"",      ""Account Order Number"");

         // Set NAME only if ""Contact Id"" is not null.
         if (iOrderComp.GetFieldValue (""Contact Id"") != null)
         {
            oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-NAME"",
                                          EAIFormatPersonName (iOrderComp.GetFieldValue (""Contact First Name""),
                                                               iOrderComp.GetFieldValue (""Contact Last Name"")));
         }

         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-TELEPHONE"",  ""Contact Work Phone #"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PRICE_GRP"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GROUP"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_DIST"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PRICE_LIST"", null);
         oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-INCOTERMS1"", 
                                       incotermsLM.Translate (iOrderComp.GetFieldValue (""Freight Terms"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-INCOTERMS2"", ""Freight Terms Info"");
         oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-PMNTTRMS"", 
                                       payTermsLM.Translate (iOrderComp.GetFieldValue (""Payment Term"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DLV_BLOCK"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-BILL_BLOCK"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-ORD_REASON"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PRICE_DATE"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-QT_VALID_F"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-QT_VALID_T"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CT_VALID_F"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CT_VALID_T"", null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP1"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP2"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP3"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP4"",  null);
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-CUST_GRP5"",  null);

         /*
          * Write ""ORDER_PARTNERS"" component (pivot from values in iOrderComp!)
          */
         /*
           NOTES:
           1. one row each Sold-to, Ship-to and Bill-to account,
              so we must pivot S_ORDER columns into rows using a UNION.
              SAP BAPI will return error if required ones are missing
           2. SO partner types are stored in TPAR.
           3. RE is for Bill-to, but we map RG (payer) to S_ORDER.BL_OU_ID
           4. P Lim. 5/19/99. We must always pass a row for 'AG' partner role because
              for some reason, SAP reuses the last function call's values.
         */
         oCFDPartnerComp = oCFDImportComp.CreateIntComp (""ORDER_PARTNERS"", oCFDImportComp);

         // Sold to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""AG"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Account Integration Id"");

         // Ship To partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""WE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Ship To Account Integration Id"");

         // Payer partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iOrderComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RG"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Bill To Account Integration Id"");

         /*
          * Read ""Order Line Item"" component
          */
         iItemComp = iOrderComp.GetIntComp (""Order Line Item"");
         oCFDItemComp = oCFDImportComp.CreateIntComp (""ORDER_ITEMS_IN"", oCFDImportComp);
         while (iItemComp.NextRecord ())
         {
            /*
             * Write ""ORDER_ITEMS_IN"" component
             */
            oCFDItemComp.NewRecord ();
            oCFDItemComp.SetCopySource  (iItemComp);
            oCFDItemComp.CopyFieldValue (""ITM_NUMBER"",     ""Line Number"");
            oCFDItemComp.CopyFieldValue (""HG_LV_ITEM"",     null);
            oCFDItemComp.CopyFieldValue (""PO_ITM_NO"",      ""Line Number"");
            oCFDItemComp.CopyFieldValue (""MATERIAL"",       ""Product Integration Id"");
            oCFDItemComp.CopyFieldValue (""CUST_MAT"",       null);
            oCFDItemComp.CopyFieldValue (""BATCH"",          null);
            oCFDItemComp.CopyFieldValue (""DLV_GROUP"",      null);
            oCFDItemComp.CopyFieldValue (""PART_DLV"",       null);
            oCFDItemComp.CopyFieldValue (""REASON_REJ"",     null);
            oCFDItemComp.CopyFieldValue (""BILL_BLOCK"",     null);
            oCFDItemComp.CopyFieldValue (""BILL_DATE"",      null);
            oCFDItemComp.CopyFieldValue (""PLANT"",          null);
            oCFDItemComp.CopyFieldValue (""STORE_LOC"",      null);
            oCFDItemComp.CopyFieldValue (""TARGET_QTY"",     null);
            oCFDItemComp.CopyFieldValue (""TARGET_QU"",      null);
            oCFDItemComp.CopyFieldValue (""REQ_QTY"",        ""Quantity Requested"");
            oCFDItemComp.SetFieldValue  (""SALES_UNIT"", 
                                         uomLM.Translate (iItemComp.GetFieldValue (""Product Unit of Measure"")));
            oCFDItemComp.CopyFieldValue (""ITEM_CATEG"",     null);
            oCFDItemComp.CopyFieldValue (""SHORT_TEXT"",     ""Description"");
            oCFDItemComp.CopyFieldValue (""REQ_DATE"",       ""Due Date"");
            oCFDItemComp.SetFieldValue  (""DATE_TYPE"",      ""1"");
            oCFDItemComp.CopyFieldValue (""REQ_TIME"",       null);
            oCFDItemComp.SetFieldValue  (""COND_TYPE"",      ""PB00"");
            // Item Price is price after discounts (i.e. net price)
            oCFDItemComp.CopyFieldValue (""COND_VALUE"",     ""Item Price"");
            oCFDItemComp.SetFieldValue  (""COND_P_UNT"",     ""1"");
            oCFDItemComp.SetFieldValue  (""COND_D_UNT"", 
                                         uomLM.Translate (iItemComp.GetFieldValue (""Product Unit of Measure"")));
            oCFDItemComp.CopyFieldValue (""PRC_GROUP1"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP2"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP3"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP4"",     null);
            oCFDItemComp.CopyFieldValue (""PRC_GROUP5"",     null);
            oCFDItemComp.CopyFieldValue (""PROD_HIERA"",     null);
            oCFDItemComp.CopyFieldValue (""MATL_GROUP"",     null);
         }
      }
   }
}
"
function GetSAPOrderStatus_BAPIToSiebel (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   BAPI Export (Order - Get SAP Order Status (BAPI Output))
    *     Export Parameters (output)
    *       Order Header (header)
    *         Order Item (item)
    *           Order Item Delivery Item (deliv)
    *
    * Output Object's Integration Components:
    *   Order Object (Order - Get SAP Order Status (Siebel))
    *     Order (oOrder)
    *       Get Status Output
    *       Get Status Header
    *         Get Status Item
    *           Get Status Item Delivery Item
    *       Order Line Item
    *         Order Line Item Action
    */

   /*
    * Set up EAI Lookup objects
    */
   var currencyLM = EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iGSOrderObj;   // BAPI Order instance
   var iGSExportComp; // BAPI Export Parameters
   var iGSHeaderComp; // BAPI Order Header
   var iGSItemComp;   // BAPI Order Item
   var iGSDelivComp;  // BAPI Order Item Delivery Item

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;     // Siebel Orderinstance
   var oOrderComp;    // Order
   var oItemComp;     // Order Line Item
   var oDelivComp;    // Order Line Item Action
   var oGSOutputComp; // Create Output
   var oGSHeaderComp; // Create Header
   var oGSItemComp;   // Create Item
   var oGSDelivComp;  // Create Item Delivery Item


   /*
    * Find and create top-level integration object
    */
   iGSOrderObj = inputMsg.GetIntObj(""Order - Get SAP Order Status (BAPI Output)"");
   oOrderObj = outputMsg.CreateIntObj (""Order - Get SAP Order Status (Siebel)"");

   /*
    * Read int object instances from EAI message
    */

   while (iGSOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object in output message
       */
      oOrderObj.NewInstance ();
      
      /*
       * Create ""Order"" component
       */
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order"");
      oOrderComp.NewRecord ();
      // Set ""Id"" so Siebel Adapter can synchronize
      oOrderComp.SetFieldValue (""Id"", inputId);
      
      /*
       * Read ""Export Parameters"" component
       */
      iGSExportComp = iGSOrderObj.GetPrimaryIntComp (""Export Parameters"");
      
      /*
       * Create the output component. Defer creation if the ""Export Parameters"" component
       * does not exist.
       *
       */
      oGSOutputComp = oOrderComp.CreateIntComp (""Get Status Output"", iGSExportComp.Exists());
      if (iGSExportComp.NextRecord())
      {
         /*
          * Write ""Create Output"" component
          */
         oGSOutputComp.NewRecord ();
         oGSOutputComp.SetCopySource  (iGSExportComp);
         oGSOutputComp.SetFieldValue  (""Input Id"",     inputId);
         oGSOutputComp.CopyFieldValue (""Return Code"",       ""RETURN-CODE"");
         oGSOutputComp.CopyFieldValue (""Return Log Msg No"", ""RETURN-LOG_MSG_NO"");
         oGSOutputComp.CopyFieldValue (""Return Log No"",     ""RETURN-LOG_NO"");
         oGSOutputComp.CopyFieldValue (""Return Message"",    ""RETURN-MESSAGE"");
         oGSOutputComp.CopyFieldValue (""Return Type"",       ""RETURN-TYPE"");
         
         /*
          * Read ""Order Header"" component
          */
         iGSHeaderComp = iGSExportComp.GetIntComp (""Order Header"");
         oGSHeaderComp = oOrderComp.CreateIntComp (""Get Status Header"", iGSHeaderComp.Exists());

         // Singleton entry in input - 'if' is symbolic of not looping
         if (iGSHeaderComp.NextRecord ())
         {
            /*
             * Write ""Get Status Header"" component
             */
            oGSHeaderComp.NewRecord ();
            oGSHeaderComp.SetCopySource  (iGSHeaderComp);
            oGSHeaderComp.SetFieldValue  (""Input Id"",    inputId);
            oGSHeaderComp.CopyFieldValue (""Currency"",        ""CURRENCY"");
            oGSHeaderComp.CopyFieldValue (""Delivery Block"",  ""DLV_BLOCK"");
            oGSHeaderComp.CopyFieldValue (""Delivery Status"", ""DLV_STAT_H"");
            oGSHeaderComp.CopyFieldValue (""Order Date"",      ""DOC_DATE"");
            oGSHeaderComp.CopyFieldValue (""Order Number"",    ""DOC_NUMBER"");
            oGSHeaderComp.CopyFieldValue (""Pricing Status"",  ""PRC_STAT_H"");
            oGSHeaderComp.CopyFieldValue (""Purchase Order"",  ""PURCH_NO"");
            oGSHeaderComp.CopyFieldValue (""Requested Date"",  ""REQ_DATE_H"");
            
            /*
             * Update ""Order"" component
             */
            oOrderComp.SetCopySource  (iGSHeaderComp);
            
            // EAI Lookup code ""SAP Currency""
            oOrderComp.SetFieldValue  (""Currency Code"", 
                                       currencyLM.Translate (iGSHeaderComp.GetFieldValue (""CURRENCY"")));
            
            oOrderComp.CopyFieldValue (""Requested Ship Date"",     ""REQ_DATE_H"");
            /* P Lim 6/9/99. 12-LGEKF. Removed mapping of SAP Purch_no to Siebel ORDER_NUM */
            // oOrderComp.SetFieldValue (""Order Number"",    ""PURCH_NO"");
            
            /*
             * Read ""Order Item"" component
             */
            iGSItemComp = iGSHeaderComp.GetIntComp (""Order Item"");
            
            oGSItemComp = oGSHeaderComp.CreateIntComp (""Get Status Item"", iGSItemComp.Exists());
            oItemComp   = oOrderComp.CreateIntComp (""Order Line Item"", iGSItemComp.Exists());
            while (iGSItemComp.NextRecord ())
            {
               /*
                * Write ""Get Status Item"" component
                */
               oGSItemComp.NewRecord ();
               oGSItemComp.SetCopySource  (iGSItemComp);
               oGSItemComp.SetFieldValue  (""Input Id"",                  inputId);
               oGSItemComp.CopyFieldValue (""Condition Pricing Unit"",        ""COND_P_UNT"");
               oGSItemComp.CopyFieldValue (""Condition Unit"",                ""COND_UNIT"");
               oGSItemComp.CopyFieldValue (""Cumulative Confirmed Quantity"", ""CUM_CF_QTY"");
               oGSItemComp.CopyFieldValue (""Delivery Status"",               ""DLV_STAT_I"");
               oGSItemComp.CopyFieldValue (""Item Number"",                   ""ITM_NUMBER"");
               oGSItemComp.CopyFieldValue (""Material Part #"",               ""MATERIAL"");
               oGSItemComp.CopyFieldValue (""Material Short Text"",           ""SHORT_TEXT"");
               oGSItemComp.CopyFieldValue (""Net Price"",                     ""NET_PRICE"");
               oGSItemComp.CopyFieldValue (""Net Value"",                     ""NET_VALUE"");
               oGSItemComp.CopyFieldValue (""Reference Quantity"",            ""REF_QTY"");
               oGSItemComp.CopyFieldValue (""Requested Quantity"",            ""REQ_QTY"");
               oGSItemComp.CopyFieldValue (""Requested Ship Date"",           ""REQ_DATE"");
               oGSItemComp.CopyFieldValue (""Sales Unit"",                    ""SALES_UNIT"");
               
               /*
                * Write ""Order Line Item"" component
                */
               /*
                 NOTES: 
                 1. REF_QTY stores QTY submitted to next document (in this case, the deliveries).
                 So, this is equivalent to sum(item.DLV_QTY)
                 2. P Lim 5/28/99. Force prices into SAP. Do not update S_ORDER_ITEM.UNI_PRI (discount price).
                 SAP Line Items view will show Siebel prices AND SAP prices on same list view.
                 item.NET_PRICE UNIT_PRI
                 3. SAP columns not mapped to S_ORDER_ITEM (and exposed in SAP Line Items applet):
                 CUM_CF_QTY    NUMBER(15)
                 COND_P_UNT    VARCHAR2(5)
                 COND_UNIT     VARCHAR2(3)
                 DLV_STAT_I    VARCHAR2(1)
               */
               //var itemMaterial = EAIGetProperty (item.source, ""MATERIAL"");
               var itemMaterial = iGSItemComp.GetFieldValue (""MATERIAL"");
               
               oItemComp.NewRecord ();
               oItemComp.SetCopySource  (iGSItemComp);
               oItemComp.SetFieldValue  (""Product Integration Id"", itemMaterial);
               oItemComp.CopyFieldValue (""Line Number"",            ""ITM_NUMBER"");
               oItemComp.CopyFieldValue (""Quantity Requested"",     ""REQ_QTY"");
               oItemComp.CopyFieldValue (""Quantity Shipped"",       ""REF_QTY"");
               oItemComp.CopyFieldValue (""Due Date"",               ""REQ_DATE"");
               oItemComp.CopyFieldValue (""Description"",            ""SHORT_TEXT"");
               // In 2K: Defaults from buscomp. In 99.5: {fn ifnull(S_ORDER_ITEM.STATUS_CD, 'Open')}
               // item.CopyFieldValue (""Status"",              Open);
               
               /*
                * Read ""Order Item Delivery Item"" component
                */
               iGSDelivComp = iGSItemComp.GetIntComp (""Order Item Delivery Item"");
               
               oGSDelivComp = oGSItemComp.CreateIntComp (""Get Status Item Delivery Item"", iGSDelivComp.Exists());
               oDelivComp   = oItemComp.CreateIntComp (""Order Line Item Action"", iGSDelivComp.Exists());
               
               while (iGSDelivComp.NextRecord ())
               {
                  /*
                   * Write ""Get Status Item Delivery Item"" component
                   */
                  oGSDelivComp.NewRecord ();
                  oGSDelivComp.SetCopySource  (iGSDelivComp);
                  oGSDelivComp.SetFieldValue  (""Input Id"",             inputId);
                  oGSDelivComp.CopyFieldValue (""Delivered Quantity"",   ""DLV_QTY"");
                  oGSDelivComp.CopyFieldValue (""Delivery Date"",        ""DELIV_DATE"");
                  oGSDelivComp.CopyFieldValue (""Delivery Item Number"", ""DELIV_ITEM"");
                  oGSDelivComp.CopyFieldValue (""Delivery Number"",      ""DELIV_NUMB"");
                  oGSDelivComp.CopyFieldValue (""Item Number"",          ""ITM_NUMBER"");
                  
                  /*
                   * Write ""Get Status Item Delivery Item"" component
                   */
                  oDelivComp.NewRecord ();
                  oDelivComp.SetCopySource  (iGSDelivComp);
                  
                  var delivNum  = iGSDelivComp.GetFieldValue (""DELIV_NUMB"");
                  var delivItem = iGSDelivComp.GetFieldValue (""DELIV_ITEM"");
                  if (delivNum == null || delivItem == null)
                  {
                     EAIRaiseError (""'DELIV_NUMB' and 'DELIV_ITEM' fields are not specified."");
                  }
                  var itemActionNum = delivNum + ""-"" + delivItem;
                  oDelivComp.SetFieldValue  (""Line Item Action Number"", itemActionNum);
                  oDelivComp.CopyFieldValue (""Quantity"",                ""DLV_QTY"");
                  oDelivComp.CopyFieldValue (""Actual Start Date"",       ""DELIV_DATE"");
                  oDelivComp.SetFieldValue  (""Product Integration Id"",  itemMaterial);

                  var shipValue = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_PART_MOVEMENT_TYPE"", ""Ship"");
                  // TheApplication().MsgBox ("foo is: "" + foo);
                  oDelivComp.SetFieldValue  (""Line Item Action Type"",   shipValue);
               }
            }
         }
      }
   }
}
"
function GetSAPOrderStatus_SiebelToBAPI (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   Order Object (Order - Get SAP Order nStatus (Siebel))
    *     Order
    *
    * Output Object's Integration Components:
    *   BAPI Import (Order - Get SAP Order Status (BAPI Input))
    *     Import Parameters
    */

   /*
    * Set up EAI Lookup objects
    */

   /*
    * Set up EAI Input Message objects
    */
   var iOrderObj;    // Siebel Order instance
   var iOrderComp;   // Order

   /*
    * Set up EAI Output Message objects
    */
   var oGSObj;         // BAPI instance
   var oGSImportComp;  // Import Parameters

   /*
    * Find and create top-level integration object
    */
   iOrderObj = inputMsg.GetIntObj (""Order - Get SAP Order Status (Siebel)"");
   oGSObj    = outputMsg.CreateIntObj (""Order - Get SAP Order Status (BAPI Input)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iOrderObj.NextInstance ())
   {
      /*
       * Create ""Get Status"" object
       */
      oGSObj.NewInstance ();

      /*
       * Read ""Order"" component
       */
      iOrderComp = iOrderObj.GetPrimaryIntComp (""Order"");
      oGSImportComp = oGSObj.CreatePrimaryIntComp (""Import Parameters"");
      if (iOrderComp.NextRecord ())
      {
         /*
          * Write ""Import Parameters"" component
          */
         oGSImportComp.NewRecord ();
         oGSImportComp.SetCopySource  (iOrderComp);
         oGSImportComp.CopyFieldValue (""SALESDOCUMENT"", ""Integration Id"");
      }
   }
}
"
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   var result = EAIExecuteMap (MethodName, Inputs, Outputs);

	return result;
}
"
function SimulateSAPOrder_BAPIToSiebel (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   BAPI Export (Order - Simulate SAP Order (BAPI Output))
    *     Export Parameters (output)
    *
    * Output Object's Integration Components:
    *   Order Object (Order - Simulate SAP Order (Siebel))
    *     Order (oOrder)
    *       Simulate Output
    *         Simulate Item
    */

   /*
    * Set up EAI Lookup objects
    */
   var currencyLM = EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iSimOrderObj;   // BAPI Order instance
   var iSimExportComp; // BAPI Export Parameters
   var iSimItemComp;   // BAPI Order Items

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;      // Siebel Order instance
   var oOrderComp;     // Order
   var oSimOutputComp; // Simulate Output
   var oSimItemComp;   // Simulate Item

   /*
    * Find and create top-level integration object
    */
   iSimOrderObj = inputMsg.GetIntObj (""Order - Simulate SAP Order (BAPI Output)"");
   oOrderObj = outputMsg.CreateIntObj (""Order - Simulate SAP Order (Siebel)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iSimOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object
       */
      oOrderObj.NewInstance ();

      /*
       * Create ""Order"" component in output message
       */
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order"");
      oOrderComp.NewRecord ();
      // Set ""Id"" so Siebel Adapter can synchronize
      oOrderComp.SetFieldValue (""Id"", inputId);

      /*
       * Read ""Export Parameters"" component
       */
      iSimExportComp = iSimOrderObj.GetPrimaryIntComp (""Export Parameters"");
      oSimOutputComp = oOrderComp.CreateIntComp (""Simulate Output"", oOrderComp);
      if (iSimExportComp.NextRecord ())
      {
         /*
          * Write ""Simulate Output"" component
          */
         oSimOutputComp.NewRecord ();
         oSimOutputComp.SetCopySource  (iSimExportComp);
         oSimOutputComp.SetFieldValue  (""Input Id"",          inputId);
         oSimOutputComp.CopyFieldValue (""Bill To Customer"",  ""BILLING_PARTY-PAYER"");
         oSimOutputComp.CopyFieldValue (""Bill To Name"",      ""BILLING_PARTY-NAME"");
         oSimOutputComp.CopyFieldValue (""Order Number"",      ""SALESDOCUMENT"");
         oSimOutputComp.CopyFieldValue (""Return Code"",       ""RETURN-CODE"");
         oSimOutputComp.CopyFieldValue (""Return Log Msg No"", ""RETURN-LOG_MSG_NO"");
         oSimOutputComp.CopyFieldValue (""Return Log No"",     ""RETURN-LOG_NO"");
         oSimOutputComp.CopyFieldValue (""Return Message"",    ""RETURN-MESSAGE"");
         oSimOutputComp.CopyFieldValue (""Return Type"",       ""RETURN-TYPE"");
         oSimOutputComp.CopyFieldValue (""Ship To Customer"",  ""SHIP_TO_PARTY-SHIP_TO"");
         oSimOutputComp.CopyFieldValue (""Ship To Name"",      ""SHIP_TO_PARTY-NAME"");
         oSimOutputComp.CopyFieldValue (""Sold To Customer"",  ""SOLD_TO_PARTY-SOLD_TO"");
         oSimOutputComp.CopyFieldValue (""Sold To Name"",      ""SOLD_TO_PARTY-NAME"");

         /*
          * Update ""Order"" component
          */
         oOrderComp.SetCopySource  (iSimExportComp);
         // P Lim. Do not set Order Integration Id: Simulate BAPI does not return an Order number
         // oOrderComp.CopyFieldValue (""Integration Id"",                 ""SALESDOCUMENT"");
         oOrderComp.CopyFieldValue (""Ship To Account Integration Id"", ""SHIP_TO_PARTY-SHIP_TO"");
         oOrderComp.CopyFieldValue (""Bill To Account Integration Id"", ""BILLING_PARTY-PAYER"");
         oOrderComp.SetFieldValue  (""Currency Code"",
                                    currencyLM.Translate (iSimExportComp.GetFieldValue (""SOLD_TO_PARTY-CURRENCY"")));

         /*
          * Read ""Simulate Item"" component
          */
         iSimItemComp = iSimExportComp.GetIntComp (""Simulate Item"");
         oSimItemComp = oOrderComp.CreateIntComp (""Simulate Item"", oOrderComp);
         while (iSimItemComp.NextRecord ())
         {
            oSimItemComp.NewRecord ();
            oSimItemComp.SetCopySource  (iSimItemComp);
            oSimItemComp.SetFieldValue  (""Input Id"",                   inputId);
            oSimItemComp.CopyFieldValue (""Currency Code"",              ""CURRENCY"");
            oSimItemComp.CopyFieldValue (""Delivery Date"",              ""DLV_DATE"");
            oSimItemComp.CopyFieldValue (""Item Number"",                ""ITM_NUMBER"");
            oSimItemComp.CopyFieldValue (""Material Entered"",           ""MAT_ENTRD"");
            oSimItemComp.CopyFieldValue (""Material Part #"",            ""MATERIAL"");
            oSimItemComp.CopyFieldValue (""Material Short Text"",        ""SHORT_TEXT"");
            oSimItemComp.CopyFieldValue (""Net Value"",                  ""NET_VALUE"");
            oSimItemComp.CopyFieldValue (""Purchase Order Item Number"", ""PO_ITM_NO"");
            oSimItemComp.CopyFieldValue (""Quantity Requested Date"",    ""QTY_REQ_DT"");
            oSimItemComp.CopyFieldValue (""Replenishment Time"",         ""REPL_TIME"");
            oSimItemComp.CopyFieldValue (""Unit"",                       ""SALES_UNIT"");
         }
      }
   }
}
"
function SimulateSAPOrder_SiebelToBAPI (inputMsg, outputMsg)
{
   /* Uses same map as CreateFromData() */
   CreateSimulateSAPOrder_SiebelToBAPI (inputMsg, outputMsg, 
                                        ""Order - Simulate SAP Order (Siebel)"", 
                                        ""Order - Simulate SAP Order (BAPI Input)"");
}
"
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// LAST UPDATED	:	12/28/2000
//
// DESCRIPTION
//    Javascript maps from Oracle Operating Unit to Siebel Organization
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyIntegrationObjectData (OracleIntObject, SiebelIntObject)
{
	var OracleOrderIntComp, SiebelOrderIntComp;
	
	OracleOrderIntComp = OracleIntObject.GetPrimaryIntComp (""SO_HEADERS_INTERFACE_ALL"");

	if (OracleOrderIntComp.Exists ())
	{
		// ORDER INTERFACE

		SiebelOrderIntComp = 
			SiebelIntObject.CreatePrimaryIntComp (""Order Entry - Orders"");

		while (OracleOrderIntComp.NextRecord ())
		{
			SiebelOrderIntComp.NewRecord ();
			SiebelOrderIntComp.SetCopySource (OracleOrderIntComp);
			
			SiebelOrderIntComp.CopyFieldValue (""Integration Id"", ""ORIGINAL_SYSTEM_REFERENCE"");
			SiebelOrderIntComp.SetFieldValue  (""Back Office Process Status"", ""Error on Oracle Import"");
			SiebelOrderIntComp.SetFieldValue  (""EAI Sync Date"", Timestamp());
			SiebelOrderIntComp.CopyFieldValue (""Back Office Error Text"",""INTERFACE_STATUS"");
		}
	}
	else
	{
		EAIRaiseError(TranslateMessage(
			""ORA_MSG_MISSING_COMPONENT,SO_HEADERS_INTERFACE_ALL,Order - Get Oracle Order Import Status (Oracle)""));
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
 	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
 	  d.getHours(), d.getMinutes(), d.getSeconds());
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function UpsertSiebelOrder (InputMsg, OutputMsg)
{
	//
	// Declare a variable to hold the Siebel Integration Object.
	//
	var SiebelIntObject;
	
	//
	// Declare a variable to hold the Oracle Integration Object
	//
	var OracleIntObject;

	//
	// Get the Oracle Integration Object from the Input message
	//
	OracleIntObject = InputMsg.GetIntObj(""Order - Get Oracle Order Import Status (Oracle)"");

	//
	// Check the validity of the Oracle Integration Object.
	//
	if (OracleIntObject.Exists ())
	{
		//
		// Create a new Siebel Integration Object on the Output Message.
		//
		SiebelIntObject = OutputMsg.CreateIntObj (""Order - Get Oracle Order Import Status (Siebel)"");

		//
		// Navigate through all the available instances in the Integration Object
		//
		while (OracleIntObject.NextInstance ())
		{
			//
			// Create a new instance in the Oracle Integration Object
			//
			SiebelIntObject.NewInstance ();

			//
			// CopyFields is a user defined function which is written to copy all
			// the fields from the source to the target.
			//
			CopyIntegrationObjectData (OracleIntObject, SiebelIntObject);
		}
	}
}  ///~ End of CreateSiebelProduct function."
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// DESCRIPTION
//    Javascript maps to Siebel Order from Oracle Order
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyFields (OracleIntObject, SiebelIntObject)
{
	// Temporary variable to hold the messages.
	var msg = """";
	
	// 
	// Declare variables to hold the Oracle Primary Integration Component and 
	// The Siebel Primary Integration Component
	// 
	var OracleOrderHeader, SiebelOrderHeader;
	
	var OrderTypeVM 	= EAIGetValueMap (""Oracle Order Type"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderUOM 		= EAIGetValueMap (""Oracle Unit of Measure"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderTefVM 		= EAIGetValueMap (""Oracle Tax Exempt Flag"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderPtcVM 		= EAIGetValueMap (""Oracle Payment Type Code"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderTercVM 	= EAIGetValueMap (""Oracle Tax Exempt Reason"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderSpcVM 		= EAIGetValueMap (""Oracle Shipment Priority Code"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderFtcVM 		= EAIGetValueMap (""Oracle Freight"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);							
	var OrderFcVM 		= EAIGetValueMap (""Oracle Fob Code"", ""Siebel Inbound"");							
	var OrderEnteredStatusVM = EAIGetValueMap (""Oracle Order Status"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderLineStatusVM = EAIGetValueMap (""Oracle Order Line Status"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderLinesSmcVM = EAIGetValueMap (""Oracle Ship Method Code"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);							
	
	
	OracleOrderHeader = OracleIntObject.GetPrimaryIntComp (""SIE_HEADERS_ALL_V"");
	
	if (OracleOrderHeader.Exists ())
	{
		SiebelOrderHeader = SiebelIntObject.CreatePrimaryIntComp (""Order Entry - Orders"");
		
		while (OracleOrderHeader.NextRecord ())
		{
			// Process delete operation
			if(ProcessDelete(OracleOrderHeader, SiebelOrderHeader)) continue;

			var orderNum = OracleOrderHeader.GetFieldValue (""PURCHASE_ORDER_NUM"");
			
			SiebelOrderHeader.NewRecord ();
			SiebelOrderHeader.SetCopySource (OracleOrderHeader);
			SetOperationCode(SiebelOrderHeader, OracleOrderHeader);
			
			SiebelOrderHeader.SetFieldValue  (""Order Number"", orderNum);
			SiebelOrderHeader.CopyFieldValue (""Integration Id"", ""ORIGINAL_SYSTEM_REFERENCE"");
			SiebelOrderHeader.SetFieldValue  (""Back Office Process Status"",""Sync from Back Office"");
			SiebelOrderHeader.SetFieldValue  (""Back Office Error Text"", """");
			SiebelOrderHeader.SetFieldValue  (""EAI Sync Date"", Timestamp());
			SiebelOrderHeader.CopyFieldValue (""Order Date"", ""DATE_ORDERED"");
			SiebelOrderHeader.CopyFieldValue (""Pricing Date"", ""CONVERSION_DATE"");

			SiebelOrderHeader.CopyFieldValue (""Account Integration Id"", ""CUSTOMER_SHARED_ID"");
			SiebelOrderHeader.CopyFieldValue (""Contact Integration Id"", ""ORDERED_BY_CONTACT_SHARED_ID"");
	
			SiebelOrderHeader.CopyFieldValue (""Bill To Account Integration Id"", ""INVOICE_TO_CUSTOMER_SHARED_ID""); //PD# 12-56022B
			SiebelOrderHeader.CopyFieldValue (""Bill To Contact Integration Id"", ""INVOICE_TO_CONTACT_SHARED_ID"");
			SiebelOrderHeader.CopyFieldValue (""Bill To Address Integration Id"", ""INVOICE_TO_ADDRESS_SHARED_ID"");
			
			SiebelOrderHeader.CopyFieldValue (""Ship To Account Integration Id"", ""SHIP_TO_CUSTOMER_SHARED_ID"");
			SiebelOrderHeader.CopyFieldValue (""Ship To Address Integration Id"", ""SHIP_TO_ADDRESS_SHARED_ID"");
			SiebelOrderHeader.CopyFieldValue (""Ship To Contact Integration Id"", ""SHIP_TO_CONTACT_SHARED_ID"");

			SiebelOrderHeader.CopyFieldValue (""Requested Ship Date"", ""DATE_REQUESTED_CURRENT"");
			SiebelOrderHeader.CopyFieldValue (""Ship Instructions"", ""SHIPPING_INSTRUCTIONS"");
			SiebelOrderHeader.CopyFieldValue (""Organization Integration Id"", ""ORG_ID"");
			SiebelOrderHeader.CopyFieldValue (""Comments"", ""PACKING_INSTRUCTIONS"");
			SiebelOrderHeader.CopyFieldValue (""Back Office Order Number"", ""ORDER_NUMBER"");
			SiebelOrderHeader.SetFieldValue (""Status"", OrderEnteredStatusVM.Translate(OracleOrderHeader.GetFieldValue(""HEADER_STATUS"")));
			SiebelOrderHeader.CopyFieldValue (""Hold Flag"",""HOLD_FLAG"");
							
			SiebelOrderHeader.SetFieldValue (""Currency Code"", OracleOrderHeader.GetFieldValue (""CURRENCY_CODE""));
			
			SiebelOrderHeader.SetFieldValue (""Order Type"", OrderTypeVM.Translate (
				OracleOrderHeader.GetFieldValue (""ORDER_TYPE"")));
			
			SiebelOrderHeader.SetFieldValue (""Tax Exempt"", OrderTefVM.Translate (
				OracleOrderHeader.GetFieldValue (""TAX_EXEMPT_FLAG"")));
			
			SiebelOrderHeader.SetFieldValue (""Tax Exempt Reason"", OrderTercVM.Translate (
				OracleOrderHeader.GetFieldValue (""TAX_EXEMPT_REASON_CODE"")));
			
			SiebelOrderHeader.SetFieldValue (""Payment Method"", OrderPtcVM.Translate (
				OracleOrderHeader.GetFieldValue (""PAYMENT_TYPE_CODE"")));
			
			SiebelOrderHeader.SetFieldValue (""Order Priority"", OrderSpcVM.Translate (
				OracleOrderHeader.GetFieldValue (""SHIPMENT_PRIORITY_CODE"")));
		
			SiebelOrderHeader.SetFieldValue (""Freight Terms"", OrderFtcVM.Translate (
				OracleOrderHeader.GetFieldValue (""FREIGHT_TERMS_CODE"")));
			
//			SiebelOrderHeader.SetFieldValue (""Freight Terms Info"", OrderFcVM.Translate (
//				OracleOrderHeader.GetFieldValue (""FOB_CODE"")));
				
			//==================================================================
			// Get the Oracle Order Lines Integration Component from the
			// Oracle Header Integration Component
			//==================================================================
			var OracleOrderLines = OracleOrderHeader.GetIntComp (""SIE_LINES_ALL_V"");
			
			// Declare a variable to hold the Siebel child integration component.
			var SiebelOrderLines;
			
			// Check the validity of the integration component.
			if (OracleOrderLines.Exists ())
			{
				// Create a new child integration component in the Siebel 
				// Primary integration Component
				SiebelOrderLines = SiebelOrderHeader.CreateIntComp (""Order Entry - Line Items"");
				
				// Navigate through all the available records.
				while (OracleOrderLines.NextRecord ())
				{
				
				   var line_orig_sys_ref = OracleOrderLines.GetFieldValue (""ORIGINAL_SYSTEM_LINE_REFERENCE"");
         			
				   if (line_orig_sys_ref == """")
				   {
			         continue;
				   }


					// Create a new record on the Siebel side.
					SiebelOrderLines.NewRecord ();
					
					// Set the copy source as the Oracle Child Integration 
					// Component
					SiebelOrderLines.SetCopySource (OracleOrderLines);
					
					// Copy all the fields.
					SetOperationCode(SiebelOrderLines, OracleOrderLines);

       				SiebelOrderLines.CopyFieldValue (""Integration Id"", ""ORIGINAL_SYSTEM_LINE_REFERENCE"");

					SiebelOrderLines.CopyFieldValue (""Line Number"", ""LINE_NUMBER"");
					SiebelOrderLines.CopyFieldValue (""Product Integration Id"",""INVENTORY_ITEM_ID"");
					SiebelOrderLines.CopyFieldValue (""Quantity Requested"", ""ORDERED_QUANTITY"");
					SiebelOrderLines.CopyFieldValue (""Due Date"", ""DATE_REQUESTED_CURRENT"");
					SiebelOrderLines.CopyFieldValue (""Base Price"", ""LIST_PRICE"");
					SiebelOrderLines.CopyFieldValue (""Unit Price"", ""SELLING_PRICE"");
					SiebelOrderLines.CopyFieldValue (""Ship To Address Integration Id"", ""SHIP_TO_ADDRESS_SHARED_ID"");
					SiebelOrderLines.CopyFieldValue (""Tax Exempt Number"", ""TAX_CODE"");
					SiebelOrderLines.CopyFieldValue (""Quantity To Invoice"", ""QUANTITY_TO_INVOICE"");
					SiebelOrderLines.SetFieldValue (""Status"", OrderLineStatusVM.Translate(OracleOrderLines.GetFieldValue(""LINE_STATUS"")));
					SiebelOrderLines.CopyFieldValue (""Tax Exempt Number"", ""TAX_CODE"");
					SiebelOrderLines.CopyFieldValue (""Hold Flag"",""HOLD_FLAG"");
					SiebelOrderLines.CopyFieldValue (""Cancelled Quantity"",""CANCELLED_QUANTITY"");

					var OracleOrderShipDetails = OracleOrderLines.GetIntComp(""SIE_SHIPMENT_QUANTITIES_V"");

					// If the component exists in the Order Line integration component
					if(OracleOrderShipDetails.Exists()) 
					{
						// Create a new integration object in the siebel side.
						var SiebelOrderShipDetails = SiebelOrderLines.CreateIntComp(""Order Entry - Line Item Actions"");
						// While there are more records
  						SiebelOrderShipDetails.SetCopySource (OracleOrderShipDetails);
						while(OracleOrderShipDetails.NextRecord()) 
						{
							// Create a new record on the Siebel integration component.
							SiebelOrderShipDetails.NewRecord();

							SetOperationCode(SiebelOrderShipDetails, OracleOrderShipDetails);
							// Copy all the fields that are required...
							SiebelOrderShipDetails.CopyFieldValue (""Actual Start Date"",""DATE_SHIPPED"");
							SiebelOrderShipDetails.CopyFieldValue (""Quantity"",""SHIPPED_QUANTITY"");
							SiebelOrderShipDetails.SetFieldValue (""Integration Id"",
							  ""Ship-""+OracleOrderShipDetails.GetFieldValue(""PICKING_LINE_ID""));
							//SiebelOrderShipDetails.SetFieldValue (""Line Item Action Number"",
							  //""Ship-""+OracleOrderShipDetails.GetFieldValue(""PICKING_LINE_ID""));
							SiebelOrderShipDetails.SetFieldValue (""Line Item Action Type"", ""Ship"");
						}

					} 

					var OracleOrderScheduleDetails = OracleOrderLines.GetIntComp(""SIE_SCHEDULE_QUANTITIES_V"");

					// If the component exists in the Order Line integration component
					if(OracleOrderScheduleDetails.Exists()) 
					{
						// Create a new integration object in the siebel side.
						var SiebelOrderScheduleDetails = SiebelOrderLines.CreateIntComp(""Order Entry - Line Item Actions"");
						// While there are more records
  						SiebelOrderScheduleDetails.SetCopySource (OracleOrderScheduleDetails);
  						  						
						while(OracleOrderScheduleDetails.NextRecord()) 
						{
							// Create a new record on the Siebel integration component.
							SiebelOrderScheduleDetails.NewRecord();
						    SetOperationCode(SiebelOrderScheduleDetails, OracleOrderScheduleDetails);
						    // Copy all the fields that are required...
							SiebelOrderScheduleDetails.CopyFieldValue (""Actual Start Date"", ""SCHEDULE_DATE"");
							SiebelOrderScheduleDetails.CopyFieldValue (""Quantity"", ""SCHEDULE_QUANTITY"");
							SiebelOrderScheduleDetails.SetFieldValue (""Integration Id"",
								""Schedule-"" + OracleOrderScheduleDetails.GetFieldValue(""LINE_DETAIL_ID""));
							//SiebelOrderScheduleDetails.SetFieldValue (""Line Item Action Number"",
								//""Schedule-"" + OracleOrderScheduleDetails.GetFieldValue(""LINE_DETAIL_ID""));
							SiebelOrderScheduleDetails.SetFieldValue (""Line Item Action Type"", ""Schedule"");
						}
					} ///~ if(OracleOrderScheduleDetails.Exists())
            	} ///~ end of while(OracleOrderLines.NextRecord())
			} ///~ end of if(OracleOrderLines.Exists())
		} ///~ end of while(OracleOrderHeader.NextRecord())
	} ///~ end of if(OracleOrderHeader.Exists())
} /// ~ End of function CopyFields"
function ProcessDelete(OracleComp, SiebelComp)
{
	// If not a delete return false.
	// If delete (X or D) perform delete through COM interface.  X indicates that
	// there should be a D at a lower level.
	//
	// For Orders we expect deletes at header or line level.
	//
	//   D  SIE_HEADERS_ALL_V
	//        ..OR..
	//   X  SIE_HEADERS_ALL_V
	//   D  SIE_LINES_ALL_V
	
	var opCode;
	
	opCode = OracleComp.GetFieldValue(""SysOp"");
	if (opCode == ""D"")
	{
		// Header delete
		SiebelComp.NewRecord ();
		SiebelComp.SetCopySource(OracleComp);
		SiebelComp.SetFieldValue(""operation"", ""delete"");
		SiebelComp.CopyFieldValue(""Integration Id"", ""ORIGINAL_SYSTEM_REFERENCE"");
				
		return true;
	}
	else if (opCode == ""X"")
	{
		// Expect delete at line level
		OracleComp = OracleComp.GetIntComp(""SIE_LINES_ALL_V"");

		if (!OracleComp.Exists() || !OracleComp.NextRecord())
		{
			EAIRaiseError(TranslateMessage(
				""ORA_MSG_MISSING_COMPONENT,SIE_LINES_ALL_V,SIE_HEADERS_ALL_V""));
		}
			
		opCode = OracleComp.GetFieldValue(""SysOp"");
		if (opCode == ""D"")
		{
			// Delete Order line
			var BusObject = TheApplication().GetBusObject(""Order Entry"");
			var LineComp = BusObject.GetBusComp(""Order Entry - Line Items"");
			LineComp.ActivateField(""Integration Id"");
			LineComp.ActivateField(""Order Header Id"");
			LineComp.SetViewMode(3);
			LineComp.ClearToQuery();
						
			LineComp.SetSearchSpec(""Integration Id"", 
				OracleComp.GetFieldValue(""ORIGINAL_SYSTEM_REFERENCE""));
			
			LineComp.ExecuteQuery();
			LineComp.FirstRecord();
			var HeaderId = LineComp.GetFieldValue(""Order Header Id"");
			var LineId = LineComp.GetFieldValue (""Id"");
			
			SiebelComp.NewRecord ();
			SiebelComp.SetFieldValue(""operation"", ""upsert"");
			SiebelComp.SetFieldValue(""Id"", HeaderId);
			
			var SiebelOrderLines = SiebelComp.CreateIntComp (""Order Entry - Line Items"");	
			SiebelOrderLines.NewRecord ();
			SiebelOrderLines.SetCopySource(OracleComp);
			SiebelOrderLines.SetFieldValue(""operation"", ""delete"");
			SiebelOrderLines.SetFieldValue (""Id"", LineId);
			SiebelOrderLines.SetFieldValue(""Order Header Id"", HeaderId);
			SiebelOrderLines.CopyFieldValue(""Integration Id"", ""ORIGINAL_SYSTEM_REFERENCE"");
							
			return true;
		}
		else
			EAIRaiseError(TranslateMessage(
				""ORA_MSG_INVALID_SYSOP,""+opCode+"",SIE_LINES_ALL_V""));
	}
	else return false;  // Not a delete
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"/*==========================================================================
 * Module		: SetOperationCode
 * Last Updated : 17, Oct 2000
 *==========================================================================*/
function SetOperationCode(SiebelIntComp, OracleIntComp)
{
	// Get the OP-CODE for this particular integration component
	var opCode = OracleIntComp.GetFieldValue(""SysOp"");
	
	// set the appropriate value in the Oracle side
	if(opCode == ""D"")
		SiebelIntComp.SetFieldValue(""operation"", ""delete"");
	else
		SiebelIntComp.SetFieldValue(""operation"", ""upsert"");
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
 	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
 	  d.getHours(), d.getMinutes(), d.getSeconds());
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function UpsertSiebelOrder (InputMsg, OutputMsg)
{
	var SiebelIntObject, OracleIntObject;
	
	OracleIntObject = InputMsg.GetIntObj (""Orders - Get Oracle Orders (Oracle)"");
	
	if (OracleIntObject.Exists ())
	{
		SiebelIntObject = OutputMsg.CreateIntObj (""Orders - Put Oracle Orders (Siebel)"");
		
		while (OracleIntObject.NextInstance ())
		{
			SiebelIntObject.NewInstance (); 
			// 
			// CopyFields is a user defined function that 
			// copies all the fields from the source to the target.
			// 
			CopyFields (OracleIntObject, SiebelIntObject);
		} 
	} 
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// LAST UPDATED	: 01/03/2001
//
// DESCRIPTION
//    Javascript maps from Oracle11i Order to Siebel Order 
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js""
var PriceListId, InvLocId;"
function CopyFields (OracleIntObject, SiebelIntObject)
{
	// The application object's handle
	var theApp = TheApplication();
	
	// Temporary variable to hold the messages.
	var msg = """";
		
	// Declare variables to hold the Oracle Primary Integration Component and 
	// The Siebel Primary Integration Component
	var OracleOrderHeader, SiebelOrderHeader;
	
	var OrderStatusVM 	= EAIGetValueMap (""Oracle11i Order Status"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderLnStatusVM	= EAIGetValueMap (""Oracle11i Order Line Status"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderTefVM 		= EAIGetValueMap (""Oracle11i Tax Exempt Flag"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderTercVM 	= EAIGetValueMap (""Oracle11i Tax Exempt Reason"", ""Siebel Inbound"");
	var OrderPtcVM 		= EAIGetValueMap (""Oracle11i Payment Type Code"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderSpcVM 		= EAIGetValueMap (""Oracle11i Shipment Priority"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderSmcVM 		= EAIGetValueMap (""Oracle11i Ship Method Code"", ""Siebel Inbound"");			
	var OrderFtcVM 		= EAIGetValueMap (""Oracle11i Freight"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);							
	var OrderLinesSmcVM = EAIGetValueMap (""Oracle11i Ship Method Code"", ""Siebel Inbound"");							
	var OrderFcVM 		= EAIGetValueMap (""Oracle11i Fob Code"", ""Siebel Inbound"");							
	
	// Get the primary integration component from the Oracle Integration Object
	OracleOrderHeader = OracleIntObject.GetPrimaryIntComp (""SIE_HEADERS_ALL_V"");
	
	// if the Primary Integration Component is valid, then go ahead with the copying process
	// else raise an error message.
	if (OracleOrderHeader.Exists ())
	{
		SiebelOrderHeader = SiebelIntObject.CreatePrimaryIntComp (""Order Entry - Orders"");
		
		while (OracleOrderHeader.NextRecord ())
		{
			// Process delete operation
			if(ProcessDelete(OracleOrderHeader, SiebelOrderHeader)) continue;
			
			// Create a new record in the Siebel Primary Integration Object
			SiebelOrderHeader.NewRecord ();
			
			SiebelOrderHeader.SetCopySource (OracleOrderHeader);
							
			SetOperationCode(SiebelOrderHeader, OracleOrderHeader);
				
			SiebelOrderHeader.CopyFieldValue (""Integration Id"", ""ORIG_SYS_DOCUMENT_REF"");

			SiebelOrderHeader.SetFieldValue  (""Back Office Process Status"", ""Sync from Back Office"");
			SiebelOrderHeader.SetFieldValue  (""EAI Sync Date"", Timestamp());
			SiebelOrderHeader.SetFieldValue  (""Back Office Error Text"", """");

			SiebelOrderHeader.CopyFieldValue (""Back Office Order Number"", ""ORDER_NUMBER"");
			SiebelOrderHeader.CopyFieldValue (""Order Date"", ""DATE_ORDERED"");

			SiebelOrderHeader.CopyFieldValue (""Account Integration Id"", ""CUSTOMER_SHARED_ID"");
			SiebelOrderHeader.CopyFieldValue (""Contact Integration Id"", ""ORDERED_BY_CONTACT_SHARED_ID"");
		
			SiebelOrderHeader.CopyFieldValue (""Bill To Account Integration Id"", ""INVOICE_CUSTOMER_SHARED_ID""); //PD# 12-56022B
			//CopyFieldValue (""Bill To Contact Integration Id"", ""INVOICE_TO_CONTACT_SHARED_ID"");
			SiebelOrderHeader.CopyFieldValue (""Bill To Address Integration Id"", ""INVOICE_ADDRESS_SHARED_ID"");
				
			SiebelOrderHeader.CopyFieldValue (""Ship To Account Integration Id"", ""SHIP_TO_CUSTOMER_SHARED_ID"");
			SiebelOrderHeader.CopyFieldValue (""Ship To Address Integration Id"", ""SHIP_ADDRESS_SHARED_ID"");
			//CopyFieldValue (""Ship To Contact Integration Id"", ""SHIP_TO_CONTACT_SHARED_ID"");
	
			SiebelOrderHeader.CopyFieldValue (""Requested Ship Date"", ""DATE_REQUESTED_CURRENT"");
			SiebelOrderHeader.SetFieldValue (""Order Priority"", OrderSpcVM.Translate (OracleOrderHeader.GetFieldValue (""SHIPMENT_PRIORITY_CODE"")));
				
			SiebelOrderHeader.SetFieldValue (""Carrier Type"", OrderSmcVM.Translate (OracleOrderHeader.GetFieldValue (""SHIPPING_METHOD_CODE"")));
			SiebelOrderHeader.SetFieldValue (""Freight Terms"", OrderFtcVM.Translate (OracleOrderHeader.GetFieldValue (""FREIGHT_TERMS_CODE"")));
			
//			SiebelOrderHeader.SetFieldValue (""Freight Terms Info"", OrderFcVM.Translate (OracleOrderHeader.GetFieldValue (""FOB_CODE"")));
			
			SiebelOrderHeader.CopyFieldValue (""Ship Instructions"", ""SHIPPING_INSTRUCTIONS"");
			SiebelOrderHeader.CopyFieldValue (""Comments"", ""PACKING_INSTRUCTIONS"");
			//GetPriceListId (OracleOrderHeader, SiebelOrderHeader);
			SiebelOrderHeader.CopyFieldValue (""Price List Integration Id"", ""PRICE_LIST_ID"");
			SiebelOrderHeader.CopyFieldValue (""Currency Code"", ""CURRENCY_CODE"");
			SiebelOrderHeader.SetFieldValue (""Tax Exempt"", OrderTefVM.Translate (OracleOrderHeader.GetFieldValue (""TAX_EXEMPT_FLAG"")));	
			SiebelOrderHeader.CopyFieldValue (""Tax Exempt Number"", ""TAX_EXEMPT_NUMBER"");
			SiebelOrderHeader.SetFieldValue (""Tax Exempt Reason"", OrderTercVM.Translate (OracleOrderHeader.GetFieldValue (""TAX_EXEMPT_REASON_CODE"")));
			var PaymentTermIntId = OracleOrderHeader.GetFieldValue (""TERM_ID"");
			if(PaymentTermIntId != """" && PaymentTermIntId != null)
				SiebelOrderHeader.CopyFieldValue (""Payment Term Integration Id"", ""TERM_ID"");
			var PaymentMethod = OracleOrderHeader.GetFieldValue (""PAYMENT_TYPE_CODE"");
			if(PaymentMethod !="""" && PaymentMethod != null)
			{
				SiebelOrderHeader.SetFieldValue (""Payment Method"", OrderPtcVM.Translate (OracleOrderHeader.GetFieldValue (""PAYMENT_TYPE_CODE"")));
			}
				
			var OrgIntId = 	OracleOrderHeader.GetFieldValue(""ORG_ID"");
			if(OrgIntId != """" && OrgIntId != null)
			{
				SiebelOrderHeader.CopyFieldValue (""Organization Integration Id"", ""ORG_ID"");
			}
				
			SiebelOrderHeader.SetFieldValue (""Status"", OrderStatusVM.Translate (OracleOrderHeader.GetFieldValue (""STATUS"")));
			SiebelOrderHeader.CopyFieldValue (""Hold Flag"", ""HOLD_FLAG"");	

			
			// Get the Oracle Order Lines Integration Component from the
			// Oracle Header Integration Component
			var OracleOrderLines = OracleOrderHeader.GetIntComp (""SIE_LINES_ALL_V"");
			
			// Declare a variable to hold the Siebel child integration component.
			var SiebelOrderLines;
			
			// Check the validity of the integration component.
			if (OracleOrderLines.Exists ())
			{
				// Create a new child integration component in the Siebel 
				// Primary integration Component
				SiebelOrderLines = SiebelOrderHeader.CreateIntComp (""Order Entry - Line Items"");
				
				// Navigate through all the available records.
				while (OracleOrderLines.NextRecord ())
				{
    			   var line_orig_sys_ref = OracleOrderLines.GetFieldValue (""ORIG_SYS_LINE_REF"");
         			
				   if (line_orig_sys_ref == """")
				   {
			         continue;
				   }
				
					// Create a new record on the Siebel side.
					SiebelOrderLines.NewRecord ();
					
					// Set the copy source as the Oracle Child Integration 
					// Component
					SiebelOrderLines.SetCopySource (OracleOrderLines);
					
					// Copy all the fields.
					SetOperationCode(SiebelOrderLines, OracleOrderLines);
					SiebelOrderLines.CopyFieldValue (""Integration Id"", ""ORIG_SYS_LINE_REF"");
					SiebelOrderLines.CopyFieldValue (""Line Number"", ""LINE_NUMBER"");
					//GetProductId (OracleOrderLines, SiebelOrderLines);
					SiebelOrderLines.CopyFieldValue (""Product Integration Id"", ""INVENTORY_ITEM_ID"");
					//if ( (OracleOrderLines.GetFieldValue (""ORDERED_QUANTITY"")) != 0)
					//{
						SiebelOrderLines.CopyFieldValue (""Quantity Requested"", ""ORDERED_QUANTITY"");
					//}
					SiebelOrderLines.CopyFieldValue (""Cancelled Quantity"", ""CANCELLED_QUANTITY"");
					SiebelOrderLines.SetFieldValue (""Price List Id"", PriceListId);
					SiebelOrderLines.CopyFieldValue (""Base Price"", ""UNIT_LIST_PRICE"");
					SiebelOrderLines.CopyFieldValue (""Unit Price"", ""UNIT_SELLING_PRICE"");
					SiebelOrderLines.CopyFieldValue (""Adjusted List Price"", ""UNIT_LIST_PRICE"");					
					//GetInvLocId (OracleOrderLines, SiebelOrderLines);
					SiebelOrderLines.CopyFieldValue (""Source Inventory Loc Integration Id"", ""WAREHOUSE_ID"");
					SiebelOrderLines.CopyFieldValue (""Quantity Shipped"", ""SHIPPED_QUANTITY"");
					SiebelOrderLines.CopyFieldValue (""Due Date"", ""DATE_REQUESTED"");
					SiebelOrderLines.SetFieldValue (""Carrier Code"", OrderLinesSmcVM.Translate (
						OracleOrderLines.GetFieldValue (""SHIPPING_METHOD_CODE"")));
					SiebelOrderLines.CopyFieldValue (""Invoiced Quantity"", ""INVOICED_QUANTITY"");
					SiebelOrderLines.CopyFieldValue (""Tax Exempt Number"", ""TAX_EXEMPT_NUMBER"");
					SiebelOrderLines.SetFieldValue  (""Tax Exempt Reason"", OrderTercVM.Translate (
						OracleOrderLines.GetFieldValue (""TAX_EXEMPT_REASON_CODE"")));
					SiebelOrderLines.SetFieldValue  (""Status"", OrderLnStatusVM.Translate (
						OracleOrderLines.GetFieldValue (""STATUS"")));

					SiebelOrderLines.CopyFieldValue (""Shipment Number"", ""SHIPMENT_NUMBER"");
					SiebelOrderLines.CopyFieldValue (""Scheduled Ship Date"", ""SHIP_DATE"");
					SiebelOrderLines.CopyFieldValue (""Hold Flag"", ""HOLD_FLAG"");
	                    										
					SiebelOrderLines.CopyFieldValue (""Ship to Address Integration Id"", 
						""SHIP_ADDRESS_SHARED_ID"");					
				} ///~ end of while(OracleOrderLines.NextRecord())
			} ///~ end of if(OracleOrderLines.Exists())
		} ///~ end of while(OracleOrderHeader.NextRecord())
	} ///~ end of if(OracleOrderHeader.Exists())
} /// ~ End of function CopyFields"
function GetInvLocId (OracleOrderLines, SiebelOrderLines)
{
	var OrclInvLocId, InvLocIdExists;
	// variable to hold the business object
	var InvLocBusObject = TheApplication().GetBusObject(""FS Inventory Location Mgmt"") ;

	// Get the business component from the business object
	var InvLocBusComp = InvLocBusObject.GetBusComp(""FS Inventory Location"") ;
	InvLocBusComp.ActivateField(""Id"");
	OrclInvLocId = OracleOrderLines.GetFieldValue(""WAREHOUSE_ID"");

	if((OrclInvLocId != """") && (OrclInvLocId != null))
	{
		InvLocBusComp.SetViewMode(3);
		InvLocBusComp.ClearToQuery() ;
		InvLocBusComp.SetSearchSpec(""Integration Id"", OrclInvLocId) ;

		InvLocBusComp.ExecuteQuery() ;
		InvLocIdExists = InvLocBusComp.FirstRecord();

		if (InvLocIdExists)
		{
			InvLocId = InvLocBusComp.GetFieldValue(""Id"") ;
			SiebelOrderLines.SetFieldValue (""Source Inventory Loc Id"", InvLocId);
		}
	}
}
function GetLDC (LookupType, LangIndepntValue) 
{ 
	var LangDepntValue = TheApplication().InvokeMethod(""LookupValue"", LookupType, LangIndepntValue);
	return LangDepntValue;
}
function GetPriceListId (OracleOrderHeader, SiebelOrderHeader)
{
	var OrclPriceListId, PriceListIdExists;
	// variable to hold the business object
	var PriceListBusObject = TheApplication().GetBusObject(""Price List"") ;

	// Get the business component from the business object
	var PriceListBusComp = PriceListBusObject.GetBusComp(""Price List"") ;
	PriceListBusComp.ActivateField(""Id"");
	OrclPriceListId = OracleOrderHeader.GetFieldValue(""PRICE_LIST_ID"");

	if((OrclPriceListId != """") && (OrclPriceListId != null))
	{
		PriceListBusComp.SetViewMode(3);
		PriceListBusComp.ClearToQuery() ;
		PriceListBusComp.SetSearchSpec(""Integration Id"", OrclPriceListId) ;

		PriceListBusComp.ExecuteQuery() ;
		PriceListIdExists = PriceListBusComp.FirstRecord();

		if (PriceListIdExists)
		{
			PriceListId = PriceListBusComp.GetFieldValue(""Id"") ;
			SiebelOrderHeader.SetFieldValue (""Price List Id"", PriceListId);
		}
	}
}
function GetProductId (OracleOrderLines, SiebelOrderLines)
{
	var OrclProductId, ProductIdExists, ProductIdValue;
	// variable to hold the business object
	var ProductBusObject = TheApplication().GetBusObject(""Order Entry (Sales)"") ;

	// Get the business component from the business object
	var ProductBusComp = ProductBusObject.GetBusComp(""Internal Product"") ;
	ProductBusComp.ActivateField(""Id"");
	OrclProductId = OracleOrderLines.GetFieldValue(""INVENTORY_ITEM_ID"");

	if((OrclProductId != """") && (OrclProductId != null))
	{
		ProductBusComp.SetViewMode(3);
		ProductBusComp.ClearToQuery() ;
		ProductBusComp.SetSearchSpec(""Integration Id"", OrclProductId) ;

		ProductBusComp.ExecuteQuery() ;
		ProductIdExists = ProductBusComp.FirstRecord();

		if (ProductIdExists)
		{
			ProductIdValue = ProductBusComp.GetFieldValue(""Id"") ;
			SiebelOrderLines.SetFieldValue (""Product Id"", ProductIdValue);
		}
	}
}
function ProcessDelete(OracleComp, SiebelComp)
{
	// If not a delete return false.
	// If delete (X or D) perform delete through COM interface.  X indicates that
	// there should be a D at a lower level.
	//
	// For Orders we expect deletes at header or line level.
	//
	//   D  SIE_HEADERS_ALL_V
	//        ..OR..
	//   X  SIE_HEADERS_ALL_V
	//   D  SIE_LINES_ALL_V
	
	var opCode;
	
	opCode = OracleComp.GetFieldValue(""SysOp"");
	if (opCode == ""D"")
	{
		SiebelComp.NewRecord ();
		SiebelComp.SetCopySource(OracleComp);
		SiebelComp.SetFieldValue(""operation"", ""delete"");
		SiebelComp.CopyFieldValue(""Integration Id"", ""ORIGINAL_SYSTEM_REFERENCE"");
				
		return true;
	}
	else if (opCode == ""X"")
	{
		// Expect delete at line level
		OracleComp = OracleComp.GetIntComp(""SIE_LINES_ALL_V"");

		if (!OracleComp.Exists() || !OracleComp.NextRecord())
			EAIRaiseError(TranslateMessage(
				""ORA_MSG_MISSING_COMPONENT,SIE_LINES_ALL_V,SIE_HEADERS_ALL_V""));
			
		opCode = OracleComp.GetFieldValue(""SysOp"");
		if (opCode == ""D"")
		{
			// Delete Order line
			var BusObject = TheApplication().GetBusObject(""Order Entry"");
			var LineComp = BusObject.GetBusComp(""Order Entry - Line Items"");
			LineComp.ActivateField(""Integration Id"");
			LineComp.ActivateField(""Order Header Id"");
			LineComp.SetViewMode(3);
			LineComp.ClearToQuery();
						
			LineComp.SetSearchSpec(""Integration Id"", 
				OracleComp.GetFieldValue(""ORIGINAL_SYSTEM_REFERENCE""));
			
			LineComp.ExecuteQuery();
			LineComp.FirstRecord();
			var HeaderId = LineComp.GetFieldValue(""Order Header Id"");
			var LineId = LineComp.GetFieldValue (""Id"");
			
			SiebelComp.NewRecord ();
			SiebelComp.SetFieldValue(""operation"", ""upsert"");
			SiebelComp.SetFieldValue(""Id"", HeaderId);
			
			var SiebelOrderLines = SiebelComp.CreateIntComp (""Order Entry - Line Items"");	
			SiebelOrderLines.NewRecord ();
			SiebelOrderLines.SetCopySource(OracleComp);
			SiebelOrderLines.SetFieldValue(""operation"", ""delete"");
			SiebelOrderLines.SetFieldValue(""Order Header Id"", HeaderId);
			SiebelOrderLines.SetFieldValue(""Id"", LineId);
			SiebelOrderLines.CopyFieldValue(""Integration Id"", ""ORIGINAL_SYSTEM_REFERENCE"");
				
			return true;
		}
		else
			EAIRaiseError(TranslateMessage(
				""ORA_MSG_INVALID_SYSOP,""+opCode+"",SIE_LINES_ALL_V""));
	}
	else return false;  // Not a delete
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
function SetOperationCode(SiebelIntComp, OracleIntComp)
{
	// Get the OP-CODE for this particular integration component
	var opCode = OracleIntComp.GetFieldValue(""SysOp"");
	
	// set the appropriate value in the Oracle side
	if(opCode == ""D"")
		SiebelIntComp.SetFieldValue(""operation"", ""delete"");
	else
		SiebelIntComp.SetFieldValue(""operation"", ""upsert"");
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
 	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
 	  d.getHours(), d.getMinutes(), d.getSeconds());
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function UpsertSiebelOrder (InputMsg, OutputMsg)
{
	// Declare a variable to hold the Siebel Integration Object.
	var SiebelIntObject;
	
	// Declare a variable to hold the Oracle Integration Object
	var OracleIntObject;
	
	// Get the Oracle Integration Object from the Input message
	OracleIntObject = InputMsg.GetIntObj (""Order - Get Oracle11i Order (Oracle)"");
	
	// Check the validity of the Oracle Integration Object.
	if (OracleIntObject.Exists ())
	{
		// Go ahead and create a new Siebel Integration Object on the Output Message.
		SiebelIntObject = OutputMsg.CreateIntObj (""Order - Get Oracle11i Order (Siebel)"");
		
		// Navigate through all the available instances in the Integration Object
		while (OracleIntObject.NextInstance ())
		{
			// Create a new instance in the Oracle Integration Object
			SiebelIntObject.NewInstance (); 
			
			// CopyFields is again a user defined function which is written to copy all // the fields from the source to the target.
			CopyFields (OracleIntObject, SiebelIntObject);
		} ///~ end of while(OracleIntObject.NextInstance())
	} ///~ end of if(OracleIntObject.Exists())
}  ///~ End of UpsertSiebelOrder function."
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// DESCRIPTION
//    Javascript maps from Siebel Order to Oracle Order
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyFields (SiebelIntObject, OracleIntObject, OutputMsg)
{
	// Declare variables to hold the Siebel Primary Integration Component and 
	// The Oracle Primary Integration Component
	var count_line;
	var SiebelOrderHeader, OracleOrderHeader;
	
	var PriceListId, DiscountId, DiscountLineId, PriceDis, calculate_price, percent, PriceList;
	
	var HeaderSharedID, HeaderIntegID, LineSharedID, LineIntegID;
	
	// Open the EAI Value Map for Orders here.
	var OrderEnteredStatusVM = EAIGetValueMap (""Oracle Order Status"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderTypeVM = EAIGetValueMap (""Oracle Order Type"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderUOM 	= EAIGetValueMap (""Oracle Unit of Measure"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
 	var OrderTefVM 	= EAIGetValueMap (""Oracle Tax Exempt Flag"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderPtcVM 	= EAIGetValueMap (""Oracle Payment Type Code"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderTercVM = EAIGetValueMap (""Oracle Tax Exempt Reason"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderSpcVM 	= EAIGetValueMap (""Oracle Shipment Priority Code"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderSmcVM 	= EAIGetValueMap (""Oracle Ship Method Code"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);			
	var OrderFtcVM 	= EAIGetValueMap (""Oracle Freight"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);							
	var OrderFcVM 	= EAIGetValueMap (""Oracle Fob Code"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);	
	var SalesRepIdVM = EAIGetValueMap (""Oracle Sales Rep ID"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);

	var OrderLinesSmcVM = EAIGetValueMap (""Oracle Ship Method Code"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);							
	
	var OraShipToCusId, OraShipToContactId;

	//Get the primary integration component from the Siebel Integration Object
	SiebelOrderHeader = SiebelIntObject.GetPrimaryIntComp (""Order Entry - Orders"");
	
	// if the Primary Integration Component is valid, then go ahead with the copying process
	// else raise an error message.
	
	if (SiebelOrderHeader.Exists ())
	{
		// Create the Oracle Primary Integration Component on the Oracle Integration
		// Component
		OracleOrderHeader = 
			OracleIntObject.CreatePrimaryIntComp (""SIE_HEADERS_INTERFACE_ALL"");
		
		// Navigate through all the available records in the Siebel primary integration //component 
		
		while (SiebelOrderHeader.NextRecord ())
		{
			OracleOrderHeader.NewRecord ();
			OracleOrderHeader.SetCopySource (SiebelOrderHeader);
			OracleOrderHeader.SetFieldValue (""operation"", ""upsert"");
			
			HeaderIntegID = SiebelOrderHeader.GetFieldValue(""Integration Id"");
			
			if (HeaderIntegID != """")
			{
				// Existing Order
				HeaderSharedID = HeaderIntegID;
			}
			else
			{
				// New Order
				HeaderSharedID = SiebelOrderHeader.GetFieldValue (""Id"");
			}
			OracleOrderHeader.SetFieldValue (""ORIGINAL_SYSTEM_REFERENCE"", HeaderSharedID);
			OutputMsg.SetArgument(""ObjectIntegrationId"", HeaderSharedID);
				
			OracleOrderHeader.CopyFieldValue (""PURCHASE_ORDER_NUM"", ""Order Number"");
			OracleOrderHeader.CopyFieldValue (""DATE_ORDERED"", ""Order Date"");
			OracleOrderHeader.CopyFieldValue (""CONVERSION_DATE"", ""Pricing Date"");

			var CustId = SiebelOrderHeader.GetFieldValue (""Account Integration Id"");
			if(CustId != """") 
			{
				OracleOrderHeader.SetFieldValue (""CUSTOMER_SHARED_ID"", CustId);
			}
			else
			{
				EAIRaiseError( TranslateMessage(""ORA_MSG_INVALID_CUST_INTEGRATION_ID, NULL""));
			}
			
			OracleOrderHeader.CopyFieldValue (""SHIP_ADDRESS_SHARED_ID"", 
				""Ship To Address Integration Id"");
				
			OracleOrderHeader.CopyFieldValue (""INVOICE_ADDRESS_SHARED_ID"", 
				""Bill To Address Integration Id"");
				
			OracleOrderHeader.CopyFieldValue (""DATE_REQUESTED_CURRENT"", ""Requested Ship Date"");
			
			var ShipToAccountIntId = 
				SiebelOrderHeader.GetFieldValue (""Ship To Account Integration Id"");
						
			if(ShipToAccountIntId != """" && ShipToAccountIntId != null)
			{
				OraShipToCusId = ShipToAccountIntId;
			}
			else
			{
				OraShipToCusId = CustId;
			}
			OracleOrderHeader.SetFieldValue(""SHIP_TO_CUSTOMER_SHARED_ID"", OraShipToCusId);
				
			var BillToAccountIntId = 
				SiebelOrderHeader.GetFieldValue (""Bill To Account Integration Id"");

			if(BillToAccountIntId != """" && BillToAccountIntId != null)
			{
				OracleOrderHeader.SetFieldValue (""INVOICE_CUSTOMER_SHARED_ID"", BillToAccountIntId);
			}
			else
			{
				OracleOrderHeader.SetFieldValue (""INVOICE_CUSTOMER_SHARED_ID"", CustId);
			}
				
			OracleOrderHeader.CopyFieldValue (""ORDERED_BY_CONTACT_SHARED_ID"", ""Contact Integration Id"");

			// If there is a Ship To Contact specified in the order, map that to 
			// SHIP_TO_CONTACT_SHARED_ID otherwise, map it to Contact Integration Id, 
			// which is the default.
			var ShipToContactIntId = 
				SiebelOrderHeader.GetFieldValue (""Ship To Contact Integration Id"");
				
			if(ShipToContactIntId != """" && ShipToContactIntId != null) 
			{
				OraShipToContactId = ShipToContactIntId;
			}
			else
			{
				OraShipToContactId = SiebelOrderHeader.GetFieldValue (""Contact Integration Id"");
			}
			OracleOrderHeader.SetFieldValue (""SHIP_TO_CONTACT_SHARED_ID"", OraShipToContactId);	
				
			// If there is a Bill To Contact specified in the order, map it to 
			// INVOICE_TO_CONTACT_ID otherwise, map it to Contact Integration Id, 
			// which is the default.
			var BillToContactIntId = 
				SiebelOrderHeader.GetFieldValue (""Bill To Contact Integration Id"");
				
			if(BillToContactIntId != """" && BillToContactIntId != null) 
			{
				OracleOrderHeader.SetFieldValue(""INVOICE_TO_CONTACT_SHARED_ID"", BillToContactIntId);
			}
			else
			{
				OracleOrderHeader.CopyFieldValue (""INVOICE_TO_CONTACT_SHARED_ID"", ""Contact Integration Id"");
			}

			PriceDis = 
				SiebelOrderHeader.GetFieldValue (""Price List Integration Id"").split(""-"");
			PriceListId = (PriceDis.length > 0) ? PriceDis[0] : """";
			DiscountId =  (PriceDis.length > 1) ? PriceDis[1] : """";
				
			OracleOrderHeader.SetFieldValue (""PRICE_LIST_ID"", PriceListId);
				
			OracleOrderHeader.CopyFieldValue (""SHIPPING_INSTRUCTIONS"", ""Ship Instructions"");
			
			var OrgIntId = SiebelOrderHeader.GetFieldValue (""Organization Integration Id"");
			if(OrgIntId != null && OrgIntId != """")
			{
				OracleOrderHeader.CopyFieldValue (""ORG_ID"", ""Organization Integration Id"");
			}
			else
			{
				EAIRaiseError( TranslateMessage(""ORA_MSG_INVALID_ORG_INTEGRATION_ID, NULL""));				
			}
			
			OracleOrderHeader.SetFieldValue (""ENTERED_STATE_NAME"", OrderEnteredStatusVM.Translate (
				SiebelOrderHeader.GetFieldValue (""Status"")));

			OracleOrderHeader.CopyFieldValue (""CREATION_DATE"", ""Created"");
			OracleOrderHeader.CopyFieldValue (""LAST_UPDATE_DATE"", ""Updated"");
			
			OracleOrderHeader.SetFieldValue (""CURRENCY_CODE"", SiebelOrderHeader.GetFieldValue (""Currency Code"", ""USD""));

			OracleOrderHeader.SetFieldValue (""ORDER_TYPE"", OrderTypeVM.Translate (
				SiebelOrderHeader.GetFieldValue (""Order Type"")));

			OracleOrderHeader.SetFieldValue (""TAX_EXEMPT_FLAG"", OrderTefVM.Translate (
				SiebelOrderHeader.GetFieldValue (""Tax Exempt"")));

			OracleOrderHeader.SetFieldValue (""TAX_EXEMPT_REASON_CODE"", OrderTercVM.Translate (
				SiebelOrderHeader.GetFieldValue (""Tax Exempt Reason"")));
				
			OracleOrderHeader.CopyFieldValue (""TAX_EXEMPT_NUM"", ""Tax Exempt Number"");
              	OracleOrderHeader.SetFieldValue (""PAYMENT_TYPE_CODE"", OrderPtcVM.Translate (
              		SiebelOrderHeader.GetFieldValue (""Payment Method"")));
              		
			OracleOrderHeader.SetFieldValue (""SHIPMENT_PRIORITY_CODE"", OrderSpcVM.Translate (
				SiebelOrderHeader.GetFieldValue (""Order Priority"")));

			OracleOrderHeader.SetFieldValue (""SHIP_METHOD_CODE"", OrderSmcVM.Translate (
				SiebelOrderHeader.GetFieldValue (""Carrier Type"")));
				
			OracleOrderHeader.SetFieldValue (""FREIGHT_TERMS_CODE"", OrderFtcVM.Translate (
				SiebelOrderHeader.GetFieldValue (""Freight Terms"")));


//			OracleOrderHeader.SetFieldValue (""FOB_CODE"", OrderFcVM.Translate (
//				SiebelOrderHeader.GetFieldValue (""Freight Terms Info"")));

			OracleOrderHeader.SetFieldValue (""TERMS_ID"", 
				SiebelOrderHeader.GetFieldValue (""Payment Term Integration Id""));
				
			OracleOrderHeader.SetFieldValue (""SALESREP_ID"", SalesRepIdVM.Translate (
				SiebelOrderHeader.GetFieldValue (""Primary Position Contact Id"")));
				
			var HeaderDiscount = SiebelOrderHeader.GetFieldValue(""Discount"");
			if (HeaderDiscount != null && HeaderDiscount != """")
			{
				EAIRaiseError(TranslateMessage(""ORA_MSG_HEADER_DISCOUNT_NOT_ALLOWED,""));
			}

			//
			// ORDER LINES
			//
			var SiebelOrderLines = SiebelOrderHeader.GetIntComp (""Order Entry - Line Items"");
			
			var OracleOrderLines, OraclePriceAdjustments;
				
			if (SiebelOrderLines.Exists ())
			{
				OracleOrderLines = OracleOrderHeader.CreateIntComp (""SIE_LINES_INTERFACE_ALL"");
				count_line =0;					
				while (SiebelOrderLines.NextRecord ())
				{
					count_line = count_line+1;
					var BasePrice = SiebelOrderLines.GetFieldValue (""Base Price"");
					var ItemPrice = SiebelOrderLines.GetFieldValue (""Item Price"");
					
					OracleOrderLines.NewRecord ();
					OracleOrderLines.SetCopySource (SiebelOrderLines);
					OracleOrderLines.SetFieldValue (""operation"", ""upsert"");

					OracleOrderLines.SetFieldValue (""ORIGINAL_SYSTEM_REFERENCE"", HeaderSharedID);
					
					LineIntegID = SiebelOrderLines.GetFieldValue(""Integration Id"");
					
					if (LineIntegID != """")
					{
						// Existing Order Line
						LineSharedID = LineIntegID;
					}
					else
					{
						// New Order Line
						LineSharedID = SiebelOrderLines.GetFieldValue(""Id"");
					}
					OracleOrderLines.SetFieldValue  (""ORIGINAL_SYSTEM_LINE_REFERENCE"", LineSharedID);

					OracleOrderLines.CopyFieldValue (""LINE_NUMBER"", ""Line Number"");
					OracleOrderLines.CopyFieldValue (""ORDERED_QUANTITY"", ""Quantity Requested"");
					OracleOrderLines.CopyFieldValue (""DATE_REQUESTED_CURRENT"", ""Due Date"");
					OracleOrderLines.CopyFieldValue (""LIST_PRICE"", ""Base Price"");
					OracleOrderLines.CopyFieldValue (""SELLING_PRICE"", ""Item Price"");							
					OracleOrderLines.CopyFieldValue (""INVENTORY_ITEM_ID"", ""Product Integration Id"");
					OracleOrderLines.CopyFieldValue (""ORG_ID"", ""Organization Integration Id"");
					OracleOrderLines.CopyFieldValue (""SHIPPED_QUANTITY"", ""Quantity Shipped"");
					OracleOrderLines.SetFieldValue  (""PRICE_LIST_ID"", PriceListId);
					
					OracleOrderLines.SetFieldValue  (""SHIP_ADDRESS_SHARED_ID"", 
						SiebelOrderHeader.GetFieldValue(""Ship To Address Integration Id""));

					OracleOrderLines.SetFieldValue  (""SHIP_TO_CUSTOMER_SHARED_ID"", OraShipToCusId);
					OracleOrderLines.SetFieldValue  (""SHIP_TO_CONTACT_SHARED_ID"", OraShipToContactId);
				
					OracleOrderLines.CopyFieldValue (""CREATION_DATE"", ""Created"");
					OracleOrderLines.CopyFieldValue (""LAST_UPDATE_DATE"", ""Updated"");
					
					OracleOrderLines.SetFieldValue (""UNIT_CODE"", OrderUOM.Translate(
						SiebelOrderLines.GetFieldValue(""Product Unit of Measure"", ""Each"")));

					OracleOrderLines.SetFieldValue (""SHIP_METHOD_CODE"", OrderLinesSmcVM.Translate (
						SiebelOrderLines.GetFieldValue (""Carrier Code"")));

					OracleOrderLines.CopyFieldValue (""WAREHOUSE_ID"", ""Source Inventory Loc Integration Id"");	

					OracleOrderLines.SetFieldValue (""SHIPMENT_PRIORITY_CODE"", OrderSpcVM.Translate (
						SiebelOrderHeader.GetFieldValue (""Order Priority"")));

					OracleOrderLines.SetFieldValue (""TERMS_ID"", 
						SiebelOrderHeader.GetFieldValue(""Payment Term Integration Id""));
				
					if (ItemPrice == null || ItemPrice == """")
					{
						calculate_price = ""Y"";
						OracleOrderLines.SetFieldValue (""CALCULATE_PRICE"", ""Y"");
					}
			 		else
					{
						calculate_price = ""N"";
						OracleOrderLines.SetFieldValue (""CALCULATE_PRICE"", ""N"");
						var DiscountLineId = 
							SiebelOrderLines.GetFieldValue(""Volume Discount Integration Id"");

						var DiscountPercent = 
							SiebelOrderLines.GetFieldValue(""Calculated Net Discount Percent"");

						if (DiscountId != """" && DiscountLineId != null && 
							DiscountLineId != """" && BasePrice != ItemPrice)
						{
							OraclePriceAdjustments = OracleOrderLines.CreateIntComp (""SIE_PRICE_ADJUSTMENTS_INT"");
				
							OraclePriceAdjustments.NewRecord ();
							OraclePriceAdjustments.SetCopySource (SiebelOrderLines);
							OraclePriceAdjustments.CopyFieldValue(""PERCENT"", ""Calculated Net Discount Percent"");
							OraclePriceAdjustments.SetFieldValue (""DISCOUNT_ID"", DiscountId);
							OraclePriceAdjustments.CopyFieldValue(""DISCOUNT_LINE_ID"", ""Volume Discount Integration Id"");
							OraclePriceAdjustments.SetFieldValue (""ORIGINAL_SYSTEM_LINE_REFERENCE"", LineSharedID);
							OraclePriceAdjustments.SetFieldValue (""ORIGINAL_SYSTEM_REFERENCE"", HeaderSharedID);
							OraclePriceAdjustments.SetFieldValue (""OPERATION_CODE"", ""INSERT"");

							OraclePriceAdjustments.CopyFieldValue (""CREATION_DATE"", ""Created"");
							OraclePriceAdjustments.CopyFieldValue (""LAST_UPDATE_DATE"", ""Updated"");
						}
						else if (BasePrice != ItemPrice && DiscountId == """")
						{
							EAIRaiseError(TranslateMessage(""ORA_MSG_DISCOUNT_ID_NULL,""));

						}
						else if (BasePrice != ItemPrice && (DiscountLineId == null || DiscountLineId == """"))
						{
							EAIRaiseError(TranslateMessage(""ORA_MSG_DISCOUNT_LINE_ID_NULL,""));
						}
					}		
				} ///~ while(SiebelOrderLines.NextRecord())
				if ( count_line == 0 ) 
					EAIRaiseError(TranslateMessage(
					""ORA_MSG_MISSING_ORDER_LINE""));
							 
			} ///~ if(SiebelOrderLines.Exists())
			else
			{
				// Exception: No child integration components
				EAIRaiseError(TranslateMessage(
					""ORA_MSG_MISSING_ORDER_LINE""));
			} ///~ else
		} ///~ while(SiebelOrderHeader.NextRecord())
	} ///~ if(SiebelOrderHeader.Exists())
	else
	{
		// Exception: No primary integration component.
		EAIRaiseError(TranslateMessage(
			""ORA_MSG_MISSING_COMPONENT,Order Entry - Orders,Orders - Get/Put Oracle Orders (Siebel)""));
	} ///~ else
} /// ~ End of function CopyFields"
"// Map Siebel Order to Oracle Order
// Returns argument ""ObjectIntegrationId""

function CreateSiebelOrder (InputMsg, OutputMsg)
{
	var SiebelIntObject, OracleIntObject;
	
	OutputMsg.SetArgument(""ObjectIntegrationId"", """");

	SiebelIntObject = InputMsg.GetIntObj (""Orders - Get Oracle Orders (Siebel)"");
	
	if (SiebelIntObject.Exists ())
	{
		// 
		// Go ahead and create a new Oracle Integration Object on the Output Message.
		// 
		OracleIntObject = OutputMsg.CreateIntObj (""Orders - Put Oracle Orders (Oracle)"");
		
		// 
		// Navigate through all the available instances in the Integration Object
		// 
		while (SiebelIntObject.NextInstance ())
		{
			// 
			// Create a new instance in the Oracle Integration Object
			// 
			OracleIntObject.NewInstance (); 
			// 
			// CopyFields is again a user defined function which is written to copy all 
			// the fields from the source to the target.
			// 
			CopyFields (SiebelIntObject, OracleIntObject, OutputMsg);
		}
	}
	
}  ///~ End of CreateSiebelOrder function."
"// Set Integration Id for new order

function OrderLoopBack(InputMsg, OutputMsg)
{
	var SiebelObjectIn, SiebelObjectOut;
	
	var HeaderCompIn, HeaderCompOut, 
		LineCompIn, LineCompOut;
	
	var HeaderSharedID, HeaderIntegId, 
		LineSharedID, LineIntegId; 
	
	/* Check the validation message */
	var ValidationMessage = InputMsg.GetArgument(""Validation Message"");
	
	if (ValidationMessage != """" && ValidationMessage != null)
	{
		EAIRaiseError(TranslateMessage(ValidationMessage));
	}

	SiebelObjectIn = InputMsg.GetIntObj(""Orders - Get Oracle Orders (Siebel)"");
	
	if (SiebelObjectIn.Exists ())
	{
		SiebelObjectOut = 
			OutputMsg.CreateIntObj(""Orders - Get Oracle Orders (Siebel)"");
		
		while (SiebelObjectIn.NextInstance ())
		{
			SiebelObjectOut.NewInstance ();

			HeaderCompIn = SiebelObjectIn.GetPrimaryIntComp (""Order Entry - Orders"");

			// 
			// ORDER HEADER
			//
			if (HeaderCompIn.Exists ())
			{
				HeaderCompOut = SiebelObjectOut.CreatePrimaryIntComp(""Order Entry - Orders"");
								
		    	while (HeaderCompIn.NextRecord ())
				{
					HeaderCompOut.SetCopySource (HeaderCompIn);
					
					HeaderCompOut.NewRecord ();   
						
					HeaderCompOut.CopyFieldValue(""Id"", ""Id"");
					HeaderCompOut.SetFieldValue(""EAI Sync Date"", Timestamp());
					
					HeaderIntegId = HeaderCompIn.GetFieldValue(""Integration Id"");
	 				if (HeaderIntegId == """" || HeaderIntegId == null)
					{
						// New Order
						HeaderCompOut.CopyFieldValue(""Integration Id"", ""Id"");
						HeaderCompOut.SetFieldValue(""Back Office Process Status"", 
							""Creating in Back Office"");
					}
					else
					{
						// Existing Order
						HeaderCompOut.CopyFieldValue(""Integration Id"", ""Integration Id"");
						HeaderCompOut.SetFieldValue(""Back Office Process Status"", 
							""Sync To Back Office"");
					}
					HeaderCompOut.SetFieldValue(""Back Office Error Text"", """");

					//
					// ORDER LINES
					//		
					var LineCompIn = HeaderCompIn.GetIntComp (""Order Entry - Line Items"");
					
					if (LineCompIn.Exists())
					{
						LineCompOut = HeaderCompOut.CreateIntComp(""Order Entry - Line Items"");
									
						while (LineCompIn.NextRecord())
						{
							LineCompOut.SetCopySource (LineCompIn);
				
							LineCompOut.NewRecord();   
	
							LineCompOut.CopyFieldValue(""Id"", ""Id"");

							LineIntegId = LineCompIn.GetFieldValue(
								""Integration Id"");
								
			 				if (LineIntegId == """" || LineIntegId == null)
			 				{
								// New Line
								LineCompOut.CopyFieldValue(""Integration Id"", ""Id"");
							}
							else
							{
								// Existing Line
								LineCompOut.CopyFieldValue(""Integration Id"", ""Integration Id"");
							}
						}
					} // END ORDER LINES
				}
			} // END ORDER HEADER 
		} 
	} 
	else
	{
		EAIRaiseError (TranslateMessage (
			""ORA_MSG_EMPTY,Orders - Get Oracle Orders (Siebel)""));
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{  
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
 	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
 	  d.getHours(), d.getMinutes(), d.getSeconds());
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// LAST UPDATED	:	01/03/2001
//
// DESCRIPTION
//    Javascript maps from Siebel Order to Oracle11i Entities
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyFields (SiebelIntObject, OracleIntObject, OutputMsg)
{
	// Declare variables to hold the Siebel Primary Integration Component and 
	// The Oracle Primary Integration Component
	
	var count_line; 
	
	var SiebelOrderHeader, OracleOrderHeader;
	
	var HeaderSharedID, HeaderIntegID, LineSharedID, LineIntegID;
	
	// Open the EAI Value Map for Orders here.
	var OrderStatusVM 	= EAIGetValueMap (""Oracle11i Order Status"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderTefVM 		= EAIGetValueMap (""Oracle11i Tax Exempt Flag"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderTercVM 	= EAIGetValueMap (""Oracle11i Tax Exempt Reason"", ""Siebel Outbound"");
	var OrderPtcVM 		= EAIGetValueMap (""Oracle11i Payment Type Code"", ""Siebel Outbound"");
	var OrderSpcVM 		= EAIGetValueMap (""Oracle11i Shipment Priority"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var OrderLinesSmcVM = EAIGetValueMap (""Oracle11i Ship Method Code"", ""Siebel Outbound"");
	var OrderFtcVM 		= EAIGetValueMap (""Oracle11i Freight"", ""Siebel Outbound"");
	var OrderFcVM 		= EAIGetValueMap (""Oracle11i Fob Code"", ""Siebel Outbound"");
	var OrderSmcVM 		= EAIGetValueMap (""Oracle11i Ship Method Code"", ""Siebel Outbound"");
	var OrderTypeVM		= EAIGetValueMap (""Oracle11i Order Type"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);
	var SalesRepIdVM 	= EAIGetValueMap (""Oracle11i Sales Rep ID"", ""Siebel Outbound"", EAIValueMap_NoEntry_RaiseError);

		
	//Get the primary integration component from the Siebel Integration Object
	SiebelOrderHeader = SiebelIntObject.GetPrimaryIntComp (""Order Entry - Orders"");
	
	// if the Primary Integration Component is valid, then go ahead with the copying process
	// else raise an error message.
	if (SiebelOrderHeader.Exists ())
	{
		// Create the Oracle Primary Integration Component on the Oracle Integration
		// Component
		OracleOrderHeader = 
			OracleIntObject.CreatePrimaryIntComp (""SIE_ORDER_HEADERS_ALL"");
		
		// Navigate to the first record in the Siebel Primary Integration Object and check for 
		// Multiple records if multiple records are found, then navigate through all the 
		// available records in the Siebel primary integration component 
		while (SiebelOrderHeader.NextRecord ())
		{
										
			OracleOrderHeader.NewRecord ();
			OracleOrderHeader.SetCopySource (SiebelOrderHeader);
				
			OracleOrderHeader.SetFieldValue (""OPERATION"", ""create"");
				
			HeaderIntegID = SiebelOrderHeader.GetFieldValue(""Integration Id"");
				
			if (HeaderIntegID != """")
			{
				// Existing Order
				HeaderSharedID = HeaderIntegID;
			}
			else
			{
					// New Order
				HeaderSharedID = SiebelOrderHeader.GetFieldValue (""Id"");
			}
			OracleOrderHeader.SetFieldValue (""ORIG_SYS_DOCUMENT_REF"", HeaderSharedID);
			OutputMsg.SetArgument(""ObjectIntegrationId"", HeaderSharedID);
					
			OracleOrderHeader.CopyFieldValue (""CREATION_DATE"", ""Created"");
			OracleOrderHeader.CopyFieldValue (""LAST_UPDATE_DATE"", ""Updated"");
												
			OracleOrderHeader.SetFieldValue (""ORDER_TYPE"", OrderTypeVM.Translate (SiebelOrderHeader.GetFieldValue (""Order Type"")));
			OracleOrderHeader.CopyFieldValue (""ORDERED_DATE"", ""Order Date"");	
			OracleOrderHeader.CopyFieldValue (""TRANSACTIONAL_CURR_CODE"", ""Currency Code"", ""USD"", ""USD"");
			OracleOrderHeader.CopyFieldValue (""PRICING_DATE"", ""Pricing Date"");	
			OracleOrderHeader.SetFieldValue (""CONVERSION_TYPE_CODE"", ""Corporate"");
			var OracleOrderStatus = OrderStatusVM.Translate (SiebelOrderHeader.GetFieldValue (""Status""));

			OracleOrderHeader.SetFieldValue (""ENTERED_STATE_NAME"", OracleOrderStatus);
			if (OracleOrderStatus == ""BOOKED"")
			{
				OracleOrderHeader.SetFieldValue (""BOOKED_FLAG"", ""Y"");
				OracleOrderHeader.CopyFieldValue (""BOOKED_DATE"", ""Order Date"");
			}

			//
			// SOLD TO (ORDERED BY)
			//
			var CustId = SiebelOrderHeader.GetFieldValue (""Account Integration Id"");
			if(CustId != """") 
			{
				OracleOrderHeader.SetFieldValue (""CUSTOMER_SHARED_ID"", CustId);
			}
			else
			{
				EAIRaiseError( TranslateMessage(""ORA_MSG_INVALID_CUST_INTEGRATION_ID, NULL""));
			}
				
			OracleOrderHeader.CopyFieldValue (""ORDERED_BY_CONTACT_SHARED_ID"", ""Contact Integration Id"");

			//
			// SHIP TO
			//
			OracleOrderHeader.CopyFieldValue (""SHIP_ADDRESS_SHARED_ID"", 
					""Ship To Address Integration Id"");
					
			var ShipToAccountIntId = 
					SiebelOrderHeader.GetFieldValue (""Ship To Account Integration Id"");
							
			if(ShipToAccountIntId != """" && ShipToAccountIntId != null)
			{
				var OraShipToCusId = ShipToAccountIntId;
			}
			else
			{
				OraShipToCusId = CustId;
			}
			OracleOrderHeader.SetFieldValue(""SHIP_TO_CUSTOMER_SHARED_ID"", OraShipToCusId);
					
			//CopyFieldValue (""SHIP_TO_CONTACT_SHARED_ID"", ""Ship To Contact Integration Id"");	
					
			//
			// BILL TO
			//
			OracleOrderHeader.CopyFieldValue (""INVOICE_ADDRESS_SHARED_ID"", 
					""Bill To Address Integration Id"");
					
			var BillToAccountIntId = 
					SiebelOrderHeader.GetFieldValue (""Bill To Account Integration Id"");

			if(BillToAccountIntId != """" && BillToAccountIntId != null)
			{
				OracleOrderHeader.SetFieldValue (""INVOICE_CUSTOMER_SHARED_ID"", BillToAccountIntId);
			}
			else
			{
				OracleOrderHeader.SetFieldValue (""INVOICE_CUSTOMER_SHARED_ID"", CustId);
			}
					
			//CopyFieldValue (""INVOICE_TO_CONTACT_SHARED_ID"", ""Bill To Contact Integration Id"");
				
			OracleOrderHeader.SetFieldValue (""SALESREP_ID"", SalesRepIdVM.Translate (
					SiebelOrderHeader.GetFieldValue (""Primary Position Contact Id"")));
			OracleOrderHeader.CopyFieldValue (""REQUEST_DATE"", ""Requested Ship Date"");
								
			OracleOrderHeader.SetFieldValue (""TAX_EXEMPT_FLAG"", OrderTefVM.Translate (
					SiebelOrderHeader.GetFieldValue (""Tax Exempt"", ""N"", ""N"")));
			OracleOrderHeader.CopyFieldValue (""TAX_EXEMPT_NUMBER"", ""Tax Exempt Number"");
			OracleOrderHeader.SetFieldValue (""TAX_EXEMPT_REASON_CODE"", OrderTercVM.Translate (
					SiebelOrderHeader.GetFieldValue (""Tax Exempt Reason"")));

			OracleOrderHeader.CopyFieldValue (""PRICE_LIST_ID"", ""Price List Integration Id"");
											
			OracleOrderHeader.SetFieldValue (""SHIPMENT_PRIORITY_CODE"", OrderSpcVM.Translate (SiebelOrderHeader.GetFieldValue (""Order Priority"")));

			OracleOrderHeader.SetFieldValue (""SHIPPING_METHOD_CODE"", OrderSmcVM.Translate (
					SiebelOrderHeader.GetFieldValue (""Carrier Type"")));
			OracleOrderHeader.SetFieldValue (""FREIGHT_TERMS_CODE"", OrderFtcVM.Translate (SiebelOrderHeader.GetFieldValue (""Freight Terms"")));


//			OracleOrderHeader.SetFieldValue (""FOB_POINT_CODE"", OrderFcVM.Translate (
//					SiebelOrderHeader.GetFieldValue (""Freight Terms Info"")));

			OracleOrderHeader.CopyFieldValue (""SHIPPING_INSTRUCTIONS"", ""Ship Instructions"");
				
			var OrgIntId = SiebelOrderHeader.GetFieldValue (""Organization Integration Id"");
			if(OrgIntId != null && OrgIntId != """")
			{
				OracleOrderHeader.SetFieldValue (""ORG_ID"", OrgIntId);
			}
			else
			{
				EAIRaiseError( TranslateMessage(""ORA_MSG_INVALID_ORG_INTEGRATION_ID, NULL""));				
			}
				
			OracleOrderHeader.CopyFieldValue (""SOLD_FROM_ORG_ID"", ""Source Inventory Loc Integration Id"");
			OracleOrderHeader.SetFieldValue (""VERSION_NUMBER"", ""1"");
				
			// Setting the Payment details			
			OracleOrderHeader.CopyFieldValue (""PAYMENT_TERM_ID"", ""Payment Term Integration Id"");
			var PaymentType = OrderPtcVM.Translate (
					SiebelOrderHeader.GetFieldValue (""Payment Method""));
			OracleOrderHeader.SetFieldValue (""PAYMENT_TYPE_CODE"", PaymentType);
			if (PaymentType == ""CHECK"")
			{
				OracleOrderHeader.SetFieldValue (""PAYMENT_AMOUNT"", ""0"");
				OracleOrderHeader.SetFieldValue (""CHECK_NUMBER"", ""9999999999"");
			}
			if (PaymentType == ""CASH"")
			{
				OracleOrderHeader.SetFieldValue (""PAYMENT_AMOUNT"", ""0"");
			}
			if (PaymentType == ""CREDIT_CARD"")
			{
				OracleOrderHeader.CopyFieldValue (""CREDIT_CARD_EXPIRATION_DATE"", ""Credit Card Expiration Date"");
				OracleOrderHeader.CopyFieldValue (""CREDIT_CARD_HOLDER_NAME"", ""Credit Card Holder"");
				OracleOrderHeader.CopyFieldValue (""CREDIT_CARD_NUMBER"", ""Credit Card Number"");
			}
			
			// Get the Siebel Child Integration Component from the Siebel Primary 
			// Integration Component
			var SiebelOrderLines = SiebelOrderHeader.GetIntComp (""Order Entry - Line Items"");
			
			// Declare a variable to hold the Oracle child integration component.
			// (SIE_ORDER_LINES_ALL)
			var OracleOrderLines;
										
			// Check the validity of the integration component.
			if (SiebelOrderLines.Exists ())
			{
				// Create a new child integration component in the Oracle 
				// Primary integration 
				// Component
				OracleOrderLines = OracleOrderHeader.CreateIntComp (""SIE_ORDER_LINES_ALL"");
									
				// Navigate through all the available records.
				count_line =0;
				while (SiebelOrderLines.NextRecord ())
				{
				    count_line = count_line + 1;
				
					OracleOrderLines.NewRecord ();
					OracleOrderLines.SetCopySource (SiebelOrderLines);
					OracleOrderLines.SetFieldValue (""OPERATION"", ""create"");
						
					OracleOrderLines.SetFieldValue (""ORIG_SYS_DOCUMENT_REF"", HeaderSharedID);
					
					LineIntegID = SiebelOrderLines.GetFieldValue(""Integration Id"");
						
					if (LineIntegID != """")
					{
						// Existing Order Line
						LineSharedID = LineIntegID;
					}
					else
					{
						// New Order Line
						LineSharedID = SiebelOrderLines.GetFieldValue(""Id"");
					}
					OracleOrderLines.SetFieldValue  (""ORIG_SYS_LINE_REF"", LineSharedID);

					OracleOrderLines.CopyFieldValue (""CREATION_DATE"", ""Created"");
					OracleOrderLines.CopyFieldValue (""LAST_UPDATE_DATE"", ""Updated"");
												
					OracleOrderLines.CopyFieldValue (""LINE_NUMBER"", ""Line Number"");
					OracleOrderLines.CopyFieldValue (""ORDERED_QUANTITY"", ""Quantity Requested"");	
					OracleOrderLines.SetFieldValue (""CALCULATE_PRICE_FLAG"", ""Y"");
					OracleOrderLines.CopyFieldValue (""REQUEST_DATE"", ""Due Date"");
					OracleOrderLines.CopyFieldValue (""SCHEDULE_SHIP_DATE"", ""Scheduled Ship Date"");
					OracleOrderLines.CopyFieldValue (""UNIT_LIST_PRICE"", ""Base Price"");
					OracleOrderLines.CopyFieldValue (""UNIT_SELLING_PRICE"", ""Item Price"");
					OracleOrderLines.CopyFieldValue (""INVENTORY_ITEM_ID"", ""Product Integration Id"");
					OracleOrderLines.CopyFieldValue (""SHIPPED_QUANTITY"", ""Quantity Shipped"");
					OracleOrderLines.SetFieldValue (""SHIPMENT_PRIORITY_CODE"", OrderSpcVM.Translate (SiebelOrderHeader.GetFieldValue (""Order Priority"")));

					OracleOrderLines.SetFieldValue (""SHIPPING_METHOD_CODE"", OrderLinesSmcVM.Translate (
						SiebelOrderLines.GetFieldValue (""Carrier Code"")));
					OracleOrderLines.SetFieldValue (""PRICE_LIST_ID"", 
						SiebelOrderHeader.GetFieldValue (""Price List Integration Id""));
					OracleOrderLines.SetFieldValue (""TAX_EXEMPT_FLAG"", OrderTefVM.Translate (
						SiebelOrderLines.GetFieldValue (""Tax Exempt Flag"", ""N"", ""N"")));
					OracleOrderLines.CopyFieldValue (""TAX_EXEMPT_NUMBER"", ""Tax Exempt Number"");
					OracleOrderLines.SetFieldValue (""TAX_EXEMPT_REASON_CODE"", OrderTercVM.Translate (
						SiebelOrderLines.GetFieldValue (""Tax Exempt Reason"")));
					OracleOrderLines.SetFieldValue (""ORG_ID"", 
						SiebelOrderHeader.GetFieldValue (""Organization Integration Id""));	
					//
					// SHIP TO
					//
					OracleOrderLines.SetFieldValue  (""SHIP_ADDRESS_SHARED_ID"", 
					SiebelOrderHeader.GetFieldValue(""Ship To Address Integration Id""));

					OracleOrderLines.SetFieldValue  (""SHIP_TO_CUSTOMER_SHARED_ID"", OraShipToCusId);
					//SetFieldValue  (""SHIP_TO_CONTACT_SHARED_ID"", 
					//SiebelOrderHeader.GetFieldValue (""Ship To Contact Integration Id""));
					
					OracleOrderLines.SetFieldValue  (""PAYMENT_TERM_ID"", 
						SiebelOrderHeader.GetFieldValue(""Payment Term Integration Id""));
					OracleOrderLines.CopyFieldValue (""SOLD_FROM_ORG_ID"", ""Source Inventory Loc Integration Id"");
					OracleOrderLines.CopyFieldValue (""SHIP_FROM_ORG_ID"", ""Source Inventory Loc Integration Id"");
				} ///~ while(SiebelOrderLines.NextRecord())
				
				if ( count_line == 0 ) 
					EAIRaiseError(TranslateMessage(
					""ORA_MSG_MISSING_ORDER_LINE""));
					
			} ///~ if(SiebelOrderLines.Exists())
			else
			{
				// Raise an exception saying that no child integration 
				// Components were found.
				EAIRaiseError(TranslateMessage(
					""ORA_MSG_MISSING_ORDER_LINE""));
			} ///~ else 
		} ///~ while(SiebelOrderHeader.NextRecord())*/
	} ///~ if(SiebelOrderHeader.Exists())
	else
	{
		// Raise an exception saying that the primary integration component is not found.
		EAIRaiseError (TranslateMessage (""ORA_MSG_MISSING_COMPONENT,Order Entry - Orders,Orders - Get/Put Oracle Orders (Siebel)""));
	} ///~ else
} /// ~ End of function CopyFields"
"// Map Siebel Order to Oracle Order
// Returns argument ""ObjectIntegrationId""

function CreateSiebelOrder (InputMsg, OutputMsg)
{
	var SiebelIntObject, OracleIntObject;
	
	OutputMsg.SetArgument(""ObjectIntegrationId"", """");

	SiebelIntObject = InputMsg.GetIntObj (""Order - Put Oracle11i Order (Siebel)"");
	
	if (SiebelIntObject.Exists ())
	{
		OracleIntObject = OutputMsg.CreateIntObj (""Order - Put Oracle11i Order (Oracle)"");
		
		while (SiebelIntObject.NextInstance ())
		{
			OracleIntObject.NewInstance (); 

			// CopyFields is again a user defined function which is written to copy all 
			// the fields from the source to the target.
			CopyFields (SiebelIntObject, OracleIntObject, OutputMsg);
		}
	}
}
"// Set Integration Id for new order

function OrderLoopBack(InputMsg, OutputMsg)
{
	var SiebelObjectIn, SiebelObjectOut;
	
	var HeaderCompIn, HeaderCompOut, 
		LineCompIn, LineCompOut;
	
	var HeaderSharedID, HeaderIntegId, 
		LineSharedID, LineIntegId; 
	
	/* Check the validation message */
	var ValidationMessage = InputMsg.GetArgument(""Validation Message"");
	
	if (ValidationMessage != """" && ValidationMessage != null)
	{
		EAIRaiseError(TranslateMessage(ValidationMessage));
	}

	SiebelObjectIn = InputMsg.GetIntObj(""Order - Put Oracle11i Order (Siebel)"");
	
	if (SiebelObjectIn.Exists ())
	{
		SiebelObjectOut = 
			OutputMsg.CreateIntObj(""Order - Put Oracle11i Order (Siebel)"");
		
		while (SiebelObjectIn.NextInstance ())
		{
			SiebelObjectOut.NewInstance ();

			HeaderCompIn = SiebelObjectIn.GetPrimaryIntComp (""Order Entry - Orders"");

			// 
			// ORDER HEADER
			//
			if (HeaderCompIn.Exists ())
			{
				HeaderCompOut = SiebelObjectOut.CreatePrimaryIntComp(""Order Entry - Orders"");
								
		    	while (HeaderCompIn.NextRecord ())
				{
					HeaderCompOut.SetCopySource (HeaderCompIn);
					
					HeaderCompOut.NewRecord ();   
							
					HeaderCompOut.CopyFieldValue(""Id"", ""Id"");
					HeaderCompOut.SetFieldValue(""EAI Sync Date"", Timestamp());
						
					HeaderIntegId = HeaderCompIn.GetFieldValue(""Integration Id"");
		 			if (HeaderIntegId == """" || HeaderIntegId == null)
					{
							// New Order
						HeaderCompOut.CopyFieldValue(""Integration Id"", ""Id"");
						HeaderCompOut.SetFieldValue(""Back Office Process Status"", 
							""Creating in Back Office"");
					}
					else
					{
							// Existing Order
						HeaderCompOut.CopyFieldValue(""Integration Id"", ""Integration Id"");
						HeaderCompOut.SetFieldValue(""Back Office Process Status"", 
							""Sync To Back Office"");
					}
					HeaderCompOut.SetFieldValue(""Back Office Error Text"", """");

					//
					// ORDER LINES
					//		
					var LineCompIn = HeaderCompIn.GetIntComp (""Order Entry - Line Items"");
					
					if (LineCompIn.Exists())
					{
						LineCompOut = HeaderCompOut.CreateIntComp(""Order Entry - Line Items"");
									
						while (LineCompIn.NextRecord())
						{
							LineCompOut.SetCopySource (LineCompIn);
				
							LineCompOut.NewRecord();   
		
							LineCompOut.CopyFieldValue(""Id"", ""Id"");

							LineIntegId = LineCompIn.GetFieldValue(
								""Integration Id"");
									
				 			if (LineIntegId == """" || LineIntegId == null)
				 			{
									// New Line
								LineCompOut.CopyFieldValue(""Integration Id"", ""Id"");
							}
							else
							{
									// Existing Line
								LineCompOut.CopyFieldValue(""Integration Id"", ""Integration Id"");
							}
						}
					} // END ORDER LINES
				}
			} // END ORDER HEADER 
		} 
	} 
	else
	{
		EAIRaiseError (TranslateMessage (
			""ORA_MSG_EMPTY,Order - Put Oracle11i Order (Siebel)""));
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
 	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
 	  d.getHours(), d.getMinutes(), d.getSeconds());
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// LAST UPDATED	:	12/28/2000
//
// DESCRIPTION
//    Javascript maps from Oracle Operating Unit to Siebel Organization
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyIntegrationObjectData (OracleIntObject, SiebelIntObject)
{
	//
	// Declare variables to hold the Oracle Primary Integration Component and
	// The Siebel Primary Integration Component
	//
	var OracleOpUnitIntComp, SiebelOrgIntComp;
	
	//var CurrencyCodeVM = EAIGetValueMap (""Oracle Currency Code"", ""Siebel Inbound"", ""USD"");
	
	//
	//Get the primary integration component from the Oracle Integration Object
	//
	OracleOpUnitIntComp = OracleIntObject.GetPrimaryIntComp (""SIE_ORG_V"");

	if (OracleOpUnitIntComp.Exists ())
	{
		// ORGANIZATION

		SiebelOrgIntComp = SiebelIntObject.CreatePrimaryIntComp (""Internal Division"");

		while (OracleOpUnitIntComp.NextRecord ())
		{
			
		
				SiebelOrgIntComp.NewRecord ();
				SiebelOrgIntComp.SetCopySource (OracleOpUnitIntComp);
				
				SiebelOrgIntComp.CopyFieldValue (""Integration Id"", ""OPERATING_UNIT_ID"");
				SiebelOrgIntComp.CopyFieldValue (""Name"",""NAME"");
				var CurrCode = OracleOpUnitIntComp.GetFieldValue (""CURRENCY_CODE"");
				if ((CurrCode == """") || (CurrCode == null))
					CurrCode = ""USD"";
				SiebelOrgIntComp.SetFieldValue (""Currency Code"", CurrCode);
				SiebelOrgIntComp.SetFieldValue (""Organization Flag"", ""Y"");

		
		}
	}
	else
	{
		EAIRaiseError(TranslateMessage(
			""ORA_MSG_MISSING_COMPONENT,SIE_ORG_V,Organization - Get Oracle Operating Unit (Oracle)""));
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function UpsertSiebelOrg (InputMsg, OutputMsg)
{
	//
	// Declare a variable to hold the Siebel Integration Object.
	//
	var SiebelIntObject;

	//
	// Declare a variable to hold the Oracle Integration Object
	//
	var OracleIntObject;

	//
	// Get the Oracle Integration Object from the Input message
	//
	OracleIntObject = InputMsg.GetIntObj(""Organization - Get Oracle Operating Unit (Oracle)"");

	//
	// Check the validity of the Oracle Integration Object.
	//
	if (OracleIntObject.Exists ())
	{
		//
		// Create a new Siebel Integration Object on the Output Message.
		//
		SiebelIntObject = OutputMsg.CreateIntObj (""Organization - Get Oracle Operating Unit (Siebel)"");

		//
		// Navigate through all the available instances in the Integration Object
		//
		while (OracleIntObject.NextInstance ())
		{
			//
			// Create a new instance in the Oracle Integration Object
			//
			SiebelIntObject.NewInstance ();

			//
			// CopyFields is a user defined function which is written to copy all
			// the fields from the source to the target.
			//
			CopyIntegrationObjectData (OracleIntObject, SiebelIntObject);
		}
	}
}  ///~ End of CreateSiebelProduct function."
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// LAST UPDATED	:	12/28/2000
//
// DESCRIPTION
//    Javascript maps from Oracle Operating Unit to Siebel Organization
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyIntegrationObjectData (OracleIntObject, SiebelIntObject)
{
	//
	// Declare variables to hold the Oracle Primary Integration Component and
	// The Siebel Primary Integration Component
	//
	var OracleOpUnitIntComp, SiebelOrgIntComp;
	
	//var CurrencyCodeVM = EAIGetValueMap (""Oracle Currency Code"", ""Siebel Inbound"", ""USD"");
	
	//
	//Get the primary integration component from the Oracle Integration Object
	//
	OracleOpUnitIntComp = OracleIntObject.GetPrimaryIntComp (""SIE_ORG_V"");

	if (OracleOpUnitIntComp.Exists ())
	{
		// ORGANIZATION

		SiebelOrgIntComp = SiebelIntObject.CreatePrimaryIntComp (""Internal Division"");

		while (OracleOpUnitIntComp.NextRecord ())
		{
			 
			 
				SiebelOrgIntComp.NewRecord ();
				SiebelOrgIntComp.SetCopySource (OracleOpUnitIntComp);
				
				SiebelOrgIntComp.CopyFieldValue (""Integration Id"", ""OPERATING_UNIT_ID"");
				SiebelOrgIntComp.CopyFieldValue (""Name"",""NAME"");
				var CurrCode = OracleOpUnitIntComp.GetFieldValue (""CURRENCY_CODE"");
				if ((CurrCode == """") || (CurrCode == null))
				CurrCode = ""USD"";
				SiebelOrgIntComp.SetFieldValue (""Currency Code"", CurrCode);
				SiebelOrgIntComp.SetFieldValue (""Organization Flag"", ""Y"");
				SiebelOrgIntComp.SetFieldValue (""Parent Organization Id"", """");
		 
		}
	}
	else
	{
		EAIRaiseError(TranslateMessage(
			""ORA_MSG_MISSING_COMPONENT,SIE_ORG_V,Organization - Get Oracle Operating Unit (Oracle)""));
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function UpsertSiebelOrg (InputMsg, OutputMsg)
{
	//
	// Declare a variable to hold the Siebel Integration Object.
	//
	var SiebelIntObject;

	//
	// Declare a variable to hold the Oracle Integration Object
	//
	var OracleIntObject;

	//
	// Get the Oracle Integration Object from the Input message
	//
	OracleIntObject = InputMsg.GetIntObj(""Organization - Get Oracle11i Operating Unit (Oracle)"");

	//
	// Check the validity of the Oracle Integration Object.
	//
	if (OracleIntObject.Exists ())
	{
		//
		// Create a new Siebel Integration Object on the Output Message.
		//
		SiebelIntObject = OutputMsg.CreateIntObj (""Organization - Get Oracle11i Operating Unit (Siebel)"");

		//
		// Navigate through all the available instances in the Integration Object
		//
		while (OracleIntObject.NextInstance ())
		{
			//
			// Create a new instance in the Oracle Integration Object
			//
			SiebelIntObject.NewInstance ();

			//
			// CopyFields is a user defined function which is written to copy all
			// the fields from the source to the target.
			//
			CopyIntegrationObjectData (OracleIntObject, SiebelIntObject);
		}
	}
}  ///~ End of CreateSiebelProduct function."
function CallTxnutlR(Inputs,Outputs)
{
   var env_root=  Clib.getenv(""SIEBEL_ROOT"");       
 
   // var env_root= ""m:\\siebel"";
   var pro_path = env_root + ""\\bin\\txnutlr.exe"";
   var cfg_path = env_root + ""\\bin\\enu"";
   var virtual_arg = "" /u * /p * /c * /d * /f * /n *  /i * "";

   Clib.system(pro_path + "" /g "" + cfg_path + virtual_arg );

    return;
}
function CallTxnutlRDebug(Inputs,Outputs)
{
 //   var env_root=  Clib.getenv(""SIEBEL_ROOT"");       
 
   var env_root= ""m:\\siebel"";
   var pro_path = env_root + ""\\bin\\w32ud\\txnutlr.exe"";
   var cfg_path = env_root + ""\\docking\\report"";
   var virtual_arg = "" /u * /p * /c * /d * /f * /n *  /i * "";

   Clib.system(pro_path + "" /g "" + cfg_path + virtual_arg );

    return;
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""CallTxnutlR"") 
       CallTxnutlR(Inputs, Outputs);

    else if(MethodName == ""CallTxnutlRDebug"") 
       CallTxnutlRDebug(Inputs, Outputs);

    else if(MethodName == ""Testpro"") 
       Testpro(Inputs, Outputs );  
 
    else { 
        Outputs.SetProperty(""ErrRet"",""FALSE""); 
        Outputs.SetProperty(""ErrMgs"",MethodName + ""  is not implemented""); 
    } 
 
  return (CancelOperation); 
}
function Testpro(Inputs,Outputs)  
{  
   Clib.system(""dir /p c:\\"");
   
 return;  
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2002, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 1 $
//      $Date: 3/21/2002 5:11pm $
//    $Author: ALAU $ of last update
//
// CREATOR:    Amanda Lau
//
// DESCRIPTION: Sample External Account is a business service which takes 
//              Account Interface integration object as input argument, treats 
//              the input argument as a request, and writes it to a file. It 
//              then reads the response from a file in the form of Account
//              Interface integration object and passes it back as an output 
//              argument. 
//              The file names are specified in the Business Service User Prop. 
//              This business service is indented to be called by External 
//              Account business service which is a web service outbound
//              dispatcher. 
//
///////////////////////////////////////////////////////////////////////////////"
function IsolateIntegrationId (Inputs, Outputs)
{
   var inputPropertySet;
   var siebelMessage;
   var child;
   var property;
   var numOfChild = 0;
   var num = 0;
   var i = 1;   // The first time we use i as a loop counter we start at 1
   var j = 0;

   // Get first value in property set.
   numOfChild = Inputs.GetChildCount();
   inputPropertySet = Inputs.GetChild(0);
   while (inputPropertySet.GetType() != ""SiebelMessage"" && i < numOfChild)
   {
      inputPropertySet = Inputs.GetChild(i);
      i++;
   }
   
   if(inputPropertySet == """") 
   {
      return(CancelOperation);
   }
   
   // Copy the siebel message 
   siebelMessage = inputPropertySet.Copy();

   // There is only one child property set to Siebel Message, ListOf*
   child = siebelMessage.GetChild(0);
   if(child == """")
   {
      return(CancelOperation);
   }
   
   // Loop through the child property sets (ie Accounts, Orders, etc) and remove everything
   // but the integration id.
   numOfChild = child.GetChildCount();
   for(i = 0; i < numOfChild; i++)
   {
      // Get child property (ie Account, Order, etc) at index i
      child = child.GetChild(i);
      // Get the first property of that property set
      property = child.GetFirstProperty();
      // Loop through the properties of this child removing anything
      // that is not an integration id
      while(property != """")
      {
         if(property != ""Integration Id"")
         {
            child.RemoveProperty(property);
         }
         property = child.GetNextProperty();
      }
      num = child.GetChildCount();
      // Loop through the child property sets of this property set (ie Account, Order, etc)
      // and remove them.
      for(j = 0; j < num; j++) 
      {
         child.RemoveChild(i);
      }  
    }         
   Outputs.AddChild(siebelMessage);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   if (MethodName == ""IsolateIntegrationId"")
   {
   		IsolateIntegrationId(Inputs, Outputs);
   		return (CancelOperation);
   }
   return (ContinueOperation);
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// DESCRIPTION
//    Javascript maps to Siebel Price List from Oracle Price List
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function GetLDC (LookupType, LangIndepntValue) 
{ 
	var LangDepntValue = TheApplication().InvokeMethod(""LookupValue"", LookupType, LangIndepntValue);
	return LangDepntValue;
}
function OracleToSiebel (InputMsg,OutputMsg)
{
	// Variables to hold the primary integration components.
	var OraclePrimIntComp, SiebelPrimIntComp ;
	
	// Variables to hold the integration components.
	var OracleIntComp, SiebelIntComp ;
	
	var freightlookup  = EAIGetValueMap(""Oracle Freight"",""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	var shippinglookup = EAIGetValueMap (""Oracle Ship Method Code"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);
	
	// variable to hold the input integration object
	var OracleIntObject;
	
	// variable to hold the output integration object
	var SiebelIntObject;
	
	var EarliestDt = ""01/01/1980 00:00:00"";
	
	
	// Organizations (All Organizations in Siebel)
	var OrgId = new Array();
	var OrgCounter = 0;
	
	
	// Organizations (All Organizations in Siebel)
		
	var OrgBusObject = TheApplication().GetBusObject(""Organizations"") ;
	
	// Get the business component from the business object
	var OrgBusComp = OrgBusObject.GetBusComp(""Organization"") ;
	
	OrgBusComp.SetViewMode(3);
	// Get all organizations
	OrgBusComp.ClearToQuery();
	OrgBusComp.ExecuteQuery();
	
	var hasMoreRecords = OrgBusComp.FirstRecord();
				
	// While there are more records iterate through
	while(hasMoreRecords)
	{
		OrgId[OrgCounter] = OrgBusComp.GetFieldValue(""Id"");
		OrgCounter = OrgCounter + 1;
				
		hasMoreRecords = OrgBusComp.NextRecord();
	}
	
				
		
	// Locate the input integration object in the input message
	OracleIntObject = 
		InputMsg.GetIntObj(""Pricing - Get Oracle Price List (Oracle)"");
	
	// If the integration object exists in the input message	
	if(OracleIntObject.Exists())
	{
		// Create the output integration object in the output message
		SiebelIntObject = 
			OutputMsg.CreateIntObj(""Pricing - Get Oracle Price List (Siebel)"") ;
		
		while(OracleIntObject.NextInstance())
		{	 
			
			SiebelIntObject.NewInstance() ;
			OraclePrimIntComp = OracleIntObject.GetPrimaryIntComp(""SIE_PRICE_LISTS_V"") ;
	
			if(OraclePrimIntComp.Exists())
			{
				// Price List
				SiebelPrimIntComp = SiebelIntObject.CreatePrimaryIntComp(""Price List"") ;
				
				while (OraclePrimIntComp.NextRecord())
				{
				
					SiebelPrimIntComp.NewRecord() ;
					SiebelPrimIntComp.SetCopySource(OraclePrimIntComp) ;
				
					// Set the operation code for this Siebel integration component.
					SetOperationCode(SiebelPrimIntComp, OraclePrimIntComp);
					
					SiebelPrimIntComp.CopyFieldValue(""Currency Code"", ""CURRENCY_CODE"");
					SiebelPrimIntComp.CopyFieldValue(""Description"", ""DESCRIPTION"") ;
					SiebelPrimIntComp.SetFieldValue(""Freight Terms"",freightlookup.Translate(OraclePrimIntComp.GetFieldValue(""FREIGHT_TERMS_CODE"")));
					SiebelPrimIntComp.CopyFieldValue(""Name"", ""NAME"") ;
					SiebelPrimIntComp.CopyFieldValue(""Payment Integration Id"", ""TERMS_ID"") ;
					SiebelPrimIntComp.CopyFieldValue(""Integration Id"", ""INTEGRATION_ID"") ;
		            SiebelPrimIntComp.SetFieldValue (""Type"", ""PRICE LIST"");
					SiebelPrimIntComp.SetFieldValue(""Shipping Method"", shippinglookup.Translate(OraclePrimIntComp.GetFieldValue(""SHIP_METHOD_CODE"")));
					var PLStartDt = OraclePrimIntComp.GetFieldValue(""START_DATE_ACTIVE"");
					var PLEndDt = OraclePrimIntComp.GetFieldValue(""END_DATE_ACTIVE"");
											
					if ((PLStartDt == null) || (PLStartDt == """"))
					{
						PLStartDt = EarliestDt;
					}
					
					if ((PLEndDt != null) && (PLEndDt != """") &&
						(SiebeltoDate(PLStartDt).getTime() > SiebeltoDate(PLEndDt).getTime()))
					{
		  				PLEndDt = PLStartDt;
	  				}
	  						  						  				
	  				SiebelPrimIntComp.SetFieldValue(""Start Date"", PLStartDt);
	  				SiebelPrimIntComp.SetFieldValue(""End Date"", PLEndDt) ;
					
					
					
					// Price List Items
					OracleIntComp = OraclePrimIntComp.GetIntComp(""SIE_PRICE_LIST_LINES_V"") ;
					
					if(OracleIntComp.Exists())
					{
						SiebelIntComp = SiebelPrimIntComp.CreateIntComp(""Internal Product"") ;
						
						SiebelIntComp.SetCopySource(OracleIntComp) ;
						
						while(OracleIntComp.NextRecord())
						{
							SiebelIntComp.NewRecord() ;
							
							// Set the operation code for this Siebel integration component.				
							SetOperationCode(SiebelIntComp, OracleIntComp);
							SiebelIntComp.CopyFieldValue(""List Price"", ""LIST_PRICE"") ;
							SiebelIntComp.CopyFieldValue(""Price List Item Integration Id"", ""INTEGRATION_ID"") ;
							SiebelIntComp.CopyFieldValue(""Integration Id"", ""INVENTORY_ITEM_ID"") ;
							SiebelIntComp.SetFieldValue (""List Price Type Code"", ""STANDARD"");			
							SiebelIntComp.CopyFieldValue(""Volume Discount"", ""DISCOUNT_NAME"");
							SiebelIntComp.CopyFieldValue(""Price List Item Start Date"", ""START_DATE_ACTIVE"");
							SiebelIntComp.CopyFieldValue(""Price List Item End Date"", ""END_DATE_ACTIVE"");
						}
					}
					else
					{		
				
						// Attaching the Price List to all Organizations in Siebel
				
						var SiebelPLOrgIntComp = SiebelPrimIntComp.CreateIntComp(""Price List_Organization"");
						
					    for (var i=0; i<OrgId.length; i++)
						{
							SiebelPLOrgIntComp.NewRecord() ;
														
							// Set the operation code for this Siebel integration component.				
						    SiebelPLOrgIntComp.SetFieldValue(""operation"", ""upsert"");
							SiebelPLOrgIntComp.SetFieldValue(""Division Id"", OrgId[i]);
						}
					}
					
				} // while (OraclePrimIntComp.NextRecord())
			} // if(OraclePrimIntComp.Exists())
		} // while(OracleIntObject.NextInstance())
	} //if(OracleIntObject.Exists())	
} // function OracleToSiebel"
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"/**
 * This function will read the field 'SysOp' from the Oracle integration 
 * component and depending on the value of that field, we will have to
 * populate the Siebel integration component with the values
 * ""delete"" or ""upsert"". The field that should be populated in the Siebel
 * side is ""operation"".
 */
function SetOperationCode(SiebelIntComp, OracleIntComp)
{
	var opCode = OracleIntComp.GetFieldValue(""SysOp"");
	if(opCode == ""D"")
	{
		SiebelIntComp.SetFieldValue (""operation"", ""delete"");
	}
	else
		SiebelIntComp.SetFieldValue (""operation"", ""upsert"");
}
function SiebeltoDate(SiebelDate)
{
	var split1 = SiebelDate.split(""/"");
	var split2 = split1[2].split("" "");
	var split3 = split2[1].split("":"");
	return new Date(split2[0], split1[0]-1, split1[1], split3[0], split3[1], split3[2]);
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 4 $
//      $Date: 12/10/99 10:29a $
//    $Author: Achaudhr $ of last update
//
// CREATOR:    R.Lankinen
//
// DESCRIPTION
//    Multi-organization Javascript maps from Siebel Account to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js"""
function CheckDiscountMatrixGroup (inputMsg, outputMsg) 
{ 
  /*  Referenced in workflow Pricing - Pricing - Receive SAP 46C Discounts or Surcharges
    * Input Object:
    *  Pricing - Send or Receive SAP 46C Condition (COND_A02)
    *       
    *
    * Output Object's Integration Components:
    *  set property ""Adjustment Group Exists"" to TRUE of FALSE in outputMsg
    *  depending on the resilts of the search
    */

   /*
    * Set up EAI Input Message objects
    */
	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Pricing Header


   /*
    * Find and create top-level integration object
    */
	iIDOCObj	= inputMsg.GetIntObj     (""Pricing - Send or Receive SAP 46C Condition (COND_A02)"");
  
	while (iIDOCObj.NextInstance ())
	{
		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();

		// Read ""KOMG"" component (Pricing Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		if (iKOMGComp.NextRecord ())
		{  
  		   	var CondTypeCode 	= iKOMGComp.GetFieldValue (""KSCHL"");
		  	var TableNumber		= iKOMGComp.GetFieldValue (""KOTABNR"");
			var TableUsage		= iKOMGComp.GetFieldValue (""KVEWE"");
		   	var TableName		= TableUsage + TableNumber;
			
			var AdjGrpBusObject = TheApplication().GetBusObject(""Adjustment Group"");
			var AdjGrpBusComp = VolDiscBusObject.GetBusComp(""Adjustment Group"");
		
			AdjGrpBusComp.ClearToQuery();
    		AdjGrpBusComp.SetSearchSpec(""SAP Condition Name"", CondTypeCode);	// need to add into BC
			AdjGrpBusComp.SetSearchSpec(""SAP Table Name"", TableName);			// need to add into BC
			AdjGrpBusComp.ExecuteQuery();
		
			if(AdjGrpBusComp.FirstRecord())	outputMsg.SetArgument(""Adjustment Group Exists"", ""True"");
      		else							outputMsg.SetArgument(""Adjustment Group Exists"", ""False"");
		}
	}
}
function CheckSAPConditionTypeAndScale (inputMsg, outputMsg) 
{ // Start - Function
  /*  Referenced in workflow Pricing - Recieve SAP 46C Condition Records
    * Input Object:
    *  Pricing - Send or Receive SAP 46C Condition (COND_A02)
    *       
    *
    * Output Object's Integration Components:
    *  set property ""Condition Type"" to Price List or Discount Matrices in outputMsg
    *  depending on SAP Prcing Condition Type
    */

   /*
    * Set up EAI Input Message objects
    */
	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Filter
	var iKONHComp; 		// IDOC Header
	var iKONPComp; 		// IDOC Items
	
	var oPriceObj;		//
	var oPriceComp;		//
	
   /*
    * Temp Variables
    */	
   var AdjustmentGroupExists	= false;
   var VolumeDiscountExists 	= false;	
	

   /*
    * EAI Lookup Maps
    */
	var condTypeLM   = EAIGetValueMap (""SAP Pricing Condition Class"", ""Siebel Inbound"", ""Unknown Condition Type"" );

   /*
    * Find and create top-level integration object
    */
	iIDOCObj	= inputMsg.GetIntObj (""Pricing - Send or Receive SAP 46C Condition (COND_A02)"");
  
	if (iIDOCObj.NextInstance ())
	{
		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();

		// Read ""KOMG"" segment
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		if (iKOMGComp.NextRecord ())
		{  

			var UsageCode	= iKOMGComp.GetFieldValue (""KVEWE""); // Condition Table usage
			var TableNbr	= iKOMGComp.GetFieldValue (""KOTABNR""); // Condition Table number
			var CondType	= iKOMGComp.GetFieldValue (""KSCHL""); // Condition Type
			var ExtSysVal	= UsageCode + TableNbr + CondType;

   			var ConditionType 	= condTypeLM.Translate (CondType);
   			outputMsg.SetArgument(""Condition Type"", ConditionType);
  	
			if (ConditionType == ""Discount Matrix"")
			{
			var AdjGrpId	= GetAdjustmentId (ExtSysVal);
				if (AdjGrpId == null)
				{
 					AdjustmentGroupExists 	= false;
				}
				else
				{
					AdjustmentGroupExists 	= true;
				}
			}
			
			// Read ""KONH"" segment (Condition Header)

			iKONHComp = iKOMGComp.GetIntComp (""E2KONH"");
			if (iKONHComp.NextRecord ())
			{
				// Read ""KONP"" segment (Condition Items)
				iKONPComp = iKONHComp.GetIntComp (""E2KONP002"");
				if (iKONPComp.NextRecord ())
				// Check Scale basis indicator
				{
					var VolumeDiscInd	= iKONPComp.GetFieldValue (""KZBZG""); // Scale Basis Indicator
					if (VolumeDiscInd == """")
					{
						VolumeDiscountExists 	= false;
					}
					else
					{
						VolumeDiscountExists 	= true;
					}
				}
			}// iKONHComp
			
		   	oPriceObj = outputMsg.CreateIntObj (""Pricing - Send or Receive SAP 46C Condition (COND_A02)"");
   			oPriceObj.NewInstance ();
   			oPriceComp = oPriceObj.CreatePrimaryIntComp (""Idoc Segments"");
   			oPriceComp.NewRecord ();
   			
   			
   			if (VolumeDiscountExists)
   			{
      			outputMsg.SetArgument(""Volume Discount Exists"", ""True"");
      		}
      		else
      		{
      			outputMsg.SetArgument(""Volume Discount Exists"", ""False"");
   			}

   			if (AdjustmentGroupExists)
   			{
      			outputMsg.SetArgument(""Adjustment Group Exists"", ""True"");
      		}
      		else
      		{
      			outputMsg.SetArgument(""Adjustment Group Exists"", ""False"");
   			}

//		   	var ConditionType 	= condTypeLM.Translate (CondType);
//		   	outputMsg.SetArgument(""Condition Type"", ConditionType);

		} // End - iKOMGComp
	} // End - iIDOCObj.NextInstance
	
   			
			
} // End - Function"
function CreateAdjustmentGroup_46CIDOCToSiebel (inputMsg, outputMsg) 
{ 	// Start
  /*  Referenced in workflow Pricing - Pricing - Create Discount Matrices Dimension
    * Input Integration Object:
    *  Pricing - Send or Receive SAP 46C Condition (COND_A02)
    *       
    *
    * Output Integration Object:
    *  Pricing - Send or Receive SAP 46C Discount Matrix
    */

    // Set up EAI Input Message objects
   	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Condition Structures

	// Set up EAI Output Message objects - Write to Output IntObj
	var oAdjGroupObj;		// Siebel Adjustment Group instance
	var oAdjGroupHeader;	// Adjustment Group
	var oAdjGroupDim;		// Adjustment Dimension

    // EAI Lookup Maps
  	var discTypeLM		= EAIGetValueMap (""SAP Pricing Discount Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );
	var dMatrixNameLM	= EAIGetValueMap (""SAP Condition Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );
	var tblKeyFieldLM	= EAIGetValueMap (""SAP Table Key Field Xref"", ""Siebel Inbound"", ""Unknown XRef Field"" );
	var XRefFieldLM		= EAIGetValueMap (""SAP Key Field"", ""Siebel Inbound"", ""Unknown XRef Field"" );


   //  Find and create top-level integration object	
	iIDOCObj		= inputMsg.GetIntObj     (""Pricing - Send or Receive SAP 46C Condition (COND_A02)"");
	oAdjGroupObj	= outputMsg.CreateIntObj (""Pricing - Send or Receive SAP 46C Discount Matrix"");

	// Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{	// Start Read ""IDOC"" 
	
		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();
	
		// Create ""Adjusmnt Group"" Object
		oAdjGroupObj.NewInstance ();

		// Read ""KOMG"" component (Condition Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		while (iKOMGComp.NextRecord ())
		{  	// Start Read ""KOMG"" Component
			// Map data to ""Adjustment Group"" Intergration Component
			// Create ""Adjustment Group"" component in output message
			oAdjGroupHeader 	= oAdjGroupObj.CreatePrimaryIntComp (""Adjustment Group"");
			oAdjGroupHeader.NewRecord ();
			oAdjGroupHeader.SetCopySource (iKOMGComp);
			oAdjGroupHeader.SetFieldValue (""operation"", ""sync""); // Set operation method

			var UsageCode	= iKOMGComp.GetFieldValue (""KVEWE""); // Condition Table usage
			var TableNbr	= iKOMGComp.GetFieldValue (""KOTABNR""); // Condition Table number
			var CondType	= iKOMGComp.GetFieldValue (""KSCHL""); // Condition Type
			var ExtSysVal	= UsageCode + TableNbr + CondType;
			
			// Intergration Id
			oAdjGroupHeader.SetFieldValue (""Integration Id"", ExtSysVal);

			// Name
			var GroupName	= dMatrixNameLM.Translate (iKOMGComp.GetFieldValue (""KSCHL""));	// Condition Type
			oAdjGroupHeader.SetFieldValue (""Name"", GroupName);
			oAdjGroupHeader.SetFieldValue (""Description"", GroupName);

			// Discount Matrix Type
			var DiscType	= discTypeLM.Translate (iKOMGComp.GetFieldValue (""KSCHL""));	// Condition Type
			var MatrixType	= TheApplication().InvokeMethod (""LookupValue"", ""ADJ_GROUP_TYPE"", DiscType);
			oAdjGroupHeader.SetFieldValue (""Adjustment Group Type"", 	MatrixType);

			// Setup SAP Parameters
//			oAdjGroupHeader.SetFieldValue (""SAP Table Name"", TableName);	// Not yet maintained in BC
//			oAdjGroupHeader.CopyFieldValue (""SAP Condition Name"",""KSCHL"");	// Not yet maintained in BC

			// Set Status to ""Active""
//			var Status	= TheApplication().InvokeMethod (""LookupValue"", ""MATRIX_DEFN_STATUS"", ""Active"");	
//			oAdjGroupHeader.SetFieldValue (""Status"", Status); 


			// Set up Adjustment Dimension
			oAdjGroupDim = oAdjGroupHeader.CreateIntComp (""Adjustment Dimension"", false);
				
			// Get SAP TBL Key Field(s)
			var TBLKeys		= tblKeyFieldLM.Translate (ExtSysVal);	// Application + Table + Condition Type
			var keyArray	= TBLKeys.split(""::"");
	
			var seqNo		= 10;
			for (var i = 0; i < keyArray.length; i++)
			{
				oAdjGroupDim.NewRecord();
				oAdjGroupDim.SetFieldValue (""operation"", ""sync""); 
				
				var Key		= keyArray[i];
				var XRef	= XRefFieldLM.Translate (Key);
				oAdjGroupDim.SetFieldValue (""Display Sequence"", seqNo);
				oAdjGroupDim.SetFieldValue (""Field"", XRef);
				seqNo		= seqNo + 10;
			}
					
		}	// End Read ""KOMG"" Component
	}	// End Read ""IDOC"" 
}	// End"
function GetAccountId (Customer)
{
	var AccBusObject = TheApplication().GetBusObject(""Account"");
	var AccBusComp = AccBusObject.GetBusComp(""Account"");
		
	AccBusComp.SetViewMode(3);  // All Mode
	AccBusComp.ClearToQuery();
    AccBusComp.SetSearchSpec(""Integration Id"", Customer);
	AccBusComp.ActivateField(""Id"");
	AccBusComp.ExecuteQuery();
		
	if(AccBusComp.FirstRecord())
	{
	   return AccBusComp.GetFieldValue(""Id"");
	}
      	else
           return null;
}
function GetAdjustmentId (ExtSysVal)
{
	var AdjGrpBusObject = TheApplication().GetBusObject(""Adjustment Group"");
	var AdjGrpBusComp = AdjGrpBusObject.GetBusComp(""Adjustment Group"");
		
	AdjGrpBusComp.SetViewMode(3);  // All Mode
	AdjGrpBusComp.ClearToQuery();
    AdjGrpBusComp.SetSearchSpec(""Integration Id"", ExtSysVal);	// 
	AdjGrpBusComp.ActivateField(""Id"");
	AdjGrpBusComp.ExecuteQuery();
		
	if(AdjGrpBusComp.FirstRecord())
	{
	   return AdjGrpBusComp.GetFieldValue(""Id"");
	}
      	else
           return null;
}
function GetCurrencyCode (SalesOrg, DistChan)
{
	var OrgBusObject = TheApplication().GetBusObject(""Organizations"");
	var OrgBusComp = OrgBusObject.GetBusComp(""Organization"");
	
	OrgBusComp.SetViewMode(3);  // All Mode	
	OrgBusComp.ClearToQuery();
    OrgBusComp.SetSearchSpec(""Back Office Sales Organization"", SalesOrg);
	OrgBusComp.SetSearchSpec(""Back Office Distribution Channel"", DistChan);
	OrgBusComp.ActivateField(""Currency Code"");
	OrgBusComp.ExecuteQuery();
		
	if(OrgBusComp.FirstRecord())
	{
	   return OrgBusComp.GetFieldValue(""Currency Code"");
	}
      	else
           return null;
}
function GetProductId (Product)
{
	var PrdBusObject = TheApplication().GetBusObject(""Internal Product"");
	var PrdBusComp = PrdBusObject.GetBusComp(""Internal Product"");
		
	PrdBusComp.SetViewMode(3);  // All Mode
	PrdBusComp.ClearToQuery();
    PrdBusComp.SetSearchSpec(""Integration Id"", Product);
	PrdBusComp.ActivateField(""Id"");
	PrdBusComp.ExecuteQuery();
		
	if(PrdBusComp.FirstRecord())
	{
	   return PrdBusComp.GetFieldValue(""Id"");
	}
      	else
           return null;
}
function GetVolumeDiscountId (Int_ID)
{
	var VolDiscBusObject = TheApplication().GetBusObject(""Admin Volume Discount"");
	var VolDiscBusComp = VolDiscBusObject.GetBusComp(""Volume Discount"");
		
	VolDiscBusComp.SetViewMode(3);  // All Mode
	VolDiscBusComp.ClearToQuery();
    VolDiscBusComp.SetSearchSpec(""Integration Id"", Int_ID);
	VolDiscBusComp.ActivateField(""Id"");
	VolDiscBusComp.ExecuteQuery();
		
	if(VolDiscBusComp.FirstRecord())
	{
	   return VolDiscBusComp.GetFieldValue(""Id"");
	}
      	else
           return null;
}
function ReceiveAdminPriceList_46CIDOCToSiebel (inputIDOC, outputPriceList) 
{ 	// Start
  /*  Referenced in workflow Pricing - Receive SAP 46C Price
    * Input Integration Object:
    *  Pricing - Send or Receive SAP 46C Condition (COND_A02)
    *       
    *
    * Output Integration Object:
    *  Pricing - Send or Receive SAP 46C Price List
    */

    // Set up EAI Input Message objects
   	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Condition Structures
	var iKONHComp; 		// IDOC Condition Header
	var iKONPComp; 		// IDOC Condition Item

	// Set up EAI Output Message objects - Write to Output IntObj
	var oPriceListObj;		// Siebel Price List instance
	var oPriceListHeader;	// Price List
	var oPriceListItem;		// Price List Item
	var oPriceListOrg;		// Price List Org

    // EAI Lookup Maps
	var currLM		= EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"", ""Unknown Currency Code"" );
	var pListNameLM	= EAIGetValueMap (""SAP Condition Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );

   //  Find and create top-level integration object	
	iIDOCObj		= inputIDOC.GetIntObj  	(""Pricing - Send or Receive SAP 46C Condition (COND_A02)"");
	oPriceListObj	= outputPriceList.CreateIntObj 	(""Pricing - Send or Receive SAP 46C Price List"");

	// Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{	// Start Read ""IDOC"" 

		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();
		
		// Create ""PriceList"" Object
		oPriceListObj.NewInstance ();

		// Read ""KOMG"" component (Condition Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		while (iKOMGComp.NextRecord ())
		{  	// Start Read ""KOMG"" Component
			// Map data to ""Price List"" Intergration Component
			// Create ""Price List"" component in output message
			oPriceListHeader = oPriceListObj.CreatePrimaryIntComp (""Price List"");
			oPriceListHeader.NewRecord ();
			oPriceListHeader.SetCopySource (iKOMGComp);
			oPriceListHeader.SetFieldValue (""operation"", ""sync""); // Set operation method

			var Usage		= iKOMGComp.GetFieldValue (""KVEWE""); // Usage of Condition Table
			var CondTbl		= iKOMGComp.GetFieldValue (""KOTABNR""); // Condition Table
			var CondType	= iKOMGComp.GetFieldValue (""KSCHL""); // Condition Type
			var ItemDesc	= iKOMGComp.GetFieldValue (""VAKEY_LONG""); // Description
			var SalesOrg 	= iKOMGComp.GetFieldValue (""VKORG""); // Sales Organization
			var DistChan 	= iKOMGComp.GetFieldValue (""VTWEG""); // Distribution Channel
			var Material 	= iKOMGComp.GetFieldValue (""MATNR""); // Material
			var VarKey	 	= iKOMGComp.GetFieldValue (""VAKEY""); // Variable Key
		
			// Set up Price List name
			var ListName	= pListNameLM.Translate (iKOMGComp.GetFieldValue (""KSCHL"")); // Condition Type
			var PListName	= ListName + Usage + CondTbl + ""::"" + CondType + ""::"" + SalesOrg + ""::"" + DistChan;
			oPriceListHeader.SetFieldValue (""Name"", PListName);
			oPriceListHeader.SetFieldValue (""Description"", PListName);
						
			// Setup Integration Id (Sales Org Code + Distribution Channel Code + Condition Type + Usage + Table)
			var IntegrationId	=	SalesOrg + DistChan + CondType + Usage + CondTbl;
			oPriceListHeader.SetFieldValue (""Integration Id"", IntegrationId);
			oPriceListHeader.SetFieldValue (""Start Date"", Timestamp());

			// Currency Code (Header)
			var CurrencyCode	=	GetCurrencyCode (SalesOrg, DistChan);
			oPriceListHeader.SetFieldValue (""Currency Code"", CurrencyCode);

			// Set up Price List Organization
			oPriceListOrg = oPriceListHeader.CreateIntComp (""Price List_Organization"", false);
			
			var OrgBusObject	= TheApplication().GetBusObject(""Organizations"") ;
			var OrgBusComp 		= OrgBusObject.GetBusComp(""Organization"") ;
			OrgBusComp.SetViewMode(3);  // All Mode

			OrgBusComp.ClearToQuery();
			OrgBusComp.SetSearchSpec(""Back Office Sales Organization"", SalesOrg);
			OrgBusComp.SetSearchSpec(""Back Office Distribution Channel"", DistChan);
			OrgBusComp.ActivateField(""Organization Id"");
			OrgBusComp.ActivateField(""Organization"");
			OrgBusComp.ActivateField(""Location"");
			OrgBusComp.ExecuteQuery();
			
			var hasMoreRecords 	= OrgBusComp.FirstRecord();
			while ( hasMoreRecords )
			{
				var OrgID	 	= OrgBusComp.GetFieldValue(""Organization Id"");
				var OrgName	 	= OrgBusComp.GetFieldValue(""Organization"");
				var Loc		 	= OrgBusComp.GetFieldValue(""Location"");
				oPriceListOrg.NewRecord();
				oPriceListOrg.SetFieldValue (""operation"", ""sync""); 
				oPriceListOrg.SetFieldValue(""Organization Id"", OrgID);
				oPriceListOrg.SetFieldValue(""Organization"", OrgName);
				oPriceListOrg.SetFieldValue(""Location"", Loc);
				oPriceListOrg.SetFieldValue (""IsPrimaryMVG"", ""Y"");
				hasMoreRecords = OrgBusComp.NextRecord();
			}												
			// Set Primary Org Id
			oPriceListHeader.SetFieldValue (""Primary Organization Id"", OrgID);

			// Read ""KONH"" component 
			iKONHComp = iKOMGComp.GetIntComp (""E2KONH"");
			oPriceListItem = oPriceListHeader.CreateIntComp (""Price List Item - UAN"", false);
			while (iKONHComp.NextRecord ())
			{	// Start Read ""KONH"" Component
				oPriceListItem.SetCopySource (iKONHComp);
								
				// Set up Description & Integration Id
				var IntID	= iKONHComp.GetFieldValue (""KNUMH""); 	
				
				// Set up Start & End Dates
				var StrDate		= iKONHComp.GetFieldValue (""DATAB"");
				var EndDate		= iKONHComp.GetFieldValue (""DATBI"");
				var chkDate		= EndDate.substring(0,10); 
				
				// Read ""KONP"" Component
				iKONPComp = iKONHComp.GetIntComp (""E2KONP002"");
				while (iKONPComp.NextRecord ())
				{	// Start Read ""KONP"" Component
					oPriceListItem.NewRecord (); //+
					oPriceListItem.SetCopySource (iKONPComp);
					oPriceListItem.SetFieldValue (""operation"", ""sync""); //+
					
					oPriceListItem.SetFieldValue (""Integration Id"",IntID);
					oPriceListItem.SetFieldValue (""Description"", ItemDesc);
					oPriceListItem.SetFieldValue (""Product Name"", Material);// Material
					oPriceListItem.SetFieldValue (""Product Integration Id"", Material);// Product Integration Id
					oPriceListItem.CopyFieldValue (""Original List Price"", ""KBETR"");// Rate
					oPriceListItem.CopyFieldValue (""Min Sale Price"", ""MXWRT"");// Lower Limit
					oPriceListItem.CopyFieldValue (""Max Sale Price"", ""GKWRT"");// Upper Limit
					oPriceListItem.SetFieldValue (""Start Date"", StrDate);
					if ( chkDate != ""12/31/9999"" )
						{
							oPriceListItem.SetFieldValue (""End Date"", EndDate);
						}

					// Volume Discount
					oPriceListItem.SetFieldValue (""Volume Discount Id"", null); 
					var VolumeDiscInd	= iKONPComp.GetFieldValue (""KZBZG""); // Scale Basis Indicator
					if (VolumeDiscInd != null || VolumeDiscInd != """")
					{
						var VolumeDiscountId = GetVolumeDiscountId (IntID);
						oPriceListItem.SetFieldValue (""Volume Discount Id"", VolumeDiscountId); 	
					}					
					
				}	// End Read ""KONP"" Component			
			}	// End Read ""KONH"" Component							
		}	// End Read ""KOMG"" Component
	}	// End Read ""IDOC"" 
}	// End"
function ReceiveProductBasedAdjustment_46CIDOCToSiebel (inputMsg, outputMsg) 
{ 	// Start
  /*  Referenced in workflow Pricing - Receive SAP 46C Price
    * Input Integration Object:
    *  Pricing - Send or Receive SAP 46C Condition (COND_A02)
    *       
    *
    * Output Integration Object:
    *  Pricing - Send or Receive SAP 46C Discount Matrix
    */

    // Set up EAI Input Message objects
   	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Condition Structures
	var iKONHComp; 		// IDOC Condition Header
	var iKONPComp; 		// IDOC Condition Item

	// Set up EAI Output Message objects - Write to Output IntObj
	var oPBAdjustmentObj;	// Siebel Product-Based instance
	var oAdjustmentGroup;	// Siebel Adjustment Group instance
	var oPBAdjustment;		// Siebel Product-Based Adjustment 
	
    // EAI Lookup Maps
   	var discTypeLM		= EAIGetValueMap (""SAP Pricing Discount Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );
	var dMatrixNameLM	= EAIGetValueMap (""SAP Condition Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );
	var currLM			= EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"", """" );
	var prcClassLM		= EAIGetValueMap (""SAP Pricing Scale Calculation"", ""Siebel Inbound"" );

   //  Find and create top-level integration object	
	iIDOCObj			= inputMsg.GetIntObj     (""Pricing - Send or Receive SAP 46C Condition (COND_A02)"");
	oPBAdjustmentObj	= outputMsg.CreateIntObj (""Pricing - Send or Receive SAP 46C Discount Matrix"");

	// Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{	// Start Read ""IDOC"" 
		oPBAdjustmentObj.NewInstance ();

		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();

		// Read ""KOMG"" component (Condition Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		if (iKOMGComp.NextRecord ())
		{  	// Start Read ""KOMG"" Component 
			// Map data to ""Adjustment"" Intergration Component
			oAdjustmentGroup = oPBAdjustmentObj.CreatePrimaryIntComp (""Adjustment Group"");
			oAdjustmentGroup.NewRecord ();
			oAdjustmentGroup.SetCopySource (iKOMGComp);
//			oAdjustmentGroup.SetFieldValue (""operation"", ""sync""); // Set operation method
			
			var UsageCode	= iKOMGComp.GetFieldValue (""KVEWE""); // Condition Table usage
			var TableNbr	= iKOMGComp.GetFieldValue (""KOTABNR""); // Condition Table number
			var CondType	= iKOMGComp.GetFieldValue (""KSCHL""); // Condition Type
			var SalesOrg 	= iKOMGComp.GetFieldValue (""VKORG""); // Sales Organization Code
			var DistChan 	= iKOMGComp.GetFieldValue (""VTWEG""); // Distribution Channel Code
			var Division 	= iKOMGComp.GetFieldValue (""SPART""); // Division Code
			var Customer 	= iKOMGComp.GetFieldValue (""KUNNR""); // Customer
			var Product 	= iKOMGComp.GetFieldValue (""MATNR""); // Material
			var VarKey	 	= iKOMGComp.GetFieldValue (""VAKEY""); // Variable key
			var ExtSysVal	= UsageCode + TableNbr + CondType;

			// Name
			var GroupName	= dMatrixNameLM.Translate (iKOMGComp.GetFieldValue (""KSCHL""));	// Condition Type
			oAdjustmentGroup.SetFieldValue (""Name"", GroupName);

			// Discount Matrix Type
			var DiscType	= discTypeLM.Translate (iKOMGComp.GetFieldValue (""KSCHL""));	// Condition Type
			var MatrixType	= TheApplication().InvokeMethod (""LookupValue"", ""ADJ_GROUP_TYPE"", DiscType);
			oAdjustmentGroup.SetFieldValue (""Adjustment Group Type"", 	MatrixType);
			
			// Integration Id
			oAdjustmentGroup.SetFieldValue (""Integration Id"", ExtSysVal);
		
			//	Get Adjustment Id
			var AdjGrpId	= GetAdjustmentId (ExtSysVal);
							
   		    // Read ""KONH"" component 
			iKONHComp = iKOMGComp.GetIntComp (""E2KONH"");
			oPBAdjustment = oAdjustmentGroup.CreateIntComp (""Product-Based Adjustment - UAN"", false);
			while (iKONHComp.NextRecord ())
			{	// Start Read ""KONH"" Component
				oPBAdjustment.SetCopySource (iKONHComp);
				
				// Setup Integration Id
				var IntID	= iKONHComp.GetFieldValue (""KNUMH""); 	
				
				// Set up Start & End Dates
				var StrDate		= iKONHComp.GetFieldValue (""DATAB"");
				var EndDate		= iKONHComp.GetFieldValue (""DATBI"");
				var chkDate		= EndDate.substring(0,10);


				// Read ""KONP"" Component
				iKONPComp = iKONHComp.GetIntComp (""E2KONP002"");
				while (iKONPComp.NextRecord ())
				{	// Start Read ""KONP"" Component
					oPBAdjustment.NewRecord ();
					oPBAdjustment.SetCopySource (iKONPComp);
					oPBAdjustment.SetFieldValue (""operation"", ""upsert""); // Set operation method

					oPBAdjustment.SetFieldValue (""Integration Id"", IntID); // Integration Id
					oPBAdjustment.SetFieldValue (""Adjustment Group Id"", AdjGrpId); // Group Id

					// Effective Dates
					oPBAdjustment.SetFieldValue (""Effective Start Date"", StrDate);										
					if ( chkDate !== ""12/31/9999"" )
					{
						oPBAdjustment.SetFieldValue (""Effective End Date"", EndDate);
					}

					//Check Sales Organization
					if (SalesOrg != null || SalesOrg != """")
					{
						oPBAdjustment.SetFieldValue (""Sales Organization Code"", SalesOrg); 	
					}

					//Check Distribution Channel
					if (DistChan != null || DistChan != """")
					{
						oPBAdjustment.SetFieldValue (""Distribution Channel Code"", DistChan); 	
					}
					
					//Check Division Code
					if (Division != null || Division != """")
					{
						oPBAdjustment.SetFieldValue (""Division Code"", Division); 	
					}					
					
					//Check Product
					if (Product != null || Product != """")
					{
						var ProductId = GetProductId (Product);
						oPBAdjustment.SetFieldValue (""Product Id"", ProductId); 	
					}					
					
					//Check Account
					if (Customer != null || Customer != """")
					{
						var AccountId = GetAccountId (Customer);
						oPBAdjustment.SetFieldValue (""Account Id"", AccountId); 	
					}
					
					// Currency Code
					var CurrencyCode	= currLM.Translate (iKONPComp.GetFieldValue (""KONWA""));
					oPBAdjustment.SetFieldValue (""Currency Code"", CurrencyCode); 
					
					// Adjustment Type
					var ConditionType	= prcClassLM.Translate (CondType); // Condition Type
					var AdjustmentType		= TheApplication().InvokeMethod (""LookupValue"", ""PRICER_CALCULATION_SIMPLE_TYPE"", ConditionType);
					oPBAdjustment.SetFieldValue (""Adjustment Type"", AdjustmentType); 

					// Adjusment Amount
					oPBAdjustment.CopyFieldValue (""Adjustment Amount"", ""KBETR"");		// Rate
					
					// Volume Discount
					oPBAdjustment.SetFieldValue (""Volume Discount Id"", null);
					var VolumeDiscInd	= iKONPComp.GetFieldValue (""KZBZG""); // Scale Basis Indicator
					if (VolumeDiscInd != null || VolumeDiscInd != """")
					{
						var VolumeDiscountId = GetVolumeDiscountId (IntID);
						oPBAdjustment.SetFieldValue (""Volume Discount Id"", VolumeDiscountId); 	
					}					
		
				}	// End Read ""KONP"" Component			
			}	// End Read ""KONH"" Component
		}	// End Read ""KOMG"" Component
	}	// End Read ""IDOC"" 
}	// End"
function ReceiveVolumeDiscount_46CIDOCToSiebel (inputMsg, outputMsg) 
{ 	// Start
  /*  Referenced in workflow Pricing - Receive SAP 46C Scales
    * Input Integration Object:
    *  Pricing - Send or Receive SAP 46C Condition (COND_A02)
    *       
    *
    * Output Integration Object:
    *  Pricing - Send or Receive SAP 46C Volume Discount
    */

    // Set up EAI Input Message objects
   	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Condition Structures
	var iKONHComp; 		// IDOC Condition Header
	var iKONPComp; 		// IDOC Condition Item
	var iKONMComp; 		// IDOC Condition Quantity Scale
	var iKONWComp; 		// IDOC Condition Value Scale

	// Set up EAI Output Message objects - Write to Output IntObj
	var oVolDiscountObj;	// Siebel Volume Discount instance
	var oVolDiscountHeader;	// Volume Discount
	var oVolDiscountItem;	// Volume Discount Item

    // EAI Lookup Maps
	var discMethLM	= EAIGetValueMap (""SAP Pricing Scale Type"", ""Siebel Inbound"" );
	var prcClassLM	= EAIGetValueMap (""SAP Pricing Scale Calculation"", ""Siebel Inbound"" );

   //  Find and create top-level integration object	
	iIDOCObj		= inputMsg.GetIntObj     (""Pricing - Send or Receive SAP 46C Condition (COND_A02)"");
	oVolDiscountObj = outputMsg.CreateIntObj (""Pricing - Send or Receive SAP 46C Volume Discount"");

	// Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{	// Start Read ""IDOC"" 

		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();
		
		// Create ""Volume Discount"" Object
// nbc	oVolDiscountObj.NewInstance ();
		
		// Read ""KOMG"" component (Condition Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		while (iKOMGComp.NextRecord ())
		{  	// Start Read ""KOMG"" Component
						
			var Description		= iKOMGComp.GetFieldValue (""VAKEY_LONG""); // Long Description
			var ConditionType	= prcClassLM.Translate (iKOMGComp.GetFieldValue (""KSCHL"")); // Condition Type
			var VarKey			= iKOMGComp.GetFieldValue (""VAKEY""); // Variable Key
			
   		    // Read ""KONH"" component 
			iKONHComp = iKOMGComp.GetIntComp (""E2KONH"");
// nbc		oVolDiscountHeader = oVolDiscountObj.CreatePrimaryIntComp (""Volume Discount"");
			while (iKONHComp.NextRecord ())
			{	// Start Read ""KONH"" Component
				oVolDiscountObj.NewInstance ();	// nbc
				oVolDiscountHeader = oVolDiscountObj.CreatePrimaryIntComp (""Volume Discount""); // nbc
				oVolDiscountHeader.NewRecord ();
				oVolDiscountHeader.SetCopySource (iKONHComp);
				oVolDiscountHeader.SetFieldValue (""operation"", ""sync""); // Set operation method
	
				// Setup Name & Integration Id
				var IntID	= iKONHComp.GetFieldValue (""KNUMH"");
				var Name	= VarKey + ""::"" + IntID;								
								
				// Get Start & End Dates
				var StartDate	= iKONHComp.GetFieldValue (""DATAB"");
				var EndDate		= iKONHComp.GetFieldValue (""DATBI"");
				var chkDate		= EndDate.substring(0,10);
				
				// Read ""KONP"" Component
				iKONPComp = iKONHComp.GetIntComp (""E2KONP002"");
				while (iKONPComp.NextRecord ())
				{	// Start Read ""KONP"" Component
					// Discount Method
					var ScaleType		= discMethLM.Translate (iKONPComp.GetFieldValue (""STFKZ""));
					var DiscountMethod	= TheApplication().InvokeMethod (""LookupValue"", ""IC_COMP_TABLE_TYPE"", ScaleType);
					// Adjustment Type
					var AdjustmentType	= TheApplication().InvokeMethod (""LookupValue"", ""PRICER_CALCULATION_SIMPLE_TYPE"", ConditionType);
										
					var Percentage		= iKONPComp.GetFieldValue (""KRECH"");	
					var minQty;

					if (iKONPComp.GetFieldValue (""KZBZG"") == ""B"")	// Quantity Scale
					{	// Start Read ""KONW"" Component
						iKONWComp = iKONPComp.GetIntComp (""E2KONW"");
						oVolDiscountItem = oVolDiscountHeader.CreateIntComp (""Volume Discount Item"", false);
						while (iKONWComp.NextRecord ())
						{	// Start While iKONWComp
							oVolDiscountItem.NewRecord ();
							oVolDiscountItem.SetCopySource (iKONWComp);
							oVolDiscountItem.SetFieldValue (""operation"", ""sync""); // Set operation method
																 
							minQty		= iKONWComp.GetFieldValue (""KSTBW"");
//							oVolDiscountItem.CopyFieldValue (""Minimum Quantity"", ""KSTBW"");
							if (minQty == 0)
								{
									oVolDiscountItem.SetFieldValue (""Minimum Quantity"", 1);
								}
							else
								{
									oVolDiscountItem.SetFieldValue (""Minimum Quantity"", minQty);
								}
							oVolDiscountItem.SetFieldValue (""Adjustment Type"", AdjustmentType);
							oVolDiscountItem.CopyFieldValue (""Name"", ""KSTBW"");
							oVolDiscountItem.CopyFieldValue (""Description"", ""KSTBW"");
																
							if (Percentage == ""A"") // Percentage
								{
									oVolDiscountItem.CopyFieldValue (""Discount Percent"", ""KBETR"");
								}
							else
								{
									oVolDiscountItem.CopyFieldValue (""Adjustment Amount"", ""KBETR"");
								}
						}	// End While iKONWComp
					}	// End Read ""KONW"" Component
					
				
					if (iKONPComp.GetFieldValue (""KZBZG"") == ""C"")	// Quantity Scale
					{	// Start Read ""KONM"" Component
						iKONMComp = iKONPComp.GetIntComp (""E2KONM"");
						oVolDiscountItem = oVolDiscountHeader.CreateIntComp (""Volume Discount Item"", false);
						while (iKONMComp.NextRecord ())
						{	// Start While iKONMComp
							oVolDiscountItem.NewRecord ();
							oVolDiscountItem.SetCopySource (iKONMComp);
							oVolDiscountItem.SetFieldValue (""operation"", ""sync""); // Set operation method
								
							minQty		= iKONMComp.GetFieldValue (""KSTBM"");
//							oVolDiscountItem.CopyFieldValue (""Minimum Quantity"", ""KSTBM"");
							if (minQty == 0)
								{
									oVolDiscountItem.SetFieldValue (""Minimum Quantity"", 1);
								}
							else
								{
									oVolDiscountItem.SetFieldValue (""Minimum Quantity"", minQty);
								}
							oVolDiscountItem.SetFieldValue (""Adjustment Type"", AdjustmentType);
							oVolDiscountItem.CopyFieldValue (""Name"", ""KSTBM"");
							oVolDiscountItem.CopyFieldValue (""Description"", ""KSTBM"");
							
							if (Percentage == ""A"") // Percentage
								{
									oVolDiscountItem.CopyFieldValue (""Discount Percent"", ""KBETR"");
								}
							else 
								{
									oVolDiscountItem.CopyFieldValue (""Adjustment Amount"", ""KBETR"");
								}

							}	// End While iKONMComp
						}	// End Read ""KONM"" Component

					}	// End Read ""KONP"" Component
					oVolDiscountHeader.SetFieldValue (""Name"", Name); // Name
					oVolDiscountHeader.SetFieldValue (""Description"", Description); // Description
					oVolDiscountHeader.SetFieldValue (""Integration Id"", IntID); // Set Integration Id
					oVolDiscountHeader.SetFieldValue (""Discount Method"", DiscountMethod); // Discount Method
					oVolDiscountHeader.SetFieldValue (""Start Date"", StartDate); // Effectivity Date
					oVolDiscountHeader.SetFieldValue (""End Date"", "" ""); // Effectivity End Date
					if ( chkDate != ""12/31/9999"" )
						{
							oVolDiscountHeader.SetFieldValue (""End Date"", EndDate);
						}			
				}	// End Read ""KONH"" Component
// nbc			oVolDiscountHeader.SetFieldValue (""Name"", Name); // Name
// nbc			oVolDiscountHeader.SetFieldValue (""Description"", Description); // Description
// nbc			oVolDiscountHeader.SetFieldValue (""Integration Id"", IntID); // Set Integration Id
// nbc			oVolDiscountHeader.SetFieldValue (""Discount Method"", DiscountMethod); // Discount Method
// nbc			oVolDiscountHeader.SetFieldValue (""Start Date"", StartDate); // Effectivity Date
// nbc			if ( chkDate != ""12/31/9999"" )
// nbc				{
// nbc					oVolDiscountHeader.SetFieldValue (""End Date"", EndDate);
// nbc				}
		}	// End Read ""KOMG"" Component
	}	// End Read ""IDOC"" 
}	// End"
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{
}
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
	return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", d.getMonth()+1, d.getDate(), d.getFullYear(), d.getHours(), d.getMinutes(), d.getSeconds()); 
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 4 $
//      $Date: 12/10/99 10:29a $
//    $Author: Achaudhr $ of last update
//
// CREATOR:    R.Lankinen
//
// DESCRIPTION
//    Multi-organization Javascript maps from Siebel Account to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js"""
function CheckDiscountMatrixGroup (inputMsg, outputMsg) 
{ 
  /*  Referenced in workflow Pricing - Pricing - Receive SAP 47 Discounts or Surcharges
    * Input Object:
    *  Pricing - Send or Receive SAP 47 Condition (COND_A02)
    *       
    *
    * Output Object's Integration Components:
    *  set property ""Adjustment Group Exists"" to TRUE of FALSE in outputMsg
    *  depending on the resilts of the search
    */

   /*
    * Set up EAI Input Message objects
    */
	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Pricing Header


   /*
    * Find and create top-level integration object
    */
	iIDOCObj	= inputMsg.GetIntObj     (""Pricing - Send or Receive SAP 47 Condition (COND_A02)"");
  
	while (iIDOCObj.NextInstance ())
	{
		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();

		// Read ""KOMG"" component (Pricing Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		if (iKOMGComp.NextRecord ())
		{  
  		   	var CondTypeCode 	= iKOMGComp.GetFieldValue (""KSCHL"");
		  	var TableNumber		= iKOMGComp.GetFieldValue (""KOTABNR"");
			var TableUsage		= iKOMGComp.GetFieldValue (""KVEWE"");
		   	var TableName		= TableUsage + TableNumber;
			
			var AdjGrpBusObject = TheApplication().GetBusObject(""Adjustment Group"");
			var AdjGrpBusComp = VolDiscBusObject.GetBusComp(""Adjustment Group"");
		
			AdjGrpBusComp.ClearToQuery();
    		AdjGrpBusComp.SetSearchSpec(""SAP Condition Name"", CondTypeCode);	// need to add into BC
			AdjGrpBusComp.SetSearchSpec(""SAP Table Name"", TableName);			// need to add into BC
			AdjGrpBusComp.ExecuteQuery();
		
			if(AdjGrpBusComp.FirstRecord())	outputMsg.SetArgument(""Adjustment Group Exists"", ""True"");
      		else							outputMsg.SetArgument(""Adjustment Group Exists"", ""False"");
		}
	}
}
function CheckSAPConditionTypeAndScale (inputMsg, outputMsg) 
{ // Start - Function
  /*  Referenced in workflow Pricing - Recieve SAP 47 Condition Records
    * Input Object:
    *  Pricing - Send or Receive SAP 47 Condition (COND_A02)
    *       
    *
    * Output Object's Integration Components:
    *  set property ""Condition Type"" to Price List or Discount Matrices in outputMsg
    *  depending on SAP Prcing Condition Type
    */

   /*
    * Set up EAI Input Message objects
    */
	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Filter
	var iKONHComp; 		// IDOC Header
	var iKONPComp; 		// IDOC Items
	
	var oPriceObj;		//
	var oPriceComp;		//
	
   /*
    * Temp Variables
    */	
   var AdjustmentGroupExists	= false;
   var VolumeDiscountExists 	= false;	
	

   /*
    * EAI Lookup Maps
    */
	var condTypeLM   = EAIGetValueMap (""SAP Pricing Condition Class"", ""Siebel Inbound"", ""Unknown Condition Type"" );

   /*
    * Find and create top-level integration object
    */
	iIDOCObj	= inputMsg.GetIntObj (""Pricing - Send or Receive SAP 47 Condition (COND_A02)"");
  
	if (iIDOCObj.NextInstance ())
	{
		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();

		// Read ""KOMG"" segment
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		if (iKOMGComp.NextRecord ())
		{  

			var UsageCode	= iKOMGComp.GetFieldValue (""KVEWE""); // Condition Table usage
			var TableNbr	= iKOMGComp.GetFieldValue (""KOTABNR""); // Condition Table number
			var CondType	= iKOMGComp.GetFieldValue (""KSCHL""); // Condition Type
			var ExtSysVal	= UsageCode + TableNbr + CondType;

   			var ConditionType 	= condTypeLM.Translate (CondType);
   			outputMsg.SetArgument(""Condition Type"", ConditionType);
  	
			if (ConditionType == ""Discount Matrix"")
			{
			var AdjGrpId	= GetAdjustmentId (ExtSysVal);
				if (AdjGrpId == null)
				{
 					AdjustmentGroupExists 	= false;
				}
				else
				{
					AdjustmentGroupExists 	= true;
				}
			}
			
			// Read ""KONH"" segment (Condition Header)

			iKONHComp = iKOMGComp.GetIntComp (""E2KONH"");
			if (iKONHComp.NextRecord ())
			{
				// Read ""KONP"" segment (Condition Items)
				iKONPComp = iKONHComp.GetIntComp (""E2KONP002"");
				if (iKONPComp.NextRecord ())
				// Check Scale basis indicator
				{
					var VolumeDiscInd	= iKONPComp.GetFieldValue (""KZBZG""); // Scale Basis Indicator
					if (VolumeDiscInd == """")
					{
						VolumeDiscountExists 	= false;
					}
					else
					{
						VolumeDiscountExists 	= true;
					}
				}
			}// iKONHComp
			
		   	oPriceObj = outputMsg.CreateIntObj (""Pricing - Send or Receive SAP 47 Condition (COND_A02)"");
   			oPriceObj.NewInstance ();
   			oPriceComp = oPriceObj.CreatePrimaryIntComp (""Idoc Segments"");
   			oPriceComp.NewRecord ();
   			
   			
   			if (VolumeDiscountExists)
   			{
      			outputMsg.SetArgument(""Volume Discount Exists"", ""True"");
      		}
      		else
      		{
      			outputMsg.SetArgument(""Volume Discount Exists"", ""False"");
   			}

   			if (AdjustmentGroupExists)
   			{
      			outputMsg.SetArgument(""Adjustment Group Exists"", ""True"");
      		}
      		else
      		{
      			outputMsg.SetArgument(""Adjustment Group Exists"", ""False"");
   			}

//		   	var ConditionType 	= condTypeLM.Translate (CondType);
//		   	outputMsg.SetArgument(""Condition Type"", ConditionType);

		} // End - iKOMGComp
	} // End - iIDOCObj.NextInstance
	
   			
			
} // End - Function"
function CreateAdjustmentGroup_47IDOCToSiebel (inputMsg, outputMsg) 
{ 	// Start
  /*  Referenced in workflow Pricing - Pricing - Create Discount Matrices Dimension
    * Input Integration Object:
    *  Pricing - Send or Receive SAP 47 Condition (COND_A02)
    *       
    *
    * Output Integration Object:
    *  Pricing - Send or Receive SAP 47 Discount Matrix
    */

    // Set up EAI Input Message objects
   	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Condition Structures

	// Set up EAI Output Message objects - Write to Output IntObj
	var oAdjGroupObj;		// Siebel Adjustment Group instance
	var oAdjGroupHeader;	// Adjustment Group
	var oAdjGroupDim;		// Adjustment Dimension

    // EAI Lookup Maps
  	var discTypeLM		= EAIGetValueMap (""SAP Pricing Discount Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );
	var dMatrixNameLM	= EAIGetValueMap (""SAP Condition Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );
	var tblKeyFieldLM	= EAIGetValueMap (""SAP Table Key Field Xref"", ""Siebel Inbound"", ""Unknown XRef Field"" );
	var XRefFieldLM		= EAIGetValueMap (""SAP Key Field"", ""Siebel Inbound"", ""Unknown XRef Field"" );


   //  Find and create top-level integration object	
	iIDOCObj		= inputMsg.GetIntObj     (""Pricing - Send or Receive SAP 47 Condition (COND_A02)"");
	oAdjGroupObj	= outputMsg.CreateIntObj (""Pricing - Send or Receive SAP 47 Discount Matrix"");

	// Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{	// Start Read ""IDOC"" 
	
		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();
	
		// Create ""Adjusmnt Group"" Object
		oAdjGroupObj.NewInstance ();

		// Read ""KOMG"" component (Condition Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		while (iKOMGComp.NextRecord ())
		{  	// Start Read ""KOMG"" Component
			// Map data to ""Adjustment Group"" Intergration Component
			// Create ""Adjustment Group"" component in output message
			oAdjGroupHeader 	= oAdjGroupObj.CreatePrimaryIntComp (""Adjustment Group"");
			oAdjGroupHeader.NewRecord ();
			oAdjGroupHeader.SetCopySource (iKOMGComp);
			oAdjGroupHeader.SetFieldValue (""operation"", ""sync""); // Set operation method

			var UsageCode	= iKOMGComp.GetFieldValue (""KVEWE""); // Condition Table usage
			var TableNbr	= iKOMGComp.GetFieldValue (""KOTABNR""); // Condition Table number
			var CondType	= iKOMGComp.GetFieldValue (""KSCHL""); // Condition Type
			var ExtSysVal	= UsageCode + TableNbr + CondType;
			
			// Intergration Id
			oAdjGroupHeader.SetFieldValue (""Integration Id"", ExtSysVal);

			// Name
			var GroupName	= dMatrixNameLM.Translate (iKOMGComp.GetFieldValue (""KSCHL""));	// Condition Type
			oAdjGroupHeader.SetFieldValue (""Name"", GroupName);
			oAdjGroupHeader.SetFieldValue (""Description"", GroupName);

			// Discount Matrix Type
			var DiscType	= discTypeLM.Translate (iKOMGComp.GetFieldValue (""KSCHL""));	// Condition Type
			var MatrixType	= TheApplication().InvokeMethod (""LookupValue"", ""ADJ_GROUP_TYPE"", DiscType);
			oAdjGroupHeader.SetFieldValue (""Adjustment Group Type"", 	MatrixType);

			// Setup SAP Parameters
//			oAdjGroupHeader.SetFieldValue (""SAP Table Name"", TableName);	// Not yet maintained in BC
//			oAdjGroupHeader.CopyFieldValue (""SAP Condition Name"",""KSCHL"");	// Not yet maintained in BC

			// Set Status to ""Active""
//			var Status	= TheApplication().InvokeMethod (""LookupValue"", ""MATRIX_DEFN_STATUS"", ""Active"");	
//			oAdjGroupHeader.SetFieldValue (""Status"", Status); 


			// Set up Adjustment Dimension
			oAdjGroupDim = oAdjGroupHeader.CreateIntComp (""Adjustment Dimension"", false);
				
			// Get SAP TBL Key Field(s)
			var TBLKeys		= tblKeyFieldLM.Translate (ExtSysVal);	// Application + Table + Condition Type
			var keyArray	= TBLKeys.split(""::"");
	
			var seqNo		= 10;
			for (var i = 0; i < keyArray.length; i++)
			{
				oAdjGroupDim.NewRecord();
				oAdjGroupDim.SetFieldValue (""operation"", ""sync""); 
				
				var Key		= keyArray[i];
				var XRef	= XRefFieldLM.Translate (Key);
				oAdjGroupDim.SetFieldValue (""Display Sequence"", seqNo);
				oAdjGroupDim.SetFieldValue (""Field"", XRef);
				seqNo		= seqNo + 10;
			}
					
		}	// End Read ""KOMG"" Component
	}	// End Read ""IDOC"" 
}	// End"
function GetAccountId (Customer)
{
	var AccBusObject = TheApplication().GetBusObject(""Account"");
	var AccBusComp = AccBusObject.GetBusComp(""Account"");
		
	AccBusComp.SetViewMode(3);  // All Mode
	AccBusComp.ClearToQuery();
    AccBusComp.SetSearchSpec(""Integration Id"", Customer);
	AccBusComp.ActivateField(""Id"");
	AccBusComp.ExecuteQuery();
		
	if(AccBusComp.FirstRecord())
	{
	   return AccBusComp.GetFieldValue(""Id"");
	}
      	else
           return null;
}
function GetAdjustmentId (ExtSysVal)
{
	var AdjGrpBusObject = TheApplication().GetBusObject(""Adjustment Group"");
	var AdjGrpBusComp = AdjGrpBusObject.GetBusComp(""Adjustment Group"");
		
	AdjGrpBusComp.SetViewMode(3);  // All Mode
	AdjGrpBusComp.ClearToQuery();
    AdjGrpBusComp.SetSearchSpec(""Integration Id"", ExtSysVal);	// 
	AdjGrpBusComp.ActivateField(""Id"");
	AdjGrpBusComp.ExecuteQuery();
		
	if(AdjGrpBusComp.FirstRecord())
	{
	   return AdjGrpBusComp.GetFieldValue(""Id"");
	}
      	else
           return null;
}
function GetCurrencyCode (SalesOrg, DistChan)
{
	var OrgBusObject = TheApplication().GetBusObject(""Organizations"");
	var OrgBusComp = OrgBusObject.GetBusComp(""Organization"");
	
	OrgBusComp.SetViewMode(3);  // All Mode	
	OrgBusComp.ClearToQuery();
    OrgBusComp.SetSearchSpec(""Back Office Sales Organization"", SalesOrg);
	OrgBusComp.SetSearchSpec(""Back Office Distribution Channel"", DistChan);
	OrgBusComp.ActivateField(""Currency Code"");
	OrgBusComp.ExecuteQuery();
		
	if(OrgBusComp.FirstRecord())
	{
	   return OrgBusComp.GetFieldValue(""Currency Code"");
	}
      	else
           return null;
}
function GetProductId (Product)
{
	var PrdBusObject = TheApplication().GetBusObject(""Internal Product"");
	var PrdBusComp = PrdBusObject.GetBusComp(""Internal Product"");
		
	PrdBusComp.SetViewMode(3);  // All Mode
	PrdBusComp.ClearToQuery();
    PrdBusComp.SetSearchSpec(""Integration Id"", Product);
	PrdBusComp.ActivateField(""Id"");
	PrdBusComp.ExecuteQuery();
		
	if(PrdBusComp.FirstRecord())
	{
	   return PrdBusComp.GetFieldValue(""Id"");
	}
      	else
           return null;
}
function GetVolumeDiscountId (Int_ID)
{
	var VolDiscBusObject = TheApplication().GetBusObject(""Admin Volume Discount"");
	var VolDiscBusComp = VolDiscBusObject.GetBusComp(""Volume Discount"");
		
	VolDiscBusComp.SetViewMode(3);  // All Mode
	VolDiscBusComp.ClearToQuery();
    VolDiscBusComp.SetSearchSpec(""Integration Id"", Int_ID);
	VolDiscBusComp.ActivateField(""Id"");
	VolDiscBusComp.ExecuteQuery();
		
	if(VolDiscBusComp.FirstRecord())
	{
	   return VolDiscBusComp.GetFieldValue(""Id"");
	}
      	else
           return null;
}
function ReceiveAdminPriceList_47IDOCToSiebel (inputIDOC, outputPriceList) 
{ 	// Start
  /*  Referenced in workflow Pricing - Receive SAP 47 Price
    * Input Integration Object:
    *  Pricing - Send or Receive SAP 47 Condition (COND_A02)
    *       
    *
    * Output Integration Object:
    *  Pricing - Send or Receive SAP 47 Price List
    */

    // Set up EAI Input Message objects
   	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Condition Structures
	var iKONHComp; 		// IDOC Condition Header
	var iKONPComp; 		// IDOC Condition Item

	// Set up EAI Output Message objects - Write to Output IntObj
	var oPriceListObj;		// Siebel Price List instance
	var oPriceListHeader;	// Price List
	var oPriceListItem;		// Price List Item
	var oPriceListOrg;		// Price List Org

    // EAI Lookup Maps
	var currLM		= EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"", ""Unknown Currency Code"" );
	var pListNameLM	= EAIGetValueMap (""SAP Condition Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );

   //  Find and create top-level integration object	
	iIDOCObj		= inputIDOC.GetIntObj  	(""Pricing - Send or Receive SAP 47 Condition (COND_A02)"");
	oPriceListObj	= outputPriceList.CreateIntObj 	(""Pricing - Send or Receive SAP 47 Price List"");

	// Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{	// Start Read ""IDOC"" 

		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();
		
		// Create ""PriceList"" Object
		oPriceListObj.NewInstance ();

		// Read ""KOMG"" component (Condition Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		while (iKOMGComp.NextRecord ())
		{  	// Start Read ""KOMG"" Component
			// Map data to ""Price List"" Intergration Component
			// Create ""Price List"" component in output message
			oPriceListHeader = oPriceListObj.CreatePrimaryIntComp (""Price List"");
			oPriceListHeader.NewRecord ();
			oPriceListHeader.SetCopySource (iKOMGComp);
			oPriceListHeader.SetFieldValue (""operation"", ""sync""); // Set operation method

			var Usage		= iKOMGComp.GetFieldValue (""KVEWE""); // Usage of Condition Table
			var CondTbl		= iKOMGComp.GetFieldValue (""KOTABNR""); // Condition Table
			var CondType	= iKOMGComp.GetFieldValue (""KSCHL""); // Condition Type
			var ItemDesc	= iKOMGComp.GetFieldValue (""VAKEY_LONG""); // Description
			var SalesOrg 	= iKOMGComp.GetFieldValue (""VKORG""); // Sales Organization
			var DistChan 	= iKOMGComp.GetFieldValue (""VTWEG""); // Distribution Channel
			var Material 	= iKOMGComp.GetFieldValue (""MATNR""); // Material
			var VarKey	 	= iKOMGComp.GetFieldValue (""VAKEY""); // Variable Key
		
			// Set up Price List name
			var ListName	= pListNameLM.Translate (iKOMGComp.GetFieldValue (""KSCHL"")); // Condition Type
			var PListName	= ListName + Usage + CondTbl + ""::"" + CondType + ""::"" + SalesOrg + ""::"" + DistChan;
			oPriceListHeader.SetFieldValue (""Name"", PListName);
			oPriceListHeader.SetFieldValue (""Description"", PListName);
						
			// Setup Integration Id (Sales Org Code + Distribution Channel Code + Condition Type + Usage + Table)
			var IntegrationId	=	SalesOrg + DistChan + CondType + Usage + CondTbl;
			oPriceListHeader.SetFieldValue (""Integration Id"", IntegrationId);
			oPriceListHeader.SetFieldValue (""Start Date"", Timestamp());

			// Currency Code (Header)
			var CurrencyCode	=	GetCurrencyCode (SalesOrg, DistChan);
			oPriceListHeader.SetFieldValue (""Currency Code"", CurrencyCode);

			// Set up Price List Organization
			oPriceListOrg = oPriceListHeader.CreateIntComp (""Price List_Organization"", false);
			
			var OrgBusObject	= TheApplication().GetBusObject(""Organizations"") ;
			var OrgBusComp 		= OrgBusObject.GetBusComp(""Organization"") ;
			OrgBusComp.SetViewMode(3);  // All Mode

			OrgBusComp.ClearToQuery();
			OrgBusComp.SetSearchSpec(""Back Office Sales Organization"", SalesOrg);
			OrgBusComp.SetSearchSpec(""Back Office Distribution Channel"", DistChan);
			OrgBusComp.ActivateField(""Organization Id"");
			OrgBusComp.ActivateField(""Organization"");
			OrgBusComp.ActivateField(""Location"");
			OrgBusComp.ExecuteQuery();
			
			var hasMoreRecords 	= OrgBusComp.FirstRecord();
			while ( hasMoreRecords )
			{
				var OrgID	 	= OrgBusComp.GetFieldValue(""Organization Id"");
				var OrgName	 	= OrgBusComp.GetFieldValue(""Organization"");
				var Loc		 	= OrgBusComp.GetFieldValue(""Location"");
				oPriceListOrg.NewRecord();
				oPriceListOrg.SetFieldValue (""operation"", ""sync""); 
				oPriceListOrg.SetFieldValue(""Organization Id"", OrgID);
				oPriceListOrg.SetFieldValue(""Organization"", OrgName);
				oPriceListOrg.SetFieldValue(""Location"", Loc);
				oPriceListOrg.SetFieldValue (""IsPrimaryMVG"", ""Y"");
				hasMoreRecords = OrgBusComp.NextRecord();
			}												
			// Set Primary Org Id
			oPriceListHeader.SetFieldValue (""Primary Organization Id"", OrgID);

			// Read ""KONH"" component 
			iKONHComp = iKOMGComp.GetIntComp (""E2KONH"");
			oPriceListItem = oPriceListHeader.CreateIntComp (""Price List Item - UAN"", false);
			while (iKONHComp.NextRecord ())
			{	// Start Read ""KONH"" Component
				oPriceListItem.SetCopySource (iKONHComp);
								
				// Set up Description & Integration Id
				var IntID	= iKONHComp.GetFieldValue (""KNUMH""); 	
				
				// Set up Start & End Dates
				var StrDate		= iKONHComp.GetFieldValue (""DATAB"");
				var EndDate		= iKONHComp.GetFieldValue (""DATBI"");
				var chkDate		= EndDate.substring(0,10); 
				
				// Read ""KONP"" Component
				iKONPComp = iKONHComp.GetIntComp (""E2KONP002"");
				while (iKONPComp.NextRecord ())
				{	// Start Read ""KONP"" Component
					oPriceListItem.NewRecord (); //+
					oPriceListItem.SetCopySource (iKONPComp);
					oPriceListItem.SetFieldValue (""operation"", ""sync""); //+
					
					oPriceListItem.SetFieldValue (""Integration Id"",IntID);
					oPriceListItem.SetFieldValue (""Description"", ItemDesc);
					oPriceListItem.SetFieldValue (""Product Name"", Material);// Material
					oPriceListItem.SetFieldValue (""Product Integration Id"", Material);// Product Integration Id
					oPriceListItem.CopyFieldValue (""Original List Price"", ""KBETR"");// Rate
					oPriceListItem.CopyFieldValue (""Min Sale Price"", ""MXWRT"");// Lower Limit
					oPriceListItem.CopyFieldValue (""Max Sale Price"", ""GKWRT"");// Upper Limit
					oPriceListItem.SetFieldValue (""Start Date"", StrDate);
					if ( chkDate != ""12/31/9999"" )
						{
							oPriceListItem.SetFieldValue (""End Date"", EndDate);
						}

					// Volume Discount
					oPriceListItem.SetFieldValue (""Volume Discount Id"", null); 
					var VolumeDiscInd	= iKONPComp.GetFieldValue (""KZBZG""); // Scale Basis Indicator
					if (VolumeDiscInd != null || VolumeDiscInd != """")
					{
						var VolumeDiscountId = GetVolumeDiscountId (IntID);
						oPriceListItem.SetFieldValue (""Volume Discount Id"", VolumeDiscountId); 	
					}					
					
				}	// End Read ""KONP"" Component			
			}	// End Read ""KONH"" Component							
		}	// End Read ""KOMG"" Component
	}	// End Read ""IDOC"" 
}	// End"
function ReceiveProductBasedAdjustment_47IDOCToSiebel (inputMsg, outputMsg) 
{ 	// Start
  /*  Referenced in workflow Pricing - Receive SAP 47 Price
    * Input Integration Object:
    *  Pricing - Send or Receive SAP 47 Condition (COND_A02)
    *       
    *
    * Output Integration Object:
    *  Pricing - Send or Receive SAP 47 Discount Matrix
    */

    // Set up EAI Input Message objects
   	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Condition Structures
	var iKONHComp; 		// IDOC Condition Header
	var iKONPComp; 		// IDOC Condition Item

	// Set up EAI Output Message objects - Write to Output IntObj
	var oPBAdjustmentObj;	// Siebel Product-Based instance
	var oAdjustmentGroup;	// Siebel Adjustment Group instance
	var oPBAdjustment;		// Siebel Product-Based Adjustment 
	
    // EAI Lookup Maps
   	var discTypeLM		= EAIGetValueMap (""SAP Pricing Discount Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );
	var dMatrixNameLM	= EAIGetValueMap (""SAP Condition Type"", ""Siebel Inbound"", ""Unknown Condition Type"" );
	var currLM			= EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"", """" );
	var prcClassLM		= EAIGetValueMap (""SAP Pricing Scale Calculation"", ""Siebel Inbound"" );

   //  Find and create top-level integration object	
	iIDOCObj			= inputMsg.GetIntObj     (""Pricing - Send or Receive SAP 47 Condition (COND_A02)"");
	oPBAdjustmentObj	= outputMsg.CreateIntObj (""Pricing - Send or Receive SAP 47 Discount Matrix"");

	// Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{	// Start Read ""IDOC"" 
		oPBAdjustmentObj.NewInstance ();

		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();

		// Read ""KOMG"" component (Condition Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		if (iKOMGComp.NextRecord ())
		{  	// Start Read ""KOMG"" Component 
			// Map data to ""Adjustment"" Intergration Component
			oAdjustmentGroup = oPBAdjustmentObj.CreatePrimaryIntComp (""Adjustment Group"");
			oAdjustmentGroup.NewRecord ();
			oAdjustmentGroup.SetCopySource (iKOMGComp);
//			oAdjustmentGroup.SetFieldValue (""operation"", ""sync""); // Set operation method
			
			var UsageCode	= iKOMGComp.GetFieldValue (""KVEWE""); // Condition Table usage
			var TableNbr	= iKOMGComp.GetFieldValue (""KOTABNR""); // Condition Table number
			var CondType	= iKOMGComp.GetFieldValue (""KSCHL""); // Condition Type
			var SalesOrg 	= iKOMGComp.GetFieldValue (""VKORG""); // Sales Organization Code
			var DistChan 	= iKOMGComp.GetFieldValue (""VTWEG""); // Distribution Channel Code
			var Division 	= iKOMGComp.GetFieldValue (""SPART""); // Division Code
			var Customer 	= iKOMGComp.GetFieldValue (""KUNNR""); // Customer
			var Product 	= iKOMGComp.GetFieldValue (""MATNR""); // Material
			var VarKey	 	= iKOMGComp.GetFieldValue (""VAKEY""); // Variable key
			var ExtSysVal	= UsageCode + TableNbr + CondType;

			// Name
			var GroupName	= dMatrixNameLM.Translate (iKOMGComp.GetFieldValue (""KSCHL""));	// Condition Type
			oAdjustmentGroup.SetFieldValue (""Name"", GroupName);

			// Discount Matrix Type
			var DiscType	= discTypeLM.Translate (iKOMGComp.GetFieldValue (""KSCHL""));	// Condition Type
			var MatrixType	= TheApplication().InvokeMethod (""LookupValue"", ""ADJ_GROUP_TYPE"", DiscType);
			oAdjustmentGroup.SetFieldValue (""Adjustment Group Type"", 	MatrixType);
			
			// Integration Id
			oAdjustmentGroup.SetFieldValue (""Integration Id"", ExtSysVal);
		
			//	Get Adjustment Id
			var AdjGrpId	= GetAdjustmentId (ExtSysVal);
							
   		    // Read ""KONH"" component 
			iKONHComp = iKOMGComp.GetIntComp (""E2KONH"");
			oPBAdjustment = oAdjustmentGroup.CreateIntComp (""Product-Based Adjustment - UAN"", false);
			while (iKONHComp.NextRecord ())
			{	// Start Read ""KONH"" Component
				oPBAdjustment.SetCopySource (iKONHComp);
				
				// Setup Integration Id
				var IntID	= iKONHComp.GetFieldValue (""KNUMH""); 	
				
				// Set up Start & End Dates
				var StrDate		= iKONHComp.GetFieldValue (""DATAB"");
				var EndDate		= iKONHComp.GetFieldValue (""DATBI"");
				var chkDate		= EndDate.substring(0,10);


				// Read ""KONP"" Component
				iKONPComp = iKONHComp.GetIntComp (""E2KONP002"");
				while (iKONPComp.NextRecord ())
				{	// Start Read ""KONP"" Component
					oPBAdjustment.NewRecord ();
					oPBAdjustment.SetCopySource (iKONPComp);
					oPBAdjustment.SetFieldValue (""operation"", ""upsert""); // Set operation method

					oPBAdjustment.SetFieldValue (""Integration Id"", IntID); // Integration Id
					oPBAdjustment.SetFieldValue (""Adjustment Group Id"", AdjGrpId); // Group Id

					// Effective Dates
					oPBAdjustment.SetFieldValue (""Effective Start Date"", StrDate);										
					if ( chkDate != ""12/31/9999"" )
					{
						oPBAdjustment.SetFieldValue (""Effective End Date"", EndDate);
					}

					//Check Sales Organization
					if (SalesOrg != null || SalesOrg != """")
					{
						oPBAdjustment.SetFieldValue (""Sales Organization Code"", SalesOrg); 	
					}

					//Check Distribution Channel
					if (DistChan != null || DistChan != """")
					{
						oPBAdjustment.SetFieldValue (""Distribution Channel Code"", DistChan); 	
					}
					
					//Check Division Code
					if (Division != null || Division != """")
					{
						oPBAdjustment.SetFieldValue (""Division Code"", Division); 	
					}					
					
					//Check Product
					if (Product != null || Product != """")
					{
						var ProductId = GetProductId (Product);
						oPBAdjustment.SetFieldValue (""Product Id"", ProductId); 	
					}					
					
					//Check Account
					if (Customer != null || Customer != """")
					{
						var AccountId = GetAccountId (Customer);
						oPBAdjustment.SetFieldValue (""Account Id"", AccountId); 	
					}
					
					// Currency Code
					var CurrencyCode	= currLM.Translate (iKONPComp.GetFieldValue (""KONWA""));
					oPBAdjustment.SetFieldValue (""Currency Code"", CurrencyCode); 
					
					// Adjustment Type
					var ConditionType	= prcClassLM.Translate (CondType); // Condition Type
					var AdjustmentType		= TheApplication().InvokeMethod (""LookupValue"", ""PRICER_CALCULATION_SIMPLE_TYPE"", ConditionType);
					oPBAdjustment.SetFieldValue (""Adjustment Type"", AdjustmentType); 

					// Adjusment Amount
					oPBAdjustment.CopyFieldValue (""Adjustment Amount"", ""KBETR"");		// Rate
					
					// Volume Discount
					oPBAdjustment.SetFieldValue (""Volume Discount Id"", null);
					var VolumeDiscInd	= iKONPComp.GetFieldValue (""KZBZG""); // Scale Basis Indicator
					if (VolumeDiscInd != null || VolumeDiscInd != """")
					{
						var VolumeDiscountId = GetVolumeDiscountId (IntID);
						oPBAdjustment.SetFieldValue (""Volume Discount Id"", VolumeDiscountId); 	
					}					
		
				}	// End Read ""KONP"" Component			
			}	// End Read ""KONH"" Component
		}	// End Read ""KOMG"" Component
	}	// End Read ""IDOC"" 
}	// End"
function ReceiveVolumeDiscount_47IDOCToSiebel (inputMsg, outputMsg) 
{ 	// Start
  /*  Referenced in workflow Pricing - Receive SAP 47 Scales
    * Input Integration Object:
    *  Pricing - Send or Receive SAP 47 Condition (COND_A02)
    *       
    *
    * Output Integration Object:
    *  Pricing - Send or Receive SAP 47 Volume Discount
    */

    // Set up EAI Input Message objects
   	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iKOMGComp; 		// IDOC Condition Structures
	var iKONHComp; 		// IDOC Condition Header
	var iKONPComp; 		// IDOC Condition Item
	var iKONMComp; 		// IDOC Condition Quantity Scale
	var iKONWComp; 		// IDOC Condition Value Scale

	// Set up EAI Output Message objects - Write to Output IntObj
	var oVolDiscountObj;	// Siebel Volume Discount instance
	var oVolDiscountHeader;	// Volume Discount
	var oVolDiscountItem;	// Volume Discount Item

    // EAI Lookup Maps
	var discMethLM	= EAIGetValueMap (""SAP Pricing Scale Type"", ""Siebel Inbound"" );
	var prcClassLM	= EAIGetValueMap (""SAP Pricing Scale Calculation"", ""Siebel Inbound"" );

   //  Find and create top-level integration object	
	iIDOCObj		= inputMsg.GetIntObj     (""Pricing - Send or Receive SAP 47 Condition (COND_A02)"");
	oVolDiscountObj = outputMsg.CreateIntObj (""Pricing - Send or Receive SAP 47 Volume Discount"");

	// Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{	// Start Read ""IDOC"" 

		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();
		
		// Create ""Volume Discount"" Object
// nbc	oVolDiscountObj.NewInstance ();
		
		// Read ""KOMG"" component (Condition Header)
		iKOMGComp = iIDOCComp.GetIntComp (""E2KOMG003"");
		while (iKOMGComp.NextRecord ())
		{  	// Start Read ""KOMG"" Component
						
			var Description		= iKOMGComp.GetFieldValue (""VAKEY_LONG""); // Long Description
			var ConditionType	= prcClassLM.Translate (iKOMGComp.GetFieldValue (""KSCHL"")); // Condition Type
			var VarKey			= iKOMGComp.GetFieldValue (""VAKEY""); // Variable Key
			
   		    // Read ""KONH"" component 
			iKONHComp = iKOMGComp.GetIntComp (""E2KONH"");
// nbc		oVolDiscountHeader = oVolDiscountObj.CreatePrimaryIntComp (""Volume Discount"");
			while (iKONHComp.NextRecord ())
			{	// Start Read ""KONH"" Component
				oVolDiscountObj.NewInstance ();	// nbc
				oVolDiscountHeader = oVolDiscountObj.CreatePrimaryIntComp (""Volume Discount""); // nbc
				oVolDiscountHeader.NewRecord ();
				oVolDiscountHeader.SetCopySource (iKONHComp);
				oVolDiscountHeader.SetFieldValue (""operation"", ""upsert""); // Set operation method
	
				// Setup Name & Integration Id
				var IntID	= iKONHComp.GetFieldValue (""KNUMH"");
				var Name	= VarKey + ""::"" + IntID;								
								
				// Get Start & End Dates
				var StartDate	= iKONHComp.GetFieldValue (""DATAB"");
				var EndDate		= iKONHComp.GetFieldValue (""DATBI"");
				var chkDate		= EndDate.substring(0,10);
				
				// Read ""KONP"" Component
				iKONPComp = iKONHComp.GetIntComp (""E2KONP002"");
				while (iKONPComp.NextRecord ())
				{	// Start Read ""KONP"" Component
					// Discount Method
					var ScaleType		= discMethLM.Translate (iKONPComp.GetFieldValue (""STFKZ""));
					var DiscountMethod	= TheApplication().InvokeMethod (""LookupValue"", ""IC_COMP_TABLE_TYPE"", ScaleType);
					// Adjustment Type
					var AdjustmentType	= TheApplication().InvokeMethod (""LookupValue"", ""PRICER_CALCULATION_SIMPLE_TYPE"", ConditionType);
										
					var Percentage		= iKONPComp.GetFieldValue (""KRECH"");	
					var minQty;
					var maxQty;
					var firstTime		= true;

					if (iKONPComp.GetFieldValue (""KZBZG"") == ""B"")	// Value Scale
					{	// Start Read ""KONW"" Component
						iKONWComp = iKONPComp.GetIntComp (""E2KONW"");
						oVolDiscountItem = oVolDiscountHeader.CreateIntComp (""Volume Discount Item"", false);
						while (iKONWComp.NextRecord ())
						{	// Start While iKONWComp
						
							if (firstTime == true)
							{
								firstTime	= false;
							}
							else
							{
								maxQty		= iKONWComp.GetFieldValue (""KSTBW"");
								maxQty		= maxQty -1;
								oVolDiscountItem.SetFieldValue (""Maximum Quantity"", maxQty);
							}
									
							oVolDiscountItem.NewRecord ();
							oVolDiscountItem.SetCopySource (iKONWComp);
							oVolDiscountItem.SetFieldValue (""operation"", ""sync""); // Set operation method
																 
							minQty		= iKONWComp.GetFieldValue (""KSTBW"");
//							oVolDiscountItem.CopyFieldValue (""Minimum Quantity"", ""KSTBW"");
							if (minQty == 0)
								{
									oVolDiscountItem.SetFieldValue (""Minimum Quantity"", 1);
								}
							else
								{
									oVolDiscountItem.SetFieldValue (""Minimum Quantity"", minQty);
								}
							oVolDiscountItem.SetFieldValue (""Adjustment Type"", AdjustmentType);
							oVolDiscountItem.CopyFieldValue (""Name"", ""KSTBW"");
							oVolDiscountItem.CopyFieldValue (""Description"", ""KSTBW"");
							oVolDiscountItem.CopyFieldValue (""Adjustment Amount"", ""KBETR"");
																
//							if (Percentage == ""A"") // Percentage
//								{
//									oVolDiscountItem.CopyFieldValue (""Discount Percent"", ""KBETR"");
//								}
//							else
//								{
//									oVolDiscountItem.CopyFieldValue (""Adjustment Amount"", ""KBETR"");
//								}
						}	// End While iKONWComp
					}	// End Read ""KONW"" Component
					
				
					if (iKONPComp.GetFieldValue (""KZBZG"") == ""C"")	// Quantity Scale
					{	// Start Read ""KONM"" Component
						iKONMComp = iKONPComp.GetIntComp (""E2KONM"");
						oVolDiscountItem = oVolDiscountHeader.CreateIntComp (""Volume Discount Item"", false);
						while (iKONMComp.NextRecord ())
						{	// Start While iKONMComp
						
							if (firstTime == true)
							{
								firstTime	= false;
							}
							else
							{
								maxQty		= iKONMComp.GetFieldValue (""KSTBM"");
								maxQty		= maxQty -1;
								oVolDiscountItem.SetFieldValue (""Maximum Quantity"", maxQty);
							}
							oVolDiscountItem.NewRecord ();
							oVolDiscountItem.SetCopySource (iKONMComp);
							oVolDiscountItem.SetFieldValue (""operation"", ""sync""); // Set operation method
								
							minQty		= iKONMComp.GetFieldValue (""KSTBM"");
//							oVolDiscountItem.CopyFieldValue (""Minimum Quantity"", ""KSTBM"");
							if (minQty == 0)
								{
									oVolDiscountItem.SetFieldValue (""Minimum Quantity"", 1);
								}
							else
								{
									oVolDiscountItem.SetFieldValue (""Minimum Quantity"", minQty);
								}
							oVolDiscountItem.SetFieldValue (""Adjustment Type"", AdjustmentType);
							oVolDiscountItem.CopyFieldValue (""Name"", ""KSTBM"");
							oVolDiscountItem.CopyFieldValue (""Description"", ""KSTBM"");
							oVolDiscountItem.CopyFieldValue (""Adjustment Amount"", ""KBETR"");
							
//							if (Percentage == ""A"") // Percentage
//								{
//									oVolDiscountItem.CopyFieldValue (""Discount Percent"", ""KBETR"");
//								}
//							else 
//								{
//									oVolDiscountItem.CopyFieldValue (""Adjustment Amount"", ""KBETR"");
//								}

							}	// End While iKONMComp
						}	// End Read ""KONM"" Component

					}	// End Read ""KONP"" Component
					oVolDiscountHeader.SetFieldValue (""Name"", Name); // Name
					oVolDiscountHeader.SetFieldValue (""Description"", Description); // Description
					oVolDiscountHeader.SetFieldValue (""Integration Id"", IntID); // Set Integration Id
					oVolDiscountHeader.SetFieldValue (""Discount Method"", DiscountMethod); // Discount Method
					oVolDiscountHeader.SetFieldValue (""Start Date"", StartDate); // Effectivity Date
					oVolDiscountHeader.SetFieldValue (""End Date"", "" ""); // Effectivity End Date
					if ( chkDate != ""12/31/9999"" )
						{
							oVolDiscountHeader.SetFieldValue (""End Date"", EndDate);
						}			
				}	// End Read ""KONH"" Component
// nbc				oVolDiscountHeader.SetFieldValue (""Name"", Name); // Name
// nbc				oVolDiscountHeader.SetFieldValue (""Description"", Description); // Description
// nbc				oVolDiscountHeader.SetFieldValue (""Integration Id"", IntID); // Set Integration Id
// nbc				oVolDiscountHeader.SetFieldValue (""Discount Method"", DiscountMethod); // Discount Method
// nbc				oVolDiscountHeader.SetFieldValue (""Start Date"", StartDate); // Effectivity Date
// nbc				if ( chkDate != ""12/31/9999"" )
// nbc					{
// nbc						oVolDiscountHeader.SetFieldValue (""End Date"", EndDate);
// nbc					}
		}	// End Read ""KOMG"" Component
	}	// End Read ""IDOC"" 
}	// End"
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{
}
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
	return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", d.getMonth()+1, d.getDate(), d.getFullYear(), d.getHours(), d.getMinutes(), d.getSeconds()); 
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2000, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 5 $
//      $Date: 09/26/00 1:19p $
//    $Author: MFasino $ of last update
//
// CREATOR:    P. Lim
//
// DESCRIPTION
//    Javascript maps from Siebel Product to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js"""
function ReceiveProduct_46CIDOCToSiebel (inputMsg, outputMsg)
{

   /* Input Integration Object
	*  - Product - Receive SAP 46C Material (MATMAS03) 
	*
	* Output Integration Object:
	*  - Product - Receive SAP 46C Material (Siebel 77) 
	*/

	// Set up EAI Input Message objects - Read from Input IntObj
	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iMARAMComp; 	// IDOC Material Header
	var iComp;			// for iterating first level input child components
	var iComp2; 		// for iterating second level input child components

	// Set up EAI Output Message objects - Write to Output IntObj
	var oProductObj;	// Siebel Product instance
	var oProductComp;	// Internal Product
	var oProductOrg;	// Internal Division
	var oProductInv;	// SAP 4x Inventory Location 
	var oProductPriOrg  // Product Primary Organization

	// EAI Lookup maps
	var uomLM   = EAIGetValueMap (""SAP Unit of Measure"", ""Siebel Inbound"" );
	var langLM	= EAIGetValueMap (""SAP Language 4x"",     ""Siebel Outbound"");

	// Map current Siebel language code to SAP language codes 
	var englishLangCode = langLM.Translate (""ENU"");
	var currLangCode    = langLM.Translate (TheApplication().InvokeMethod(""Language""));

    // Assume 'E' for English if there's no translation
	if (!englishLangCode)
	{
		englishLangCode = ""E"";	
	}

	
	// Find and create top-level integration object
	iIDOCObj	= inputMsg.GetIntObj     (""Product - Receive SAP 46C Material (MATMAS03)"");
	oProductObj = outputMsg.CreateIntObj (""Product - Receive SAP 46C Material (Siebel 78)"");

    // Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{
		// Create ""Product"" Object
		oProductObj.NewInstance ();

		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();


		// Read ""MARAM"" component 
		iMARAMComp = iIDOCComp.GetIntComp (""E2MARAM004"");
		if (iMARAMComp.NextRecord ())
		{
            /**
             *  Map data to ""Internal Product"" Intergration Component
             */

			// Create ""Product"" component in output message
			oProductComp = oProductObj.CreatePrimaryIntComp (""Internal Product - ISS Admin"");
			oProductComp.NewRecord ();
			oProductComp.SetCopySource (iMARAMComp);

            // Set operation method
			oProductComp.SetFieldValue (""operation"", ""sync""); 			

			// Set Integration Id 
			oProductComp.CopyFieldValue (""Integration Id"",""MATNR"");
			oProductComp.CopyFieldValue (""Name"",	      ""MATNR"");

            // Set Primary Organization.  Will be done after mapping the Internal Division
			var PrimaryOrg;
			
			// Set Vendor Part Number
			oProductComp.CopyFieldValue (""Vendor Part Number"", ""MFRPN"");

            // Set Unit of Mesaure
			var uomCode = iMARAMComp.GetFieldValue (""MEINS"");
            var pseUM   = TheApplication().InvokeMethod (""LookupValue"", ""UNIT_OF_MEASURE"", uomLM.Translate(uomCode));
			oProductComp.SetFieldValue (""Unit of Measure"", pseUM); 

            // Set Division Code
			var DivCode = iMARAMComp.GetFieldValue(""SPART"");
		  	if ((DivCode != null) && (DivCode != """"))
		  	 {
				oProductComp.SetFieldValue (""SAP Division Code"", DivCode);
			 }
			 else
			 {
			 	oProductComp.SetFieldValue (""SAP Division Code"", """");
			 }
			 
			/*
			 * Check if product is marked as deleted: 
			 *  1) Yes - Set product status as Obselete and remove the orderable and sales product flag.
			 *  2) No  - Remove the product status and check the orderable and sales product flag
			 */

            var pstat	   = iMARAMComp.GetFieldValue (""PSTAT"");
			var lvorm	   = iMARAMComp.GetFieldValue (""LVORM"");
			var dStatus    = TheApplication().InvokeMethod (""LookupValue"", ""IMPL_PHASE"", ""Obsolete"");

			if (lvorm == ""X"") 
			{  
				oProductComp.SetFieldValue (""Orderable"",			 ""N"");
				oProductComp.SetFieldValue (""Sales Product Flag"",	 ""N"");
				oProductComp.SetFieldValue (""Version Status"", dStatus);

			}
			else if (pstat.indexOf ('V') != -1)
			{
				oProductComp.SetFieldValue (""Orderable"",			 ""Y"");
				oProductComp.SetFieldValue (""Sales Product Flag"",	 ""Y"");
				oProductComp.SetFieldValue (""Version Status"", """" );                                                				
			}
			else
			{
				oProductComp.SetFieldValue (""Orderable"",			 ""N"");
				oProductComp.SetFieldValue (""Sales Product Flag"",	 ""N"");
				oProductComp.SetFieldValue (""Version Status"", """" );                                                				
			}
		
		   /*
			* Set Product Part Number. Choose from available languages
			*	1st Choice - Current Language
			*	2nd Choice - English
			*	3rd Choice - First listed
			*/
		   
			// Read ""MAKTM"" component 
			iComp = iMARAMComp.GetIntComp (""E2MAKTM001"");

			var partNum 	   = null;
			var partNumEnglish = null;
			var partNumFirst   = null;

			oProductComp.SetCopySource (iComp);
			
			while (iComp.NextRecord ())
			{
				var spras = iComp.GetFieldValue (""SPRAS"");
				var maktx = iComp.GetFieldValue (""MAKTX"");
		   
				if (spras == currLangCode)
				{
					partNum = maktx;
					break;	 // Found 1st choice
				}
				
				if ((spras == englishLangCode) && !partNumEnglish)
				{
					partNumEnglish = maktx;
				}

				if (!partNumFirst)
				{
					partNumFirst = maktx;
				}
			}

			if (!partNum)
			{
				if (partNumEnglish)
				{
					partNum = partNumEnglish;
				}
				else
				{
					partNum = partNumFirst;
				}
			}

			/* Set Part Number if found */
			if (partNum != """")
			{
				oProductComp.SetFieldValue (""Part #"", partNum);
			}

		   /*
			* Set Product Description. Choose from available languages
			*	1st Choice - Current Language
			*	2nd Choice - English
			*	3rd Choice - First listed
			*/

			// Read ""MAKTM"" component 
			iComp				= iMARAMComp.GetIntComp (""E2MTXHM001"");
			var descText		= null;
			var descTextEnglish = null;
			var descTextFirst	= null;

			while (iComp.NextRecord ())
			{
				if (iComp.GetFieldValue (""TDID"") == ""0001"")
				{
					// Gather this description if it fits one of our choices
					var tdspras = iComp.GetFieldValue (""TDSPRAS"");
					if (!descTextFirst || (tdspras == currLangCode) || (tdspras == englishLangCode))
					{
						var descTextCurr = """";

						iComp2 = iComp.GetIntComp (""E2MTXLM"");
						var line = 0;

						while ( iComp2.NextRecord () )
						{
						 	// Only get first four rows
							descTextCurr += iComp2.GetFieldValue (""TDLINE"") + ""\r\n"";
							line++;
							if (line == 4)
							break;
						}

						// Keep track of appropriate descriptions
						if (tdspras == currLangCode)
						{
							descText = descTextCurr;
							break;	// Found 1st choice
						}

						if ((tdspras == englishLangCode) && !descTextEnglish)
						{
							descTextEnglish = descTextCurr;
						}

						if (!descTextFirst)
						{
							descTextFirst = descTextCurr;
						}
					}
				}
			}
		  
			// Select from our preferred language choices
			if (!descText)
			{
				if (descTextEnglish)
				{
					descText = descTextEnglish;
				}
				else if (descTextFirst)
				{
					descText = descTextFirst;
				}
				else
				{
					descText = """";
				}
			}
 
			oProductComp.SetFieldValue (""Description"", descText);

            /**
             *  Map data to ""Internal Division"" Intergration Component
             */

			// Read ""MVKEM"" 
			iComp = iMARAMComp.GetIntComp( ""E2MVKEM002"" );
		
			oProductOrg    = oProductComp.CreateIntComp( ""Internal Division"", true );
            oProductPriOrg = oProductComp.CreateIntComp (""Internal Product_Organization"", false);						
			oProductOrg.SetCopySource( iComp );
 

            // If division code is not specified in SAP, it means product 
            // belongs to every sales areas with the same SalesOrg and
            // DistChannel.
			while( iComp.NextRecord() )
			{
				var OrgBusObject = TheApplication().GetBusObject(""Organizations"") ;
				var OrgBusComp   = OrgBusObject.GetBusComp(""Organization"") ;
				var SalesOrg     = iComp.GetFieldValue(""VKORG"");
				var DistChannel  = iComp.GetFieldValue(""VTWEG"");
						
				OrgBusComp.SetViewMode(3);  // All Mode
			
                // Find all Sales Area with the same SalesOrg and DistChannel in Siebel
				OrgBusComp.ClearToQuery();
 				OrgBusComp.SetSearchSpec(""Back Office Sales Organization"", SalesOrg);
 				OrgBusComp.SetSearchSpec(""Back Office Distribution Channel"", DistChannel);
				if ((DivCode != null) && (DivCode != """"))
				{
					OrgBusComp.SetSearchSpec(""Back Office Division"", DivCode);
				}
				else
				{
					OrgBusComp.ActivateField(""Back Office Division"");
				}				
			
				OrgBusComp.ExecuteQuery();
				
				var hasMoreRecords = OrgBusComp.FirstRecord();
									
				// While there are records iterate through
				while ( hasMoreRecords )
				{
					var mDivCode;
					if ((DivCode == null) || (DivCode == """"))
					{
						mDivCode = OrgBusComp.GetFieldValue(""Back Office Division"");
					}
					else
					{
					    mDivCode = DivCode;
					}
			
					oProductOrg.NewRecord();

                    // Set Sales Org, Distribution Channel, and Division Code for Siebel Internal Division
					oProductOrg.SetFieldValue(""Back Office Sales Organization"", SalesOrg); 
					oProductOrg.SetFieldValue(""Back Office Distribution Channel"", DistChannel);
					oProductOrg.SetFieldValue(""Back Office Division"", mDivCode);

                    // Mark for deletion
					if ( iComp.GetFieldValue (""LVORM"") != ""X"")
					{
						oProductOrg.SetFieldValue(""Status"", """");
						oProductOrg.SetFieldValue (""Orderable"", ""Y"");
					}
					else
					{
						oProductOrg.SetFieldValue(""Status"", ""Deletion"");
						oProductOrg.SetFieldValue(""Orderable"", ""N"");
					}

                    // Set Minimum Order Unit
					oProductOrg.CopyFieldValue(""Minimum Order Unit"", ""AUMNG"");

                    // Set Primary Plant
					oProductOrg.CopyFieldValue(""Primary Plant"", ""DWERK"");
		   
                    // Set Organization Unit of Mesaure
					var orgUomCode = iComp.GetFieldValue     (""VRKME"");

					if (orgUomCode == null && orgUomCode == """")
					{
						orgUomCode = uomCode;
					}

                    var pseUM = TheApplication().InvokeMethod (""LookupValue"", ""UNIT_OF_MEASURE"", uomLM.Translate(orgUomCode));
					oProductOrg.SetFieldValue(""Unit of Measure"", pseUM);
					
					// Set Primary Organization for Internal Product
					PrimaryOrg = OrgBusComp.GetFieldValue(""Organization Id"");
					oProductPriOrg.NewRecord();					
					oProductPriOrg.SetFieldValue( ""Organization Id"", PrimaryOrg );
					
					hasMoreRecords = OrgBusComp.NextRecord();
				}
			}
			
            // Set the Last Organization as Primary Org
	    	if ((PrimaryOrg != null) && (PrimaryOrg != """"))
			{
	 			oProductPriOrg.SetFieldValue( ""IsPrimaryMVG"", ""Y"" ); 
	 			oProductComp.SetFieldValue (""Primary Organization Id"",			 PrimaryOrg);										
	 		}			

            /**
             *  Map data to ""SAP 4x Inventory Locations"" Intergration Component
             */

			// Read ""MARCM"" component
			iComp = iMARAMComp.GetIntComp( ""E2MARCM003"" );
		
			oProductInv = oProductComp.CreateIntComp( ""SAP 4x Inventory Locations"", false);
			oProductInv.SetCopySource( iComp );
					
			while( iComp.NextRecord() )
			{
				/* This will only display a plant if the material can be sold, ie if a sales org is associated to the material */	 
				if (pstat.indexOf ('V') != -1)
				{
                    var pseInvType = TheApplication().InvokeMethod (""LookupValue"", ""FS_INVLOCTYPE_TYPE"", ""SAP Plant"");
					oProductInv.NewRecord();
					oProductInv.CopyFieldValue( ""Inventory Name"",	""WERKS"" );
					oProductInv.SetFieldValue ( ""Inventory Type"",	pseInvType );
				}
			}
		}
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2000, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 5 $
//      $Date: 09/26/00 1:19p $
//    $Author: MFasino $ of last update
//
// CREATOR:    P. Lim
//
// DESCRIPTION
//    Javascript maps from Siebel Product to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js"""
function ReceiveProduct_47IDOCToSiebel (inputMsg, outputMsg)
{

   /* Input Integration Object
	*  - Product - Receive SAP 47 Material (MATMAS03) 
	*
	* Output Integration Object:
	*  - Product - Receive SAP 47 Material (Siebel 77) 
	*/

	// Set up EAI Input Message objects - Read from Input IntObj
	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iMARAMComp; 	// IDOC Material Header
	var iComp;			// for iterating first level input child components
	var iComp2; 		// for iterating second level input child components

	// Set up EAI Output Message objects - Write to Output IntObj
	var oProductObj;	// Siebel Product instance
	var oProductComp;	// Internal Product
	var oProductOrg;	// Internal Division
	var oProductInv;	// SAP 4x Inventory Location 
	var oProductPriOrg  // Product Primary Organization

	// EAI Lookup maps
	var uomLM   = EAIGetValueMap (""SAP Unit of Measure"", ""Siebel Inbound"" );
	var langLM	= EAIGetValueMap (""SAP Language 4x"",     ""Siebel Outbound"");

	// Map current Siebel language code to SAP language codes 
	var englishLangCode = langLM.Translate (""ENU"");
	var currLangCode    = langLM.Translate (TheApplication().InvokeMethod(""Language""));

    // Assume 'E' for English if there's no translation
	if (!englishLangCode)
	{
		englishLangCode = ""E"";	
	}

	
	// Find and create top-level integration object
	iIDOCObj	= inputMsg.GetIntObj     (""Product - Receive SAP 47 Material (MATMAS03)"");
	oProductObj = outputMsg.CreateIntObj (""Product - Receive SAP 47 Material (Siebel 78)"");

    // Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{
		// Create ""Product"" Object
		oProductObj.NewInstance ();

		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();


		// Read ""MARAM"" component 
		iMARAMComp = iIDOCComp.GetIntComp (""E2MARAM005"");
		if (iMARAMComp.NextRecord ())
		{
            /**
             *  Map data to ""Internal Product"" Intergration Component
             */

			// Create ""Product"" component in output message
			oProductComp = oProductObj.CreatePrimaryIntComp (""Internal Product - ISS Admin"");
			oProductComp.NewRecord ();
			oProductComp.SetCopySource (iMARAMComp);

            // Set operation method
			oProductComp.SetFieldValue (""operation"", ""sync""); 			

			// Set Integration Id 
			oProductComp.CopyFieldValue (""Integration Id"",""MATNR"");
			oProductComp.CopyFieldValue (""Name"",	      ""MATNR"");

            // Set Primary Organization.  Will be done after mapping the Internal Division
			var PrimaryOrg;
			
			// Set Vendor Part Number
			oProductComp.CopyFieldValue (""Vendor Part Number"", ""MFRPN"");

            // Set Unit of Mesaure
			var uomCode = iMARAMComp.GetFieldValue (""MEINS"");
            var pseUM   = TheApplication().InvokeMethod (""LookupValue"", ""UNIT_OF_MEASURE"", uomLM.Translate(uomCode));
			oProductComp.SetFieldValue (""Unit of Measure"", pseUM); 

            // Set Division Code
			var DivCode = iMARAMComp.GetFieldValue(""SPART"");
		  	if ((DivCode != null) && (DivCode != """"))
		  	 {
				oProductComp.SetFieldValue (""SAP Division Code"", DivCode);
			 }
			 else
			 {
			 	oProductComp.SetFieldValue (""SAP Division Code"", """");
			 }
			 
			/*
			 * Check if product is marked as deleted: 
			 *  1) Yes - Set product status as Obselete and remove the orderable and sales product flag.
			 *  2) No  - Remove the product status and check the orderable and sales product flag
			 */

            var pstat	   = iMARAMComp.GetFieldValue (""PSTAT"");
			var lvorm	   = iMARAMComp.GetFieldValue (""LVORM"");
			var dStatus    = TheApplication().InvokeMethod (""LookupValue"", ""IMPL_PHASE"", ""Obsolete"");

			if (lvorm == ""X"") 
			{  
				oProductComp.SetFieldValue (""Orderable"",			 ""N"");
				oProductComp.SetFieldValue (""Sales Product Flag"",	 ""N"");
				oProductComp.SetFieldValue (""Version Status"", dStatus);

			}
			else if (pstat.indexOf ('V') != -1)
			{
				oProductComp.SetFieldValue (""Orderable"",			 ""Y"");
				oProductComp.SetFieldValue (""Sales Product Flag"",	 ""Y"");
				oProductComp.SetFieldValue (""Version Status"", """" );                                                				
			}
			else
			{
				oProductComp.SetFieldValue (""Orderable"",			 ""N"");
				oProductComp.SetFieldValue (""Sales Product Flag"",	 ""N"");
				oProductComp.SetFieldValue (""Version Status"", """" );                                                				
			}
		
		   /*
			* Set Product Part Number. Choose from available languages
			*	1st Choice - Current Language
			*	2nd Choice - English
			*	3rd Choice - First listed
			*/
		   
			// Read ""MAKTM"" component 
			iComp = iMARAMComp.GetIntComp (""E2MAKTM001"");

			var partNum 	   = null;
			var partNumEnglish = null;
			var partNumFirst   = null;

			oProductComp.SetCopySource (iComp);
			
			while (iComp.NextRecord ())
			{
				var spras = iComp.GetFieldValue (""SPRAS"");
				var maktx = iComp.GetFieldValue (""MAKTX"");
		   
				if (spras == currLangCode)
				{
					partNum = maktx;
					break;	 // Found 1st choice
				}
				
				if ((spras == englishLangCode) && !partNumEnglish)
				{
					partNumEnglish = maktx;
				}

				if (!partNumFirst)
				{
					partNumFirst = maktx;
				}
			}

			if (!partNum)
			{
				if (partNumEnglish)
				{
					partNum = partNumEnglish;
				}
				else
				{
					partNum = partNumFirst;
				}
			}

			/* Set Part Number if found */
			if (partNum != """")
			{
				oProductComp.SetFieldValue (""Part #"", partNum);
			}

		   /*
			* Set Product Description. Choose from available languages
			*	1st Choice - Current Language
			*	2nd Choice - English
			*	3rd Choice - First listed
			*/

			// Read ""MAKTM"" component 
			iComp				= iMARAMComp.GetIntComp (""E2MTXHM001"");
			var descText		= null;
			var descTextEnglish = null;
			var descTextFirst	= null;

			while (iComp.NextRecord ())
			{
				if (iComp.GetFieldValue (""TDID"") == ""0001"")
				{
					// Gather this description if it fits one of our choices
					var tdspras = iComp.GetFieldValue (""TDSPRAS"");
					if (!descTextFirst || (tdspras == currLangCode) || (tdspras == englishLangCode))
					{
						var descTextCurr = """";

						iComp2 = iComp.GetIntComp (""E2MTXLM"");
						var line = 0;

						while ( iComp2.NextRecord () )
						{
						 	// Only get first four rows
							descTextCurr += iComp2.GetFieldValue (""TDLINE"") + ""\r\n"";
							line++;
							if (line == 4)
							break;
						}

						// Keep track of appropriate descriptions
						if (tdspras == currLangCode)
						{
							descText = descTextCurr;
							break;	// Found 1st choice
						}

						if ((tdspras == englishLangCode) && !descTextEnglish)
						{
							descTextEnglish = descTextCurr;
						}

						if (!descTextFirst)
						{
							descTextFirst = descTextCurr;
						}
					}
				}
			}
		  
			// Select from our preferred language choices
			if (!descText)
			{
				if (descTextEnglish)
				{
					descText = descTextEnglish;
				}
				else if (descTextFirst)
				{
					descText = descTextFirst;
				}
				else
				{
					descText = """";
				}
			}
 
			oProductComp.SetFieldValue (""Description"", descText);

            /**
             *  Map data to ""Internal Division"" Intergration Component
             */

			// Read ""MVKEM"" 
			iComp = iMARAMComp.GetIntComp( ""E2MVKEM002"" );
		
			oProductOrg    = oProductComp.CreateIntComp( ""Internal Division"", true );
            oProductPriOrg = oProductComp.CreateIntComp (""Internal Product_Organization"", false);						
			oProductOrg.SetCopySource( iComp );
 

            // If division code is not specified in SAP, it means product 
            // belongs to every sales areas with the same SalesOrg and
            // DistChannel.
			while( iComp.NextRecord() )
			{
				var OrgBusObject = TheApplication().GetBusObject(""Organizations"") ;
				var OrgBusComp   = OrgBusObject.GetBusComp(""Organization"") ;
				var SalesOrg     = iComp.GetFieldValue(""VKORG"");
				var DistChannel  = iComp.GetFieldValue(""VTWEG"");
						
				OrgBusComp.SetViewMode(3);  // All Mode
			
                // Find all Sales Area with the same SalesOrg and DistChannel in Siebel
				OrgBusComp.ClearToQuery();
 				OrgBusComp.SetSearchSpec(""Back Office Sales Organization"", SalesOrg);
 				OrgBusComp.SetSearchSpec(""Back Office Distribution Channel"", DistChannel);
				if ((DivCode != null) && (DivCode != """"))
				{
					OrgBusComp.SetSearchSpec(""Back Office Division"", DivCode);
				}
				else
				{
					OrgBusComp.ActivateField(""Back Office Division"");
				}				
			
				OrgBusComp.ExecuteQuery();
				
				var hasMoreRecords = OrgBusComp.FirstRecord();
									
				// While there are records iterate through
				while ( hasMoreRecords )
				{
					var mDivCode;
					if ((DivCode == null) || (DivCode == """"))
					{
						mDivCode = OrgBusComp.GetFieldValue(""Back Office Division"");
					}
					else
					{
					    mDivCode = DivCode;
					}
			
					oProductOrg.NewRecord();

                    // Set Sales Org, Distribution Channel, and Division Code for Siebel Internal Division
					oProductOrg.SetFieldValue(""Back Office Sales Organization"", SalesOrg); 
					oProductOrg.SetFieldValue(""Back Office Distribution Channel"", DistChannel);
					oProductOrg.SetFieldValue(""Back Office Division"", mDivCode);

                    // Mark for deletion
					if ( iComp.GetFieldValue (""LVORM"") != ""X"")
					{
						oProductOrg.SetFieldValue(""Status"", """");
						oProductOrg.SetFieldValue (""Orderable"", ""Y"");
					}
					else
					{
						oProductOrg.SetFieldValue(""Status"", ""Deletion"");
						oProductOrg.SetFieldValue(""Orderable"", ""N"");
					}

                    // Set Minimum Order Unit
					oProductOrg.CopyFieldValue(""Minimum Order Unit"", ""AUMNG"");

                    // Set Primary Plant
					oProductOrg.CopyFieldValue(""Primary Plant"", ""DWERK"");
		   
                    // Set Organization Unit of Mesaure
					var orgUomCode = iComp.GetFieldValue     (""VRKME"");

					if (orgUomCode == null && orgUomCode == """")
					{
						orgUomCode = uomCode;
					}

                    var pseUM = TheApplication().InvokeMethod (""LookupValue"", ""UNIT_OF_MEASURE"", uomLM.Translate(orgUomCode));
					oProductOrg.SetFieldValue(""Unit of Measure"", pseUM);
					
					// Set Primary Organization for Internal Product
					PrimaryOrg = OrgBusComp.GetFieldValue(""Organization Id"");
					oProductPriOrg.NewRecord();					
					oProductPriOrg.SetFieldValue( ""Organization Id"", PrimaryOrg );
					
					hasMoreRecords = OrgBusComp.NextRecord();
				}
			}
			
            // Set the Last Organization as Primary Org
	    	if ((PrimaryOrg != null) && (PrimaryOrg != """"))
			{
	 			oProductPriOrg.SetFieldValue( ""IsPrimaryMVG"", ""Y"" ); 
	 			oProductComp.SetFieldValue (""Primary Organization Id"",			 PrimaryOrg);										
	 		}			

            /**
             *  Map data to ""SAP 4x Inventory Locations"" Intergration Component
             */

			// Read ""MARCM"" component
			iComp = iMARAMComp.GetIntComp( ""E2MARCM004"" );
		
			oProductInv = oProductComp.CreateIntComp( ""SAP 4x Inventory Locations"", false);
			oProductInv.SetCopySource( iComp );
					
			while( iComp.NextRecord() )
			{
				/* This will only display a plant if the material can be sold, ie if a sales org is associated to the material */	 
				if (pstat.indexOf ('V') != -1)
				{
                    var pseInvType = TheApplication().InvokeMethod (""LookupValue"", ""FS_INVLOCTYPE_TYPE"", ""SAP Plant"");
					oProductInv.NewRecord();
					oProductInv.CopyFieldValue( ""Inventory Name"",	""WERKS"" );
					oProductInv.SetFieldValue ( ""Inventory Type"",	pseInvType );
				}
			}
		}
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2000, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 5 $
//      $Date: 09/26/00 1:19p $
//    $Author: MFasino $ of last update
//
// CREATOR:    P. Lim
//
// DESCRIPTION
//    Javascript maps from Siebel Product to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js"""
function ReceiveSAP4xMaterial_IDOCToSiebel (inputMsg, outputMsg)
{
	var app = TheApplication();
	var msg;

   /* Input Objects' Integration Components
	*   Material IDOC (Product - Receive SAP 4x Material (IDOC Input))
	*
	* Output Object's Integration Components:
	*   Product Object (Product - Receive SAP 4x Material (Siebel))
    */

   /*
	* Set up EAI Lookup maps
	*/
	var uomLM       = EAIGetValueMap (""SAP Unit of Measure"", ""Siebel Inbound"");
	var langLM      = EAIGetValueMap (""SAP Language 4x"",     ""Siebel Outbound"");
     

   /*
	* Get the SAP language codes for the current language and for English
	*/

	var currLangCode = langLM.Translate (TheApplication().InvokeMethod(""Language""));
	var englishLangCode = langLM.Translate (""ENU"");

	if (!englishLangCode)
	{
		englishLangCode = ""E"";  // Assume 'E' for English if there's no translation
	}

   /*
	* Set up EAI Input Message objects
	*/
	var iIDOCObj;   // IDOC instance
	var iIDOCComp;  // top level IDOC segment
	var iMARAMComp; // IDOC Material Header
	var iComp;      // for reading child components
	var iComp2;     // for reading child components
	var i = 0;
	var ifalse = 'false';      

   /*
	* Set up EAI Output Message objects
	*/
	var oProductObj;    // Siebel Product instance
	var oProductComp;   // Product
	var oProductOrg;    // Internal Division
    var oProductInv;    // Product Inventory Location

   /*
	* Find and create top-level integration object
	*/
	iIDOCObj    = inputMsg.GetIntObj (""Product - Receive SAP 4x Material (IDOC Input)"");
	oProductObj = outputMsg.CreateIntObj (""Product - Receive SAP 4x Material (Siebel)"");

   /*
	* Read int object instances from EAI message
	*/
	while (iIDOCObj.NextInstance ())
	{
	   /*
	    * Create ""Product"" object
		*/
	    oProductObj.NewInstance ();

       /*
		* Read virtual root component that IDOC RFC Adapter populates
		*/
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();

	   /*
		* Read ""MARAM"" component
		*/
        iMARAMComp = iIDOCComp.GetIntComp (""E2MARAM003"");
		if (iMARAMComp.NextRecord ())
		    {
			   /*
			    * Create ""Product"" component in output message
			    */
			    oProductComp = oProductObj.CreatePrimaryIntComp (""Internal Product"");
			    oProductComp.NewRecord ();
			    oProductComp.SetCopySource (iMARAMComp);

    	   	   /*
			    * Set Integration Id 
			    */
			    
			    oProductComp.CopyFieldValue (""Integration Id"",  ""MATNR"");
			    
			    var uomCode    = iMARAMComp.GetFieldValue (""MEINS"");
                var pstat      = iMARAMComp.GetFieldValue (""PSTAT"");
                var lvorm      = iMARAMComp.GetFieldValue (""LVORM"");
  
 
   oProductComp.SetFieldValue (""operation"",                         ""upsert"");             
 
    
    /*
     * If it's not marked for deletion and pstat contains a V product is orderable
     */
		        if (pstat.indexOf ('V') != -1)
		            {
                        oProductComp.SetFieldValue (""Orderable"",             ""Y"");
                        oProductComp.SetFieldValue (""Sales Product Flag"",    ""Y"");
                    }
                else
                    {
                        oProductComp.SetFieldValue (""Orderable"",             ""N"");
                        oProductComp.SetFieldValue (""Sales Product Flag"",    ""N"");
  
                    }
    /* 
     * Check if product is marked as deleted: delete the product from Siebel 
     */
			    if (lvorm == ""X"") 
		        {  
 			          oProductComp.SetFieldValue (""Orderable"",             ""N"");
                      oProductComp.SetFieldValue (""Sales Product Flag"",    ""N"");
			    }

          
               /*
		        * Set Vendor Part Number, Unit of Measure and Division Code
		        */
			    oProductComp.CopyFieldValue (""Vendor Part Number"",       ""MFRPN"");
			    oProductComp.SetFieldValue( ""Unit of Measure"",uomLM.Translate(uomCode) ); 
			    oProductComp.CopyFieldValue (""SAP Division Code"",        ""SPART"");

               /*
		        * Read ""MAKTM"" component
		        */
			    iComp = iMARAMComp.GetIntComp (""E2MAKTM001"");

               
			   /*
			    * Find part number. Choose from available languages
			    * 1st Choice - Current Language
			    * 2nd Choice - English
			    * 3rd Choice - First listed
			    */

 			    var partNum        = null;
			    var partNumEnglish = null;
			    var partNumFirst   = null;
			    var iname = null;
                oProductComp.SetCopySource (iComp);
                
			    findPartNum: while (iComp.NextRecord ())
			    {
				   var spras = iComp.GetFieldValue (""SPRAS"");
				   var maktx = iComp.GetFieldValue (""MAKTX"");
				   
                   oProductComp.CopyFieldValue (""Name"",         ""MAKTX"");
                   
		       
		            if (spras == currLangCode)
				        {
					        partNum = maktx;
					        break findPartNum;   // Found 1st choice
				        }
				    
				    if ((spras == englishLangCode) && !partNumEnglish)
				        {
					        partNumEnglish = maktx;
				        }

        			if (!partNumFirst)
				        {
					        partNumFirst = maktx;
				        }

			    }

   			    if (!partNum)
			        {
				        if (partNumEnglish)
				            {
					            partNum = partNumEnglish;
				            }
				        else
				            {
					            partNum = partNumFirst;
				            }
			        }

			    /* Set Part Number if found */
			    if (partNum != """")
			       {
				     oProductComp.SetFieldValue (""Part #"", partNum);
			       }

       /*
		* Read ""MVKEM"" component
		*/
        iComp = iMARAMComp.GetIntComp( ""E2MVKEM001"" );
	
 	    oProductOrg = oProductComp.CreateIntComp( ""Internal Division"", false );
	    oProductOrg.SetCopySource( iComp );
	    
 
	    enumOrg: while( iComp.NextRecord() )
		   {
			   if ( iComp.GetFieldValue (""LVORM"") != ""X"" )
			   {
			     oProductOrg.NewRecord();
			   
  		       oProductOrg.SetFieldValue(  ""Status"",                            "" "" );	  
  		       oProductOrg.CopyFieldValue( ""Back Office Sales Organization"",    ""VKORG"" );
			   oProductOrg.CopyFieldValue( ""Back Office Distribution Channel"",  ""VTWEG"" );
			   oProductOrg.CopyFieldValue( ""Minimum Order Unit"",                ""AUMNG"" );
			   oProductOrg.CopyFieldValue( ""Primary Plant"",                     ""DWERK"" );
			   
			    var uomCode    = iMARAMComp.GetFieldValue( ""MEINS"" );
         	    var tmpUomCode = iComp.GetFieldValue     ( ""VRKME"" );

  	           
  	           if( tmpUomCode != null && tmpUomCode != """" )
				  {
			         uomCode = tmpUomCode;
				  }

			   oProductOrg.SetFieldValue( ""Unit of Measure"",uomLM.Translate(uomCode) ); 
              }
               else
               {
                 oProductOrg.NewRecord();
                 
               oProductOrg.SetFieldValue(  ""Status"",                            ""Deletion"" );	  
               oProductOrg.CopyFieldValue( ""Back Office Sales Organization"",    ""VKORG"" );
			   oProductOrg.CopyFieldValue( ""Back Office Distribution Channel"",  ""VTWEG"" );
			   oProductOrg.CopyFieldValue( ""Minimum Order Unit"",                ""AUMNG"" );
			   oProductOrg.CopyFieldValue( ""Primary Plant"",                     ""DWERK"" );
			   oProductOrg.SetFieldValue ( ""Orderable"",                         ""N"");
               
			   		   
			    var uomCode    = iMARAMComp.GetFieldValue( ""MEINS"" );
         	    var tmpUomCode = iComp.GetFieldValue     ( ""VRKME"" );

  	           
  	           if( tmpUomCode != null && tmpUomCode != """" )
				  {
			         uomCode = tmpUomCode;
				  }

			   oProductOrg.SetFieldValue( ""Unit of Measure"",uomLM.Translate(uomCode) ); 
			   		   
			   
               }
		   }


       /*
		* Read ""MARCM"" component
		*/
        iComp = iMARAMComp.GetIntComp( ""E2MARCM003"" );
	
 	    oProductInv = oProductComp.CreateIntComp( ""FS Inventory Location"", false );
	    oProductInv.SetCopySource( iComp );
  	            
        enumInv: while( iComp.NextRecord() )
		    {
		/* This will only display a plant if the material can be sold, ie if a sales org is associated to the material */    
                if (pstat.indexOf ('V') != -1)
                    {
                   	    oProductInv.NewRecord();
					    oProductInv.CopyFieldValue( ""Inventory Name"",   ""WERKS"" );
					    oProductInv.SetFieldValue ( ""Inventory Type"",   ""SAP Plant"" );
                    }
			}
			
       /*
		* Set description. Choose from available languages
		*   1st Choice - Current Language
		*   2nd Choice - English
		*   3rd Choice - First listed
		*/
		iComp               = iMARAMComp.GetIntComp (""E2MTXHM001"");
		var descText        = null;
		var descTextEnglish = null;
		var descTextFirst   = null;

		while (iComp.NextRecord ())
		    {
			    if (iComp.GetFieldValue (""TDID"") == ""0001"")
				    {
					// Gather this description if it fits one of our choices
					var tdspras = iComp.GetFieldValue (""TDSPRAS"");
					    if (!descTextFirst || (tdspras == currLangCode) || (tdspras == englishLangCode))
					        {
						     var descTextCurr = """";
               
						     iComp2 = iComp.GetIntComp (""E2MTXLM"");
						     i = 0;
						     
						     findFirstFour: while ( iComp2.NextRecord () )
						         {
								     descTextCurr += iComp2.GetFieldValue (""TDLINE"") + ""\r\n"";
 							         // Only get first four rows
							         i++;
							             if (i == 4)
								         break findFirstFour;
						         }
               
				 		      // Keep track of appropriate descriptions
						      if (tdspras == currLangCode)
						          {
							          descText = descTextCurr;
							          break;    // Found 1st choice
						          }
						      
						      if ((tdspras == englishLangCode) && !descTextEnglish)
						          {
							          descTextEnglish = descTextCurr;
						          }
					
						      if (!descTextFirst)
						          {
							          descTextFirst = descTextCurr;
						          }

	  			           }

				    }

			 }
      
        // Select from our preferred language choices
		if (!descText)
			{
				if (descTextEnglish)
		  		    {
					    descText = descTextEnglish;
				    }
				else if (descTextFirst)
				    {
 				        descText = descTextFirst;
				    }
				else
				    {
 				        descText = """";
				    }
			}
 
		oProductComp.SetFieldValue (""Description"", descText);

  		    /*
		     * Set Order Cst Flag - NOT ON BUS COMP
		     */
		     iComp = iMARAMComp.GetIntComp (""E2MBEWM001"");

		    while (iComp.NextRecord ())
		    {
			    // oProductComp.SetCopySource  (iComp);
			    // if (iComp.GetFieldValue (""VPRSV""); == ""V"")
				// iComp.CopyFieldValue (""ORDERCST"", ""VERPR"");
				// else
				// iComp.CopyFieldValue (""ORDERCST"", ""STPRS"");
				break;
		    }


        }

    }

}
function ReceiveSAP4xMaterial_IDOCToSiebel_4x (inputMsg, outputMsg)
{

   /* Input Integration Object
	*  - Product - Receive SAP 4x Material (4x IDOC Input)
	*
	* Output Integration Object:
	*  - Product - Receive SAP 4x Material (Siebel)
	*/

	// Set up EAI Input Message objects - Read from Input IntObj
	var iIDOCObj;		// IDOC instance
	var iIDOCComp;		// top level IDOC segment
	var iMARAMComp; 	// IDOC Material Header
	var iComp;			// for iterating first level input child components
	var iComp2; 		// for iterating second level input child components

	// Set up EAI Output Message objects - Write to Output IntObj
	var oProductObj;	// Siebel Product instance
	var oProductComp;	// Internal Product
	var oProductOrg;	// Internal Division
	var oProductInv;	// SAP 4x Inventory Location 
	var oProductPriOrg  // Product Primary Organization

	// EAI Lookup maps
	var uomLM   = EAIGetValueMap (""SAP Unit of Measure"", ""Siebel Inbound"" );
	var langLM	= EAIGetValueMap (""SAP Language 4x"",     ""Siebel Outbound"");

	// Map current Siebel language code to SAP language codes 
	var englishLangCode = langLM.Translate (""ENU"");
	var currLangCode    = langLM.Translate (TheApplication().InvokeMethod(""Language""));

    // Assume 'E' for English if there's no translation
	if (!englishLangCode)
	{
		englishLangCode = ""E"";	
	}

	
	// Find and create top-level integration object
	iIDOCObj	= inputMsg.GetIntObj     (""Product - Receive SAP 4x Material (4x IDOC Input)"");
	oProductObj = outputMsg.CreateIntObj (""Product - Receive SAP 4x Material (Siebel)"");

    // Start to Map Input and Output object
	while (iIDOCObj.NextInstance ())
	{
		// Create ""Product"" Object
		oProductObj.NewInstance ();

		// Read virtual root component that IDOC RFC Adapter populates
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();


		// Read ""MARAM"" component 
		iMARAMComp = iIDOCComp.GetIntComp (""E2MARAM003"");
		if (iMARAMComp.NextRecord ())
		{
            /**
             *  Map data to ""Internal Product"" Intergration Component
             */

			// Create ""Product"" component in output message
			oProductComp = oProductObj.CreatePrimaryIntComp (""Internal Product"");
			oProductComp.NewRecord ();
			oProductComp.SetCopySource (iMARAMComp);

            // Set operation method
			oProductComp.SetFieldValue (""operation"", ""sync""); 			

			// Set Integration Id 
			oProductComp.CopyFieldValue (""Integration Id"",""MATNR"");
			oProductComp.CopyFieldValue (""Name"",	      ""MATNR"");

            // Set Primary Organization.  Will be done after mapping the Internal Division
			var PrimaryOrg;
			
			// Set Vendor Part Number
			oProductComp.CopyFieldValue (""Vendor Part Number"", ""MFRPN"");

            // Set Unit of Mesaure
			var uomCode = iMARAMComp.GetFieldValue (""MEINS"");
            var pseUM   = TheApplication().InvokeMethod (""LookupValue"", ""UNIT_OF_MEASURE"", uomLM.Translate(uomCode));
			oProductComp.SetFieldValue (""Unit of Measure"", pseUM); 

            // Set Division Code
			var DivCode = iMARAMComp.GetFieldValue(""SPART"");
		  	if ((DivCode != null) && (DivCode != """"))
		  	 {
				oProductComp.SetFieldValue (""SAP Division Code"", DivCode);
			 }
			 else
			 {
			 	oProductComp.SetFieldValue (""SAP Division Code"", """");
			 }
			 
			/*
			 * Check if product is marked as deleted: 
			 *  1) Yes - Set product status as Obselete and remove the orderable and sales product flag.
			 *  2) No  - Remove the product status and check the orderable and sales product flag
			 */

            var pstat	   = iMARAMComp.GetFieldValue (""PSTAT"");
			var lvorm	   = iMARAMComp.GetFieldValue (""LVORM"");
			var dStatus    = TheApplication().InvokeMethod (""LookupValue"", ""IMPL_PHASE"", ""Obsolete"");

			if (lvorm == ""X"") 
			{  
				oProductComp.SetFieldValue (""Orderable"",			 ""N"");
				oProductComp.SetFieldValue (""Sales Product Flag"",	 ""N"");
				oProductComp.SetFieldValue (""Version Status"", dStatus);

			}
			else if (pstat.indexOf ('V') != -1)
			{
				oProductComp.SetFieldValue (""Orderable"",			 ""Y"");
				oProductComp.SetFieldValue (""Sales Product Flag"",	 ""Y"");
				oProductComp.SetFieldValue (""Version Status"", """" );                                                				
			}
			else
			{
				oProductComp.SetFieldValue (""Orderable"",			 ""N"");
				oProductComp.SetFieldValue (""Sales Product Flag"",	 ""N"");
				oProductComp.SetFieldValue (""Version Status"", """" );                                                				
			}
		
		   /*
			* Set Product Part Number. Choose from available languages
			*	1st Choice - Current Language
			*	2nd Choice - English
			*	3rd Choice - First listed
			*/
		   
			// Read ""MAKTM"" component 
			iComp = iMARAMComp.GetIntComp (""E2MAKTM001"");

			var partNum 	   = null;
			var partNumEnglish = null;
			var partNumFirst   = null;

			oProductComp.SetCopySource (iComp);
			
			while (iComp.NextRecord ())
			{
				var spras = iComp.GetFieldValue (""SPRAS"");
				var maktx = iComp.GetFieldValue (""MAKTX"");
		   
				if (spras == currLangCode)
				{
					partNum = maktx;
					break;	 // Found 1st choice
				}
				
				if ((spras == englishLangCode) && !partNumEnglish)
				{
					partNumEnglish = maktx;
				}

				if (!partNumFirst)
				{
					partNumFirst = maktx;
				}
			}

			if (!partNum)
			{
				if (partNumEnglish)
				{
					partNum = partNumEnglish;
				}
				else
				{
					partNum = partNumFirst;
				}
			}

			/* Set Part Number if found */
			if (partNum != """")
			{
				oProductComp.SetFieldValue (""Part #"", partNum);
			}

		   /*
			* Set Product Description. Choose from available languages
			*	1st Choice - Current Language
			*	2nd Choice - English
			*	3rd Choice - First listed
			*/

			// Read ""MAKTM"" component 
			iComp				= iMARAMComp.GetIntComp (""E2MTXHM001"");
			var descText		= null;
			var descTextEnglish = null;
			var descTextFirst	= null;

			while (iComp.NextRecord ())
			{
				if (iComp.GetFieldValue (""TDID"") == ""0001"")
				{
					// Gather this description if it fits one of our choices
					var tdspras = iComp.GetFieldValue (""TDSPRAS"");
					if (!descTextFirst || (tdspras == currLangCode) || (tdspras == englishLangCode))
					{
						var descTextCurr = """";

						iComp2 = iComp.GetIntComp (""E2MTXLM"");
						var line = 0;

						while ( iComp2.NextRecord () )
						{
						 	// Only get first four rows
							descTextCurr += iComp2.GetFieldValue (""TDLINE"") + ""\r\n"";
							line++;
							if (line == 4)
							break;
						}

						// Keep track of appropriate descriptions
						if (tdspras == currLangCode)
						{
							descText = descTextCurr;
							break;	// Found 1st choice
						}

						if ((tdspras == englishLangCode) && !descTextEnglish)
						{
							descTextEnglish = descTextCurr;
						}

						if (!descTextFirst)
						{
							descTextFirst = descTextCurr;
						}
					}
				}
			}
		  
			// Select from our preferred language choices
			if (!descText)
			{
				if (descTextEnglish)
				{
					descText = descTextEnglish;
				}
				else if (descTextFirst)
				{
					descText = descTextFirst;
				}
				else
				{
					descText = """";
				}
			}
 
			oProductComp.SetFieldValue (""Description"", descText);

            /**
             *  Map data to ""Internal Division"" Intergration Component
             */

			// Read ""MVKEM"" 
			iComp = iMARAMComp.GetIntComp( ""E2MVKEM001"" );
		
			oProductOrg    = oProductComp.CreateIntComp( ""Internal Division"", true );
            oProductPriOrg = oProductComp.CreateIntComp (""Internal Product_Organization"", false);						
			oProductOrg.SetCopySource( iComp );
 

            // If division code is not specified in SAP, it means product 
            // belongs to every sales areas with the same SalesOrg and
            // DistChannel.
			while( iComp.NextRecord() )
			{
				var OrgBusObject = TheApplication().GetBusObject(""Organizations"") ;
				var OrgBusComp   = OrgBusObject.GetBusComp(""Organization"") ;
				var SalesOrg     = iComp.GetFieldValue(""VKORG"");
				var DistChannel  = iComp.GetFieldValue(""VTWEG"");
						
				OrgBusComp.SetViewMode(3);  // All Mode
			
                // Find all Sales Area with the same SalesOrg and DistChannel in Siebel
				OrgBusComp.ClearToQuery();
 				OrgBusComp.SetSearchSpec(""Back Office Sales Organization"", SalesOrg);
 				OrgBusComp.SetSearchSpec(""Back Office Distribution Channel"", DistChannel);
				if ((DivCode != null) && (DivCode != """"))
				{
					OrgBusComp.SetSearchSpec(""Back Office Division"", DivCode);
				}
				else
				{
					OrgBusComp.ActivateField(""Back Office Division"");
				}				
			
				OrgBusComp.ExecuteQuery();
				
				var hasMoreRecords = OrgBusComp.FirstRecord();
									
				// While there are records iterate through
				while ( hasMoreRecords )
				{
					var mDivCode;
					if ((DivCode == null) || (DivCode == """"))
					{
						mDivCode = OrgBusComp.GetFieldValue(""Back Office Division"");
					}
					else
					{
					    mDivCode = DivCode;
					}
			
					oProductOrg.NewRecord();

                    // Set Sales Org, Distribution Channel, and Division Code for Siebel Internal Division
					oProductOrg.SetFieldValue(""Back Office Sales Organization"", SalesOrg); 
					oProductOrg.SetFieldValue(""Back Office Distribution Channel"", DistChannel);
					oProductOrg.SetFieldValue(""Back Office Division"", mDivCode);

                    // Mark for deletion
					if ( iComp.GetFieldValue (""LVORM"") != ""X"")
					{
						oProductOrg.SetFieldValue(""Status"", """");
						oProductOrg.SetFieldValue (""Orderable"", ""Y"");
					}
					else
					{
						oProductOrg.SetFieldValue(""Status"", ""Deletion"");
						oProductOrg.SetFieldValue(""Orderable"", ""N"");
					}

                    // Set Minimum Order Unit
					oProductOrg.CopyFieldValue(""Minimum Order Unit"", ""AUMNG"");

                    // Set Primary Plant
					oProductOrg.CopyFieldValue(""Primary Plant"", ""DWERK"");
		   
                    // Set Organization Unit of Mesaure
					var orgUomCode = iComp.GetFieldValue     (""VRKME"");

					if (orgUomCode == null && orgUomCode == """")
					{
						orgUomCode = uomCode;
					}

                    var pseUM = TheApplication().InvokeMethod (""LookupValue"", ""UNIT_OF_MEASURE"", uomLM.Translate(orgUomCode));
					oProductOrg.SetFieldValue(""Unit of Measure"", pseUM);
					
					// Set Primary Organization for Internal Product
					PrimaryOrg = OrgBusComp.GetFieldValue(""Organization Id"");
					oProductPriOrg.NewRecord();					
					oProductPriOrg.SetFieldValue( ""Organization Id"", PrimaryOrg );
					
					hasMoreRecords = OrgBusComp.NextRecord();
				}
			}
			
            // Set the Last Organization as Primary Org
	    	if ((PrimaryOrg != null) && (PrimaryOrg != """"))
			{
	 			oProductPriOrg.SetFieldValue( ""IsPrimaryMVG"", ""Y"" );											
	 		}			

            /**
             *  Map data to ""SAP 4x Inventory Locations"" Intergration Component
             */

			// Read ""MARCM"" component
			iComp = iMARAMComp.GetIntComp( ""E2MARCM003"" );
		
			oProductInv = oProductComp.CreateIntComp( ""SAP 4x Inventory Locations"", false);
			oProductInv.SetCopySource( iComp );
					
			while( iComp.NextRecord() )
			{
				/* This will only display a plant if the material can be sold, ie if a sales org is associated to the material */	 
				if (pstat.indexOf ('V') != -1)
				{
                    var pseInvType = TheApplication().InvokeMethod (""LookupValue"", ""FS_INVLOCTYPE_TYPE"", ""SAP Plant"");
					oProductInv.NewRecord();
					oProductInv.CopyFieldValue( ""Inventory Name"",	""WERKS"" );
					oProductInv.SetFieldValue ( ""Inventory Type"",	pseInvType );
				}
			}
		}
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 4 $
//      $Date: 12/10/99 10:29a $
//    $Author: Achaudhr $ of last update
//
// CREATOR:    P. Lim
//
// DESCRIPTION
//    Javascript maps from Siebel Product to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
"
function ReceiveSAPMaterial_IDOCToSiebel (inputMsg, outputMsg)
{
   var app = TheApplication();
   var msg;

   /* Input Objects' Integration Components
    *   Material IDOC (Product - Receive SAP Material (IDOC Input))
    *     E2MARAM
    *       E2MAKTM (part number)
    *       E2MBEWM (order cst flag, orderable flag)
    *       E2MTXHM 
    *         E2MTXLM (description)
    *       E2MVKEM (units of measure)
    *
    * Output Object's Integration Components:
    *   Product Object (Product - Receive SAP Material (Siebel))
    *     Product (oProduct)
    */

   /*
    * Set up EAI Lookup maps
    */
   var uomLM       = EAIGetValueMap (""SAP Unit of Measure"", ""Siebel Inbound"");
   var langLM      = EAIGetValueMap (""SAP Language"", ""Siebel Outbound"");

   /*
    * Get the SAP language codes for the current language and for English
    */

   var currLangCode = langLM.Translate (TheApplication().InvokeMethod(""Language""));
   var englishLangCode = langLM.Translate (""ENU"");
   if (!englishLangCode)
   {
      englishLangCode = ""E"";  // Assume 'E' for English if there's no translation
   }

   /*
    * Set up EAI Input Message objects
    */
   var iIDOCObj;   // IDOC instance
   var iIDOCComp;  // top level IDOC segment
   var iMARAMComp; // IDOC Material Header
   var iComp;      // for reading child components
   var iComp2;     // for reading child components
   var i = 0;

   /*
    * Set up EAI Output Message objects
    */
   var oProductObj;    // Siebel Product instance
   var oProductComp;   // Product

   /*
    * Find and create top-level integration object
    */
   iIDOCObj = inputMsg.GetIntObj (""Product - Receive SAP Material (IDOC Input)"");
   oProductObj = outputMsg.CreateIntObj (""Product - Receive SAP Material (Siebel)"");

   /*
    * Read int object instances from EAI message
    */
   while (iIDOCObj.NextInstance ())
   {
      /*
       * Create ""Product"" object
       */
      oProductObj.NewInstance ();

      /*
       * Read virtual root component that IDOC RFC Adapter populates
       */
      iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
      iIDOCComp.NextRecord ();

      /*
       * Read ""MARAM"" component
       */
      iMARAMComp = iIDOCComp.GetIntComp (""E2MARAM"");
      if (iMARAMComp.NextRecord ())
      {
         /*
          * Create ""Product"" component in output message
          */
         oProductComp = oProductObj.CreatePrimaryIntComp (""Product"");
         oProductComp.NewRecord ();
         oProductComp.SetCopySource (iMARAMComp);

         /*
          * Set Integration Id and Name
          */
         oProductComp.CopyFieldValue (""Name"",           ""MATNR"");
         oProductComp.CopyFieldValue (""Integration Id"", ""MATNR"");

         // msg = ""matnr: "" + iMARAMComp.GetFieldValue (""MATNR"");
         // app.MsgBox(msg);

         /* Check if product is marked as deleted */
         /* P Lim. 3/16/00. Deletes not supported in this release. 
            Next release: Add a column to show that the item is marked for deletion. */
         // if (iMARAMComp.GetFieldValue (""LVORM"") == ""X"")
         // {  /* The product is marked as deleted: delete the product from Siebel */
         //    oProductComp.SetFieldValue (""operation"", ""delete"");
         //   continue;
         // }

         // Set operation to ""upsert"" since we are using the ""Execute"" method.
         oProductComp.SetFieldValue (""operation"", ""upsert"");

         // Defaults to 'N' in buscomp
         // oProductComp.CopyFieldValue (""Position Bill Product Flag"", ""N"");
         // oProductComp.CopyFieldValue (""Compensatable"", ""Y"");
         // Defaults to 'Y' in buscomp
         // oProductComp.CopyFieldValue (""Sales Product Flag"", ""Y"");
         // Defaults to 'N' in buscomp
         // oProductComp.CopyFieldValue (""Sales Service Flag"", ""N"");

         /*
          * Find Orderable Flag
          */
         var pstat = iMARAMComp.GetFieldValue (""PSTAT"");
         // If pstat has a 'V', then material is orderable
         if (pstat.indexOf ('V') != -1)
            oProductComp.SetFieldValue (""Orderable"", ""Y"");
         else
            oProductComp.SetFieldValue (""Orderable"", ""N"");

         /*
          * Find part number. Choose from available languages
          *   1st Choice - Current Language
          *   2nd Choice - English
          *   3rd Choice - First listed
          */
         iComp = iMARAMComp.GetIntComp (""E2MAKTM"");
         var partNum = null;
         var partNumEnglish = null;
         var partNumFirst = null;
         while (iComp.NextRecord ())
         {
            var spras = iComp.GetFieldValue (""SPRAS"");
            var maktx = iComp.GetFieldValue (""MAKTX"");

            if (spras == currLangCode)
            {
               partNum = maktx;
               break;   // Found 1st choice
            }
            if ((spras == englishLangCode) && !partNumEnglish)
            {
               partNumEnglish = maktx;
            }
            if (!partNumFirst)
            {
               partNumFirst = maktx;
            }
         }

         if (!partNum)
         {
            if (partNumEnglish)
            {
               partNum = partNumEnglish;
            }
            else
            {
               partNum = partNumFirst;
            }
         }

         /* Set Part Number if found */
         if (partNum != null)
         {
            oProductComp.SetFieldValue (""Part #"", partNum);
            // PLim 2/19/00. Part # is not required in Siebel Product.
            // else EAIRaiseError (""Unable to find part number for material '"" + iMARAMComp.GetFieldValue (""MATNR"") + ""'."");
         }

         /*
          * Find Unit of Measure
          */
         iComp = iMARAMComp.GetIntComp (""E2MVKEM"");
         var uomCode = null;

         // If no sales area specific unit of measure, use the material base unit of measure
         uomCode = iMARAMComp.GetFieldValue (""MEINS"");

         // Find sales area specific unit of measure (if any)
         while (iComp.NextRecord ())
         {
            if (iComp.GetFieldValue (""VKORG"") == ""0010"" && iComp.GetFieldValue (""VTWEG"") == ""10"")
            {
               if (iComp.GetFieldValue (""LVORM"") == ""X"")
               {  /* the sales area specific info is marked as deleted: set values to empty string */
                  /* uomCode defaults to base unit of measure. */
                  /* NOTE: in the multiorg maps, should delete the product-org intersection row */
                  oProductComp.SetFieldValue (""Minimum Quantity"", """");
               }
               else
               {
                  var tmpUomCode = iComp.GetFieldValue (""VRKME"");
                  if (tmpUomCode != null && tmpUomCode != """")
                  {
                     uomCode = tmpUomCode;
                  }
                  oProductComp.SetCopySource  (iComp);
                  oProductComp.CopyFieldValue (""Minimum Quantity"", ""AUMNG"");
               }

               break;
            }
         }

         // msg = ""uomCode: "" + uomCode;
         // app.MsgBox(msg);
         oProductComp.SetFieldValue (""Unit of Measure"", uomLM.Translate (uomCode));

         /*
          * Set description. Choose from available languages
          *   1st Choice - Current Language
          *   2nd Choice - English
          *   3rd Choice - First listed
          */
         iComp        = iMARAMComp.GetIntComp (""E2MTXHM"");
         var descText = null;
         var descTextEnglish = null;
         var descTextFirst = null;

         while (iComp.NextRecord ())
         {
            if (iComp.GetFieldValue (""TDID"") == ""0001"")
            {
               // Gather this description if it fits one of our choices
               var tdspras = iComp.GetFieldValue (""TDSPRAS"");
               if (!descTextFirst || (tdspras == currLangCode) || (tdspras == englishLangCode))
               {
                  var descTextCurr = """";
                  
                  iComp2 = iComp.GetIntComp (""E2MTXLM"");
                  i = 0;
                  while (iComp2.NextRecord ())
                  {
                     // msg = ""TDLINE: "" + iComp2.GetFieldValue (""TDLINE"");
                     // app.MsgBox(msg);

                     descTextCurr += iComp2.GetFieldValue (""TDLINE"") + ""\r\n"";

                     // Only get first four rows
                     i++;
                     if (i == 4)
                        break;
                  }
                  
                  // Keep track of appropriate descriptions
                  if (tdspras == currLangCode)
                  {
                     descText = descTextCurr;
                     break;    // Found 1st choice
                  }
                  if ((tdspras == englishLangCode) && !descTextEnglish)
                  {
                     descTextEnglish = descTextCurr;
                  }
                  if (!descTextFirst)
                  {
                     descTextFirst = descTextCurr;
                  }
               }
            }
         }
         
         // Select from our preferred language choices
         if (!descText)
         {
            if (descTextEnglish)
            {
               descText = descTextEnglish;
            }
            else if (descTextFirst)
            {
               descText = descTextFirst;
            }
            else
            {
               descText = """";
            }
         }

         // msg = ""descText: "" + descText;
         // app.MsgBox(msg);

         // Note: DTE Automatic string trimming assumed for the Description field.

         oProductComp.SetFieldValue (""Description"", descText);

         /*
          * Set Order Cst Flag
          */
         iComp = iMARAMComp.GetIntComp (""E2MBEWM"");
         while (iComp.NextRecord ())
         {
            // msg = ""VPRSV: "" + iComp.GetFieldValue (""VPRSV"");
            // app.MsgBox(msg);

            /* PLIM: NOT EXPOSED ON BUSCOMP!!! */
            // oProductComp.SetCopySource  (iComp);
            // if (iComp.GetFieldValue (""VPRSV""); == ""V"")
            //   iComp.CopyFieldValue (""ORDERCST"", ""VERPR"");
            // else
            //   iComp.CopyFieldValue (""ORDERCST"", ""STPRS"");

            /* only get first row */
            break;
         }
      }
   }
}
"
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 4 $
//      $Date: 12/10/99 10:29a $
//    $Author: Achaudhr $ of last update
//
// CREATOR:    R.Lankinen
//
// DESCRIPTION
//    Multi-organization Javascript maps from Siebel Product to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
"
function ReceiveSAPMaterial_IDOCToSiebel (inputMsg, outputMsg)
{
	/* Input Objects' Integration Components
	*   Material IDOC (Product - Receive SAP Material (IDOC Input))
	*     E2MARAM
	*       E2MAKTM (part number)
	*       E2MBEWM (order cst flag, orderable flag)
	*       E2MTXHM 
	*         E2MTXLM (description)
	*       E2MVKEM (units of measure)
	*
	* Output Object's Integration Components:
	*   Product Object (Product - Receive SAP Material (MO))
	*     Product (oProduct)
	*/

	/*
	* Set up EAI Lookup maps
	*/
	var uomLM       = EAIGetValueMap (""SAP Unit of Measure"", ""Siebel Inbound"");
	var langLM      = EAIGetValueMap (""SAP Language"", ""Siebel Outbound"");

	/*
	* Get the SAP language codes for the current language and for English
	*/

	var currLangCode = langLM.Translate (TheApplication().InvokeMethod(""Language""));
	var englishLangCode = langLM.Translate (""ENU"");
	if (!englishLangCode)
	{
		englishLangCode = ""E"";  // Assume 'E' for English if there's no translation
	}

	/*
	* Set up EAI Input Message objects
	*/
	var iIDOCObj;   // IDOC instance
	var iIDOCComp;  // top level IDOC segment
	var iMARAMComp; // IDOC Material Header
	var iComp;      // for reading child components
	var iComp2;     // for reading child components
	var i = 0;

	/*
	* Set up EAI Output Message objects
	*/
	var oProductObj;    // Siebel Product instance
	var oProductComp;   // Product
	var oProductOrg;    // Product Organization

	/*
	* Find and create top-level integration object
	*/
	iIDOCObj = inputMsg.GetIntObj (""Product - Receive SAP Material (IDOC Input)"");
	oProductObj = outputMsg.CreateIntObj (""Product - Receive SAP Material (MO)"");

	/*
	* Read int object instances from EAI message
	*/
	enumObj: while (iIDOCObj.NextInstance ())
	{
		/*
		* Create ""Product"" object
		*/
		oProductObj.NewInstance ();

		/*
		* Read virtual root component that IDOC RFC Adapter populates
		*/
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		iIDOCComp.NextRecord ();

		/*
		* Read ""MARAM"" component
		*/
		iMARAMComp = iIDOCComp.GetIntComp (""E2MARAM"");
		if (iMARAMComp.NextRecord ())
		{
			/*
			* Create ""Product"" component in output message
			*/
			oProductComp = oProductObj.CreatePrimaryIntComp (""Product"");
			oProductComp.NewRecord ();
			oProductComp.SetCopySource (iMARAMComp);

			/*
			* Set Integration Id and Name
			*/
			oProductComp.CopyFieldValue (""Name"",           ""MATNR"");
			oProductComp.CopyFieldValue (""Integration Id"", ""MATNR"");

			// Division code:
			oProductComp.CopyFieldValue( ""SAP Division Code"",""SPART"" );

			/* Check if product is marked as deleted */
			/* P Lim. 3/16/00. Deletes not supported in this release. 
				Next release: Add a column to show that the item is marked for deletion. */
			if (iMARAMComp.GetFieldValue (""LVORM"") == ""X"")
			{  /* The product is marked as deleted: delete the product from Siebel */
				oProductComp.SetFieldValue (""operation"", ""delete"");
				continue enumObj;
			}

			// Set operation to ""upsert"" since we are using the ""Execute"" method.
			oProductComp.SetFieldValue (""operation"", ""upsert"");

			// Defaults to 'N' in buscomp
			// oProductComp.CopyFieldValue (""Position Bill Product Flag"", ""N"");
			// oProductComp.CopyFieldValue (""Compensatable"", ""Y"");
			// Defaults to 'Y' in buscomp
			// oProductComp.CopyFieldValue (""Sales Product Flag"", ""Y"");
			// Defaults to 'N' in buscomp
			// oProductComp.CopyFieldValue (""Sales Service Flag"", ""N"");

			/*
			* Find Orderable Flag
			*/
			var pstat = iMARAMComp.GetFieldValue (""PSTAT"");
			// If pstat has a 'V', then material is orderable
			if (pstat.indexOf ('V') != -1)
				oProductComp.SetFieldValue (""Orderable"", ""Y"");
			else
				oProductComp.SetFieldValue (""Orderable"", ""N"");

			/*
			* Find part number. Choose from available languages
			*   1st Choice - Current Language
			*   2nd Choice - English
			*   3rd Choice - First listed
			*/
			iComp = iMARAMComp.GetIntComp (""E2MAKTM"");
			var partNum = null;
			var partNumEnglish = null;
			var partNumFirst = null;
			findPartNum: while (iComp.NextRecord ())
			{
				var spras = iComp.GetFieldValue (""SPRAS"");
				var maktx = iComp.GetFieldValue (""MAKTX"");

				if (spras == currLangCode)
				{
					partNum = maktx;
					break findPartNum;   // Found 1st choice
				}
				if ((spras == englishLangCode) && !partNumEnglish)
				{
					partNumEnglish = maktx;
				}
				if (!partNumFirst)
				{
					partNumFirst = maktx;
				}
			}

			if (!partNum)
			{
				if (partNumEnglish)
				{
					partNum = partNumEnglish;
				}
				else
				{
					partNum = partNumFirst;
				}
			}

			/* Set Part Number if found */
			if (partNum != null)
			{
				oProductComp.SetFieldValue (""Part #"", partNum);
				// PLim 2/19/00. Part # is not required in Siebel Product.
				// else EAIRaiseError (""Unable to find part number for material '"" + iMARAMComp.GetFieldValue (""MATNR"") + ""'."");
			}

			// #####################################

			iComp = iMARAMComp.GetIntComp( ""E2MVKEM"" );
	      oProductOrg = oProductComp.CreateIntComp( ""Product_Organization"",oProductComp );
			oProductOrg.SetCopySource( iComp );

			enumOrg: while( iComp.NextRecord() )
			{
				if( iComp.GetFieldValue(""LVORM"") != ""X"" )
				{
					oProductOrg.NewRecord();

					/*
					* Process Sub-Organization info
					*/
					oProductOrg.CopyFieldValue( ""Back Office Sales Organization"",""VKORG"" );
					oProductOrg.CopyFieldValue( ""Back Office Distribution Channel"",""VTWEG"" );
					oProductOrg.CopyFieldValue( ""Back Office Min Order Units"",""AUMNG"" );

					var uomCode = iMARAMComp.GetFieldValue( ""MEINS"" );
					var tmpUomCode = iComp.GetFieldValue( ""VRKME"" );

					if( tmpUomCode != null && tmpUomCode != """" )
					{
						uomCode = tmpUomCode;
					}

					oProductOrg.SetFieldValue( ""Back Office Unit of Measure"",uomLM.Translate(uomCode) );
				}
			}

			// #####################################

			/*
			* Set description. Choose from available languages
			*   1st Choice - Current Language
			*   2nd Choice - English
			*   3rd Choice - First listed
			*/
			iComp        = iMARAMComp.GetIntComp (""E2MTXHM"");
			var descText = null;
			var descTextEnglish = null;
			var descTextFirst = null;

			while (iComp.NextRecord ())
			{
				if (iComp.GetFieldValue (""TDID"") == ""0001"")
				{
					// Gather this description if it fits one of our choices
					var tdspras = iComp.GetFieldValue (""TDSPRAS"");
					if (!descTextFirst || (tdspras == currLangCode) || (tdspras == englishLangCode))
					{
						var descTextCurr = """";
               
						iComp2 = iComp.GetIntComp (""E2MTXLM"");
						i = 0;
						findFirstFour: while (iComp2.NextRecord ())
						{
							descTextCurr += iComp2.GetFieldValue (""TDLINE"") + ""\r\n"";

							// Only get first four rows
							i++;
							if (i == 4)
								break findFirstFour;
						}
               
						// Keep track of appropriate descriptions
						if (tdspras == currLangCode)
						{
							descText = descTextCurr;
							break;    // Found 1st choice
						}
						if ((tdspras == englishLangCode) && !descTextEnglish)
						{
							descTextEnglish = descTextCurr;
						}
						if (!descTextFirst)
						{
							descTextFirst = descTextCurr;
						}
					}
				}
			}
      
			// Select from our preferred language choices
			if (!descText)
			{
				if (descTextEnglish)
				{
					descText = descTextEnglish;
				}
				else if (descTextFirst)
				{
					descText = descTextFirst;
				}
				else
				{
					descText = """";
				}
			}

			// Note: DTE Automatic string trimming assumed for the Description field.

			oProductComp.SetFieldValue (""Description"", descText);

			/*
			* Set Order Cst Flag
			*/
			iComp = iMARAMComp.GetIntComp (""E2MBEWM"");
			while (iComp.NextRecord ())
			{
				/* PLIM: NOT EXPOSED ON BUSCOMP!!! */
				// oProductComp.SetCopySource  (iComp);
				// if (iComp.GetFieldValue (""VPRSV""); == ""V"")
				//   iComp.CopyFieldValue (""ORDERCST"", ""VERPR"");
				// else
				//   iComp.CopyFieldValue (""ORDERCST"", ""STPRS"");

				/* only get first row */
				break;
			}
		}
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var result = EAIExecuteMap (MethodName, Inputs, Outputs);

	return result;
}
"
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// DESCRIPTION
//    Javascript maps to Siebel Product from Oracle Item
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyIntegrationObjectData (OracleIntObject, SiebelIntObject)
{
	// Declare variables to hold the Oracle Primary Integration Component and
	// The Siebel Primary Integration Component
	var OracleItemIntComp, SiebelProductIntComp;

	var SiebelInternalDivision, SiebelInventoryLocation ;
	var OrclProdInvLocComp, OrclProdOrgComp;
	
	// Open the EAI Value Map for Products here.
	var ProductEAILookup =EAIGetValueMap (""Oracle Unit of Measure"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);


	//Get the primary integration component from the Oracle Integration Object
	OracleItemIntComp = OracleIntObject.GetPrimaryIntComp (""SIE_PRODUCT_V"");

	if (OracleItemIntComp.Exists ())
	{
		// INTERNAL PRODUCT

		SiebelProductIntComp = SiebelIntObject.CreatePrimaryIntComp (""Internal Product_Oracle"");
		

		while (OracleItemIntComp.NextRecord ())
		{
			 
			 
				SiebelProductIntComp.NewRecord ();
				SiebelProductIntComp.SetCopySource (OracleItemIntComp);
				
				SiebelProductIntComp.SetFieldValue (""operation"", ""synchronize"");
				SiebelProductIntComp.CopyFieldValue (""Description"",""DESCRIPTION"");
				SiebelProductIntComp.CopyFieldValue (""Orderable"", ""CUSTOMER_ORDER_ENABLED_FLAG"");
				SiebelProductIntComp.CopyFieldValue (""Sales Product Flag"", ""CUSTOMER_ORDER_FLAG"");
				SiebelProductIntComp.CopyFieldValue (""Sales Service Flag"", ""SERVICE_ITEM_FLAG"");
				SiebelProductIntComp.CopyFieldValue (""Integration Id"", ""INVENTORY_ITEM_ID"");
				SiebelProductIntComp.CopyFieldValue (""Orderable"", ""CUSTOMER_ORDER_ENABLED_FLAG"");
				
				TransformItemSegment(SiebelProductIntComp, OracleItemIntComp);
			    
				SiebelProductIntComp.SetFieldValue (""Unit of Measure"",
					ProductEAILookup.Translate (OracleItemIntComp.GetFieldValue (""PRIMARY_UOM_CODE"")));


		 


			// INTERNAL DIVISION
			
			OrclProdOrgComp = OracleItemIntComp.GetIntComp (""SIE_PROD_ORG_V"");
			
			// Create the Siebel child integration component.
			SiebelInternalDivision = SiebelProductIntComp.CreateIntComp(""Internal Product_Oracle_Organization"", true);
			
			while (OrclProdOrgComp.NextRecord ())
			{
				// Copy all the required fields for the Siebel Child integration component
				 
			 
					SiebelInternalDivision.NewRecord();
					SiebelInternalDivision.SetCopySource(OrclProdOrgComp);
	
					SiebelInternalDivision.SetFieldValue (""operation"", ""synchronize"");
					SiebelInternalDivision.CopyFieldValue (""Back Office Inventory Organization"", ""OPERATING_UNIT"");
					
					// To Set the Primary org for the Item
					var PriItemOrg = OracleItemIntComp.GetFieldValue(""OPERATING_UNIT"");
					var ItemOrg    = OrclProdOrgComp.GetFieldValue(""OPERATING_UNIT"");
					if (PriItemOrg == ItemOrg)
						SiebelInternalDivision.SetFieldValue (""IsPrimaryMVG"",""Y"");
				 
			} // while (OrclProdInvLocComp.NextRecord ())
						
			
			// FS INVENTORY LOCATION
			
			OrclProdInvLocComp = OracleItemIntComp.GetIntComp (""SIE_PROD_INVLOC_V"");
			
			// Create the Siebel child integration component.
			SiebelInventoryLocation = SiebelProductIntComp.CreateIntComp(""FS Inventory Location"", true);
			
			while (OrclProdInvLocComp.NextRecord ())
			{
				// Copy all the required fields for the Siebel Child integration component
				 
			 
					SiebelInventoryLocation.NewRecord();
					SiebelInventoryLocation.SetCopySource(OrclProdInvLocComp);
					
				    SiebelInventoryLocation.SetFieldValue (""operation"", ""synchronize"");
					SiebelInventoryLocation.CopyFieldValue(""Integration Id"", ""ORGANIZATION_ID"");
				 
	
			} // while (OrclProdInvLocComp.NextRecord ())
			
		} // while (OracleItemIntComp.NextRecord ())
	}
	else
	{
		EAIRaiseError(TranslateMessage(
			""ORA_MSG_MISSING_COMPONENT,SIE_PRODUCT_V,Product  - Get Oracle Item (Oracle)""));
	}
}
function GetPrimaryOrg (OracleItemIntComp,SiebelProductIntComp)
{

	var OpUnitId, OrgIdExists, OrgIdValue;
	// variable to hold the business object
	var OrgBusObject = TheApplication().GetBusObject(""Internal Division"") ;

	// Get the business component from the business object
	var OrgBusComp = OrgBusObject.GetBusComp(""Internal Division"") ;
	OrgBusComp.ActivateField(""Id"");
	OpUnitId = OracleItemIntComp.GetFieldValue(""OPERATING_UNIT"");

	if((OpUnitId != """") && (OpUnitId != null))
	{
		OrgBusComp.SetViewMode(3);
		OrgBusComp.ClearToQuery() ;
		OrgBusComp.SetSearchSpec(""Integration Id"", OpUnitId) ;

		OrgBusComp.ExecuteQuery() ;
		OrgIdExists = OrgBusComp.FirstRecord();

		if (OrgIdExists)
		{
			OrgIdValue = OrgBusComp.GetFieldValue(""Id"") ;
			SiebelProductIntComp.SetFieldValue (""Primary Organization Id"", OrgIdValue);
		}
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"/*
* The arguments to this function will be the Siebel primary integration component
* and the Oracle primary Integration Component.
*
*/

function TransformItemSegment(SiebelProductIntComp, OracleItemIntComp)
{
	//
	// Declare variables to hold the values of segments 1-20
	//

	// Declare an array to hold the segments.
	// Declare a variable to hold the delimiters

	var segment, SegmentTotal="""";
	var Delimiter = ""."";

	//
	// Add all the variables together into one variable called SegmentTotal
	//

	for(var i = 1; i <= 20; i++)
	{
		segment = OracleItemIntComp.GetFieldValue (""SEGMENT""+i);
		if(segment.length > 0)
		{
			if(SegmentTotal.length > 100)
				break;
			SegmentTotal += segment + Delimiter;
		}
	}
	if(SegmentTotal.length > 100)
		SegmentTotal = SegmentTotal.substring(0, 100);

	/*if(SegmentTotal.slice(-1,0) == Delimiter)*/
	/*if((SegmentTotal.substring(((SegmentTotal.length)-1),1)) == Delimiter)*/
	if(SegmentTotal.length == 100) or (SegmentTotal.length < 100)
    	SegmentTotal = SegmentTotal.slice(0,-1);

	// Insert the Segment total into the Siebel primary integration component
	SiebelProductIntComp.SetFieldValue (""Name"", SegmentTotal);
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function UpsertSiebelProduct (InputMsg, OutputMsg)
{
	//
	// Declare a variable to hold the Siebel Integration Object.
	//
	var SiebelIntObject;

	//
	// Declare a variable to hold the Oracle Integration Object
	//
	var OracleIntObject;

	//
	// Get the Oracle Integration Object from the Input message
	//
	OracleIntObject = InputMsg.GetIntObj(""Product - Get Oracle Item (Oracle)"");

	//
	// Check the validity of the Oracle Integration Object.
	//
	if (OracleIntObject.Exists ())
	{
		//
		// Create a new Siebel Integration Object on the Output Message.
		//
		SiebelIntObject = OutputMsg.CreateIntObj (""Product - Get Oracle Item (Siebel)"");

		//
		// Navigate through all the available instances in the Integration Object
		//
		while (OracleIntObject.NextInstance ())
		{
			//
			// Create a new instance in the Oracle Integration Object
			//
			SiebelIntObject.NewInstance ();

			//
			// CopyFields is a user defined function which is written to copy all
			// the fields from the source to the target.
			//
			CopyIntegrationObjectData (OracleIntObject, SiebelIntObject);
		}
	}
}  ///~ End of CreateSiebelProduct function."
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2001, Siebel Systems, Inc., All rights reserved.
//
// DESCRIPTION
//    Javascript maps to Siebel Product from Oracle Item
//
///////////////////////////////////////////////////////////////////////////////

#include ""eaisiebel.js"""
function CopyIntegrationObjectData (OracleIntObject, SiebelIntObject)
{
	// Declare variables to hold the Oracle Primary Integration Component and
	// The Siebel Primary Integration Component
	var OracleItemIntComp, SiebelProductIntComp;

	var SiebelInternalDivision, SiebelInventoryLocation ;
	var OrclProdInvLocComp, OrclProdOrgComp;
	
	// Open the EAI Value Map for Products here.
	var ProductEAILookup =EAIGetValueMap (""Oracle11i Unit of Measure"", ""Siebel Inbound"", EAIValueMap_NoEntry_RaiseError);


	//Get the primary integration component from the Oracle Integration Object
	OracleItemIntComp = OracleIntObject.GetPrimaryIntComp (""SIE_PRODUCT_V"");

	if (OracleItemIntComp.Exists ())
	{
		// INTERNAL PRODUCT

		SiebelProductIntComp = SiebelIntObject.CreatePrimaryIntComp (""Internal Product - ISS Admin"");
		

		while (OracleItemIntComp.NextRecord ())
		{
			 
			 
				SiebelProductIntComp.NewRecord ();
				SiebelProductIntComp.SetCopySource (OracleItemIntComp);
				
				SiebelProductIntComp.SetFieldValue (""operation"", ""synchronize"");
				SiebelProductIntComp.CopyFieldValue (""Description"",""DESCRIPTION"");
				SiebelProductIntComp.CopyFieldValue (""Orderable"", ""CUSTOMER_ORDER_ENABLED_FLAG"");
				SiebelProductIntComp.CopyFieldValue (""Sales Product Flag"", ""CUSTOMER_ORDER_FLAG"");
				SiebelProductIntComp.CopyFieldValue (""Sales Service Flag"", ""SERVICE_ITEM_FLAG"");
				SiebelProductIntComp.CopyFieldValue (""Integration Id"", ""INVENTORY_ITEM_ID"");
				SiebelProductIntComp.CopyFieldValue (""Orderable"", ""CUSTOMER_ORDER_ENABLED_FLAG"");
				
				TransformItemSegment(SiebelProductIntComp, OracleItemIntComp);
			    
				var OrclUOM = OracleItemIntComp.GetFieldValue (""PRIMARY_UOM_CODE"");
				SiebelProductIntComp.SetFieldValue (""Unit of Measure"",
					ProductEAILookup.Translate ((OrclUOM.toUpperCase())));
			 


			// INTERNAL DIVISION
			
			OrclProdOrgComp = OracleItemIntComp.GetIntComp (""SIE_PROD_ORG_V"");
			
			// Create the Siebel child integration component.
			SiebelInternalDivision = SiebelProductIntComp.CreateIntComp(""Internal Product - ISS Admin_Organization"");
			
			while (OrclProdOrgComp.NextRecord ())
			{
				// Copy all the required fields for the Siebel Child integration component
				 
				 
					SiebelInternalDivision.NewRecord();
					SiebelInternalDivision.SetCopySource(OrclProdOrgComp);
	
					SiebelInternalDivision.SetFieldValue (""operation"", ""synchronize"");
					// SiebelInternalDivision.CopyFieldValue (""Back Office Inventory Organization"", ""OPERATING_UNIT"");
					SiebelInternalDivision.CopyFieldValue (""Integration Id"", ""OPERATING_UNIT"");
					
					// To Set the Primary org for the Item
					var PriItemOrg = OracleItemIntComp.GetFieldValue(""OPERATING_UNIT"");
					var ItemOrg    = OrclProdOrgComp.GetFieldValue(""OPERATING_UNIT"");
					if (PriItemOrg == ItemOrg)
						SiebelInternalDivision.SetFieldValue (""IsPrimaryMVG"",""Y"");
			 
			} // while (OrclProdInvLocComp.NextRecord ())
						
			
			// FS INVENTORY LOCATION
			
			OrclProdInvLocComp = OracleItemIntComp.GetIntComp (""SIE_PROD_INVLOC_V"");
			
			// Create the Siebel child integration component.
			SiebelInventoryLocation = SiebelProductIntComp.CreateIntComp(""FS Inventory Location"");
			
			while (OrclProdInvLocComp.NextRecord ())
			{
				// Copy all the required fields for the Siebel Child integration component
				 
					SiebelInventoryLocation.NewRecord();
					SiebelInventoryLocation.SetCopySource(OrclProdInvLocComp);
					
					SiebelInventoryLocation.SetFieldValue (""operation"", ""synchronize"");
					SiebelInventoryLocation.CopyFieldValue(""Integration Id"", ""ORGANIZATION_ID"");
				 
					
			} // while (OrclProdInvLocComp.NextRecord ())
			
		} // while (OracleItemIntComp.NextRecord ())
	}
	else
	{
		EAIRaiseError(TranslateMessage(
			""ORA_MSG_MISSING_COMPONENT,SIE_PRODUCT_V,Product  - Get Oracle Item (Oracle)""));
	}
}
function GetPrimaryOrg (OracleItemIntComp,SiebelProductIntComp)
{

	var OpUnitId, OrgIdExists, OrgIdValue;
	// variable to hold the business object
	var OrgBusObject = TheApplication().GetBusObject(""Internal Division"") ;

	// Get the business component from the business object
	var OrgBusComp = OrgBusObject.GetBusComp(""Internal Division"") ;
	OrgBusComp.ActivateField(""Id"");
	OpUnitId = OracleItemIntComp.GetFieldValue(""OPERATING_UNIT"");

	if((OpUnitId != """") && (OpUnitId != null))
	{
		OrgBusComp.SetViewMode(3);
		OrgBusComp.ClearToQuery() ;
		OrgBusComp.SetSearchSpec(""Integration Id"", OpUnitId) ;

		OrgBusComp.ExecuteQuery() ;
		OrgIdExists = OrgBusComp.FirstRecord();

		if (OrgIdExists)
		{
			OrgIdValue = OrgBusComp.GetFieldValue(""Id"") ;
			SiebelProductIntComp.SetFieldValue (""Primary Organization Id"", OrgIdValue);
		}
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"/*
* The arguments to this function will be the Siebel primary integration component
* and the Oracle primary Integration Component.
*
*/

function TransformItemSegment(SiebelProductIntComp, OracleItemIntComp)
{
	//
	// Declare variables to hold the values of segments 1-20
	//

	// Declare an array to hold the segments.
	// Declare a variable to hold the delimiters

	var segment, SegmentTotal="""";
	var Delimiter = ""."";

	//
	// Add all the variables together into one variable called SegmentTotal
	//

	for(var i = 1; i <= 20; i++)
	{
		segment = OracleItemIntComp.GetFieldValue (""SEGMENT""+i);
		if(segment.length > 0)
		{
			if(SegmentTotal.length > 100)
				break;
			SegmentTotal += segment + Delimiter;
		}
	}
	if(SegmentTotal.length > 100)
		SegmentTotal = SegmentTotal.substring(0, 100);

	/*if(SegmentTotal.slice(-1,0) == Delimiter)*/
	/*if((SegmentTotal.substring(((SegmentTotal.length)-1),1)) == Delimiter)*/
	if(SegmentTotal.length == 100) or (SegmentTotal.length < 100)
    	SegmentTotal = SegmentTotal.slice(0,-1);

	// Insert the Segment total into the Siebel primary integration component
	SiebelProductIntComp.SetFieldValue (""Name"", SegmentTotal);
}
function TranslateMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created in November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ORA_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ORA_MSG"";
	var LOVType = ""ORACLE_CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function UpsertSiebelProduct (InputMsg, OutputMsg)
{
	//
	// Declare a variable to hold the Siebel Integration Object.
	//
	var SiebelIntObject;

	//
	// Declare a variable to hold the Oracle Integration Object
	//
	var OracleIntObject;

	//
	// Get the Oracle Integration Object from the Input message
	//
	OracleIntObject = InputMsg.GetIntObj(""Product - Get Oracle11i Item (Oracle)"");

	//
	// Check the validity of the Oracle Integration Object.
	//
	if (OracleIntObject.Exists ())
	{
		//
		// Create a new Siebel Integration Object on the Output Message.
		//
		SiebelIntObject = OutputMsg.CreateIntObj (""Product - Get Oracle11i Item (Siebel7.8)"");

		//
		// Navigate through all the available instances in the Integration Object
		//
		while (OracleIntObject.NextInstance ())
		{
			//
			// Create a new instance in the Oracle Integration Object
			//
			SiebelIntObject.NewInstance ();

			//
			// CopyFields is a user defined function which is written to copy all
			// the fields from the source to the target.
			//
			CopyIntegrationObjectData (OracleIntObject, SiebelIntObject);
		}
	}
}  ///~ End of CreateSiebelProduct function."
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 6 $
//      $Date: 01/15/01 10:29a $
//    $Author: S.Garg $ of last update
//
// CREATOR:    P. Lim
//
// DESCRIPTION
//    Javascript maps from Siebel Order & Quote to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
/* This function shared by ""Simulate Order"" and ""Create Order"" */"
function ConvertMonth(cardExpMonth)
{
	var nMonth; 
	if ( cardExpMonth == ""January"" )
		{
			nMonth = ""01"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""February"" )
		{
			nMonth = ""02"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""March"" )
		{
			nMonth = ""03"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""April"" )
		{
			nMonth = ""04"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""May"" )
		{
			nMonth = ""05"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""June"" )
		{
			nMonth = ""06"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""July"" )
		{
			nMonth = ""07"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""August"" )
		{
			nMonth = ""08"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""September"" )
		{
			nMonth = ""09"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""October"" )
		{
			nMonth = ""10"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""November"" )
		{
			nMonth = ""11"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""December"" )
		{
			nMonth = ""12"";
			return nMonth ;
		}
	else
		{
			nMonth = ""01"";
			return nMonth ;
		}
}
function GetDaysInAMonth(nMonth, nYear)
{

	// Jan, Mar, May, Jul, Aug, Oct, Dec have 31 days each
	// Apr, Jun, Sept, Nov have 30 days each
	// Feb, for now, has 28 days.
	var daysInMonth = new Array(31,28,31,30,31,30,31,31,30,31,30,31);
	var nCurrentDays;


	// Only February can be either 28 or 29, depending on whether the year is a leap year
	if (nMonth == 2)
	{
		// If the year is divisible by 4, it is a leap year
		if (nYear%4 == 0)
		{
			// If the year is a century, then it should be divisible by 400 to be a leap year.
			if (nYear%100 == 0)
			{
				// If it is a century and divisible by 400, it is a leap year.
				if (nYear%400 == 0) { nCurrentDays = 29;}

				// If it is a century and NOT divisible by 400 (e.g. 1900), it is NOT a leap year.
				else	{ nCurrentDays = 28;}
			}
		
			// If it is not a century and divisible by 4, it is a leap year.
			else { nCurrentDays = 29;}
		}

		// If a year is NOT divisible by 4, it is not a leap year
		else { nCurrentDays = 28; }
	}


	// If the month is NOT Feb, calculating days in a month is straight-forward.
	// eScript array index starts with 0, not 1.
	else
	{ nCurrentDays = daysInMonth[nMonth - 1]; }

	return nCurrentDays;

}
function LocalizeMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created by Richard Exley - November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ERR_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ERR_MSG"";
	var LOVType = ""CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"
function Simulate77SAP46CQuote_BAPIToSiebel (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   BAPI Export (SAP 4x Order - Simulate SAP Order (BAPI Output))
    *     Export Parameters (output)
    *
    * Output Object's Integration Components:
    *   Quote Object (SAP 46C Quote)
    *     Quote (oOrder)
    *       Simulate Output
    *		Simulate Item
    *		Order Item
    */

   /*
    * Set up EAI Lookup objects
    */
   var currencyLM 	 = new CSSEAIValueMap (""SAP Currency Code"", ""Siebel Inbound"");
   var ccStatusLM	 = new CSSEAIValueMap (""SAP Credit Card Approval Code"", ""Siebel Inbound"");
   var cCardLM	 	 = new CSSEAIValueMap (""SAP Credit Card Type"", ""Siebel Inbound"");
  

   /*
    * Set up EAI Input Message objects
    */
   var iSimOrderObj;   // BAPI Order instance
   var iSimExportComp; // BAPI Export Parameters
   var iSimItemComp;   // BAPI Order Items
   var iSimIItemComp;  // BAPI Order Input Item Comp to retieve value for Fix Pricing flag
   var iSchedItemComp; // BAPI Schedule Line Items
   var iSimCCardComp;  // BAPI Credit Card Export Comp

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oQuoteObj;      // Siebel Order instance
   var oQuoteComp;     // Order
   var oCardComp;	   // Order Card Payment Comp
   var oOutputComp; // Simulate Output RFC_*
   var oItemComp;   // Simulate Item Output RFC_*
   var oSimItemComp;   // Simulate Item
   // var oItemComp;      // Item
   var oSchedItemComp; // Schedule Line Item

   /*
    * Find and create top-level integration object
    */
   iSimOrderObj = inputMsg.GetIntObj (""SAP 46C Order - Simulate SAP Order (BAPI Output)"");
   oQuoteObj = outputMsg.CreateIntObj (""SAP 46C Quote"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iSimOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object
       */
      oQuoteObj.NewInstance ();

      /*
       * Create ""Order"" component in output message
       */
      oQuoteComp = oQuoteObj.CreatePrimaryIntComp (""Quote"");
      oQuoteComp.NewRecord ();
      
      // Set ""Id"" so Siebel Adapter can synchronize
      oQuoteComp.SetFieldValue (""Id"", inputId);
      
      /*
       * Read ""Export Parameters"" component
       */
      iSimExportComp = iSimOrderObj.GetPrimaryIntComp (""Export Parameters"");
      
      if (iSimExportComp.NextRecord ())
      {
         
         /*
          * Update ""Order"" component
          */
         oQuoteComp.SetCopySource  (iSimExportComp);
         oQuoteComp.SetFieldValue(""Status As Of Date"", Timestamp());
		 
         var sapDelBlock = iSimExportComp.GetFieldValue ( ""SHIP_TO_PARTY-DLV_BLOCK"" );
		 var delBlock = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_HEADER_DELIV_BLOCK"", sapDelBlock);
         oQuoteComp.SetFieldValue (""Delivery Block"",     delBlock);
         
         // sapBlock 		= null;
         var sapBillBlock = iSimExportComp.GetFieldValue ( ""BILLING_PARTY-BILL_BLOCK"" );
		 var billBlock = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_HEADER_BILL_BLOCK"", sapBillBlock);
         oQuoteComp.SetFieldValue (""Billing Block"",     billBlock);

		 // oQuoteComp.CopyFieldValue (""Billing Block"",      ""BILLING_PARTY-BILL_BLOCK"");
         oQuoteComp.CopyFieldValue (""EAI Error Message"",     ""RETURN-MESSAGE"");
		 
	
         var returnCode = iSimExportComp.GetFieldValue (""RETURN-CODE"");
         
         if ( (returnCode == ""V1154"") || (returnCode == ""V1038"") )
            {
              oQuoteComp.SetFieldValue (""Credit Check Status"",             ""N"");
            }
         else
            {
              oQuoteComp.SetFieldValue (""Credit Check Status"",             ""Y"");
            }

         /*
          * Read ""ORDER_CCARD_EX"" component
          */

         
		  iSimCCardComp = iSimExportComp.GetIntComp (""ORDER_CCARD_EX"");

          var cardStatus;
          var cardLineNo = 0;
          while (iSimCCardComp.NextRecord())
          {
         	 cardStatus = iSimCCardComp.GetFieldValue ( ""CC_STAT_EX"");
         	 if ( cardStatus != null && cardStatus != """" )
         	 {
         oQuoteComp.SetCopySource  (iSimCCardComp);

         oQuoteComp.CopyFieldValue ( ""Credit Card Number"", ""CC_NUMBER"" );
         oQuoteComp.CopyFieldValue ( ""Credit Card Transaction Time"", ""AUTH_DATE"" );
         oQuoteComp.CopyFieldValue (""Card Holder"", ""CC_NAME"");
         oQuoteComp.CopyFieldValue ( ""Credit Card Authorization Code"", ""CC_AUTTH_NO"" );
         oQuoteComp.CopyFieldValue ( ""Credit Card Transaction Amount"", ""AUTHAMOUNT"" );
           	 	var ccStat = iSimCCardComp.GetFieldValue ( ""CC_STAT_EX"");
           	 	var ccReact = iSimCCardComp.GetFieldValue ( ""CC_REACT"");
           	 	
           	 	if (ccStat == ""C"")
           	 		{ if (ccReact = ""A"")
           	 			{ oQuoteComp.SetFieldValue (""Payment Status"", TheApplication().InvokeMethod (""LookupValue"", ""FUNDRQ_STATUS"", ""Authorized"") );}
           	 		  else
           	 		  	{ oquoteComp.SetFieldValue (""Payment Status"", TheApplication().InvokeMethod (""LookupValue"", ""FUNDRQ_STATUS"", ""Declined"") );}
           	 		 }
           	 	else
           	 		{ oQuoteComp.SetFieldValue (""Payment Status"", TheApplication().InvokeMethod (""LookupValue"", ""FUNDRQ_STATUS"", ""AVS Failed"") );}

        }
        }
         	 
         	
				//oCardComp.CopyFieldValue (""Expiration Date"", ""CC_VALID_T"" );
				//oCardComp.CopyFieldValue (""Transaction Message"", ""CC_REACT_T"" );
				//var expDate = iSimCCardComp.GetFieldValue (""CC_VALID_T"");
         		//var expMonth = expDate.substring(0,2);
         		//if (expMonth < 10)
         		//	{expMonth = expDate.substring(1,2);}
         		//var expYear = expDate.substring(6,10);
         		//oCardComp.SetFieldValue (""Expiration Month"", expMonth );
				//oCardComp.SetFieldValue (""Expiration Year"", expYear );
				//var paymentMethod = TheApplication().InvokeMethod (""LookupValue"", ""PAYMENT_METHOD_CODE"", ""Credit Card"");
                //oCardComp.SetFieldValue  (""Payment Method"",   paymentMethod);
				//var cardType = cCardLM.Translate (iSimCCardComp.GetFieldValue (""CC_TYPE""));
           	 	//var LDCardType = TheApplication().InvokeMethod (""LookupValue"", ""PAYMENT_TYPE_CODE"", cardType);
           	 	//oCardComp.SetFieldValue	 (""Payment Type"", LDCardType);
         	 //}
          //}
         		


         /*
          * Read ""ORDERS_ITEMS_OUT"" component
          */

         iSimItemComp = iSimExportComp.GetIntComp (""ORDER_ITEMS_OUT"");
         iSimIItemComp = iSimExportComp.GetIntComp ( ""ORDER_ITEMS_IN"");
         oSimItemComp = oQuoteComp.CreateIntComp (""Quote Item"", false);
         while (iSimItemComp.NextRecord ())
         {
            oSimItemComp.NewRecord ();
            oSimItemComp.SetCopySource  (iSimItemComp);
            
            iSimIItemComp.NextRecord ();
            
            var fixPrice = iSimIItemComp.GetFieldValue ( ""PURCH_NO_C"" );
                        
            
            var netVal          = iSimItemComp.GetFieldValue (""SUBTOTAL_2""); // nbc
            var qtyReq			= iSimItemComp.GetFieldValue (""REQ_QTY"");
            var netTax		= null;
			// start - adjustment to SAP bug (nbc)
			if (fixPrice == ""X"") 
			 { 
				netVal = netVal / 10; 
			 } 
			// end - adjustment to SAP bug (nbc)
            if ( qtyReq != 0 )
             {
            	var netPrice 		= netVal / qtyReq ; 
             }
            
            if (fixPrice != ""X"")
             {
            	oSimItemComp.SetFieldValue    (""Adjusted List Price"",         netPrice);
            	oSimItemComp.CopyFieldValue   (""Tax Amt"",                ""SUBTOTAL_5"");	
            	oSimItemComp.CopyFieldValue   (""Freight Amount"",            ""SUBTOTAL_4"");
       			oSimItemComp.SetFieldValue    (""Net Price"",      	netPrice); // nbc
             }
            else
            {
            	oSimItemComp.SetFieldValue    (""Fix Price Flag"", ""Y"" );
            	oSimItemComp.CopyFieldValue   (""Tax Amt"",                ""SUBTOTAL_5"");	
            	oSimItemComp.SetFieldValue    (""Freight Amount"",            ""0"");
       			oSimItemComp.SetFieldValue    (""Net Price"",      	netPrice); // nbc
            }
            
            
            var itemReqDate = iSimItemComp.GetFieldValue (""DLV_DATE""); 
            var itemnum = iSimItemComp.GetFieldValue (""ITM_NUMBER"");
            oSimItemComp.CopyFieldValue    (""Unit of Measure"",    ""SALES_UNIT"");
            oSimItemComp.CopyFieldValue    (""Line Number"",                ""ITM_NUMBER"");
            oSimItemComp.CopyFieldValue    (""Quantity Requested"",        ""REQ_QTY"");
            oSimItemComp.CopyFieldValue    (""Product Integration Id"",        ""MATERIAL"");
            oSimItemComp.CopyFieldValue    (""Source Inventory Location"",        ""PLANT"");
            oSimItemComp.SetFieldValue     (""NRC CxTotal"", 			netVal); // nbc 7.8.2
   
         

            
           /*
            * Read ""ORDER_SCHEDULE_EX"" component
            */
            
            iSchedItemComp = iSimExportComp.GetIntComp   (""ORDER_SCHEDULE_EX"");
            oSchedItemComp = oSimItemComp.CreateIntComp (""Quote - SAP 4x Schedule Line Item"", false);
		
			var firstScheduleLine = 1;
			
        
            while (iSchedItemComp.NextRecord ())
             {
               var itemnum2  = iSchedItemComp.GetFieldValue (""ITM_NUMBER"");
               var schednum = iSchedItemComp.GetFieldValue (""SCHED_LINE"");
               var intId;
               if (itemnum2 == itemnum)
               {
           
                oSchedItemComp.NewRecord ();
                oSchedItemComp.SetCopySource  (iSchedItemComp);
                
                intId = inputId + ""-"" + itemnum2 + ""-"" + schednum;
               
                oSchedItemComp.SetFieldValue (""Integeration ID"",             intId);
                oSchedItemComp.CopyFieldValue (""Required Qty"",                   ""REQ_QTY"");
                oSchedItemComp.SetFieldValue (""Schedule Line No"",     schednum);
                oSchedItemComp.SetFieldValue  (""Item Line No"",     itemnum);
                oSchedItemComp.SetFieldValue  (""Quote Id"",     inputId);
                oSchedItemComp.CopyFieldValue (""Confirmed Date"",           ""GI_DATE"");
                oSchedItemComp.CopyFieldValue (""Confirmed Qty"",               ""CONFIR_QTY"");
                var reqDate = iSchedItemComp.GetFieldValue ( ""REQ_DATE"");
                oSchedItemComp.SetFieldValue (""Required Delivery Date"" ,          reqDate);
                // Checking for First Schedule Line, as it contains actual Req Delivery Date and setting it for Item Req Delv Date
                if ( firstScheduleLine == 1 )
                	{
                		oSimItemComp.SetFieldValue    (""Requested Delivery Date"",      reqDate );
                	}
                firstScheduleLine++;
                
               }
             }


         }

      }
   }
}
function Simulate77SAP46CQuote_SiebelToBAPI (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   Quote Object (SAP 46C Quote)
    *     Quote (Quote)
    *       Quote Line Item (item)
    *			Quote Line Item attribute Comp
    *
    * Output Object's Integration Components:
    *   BAPI Import Object (SAP 46C Order - Create SAP Order (BAPI Import))
    *     Import Parameters
    *       ORDER_PARTNERS
    *       ORDER_ITEMS_IN
    *       ORDER_PARTNERS
    *		ORDER_CFGS_INST
    *		ORDER_CFGS_REF
    *		ORDER_CFGS_VALUE
    */

   /*
    * Set up EAI Lookup maps
    */
   var orderTypeLM = EAIGetValueMap (""SAP Order Types"",     	""Siebel Outbound"");
   var incotermsLM = EAIGetValueMap (""SAP Incoterms"",      		""Siebel Outbound"");
   var payTermsLM  = EAIGetValueMap (""SAP Payment Terms"",   	""Siebel Outbound"");
   var currencyLM  = EAIGetValueMap (""SAP Currency Code"",		""Siebel Outbound"");
   var cCardLM	   = EAIGetValueMap (""SAP Credit Card Type"",	""Siebel Outbound"");
   var uomLM       = EAIGetValueMap (""SAP Unit of Measure"", 	""Siebel Outbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iQuoteObj;  // Quote object instance
   var iQuoteComp; // Quote
   var iItemComp;  // Quote Line Item
   var iAttrComp;  // Item Attribute Component

   // Store inputId to be denormalized to all RFC table rows
   //var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oCFDOrderObj;        // BAPI Order instance
   var oCFDImportComp;      // BAPI Import parameters
   var oCFDItemComp;        // BAPI Order Item
   var oCFDPartnerComp;     // BAPI Order Partners
   var oCFDCardComp;     	// BAPI Card Component
   var oCFDCfgInstComp;
   var oCFDCfgValComp;
   var oCFDCfgRefComp;


   /*
    * Find and create top-level integration object
    */
   iQuoteObj    = inputMsg.GetIntObj (""SAP 46C Quote"");
   oCFDOrderObj = outputMsg.CreateIntObj (""SAP 46C Order - Simulate SAP Order (BAPI Input)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iQuoteObj.NextInstance ())
   {
      /*
       * Create ""Order"" object in output message
       */
      oCFDOrderObj.NewInstance ();

      /*
       * Read ""Order"" component
       */
      iQuoteComp     = iQuoteObj.GetPrimaryIntComp (""Quote"");
      oCFDImportComp = oCFDOrderObj.CreatePrimaryIntComp (""Import Parameters"");
     
      if (iQuoteComp.NextRecord ())
      {
        
         /*
          * Write ""Import Parameters"" component
          */
         oCFDImportComp.NewRecord ();
         oCFDImportComp.SetCopySource  (iQuoteComp);
         
         var priceList =  null;
         priceList = iQuoteComp.GetFieldValue (""Price List Id"");
         var currencyCode = currencyLM.Translate (iQuoteComp.GetFieldValue (""Currency Code""));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DOC_NUMBER"", null);
         //var docType = TheApplication().InvokeMethod (""LookupValue"", ""FS_ORDER_TYPE"", ""Sales Order"");
         //oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DOC_TYPE"",   orderTypeLM.Translate (docType));
		 oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DOC_TYPE"",   ""TA"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-CURRENCY"",  currencyCode );
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_ORG"",  ""SAP Sales Organisation (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DISTR_CHAN"", ""SAP Distribution Channel (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DIVISION"",   ""SAP Division (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_NO"",       ""Quote Number"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_DATE"", ""Requested Ship Date"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REF_1"",      ""Quote Number"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PRICE_DATE"", ""Start Date"" );
		  // Set NAME only if ""Contact Id"" is not null.
         if (iQuoteComp.GetFieldValue (""Contact Id"") != null)
         {
            oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-NAME"", EAIFormatPersonName (iQuoteComp.GetFieldValue (""Contact First Name""),
                                                                                       iQuoteComp.GetFieldValue (""Contact Last Name"")));
         }         
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-TELEPHONE"",  ""Contact Work Phone #"");
		 if (iQuoteComp.GetFieldValue (""Requested Ship Date"") != """")
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",   ""Requested Ship Date"");
               
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",       ""Start Date"");
            }
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DATE_TYPE"",  ""1"");
                  
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-INCOTERMS1"", incotermsLM.Translate (iQuoteComp.GetFieldValue(""Freight Terms"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-INCOTERMS2"", ""Freight Terms Info"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-PMNTTRMS"",   payTermsLM.Translate (iQuoteComp.GetFieldValue (""Payment Term"")));
         
         if (iQuoteComp.GetFieldValue (""Partial Ship"") != ""Y"")
            {
               oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       ""X"");
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       null);
            }
    

         /*
          * Write ""ORDER_PARTNERS"" component  
          */
                  
         oCFDPartnerComp = oCFDImportComp.CreateIntComp (""ORDER_PARTNERS"", oCFDImportComp);

         // Sold to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iQuoteComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""AG"");

         var soldtoparty =  iQuoteComp.GetFieldValue (""Account Integration Id"");
         var array = soldtoparty.split("":"");
         var AccountIntId = array[0];
         
         
         oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId);

         // Ship To partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iQuoteComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""WE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Ship To Account Integration Id"");

         // Payer partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iQuoteComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RG"");
         var payerId = iQuoteComp.GetFieldValue (""Payer Account Integration Id"");
         if (payerId == null || payerId == """")
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId );
         	}
         else
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", payerId );
         	}
         
         // Bill to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iQuoteComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Bill To Account Integration Id"");

		/*
		 * Read and update Credit Card Info
		 *
		 */
		 var ccType = cCardLM.Translate (iQuoteComp.GetFieldValue (""Credit Card Name""));
		 var ccNum = iQuoteComp.GetFieldValue ( ""Credit Card Number"");
		 if ( ccNum != null && ccNum != """" )
		 
		 	{
		 		oCFDCardComp = oCFDImportComp.CreateIntComp (""ORDER_CCARD"");
		 		oCFDCardComp.NewRecord();
		 		oCFDCardComp.SetCopySource (iQuoteComp);
		 		var cardExpDate = iQuoteComp.GetFieldValue ( ""Credit Card Expiration Date"");
		 		if ( cardExpDate == null || cardExpDate == """" )
		 			{
		 				var cardExpYear	= iQuoteComp.GetFieldValue (""Credit Card Expiration Year"" );
		 				var cardExpMonth  = iQuoteComp.GetFieldValue (""Credit Card Expiration Month"" );
		 				var cardExpDay;
		 				
		 				var nMonth = ConvertMonth (cardExpMonth);
		 				cardExpDay = GetDaysInAMonth(nMonth, cardExpYear);
		 				var cardExpFullDate = nMonth + ""/"" + cardExpDay + ""/"" + cardExpYear + "" 00:00:00"";
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpFullDate );
		 			}
		 		else
		 			{
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpDate );
		 			}
		 		oCFDCardComp.SetFieldValue		(""CC_TYPE"", 		ccType);
		 		oCFDCardComp.SetFieldValue		(""CC_NUMBER"", 		ccNum );
		 		oCFDCardComp.CopyFieldValue		(""CC_NAME"", 		""Credit Card Holder"" );
				//oCFDCardComp.CopyFieldValue		(""AUTHAMOUNT"", 		""Credit Card Transaction Amount"" );
		 		oCFDCardComp.SetFieldValue		(""CURRENCY"", 		currencyCode );
		 	}
         /*
          * Read ""Order Line Item"" Integration Component
 	      */
 	      
         iItemComp    = iQuoteComp.GetIntComp        (""Quote Item"");
         oCFDItemComp = oCFDImportComp.CreateIntComp (""ORDER_ITEMS_IN"", oCFDImportComp);
         oCFDCfgValComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_VALUE"", oCFDImportComp);       
         oCFDCfgRefComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_REF"", oCFDImportComp);         
         oCFDCfgInstComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_INST"", oCFDImportComp);

         while (iItemComp.NextRecord ())
         {
/*           var itemNum =  iItemComp.GetFieldValue (""Line Number"");
            var Posex_Hilfsvariable =""00000"";

            Clib.sprintf(Posex_Hilfsvariable,""%06.6s"",iItemComp.GetFieldValue(""Line Number""));
            var itemNumber = Posex_Hilfsvariable;      
            var parentItemId =  iItemComp.GetFieldValue (""Parent Quote Item Id"");                  
            if((parentItemId == 0) || (parentItemId ==""""))
            {*/
            oCFDItemComp.NewRecord ();
            oCFDItemComp.SetCopySource  (iItemComp);
            var itemNumber = iItemComp.GetFieldValue(""Line Number"");
            oCFDItemComp.SetFieldValue (""ITM_NUMBER"",     itemNumber);
            //oCFDItemComp.SetFieldValue (""HG_LV_ITEM"",     ""000000"");
            oCFDItemComp.CopyFieldValue (""PO_ITM_NO"",      ""Line Number"");
            oCFDItemComp.CopyFieldValue (""MATERIAL"",       ""Product Integration Id"");
            
            if (iItemComp.GetFieldValue (""Partial Ship"") != ""Y"")
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""C"");
                }
            else
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""D"");
                }
            oCFDItemComp.CopyFieldValue (""PLANT"",          ""Source Inventory Location"");
            oCFDItemComp.SetFieldValue  (""SALES_UNIT"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
            oCFDItemComp.CopyFieldValue (""SHORT_TEXT"",     ""Part Number"");
            oCFDItemComp.CopyFieldValue (""REQ_DATE"",       ""Requested Delivery Date"");
            oCFDItemComp.SetFieldValue  (""DATE_TYPE"",      ""1"");
            oCFDItemComp.CopyFieldValue (""REQ_QTY"",        ""Quantity Requested"");
	            
            var siebelPrice = iItemComp.GetFieldValue ( ""Unit Price"" );
            if ((  siebelPrice != 0) || (  priceList != """" ))
            
            {
             	oCFDItemComp.SetFieldValue  (""CD_TYPE2"",      ""PN00"");
            	oCFDItemComp.SetFieldValue  (""PURCH_NO_C"",     ""X"");
                oCFDItemComp.CopyFieldValue (""CD_VALUE2"",     ""Item Price"");
            	oCFDItemComp.SetFieldValue  (""CD_P_UNT2"",     ""1"");
            	oCFDItemComp.SetFieldValue  (""CD_D_UNT2"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
            	
             	oCFDItemComp.SetFieldValue  (""CD_TYPE3"",      ""KF00"");
                oCFDItemComp.CopyFieldValue (""CD_VALUE3"",     ""Freight Amount"");
                oCFDItemComp.SetFieldValue  (""CD_P_UNT3"",     ""1"");
            	oCFDItemComp.SetFieldValue  (""CD_D_UNT3"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));

  


            }
            else
             	oCFDItemComp.SetFieldValue  (""CD_TYPE2"",      ""PR00"");
                // oCFDItemValComp.SetFieldValue (""ITM_NUMBER"",     itemNumber);                             	
}  // end if condition for Parent item num

/*            oCFDCfgRefComp.NewRecord ();
            oCFDCfgRefComp.SetCopySource  (iItemComp);
            oCFDCfgRefComp.SetFieldValue (""POSEX"",     itemNumber);
            oCFDCfgRefComp.SetFieldValue (""CONFIG_ID"",     itemNumber);            
            oCFDCfgRefComp.SetFieldValue (""ROOT_ID"",     itemNumber);            


            oCFDCfgInstComp.NewRecord ();
            oCFDCfgInstComp.SetCopySource  (iItemComp);
            oCFDCfgInstComp.SetFieldValue (""INST_ID"",     itemNumber);
            oCFDCfgInstComp.SetFieldValue (""CONFIG_ID"",   itemNumber);            
            oCFDCfgInstComp.SetFieldValue (""OBJ_TYPE"",     ""MARA"");            
            oCFDCfgInstComp.SetFieldValue (""OBJ_KEY"",     ""MATERIAL"");            
            oCFDCfgInstComp.SetFieldValue (""QUANTITY"",     ""1"");            

*/
           
      
                    /*
          * Read ""Order Line Item Attribute Value"" Integration Component
          */
/*         iAttrComp    = iItemComp.GetIntComp        (""Quote Item XA"");

         
         while (iAttrComp.NextRecord ())
         {

            oCFDCfgValComp.NewRecord ();
            oCFDCfgValComp.SetCopySource  (iAttrComp);
            oCFDCfgValComp.CopyFieldValue (""CHARC"",     ""Name"");
            oCFDCfgValComp.CopyFieldValue (""VALUE"",     ""Value"");
            oCFDCfgValComp.CopyFieldValue (""CHARC_TXT"", ""Description"");
            oCFDCfgValComp.SetFieldValue (""INST_ID"", itemNumber);
            oCFDCfgValComp.SetFieldValue (""CONFIG_ID"", itemNumber);
		}
  */   
       //  } //order items read
      }
      
   }
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", d.getMonth()+1, d.getDate(), d.getFullYear(), d.getHours(), d.getMinutes(), d.getSeconds()); 
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 6 $
//      $Date: 01/15/01 10:29a $
//    $Author: S.Garg $ of last update
//
// CREATOR:    P. Lim
//
// DESCRIPTION
//    Javascript maps from Siebel Order & Quote to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
/* This function shared by ""Simulate Order"" and ""Create Order"" */"
function ConvertMonth(cardExpMonth)
{
	var nMonth; 
	if ( cardExpMonth == ""January"" )
		{
			nMonth = ""01"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""February"" )
		{
			nMonth = ""02"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""March"" )
		{
			nMonth = ""03"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""April"" )
		{
			nMonth = ""04"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""May"" )
		{
			nMonth = ""05"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""June"" )
		{
			nMonth = ""06"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""July"" )
		{
			nMonth = ""07"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""August"" )
		{
			nMonth = ""08"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""September"" )
		{
			nMonth = ""09"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""October"" )
		{
			nMonth = ""10"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""November"" )
		{
			nMonth = ""11"";
			return nMonth ;
		}
	else if ( cardExpMonth == ""December"" )
		{
			nMonth = ""12"";
			return nMonth ;
		}
	else
		{
			nMonth = ""01"";
			return nMonth ;
		}
}
function GetDaysInAMonth(nMonth, nYear)
{

	// Jan, Mar, May, Jul, Aug, Oct, Dec have 31 days each
	// Apr, Jun, Sept, Nov have 30 days each
	// Feb, for now, has 28 days.
	var daysInMonth = new Array(31,28,31,30,31,30,31,31,30,31,30,31);
	var nCurrentDays;


	// Only February can be either 28 or 29, depending on whether the year is a leap year
	if (nMonth == 2)
	{
		// If the year is divisible by 4, it is a leap year
		if (nYear%4 == 0)
		{
			// If the year is a century, then it should be divisible by 400 to be a leap year.
			if (nYear%100 == 0)
			{
				// If it is a century and divisible by 400, it is a leap year.
				if (nYear%400 == 0) { nCurrentDays = 29;}

				// If it is a century and NOT divisible by 400 (e.g. 1900), it is NOT a leap year.
				else	{ nCurrentDays = 28;}
			}
		
			// If it is not a century and divisible by 4, it is a leap year.
			else { nCurrentDays = 29;}
		}

		// If a year is NOT divisible by 4, it is not a leap year
		else { nCurrentDays = 28; }
	}


	// If the month is NOT Feb, calculating days in a month is straight-forward.
	// eScript array index starts with 0, not 1.
	else
	{ nCurrentDays = daysInMonth[nMonth - 1]; }

	return nCurrentDays;

}
function LocalizeMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created by Richard Exley - November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ERR_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ERR_MSG"";
	var LOVType = ""CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   return EAIExecuteMap (MethodName, Inputs, Outputs);
}
"
function Simulate77SAP47Quote_BAPIToSiebel (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   BAPI Export (SAP 4x Order - Simulate SAP Order (BAPI Output))
    *     Export Parameters (output)
    *
    * Output Object's Integration Components:
    *   Quote Object (SAP 47 Quote)
    *     Quote (oOrder)
    *       Simulate Output
    *		Simulate Item
    *		Order Item
    */

    // Set up EAI Lookup objects
   var currencyLM 	 = new CSSEAIValueMap (""SAP Currency Code"", ""Siebel Inbound"");
   var ccStatusLM	 = new CSSEAIValueMap (""SAP Credit Card Approval Code"", ""Siebel Inbound"");
   var cCardLM	 	 = new CSSEAIValueMap (""SAP Credit Card Type"", ""Siebel Inbound"");
   // Set up EAI Input Message objects
   var iSimOrderObj;   // BAPI Order instance
   var iSimExportComp; // BAPI Export Parameters
   var iSimItemComp;   // BAPI Order Items
   var iCondComp;      // For EPrice CR
   var iSimIItemComp;  // BAPI Order Input Item Comp to retieve value for Fix Pricing flag
   var iSchedItemComp; // BAPI Schedule Line Items
   var iSimCCardComp;  // BAPI Credit Card Export Comp
   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Order Id"");
    // Set up EAI Output Message objects
   var oQuoteObj;      // Siebel Order instance
   var oQuoteComp;     // Order
   var oCardComp;	   // Order Card Payment Comp
   var oOutputComp; // Simulate Output RFC_*
   var oItemComp;   // Simulate Item Output RFC_*
   var oSimItemComp;   // Simulate Item
   // var oItemComp;      // Item
   var oSchedItemComp; // Schedule Line Item
   // Find and create top-level integration object
   iSimOrderObj = inputMsg.GetIntObj (""SAP 47 Order - Simulate SAP Order (BAPI Output)"");
   oQuoteObj = outputMsg.CreateIntObj (""SAP 47 Quote"");

    // Read int object instances from EAI message
   while (iSimOrderObj.NextInstance ())
   {
      oQuoteObj.NewInstance ();
      oQuoteComp = oQuoteObj.CreatePrimaryIntComp (""Quote"");
      oQuoteComp.NewRecord ();
      oQuoteComp.SetFieldValue (""Id"", inputId);
      iSimExportComp = iSimOrderObj.GetPrimaryIntComp (""Export Parameters"");
      if (iSimExportComp.NextRecord ())
      {
         oQuoteComp.SetCopySource  (iSimExportComp);
         oQuoteComp.SetFieldValue(""Status As Of Date"", Timestamp());
         var sapDelBlock = iSimExportComp.GetFieldValue ( ""SHIP_TO_PARTY-DLV_BLOCK"" );
		 var delBlock = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_HEADER_DELIV_BLOCK"", sapDelBlock);
         oQuoteComp.SetFieldValue (""Delivery Block"",     delBlock);
         var sapBillBlock = iSimExportComp.GetFieldValue ( ""BILLING_PARTY-BILL_BLOCK"" );
		 var billBlock = TheApplication().InvokeMethod (""LookupValue"", ""SAP_SO_HEADER_BILL_BLOCK"", sapBillBlock);
         oQuoteComp.SetFieldValue (""Billing Block"",     billBlock);
         oQuoteComp.CopyFieldValue (""EAI Error Message"",     ""RETURN-MESSAGE"");
         var returnCode = iSimExportComp.GetFieldValue (""RETURN-CODE"");
         if ( (returnCode == ""V1154"") || (returnCode == ""V1038"") )
            {
              oQuoteComp.SetFieldValue (""Credit Check Status"",             ""N"");
            }
         else
            {
              oQuoteComp.SetFieldValue (""Credit Check Status"",             ""Y"");
            }

          // Read ""ORDER_CCARD_EX"" component
		  iSimCCardComp = iSimExportComp.GetIntComp (""ORDER_CCARD_EX"");
          var cardStatus;
          var cardLineNo = 0;
          while (iSimCCardComp.NextRecord())
          {
         	 cardStatus = iSimCCardComp.GetFieldValue ( ""CC_STAT_EX"");
         	 if ( cardStatus != null && cardStatus != """" )
         	 {
         oQuoteComp.SetCopySource  (iSimCCardComp);
         oQuoteComp.CopyFieldValue ( ""Credit Card Number"", ""CC_NUMBER"" );
         oQuoteComp.CopyFieldValue ( ""Credit Card Transaction Time"", ""AUTH_DATE"" );
         oQuoteComp.CopyFieldValue (""Card Holder"", ""CC_NAME"");
         oQuoteComp.CopyFieldValue ( ""Credit Card Authorization Code"", ""CC_AUTTH_NO"" );
         oQuoteComp.CopyFieldValue ( ""Credit Card Transaction Amount"", ""AUTHAMOUNT"" );
           	 	var ccStat = iSimCCardComp.GetFieldValue ( ""CC_STAT_EX"");
           	 	var ccReact = iSimCCardComp.GetFieldValue ( ""CC_REACT"");
           	 	if (ccStat == ""C"")
           	 		{ if (ccReact = ""A"")
           	 			{ oQuoteComp.SetFieldValue (""Payment Status"", TheApplication().InvokeMethod (""LookupValue"", ""FUNDRQ_STATUS"", ""Authorized"") );}
           	 		  else
           	 		  	{ oquoteComp.SetFieldValue (""Payment Status"", TheApplication().InvokeMethod (""LookupValue"", ""FUNDRQ_STATUS"", ""Declined"") );}
           	 		 }
           	 	else
           	 		{ oQuoteComp.SetFieldValue (""Payment Status"", TheApplication().InvokeMethod (""LookupValue"", ""FUNDRQ_STATUS"", ""AVS Failed"") );}
        }
        }
				/*//oCardComp.CopyFieldValue (""Expiration Date"", ""CC_VALID_T"" );
				//oCardComp.CopyFieldValue (""Transaction Message"", ""CC_REACT_T"" );
				//var expDate = iSimCCardComp.GetFieldValue (""CC_VALID_T"");
         		//var expMonth = expDate.substring(0,2);
         		//if (expMonth < 10)
         		//	{expMonth = expDate.substring(1,2);}
         		//var expYear = expDate.substring(6,10);
         		//oCardComp.SetFieldValue (""Expiration Month"", expMonth );
				//oCardComp.SetFieldValue (""Expiration Year"", expYear );
				//var paymentMethod = TheApplication().InvokeMethod (""LookupValue"", ""PAYMENT_METHOD_CODE"", ""Credit Card"");
                //oCardComp.SetFieldValue  (""Payment Method"",   paymentMethod);
				//var cardType = cCardLM.Translate (iSimCCardComp.GetFieldValue (""CC_TYPE""));
           	 	//var LDCardType = TheApplication().InvokeMethod (""LookupValue"", ""PAYMENT_TYPE_CODE"", cardType);
           	 	//oCardComp.SetFieldValue	 (""Payment Type"", LDCardType);
         	 //}
          //}*/

          // Read ""ORDERS_ITEMS_OUT"" component
         iSimItemComp = iSimExportComp.GetIntComp (""ORDER_ITEMS_OUT"");
         iSimIItemComp = iSimExportComp.GetIntComp ( ""ORDER_ITEMS_IN"");
         oSimItemComp = oQuoteComp.CreateIntComp (""Quote Item"", false);
         while (iSimItemComp.NextRecord ())
         {
            oSimItemComp.NewRecord ();
            oSimItemComp.SetCopySource  (iSimItemComp);
            iSimIItemComp.NextRecord ();
            var fixPrice = iSimIItemComp.GetFieldValue ( ""PURCH_NO_C"" );
            var netVal          = iSimItemComp.GetFieldValue (""SUBTOTAL_2""); // nbc
            var qtyReq			= iSimItemComp.GetFieldValue (""REQ_QTY"");
            var itemUOM 		= iSimItemComp.GetFieldValue (""SALES_UNIT""); // For EPrice CR
            //var sQtyReq = qtyReq * 1000;
            var netTax		= null;
            var itemReqDate = iSimItemComp.GetFieldValue (""DLV_DATE""); 
            var itemnum = iSimItemComp.GetFieldValue (""ITM_NUMBER"");
            oSimItemComp.CopyFieldValue    (""Unit of Measure"",    ""SALES_UNIT"");
            oSimItemComp.CopyFieldValue    (""Line Number"",                ""ITM_NUMBER"");
            // oSimItemComp.CopyFieldValue    (""Quantity Requested"",        ""REQ_QTY"");
            oSimItemComp.SetFieldValue    (""Quantity Requested"",        qtyReq);
            oSimItemComp.CopyFieldValue    (""Product Integration Id"",        ""MATERIAL"");
            oSimItemComp.CopyFieldValue    (""Source Inventory Location"",        ""PLANT"");
            //oSimItemComp.SetFieldValue     (""NRC CxTotal"", 			netVal); // nbc 7.8.2
            
			// For EPrice CR
            var condFlag = false;
            iCondComp = iSimExportComp.GetIntComp (""ORDER_CONDITION_EX"");
            while (iCondComp.NextRecord ())
            {
             oSimItemComp.SetCopySource  (iCondComp);
             if ((iCondComp.GetFieldValue (""ITM_NUMBER"") == itemnum)) 
             {
             if ((iCondComp.GetFieldValue (""COND_TYPE"") == ""PN00""))
                 			 {	var netPrice = 0;
                 				var netValue = 0;
                 				if (itemUOM == (iCondComp.GetFieldValue (""COND_UNIT"")))
                					{
                					if (fixPrice != ""X"")
            						{ 
                					oSimItemComp.CopyFieldValue  (""Unit Price"",   ""COND_VALUE"");
                 				 	oSimItemComp.CopyFieldValue  (""Adjusted List Price"",   ""COND_VALUE"");
									oSimItemComp.CopyFieldValue  (""Net Price"",   ""COND_VALUE""); // nbc 7.8.2 SAP 4x Net Price
									oSimItemComp.CopyFieldValue     (""NRC CxTotal"", ""CONDVALUE"");
									}
									else
									{
									var sNetPrice = iCondComp.GetFieldValue (""COND_VALUE"");
									var netPrice = sNetPrice /10;
									var netVal = netPrice * qtyReq;
									oSimItemComp.SetFieldValue    (""Fix Price Flag"", ""Y"" );
									oSimItemComp.SetFieldValue    (""Net Price"",      	netPrice);
									oSimItemComp.SetFieldValue     (""NRC CxTotal"", netVal);
									}
                 					}
                 			  	else
              						{netValue = (iCondComp.GetFieldValue (""CONDVALUE""));
                 					 	if (netValue != 0)
                 			 		 		{netPrice = (netValue / qtyReq); 
                 			 		 		if (fixPrice != ""X"")
            								{ 
                 			 	 	 		 oSimItemComp.SetFieldValue  (""Unit Price"",   netPrice);
               	 			 	 			 oSimItemComp.SetFieldValue  (""Adjusted List Price"",   netPrice);
										     oSimItemComp.SetFieldValue  (""Net Price"",   netPrice); //nbc 7.8.2 SAP 4x Net Price
										     oSimItemComp.CopyFieldValue     (""NRC CxTotal"", ""CONDVALUE"");
										     }
										     else
										     {
										     var sNetPrice = iCondComp.GetFieldValue (""COND_VALUE"");
											 var netPrice = sNetPrice /10;
											 var netVal = netPrice * qtyReq;
											 oSimItemComp.SetFieldValue    (""Fix Price Flag"", ""Y"" );
											 oSimItemComp.SetFieldValue    (""Net Price"",      	netPrice);
											 oSimItemComp.SetFieldValue     (""NRC CxTotal"", netVal);
										     }
               	 			 	 			}
               	 			 	 	}
               	 			 	condFlag = true;
               	 	     	}          	 		
               	   			if ((iCondComp.GetFieldValue (""COND_TYPE"") == ""PR00"") && (condFlag == false))
	               				{	
                 					var netPrice= 0;
                 					var netValue = 0;
                 					if (itemUOM == (iCondComp.GetFieldValue (""COND_UNIT"")))
                 			    		{
                 			    		if (fixPrice != ""X"")
            							{ 
                 			    		oSimItemComp.CopyFieldValue  (""Unit Price"",   ""COND_VALUE"");
                 				 		oSimItemComp.CopyFieldValue  (""Adjusted List Price"",   ""COND_VALUE"");
										oSimItemComp.CopyFieldValue  (""Net Price"",   ""COND_VALUE""); //nbc 7.8.2 SAP 4x Net Price										
										oSimItemComp.CopyFieldValue     (""NRC CxTotal"", ""CONDVALUE"");
										}
										else
										{
										var sNetPrice = iCondComp.GetFieldValue (""COND_VALUE"");
										var netPrice = sNetPrice /10;
										var netVal = netPrice * qtyReq;
										oSimItemComp.SetFieldValue    (""Fix Price Flag"", ""Y"" );
										oSimItemComp.SetFieldValue    (""Net Price"",      	netPrice);
										oSimItemComp.SetFieldValue     (""NRC CxTotal"", netVal);
										}
                 						}
                 					else
                 						{ netValue = (iCondComp.GetFieldValue (""CONDVALUE""));
                 			 	  		if (netValue != 0)
                 			 		 		{netPrice = (netValue / qtyReq); 
                 			 		 		if (fixPrice != ""X"")
            								{ 
                 			 		  		oSimItemComp.SetFieldValue  (""Unit Price"",  netPrice);
               	 			 	      		oSimItemComp.SetFieldValue  (""Adjusted List Price"",  netPrice); 
											oSimItemComp.SetFieldValue  (""Net Price"",  netPrice); //nbc 7.8.2 SAP 4x Net Price
											oSimItemComp.CopyFieldValue     (""NRC CxTotal"", ""CONDVALUE"");
											}
											else
											{
											var sNetPrice = iCondComp.GetFieldValue (""COND_VALUE"");
											var netPrice = sNetPrice /10;
											var netVal = netPrice * qtyReq;
											oSimItemComp.SetFieldValue    (""Fix Price Flag"", ""Y"" );
											oSimItemComp.SetFieldValue    (""Net Price"",      	netPrice);
											oSimItemComp.SetFieldValue     (""NRC CxTotal"", netVal);
											}
               	 			 	      		}
               	 			 	 		}
               	 		 		}
               	 	if ((iCondComp.GetFieldValue (""COND_TYPE"") == ""KF00""))
                 		{
                 		if (fixPrice != ""X"")
            			{
                 		 oSimItemComp.CopyFieldValue  (""Freight Amount"",   ""CONDVALUE"");
                 		 }
                 		 else
                 		 {
                 		 oSimItemComp.SetFieldValue  (""Freight Amount"",   ""0"");
                 		 }
               	 		}
               	 	if ((iCondComp.GetFieldValue (""COND_TYPE"") == ""UTXJ""))
                 		{
                 		 oSimItemComp.CopyFieldValue  (""Tax Amt"",   ""CONDVALUE"");
               	 		}
           } //if
           } //while

            // Read ""ORDER_SCHEDULE_EX"" component
            iSchedItemComp = iSimExportComp.GetIntComp   (""ORDER_SCHEDULE_EX"");
            oSchedItemComp = oSimItemComp.CreateIntComp (""Quote - SAP 4x Schedule Line Item"", false);
			var firstScheduleLine = 1;
            while (iSchedItemComp.NextRecord ())
             {
               var itemnum2  = iSchedItemComp.GetFieldValue (""ITM_NUMBER"");
               var schednum = iSchedItemComp.GetFieldValue (""SCHED_LINE"");
               var schedQty = iSchedItemComp.GetFieldValue (""REQ_QTY"");
               var sSchedQty = schedQty * 1000;
               var intId;
               if (itemnum2 == itemnum)
               {
                oSchedItemComp.NewRecord ();
                oSchedItemComp.SetCopySource  (iSchedItemComp);
                intId = inputId + ""-"" + itemnum2 + ""-"" + schednum;
                oSchedItemComp.SetFieldValue (""Integeration ID"",             intId);
                // oSchedItemComp.CopyFieldValue (""Required Qty"",                   ""REQ_QTY"");
                oSchedItemComp.SetFieldValue (""Required Qty"",                   sSchedQty);
                oSchedItemComp.SetFieldValue (""Schedule Line No"",     schednum);
                oSchedItemComp.SetFieldValue  (""Item Line No"",     itemnum);
                oSchedItemComp.SetFieldValue  (""Quote Id"",     inputId);
                oSchedItemComp.CopyFieldValue (""Confirmed Date"",           ""GI_DATE"");
                oSchedItemComp.CopyFieldValue (""Confirmed Qty"",               ""CONFIR_QTY"");
                var reqDate = iSchedItemComp.GetFieldValue ( ""REQ_DATE"");
                oSchedItemComp.SetFieldValue (""Required Delivery Date"" ,          reqDate);
                // Checking for First Schedule Line, as it contains actual Req Delivery Date and setting it for Item Req Delv Date
                if ( firstScheduleLine == 1 )
                	{
                		oSimItemComp.SetFieldValue    (""Requested Delivery Date"",      reqDate );
                	}
                firstScheduleLine++;
                }
             }
         }
      }
   }
}
function Simulate77SAP47Quote_SiebelToBAPI (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   Quote Object (SAP 47 Quote)
    *     Quote (Quote)
    *       Quote Line Item (item)
    *			Quote Line Item attribute Comp
    *
    * Output Object's Integration Components:
    *   BAPI Import Object (SAP 47 Order - Create SAP Order (BAPI Import))
    *     Import Parameters
    *       ORDER_PARTNERS
    *       ORDER_ITEMS_IN
    *       ORDER_PARTNERS
    *		ORDER_CFGS_INST
    *		ORDER_CFGS_REF
    *		ORDER_CFGS_VALUE
    */

   /*
    * Set up EAI Lookup maps
    */
   var orderTypeLM = EAIGetValueMap (""SAP Order Types"",     	""Siebel Outbound"");
   var incotermsLM = EAIGetValueMap (""SAP Incoterms"",      		""Siebel Outbound"");
   var payTermsLM  = EAIGetValueMap (""SAP Payment Terms"",   	""Siebel Outbound"");
   var currencyLM  = EAIGetValueMap (""SAP Currency Code"",		""Siebel Outbound"");
   var cCardLM	   = EAIGetValueMap (""SAP Credit Card Type"",	""Siebel Outbound"");
   var uomLM       = EAIGetValueMap (""SAP Unit of Measure"", 	""Siebel Outbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iQuoteObj;  // Quote object instance
   var iQuoteComp; // Quote
   var iItemComp;  // Quote Line Item
   var iAttrComp;  // Item Attribute Component

   // Store inputId to be denormalized to all RFC table rows
   //var inputId = inputMsg.GetArgument (""Siebel Order Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oCFDOrderObj;        // BAPI Order instance
   var oCFDImportComp;      // BAPI Import parameters
   var oCFDItemComp;        // BAPI Order Item
   var oCFDSchedComp;		// For EPrice CR
   var oCFDPartnerComp;     // BAPI Order Partners
   var oCFDCardComp;     	// BAPI Card Component
   var oCFDCfgInstComp;
   var oCFDCfgValComp;
   var oCFDCfgRefComp;


   /*
    * Find and create top-level integration object
    */
   iQuoteObj    = inputMsg.GetIntObj (""SAP 47 Quote"");
   oCFDOrderObj = outputMsg.CreateIntObj (""SAP 47 Order - Simulate SAP Order (BAPI Input)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iQuoteObj.NextInstance ())
   {
      /*
       * Create ""Order"" object in output message
       */
      oCFDOrderObj.NewInstance ();

      /*
       * Read ""Order"" component
       */
      iQuoteComp     = iQuoteObj.GetPrimaryIntComp (""Quote"");
      oCFDImportComp = oCFDOrderObj.CreatePrimaryIntComp (""Import Parameters"");
     
      if (iQuoteComp.NextRecord ())
      {
        
         /*
          * Write ""Import Parameters"" component
          */
         oCFDImportComp.NewRecord ();
         oCFDImportComp.SetCopySource  (iQuoteComp);
         
         var priceList =  null;
         priceList = iQuoteComp.GetFieldValue (""Price List Id"");
         var currencyCode = currencyLM.Translate (iQuoteComp.GetFieldValue (""Currency Code""));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DOC_NUMBER"", null);
         //var docType = TheApplication().InvokeMethod (""LookupValue"", ""FS_ORDER_TYPE"", ""Sales Order"");
         //oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DOC_TYPE"",   orderTypeLM.Translate (docType));
		 oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DOC_TYPE"",   ""TA"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-CURRENCY"",  currencyCode );
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-SALES_ORG"",  ""SAP Sales Organisation (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DISTR_CHAN"", ""SAP Distribution Channel (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-DIVISION"",   ""SAP Division (MO)"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_NO"",       ""Quote Number"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PURCH_DATE"", ""Requested Ship Date"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REF_1"",      ""Quote Number"");
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-PRICE_DATE"", ""Start Date"" );
		  // Set NAME only if ""Contact Id"" is not null.
         if (iQuoteComp.GetFieldValue (""Contact Id"") != null)
         {
            oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-NAME"", EAIFormatPersonName (iQuoteComp.GetFieldValue (""Contact First Name""),
                                                                                       iQuoteComp.GetFieldValue (""Contact Last Name"")));
         }         
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-TELEPHONE"",  ""Contact Work Phone #"");
		 if (iQuoteComp.GetFieldValue (""Requested Ship Date"") != """")
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",   ""Requested Ship Date"");
               
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-REQ_DATE_H"",       ""Start Date"");
            }
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-DATE_TYPE"",  ""1"");
                  
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-INCOTERMS1"", incotermsLM.Translate (iQuoteComp.GetFieldValue(""Freight Terms"")));
         oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-INCOTERMS2"", ""Freight Terms Info"");
         oCFDImportComp.SetFieldValue  (""ORDER_HEADER_IN-PMNTTRMS"",   payTermsLM.Translate (iQuoteComp.GetFieldValue (""Payment Term"")));
         
         if (iQuoteComp.GetFieldValue (""Partial Ship"") != ""Y"")
            {
               oCFDImportComp.SetFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       ""X"");
            }
         else
            {
               oCFDImportComp.CopyFieldValue (""ORDER_HEADER_IN-COMPL_DLV"",       null);
            }
    

         /*
          * Write ""ORDER_PARTNERS"" component  
          */
                  
         oCFDPartnerComp = oCFDImportComp.CreateIntComp (""ORDER_PARTNERS"", oCFDImportComp);

         // Sold to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iQuoteComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""AG"");

         var soldtoparty =  iQuoteComp.GetFieldValue (""Account Integration Id"");
         var array = soldtoparty.split("":"");
         var AccountIntId = array[0];
         
         
         oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId);

         // Ship To partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iQuoteComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""WE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Ship To Account Integration Id"");

         // Payer partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iQuoteComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RG"");
         var payerId = iQuoteComp.GetFieldValue (""Payer Account Integration Id"");
         if (payerId == null || payerId == """")
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", AccountIntId );
         	}
         else
         	{
         		oCFDPartnerComp.SetFieldValue (""PARTN_NUMB"", payerId );
         	}
         
         // Bill to partner
         oCFDPartnerComp.NewRecord ();
         oCFDPartnerComp.SetCopySource  (iQuoteComp);
         oCFDPartnerComp.SetFieldValue  (""PARTN_ROLE"", ""RE"");
         oCFDPartnerComp.CopyFieldValue (""PARTN_NUMB"", ""Bill To Account Integration Id"");

		/*
		 * Read and update Credit Card Info
		 *
		 */
		 var ccType = cCardLM.Translate (iQuoteComp.GetFieldValue (""Credit Card Name""));
		 var ccNum = iQuoteComp.GetFieldValue ( ""Credit Card Number"");
		 if ( ccNum != null && ccNum != """" )
		 
		 	{
		 		oCFDCardComp = oCFDImportComp.CreateIntComp (""ORDER_CCARD"");
		 		oCFDCardComp.NewRecord();
		 		oCFDCardComp.SetCopySource (iQuoteComp);
		 		var cardExpDate = iQuoteComp.GetFieldValue ( ""Credit Card Expiration Date"");
		 		if ( cardExpDate == null || cardExpDate == """" )
		 			{
		 				var cardExpYear	= iQuoteComp.GetFieldValue (""Credit Card Expiration Year"" );
		 				var cardExpMonth  = iQuoteComp.GetFieldValue (""Credit Card Expiration Month"" );
		 				var cardExpDay;
		 				
		 				var nMonth = ConvertMonth (cardExpMonth);
		 				cardExpDay = GetDaysInAMonth(nMonth, cardExpYear);
		 				var cardExpFullDate = nMonth + ""/"" + cardExpDay + ""/"" + cardExpYear + "" 00:00:00"";
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpFullDate );
		 			}
		 		else
		 			{
		 				oCFDCardComp.SetFieldValue (""CC_VALID_T"", cardExpDate );
		 			}
		 		oCFDCardComp.SetFieldValue		(""CC_TYPE"", 		ccType);
		 		oCFDCardComp.SetFieldValue		(""CC_NUMBER"", 		ccNum );
		 		oCFDCardComp.CopyFieldValue		(""CC_NAME"", 		""Credit Card Holder"" );
				//oCFDCardComp.CopyFieldValue		(""AUTHAMOUNT"", 		""Credit Card Transaction Amount"" );
		 		oCFDCardComp.SetFieldValue		(""CURRENCY"", 		currencyCode );
		 	}
         /*
          * Read ""Order Line Item"" Integration Component
 	      */
 	      
         iItemComp    = iQuoteComp.GetIntComp        (""Quote Item"");
         oCFDItemComp = oCFDImportComp.CreateIntComp (""ORDER_ITEMS_IN"", oCFDImportComp);
         oCFDCfgValComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_VALUE"", oCFDImportComp);       
         oCFDCfgRefComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_REF"", oCFDImportComp);         
         oCFDCfgInstComp = oCFDImportComp.CreateIntComp (""ORDER_CFGS_INST"", oCFDImportComp);
		 // For EPrice CR
         oCFDSchedComp = oCFDImportComp.CreateIntComp (""ORDER_SCHEDULE_IN"", oCFDImportComp);                  
         while (iItemComp.NextRecord ())
         {
/*           var itemNum =  iItemComp.GetFieldValue (""Line Number"");
            var Posex_Hilfsvariable =""00000"";

            Clib.sprintf(Posex_Hilfsvariable,""%06.6s"",iItemComp.GetFieldValue(""Line Number""));
            var itemNumber = Posex_Hilfsvariable;      
            var parentItemId =  iItemComp.GetFieldValue (""Parent Quote Item Id"");                  
            if((parentItemId == 0) || (parentItemId ==""""))
            {*/
            oCFDItemComp.NewRecord ();
            oCFDItemComp.SetCopySource  (iItemComp);
            var itemNumber = iItemComp.GetFieldValue(""Line Number"");
            oCFDItemComp.SetFieldValue (""ITM_NUMBER"",     itemNumber);
            //oCFDItemComp.SetFieldValue (""HG_LV_ITEM"",     ""000000"");
            oCFDItemComp.CopyFieldValue (""PO_ITM_NO"",      ""Line Number"");
            oCFDItemComp.CopyFieldValue (""MATERIAL"",       ""Product Integration Id"");
            
            if (iItemComp.GetFieldValue (""Partial Ship"") != ""Y"")
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""C"");
                }
            else
                {
                   oCFDItemComp.SetFieldValue (""PART_DLV"",       ""D"");
                }
            oCFDItemComp.CopyFieldValue (""PLANT"",          ""Source Inventory Location"");
            oCFDItemComp.SetFieldValue  (""SALES_UNIT"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
            oCFDItemComp.CopyFieldValue (""SHORT_TEXT"",     ""Part Number"");
            // For EPrice CR
            //oCFDItemComp.CopyFieldValue (""REQ_DATE"",       ""Requested Delivery Date"");
            //oCFDItemComp.SetFieldValue  (""DATE_TYPE"",      ""1"");
            //oCFDItemComp.CopyFieldValue (""REQ_QTY"",        ""Quantity Requested"");
	            
            var siebelPrice = iItemComp.GetFieldValue ( ""Unit Price"" );
            if ((  siebelPrice != 0) || (  priceList != """" ))
            
            {
             	oCFDItemComp.SetFieldValue  (""CD_TYPE2"",      ""PN00"");
            	oCFDItemComp.SetFieldValue  (""PURCH_NO_C"",     ""X"");
                oCFDItemComp.CopyFieldValue (""CD_VALUE2"",     ""Item Price"");
            	oCFDItemComp.SetFieldValue  (""CD_P_UNT2"",     ""1"");
            	oCFDItemComp.SetFieldValue  (""CD_D_UNT2"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));
            	
             	oCFDItemComp.SetFieldValue  (""CD_TYPE3"",      ""KF00"");
                oCFDItemComp.CopyFieldValue (""CD_VALUE3"",     ""Freight Amount"");
                oCFDItemComp.SetFieldValue  (""CD_P_UNT3"",     ""1"");
            	oCFDItemComp.SetFieldValue  (""CD_D_UNT3"",     uomLM.Translate (iItemComp.GetFieldValue (""Unit of Measure"")));

  


            }
            else
            {
             	oCFDItemComp.SetFieldValue  (""CD_TYPE2"",      ""PR00"");
            }
            
            //For EPrice CR
            oCFDSchedComp.NewRecord ();
            oCFDSchedComp.SetCopySource  (iItemComp);
            oCFDSchedComp.SetFieldValue (""DATE_TYPE"",     ""1"");
            oCFDSchedComp.CopyFieldValue (""REQ_DATE"",     ""Due Date"");
            oCFDSchedComp.CopyFieldValue (""REQ_QTY"",      ""Quantity Requested"");
            oCFDSchedComp.CopyFieldValue (""ITM_NUMBER"",      ""Line Number"");
            oCFDSchedComp.CopyFieldValue (""SCHED_LINE"",      ""0001"");
            
            
                // oCFDItemValComp.SetFieldValue (""ITM_NUMBER"",     itemNumber);                             	
}  // end if condition for Parent item num

/*            oCFDCfgRefComp.NewRecord ();
            oCFDCfgRefComp.SetCopySource  (iItemComp);
            oCFDCfgRefComp.SetFieldValue (""POSEX"",     itemNumber);
            oCFDCfgRefComp.SetFieldValue (""CONFIG_ID"",     itemNumber);            
            oCFDCfgRefComp.SetFieldValue (""ROOT_ID"",     itemNumber);            


            oCFDCfgInstComp.NewRecord ();
            oCFDCfgInstComp.SetCopySource  (iItemComp);
            oCFDCfgInstComp.SetFieldValue (""INST_ID"",     itemNumber);
            oCFDCfgInstComp.SetFieldValue (""CONFIG_ID"",   itemNumber);            
            oCFDCfgInstComp.SetFieldValue (""OBJ_TYPE"",     ""MARA"");            
            oCFDCfgInstComp.SetFieldValue (""OBJ_KEY"",     ""MATERIAL"");            
            oCFDCfgInstComp.SetFieldValue (""QUANTITY"",     ""1"");            

*/
           
      
                    /*
          * Read ""Order Line Item Attribute Value"" Integration Component
          */
/*         iAttrComp    = iItemComp.GetIntComp        (""Quote Item XA"");

         
         while (iAttrComp.NextRecord ())
         {

            oCFDCfgValComp.NewRecord ();
            oCFDCfgValComp.SetCopySource  (iAttrComp);
            oCFDCfgValComp.CopyFieldValue (""CHARC"",     ""Name"");
            oCFDCfgValComp.CopyFieldValue (""VALUE"",     ""Value"");
            oCFDCfgValComp.CopyFieldValue (""CHARC_TXT"", ""Description"");
            oCFDCfgValComp.SetFieldValue (""INST_ID"", itemNumber);
            oCFDCfgValComp.SetFieldValue (""CONFIG_ID"", itemNumber);
		}
  */   
       //  } //order items read
      }
      
   }
}
"/**
 ** User-defined function that returns System Date/Time
 ** in the format understandable by Siebel adapter
 **/
function Timestamp()
{
 	var d = Date.fromSystem(Clib.time());
 
 	// Return date in the format MM/DD/YYYY HH:MM:SS
 	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", d.getMonth()+1, d.getDate(), d.getFullYear(), d.getHours(), d.getMinutes(), d.getSeconds()); 
}
"/**********************************************************************************************************
Purpose 		: Function called from Workflow Process  to  change   the  status of exported   numbers  from PRE-ACTIVATING  to AVAILABLE 
after numbers  are sucessufully Pre-Activated   in  the provisioning system
Author 			: KALYANA TANGIRALA
Date 			: 19-MAY-2006
Input			: Input Property set includes  BatchNo  of  Pre-Activated   NO's  in  the  provisioning system
Outputs		 	: Output property set contianing the err message
Change Log		: Changes made to the function
***********************************************************************************************************
Date(DD/MM/YYYY)	| By		| Description of Change																		
-----------------------------------------------------------------------------------------------------------
19/05/2006		1.0   | Tech Mahindra,KT	| Creation
20060706       | 1.1  | Prasad              | Siebel ES SCR1, Objects Destroyed
20060719       | 1.2  | Kalyana             | Changed Seach Specifications to process Numbers whose Pre-Activation  is ""Failed"" earlier 
20060804       | 1.3  | Kalyana             | Siebel ES SCR 20060803 , Objects Destroyed
----------------------------------------------------------------------------------------------------------*/

function ChangeStatus(BatchNo)
{
	//var BatchNo 	         = Inputs.GetProperty(""BatchNo"");
    var blnIsRecord			 = false; 
	var intCount 			 = 0;
    var boAUCRegistration 	 = TheApplication().GetBusObject(""RMS AUC Registration"");
	//below 1.3 
	//KT 20060804 commented this line  because this  object  is not required
    //var bcAUCRegistration	 = boAUCRegistration.GetBusComp(""RMS AUC Registration"");
	//above 1.3
	var bcAUCNumberMaster 	 = boAUCRegistration.GetBusComp(""RMS AUC Number Master"");	
	var bcAUCNumMstrQry    	 = boAUCRegistration.GetBusComp(""RMS AUC Number Master Query"");
    var bcAUCSIMNumber		 = boAUCRegistration.GetBusComp(""RMS AUC SIM Number"");
	var bcEbc                = boAUCRegistration.GetBusComp(""RMS AUC IMSI  Pre Activation EBC"");
	var bcCnct				 = boAUCRegistration.GetBusComp(""RMS NM Association Number Type Display"");
    var blnIsEBc      	     = false;
    var blnIsCnct			 = false;
    var strErrVal 			= """";
    var strSearchExp        = """";
	var strNumberStatus    = "" "";
	var AssociateId			= """";
  //var strStatus		    = TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""REGISTERED"");
	var Inputs =TheApplication().NewPropertySet();
    var Outputs =TheApplication().NewPropertySet();
	try   {
			with (bcAUCNumMstrQry){
			SetViewMode(AllView);
			ActivateField(""Number String"");
			ActivateField(""AUC Reg Id"");
			ActivateField(""Type Identifier"");
			ActivateField(""Status"");
			//ActivateField(""Is Pre Activated"");
			ActivateField(""PreActivation Id"");
			ActivateField(""Assoc Start Id"");
		    }
	        with(bcEbc) {
			ActivateField(""Batch No"");
			//ActivateField(""Status"");
			//ActivateField(""ICC ID"");
			ActivateField(""Clarity Response Code"");
			ActivateField(""IMSI"");
			ClearToQuery();
			strSearchExp =    strSearchExp +""[Batch No] ='""+BatchNo+""'""; 
            strSearchExp  =     ""(""+strSearchExp +  "" AND "" + ""([Clarity Response Code] = '""+""00000'""+"" OR [Clarity Response Code] ='""+""00001'))"";
			ExecuteQuery(ForwardOnly);
			SetSearchExpr(strSearchExp);
			//SetSearchSpec(""Response Code"",""<>''"");
			ExecuteQuery(ForwardOnly);
			blnIsEBc = FirstRecord();				
	        }  // Eno  of bcEbc
		    //below 1.2
			strSearchExp = """";
			//above 1.2
			while(blnIsEBc) {
			//var IMSItemp = bcEbc.GetFieldValue(""IMSI"");
			//var ICCIDtemp = bcEbc.GetFieldValue(""ICC ID"");
			//var StrStatus = bcEbc.GetFieldValue(""Status"");
			var StrResponseCode = bcEbc.GetFieldValue(""Clarity Response Code"");
			//if (StrStatus == ""REGISTERED"")
			if (StrResponseCode == ""00000"")
			{
				strNumberStatus = TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE"");
			}
			//if (StrStatus == ""FAILED"")
			if (StrResponseCode == ""00001"")
			{
				strNumberStatus = TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""FAILED"");
			}
			with (bcAUCNumMstrQry)
	        {
				ClearToQuery();
				SetViewMode(AllView);
		    	SetSearchSpec(""Number String"",bcEbc.GetFieldValue(""IMSI""));
				SetSearchSpec(""PreActivation Id"",BatchNo);
				bcAUCNumMstrQry.ExecuteQuery(ForwardOnly);
				blnIsRecord = bcAUCNumMstrQry.FirstRecord();
				AssociateId = """";
				if(blnIsRecord)
				{
					AssociateId = bcAUCNumMstrQry.GetFieldValue(""Assoc Start Id"");
				}
				if(AssociateId != """" ) {
					ClearToQuery();
					//below 1.2 
					//Changed Seach Specifications to process Numbers whose Pre-Activation  is ""Failed"" earlier 
					//SetSearchSpec(""Assoc Start Id"",AssociateId);
					//SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""PRE-ACTIVATING""));
					strSearchExp  =    strSearchExp +""[Assoc Start Id] ='""+AssociateId+""'""; 
                    strSearchExp  =    ""(""+strSearchExp+  "" AND "" + ""([Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""PRE-ACTIVATING"")+""'"";
					strSearchExp  =    strSearchExp + "" OR [Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""FAILED"")+""'""+""))"";
					SetSearchExpr(strSearchExp);
					//above 1.2
					ExecuteQuery(ForwardOnly);
					blnIsRecord = FirstRecord();
					while(blnIsRecord)
					{
						SetFieldValue(""Status"",strNumberStatus);
						//bcAUCNumMstrQry.SetFieldValue(""Is Pre Activated"",""Y"");
						WriteRecord();
						blnIsRecord = NextRecord();
					}
					//update status in Number association concat table
					with (bcCnct) {
					SetViewMode(AllView);
					ActivateField(""Status"");
					ClearToQuery()
					//below 1.2
					//SetSearchSpec(""Assoc Start Id"",AssociateId);
					//SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""PRE-ACTIVATING""));
					SetSearchExpr(strSearchExp);
					//above 1.2
					ExecuteQuery(ForwardOnly);
					blnIsCnct = FirstRecord();
					while(blnIsCnct) {
					SetFieldValue(""Status"",strNumberStatus);
					WriteRecord();
					blnIsCnct = NextRecord();
						}	
					}
				    with(bcAUCSIMNumber){	
					SetViewMode(AllView);
					ActivateField(""Status"");
					ClearToQuery();
					//below 1.2
					//SetSearchSpec(""Assoc Start Id"",AssociateId);
					//SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""PRE-ACTIVATING""));
					SetSearchExpr(strSearchExp);
					//above 1.2
					ExecuteQuery(ForwardOnly);
					var blnIsSimNumber = FirstRecord();
					while(blnIsSimNumber)
					{
					SetFieldValue(""Status"",strNumberStatus);
					WriteRecord();
					blnIsSimNumber = NextRecord();
					}
					}
			        }
			        } // End  of with (bcAUCNumMstrQry)
			
			
			/*bcAUCNumMstrQry.SetFieldValue(""Status"",strNumberStatus);
			bcAUCNumMstrQry.WriteRecord();
			//blnIsRecord = bcAUCNumberMaster.NextRecord();
			ClearToQuery();
			SetSearchSpec(""AUC Reg Id"",BatchNo);
			SetSearchSpec(""Number String"",ICCIDtemp);
			ExecuteQuery(ForwardOnly);
			blnIsRecord = bcAUCNumMstrQry.FirstRecord();
			/*if(!blnIsRecord)
			{
			// some code
			}*/
			/*bcAUCNumMstrQry.SetFieldValue(""Status"",strNumberStatus);
			bcAUCNumMstrQry.WriteRecord();*/
			//below 1.2 
			strSearchExp = """";
			//above 1.2
			blnIsEBc = bcEbc.NextRecord(); 
        }// End  of 
        
		//Code for refreshing business component
		Inputs.SetProperty(""Business Object Name"",""RMS AUC Registration"");
		Inputs.SetProperty(""Business Component Name"",""RMS AUC Number Master"");
		var Rfrsh = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
		Rfrsh.InvokeMethod(""Refresh Business Component"",Inputs,Outputs);
//1.1 below, this refresh Buscomp BS should be removed at least from here !!!!
		Rfrsh = null;
//1.1 above
		return(CancelOperation);
        
	} catch(e) {
		throw(e);
        
    }   finally {
       
	    bcAUCNumMstrQry        = null;
		bcAUCNumberMaster      = null;
		bcAUCNumMstrQry        = null;		
        bcEbc                  = null;
//1.1 below
		bcCnct                 = null;
        bcAUCSIMNumber         = null;
//1.1 above
//below 1.3
	//	Inputs                 = null;
	//	Outputs                = null;
//above 1.3
		boAUCRegistration      = null;
    }
}
function PreActivateBatch(&Inputs,&Outputs)
{
    var boAUC 	 = TheApplication().GetBusObject(""RMS AUC Registration"");
	var bcAUC 	 = boAUC.GetBusComp(""RMS AUC Control Table EBC"");	
	var strSearchExp	=	"""";
	var blnIsRec		=	"""";

	try   
	{
		    with (bcAUC)
			{
				ActivateField(""Pre Act Batch Id"");
				ActivateField(""CRM Status"");
				ActivateField(""Clarity Status"");
				ActivateField(""Geneva Status"");
				ClearToQuery();
				strSearchExp	=	""[CRM Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""HCPT_AUC_STATUS"",""Complete"") + ""'""; 
				strSearchExp	+=	"" AND [Clarity Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""HCPT_AUC_STATUS"",""Complete"") + ""'""; 
//				strSearchExp	+=	"" AND [Geneva Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""HCPT_AUC_STATUS"",""COMPLETE"") + ""'""; 
				SetSearchExpr(strSearchExp);

				ExecuteQuery(ForwardOnly);
				blnIsRec = FirstRecord();				
			
				while(blnIsRec) 
				{
					SetFieldValue(""CRM Status"",TheApplication().InvokeMethod(""LookupValue"",""HCPT_AUC_STATUS"",""Processing AUC""));
					WriteRecord();

					Inputs.SetProperty(""BatchNo"",GetFieldValue(""Pre Act Batch Id""));
					ChangeStatus(Inputs, Outputs);

					SetFieldValue(""CRM Status"",TheApplication().InvokeMethod(""LookupValue"",""HCPT_AUC_STATUS"",""AUC Complete""));
					WriteRecord();
					blnIsRec= NextRecord();
				}
			}
					return(CancelOperation);	
	}
	catch(e)
	{
		TheApplication().RaiseErrorText(e.errText);
	}
	finally
	{
			Inputs	= null;
			Outputs	= null;
			boAUC	= null;
			bcAUC	= null;

	}
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060627       | 1.1  | Prasad | SiebelES#51 removed unnecessary code in PreCanInvoke, code is pasted below
	if(MethodName == ""ChangeStatus"") 
	{
		CanInvoke = ""TRUE"";
		return(CancelOperation);
	} 
	else
		return (ContinueOperation);
---------------+------+--------+----------------------------------------------
*/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
if (MethodName == ""PreActivateBatch"")
{
	PreActivateBatch(Inputs, Outputs);
	return(CancelOperation);
}
else
if (MethodName == ""ChangeStatus"") {
		ChangeStatus(Inputs.GetProperty(""BatchNo""));
    return(CancelOperation);
	}
	else {
		return (ContinueOperation);
	}
}
"/**********************************************************************************************************
Purpose 		: Function called from Workflow Process  to  change   the  status of exported   numbers  from REGISTERING  to AVAILABLE 
after numbers  are sucessufully registered   in  the provisioning system
Author 			: KALYANA TANGIRALA
Date 			: 19-MAY-2006
Input			: Input Property set includes  BatchNo  of  Registered   NO's  in  the  provisioning system
Outputs		 	: Output property set contianing the err message
Change Log		: Changes made to the function
***********************************************************************************************************
Date(DD/MM/YYYY)	| By		        | Description of Change																		
-----------------------------------------------------------------------------------------------------------
19/05/2006	   1.0  | Tech Mahindra,KT	| Creation
20060706     | 1.1  | Prasad            | Siebel ES SCR1, Objects Destroyed
20060719     | 1.2  | Kalyana           | Changed Seach Specifications to process Numbers whose Registration
										  is ""Failed"" earlier 
20060804	 |1.3   | Kalyana           | Siebel ES SCR 20060804, Objects Destroyed
----------------------------------------------------------------------------------------------------------*/

function ChangeStatus(BatchNo)
{
	//var BatchNo;
	//BatchNo 	         	= Inputs.GetProperty(""BatchNo"");
    var blnIsRecord			 = false; 
	var intCount 			 = 0;
    var boAUCRegistration 	 = TheApplication().GetBusObject(""RMS AUC Registration"");
//not used??
//	var bcAUCRegistration	 = boAUCRegistration.GetBusComp(""RMS AUC Registration"");
	var bcAUCNumberMaster 	 = boAUCRegistration.GetBusComp(""RMS AUC Number Master"");	
	var bcAUCNumMstrQry    	 = boAUCRegistration.GetBusComp(""RMS AUC Number Master Query"");
	var bcAUCSIMNumber		 = boAUCRegistration.GetBusComp(""RMS AUC SIM Number"");
	var bcEbc                = boAUCRegistration.GetBusComp(""RMS AUC EBC"");
	var bcCnct				 = boAUCRegistration.GetBusComp(""RMS NM Association Number Type Display"");
    var blnIsEBc      	     = false;
    var blnIsCnct			 = false;
    var strErrVal 			 = """";
    var strSearchExp         = """";
	var strNumberStatus      = "" "";
	var AssociateId			 = """";
//below 1.2	
	var strSearchExp1        = """";
//above 1.2
	
   //var strStatus		     = TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""REGISTERED"");
	
    try   {
	    with (bcAUCNumMstrQry)
	    {
			SetViewMode(AllView);
			ActivateField(""Number String"");
			ActivateField(""AUC Reg Id"");
			ActivateField(""Type Identifier"");
			ActivateField(""Status"");
			ActivateField(""Assoc Start Id"");
		}
		with(bcEbc)
	 	{
			ActivateField(""Batch No"");
			//ActivateField(""Status"");
			//ActivateField(""ICC ID"");
			ActivateField(""Response Code"");
			ActivateField(""IMSI"");
			ActivateField(""Request Id"");
			ClearToQuery();
			strSearchExp =    strSearchExp +""[Batch No] ='""+BatchNo+""'""; 
            strSearchExp  =     ""(""+strSearchExp +  "" AND "" + ""([Response Code] = '""+""00000'""+"" OR [Response Code] ='""+""00001'))"";
			SetSearchExpr(strSearchExp);
			//SetSearchSpec(""Response Code"",""<>''"");
			ExecuteQuery(ForwardOnly);
			blnIsEBc = FirstRecord();				
		}
		while(blnIsEBc) 
		{
			//var IMSItemp = bcEbc.GetFieldValue(""IMSI"");
			//var ICCIDtemp = bcEbc.GetFieldValue(""ICC ID"");
			//var StrStatus = bcEbc.GetFieldValue(""Status"");
			var StrResponseCode = bcEbc.GetFieldValue(""Response Code"");
			//if (StrStatus == ""REGISTERED"")
			if (StrResponseCode == ""00000"")
			{
				strNumberStatus = TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE"");
			}
			//if (StrStatus == ""FAILED"")
			if (StrResponseCode == ""00001"")
			{
				strNumberStatus = TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""FAILED"");
			}
			with (bcAUCNumMstrQry)
		    {
				AssociateId = """";
				AssociateId = bcEbc.GetFieldValue(""Request Id"");
				
//				ClearToQuery();
//				SetViewMode(AllView);
			    //SetSearchSpec(""AUC Reg Id"",BatchNo);
			    //bcAUCNumMstrQry.ExecuteQuery(ForwardOnly);
			    //SetSearchSpec(""Number String"",bcEbc.GetFieldValue(""IMSI""));
//			    SetSearchSpec(""Assoc Start Id"",AssociateId);
//			    ExecuteQuery(ForwardOnly);
//			    blnIsRecord = FirstRecord();
			    
//				if(blnIsRecord)
//				{
//					AssociateId = GetFieldValue(""Request Id"");
//				}
				//this to avoid changing of status of all numbers in the repository
				if(AssociateId != """") {
					ClearToQuery();
	                //below 1.2				
					//SetSearchSpec(""Assoc Start Id"",AssociateId);
					//SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""REGISTERING""));
					strSearchExp1  =    strSearchExp1 +""[Assoc Start Id] ='""+AssociateId+""'""; 
                    strSearchExp1  =    ""(""+strSearchExp1+  "" AND "" + ""([Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""REGISTERING"")+""'"";
					strSearchExp1  =    strSearchExp1 + "" OR [Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""FAILED"")+""'""+""))"";
					SetSearchExpr(strSearchExp1);
					//above 1.2
					ExecuteQuery(ForwardOnly);
					blnIsRecord = FirstRecord();
					while(blnIsRecord)
					{
						SetFieldValue(""Status"",strNumberStatus);
						WriteRecord();
						blnIsRecord = NextRecord();
					} // End of while(blnIsRecord)
					//update status in Number association concat table
					with (bcCnct) 
					{
						SetViewMode(AllView);
						ActivateField(""Status"");
						ClearToQuery()
						//SetSearchSpec(""Assoc Start Id"",AssociateId);
						//SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""REGISTERING""));
						SetSearchExpr(strSearchExp1);
						ExecuteQuery(ForwardOnly);
						blnIsCnct = FirstRecord();
						while(blnIsCnct)
						 {
							SetFieldValue(""Status"",strNumberStatus);
							WriteRecord();
							blnIsCnct = NextRecord();
						 }	// while(blnIsCnct)
					 }  //End of with (bcCnct)
				    with(bcAUCSIMNumber)
					{	
					SetViewMode(AllView);
					ActivateField(""Status"");
					ClearToQuery();
					//SetSearchSpec(""Assoc Start Id"",AssociateId);
					//SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""REGISTERING""));
					SetSearchExpr(strSearchExp1);
					ExecuteQuery(ForwardOnly);
					var blnIsSimNumber = FirstRecord();
					   while(blnIsSimNumber)
					   {
					   SetFieldValue(""Status"",strNumberStatus);
					   WriteRecord();
					   blnIsSimNumber = NextRecord();
					   }  //End of  while(blnIsSimNumber)
					}  //with(bcAUCSIMNumber)
     			    }  //if(AssociateId != """")
				    } // End  of with (bcAUCNumMstrQry)
					
			/*bcAUCNumMstrQry.SetFieldValue(""Status"",strNumberStatus);
			bcAUCNumMstrQry.WriteRecord();
			//blnIsRecord = bcAUCNumberMaster.NextRecord();
			ClearToQuery();
			SetSearchSpec(""AUC Reg Id"",BatchNo);
			SetSearchSpec(""Number String"",ICCIDtemp);
			ExecuteQuery(ForwardOnly);
			blnIsRecord = bcAUCNumMstrQry.FirstRecord();
			/*if(!blnIsRecord)
			{
			// some code
			}*/
			/*bcAUCNumMstrQry.SetFieldValue(""Status"",strNumberStatus);
			bcAUCNumMstrQry.WriteRecord();*/
			//below 1.2
			strSearchExp1 = """";
			//above 1.2
			blnIsEBc = bcEbc.NextRecord(); 
		} // End  of while(blnIsEBc)
		var Inputs =TheApplication().NewPropertySet();
	    var Outputs =TheApplication().NewPropertySet();
	    Inputs.SetProperty(""Business Object Name"",""RMS AUC Registration"");
	    Inputs.SetProperty(""Business Component Name"",""RMS AUC Number Master"");
	    var Rfrsh = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
	    Rfrsh.InvokeMethod(""Refresh Business Component"",Inputs,Outputs);
//1.1 below, this refresh Buscomp BS should be removed at least from here !!!!
	    Rfrsh = null;
//1.1 above	   
//1.3 below
 //		Inputs   = null;
//		Outputs  = null;
//1.3 above
	    return(CancelOperation);
    } catch(e) {
				
		bcAUCNumMstrQry        = null;
        bcAUCNumberMaster      = null;
		bcAUCNumMstrQry        = null;		
        bcEbc                  = null; 		
        boAUCRegistration      = null;
	//	throw(e);
    } finally {
		
		bcAUCNumMstrQry        = null;
		bcAUCNumberMaster      = null;
		bcAUCNumMstrQry        = null;		
        bcEbc                  = null; 
//1.1 below
		bcAUCSIMNumber         = null;
		bcCnct                 = null;
//1.1 above        
		boAUCRegistration      = null;	
    }
}
function RegisterBatch(&Inputs,&Outputs)
{
    var boAUC 	 = TheApplication().GetBusObject(""RMS AUC Registration"");
	var bcAUC 	 = boAUC.GetBusComp(""RMS AUC Registration Automation"");	
	var strSearchExp	=	"""";
	var blnIsRec		=	"""";

	try   
	{
		    with (bcAUC)
			{
				ActivateField(""Batch Id"");
				ActivateField(""Batch Status"");
				ClearToQuery();
				strSearchExp	=	""[Batch Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""HCPT_AUC_STATUS"",""COMPLETE"") + ""'""; 
				SetSearchExpr(strSearchExp);
				ExecuteQuery(ForwardOnly);
				blnIsRec = FirstRecord();				
			
				while(blnIsRec) 
				{
					SetFieldValue(""Batch Status"",TheApplication().InvokeMethod(""LookupValue"",""HCPT_AUC_STATUS"",""PROCESSING AUC""));
					WriteRecord();
					Inputs.SetProperty(""BatchNo"",GetFieldValue(""Batch Id""));
					ChangeStatus(Inputs, Outputs);
					SetFieldValue(""Batch Status"",TheApplication().InvokeMethod(""LookupValue"",""HCPT_AUC_STATUS"",""AUC COMPLETE""));
					WriteRecord();
					blnIsRec= NextRecord();
				}
			}
			return(CancelOperation);	
	}
	catch(e)
	{
		TheApplication().RaiseErrorText(e.errText);
	}
	finally
	{
			Inputs	= null;
			Outputs	= null;
			boAUC	= null;
			bcAUC	= null;

	}
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060627       | 1.1  | Prasad | SiebelES#51 removed unnecessary code in PreCanInvoke, code is pasted below
	if(MethodName == ""ChangeStatus"") 
	{
		CanInvoke = ""TRUE"";
		return(CancelOperation);
	} 
	else
		return (ContinueOperation);
-----------------------------------------------------------------------------------
*/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
if (MethodName == ""RegisterBatch"")
{
	RegisterBatch(Inputs, Outputs);
	return(CancelOperation);
}
else if (MethodName == ""ChangeStatus"") {
		//ChangeStatus(Inputs, Outputs);
		ChangeStatus(Inputs.GetProperty(""BatchNo""));
    return(CancelOperation);
	}
	else {
		return (ContinueOperation);
	}
}
"/***********************************************************************************************************
Date           | version| By        | Description of Change																		
-----------------------------------------------------------------------------------------------------------
20060727       1.0      | Kalyana   | Fuction  to  write new record   in RMS AUC Control Table EBC
20070722       1.1       |Kalyana   Added 3G Flg   
20080320		1.2 	|Ramakrishna | Added for New starterpack change
*/
function AddEntry(PreActBatchId,PackageType,Flg3G,PromotionCode,PackageName,PricePlanName)
{
var boAUCRegistration 	    = TheApplication().GetBusObject(""RMS AUC Registration"");
var bcControlEBC	        = boAUCRegistration.GetBusComp(""RMS AUC Control Table EBC"");
   with(bcControlEBC)
    {
        NewRecord(1);
		SetFieldValue(""Pre Act Batch Id"",PreActBatchId);
		SetFieldValue(""CRM Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_STATUS"",""Complete""));		
		//below 1.2
		SetFieldValue(""Clarity Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_STATUS"",""Pending""));		
		SetFieldValue(""Geneva Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_STATUS"",""Complete""));		
		SetFieldValue(""Batch Type"",""Pre Act"");		
		SetFieldValue(""Recent Pool Quantity"", ""0"");	
		SetFieldValue(""PackageName"",PackageName);
		SetFieldValue(""PricePlanName"",PricePlanName);
		SetFieldValue(""STCPackageType"",PackageType);
		//above 1.2
	    //below 1.1 
		SetFieldValue(""3G FLG"",Flg3G);
		//Above 1.1 
		//below 1.2
		SetFieldValue(""Promotion Code"",PromotionCode);
		//Above 1.2
		WriteRecord();
	}
     	bcControlEBC = null;
		boAUCRegistration = null;
}
function ExportBatch(BatchId)
{
		try
		{
			var boAUC	=	TheApplication().GetBusObject(""RMS AUC Registration"");
			var bcAuto	=	boAUC.GetBusComp(""RMS AUC Registration Automation"");
		    var strErrVal	=	"""";
		
			with(bcAuto)
		    {
		        NewRecord(1);
				SetFieldValue(""Batch Id"",BatchId);
				SetFieldValue(""Batch Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_STATUS"",""PENDING""));	
				SetFieldValue(""Batch Type"",""AUC"");		
				WriteRecord();
			}
		}
		catch(e)
		{
			strErrVal	=	e.errText;
//			strErrVal	+=	TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC010"");

			TheApplication().RaiseErrorText(strErrVal);
		}
		finally
		{
			bcAuto = null;
			boAUC = null;
		
			
		}
		return(strErrVal);

}
function ExtractIMSI(strConcatString,strConcatType)
{
	var arrIMSI 	= strConcatString.split ("" / "");
	var arrIMSIType	= strConcatType.split ("" / "");

	var bsSysPref	= TheApplication().GetService(""TECHM BS IF COMMON"");
	var psInp		= TheApplication().NewPropertySet();
	var psOut		= TheApplication().NewPropertySet();
	
	psInp.SetProperty(""RMS_IMSIL_SRCH_STR"","""");
	psInp.SetProperty(""RMS_IMSIR_SRCH_STR"","""");
	bsSysPref.InvokeMethod(""Get SysPref"",psInp,psOut);
	
	var strIMSIL	= psOut.GetProperty(""RMS_IMSIL_SRCH_STR"");
	var strIMSIR	= psOut.GetProperty(""RMS_IMSIR_SRCH_STR"");
	
	var iIMSIL		= 0;
	var iIMSIR		= 0;
	
	var strIMSIType		= """";
	var strIMSI			= """";
	
	for(var i = 0;i < getArrayLength(arrIMSIType);i++) {
		strIMSIType	= arrIMSIType[i];
		//strIMSI		= arrIMSI[i];
		
		if(strIMSIType.indexOf(strIMSIL) != -1) {
			iIMSIL++;
			if(strIMSI == """")
				strIMSI = arrIMSI[i];
			else
				strIMSI = strIMSI + ""/"" + arrIMSI[i];
		}
		if(strIMSIType.indexOf(strIMSIR) != -1) {
			iIMSIR++;
			if(strIMSI == """")
				strIMSI = arrIMSI[i];
			else
				strIMSI = strIMSI + ""/"" + arrIMSI[i];
		}
	}
	
	arrIMSI 	= null;
	arrIMSIType = null;
	
	if(strIMSIR == """") 
		iIMSIR = iIMSIL;
	
	if(iIMSIL == iIMSIR)
		return(strIMSI);
	else
		return(""FALSE"");
	
}
function GetSysPref(strPref)
{
	var bsSysPref	= TheApplication().GetService(""TECHM BS IF COMMON"");
	var psInp		= TheApplication().NewPropertySet();
	var psOut		= TheApplication().NewPropertySet();
	
	psInp.SetProperty(strPref,"""");
	
	bsSysPref.InvokeMethod(""Get SysPref"",psInp,psOut);
	
	return (psOut.GetProperty(strPref));

}
function PreActivateIMSI(&Inputs,&Outputs)
{
	var strSearchSpec = """";
	var strObjId = Inputs.GetProperty(""RowId"");
	var blnIsRecord = false; 
	var blnIsPprItm = false;
	var blnIsExported = false;
	var intCount = 0;
	var marrAssocStartId = new Array();
	var marrAssocStartId2 = new Array();
	var marrAssocStartId3 = new Array();
	var intReturn = ContinueOperation;
	var strErrVal = """";
	var strExportIMSI = """";
	var boAUCRegistration = TheApplication().GetBusObject(""RMS AUC Registration"");
	var bcAUCRegistration = boAUCRegistration.GetBusComp(""RMS AUC Registration"");
	var bcAUCPprItmNum = boAUCRegistration.GetBusComp(""RMS AUC Number Paper Item"");
	var bcAUCNumMstrQry = boAUCRegistration.GetBusComp(""RMS AUC Number Master Query"");
	var bcEbc = boAUCRegistration.GetBusComp(""RMS AUC IMSI  Pre Activation EBC"");
	var boSIMOrder = TheApplication().GetBusObject(""RMS SIM Order"");
	var bcSIMOrder = boSIMOrder.GetBusComp(""RMS SIM Order"");
	var bcCnct = boAUCRegistration.GetBusComp(""RMS NM Association Number Type Display"");
	var blnIsCnct = false;
	var bcSIMOrderLineNum = boAUCRegistration.GetBusComp(""RMS AUC SIM Number"");
	var bcAUCSIMNumber = boAUCRegistration.GetBusComp(""RMS AUC SIM Number"");
	var bcAucPreActivation =  boAUCRegistration.GetBusComp(""RMS AUC Pre Activation BC"");
	var blnIsSIMOrder = false;
	var blnIsSIMOrderLineNum = false;
	var strSearchExp = """";
	var PIN1temp = """";
	var PUK1temp = """";
	var PIN2temp = """";
	var PUK2temp = """";
	var POCtemp = """";
	var strPackageName	= """";
	var strPricePlanName	= """";
	var EndingNumber = """";
	var strIMSIRType = GetSysPref(""RMS_IMSIR_SRCH_ID"");
	marrAssocStartId[intCount] = marrAssocStartId2;
	marrAssocStartId[intCount][0] = marrAssocStartId3;
	try 
	{
		with(bcAUCRegistration) 
		{
			InvokeMethod(""SetAdminMode"",""TRUE"");
	        SetViewMode(AllView);
			WriteRecord();
			ActivateField(""Status"");
			ActivateField(""Action"");
			ActivateField(""Quantity"");
			ActivateField(""Id"");
			ActivateField(""MSISDN Start Number"");
			ActivateField(""Generated Number"");
			ActivateField(""Active Period"");
			ActivateField(""Balance"");
			ActivateField(""Expiry Date"");
			ActivateField(""Grace Period"");
			//ActivateField(""Package Name"");
			ActivateField(""Price Plan Name"");
			ActivateField(""Special Category Type"");
			ActivateField(""MSISDN End Number"");
			ClearToQuery();
			SetSearchSpec(""Id"",strObjId);
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();
			if(!blnIsRecord) 
			{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC005"");
				return(strErrVal);
			} 
			if(bcAUCRegistration.GetFieldValue(""Status"") == TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"",""COMPLETE""))
				blnIsExported = true;
	//	}
		with(bcAUCPprItmNum) 
		{
			ActivateField(""Paper Item Value"");
			ActivateField(""Order Line Number Detail Id"");
		}
        with(bcAUCNumMstrQry)
		{
			SetViewMode(AllView);
			ActivateField(""AUC Reg Id"");
			ActivateField(""Assoc Start Id"");
			ActivateField(""Status"");
			ActivateField(""Number Type Identifier Denorm"");
			ActivateField(""Number Without Delimiter"");  
			ActivateField(""PreActivation Id"");
			ActivateField(""Number"");
			ClearToQuery();
			if(blnIsExported) 
			{
				SetSearchSpec(""AUC Reg Id"",strObjId);
			} 
			else 
			{
				SetSearchSpec(""Number String"",bcAUCRegistration.GetFieldValue(""MSISDN Start Number""));
				SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));
				ExecuteQuery(ForwardOnly);
				blnIsRecord = FirstRecord();
				if(!blnIsRecord)
				{
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC007"");
					return(strErrVal);
				}
				if(blnIsRecord)
				{
					if(bcAUCNumMstrQry.GetFieldValue(""PreActivation Id"") !="""")
					{
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC007"");
					return(strErrVal);
					}
				}
				var MSISDNEndNumber = bcAUCRegistration.GetFieldValue(""MSISDN End Number"");
				if(MSISDNEndNumber != """")
				{
                ClearToQuery();
				SetSearchSpec(""Number String"",bcAUCRegistration.GetFieldValue(""MSISDN End Number""));
				SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));
				ExecuteQuery(ForwardOnly);
				blnIsRecord = FirstRecord();
			    if (blnIsRecord)
				{
				EndingNumber = GetFieldValue(""Number"");
				}
				}
				ClearToQuery();
				strSearchSpec = ""[Number Type Identifier Denorm] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"") + ""'"";
				strSearchSpec = strSearchSpec + "" AND [Number] >= '"" + bcAUCRegistration.GetFieldValue(""Generated Number"") + ""'"";
				if (EndingNumber != """")
				{
				strSearchSpec = strSearchSpec + "" AND [Number] <= '"" + EndingNumber + ""'"";
				}
                strSearchSpec = strSearchSpec + "" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE"") + ""'"";
				strSearchSpec = strSearchSpec + "" AND [Special Category Type] = '"" + bcAUCRegistration.GetFieldValue(""Special Category Type"") + ""'"";
				strSearchSpec = strSearchSpec + "" AND [PreActivation Id] IS NULL "";
				strSearchSpec = strSearchSpec + "" AND [Assoc Start Id] IS NOT NULL AND [Is Associated] = 'Y' "";				
				strSearchSpec = strSearchSpec + "" AND [Block Id] = '"" + bcAUCRegistration.GetFieldValue(""Block Id"") + ""' "";				
				SetSearchExpr(strSearchSpec);
			}
			ExecuteQuery(ForwardOnly);	
			blnIsRecord = FirstRecord();	
			while(blnIsRecord)
			{
				bcAUCPprItmNum.SetSearchSpec(""Assoc Start Id"",GetFieldValue(""Assoc Start Id""));
				bcAUCPprItmNum.ExecuteQuery(ForwardOnly);
				blnIsPprItm = bcAUCPprItmNum.FirstRecord();
				if(!blnIsPprItm)
				{
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC004"");
					return(strErrVal);
				}
				SetArray(marrAssocStartId,intCount,0 ,""?"",""?"",GetFieldValue(""Assoc Start Id"")); 
				if(blnIsPprItm) 
					SetArray(marrAssocStartId,intCount,1 ,""?"",""?"",bcAUCPprItmNum.GetFieldValue(""Paper Item Value"")); 
				else
					SetArray(marrAssocStartId,intCount,1 ,""?"",""?"","""");
				SetArray(marrAssocStartId,intCount,3 ,""?"",""?"",bcAUCPprItmNum.GetFieldValue(""Order Line Number Detail Id""));
				intCount = intCount + 1;
				if(intCount == bcAUCRegistration.GetFieldValue(""Quantity"")) 
					break;
				blnIsRecord = NextRecord();
				marrAssocStartId2 = new Array;
				marrAssocStartId[intCount] = marrAssocStartId2;
			}
			if(intCount < ToInteger(bcAUCRegistration.GetFieldValue(""Quantity"")))
			{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC003"",intCount);
				return(strErrVal);
			}
			for(var intCnt = 0; intCnt < intCount; intCnt++) 
			{
				if(!blnIsExported) 
				{
					with(bcAUCNumMstrQry) 
					{
						SetViewMode(AllView);
						ActivateField(""Status"");
						ActivateField(""AUC Reg Id"");
						ActivateField(""Number Type Identifier Denorm"");
						ActivateField(""Number String"");
						ActivateField(""Number String With Checksum"");
						ActivateField(""Type Id"");
						ClearToQuery();
						SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
						SetSearchSpec(""Number Type Identifier Denorm"",TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI""));
						ExecuteQuery(ForwardOnly);	
					}  // End  of with(bcAUCNumMstrQry)
					blnIsRecord = FirstRecord();
					if(blnIsRecord) 
					{
						with (bcAUCPprItmNum)
						{
							ActivateField(""Paper Item"");
							strSearchExp="""";
							strSearchExp = strSearchExp+""Assoc Start Id ='""+marrAssocStartId[intCnt][0]+""'"";
							//below 1.3
							strSearchExp  =     ""(""+strSearchExp +  "" AND "" + ""(Paper Item = '""+""PIN1'""+"" OR Paper Item ='""+""PUK1'""+"" OR Paper Item ='""+""PIN2'""+"" OR Paper Item ='""+""PUK2'))"";
							//above 1.3
							SetSearchExpr(strSearchExp);
							bcAUCPprItmNum.ExecuteQuery(ForwardOnly);	
							blnIsPprItm = bcAUCPprItmNum.FirstRecord();
						} // End  of  with (bcAUCPprItmNum)
					} // End of if if(blnIsRecord)
					while(blnIsPprItm)
					{
						if(bcAUCPprItmNum.GetFieldValue(""Paper Item"") == ""PIN1"")
						{
							PIN1temp = bcAUCPprItmNum.GetFieldValue(""Paper Item Value"");
							blnIsPprItm= bcAUCPprItmNum.NextRecord();
						}	
						if(bcAUCPprItmNum.GetFieldValue(""Paper Item"") == ""PUK1"")
						{
							PUK1temp = bcAUCPprItmNum.GetFieldValue(""Paper Item Value"");
							blnIsPprItm= bcAUCPprItmNum.NextRecord();
						}
						//below 1.3
						if(bcAUCPprItmNum.GetFieldValue(""Paper Item"") == ""PIN2"")
						{
							PIN2temp = bcAUCPprItmNum.GetFieldValue(""Paper Item Value"");
							blnIsPprItm= bcAUCPprItmNum.NextRecord();
						}	
						if(bcAUCPprItmNum.GetFieldValue(""Paper Item"") == ""PUK2"")
						{
							PUK2temp = bcAUCPprItmNum.GetFieldValue(""Paper Item Value"");
							blnIsPprItm= bcAUCPprItmNum.NextRecord();
						}	
						}
					with(bcSIMOrderLineNum)
					{
						SetViewMode(AllView);
						ActivateField(""Assoc Start Id"");
						ActivateField(""Order Id"");
						ClearToQuery();
						SetSearchSpec(""Assoc Start Id"",marrAssocStartId[intCnt][0]);
						bcSIMOrderLineNum.ExecuteQuery(ForwardOnly);
						blnIsSIMOrderLineNum = bcSIMOrderLineNum.FirstRecord();
					}  // end of  with 
					if(!blnIsSIMOrderLineNum)
					{//some code????
					}
					if (blnIsSIMOrderLineNum)
					{
						with (bcSIMOrder)
						{
							SetViewMode(AllView);
							ActivateField(""Transport Key"");
							ActivateField(""Id"");
							ClearToQuery();
							SetSearchSpec(""Id"",bcSIMOrderLineNum.GetFieldValue(""Order Id""));
							bcSIMOrder.ExecuteQuery(ForwardOnly);	
							blnIsSIMOrder= bcSIMOrder.FirstRecord();
							if(!blnIsSIMOrder)
							{//some code
							}					
							else
							{
								var Transkey = bcSIMOrder.GetFieldValue(""Transport Key"");
							}
						}//end  of   with
					} //  end  of  if 
					with(bcAUCNumMstrQry)
					{
						SetViewMode(AllView);
						ActivateField(""POC"");
						ClearToQuery();
						SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
						ExecuteQuery(ForwardOnly);
						blnIsRecord = FirstRecord();				
					} //  End  of with
					var ICCIDtemp 	= """";
					var IMSItemp	= """";
					var IMSIRtemp	= """";
					var MSISDNtemp	= """";
					while(blnIsRecord) 
					{
						var temp = bcAUCNumMstrQry.GetFieldValue(""Number Type Identifier Denorm"");
						if(temp == ""SIM"")
						{
							ICCIDtemp = bcAUCNumMstrQry.GetFieldValue(""Number String With Checksum"");//KT 26-06-2006
							blnIsRecord = NextRecord();
						}
						else if(temp == ""IMSI"")
						{
							if(bcAUCNumMstrQry.GetFieldValue(""Type Id"") == strIMSIRType) {
								if(IMSIRtemp == """") 
									IMSIRtemp = bcAUCNumMstrQry.GetFieldValue(""Number String"");
								else
									IMSIRtemp = IMSIRtemp + ""/"" + bcAUCNumMstrQry.GetFieldValue(""Number String"");
							} else {
								if(IMSItemp == """")
									IMSItemp = bcAUCNumMstrQry.GetFieldValue(""Number String"");
								else
									IMSItemp = IMSItemp + ""/"" + bcAUCNumMstrQry.GetFieldValue(""Number String"");
							}
							blnIsRecord = NextRecord();
						}
						else if(temp == ""MSISDN"")
						{
							MSISDNtemp = bcAUCNumMstrQry.GetFieldValue(""Number String"");
							POCtemp = bcAUCNumMstrQry.GetFieldValue(""POC"");
							blnIsRecord = NextRecord();
						}  //  END OF IF
					}  //  END  OF WHILE
					if (!blnIsRecord)
					{
						if(strPricePlanName == """")
							strPricePlanName = bcAUCRegistration.GetFieldValue(""Price Plan Name"");
						if(strPackageName == """")
							strPackageName	= bcAUCRegistration.GetFieldValue(""Package Name"");
						bcEbc.NewRecord(1);
						bcEbc.SetFieldValue(""IMSI"",IMSItemp);
						bcEbc.SetFieldValue(""SIM"",ICCIDtemp);
						bcEbc.SetFieldValue(""IMSIR"",IMSIRtemp);
						bcEbc.SetFieldValue(""MSISDN"",MSISDNtemp);
						bcEbc.SetFieldValue(""Ref Id"",bcAUCRegistration.GetFieldValue(""Id""));												
						bcEbc.SetFieldValue(""Batch No"",strObjId);	
						bcEbc.SetFieldValue(""Transport Key"",Transkey);
						//bcEbc.SetFieldValue(""Price Plan Name"",bcAUCRegistration.GetFieldValue(""Price Plan Name""));
						bcEbc.SetFieldValue(""Package Id"",bcAUCRegistration.GetFieldValue(""Package Name""));
						bcEbc.SetFieldValue(""Balance"",bcAUCRegistration.GetFieldValue(""Balance""));
						bcEbc.SetFieldValue(""Expiry Date"",bcAUCRegistration.GetFieldValue(""Expiry Date""));
						bcEbc.SetFieldValue(""Active Period"",bcAUCRegistration.GetFieldValue(""Active Period""));
						bcEbc.SetFieldValue(""Grace Period"",bcAUCRegistration.GetFieldValue(""Grace Period""));
						bcEbc.SetFieldValue(""PIN1"",PIN1temp);
						bcEbc.SetFieldValue(""PUK1"",PUK1temp);
						bcEbc.SetFieldValue(""PIN2"",PIN2temp);
						bcEbc.SetFieldValue(""PUK2"",PUK2temp);
						bcEbc.SetFieldValue(""Special Category"",bcAUCRegistration.GetFieldValue(""Special Category Type""));

						bcEbc.WriteRecord();
					}  // End  of !blnIsRecord
						// Updating  Number Status  to Pre-Activating  in Number Master
					
					with(bcAUCNumMstrQry) 
					{
						SetViewMode(AllView);
						ActivateField(""Number Type Identifier Denorm"");
						ClearToQuery();
						SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
						ExecuteQuery(ForwardOnly);
					}
					blnIsRecord = FirstRecord();
					while(blnIsRecord) 
					{
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""PRE-ACTIVATING""));
						SetFieldValue(""PreActivation Id"",strObjId);
						WriteRecord();				
						with(bcAucPreActivation)
						{
							ActivateField(""Auc Id"");
							ActivateField(""Number Id"");
							SetViewMode(AllView);
							ClearToQuery();
							if(bcAUCNumMstrQry.GetFieldValue(""Number Type Identifier Denorm"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"")){
								NewRecord(1);
								SetFieldValue(""Auc Id"",strObjId);
								SetFieldValue(""Number Id"",bcAUCNumMstrQry.GetFieldValue(""Id""));
								WriteRecord();
							}
						}
						blnIsRecord = NextRecord();
					}  
					with (bcCnct) 
					{
						SetViewMode(AllView);
						ActivateField(""Status"");
						ClearToQuery();
						SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
						ExecuteQuery(ForwardOnly);
						blnIsCnct = FirstRecord();
						while(blnIsCnct) 
						{
							SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""PRE-ACTIVATING""));
							WriteRecord();
							blnIsCnct = NextRecord();
						}	
					}
					with(bcAUCSIMNumber)
					{	
						SetViewMode(AllView);
						ActivateField(""Status"");
						ClearToQuery();
						SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
						ExecuteQuery(ForwardOnly);
						var blnIsSimNumber = FirstRecord();
						while(blnIsSimNumber)
						{
							SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""PRE-ACTIVATING""));
							WriteRecord();
							blnIsSimNumber = NextRecord();
						}
					}
				} // End  of  !blnIsExported
			}   // for loop
// END OF  EBC
			if(!blnIsExported) 
			{
				bcAUCRegistration.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"",""COMPLETE""));
				bcAUCRegistration.WriteRecord();
			}
		}
		if(strErrVal != """")
			Outputs.SetProperty(""ErrMessage"",strErrVal);

	InvokeMethod(""SetAdminMode"",""FALSE"");
	}//End of with
	}// end of try	
	catch(e)
	{
		if (strErrVal=="""") 
		{ 
			var vErr = e.toString();
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrMessage"",vErr);
		} 
		else 
		{
			Outputs.SetProperty(""ErrMessage"",strErrVal);
			Outputs.SetProperty(""ErrCode"",strErrVal);
		}
		return(strErrVal);
	}
	finally 
	{
		bcAUCNumMstrQry   	 = null;
		bcAUCPprItmNum		 = null;			           
		bcEbc                 = null;
		bcSIMOrder            = null;
		bcSIMOrderLineNum     = null;	
		bcCnct			     = null;
		bcAUCSIMNumber		 = null;
		bcAucPreActivation    = null;
		boSIMOrder            = null;	
		bcAUCRegistration     = null;					
		boAUCRegistration     = null;
		if(strErrVal != """")
		Outputs.SetProperty(""ErrMessage"",strErrVal);
		
		Outputs.SetProperty(""PackageName"",strPackageName);
		Outputs.SetProperty(""PricePlanName"",strPricePlanName);
	}	
	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS SIM Order QuerySubmittedBatches           * 
* Author        : Tech Mahindra                                            *
* Description   : This fucntion queries Submitted Starter Pack Batches and Exports batches aynchronously    .            *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 20070421  1.0       Kalyana     Created        
* **************************************************************************************/
function QuerySubmittedBatches(Inputs,Outputs)
{
 var ProcessingRecCount= 0;
    var MaxProcessingBatches =0;
 var RowId;
 var strErrVal = """"; 
 var blnIsRecord = false;
 var strSearchExp = """";
 var boAUCRegistration      = TheApplication().GetBusObject(""RMS AUC Registration"");
 var bcAUCRegistration     	= boAUCRegistration.GetBusComp(""RMS AUC Registration"");
 var boSystemPref    		= TheApplication().GetBusObject(""System Preferences"");   
 var bcSystemPref    		= boSystemPref.GetBusComp(""System Preferences"");
 var psInput     			= TheApplication().NewPropertySet();
 var psOutput				= TheApplication().NewPropertySet();
 try 
 {
 with(bcSystemPref)
 {
	 ActivateField(""Value"");
	 ClearToQuery();
	 SetSearchSpec(""Name"",""RMS_AUC_SP_MAX_BATCHES"");
	 ExecuteQuery(ForwardOnly);
 }
 if(bcSystemPref.FirstRecord())
 {
 	MaxProcessingBatches = bcSystemPref.GetFieldValue(""Value"");
 } 
 with(bcAUCRegistration)
 {
	DeactivateFields();
	ActivateField(""Status"");
	ClearToQuery();
	strSearchExp  = strSearchExp + ""[Action] = '""+TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_ACTION"", ""PRE-ACTIVATE"")+""'"";
	strSearchExp  = strSearchExp + "" AND [Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"")+""'"";
	SetSearchExpr(strSearchExp);
	ExecuteQuery(ForwardOnly);
	blnIsRecord = FirstRecord();
 }
   /* while(blnIsRecord)
    {
    	ProcessingRecCount = ProcessingRecCount+1;
 		blnIsRecord = bcAUCRegistration.NextRecord();
 	} */
 	ProcessingRecCount = bcAUCRegistration.CountRecords();
 	
	 if (ProcessingRecCount >= MaxProcessingBatches)
	 {
	 	return(strErrVal);
	 }
	 else
	 {
		 with(bcAUCRegistration)
		 {
			 //InvokeMethod(""SetAdminMode"",""TRUE"");
			 //SetViewMode(AllView);
			 ActivateField(""Status"");
			 ClearToQuery();
			 strSearchExp = """";
			 strSearchExp= strSearchExp + ""[Action] = '""+TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_ACTION"", ""PRE-ACTIVATE"")+""'"";
			 strSearchExp = strSearchExp + "" AND [Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""SUBMITTED"")+""'"";
			 SetSearchExpr(strSearchExp);
			 ExecuteQuery(ForwardOnly);
			 blnIsRecord = FirstRecord();
			 while(blnIsRecord)
			 {
				 RowId = GetFieldValue(""Id"");
				 //SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
				 //WriteRecord();
				 //Calling Asnchronous WFP 
				 /*var svc = TheApplication().GetService( ""Server Requests"" );
				 var compin = TheApplication().NewPropertySet();
				 Inputs.SetProperty(""Component"", ""WfProcMgr"");
				 Inputs.SetProperty(""Mode"", ""DirectDb"");
				 Inputs.SetProperty(""Method"", ""RunProcess"");
				 //compin.SetProperty(""RowId"",RowId);
				 compin.SetProperty(""ProcessName"", ""RMS AUC Pre-Activation Export Batch"");
				 compin.SetProperty(""WfProcMgr.RowId"",RowId);
				 compin.SetProperty(""RMSAUCPreActiavtionSync"",""N"");
				 Inputs.AddChild(compin);
				 svc.InvokeMethod(""SubmitRequest"",Inputs,Outputs);
				 compin= null;
				 svc   = null;*/
				 
				 var svc	= TheApplication().GetService(""Workflow Process Manager"");
				
				 psInput.SetProperty(""Object Id"",RowId);
				 psInput.SetProperty(""RowId"",RowId);
			
				 psInput.SetProperty(""ProcessName"",""RMS AUC Pre-Activation Export Batch Main"");
				 svc.InvokeMethod(""RunProcess"",psInput,psOutput);
				 
				 //End of WFP Call
				 ProcessingRecCount = ProcessingRecCount+1;
				 if(ProcessingRecCount==MaxProcessingBatches)
				 	break;
				 blnIsRecord= bcAUCRegistration.NextRecord();
				 psInput.Reset();
				 psOutput.Reset();
			 }
		 //InvokeMethod(""SetAdminMode"",""FALSE"");
	 	}//End of with(bcAUCRegistration)
	 } //End of else
 }//end of try
 
    catch(e)
	 {
		 var vErr = e.toString();
		 var vErrText = e.errText;
		 var vErrCode = e.errCode;
		 var vObjId = e.errCode;
		 var vObjName = ""RMS AUC Registration"";
		 var vFunc = ""QuerySubmittedBatches"";
		 var vObjType = ""Business Service"";
		 Outputs.SetProperty(""Error Code"",vErrCode);
		 Outputs.SetProperty(""Error Message"",vErrText);
		 TheApplication().log_exception(""Exception"",vErr,vErrCode,vObjId,vObjName,vFunc,vObjType);
	 }
	 finally 
	 {
		 bcAUCRegistration     = null;     
		 boAUCRegistration     = null;
		 bcSystemPref          = null;
		 boSystemPref          = null;
		 psInput			   = null;
		 psOutput			   = null;
	 } 
 return(strErrVal);
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
---------------+------+--------+----------------------------------------------
*/
function ReadOrderFile(&marrOrdCnct,&marrInputValues,&marrSIMIMSI,&marrNumTypes,&mpsPprId,&marrError,msFileName,msFilePath)
{
	
	var boNMNumberEnquiry = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNMNumberEnquiryForUpdate = boNMNumberEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	
	var boRMSSIMOrder = TheApplication().GetBusObject(""RMS SIM Order""); 
	var bcSIMOrderLineNumInfoforUpdate = boRMSSIMOrder.GetBusComp(""RMS SIM Order Line Num Info for Update"");
	
	var boAUCRegistration = TheApplication().GetBusObject(""RMS AUC Registration"");
	var bcAUCNumberPaperItem = boAUCRegistration.GetBusComp(""RMS AUC Number Paper Item"");
	
	var msInputString 	= """";
	var msTempString 	= """";
	var msTemp			= """";
	var msFile 			= msFileName;
	var mbError			= false;
	var miCnt 			= 0;
	var count			= 0;
	var marrOrdCnct 	= new Array();
	var marrTemp		= new Array();
	var blnIsRecord		= false;
	var strErrVal 		= """";
	
	try	{

	var mfpInputFile 	= Clib.fopen(msFile,""r"");
	while (msInputString != null) 
	{
		msInputString = Clib.fgets(mfpInputFile);

		if(msInputString == null) continue;
			var temp = msInputString.indexOf("";"");
            msInputString = msInputString.substring(0,msInputString.indexOf("";""));
	
		if(msInputString == """") continue;

//		if(Clib.isalpha(msInputString.charAt(0))) {
		
			var StrIMSI = msInputString.substring((msInputString.indexOf("",""))+1,msInputString.indexOf("":KI""));
			var StrKI	 = msInputString.substring((msInputString.indexOf(""KI,""))+3,msInputString.indexOf("":AD""));
			var StrAD   = msInputString.substring((msInputString.indexOf(""AD,""))+3,msInputString.indexOf("":ADKEY""));
			var StrADKEY = msInputString.substring((msInputString.indexOf(""ADKEY,""))+6,msInputString.indexOf("":FSETIND""));
			var StrFSETIND  = msInputString.substring(temp-1,temp);
//		}
		
		with(bcNMNumberEnquiryForUpdate)
		{
			SetViewMode(3);
			ActivateField(""Number String"");
			ActivateField(""Assoc Start Id"")
			ClearToQuery();
			SetSearchSpec(""Number String"",StrIMSI);
			ExecuteQuery();
			var StrNum = bcNMNumberEnquiryForUpdate.GetFieldValue(""Number String"");			
		if (FirstRecord())
		{
			var StrStatus = bcNMNumberEnquiryForUpdate.GetFieldValue(""Status"");		
		}	

		if( StrStatus == TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""UNREGISTERED""))
            var AssStId = bcNMNumberEnquiryForUpdate.GetFieldValue(""Assoc Start Id"");	
		else
	    	{	 
	      		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC006"");
	      		TheApplication().RaiseErrorText(strErrVal);	  
	     	} 
	    }	  

		with(bcSIMOrderLineNumInfoforUpdate)
		{
			SetViewMode(3);
			ActivateField(""SIM Id"");
			ActivateField(""Id"");
			ClearToQuery();
		    SetSearchSpec(""SIM Id"",AssStId);
			ExecuteQuery();
			var SIMId  = bcSIMOrderLineNumInfoforUpdate.GetFieldValue(""SIM Id"");
			
			if (FirstRecord())
			{
			    var StrId = bcSIMOrderLineNumInfoforUpdate.GetFieldValue(""Id"");
			}    
	  	 } // End of ( bcSIMOrderLineNumInfoforUpdate )
	  	 		
		with(bcAUCNumberPaperItem)
		{
		//Commented [RK][27/06/2006]
			//ActivateField(""Order Line Number Detail Id"");
			//ActivateField(""AUC_KI"");
			//ActivateField(""AUC_AD"");
			//ActivateField(""AUC_ADKEY"");
			//ActivateField(""AUC_FSETIND"");
		//Commented [RK][27/06/2006]
			NewRecord(1);
			SetFieldValue(""Order Line Number Detail Id"",StrId);
			SetFieldValue(""AUC_KI"",StrKI);
			SetFieldValue(""AUC_AD"",StrAD);
			SetFieldValue(""AUC_ADKEY"",StrADKEY);
			SetFieldValue(""AUC_FSETIND"",StrFSETIND);
			WriteRecord();
		} // End of ( bcAUCNumberPaperItem )
		
		with(bcNMNumberEnquiryForUpdate)
		{
		  	SetViewMode(AllView);
			ActivateField(""Status"");
			ActivateField(""Assoc Start Id"");
			ClearToQuery();
	
			SetSearchSpec(""Assoc Start Id"",SIMId);
			ExecuteQuery();

			var AssCId  = bcNMNumberEnquiryForUpdate.GetFieldValue(""Assoc Start Id"");
			
			blnIsRecord = FirstRecord();
			while(blnIsRecord)
    		{
		       SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));
		       WriteRecord();
		       bnIsRecord = bcNMNumberEnquiryForUpdate.NextRecord();
			}  
		} // End of ( bcNMNumberEnquiryForUpdate )
	}// End of ( bcNMNumberEnquiryForUpdate )
}
catch(e) 
	{
		marrTemp = null;
		mbError 	= true;
		throw(e);
	} 
	
	finally 
	{
//1.1 below
		bcAUCNumberPaperItem = null;
		bcNMNumberEnquiryForUpdate = null;
		bcSIMOrderLineNumInfoforUpdate = null;
		boAUCRegistration = null;
		boNMNumberEnquiry = null;
		boRMSSIMOrder = null;
//1.1 above
		if (mfpInputFile != null)
			Clib.fclose(mfpInputFile);		
	}
	
	if(mbError)
		return(!mbError);
//	else
//		return(ValidateOrder(marrInputValues,marrSIMIMSI,marrNumTypes,marrOrdCnct,mpsPprId,marrError,mbError));
}
"/**************************************************************************************
* Name          : RMS NM Association Rule Service PreInvoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : funtion for refreshing BC data.                            		  *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0    MBT		 Created      01/12/2003      *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
                                 This function should be actually deleted/defunc.
**************************************************************************************/
function RefreshingBc()
{
	var psrInputs;
	var psrOutputs;
	var bsSIMNMRef;
	
	psrInputs = TheApplication().NewPropertySet();
	psrOutputs = TheApplication().NewPropertySet();
	
	bsSIMNMRef = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
										
	psrInputs.SetProperty(""Business Component Name"",""RMS AUC Registration"");
	psrInputs.SetProperty(""Business Object Name"",""RMS AUC Registration"");
	bsSIMNMRef.InvokeMethod(""Refresh Business Component"",psrInputs,psrOutputs);
	
	psrInputs 	= null;
	psrOutputs 	= null;
//1.1 below
	bsSIMNMRef = null;
//1.1 above
}
"/***************************************************************************
Date(DD/MM/YYYY)	| By		| Description of Change																		
----------------------------------------------------------------------------
05/01/2004			| MBT_MS	| Creation
--------------------------------------------------------------------------*/
/*---------------+------+--------+------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+--------------------------------------------
20060518       | 1.0  | TM     | Creation
20060621       | 1.1  | Garima | SiebelES#21 Use of return() in finally{}
								  SiebelES#19 Release of Object variables
20060706       | 1.2  | Prasad | Siebel ES SCR1, Objects Destroyed, unreferenced objects commented
29072006       | 1.3  | Kalyana| Changed cursor mode from ExecuteQuery()  to ExecuteQuery(ForwardOnly) to export more
								than 10,000 numbers in  one batch
20090205	   | 1.4  | Ashu   | If flag true, directly updating the Status to AVAILABLE instead of REGISTERING.	
---------------+------+--------+--------------------------------------------
*/
function RegisterIMSI(&Inputs,&Outputs)
{
      var strObjId = Inputs.GetProperty(""RowId"");
	  var blnIsRecord = false; 
	  var blnIsPprItm = false;
	  var blnIsExported = false;
	  var strFromStatus = TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""UNREGISTERED""); 
      var strToStatus = TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE"");
	  var intCount = 0;
	  var marrAssocStartId = new Array();
	  var marrAssocStartId2 = new Array();
	  var marrAssocStartId3 = new Array();
 	  var intReturn = ContinueOperation;
  //  var strPprItm = """";
	  var strErrVal = """";
	  var strExportIMSI = """";
//1.2 below UNUSED
/*
	  var prsInputs = TheApplication().NewPropertySet();
	  var prsOutputs = TheApplication().NewPropertySet();
	  var psFileContent = TheApplication().NewPropertySet();
*/
//1.2 above
	  var boAUCRegistration = TheApplication().GetBusObject(""RMS AUC Registration"");
	  var bcAUCRegistration = boAUCRegistration.GetBusComp(""RMS AUC Registration"");
//    var bcAUCNumberMaster = boAUCRegistration.GetBusComp(""RMS AUC Number Master"");	
//	  var bcAUCNumberCnct = boAUCRegistration.GetBusComp(""RMS NM Association Number Type Display"");
	  var bcAUCPprItmNum = boAUCRegistration.GetBusComp(""RMS AUC Number Paper Item"");
	  var bcAUCNumMstrQry = boAUCRegistration.GetBusComp(""RMS AUC Number Master Query"");
	  var bcAUCSIMNumber = boAUCRegistration.GetBusComp(""RMS AUC SIM Number"");
//	  var bsUpdateBlock = TheApplication().GetService(""RMS RMS Block Calc"");
	  var bcEbc = boAUCRegistration.GetBusComp(""RMS AUC EBC""); // KT 27-04-06
	  var boSIMOrder = TheApplication().GetBusObject(""RMS SIM Order"");
      var bcSIMOrder = boSIMOrder.GetBusComp(""RMS SIM Order"");
//	  var bcSIMOrderLine = boSIMOrder.GetBusComp(""RMS SIM Order Line"");
//    var bcSIMOrderLineNumInfo = boSIMOrder.GetBusComp(""RMS SIM Order Line Num Info"");
	  var blnIsSIMOrderLineNumInfo = false;
	  var bcSIMOrderLineNum = boAUCRegistration.GetBusComp(""RMS AUC SIM Number"");
	  var bcAucPreActivation =  boAUCRegistration.GetBusComp(""RMS AUC Pre Activation BC"");
	  var bcCnct = boAUCRegistration.GetBusComp(""RMS NM Association Number Type Display"");
	  var blnIsCnct = false;
//    var blnIsSIMOrderLine = false;
	  var blnIsSIMOrder = false;
//	  var blnIsEBc = false;
	  var strSearchExpr = """";
      var KItemp = """";
      var vByPassClarity = ""N"";
	  marrAssocStartId[intCount] = marrAssocStartId2;
	  marrAssocStartId[intCount][0] = marrAssocStartId3;
	  try
	  {
		with(bcAUCRegistration) 
        {
			    WriteRecord();
			    ActivateField(""Status"");
			    ActivateField(""Action"");
			    ActivateField(""Quantity"");
			    ActivateField(""Id"");
//---------GB 26-09-2006---------
				ActivateField(""Target HLR"");

				// ActivateField(""File Name and Path"");  KT 25-04-2006
			    //ActivateField(""IMSI Number"");  
                //ActivateField(""SIM Number"");
				ActivateField(""IMSI Start Number"");
				ActivateField(""Inconsider Clarity Response"");
				ClearToQuery();
			    SetSearchSpec(""Id"",strObjId);
			    //ExecuteQuery();
				ExecuteQuery(ForwardOnly);
			    blnIsRecord = FirstRecord();
			    if(!blnIsRecord) 
                {
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC005"");
					TheApplication().RaiseErrorText(strErrVal);
                }
                else{
                vByPassClarity = GetFieldValue(""Inconsider Clarity Response""); }
				if(bcAUCRegistration.GetFieldValue(""Status"") == TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"",""COMPLETE""))
					blnIsExported = true;

        }
		
		with(bcAUCPprItmNum) 
		{
			ActivateField(""Paper Item Value"");
			ActivateField(""Order Line Number Detail Id"");
			SetSearchSpec(""Paper Item"",""KI"");  
		}
		
		with(bcAUCSIMNumber)
        {
			ActivateField(""Status"");
			ActivateField(""Status Date"");
			ActivateField(""Current Date"");
		}

        with(bcAUCNumMstrQry)
        {
			SetViewMode(AllView);
			ActivateField(""AUC Reg Id"");
			ActivateField(""Assoc Start Id"");
			ActivateField(""Status"");
			//ActivateField(""Type Identifier"");
			ActivateField(""Number Without Delimiter"");  
			//KT20070905
			ActivateField(""Generated Number"");
			ActivateField(""Status Date"");
			ActivateField(""Current Date"");
			ClearToQuery();
			if(blnIsExported) 
			{
				SetSearchSpec(""AUC Reg Id"",strObjId);
			}
			else 
			{
			    //Code  to  test selected Start number is of Status ""UnRegistered"" or not if export of numbers is pending for long time
			    SetSearchSpec(""Number Without Delimiter"",bcAUCRegistration.GetFieldValue(""IMSI Start Number""));
			    SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""UNREGISTERED""));
			    //below 1.3
			    //ExecuteQuery();
			    ExecuteQuery(ForwardOnly);
			    //above 1.3
				blnIsRecord = FirstRecord();
				if(!blnIsRecord)
				{
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC006"");
			        TheApplication().RaiseErrorText(strErrVal);
				}
			   ClearToQuery();
			   //SetSearchSpec(""Number Type Identifier Denorm"",TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""));
			   SetSearchSpec(""Number Type Identifier Denorm"",TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI""));	
			   SetSearchSpec(""Block Id"",bcAUCRegistration.GetFieldValue(""Block Id""));	
			   SetSearchSpec(""Is Associated"",""Y"");	
			   //SetSearchSpec(""Number Without Delimiter"", "" >= '"" + bcAUCRegistration.GetFieldValue(""IMSI Start Number"") + ""'"");
			   SetSearchSpec(""Number"", "" >= '"" + bcAUCRegistration.GetFieldValue(""Generated Number"") + ""'"");
			   SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""UNREGISTERED"")); 
			}
			//below 1.3
			//ExecuteQuery();
			ExecuteQuery(ForwardOnly);
			//above 1.3 
			blnIsRecord = FirstRecord();	
			
			while(blnIsRecord)
            {	
			    bcAUCPprItmNum.SetSearchSpec(""Assoc Start Id"",GetFieldValue(""Assoc Start Id""));
				//bcAUCPprItmNum.ExecuteQuery();
				bcAUCPprItmNum.ExecuteQuery(ForwardOnly);
				blnIsPprItm = bcAUCPprItmNum.FirstRecord();
				if(!blnIsPprItm)
				{
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC004"");
					TheApplication().RaiseErrorText(strErrVal);
				}
				//marrAssocStartId[intCount][0] = GetFieldValue(""Assoc Start Id""); KT 24-04-2006
				SetArray(marrAssocStartId,intCount,0 ,""?"",""?"",GetFieldValue(""Assoc Start Id"")); 
				if(blnIsPprItm) 
				//	marrAssocStartId[intCount][1] = bcAUCPprItmNum.GetFieldValue(""Paper Item Value"");KT 24-04-2006
				 	SetArray(marrAssocStartId,intCount,1 ,""?"",""?"",bcAUCPprItmNum.GetFieldValue(""Paper Item Value"")); 
				else
					SetArray(marrAssocStartId,intCount,1 ,""?"",""?"","""");
				SetArray(marrAssocStartId,intCount,3 ,""?"",""?"",bcAUCPprItmNum.GetFieldValue(""Order Line Number Detail Id""));
                //SetArray(marrAssocStartId,intCount++,2 ,""?"",""?"",bcAUCPprItmNum.GetFieldValue(""Number Without Delimiter""));
				intCount = intCount + 1;
                if(intCount == bcAUCRegistration.GetFieldValue(""Quantity"")) 
					break;
				blnIsRecord = NextRecord(); 
				marrAssocStartId[intCount] = marrAssocStartId2;	
			}
 		   if(intCount < ToInteger(bcAUCRegistration.GetFieldValue(""Quantity"")))
	 		{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC003"",intCount);
			    TheApplication().RaiseErrorText(strErrVal);
			}
 			// code for EBC
			for(var intCnt = 0; intCnt < intCount; intCnt++) 
			{
		 		if(!blnIsExported) 
				{
					with(bcAUCNumMstrQry) 
					{
						SetViewMode(AllView);
						ActivateField(""Status"");
						ActivateField(""AUC Reg Id"");
						ActivateField(""Block Id"");
						ActivateField(""Number Type Identifier Denorm"");
						ActivateField(""Number String"");
						ClearToQuery();
						SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
						//SetSearchSpec(""Type Identifier"", ""<> '"" + ""MSISDN"" + ""'"");
	 					//blnIsRecord = bcAUCNumMstrQry.FirstRecord();
						//SetSearchSpec(""Type Identifier"",""<>'""+TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")+""'"");
						SetSearchSpec(""Number Type Identifier Denorm"",TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI""));
						//ExecuteQuery();
						ExecuteQuery(ForwardOnly);
						blnIsRecord = FirstRecord();
					}
					//ms:03Nov09 blnIsRecord = FirstRecord();
					//ms:03Nov09 changed while to if as there would be multiple IMSI while(blnIsRecord) {
					if(blnIsRecord) {
						with (bcAUCPprItmNum)
						{
							bcAUCPprItmNum.SetSearchSpec(""Assoc Start Id"",marrAssocStartId[intCnt][0]);
							bcAUCPprItmNum.ExecuteQuery(ForwardOnly);
						    blnIsPprItm = bcAUCPprItmNum.FirstRecord();
					    }
					   if(!blnIsPprItm)
					   {
							strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC004"");
							TheApplication().RaiseErrorText(strErrVal);
					    }
					   else
	                  	KItemp = bcAUCPprItmNum.GetFieldValue(""Paper Item Value"");
						//  code for transport key
	                    with(bcSIMOrderLineNum)
						{
							SetViewMode(AllView);
							ActivateField(""Assoc Start Id"");
							ActivateField(""Order Id"");
							ActivateField(""Concatenated Number"");
							ActivateField(""Concatenated Type"");
							ClearToQuery();
							SetSearchSpec(""Assoc Start Id"",marrAssocStartId[intCnt][0]);
							 bcSIMOrderLineNum.ExecuteQuery(ForwardOnly);
						    blnIsSIMOrderLineNumInfo = bcSIMOrderLineNum.FirstRecord();
						}
						if(!blnIsSIMOrderLineNumInfo)
						{
						 //some code
						}
						if (blnIsSIMOrderLineNumInfo)
						{
		                    with (bcSIMOrder)
							{
								SetViewMode(AllView);
								ActivateField(""Transport Key"");
								ActivateField(""Id"");
								ClearToQuery();
			                    SetSearchSpec(""Id"",bcSIMOrderLineNum.GetFieldValue(""Order Id""));
								bcSIMOrder.ExecuteQuery(ForwardOnly);
								blnIsSIMOrder= bcSIMOrder.FirstRecord();
								if(!blnIsSIMOrder)
								{
								 //some code
								}					
								else
								{
									var Transkey = bcSIMOrder.GetFieldValue(""Transport Key"");
								}
							}
	                    }
						if (blnIsRecord)
						{
							strExportIMSI 	= ExtractIMSI(bcSIMOrderLineNum.GetFieldValue(""Concatenated Number""),bcSIMOrderLineNum.GetFieldValue(""Concatenated Type""));
							
				
							bcEbc.NewRecord(1);
						   	bcEbc.SetFieldValue(""IMSI"",strExportIMSI);												
							bcEbc.SetFieldValue(""Batch No"",strObjId);	
						    bcEbc.SetFieldValue(""KI"",KItemp);
							bcEbc.SetFieldValue(""Transport Key"",Transkey);
							bcEbc.SetFieldValue(""Request Id"",marrAssocStartId[intCnt][0]);
							bcEbc.WriteRecord();
							bcAUCNumMstrQry.WriteRecord();
							blnIsRecord = NextRecord();
						}
				     }	
				    with(bcAUCNumMstrQry) {
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
						ExecuteQuery(ForwardOnly);
                    }
					blnIsRecord = FirstRecord();
					while(blnIsRecord) {
/* 1.4 */			if(vByPassClarity != ""Y""){
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""REGISTERING""));}
					else{
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));}	/* 1.4 */
					SetFieldValue(""AUC Reg Id"",strObjId);
					WriteRecord();				
					with(bcAucPreActivation)
					{
					ActivateField(""Auc Id"");
					ActivateField(""Number Id"");
					SetViewMode(AllView);
					ClearToQuery();
					NewRecord(1);
					SetFieldValue(""Auc Id"",strObjId);
					SetFieldValue(""Number Id"",bcAUCNumMstrQry.GetFieldValue(""Id""));
					WriteRecord();
					}
					blnIsRecord = NextRecord();
				    }  
                    with (bcCnct) {
					SetViewMode(AllView);
					ActivateField(""Status"");
					ClearToQuery();
					SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
					ExecuteQuery(ForwardOnly);
					blnIsCnct = FirstRecord();
					while(blnIsCnct) {
/* 1.4 */			if(vByPassClarity != ""Y""){
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""REGISTERING""));}
					else{
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));}	/* 1.4 */
						WriteRecord();
					blnIsCnct = NextRecord();
					}	
					}
					with(bcAUCSIMNumber){	
					SetViewMode(AllView);
					ActivateField(""Status"");
					ClearToQuery();
					SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
					ExecuteQuery(ForwardOnly);
					var blnIsSimNumber = FirstRecord();
					while(blnIsSimNumber)
					{
/* 1.4 */			if(vByPassClarity != ""Y""){
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""REGISTERING""));}
					else{
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));}	/* 1.4 */
						WriteRecord();
					blnIsSimNumber = NextRecord();
					}
					}
					}
  				    }
        if(!blnIsExported) {
			bcAUCRegistration.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"",""COMPLETE""));
			bcAUCRegistration.WriteRecord();
        	}
            }
		    if(strErrVal != """")
			Outputs.SetProperty(""ErrMessage"",strErrVal);
		    }
        catch(e)
        {
			
		bcAUCNumMstrQry      = null;
		//bcAUCNumberCnct	 = null;
		bcAUCPprItmNum		 = null;	
		boAUCRegistration    = null;	
		//Clib.fclose(fp);
		
		if (strErrVal=="""") {
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrMessage"",e.errText);
		} else {
			Outputs.SetProperty(""ErrMessage"",strErrVal);
			Outputs.SetProperty(""ErrCode"",strErrVal);
		}
		
		throw(e);
		return(strErrVal);
		
	}
finally {
		
		bcAUCNumMstrQry   	= null;
//		bcAUCNumberCnct	 	= null;
		bcAUCPprItmNum		= null;
		bcAUCRegistration	= null;
		bcAUCSIMNumber		= null;
		bcEbc				= null;
		bcSIMOrder			= null;
		bcSIMOrderLineNum   = null;
		bcAucPreActivation	= null;
		bcCnct				= null;
		boAUCRegistration   = null;
		boSIMOrder			= null;

		//Outputs.AddChild(psFileContent);
		//Outputs.SetProperty(""ErrCode"",strErrVal);
		if(strErrVal != """")
		Outputs.SetProperty(""ErrMessage"",strErrVal);
      }
      return(strErrVal);
	  }
"/**********************************************************************************************************
Purpose 		: Function for exporting unregistered IMSI and KI numbers for AUC registration 
Author 			: MBT_MS
Date 			: 05-Jan-2004
Input			: Input Property set includes, File Name and Path, AUC Registration record id
				: Starting IMSI number
Outputs		 	: Output property set contianing the err message
Change Log		: Changes made to the function
***********************************************************************************************************
Date(DD/MM/YYYY)	| By		| Description of Change																		
-----------------------------------------------------------------------------------------------------------
05/01/2004			| MBT_MS	| Creation
----------------------------------------------------------------------------------------------------------*/
/*
function RegisterIMSI_Old(&Inputs)
{
	
	
	var strObjId 				= Inputs.GetProperty(""RowId"");
	//var strActionType 		= Inputs.GetProperty(""Action"");
	//var strFilePathName 		= Inputs.GetProperty(""FilePathName"");
			
	var fp;
	
	var blnIsRecord			= false; 
	var blnIsPprItm			= false;
	var blnIsExported		= false;
	
	var strFromStatus		= TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""UNREGISTERED"")
	var strToStatus			= TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE"")
	
	var intCount 			= 0;
	var marrAssocStartId	= new Array();
	var intReturn 			= ContinueOperation;
	//var strPprItm			= """";
	var strErrVal 			= """";
	
	var prsInputs			= TheApplication().NewPropertySet();
	var prsOutputs			= TheApplication().NewPropertySet();
	
	var boAUCRegistration 	= TheApplication().GetBusObject(""RMS AUC Registration"");
	var bcAUCRegistration	= boAUCRegistration.GetBusComp(""RMS AUC Registration"");
	//var bcAUCNumberMaster = boAUCRegistration.GetBusComp(""RMS AUC Number Master"");	
	var bcAUCNumberCnct		= boAUCRegistration.GetBusComp(""RMS NM Association Number Type Display"");
	var bcAUCPprItmNum		= boAUCRegistration.GetBusComp(""RMS AUC Number Paper Item"");
	var bcAUCNumMstrQry   	 = boAUCRegistration.GetBusComp(""RMS AUC Number Master Query"");
	var bcAUCSIMNumber		= boAUCRegistration.GetBusComp(""RMS AUC SIM Number"");
	
	var bsUpdateBlock		= TheApplication().GetService(""RMS NM Block Calc"");
	
	try{
				
		with(bcAUCRegistration) {
			ActivateField(""Status"");
			ActivateField(""Action"");
			ActivateField(""Quantity"");
			ActivateField(""File Name and Path"");
			ActivateField(""IMSI Number"");
			ClearToQuery();
			SetSearchSpec(""Id"",strObjId);
			ExecuteQuery()
			
			blnIsRecord = FirstRecord();
			if(!blnIsRecord) return false;
			if(bcAUCRegistration.GetFieldValue(""Status"") == TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"",""COMPLETE""))
				blnIsExported = true;
		}
		
		fp=Clib.fopen(bcAUCRegistration.GetFieldValue(""File Name and Path""),""wt"");

		if(fp==null) 
		{
			fp = Clib.fopen(bcAUCRegistration.GetFieldValue(""File Name and Path""),""a"");
			if(fp==null)
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC001"");
				TheApplication().RaiseErrorText(""RETURN"");
		}

		with(bcAUCPprItmNum) 
		{
			ActivateField(""Paper Item Value"");
			ActivateField(""Order Line Number Detail Id"");
			SetSearchSpec(""Paper Item"",""KI"");
		}
		
		with(bcAUCSIMNumber) 
		{
			ActivateField(""Status"");
		}
		
		
		with(bcAUCNumMstrQry)
		{
			SetViewMode(AllView);
			ActivateField(""AUC Reg Id"");
			ActivateField(""Assoc Start Id"");
			ActivateField(""Status"");
			ActivateField(""Type Identifier"");
			ActivateField(""Number Without Delimiter"");
			ClearToQuery();
			if(blnIsExported) 
			{
				SetSearchSpec(""AUC Reg Id"",strObjId);
			}
			else 
			{
				SetSearchSpec(""Type Identifier"",""IMSI"");
				SetSearchSpec(""Number Without Delimiter"", "" >= '"" + bcAUCRegistration.GetFieldValue(""IMSI Number"") + ""'"");
				SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""UNREGISTERED""));
			}
			ExecuteQuery();
					
			blnIsRecord = FirstRecord();	
			
			while(blnIsRecord)
			{	
				
				bcAUCPprItmNum.SetSearchSpec(""Assoc Start Id"",GetFieldValue(""Assoc Start Id""));
				bcAUCPprItmNum.ExecuteQuery();
				blnIsPprItm = bcAUCPprItmNum.FirstRecord();
				
				marrAssocStartId[intCount][0] = GetFieldValue(""Assoc Start Id"");
				if(blnIsPprItm) 
					marrAssocStartId[intCount][1] = bcAUCPprItmNum.GetFieldValue(""Paper Item Value"");
				else
					marrAssocStartId[intCount][1] = """";
				marrAssocStartId[intCount][3] = bcAUCPprItmNum.GetFieldValue(""Order Line Number Detail Id"");
				marrAssocStartId[intCount++][2] = GetFieldValue(""Number Without Delimiter"");
				if(intCount == bcAUCRegistration.GetFieldValue(""Quantity"")) break;
				blnIsRecord = NextRecord();	
			}
		}
			
		if(intCount < ToInteger(intCount))
		{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC003"",intCount);
				TheApplication().RaiseErrorText(""RETURN"");
		}
  		
		blnIsRecord = bcAUCNumMstrQry.FirstRecord();
		
		for(var intCnt = 0; intCnt < intCount; intCnt++) 
		{
			
			Clib.fputs(marrAssocStartId[intCnt][2] + "" "" + marrAssocStartId[intCnt][1] + ""\n"", fp);
			
			if(!blnIsExported) 
			{
				with(bcAUCNumMstrQry)
				{
					SetViewMode(AllView);
					ActivateField(""Status"");
					ActivateField(""AUC Reg Id"");
					ActivateField(""Block Id"");
					ClearToQuery();
					SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
					ExecuteQuery(ForwardOnly);
					
					blnIsRecord = FirstRecord();
					
					while(blnIsRecord)
					{
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));
						SetFieldValue(""AUC Reg Id"",strObjId);
						WriteRecord();
						
						prsInputs.SetProperty(""From Status"",strFromStatus);
						prsInputs.SetProperty(""To Status"",strToStatus);
						prsInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
						bsUpdateBlock.InvokeMethod(""UpdateNumberBlock"",prsInputs,prsOutputs);
							
						blnIsRecord = bcAUCNumMstrQry.NextRecord();
					}
				}
				
				with(bcAUCSIMNumber) {
					ClearToQuery();
					SetSearchSpec(""Id"",marrAssocStartId[intCnt][3]);
					ExecuteQuery(ForwardOnly);
					if (FirstRecord()) {
					//var tstStatus = GetFieldValue(""Status"");
						SetFieldValue(""Status"", TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));
						var tostatus = TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE"");
						var statusbefore = GetFieldValue(""Status"");
						WriteRecord();
						var statusafter = GetFieldValue(""Status"");
					}
				}	
				
				with(bcAUCNumberCnct) {
					SetViewMode(AllView);
					ActivateField(""Status"");
					ClearToQuery();
					SetSearchSpec(""Assoc Start Id"", marrAssocStartId[intCnt][0]);
					ExecuteQuery(ForwardOnly);
					
					blnIsRecord = FirstRecord();
					
					while(blnIsRecord) {
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));
						WriteRecord();
						
						blnIsRecord = bcAUCNumberCnct.NextRecord();
					}
				}
				
				
			}
		}
		if(!blnIsExported) {
			bcAUCRegistration.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"",""COMPLETE""));
			bcAUCRegistration.WriteRecord();
		}
		
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC002"");		
		
	} catch(e) {
		
		boAUCRegistration   = null;		
		bcAUCNumMstrQry   = null;
		bcAUCNumberCnct	 = null;
		bcAUCPprItmNum		 = null;	
		//Clib.fclose(fp);
		var errCode = e.errCode;
		var errTest = e.errText
		//throw(errTest);
		return(strErrVal);
		//throw(e);
	} finally {
		boAUCRegistration   = null;		
		bcAUCNumMstrQry   = null;
		bcAUCNumberCnct	 = null;
		bcAUCPprItmNum		 = null;	
		Clib.fclose(fp);
		return(strErrVal);
		
	}
}
*/"
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{

}
"/**********************************************************************************************************
Purpose 		: Function called from ImportIMSI event 
Author 			: MBT_MS
Date 			: 05-Jan-2004
Input			: Input Property set includes, File Name and Path, AUC Registration record id
				: Starting IMSI number
Outputs		 	: Output property set contianing the err message
Change Log		: Changes made to the function
***********************************************************************************************************
Date           | version| By        | Description of Change																		
-----------------------------------------------------------------------------------------------------------
05/01/2004     | 1.0    | MBT_MS	| Creation
20060627       | 1.1    | Prasad    | SiebelES#51 removed unnecessary code in PreCanInvoke, code is pasted below
20060727       |1.2     | Kalyana   | Changed  code  to  call New Function AddEntry()
20070419       |1.3     | Kalyana   | Added new method ValidatePreactivation
----------------------------------------------------------------------------------------------------------
*/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{					
	var intReturn   	= ContinueOperation;
	var strErrVal 		= """";
/* ------------------------------------------------*/
/*	var marrOrdCnct 	= new Array();
	var marrInputParams = new Array();
	var marrSIMIMSI		= new Array();
	var marrNumTypes	= new Array();
	var mpsPprId		= TheApplication().NewPropertySet();
	var marrError 		= new Array();
	var msFullFileName	= Inputs.GetProperty(""FileName"");
	var msFileName 		= Inputs.GetProperty(""FileName"").substring(Inputs.GetProperty(""FileName"").lastIndexOf(""/"") + 1);
  */  
/* ------------------------------------------------*/	

	switch(MethodName) 
	    {
//	
/*Commented [GB][21/06/2006]
	
		case ""ReadOrderFile"" : 
		    {
//			strErrVal = RegisterIMSI(Inputs,Outputs);
			if(ReadOrderFile(marrOrdCnct,marrInputParams,marrSIMIMSI,marrNumTypes,mpsPprId,marrError,msFullFileName)) 
				 strErrVal = UpdateNumbers(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrNumTypes,msFullFileName);

// ------------------------------------------------------------------------------------|
//			Enable the following script, if an error file is required to be generated  |
// ------------------------------------------------------------------------------------|

			else
		          {
				GenerateErrorFile(marrInputParams,marrError,msFileName);
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD019"");
			      }
			intReturn = CancelOperation;
//	        TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));
			RefreshingBc();
			break;
		      }
*/
//Commented [GB][21/06/2006]		

//		case ""DeregisterIMSI"" : { break; }	
		
        case ""RegisterIMSI"" :
		{
		    strErrVal = RegisterIMSI(Inputs,Outputs);
		    if(strErrVal != """") 
		 	TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));
		 	
			//TheApplication().RaiseError(strErrVal);
			var BatchId = Inputs.GetProperty(""RowId"");
			strErrVal = ExportBatch(BatchId);
			if(strErrVal != """") 
			TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));   
		   	RefreshingBc();
		   	return(CancelOperation);
		    break;
		}

		case ""PreActivateIMSI"" :
		{
			var PreActBatchId           = Inputs.GetProperty(""RowId"");
			var boAUCRegistration 	    = TheApplication().GetBusObject(""RMS AUC Registration"");
	        var bcAUCRegistration	    = boAUCRegistration.GetBusComp(""RMS AUC Registration"");
			with(bcAUCRegistration)
			{
				InvokeMethod(""SetAdminMode"",""TRUE"");
		        SetViewMode(AllView);
				ActivateField(""Status"");
				ActivateField(""File Name and Path"");
				ClearToQuery();
				SetSearchSpec(""Id"",PreActBatchId);
				if(Inputs.GetProperty(""RMSAUCPreActiavtionSync"") != ""Y"")
					SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"", ""SUBMITTED""));
				ExecuteQuery(ForwardOnly);
				var blnIsRecord = bcAUCRegistration.FirstRecord();
				if(blnIsRecord) 
				{
					SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"", ""PROCESSING""));
					WriteRecord();
					InvokeMethod(""RefreshRecord"");
					InvokeMethod(""UpdateLinks"");
					//InvokeMethod(""SetAdminMode"",""FALSE"");
					strErrVal = PreActivateIMSI(Inputs,Outputs);
					//if(strErrVal != """") 
					if(Outputs.GetProperty(""ErrMessage"")!="""")
					{
						ActivateField(""Status"");
						ActivateField(""File Name and Path"");
						ClearToQuery();
						SetSearchSpec(""Id"",PreActBatchId);
						ExecuteQuery(ForwardOnly);
						var blnIsRecord1 = bcAUCRegistration.FirstRecord();
						if(blnIsRecord1) 
						{
							SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"", ""PENDING""));
							if(Inputs.GetProperty(""RMSAUCPreActiavtionSync"") != ""Y"")
								SetFieldValue(""File Name and Path"",Outputs.GetProperty(""ErrMessage"").substring(0, 2000));
							WriteRecord();
							InvokeMethod(""RefreshRecord"");
							InvokeMethod(""UpdateLinks"");
						}
						if(Inputs.GetProperty(""RMSAUCPreActiavtionSync"") == ""Y"")
							TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage"")); 
						//}//end of else
					}//end of if(Outputs.  
					//TheApplication().RaiseError(strErrVal);
					//below 1.2 	   		
					//RefreshingBc();
					//No error then write Entry in Control table
					else
					{	
						var test = Inputs.GetProperty(""3GFlg"");
						var PackageType = Inputs.GetProperty(""PackageType"");
			   			AddEntry(PreActBatchId,PackageType,Inputs.GetProperty(""3GFlg""),Inputs.GetProperty(""PromotionCode""),Outputs.GetProperty(""PackageName""),Outputs.GetProperty(""PricePlanName""));
					//Calling SIM Pairing File BS for Asynch
				/*		if(Inputs.GetProperty(""RMSAUCPreActiavtionSync"") != ""Y"")
						{
							var psinputs = TheApplication().NewPropertySet();
						    var psoutputs = TheApplication().NewPropertySet();
						    var bsPreactivate = TheApplication().GetService(""RMS PreActivated Numbers File"");
							psinputs.SetProperty(""Object Id"",PreActBatchId);		 		
							bsPreactivate.InvokeMethod(""GenerateFile"",psinputs,psoutputs);
							psinputs = null;
							psoutputs = null;
							bsPreactivate = null;
						}
					*/
					}
					RefreshingBc();
				}//End of if(blnIsRecord) 
				InvokeMethod(""SetAdminMode"",""FALSE"");
			}// with(bcAUCRegistration)
			bcAUCRegistration = null;
			boAUCRegistration = null;
//above 1.2
			return(CancelOperation);
	    	break;
		}
//Below 1.3
		case ""ValidatePreactivation"" :
		{
			strErrVal = ValidatePreactivation(Inputs,Outputs);
			//if(strErrVal != """") 
			//TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));   
			Outputs.SetProperty(""StrErrVal"",strErrVal);
			return(CancelOperation);
	    	break;
		}
//Above 1.3	
		case ""QuerySubmittedBatches"" :
		{
			strErrVal=QuerySubmittedBatches(Inputs,Outputs);
			if(strErrVal != """") 
			TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));   
			return(CancelOperation);
	    	break;
		}
    }
	return(intReturn);
}
function SetArray(arrArray,d1,d2,d3,d4,value)
{
	try{
//var strSTEng = TheApplication().GetProfileAttr(""RMS_ST_ENGINE"");
/*var strSTEng = ""Y"";
if ((d2 != ""?"")) {
if ((typeof(arrArray[d1]) != "function"")&& (strSTEng == ""Y""))
{
arrArray[d1] = new Array();
}
} else {
arrArray[d1] = value;
return(true);
}
if ((d3 != ""?"")) {
if ((typeof(arrArray[d1][d2]) != "function"")&& (strSTEng == ""Y""))
arrArray[d1][d2] = new Array();
} else {
arrArray[d1][d2] = value;
return(true);
}
if ((d4 != ""?"")) {
if((typeof(arrArray[d1][d2][d3]) != "function"")&& (strSTEng == ""Y""))
arrArray[d1][d2][d3] = new Array();
} else {
arrArray[d1][d2][d3] = value;
return(true);
}*/
var strSTEng = ""Y"";
if ((d2 == ""?"")) {
arrArray[d1] = value;
return(true);
}
if ((d3 == ""?"")) {
arrArray[d1][d2] = value;
return(true);
}
if ((d4 == ""?"")) {
arrArray[d1][d2][d3] = value;
return(true);
}
} 
catch(e) {
var test = e.errText;
throw(e);
}
}
"/**************************************************************************************
* Name          : RMS SIM Order ValidateLineItemNumbers Function			 	      * 
* Author        : Tech Mahindra                                            *
* Description   : Checks if Starting Number is overlapping any SIM Order			 .      				  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 20060709		1.0   		  Kalyana     Created        
* 20061009      1.1           Kalyana     Changed Search Spec to make SIM Ordering asynchronous
**************************************************************************************/

function ValidateEndNumber(StartingNumber,EndingNumber)
{

	var intPrevStartNum;
	var intPrevEndNum;
	var strErrVal = """";	
	var blnIsRecord;
	var strSearchExp = """";
	var boAUCRegistration 	    = TheApplication().GetBusObject(""RMS AUC Registration"");
	var bcAUCRegistration	    = boAUCRegistration.GetBusComp(""RMS AUC Registration"");
    try 
	{
	with(bcAUCRegistration)
		{
		SetViewMode(AllView);
		ActivateField(""MSISDN Start Number"");
		ActivateField(""MSISDN End Number"");
		ClearToQuery();
		//below 1.1
		//SetSearchSpec(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW""));
		strSearchExp= strSearchExp + ""[Action] = '""+TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_ACTION"", ""PRE-ACTIVATE"")+""'"";
		strSearchExp = strSearchExp+"" AND [Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"")+""'"";
		strSearchExp = strSearchExp + "" OR [Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""SUBMITTED"")+""'"";
		//strSearchExp= strSearchExp + ""AND [Action] = '""+TheApplication().InvokeMethod(""LookupValue"",""RMS_AUC_ACTION"", ""PRE-ACTIVATE"")+""'"";
		SetSearchExpr(strSearchExp);
		//above 1.1
		ExecuteQuery(ForwardOnly);
        blnIsRecord = FirstRecord();
	 	}
   while(blnIsRecord)
      {
        intPrevStartNum 	= bcAUCRegistration.GetFieldValue(""MSISDN Start Number"");
		intPrevEndNum   	= bcAUCRegistration.GetFieldValue(""MSISDN End Number"");
		//var AUCRegId        = bcAUCRegistration.GetFieldValue(""Id"");
//----------------------------------------------------------------
// Raise an error if start number has been used in another Starter Pack Batch				
//----------------------------------------------------------------		
        if((StartingNumber >= intPrevStartNum) && (StartingNumber <= intPrevEndNum)){
		//strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder009"",SIMOrderNo,LineItemNo);
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC012"",bcAUCRegistration.GetFieldValue(""Id""));	
		return(strErrVal);									
        }
//----------------------------------------------------------------
// Raise an error if end number has been used in Starter Pack Batch		
//----------------------------------------------------------------
        if((EndingNumber >= intPrevStartNum) && (EndingNumber <= intPrevEndNum)){
		//strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder009"",SIMOrderNo,LineItemNo);
	    strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC012"",bcAUCRegistration.GetFieldValue(""Id""));	
		return(strErrVal);	
		}
	    blnIsRecord = bcAUCRegistration.NextRecord();
		}
	    return(strErrVal);
	   }
       catch(e)
	   {
		if (strErrVal=="""") 
		{
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrMessage"",e.errText);
		} 
		throw(e);
		return(strErrVal);
	    }
	   finally 
		{
			bcAUCRegistration     = null;					
			boAUCRegistration     = null;
		}	
		return(strErrVal);
}
"/**********************************************************************************************************
Purpose 		: Function called from RegisterIMSI event   for    Pre-Activation
Author 			: KALYANA TANGIRALA
***********************************************************************************************************
Date(DD/MM/YYYY)	| By		| Description of Change																		
-----------------------------------------------------------------------------------------------------------
20070419			| Tech Mahindra,KT	| Creation
----------------------------------------------------------------------------------------------------------*/
/*---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By       | Description of Change
---------------+------+--------+----------------------------------------------
20070419     | 1.0  | Kalyana | Creation
---------------+------+--------+----------------------------------------------
*/
function ValidatePreactivation(&Inputs,&Outputs)
{
	var strSearchSpec           = """";
	var strObjId 			    = Inputs.GetProperty(""RowId"");
	var blnIsRecord			    = false; 
	var blnIsPprItm			    = false;
	var blnIsExported		    = false;
	var intCount 			    = 0;
	var strErrVal 			    = """";
	//new variables for JBS
	var strConn;
	var strUserId;
	var strPwd;
	var strLogFile;
    var boSystemPref 	= TheApplication().GetBusObject(""System Preferences""); 		
	var bcSystemPref 	= boSystemPref.GetBusComp(""System Preferences"");
    var MSISDNStartsWithZero = ""N"";
    //
	var boAUCRegistration 	    = TheApplication().GetBusObject(""RMS AUC Registration"");
	var bcAUCRegistration	    = boAUCRegistration.GetBusComp(""RMS AUC Registration"");
	var bcAUCNumMstrQry    	   	= boAUCRegistration.GetBusComp(""RMS AUC Number Master Query"");
 	try 
	{
		   with(bcAUCRegistration) 
		   {
			WriteRecord();
			ActivateField(""Status"");
			ActivateField(""Action"");
			ActivateField(""Quantity"");
			ActivateField(""Id"");
			ActivateField(""MSISDN Start Number"");
			ActivateField(""Special Category Type"");
			ActivateField(""MSISDN End Number"");
			ActivateField(""Generated Number"");
			ClearToQuery();
			SetSearchSpec(""Id"",strObjId);
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();
			if(!blnIsRecord) 
			{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC005"");
				return(strErrVal);
				//TheApplication().RaiseErrorText(strErrVal);
			} 
			}//End of with
		    with(bcAUCNumMstrQry)
		    {
			SetViewMode(AllView);
			ActivateField(""AUC Reg Id"");
			ActivateField(""Assoc Start Id"");
			ActivateField(""Status"");
			//ActivateField(""Type Identifier"");
			ActivateField(""Number Without Delimiter"");  
			ActivateField(""Number String"");  
			ActivateField(""PreActivation Id"");
			ClearToQuery();
			//Code  to  test selected Start number is of Status ""Available"" or not if export of numbers is pending for long time
			SetSearchSpec(""Number String"",bcAUCRegistration.GetFieldValue(""MSISDN Start Number""));
			SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""AVAILABLE""));
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();
			if(!blnIsRecord)
			{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC007"");
				return(strErrVal);
			}
			if(blnIsRecord)
			{
				if(bcAUCNumMstrQry.GetFieldValue(""PreActivation Id"") !="""")
				{
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC007"");
					return(strErrVal);
				 }
			}
                     
		    var strSearchStr = ""[Name]='RMS_AUC_FIND_END_NUMBER_JBS' AND [Value] ='Y'"";
		    bcSystemPref.ClearToQuery();
		    bcSystemPref.SetSearchExpr(strSearchStr);
		    bcSystemPref.ExecuteQuery(ForwardOnly);
			//KT:Java prog will be called for non special category starterpack batches.For Special category SP batches end number will be calculated from siebel only. 
			//Calling Java BS to find end number of the batch 
			if(bcSystemPref.FirstRecord()  && (bcAUCRegistration.GetFieldValue(""Special Category Type"") == """" || bcAUCRegistration.GetFieldValue(""Special Category Type"") == null))
		    {  
            var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	    	var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
		//-----GETTING THE Connection String FROM SYSTEM PREFERENCE------------
		    bcSysPref.ActivateField(""Value"");
			bcSysPref.ClearToQuery();
			bcSysPref.SetSearchSpec(""Name"",""STC_SPLNUM_CONN_STR"");
			bcSysPref.ExecuteQuery();
			if(bcSysPref.FirstRecord()) 
			{	 
				strConn		= 	bcSysPref.GetFieldValue(""Value"");
			}
			//-----GETTING THE UserId FROM SYSTEM PREFERENCE------------
			bcSysPref.ClearToQuery();
			bcSysPref.SetSearchSpec(""Name"",""STC_SPLNUM_USER_ID"");
			bcSysPref.ExecuteQuery();
			if(bcSysPref.FirstRecord()) 
			{	 
				strUserId	= 	bcSysPref.GetFieldValue(""Value"");
			}
			//-----GETTING THE PASSWORD FROM SYSTEM PREFERENCE------------
			bcSysPref.ClearToQuery();
			bcSysPref.SetSearchSpec(""Name"",""STC_SPLNUM_PWD"");
			bcSysPref.ExecuteQuery();
			if(bcSysPref.FirstRecord()) 
			{	 
				strPwd		= 	bcSysPref.GetFieldValue(""Value"");
			}
			//-----GETTING THE LOGFILE FROM SYSTEM PREFERENCE------------
			bcSysPref.ClearToQuery();
			bcSysPref.SetSearchSpec(""Name"",""RMS_AUC_SP_END_NUMBER_LOGFILE"");
			bcSysPref.ExecuteQuery();
			if(bcSysPref.FirstRecord()) 
			{	 
				strLogFile		= 	bcSysPref.GetFieldValue(""Value"");
                strLogFile      = strLogFile+""_""+bcAUCRegistration.GetFieldValue(""Id"")+"".txt"";
			}
			var psInput = TheApplication().NewPropertySet();
		    var psOutput = TheApplication().NewPropertySet();
			var bsJBS = TheApplication().GetService(""RMS Starter Pack Update End Number JBS"");
		    var MSISDNStartNum = bcAUCRegistration.GetFieldValue(""MSISDN Start Number"");
			var test786 = MSISDNStartNum.substring(0,1);
			if (MSISDNStartNum.substring(0,1) == ""0"")
			{
            MSISDNStartsWithZero = ""Y"";
			}
            psInput.SetProperty(""BlockId"",bcAUCRegistration.GetFieldValue(""Block Id""));
            psInput.SetProperty(""SPRowId"",bcAUCRegistration.GetFieldValue(""Id""));
         	psInput.SetProperty(""BatchSize"",ToInteger(bcAUCRegistration.GetFieldValue(""Quantity""))+1);
            psInput.SetProperty(""ConnecString"",strConn);
            psInput.SetProperty(""Password"",strPwd);
            psInput.SetProperty(""UserId"",strUserId);
            psInput.SetProperty(""LogFile"",strLogFile);
            psInput.SetProperty(""SpecialCategory"","""");
            psInput.SetProperty(""StartingNumber"",bcAUCRegistration.GetFieldValue(""Generated Number""));
    		/*
			psInput.SetProperty(""BlockId"",""1-2BZ3W"");
            psInput.SetProperty(""SPRowId"",""9999"");
            psInput.SetProperty(""BatchSize"",""5"");
            psInput.SetProperty(""ConnecString"",""jdbc:oracle:oci:@siebbit"");
            psInput.SetProperty(""Password"",""rmsadmin"");
            psInput.SetProperty(""UserId"",""rmsadmin"");
            psInput.SetProperty(""LogFile"",""C:\\abc_1000.txt"");
            psInput.SetProperty(""SpecialCategory"","""");
            psInput.SetProperty(""StartingNumber"",""687052902"");*/
            bsJBS.InvokeMethod(""StarterPackUpdateEndNumber"",psInput,psOutput);
			var EndingNumber = psOutput.GetProperty(""EndingNumber"");
			if (MSISDNStartsWithZero == ""Y"")
			{
			EndingNumber = ""0""+EndingNumber;
			}
            var StrErrvalue =psOutput.GetProperty(""StrErrVal"");
            psInput   = null;
            psOutput  = null;
            bsJBS     = null;
            bcSysPref = null;
            boSysPref = null;
			//var test123 = StrErrvalue.substring(0,3);

			if (StrErrvalue.substring(0,3) ==""Err"")
			{
			var RecordCount = StrErrvalue.substring(3,StrErrvalue.length);
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC003"",RecordCount);
            return(strErrVal);
            } 
            strErrVal = ValidateEndNumber(bcAUCRegistration.GetFieldValue(""MSISDN Start Number""),EndingNumber);
			if (strErrVal == """")
			{ 
			bcAUCRegistration.SetFieldValue(""MSISDN End Number"",EndingNumber);
			//bcAUCRegistration.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"", ""SUBMITTED""));
			bcAUCRegistration.WriteRecord();	
			return(strErrVal);
			}
			else 
			{
			return(strErrVal);
			}
			}
			//End of Calling Java BS
			else
			{
			ClearToQuery();
			//KT 20070728 Changed SS on Number String to Number
			//strSearchSpec = strSearchSpec + "" AND [Number String] >= '"" + bcAUCRegistration.GetFieldValue(""MSISDN Start Number"") + ""'"";
			//strSearchSpec = ""[Type Identifier] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"") + ""'"";
			strSearchSpec = ""[Number Type Identifier Denorm] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"") + ""'"";
			strSearchSpec = strSearchSpec + "" AND [Number] >= '"" + bcAUCRegistration.GetFieldValue(""Generated Number"") + ""'"";
			strSearchSpec = strSearchSpec + "" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE"") + ""'"";
			strSearchSpec = strSearchSpec + "" AND [Special Category Type] = '"" + bcAUCRegistration.GetFieldValue(""Special Category Type"") + ""'"";
			strSearchSpec = strSearchSpec + "" AND [PreActivation Id] IS NULL "";
			strSearchSpec = strSearchSpec + "" AND [Assoc Start Id] IS NOT NULL AND [Is Associated] = 'Y' "";				
			strSearchSpec = strSearchSpec + "" AND [Block Id] = '"" + bcAUCRegistration.GetFieldValue(""Block Id"") + ""' "";				
			SetSearchExpr(strSearchSpec);
			ExecuteQuery(ForwardOnly);	
			blnIsRecord = FirstRecord();
			}
			while(blnIsRecord)
			{
				intCount = intCount + 1;
				if(intCount == bcAUCRegistration.GetFieldValue(""Quantity"")) 
			      {
			  	    //var EndNumber = ""End Number:""+bcAUCNumMstrQry.GetFieldValue(""Number String"");
					var EndNumber = bcAUCNumMstrQry.GetFieldValue(""Number String"");
					strErrVal = ValidateEndNumber(bcAUCRegistration.GetFieldValue(""MSISDN Start Number""),EndNumber);
					if (strErrVal == """")
					{ 
					bcAUCRegistration.SetFieldValue(""MSISDN End Number"",EndNumber);
					//bcAUCRegistration.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"", ""SUBMITTED""));
					bcAUCRegistration.WriteRecord();	
			        break;
					}
			     	else 
					{
					return(strErrVal);
					}
				  }
			      blnIsRecord = bcAUCNumMstrQry.NextRecord(); 	
		     }
			     if(intCount < ToInteger(bcAUCRegistration.GetFieldValue(""Quantity"")))
			     {
				 strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC003"",intCount);
				 return(strErrVal);
			     }
			/*if(strErrVal != """")
			Outputs.SetProperty(""ErrMessage"",strErrVal);
//return(strErrVal);*/
			}//end of bcSystemPref.FirstRecord()
	        }
	catch(e)
	{
		if (strErrVal=="""") 
		{
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrMessage"",e.errText);
		} 
		throw(e);
		return(strErrVal);
	}
	finally 
	{
		bcAUCNumMstrQry   	 = null;
		bcAUCRegistration     = null;					
		boAUCRegistration     = null;
        bcSystemPref          = null;
        boSystemPref          = null;
		if(strErrVal != """")
		Outputs.SetProperty(""ErrMessage"",strErrVal);
 	    }	
	return(strErrVal);
}
"/**************************************************************************************
* Name          : Delete					  										  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function invoked om Delete event of VBC.                            *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/

function Delete (Inputs, Outputs)
{
	return (CancelOperation);
}
"/**************************************************************************************
* Name          : Init					  										  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function invoked on Initialization event of VBC.                            *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function Init (&Inputs, &Outputs)
{
	Outputs.SetProperty(""File Name"", """");
	Outputs.SetProperty(""Scheme RowId"","""");
	Outputs.SetProperty(""Scheme Name"","""");
	return (CancelOperation);
}
"/**************************************************************************************
* Name          : Insert					  										  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function invoked om Insert event of VBC.                            *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function Insert (Inputs, Outputs)
{
	return (CancelOperation);	
}
"/**************************************************************************************
* Name          : PreInsert				  										      * 
* Author        : Mahindra British Telecom                                            *
* Description   : function invoked on WriteRecord.                            		  *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function PreInsert (Inputs, Outputs)
{
	return (CancelOperation);
}
"/**************************************************************************************
* Name          : Query				  										  		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function invoked on Query event of VBC.                             *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0    MBT		 Created      01/12/2003      *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function Query(&Inputs, &Outputs)
{

	var psNew = TheApplication().NewPropertySet();
	psNew.SetProperty(""File Name"", """");
	psNew.SetProperty(""Scheme RowId"", """");
	psNew.SetProperty(""Scheme Name"","""");

	Outputs.AddChild(psNew);
//1.1 below
	psNew = null;
//1.1 above
	return (CancelOperation);
}
"/**************************************************************************************
* Name          : Service_PreInvoke					  								  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function invoked oon PreInvoke.                            		  *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs){
	
	if (MethodName == ""Init"") {
		return(Init(Inputs, Outputs));
	}
	else if (MethodName == ""Query"") {
		return(Query(Inputs, Outputs));
	}
	else if (MethodName == ""PreInsert"") {
		return(Init(Inputs, Outputs));
	}
	else if (MethodName == ""Insert"") {
		return(Init(Inputs, Outputs));
	}
	else if (MethodName == ""Update"") {
		return(Update(Inputs, Outputs));
	}
	else if (MethodName == ""Delete"") {
		return(Delete(Inputs, Outputs));
	}
	else {
		return (ContinueOperation);
	}
}
"/**************************************************************************************
* Name          : Update					  										  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function invoked on Update event of VBC.                            *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function Update (&Inputs, &Outputs){

	var psChildSet = Inputs.GetChild(0);
	
	Outputs.SetProperty(""Scheme RowId"",psChildSet.GetProperty(""Scheme RowId""));
	Outputs.SetProperty(""Scheme Name"",psChildSet.GetProperty(""Scheme Name""));
	Outputs.SetProperty(""File Name"",psChildSet.GetProperty(""File Name""));
	
	return (CancelOperation);
}
"/**************************************************************************************
* Name          : logPropSet					  									  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function invoked to write to file in case of error                  *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function logPropSet(inputPS, fileName)
{
	// Use EAI XML Write to File business service to write
	// inputPS property set to fileName file in c:\temp directory.
	var fileSvc = TheApplication().GetService(""EAI XML Write to File"");
	var outPS = TheApplication().NewPropertySet();
	var fileLoc = ""c:\\temp\\"" + fileName;
	var tmpProp = inputPS.Copy();
	tmpProp.SetProperty(""FileName"", fileLoc);
	fileSvc.InvokeMethod(""WritePropSet"", tmpProp, outPS);
	// clean up
	outPS = null;
	fileSvc = null;
	tmpProp = null;
}
"/**************************************************************************************
* Name          : string Replace					  								  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function for replacing search spec escape characters                *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function stringReplace (string, from, to)
{
	// Replaces from with to in string
	var stringLength = string.length;
	var fromLength = from.length;
	if ((stringLength == 0) || (fromLength == 0))
	return string;
	var fromIndex = string.indexOf(from);
	if (fromIndex < 0)
	return string;
	var newString = string.substring(0, fromIndex) + to;
	if ((fromIndex + fromLength) < stringLength)
	newString += stringReplace(string.substring(fromIndex+fromLength,
	stringLength), from, to);
	return newString;
}
"/**************************************************************************************
* Name          : RMS MSISDN Port In Service PreInvoke Method     		 	  		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS MSISDN Port In Code File	    		      		              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 06/19/2005 	2.0   		MBT						   	Created      06/19/2005       *
**************************************************************************************/


function ContractValidation(Inputs,Outputs)
    {
    	var boAssetManagement = TheApplication().GetBusObject(""Asset Management"");
    	var bcAssetManagement = boAssetManagement.GetBusComp(""Asset Mgmt - Asset"");
		
		var boSystemPreferences = TheApplication().GetBusObject(""System Preferences"");
		var bcSystemPreferences = boSystemPreferences.GetBusComp(""System Preferences"");
	
		var StrDate = new Date();
		var StrVal;
		var StrDateDiff;
		var mbIsRecord	= false;
		
		var StrServiceAccId  = Inputs.GetProperty(""ServiceAccountId"");
//		var StrServiceAccId  = ""1-21ZW0"";
        try 
        {
		  with(bcAssetManagement)
		     {
		       SetViewMode(AllView);
		       ActivateField(""Product Name"");
		       ActivateField(""Service Account Id"");
		       ActivateField(""EE SIM Chg Allowd Period"");  // Calculated Field ( Today()-[EECC Last Changed Date] )
		       
		       ClearToQuery();
		       SetSearchSpec(""Service Account Id"",StrServiceAccId);
//    		   SetSearchSpec(""Product Name"",TheApplication().InvokeMethod(""LookupValue"", ""EECC_ASSOC_ASSETS"", ""EECC_SIM_CARD"")); //EE_SIM_Card
		       ExecuteQuery();
	   	       mbIsRecord = FirstRecord();
			   if(mbIsRecord) {
			       ClearToQuery();
			       SetSearchSpec(""Root Asset Id"",GetFieldValue(""Id""));
	    		   SetSearchSpec(""Product Name"",TheApplication().InvokeMethod(""LookupValue"", ""EECC_ASSOC_ASSETS"", ""EECC_SIM_CARD"")); //EE_SIM_Card
			       ExecuteQuery();
					if(FirstRecord())		   
			       		StrDateDiff = bcAssetManagement.GetFieldValue(""EE SIM Chg Allowd Period"");
		       	}
      					   
			   with(bcSystemPreferences)  
			   		{
					   SetViewMode(AllView);
				       ActivateField(""Name"");
				       ActivateField(""Value"");
				       ClearToQuery();
				       SetSearchSpec(""Name"",""EE Period Allowed"");  
				       ExecuteQuery();
				       mbIsRecord = FirstRecord();
				       if(mbIsRecord)
				          StrVal = bcSystemPreferences.GetFieldValue(""Value"");
		       		 }	  
			   
			   if( StrDateDiff < StrVal ) 
					Outputs.SetProperty(""ReturnVal"",""Y"");
			   else
					Outputs.SetProperty(""ReturnVal"",""N"");	
		    }	 
} 
catch(e)
     { 
//	 } finally {             
			 boAssetManagement = null;
	         bcAssetManagement = null;
	         boSystemPreferences = null;
	         bcSystemPreferences = null;             
	       	 throw (e) ;
        }
    }
"/**************************************************************************************
* Name          : RMS MSISDN Port In Service PreInvoke Method     		 	  		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS MSISDN Port In Code File	    		      		              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 06/19/2005 	2.0   		MBT						   	Created      06/19/2005       *
20060710       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	switch (MethodName) 
	{
		case ""Contract Validation"":
			ContractValidation(Inputs,Outputs);
			break;
		case ""LastDateUpdation"":
			var bo = TheApplication().GetBusObject(""EECC Service Accounts"");
			var bc = bo.GetBusComp(""CUT Service Sub Accounts"");
			var temp = Inputs.GetProperty(""AssetId"");
			with(bc) 
			{
				SetViewMode(AllView);
				ActivateField(""EE SIM Number"");
				ClearToQuery();
				SetSearchSpec(""Id"",Inputs.GetProperty(""AssetId""));
				ExecuteQuery();
				if(FirstRecord())	
				{
					SetFieldValue(""EE SIM Number"",Inputs.GetProperty(""SIM""));
					WriteRecord();
				}
			}
//1.1 below
			bc = null;
			bo = null;
//1.1 above
			break;			 
		default:
			 return (ContinueOperation);
	}
	return (CancelOperation);
}
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Calculate Available date                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0   		MBT  	Created       01/11/2003                          *
**************************************************************************************/
/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Change Number Status                      				          *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0   		MBT  	Created       01/11/2003                          *
**************************************************************************************/
/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : DeAssociate Code File                      				          *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0   		MBT  	Created       01/11/2003                          *
**************************************************************************************/
/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Is SIM Twice Associated	                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0   		MBT  	Created       01/11/2003                          *
**************************************************************************************/
/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Partial DeAssociate Code File                      				          *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0   		MBT  	Created       01/11/2003                          *
**************************************************************************************/
/**************************************************************************************
* Name          : RMS RMS De-Association						 	          		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Service_PreInvokeMethod										      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/10/2003	1.0   		Mahindra British Telecom   	Created       29/10/2003      *
**************************************************************************************/
"
"/* Name          : RMS NM Association Rule Service PreInvoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Function for calculating Available Date of number.                            		  			  *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function CalcAvailDate(bcNumberScheme, bcNumberMaster, &dtQuarantineDateObj)
{
	with(bcNumberScheme) {

		ActivateField(""Max. Ter. Quarantine Period"");
		ActivateField(""Max. Ter. Quarantine UOM"");
		ClearToQuery();
		SetSearchSpec(""Id"",bcNumberMaster.GetFieldValue(""Scheme Id""));
   		ExecuteQuery();
		
		if(FirstRecord()) {
	   		var dtSysDate = Clib.time();
			var dtSysDateObj = Date.fromSystem(dtSysDate);
			dtSysDateObj.setTime(dtSysDateObj.getTime());
			var dtQuarantineDate = bcNumberMaster.GetFieldValue(""Quarantine Date"");
			dtQuarantineDateObj = new Date(dtQuarantineDate);
	
	
	        switch (bcNumberScheme.GetFieldValue(""Max. Dis. Qurantine UOM"")) {
	  		  	    
		    	case ""Days"": 
	 				
	 				dtQuarantineDateObj.setTime(dtQuarantineDateObj.getTime() + GetFieldValue(""Max. Dis. Quarantine Period"") * 24 * 60 * 60 * 1000);
	        		break;
	            	
				case ""Months"": 
		
			       	dtQuarantineDateObj.setMonth(ToNumber(ToNumber(dtQuarantineDateObj.getMonth()) + ToNumber(GetFieldValue(""Max. Dis. Quarantine Period""))));
					dtQuarantineDateObj.setTime(dtQuarantineDateObj.getTime());		
				break;
				
			    case ""Weeks"": 
					dtQuarantineDateObj.setTime(dtQuarantineDateObj.getTime() + (GetFieldValue(""Max. Dis. Quarantine Period"") * 7 * 24 * 60 * 60 * 1000));
			    break;
		   		
		    	case ""Year"": 
					dtQuarantineDateObj.setFullYear(ToNumber(ToNumber(dtQuarantineDateObj.getFullYear()) + ToNumber(GetFieldValue(""Max. Dis. Quarantine Period""))));
	       			dtQuarantineDateObj.setTime(dtQuarantineDateObj.getTime());		
				break;
	    		
	    	}
	    }
	}
}
"/* Name          : RMS NM Association Rule Service PreInvoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Change Number status as per the source.                            		  			  *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function ChangeNumberStatus(strSource,bcNumberMaster,bcNumberScheme,blnIsSIMTwiceAssociated,blnNumExists,Inputs)
{
	var intArrLen = 0;
	var dtQuarantineDateObj;
	var bsNumberBlock;
	var strSource;
	var strPrevSts;
	var strTypeIdentifier;
	var strToStatus;
	var strCurrStatus;
	var strSIMType  = TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"");
	var strIMSIType = TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"");
	var strMSISDNType= TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"");
	
	var psInputs  = TheApplication().NewPropertySet();
	var psOutputs = TheApplication().NewPropertySet();

	strTypeIdentifier = Inputs.GetProperty(""Type Identifier"");
	strToStatus 	  = Inputs.GetProperty(""To Status"");
	strCurrStatus     = Inputs.GetProperty(""Current Status"");
	
	switch(strSource){

		case ""Change SIM Number"":

//----------------------------------------------------------------------------------------
//Loop through each number in the array, and change the status of the SIM and IMSI Number.
//----------------------------------------------------------------------------------------
				
			for(var intArrLen = 0;intArrLen < strNumber.length;intArrLen++) {
	
				with(bcNumberMaster){
					ActivateField(""Status"");
					ActivateField(""Assigned To"");
					ActivateField(""Block Id"");
					ActivateField(""Type Identifier"");
					ClearToQuery();
					SetSearchSpec(""Number String"",strNumber[intArrLen]);
					ExecuteQuery();
					if(FirstRecord()) {
						if(((GetFieldValue(""Type Identifier"")==""SIM""))||(GetFieldValue(""Type Identifier"")==""IMSI"")){
							strPrevSts = GetFieldValue(""Status"");
							SetFieldValue(""Status"",""Trash"");
							SetFieldValue(""Allocated To"","""");
							SetFieldValue(""Assigned Id"","""");
							SetFieldValue(""Assigned Date"","""");
							WriteRecord();
						}
					}
				}
								
				bsNumberBlock = TheApplication().GetService(""RMS Block Calc"");
				psInputs.SetProperty(""From Status"", strPrevSts);
				psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
				psInputs.SetProperty(""To Status"",GetFieldValue(""Status""));		
				bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);

		    }//end of For		
				 
		break;

//----------------------------------------------------------------------------------------
//Loop through each number in the array, and change the status of the SIM and IMSI Number.
//and MSISDN Number.Status of SIM will be changed only if it is not associated with any 
//other MSISDN number
//----------------------------------------------------------------------------------------				

		case ""Redeployment"":
		
			
				
			for(intArrLen = 0;intArrLen < strNumber.length;intArrLen++) {

				with(bcNumberMaster){
					ActivateField(""Status"");
					ActivateField(""Block Id"");
					ActivateField(""Type Identifier"");
					ClearToQuery();
					SetSearchSpec(""Id"",strNumber[intArrLen]);
					ExecuteQuery();
					while(FirstRecord()) {
						if(((GetFieldValue(""Type Identifier"") == strSIMType)||(GetFieldValue(""Type Identifier"") == strIMSIType)) && blnIsSIMTwiceAssociated == ""N""){
							if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""ALLOCATED"")){
								SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE""));
								WriteRecord();
							}
							if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""QUARANTINE"")){
								SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""TRASHED""));
								WriteRecord();
							}
							if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""LOST"")){
								SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""TRASHED""));
								WriteRecord();
									}
						}
						
						if(GetFieldValue(""Type Identifier"") == strMSISDNType){
							if(strTypeIdentifier == strSIMType){
								if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""ALLOCATED"")){
									SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE""));
									WriteRecord();
								}
							}
							if(strTypeIdentifier == strMSISDNType){
								if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""ALLOCATED"")){
									SetFieldValue(""Status"",strToStatus);
									WriteRecord();
								}
								if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE"")){
									SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""NOT AVAILABLE""));
									WriteRecord();
								}
								if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""LOST"")){
									SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""NOT AVAILABLE""));
									WriteRecord();
								}
							}
						}
						bsNumberBlock = TheApplication().GetService(""RMS RMS Block Calc"");
						psInputs.SetProperty(""From Status"", strCurrStatus);
						psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
						psInputs.SetProperty(""To Status"",GetFieldValue(""Status""));		
						bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);
					}
				 }
			}
					
		break;											
				
		case ""Cancel Order"":		

			for(intArrLen = 0; intArrLen < strNumber.length; intArrLen++){

				with(bcNumberMaster){
					ActivateField(""Status"");
					ActivateField(""Block Id"");
					ActivateField(""Assigned Id"");
					ActivateField(""Type Identifier"");
					ClearToQuery();
					SetSearchSpec(""Number String"", strNumber[intArrLen]);
					ExecuteQuery();
					if(FirstRecord()) {
						if((GetFieldValue(""Type Identifier"")==""SIM"" && blnIsSIMTwiceAssociated == ""N"") ||(GetFieldValue(""Type Identifier"")==""IMSI"")){
							strPrevSts = GetFieldValue(""Status"");
							SetFieldValue(""Status"",""Allocated"");
							SetFieldValue(""Assigned Id"","""");
							SetFieldValue(""Assigned Date"","""");
							SetFieldValue(""Allocated To"","""");
							WriteRecord();
						}
						else if(GetFieldValue(""Type Identifier"")==""MSISDN"") {
							strPrevSts = GetFieldValue(""Scheme Id"");
							SetFieldValue(""Status"",""Quarantine"");
							SetFieldValue(""Assigned Id"","""");
							SetFieldValue(""Reserved To"","""");
							SetFieldValue(""Allocated To"","""");
							WriteRecord();
							
							CalcAvailDate(bcNumberScheme,bcNumberMaster,dtQuarantineDateObj);
							
							SetFieldValue(""Qurantine Date"", GetFieldValue(""Todays Date""));
							SetFieldValue(""Available Date"",DateToString(dtQuarantineDateObj));
							WriteRecord();
						}
						bsNumberBlock = TheApplication().GetService(""RMS Block Calc"");
						psInputs.SetProperty(""From Status"", strPrevSts);
						psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
						psInputs.SetProperty(""To Status"",GetFieldValue(""Status""));		
						bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);
					}
								
				}
			}
		break;	
		
		case ""Disconnect"":		

			for(intArrLen = 0; intArrLen < strNumber.length; intArrLen++){

				with(bcNumberMaster){
					ActivateField(""Status"");
					ActivateField(""Block Id"");
					ActivateField(""Assigned Id"");
					ActivateField(""Type Identifier"");
					ClearToQuery();
					SetSearchSpec(""Number String"", strNumber[intArrLen]);
					ExecuteQuery();
					if(FirstRecord()) {
						if((GetFieldValue(""Type Identifier"")==""SIM"" && blnIsSIMTwiceAssociated == ""N"") ||(GetFieldValue(""Type Identifier"")==""IMSI"")){
							strPrevSts = GetFieldValue(""Status"");
							SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""TRASHED""));
							//SetFieldValue(""Assigned Id"","""");
							//SetFieldValue(""Assigned Date"","""");
							SetFieldValue(""Allocated To"","""");
							WriteRecord();
						}
						else if(GetFieldValue(""Type Identifier"")==""MSISDN"") {
							strPrevSts = GetFieldValue(""Scheme Id"");
							SetFieldValue(""Status"",""Quarantine"");
							//SetFieldValue(""Assigned Id"","""");
							//SetFieldValue(""Reserved To"","""");
							SetFieldValue(""Allocated To"","""");
							WriteRecord();
							
							CalcAvailDate(bcNumberScheme,bcNumberMaster,dtQuarantineDateObj);
							
							SetFieldValue(""Qurantine Date"", GetFieldValue(""Todays Date""));
							SetFieldValue(""Available Date"",DateToString(dtQuarantineDateObj));
							WriteRecord();
						}
						bsNumberBlock = TheApplication().GetService(""RMS Block Calc"");
						psInputs.SetProperty(""From Status"", strPrevSts);
						psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
						psInputs.SetProperty(""To Status"",GetFieldValue(""Status""));		
						bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);
					}
								
				}
			}
		break;	
					   									
		case ""MSISDN Takeover"":
						
			for(intArrLen = 0; intArrLen < strNumber.length; intArrLen++){
					
				with(bcNumberMaster){
					ActivateField(""Status"");
					ActivateField(""Block Id"");
					ActivateField(""Assigned Id"");
					ActivateField(""Type Identifier"");
					ClearToQuery();
					SetSearchSpec(""Number String"",strNumber[intArrLen]);
					ExecuteQuery();
					if(FirstRecord()) {
						if((GetFieldValue(""Type Identifier"")==""SIM"" && blnIsSIMTwiceAssociated == ""N"")||(GetFieldValue(""Type Identifier"")==""IMSI"")){
							strPrevSts = GetFieldValue(""Status"");
							SetFieldValue(""Status"",""Trash"");
							SetFieldValue(""Allocated To"","""");
							SetFieldValue(""Assigned Id"","""");
							SetFieldValue(""Assigned Date"","""");
							WriteRecord();
							
							bsNumberBlock = TheApplication().GetService(""RMS Block Calc"");
							psInputs.SetProperty(""From Status"", strPrevSts);
							psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
							psInputs.SetProperty(""To Status"",GetFieldValue(""Status""));		
							bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);
						}
					}
				}
			}
		break;
	
	case ""SIM Order"":

		with(bcNumberMaster){
			while(blnNumExists) {
				if((GetFieldValue(""Type Identifier"") == strSIMType) || (GetFieldValue(""Type Identifier"") == strIMSIType)) 
					SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASH""));
				else if(GetFieldValue(""Type Identifier"") == strMSISDNType) 
					SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE""));
	
				strPrevSts = GetFieldValue(""Status"");
				SetFieldValue(""Is Associated"", ""N"");
				SetFieldValue(""Assoc Start Id"", """");
				SetFieldValue(""IMSI Assoc"", ""N"");
				WriteRecord();
				
				bsNumberBlock = TheApplication().GetService(""RMS RMS Block Calc"");
				psInputs.SetProperty(""From Status"", strPrevSts);
				psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
				psInputs.SetProperty(""To Status"",GetFieldValue(""Status""));		
				bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);

				blnNumExists = NextRecord();				
			}
		}
		break;
	}
	
	psInputs		= null;
	psOutputs		= null;
	bsNumberBlock	= null;
}
"/* Name          : RMS NM Association Rule Service PreInvoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function for deassociating numbers.                            		  			  *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function DeAssociate(Inputs,&bcNumberMaster,&bcAssocNumberTypeDisplay,&bcNumberAssocDetail,&bcNumberAssocMasterConcat,&bcNumberMasterConcat,&bcNumberScheme)
{
	var strInputNumber;
	var strAssocStartId;
	var strStatus;
	var strSource;
	var strErrVal;
	
	var strCnctId = new Array();
	
	var intRecCnt=0;

	var blnIsSIMTwiceAssociated = ""N"";
	var blnIsRecord;
	var blnNumExists;
	
	
//----------------------------------------
//Get MSISDN as one of the input parameter
//----------------------------------------
	strInputNumber  = Inputs.GetProperty(""Number"");
 	strSource	   	 =  Inputs.GetProperty(""Source"");     

//---------------------------------------------------------------
//Using MSISDN Number to Get Assoc Start ID from Number Master BC
//---------------------------------------------------------------
    		
	with(bcNumberMaster) {
		
		ActivateField(""Assoc Start Id"");
		ActivateField(""Number"");
		ActivateField(""Number String"");
		ActivateField(""IMSI Assoc"");
		ActivateField(""Is Associated"");		
		ActivateField(""IMSI Assoc"");
		ActivateField(""Is Associated"");
		ActivateField(""Type Identifier"");
		ActivateField(""Block Id"");				
		ActivateField(""Status"");
		
		ClearToQuery();
		SetSearchSpec(""Number String"",strInputNumber);
		ExecuteQuery();
		if(FirstRecord()) {
			if(GetFieldValue(""Is Associated"") != ""Y"") {
				strErrVal = ""RMSDA001"";
				return(strErrVal);
			}
			strAssocStartId =GetFieldValue(""Assoc Start Id"");
		}
		else {
			strErrVal = ""RMSDA002"";
			return(strErrVal);
		}

		ClearToQuery();
		SetSearchSpec(""Assoc Start Id"",strAssocStartId);
		ExecuteQuery();
		blnNumExists = FirstRecord();
	}


//------------------------------------------
//Delete Ass Cnct table using Assoc Start Id
//------------------------------------------

	with(bcAssocNumberTypeDisplay) {
		ActivateField(""Assoc Start Id"");
		ClearToQuery()
		SetSearchSpec(""Assoc Start Id"",strAssocStartId);
		ExecuteQuery();
		while(FirstRecord()) {
			strCnctId[intRecCnt++]	= GetFieldValue(""Id"");
			DeleteRecord();
		}
	}

//--------------------------------------------------------------------------
//Using Number Id get the Concat Id from Number Master Concat BC.Also check,
//whether SIM is associated with any other MSISDN number.
//--------------------------------------------------------------------------

	with(bcNumberMasterConcat) {
	
		ActivateField(""Number Id"");
		ActivateField(""Concat Id"");
		
		IsSIMTwiceAssociated(blnIsSIMTwiceAssociated,bcNumberMasterConcat,strAssocStartId);
		strErrVal = ""RMSDA003"";		
		for(var intArrlen = 0;intArrlen < strCnctId.length;intArrlen++) {

				ClearToQuery();
				SetSearchSpec(""Concat Id"", strCnctId[intArrlen]);
				ExecuteQuery();
			
//-----------------------------------------------------------------------------
//Delete the records from Number Master concat having the concat id same as the
//concat id of the input number.
//-----------------------------------------------------------------------------
				while(FirstRecord())
					DeleteRecord();
		}
	}
			

//-----------------------------------------------------------------------------
//Delete the records from Association Detail having the concat id same as the
//concat id of the input number.
//-----------------------------------------------------------------------------

	for(var intArrlen = 0;intArrlen < strCnctId.length;intArrlen++) {

		with(bcNumberAssocDetail){
			ActivateField(""Association Id"");
			ActivateField(""Association Seq Num"");
			ActivateField(""Destination Num Id"");
			ActivateField(""Number Association Concat Id"");
			ActivateField(""Source Num Id"");
			ActivateField(""Row Id"");
			ActivateField(""Parent Ass Id"");
			ClearToQuery();
			SetSearchSpec(""Number Association Concat Id"", strCnctId[intArrlen]);
			ExecuteQuery();
			blnIsRecord=FirstRecord();
			while(FirstRecord())
				DeleteRecord();
		}
	}

//----------------------------------------------------------------------------------
//Delete the records from Association Master concat having the concat id same as the
//concat id of the input number.
//----------------------------------------------------------------------------------
	
	for(var intArrlen = 0;intArrlen < strCnctId.length;intArrlen++) {
			
		with(bcNumberAssocMasterConcat){
			ActivateField(""Association Id"");
			ActivateField(""Concat Id"");
			ActivateField(""Flag"");
			ClearToQuery();
			SetSearchSpec(""Concat Id"",strCnctId[intArrlen]);
			ExecuteQuery();
			blnIsRecord=FirstRecord();
			while(FirstRecord())
				DeleteRecord();
		}
	}
	ChangeNumberStatus(strSource,bcNumberMaster,bcNumberScheme,blnIsSIMTwiceAssociated,blnNumExists,Inputs);
	strErrVal = ""RMSDA003"";
}
"/* Name          : RMS NM Association Rule Service PreInvoke Method				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Function for checking whether SIM number is associated twice.       *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function IsSIMTwiceAssociated(&blnIsSIMTwiceAssociated,bcNumberMasterConcat,strAssocStartId) 
{
	var intRecCnt = 0;
	with(bcNumberMasterConcat) {
		ClearToQuery();
		SetSearchSpec(""Number Id"",strAssocStartId);
		ExecuteQuery();
		var blnIsRecord = FirstRecord();
		while(blnIsRecord) {
			intRecCnt++;
			if(ToInteger(intRecCnt) >= 1)
				break;
		}
		if(ToInteger(intRecCnt) > 1) 
			blnIsSIMTwiceAssociated = ""Y"";
	}
}
"/* Name         : RMS NM Association Rule Service PreInvoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Partial Deassociation.                            		  		  *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function PartialDeassociation(Inputs,bcNumberMaster,bcAssocNumberTypeDisplay,bcNumberAssocDetail,bcNumberAssocMasterConcat,bcNumberMasterConcat,bcNumberScheme)
{
	var strMSISDNNumber;
	var strMSISDNId;
	var strAssocStartId;
	var strConcatId;
	var strSearchExpr;
	var strAssNumber = new Array();
	var strAssNumberType = new Array();
	var strNumberString;
	var intRecCnt=0;
	var intConcatId;
	var blnIsRecord;
	var strStatus;
	var strSource;
	var strErrVal = """";
	var blnIsSIMTwiceAssociated = ""N"";
	
	strMSISDNNumber  = Inputs.GetProperty(""MSISDN Number"");
 	strSource        = Inputs.GetProperty(""Source"");

//-------------------------------------------------------------------------------
// Query Number Master to validate the MSISDN or SIM Number .If SIM Number then 
// querying the number Master to fetch MSISDN number Number using 'Assoc Start Id'
// and then taking the values 'Id' of MSISDN number and 'Assoc Start Id'.
//-------------------------------------------------------------------------------


 	with( bcNumberMaster) {
		ActivateField(""Assoc Start Id"");
		ActivateField(""Type Identifier"");
		ActivateField(""Is Associated"");
		ClearToQuery()
		SetSearchSpec(""Number String"",strMSISDNNumber);
		ExecuteQuery();
		if(FirstRecord()) {
			if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"")) {
				strAssocStartId = GetFieldValue(""Assoc Start Id"");
				strSearchExpr = ""[Assoc Start Id] = '""+ strAssocStartId +""' AND [Type Identifier] = '""+ TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"") +""'"";
				ClearToQuery()
				SetSearchExpr(strSearchExpr);
				ExecuteQuery();
				if(FirstRecord()){
					strMSISDNId     = GetFieldValue(""Id"");
				}
				else{
					strErrVal = ""RMSDA001""
					return(strErrVal);
				}
			}
			else{				
				if(GetFieldValue(""Type Identifier"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")) {
					strErrVal = ""RMSDA001"";
					return(strErrVal);
				}
				if(GetFieldValue(""Is Associated"") != ""Y"") {
					strErrVal = ""RMSDA002"";
					return(strErrVal);
				}
				strMSISDNId = GetFieldValue(""Id"");
			}
		}
		else {
			strErrVal = ""RMSDA001"";
			return(strErrVal);
		}
 	}
 	
//-------------------------------------------------------------------
//Locate the record in Number Mstr-Concat table and delete the record.
//-------------------------------------------------------------------

	with(bcNumberMasterConcat) {

		ActivateField(""Number Id"");
		ActivateField(""Concat Id"");
		
		IsSIMTwiceAssociated(blnIsSIMTwiceAssociated,bcNumberMasterConcat,strAssocStartId);
		
		ClearToQuery();
		SetSearchSpec(""Number Id"",strMSISDNId);
		ExecuteQuery();
		
		if(FirstRecord())
			intConcatId = GetFieldValue(""Concat Id"");
	
		ClearToQuery();
		SetSearchSpec(""Concat Id"",intConcatId);
		ExecuteQuery();
	    blnIsRecord = FirstRecord();

//-----------------------------------------------------------------------------
//Delete the records from Number Master concat having the concat id same as the
//concat id of the input number.
//-----------------------------------------------------------------------------

		while(blnIsRecord){
			strAssNumber[intRecCnt++] = GetFieldValue(""Number Id"");
		    blnIsRecord = NextRecord();
		}
				
		ClearToQuery();
		SetSearchSpec(""Number Id"",strMSISDNId);
		ExecuteQuery();
	    blnIsRecord = FirstRecord();
	    
	    if(FirstRecord()) {
		    strConcatId = GetFieldValue(""Concat Id"");
		    DeleteRecord();
	    }
	}

//-------------------------------------------------------------------------
//Locate the record in Association detai and delete the record.Then rebuild 
//the Concatenated number and update the concate table.
//-------------------------------------------------------------------------
	
	with(bcNumberAssocDetail) {
		ActivateField(""Association Id"");
		ActivateField(""Association Seq Num"");
		ActivateField(""Destination Num Id"");
		ActivateField(""Number Association Concat Id"");
		ActivateField(""Source Num Id"");
		ActivateField(""Row Id"");
		ActivateField(""Parent Ass Id"");
		
		ClearToQuery();
		SetSearchSpec(""Destination Num Id"", strMSISDNId);
		ExecuteQuery();
		if(FirstRecord()) 
			DeleteRecord();
		
		ClearToQuery();
		SetSearchSpec(""Source Num Id"", strAssocStartId);
		ExecuteQuery();
		while(FirstRecord()) {
			if(GetFieldValue(""Source Num Id"") != """") {
				strCnctAssNumber     = strCnctAssNumber + GetFieldValue(""Source Number"");
				strCnctAssNumberType = strCnctAssNumberType + GetFieldValue(""Source Number Type"");
			}
			
			strCnctAssNumber     = strCnctAssNumber + GetFieldValue(""Destination Number"");
			strCnctAssNumberType = strCnctAssNumberType + GetFieldValue(""Destination Number Type"");

			ClearToQuery();
			//SetSearchSpec(""Par Ass Id"", GetFieldValue(""Id""));KT 21-06-06
			SetSearchSpec(""Parent Ass Id"", GetFieldValue(""Id""));
			ExecuteQuery();
		}
	}
	
//-------------------------------------------------------------------------
//Updating the new concatenated number and number type in concat table
//-------------------------------------------------------------------------
	
	with(bcAssocNumberTypeDisplay) {
		ClearToQuery();
		SetSearchSpec(""Id"", strConcatId);
		ExecuteQuery();
		if(FirstRecord()) {
			SetFieldValue(""Associated Number"",strCnctAssNumber);
			SetFieldValue(""Associated Type"",strCnctAssNumberType);
			WriteRecord();
		}
	}
	
	ChangeNumberStatus(bcNumberMaster,bcNumberScheme,blnIsSIMTwiceAssociated,strAssNumber,Inputs);
	
  return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Association Rule Service PreInvoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Service PreInvoke.                            		  			  *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{

	var intReturn = ContinueOperation;	
	var strErrVal = """";

	var boNumberMaster;
	var bcNumberMaster;
	var boNumberAssociation;
	var bcAssocNumberTypeDisplay;
	var bcNumberAssocDetail;
	var bcNumberAssocMasterConcat;
	var bcNumberMasterConcat;
	var boNumberScheme;
	var bcNumberScheme;
	var blnIsPartial;


		boNumberMaster 			  = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
		bcNumberMaster 	          = boNumberMaster.GetBusComp(""RMS NM Number Enquiry For Update""); // RMS NM Number Enquiry 
		boNumberAssociation       = TheApplication().GetBusObject(""RMS NM Number Association"");
		bcAssocNumberTypeDisplay  = boNumberAssociation.GetBusComp(""RMS NM Association Number Type Display"");
		bcNumberAssocDetail       = boNumberAssociation.GetBusComp(""RMS NM Number Association Detail"");
		bcNumberAssocMasterConcat = boNumberAssociation.GetBusComp(""RMS NM Number Association Master Concat"");
		bcNumberMasterConcat      =	boNumberAssociation.GetBusComp(""RMS NM Number Master Concat"");
		boNumberScheme			  = TheApplication().GetBusObject(""RMS NM Number Scheme"");
		bcNumberScheme			  = boNumberScheme.GetBusComp(""RMS NM Number Scheme"");
	
		switch(MethodName){
		
			case ""DeAssociate"":
				intReturn = CancelOperation;
					blnIsPartial = Inputs.GetProperty(""Partial(Y/N)"");
					if(blnIsPartial ==""N""){
						strErrVal = DeAssociate(Inputs,bcNumberMaster,bcAssocNumberTypeDisplay,bcNumberAssocDetail,bcNumberAssocMasterConcat,bcNumberMasterConcat,bcNumberScheme);
						Outputs.SetProperty(""ErrorCode"",strErrVal);
						return(intReturn);
					}	
					else if(blnIsPartial ==""Y""){
						strErrVal = PartialDeassociation(Inputs,bcNumberMaster,bcAssocNumberTypeDisplay,bcNumberAssocDetail,bcNumberAssocMasterConcat,bcNumberMasterConcat,bcNumberScheme);
						Outputs.SetProperty(""ErrorCode"");
						return(intReturn);
					}
			break;
			
		}
		
		bcNumberMaster 	          = null;
		boNumberMaster 			  = null;
		
		bcAssocNumberTypeDisplay  = null;
		bcNumberAssocDetail       = null;
		bcNumberAssocMasterConcat = null;
		bcNumberMasterConcat      =	null;
		boNumberAssociation       = null;
		
		bcNumberScheme			  = null;
		boNumberScheme			  = null;
		return(intReturn);	
		
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed, corrected objects freeing sequqnce
---------------+------+--------+----------------------------------------------
*/
function DeleteFile(Inputs,Outputs)
{
			/*the command to print the file names will be, name sorted
			for dos 
			dir [directory]\[pattern] /ON /B > [directory]\filelist.txt
			for unix??
			ls [directory]/[pattern] | sort > [directory]/filelist.txt
			populate the filenames in a propertyset, simple to call 
			*/
	var strDirPath	=	Inputs.GetProperty(""SysPrefDirPath"");//""C:\\test\\"";
	var FilePath;
	var strArchDays	=	Inputs.GetProperty(""SysPrefArchDays"");
	var strOS		=	Inputs.GetProperty(""SysPrefOS"");
	var strMove		=	Inputs.GetProperty(""SysPrefMove"");
	var strArchDir	=	Inputs.GetProperty(""SysPrefArchDir"");
	var strFileList = 	"""";//TEMPORARY FILE TO HOLD THE LIST OF FILES
	

	var strOS;
	var msCMD;//command string to execute list directory function on the OS
	var msCMDunix;
	
	var intArchive;
try
{
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref = boSysPref.GetBusComp(""System Preferences"");

//-----GETTING THE Move/Delete FROM SYSTEM PREFERENCE------------
		bcSysPref.ActivateField(""Value"");
		
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",strMove);
		bcSysPref.ExecuteQuery();
	
		if(bcSysPref.FirstRecord()) 
		{	 
			strMove = bcSysPref.GetFieldValue(""Value"");
		}

//-----GETTING THE ARCHIVAL PERIOD FROM SYSTEM PREFERENCE------------
		bcSysPref.ActivateField(""Value"");
		
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",strArchDays);
		bcSysPref.ExecuteQuery();
	
		if(bcSysPref.FirstRecord()) 
		{	 
			intArchive = bcSysPref.GetFieldValue(""Value"");
		}
//-------------------------------------------------------------
//------GETTING THE OPERATING SYSTEM TYPE FROM SYSTEM PREFERENCE---

		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",strOS);
		bcSysPref.ExecuteQuery();
	
		if(bcSysPref.FirstRecord()) 
		{	 
			strOS = bcSysPref.GetFieldValue(""Value"");
		}

//-------------------------------------------------------------
//------GETTING THE DIRECTORY PATH FROM SYSTEM PREFERENCE---
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",strDirPath);
		bcSysPref.ExecuteQuery();
	
		if(bcSysPref.FirstRecord()) 
		{	 
			FilePath = bcSysPref.GetFieldValue(""Value"");
		}
//-------------------------------------------------------------


		if	(strMove	==	""N"")	//---REMOVE THE FILES
		{
					//---------------------------------------------------------------
					if(strOS == ""UNIX"")
					{
						msCMDunix="find "" + FilePath + "" -mtime +"" + intArchive +"" -exec rm {} +""; 
						//now execute the command on OS, can be risky
						Clib.system(msCMDunix);
					}
					else
					{
						strFileList = 	FilePath + ""temp_listoffiles.txt"";
						msCMD = ""dir "" + FilePath + "" /TC /OD | find \""/\"" > "" + strFileList;
						//now execute the command on OS, can be risky		
						Clib.system(msCMD);
						DeleteFile_Win(intArchive,FilePath,strFileList,strMove,strArchDir);
					}
					

		}
		else						//---MOVE THE FILES TO ARCHIVE DIR
		{
					//------GETTING THE ARCHIVE DIR PATH FROM SYSTEM PREFERENCE---
					bcSysPref.ClearToQuery();
					bcSysPref.SetSearchSpec(""Name"",strArchDir);
					bcSysPref.ExecuteQuery();
				
					if(bcSysPref.FirstRecord()) 
					{	 
						strArchDir = bcSysPref.GetFieldValue(""Value"");
					}


					if(strOS == ""UNIX"")
					{
						//$ find EXP_ITEM_SOLD_DIR_OUT -mtime -1 -type f -exec mv {} EXP_ITEM_S
						msCMDunix = "find "" + FilePath + "" -mtime +"" + intArchive +"" -type f -exec mv {} "" + strArchDir + "" \\\;""; 
						//now execute the command on OS, can be risky
						Clib.system(msCMDunix);
					}
					else
					{
						strFileList = 	FilePath + ""temp_listoffiles.txt"";
						msCMD = ""dir "" + FilePath + "" /TC /OD | find \""/\"" > "" + strFileList;
						//now execute the command on OS, can be risky		
						Clib.system(msCMD);
						DeleteFile_Win(intArchive,FilePath,strFileList,strMove,strArchDir);
					}

		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	//1.1 below
		 bcSysPref =	null;
		 boSysPref =	null;
	//1.1 above
	}	
	return CancelOperation;
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060710       | 1.1  | Garima | Changed the date time extraction to fetch 0th char onwards for 10 length
---------------+------+--------+----------------------------------------------
*/
function DeleteFile_Win(intArchive,FilePath,strFileList,strMove,strArchDir)
{
		var str;
		var strCreationDate;
		var strFilename;
		var dtFiledate;
		var dtSysdate;
		var strdiff;


try
{		
		var fpr1=Clib.fopen(strFileList,""r"");
		if(fpr1==null)
			TheApplication().RaiseErrorText(""Could not open File"");
		
		str=Clib.fgets(fpr1);
		
		while(!Clib.feof(fpr1))
		{
//1.1 below
				strCreationDate=str.substring(0,10);	//EXTRACTING FILE CREATION DATE
//1.1 above
				if(str != """")
				{
					dtFiledate = new Date(strCreationDate);	
		            dtSysdate = dtFiledate.toSystem();		
		            
					strdiff=(Clib.difftime(Clib.time(),dtSysdate))/86400;	//	CALCULATING DIFF B/W TODAY'S DATE AND FILE CREATION DATE
					
					if(strdiff >= intArchive)		//	FILES CREATED BEFORE ARCHIVAL PERIOD TO BE DELETED
					{
							strFilename=str.substring(39,str.length - 1);	//EXTRACTING FILENAME
							//  FILE SHOULD NOT BE PARENT OR ROOT DIRECTORY and THIS FILE SHOULD NOT BE DELETED
							if (Clib.isalnum(strFilename.charAt(0))  && (strFilename != ""temp_listoffiles.txt""))
							{
								if (strMove	==	""N"")	
								{
									if(Clib.remove(FilePath+strFilename)!=0)
										TheApplication().RaiseErrorText(""Could not delete the File---""+FilePath+strFilename);
								}
								else
								{
									Clib.rename(FilePath+strFilename,strArchDir+strFilename);
									Clib.remove(FilePath+strFilename);
								}
							}
								
					}
					else	// REMAINING FILES ARE NOT TO BE DELETED
					{
						break;
					}
	
				}	
			str=Clib.fgets(fpr1);	
		}//while end
			Clib.fclose(fpr1);
			
		if(Clib.remove(strFileList)!=0)	// REMOVING THE TEMPORARY FILE CREATED
			TheApplication().RaiseErrorText(""Could not delete the File---""+strFileList);

}//try end
	catch(e)  
	{
		if (fpr1 != null)
			Clib.fclose(fpr1);
			
		throw(e);
	}	
	
		
}//function end"
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
try{
		if(MethodName==""DeleteFile"")
			 DeleteFile(Inputs,Outputs);
	}
	catch(e)
	{
		TheApplication().RaiseErrorText(""Error:""+e);
	}
			 
	return (CancelOperation);
}
function GetBatchDetailsForAssoc(Inputs, Outputs)
{
	try
	{
		var vBatchId = """";
		
		vBatchId = Inputs.GetProperty(""BatchId"");

		var boRMSNMMain = TheApplication().GetBusObject(""RMS Starter Pack Automation"");
		var bcRMSNMMain = boRMSNMMain.GetBusComp(""RMS Starter Pack Automation"");

		var strSearchStr = ""[Id] = '"" + vBatchId + ""'"";
		
		with(bcRMSNMMain)
		{
			ActivateField(""Quantity"");
			ActivateField(""R1 Association Rule Type"");
			ActivateField(""Start Number IMSI"");
			ActivateField(""Start Number ICCID"");
			ActivateField(""Block Name ICCID"");
			ActivateField(""Type ICCID"");
			ActivateField(""Scheme Name ICCID"");
			ActivateField(""R1 Association Rule"");
			ActivateField(""Type IMSI"");
			ActivateField(""Scheme Name IMSI"");
			ActivateField(""Block Name IMSI"");
			
			ClearToQuery();
			SetSearchExpr(strSearchStr);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				Outputs.SetProperty(""Quantity 2"",GetFieldValue(""Quantity""));
				Outputs.SetProperty(""R1 Association Rule Type"",GetFieldValue(""R1 Association Rule Type""));
				Outputs.SetProperty(""IMSI Complete Start Number"",GetFieldValue(""Start Number IMSI""));
				Outputs.SetProperty(""ICCID Complete Start Number"",GetFieldValue(""Start Number ICCID""));
				Outputs.SetProperty(""ICCID Block Name"",GetFieldValue(""Block Name ICCID""));
				Outputs.SetProperty(""ICCID Type"",GetFieldValue(""Type ICCID""));
				Outputs.SetProperty(""ICCID Scheme Name"",GetFieldValue(""Scheme Name ICCID""));
				Outputs.SetProperty(""R1 Association Rule Name"",GetFieldValue(""R1 Association Rule""));
				Outputs.SetProperty(""IMSI Type"",GetFieldValue(""Type IMSI""));
				Outputs.SetProperty(""IMSI Scheme Name"",GetFieldValue(""Scheme Name IMSI""));
				Outputs.SetProperty(""IMSI Block Name"",GetFieldValue(""Block Name IMSI""));
			}
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcRMSNMMain = null;
		boRMSNMMain = null;
	}
}
function GetBatchDetailsForGen(Inputs, Outputs)
{
	try
	{
		var vBatchId = """";
		
		vBatchId = Inputs.GetProperty(""BatchId"");

		var boRMSNMMain = TheApplication().GetBusObject(""RMS Starter Pack Automation"");
		var bcRMSNMMain = boRMSNMMain.GetBusComp(""RMS Starter Pack Automation"");

		var strSearchStr = ""[Id] = '"" + vBatchId + ""'"";
		
		with(bcRMSNMMain)
		{
			ActivateField(""Quantity"");
			ActivateField(""Block Name ICCID"");
			ActivateField(""Scheme Name ICCID"");
			ActivateField(""Start Number ICCID String"");
			ActivateField(""Block Name IMSI"");
			ActivateField(""Scheme Name IMSI"");
			ActivateField(""Start Number IMSI String"");
		//	ActivateField(""Block Name MSISDN"");
		//	ActivateField(""Scheme Name MSISDN"");
		//	ActivateField(""Start Number MSISDN String"");
			
			ClearToQuery();
			SetSearchExpr(strSearchStr);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				Outputs.SetProperty(""Quantity 1"",GetFieldValue(""Quantity""));
				Outputs.SetProperty(""ICCID Block Name"",GetFieldValue(""Block Name ICCID""));
				Outputs.SetProperty(""ICCID Scheme Name"",GetFieldValue(""Scheme Name ICCID""));
				Outputs.SetProperty(""ICCID Start Number"",GetFieldValue(""Start Number ICCID String""));
				Outputs.SetProperty(""IMSI Block Name"",GetFieldValue(""Block Name IMSI""));
				Outputs.SetProperty(""IMSI Scheme Name"",GetFieldValue(""Scheme Name IMSI""));
				Outputs.SetProperty(""IMSI Start Number"",GetFieldValue(""Start Number IMSI String""));
			//	Outputs.SetProperty(""MSISDN Block Name"",GetFieldValue(""Block Name MSISDN""));
			//	Outputs.SetProperty(""MSISDN Scheme Name"",GetFieldValue(""Scheme Name MSISDN""));
			//	Outputs.SetProperty(""MSISDN Start Number"",GetFieldValue(""Start Number MSISDN String""));
			}
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcRMSNMMain = null;
		boRMSNMMain = null;
	}
}
function GetBatchDetailsForSIMOrder(Inputs, Outputs)
{
	try
	{
		var vBatchId = """";
		
		vBatchId = Inputs.GetProperty(""BatchId"");

		var boRMSNMMain = TheApplication().GetBusObject(""RMS Starter Pack Automation"");
		var bcRMSNMMain = boRMSNMMain.GetBusComp(""RMS Starter Pack Automation"");

		var strSearchStr = ""[Id] = '"" + vBatchId + ""'"";
		
		with(bcRMSNMMain)
		{
			ActivateField(""Quantity"");
			ActivateField(""Block Name IMSI"");
			ActivateField(""Scheme Name IMSI"");
			ActivateField(""Start Number IMSI"");
			ActivateField(""Bill To Address"");
			ActivateField(""Bill To Organisation"");
			ActivateField(""SIM Card Configuration Name"");
			ActivateField(""Contact Last Name"");
			ActivateField(""PO Reference Number"");
			ActivateField(""SIM Order Description"");
			ActivateField(""SIM Supplier Name"");
			ActivateField(""STC Transport Key"");
			ActivateField(""STC Transport 3GOP Key"");
			ActivateField(""Profile"");
			
			ClearToQuery();
			SetSearchExpr(strSearchStr);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				Outputs.SetProperty(""Quantity 3"",GetFieldValue(""Quantity""));
				Outputs.SetProperty(""IMSI Block Name"",GetFieldValue(""Block Name IMSI""));
				Outputs.SetProperty(""IMSI Scheme Name"",GetFieldValue(""Scheme Name IMSI""));
				Outputs.SetProperty(""IMSI Complete Start Number"",GetFieldValue(""Start Number IMSI""));
				Outputs.SetProperty(""Bill To Address"",GetFieldValue(""Bill To Address""));
				Outputs.SetProperty(""Bill to Organisation"",GetFieldValue(""Bill To Organisation""));
				Outputs.SetProperty(""Card Config"",GetFieldValue(""SIM Card Configuration Name""));
				Outputs.SetProperty(""Contact Last Name"",GetFieldValue(""Contact Last Name""));
				Outputs.SetProperty(""PO Ref Number"",GetFieldValue(""PO Reference Number""));
				Outputs.SetProperty(""SIM Order Description"",GetFieldValue(""SIM Order Description""));
				Outputs.SetProperty(""Supplier Name"",GetFieldValue(""SIM Supplier Name""));
				Outputs.SetProperty(""Transport Key"",GetFieldValue(""STC Transport Key""));
				Outputs.SetProperty(""Transport 3GOp Key"",GetFieldValue(""STC Transport 3GOP Key""));
				Outputs.SetProperty(""Profile"",GetFieldValue(""Profile""));
			}
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcRMSNMMain = null;
		boRMSNMMain = null;
	}
}
function GetBatches(Inputs, Outputs)
{
	try
	{
		var vResponseCode1 = ""99999"";
		var vResponseCode2 = ""99999"";
		var vResponseCode3 = ""99999"";
		var vResponseMessage1 = ""No Batches to Process"";
		var vResponseMessage2 = ""No Batches to Process"";
		var vResponseMessage3 = ""No Batches to Process"";
		var vBatchIdStage1 = ""None"";
		var vBatchIdStage2 = ""None"";
		var vBatchIdStage3 = ""None"";
		
		var boRMSNMMain = TheApplication().GetBusObject(""RMS Starter Pack Automation"");
		var bcRMSNMMain = boRMSNMMain.GetBusComp(""RMS Starter Pack Automation"");

		var strSearchStr1 = ""[Status] = 'Submitted' AND [Sub Status] = 'Submitted'"";
		var strSearchStr2 = ""[Status] = 'Submitted' AND [Sub Status] = 'Number Generation in Progress'"";
		var strSearchStr3 = ""[Status] = 'Numbers Generated' AND [Sub Status] = 'Numbers Generated'"";
	//	var strSearchStr4 = ""[Status] = 'Numbers Generated' AND [Sub Status] = 'R1 Association in Progress'"";
		var strSearchStr5 = ""[Status] = 'R1 Association Complete' AND [Sub Status] = 'R1 Association Complete'"";
	//	var strSearchStr6 = ""[Status] = 'R1 Association Complete' AND [Sub Status] = 'SIM Order in Progress'"";
		
		bcRMSNMMain.ClearToQuery();
		bcRMSNMMain.SetSearchExpr(strSearchStr2);
		bcRMSNMMain.ExecuteQuery(ForwardOnly);
		if(bcRMSNMMain.FirstRecord())
		{
			vBatchIdStage1 = bcRMSNMMain.GetFieldValue(""Id"");
			vResponseCode1 = ""00001"";
			vResponseMessage1 = ""Currently the Batch: "" + vBatchIdStage1 + "" is being Processed"";
		}
		else
		{
			bcRMSNMMain.ClearToQuery();
			bcRMSNMMain.SetSearchExpr(strSearchStr1);
			bcRMSNMMain.ExecuteQuery(ForwardOnly);
			if(bcRMSNMMain.FirstRecord())
			{
				vBatchIdStage1 = bcRMSNMMain.GetFieldValue(""Id"");
				vResponseCode1 = ""00000"";
				vResponseMessage1 = ""Success for the Batch: "" + vBatchIdStage1;
			}
		}
		
	/*	bcRMSNMMain.ClearToQuery();
		bcRMSNMMain.SetSearchExpr(strSearchStr4);
		bcRMSNMMain.ExecuteQuery(ForwardOnly);
		if(bcRMSNMMain.FirstRecord())
		{
			vBatchIdStage2 = bcRMSNMMain.GetFieldValue(""Id"");
			vResponseCode2 = ""00001"";
			vResponseMessage2 = ""Currently the Batch: "" + vBatchIdStage2 + "" is being Processed"";
		}
		else
		{*/
			bcRMSNMMain.ClearToQuery();
			bcRMSNMMain.SetSearchExpr(strSearchStr3);
			bcRMSNMMain.ExecuteQuery(ForwardOnly);
			if(bcRMSNMMain.FirstRecord())
			{
				vBatchIdStage2 = bcRMSNMMain.GetFieldValue(""Id"");
				vResponseCode2 = ""00000"";
				vResponseMessage2 = ""Success for the Batch: "" + vBatchIdStage2;
			}
	/*	}
		
		bcRMSNMMain.ClearToQuery();
		bcRMSNMMain.SetSearchExpr(strSearchStr6);
		bcRMSNMMain.ExecuteQuery(ForwardOnly);
		if(bcRMSNMMain.FirstRecord())
		{
			vBatchIdStage3 = bcRMSNMMain.GetFieldValue(""Id"");
			vResponseCode3 = ""00001"";
			vResponseMessage3 = ""Currently the Batch: "" + vBatchIdStage3 + "" is being Processed"";
		}
		else
		{*/
			bcRMSNMMain.ClearToQuery();
			bcRMSNMMain.SetSearchExpr(strSearchStr5);
			bcRMSNMMain.ExecuteQuery(ForwardOnly);
			if(bcRMSNMMain.FirstRecord())
			{
				vBatchIdStage3 = bcRMSNMMain.GetFieldValue(""Id"");
				vResponseCode3 = ""00000"";
				vResponseMessage3 = ""Success for the Batch: "" + vBatchIdStage3;
			}
	//	}
		Outputs.SetProperty(""ResponseCode1"", vResponseCode1);
		Outputs.SetProperty(""ResponseCode2"", vResponseCode2);
		Outputs.SetProperty(""ResponseCode3"", vResponseCode3);
		Outputs.SetProperty(""ResponseMessage1"", vResponseMessage1);
		Outputs.SetProperty(""ResponseMessage2"", vResponseMessage2);
		Outputs.SetProperty(""ResponseMessage3"", vResponseMessage3);
		Outputs.SetProperty(""BatchIdStage1"", vBatchIdStage1);
		Outputs.SetProperty(""BatchIdStage2"", vBatchIdStage2);
		Outputs.SetProperty(""BatchIdStage3"", vBatchIdStage3);

	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcRMSNMMain = null;
		boRMSNMMain = null;
	}
}
function InsertAssociationMaster(Inputs, Outputs)
{
	try
	{
		var vRowId = ""None"";
		var vAssId = ""None"";
		var vSourceRowId = ""None"";
		var vDestRowId = ""None"";
		Outputs.SetProperty(""MstrRowId"",vRowId);
		Outputs.SetProperty(""AssociationId"",vAssId);
		Outputs.SetProperty(""SourceRowId"",vSourceRowId);
		Outputs.SetProperty(""DestRowId"",vDestRowId);
		var vRuleName = Inputs.GetProperty(""RuleName"");
		var vSourceType = Inputs.GetProperty(""SourceType"");
		var vDestType = Inputs.GetProperty(""DestType"");
		var vDestScheme = Inputs.GetProperty(""DestScheme"");
		var vDestBlock = Inputs.GetProperty(""DestBlock"");
		var vDestStartNum = Inputs.GetProperty(""DestStartNum"");
		var vSourceScheme = Inputs.GetProperty(""SourceScheme"");
		var vSourceBlock = Inputs.GetProperty(""SourceBlock"");
		var vSourceStartNum = Inputs.GetProperty(""SourceStartNum"");
		var vQuantity = Inputs.GetProperty(""Quantity"");

		var boNumAss = TheApplication().GetBusObject(""RMS NM Number Association"");
		var bcNumAss = boNumAss.GetBusComp(""RMS NM Number Association Master"");
		var bcNumAssStartNum = boNumAss.GetBusComp(""RMS NM Number Association Start Number"");
		
		with(bcNumAss)
		{
			InvokeMethod(""SetAdminMode"",""TRUE""); 
			SetViewMode(AllView);
			ActivateField(""Id"");
			ActivateField(""Association Id"");
			ActivateField(""Rule Name"");
			NewRecord(1);
			SetFieldValue(""Rule Name"",vRuleName);
			WriteRecord();
			vRowId = GetFieldValue(""Id"");
			vAssId = GetFieldValue(""Association Id"");
			Outputs.SetProperty(""MstrRowId"",vRowId);
			Outputs.SetProperty(""AssociationId"",vAssId);
		}
		
		with(bcNumAssStartNum)
		{
			InvokeMethod(""SetAdminMode"",""TRUE""); 
			SetViewMode(AllView);
			ActivateField(""Id"");
			ActivateField(""Ass Id"");
			ActivateField(""Scheme Name"");
			ActivateField(""Block Name"");
			ActivateField(""Start Number"");
			ActivateField(""Quantity"");
			ActivateField(""Type"");
			ClearToQuery();
			var strSearchExpr = ""[Ass Id] = '"" + vRowId + ""' AND [Type] = '"" + vSourceType + ""'"";
			SetSearchExpr(strSearchExpr);
			ExecuteQuery(ForwardOnly);
			var isRecord = FirstRecord();
			if(isRecord)   	
			{
				vSourceRowId = GetFieldValue(""Id"");
				SetFieldValue(""Scheme Name"",vSourceScheme);
				SetFieldValue(""Block Name"",vSourceBlock);
			//	SetFieldValue(""Start Number"",vSourceStartNum);
				
				var pickBC = GetPicklistBusComp(""Start Number"");
				with (pickBC)
				{
					ClearToQuery();
					ActivateField(""Number String"");
					SetSearchSpec(""Number String"",vSourceStartNum);
					ExecuteQuery(ForwardOnly);
					if (FirstRecord())
						Pick();
				}
				pickBC = null;
				
				SetFieldValue(""Quantity"",vQuantity);
				WriteRecord();
			}
			
			ClearToQuery();
			var strSearchExpr2 = ""[Ass Id] = '"" + vRowId + ""' AND [Type] = '"" + vDestType + ""'"";
			SetSearchExpr(strSearchExpr2);
			ExecuteQuery(ForwardOnly);
			var isRecord2 = FirstRecord();
			if(isRecord2)   	
			{
				vDestRowId = GetFieldValue(""Id"");
				SetFieldValue(""Scheme Name"",vDestScheme);
				SetFieldValue(""Block Name"",vDestBlock);
			//	SetFieldValue(""Start Number"",vDestStartNum);
				
				var pickBC2 = GetPicklistBusComp(""Start Number"");
				with (pickBC2)
				{
					ClearToQuery();
					ActivateField(""Number String"");
					SetSearchSpec(""Number String"",vDestStartNum);
					ExecuteQuery(ForwardOnly);
					if (FirstRecord())
						Pick();
				}
				pickBC2 = null;
				
				WriteRecord();
			}
			Outputs.SetProperty(""SourceRowId"",vSourceRowId);
			Outputs.SetProperty(""DestRowId"",vDestRowId);
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcNumAssStartNum = null;
		bcNumAss = null;
		boNumAss = null;
	}
}
function InsertICCIDNumGenLog(Inputs, Outputs)
{
	try
	{
		var vRowId = ""None"";
		Outputs.SetProperty(""MstrRowId"",vRowId);
		var vICCIDBlock = Inputs.GetProperty(""ICCIDBlock"");
		var vICCIDScheme = Inputs.GetProperty(""ICCIDScheme"");
		var vICCIDStartNum = Inputs.GetProperty(""ICCIDStartNum"");
		var vQuantity = Inputs.GetProperty(""Quantity"");

		var boNumGen = TheApplication().GetBusObject(""RMS NM Number Generation"");
		var bcNumGen = boNumGen.GetBusComp(""RMS NM Number Generation"");
		
		with(bcNumGen)
		{
			InvokeMethod(""SetAdminMode"",""TRUE""); 
			SetViewMode(AllView);
			ActivateField(""Id"");
			ActivateField(""Scheme Name"");
			ActivateField(""Block Name"");
			ActivateField(""Start String Number"");
			ActivateField(""Quantity Str"");
			NewRecord(1);
			SetFieldValue(""Scheme Name"",vICCIDScheme);
			SetFieldValue(""Block Name"",vICCIDBlock);
			SetFieldValue(""Start String Number"",vICCIDStartNum);
			SetFieldValue(""Quantity Str"",vQuantity);
			WriteRecord();
			vRowId = GetFieldValue(""Id"");
			Outputs.SetProperty(""MstrRowId"",vRowId);
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcNumGen = null;
		boNumGen = null;
	}
}
function InsertIMSINumGenLog(Inputs, Outputs)
{
	try
	{
		var vRowId = ""None"";
		Outputs.SetProperty(""MstrRowId"",vRowId);
		var vIMSIBlock = Inputs.GetProperty(""IMSIBlock"");
		var vIMSIScheme = Inputs.GetProperty(""IMSIScheme"");
		var vIMSIStartNum = Inputs.GetProperty(""IMSIStartNum"");
		var vQuantity = Inputs.GetProperty(""Quantity"");

		var boNumGen = TheApplication().GetBusObject(""RMS NM Number Generation"");
		var bcNumGen = boNumGen.GetBusComp(""RMS NM Number Generation"");
		
		with(bcNumGen)
		{
			InvokeMethod(""SetAdminMode"",""TRUE""); 
			SetViewMode(AllView);
			ActivateField(""Id"");
			ActivateField(""Scheme Name"");
			ActivateField(""Block Name"");
			ActivateField(""Start String Number"");
			ActivateField(""Quantity Str"");
			NewRecord(1);
			SetFieldValue(""Scheme Name"",vIMSIScheme);
			SetFieldValue(""Block Name"",vIMSIBlock);
			SetFieldValue(""Start String Number"",vIMSIStartNum);
			SetFieldValue(""Quantity Str"",vQuantity);
			WriteRecord();
			vRowId = GetFieldValue(""Id"");
			Outputs.SetProperty(""MstrRowId"",vRowId);
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcNumGen = null;
		boNumGen = null;
	}
}
function InsertOrderLineDetail(Inputs, Outputs)
{
	try
	{
		var vRowId = ""None"";
		Outputs.SetProperty(""DetailRowId"",vRowId);
		var vOrderId = Inputs.GetProperty(""OrderId"");
		var vSchemeName = Inputs.GetProperty(""SchemeName"");
		var vBlockName = Inputs.GetProperty(""BlockName"");
		var vStartingNumber = Inputs.GetProperty(""StartingNumber"");
		var vCardConfig = Inputs.GetProperty(""CardConfig"");
		var vQuantity = Inputs.GetProperty(""Quantity"");
		var vSalesChannelName = Inputs.GetProperty(""SalesChannelName"");
		var vOrgNameFinal = vSalesChannelName;
		var vFound = vSalesChannelName.lastIndexOf("", "");
		if(vFound != ""-1"")
		{
			vOrgNameFinal = vSalesChannelName.substring(0, ToNumber(vFound));
		}
		
		var boSIMOrd = TheApplication().GetBusObject(""RMS SIM Order"");
		var bcSIMOrdLine = boSIMOrd.GetBusComp(""RMS SIM Order Line"");
		
		with(bcSIMOrdLine)
		{
			InvokeMethod(""SetAdminMode"",""TRUE""); 
			SetViewMode(AllView);
			ActivateField(""Id"");
			ActivateField(""Rule Name"");
			NewRecord(1);
			SetFieldValue(""Order Id"",vOrderId);
			SetFieldValue(""SIM Card Config Name"",vCardConfig);
			SetFieldValue(""Scheme Name"",vSchemeName);
			SetFieldValue(""Block Name"",vBlockName);
			SetFieldValue(""Starting Number"",vStartingNumber);
			SetFieldValue(""Quantity Ordered"",vQuantity);
			SetFieldValue(""Sales Channel Name"",vOrgNameFinal);
			WriteRecord();
			vRowId = GetFieldValue(""Id"");
			Outputs.SetProperty(""DetailRowId"",vRowId);
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcSIMOrdLine = null;
		boSIMOrd = null;
	}
}
function InsertSIMOrder(Inputs, Outputs)
{
	try
	{
		var vRowId = ""None"";
		var vOrdNum = ""None"";
		var vTransport3GOpKey = ""None"";
		var v3GOpFlg = ""N"";
		if(Inputs.GetProperty(""Transport3GOpKey"") != """")
		{
			v3GOpFlg = ""Y"";
			vTransport3GOpKey = Inputs.GetProperty(""Transport3GOpKey"");
		}
		var vProfile = ""None"";
		var vProfFlg = ""N"";
		if(Inputs.GetProperty(""Profile"") != """")
		{
			vProfFlg = ""Y"";
			vProfile = Inputs.GetProperty(""Profile"");
		}
		Outputs.SetProperty(""MstrRowId"",vRowId);
		Outputs.SetProperty(""OrderNumber"",vOrdNum);
		var vDescription = Inputs.GetProperty(""Description"");
		var vOrganizationName = Inputs.GetProperty(""OrganizationName"");
		var vOrgNameFinal = vOrganizationName;
		var vFound = vOrganizationName.lastIndexOf("", "");
		if(vFound != ""-1"")
		{
			vOrgNameFinal = vOrganizationName.substring(0, ToNumber(vFound));
		}
		
		var vPORequisitionRefNumber = Inputs.GetProperty(""PORequisitionRefNumber"");
		var vSupplierName = Inputs.GetProperty(""SupplierName"");
		var vTransportKey = Inputs.GetProperty(""TransportKey"");
		var vBillToAddress = Inputs.GetProperty(""BillToAddress"");
		var vContactLastName = Inputs.GetProperty(""ContactLastName"");

		var boSIMOrd = TheApplication().GetBusObject(""RMS SIM Order"");
		var bcSIMOrd = boSIMOrd.GetBusComp(""RMS SIM Order"");

		with(bcSIMOrd)
		{
			InvokeMethod(""SetAdminMode"",""TRUE""); 
			SetViewMode(AllView);
			ActivateField(""Id"");
			ActivateField(""Order Number"");
			ActivateField(""Description"");
			ActivateField(""Organization Name"");
			ActivateField(""PO Requisition Ref Number"");
			ActivateField(""Supplier Name"");
			ActivateField(""Transport Key"");
			ActivateField(""Bill To Address"");
			ActivateField(""Contact Last Name"");
			if(v3GOpFlg == ""Y"")
			{
				ActivateField(""Transport 3GOP key"");
			}
			if(vProfFlg == ""Y"")
			{
				ActivateField(""Profile"");
			}

			NewRecord(1);
			SetFieldValue(""Description"",vDescription);
			SetFieldValue(""PO Requisition Ref Number"",vPORequisitionRefNumber);
			SetFieldValue(""Transport Key"",vTransportKey);
			SetFieldValue(""Organization Name"",vOrgNameFinal);

			if(v3GOpFlg == ""Y"")
			{
				SetFieldValue(""Transport 3GOP key"", vTransport3GOpKey);
			}
			if(vProfFlg == ""Y"")
			{
				SetFieldValue(""Profile"", vProfile);
			}

			var pickBC2 = GetPicklistBusComp(""Supplier Name"");
			with (pickBC2)
			{
				InvokeMethod(""SetAdminMode"",""TRUE""); 
				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(""Name"");
				var strSearchExpr2 = ""[Name] = '"" + vSupplierName + ""'"";
				SetSearchExpr(strSearchExpr2);
				ExecuteQuery(ForwardOnly);
				if (FirstRecord())
					Pick();
			}
			pickBC2 = null;

			var pickBC4 = GetPicklistBusComp(""Contact Last Name"");
			with (pickBC4)
			{
				ClearToQuery();
				ActivateField(""Last Name"");
				SetSearchSpec(""Last Name"",vContactLastName);
				ExecuteQuery(ForwardOnly);
				if (FirstRecord())
					Pick();
			}
			pickBC4 = null;

			var pickBC3 = GetPicklistBusComp(""Bill To Address"");
			with (pickBC3)
			{
				ClearToQuery();
				ActivateField(""Street Address"");
				var strSearchExpr = ""[Street Address] = '"" + vBillToAddress + ""'"";
				SetSearchExpr(strSearchExpr);
				ExecuteQuery(ForwardOnly);
				if (FirstRecord())
					Pick();
			}
			pickBC3 = null;

			WriteRecord();
			vRowId = GetFieldValue(""Id"");
			vOrdNum = GetFieldValue(""Order Number"");
			Outputs.SetProperty(""MstrRowId"",vRowId);
			Outputs.SetProperty(""OrderNumber"",vOrdNum);
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcSIMOrd = null;
		boSIMOrd = null;
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""GetBatches"")
	{
		GetBatches(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == ""InsertAssociationMaster"")
	{
		InsertAssociationMaster(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == ""InsertOrderLineDetail"")
	{
		InsertOrderLineDetail(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == ""InsertSIMOrder"")
	{
		InsertSIMOrder(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == ""UpdateBatchStatus"")
	{
		UpdateBatchStatus(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == ""GetBatchDetailsForGen"")
	{
		GetBatchDetailsForGen(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == ""GetBatchDetailsForAssoc"")
	{
		GetBatchDetailsForAssoc(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == ""GetBatchDetailsForSIMOrder"")
	{
		GetBatchDetailsForSIMOrder(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == ""InsertICCIDNumGenLog"")
	{
		InsertICCIDNumGenLog(Inputs, Outputs);
		return(CancelOperation);
	}
	if(MethodName == ""InsertIMSINumGenLog"")
	{
		InsertIMSINumGenLog(Inputs, Outputs);
		return(CancelOperation);
	}
	return(ContinueOperation);
}
function UpdateBatchStatus(Inputs, Outputs)
{
	try
	{
		var vBatchId = """";
		var vResponseCode = """";
		var vResponseMessage = """";
		var vStatus = """";
		var vSubStatus = """";
		
		var vAssociationId = ""None"";
		var vAssIdFlg = ""N"";
		if(Inputs.GetProperty(""AssociationId"") != """")
		{
			vAssIdFlg = ""Y"";
			vAssociationId = Inputs.GetProperty(""AssociationId"");
		}
		
		var vOrderNumber = ""None"";
		var vOrdNumFlg = ""N"";
		if(Inputs.GetProperty(""OrderNumber"") != """")
		{
			vOrdNumFlg = ""Y"";
			vOrderNumber = Inputs.GetProperty(""OrderNumber"");
		}
		
		vBatchId = Inputs.GetProperty(""BatchId"");
	//	vResponseCode = Inputs.GetProperty(""PesponseCode"");
	//	vResponseMessage = Inputs.GetProperty(""ResponseMessage"");
		vStatus = Inputs.GetProperty(""Status"");
		vSubStatus = Inputs.GetProperty(""SubStatus"");
		
		var boRMSNMMain = TheApplication().GetBusObject(""RMS Starter Pack Automation"");
		var bcRMSNMMain = boRMSNMMain.GetBusComp(""RMS Starter Pack Automation"");

		var strSearchStr = ""[Id] = '"" + vBatchId + ""'"";
		
		with(bcRMSNMMain)
		{
			ActivateField(""Status"");
			ActivateField(""Sub Status"");
			if(vAssIdFlg == ""Y"")
			{
				ActivateField(""Association Id"");
			}
			if(vOrdNumFlg == ""Y"")
			{
				ActivateField(""Order Number"");
			}

		//	ActivateField(""Response Code"");
		//	ActivateField(""Response Message"");
			ClearToQuery();
			SetSearchExpr(strSearchStr);
			ExecuteQuery(ForwardOnly);
			if(bcRMSNMMain.FirstRecord())
			{
		//		SetFieldValue(""Response Code"",vResponseCode);
		//		SetFieldValue(""Response Message"",vResponseMessage);
				SetFieldValue(""Status"",vStatus);
				SetFieldValue(""Sub Status"",vSubStatus);
				
				if(vAssIdFlg == ""Y"")
				{
					SetFieldValue(""Association Id"", vAssociationId);
				}
				if(vOrdNumFlg == ""Y"")
				{
					SetFieldValue(""Order Number"", vOrderNumber);
				}
				
				WriteRecord();
			}
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcRMSNMMain = null;
		boRMSNMMain = null;
	}
}
"var strGroupCode		= 		""""; // Row ID of the Partner with Type = ""GroupCode""
var strBlkPeriod		=  		""""; // Blocking Period
var strSplCatCheck		=		""""; // Category constraint on numbers returned"
"/*---------+-------+-------------+-----------------------------------------------------------
Date       | Ver   | By          | Comments
-----------+-------+-------------+-----------------------------------------------------------
????????   | 1.0   | TechM       | Creation
20070321   | 1.1   | Prasad      | Changed to use new BC : STC Partner Product
20071107   | 2.0   | Ramakrishna | Added for Wave5 Req
----------------------------------------------------------------------------------------*/
function BlockNumber(&Inputs,&Outputs)
{

	var strPartnerMSISDN	= 		Inputs.GetProperty(""PartnerMSISDN"");
	var strMSISDN			=		Inputs.GetProperty(""MSISDNnumber"");
//2.0 below
	var strOldMSISDN		=		Inputs.GetProperty(""OldMSISDN"");
	var strICCID			=		Inputs.GetProperty(""ICCID"");
	//var strSubcriptionId	=		Inputs.GetProperty(""SubcriptionId"");
	var blnIsRecord;
	
	var boReqQue			= 		TheApplication().GetBusObject(""RMS Number Selection BO"");
	var bcReqQue 			= 		boReqQue.GetBusComp(""RMS Number Selection Request Queue"");
//2.0 above
	
	var boNumEnq			= 		TheApplication().GetBusObject(""RMS NM MSISDN Number Enquiry"");
	var bcNumEnq 			= 		boNumEnq.GetBusComp(""RMS NM MSISDN Number Enquiry"");
	
	var boPartner 			= 		TheApplication().GetBusObject(""Channel Partner"");
	var bcPartner			=		boPartner.GetBusComp(""Channel Partner"");
//1.1 below
	var bcPartnerProduct	= 		boPartner.GetBusComp(""STC Partner Product"");						
//1.1 below

    var strSearchExp         = 		"""";
    
    var blnIsRec; 
    var dtObj;									// Date Object with Current DateTime 
   	var dtBlkDate;    							// Date Object with Time as End of the day, midnight
	var strBlkDate			=		"""";			// String containing ""dtBlkDate"" date in Siebel format
	var strBlkDate1			=		"""";
	var strCurrentDate;


	var tm=Clib.localtime(Clib.time());
	Clib.strftime(strCurrentDate,""%m/%d/%Y %H:%M:%S"",tm);					//	Current time in Siebel format
	
	
	try
	{
	if ( strPartnerMSISDN == """" || strMSISDN == """" || strOldMSISDN == """" || strICCID == """" )
	{
				Outputs.SetProperty(""Error Code"", ""RMSINP001"");
				Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSINP001""));	
	}
	else
	{
		getSystemPref();
		
	if(GetQuota(""Reservation"",bcPartner,bcPartnerProduct,Inputs,Outputs))	// There is sufficient quota for Reservation
	{
		//RK added for wave5
		with (bcReqQue) {
			SetViewMode(AllView);
			ActivateField(""Old MSISDN"");
			ActivateField(""Request Status"");
			ClearToQuery();
			SetSearchSpec(""Old MSISDN"",strOldMSISDN);
			SetSearchSpec(""Request Status"",TheApplication().InvokeMethod(""LookupValue"",""RMS_NUMBER_SELECTION_STATUS"",""Pending""));
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();
		}//With END
	   if(!blnIsRecord){ 
	    with (bcNumEnq)
	    {
	    		ActivateField(""Number String Checksum"");
	    		ActivateField(""Number Type Identifier Denorm"");	 
	    		ActivateField(""Status"");	 	    		   		
	    		ActivateField(""Is Associated"");	
				ActivateField(""Record Blocked For"");
				ActivateField(""Record Blocking Date"");

				ClearToQuery();
				

				strSearchExp	+=	""[Number String Checksum] = '"" + strMSISDN + ""' AND "";
				strSearchExp	+=	""[Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""' AND ""; 
				strSearchExp	+=	""[Allocated To] = '"" + strGroupCode + ""' AND "";
				strSearchExp	+=	""[Is Associated] = 'N' AND "";
				strSearchExp	+=	""[Number Type Identifier Denorm] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""MSISDN"") + ""'"";				

//----------- ADD Search spec for category constraints---------

					var strSearchCat	=	"""";
					strSearchCat	+=	"" AND ([Special Category Type] = ''"";

					if(strSplCatCheck != """")	// some constraint on category exists
					{
							var strArr			=	strSplCatCheck.split("";"");
							if (strArr != """")
							{
				
								for (var i = 0; i < strArr.length; i++)
								{
									strSearchCat	+=	"" OR "";
									strSearchCat	+=	""[Special Category Type] = '"";
									strSearchCat	+=	TheApplication().InvokeMethod(""LookupValue"",""RMS_CATEGORY_NAME"",strArr[i]);
									strSearchCat	+=	""'"";	
								}
								
							}
					}
					strSearchCat	+=	"")"";
					strSearchExp	+= strSearchCat;

//-------------------------------------------------------------------------------


				SetSearchExpr(strSearchExp);
				ExecuteQuery(ForwardOnly);
				blnIsRec = FirstRecord();
				
				
				if(blnIsRec)	// MSISDN numbers found
				{

							dtObj			=	Date.fromSystem(Clib.time());		// get the date Object 
						
							//dtObj.setHours(23,59,59,999);//KT 20071113 Commented							// Set the time to end of the day midnight	
							//dtBlkDate		=	new Date(dtObj.getTime() + 1001);	// Add 1001 milliseconds to it to get ""00:00:01""					
							
							//	Numbers to be released on 24:00 hr of the day after the 'strBlkPeriod' days
							//	Add 1001 milliseconds to it to get ""00:00:01"" + the No.of days specified in Block Period 					
							
							//dtBlkDate		=	new Date(dtObj.getTime() + 1001 + (strBlkPeriod * 24 * 60 * 60 * 1000));	
							dtBlkDate		=	new Date(dtObj.getTime() +((strBlkPeriod * 60 * 60 * 1000)/60));
							dtBlkDate		=	dtBlkDate.toSystem();				// Return type as Clib.time 
						
							// Convert to Siebel DATETIME format...
							Clib.strftime(strBlkDate,""%m/%d/%Y %X"",Clib.localtime(dtBlkDate));
							// RK: Convert to format hh:mm dd-mm-yy 
							Clib.strftime(strBlkDate1,""%H:%M %d-%m-%y"",Clib.localtime(dtBlkDate));
					
							// Check if the MSISDN Number is not blocked for any partner at present
							// i.e check if Record Blocking Date <=  Current Date, or is null
							var vRecordBlkDate	=	new Date(GetFieldValue(""Record Blocking Date""));
							var vCurrentDate	=	new Date(strCurrentDate);

							if( vRecordBlkDate.getTime() <= vCurrentDate.getTime()	||	GetFieldValue(""Record Blocking Date"") == null || GetFieldValue(""Record Blocking Date"") == """")
							{
								
									//set block date and blocked for..
									//KT 20071107 Prefixing with WAP 
									var strPartnerMSISDN1 = ""WAP""+strPartnerMSISDN;
									SetFieldValue(""Record Blocked For"",strPartnerMSISDN1);
									SetFieldValue(""Record Blocking Date"",strBlkDate);
									WriteRecord();
									
									//	DECREMENT THE QUERY QUOTA FOR THE PARTNER By ONE
									UpdateReservationQuota(bcPartnerProduct);
									
									//2.0 below
									//RK added for Wave5: logs request into request queue table
									bcReqQue.SetViewMode(AllView);
			
									bcReqQue.NewRecord(NewAfter);
									//bcReqQue.SetFieldValue(""Subscription Id"",strSubcriptionId);
									bcReqQue.SetFieldValue(""Partner MSISDN"",strPartnerMSISDN);
									bcReqQue.SetFieldValue(""New MSISDN"",strMSISDN);	
									bcReqQue.SetFieldValue(""Old MSISDN"",strOldMSISDN);
									bcReqQue.SetFieldValue(""ICCID"",strICCID);
									bcReqQue.SetFieldValue(""Request End Date"",strBlkDate);
									bcReqQue.WriteRecord();
									// RK: To Send reservation end date value in ¿ErrorMessage¿ with format hh:mm dd-mm-yy in case of success  
									Outputs.SetProperty(""Error Message"",strBlkDate1);							
									//2.0 above
									
							}
							else	//	MSISDN Blocked by other partner
						 	{
									Outputs.SetProperty(""Error Code"",""RMS_MSISDN_Blocked"");
									Outputs.SetProperty(""Error Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMS_MSISDN_Blocked""));							
							}
							
					

				}			//if(blnIsRec) ENDS
				
				else		// MSISDN Number Not Found
				{
					
					Outputs.SetProperty(""Error Code"",""RMS_MSISDN_Search"");
					Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_MSISDN_Search""));

				}
				
	    }	//with ENDS
	    }	//for end
	    else{
	    	Outputs.SetProperty(""Error Code"",""RMSWAP009"");
			Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSWAP009"",strOldMSISDN));
	    }
	   } 	// if getquota ends
	   else
	   {
	   }
	}		//if inputs empty check Ends
    }		//try ENDS	
    catch(e) 
    {

		Outputs.SetProperty(""Error Code"", e.errCode);
		Outputs.SetProperty(""Error Message"", e.errText);
		
  	
    }
    finally
    {
    	bcNumEnq	=	null;
    	boNumEnq	=	null;
    	
    	
	return (CancelOperation);
    }

}
function CancelBlocking(&Inputs,&Outputs)
{

	var strPartnerMSISDN	= 		Inputs.GetProperty(""PartnerMSISDN"");

	
	var boNumEnq			= 		TheApplication().GetBusObject(""RMS NM MSISDN Number Enquiry"");
	var bcNumEnq 			= 		boNumEnq.GetBusComp(""RMS NM MSISDN Number Enquiry"");	
	
    var strSearchExp        = 		"""";
    
    var blnIsRec; 
	

	try
	{
	if ( strPartnerMSISDN == """")
	{
				Outputs.SetProperty(""Error Code"", ""RMSINP001"");
				Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSINP001""));	
	}
	else
	{	
	
	    with (bcNumEnq)
	    {
				ActivateField(""Record Blocked For"");
				ActivateField(""Record Blocking Date"");
				ActivateField(""Number Type Identifier Denorm"");	
	    		ActivateField(""Status"");	 	    		   		
	    		ActivateField(""Is Associated"");	
										
				
				ClearToQuery();
				
				
				strSearchExp	+=	""[Record Blocked For] = '"" + strPartnerMSISDN + ""' AND "";				
				strSearchExp	+=	""[Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""' AND ""; 
				strSearchExp	+=	""[Is Associated] = 'N' AND "";
				strSearchExp	+=	""[Number Type Identifier Denorm] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""MSISDN"") + ""'"";				


				SetSearchExpr(strSearchExp);
				ExecuteQuery(ForwardOnly);
				blnIsRec = FirstRecord();
				
				
				if(blnIsRec)		//	Blocked MSISDN numbers found
				{
					
						while(blnIsRec == true) 
						{
		
									//	Set block date and blocked for..
							
							SetFieldValue(""Record Blocked For"","""");
							SetFieldValue(""Record Blocking Date"","""");
							WriteRecord();
							
							blnIsRec	=	NextRecord();											

							
						}			//	While ENDS


				}					//	if ENDS
				else				//	No Numbers are Blocked for the Partner
				{
					Outputs.SetProperty(""Error Code"",""RMS_No_Numbers_Blocked"");
					Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_No_Numbers_Blocked""));
				
				}
				
	    }	//with ENDS
	    
   	}		//if inputs empty check Ends
    }		//try ENDS	
    catch(e) 
    {
    	
		Outputs.SetProperty(""Error Code"", e.errCode);
		Outputs.SetProperty(""Error Message"", e.errText);
		
  	
    }
    finally
    {
    	bcNumEnq	=	null;
    	boNumEnq	=	null;
    	
   	
	return (CancelOperation);
    }

}
function ChangePIN(Inputs, Outputs)
{	
	var blnIsRecord;
	var strRecordPassword;
	var boPartner = TheApplication().GetBusObject(""Channel Partner"");
	var bcPartner = boPartner.GetBusComp(""Channel Partner"");
	var strMSISDN = Inputs.GetProperty(""MSISDN"");
	var strOldPassword = Inputs.GetProperty(""OldPIN"");
	var strNewPassword = Inputs.GetProperty(""NewPIN"");
	
 	try
 	{
 		with(bcPartner)
 		{
 			SetViewMode(AllView);
			ActivateField(""DUNS Number"");
			ActivateField(""Password"");
			ClearToQuery();
			SetSearchSpec(""DUNS Number"",strMSISDN);
			SetSearchSpec(""Partnership Stage"",TheApplication().InvokeMethod(""LookupValue"",""PARTNERSHIP_STAGE"",""Active""));
			SetSearchSpec(""Password"",strOldPassword);
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();
		}
		if(blnIsRecord)
		{
			
			bcPartner.SetFieldValue(""Password"",strNewPassword);
			bcPartner.WriteRecord();
			Outputs.SetProperty(""ErrCode"",""00000"");
			Outputs.SetProperty(""ErrMessage"","""");
		}
		else
		{
			Outputs.SetProperty(""ErrCode"",""00002"");
			Outputs.SetProperty(""ErrMessage"",""No Retailer/Employee Found"");
		}
		//Change by Achin
		var vpartner_id = Inputs.GetProperty(""Partner Id"");
		var mpsInputs = TheApplication().NewPropertySet();
		var mpsOutputs = TheApplication().NewPropertySet();
	    mpsInputs.SetProperty(""Parameter Name"",""UpdateICMTableforPINChange"");
		var mBsGetSysPref = TheApplication().GetService(""STC BS Startup""); 
		mBsGetSysPref.InvokeMethod(""Get SysPref"",mpsInputs,mpsOutputs);
	    var icmChangePin = mpsOutputs.GetProperty(""Parameter Value"");
	    if(icmChangePin == ""Y"")
	    {
	    	var bcICM = boPartner.GetBusComp(""STC ICM Pin Change EBC"");
	    	with(bcICM)
	    	{	
	 			SetViewMode(AllView);
				ActivateField(""PARTNER_ID"");
				ActivateField(""PIN"");
				ClearToQuery();
				SetSearchSpec(""PARTNER_ID"",vpartner_id);
				ExecuteQuery(ForwardOnly);
				var icmRec = FirstRecord();
				if(icmRec)
				{
					SetFieldValue(""PIN"",strNewPassword);
					WriteRecord();
				}
			}//end of bcICM
		}		
	}
 	
 	catch(e)
 	{
 		if(Outputs.GetProperty(""ErrCode"") == ""00000"")
 		{
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrMessage"",e.errText);
		}
	}
	
	finally
	{
 		bcPartner = null;
 		boPartner = null;
 		bcICM = null;
	}
}
"/*---------+-------+---------+-----------------------------------------------------------
Date       | Ver   | By      | Comments
-----------+-------+---------+-----------------------------------------------------------
????????   | 1.0   | TechM   | Creation
20070321   | 1.1   | Prasad  | Changed to use new BC : HCPT Partner Product
20071112   | 1.2   |Kalyana  | Added POC Validation 
20080116   | 1.3   |Kalyana  | Added code to convert POC into Upper Case
----------------------------------------------------------------------------------------*/
function GetNumber(&Inputs,&Outputs)
{


	var strPattern			=		Inputs.GetProperty(""SearchString"");
	var intQuantity	        =		Inputs.GetProperty(""NoOfMSISDN"");
	var strPartnerCode		= 		Inputs.GetProperty(""PartnerCode"");
	var strPOC				=		Inputs.GetProperty(""POC"");
	//
    strPOC                  =       strPOC.toUpperCase();
    //
	var strPartnerId		=		"""";	
	var ResponseText		=		"""";	
	var intCount			= 		0;	
 
	
	var boNumEnq			= 		TheApplication().GetBusObject(""RMS NM MSISDN Number Enquiry"");
	var bcNumEnq 			= 		boNumEnq.GetBusComp(""RMS NM MSISDN Number Enquiry"");	
	
	var boPartner 			= 		TheApplication().GetBusObject(""Channel Partner"");
	var bcPartner			=		boPartner.GetBusComp(""Channel Partner"");
//1.1 below
//	var bcPartnerProduct	= 		boPartner.GetBusComp(""HCPT Partner Product"");						
//1.1 above	

    var strSearchExp        = 		"""";
    
    var blnIsRec; 
	var strCurrentDate;

	var tm=Clib.localtime(Clib.time());
	Clib.strftime(strCurrentDate,""%m/%d/%Y %H:%M:%S"",tm);			//	Current time in Siebel format
	

	try
	{
	//below 1.2
	var POC ="""";
	POC = TheApplication().InvokeMethod(""LookupValue"",""NM_POC"",strPOC)
	//if ( strPattern == """" || intQuantity == """" || strPartnerCode == """" || strPOC == """")
//stc	if ( strPattern == """" || intQuantity == """" || strPartnerCode == """" || strPOC == """" || POC == """")
	if ( strPattern == """" || intQuantity == """" || strPartnerCode == """" )
	//above 1.2
	{
				//ResponseText	=	""\&lt\;ListOfMSISDN\&gt\;"";	
				//ResponseText	+=	""\&lt\;/ListOfMSISDN\&gt\;"";
				ResponseText	=	""<ListOfMSISDN>"";
				ResponseText	+=	""</ListOfMSISDN>"";
				Outputs.SetProperty(""ResponseText"",ResponseText);			
				//below 1.2
				if  (POC == """" && strPOC != """")
				{
				Outputs.SetProperty(""Error Code"", ""RMSINP002"");
			    Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSINP002""));	
				}
				else
				{
				//above 1.2
				Outputs.SetProperty(""Error Code"", ""RMSINP001"");
				Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSINP001""));
				//below 1.2
				}
				//above 1.2	
	}
	else
	{
    getSystemPref();

	////ms 09nov09if(GetQuota(""Query"",bcPartner,bcPartnerProduct,Inputs,Outputs))	// There is sufficient Query quota
////ms 09nov09	{
	
	    with (bcNumEnq)
	    {
	    		ActivateField(""Number String Checksum"");
	    		ActivateField(""Number Type Identifier Denorm"");	 
	    		ActivateField(""Status"");	 	    		   		
	    		ActivateField(""Is Associated"");	
				ActivateField(""Record Blocked For"");
				ActivateField(""Record Blocking Date"");
				ActivateField(""POC"");					
				ActivateField(""Allocated To"");	
				ActivateField(""Special Category Type"");
				ActivateField(""MSISDN HLR ID"");					
											
				ClearToQuery();
				

				if(Clib.strchr(strPattern,'*')	!=	null	||	Clib.strchr(strPattern,'?')	!=	null)
				
					strSearchExp	=	""[Number String Checksum] LIKE '"" + strPattern + ""' AND "";
					
				else if(isNaN(strPattern)	==	false)				// The Pattern is a number containing only digits
				
					strSearchExp	=	""[Number String Checksum] = '"" + strPattern + ""' AND "";
					
				else 												//	The searchString contains some invalid char
				{
					Outputs.SetProperty(""Error Code"",""RMS_InvalidSearchChar"");
					Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_InvalidSearchChar""));
					
				}

				
				strSearchExp	+=	""[Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""' AND ""; 
				strSearchExp	+=	""[Allocated To] = '"" + strGroupCode + ""' AND "";
				strSearchExp	+=	""[Is Associated] = 'N' AND "";
				strSearchExp	+=	""([Record Blocking Date] <= '"" + strCurrentDate + ""' OR [Record Blocking Date] = '') AND "";
				//RK 21-aug-2007				
				strSearchExp	+=	""([Record Blocked For] LIKE 'POS*' OR [Record Blocked For] = '') AND "";
				//rk 21-aug-2007
	//ms 09nov09			strSearchExp	+=	""[Number Type Identifier Denorm] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""MSISDN"") + ""' AND "";				
	strSearchExp	+=	""[Number Type Identifier Denorm] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""MSISDN"") + ""'"";				
	//ms 09nov09			strSearchExp	+=	""[POC] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_POC"",strPOC) + ""'""; 
//----------- ADD Search spec for category constraints---------

					var strSearchCat	=	"""";
					strSearchCat	+=	"" AND ([Special Category Type] = ''"";

					if(strSplCatCheck != """")	// some constraint on category exists
					{
							var strArr			=	strSplCatCheck.split("";"");
							if (strArr != """")
							{
				
								for (var i = 0; i < strArr.length; i++)
								{
									strSearchCat	+=	"" OR "";
									strSearchCat	+=	""[Special Category Type] = '"";
									strSearchCat	+=	TheApplication().InvokeMethod(""LookupValue"",""RMS_CATEGORY_NAME"",strArr[i]);
									strSearchCat	+=	""'"";	
								}
								
							}
					}
					strSearchCat	+=	"")"";
					strSearchExp	+= strSearchCat;
//-------------------------------------------------------------------------------
				SetSearchExpr(strSearchExp);
				ExecuteQuery(ForwardOnly);
				blnIsRec = FirstRecord();
				
				
				if(blnIsRec)	// MSISDN numbers found
				{
					
					//ResponseText	=	""\&lt\;ListOfMSISDN\&gt\;"";				
				    ResponseText	=	""<ListOfMSISDN>"";	

								while(blnIsRec == true && intCount < intQuantity) 
								{
				
									intCount	= intCount + 1;
									
									//	SET Output as 
									
									/*
									<ListOfMSISDN>
									<MSISDN>621111111</MSISDN>
									<MSISDN>621111111</MSISDN>
									<MSISDN>621111111</MSISDN>
									</ListOfMSISDN >
									
									replace '<' with '<' and '>' with '&gt;'
									*/
				
									/*ResponseText	+=	""\&lt\;MSISDN\&gt\;"";	
									ResponseText	+=	GetFieldValue(""Number String Checksum"");
									ResponseText	+=	"" "";
									ResponseText	+=	GetFieldValue(""MSISDN HLR ID"");
									ResponseText	+=	""\&lt\;/MSISDN\&gt\;"";	*/
									ResponseText	+=	""<MSISDN>"";	
									ResponseText	+=	GetFieldValue(""Number String Checksum"");
									ResponseText	+=	"" "";
									ResponseText	+=	(GetFieldValue(""MSISDN HLR ID"")).substring(1);
									ResponseText	+=	""</MSISDN>"";
									
									blnIsRec	=	NextRecord();											
		
									
								}	//	while ENDS

					//ResponseText	+=	""\&lt\;/ListOfMSISDN\&gt\;"";
					ResponseText	+=	""</ListOfMSISDN>"";
			
					Outputs.SetProperty(""ResponseText"",ResponseText);	
					
				}		//	if ENDS
				else	// MSISDN Numbers Not Found
				{
						//<ListOfMSISDN></ListOfMSISDN>
					//RK:04/12/2007
					Outputs.SetProperty(""Error Code"", ""RMS_MSISDN_Search"");
					Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_MSISDN_Search""));
					//RK:04/12/2007
					//ResponseText	+=	""\&lt\;ListOfMSISDN\&gt\;""	+	""\&lt\;/ListOfMSISDN\&gt\;"" ;
					ResponseText	+=	""<ListOfMSISDN>""	+	""</ListOfMSISDN>"" ;
					Outputs.SetProperty(""ResponseText"",ResponseText);									
//					Outputs.SetProperty(""Error Code"",""RMS_MSISDN_Search"");
//					Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_MSISDN_Search""));

				}

				//	DECREMENT THE QUERY QUOTA FOR THE PARTNER By ONE
				UpdateQueryQuota(bcPartnerProduct);	

				
	    }		//	with bcNumEnq ENDS
/*ms 09nov09	   }		//	IF getQuota ends
	   else		//	Query Quota is not Sufficient
	   {
				//ResponseText	=	""\&lt\;ListOfMSISDN\&gt\;"";	
				//ResponseText	+=	""\&lt\;/ListOfMSISDN\&gt\;"";	
				ResponseText	=	""<ListOfMSISDN>"";	
				ResponseText	+=  ""</ListOfMSISDN>"" ;		
	   } ms 09nov09*/
		Outputs.SetProperty(""ResponseText"",ResponseText);
		
						
	}			// if inputs empty ENDS   
    }			//	try ENDS	
    catch(e) 
    {
		Outputs.SetProperty(""ResponseText"",ResponseText);
		Outputs.SetProperty(""Error Code"", e.errCode);
		Outputs.SetProperty(""Error Message"", e.errText);
		
  	
    }
    finally
    {
    	bcNumEnq	=	null;
    	boNumEnq	=	null;
    	    	
	return (CancelOperation);
    }
}
function GetQuota(strQuotaType,bcPartner,bcPartnerProduct,&Inputs,&Outputs)
{
					//	Get THE Specified QUOTA FOR THE Given PARTNER
					

	var Result			=	false;
    var intQuota		=	0;
	var strSearchExp 	=	"""";
    var blnIsRecord;
    var blnIsRecord1;


	var strPartnerMSISDN	= 		Inputs.GetProperty(""PartnerMSISDN"");
					
	var strCurrentDate;
	var tm=Clib.localtime(Clib.time());
	Clib.strftime(strCurrentDate,""%m/%d/%Y"",tm);					//	Current time in Siebel format

	try
	{
						 
		 with(bcPartner)
		 {
						  SetViewMode(AllView);
						
						  ActivateField(""DUNS Number"");
						
						  ClearToQuery();
						  SetSearchSpec(""DUNS Number"",strPartnerMSISDN);
						  ExecuteQuery(ForwardOnly);
						  blnIsRecord = FirstRecord();
						  
		 }	//	end with (bcPartner)
			
			 if(blnIsRecord)
			 {					
			
				  	with(bcPartnerProduct)
				  	{
					
							   SetViewMode(AllView);
							   
							   ActivateField(""HCPT-Product Type"");
							   ActivateField(""Name"");
							   ActivateField(""Minimum Quantity"");
							   ActivateField(""Vendor Id"");
   							   ActivateField(""RX Avg Price Exchange Date"");// QuotaEndDate
							   
							   ClearToQuery();
							   
							   SetSearchSpec(""Vendor Id"",bcPartner.GetFieldValue(""Id""));
							   
							   if(strQuotaType	==	""Query"")
								   SetSearchSpec(""Name"",TheApplication().InvokeMethod(""LookupValue"", ""HCPT_SALES_TYPE"", ""MSISDN Query""));
							   else if(strQuotaType	==	""Reservation"")
							       SetSearchSpec(""Name"",TheApplication().InvokeMethod(""LookupValue"", ""HCPT_SALES_TYPE"", ""MSISDN Reservation""));	

							   ExecuteQuery(ForwardOnly);
							   blnIsRecord1 = FirstRecord();
					  	}	//	end with (bcPartnerProduct)
					  	
					  	
					  	if(blnIsRecord1) 
					  	{
								var vQuotaEndDate	=	new Date(bcPartnerProduct.GetFieldValue(""RX Avg Price Exchange Date""));
								var vCurrentDate	=	new Date(strCurrentDate);
	
								if( vQuotaEndDate.getTime() >= vCurrentDate.getTime())
								{

					  			
							  		intQuota	=	ToInteger(bcPartnerProduct.GetFieldValue(""Minimum Quantity""));
							  		
							  		if(intQuota	>=	1)
							  		{
							  				Result	=	true;
									}
									else
									{
											Outputs.SetProperty(""Error Code"",""RMS_Insufficient_Quota"");
											if (strQuotaType	==	""Query"")
													Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_Insufficient_Quota"",""Query""));
											else if (strQuotaType	==	""Reservation"")
													Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_Insufficient_Quota"",""Reservation""));
											Result	=	false;
									}
								}
								else // Quota expired
								{
									Outputs.SetProperty(""Error Code"",""RMSWAP006"");
									if (strQuotaType	==	""Query"")
											Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSWAP006"",""Query""));
									else if (strQuotaType	==	""Reservation"")
											Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSWAP006"",""Reservation""));

									Result	=	false;
								}
																
					  	}	// if(blnIsRecord1) ENDS
							//KT 20071119 Added validation if quota is not defined for Partner
							else{
									Outputs.SetProperty(""Error Code"",""RMSPTNR006"");
									Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSPTNR006"",strQuotaType));
									//Outputs.SetProperty(""Error Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSPTNR006"",strQuotaType));
			                    }
							//End KT KT 20071119

				}			//	if(blnIsRecord) ENDS
	}
	catch(e)
	{
			Outputs.SetProperty(""Error Code"", e.errCode);
			Outputs.SetProperty(""Error Message"", e.errText); 
	}
	
	finally
	{
		return Result;
	}					

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{

	try
	{
				Outputs.SetProperty(""Error Code"", ""00000"");
				Outputs.SetProperty(""Error Message"", """");	

			if 		(MethodName	==	""GetNumber"")
			{
					GetNumber(Inputs, Outputs);

			}
			
			else if (MethodName	==	""CancelBlocking"")
			{
					CancelBlocking(Inputs, Outputs);
			}
	
			else if (MethodName	==	""BlockNumber"")
			{
					BlockNumber(Inputs, Outputs);
			}
			else if (MethodName	==	""UnblockMSISDN"")
			{
					UnblockMSISDN(Inputs, Outputs);
			}
			
			else if (MethodName	==	""ChangePIN"")
			{
					ChangePIN(Inputs, Outputs);
			}
			

	}
	catch(e)
	{
		
			//	Return an error code rather than throwing an error
			var vErr = e.toString();
			Outputs.SetProperty(""Error Code"",e.errCode);
			//Outputs.SetProperty(""Error Message"",e.errText);
			Outputs.SetProperty(""Error Message"",vErr);
			//	Logging the Exception
			
			var vErr 		=	e.toString();
			var vErrCode 	= 	e.errCode;
			var vObjName 	= 	""RMS Get MSISDN Numbers"";
			var vFunc 		= 	""PreInvokeMethod"";
			var vObjType 	= 	""Business Service"";

			TheApplication().log_exception(""Exception"",vErr,vErrCode,strGroupCode,vObjName,vFunc,vObjType);

	}
	finally 
	{
			return (CancelOperation);
	}


}
function UnblockMSISDN(&Inputs,&Outputs)
{
		//	Cancel Blocking for specified MSISDN Number blocked by the specified Partner

	var strPartnerMSISDN	= 		Inputs.GetProperty(""PartnerMSISDN"");
	var strMSISDN			=		Inputs.GetProperty(""MSISDNnumber"");
	
	var boNumEnq			= 		TheApplication().GetBusObject(""RMS NM MSISDN Number Enquiry"");
	var bcNumEnq 			= 		boNumEnq.GetBusComp(""RMS NM MSISDN Number Enquiry"");	
	
    var strSearchExp        = 		"""";
    
    var blnIsRec; 
	
	try
	{	
	if ( strPartnerMSISDN == """" || strMSISDN == """")
	{
				Outputs.SetProperty(""Error Code"", ""RMSINP001"");
				Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSINP001""));	
	}
	else
	{
	    with (bcNumEnq)
	    {
				ActivateField(""Record Blocked For"");
				ActivateField(""Record Blocking Date"");
				ActivateField(""Number Type Identifier Denorm"");	
	    		ActivateField(""Status"");	 	    		   		
	    		ActivateField(""Is Associated"");	
										
				
				ClearToQuery();
				
				strSearchExp	+=	""[Number String Checksum] = '"" + strMSISDN + ""' AND "";
				strSearchExp	+=	""[Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""' AND ""; 
				strSearchExp	+=	""[Is Associated] = 'N' AND "";
				strSearchExp	+=	""[Number Type Identifier Denorm] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""MSISDN"") + ""'"";				


				SetSearchExpr(strSearchExp);
				ExecuteQuery(ForwardOnly);
				blnIsRec = FirstRecord();
				
				
				if(blnIsRec)		//	Blocked MSISDN number found
				{
					    strPartnerMSISDN = ""WAP""+strPartnerMSISDN;
						if(GetFieldValue(""Record Blocked For"")	==	strPartnerMSISDN)	// Check if the MSISDN is Blocked for the Given Partner
						{
		
									//	Set block date and blocked for..
							
							SetFieldValue(""Record Blocked For"","""");
							SetFieldValue(""Record Blocking Date"","""");
							WriteRecord();
							
						}			//	If ENDS

						else		//	The MSISDN is not blocked by the Specified Partner
						{
							Outputs.SetProperty(""Error Code"",""RMS_MSISDNNotBlockedByPartner"");
							Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_MSISDNNotBlockedByPartner""));
						
						}
				}					//	if ENDS				
				else				//	MSISDN number not found
				{
					Outputs.SetProperty(""Error Code"",""RMS_MSISDN_Search"");
					Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_MSISDN_Search""));
				}
				
	    }	//with ENDS
	    
    }		//if inputs empty check Ends
    }		//try ENDS	
    catch(e) 
    {
    	
		Outputs.SetProperty(""Error Code"", e.errCode);
		Outputs.SetProperty(""Error Message"", e.errText);
		
  	
    }
    finally
    {
    	bcNumEnq	=	null;
    	boNumEnq	=	null;
    	
   	
	return (CancelOperation);
    }


}
function UpdateQueryQuota(bcPartnerProduct)
{
					//	DECREMENT THE QUERY QUOTA FOR THE PARTNER By ONE


	var intQuota	=	0;


	try
	{
			bcPartnerProduct.ActivateField(""Minimum Quantity"");
	  			  			
			intQuota	=	ToInteger(bcPartnerProduct.GetFieldValue(""Minimum Quantity""));
			if(intQuota	>=	1)
	  		{
	  			intQuota		=	intQuota - 1;	
				bcPartnerProduct.SetFieldValue(""Minimum Quantity"",intQuota);
			    bcPartnerProduct.WriteRecord();
			}
			else
			{
				Outputs.SetProperty(""Error Code"",""RMS_Insufficient_Quota"");
				Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_Insufficient_Quota"",""Query""));

			}
	
}	// Try ENDS
catch(e)
{
		Outputs.SetProperty(""Error Code"", e.errCode);
		Outputs.SetProperty(""Error Message"", e.errText); 
}

finally
{
	return (CancelOperation);
}

}
function UpdateReservationQuota(bcPartnerProduct)
{

					//	DECREMENT THE Reservation QUOTA FOR THE PARTNER By ONE

    var intQuota	=	0;

	try
	{						 
	  			//	DECREMENT THE RESERVATION QUOTA
	  			
					bcPartnerProduct.ActivateField(""Minimum Quantity"");	  			
		  			intQuota	=	ToInteger(bcPartnerProduct.GetFieldValue(""Minimum Quantity""));
		  		if(intQuota	>=	1)
		  		{
		  			intQuota		=	intQuota	-	1;	
					bcPartnerProduct.SetFieldValue(""Minimum Quantity"",intQuota);
				

				bcPartnerProduct.WriteRecord();
				}
				else
				{
					Outputs.SetProperty(""Error Code"",""RMS_Insufficient_Quota"");
					Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_Insufficient_Quota"",""Reservation""));

				}
						
	}	//	try ENDS
	catch(e)
	{
				Outputs.SetProperty(""Error Code"", e.errCode);
				Outputs.SetProperty(""Error Message"", e.errText); 
	}	

	finally
	{
		   		 return (CancelOperation);
	}


}
function getSystemPref()
{
	var boSysPref			= 		TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref 			= 		boSysPref.GetBusComp(""System Preferences"");

	try
	{
	
		strGroupCode	=	TheApplication().GetProfileAttr(""GroupCode"");
		strBlkPeriod	=	TheApplication().GetProfileAttr(""Blocking_Period_WAP"");
		strSplCatCheck	=	TheApplication().GetProfileAttr(""SplCatCheck"");	
		
		if(strGroupCode	== """")
		{
				//-----GETTING THE Row Id of partner with type='GroupCode' FROM SYSTEM PREFERENCE------------
				
					bcSysPref.ActivateField(""Value"");
					
					bcSysPref.ClearToQuery();
					bcSysPref.SetSearchSpec(""Name"",""RMS_GroupCode_Partner_POS"");
					bcSysPref.ExecuteQuery();
				
					if(bcSysPref.FirstRecord()) 
					{	 
						strGroupCode = bcSysPref.GetFieldValue(""Value"");
						TheApplication().SetProfileAttr(""GroupCode"",strGroupCode);
					}
		}
		
		if (strBlkPeriod	==	"""")
		{
				//-----GETTING THE Blocking Period FROM SYSTEM PREFERENCE------------
				
					bcSysPref.ActivateField(""Value"");
					
					bcSysPref.ClearToQuery();
					bcSysPref.SetSearchSpec(""Name"",""RMS_Blocking_Period_WAP"");
					bcSysPref.ExecuteQuery();
				
					if(bcSysPref.FirstRecord()) 
					{	 
						strBlkPeriod = bcSysPref.GetFieldValue(""Value"");
						TheApplication().SetProfileAttr(""Blocking_Period_WAP"",strBlkPeriod);
					}
		}

		if (strSplCatCheck	==	"""")
		{
				//-----GETTING THE Category Constraint FROM SYSTEM PREFERENCE------------
				
					bcSysPref.ActivateField(""Value"");
					
					bcSysPref.ClearToQuery();
					bcSysPref.SetSearchSpec(""Name"",""RMS_WAP_VANITY_CHECK"");
					bcSysPref.ExecuteQuery();
				
					if(bcSysPref.FirstRecord()) 
					{	 
						strSplCatCheck = bcSysPref.GetFieldValue(""Value"");
						TheApplication().SetProfileAttr(""SplCatCheck"",strSplCatCheck);
					}
		}

	}	//	Try ENDS
	catch(e)
	{
		Outputs.SetProperty(""Error Code"", e.errCode);
		Outputs.SetProperty(""Error Message"", e.errText);

	}
	finally
	{
    	bcSysPref	=	null;
    	boSysPref	=	null;

    	
	return (CancelOperation);

	}
}
//Your public declarations go here...
function GeneratePortInNumber(Inputs,Outputs)
{
	var MSISDN = """";
	var PoolId = """";
	var MSISDNOwner = ""NONVIVA"";//SUMANK:Port-IN MSISDNs Dealer Name Category Enhancement 12/06/2019
	MSISDN =  Inputs.GetProperty(""MSISDN"");
	var DealerId = Inputs.GetProperty(""DealerId"");
	var OperatorCode = Inputs.GetProperty(""OperatorCode"");
	var BillAccId = Inputs.GetProperty(""BillAccId"");
	var ServiceType = Inputs.GetProperty(""ServiceType"");
	var CreatedUser = Inputs.GetProperty(""CreatedUser"");
	var vChannel = Inputs.GetProperty(""Channel"");//[NAVIN: 25Jul2021: MPOS MNP Number Pool Fix]
	Outputs.SetProperty(""ErrorMessage"","""");
	Outputs.SetProperty(""ErrorCode"","""");
	var AppObj = TheApplication();

	//BELOW: SUMANK:Port-IN MSISDNs Dealer Name Category Enhancement 12/06/2019
	var MSISDNSubStr = MSISDN.substring(0,5);
	var CompMSISDN = AppObj.InvokeMethod(""LookupValue"",""STC_MNP_DEF_POOL"",MSISDNSubStr);
	var CompMSISDNSubStr = CompMSISDN.substring(0,3);
	if(CompMSISDNSubStr == ""YES"")
	{
		MSISDNOwner = ""VIVA"";
	}
	//ABOVE: SUMANK:Port-IN MSISDNs Dealer Name Category Enhancement 12/06/2019

	var psInputsUsr = AppObj.NewPropertySet();
	var psOutputsUsr = AppObj.NewPropertySet();

	psInputsUsr.SetProperty(""CreatedUser"", CreatedUser);
	GetPoolId(psInputsUsr,psOutputsUsr);
	PoolId = psOutputsUsr.GetProperty(""PoolId"");

	if(PoolId == """" || PoolId == '' || PoolId == null)
	{
		//[NAVIN: 25Jul2021: MPOS MNP Number Pool Fix]
		if(vChannel != ""CRM"" && DealerId != null && DealerId != """")
			PoolId = DealerId;
		else
			PoolId = AppObj.InvokeMethod(""LookupValue"",""STC_MNP_DEF_POOL"",""MNPGenericPoolId"");
	}
 
var categoryType = AppObj.InvokeMethod(""LookupValue"",""STC_MNP_CATEGORY_TYPE"",OperatorCode);
try
{
var NumMstrBO = AppObj.GetBusObject(""RMS NM Number Enquiry"");
var NumMstrBC = NumMstrBO.GetBusComp(""RMS NM Number Enquiry For Update"");
var NumGenBO  = AppObj.GetBusObject(""RMS NM Number Generation"");
var NumGenBC  = NumGenBO.GetBusComp(""RMS NM MNP Number Generation"");
var psInputs = AppObj.NewPropertySet();
var psOutputs = AppObj.NewPropertySet();
var blnIsRecord = false;
var ErrorText = """";
var SchemeId  = """";
var TypeId    = """";
var BlockId   = """";
var BlockName = """";

	with (NumMstrBC)
	{
	   ActivateField(""Status"");
	   ActivateField(""Allocated To"");
	   ActivateField(""Record Blocked For"");
	   ActivateField(""Ported Service Provider"");
	   ActivateField(""Port In Out"");
	   ActivateField(""Port Out"");
		ActivateField(""Special Category Type"");
	   SetSearchSpec(""Number String"",MSISDN);
	  // SetSearchSpec(""Port In"",""Y"");
	   ExecuteQuery(ForwardOnly);
	   blnIsRecord = FirstRecord();
	}
	if (blnIsRecord)
	{
		var Status = NumMstrBC.GetFieldValue(""Status"");
		var BlkFor = NumMstrBC.GetFieldValue(""Record Blocked For"");
		if(NumMstrBC.GetFieldValue(""Status"") == AppObj.InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""TRASHED""))
		{
		//Port in number with deactive status then update status to allocated
			with(NumMstrBC)
			{
				SetFieldValue(""Allocated To"",PoolId);
				SetFieldValue(""Status"",AppObj.InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED""));
				SetFieldValue(""Ported Service Provider"",OperatorCode);
				SetFieldValue(""Port In Out"",""N"");
				if(MSISDNOwner != ""VIVA"")//SUMANK:Port-IN MSISDNs Dealer Name Category Enhancement 12/06/2019
				{
					SetFieldValue(""Special Category Type"",categoryType);
				}//SUMANK:Port-IN MSISDNs Dealer Name Category Enhancement 12/06/2019
				SetFieldValue(""Record Blocked For"",BillAccId);
				SetFieldValue(""Port Out"",""N"");
				WriteRecord();
			}  
		}
		else if(Status == TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ASSIGNED"") || Status == TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED""))
		{
			if(BlkFor != BillAccId)
			{
				ErrorText = ""Number is already in use"";
				Outputs.SetProperty(""ErrorMessage"",ErrorText);
				Outputs.SetProperty(""ErrorCode"",""00001"");
			}
		}
	else
	{
	   ErrorText = ""Number is already in use"";
	   Outputs.SetProperty(""ErrorMessage"",ErrorText);
	   Outputs.SetProperty(""ErrorCode"",""00001"");    
	}//end of else
   }//end of blnIsRecord
   else //Generate number
   {
	   with(NumGenBC)
	   {
	   ActivateField(""Block Name"");
	   ActivateField(""Quantity Str"");
	   ActivateField(""Start String Number"");
	   ActivateField(""Block Starting String Number"");
	   ActivateField(""End Number Str"");
	   ActivateField(""Block Starting Number"");
	   ActivateField(""Block Ending Number"");

	   var MSISDNLength = MSISDN.length;
	   var strMSISDN    = """";
	   strMSISDN = MSISDN.substring(2,MSISDNLength);
	   psInputs.SetProperty(""OperCode"", OperatorCode);
	   GetBlockId(psInputs,psOutputs);
	   TypeId = psOutputs.GetProperty(""TypeId"");
	   SchemeId = psOutputs.GetProperty(""SchemeId"");
	   BlockId = psOutputs.GetProperty(""BlockId"");
	   BlockName = psOutputs.GetProperty(""BlockName"");  
	   NewRecord(1);
	   SetFieldValue(""Type Id"",TypeId);
		SetFieldValue(""Scheme Id"",SchemeId);
	   SetFieldValue(""Block Id"",BlockId);
	   SetFieldValue(""Block Name"",BlockName);
	   SetFieldValue(""Quantity Str"",1);
	   SetFieldValue(""Start Number"",strMSISDN);
	   SetFieldValue(""Start String Number"",strMSISDN);
	   SetFieldValue(""End Number Str"",strMSISDN);
	   SetFieldValue(""End Number"",strMSISDN);
	   SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""GENERATED""));
	   WriteRecord();
	   var ObjectId = GetFieldValue(""Id"");
	   var StatusDate = GetFieldValue(""Created""); 
	   }
	   with(NumMstrBC)
	   {
			NewRecord(1);
			SetFieldValue(""Gen Log Id"",ObjectId);
			SetFieldValue(""Type Id"",TypeId);
			SetFieldValue(""Scheme Id"",SchemeId);
			SetFieldValue(""Block Id"",BlockId);
			SetFieldValue(""Number"",MSISDN);
			SetFieldValue(""Number String"",MSISDN);
			SetFieldValue(""Status"",(TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"")));
			SetFieldValue(""Number Without Delimiter"",MSISDN);
			SetFieldValue(""Number String With Checksum"",MSISDN);  
			SetFieldValue(""Status Date"",StatusDate);
			SetFieldValue(""Port In"",""Y"");
			if(MSISDNOwner != ""VIVA"")//SUMANK:Port-IN MSISDNs Dealer Name Category Enhancement 12/06/2019
			{
				SetFieldValue(""Special Category Type"",categoryType);
			}//SUMANK:Port-IN MSISDNs Dealer Name Category Enhancement 12/06/2019

			SetFieldValue(""Record Blocked For"",BillAccId);
			SetFieldValue(""Number Type Identifier Denorm"",TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""));
			SetFieldValue(""Allocated To"",PoolId);
			WriteRecord(); 
	   }
	}

}//end of try
catch(e)
{
var vErr = e.toString();
Outputs.SetProperty(""ErrCode"",e.errCode);
Outputs.SetProperty(""ErrorMessage"",vErr);

}//end of catch
finally
{
NumMstrBC = null;
NumMstrBO = null;
NumGenBC  = null;
NumGenBO  = null;
AppObj	  = null;
}//end of finally
}
function GetBlockId(&psInputs,&psOutputs)
{

 // var boSysPref = TheApplication().GetBusObject(""System Preferences"");
  //   var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
     var NumSchemeBO  = TheApplication().GetBusObject(""RMS NM Number Scheme"");
     var NumBlockBC   = NumSchemeBO.GetBusComp(""RMS NM Number Block"");
     var BlockId = """";
     var OperCode = psInputs.GetProperty(""OperCode"");
/*     bcSysPref.ActivateField(""Value"");
  bcSysPref.ClearToQuery();
  bcSysPref.SetSearchSpec(""Name"",""RMS_PORT_IN_BLOCK_NAME"");
  bcSysPref.ExecuteQuery(ForwardOnly);
  if(bcSysPref.FirstRecord()) 
    {
       BlockId = bcSysPref.GetFieldValue(""Value"");*/
       BlockId = TheApplication().InvokeMethod(""LookupValue"",""RMS_PORT_IN_BLOCK_NAME"",OperCode);
       
       
       with(NumBlockBC)
       {
        ActivateField(""Type"");
        ActivateField(""Scheme Id"");
        ActivateField(""Name"");
        ClearToQuery();
        SetSearchSpec(""Id"",BlockId);
        ExecuteQuery(ForwardOnly);
        if( FirstRecord())
        {
         psOutputs.SetProperty(""BlockId"",GetFieldValue(""Id""));
         psOutputs.SetProperty(""BlockName"",GetFieldValue(""Name""));
         psOutputs.SetProperty(""SchemeId"",GetFieldValue(""Scheme Id""));
         psOutputs.SetProperty(""TypeId"",GetFieldValue(""Type""));
        }
       }
      // }
       NumBlockBC = null; 
       NumSchemeBO = null;
      
      
}
"//Created to get Pool Id of user Created Order for MNP Port In MSISDNs Dealer Name1.2
function GetPoolId(&psInputs,&psOutputs)
{
	var sApp = TheApplication();
	var UserBC = sApp.GetBusObject(""Employee"").GetBusComp(""Employee"");
	var IntDivBC = sApp.GetBusObject(""Internal Division"").GetBusComp(""Internal Division"");
	var Postion = sApp.GetBusObject(""Position"").GetBusComp(""Position"");
	var PriPosId,IntDevId,ContactRec,IntId,PoolId="""";
		
	var CreatedUser = psInputs.GetProperty(""CreatedUser"");
	var vSearchExpr = ""[Id]='""+CreatedUser+""' OR [Login Name]='""+CreatedUser+""'"";//[NAVIN: 25Jul2021: MPOS MNP Number Pool Fix]
	with(UserBC)
	{
	
		ActivateField(""Login Name"");
		ActivateField(""Primary Position Id"");
		ActivateField(""OU Id"");
		ClearToQuery();
		SetViewMode(AllView);
		//SetSearchSpec(""Id"",CreatedUser);
		SetSearchExpr(vSearchExpr);
		ExecuteQuery(ForwardOnly);
		var EmpRec = FirstRecord();
		if(EmpRec)
		{
			var ContactRecId = GetFieldValue(""Id"");
			PriPosId = GetFieldValue(""Primary Position Id"");
			IntDevId = GetFieldValue(""OU Id"");
			with(Postion)
			{
				ActivateField(""Division Id"");
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(""Id"",PriPosId);
				ExecuteQuery(ForwardOnly);
				var ContactRec = FirstRecord();
				if(ContactRec)
				{
				IntId = GetFieldValue(""Division Id"");
				}// end of if(ContactRec)

				with(IntDivBC)
				{
				ActivateField(""STC Grp Partner Id"");
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(""Id"",IntId);
				ExecuteQuery(ForwardOnly);
				var ContactRec = FirstRecord();
				if(ContactRec)
				{
				PoolId = GetFieldValue(""STC Grp Partner Id"");
				}// with(IntDivBC)
				}
			}// end of with(ContactBC)
		}// end of if(EmpRec)
	}// end of with(UserBC)
	
	psOutputs.SetProperty(""PoolId"",PoolId);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs) 
{ 
  
 switch(MethodName)  
     { 
     case ""GeneratePortInNumber"" : 
  { 
  GeneratePortInNumber(Inputs,Outputs); 
  return(CancelOperation); 
     break; 
     } 
     case ""UpdateNumberPortOut"": 
     UpdateNumberPortOut(Inputs, Outputs); 
     return(CancelOperation); 
     break; 
 
 
     } 
  
  
 return (ContinueOperation); 
}
function UpdateNumberPortOut(Inputs, Outputs)
{
var SerAccId = Inputs.GetProperty(""SerAccId"");
var MSISDN;
var PortOut;
var PortIn;
 var boNumEnq;
 var bcNumEnq;

 var strFromStatus;
 var strToStatus;
 var strBlockId;
 var strNumAvlDateDiff;
 var bsDeassociate;
 var psInputs;
 var psOutputs;
 var blnIsRecord;
 var intRetCode = ContinueOperation;
 psInputs = TheApplication().NewPropertySet();
 psOutputs = TheApplication().NewPropertySet();

var BCSerAcc = TheApplication().GetBusObject(""STC Service Account"").GetBusComp(""CUT Service Sub Accounts"");
var boNumberMaster:BusObject    = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
var bcNumberMaster:BusComp            = boNumberMaster.GetBusComp(""RMS NM Number Enquiry For Update""); // RMS NM Number Enquiry 
strToStatus  = TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED"");
with(BCSerAcc)
{
  ActivateField(""DUNS Number"");
 ActivateField(""STC Port Out Flag"");
  ActivateField(""STC Port In Flag"");
   SetViewMode(AllView);
ClearToQuery();
SetSearchSpec(""Id"", SerAccId);
ExecuteQuery();
if(FirstRecord())
{
MSISDN = GetFieldValue(""DUNS Number"");
PortOut = GetFieldValue(""STC Port Out Flag"");
PortIn = GetFieldValue(""STC Port In Flag"");
if(PortOut == ""Y"" || PortIn == ""Yes"")
{
  bsDeassociate  = TheApplication().GetService(""RMS RMS Deassociate Function"");
  boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
  bcNumEnq = boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update""); // 23rd June : RMS NM Number Enquiry 
  with(bcNumEnq) 
  {
   ActivateField(""Number String"");
   ActivateField(""Assoc Start Id"");
   ActivateField(""Block Id"");
   ActivateField(""Status"");
   ActivateField(""Available Date"");
   ActivateField(""Quarantine Date"");
   ActivateField(""Status Date"");
   ActivateField(""Is Associated"");
   ActivateField(""Available Date Reached"");
   ActivateField(""Current Date"");
   ActivateField(""Assigned Id"");
   ActivateField(""Assigned Date"");
   ActivateField(""Allocation Id"");
   ActivateField(""Reserved To"");
   ActivateField(""Sales Code"");
   ActivateField(""Using Type"");
   ActivateField(""Resv Id""); // 23rd June
   ActivateField(""Reservation End Date"");
   ActivateField(""Record Blocked For"");
   ActivateField(""Record Blocking Date"");
   ActivateField(""Disconnect Type"");
   ActivateField(""Artwork Id"");
   ActivateField(""Pre Activation Id"");
   ActivateField(""Allocated To"");
      ActivateField(""Is Associated"");
     ActivateField(""Port Out""); 
   ClearToQuery();
   SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""));
   SetSearchSpec(""Number String"", MSISDN);
   ExecuteQuery(ForwardOnly);
   blnIsRecord = FirstRecord(); 
   if(blnIsRecord)
   {
     if(GetFieldValue(""Is Associated"") == ""Y"")
     {
      psInputs.SetProperty(""Partial(Y/N)"",""Y"");
      psInputs.SetProperty(""Source"",""ThrashPortOut"");
      psInputs.SetProperty(""MSISDN Number"",GetFieldValue(""Number String""));
      bsDeassociate.InvokeMethod(""DeAssociate"",psInputs,psOutputs); 
     }
      SetFieldValue(""Status"",strToStatus);
      SetFieldValue(""Available Date"","""");
         SetFieldValue(""Is Associated"",""N"");
      SetFieldValue(""Quarantine Date"","""");
      SetFieldValue(""Assoc Start Id"","""");
      SetFieldValue(""Assigned Id"","""");
      SetFieldValue(""Assigned Date"","""");
      SetFieldValue(""Allocation Id"","""");
      SetFieldValue(""Reserved To"","""");
      SetFieldValue(""Sales Code"","""");
      SetFieldValue(""Allocated To"","""");
      SetFieldValue(""Using Type"","""");
      SetFieldValue(""Resv Id"","""");
      SetFieldValue(""Reservation End Date"","""");
      SetFieldValue(""Record Blocked For"","""");
      SetFieldValue(""Record Blocking Date"","""");
      SetFieldValue(""Disconnect Type"","""");
      SetFieldValue(""Artwork Id"","""");
      SetFieldValue(""Pre Activation Id"","""");
       SetFieldValue(""Port Out"",""Y"");
        SetFieldValue(""Is Associated"",""N"");
      WriteRecord();
     }
 
}
}// end of PortOut
}// end of ifRec CUTSer
}// end of with
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function Resubmit()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_TERMINATION"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-02.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */

	//var file=Clib.fopen(""/siebelfs/hout.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
        {

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			MInputs.SetProperty(""Object Id"",MRowId);    

			MInputs.SetProperty(""ProcessName"",""STC Number Association Process"");


			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

        }
    }
	MOutputs=null;
	MWorkflowProc=null;
	MInputs=null;
	MRowId=null
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function Resubmit()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-15.06.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_TERMINATION"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-15.06.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */

	//var file=Clib.fopen(""/siebelfs/hout.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
        {

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();
			
			MInputs.SetProperty(""Object Id"",MRowId);    
			
			MInputs.SetProperty(""ProcessName"",""STC Number Association Process"");
			
			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");
			
			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);
			
        }
    }
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null

}
"/**************************************************************************************
* Name          : RMS NM Association Rule CheckNumberType Function  				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Checks if the subtype has been specified if the number type selected*
*				  has a subtype associated to it.                                     *	 
*																					  * 
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	1.0   		MBT						   	Created      01/12/2003       *
**************************************************************************************/

function CheckNumberType(&bcNumSubType,TypeId,strNumberType)
{
	var blnIsRecord;
	var strErrVal ="""";
	
	with(bcNumSubType){
		ActivateField(""Type Id"");
		ClearToQuery();
		SetSearchSpec(""Type Id"",TypeId);
		ExecuteQuery(ForwardBackward);
	}
	
	blnIsRecord = bcNumSubType.FirstRecord(); 

	if(blnIsRecord)
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASR005"", strNumberType);

	return(strErrVal);	
}
"/**************************************************************************************
* Name          : RMS NM Association Rule ValidateRule Function    			 	  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Set the Is Split flag when release	.     					.     *
*																					  * 
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 07/06/2005	1.0   		MBT						   	Created      07/06/2005       *
* 07/06/2005	1.1			MBT							P.Gautaman	 07/06/2005		  *	
**************************************************************************************/
function ReleaseRule(bcAssRulMstr,bcAssRulDtl,Inputs) {
	with(bcAssRulDtl){
		ActivateField(""Split"");
		ClearToQuery();
		ExecuteQuery();
		var mblnIsRecord = FirstRecord();
		while(mblnIsRecord){
			if(GetFieldValue(""Split"")==""Y"") {
				bcAssRulMstr.SetFieldValue(""Is Rule Split"",""Y"");
				break;
			}
			mblnIsRecord = NextRecord();
		}
	}
	bcAssRulMstr.SetFieldValue(""Status"",""Y"");
	bcAssRulMstr.WriteRecord();
}
"/**************************************************************************************
* Name          : RMS NM Association Rule Service PreInvoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS Code file for NM Association Rule .                            *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs){

	var boAssRule;
	var boNumType;

	var bcAssRulDtl;
	var bcAssRulDtlDel;
	var bcAssRulMstr;
	var bcNumType;
	var bcNumSubType;

	var strErrVal = """";

	var intReturn = ContinueOperation;
	
	var blnIsRecord;

	try{
	
		boAssRule		= TheApplication().GetBusObject(""RMS NM Association Rule"");
		bcAssRulMstr 	= boAssRule.GetBusComp(""RMS NM Association Rule Master"");
		bcAssRulDtl 	= boAssRule.GetBusComp(""RMS NM Association Rule Detail"");
		bcAssRulDtlDel 	= boAssRule.GetBusComp(""RMS NM Association Rule Detail For Delete"");
		
		boNumType		= TheApplication().GetBusObject(""RMS NM Number Type"");		
		bcNumSubType	= boNumType.GetBusComp(""RMS NM Number Subtype"");
				
		with(bcAssRulMstr){	
			ActivateField(""Is Valid"");	
			ActivateField(""Is Rule Split"");	
			ClearToQuery();
			SetSearchSpec(""Id"",Inputs.GetProperty(""ObjectId""));
			ExecuteQuery(ForwardBackward);
		}	
		
		blnIsRecord = bcAssRulMstr.FirstRecord();
		
		intReturn = CancelOperation;
		
		Outputs.SetProperty(""Record Exists"",""N"");				

//-------------------------------------------------------
// Check for the new record of association rule master.
//-------------------------------------------------------

		if(blnIsRecord){
			
			Outputs.SetProperty(""Record Exists"",""Y"");
			
			with(bcAssRulDtl){
			
			
				ActivateField(""Sequence"");
				ActivateField(""Source Number Type"");
				ActivateField(""Source Number Type Id"");
				ActivateField(""Source Number Subtype"");
				ActivateField(""Destination Number Type"");
				ActivateField(""Destination Number Type Id"");
				ActivateField(""Destination Number Subtype"");
				ActivateField(""Destination Number Type Identifier"");
				ActivateField(""Parent Rule"");
				ActivateField(""Rule Id"");
				ActivateField(""No of Destinations"");			
				ActivateField(""Split"");							
				ActivateField(""Split Record Id"");
				
				ClearToQuery();
				SetSortSpec(""Sequence(ASCENDING)"");
				ExecuteQuery(ForwardBackward);
			}
			
			switch(MethodName){
		
				case ""ValidateRule"":
				
					intReturn = CancelOperation;	
					strErrVal = ValidateRule(bcAssRulMstr,bcAssRulDtl,bcNumSubType,Inputs);
					if(strErrVal != """")
						TheApplication().RaiseErrorText(strErrVal);
					break;
	
				case ""ReleaseRule"":
				
					intReturn = CancelOperation;	
					ReleaseRule(bcAssRulMstr,bcAssRulDtl,Inputs);			
					break;

				case ""CheckDelete"":
				
					intReturn = CancelOperation;
					if((Inputs.GetProperty(""RuleType"") == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) && (Inputs.GetProperty(""ParentRule"") !="""")){
						bcAssRulDtl.FirstRecord();
						blnIsRecord = bcAssRulDtl.NextRecord();

//---------------------------------------------------------------------------------------------
// Raising an error when user tries to delete a record having child records associated with it. 	    
//---------------------------------------------------------------------------------------------
						if (blnIsRecord){
							strErrVal = ""RMSASR004"";
							TheApplication().RaiseError(strErrVal);
						}
					}
									
					break;
					
					
				case ""DeleteDetail"":											

//--------------------------------------------------------------------------------
// Deleting the Child records if the Rule Type of the master record gets changed.
//--------------------------------------------------------------------------------				
					intReturn = CancelOperation;
						
					with(bcAssRulDtlDel){
						ClearToQuery();
						SetSortSpec(""Sequence(ASCENDING)"");
						ExecuteQuery(ForwardBackward);
					}
				
					blnIsRecord = bcAssRulDtlDel.FirstRecord();	
				
					while(blnIsRecord){
						bcAssRulDtlDel.DeleteRecord();
						blnIsRecord = bcAssRulDtlDel.FirstRecord();
					}
				
					break;
			}
		}	
		
		
		
		bcAssRulMstr 	= null;
		bcAssRulDtl  	= null;
		bcAssRulDtlDel 	= null;
		bcNumSubType	= null;		
		boAssRule 		= null;
		boNumType		= null;
		return (intReturn);
	
	}catch(e){
		
		bcAssRulMstr 	= null;
		bcAssRulDtl  	= null;
		bcAssRulDtlDel 	= null;
		bcNumSubType	= null;
		boAssRule 		= null;
		boNumType		= null;
		throw (e);
	}	
}
"/**************************************************************************************
* Name          : RMS NM Association Rule ValidateRule Function    			 	  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Validates the rule details specified.     					.     *
*																					  * 
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver    By       Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	1.0    MBT		Created      01/12/2003       *
* 27/05/2005	1.1	   MBT		P.Gautaman	 27/05/2005		  *	
20060706      | 1.2  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function ValidateRule(&bcAssRulMstr,&bcAssRulDtl,&bcNumSubType,Inputs)
{
	var strCurrSrcNumType;
	var strCurrDestNumType
	var strPrevDestNumType;
	
	var strCurrSrcTypeId;
	var strCurrDestTypeId;
	
	var strCurrSrcNumSubType;
	var strCurrDestNumSubType;
	var strCurrSplit;
	var strCurrDestTypeIdentifier;
		
	var strPrevDestNumSubType;
	var strPrevDestTypeId ="""";
	var strPrevSplit;
	var strPrevSrcTypeId;
	var strPrevSrcSubType;
	var strPrevDestTypeIdentifier;
	
	var strCurrSequence;
	var strPrevSequence = """";
	
	var strRuleType;
	var strErrVal = """";
		
	var intSeq = 1;	
	var intSplitNoOfDest=0;
	var intNoOfSplitRec=0;
	
	var arrValidNumType = new Array();
	var arrNumTypeSeq = new Array();
	var intValidNumArrCnt = 0;

	var blnIsRecord;
	
	blnIsRecord = bcAssRulDtl.FirstRecord();
	
	strRuleType   = Inputs.GetProperty(""RuleType"");
		
//---------------------------------------------------------------------------
// Display an error if Parent rule hasnt been selected for the first record
// if rule type is Child.
//---------------------------------------------------------------------------

	if(strRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD""))
	{
		if(bcAssRulDtl.GetFieldValue(""Parent Rule"")=="""")
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASR001"");
			return(strErrVal);
		}
		strPrevDestNumType		= bcAssRulDtl.GetFieldValue(""Destination Number Type"");	
		strPrevDestNumSubType  	= bcAssRulDtl.GetFieldValue(""Destination Number Subtype"");
		strPrevDestTypeId 		= bcAssRulDtl.GetFieldValue(""Destination Number Type Id"");
		strPrevSequence         = bcAssRulDtl.GetFieldValue(""Sequence"");
		strPrevSplit			= bcAssRulDtl.GetFieldValue(""Split"");
		strPrevDestTypeIdentifier = bcAssRulDtl.GetFieldValue(""Destination Number Type Identifier"");
		
		
//---------------------------------------------------------------------------
// If subtype hasnt been filled then check if it exists for the number type. 
//---------------------------------------------------------------------------	
		if(strPrevDestNumSubType == """")
		{ 
			strErrVal = CheckNumberType(bcNumSubType,strPrevDestTypeId,strPrevDestNumType);
			if(strErrVal != """")
				return(strErrVal);
		}
//		arrValidNumType[intValidNumArrCnt++]	= bcAssRulDtl.GetFieldValue(""Destination Number Type"");	
//		arrNumTypeSeq[bcAssRulDtl.GetFieldValue(""Destination Number Type"")] = bcAssRulDtl.GetFieldValue(""Sequence"");
		blnIsRecord = bcAssRulDtl.NextRecord();
	}
	var psDestType = TheApplication().NewPropertySet();
	var intDestCnt = 0;
	var intFrstRecCnt = 0;
	while(blnIsRecord)
	{
//------------------------------------------------------
// Display an error if Source Type hasnt been selected.
//------------------------------------------------------
		if(bcAssRulDtl.GetFieldValue(""Source Number Type"")=="""")
		{	
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASR003"");
			return(strErrVal);			
		}
		
		strCurrSrcNumType		= bcAssRulDtl.GetFieldValue(""Source Number Type"");	
		strCurrSrcTypeId  		= bcAssRulDtl.GetFieldValue(""Source Number Type Id"");
		strCurrSrcNumSubType 	= bcAssRulDtl.GetFieldValue(""Source Number Subtype"");
		strCurrSequence 		= bcAssRulDtl.GetFieldValue(""Sequence"");
//----------------------------------------------------------------------------------
// If subtype hasnt been filled then check if it exists for the source number type. 
//----------------------------------------------------------------------------------
		if(strCurrSrcNumSubType == """")
		{
			strErrVal = CheckNumberType(bcNumSubType,strCurrSrcTypeId,strCurrSrcNumType);
			if(strErrVal != """")
				return(strErrVal);
		}		
		strCurrDestNumType		= bcAssRulDtl.GetFieldValue(""Destination Number Type"");	
		strCurrDestNumSubType  	= bcAssRulDtl.GetFieldValue(""Destination Number Subtype"");
		strCurrDestTypeId 		= bcAssRulDtl.GetFieldValue(""Destination Number Type Id"");
		strCurrDestTypeIdentifier = bcAssRulDtl.GetFieldValue(""Destination Number Type Identifier"");				
		strCurrSplit			= bcAssRulDtl.GetFieldValue(""Split"");
//----------------------------------------------------------------------------------
// If subtype hasnt been filled then check if it exists for the source number type. 
//----------------------------------------------------------------------------------		
		if(strCurrDestNumSubType == """")
		{
			strErrVal = CheckNumberType(bcNumSubType,strCurrDestTypeId,strCurrDestNumType);
			if(strErrVal != """")
				return(strErrVal);
		}		
//----------------------------------------------------------------------
// The source number type / subtype should be the same as the previous
// destination number type / subtype if Split is not set to true. 
//----------------------------------------------------------------------
/*		if(intDestCnt == 0)
			UpdateDestTypePS(psDestType,bcAssRulDtl.GetFieldValue(""Source Number Type""),bcAssRulDtl);

		for(var i=0;i<getArrayLength(arrValidNumType);i++) {
			var temp = arrValidNumType[i];
		}
			
		if(intValidNumArrCnt != 0) {
			if(!CheckValidNumberType(arrValidNumType,bcAssRulDtl.GetFieldValue(""Source Number Type"")))
				TheApplication().RaiseErrorText(""Wrong destination Type"");
		}
		for(var i=0;i<getArrayLength(arrValidNumType);i++) {
			var temp = arrValidNumType[i];
		}
		
		UpdateNumberArray(intValidNumArrCnt,arrValidNumType,arrNumTypeSeq,bcAssRulDtl.GetFieldValue(""Destination Number Type""),bcAssRulDtl);*/

		if(intFrstRecCnt == 0) 
		{
			if(bcAssRulDtl.GetFieldValue(""Split"") == ""Y"") 
			{
				for(var i=0;i<bcAssRulDtl.GetFieldValue(""No of Destinations"");i++)
					psDestType.SetProperty(intDestCnt++,bcAssRulDtl.GetFieldValue(""Source Number Type""));
				psDestType.SetProperty(intDestCnt++,bcAssRulDtl.GetFieldValue(""Destination Number Type""));
			}
			else 
			{
				psDestType.SetProperty(intDestCnt++,bcAssRulDtl.GetFieldValue(""Source Number Type""));
				psDestType.SetProperty(intDestCnt++,bcAssRulDtl.GetFieldValue(""Destination Number Type""));
			}
		}


		var intChildCnt = psDestType.GetPropertyCount();
		var blnChck = false;
		for(var i = 0;i<intChildCnt;i++) 
		{
			if(i==0) 
			{
				var temp = psDestType.GetFirstProperty();
				var temp1 = psDestType.GetProperty(psDestType.GetFirstProperty());
				if(bcAssRulDtl.GetFieldValue(""Source Number Type"") == psDestType.GetProperty(psDestType.GetFirstProperty())) 
				{
					blnChck = true;
					psDestType.RemoveProperty(psDestType.GetFirstProperty());
					break;
				}
			}
			else 
			{
//				var temp = psDestType.GetProperty(psDestType.GetNextProperty());
//				var temp1 =psDestType.GetProperty(psDestType.GetNextProperty());
				var intPropIndx = psDestType.GetNextProperty();
				if(bcAssRulDtl.GetFieldValue(""Source Number Type"") == psDestType.GetProperty(intPropIndx)) 
				{
					blnChck = true;
					psDestType.RemoveProperty(intPropIndx);
					break;
				}
			}
		}
		if(!blnChck) 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASR011"",bcAssRulDtl.GetFieldValue(""Sequence""));
			return(strErrVal);
		}	
		if(intFrstRecCnt != 0)
		{
			if(bcAssRulDtl.GetFieldValue(""Split"") == ""Y"") 
			{
				for(var i=0;i<bcAssRulDtl.GetFieldValue(""No of Destinations"");i++)
					psDestType.SetProperty(intDestCnt++,bcAssRulDtl.GetFieldValue(""Source Number Type""));
				psDestType.SetProperty(intDestCnt++,bcAssRulDtl.GetFieldValue(""Destination Number Type""));
			}
			else
				psDestType.SetProperty(intDestCnt++,bcAssRulDtl.GetFieldValue(""Destination Number Type""));
		}
		blnIsRecord = bcAssRulDtl.NextRecord();
		intFrstRecCnt++;
	}			
	blnIsRecord = bcAssRulDtl.FirstRecord();
//---------------------------------------------------				
//Sequencing the records of association rule detail 						
//---------------------------------------------------
	while(blnIsRecord)
	{
		bcAssRulDtl.SetFieldValue(""Sequence"",intSeq);
		intSeq = intSeq + 1;
		bcAssRulDtl.WriteRecord();
		blnIsRecord = bcAssRulDtl.NextRecord();
	}

	bcAssRulMstr.SetFieldValue(""Is Valid"",""Y"");								
	bcAssRulMstr.WriteRecord();
//1.2 below, this statement WILL NOT reach always, there are some returns earlier !!!
	psDestType = null;
//1.2 above
	return(strErrVal);			
}
"/**************************************************************************************
* Name          : RMS NM Association Rule Validate splitted Records			 	  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Validates the rule details specified.     					.     *
*																					  * 
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   	MBT		 Created      			      *
* 28/05/2005 	 1.1	MBT	     P.Gautaman	 28/05/2005		  *	
20060706       | 1.2  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function ValidateSplittedRecords(stSrcNumTypeId,strSrcNumSubType,strDestTypeIdentifier,strSplitRecId,Inputs,strCurrSeq){

		var boAssRule		= TheApplication().GetBusObject(""RMS NM Association Rule"");
		var bcAssRulMstr 	= boAssRule.GetBusComp(""RMS NM Association Rule Master"");
		var bcAssRulDtl 	= boAssRule.GetBusComp(""RMS NM Association Rule Detail"");
		var strErrVal		= """";
		
		var blnIsSplitRec;
		var strPrevSequence = strCurrSeq;
		
		var strPrevSrcTypeId = stSrcNumTypeId;
		var strPrevSrcSubType= strSrcNumSubType;
		var strPrevDestTypeIdentifier = strDestTypeIdentifier;
		
		var strCurrSrcTypeId;
		var strCurrSrcNumSubType;
		var strCurrDestTypeIdentifier;
		var strCurrSequence;
		
		
		with(bcAssRulMstr) {
			ClearToQuery();
			SetSearchSpec(""Id"",Inputs.GetProperty(""ObjectId""));
			ExecuteQuery(ForwardBackward);		
		}
		with(bcAssRulDtl) {
			ActivateField(""Sequence"");
			ActivateField(""Source Number Type"");
			ActivateField(""Source Number Type Id"");
			ActivateField(""Source Number Subtype"");
			ActivateField(""Destination Number Type"");
			ActivateField(""Destination Number Type Id"");
			ActivateField(""Destination Number Subtype"");
			ActivateField(""Destination Number Type Identifier"");
			ActivateField(""Split Record Id"");
			ActivateField(""Parent Rule"");
			ActivateField(""Rule Id"");
			ActivateField(""No of Destinations"");			
			ActivateField(""Split"");							
			
			ClearToQuery();
			SetSortSpec(""Sequence(ASCENDING)"");
			SetSearchSpec(""Split Record Id"",strSplitRecId);
			ExecuteQuery(ForwardBackward);
			blnIsSplitRec = FirstRecord();
			while(blnIsSplitRec) {
			
				strCurrSrcTypeId 	 = GetFieldValue(""Source Number Type Id"");
				strCurrSrcNumSubType = GetFieldValue(""Source Number Subtype"");
				strCurrDestTypeIdentifier = GetFieldValue(""Destination Number Type Identifier"");
				strCurrSequence	= GetFieldValue(""Sequence"");
				if(strCurrSrcTypeId != strPrevSrcTypeId){
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASR007"", strCurrSequence, strPrevSequence);
					return(strErrVal);
				}
				else if(strCurrSrcNumSubType != strPrevSrcSubType) {
						strErrVal = TheApplicaxtion().LookupMessage(""User Defined Errors"",""RMSASR008"", strCurrSequence, strPrevSequence);
						return(strErrVal);			
				}
				else if(strPrevDestTypeIdentifier != strCurrDestTypeIdentifier) {
						strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASR009"", strCurrSequence, strPrevSequence);
						return(strErrVal);						
				}
				
				strPrevSrcTypeId = strCurrSrcTypeId;
				strPrevSrcSubType = strCurrSrcNumSubType;
				strPrevDestTypeIdentifier = strCurrDestTypeIdentifier;
				strPrevSequence = strCurrSequence;
				blnIsSplitRec = NextRecord();
			}
		}

//1.2 below
		bcAssRulDtl  = null;
		bcAssRulMstr = null;
		boAssRule    = null;
//1.2 above
		return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Association Rule Service PreInvoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS Code file for NM Association Rule fro splitting the record      *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/06/2005	 1.0   		 MBT						 Created      01/06/2005      *
**************************************************************************************/
function AddNewRecord(bcAssRulDtl,Inputs) {
	with(bcAssRulDtl) {
		var intNumOfRec = 1;

		while(ToInteger(intNumOfRec) < ToInteger(Inputs.GetProperty(""NumOfDest""))) {
			NewRecord(1);
			SetFieldValue(""Source Number Type"",Inputs.GetProperty(""SourceType""));
			SetFieldValue(""Destination Number Type"",Inputs.GetProperty(""DestType""));
			SetFieldValue(""Split Record Id"",Inputs.GetProperty(""Id""));			
			WriteRecord();
			intNumOfRec++;
		}
	}
}
"/**************************************************************************************
* Name          : RMS NM Association Rule Service PreInvoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS Code file for NM Association Rule .                            *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/06/2005	 1.0   		 MBT						 Created      01/06/2005      *
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	try {
		switch (MethodName) {
			case ""SplitRule"":
				var boAssRule = TheApplication().ActiveBusObject();
				var bcAssRuleDtl = boAssRule.GetBusComp(""RMS NM Association Rule Detail"");
				if(Inputs.GetProperty(""DestType"") == """")  {
					var strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC015"", ""Destination Number Type"");
					TheApplication().RaiseErrorText(strErrVal);
				}
				if(Inputs.GetProperty(""ParentRuleId"") != """") {
					var strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASR010"");
					TheApplication().RaiseErrorText(strErrVal);
				}
					
				AddNewRecord(bcAssRuleDtl,Inputs);

				break;

			default:
				return (ContinueOperation);
		}
	} catch(e) {
		bcAssRuleDtl = null;
		boAssRule = null;
		throw e;
	} finally {
		bcAssRuleDtl = null;
		boAssRule = null;
	}
	return (CancelOperation);
}
"/*-------------+------+--------------+---------------------------
Date(YYYYMMDD) | Ver  | By           | Description of Change
---------------+------+--------------+-----------------------------
20070626       | 1.0  | Ramakrishna  | Creation
---------------+------+--------------+----------------------------*/
function Init (Inputs, Outputs) {
	Outputs.SetProperty(""MSISDN Number"","""");
	Outputs.SetProperty(""Quantity"","""");
	return (CancelOperation);
}
"/*-------------+------+--------------+---------------------------
Date(YYYYMMDD) | Ver  | By           | Description of Change
---------------+------+--------------+-----------------------------
20070626       | 1.0  | Ramakrishna  | Creation
---------------+------+--------------+----------------------------*/
function Query(Inputs, Outputs) {
	try {
		var returnCode = CancelOperation;
		var strSearchspec = Inputs.GetProperty(""search-string"");
		if (strSearchspec == """") {
			var childProp = TheApplication().NewPropertySet();
			childProp.SetProperty(""MSISDN Number"","""");
			childProp.SetProperty(""Quantity"","""");
			Outputs.AddChild(childProp);
			returnCode =  CancelOperation;
		}
		return (returnCode); 
  	}
    catch (e) {
   		var vErr = e.toString();
		var vErrCode = e.errCode;
		var vObjName = ""RMS NM MSISDN Query-Reservation"";
		var vFunc = ""Query"";
		var vObjType = ""Business Service"";
		var vObjId ="""";
		TheApplication().log_exception(""Exception"",vErr,vErrCode,vObjId,vObjName,vFunc,vObjType);
        return (CancelOperation);
   	} 
   	finally {
   		childProp = null;
   	}	 
}
"/*-------------+------+--------------+---------------------------
Date(YYYYMMDD) | Ver  | By           | Description of Change
---------------+------+--------------+-----------------------------
20070626       | 1.0  | Ramakrishna  | Creation
---------------+------+--------------+----------------------------*/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs) {
	var returnCode = ContinueOperation;
	switch(MethodName) {
		case 'Init':
			returnCode = Init(Inputs, Outputs);
			break;
		case 'Query':
			returnCode = Query(Inputs, Outputs);
			break;	
	}
	return (CancelOperation);
}
var strByPassStatus;
"/**************************************************************************************
* Name          : RMS NM Number Allocation AllocDealloc Function					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : The main function for allocating and deallocating.			      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function AllocDealloc(intObjectId){
	
    var boNumberAlloc;
    var bcNumberAlloc;
   
    var strAllocStatus;
    var strErrVal = """";
    
    var blnIsRecord;
               
   	boNumberAlloc = TheApplication().GetBusObject(""RMS NM Number Allocation"");
	bcNumberAlloc = boNumberAlloc.GetBusComp(""RMS NM Number Allocation"");

	with(bcNumberAlloc){
		ActivateField(""Id"");
		ActivateField(""Status"");
		ActivateField(""Scheme Id"");
		ActivateField(""Block Id"");
		ActivateField(""Alloc To"");		
		ActivateField(""Alloc From"");
		ActivateField(""Start Num"");
		ActivateField(""End Num"");
		ActivateField(""End Num String"");
		ActivateField(""Quantity"");
		ActivateField(""Number Id"");
		ActivateField(""Is Sequence"");
		ActivateField(""Is Internal"");
		ActivateField(""Is Paired"");
		ActivateField(""Special Category Name"");

//-----------------------------------------------------------
// Code added for Phase 1A2 for displaying dealer name,
// dealer area code and dealer channel code.
//-----------------------------------------------------------
		ActivateField(""To Dealer Area Code"");
		ActivateField(""To Dealer Name"");
		ActivateField(""To Dealer Channel Code"");
		ActivateField(""From Dealer Area Code"");
		ActivateField(""From Dealer Name"");
		ActivateField(""From Dealer Channel Code"");
		ActivateField(""Alloc Date"");
		ActivateField(""Current Date"");
		ActivateField(""Partner Level"");
		ActivateField(""Processing Message"");
				
		ClearToQuery();
		SetSearchSpec(""Id"",intObjectId);
		ExecuteQuery();
	}

	blnIsRecord = bcNumberAlloc.FirstRecord();
	if(blnIsRecord){
		strAllocStatus	= bcNumberAlloc.GetFieldValue(""Status"");
			
//---------------------------------------------------------------------------------------
// Display an message to refresh the applet if another user is accessing the same record.
//---------------------------------------------------------------------------------------

		//Amit
		//if(strAllocStatus = TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""))
		if((strAllocStatus == TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"")) || (strAllocStatus == TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""COMPLETE"")) )
		//Amit End
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC003"");
	
		if(strErrVal == """"){
//-------------------------------------------------------------------------------------------------------
// Change status to processing so that another user cant access this record till processing is complete.
//-------------------------------------------------------------------------------------------------------
			
			bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
  			bcNumberAlloc.SetUserProperty(""blnFromAllocation"",""Y"")
			bcNumberAlloc.WriteRecord();
			 
			strErrVal = CheckQuantity(bcNumberAlloc);

//---------------------------------------------------------------------------------------------------
//Display the message as completed if successfully allocated (RMSALC006) or deallocated (RMSALC007).
//---------------------------------------------------------------------------------------------------
			if(strErrVal == ""RMSALC006"" || strErrVal == ""RMSALC007"")
			{
			bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""COMPLETE""));
			bcNumberAlloc.SetFieldValue(""Alloc Date"",bcNumberAlloc.GetFieldValue(""Current Date""));
			bcNumberAlloc.SetFieldValue(""Processing Message"",TheApplication().LookupMessage(""User Defined Errors"",strErrVal));
			//  Calling   WF   process   for  XML   generation   KT 22-05-06
	/*		var prsInputs   = TheApplication().NewPropertySet();
			var prsOutputs  = TheApplication().NewPropertySet();
			var bsNumberAlloc	= TheApplication().GetService(""Workflow Process Manager"");
			prsInputs.SetProperty(""RowId"",intObjectId);
			prsInputs.SetProperty(""ProcessName"",""RMS NM Number Allocation"");
			bsNumberAlloc.InvokeMethod(""RunProcess"",prsInputs,prsOutputs);
*/
/*-------------	GB 15-Dec-06-----------------------------
                	if(strErrVal == ""RMSALC006"")
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC006"");
				else
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC007"");	
					
-----------------------------------------------------------*/
				
			}
//--------------------------------------------------------
// If not successful then set the status back to Pending.
//--------------------------------------------------------			
			else
				{
					bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));		
					//AmitManoj bcNumberAlloc.SetFieldValue(""Processing Message"",TheApplication().LookupMessage(""User Defined Errors"",strErrVal));
					bcNumberAlloc.SetFieldValue(""Processing Message"",strErrVal);
				}

			bcNumberAlloc.SetUserProperty(""blnFromAllocation"",""Y"")				
			bcNumberAlloc.WriteRecord();
		}	
	}
	
	
	bcNumberAlloc = null;	
	boNumberAlloc = null;
	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation AllocateNumbers Function				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Allocate the numbers					                              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function AllocateNumbers(bcAllocNum,bcNumberAlloc){

	var intAssocStartId;
	var intNumId;
	var intQuantity = 1;
	
	var strErrVal = """";
	var strStatusBfrAlloc = """";
	
	var blnIsRecord;
	
	blnIsRecord 		= bcAllocNum.FirstRecord();
	
	while(blnIsRecord){
		intNumId 		= bcAllocNum.GetFieldValue(""Id"");
		intAssocStartId = bcAllocNum.GetFieldValue(""Assoc Start Id"");
			
//-----------------------------------
// Update the number for allocation.	
//-----------------------------------	 
		UpdateAllocateNumbers(bcNumberAlloc,bcAllocNum);
		if(bcAllocNum.GetFieldValue(""Is Associated"") == ""Y"") {				

//----------------------------------------------
// Update the associated numbers for allocation.
//----------------------------------------------	
			UpdateAssoNumbers(intNumId,intAssocStartId,bcNumberAlloc);

//------------------------------------------------------------
// Updating the concatenated number record in CX_NUM_ASS_CNCT.
//------------------------------------------------------------	
			UpdateAssCnctNumbers(intAssocStartId,bcNumberAlloc,strStatusBfrAlloc);		
		}
        
		bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));		
		bcNumberAlloc.SetFieldValue(""Quantity"",intQuantity);
		bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));		
        bcNumberAlloc.SetFieldValue(""End Num"",bcAllocNum.GetFieldValue(""Number""));
        bcNumberAlloc.SetFieldValue(""End Num String"",bcAllocNum.GetFieldValue(""Number String""));
		bcNumberAlloc.SetUserProperty(""blnFromAllocation"",""Y"")
		bcNumberAlloc.WriteRecord();
		
		intQuantity = ToInteger(intQuantity) + 1;
		blnIsRecord = bcAllocNum.NextRecord();
	}	
	
	strErrVal = ""RMSALC006"";	
	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation CheckQuantity Function					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Checks the overlapping of numbers as quantity specified.            *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	 1.0   	MBT	     Created      12/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
20060810       | 1.2  | GARIMA | Changed Search Spec as 	Special Category Tpye 
                                is now normal filed  earlier it was joined field
* 08/04/2009   | 1.3  | Ashu   | Updated SearchSpec so that Blocked Numbers are
								not selected at time of De-Allocation of Numbers.
**************************************************************************************/

function CheckQuantity(bcNumberAlloc){

	var boNMAlloc;
	var boNMEnquiry;
	var bcNMAlloc;
	var bcAllocNum;
	
	var strSearchExpr = """";
	var strErrVal = """";
	var strSearchStatus;
	var strEndNum;
	var strOperation;
	var strAssignedExpr;
		
	var blnIsRecord;
	var blnIsSequence;
	
	var intStartNum = 0;
	var intEndNum = 0;
	var intQuantity;
	var intNumId;
	var strIsPaired = ""N"";
	var strSpCategory	= """";
	
	var psOutputs = TheApplication().NewPropertySet();
			
	boNMAlloc		= TheApplication().GetBusObject(""RMS NM Number Allocation"");
	boNMEnquiry		= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNMAlloc		= boNMAlloc.GetBusComp(""RMS NM Number Allocation"");	
	bcAllocNum		= boNMEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	
	intStartNum		= bcNumberAlloc.GetFieldValue(""Start Num"");
	intEndNum		= bcNumberAlloc.GetFieldValue(""End Num"");
	strEndNum		= bcNumberAlloc.GetFieldValue(""End Num String"");
	intQuantity		= bcNumberAlloc.GetFieldValue(""Quantity"");
	intNumId		= bcNumberAlloc.GetFieldValue(""Number Id"");
	blnIsSequence	= bcNumberAlloc.GetFieldValue(""Is Sequence"");
	strOperation 	= bcNumberAlloc.GetFieldValue(""Operation"");
	strIsPaired		= bcNumberAlloc.GetFieldValue(""Is Paired"");
	strSpCategory 	= bcNumberAlloc.GetFieldValue(""Special Category Name"");
	
	strAssignedExpr = ""' OR [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ASSIGNED"") + ""'"";
	strAssignedExpr += "" OR [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""TRASHED"") + ""')"";
	
	if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""ALLOCATE"")){	
		strSearchExpr  	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
							""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
							""' AND ([Allocated To] = '"" + bcNumberAlloc.GetFieldValue(""Alloc From Id"") + ""')"" + 
							"" AND ([Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"");
		if((strByPassStatus == ""ERPASSIGNED_Y"") || (TheApplication().InvokeMethod(""LookupValue"",""RMS_ALLOC_ADMIN"",""ASSIGNED_Y"")== ""ASSIGNED_Y""))
			strSearchExpr+=	strAssignedExpr;
		else
			strSearchExpr+= ""')"";
			
			strSearchExpr+="" AND [Number] >= '"" + intStartNum + ""' AND [Is Associated] = '"" + strIsPaired + ""'"";
			
		//below 1.2
		//if(strSpCategory == """")
		//		strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
		if(strSpCategory == """")
				strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
		//above 1.2
		else
				strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
	//ms changed			
	}
	if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""DEALLOCATE"")){
		strSearchExpr  	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
							""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
							""' AND ([Allocated To] = '"" + bcNumberAlloc.GetFieldValue(""Alloc From Id"") + ""')"" +
							"" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""'"" +
							"" AND [Number] >= '"" + intStartNum + ""' AND [Is Associated] = '"" + strIsPaired + ""'"" +
							"" AND [Record Blocked For] IS NULL"";	//this line 1.3
		//below 1.2
	//	if(strSpCategory == """")
	//			strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
		if(strSpCategory == """")
				strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
		//above 1.2
		else
				strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";

	}
	
				
//-------------------------------------------------------------------
// If Is Sequence is selected then calculating end number so as to 
// retrieve only that set of numbers.
//-------------------------------------------------------------------

	if(blnIsSequence == ""Y""){
		intEndNum = ToNumber(intStartNum);
		intEndNum += (intQuantity - 1);
		strSearchExpr = strSearchExpr + "" AND [Number] <= "" + intEndNum + """"; 
	}
	
//---------------------------
// Populate the end number.
//---------------------------
	
	strErrVal = PopulateEndNum(intNumId,strSearchExpr,blnIsSequence,intStartNum,intEndNum,intQuantity,psOutputs);

	intEndNum 	= ToNumber(psOutputs.GetProperty(""intEndNum""));
	strEndNum 	= psOutputs.GetProperty(""strEndNum"");
	intQuantity = ToNumber(psOutputs.GetProperty(""intQuantity""));
	
    if(strErrVal == """"){

		strSearchExpr = """";
		strSearchExpr	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
							""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
							""' AND ([Status] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING"") +
				 			""' OR [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"") +
				 			""' ) AND ([Id] <> '"" + bcNumberAlloc.GetFieldValue(""Id"") + 
				 			""' OR [Alloc From Id] <> '"" + bcNumberAlloc.GetFieldValue(""Id"") +
              				""' ) AND [Created] < '"" + bcNumberAlloc.GetFieldValue(""Created"") + ""'"";
						 	
//-------------------------------------------------------------------------------------------------------
//Checking for the concurrency of the start number and the end number selected for the given operation
//-------------------------------------------------------------------------------------------------------
		with(bcNMAlloc){
			ClearToQuery();
			ActivateField(""Scheme Id"");
			ActivateField(""Block Id"");
			ActivateField(""Status"");
			ActivateField(""SIM Artwork Id"");
			ActivateField(""Created"");
			ActivateField(""Start Num"");
			ActivateField(""End Num"");
			ActivateField(""Start Num String"");
			ActivateField(""End Num String"");
			SetSearchExpr(strSearchExpr);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}
		
		while(blnIsRecord){
//--------------------------------------------------
// Display an error if start number is overlapping.	
//--------------------------------------------------
			if((intStartNum >= ToNumber(bcNMAlloc.GetFieldValue(""Start Num""))) && (intStartNum <= ToNumber(bcNMAlloc.GetFieldValue(""End Num"")))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC004"",bcNMAlloc.GetFieldValue(""Start Num String""),bcNMAlloc.GetFieldValue(""End Num String""));	
				break;
			}	
//------------------------------------------------
// Display an error if end number is overlapping.
//------------------------------------------------				
			else if((intEndNum >= ToNumber(bcNMAlloc.GetFieldValue(""Start Num""))) && (intEndNum <= ToNumber(bcNMAlloc.GetFieldValue(""End Num"")))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC005"",bcNMAlloc.GetFieldValue(""Start Num String""),bcNMAlloc.GetFieldValue(""End Num String""));	
				break;
			}	
			
//----------------------------------------------------------------
// Display an error if both start and end number are overlapping.
//----------------------------------------------------------------				
			else if((intStartNum <= ToNumber(bcNMAlloc.GetFieldValue(""Start Num""))) && (intEndNum >= ToNumber(bcNMAlloc.GetFieldValue(""End Num"")))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC009"",bcNMAlloc.GetFieldValue(""Start Num String""),bcNMAlloc.GetFieldValue(""End Num String""));	
				break;
			}
				
			blnIsRecord = bcNMAlloc.NextRecord();	
		
		}

//-----------------------------------------------------------------
// Retrieving numbers as per the start number and end number and 
// allocating or deallocating them as per operation selected.
//-----------------------------------------------------------------	
		if(strErrVal == """"){

//========================================== Kadali Srinivas Ver 2.0 ============================================================
			if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""ALLOCATE"")){	
					strSearchExpr  	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
										""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
										""' AND [Allocated To] = '"" + bcNumberAlloc.GetFieldValue(""Alloc From Id"") + ""'"" +
										"" AND ([Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"");
					if((strByPassStatus == ""ERPASSIGNED_Y"") || (TheApplication().InvokeMethod(""LookupValue"",""RMS_ALLOC_ADMIN"",""ASSIGNED_Y"")== ""ASSIGNED_Y""))
						strSearchExpr+=	strAssignedExpr;
					else
						strSearchExpr+= ""')"";
						
						strSearchExpr+=	"" AND [Is Associated] = '"" + strIsPaired + ""'"" + 
										"" AND [Number] >= '"" + intStartNum +
										""' AND [Number] <= '"" + intEndNum + ""'"";
			//below 1.2
			//	if(strSpCategory == """")
			//				strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
				if(strSpCategory == """")
					strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
		//above 1.2
			
				else
					strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
			}
			if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""DEALLOCATE"")){
					strSearchExpr  	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
										""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
										""' AND ([Allocated To] = '"" + bcNumberAlloc.GetFieldValue(""Alloc From Id"") + ""')"" +
										"" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""'"" +
										"" AND [Is Associated] = '"" + strIsPaired + ""'"" + 
										"" AND [Number] >= '"" + intStartNum +
										""' AND [Number] <= '"" + intEndNum + ""'"" +
										"" AND [Record Blocked For] IS NULL"";	//this line 1.3
				//below 1.2
//				if(strSpCategory == """")
//					strSearchExpr+=	"" AND [Special Category Id] IS NULL"";

				if(strSpCategory == """")
					strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
				//above 1.2

				else
					strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
			}										
//======================================== Kadali Srinivas Ver 2.0 =============================================================		
			with(bcAllocNum){
					ActivateField(""Scheme Id"");
					ActivateField(""Block Id"");
					ActivateField(""Allocated To"");
					ActivateField(""Number"");
					ActivateField(""SIM Artwork Id"");					
					ActivateField(""Status"");
					ActivateField(""Status Date"");
					ActivateField(""Assoc Start Id"");
					ActivateField(""Is Associated"");
					ActivateField(""Status Before Allocation"");
					ActivateField(""Allocation Id"");
					//ActivateField(""Allocated To"");
					ActivateField(""Distributor Id"");
					//ActivateField(""Partner Type"");
					ActivateField(""Type Identifier"");
					ActivateField(""SIM Card Id"");
					//ActivateField(""Parent Division Id"");
					ActivateField(""To Dealer Name"");
                    ActivateField(""Dlr Allocated To"");
					ActivateField(""Sales Code"");
					ActivateField(""Record Blocked For"");
					ClearToQuery();
					SetSearchExpr(strSearchExpr);
					ExecuteQuery(ForwardOnly);
			}

			if(bcNumberAlloc.GetFieldValue(""Operation"")==TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""ALLOCATE""))			
					strErrVal = AllocateNumbers(bcAllocNum,bcNumberAlloc);
			else
					strErrVal = DeAllocateNumbers(bcAllocNum,bcNumberAlloc);
		}
	
	}
			
	
	bcNMAlloc = null;
	bcAllocNum = null;
	boNMAlloc = null;
	
//1.1 below
	psOutputs = null;
	boNMEnquiry = null;
//1.1 above
	return(strErrVal);

}
"/**************************************************************************************
* Name          : NM Number Allocation DeAllocateNumbers Function   			 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Deallocate the numbers.       					                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 04/12/2003 	 | 1.0  | 		MBT	  |					   	Created      13/12/2003   *
* 21/07/2006     | 1.1  | Ramakrishna | Changed code Populate Status Before Allocation*
**************************************************************************************/

function DeAllocateNumbers(bcAllocNum,bcNumberAlloc){

	var intAssocStartId;
	var intNumId;
	
	var strErrVal = """";
	var strStatusBfrAlloc;
	
	var blnIsRecord;
	blnIsRecord = bcAllocNum.FirstRecord();
	
	while(blnIsRecord){
		intNumId 			= bcAllocNum.GetFieldValue(""Id"");
		intAssocStartId	  	= bcAllocNum.GetFieldValue(""Assoc Start Id"");
//below 1.1
		//strStatusBfrAlloc 	= bcAllocNum.GetFieldValue(""Status"");
		strStatusBfrAlloc 	= bcAllocNum.GetFieldValue(""Status Before Allocation""); 
//above 1.1
		
		UpdateDeallocateNumbers(bcNumberAlloc,bcAllocNum);
		
//----------------------------------------------------------------------------------------
//Calling the function which changes the status of number and update into reqd tables 	
//-----------------------------------------------------------------------------------------	 
					
		if(bcAllocNum.GetFieldValue(""Is Associated"") == ""Y""){				
//----------------------------------
// Updating the associated numbers.
//----------------------------------	
			UpdateAssoNumbers(intNumId,intAssocStartId,bcNumberAlloc);

//------------------------------------------------------------
// Updating the concatenated number record in CX_NUM_ASS_CNCT.
//------------------------------------------------------------	
			UpdateAssCnctNumbers(intAssocStartId,bcNumberAlloc,strStatusBfrAlloc);		
		}
        
        bcNumberAlloc.SetFieldValue(""End Num"",bcAllocNum.GetFieldValue(""Number""));
        bcNumberAlloc.SetFieldValue(""End Num String"",bcAllocNum.GetFieldValue(""Number String""));
		blnIsRecord = bcAllocNum.NextRecord();
	}
	
	strErrVal = ""RMSALC007"";
	return(strErrVal);	

}
"/**************************************************************************************
* Name          : RMS NM Number Allocation PopulateEndNum Function	    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Populates the end number if quantity specified is available.	      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      11/12/2003       *
**************************************************************************************/

function PopulateEndNum(intNumId,strSearchExpr,blnIsSequence,intStartNum,intEndNum,intQuantity,Outputs){

	var boNumberAlloc;
	var bcNumMstr;
	
	var blnIsRecord;
	
	var strErrVal = """";
	var strEndNum = """";

	var intCount = 0;
	var intVerifier	= 0;

	boNumberAlloc 	= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNumMstr    	= boNumberAlloc.GetBusComp(""RMS NM Number Enquiry For Update"");	
	
	with(bcNumMstr){
		ActivateField(""Number String"");
		ActivateField(""Number"");
		ActivateField(""Scheme Id"");
		ActivateField(""Block Id"");
		ActivateField(""Allocated To"");
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ClearToQuery();
		SetSearchExpr(strSearchExpr);
		ExecuteQuery(ForwardOnly);
		blnIsRecord = FirstRecord();
	}

//-------------------------------------------------------------------
// Display an error if start number is not available for allocation.
//-------------------------------------------------------------------
	if(!blnIsRecord)
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC008"");
	else if(intNumId != bcNumMstr.GetFieldValue(""Id""))
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC008"");
	else{
		while(blnIsRecord){
			if(blnIsSequence == ""Y""){
				intVerifier = ToNumber(intStartNum);
				intVerifier += intCount;
				if(bcNumMstr.GetFieldValue(""Number"") != (intVerifier)){
//------------------------------------------------------------------------
// Display an error if numbers arn't available for allocation in sequence.
//------------------------------------------------------------------------				
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC001"",intCount);
					break;
				}	
			}
			strEndNum 	= ToString(bcNumMstr.GetFieldValue(""Number String""));	
			intEndNum 	= ToNumber(bcNumMstr.GetFieldValue(""Number""));
			intCount 	= intCount + 1;
			
			if(intQuantity == intCount)	
				break;	
				
			blnIsRecord = bcNumMstr.NextRecord();	
			
	 	}
	 	Outputs.SetProperty(""intQuantity"",intQuantity);
	 	Outputs.SetProperty(""strEndNum"", strEndNum);
	 	Outputs.SetProperty(""intEndNum"",intEndNum);

		if((strErrVal == """") && (intQuantity != intCount))
//------------------------------------------------------------------------------------
// Display an error if requested quantity of numbers arn't available for allocation.
//------------------------------------------------------------------------------------		
	 		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC002"",intCount);
	 }
	 	
	 
	 bcNumMstr = null;
	 boNumberAlloc = null;
	 
	 return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation RefreshRecord Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Allocation Code File					              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 03/12/2003 	1.0   		MBT						   	Created      13/12/2003       *
**************************************************************************************/

function RefreshRecord(){

	var psInputs;
	var psOutputs;
	var bsSIMNMRef;
	
	psInputs	= TheApplication().NewPropertySet();
	psOutputs	= TheApplication().NewPropertySet();
	
	bsSIMNMRef 	= TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
										
	psInputs.SetProperty(""Business Component Name"",""RMS NM Number Allocation"");
	psInputs.SetProperty(""Business Object Name"",""RMS NM Number Allocation"");
					
	bsSIMNMRef.InvokeMethod(""Refresh Business Component"",psInputs,psOutputs);

	psInputs	= null;
	psOutputs	= null;
	bsSIMNMRef	= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation Service_PreInvoke Method    		 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Allocation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      10/12/2003       *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs){

	var intObjectId;
	var intReturn = ContinueOperation;
	Outputs.SetProperty(""Error Code"",""00000"");
	//ms var intEndNum;
	//ms var intQuantity;
	
	//ms var strEndNum;
	var strErrVal = """";
	strByPassStatus = Inputs.GetProperty(""ByPassStatus"");
	if(TheApplication().GetSharedGlobal(""ByPassStatus"") != """") 
		strByPassStatus = TheApplication().GetSharedGlobal(""ByPassStatus"");
	intObjectId = Inputs.GetProperty(""Object Id"");
//	var test = TheApplication().GetProfileAttr(""STC GroupCode"");
//	var test2 = TheApplication().GetProfileAttr(""STC PartnerCode"");
//	var test3 = ""hello"";
	
	try{ 
		switch (MethodName){
			case ""Allocate"":
			case ""Deallocate"":
				strErrVal = AllocDealloc(intObjectId);
				RefreshRecord();
			  	intReturn = CancelOperation;
			  	
			  	var isAllocFromGen = TheApplication().GetProfileAttr(""AllocFromGen""); 
			  	
			  	if(strErrVal != """" && isAllocFromGen != ""Y"")
			  	{
					//-------------	GB 15-Dec-06-----------------------------			  	
						  	Outputs.SetProperty(""Error Code"",strErrVal);
						  	
		                	if(strErrVal == ""RMSALC006"")
		                		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC006"");
		                	if (strErrVal == ""RMSALC007"")
		                		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC007"");	
		                		                	
							
							Outputs.SetProperty(""Error Message"",strErrVal);
							
			  		//		TheApplication().RaiseErrorText(strErrVal);
					//-------------	GB -----------------------------
			  	}
			  	break;
		    		    	
		    case ""Validate"":
		    //ms:09/04/2006. changed input arguments as 782 STScript doesnt allow reference for primitive types
		    //variables will be embedded in Outputs propertyset
		    	//old/ strErrVal = Validation(Inputs,intEndNum,strEndNum,intQuantity);
		    	strErrVal = Validation(Inputs,Outputs);
		       	intReturn = CancelOperation;
//---------------------------------------------------------------
// Setting the end number if the required quantity is available.
//---------------------------------------------------------------	   		
				if(strErrVal == """"){
					Outputs.SetProperty(""End Num"",ToNumber(Outputs.GetProperty(""intEndNum"")));
					Outputs.SetProperty(""End Num String"",Outputs.GetProperty(""strEndNum""));
					Outputs.SetProperty(""Quantity"",ToNumber(Outputs.GetProperty(""intQuantity"")));
				}
				else
				{
					 //-------------	GB 15-Dec-06-----------------------------
					 			  
				  	Outputs.SetProperty(""Error Code"",strErrVal);
					Outputs.SetProperty(""Error Message"",strErrVal);				  	
			  		//TheApplication().RaiseErrorText(strErrVal);
			  		
					//-------------	GB -----------------------------
				}
		    	break;	
		    
		    default:
		    	break;
	    }
	}catch(e){
		throw e;
	}	    
   	return(intReturn);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateNumbers Function    		 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update the allocated number	    		                          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 19/04/2005   | 2.0  |	Kadali Srinivas	|		   	Created      xx/xx/2005           *
* 21/04/2006   | 1.1  | Ramakrishna     | Changed code Populate Status Before Allocation  *
**************************************************************************************/

function UpdateAllocateNumbers(bcNumberAlloc,bcAllocNum){
			
	var psBlkInputs;
	var psBlkOutputs;
	
//	var bsRMSBlk;
//	var blnIsRecord;			
	var strStatusAlloc = """";
	var strToStatus = """";
	var strFromStatus = """";
	var	dCurrentDate = """";		
	var intNumId;
//	var strQueryExpr;
	
//	var intCount = 0;
		
	psBlkInputs			= TheApplication().NewPropertySet();
	psBlkOutputs		= TheApplication().NewPropertySet();
	
	/******* MS/09/04/2006  commented as this functionality is not required for STC ***********
	var boChannelPartner:BusObject;	
	var bcDistributorSIMCount:BusComp;
	var bcChannelPartner:BusComp;
	boChannelPartner 		= TheApplication().GetBusObject(""RMS Channel Partner"");
	bcDistributorSIMCount	= boChannelPartner.GetBusComp(""RMS Distributor SIM Count"");
	bcChannelPartner		= boChannelPartner.GetBusComp(""RMS Channel Partner"");
	*******************  MS/09/04/2006 ********************************************************/
	
	intNumId 			= bcAllocNum.GetFieldValue(""Id"");
	strFromStatus 		= bcAllocNum.GetFieldValue(""Status"");
	dCurrentDate		= bcAllocNum.GetFieldValue(""Current Date"");
//---------------------------------------------------------------------------
// If not alllocated to internal division then change status to ""Allocated"".
//---------------------------------------------------------------------------			
	if(ToInteger(bcNumberAlloc.GetFieldValue(""Is Internal""))!= 1){	
		strToStatus =TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"");
        if(strFromStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE"")) {
			bcAllocNum.SetFieldValue(""Status"",strToStatus);
	//below 1.1
			bcAllocNum.SetFieldValue(""Status Before Allocation"",strFromStatus);	
	//above 1.1
			bcAllocNum.SetFieldValue(""Status Date"",dCurrentDate);
        } else {
                                   
	//below 1.1
			bcAllocNum.SetFieldValue(""Status Before Allocation"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));	
	//above 1.1
		
       }
	}
	
	bcAllocNum.SetFieldValue(""Allocation Id"",bcNumberAlloc.GetFieldValue(""Id""));
	//bcAllocNum.SetFieldValue(""Allocated To"",bcNumberAlloc.GetFieldValue(""Alloc To Id""));	
               bcAllocNum.SetFieldValue(""Dlr Allocated To"",bcNumberAlloc.GetFieldValue(""Alloc To Id""));	
	bcAllocNum.SetFieldValue(""Sales Code"",bcNumberAlloc.GetFieldValue(""Alloc To Id""));
 	bcAllocNum.WriteRecord();	
  	
//-------------------------------------------------------------------------------------------------
// This Code is added to Query Partner Management System and get all sub-distributors for the
// specified Partner, and to populate the No. of Allocated SIM Count. (Kadali Srinivas - 29/04/05)
//-------------------------------------------------------------------------------------------------
/* MS/09/04/2006 following script is commented as this functionality is not applicable for STC

	var strPartnerLevel		= bcNumberAlloc.GetFieldValue(""Partner Level"");
	var strTypeIdentfier 	= bcAllocNum.GetFieldValue(""Type Identifier"");
	
	if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")	){
		bcAllocNum.SetFieldValue(""Distributor Id"", bcAllocNum.GetFieldValue(""Allocated To""));		
	}
if(strTypeIdentfier == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"",""SIM"")){
	if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
		strQueryExpr = """";
		strQueryExpr = 	""[Dist Id] = '"" + bcAllocNum.GetFieldValue(""Allocated To"") +  
						""' AND [SIM Card Id] = '"" + bcAllocNum.GetFieldValue(""SIM Card Id"") + ""'"";
	}	

	if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
		strQueryExpr = """";
		strQueryExpr = 	""[Dist Id] = '"" + bcAllocNum.GetFieldValue(""Parent Division Id"") +  
						""' AND [SIM Card Id] = '"" + bcAllocNum.GetFieldValue(""SIM Card Id"") + ""'"";
	}	

	with(bcDistributorSIMCount){
			ClearToQuery();
			ActivateField(""Dist Id"");
			ActivateField(""SIM Card Id"");
			ActivateField(""No. of Alloc Dist Cnt"");
			ActivateField(""No. of Alloc Sub Dist Cnt"");
			SetSearchExpr(strQueryExpr);
			ExecuteQuery();
			blnIsRecord = FirstRecord();

			if(blnIsRecord){
				if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
					intCount = ToInteger(GetFieldValue(""No. of Alloc Dist Cnt"")) + 1;
			  		SetFieldValue(""No. of Alloc Dist Cnt"", intCount);
				  	WriteRecord();
				}
				if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
					intCount = ToInteger(GetFieldValue(""No. of Alloc Sub Dist Cnt"")) + 1;
			  		SetFieldValue(""No. of Alloc Sub Dist Cnt"", intCount);
				  	WriteRecord();
				}	
		 	}
			else{
				var strAllocatedTo = bcAllocNum.GetFieldValue(""Allocated To"");
				with(bcChannelPartner){
					ClearToQuery();
					ActivateField(""Parent Division Id"");
					SetSearchSpec(""Id"",bcAllocNum.GetFieldValue(""Allocated To""));
					ExecuteQuery();
					var blnIsParRec = FirstRecord();
				}
				if(blnIsParRec) {
					NewRecord(1);
					
					SetFieldValue(""Dist Id"", bcAllocNum.GetFieldValue(""Allocated To""));
					SetFieldValue(""SIM Card Id"", bcAllocNum.GetFieldValue(""SIM Card Id""));
					if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
							intCount = ToInteger(GetFieldValue(""No. of Alloc Dist Cnt"")) + 1;
					  		SetFieldValue(""No. of Alloc Dist Cnt"", intCount);
						  	WriteRecord();
					}
					if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
						intCount = ToInteger(GetFieldValue(""No. of Alloc Sub Dist Cnt"")) + 1;
				  		SetFieldValue(""No. of Alloc Sub Dist Cnt"", intCount);
					  	WriteRecord();
					}	
				}
		 }
	}
	
	
}	
MS/09/04/2006                           */
						
	if(bcNumberAlloc.GetFieldValue(""Alloc From"") == """")
		strStatusAlloc = strFromStatus;
	else
		strStatusAlloc = bcAllocNum.GetFieldValue(""Status Before Allocation"");
		
	UpdateMasterAlloc(intNumId,bcNumberAlloc.GetFieldValue(""Id""),strStatusAlloc,bcNumberAlloc.GetFieldValue(""Operation""));
	bcAllocNum.WriteRecord();
	

	psBlkInputs		= null;
	psBlkOutputs	= null;
	//bsRMSBlk		= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateAssCnctNumbers Function 		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update the associated cnct record.  	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function UpdateAssCnctNumbers(intAssocStartId,bcNumberAlloc,strStatusBfrAlloc){
		
	var boNumberMasterConcatNumber;
	var bcNumberMasterAssociationConcat;
	var blnIsRecord;
		
	boNumberMasterConcatNumber = TheApplication().GetBusObject(""RMS NM Number Association"");
	bcNumberMasterAssociationConcat = boNumberMasterConcatNumber.GetBusComp(""RMS NM Association Number Type Display"");
		
	with(bcNumberMasterAssociationConcat){
		ActivateField(""Status"");
		ActivateField(""Allocation Id"");
		SetSearchSpec(""Assoc Start Id"",intAssocStartId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}	
		
    while(blnIsRecord){
//----------------------------------------------------
// Set the status if allocated to an external dealer.
//----------------------------------------------------
		if(bcNumberAlloc.GetFieldValue(""Operation"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_ALLOCATION_OPERATION"", ""ALLOCATE"")){
			if((bcNumberAlloc.GetFieldValue(""Is Internal"") != 1) && (bcNumberMasterAssociationConcat.GetFieldValue(""Status"") ==TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE"")) )
				bcNumberMasterAssociationConcat.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED""));
			bcNumberMasterAssociationConcat.SetFieldValue(""Allocation Id"",bcNumberAlloc.GetFieldValue(""Id""));
		}
		else{
			
			bcNumberMasterAssociationConcat.SetFieldValue(""Allocation Id"","""");
			bcNumberMasterAssociationConcat.SetFieldValue(""Status"",strStatusBfrAlloc);
		}	
		blnIsRecord = bcNumberMasterAssociationConcat.NextRecord();		
	}
	
	bcNumberMasterAssociationConcat	= null;
	boNumberMasterConcatNumber		= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateAssoNumbers Function   		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update the associated numbers.	        		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function UpdateAssoNumbers(intNumId,intAssocStartId,bcNumberAlloc){

	var boNumberMaster; 
	var bcNumberMaster;
	
	var blnIsRecord;
	
	boNumberMaster 		= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNumberMaster		= boNumberMaster.GetBusComp(""RMS NM Number Enquiry For Update"");

//---------------------------------------------------------
//Retriveing the associated numbers from CX_NUM_MSTR
//---------------------------------------------------------
	with(bcNumberMaster){
		ActivateField(""Assoc Start Id"");
		ActivateField(""Id"");
		ActivateField(""Allocation Id"");
		ActivateField(""Allocated To"");
		ActivateField(""Status Before Allocation"");
		ActivateField(""Block Id"");
		ActivateField(""Sales Code"");
		ActivateField(""SIM Card Id"");
		ActivateField(""Distributor Id"");
                                ActivateField(""Dlr Allocated To"");
		//ActivateField(""Parent Division Id"");
		ClearToQuery();		
		SetSearchSpec(""Assoc Start Id"",intAssocStartId);
		SetSearchSpec(""Id"",""<>'""+intNumId+""'"");
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}
	
	while(blnIsRecord){
//-----------------------------------------------------------------------------------------
//Calling the function which changes the status of number and update into reqd tables 	
//-----------------------------------------------------------------------------------------	 
		if(bcNumberAlloc.GetFieldValue(""Operation"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_ALLOCATION_OPERATION"", ""ALLOCATE""))
			UpdateAllocateNumbers(bcNumberAlloc,bcNumberMaster);
		else
			UpdateDeallocateNumbers(bcNumberAlloc,bcNumberMaster);
				
		blnIsRecord = bcNumberMaster.NextRecord();	
	}
	
	
	bcNumberMaster = null;		
	boNumberMaster = null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateDeallocateNumbers Function    	  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Deallocate the number									              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 04/05/2005 	 1.0   	MBT      Created      14/12/2003       *
20060706       | 1.1  | Prasad      | Siebel ES SCR1, Objects Destroyed
20060721       | 1.2  | Ramakrishna | Changed code Populate Status Before Allocation
**************************************************************************************/
function UpdateDeallocateNumbers(bcNumberAlloc,bcAllocNum)
{
//	var boChannelPartner;
//	var bcDistributorSIMCount;
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
	
	var strStatBfrAlloc;
	var strFromStatus;
//	var strPartnerLevel;
	var strTypeIdentfier;
//	var strQueryExpr="""";
//	var blnIsRecord;
//	var intCount;
	var blnBlockUpd	= false;
	
	var psBlkInputs;
	var psBlkOutputs;
	var bsRMSBlk;
	
	with(bcSysPref) {
		ActivateField(""Value"");
		SetSearchSpec(""Name"", ""RMS_BLOCK_UPDATION"");
		SetSearchSpec(""Value"",""Y"");
		ClearToQuery();
		if(FirstRecord())
			blnBlockUpd = true;
	}
	
	/****************************** FUTURE USE MS 22-04-2006***********************************************
	boChannelPartner 		= TheApplication().GetBusObject(""RMS Channel Partner"");
	bcDistributorSIMCount	= boChannelPartner.GetBusComp(""RMS Distributor SIM Count"");
	
	psBlkInputs 	 = TheApplication().NewPropertySet();
	psBlkOutputs 	 = TheApplication().NewPropertySet();
	strStatBfrAlloc  = bcAllocNum.GetFieldValue(""Status Before Allocation"");
	strFromStatus	 = bcAllocNum.GetFieldValue(""Status"");
	strPartnerLevel	 = bcNumberAlloc.GetFieldValue(""Partner Level"");
	strTypeIdentfier = bcAllocNum.GetFieldValue(""Type Identifier"");
	
	if(strTypeIdentfier == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"",""SIM"")){
		if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
			strQueryExpr = """";
			strQueryExpr = 	""[Dist Id] ='"" + bcAllocNum.GetFieldValue(""Allocated To"") +  
					""' AND [SIM Card Id] = '"" + bcAllocNum.GetFieldValue(""SIM Card Id"") + ""'"";
		}
			
		if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
			strQueryExpr = """";
			strQueryExpr = 	""[Dist Id] = '"" + bcAllocNum.GetFieldValue(""Parent Division Id"") +  
					""' AND [SIM Card Id] = '"" + bcAllocNum.GetFieldValue(""SIM Card Id"") + ""'"";
		}	
		if(strQueryExpr != """") {
			with(bcDistributorSIMCount){
				ClearToQuery();
				ActivateField(""Dist Id"");
				ActivateField(""SIM Card Id"");
				ActivateField(""No. of Alloc Dist Cnt"");
				ActivateField(""No. of Alloc Sub Dist Cnt"");
				SetSearchExpr(strQueryExpr);
				ExecuteQuery();
				blnIsRecord = FirstRecord();
				if(blnIsRecord){
					if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
						intCount = ToInteger(GetFieldValue(""No. of Alloc Dist Cnt"")) - 1;
				  		SetFieldValue(""No. of Alloc Dist Cnt"", intCount);
					  	WriteRecord();
					}
					if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
						intCount = ToInteger(GetFieldValue(""No. of Alloc Sub Dist Cnt"")) - 1;
				  		SetFieldValue(""No. of Alloc Sub Dist Cnt"", intCount);
					  	WriteRecord();
					}	
			 	}
			} 
		}
	}
	
    ********************************************************************************************************/
	with(bcAllocNum){
		SetFieldValue(""Allocation Id"","""");
		//MS 22042006 if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")	){
			//SetFieldValue(""Allocated To"","""");	
                                                 SetFieldValue(""Dlr Allocated To"","""");
			SetFieldValue(""Sales Code"","""");
			
		//MS 22042006 }
		//MS 22042006 else{
		//	bcAllocNum.SetFieldValue(""Allocated To"", bcAllocNum.GetFieldValue(""Distributor Id""));
		//MS 22042006 }

		SetFieldValue(""To Dealer Name"","""");
		/*MS 22042006 if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor""))		
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));
		else if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor""))
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED""));
		*/
//below 1.2
		strStatBfrAlloc  = GetFieldValue(""Status Before Allocation"");
		//SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));
		SetFieldValue(""Status"",strStatBfrAlloc);
		SetFieldValue(""Status Before Allocation"","""");
//above 1.2
		SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
		WriteRecord();
	}
		
	UpdateMasterAlloc(bcAllocNum.GetFieldValue(""Id""),bcNumberAlloc.GetFieldValue(""Id""),strStatBfrAlloc,bcNumberAlloc.GetFieldValue(""Operation""));
	if (blnBlockUpd){
		with(psBlkInputs){
				SetProperty(""Object Id"",bcAllocNum.GetFieldValue(""Block Id""));
				SetProperty(""From Status"",strFromStatus);
				SetProperty(""To Status"",strStatBfrAlloc);
			}
			
		bsRMSBlk = TheApplication().GetService(""RMS RMS Block Calc"");
		bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
			
		psBlkInputs		= null;
		psBlkOutputs	= null;
		bsRMSBlk		= null;
	}
//1.1 below
	bcSysPref = null;
	boSysPref = null;
//1.1 above
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateMasterAlloc Function    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Create a new record in the MTM table (CX_MSTR_ALLOC)	    		  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function UpdateMasterAlloc(intNumId,intAllocId,strStatusAlloc,strOperation){

	var boNMAlloc;
	var bcNMMstrAlloc;
	
	boNMAlloc		= TheApplication().GetBusObject(""RMS NM Number Allocation"");
	bcNMMstrAlloc	= boNMAlloc.GetBusComp(""RMS NM Number Master Allocation"");

//------------------------------------------------------------------------------------------------
//Populating the new record in table CX_MSTR_ALLOC with corresponding Number Id and Allocation Id
//------------------------------------------------------------------------------------------------	

	with(bcNMMstrAlloc){
		ActivateField(""Num Id"");
		ActivateField(""Alloc Id"");
		ActivateField(""Status Before Allocation"");
		NewRecord(1);
		SetFieldValue(""Num Id"",intNumId);
		SetFieldValue(""Alloc Id"",intAllocId);
		if(strOperation == TheApplication().InvokeMethod(""LookupValue"", ""NM_ALLOCATION_OPERATION"", ""ALLOCATE""))
			SetFieldValue(""Status Before Allocation"",strStatusAlloc);
		else
			SetFieldValue(""Status Before Allocation"","""");	
			
		WriteRecord();
	}
	
	
	bcNMMstrAlloc 	= null;
	boNMAlloc 		= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation Validation Function						  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Validates if the specified quantity is available and depending on   *
*               : on that populates the end number.                                   *       
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      10/12/2003  
* 20060810      1.1         GARIMAB		Changed Search Spec as 	Special Category Tpye 
                                        is now normal filed  earlier it was joined field
* 08/04/2009	1.2			Ashu        Updated SearchSpec so that Blocked Numbers are
										not selected at time of De-Allocation of Numbers.
**************************************************************************************/

function Validation(Inputs,Outputs){
	    
    var intStartNum;
    var intEndNum;
    var intQuantity;
    var intNumId;
//    var boNMAlloc;
//    var bcNMAlloc;
    
    var strOperation;    
    var strSearchExpr;
    var strAssignedExpr;
//    var strStartNum;
    //var strEndNum;
    var strErrVal = """";
    var blnIsSequence;
    var strIsPaired = ""N"";
	var strSpCategory	= """";
	
    strOperation	= Inputs.GetProperty(""Operation"");      
	intStartNum     = Inputs.GetProperty(""Start Num"");
	intQuantity		= ToNumber(Inputs.GetProperty(""Quantity""));
	intNumId		= Inputs.GetProperty(""Number Id"");
	blnIsSequence	= Inputs.GetProperty(""Is Sequence"");
	strIsPaired		= Inputs.GetProperty(""Is Paired"");
	strSpCategory	= Inputs.GetProperty(""Special Category Name"");
	
	strAssignedExpr = ""' OR [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ASSIGNED"") + ""'"";
	strAssignedExpr += "" OR [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""TRASHED"") + ""')"";
	
	if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""ALLOCATE"")){
		strSearchExpr  =	""[Scheme Id] = '"" + Inputs.GetProperty(""Scheme Id"") +  
							""' AND [Block Id] = '"" + Inputs.GetProperty(""Block Id"") +
							""' AND ([Allocated To] = '""+ Inputs.GetProperty(""Alloc From"")+""')"" + 
							"" AND ([Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"");
		if((strByPassStatus == ""ERPASSIGNED_Y"") || (TheApplication().InvokeMethod(""LookupValue"",""RMS_ALLOC_ADMIN"",""ASSIGNED_Y"")== ""ASSIGNED_Y"")) 
			strSearchExpr+= strAssignedExpr;
		else
			strSearchExpr+= ""')"";
			
		strSearchExpr+= "" AND [Number] >= '"" + intStartNum + ""' AND [Is Associated] = '"" + strIsPaired + ""'"";
						
		//below 1.1
		//if(strSpCategory == """")
			//	strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
		if(strSpCategory == """")
				strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
		//above 1.1
		else
				strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
	}
	if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""DEALLOCATE"")){
		strSearchExpr  =	""[Scheme Id] = '"" + Inputs.GetProperty(""Scheme Id"") +  
							""' AND [Block Id] = '"" + Inputs.GetProperty(""Block Id"") +
							""' AND ([Allocated To] = '""+ Inputs.GetProperty(""Alloc From"")+""')"" + 
							"" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""'"" +
							"" AND [Number] >= '"" + intStartNum + ""' AND [Is Associated] = '"" + strIsPaired + ""'"" +
							"" AND [Record Blocked For] IS NULL"";	//this line 1.2
	//below 1.1
	//	if(strSpCategory == """")
	//			strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
		if(strSpCategory == """")
				strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
	//above 1.1

		else
				strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
	
	}
	
//-------------------------------------------------------------------
// If Is Sequence is selected then calculating end number so as to 
// retrieve only that set of numbers.
//-------------------------------------------------------------------
	if(blnIsSequence == ""Y""){
		intEndNum = ToNumber(intStartNum);
		intEndNum += (intQuantity - 1);
		strSearchExpr = strSearchExpr + "" AND [Number] <= '"" + intEndNum + ""'""; 
	}
	if(intQuantity == """")
		intQuantity = 1;
	
//--------------------------
// Populate the end number.
//--------------------------
	//ms:09/04/2006. changed input arguments as 782 STScript doesnt allow reference for primitive types
	//variables will be embedded in Outputs propertyset
	//Outputs -> strEndNum,intQuantity,intEndNum
	strErrVal = PopulateEndNum(intNumId,strSearchExpr,blnIsSequence,intStartNum,intEndNum,intQuantity,Outputs);

	return (strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation AllocDealloc Function					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : The main function for allocating and deallocating.			      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function AllocDealloc(intObjectId){
	
    var boNumberAlloc;
    var bcNumberAlloc;
   
    var strAllocStatus;
    var strErrVal = """";
    
    var blnIsRecord;
               
   	boNumberAlloc = TheApplication().GetBusObject(""RMS NM Number Allocation"");
	bcNumberAlloc = boNumberAlloc.GetBusComp(""RMS NM Number Allocation"");

	with(bcNumberAlloc){
		ActivateField(""Id"");
		ActivateField(""Status"");
		ActivateField(""Scheme Id"");
		ActivateField(""Block Id"");
		ActivateField(""Alloc To"");		
		ActivateField(""Alloc From"");
		ActivateField(""Start Num"");
		ActivateField(""End Num"");
		ActivateField(""End Num String"");
		ActivateField(""Quantity"");
		ActivateField(""Number Id"");
		ActivateField(""Is Sequence"");
		ActivateField(""Is Internal"");
		ActivateField(""Is Paired"");
		ActivateField(""Special Category Name"");

//-----------------------------------------------------------
// Code added for Phase 1A2 for displaying dealer name,
// dealer area code and dealer channel code.
//-----------------------------------------------------------
		ActivateField(""To Dealer Area Code"");
		ActivateField(""To Dealer Name"");
		ActivateField(""To Dealer Channel Code"");
		ActivateField(""From Dealer Area Code"");
		ActivateField(""From Dealer Name"");
		ActivateField(""From Dealer Channel Code"");
		ActivateField(""Alloc Date"");
		ActivateField(""Current Date"");
		ActivateField(""Partner Level"");
		ActivateField(""Processing Message"");
				
		ClearToQuery();
		SetSearchSpec(""Id"",intObjectId);
		ExecuteQuery();
	}

	blnIsRecord = bcNumberAlloc.FirstRecord();
	if(blnIsRecord){
		strAllocStatus	= bcNumberAlloc.GetFieldValue(""Status"");
			
//---------------------------------------------------------------------------------------
// Display an message to refresh the applet if another user is accessing the same record.
//---------------------------------------------------------------------------------------

		//Amit
		//if(strAllocStatus = TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""))
		if((strAllocStatus == TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"")) || (strAllocStatus == TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""COMPLETE"")) )
		//Amit End
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC003"");
	
		if(strErrVal == """"){
//-------------------------------------------------------------------------------------------------------
// Change status to processing so that another user cant access this record till processing is complete.
//-------------------------------------------------------------------------------------------------------
			
			bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
  			bcNumberAlloc.SetUserProperty(""blnFromAllocation"",""Y"")
			bcNumberAlloc.WriteRecord();
			 
			strErrVal = CheckQuantity(bcNumberAlloc);

//---------------------------------------------------------------------------------------------------
//Display the message as completed if successfully allocated (RMSALC006) or deallocated (RMSALC007).
//---------------------------------------------------------------------------------------------------
			if(strErrVal == ""RMSALC006"" || strErrVal == ""RMSALC007"")
			{
			bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""COMPLETE""));
			bcNumberAlloc.SetFieldValue(""Alloc Date"",bcNumberAlloc.GetFieldValue(""Current Date""));
			bcNumberAlloc.SetFieldValue(""Processing Message"",TheApplication().LookupMessage(""User Defined Errors"",strErrVal));
			//  Calling   WF   process   for  XML   generation   KT 22-05-06
	/*		var prsInputs   = TheApplication().NewPropertySet();
			var prsOutputs  = TheApplication().NewPropertySet();
			var bsNumberAlloc	= TheApplication().GetService(""Workflow Process Manager"");
			prsInputs.SetProperty(""RowId"",intObjectId);
			prsInputs.SetProperty(""ProcessName"",""RMS NM Number Allocation"");
			bsNumberAlloc.InvokeMethod(""RunProcess"",prsInputs,prsOutputs);
*/
/*-------------	GB 15-Dec-06-----------------------------
                	if(strErrVal == ""RMSALC006"")
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC006"");
				else
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC007"");	
					
-----------------------------------------------------------*/
				
			}
//--------------------------------------------------------
// If not successful then set the status back to Pending.
//--------------------------------------------------------			
			else
				{
					bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));		
					//AmitManoj bcNumberAlloc.SetFieldValue(""Processing Message"",TheApplication().LookupMessage(""User Defined Errors"",strErrVal));
					bcNumberAlloc.SetFieldValue(""Processing Message"",strErrVal);
				}

			bcNumberAlloc.SetUserProperty(""blnFromAllocation"",""Y"")				
			bcNumberAlloc.WriteRecord();
		}	
	}
	
	
	bcNumberAlloc = null;	
	boNumberAlloc = null;
	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation AllocateNumbers Function				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Allocate the numbers					                              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function AllocateNumbers(bcAllocNum,bcNumberAlloc){

	var intAssocStartId;
	var intNumId;
	var intQuantity = 1;
	
	var strErrVal = """";
	var strStatusBfrAlloc = """";
	
	var blnIsRecord;
	
	blnIsRecord 		= bcAllocNum.FirstRecord();
	
	while(blnIsRecord){
		intNumId 		= bcAllocNum.GetFieldValue(""Id"");
		intAssocStartId = bcAllocNum.GetFieldValue(""Assoc Start Id"");
			
//-----------------------------------
// Update the number for allocation.	
//-----------------------------------	 
		UpdateAllocateNumbers(bcNumberAlloc,bcAllocNum);
		if(bcAllocNum.GetFieldValue(""Is Associated"") == ""Y"") {				

//----------------------------------------------
// Update the associated numbers for allocation.
//----------------------------------------------	
			UpdateAssoNumbers(intNumId,intAssocStartId,bcNumberAlloc);

//------------------------------------------------------------
// Updating the concatenated number record in CX_NUM_ASS_CNCT.
//------------------------------------------------------------	
			UpdateAssCnctNumbers(intAssocStartId,bcNumberAlloc,strStatusBfrAlloc);		
		}
        
		bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));		
		bcNumberAlloc.SetFieldValue(""Quantity"",intQuantity);
		bcNumberAlloc.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));		
        bcNumberAlloc.SetFieldValue(""End Num"",bcAllocNum.GetFieldValue(""Number""));
        bcNumberAlloc.SetFieldValue(""End Num String"",bcAllocNum.GetFieldValue(""Number String""));
		bcNumberAlloc.SetUserProperty(""blnFromAllocation"",""Y"")
		bcNumberAlloc.WriteRecord();
		
		intQuantity = ToInteger(intQuantity) + 1;
		blnIsRecord = bcAllocNum.NextRecord();
	}	
	
	strErrVal = ""RMSALC006"";	
	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation CheckQuantity Function					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Checks the overlapping of numbers as quantity specified.            *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	 1.0   	MBT	     Created      12/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
20060810       | 1.2  | GARIMA | Changed Search Spec as 	Special Category Tpye 
                                is now normal filed  earlier it was joined field
**************************************************************************************/

function CheckQuantity(bcNumberAlloc){

	var boNMAlloc;
	var boNMEnquiry;
	var bcNMAlloc;
	var bcAllocNum;
	
	var strSearchExpr = """";
	var strErrVal = """";
	var strSearchStatus;
	var strEndNum;
	var strOperation;
		
	var blnIsRecord;
	var blnIsSequence;
	
	var intStartNum = 0;
	var intEndNum = 0;
	var intQuantity;
	var intNumId;
	var strIsPaired = ""N"";
	var strSpCategory	= """";
	
	var psOutputs = TheApplication().NewPropertySet();
			
	boNMAlloc		= TheApplication().GetBusObject(""RMS NM Number Allocation"");
	boNMEnquiry		= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNMAlloc		= boNMAlloc.GetBusComp(""RMS NM Number Allocation"");	
	bcAllocNum		= boNMEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	
	intStartNum		= bcNumberAlloc.GetFieldValue(""Start Num"");
	intEndNum		= bcNumberAlloc.GetFieldValue(""End Num"");
	strEndNum		= bcNumberAlloc.GetFieldValue(""End Num String"");
	intQuantity		= bcNumberAlloc.GetFieldValue(""Quantity"");
	intNumId		= bcNumberAlloc.GetFieldValue(""Number Id"");
	blnIsSequence	= bcNumberAlloc.GetFieldValue(""Is Sequence"");
	strOperation 	= bcNumberAlloc.GetFieldValue(""Operation"");
	strIsPaired		= bcNumberAlloc.GetFieldValue(""Is Paired"");
	strSpCategory 	= bcNumberAlloc.GetFieldValue(""Special Category Name"");
	
	if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""ALLOCATE"")){	
		strSearchExpr  	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
							""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
							""' AND ([Allocated To] = '"" + bcNumberAlloc.GetFieldValue(""Alloc From Id"") + ""'"" + "" OR [Partner Type] = '"" + ""Common Pool')"" +
							"" AND ([Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"") +
							""' OR [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""')"" +
							"" AND [Number] >= '"" + intStartNum + ""' AND [Is Associated] = '"" + strIsPaired + ""'"";
		//below 1.2
		//if(strSpCategory == """")
		//		strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
		if(strSpCategory == """")
				strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
		//above 1.2
		else
				strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
	//ms changed			
	}
	if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""DEALLOCATE"")){
		strSearchExpr  	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
							""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
							""' AND ([Allocated To] = '"" + bcNumberAlloc.GetFieldValue(""Alloc From Id"") + ""'"" + "" OR [Partner Type] = '"" + ""Common Pool')"" +
							"" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""'"" +
							"" AND [Number] >= '"" + intStartNum + ""' AND [Is Associated] = '"" + strIsPaired + ""'"";
		//below 1.2
	//	if(strSpCategory == """")
	//			strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
		if(strSpCategory == """")
				strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
		//above 1.2
		else
				strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";

	}
	
				
//-------------------------------------------------------------------
// If Is Sequence is selected then calculating end number so as to 
// retrieve only that set of numbers.
//-------------------------------------------------------------------

	if(blnIsSequence == ""Y""){
		intEndNum = ToNumber(intStartNum);
		intEndNum += (intQuantity - 1);
		strSearchExpr = strSearchExpr + "" AND [Number] <= "" + intEndNum + """"; 
	}
	
//---------------------------
// Populate the end number.
//---------------------------
	
	strErrVal = PopulateEndNum(intNumId,strSearchExpr,blnIsSequence,intStartNum,intEndNum,intQuantity,psOutputs);

	intEndNum 	= ToNumber(psOutputs.GetProperty(""intEndNum""));
	strEndNum 	= psOutputs.GetProperty(""strEndNum"");
	intQuantity = ToNumber(psOutputs.GetProperty(""intQuantity""));
	
    if(strErrVal == """"){

		strSearchExpr = """";
		strSearchExpr	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
							""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
							""' AND ([Status] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING"") +
				 			""' OR [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"") +
				 			""' ) AND ([Id] <> '"" + bcNumberAlloc.GetFieldValue(""Id"") + 
				 			""' OR [Alloc From Id] <> '"" + bcNumberAlloc.GetFieldValue(""Id"") +
              				""' ) AND [Created] < '"" + bcNumberAlloc.GetFieldValue(""Created"") + ""'"";
						 	
//-------------------------------------------------------------------------------------------------------
//Checking for the concurrency of the start number and the end number selected for the given operation
//-------------------------------------------------------------------------------------------------------
		with(bcNMAlloc){
			ClearToQuery();
			ActivateField(""Scheme Id"");
			ActivateField(""Block Id"");
			ActivateField(""Status"");
			ActivateField(""SIM Artwork Id"");
			ActivateField(""Created"");
			ActivateField(""Start Num"");
			ActivateField(""End Num"");
			ActivateField(""Start Num String"");
			ActivateField(""End Num String"");
			SetSearchExpr(strSearchExpr);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}
		
		while(blnIsRecord){
//--------------------------------------------------
// Display an error if start number is overlapping.	
//--------------------------------------------------
			if((intStartNum >= ToNumber(bcNMAlloc.GetFieldValue(""Start Num""))) && (intStartNum <= ToNumber(bcNMAlloc.GetFieldValue(""End Num"")))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC004"",bcNMAlloc.GetFieldValue(""Start Num String""),bcNMAlloc.GetFieldValue(""End Num String""));	
				break;
			}	
//------------------------------------------------
// Display an error if end number is overlapping.
//------------------------------------------------				
			else if((intEndNum >= ToNumber(bcNMAlloc.GetFieldValue(""Start Num""))) && (intEndNum <= ToNumber(bcNMAlloc.GetFieldValue(""End Num"")))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC005"",bcNMAlloc.GetFieldValue(""Start Num String""),bcNMAlloc.GetFieldValue(""End Num String""));	
				break;
			}	
			
//----------------------------------------------------------------
// Display an error if both start and end number are overlapping.
//----------------------------------------------------------------				
			else if((intStartNum <= ToNumber(bcNMAlloc.GetFieldValue(""Start Num""))) && (intEndNum >= ToNumber(bcNMAlloc.GetFieldValue(""End Num"")))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC009"",bcNMAlloc.GetFieldValue(""Start Num String""),bcNMAlloc.GetFieldValue(""End Num String""));	
				break;
			}
				
			blnIsRecord = bcNMAlloc.NextRecord();	
		
		}

//-----------------------------------------------------------------
// Retrieving numbers as per the start number and end number and 
// allocating or deallocating them as per operation selected.
//-----------------------------------------------------------------	
		if(strErrVal == """"){

//========================================== Kadali Srinivas Ver 2.0 ============================================================
			if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""ALLOCATE"")){	
					strSearchExpr  	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
										""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
										""' AND [Allocated To] = '"" + bcNumberAlloc.GetFieldValue(""Alloc From Id"") + ""'"" +
										"" AND ([Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"") +
										""' OR [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""')"" +
										"" AND [Is Associated] = '"" + strIsPaired + ""'"" + 
										"" AND [Number] >= '"" + intStartNum +
										""' AND [Number] <= '"" + intEndNum + ""'"";
			//below 1.2
			//	if(strSpCategory == """")
			//				strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
				if(strSpCategory == """")
					strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
		//above 1.2
			
				else
					strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
			}
			if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""DEALLOCATE"")){
					strSearchExpr  	= 	""[Scheme Id] = '"" + bcNumberAlloc.GetFieldValue(""Scheme Id"") +  
										""' AND [Block Id] = '"" + bcNumberAlloc.GetFieldValue(""Block Id"") +
										""' AND ([Allocated To] = '"" + bcNumberAlloc.GetFieldValue(""Alloc From Id"") + ""'"" + "" OR [Partner Type] = '"" + ""Common Pool')"" +
										"" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""'"" +
										"" AND [Is Associated] = '"" + strIsPaired + ""'"" + 
										"" AND [Number] >= '"" + intStartNum +
										""' AND [Number] <= '"" + intEndNum + ""'"";
				//below 1.2
//				if(strSpCategory == """")
//					strSearchExpr+=	"" AND [Special Category Id] IS NULL"";

				if(strSpCategory == """")
					strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
				//above 1.2

				else
					strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
			}										
//======================================== Kadali Srinivas Ver 2.0 =============================================================		
			with(bcAllocNum){
					ActivateField(""Scheme Id"");
					ActivateField(""Block Id"");
					ActivateField(""Allocated To"");
					ActivateField(""Number"");
					ActivateField(""SIM Artwork Id"");					
					ActivateField(""Status"");
					ActivateField(""Status Date"");
					ActivateField(""Assoc Start Id"");
					ActivateField(""Is Associated"");
					ActivateField(""Status Before Allocation"");
					ActivateField(""Allocation Id"");
					ActivateField(""Allocated To"");
					ActivateField(""Distributor Id"");
					ActivateField(""Partner Type"");
					ActivateField(""Type Identifier"");
					ActivateField(""SIM Card Id"");
					ActivateField(""Parent Division Id"");
					ActivateField(""To Dealer Name"");
					ActivateField(""Sales Code"");
					ClearToQuery();
					SetSearchExpr(strSearchExpr);
					ExecuteQuery();
			}

			if(bcNumberAlloc.GetFieldValue(""Operation"")==TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""ALLOCATE""))			
					strErrVal = AllocateNumbers(bcAllocNum,bcNumberAlloc);
			else
					strErrVal = DeAllocateNumbers(bcAllocNum,bcNumberAlloc);
		}
	
	}
			
	
	bcNMAlloc = null;
	bcAllocNum = null;
	boNMAlloc = null;
	
//1.1 below
	psOutputs = null;
	boNMEnquiry = null;
//1.1 above
	return(strErrVal);

}
"/**************************************************************************************
* Name          : NM Number Allocation DeAllocateNumbers Function   			 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Deallocate the numbers.       					                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 04/12/2003 	 | 1.0  | 		MBT	  |					   	Created      13/12/2003   *
* 21/07/2006     | 1.1  | Ramakrishna | Changed code Populate Status Before Allocation*
**************************************************************************************/

function DeAllocateNumbers(bcAllocNum,bcNumberAlloc){

	var intAssocStartId;
	var intNumId;
	
	var strErrVal = """";
	var strStatusBfrAlloc;
	
	var blnIsRecord;
	blnIsRecord = bcAllocNum.FirstRecord();
	
	while(blnIsRecord){
		intNumId 			= bcAllocNum.GetFieldValue(""Id"");
		intAssocStartId	  	= bcAllocNum.GetFieldValue(""Assoc Start Id"");
//below 1.1
		//strStatusBfrAlloc 	= bcAllocNum.GetFieldValue(""Status"");
		strStatusBfrAlloc 	= bcAllocNum.GetFieldValue(""Status Before Allocation""); 
//above 1.1
		
		UpdateDeallocateNumbers(bcNumberAlloc,bcAllocNum);
		
//----------------------------------------------------------------------------------------
//Calling the function which changes the status of number and update into reqd tables 	
//-----------------------------------------------------------------------------------------	 
					
		if(bcAllocNum.GetFieldValue(""Is Associated"") == ""Y""){				
//----------------------------------
// Updating the associated numbers.
//----------------------------------	
			UpdateAssoNumbers(intNumId,intAssocStartId,bcNumberAlloc);

//------------------------------------------------------------
// Updating the concatenated number record in CX_NUM_ASS_CNCT.
//------------------------------------------------------------	
			UpdateAssCnctNumbers(intAssocStartId,bcNumberAlloc,strStatusBfrAlloc);		
		}
        
        bcNumberAlloc.SetFieldValue(""End Num"",bcAllocNum.GetFieldValue(""Number""));
        bcNumberAlloc.SetFieldValue(""End Num String"",bcAllocNum.GetFieldValue(""Number String""));
		blnIsRecord = bcAllocNum.NextRecord();
	}
	
	strErrVal = ""RMSALC007"";
	return(strErrVal);	

}
"/**************************************************************************************
* Name          : RMS NM Number Allocation PopulateEndNum Function	    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Populates the end number if quantity specified is available.	      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      11/12/2003       *
**************************************************************************************/

function PopulateEndNum(intNumId,strSearchExpr,blnIsSequence,intStartNum,intEndNum,intQuantity,Outputs){

	var boNumberAlloc;
	var bcNumMstr;
	
	var blnIsRecord;
	
	var strErrVal = """";
	var strEndNum = """";

	var intCount = 0;
	var intVerifier	= 0;

	boNumberAlloc 	= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNumMstr    	= boNumberAlloc.GetBusComp(""RMS NM Number Enquiry For Update"");	
	
	with(bcNumMstr){
		ActivateField(""Number String"");
		ActivateField(""Number"");
		ActivateField(""Scheme Id"");
		ActivateField(""Block Id"");
		ActivateField(""Allocated To"");
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ClearToQuery();
		SetSearchExpr(strSearchExpr);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}

//-------------------------------------------------------------------
// Display an error if start number is not available for allocation.
//-------------------------------------------------------------------
	if(!blnIsRecord)
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC008"");
	else if(intNumId != bcNumMstr.GetFieldValue(""Id""))
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC008"");
	else{
		while(blnIsRecord){
			if(blnIsSequence == ""Y""){
				intVerifier = ToNumber(intStartNum);
				intVerifier += intCount;
				if(bcNumMstr.GetFieldValue(""Number"") != (intVerifier)){
//------------------------------------------------------------------------
// Display an error if numbers arn't available for allocation in sequence.
//------------------------------------------------------------------------				
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC001"",intCount);
					break;
				}	
			}
			strEndNum 	= ToString(bcNumMstr.GetFieldValue(""Number String""));	
			intEndNum 	= ToNumber(bcNumMstr.GetFieldValue(""Number""));
			intCount 	= intCount + 1;
			
			if(intQuantity == intCount)	
				break;	
				
			blnIsRecord = bcNumMstr.NextRecord();	
			
	 	}
	 	Outputs.SetProperty(""intQuantity"",intQuantity);
	 	Outputs.SetProperty(""strEndNum"", strEndNum);
	 	Outputs.SetProperty(""intEndNum"",intEndNum);

		if((strErrVal == """") && (intQuantity != intCount))
//------------------------------------------------------------------------------------
// Display an error if requested quantity of numbers arn't available for allocation.
//------------------------------------------------------------------------------------		
	 		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC002"",intCount);
	 }
	 	
	 
	 bcNumMstr = null;
	 boNumberAlloc = null;
	 
	 return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation RefreshRecord Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Allocation Code File					              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 03/12/2003 	1.0   		MBT						   	Created      13/12/2003       *
**************************************************************************************/

function RefreshRecord(){

	var psInputs;
	var psOutputs;
	var bsSIMNMRef;
	
	psInputs	= TheApplication().NewPropertySet();
	psOutputs	= TheApplication().NewPropertySet();
	
	bsSIMNMRef 	= TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
										
	psInputs.SetProperty(""Business Component Name"",""RMS NM Number Allocation"");
	psInputs.SetProperty(""Business Object Name"",""RMS NM Number Allocation"");
					
	bsSIMNMRef.InvokeMethod(""Refresh Business Component"",psInputs,psOutputs);

	psInputs	= null;
	psOutputs	= null;
	bsSIMNMRef	= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation Service_PreInvoke Method    		 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Allocation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      10/12/2003       *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs){

	var intObjectId;
	var intReturn = ContinueOperation;
	Outputs.SetProperty(""Error Code"",""00000"");
	//ms var intEndNum;
	//ms var intQuantity;
	
	//ms var strEndNum;
	var strErrVal = """";
	
	intObjectId = Inputs.GetProperty(""Object Id"");
//	var test = TheApplication().GetProfileAttr(""HCPT GroupCode"");
//	var test2 = TheApplication().GetProfileAttr(""HCPT PartnerCode"");
//	var test3 = ""hello"";
	
	try{ 
		switch (MethodName){
			case ""Allocate"":
			case ""Deallocate"":
				strErrVal = AllocDealloc(intObjectId);
				RefreshRecord();
			  	intReturn = CancelOperation;
			  	
			  	var isAllocFromGen = TheApplication().GetProfileAttr(""AllocFromGen""); 
			  	
			  	if(strErrVal != """" && isAllocFromGen != ""Y"")
			  	{
					//-------------	GB 15-Dec-06-----------------------------			  	
						  	Outputs.SetProperty(""Error Code"",strErrVal);
						  	
		                	if(strErrVal == ""RMSALC006"")
		                		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC006"");
		                	if (strErrVal == ""RMSALC007"")
		                		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC007"");	
		                		                	
							
							Outputs.SetProperty(""Error Message"",strErrVal);
							
			  		//		TheApplication().RaiseErrorText(strErrVal);
					//-------------	GB -----------------------------
			  	}
			  	break;
		    		    	
		    case ""Validate"":
		    //ms:09/04/2006. changed input arguments as 782 STScript doesnt allow reference for primitive types
		    //variables will be embedded in Outputs propertyset
		    	//old/ strErrVal = Validation(Inputs,intEndNum,strEndNum,intQuantity);
		    	strErrVal = Validation(Inputs,Outputs);
		       	intReturn = CancelOperation;
//---------------------------------------------------------------
// Setting the end number if the required quantity is available.
//---------------------------------------------------------------	   		
				if(strErrVal == """"){
					Outputs.SetProperty(""End Num"",ToNumber(Outputs.GetProperty(""intEndNum"")));
					Outputs.SetProperty(""End Num String"",Outputs.GetProperty(""strEndNum""));
					Outputs.SetProperty(""Quantity"",ToNumber(Outputs.GetProperty(""intQuantity"")));
				}
				else
				{
					 //-------------	GB 15-Dec-06-----------------------------
					 			  
				  	Outputs.SetProperty(""Error Code"",strErrVal);
					Outputs.SetProperty(""Error Message"",strErrVal);				  	
			  		//TheApplication().RaiseErrorText(strErrVal);
			  		
					//-------------	GB -----------------------------
				}
		    	break;	
		    
		    default:
		    	break;
	    }
	}catch(e){
		throw e;
	}	    
   	return(intReturn);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateNumbers Function    		 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update the allocated number	    		                          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 19/04/2005   | 2.0  |	Kadali Srinivas	|		   	Created      xx/xx/2005           *
* 21/04/2006   | 1.1  | Ramakrishna     | Changed code Populate Status Before Allocation  *
**************************************************************************************/

function UpdateAllocateNumbers(bcNumberAlloc,bcAllocNum){
			
	var psBlkInputs;
	var psBlkOutputs;
	
//	var bsRMSBlk;
//	var blnIsRecord;			
	var strStatusAlloc = """";
	var strToStatus = """";
	var strFromStatus = """";
	var	dCurrentDate = """";		
	var intNumId;
//	var strQueryExpr;
	
//	var intCount = 0;
		
	psBlkInputs			= TheApplication().NewPropertySet();
	psBlkOutputs		= TheApplication().NewPropertySet();
	
	/******* MS/09/04/2006  commented as this functionality is not required for STC ***********
	var boChannelPartner:BusObject;	
	var bcDistributorSIMCount:BusComp;
	var bcChannelPartner:BusComp;
	boChannelPartner 		= TheApplication().GetBusObject(""RMS Channel Partner"");
	bcDistributorSIMCount	= boChannelPartner.GetBusComp(""RMS Distributor SIM Count"");
	bcChannelPartner		= boChannelPartner.GetBusComp(""RMS Channel Partner"");
	*******************  MS/09/04/2006 ********************************************************/
	
	intNumId 			= bcAllocNum.GetFieldValue(""Id"");
	strFromStatus 		= bcAllocNum.GetFieldValue(""Status"");
	dCurrentDate		= bcAllocNum.GetFieldValue(""Current Date"");
//---------------------------------------------------------------------------
// If not alllocated to internal division then change status to ""Allocated"".
//---------------------------------------------------------------------------			
	if(ToInteger(bcNumberAlloc.GetFieldValue(""Is Internal""))!= 1){	
		strToStatus =TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"");
		bcAllocNum.SetFieldValue(""Status"",strToStatus);
//below 1.1
		bcAllocNum.SetFieldValue(""Status Before Allocation"",strFromStatus);	
//above 1.1
		bcAllocNum.SetFieldValue(""Status Date"",dCurrentDate);
	}
	
	bcAllocNum.SetFieldValue(""Allocation Id"",bcNumberAlloc.GetFieldValue(""Id""));
	bcAllocNum.SetFieldValue(""Allocated To"",bcNumberAlloc.GetFieldValue(""Alloc To Id""));	
	bcAllocNum.SetFieldValue(""Sales Code"",bcNumberAlloc.GetFieldValue(""Alloc To Id""));
 	bcAllocNum.WriteRecord();	
  	
//-------------------------------------------------------------------------------------------------
// This Code is added to Query Partner Management System and get all sub-distributors for the
// specified Partner, and to populate the No. of Allocated SIM Count. (Kadali Srinivas - 29/04/05)
//-------------------------------------------------------------------------------------------------
/* MS/09/04/2006 following script is commented as this functionality is not applicable for STC

	var strPartnerLevel		= bcNumberAlloc.GetFieldValue(""Partner Level"");
	var strTypeIdentfier 	= bcAllocNum.GetFieldValue(""Type Identifier"");
	
	if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")	){
		bcAllocNum.SetFieldValue(""Distributor Id"", bcAllocNum.GetFieldValue(""Allocated To""));		
	}
if(strTypeIdentfier == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"",""SIM"")){
	if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
		strQueryExpr = """";
		strQueryExpr = 	""[Dist Id] = '"" + bcAllocNum.GetFieldValue(""Allocated To"") +  
						""' AND [SIM Card Id] = '"" + bcAllocNum.GetFieldValue(""SIM Card Id"") + ""'"";
	}	

	if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
		strQueryExpr = """";
		strQueryExpr = 	""[Dist Id] = '"" + bcAllocNum.GetFieldValue(""Parent Division Id"") +  
						""' AND [SIM Card Id] = '"" + bcAllocNum.GetFieldValue(""SIM Card Id"") + ""'"";
	}	

	with(bcDistributorSIMCount){
			ClearToQuery();
			ActivateField(""Dist Id"");
			ActivateField(""SIM Card Id"");
			ActivateField(""No. of Alloc Dist Cnt"");
			ActivateField(""No. of Alloc Sub Dist Cnt"");
			SetSearchExpr(strQueryExpr);
			ExecuteQuery();
			blnIsRecord = FirstRecord();

			if(blnIsRecord){
				if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
					intCount = ToInteger(GetFieldValue(""No. of Alloc Dist Cnt"")) + 1;
			  		SetFieldValue(""No. of Alloc Dist Cnt"", intCount);
				  	WriteRecord();
				}
				if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
					intCount = ToInteger(GetFieldValue(""No. of Alloc Sub Dist Cnt"")) + 1;
			  		SetFieldValue(""No. of Alloc Sub Dist Cnt"", intCount);
				  	WriteRecord();
				}	
		 	}
			else{
				var strAllocatedTo = bcAllocNum.GetFieldValue(""Allocated To"");
				with(bcChannelPartner){
					ClearToQuery();
					ActivateField(""Parent Division Id"");
					SetSearchSpec(""Id"",bcAllocNum.GetFieldValue(""Allocated To""));
					ExecuteQuery();
					var blnIsParRec = FirstRecord();
				}
				if(blnIsParRec) {
					NewRecord(1);
					
					SetFieldValue(""Dist Id"", bcAllocNum.GetFieldValue(""Allocated To""));
					SetFieldValue(""SIM Card Id"", bcAllocNum.GetFieldValue(""SIM Card Id""));
					if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
							intCount = ToInteger(GetFieldValue(""No. of Alloc Dist Cnt"")) + 1;
					  		SetFieldValue(""No. of Alloc Dist Cnt"", intCount);
						  	WriteRecord();
					}
					if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
						intCount = ToInteger(GetFieldValue(""No. of Alloc Sub Dist Cnt"")) + 1;
				  		SetFieldValue(""No. of Alloc Sub Dist Cnt"", intCount);
					  	WriteRecord();
					}	
				}
		 }
	}
	
	
}	
MS/09/04/2006                           */
						
	if(bcNumberAlloc.GetFieldValue(""Alloc From"") == """")
		strStatusAlloc = strFromStatus;
	else
		strStatusAlloc = bcAllocNum.GetFieldValue(""Status Before Allocation"");
		
	UpdateMasterAlloc(intNumId,bcNumberAlloc.GetFieldValue(""Id""),strStatusAlloc,bcNumberAlloc.GetFieldValue(""Operation""));
	bcAllocNum.WriteRecord();
	

	psBlkInputs		= null;
	psBlkOutputs	= null;
	//bsRMSBlk		= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateAssCnctNumbers Function 		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update the associated cnct record.  	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function UpdateAssCnctNumbers(intAssocStartId,bcNumberAlloc,strStatusBfrAlloc){
		
	var boNumberMasterConcatNumber;
	var bcNumberMasterAssociationConcat;
	var blnIsRecord;
		
	boNumberMasterConcatNumber = TheApplication().GetBusObject(""RMS NM Number Association"");
	bcNumberMasterAssociationConcat = boNumberMasterConcatNumber.GetBusComp(""RMS NM Association Number Type Display"");
		
	with(bcNumberMasterAssociationConcat){
		ActivateField(""Status"");
		ActivateField(""Allocation Id"");
		SetSearchSpec(""Assoc Start Id"",intAssocStartId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}	
		
    while(blnIsRecord){
//----------------------------------------------------
// Set the status if allocated to an external dealer.
//----------------------------------------------------
		if(bcNumberAlloc.GetFieldValue(""Operation"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_ALLOCATION_OPERATION"", ""ALLOCATE"")){
			if(bcNumberAlloc.GetFieldValue(""Is Internal"") != 1)
				bcNumberMasterAssociationConcat.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED""));
			bcNumberMasterAssociationConcat.SetFieldValue(""Allocation Id"",bcNumberAlloc.GetFieldValue(""Id""));
		}
		else{
			
			bcNumberMasterAssociationConcat.SetFieldValue(""Allocation Id"","""");
			bcNumberMasterAssociationConcat.SetFieldValue(""Status"",strStatusBfrAlloc);
		}	
		blnIsRecord = bcNumberMasterAssociationConcat.NextRecord();		
	}
	
	bcNumberMasterAssociationConcat	= null;
	boNumberMasterConcatNumber		= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateAssoNumbers Function   		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update the associated numbers.	        		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function UpdateAssoNumbers(intNumId,intAssocStartId,bcNumberAlloc){

	var boNumberMaster; 
	var bcNumberMaster;
	
	var blnIsRecord;
	
	boNumberMaster 		= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNumberMaster		= boNumberMaster.GetBusComp(""RMS NM Number Enquiry For Update"");

//---------------------------------------------------------
//Retriveing the associated numbers from CX_NUM_MSTR
//---------------------------------------------------------
	with(bcNumberMaster){
		ActivateField(""Assoc Start Id"");
		ActivateField(""Id"");
		ActivateField(""Allocation Id"");
		ActivateField(""Allocated To"");
		ActivateField(""Status Before Allocation"");
		ActivateField(""Block Id"");
		ActivateField(""Sales Code"");
		ActivateField(""SIM Card Id"");
		ActivateField(""Distributor Id"");
		ActivateField(""Parent Division Id"");
		ClearToQuery();		
		SetSearchSpec(""Assoc Start Id"",intAssocStartId);
		SetSearchSpec(""Id"",""<>'""+intNumId+""'"");
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}
	
	while(blnIsRecord){
//-----------------------------------------------------------------------------------------
//Calling the function which changes the status of number and update into reqd tables 	
//-----------------------------------------------------------------------------------------	 
		if(bcNumberAlloc.GetFieldValue(""Operation"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_ALLOCATION_OPERATION"", ""ALLOCATE""))
			UpdateAllocateNumbers(bcNumberAlloc,bcNumberMaster);
		else
			UpdateDeallocateNumbers(bcNumberAlloc,bcNumberMaster);
				
		blnIsRecord = bcNumberMaster.NextRecord();	
	}
	
	
	bcNumberMaster = null;		
	boNumberMaster = null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateDeallocateNumbers Function    	  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Deallocate the number									              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 04/05/2005 	 1.0   	MBT      Created      14/12/2003       *
20060706       | 1.1  | Prasad      | Siebel ES SCR1, Objects Destroyed
20060721       | 1.2  | Ramakrishna | Changed code Populate Status Before Allocation
**************************************************************************************/
function UpdateDeallocateNumbers(bcNumberAlloc,bcAllocNum)
{
//	var boChannelPartner;
//	var bcDistributorSIMCount;
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
	
	var strStatBfrAlloc;
	var strFromStatus;
//	var strPartnerLevel;
	var strTypeIdentfier;
//	var strQueryExpr="""";
//	var blnIsRecord;
//	var intCount;
	var blnBlockUpd	= false;
	
	var psBlkInputs;
	var psBlkOutputs;
	var bsRMSBlk;
	
	with(bcSysPref) {
		ActivateField(""Value"");
		SetSearchSpec(""Name"", ""RMS_BLOCK_UPDATION"");
		SetSearchSpec(""Value"",""Y"");
		ClearToQuery();
		if(FirstRecord())
			blnBlockUpd = true;
	}
	
	/****************************** FUTURE USE MS 22-04-2006***********************************************
	boChannelPartner 		= TheApplication().GetBusObject(""RMS Channel Partner"");
	bcDistributorSIMCount	= boChannelPartner.GetBusComp(""RMS Distributor SIM Count"");
	
	psBlkInputs 	 = TheApplication().NewPropertySet();
	psBlkOutputs 	 = TheApplication().NewPropertySet();
	strStatBfrAlloc  = bcAllocNum.GetFieldValue(""Status Before Allocation"");
	strFromStatus	 = bcAllocNum.GetFieldValue(""Status"");
	strPartnerLevel	 = bcNumberAlloc.GetFieldValue(""Partner Level"");
	strTypeIdentfier = bcAllocNum.GetFieldValue(""Type Identifier"");
	
	if(strTypeIdentfier == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"",""SIM"")){
		if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
			strQueryExpr = """";
			strQueryExpr = 	""[Dist Id] ='"" + bcAllocNum.GetFieldValue(""Allocated To"") +  
					""' AND [SIM Card Id] = '"" + bcAllocNum.GetFieldValue(""SIM Card Id"") + ""'"";
		}
			
		if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
			strQueryExpr = """";
			strQueryExpr = 	""[Dist Id] = '"" + bcAllocNum.GetFieldValue(""Parent Division Id"") +  
					""' AND [SIM Card Id] = '"" + bcAllocNum.GetFieldValue(""SIM Card Id"") + ""'"";
		}	
		if(strQueryExpr != """") {
			with(bcDistributorSIMCount){
				ClearToQuery();
				ActivateField(""Dist Id"");
				ActivateField(""SIM Card Id"");
				ActivateField(""No. of Alloc Dist Cnt"");
				ActivateField(""No. of Alloc Sub Dist Cnt"");
				SetSearchExpr(strQueryExpr);
				ExecuteQuery();
				blnIsRecord = FirstRecord();
				if(blnIsRecord){
					if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")){
						intCount = ToInteger(GetFieldValue(""No. of Alloc Dist Cnt"")) - 1;
				  		SetFieldValue(""No. of Alloc Dist Cnt"", intCount);
					  	WriteRecord();
					}
					if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor"")){
						intCount = ToInteger(GetFieldValue(""No. of Alloc Sub Dist Cnt"")) - 1;
				  		SetFieldValue(""No. of Alloc Sub Dist Cnt"", intCount);
					  	WriteRecord();
					}	
			 	}
			} 
		}
	}
	
    ********************************************************************************************************/
	with(bcAllocNum){
		SetFieldValue(""Allocation Id"","""");
		//MS 22042006 if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor"")	){
			SetFieldValue(""Allocated To"","""");	
			SetFieldValue(""Sales Code"","""");
			
		//MS 22042006 }
		//MS 22042006 else{
			bcAllocNum.SetFieldValue(""Allocated To"", bcAllocNum.GetFieldValue(""Distributor Id""));
		//MS 22042006 }

		SetFieldValue(""To Dealer Name"","""");
		/*MS 22042006 if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Distributor""))		
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));
		else if(strPartnerLevel == TheApplication().InvokeMethod(""LookupValue"", ""EEPM_PARTNER_LEVEL"", ""Sub-Distributor""))
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED""));
		*/
//below 1.2
		strStatBfrAlloc  = GetFieldValue(""Status Before Allocation"");
		//SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));
		SetFieldValue(""Status"",strStatBfrAlloc);
		SetFieldValue(""Status Before Allocation"","""");
//above 1.2
		SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
		WriteRecord();
	}
		
	UpdateMasterAlloc(bcAllocNum.GetFieldValue(""Id""),bcNumberAlloc.GetFieldValue(""Id""),strStatBfrAlloc,bcNumberAlloc.GetFieldValue(""Operation""));
	if (blnBlockUpd){
		with(psBlkInputs){
				SetProperty(""Object Id"",bcAllocNum.GetFieldValue(""Block Id""));
				SetProperty(""From Status"",strFromStatus);
				SetProperty(""To Status"",strStatBfrAlloc);
			}
			
		bsRMSBlk = TheApplication().GetService(""RMS RMS Block Calc"");
		bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
			
		psBlkInputs		= null;
		psBlkOutputs	= null;
		bsRMSBlk		= null;
	}
//1.1 below
	bcSysPref = null;
	boSysPref = null;
//1.1 above
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateMasterAlloc Function    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Create a new record in the MTM table (CX_MSTR_ALLOC)	    		  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function UpdateMasterAlloc(intNumId,intAllocId,strStatusAlloc,strOperation){

	var boNMAlloc;
	var bcNMMstrAlloc;
	
	boNMAlloc		= TheApplication().GetBusObject(""RMS NM Number Allocation"");
	bcNMMstrAlloc	= boNMAlloc.GetBusComp(""RMS NM Number Master Allocation"");

//------------------------------------------------------------------------------------------------
//Populating the new record in table CX_MSTR_ALLOC with corresponding Number Id and Allocation Id
//------------------------------------------------------------------------------------------------	

	with(bcNMMstrAlloc){
		ActivateField(""Num Id"");
		ActivateField(""Alloc Id"");
		ActivateField(""Status Before Allocation"");
		NewRecord(1);
		SetFieldValue(""Num Id"",intNumId);
		SetFieldValue(""Alloc Id"",intAllocId);
		if(strOperation == TheApplication().InvokeMethod(""LookupValue"", ""NM_ALLOCATION_OPERATION"", ""ALLOCATE""))
			SetFieldValue(""Status Before Allocation"",strStatusAlloc);
		else
			SetFieldValue(""Status Before Allocation"","""");	
			
		WriteRecord();
	}
	
	
	bcNMMstrAlloc 	= null;
	boNMAlloc 		= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation Validation Function						  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Validates if the specified quantity is available and depending on   *
*               : on that populates the end number.                                   *       
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      10/12/2003  
* 20060810      1.1         GARIMAB		Changed Search Spec as 	Special Category Tpye 
                                        is now normal filed  earlier it was joined field
**************************************************************************************/

function Validation(Inputs,Outputs){
	    
    var intStartNum;
    var intEndNum;
    var intQuantity;
    var intNumId;
//    var boNMAlloc;
//    var bcNMAlloc;
    
    var strOperation;    
    var strSearchExpr;
//    var strStartNum;
    //var strEndNum;
    var strErrVal = """";
    var blnIsSequence;
    var strIsPaired = ""N"";
	var strSpCategory	= """";
	
    strOperation	= Inputs.GetProperty(""Operation"");      
	intStartNum     = Inputs.GetProperty(""Start Num"");
	intQuantity		= ToNumber(Inputs.GetProperty(""Quantity""));
	intNumId		= Inputs.GetProperty(""Number Id"");
	blnIsSequence	= Inputs.GetProperty(""Is Sequence"");
	strIsPaired		= Inputs.GetProperty(""Is Paired"");
	strSpCategory	= Inputs.GetProperty(""Special Category Name"");
	
	if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""ALLOCATE"")){
		strSearchExpr  =	""[Scheme Id] = '"" + Inputs.GetProperty(""Scheme Id"") +  
							""' AND [Block Id] = '"" + Inputs.GetProperty(""Block Id"") +
							""' AND ([Allocated To] = '""+ Inputs.GetProperty(""Alloc From"")+""'"" + "" OR [Partner Type] = '"" + ""Common Pool')"" +
							"" AND ([Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"") +
							""' OR [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""')"" +
							"" AND [Number] >= '"" + intStartNum + ""' AND [Is Associated] = '"" + strIsPaired + ""'"";
		//below 1.1
		//if(strSpCategory == """")
			//	strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
		if(strSpCategory == """")
				strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
		//above 1.1
		else
				strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
	}
	if(strOperation == TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""DEALLOCATE"")){
		strSearchExpr  =	""[Scheme Id] = '"" + Inputs.GetProperty(""Scheme Id"") +  
							""' AND [Block Id] = '"" + Inputs.GetProperty(""Block Id"") +
							""' AND ([Allocated To] = '""+ Inputs.GetProperty(""Alloc From"")+""'"" + "" OR [Partner Type] = '"" + ""Common Pool')"" +
							"" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""'"" +
							"" AND [Number] >= '"" + intStartNum + ""' AND [Is Associated] = '"" + strIsPaired + ""'"";
	//below 1.1
	//	if(strSpCategory == """")
	//			strSearchExpr+=	"" AND [Special Category Id] IS NULL"";
		if(strSpCategory == """")
				strSearchExpr+=	"" AND [Special Category Type] IS NULL"";
	//above 1.1

		else
				strSearchExpr+=	"" AND [Special Category Type] = '"" + strSpCategory + ""'"";
	
	}
	
//-------------------------------------------------------------------
// If Is Sequence is selected then calculating end number so as to 
// retrieve only that set of numbers.
//-------------------------------------------------------------------
	if(blnIsSequence == ""Y""){
		intEndNum = ToNumber(intStartNum);
		intEndNum += (intQuantity - 1);
		strSearchExpr = strSearchExpr + "" AND [Number] <= '"" + intEndNum + ""'""; 
	}
	if(intQuantity == """")
		intQuantity = 1;
	
//--------------------------
// Populate the end number.
//--------------------------
	//ms:09/04/2006. changed input arguments as 782 STScript doesnt allow reference for primitive types
	//variables will be embedded in Outputs propertyset
	//Outputs -> strEndNum,intQuantity,intEndNum
	strErrVal = PopulateEndNum(intNumId,strSearchExpr,blnIsSequence,intStartNum,intEndNum,intQuantity,Outputs);

	return (strErrVal);
}
function AssociateNumbers(psNumSet,psAssocParam,marrSource,psOp)
{
try{
	var mpsAssocParamRec = GetPropertySet(psAssocParam,""ParamRec"");
	var mpsPSIndx = TheApplication().NewPropertySet();
	var mpsNumPropSet,mpsTempNumSet;	
	var strErrVal = """";
	psOp.SetProperty(""strErrVal"","""");	
	psOp.SetProperty(""strErrCode"","""");	
	if(mpsAssocParamRec == """") return 0;
	var mboNMNumAssoc 			= TheApplication().GetBusObject(""RMS NM Number Association Service"");  			//customized BO for the Business Service
	var mbcNMNumAssocMstr   	= mboNMNumAssoc.GetBusComp(""RMS NM Number Association Master"");					//BC based on Number Association Master
	var mbcNMNumAssocDtl    	= mboNMNumAssoc.GetBusComp(""RMS NM Number Association Detail"");					//BC based on Association Detail having no relationship specified in the BO.
	var mbcNMNumAssocMstrCnct	= mboNMNumAssoc.GetBusComp(""RMS NM Number Association Master Concat"");			//BC based on MTM table between Association Master and Cnct Table, used for updating the flag
	var mbcNMNumAssocCnct   	= mboNMNumAssoc.GetBusComp(""RMS NM Association Number Type Display"");			//BC based on Cnct table which is having 1:M link with Association Master
	var mbcNMNumAssocCnctNL 	= mboNMNumAssoc.GetBusComp(""RMS NM Association Number Type Display No Links"");	//BC based on Cnct table which is having no links in BO. used for querying Cnct records
	var mbcNMNumMstr = mboNMNumAssoc.GetBusComp(""RMS NM Number Enquiry For Update"");
	var mbcNMNumCnct =  mboNMNumAssoc.GetBusComp(""RMS NM Number Master Concat"");
	var mbcSIMNumInfo = mboNMNumAssoc.GetBusComp(""RMS NM SIM ORDER LINE ITEM"");
	var mboNMAssocRul = TheApplication().GetBusObject(""RMS NM Association Rule"");
	var bcNMAssocRulDtl = mboNMAssocRul.GetBusComp(""RMS NM Association Rule Detail"");
	var mbcNMNumAssocCnctCurr;
	var marrDest 				= new Array();
	var marrNumPropSet 	= new Array();
	var marrNumbers = new Array();
	var marrParentAssocNum = new Array();	
	var arrTempArray = new Array();
	var marrNumbers2= new Array; //Tushar
	var marrNumbers3= new Array; //Tushar
	var arrTempArray2= new Array; //Tushar
	var arrTempArray3= new Array; //Tushar
    var mbIsRecord, mbSourceNum, mbIsCnctRec;
	var mbCreateNew 			= true;
	var mbIsRuleRec;    										
	var mbIsIMSI= ""N"";
	var msCrdRatio= """";
	var msTypeCnct= """";		
	var msNoOfSIM= 0;
	var msNoOfIMSI= 0;
	var msNoOfMSISDN= 0;			
	var msConcatType;
	var msGenLvl="""";
	var psfnArgs = TheApplication().NewPropertySet();
	GetConcatType(psAssocParam.GetProperty(""RuleId""),psfnArgs);
	msTypeCnct = psfnArgs.GetProperty(""msTypeCnct"");
	msCrdRatio = psfnArgs.GetProperty(""msCrdRatio"");
	msNoOfSIM = ToNumber(psfnArgs.GetProperty(""msNoOfSIM""));
	msNoOfIMSI = ToNumber(psfnArgs.GetProperty(""msNoOfIMSI""));
	msNoOfMSISDN = ToNumber(psfnArgs.GetProperty(""msNoOfMSISDN""));
	msGenLvl = psfnArgs.GetProperty(""msGenLvl"");
	msCrdRatio	= ToString(msNoOfSIM)+"":""+ToString(msNoOfIMSI);
	var msReserveId = psAssocParam.GetProperty(""ReservedToId"");			
	var msAllocId = psAssocParam.GetProperty(""AllocId"");
	var msRuleType = psAssocParam.GetProperty(""RuleType"");
	var msStatus = TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""NOT AVAILABLE""); 
	var msAssocId = psAssocParam.GetProperty(""AssocId"");
	var msParentAssocMstrId	= """";
	var msCnctNum = """";
	var msParentAssocId	= """";
	var msAssocStartId 	= """";
	var msAssocStartsts	= """";
	var msFromStatus	= """";
	var msSIMIdentifier	= TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""SIM"");
	var msSIMId		= """";
	var msAllocTo		= """";
	var msAllocateId	= """";
	var miNumSetCnt 	= psNumSet.GetChildCount();
	var miParamCnt 		= 0;		
	var miNoOfCnctRec 	= SetCnctRecCnt(marrSource);
	var miAssocSeq 		= 0;										
	var miDestCnt 		= 0;
	var miCnctCnt		= 0;
	var miQty 	= 0;
	var miAvailableAssocSeq	= 0;
	var miParecntAssocCnt= 0;
	var miArrayLength 	= 0;
	var miTempCnt,  miParentAssocCnt = 0;
	var blnIsRecord;
	with (mbcNMNumAssocMstr) {
		ActivateField(""Status"");
		ClearToQuery();
		SetSearchSpec(""Id"",psAssocParam.GetProperty(""AssocId""));
		ExecuteQuery();
		mbIsRecord = FirstRecord();
		if(mbIsRecord != true) return 0;
	}
	if((msTypeCnct.indexOf(""SIM"") >= 0) && (msTypeCnct.indexOf(""IMSI"") >= 0)) 
		mbIsIMSI = ""Y"";
	while (miParamCnt < miNumSetCnt) {
		if((miParamCnt ==0) && (msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD""))) {
			msParentAssocMstrId 	= mpsAssocParamRec.GetChild(miParamCnt).GetProperty(""ParentAssocId"");
		}
		marrNumPropSet[miParamCnt] 	= psNumSet.GetChild(miParamCnt);
		miParamCnt++;
	}
	marrNumbers = RMSNA_GetConcatNumberArray_Split(psAssocParam,miNumSetCnt,miNoOfCnctRec,marrDest,marrNumPropSet,marrSource,mpsPSIndx);
	if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""PARENT""))
		mbSourceNum = true;
	else
		mbSourceNum = false;
	//If the Rule is of Type 'Child' then find out the next available Assoc Seq
	if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) {			
		with(mbcNMNumAssocDtl) {
			ActivateField(""Association Seq Num"");
			ClearToQuery();
			SetSearchSpec(""Association Id"", msParentAssocMstrId);
			SetSortSpec(""Association Seq Num (DESCENDING)"");
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) return 0;
			miAvailableAssocSeq = ToInteger(GetFieldValue(""Association Seq Num"")) + 1;		
		}
	}
	for (miQty = 0;miQty < psAssocParam.GetProperty(""RootQty"");miQty++) {
		mbCreateNew = true;
		msAssocStartId = """";
		mpsTempNumSet = TheApplication().NewPropertySet();
		for (miCnctCnt = 0;miCnctCnt < miNoOfCnctRec;miCnctCnt++) {
			//If the Rule Type is 'Child' and mbCreateNew is true then set mbCreateNew to false
			//else set it true			
			if((miCnctCnt == 0) && (msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD""))) 
				mbCreateNew = false;
			else
				mbCreateNew = true;
			//this is for creating a cnct bc without any links to assoc mstr
			if(!mbCreateNew)
				mbcNMNumAssocCnctCurr = mbcNMNumAssocCnctNL;
			else
				mbcNMNumAssocCnctCurr = mbcNMNumAssocCnct;
			with (mbcNMNumAssocCnctCurr) {
				if(mbCreateNew) {
					NewRecord(1);	
					if(msAssocStartId == """") {
						mpsNumPropSet 	= marrNumPropSet[0];
						msAssocStartId 	=  mpsNumPropSet.GetProperty(marrNumbers[miQty][miCnctCnt][0]);
						if(mpsNumPropSet.GetType() == msSIMIdentifier) {
							msSIMId = msAssocStartId;
						}
					}
				}
				else {
					ActivateField(""Associated Number"");
					ActivateField(""Associated Type"");
					ActivateField(""Reserve Id"");
					ActivateField(""Status"");
					ActivateField(""Assoc Start Id"");
					ActivateField(""Allocation Id"");
					ClearToQuery();
					SetSearchSpec(""Associated Number"",marrNumbers[miQty][miCnctCnt][0]);
					ExecuteQuery(ForwardOnly);
					mbIsCnctRec 	= FirstRecord();
					if(!mbIsCnctRec) return 0;
					msAssocStartId 	= GetFieldValue(""Assoc Start Id"");
					if(GetFieldValue(""Status"") != msStatus )
						msStatus		= GetFieldValue(""Status"");
				}
				msCnctNum = """";
				for (miArrayLength = 0;miArrayLength < getArrayLength(marrNumbers[miQty][miCnctCnt]); miArrayLength++) {
					if(msCnctNum == """") {
						msCnctNum = marrNumbers[miQty][miCnctCnt][miArrayLength];
						msConcatType = psNumSet.GetChild(mpsPSIndx.GetProperty(ToString(miQty)+ToString(miCnctCnt)+ToString(miArrayLength))).GetProperty(""Type"");
					}
					else{
						if(marrNumbers[miQty][miCnctCnt][miArrayLength] == ""X"") 
							continue;
						msCnctNum = msCnctNum + "" / "" + marrNumbers[miQty][miCnctCnt][miArrayLength];
						msConcatType = msConcatType + "" / ""+ psNumSet.GetChild(mpsPSIndx.GetProperty(ToString(miQty)+ToString(miCnctCnt)+ToString(miArrayLength))).GetProperty(""Type"");
					}
				}
	SetFieldValue(""Associated Number"",msCnctNum);
	SetFieldValue(""Associated Type"", msConcatType);
	SetFieldValue(""Assoc Start Id"", msAssocStartId);
	SetFieldValue(""Allocation Id"",msAllocId);
	SetFieldValue(""Reserve Id"",msReserveId);
	SetFieldValue(""Status"",msStatus);
	WriteRecord();
			}
			miAssocSeq++;
			mbSourceNum = true;
			for(miParamCnt=0; miParamCnt < getArrayLength(marrNumbers[miQty][miCnctCnt]);miParamCnt = miParamCnt) {
				if(marrNumbers[miQty][miCnctCnt][miParamCnt] == ""X"")
					continue;
				with(mbcNMNumAssocDtl) {
					if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) {
						if(mbCreateNew) {
							mbSourceNum = true;
							for(var i = 0; i < getArrayLength(marrParentAssocNum); i = i) {
								NewRecord(1);
								miAssocSeq = miAvailableAssocSeq++;
								SetFieldValue(""Association Seq Num"",miAssocSeq);
								if(mbSourceNum) 
									SetFieldValue(""Source Num Id"",marrParentAssocNum[i++]);
								else
									SetFieldValue(""Parent Ass Id"",msParentAssocId);
								SetFieldValue(""Destination Num Id"",marrParentAssocNum[i++]);
								SetFieldValue(""Association Id"",msParentAssocMstrId);
								SetFieldValue(""Number Association Concat Id"",mbcNMNumAssocCnctCurr.GetFieldValue(""Id""));
								WriteRecord();
								msParentAssocId = GetFieldValue(""Id"");
								mbSourceNum = false;		
							}
						}
						else {
							ActivateField(""Association Seq Num"");
							ActivateField(""Association Id"");
							ActivateField(""Source Num Id"");
							ActivateField(""Destination Num Id"");
							ActivateField(""Parent Ass Id"");
							ActivateField(""Association Seq Num"");
							ActivateField(""Number Association Concat Id"");
							ClearToQuery();
							SetSearchSpec(""Number Association Concat Id"", mbcNMNumAssocCnctCurr.GetFieldValue(""Id""));
							SetSearchSpec(""Association Id"",msParentAssocMstrId);
							ExecuteQuery();
							mbIsCnctRec = FirstRecord();		
							if(!mbIsCnctRec) return 0;
							miAssocSeq = GetFieldValue(""Association Seq Num"");
							miTempCnt = 0;
							miParentAssocCnt =0;
							marrParentAssocNum = new Array();
							while (mbIsCnctRec) {
							arrTempArray[miTempCnt] = arrTempArray2;
								arrTempArray[miTempCnt][""Source Num Id""] = arrTempArray3;
								SetArray(arrTempArray,miTempCnt,""Source Num Id"",""?"",GetFieldValue(""Source Num Id""));
								arrTempArray[miTempCnt][""Destination Num Id""] = arrTempArray3;
								SetArray(arrTempArray,miTempCnt,""Destination Num Id"",""?"",GetFieldValue(""Destination Num Id""));	
								arrTempArray[miTempCnt][""Id""] = arrTempArray3;
								SetArray(arrTempArray,miTempCnt,""Id"",""?"",GetFieldValue(""Id""));	
								arrTempArray[miTempCnt][""Parent Ass Id""] = arrTempArray3;
								SetArray(arrTempArray,miTempCnt,""Parent Ass Id"",""?"",GetFieldValue(""Parent Ass Id""));	
								mbIsCnctRec = NextRecord();
							}
			miTempCnt=0;
			for(miTempCnt=0;miTempCnt< getArrayLength(arrTempArray);miTempCnt++) {
								if(arrTempArray[miTempCnt][""Source Num Id""] != """") {
									mbSourceNum = false;
									msParentAssocId = arrTempArray[miTempCnt][""Id""];
									marrParentAssocNum[miParentAssocCnt++] = arrTempArray[miTempCnt][""Source Num Id""];
									marrParentAssocNum[miParentAssocCnt++] = arrTempArray[miTempCnt][""Destination Num Id""];
									break;
								}
							}
							for(miTempCnt=0;miTempCnt < getArrayLength(arrTempArray);miTempCnt++) {
								if(arrTempArray[miTempCnt][""Parent Ass id""] == msParentAssocId) {
									msParentAssocId = arrTempArray[miTempCnt][""Id""];
									marrParentAssocNum[miParentAssocCnt++] = arrTempArray[miTempCnt][""Destination Num Id""];
									miTempCnt = 0;
								}
							}	
						}
					}
						NewRecord(1);
						SetFieldValue(""Association Seq Num"",miAssocSeq);
						mpsNumPropSet = """";
						if(mbSourceNum) {
							mpsNumPropSet = marrNumPropSet[mpsPSIndx.GetProperty(ToString(miQty)+ToString(miCnctCnt)+ToString(miParamCnt))];
							SetFieldValue(""Source Num Id"",mpsNumPropSet.GetProperty(marrNumbers[miQty][miCnctCnt][miParamCnt++]));
						}
						else
							SetFieldValue(""Parent Ass Id"",msParentAssocId);
						if((msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) && (miParamCnt == 0)) miParamCnt++;
						mpsNumPropSet = marrNumPropSet[mpsPSIndx.GetProperty(ToString(miQty)+ToString(miCnctCnt)+ToString(miParamCnt))];
						SetFieldValue(""Association Id"",msAssocId);
						SetFieldValue(""Number Association Concat Id"",mbcNMNumAssocCnctCurr.GetFieldValue(""Id""));
						var temp = mpsNumPropSet.GetProperty(marrNumbers[miQty][miCnctCnt][miParamCnt]);
						SetFieldValue(""Destination Num Id"",mpsNumPropSet.GetProperty(marrNumbers[miQty][miCnctCnt][miParamCnt++]));
						WriteRecord();
						msParentAssocId = GetFieldValue(""Id"");
						mbSourceNum = false;
					}
					}
					UpsertNumAssocMstrCnct(mbcNMNumAssocMstrCnct,mbcNMNumAssocCnctCurr,msRuleType,msParentAssocMstrId, msAssocId, mbCreateNew);
			psfnArgs.Reset();
			psfnArgs = GetmsAssocStartsts(mbcNMNumMstr,msAssocStartId);
			msAssocStartsts = psfnArgs.GetProperty(""msAssocStartsts"");
			msAllocTo = psfnArgs.GetProperty(""msAllocTo"");
			msAllocateId = psfnArgs.GetProperty(""msAllocateId"");
			for(var miNumCnt=0; miNumCnt < getArrayLength(marrNumbers[miQty][miCnctCnt]); miNumCnt++) {
				mpsNumPropSet = marrNumPropSet[mpsPSIndx.GetProperty(ToString(miQty)+ToString(miCnctCnt)+ToString(miNumCnt))];
				if(marrNumbers[miQty][miCnctCnt][miNumCnt] != ""X"") {			
					if(!(mpsTempNumSet.PropertyExists(marrNumbers[miQty][miCnctCnt][miNumCnt]))) {
						mpsTempNumSet.SetProperty(marrNumbers[miQty][miCnctCnt][miNumCnt],"""")
						with(mbcNMNumMstr) {
							ActivateField(""Status"");
							ActivateField(""Is Associated"");
							ActivateField(""Assoc Start Id"");
							ActivateField(""IMSI Assoc"");
							ActivateField(""Status Bfr Assoc"");
							ActivateField(""Block Id"");
							ActivateField(""Sales Code"");
							ActivateField(""Allocated To"");
							ActivateField(""Allocation Id"");
							ActivateField(""Card Ratio"");						
							ActivateField(""Type Identifier"");	
							ActivateField(""SIM Generation Support"");
							ActivateField(""No. Of Assigned MSISDNs"");
							ClearToQuery();
							SetSearchSpec(""Id"",mpsNumPropSet.GetProperty(marrNumbers[miQty][miCnctCnt][miNumCnt]));
							ExecuteQuery(ForwardOnly);
							mbIsRecord = FirstRecord();
							if(mbIsRecord) {
								msFromStatus = GetFieldValue(""Status"");	
								SetFieldValue(""Assoc Start Id"", msAssocStartId);
								msGenLvl = SortGen(msGenLvl);
								SetFieldValue(""SIM Generation Support"",msGenLvl);
								if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""MSISDN""))
								UpdateSIM(msNoOfMSISDN,msAssocStartId);								
								SetFieldValue(""Is Associated"",""Y"");
								SetFieldValue(""IMSI Assoc"",mbIsIMSI);
								SetFieldValue(""Status"",msAssocStartsts);
								SetFieldValue(""Status Bfr Assoc"",GetFieldValue(""Status""));
								SetFieldValue(""Card Ratio"",msCrdRatio);
								if(GetFieldValue(""Allocated To"") == """") {
									SetFieldValue(""Allocated To"",msAllocTo);
									SetFieldValue(""Sales Code"",msAllocTo);
									SetFieldValue(""Allocation Id"",msAllocateId);
								}
								SetFieldValue(""No. Of Assigned MSISDNs"", msNoOfMSISDN);
								WriteRecord();
							}
						}
					}
					if(mbIsRecord) {
						UpdateNumMstrCnct(mbcNMNumCnct,mbcNMNumAssocCnctCurr,mbcNMNumMstr);
					}
					with(mbcSIMNumInfo){
						ActivateField(""Assoc Start Id"");
						ActivateField(""SIM Id"");
						ClearToQuery();
						SetSearchSpec(""Assoc Start Id"",msAssocStartId);
						ExecuteQuery();
						if(!FirstRecord()){
							NewRecord(1);
							SetFieldValue(""Assoc Start Id"",msAssocStartId);
							SetFieldValue(""SIM Id"",msAssocStartId);
							WriteRecord();
						}
					}
				}
			}
		}
	}
	strErrVal = UpdateAssocMstr(msRuleType,mbcNMNumAssocMstrCnct,mbcNMNumAssocMstr,msParentAssocMstrId,msAssocId);
 	if(strErrVal == """")
	{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASS001"");
		psOp.SetProperty(""strErrVal"",strErrVal);	
		psOp.SetProperty(""strErrCode"",""RMSASS001"");	
	}	
}finally{
	mpsPSIndx = null;
	mpsTempNumSet = null;
	psfnArgs = null;
	bcNMAssocRulDtl = null;
	mboNMAssocRul = null;
	mbcSIMNumInfo = null;
	mbcNMNumAssocMstr 	= null;
	mbcNMNumAssocDtl= null;
	mbcNMNumAssocMstrCnct= null;
	mbcNMNumAssocCnct= null;
	mbcNMNumAssocCnctNL	= null;
	mbcNMNumMstr= null;
	mbcNMNumCnct= null;
	mboNMNumAssoc  = null;
	marrNumbers2 = null;
	marrNumbers3 = null;
	arrTempArray2 = null;
	arrTempArray3 = null;
}
return(strErrVal);
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
                                 Objects must not be destroyed, these are passed to 
                                 func AssociateNumbers.
---------------+------+--------+----------------------------------------------
*/
function AssociateNumbers_ObjectDeclare(mboNMNumAssoc,mbcNMNumAssocMstr,mbcNMNumAssocDtl,mbcNMNumAssocMstrCnct,mbcNMNumAssocCnct,mbcNMNumAssocCnctNL,mbcNMNumMstr,mbcNMNumCnct,mbcSIMNumInfo, mboNMAssocRul, bcNMAssocRulDtl)
{
	mboNMNumAssoc 			= TheApplication().GetBusObject(""RMS NM Number Association Service"");  			//customized BO for the Business Service
	mbcNMNumAssocMstr   	= mboNMNumAssoc.GetBusComp(""RMS NM Number Association Master"");					//BC based on Number Association Master
	mbcNMNumAssocDtl    	= mboNMNumAssoc.GetBusComp(""RMS NM Number Association Detail"");					//BC based on Association Detail having no relationship specified in the BO.
	mbcNMNumAssocMstrCnct	= mboNMNumAssoc.GetBusComp(""RMS NM Number Association Master Concat"");			//BC based on MTM table between Association Master and Cnct Table, used for updating the flag
	mbcNMNumAssocCnct   	= mboNMNumAssoc.GetBusComp(""RMS NM Association Number Type Display"");			//BC based on Cnct table which is having 1:M link with Association Master
	mbcNMNumAssocCnctNL 	= mboNMNumAssoc.GetBusComp(""RMS NM Association Number Type Display No Links"");	//BC based on Cnct table which is having no links in BO. used for querying Cnct records
	mbcNMNumMstr 			= mboNMNumAssoc.GetBusComp(""RMS NM Number Enquiry For Update"");
	mbcNMNumCnct			= mboNMNumAssoc.GetBusComp(""RMS NM Number Master Concat"");
	mbcSIMNumInfo           = mboNMNumAssoc.GetBusComp(""RMS NM SIM ORDER LINE ITEM"");

	mboNMAssocRul 			= TheApplication().GetBusObject(""RMS NM Association Rule"");
	bcNMAssocRulDtl  		= mboNMAssocRul.GetBusComp(""RMS NM Association Rule Detail"");
}
function AssociateNumbers_comments(&psNumSet,&psAssocParam){

//------------------------------------------------------------------------------------------------
//	Comment 1--
//------------------------------------------------------------------------------------------------
// Query Assoc Rule Detail and obtain the no of destination for each number type specified in the 
// Assoc Rule. This is used for determining the number of Cnct records to be inserted.
// If the rule is like 
//	Source		Dest	no of dest
//--------------------------------
//	Type1     	Type2   2
// there will be two records in cnct table 
// Type1Number1-Type2Number1 and Type1Number1-Type2Number2
//------------------------------------------------------------------------------------------------


//Create the Cnct number from marrNumbers Array which contains numbers in sequence
/*	msCnctNum = """";
	for (miArrayLength = 0;miArrayLength < getArrayLength(marrNumbers[miQty][miCnctCnt]); miArrayLength++) {
		if(msCnctNum == """") msCnctNum = marrNumbers[miQty][miCnctCnt][miArrayLength];
		else
			msCnctNum = msCnctNum + "" / "" + marrNumbers[miQty][miCnctCnt][miArrayLength];
	}*/
	
//mtm bc update for association master


/*	with (bcNMAssocRulDtl) {
		ActivateField(""No of Destinations"");
		ActivateField(""Split Record Id"");		
		ClearToQuery();
		SetSearchSpec(""Rule Id"",psAssocParam.GetProperty(""RuleId""));
		ExecuteQuery(ForwardOnly);
		mbIsRuleRec = FirstRecord();
		if(!mbIsRuleRec) return 0;

		marrDest[miDestCnt++] 	= 1;
		while(mbIsRuleRec) {
			miNoOfCnctRec = miNoOfCnctRec * ToInteger(GetFieldValue(""No of Destinations""))
			marrDest[miDestCnt++] = miNoOfCnctRec;
			mbIsRuleRec = NextRecord();
		}

	}*/

	
}
"/**************************************************************************************
* Name          : RMS NM Number Association CreateAssocParam Method    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/05/2005 	 1.0   	MBT		 Created      30/05/2005       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function BuildSourceArray(marrSource,bcNumAssociationMstr,psAssocParam) {

	var mboNMAssocRul			= TheApplication().GetBusObject(""RMS NM Association Rule"");
	var bcNMAssocRulDtl  		= mboNMAssocRul.GetBusComp(""RMS NM Association Rule Detail"");
	
	var boNumAssocDtl = TheApplication().GetBusObject(""RMS NM Number Association Service"");
	var bcAssocCnct 	= boNumAssocDtl.GetBusComp(""RMS NM Number Association Master Concat"");
	
	var marrSrcNumType = new Array();
	var mstrSrcNumType;
	var marrNumDest = new Array();
	
	var msNumType = ""NumType"";
	var msPSNumInd = ""PSNumInd"";
	var msDestNum  = ""DestNum"";
	var marrSource2 = new Array; 
    var marrSource3 = new Array; 
	var marrSource4 = new Array; 
    var marrSource5 = new Array; 
	marrSource[0] = marrSource2;

	
	var psAssocParamRec;
	var psfnArgs = TheApplication().NewPropertySet();
	
	try{	
	with (bcNMAssocRulDtl) {
		ActivateField(""No of Destinations"");
		ActivateField(""Split Record Id"");		
		ActivateField(""Sequence"");
		ActivateField(""Source Number Type"");
		ActivateField(""Source Number Type Id"");
		ActivateField(""Source Number Subtype"");
		ActivateField(""Destination Number Type"");
		ActivateField(""Destination Number Type Id"");
		ActivateField(""Destination Number Subtype"");
		ActivateField(""Destination Number Type Identifier"");
		ActivateField(""Parent Rule"");
		ActivateField(""Rule Id"");
		ActivateField(""No of Destinations"");			
		ActivateField(""Split"");							
		ActivateField(""Split Record Id"");
		var temp = bcNumAssociationMstr.GetFieldValue(""Rule Id"");
		ClearToQuery();
		SetSearchSpec(""Rule Id"",bcNumAssociationMstr.GetFieldValue(""Rule Id""));
		ExecuteQuery(ForwardOnly);
		var mbIsRuleRec = FirstRecord();

		if(!mbIsRuleRec) return 0;
		var intDtlRecCnt = 0;
		
		//initializing the no of dest for first element (source number) to 1
		if(mbIsRuleRec) {
			psAssocParamRec = psAssocParam.GetChild(0);
			if(psAssocParamRec.GetProperty(""ParentRuleId"") != """") {
				with (bcAssocCnct) {
					ActivateField(""Associated Type"");
					ActivateField(""Associated Numbers"");
					ActivateField(""Allocation Id"");
					ActivateField(""Reserve Id"");
					ActivateField(""Generated Number"");
					ActivateField(""HLR Id"");
					
					ClearToQuery();
					SetSearchSpec(""Association Id"", psAssocParamRec.GetProperty(""ParentAssocId""));
					SetSearchSpec(""Flag"",""N"");
					SetSearchSpec(""Generated Number"","" >='"" + psAssocParamRec.GetProperty(""AssocGenNum"") + ""'"");
					SetSearchSpec(""Assoc Status"",""='"" + psAssocParamRec.GetProperty(""NumStatus"") + ""'"");
	//				SetSearchSpec(""HLR Id"",psAssocParamRec.GetProperty(""HLRID""));
					SetSortSpec(""Generated Number(ASCENDING)"");
					ExecuteQuery(ForwardOnly);
					var blnNumMstrRec = FirstRecord();
					if(blnNumMstrRec) //psNum.SetType(GetFieldValue(""Associated Type""));
						//marrSource[0][msNumType][0] = GetFieldValue(""Associated Type"");
						marrSource[0][msNumType] = marrSource3;
						SetArray(marrSource,0,msNumType,0,""?"",GetFieldValue(""Associated Type""));	
				}
			}else {
				marrSource[0][msNumType] = marrSource3;
	 			SetArray(marrSource,0,msNumType,0,""?"",GetFieldValue(""Source Number Type""));
	 					
	 		}
	 			marrSource[0][msPSNumInd] = marrSource4;
				SetArray(marrSource,0,msPSNumInd,0,""?"",0);
				marrSource[0][msDestNum] = marrSource5;
				SetArray(marrSource,0,msDestNum,0,""?"",1);

				var a = marrSource[0][""DestNum""][0];
				var b = marrSource[0][""PSNumInd""][0];
				var c = marrSource[0][""NumType""][0];
			
		}

		//var temp = marrSource[0][msNumType][0];
		var intPsNNumCnt = 0;
		var intBranchCnt = 0;
		var intDestCnt = 0;
		var intTtlNoOfDestCnt = 0;
		var mblnSplit = ""N"";

		var mintNoOfDest = 0;
		var mstrChkNumType;
		var intPsValCnt = 1;
		while(mbIsRuleRec) {
			var mintArraylen = getArrayLength(marrSource);
			for(var i = 0;i<mintArraylen;i++) {
				mblnSplit = ""N"";
				if(i == 0 && psAssocParamRec.GetProperty(""ParentRuleId"") != """")
					mstrChkNumType = marrSource[i][msNumType][0];
				else
					mstrChkNumType = GetFieldValue(""Source Number Type"");
				psfnArgs.SetProperty(""mblnSplit"",mblnSplit);
				if(CheckSourceExists(marrSource[i][msNumType][0],mstrChkNumType,marrSrcNumType,psfnArgs)){
					mblnSplit = psfnArgs.GetProperty(""mblnSplit"");
					if(mblnSplit==""N"") {
						var mstrCnctType = ToString(marrSource[i][msNumType][0]);
						var temp3 = mstrCnctType;
						intDestCnt++;
						intPsNNumCnt++;
						psfnArgs.SetProperty(""intPsValCnt"",intPsValCnt);
						ConstructArray(i,marrSource,msNumType,msDestNum,msPSNumInd,bcNMAssocRulDtl,mstrCnctType,intDestCnt,intPsNNumCnt,mblnSplit,psfnArgs);
						intPsValCnt = ToNumber(psfnArgs.GetProperty(""intPsValCnt""));
					} else {
						mstrSrcNumType = """";
						for(var intSrcLen =0;intSrcLen<ToInteger(getArrayLength(marrSrcNumType))-1;intSrcLen++) {
							if(intSrcLen==0)
								mstrSrcNumType = marrSrcNumType[intSrcLen]; 
							if((ToInteger(getArrayLength(marrSrcNumType))-1) != 1)
								mstrSrcNumType = mstrSrcNumType + "";""+marrSrcNumType[intSrcLen]
						}
						CopyArray((ToInteger(intBranchCnt)+1),marrSource,msDestNum,msPSNumInd);
						psfnArgs.SetProperty(""intPsValCnt"",intPsValCnt);
						ConstructArray((ToInteger(intBranchCnt)+1),marrSource,msNumType,msDestNum,msPSNumInd,bcNMAssocRulDtl,mstrSrcNumType,intDestCnt,intPsNNumCnt,mblnSplit,psfnArgs);
						intPsValCnt = ToNumber(psfnArgs.GetProperty(""intPsValCnt""));
						intBranchCnt++;
					}
				}
			 }

			mbIsRuleRec	= NextRecord();
		}
		SynchronizeArrays(marrSource,msDestNum);
		SynchronizeArrays(marrSource,msPSNumInd);
		SetNumCnctRec(marrSource,msNumType,msDestNum);
	}
	for(var itwer = 0;itwer<getArrayLength(marrSource);itwer++) {
		for(var jar = 0;jar<getArrayLength(marrSource[itwer][msNumType]);jar++)
			var temp = marrSource[itwer][msNumType][jar];
	}		
	
	for(var i=0;i<getArrayLength(marrSource);i++) {
		for(var j=0;j<getArrayLength(marrSource[i][msDestNum]);j++)
			var temp = marrSource[i][msDestNum][j];
	}

	for(var i=0;i<getArrayLength(marrSource);i++) {
		for(var j=0;j<getArrayLength(marrSource[i][msPSNumInd]);j++)
			var temp = marrSource[i][msPSNumInd][j];
	}
	} catch (e) {
		throw(e+"":""+temp+"":""+marrSource);
	} finally {
		bcNMAssocRulDtl	= null;
		mboNMAssocRul	= null;
		
		boNumAssocDtl 	= null;
		bcAssocCnct 	= null;
		
		marrSrcNumType 	= null;
		marrNumDest 	= null;
//1.1 below
		psfnArgs = null;
		marrSource2 = null;
		marrSource3 = null;
		marrSource4 = null;
		marrSource5 = null;
//1.1 above
	}	
}
"/**************************************************************************************
* Name          : RMS NM Number Association Calculate Quantity		    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function CalculateQuantity(&arrAssWorkId,Idn,intSourceQuantity,strRuleType,noOfDest) {	

	var boAssRulDtl = TheApplication().GetBusObject(""RMS NM Association Rule"");
	var bcAssRuleDtl = boAssRulDtl.GetBusComp(""RMS NM Association Rule Detail"");
	var boNumAssocNew = TheApplication().GetBusObject(""RMS NM Number Association"");
	var bcNumAssStartNum = boNumAssocNew.GetBusComp(""RMS NM Number Association Start Number"");	

	var arrNoOfDestn = new Array();
	var arrBlnSplit  = new Array();
	
	var intStartNumRecCnt = 0;
	var intQtyUpd=0;
	var blnAssRuleDtlRec;

//-------------------------------------------------------------------------------
//Querying Association Detail and populating the No. of destinations in an array.
//-------------------------------------------------------------------------------	

	with(bcAssRuleDtl) {	
	
		ActivateField(""No of Destinations"");
		ActivateField(""Split"");
		ActivateField(""Split Record Id"");
		ClearToQuery();
		SetSearchSpec(""Rule Id"",Idn);
		ExecuteQuery(1);
		blnAssRuleDtlRec = FirstRecord(); 
	
		while (blnAssRuleDtlRec) {
			arrNoOfDestn[intStartNumRecCnt] = GetFieldValue(""No of Destinations"");
			if(ToInteger(intQtyUpd) == 0)
				arrBlnSplit[intQtyUpd++]= ""N"";
			if(GetFieldValue(""Split"")== ""Y"" || GetFieldValue(""Split Record Id"") != """")
				arrBlnSplit[intQtyUpd++]= ""Y"";
			else 
				arrBlnSplit[intQtyUpd++]= ""N"";
			
			blnAssRuleDtlRec = NextRecord();	
			intStartNumRecCnt++;
		}
	}
	for(var i=0;i<ToInteger(arrBlnSplit.length);i++)
		var temp = arrBlnSplit[i];
	

//--------------------------------------------------------------------------------------------------------------------
//Calculating the quantity based on the No. of destination and populating the association parameters with the quantity.
//--------------------------------------------------------------------------------------------------------------------	

	for(intStartNumRecCnt=0;ToInteger(intStartNumRecCnt)<ToInteger(arrAssWorkId.length);intStartNumRecCnt++) {

		if (intStartNumRecCnt == 0)
			noOfDest[intStartNumRecCnt] = intSourceQuantity;
		else {
			if(arrBlnSplit[intStartNumRecCnt] == ""Y"")
				noOfDest[intStartNumRecCnt] = noOfDest[intStartNumRecCnt-1];
			else				
				noOfDest[intStartNumRecCnt] = noOfDest[intStartNumRecCnt-1] * ToInteger(arrNoOfDestn[intStartNumRecCnt-1]);
		}
	
		with(bcNumAssStartNum) {
			ActivateField(""Quantity"");
			ActivateField(""Qty Read Only"");	
			ClearToQuery();
			SetSearchSpec(""Id"",arrAssWorkId[intStartNumRecCnt]);
			ExecuteQuery(1);
			if(intStartNumRecCnt!=0) {
				if(FirstRecord()){
					SetFieldValue(""Qty Read Only"",""N"");
					SetFieldValue(""Quantity"",noOfDest[intStartNumRecCnt]);
					SetFieldValue(""Qty Read Only"",""Y"");
					WriteRecord(); 
				}
			}
		}
	}
	
	bcAssRuleDtl 		= null;
	boAssRulDtl 		= null;
	
	bcNumAssStartNum 	= null;	
	boNumAssocNew 		= null;

	arrNoOfDestn 		= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Association CheckHLRID Method    		 	  		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Verify the Association Parameters	    		                      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	 1.0   	MBT		 Created      12/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function CheckHLRID(&psAssocParam)
{
	var psAssocParamRec;
	var msHLRID			= """";
	var msHLRCheck		= """";
	var blnReturn		= true;
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref = boSysPref.GetBusComp(""System Preferences""); 	
	
	with(bcSysPref) {
		ActivateField(""Name"");
		ActivateField(""Value"");		
		ClearToQuery();
		SetSearchSpec(""Name"",""RMSHLRCHECK"");
		ExecuteQuery();
		
		if(!FirstRecord())
			msHLRCheck = ""N""
		else
			msHLRCheck = GetFieldValue(""Value"");
		if(msHLRCheck == ""Y"") {
			for (var i=0;i<psAssocParam.GetChildCount();i++) {
				psAssocParamRec = psAssocParam.GetChild(i);
				if(msHLRID == """") {
					msHLRID = psAssocParamRec.GetProperty(""HLRID"");
				} else if(msHLRID != psAssocParamRec.GetProperty(""HLRID"")) {
					blnReturn = false;
					break;
				} 
			}
		}
	}
//1.1 below
	bcSysPref = null;
	boSysPref = null;
//1.1 above
	return(blnReturn);
	
}
"/**************************************************************************************
* Name          : RMS NM Number Association CheckNumberOverlap Method    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/
function CheckNumberOverlap(&marrNumSet,msTypeIdentifier,msNumber)
{
	var miCnt;
	var psNumSet;
	
	for(miCnt =0; miCnt < getArrayLength(marrNumSet);miCnt++) {
		psNumSet = marrNumSet[miCnt];
		if(psNumSet.GetType() == msTypeIdentifier) {
			if(psNumSet.PropertyExists(msNumber)) 
				return false;
		}
	}
	
	return true;
}
"/**************************************************************************************
* Name          : RMS NM Number Association CreateAssocParam Method    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/05/2005 	1.0   		MBT						   	Created      30/05/2005       *
**************************************************************************************/
function CheckSourceExists(mstrSrcNumtype,mstrChkNumtype,&marrSrcNumType,psfnArgs) {
	
	marrSrcNumType = new Array();
	marrSrcNumType = mstrSrcNumtype.split("";"");
	var intCntArrLen;
	for(var i=0;i<getArrayLength(marrSrcNumType);i++) {
		var temp = marrSrcNumType[i];
		if(marrSrcNumType[i] == mstrChkNumtype) {
			var temp1 = marrSrcNumType[i+1];
			if(defined(marrSrcNumType[i+1]))
				psfnArgs.SetProperty(""mblnSplit"",""Y"");
			return true;
		}
	}
	return false;
}
"/**************************************************************************************
* Name          : RMS NM Number Association CreateAssocParam Method    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/05/2005 	1.0   		MBT						   	Created      30/05/2005       *
**************************************************************************************/
function ConstructArray(intBranchCnt,&marrSource,msNumType,msDestNum,msPSNumInd,bcAssRuldtl,mstrCnctType,intDestCnt,intPsNNumCnt,mblnSplit,psfnArgs){
	var intPsValCnt = ToInteger(psfnArgs.GetProperty(""intPsValCnt""));
	marrSource[intBranchCnt][msNumType][0] = mstrCnctType + "";""+ ToString(bcAssRuldtl.GetFieldValue(""Destination Number Type""));

	if(bcAssRuldtl.GetFieldValue(""Split Record Id"") != """" || bcAssRuldtl.GetFieldValue(""Split"") == ""Y"")
		marrSource[intBranchCnt][msDestNum][intDestCnt] = 1;
	else
		marrSource[intBranchCnt][msDestNum][intDestCnt] = bcAssRuldtl.GetFieldValue(""No of Destinations"");

	if(mblnSplit == ""Y"") {
		var temp = ToInteger(marrSource[ToInteger(intBranchCnt)-1][msPSNumInd][intPsNNumCnt])+1;
//		marrSource[intBranchCnt][msPSNumInd][intPsNNumCnt]  = ToInteger(marrSource[ToInteger(intBranchCnt)-1][msPSNumInd][intPsNNumCnt])+1;
		marrSource[intBranchCnt][msPSNumInd][intPsNNumCnt] = 	intPsValCnt++;
	}
	else {
		var temp = ToInteger(marrSource[intBranchCnt][msPSNumInd][ToInteger(intPsNNumCnt)-1])+1;
//		marrSource[intBranchCnt][msPSNumInd][intPsNNumCnt]  = ToInteger(marrSource[intBranchCnt][msPSNumInd][ToInteger(intPsNNumCnt)-1])+1;
		marrSource[intBranchCnt][msPSNumInd][intPsNNumCnt] = intPsValCnt++;
	}
	
	psfnArgs.SetProperty(""intPsValCnt"",intPsValCnt);
}
"/**************************************************************************************
* Name          : RMS NM Number Association CreateAssocParam Method    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/05/2005 	1.0   		MBT						   	Created      30/05/2005       *
**************************************************************************************/
function CopyArray(intBranchCnt,&marrSource,msDestNum,msPSNumInd) 
{
	var intPrevBranchcnt=ToInteger(intBranchCnt)-1;
	for(var i=0;i<getArrayLength(marrSource[intPrevBranchcnt][msDestNum]);i++) {
		marrSource[intBranchCnt][msDestNum][i] = marrSource[intPrevBranchcnt][msDestNum][i];
	}
	
	for(var i=0;i<getArrayLength(marrSource[intPrevBranchcnt][msPSNumInd]);i++) {
		marrSource[intBranchCnt][msPSNumInd][i] = marrSource[intPrevBranchcnt][msPSNumInd][i];
	}
	
}
"/**************************************************************************************
* Name          : RMS NM Number Association CreateAssocParam Method    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/
function CreateAssocParam(msSourceNum, msDestinationNum)
{
	var boNumberMstr 	= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumberMstr 	= boNumberMstr.GetBusComp(""RMS NM Number Enquiry"");
	
	//the follwing definition can be removed in future
	var boNumAssocDtl 	= TheApplication().GetBusObject(""RMS NM Number Association Service"");
	var bcNumAssocMstr 	= boNumAssocDtl.GetBusComp(""RMS NM Number Association Master"");
	var bcNumAssocDtl 	= boNumAssocDtl.GetBusComp(""RMS NM Number Association Detail"");
	var bcAssocCnct 	= boNumAssocDtl.GetBusComp(""RMS NM Association Number Type Display"");
	
	var mbIsRecord;
	var msSourceId;
	var msDestinationId;

	with(bcNumberMstr) {
		ActivateField(""Number String"");
		ClearToQuery();
		SetSearchSpec(""Number String"", msSourceNum);
		ExecuteQuery();
		mbIsRecord = FirstRecord();
		
		if(!mbIsRecord) return false;
		msSourceId = GetFieldValue(""Id"");
	}
	
	bcNumberMstr 	= null;
	boNumberMstr 	= null;
	
	bcNumAssocMstr 	= null;
	bcNumAssocDtl 	= null;
	bcAssocCnct 	= null;	
	boNumAssocDtl 	= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Association DeleteSIMOrderNum					      *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      28/11/2003       *
**************************************************************************************/
function DeleteSIMOrderNum(mbcSIMNumInfo,msAssocStartId)
{
	with(mbcSIMNumInfo) {
		with(mbcSIMNumInfo){
			ActivateField(""Assoc Start Id"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",msAssocStartId);
			ExecuteQuery();

			while(FirstRecord())
				DeleteRecord();
		}
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Estimate End Numbers						      	  *
* Author        : Mahindra British Telecom                                            *
* Description   : EstimateEndNumbers	    		                  				  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 03/08/2004 	1.0   		MBT						   	Created      			      *
**************************************************************************************/
function EstimateEndNumbers(psAssocParam,psfnArg,msAssocId) {
	
	var strErrVal  = """";
	var strErrCode = """";
	psfnArg.SetProperty(""strErrVal"","""");
	psfnArg.SetProperty(""strErrCode"","""");
	var psAssocParamRec;
	var blnException		= false; //for raising exception and free object definitions

	var boNumberMstr		= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumberMstr		= boNumberMstr.GetBusComp(""RMS NM Number Enquiry"");

	var boNumAssocDtl		= TheApplication().GetBusObject(""RMS NM Number Association Service"");
	var bcAssocCnct			= boNumAssocDtl.GetBusComp(""RMS NM Number Association Master Concat"");

	var boNumAssociation	        = TheApplication().GetBusObject(""RMS NM Number Association"");
	var bcNumAssociationStartNum 	= boNumAssociation.GetBusComp(""RMS NM Number Association Start Number"");
	 	
	var blnNumMstrRec;
	var blnIsAssocMstrDtl;
	var psNumSet			= TheApplication().NewPropertySet();
	var psNum;
	
	var intNumCount 		= 0;
	var intPrevNum			= 0;
	var arrNumSet			= new Array();
	var strIsSequenced;
	try{	
	for (var i =0;i<psAssocParam.GetChildCount();i++) {
		psAssocParamRec = psAssocParam.GetChild(i);
		psNum = TheApplication().NewPropertySet();
		arrNumSet[i] = psNum;
		
		strIsSequenced = psAssocParamRec.GetProperty(""SequenceFlag"");
		intPrevNum = 0;
		var intPrevAssocSeq = 0;
		
		
		with(bcNumAssociationStartNum) {
			ActivateField(""End Number"");
			ClearToQuery();
			SetSearchSpec(""Ass Id"",msAssocId);
			SetSearchSpec(""Sequence"",(i+1));
			ExecuteQuery();
			blnIsAssocMstrDtl = FirstRecord();
			
			if(blnIsAssocMstrDtl) {
				SetFieldValue(""End Number"","""");
			}
		}			
		if(psAssocParamRec.GetProperty(""ParentRuleId"") != """") {
			if(psAssocParamRec.GetProperty(""AssocGenNum"") == """") continue;
			with (bcAssocCnct) {
				ActivateField(""Associated Type"");
				ActivateField(""Associated Numbers"");
				ActivateField(""Allocation Id"");
				ActivateField(""Reserve Id"");
				ActivateField(""Generated Number"");
				
				ClearToQuery();
				SetSearchSpec(""Association Id"", psAssocParamRec.GetProperty(""ParentAssocId""));
				SetSearchSpec(""Flag"",""N"");
				SetSearchSpec(""Generated Number"","" >='"" + psAssocParamRec.GetProperty(""AssocGenNum"") + ""'"");
				SetSearchSpec(""Assoc Status"",""='"" + psAssocParamRec.GetProperty(""NumStatus"") + ""'"");
				SetSortSpec(""Generated Number(ASCENDING)"");
				ExecuteQuery(ForwardOnly);
				blnNumMstrRec = FirstRecord();
				if(blnNumMstrRec) psNum.SetType(GetFieldValue(""Associated Type""));
			}	
			while(blnNumMstrRec) {  
				if(!CheckNumberOverlap(arrNumSet,psNum.GetType(),bcAssocCnct.GetFieldValue(""Associated Numbers""))) {
					psfnArg.SetProperty(""strErrCode"",""RMSASS003"");
					psfnArg.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS003""));
					blnException	= true;
					TheApplication().RaiseErrorText(""ERROR"");
				}
				psNum.SetProperty(intNumCount,bcAssocCnct.GetFieldValue(""Associated Numbers""));
				psNum.SetProperty(bcAssocCnct.GetFieldValue(""Associated Numbers""),bcAssocCnct.GetFieldValue(""Id""));
					intNumCount++;
				
				if (psAssocParamRec.GetProperty(""Quantity"") == intNumCount) {
					psAssocParamRec.SetProperty(""EndingNumber"",bcAssocCnct.GetFieldValue(""Associated Numbers""));
					if(blnIsAssocMstrDtl) {
						bcNumAssociationStartNum.SetFieldValue(""End Number"",psAssocParamRec.GetProperty(""EndingNumber""));
						bcNumAssociationStartNum.WriteRecord();
					}
					break;
				}
				blnNumMstrRec = bcAssocCnct.NextRecord();
			}

			if (psAssocParamRec.GetProperty(""Quantity"") > intNumCount) {
					psfnArg.SetProperty(""strErrCode"",""RMSASS004"");
					psfnArg.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS004""));
					blnException	= true;
					TheApplication().RaiseErrorText(""ERROR"");
			}
			psNumSet.AddChild(psNum);
		}
		else {
			if(psAssocParamRec.GetProperty(""StartNum"") == """") continue;
			with(bcNumberMstr) {
				ActivateField(""Type Identifier"");
				ActivateField(""Number String"");
				ActivateField(""Number"");
				ActivateField(""Allocated To"");
				ActivateField(""Reserved To"");
				ActivateField(""Is Associated"");
				ActivateField(""Type"");	
				
				ClearToQuery();
				SetSearchSpec(""Status"",""='"" + psAssocParamRec.GetProperty(""NumStatus"") + ""'"");
				SetSearchSpec(""Type Id"", psAssocParamRec.GetProperty(""TypeId""));
				SetSearchSpec(""Subtype Id"",psAssocParamRec.GetProperty(""SubtypeId""));
				SetSearchSpec(""Scheme Id"",psAssocParamRec.GetProperty(""SchemeId""));
				SetSearchSpec(""Block Id"",psAssocParamRec.GetProperty(""BlockId""));
				SetSearchSpec(""Is Associated"",""N"");
				var test = psAssocParamRec.GetProperty(""NumStatus"");
				if(psAssocParamRec.GetProperty(""AllocatedTo"") != """")
					SetSearchSpec(""Allocated To"",psAssocParamRec.GetProperty(""AllocatedTo""));
				if(psAssocParamRec.GetProperty(""ReservedTo"") != """")
					SetSearchSpec(""Reserved To"",psAssocParamRec.GetProperty(""ReservedTo""));
			
				SetSearchSpec(""Number"","" >= '"" + psAssocParamRec.GetProperty(""StartNum"") + ""'"");
				SetSortSpec(""Number(ASCENDING)"");
				ExecuteQuery(ForwardOnly);
				blnNumMstrRec = FirstRecord();
				if(blnNumMstrRec){
			  		intPrevNum	= GetFieldValue(""Number"");		
				 	psNum.SetType(GetFieldValue(""Type Identifier""));
				}
			}
			
			intNumCount = 0;			
			while(blnNumMstrRec) {  
				if (!CheckNumberOverlap(arrNumSet,psNum.GetType(),bcNumberMstr.GetFieldValue(""Number String""))) {
					psfnArg.SetProperty(""strErrCode"",""RMSASS005"");
					psfnArg.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS005"",bcNumberMstr.GetFieldValue(""Type"")));
					blnException	= true;
					TheApplication().RaiseErrorText(""ERROR"");
				}
				psNum.SetProperty(intNumCount,bcNumberMstr.GetFieldValue(""Number String""));
				psNum.SetProperty(bcNumberMstr.GetFieldValue(""Number String""),bcNumberMstr.GetFieldValue(""Id""));
				
//------------------------------------------------------------------------
//Check whether the numbers are in sequence (if sequence flag is checked).
//------------------------------------------------------------------------

				if ((strIsSequenced == ""Y"") && (bcNumberMstr.GetFieldValue(""Number"") - intPrevNum) > 1) {
					psfnArg.SetProperty(""strErrCode"",""RMSASS006"");
					psfnArg.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS006"",bcNumberMstr.GetFieldValue(""Type"")));
					blnException	= true;
					TheApplication().RaiseErrorText(""ERROR"");
				}
//------------------------------------------------------------------------------
//Previous Number has to be stored to check whether the Numbers are in sequence.
//------------------------------------------------------------------------------
				if (strIsSequenced == ""Y"") intPrevNum = bcNumberMstr.GetFieldValue(""Number"");

//------------------------------------------------------------------------------------------
//Increment the counter to avoid the calculation required to find out the property set count.
//------------------------------------------------------------------------------------------

				intNumCount++;
//------------------------------------------------------------------------------------------
//If the required quantity is met, then set the ending number and continue with the FOR loop.
//------------------------------------------------------------------------------------------

				if (psAssocParamRec.GetProperty(""Quantity"") == intNumCount) {
					psAssocParamRec.SetProperty(""EndingNumber"",bcNumberMstr.GetFieldValue(""Number String""));
					
					//bcNumAssociationStartNum.ExecuteQuery();	
					if(blnIsAssocMstrDtl) {
						bcNumAssociationStartNum.SetFieldValue(""End Number"",psAssocParamRec.GetProperty(""EndingNumber""));
						bcNumAssociationStartNum.WriteRecord();
					}
					
					
					break;
				}
				blnNumMstrRec = bcNumberMstr.NextRecord();
				if(blnNumMstrRec) psNum.SetType(bcNumberMstr.GetFieldValue(""Type Identifier""));
			}
			psNumSet.AddChild(psNum);
		}
		if (psAssocParamRec.GetProperty(""Quantity"") > intNumCount) {
			psfnArg.SetProperty(""strErrCode"",""RMSASS007"");
			psfnArg.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS007"",psAssocParamRec.GetProperty(""SchemeName"")));
			blnException	= true;
			TheApplication().RaiseErrorText(""ERROR"");
		}
	} 
	} catch(e) {
		if(!blnException)//if not a known exception then throw out
			throw(e);
	} finally{
	
		psNumSet 					= null;
		psNum						= null;
		arrNumSet					= null;
		
		bcNumberMstr 				= null;
		boNumberMstr 				= null;
		bcAssocCnct 				= null;
		boNumAssocDtl 				= null;
		bcNumAssociationStartNum 	= null;
		boNumAssociation			= null;
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Association GetAssocParam							  *	
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	 1.0   	MBT		 Created      12/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
20060808       | 1.2  | Kalyana| Added  new property for Special Category Type to exclude
								 special  numbers for association for bulk prepaid activation.
**************************************************************************************/
function GetAssocParam(&Inputs,bcNumAssocMstr,bcNumAssocParam,psfnArg)
{
	var blnRec;
	var psAssocParam;
	var psAssocParamRec;
	with(bcNumAssocParam) 
	{
		ActivateField(""Rule Id"");
		ActivateField(""Parent Ass Id"");
		ActivateField(""Associated Start Number Id"");
		ActivateField(""Associated Start Number"");
		ActivateField(""Type"");
		ActivateField(""Type Id"");
		ActivateField(""Sub Type Id"");
		ActivateField(""Scheme Id"");
		ActivateField(""Block Id"");
		ActivateField(""Number Id"");
		ActivateField(""Assoc HLR Id"");
		ActivateField(""Number HLR ID"");
		ActivateField(""Number"");
		ActivateField(""Assigned To"");
		ActivateField(""Scheme Name"");
		ActivateField(""Alloc Id"");
		ActivateField(""Reserve Id"");
		ActivateField(""Allocated To"");
		ActivateField(""Reserved To"");
		ActivateField(""Number Status"");
		ActivateField(""Sequence Flag"");
		ActivateField(""Split Record Id"");
		ActivateField(""Quantity"");
		ActivateField(""Assoc Number Status"");
		ActivateField(""Assoc Generated Num""); //added as per bug fix
		//below 1.2
		ActivateField(""Special Category Type"");
		//above 1.2
		ClearToQuery()
		ExecuteQuery(ForwardOnly);
		FirstRecord();
	}
	if(bcNumAssocParam.FirstRecord() != true) return 0;
	blnRec = bcNumAssocParam.FirstRecord();
	psAssocParam = TheApplication().NewPropertySet();
//-------------------------------------------------------------
//Populating a property set with association parameters values.
//-------------------------------------------------------------
	psAssocParam.SetProperty(""AssocMstrId"",Inputs.GetProperty(""AssociationId""));
	psAssocParam.SetProperty(""RuleId"",bcNumAssocMstr.GetFieldValue(""Rule Id""));
	psAssocParam.SetProperty(""RuleType"",bcNumAssocMstr.GetFieldValue(""Rule Type""));
	psAssocParam.SetProperty(""AssocId"",bcNumAssocMstr.GetFieldValue(""Id""));
	psAssocParam.SetProperty(""RootQty"",bcNumAssocParam.GetFieldValue(""Quantity""));
	while(blnRec) 
	{
		psAssocParamRec = TheApplication().NewPropertySet();
		with(psAssocParamRec) 
		{
			SetType(""ParamRec"");
			if(bcNumAssocParam.GetFieldValue(""Rule Id"") != """") 
			{
				SetProperty(""ParentRuleId"", bcNumAssocParam.GetFieldValue(""Rule Id""));
				SetProperty(""ParentAssocId"", bcNumAssocParam.GetFieldValue(""Parent Ass Id""));
				SetProperty(""StartNumId"",bcNumAssocParam.GetFieldValue(""Associated Start Number Id""));
				SetProperty(""AssocGenNum"",bcNumAssocParam.GetFieldValue(""Assoc Generated Num""));
				SetProperty(""SplitRecordId"",bcNumAssocParam.GetFieldValue(""Split Record Id""));
				if(bcNumAssocParam.GetFieldValue(""Associated Start Number"") == """") 
				{
					psfnArg.SetProperty(""strErrCode"", ""RMSASS014"");
					psfnArg.SetProperty(""strErrVal"", TheApplication().LookupMessage(""User Defined Errors"",""RMSASS014""));
					return false;
				}
				SetProperty(""StartNum"",bcNumAssocParam.GetFieldValue(""Associated Start Number""));
				SetProperty(""NumStatus"",bcNumAssocParam.GetFieldValue(""Assoc Number Status""));
				SetProperty(""HLRID"",bcNumAssocParam.GetFieldValue(""Assoc HLR Id""));
			}
			else 
			{
				SetProperty(""TypeId"",bcNumAssocParam.GetFieldValue(""Type Id""));
				SetProperty(""SubtypeId"",bcNumAssocParam.GetFieldValue(""Sub Type Id""));
				SetProperty(""SchemeId"",bcNumAssocParam.GetFieldValue(""Scheme Id""));
				SetProperty(""SchemeName"",bcNumAssocParam.GetFieldValue(""Scheme Name""));
				SetProperty(""BlockId"",bcNumAssocParam.GetFieldValue(""Block Id""));
				SetProperty(""StartNumId"",bcNumAssocParam.GetFieldValue(""Number Id""));
				SetProperty(""SplitRecordId"",bcNumAssocParam.GetFieldValue(""Split Record Id""));
				if(bcNumAssocParam.GetFieldValue(""Number"") == """") 
				{
					psfnArg.SetProperty(""strErrCode"", ""RMSASS015"");
					psfnArg.SetProperty(""strErrVal"", TheApplication().LookupMessage(""User Defined Errors"",""RMSASS015"",bcNumAssocParam.GetFieldValue(""Type"")));
					return false;
				}
				SetProperty(""StartNum"",bcNumAssocParam.GetFieldValue(""Number""));
				SetProperty(""NumStatus"",bcNumAssocParam.GetFieldValue(""Number Status""));
				SetProperty(""HLRID"",bcNumAssocParam.GetFieldValue(""Number HLR ID""));
				//below 1.2
				SetProperty(""Special Category Type"",bcNumAssocParam.GetFieldValue(""Special Category Type""));
				//above 1.2
				}
			SetProperty(""AllocId"",bcNumAssocParam.GetFieldValue(""Alloc Id""));
			SetProperty(""SequenceFlag"",bcNumAssocParam.GetFieldValue(""Sequence Flag""));
			SetProperty(""Quantity"",bcNumAssocParam.GetFieldValue(""Quantity""));
		}
		psAssocParam.SetProperty(""ReservedToId"",bcNumAssocParam.GetFieldValue(""Reserve Id""));
		psAssocParam.SetProperty(""AllocatedTo"",bcNumAssocParam.GetFieldValue(""Allocated To""));
		psAssocParam.SetProperty(""ReservedTo"",bcNumAssocParam.GetFieldValue(""Reserved To""));
		psAssocParam.SetProperty(""AssignedToId"",bcNumAssocParam.GetFieldValue(""Assigned To""));
		psAssocParam.AddChild(psAssocParamRec);
		blnRec = bcNumAssocParam.NextRecord();
	}
//1.1 below
	psAssocParamRec = null;
	//psAssocParam = null;  commented by Ramakrishna :20060713
//1.1 above
	return(psAssocParam);
}
"/**************************************************************************************
* Name          : RMS NM Number Association GetConcatType Method    		 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      12/12/2003    
* 20061003      1.1         Kalyana				Changed arguments for recusive fucn   *
**************************************************************************************/
function GetConcatType(strRuleId,psfnArg) 
{
	var strConcatType = """";
	var blnIsRecord;
	var blnFirstRecord = true;
	
	var strTypeCnct = psfnArg.GetProperty(""msTypeCnct"");
	var msCrdRatio = psfnArg.GetProperty(""msCrdRatio"");
	var miNoOfSIM = ToInteger(psfnArg.GetProperty(""msNoOfSIM""));
	var miNoOfIMSI = ToInteger(psfnArg.GetProperty(""msNoOfIMSI""));
	var miNoOfMSISDN = ToInteger(psfnArg.GetProperty(""msNoOfMSISDN""));	
	var msGenLvl = psfnArg.GetProperty(""msGenLvl"");	
	
	var boNMAssocRul 		= TheApplication().GetBusObject(""RMS NM Association Rule"");
	var bcNMAssocRulMstr 	= boNMAssocRul.GetBusComp(""RMS NM Association Rule Master"");
	var bcNMAssocRulDtl  	= boNMAssocRul.GetBusComp(""RMS NM Association Rule Detail"");
	
//-----------------------------------------------------
//Querying the Association Rule to get the Number Type.
//-----------------------------------------------------
	try {
	with(bcNMAssocRulMstr) {
		ActivateField(""Rule Type"");
		ActivateField(""Parent Rule Id"");
		ClearToQuery();
		SetSearchSpec(""Id"",strRuleId);
		ExecuteQuery(ForwardOnly);
		blnIsRecord = FirstRecord();
		if(!blnIsRecord) return 0;
	}
	
	
	with(bcNMAssocRulDtl) {
		ActivateField(""No of Destinations"");
		ActivateField(""Source Number Type"");
		ActivateField(""Source Gen Level"");		
		ActivateField(""Destination Number Type"");
		ActivateField(""Destination Gen Level"");		
		ActivateField(""Parent Rule Id"");
		ActivateField(""Destination Number Type Identifier"");
		ActivateField(""Source Number Type Identifier"");
		ActivateField(""Split"");
		ActivateField(""Split Record Id"");		
		
		ClearToQuery();
		ExecuteQuery(ForwardOnly);
		blnIsRecord = FirstRecord();
		if(!blnIsRecord) return 0;
	}
	
	if(bcNMAssocRulMstr.GetFieldValue(""Rule Type"") == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD""))  {
	 	 //below 1.1
		 //strConcatType = GetConcatType(bcNMAssocRulDtl.GetFieldValue(""Parent Rule Id""),strTypeCnct);
		 strConcatType = GetConcatType(bcNMAssocRulDtl.GetFieldValue(""Parent Rule Id""),psfnArg);		
		 //above 1.1
	} 

//---------------------------------------------------------------
//Concatenate the Number Type name and populate it in a variable.
//---------------------------------------------------------------
	
	while(blnIsRecord) {
	
		if(strConcatType == """") {
			strConcatType = bcNMAssocRulDtl.GetFieldValue(""Source Number Type"");
			strTypeCnct   = bcNMAssocRulDtl.GetFieldValue(""Source Number Type Identifier"");
			if(bcNMAssocRulDtl.GetFieldValue(""Source Number Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""SIM""))
				miNoOfSIM = 1;
			if(bcNMAssocRulDtl.GetFieldValue(""Source Number Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""IMSI"")) {
				miNoOfIMSI = 1;
				if(msGenLvl == """")
					msGenLvl = bcNMAssocRulDtl.GetFieldValue(""Source Gen Level"");
				else
					msGenLvl = msGenLvl + ""/""+bcNMAssocRulDtl.GetFieldValue(""Source Gen Level"");
			}
			if(bcNMAssocRulDtl.GetFieldValue(""Source Number Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""MSISDN""))
				miNoOfMSISDN = 1;
				
		}
		if(bcNMAssocRulDtl.GetFieldValue(""Destination Number Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""SIM"")) {
			if(bcNMAssocRulDtl.GetFieldValue(""Split"") == ""Y"" || bcNMAssocRulDtl.GetFieldValue(""Split Record Id"") != """")	
				miNoOfSIM = ToInteger(miNoOfSIM) + 1;
			else
				miNoOfSIM = ToInteger(miNoOfSIM) + ToInteger(bcNMAssocRulDtl.GetFieldValue(""No of Destinations""));
		}
		if(bcNMAssocRulDtl.GetFieldValue(""Destination Number Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""IMSI""))	 {
			if(bcNMAssocRulDtl.GetFieldValue(""Split"") == ""Y"" || bcNMAssocRulDtl.GetFieldValue(""Split Record Id"") != """")	
				miNoOfIMSI = ToInteger(miNoOfIMSI) + 1;
			else
				miNoOfIMSI = ToInteger(miNoOfIMSI) + ToInteger(bcNMAssocRulDtl.GetFieldValue(""No of Destinations""));
				
			if(msGenLvl == """") {
				if(bcNMAssocRulDtl.GetFieldValue(""Destination Gen Level"")!="""")
					msGenLvl = bcNMAssocRulDtl.GetFieldValue(""Destination Gen Level"");
			}else {
				if(bcNMAssocRulDtl.GetFieldValue(""Destination Gen Level"")!="""")
					msGenLvl = msGenLvl + ""/""+bcNMAssocRulDtl.GetFieldValue(""Destination Gen Level"");
			}
		}
		if(bcNMAssocRulDtl.GetFieldValue(""Destination Number Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""MSISDN"")) {
			if(bcNMAssocRulDtl.GetFieldValue(""Split"") == ""Y"" || bcNMAssocRulDtl.GetFieldValue(""Split Record Id"") != """")	
				miNoOfMSISDN = ToInteger(miNoOfMSISDN) + 1;
			else
				miNoOfMSISDN = ToInteger(miNoOfMSISDN) + ToInteger(bcNMAssocRulDtl.GetFieldValue(""No of Destinations""));		
		}
				
		strConcatType = strConcatType + "" / "" + bcNMAssocRulDtl.GetFieldValue(""Destination Number Type"");
		strTypeCnct   = strTypeCnct   + "" / "" + bcNMAssocRulDtl.GetFieldValue(""Destination Number Type Identifier"");
		
		blnIsRecord = bcNMAssocRulDtl.NextRecord();
	}
	
	} catch (e) {
	
	} finally {
		bcNMAssocRulMstr 	= null;
		bcNMAssocRulDtl  	= null;
		boNMAssocRul 		= null;
		
		//These attributes are set because of script changes in 78. Functions cannot pass strings as reference
		psfnArg.SetProperty(""msTypeCnct"", strTypeCnct);
		psfnArg.SetProperty(""msCrdRatio"", msCrdRatio);
		psfnArg.SetProperty(""msNoOfSIM"", miNoOfSIM);
		psfnArg.SetProperty(""msNoOfIMSI"", miNoOfIMSI);
		psfnArg.SetProperty(""msNoOfMSISDN"",miNoOfMSISDN);	
		psfnArg.SetProperty(""msGenLvl"",msGenLvl);	
	
	}
	//return(strConcatType);
	//return(strConcatType);
}
"/**************************************************************************************
* Name          : RMS NM Number Association GetDestType Method    		 	  		  *	 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/
function GetDestType(bcAssRuleDtl,&strDestTypeId,&strDestSubTypeId,intRecCnt,&arrSplitRecId) {

	strDestTypeId[intRecCnt] = bcAssRuleDtl.GetFieldValue(""Destination Number Type Id"");
	strDestSubTypeId[intRecCnt] = bcAssRuleDtl.GetFieldValue(""Destination Number Subtype Id"");
	if(bcAssRuleDtl.GetFieldValue(""Split"") == ""Y"")
		arrSplitRecId[intRecCnt] = bcAssRuleDtl.GetFieldValue(""Id"");
	else if(bcAssRuleDtl.GetFieldValue(""Split Record Id"") != """")
		arrSplitRecId[intRecCnt] = bcAssRuleDtl.GetFieldValue(""Split Record Id"");
	else
		arrSplitRecId[intRecCnt] = """";	
}
"/**************************************************************************************
* Name          : RMS NM Number Association GetPropertySet							  *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/
function GetPropertySet(&psPropSet,strSearchType)
{
	var psRetPropSet 	= psPropSet;
	var psTravPropSet;
	var psResultPropSet;
	
	var intChildCount;
	var intImdtChildCount = 0;  
	var intLoopCount;
	
	var strType;
	
//--------------------------------------------
//If the input property set is null then exit.
//--------------------------------------------

	if(psRetPropSet.GetChildCount() == 0) return """";

//------------------------------
//Number of child property sets.
//------------------------------

	intImdtChildCount = psRetPropSet.GetChildCount();
	
	for(intLoopCount=0;intLoopCount<intImdtChildCount;intLoopCount++){

//-----------------------------------------
//Hold the child of the input property set.
//-----------------------------------------

		psTravPropSet	= psRetPropSet.GetChild(intLoopCount);
		
//------------------------------------------------------------
//Search whether the child ps corresponds to the search string
//------------------------------------------------------------

		if(psTravPropSet.GetType() == strSearchType) 

//-----------------------------------
//If yes then return the propertyset.
//-----------------------------------

			return(psRetPropSet);
//-----------------------------------------------------------------------------
//If no child is there for the continue the loop so that it will exit the loop.
//-----------------------------------------------------------------------------

		if(psRetPropSet.GetChildCount() == 0) continue;		
		
//-------------------------------------------------------------------------------------------------
//if input property set is having child property sets then call the function to check inside those.
//-------------------------------------------------------------------------------------------------

		psResultPropSet = GetPropertySet(psTravPropSet,strSearchType);
		
//---------------------------------------------------------------------------------------------------------------------
//if the propertyset doesn't contain the search string then check the string inside the next child of input propertyset.
//---------------------------------------------------------------------------------------------------------------------		

		if(psResultPropSet == """") 
			continue;
		else

//------------------------------------------------------------
//else return the parentproperty set which contains the value.
//------------------------------------------------------------

			return(psResultPropSet);
	}
	
	if(intImdtChildCount == intLoopCount) return("""");
}
"/**************************************************************************************
* Name          : RMS NM Number Association GetSeqConcatType             		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/11/2003 	 1.0   	MBT      Created      12/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function GetSeqConcatType(strRuleId) 
{
	var strConcatType = """";
	var blnIsRecord;
	var blnFirstRecord = true;
	var arrConcatType = new Array();
	
	var boNMAssocRul = TheApplication().GetBusObject(""RMS NM Association Rule"");
	var bcNMAssocRulMstr = boNMAssocRul.GetBusComp(""RMS NM Association Rule Master"");
	var bcNMAssocRulDtl  = boNMAssocRul.GetBusComp(""RMS NM Association Rule Detail"");
	
	with(bcNMAssocRulMstr) 
	{
		ActivateField(""Rule Type"");
		ActivateField(""Parent Rule Id"");
		ClearToQuery();
		SetSearchSpec(""Id"",strRuleId);
		ExecuteQuery(ForwardOnly);
		blnIsRecord = FirstRecord();
		if(!blnIsRecord) return 0;
	}
	
	
	with(bcNMAssocRulDtl) 
	{
		ActivateField(""Source Number Type Identifier"");
		ActivateField(""Destination Number Type Identifier"");
		ActivateField(""Parent Rule Id"");
		ClearToQuery();
		ExecuteQuery(ForwardOnly);
		blnIsRecord = FirstRecord();
		if(!blnIsRecord) return 0;
	}
	
	if(bcNMAssocRulMstr.GetFieldValue(""Rule Type"") == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD""))  
	{
		strConcatType = GetConcatType(bcNMAssocRulDtl.GetFieldValue(""Parent Rule Id""));	
	} 
	
	if(strConcatType != """") marrConcatType = strConcatType.split("" / "");
	
	var miArrCnt = getArrayLength(marrConcatType);
	while(blnIsRecord) 
	{
		if(miArrCnt == 0) 
			marrConcatType[miArrCnt++] = bcNMAssocRulDtl.GetFieldValue(""Source Number Type"");
		marrConcatType[miArrCnt++] =  bcNMAssocRulDtl.GetFieldValue(""Destination Number Type"");
				
		
		blnIsRecord = bcNMAssocRulDtl.NextRecord();
	}
	
	var marrSeqConcatType 	= new Array();
	var mpsConcatIndex 		= TheApplication().NewPropertySet();
	var miSeqCnt = 0;
	
	for(var miCnt = 0; miCnt < miArrCnt; miCnt++) {
		if((marrConcatType[miCnt] == ""SIM"") && (!mpsConcatIndex.PropertyExists(miCnt))) {
			marrSeqConcatType[miCnt]	= marrConcatType[miCnt];
			mpsConcatIndex 				= miCnt;
		}
	}
	
	for(var miCnt = 0; miCnt < miArrCnt; miCnt++) {
		if((marrConcatType[miCnt] == ""IMSI"") && (!mpsConcatIndex.PropertyExists(miCnt))) {
			marrSeqConcatType[miCnt]	= marrConcatType[miCnt];
			mpsConcatIndex 				= miCnt;
		}
	}
	
	for(var miCnt = 0; miCnt < miArrCnt; miCnt++) {
		if((marrConcatType[miCnt] == ""MSISDN"") && (!mpsConcatIndex.PropertyExists(miCnt))) {
			marrSeqConcatType[miCnt] 	= marrConcatType[miCnt];
			mpsConcatIndex 				= miCnt;
		}
	}
	
	bcNMAssocRulMstr 	= null;
	bcNMAssocRulDtl  	= null;
	boNMAssocRul 		= null;
//1.1 below
	mpsConcatIndex = null;
//1.1 above	
	return(marrSeqConcatType.join("" / ""));
}
"/*Name          : RMS NM Number GetSysPrefValue
---------------------------------------------------------------------------------------
Date        Ver  By        Comments     Reviewed Date
---------------------------------------------------------------------------------------
20060920 	1.0  Kalyana        Created        
---------------------------------------------------------------------------------------*/
function GetSysPrefValue()
{
var boSysPref = TheApplication().GetBusObject(""System Preferences"");
var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
var SysPrefval =""""	
with(bcSysPref)
	{
        ActivateField(""Value"");
		ClearToQuery();
		SetSearchSpec(""Name"",""RMS_BYPASS_DEASSOCIATION"");
		ExecuteQuery(ForwardOnly);
	}
	if(bcSysPref.FirstRecord()) 
	{
	SysPrefval = bcSysPref.GetFieldValue(""Value"");
	}
	bcSysPref = null;
	boSysPref = null;
	return(SysPrefval);
}
"/**************************************************************************************
* Name          : RMS NM Number Association GetmsAssocStartsts					      *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	 1.0   	MBT		 Created      28/11/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function GetmsAssocStartsts(mbcNMNumMstr,msAssocStartId,&msAllocTo,&msAllocateId)
{
	var psfnArgs = TheApplication().NewPropertySet();
	
	with(mbcNMNumMstr) {
		ActivateField(""Status"");
		ActivateField(""Allocated To"");
		ActivateField(""Allocation Id"");
		
		ClearToQuery();
		SetSearchSpec(""Id"",msAssocStartId);
		ExecuteQuery();
		if(FirstRecord()) {
			psfnArgs.SetProperty(""msAllocateId"",GetFieldValue(""Allocation Id""));
			psfnArgs.SetProperty(""msAllocTo"",GetFieldValue(""Allocated To""));
			psfnArgs.SetProperty(""msAssocStartsts"",GetFieldValue(""Status""));
			return(psfnArgs);
		}
	}
//1.1 below
	psfnArgs = null;
//1.1 above
}
"/**************************************************************************************
* Name          : RMS NM Number Association RMSNA_GetConcatNumberArray Method  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003  	 1.0   	MBT		 Created      12/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
****************************marrParentAssocNum**********************************************************/
function RMSNA_GetConcatNumberArray(&psAssocParam,miNumSetCnt,miNoOfCnctRec, &marrDest,&marrNumPropSet)
{
	
	var miQty 		= 0;
	var miNoOfDest 	= 0;
	var mpsTempNumSet;
	var miParamCnt	= 0;
	var miIncrement = 0;
	
	var miKstart = 0;
	var miKend   = 0;
	var msNumber = """";
	var miK = 0;
	var miCnctCnt	= 0;
	var marrIsFirst = new Array();
	var marrNumbers = new Array();
	
//----------------Populate the Cnct array numbers-----------------	
//Consider the case of a Parent rule as:
//Source			Dest		No of Dest
//Type1			Type2		2
//Type2			Type3		3
//Due to the previous calculation: miNoOfCnctRec will be 1*2*3 = 6
//so for one set of association there will be 6 cnct records
//so the numbers will be in the following fashion
//	   |<-------------Numbers in Cnct table----------------->|	
//	   |							     [Type3.Num1] {1}    |
//	   |					 {1}		 [Type3.Num2] {2}    |
//	   |			   	  -[Type2.Num1] -[Type3.Num3] {3}	 |
//[Set1] |	[Type1.Num1]-|									 |
//{1}	   |	{1}	          -[Type2.Num2] -[Type3.Num4] {1}	 |
//	   |		   		     {2}		 [Type3.Num5] {2}	 |
//	   |		   				         [Type3.Num6] {3}	 |
//-------------------------------------------------------------------
	   var temp = psAssocParam.GetProperty(""RootQty"");
	for(miQty=0;miQty < psAssocParam.GetProperty(""RootQty"");miQty++) {
		miNoOfDest = 1;
		var mpsTempNumSet = TheApplication().NewPropertySet();
		
		for(miParamCnt=0; miParamCnt < miNumSetCnt; miParamCnt++) {
		
//------------------------------------------------------------------------
//marrIsFirst is used for getting the First Property from the Property set.
//------------------------------------------------------------------------

			if (marrIsFirst.length == miParamCnt)	marrIsFirst[miParamCnt] = 0;
			var temp1 = marrDest[miParamCnt];
			var temp2 = marrDest[miParamCnt];
			if(miNoOfDest < marrDest[miParamCnt]) miNoOfDest = marrDest[miParamCnt];
			miIncrement = miNoOfCnctRec/miNoOfDest;
			miKstart = -(miIncrement);
			miKend   = 0;
			
			for(miCnctCnt = 0;miCnctCnt < miNoOfDest;miCnctCnt++) {
				miKstart = miKstart + miIncrement;
				miKend   = miKend + miIncrement;
			
				msNumber = marrNumPropSet[miParamCnt].GetProperty(marrIsFirst[miParamCnt]);	
				marrIsFirst[miParamCnt] += 1;
				
				for(miK = miKstart; miK < miKend; miK++) {
					if(msNumber != """")
						marrNumbers[miQty][miK][miParamCnt] = msNumber;
				}
			}
		}
	}
	for(var i = 0;i<getArrayLength(marrNumbers);i++){
		for(var k = 0;k<getArrayLength(marrNumbers[i]);k++){		
			for(var j = 0;j<getArrayLength(marrNumbers[i][k]);j++){		
				var temp = marrNumbers[i][k][j];
			}
		}
	}
//1.1 below
	mpsTempNumSet = null;
//1.1 above
	return (marrNumbers);
}
"/**************************************************************************************
* Name          : RMS NM Number Association RMSNA_GetConcatNumberArray Method  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 04/06/2005 	 1.0   	MBT		 Created(P.Gautaman)  04/06/2005   *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function RMSNA_GetConcatNumberArray_Split(&psAssocParam,miNumSetCnt,miNoOfCnctRec, &marrDest,&marrNumPropSet,marrSource,&mpsPSIndx)
{
	
	var miQty 		= 0;
	var miNoOfDest 	= 1;
	var mpsTempNumSet;
	var miParamCnt	= 0;
	var miIncrement = 0;
	
	var miKstart = 0;
	var miKend   = 0;
	var msNumber = """";
	var miK = 0;
	var miCnctCnt	= 0;
	var marrIsFirst = new Array();
	var marrPrevFirst = new Array();
	var marrNumbers = new Array();
		var marrNumbers2; //= new Array; //Tushar
		var marrNumbers3; //= new Array; //Tushar
		
							
	
	var msNumType = ""NumType"";
	var msPSNumInd = ""PSNumInd"";
	var msDestNum  = ""DestNum"";
	
	var miPrevK;
	var miKend;
	
//----------------Populate the Cnct array numbers-----------------	
//Consider the case of a Parent rule as:
//Source			Dest		No of Dest
//Type1			Type2		2
//Type2			Type3		3
//Due to the previous calculation: miNoOfCnctRec will be 1*2*3 = 6
//so for one set of association there will be 6 cnct records
//so the numbers will be in the following fashion
//	   |<-------------Numbers in Cnct table----------------->|	
//	   |							     [Type3.Num1] {1}    |
//	   |					 {1}		 [Type3.Num2] {2}    |
//	   |			   	  -[Type2.Num1] -[Type3.Num3] {3}	 |
//[Set1] |	[Type1.Num1]-|									 |
//{1}	   |	{1}	          -[Type2.Num2] -[Type3.Num4] {1}	 |
//	   |		   		     {2}		 [Type3.Num5] {2}	 |
//	   |		   				         [Type3.Num6] {3}	 |
//-------------------------------------------------------------------

	for(var i=0;i<getArrayLength(marrSource[0][msPSNumInd]);i++) {
		marrIsFirst[i]=0;
	}
	
		
	   var temp = psAssocParam.GetProperty(""RootQty"");
	for(miQty=0;miQty < psAssocParam.GetProperty(""RootQty"");miQty++) {
//		miNoOfDest = 1;
		marrNumbers2= new Array;
		marrNumbers3= new Array;
		marrNumbers[miQty] = marrNumbers2;
		var mpsTempNumSet = TheApplication().NewPropertySet();
		
		for(miParamCnt=0; miParamCnt < getArrayLength(marrSource[0][msPSNumInd]); miParamCnt++) {
		
			miPrevK = 0;
			miKend = 0;
						
//------------------------------------------------------------------------
//marrIsFirst is used for getting the First Property from the Property set.
//------------------------------------------------------------------------

//			if (marrIsFirst.length == miParamCnt)	marrIsFirst[miParamCnt] = 0;
//			if(miNoOfDest < marrDest[miParamCnt]) miNoOfDest = marrDest[miParamCnt];
			marrPrevFirst[miParamCnt] = marrIsFirst[miParamCnt];
			for(var ibranch=0;ibranch<getArrayLength(marrSource);ibranch++) {
				marrIsFirst[miParamCnt] = marrPrevFirst[miParamCnt];
				miPrevK = miKend;		
				if(marrSource[ibranch][msDestNum][miParamCnt] == ""X"")
					miNoOfDest = 1;
				else
					miNoOfDest = marrSource[ibranch][msDestNum][miParamCnt];
					
					miIncrement = marrSource[ibranch][msNumType][1]/miNoOfDest;
				miKstart = -(miIncrement)+miPrevK;
				miKend   = 0;
				
				for(miCnctCnt = 0;miCnctCnt < miNoOfDest;miCnctCnt++) {
					miKstart = miKstart + miIncrement;
					miKend   = miKstart + miIncrement;
					if(marrSource[ibranch][msPSNumInd][miParamCnt] == ""X"")
						msNumber = ""X"";
					else
						msNumber = marrNumPropSet[marrSource[ibranch][msPSNumInd][miParamCnt]].GetProperty(marrIsFirst[miParamCnt]);	
					marrIsFirst[miParamCnt] += 1;
					
					for(miK = miKstart; miK < miKend; miK++) {
							marrNumbers[miQty][miK] = marrNumbers3;
							SetArray(marrNumbers,miQty,miK,miParamCnt,""?"",msNumber);
							var val = marrNumbers[miQty][miK][miParamCnt];
							//STScript marrNumbers[miQty][miK][miParamCnt] = msNumber;
//							marrNumbers[miQty][miK][miParamCnt][0] = marrSource[ibranch][msPSNumInd][miParamCnt];
							var mstrCnct = ToString(miQty) + ToString(miK) + ToString(miParamCnt);
							mpsPSIndx.SetProperty(mstrCnct,marrSource[ibranch][msPSNumInd][miParamCnt])
//							mpsPSIndx.SetProperty(mstrCnct,marrSource[miQty][msPSNumInd][miParamCnt])
					}
				}
			}
			marrPrevFirst[miParamCnt] = marrIsFirst[miParamCnt];
		}
	}
	
	for(var i = 0;i<getArrayLength(marrNumbers);i++){
		for(var k = 0;k<getArrayLength(marrNumbers[i]);k++){		
		var test5 = getArrayLength(marrNumbers[i][k]);
			for(var j = 0;j<getArrayLength(marrNumbers[i][k]);j++){		
				var temp = marrNumbers[i][k][j];
			}
		}
	}
//1.1 below
	mpsTempNumSet = null;
//1.1 above	
	marrNumbers2 = null;
	marrNumbers3 = null;
	return (marrNumbers);
}
"/**************************************************************************************
* Name          : RMS NM Number Association RMSND_Cnct_NumberType      		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/
function RMSND_Cnct_NumberType(strParAssocId,&strConcatNumberType,bcNumAssociationMstr) {

	var boNumRulDtl;
	var bcNumRulDtl;
	var strMstrRulId;
	var flgRec;
	
	boNumRulDtl = TheApplication().GetBusObject(""RMS NM Association Rule"");
	bcNumRulDtl = boNumRulDtl.GetBusComp(""RMS NM Association Rule Detail"");		

	with(bcNumAssociationMstr) {
		ActivateField(""Rule Id"");
		ClearToQuery()
		SetSearchSpec(""Id"",strParAssocId);
		ExecuteQuery();
		if(FirstRecord())
			strMstrRulId = GetFieldValue(""Rule Id"");
	}	
	
	with(bcNumRulDtl) {
		ActivateField(""Source Number Type"");
		ActivateField(""Destination Number Type"")
		ActivateField(""Rule Id"");
		ClearToQuery()
		SetSearchSpec(""Rule Id"",strMstrRulId);
		SetSortSpec(""Sequence(Ascending)"");
		ExecuteQuery();
		flgRec = FirstRecord();

//-----------------------------------------------------
//Concat the number type and populate them in a string.
//-----------------------------------------------------

		while(flgRec) {
			if(GetFieldValue(""Sequence"") == 1) {
				strConcatNumberType = GetFieldValue(""Source Number Type"") + ' / ';	
				strConcatNumberType = strConcatNumberType + GetFieldValue(""Destination Number Type"") + ' / ';
			}
			else	
				strConcatNumberType = strConcatNumberType + GetFieldValue(""Destination Number Type"") + ' / ';
			flgRec = NextRecord();
		}
		strConcatNumberType = strConcatNumberType.substring(0,(strConcatNumberType.length-3));
	}
	
	bcNumRulDtl		= null;
	boNumRulDtl		= null;
}
"/*20060919  Kalyana  Deleted function comments as script length is exceeding 16K
  20060919	1.3      Kalyana   Added code to bypass DeAssociation based on Sys Pref Value for Child Rule
---------------------------------------------------------------------------------------*/
function RMSND_DeAssociation(msAssocId,psOp) {
	var mboNumAssociation,mbcNumAssociationMstr;
	var mbcNumAssStartNum;
	var mbcNumAssNumType,mbcNumAssDtl,mbcNumAssocMstrCnct;
	var mbcNumMstr,mbcNumMasterCnct, mboNumGen, mbcNumGen, mboNumAssociationNoLink, mbcSIMNumInfo, mbIsRec;
	var msAssociationId	= """";
	var msParAssId = """";
	var msParRowId = """";
	var msNumId	= """";
	var msParAssocId = """";
	var msRuleType = """";
	var msRowId	= """";
	var msConcatNumberType	= """";
	var msAssocStartId = """";
	var marrCnctId = new Array();
	var marrCnctIdUpd = new Array();
	var marrConcatNumber = new Array();
	var marrNumId = new Array();
	var marrNumId2 = new Array();
	var marrNumId3 = new Array();
	var marrNumIdMstr = new Array();
	var marrCnctIdStsChk = new Array();
	var miCnctIdCnt = 0;
	var miCnctIdCntUpd = 0;
	var miNumIdCnt = 0;
	var miNumId = 0;
	var miNumIdMstr	= 0;
	var miCnctIdStsChkCnt = 0; 
	var strErrVal = """";
	var strErrCode = """";
	// below 1.3
	var byPassDeassociation= """";
	// above 1.3
	marrNumId[miCnctIdCntUpd] = marrNumId2;
	marrNumId[miCnctIdCntUpd][miNumIdCnt] = marrNumId3;
	psOp.SetProperty(""strErrVal"","""");
	psOp.SetProperty(""strErrCode"","""");
	mboNumAssociation 		= TheApplication().GetBusObject(""RMS NM Number Association Service"");
	mbcNumAssociationMstr 	= mboNumAssociation.GetBusComp(""RMS NM Number Association Master"");
	mbcNumAssStartNum 		= mboNumAssociation.GetBusComp(""RMS NM Number Association Start Number"");
	mbcSIMNumInfo           = mboNumAssociation.GetBusComp(""RMS NM SIM ORDER LINE ITEM"");
	mboNumGen 				= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	mbcNumGen  				= mboNumGen.GetBusComp(""RMS NM Number Enquiry"");
	mboNumAssociationNoLink = TheApplication().GetBusObject(""RMS NM Number Association"");
	mbcNumAssNumType 		= mboNumAssociationNoLink.GetBusComp(""RMS NM Association Number Type Display"");	
	mbcNumAssDtl 			= mboNumAssociation.GetBusComp(""RMS NM Number Association Detail"");	
	mbcNumAssocMstrCnct 	= mboNumAssociation.GetBusComp(""RMS NM Number Association Master Concat"");		
	mbcNumMasterCnct 		= mboNumAssociation.GetBusComp(""RMS NM Number Master Concat"");
	try {
			//below 1.3
			byPassDeassociation = GetSysPrefValue();
			//above 1.3
			with(mbcNumAssociationMstr) {
			ActivateField(""Association Id"");
			ActivateField(""Rule Type"");
			ClearToQuery();
			SetSearchSpec(""Id"",msAssocId);
			ExecuteQuery(ForwardOnly);
			FirstRecord();
			msAssociationId = GetFieldValue(""Association Id"");
			msRuleType = GetFieldValue(""Rule Type"");
		}
	}
	catch (e) {
		strErrVal  = TheApplication().LookupMessage(""User Defined Errors"",""RMSASS008"");
		strErrCode = ""RMSASS008"";
		psOp.SetProperty(""strErrVal"",strErrVal);
		psOp.SetProperty(""strErrCode"",strErrCode);
		return(strErrVal);
	}
// below 1.2
		if(mbcNumAssociationMstr.GetFieldValue(""Status"")==TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""ASSOCIATED"")) {
// above 1.2		
		mbcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
		mbcNumAssociationMstr.WriteRecord();
	}
//The Code below checks whether the status of the associated numbers have changed.
	with(mbcNumAssocMstrCnct){
		ActivateField(""Association Id"");
		ActivateField(""Concat Id"");
		ClearToQuery();
		SetSearchSpec(""Association Id"",msAssocId);
		ExecuteQuery(ForwardOnly);
		var blnIsRec = FirstRecord();
		while(blnIsRec) {
			marrCnctIdStsChk[miCnctIdStsChkCnt++] = GetFieldValue(""Concat Id"");
			blnIsRec = NextRecord();
		}
	}
	for(miCnctIdStsChkCnt = 0;miCnctIdStsChkCnt < marrCnctIdStsChk.length; miCnctIdStsChkCnt++) {
		with(mbcNumMasterCnct){
			ActivateField(""Concat Id"");
			ActivateField(""Status Bfr Assoc"");
			ActivateField(""Status"");
			ClearToQuery();
			SetSearchSpec(""Concat Id"",marrCnctIdStsChk[miCnctIdStsChkCnt]);
			ExecuteQuery();
			var blnIsrec = FirstRecord();
			while(blnIsrec) {
				if(GetFieldValue(""Status"") != GetFieldValue(""Status Bfr Assoc"")){	
					//below 1.3
					if((byPassDeassociation != ""Y"") || (msRuleType != TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) )
			  		  {
					//above 1.3
						mbcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""ASSOCIATED""));
						mbcNumAssociationMstr.WriteRecord();
						strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASS011"");
						strErrCode = ""RMSASS011"";
						psOp.SetProperty(""strErrVal"",strErrVal);
						psOp.SetProperty(""strErrCode"",strErrCode);
						//below 1.3
						mbcNumAssociationMstr = null;
						mbcNumAssDtl = null;
						mbcNumAssocMstrCnct	= null;		
						mbcNumMasterCnct = null;
						mbcNumAssStartNum = null;
						mbcSIMNumInfo = null;
						mboNumAssociation = null;
						mbcNumAssNumType = null;
						mboNumAssociationNoLink = null;
						mbcNumGen = null;	
						mboNumGen = null;
						marrCnctId = null;
						marrCnctIdUpd = null;
						marrConcatNumber = null;
						marrNumId = null;
						marrNumIdMstr = null;
						marrCnctIdStsChk = null;
						return(strErrVal);
					   }//End of if((byPassDeassociation != ""Y"")
					   //above 1.3	
				} 
				blnIsrec = NextRecord();
			}
		}	
	}
//The Code below checks whether the associated number is used by any other rule or not.
//If it is not used then the ids of the concatenated numbers are populated in an array.		
	with(mbcNumAssocMstrCnct) {
		ActivateField(""Concat Id"");
		ActivateField(""Flag"");
		ClearToQuery();
		SetSearchSpec(""Association Id"",msAssocId);
		SetSearchSpec(""Flag"",""Y"");
		ExecuteQuery(ForwardOnly);
		if(FirstRecord()) {
			mbcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""ASSOCIATED""));
			mbcNumAssociationMstr.WriteRecord();
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASS012"");
			strErrCode = ""RMSASS012"";
			psOp.SetProperty(""strErrVal"",strErrVal);
			psOp.SetProperty(""strErrCode"",strErrCode);
			return(strErrVal);
		}
		ClearToQuery();
		SetSearchSpec(""Association Id"",msAssocId);
		ExecuteQuery(ForwardOnly);
		mbIsRec = FirstRecord();
		
		while(mbIsRec) {
			marrCnctId[miCnctIdCnt] = GetFieldValue(""Concat Id"");
			miCnctIdCnt++;
			mbIsRec = NextRecord();
		}
	}
//The code below get all those  concat Ids that has to be updated with the parent associated number in case of child rule.
	if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) {
		with(mbcNumAssStartNum) {
			ActivateField(""Parent Ass Id"");
			ClearToQuery();
			SetSearchSpec(""Ass Id"",msAssocId);
			SetSearchSpec(""Sequence"",1);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
				msParAssocId = GetFieldValue(""Parent Ass Id"");
		}	
		RMSND_Cnct_NumberType(msParAssocId,msConcatNumberType,mbcNumAssociationMstr);
		with(mbcNumAssocMstrCnct) {
			for(var miCnctIdCnt = 0;ToInteger(miCnctIdCnt) < ToInteger(marrCnctId.length);miCnctIdCnt++) {
				ActivateField(""Concat Id"");
				ClearToQuery();
				SetSearchSpec(""Association Id"",msParAssocId);
				SetSearchSpec(""Concat Id"",marrCnctId[miCnctIdCnt]);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord()) {
					marrCnctIdUpd[miCnctIdCntUpd] =	marrCnctId[miCnctIdCnt];			
					miCnctIdCntUpd++;
				}
			}
		}
		with(mbcNumAssDtl) {
			for(miCnctIdCntUpd = 0;ToInteger(miCnctIdCntUpd) < ToInteger(marrCnctIdUpd.length);miCnctIdCntUpd++) {
				miNumIdCnt	=0;		
				ActivateField(""Parent Ass Id"");
				ActivateField(""Id"");
				ActivateField(""Source Num Id"");
				ActivateField(""Destination Num Id"");
				ClearToQuery();
				SetSearchSpec(""Association Id"",msParAssocId);
				SetSearchSpec(""Number Association Concat Id"",marrCnctIdUpd[miCnctIdCntUpd]);
				ExecuteQuery();
				if(FirstRecord()) {
					msParAssId = GetFieldValue(""Parent Ass Id"");
					msParRowId = GetFieldValue(""Id"");
					if(msParAssId == """") 
						msRowId = msParRowId;
				}
				if(msParAssId != """") {
					while(FirstRecord()) {
						ClearToQuery();
						SetSearchSpec(""Association Id"",msParAssocId);
						SetSearchSpec(""Id"",msParAssId);
						ExecuteQuery();
						if(FirstRecord()) {
							msParAssId = GetFieldValue(""Parent Ass Id"");
							msParRowId = GetFieldValue(""Id""); 
							if(msParAssId == """") {
								msRowId = msParRowId;
								break;
							}
						}
					}
				}
				ClearToQuery();
				SetSearchSpec(""Association Id"",msParAssocId);
				SetSearchSpec(""Id"",msRowId);
				ExecuteQuery();
				if(FirstRecord()) {
					msParAssId = GetFieldValue(""Id"");
					with(mbcNumGen)	{
						ActivateField(""Number String"");
						ClearToQuery();
						SetSearchSpec(""Id"",mbcNumAssDtl.GetFieldValue(""Source Num Id""));
						//marrNumId[miCnctIdCntUpd][miNumIdCnt++] = mbcNumAssDtl.GetFieldValue(""Source Num Id"");
						SetArray(marrNumId,miCnctIdCntUpd,miNumIdCnt++,""?"",""?"",mbcNumAssDtl.GetFieldValue(""Source Num Id""));	
						marrNumIdMstr[miNumIdMstr++] = mbcNumAssDtl.GetFieldValue(""Source Num Id"");					
						ExecuteQuery();
						if(FirstRecord())
							marrConcatNumber[miCnctIdCntUpd] = GetFieldValue(""Number String"") + ' / ';	
						ClearToQuery();
						SetSearchSpec(""Id"",mbcNumAssDtl.GetFieldValue(""Destination Num Id""));
						//marrNumId[miCnctIdCntUpd][miNumIdCnt++] = mbcNumAssDtl.GetFieldValue(""Destination Num Id"");
						SetArray(marrNumId,miCnctIdCntUpd,miNumIdCnt++,""?"",""?"",mbcNumAssDtl.GetFieldValue(""Destination Num Id""));	
						marrNumIdMstr[miNumIdMstr++] = mbcNumAssDtl.GetFieldValue(""Destination Num Id"");					
						ExecuteQuery();
						if(FirstRecord())
							marrConcatNumber[miCnctIdCntUpd] = marrConcatNumber[miCnctIdCntUpd] + GetFieldValue(""Number String"") + ' / ';
					}
				}
				while(FirstRecord()) {
					ClearToQuery();
					SetSearchSpec(""Association Id"",msParAssocId);
					SetSearchSpec(""Parent Ass Id"",msParAssId);
					ExecuteQuery();
					if(FirstRecord()) {
						msParAssId = GetFieldValue(""Id"");
						with(mbcNumGen) {								 
							ClearToQuery();
							SetSearchSpec(""Id"",mbcNumAssDtl.GetFieldValue(""Destination Num Id""));
							//marrNumId[miCnctIdCntUpd][miNumIdCnt++] = mbcNumAssDtl.GetFieldValue(""Destination Num Id"");
							SetArray(marrNumId,miCnctIdCntUpd,miNumIdCnt++,""?"",""?"",mbcNumAssDtl.GetFieldValue(""Destination Num Id""));	
							marrNumIdMstr[miNumIdMstr++] = mbcNumAssDtl.GetFieldValue(""Destination Num Id"");					
							ExecuteQuery();
							if(FirstRecord())
								marrConcatNumber[miCnctIdCntUpd] = marrConcatNumber[miCnctIdCntUpd] + GetFieldValue(""Number String"") + ' / ';	
						}
					}
				}		
				marrConcatNumber[miCnctIdCntUpd] = marrConcatNumber[miCnctIdCntUpd].substring(0,(marrConcatNumber[miCnctIdCntUpd].length-3));
				with(mbcNumAssNumType) {
					ActivateField(""Associated Number"");
					ActivateField(""Associated Type"");
					ClearToQuery();
					SetSearchSpec(""Id"",marrCnctIdUpd[miCnctIdCntUpd]);
					ExecuteQuery();
					if(FirstRecord()) {
						SetFieldValue(""Associated Number"",marrConcatNumber[miCnctIdCntUpd]);
						SetFieldValue(""Associated Type"",msConcatNumberType);
						WriteRecord();
					}
				}
			}
		}
	}
// The following code deletes the appropriate records for each concat ids.
	miCnctIdCntUpd = 0;
	for(var miCnctIdCnt = 0;ToInteger(miCnctIdCnt) < ToInteger(marrCnctId.length);miCnctIdCnt++) {
		if(marrCnctId[miCnctIdCnt] != marrCnctIdUpd[miCnctIdCntUpd]) {
			with(mbcNumAssNumType) {
				ClearToQuery();
				SetSearchSpec(""Id"",marrCnctId[miCnctIdCnt])
				ExecuteQuery()
				if(FirstRecord()) {
					with(mbcNumMasterCnct) {
						ActivateField(""Number Id"");
						ClearToQuery();
						SetSearchSpec(""Concat Id"",marrCnctId[miCnctIdCnt]);
						ExecuteQuery();
						mbIsRec = FirstRecord();
						while(mbIsRec) {
							msNumId = GetFieldValue(""Number Id"");
							if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) {
								for(miNumIdCnt =0 ;ToInteger(miNumIdCnt) < ToInteger(marrNumIdMstr.length);miNumIdCnt++) {
									if(GetFieldValue(""Number Id"") == marrNumIdMstr[miNumIdCnt]) {
										miNumId = 1;
										break;
									}
								}	
							}
							msAssocStartId = RMSND_Update_Deassoc_NumMstr(mbcNumGen,msNumId,miNumId) 								
							mbIsRec=NextRecord();
							miNumId = 0;
						}
						miNumId = 0;
					}	
					DeleteRecord();
				}
			}
		}
		with(mbcNumAssocMstrCnct) {
			ClearToQuery();
			SetSearchSpec(""Association Id"",msAssocId);
			SetSearchSpec(""Concat Id"",marrCnctId[miCnctIdCnt]);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())	
				DeleteRecord();
		}
		with(mbcNumAssDtl) {
			ClearToQuery();
			SetSearchSpec(""Association Id"",msAssocId);
			SetSearchSpec(""Number Association Concat Id"",marrCnctId[miCnctIdCnt]);
			ExecuteQuery();
			while(FirstRecord()) 
				DeleteRecord();
		}
		with(mbcNumMasterCnct) {
			ActivateField(""Number Id"");
			ClearToQuery();
			SetSearchSpec(""Concat Id"",marrCnctId[miCnctIdCnt]);
			ExecuteQuery();
			mbIsRec = FirstRecord();
			while(mbIsRec) {
				msNumId = GetFieldValue(""Number Id"");
				if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"") && marrCnctId[miCnctIdCnt] == marrCnctIdUpd[miCnctIdCntUpd]) {
					for(miNumIdCnt=0 ;ToInteger(miNumIdCnt) < ToInteger(getArrayLength(marrNumId[miCnctIdCntUpd]));miNumIdCnt++) {
						if(GetFieldValue(""Number Id"") == marrNumId[miCnctIdCntUpd][miNumIdCnt]) {
							miNumId = 1;
							break;
						}
					}	
				}
				msAssocStartId = RMSND_Update_Deassoc_NumMstr(mbcNumGen,msNumId,miNumId) 					
				if(ToInteger(miNumId) == 0) {
					if(!(PreviousRecord())) {
						DeleteRecord();
					}
					else {
						mbIsRec = NextRecord();
						mbIsRec = DeleteRecord();
						mbIsRec = NextRecord();
					}
				}
				if(miNumId == 1)
					mbIsRec=NextRecord();
				miNumId = 0;
			}
		}	
		if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) {
			if(marrCnctId[miCnctIdCnt] == marrCnctIdUpd[miCnctIdCntUpd]) {
				with(mbcNumAssocMstrCnct) {
					ActivateField(""Concat Id"");
					ActivateField(""Flag"");
					ClearToQuery();
					SetSearchSpec(""Association Id"",msParAssocId);
					SetSearchSpec(""Concat Id"",marrCnctId[miCnctIdCnt])
					ExecuteQuery(ForwardOnly);
					if(FirstRecord()) {
						SetFieldValue(""Flag"",""N"");
						WriteRecord(); 
					}
				}
			}
		}
		if(marrCnctId[miCnctIdCnt] == marrCnctIdUpd[miCnctIdCntUpd])
			miCnctIdCntUpd++;
	}	
	if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""PARENT"") && msAssocStartId != """")
		DeleteSIMOrderNum(mbcSIMNumInfo,msAssocStartId);
	if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) 
	{
		with(mbcNumAssocMstrCnct) 
		{
			ClearToQuery();
			SetSearchSpec(""Association Id"",msParAssocId);
			SetSearchSpec(""Flag"",""N"");
			ExecuteQuery(ForwardOnly);
		}	
	}
	with(mbcNumAssociationMstr) 
	{
		if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"") && (mbcNumAssocMstrCnct.FirstRecord())) 
		{
			ActivateField(""Flag"");
			ActivateField(""Status"");
			ClearToQuery();
			SetSearchSpec(""Id"",msParAssocId);
			ExecuteQuery();
			if(FirstRecord()) 
			{
				SetFieldValue(""Flag"",""N"");
				WriteRecord();
			}
		}
		ActivateField(""Status"");		
		ClearToQuery();
		SetSearchSpec(""Id"",msAssocId);
		ExecuteQuery();
		if(FirstRecord()) {			
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));
			WriteRecord(); 
		}
	}	
	//free object definitions
	mbcNumAssociationMstr = null;
	mbcNumAssDtl = null;
	mbcNumAssocMstrCnct = null;		
	mbcNumMasterCnct = null;
	mbcNumAssStartNum= null;
	mbcSIMNumInfo 	= null;
	mboNumAssociation = null;
	mbcNumAssNumType	= null;
	mboNumAssociationNoLink = null;
	mbcNumGen = null;	
	mboNumGen = null;
	marrCnctId 	= null;
	marrCnctIdUpd = null;
	marrConcatNumber = null;
	marrNumId 	= null;
	marrNumId2 = null;
	marrNumId3 = null;
	marrNumIdMstr = null;
	marrCnctIdStsChk = null;
	strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASS013"");
	strErrCode = ""RMSASS013"";
	psOp.SetProperty(""strErrVal"",strErrVal);
	psOp.SetProperty(""strErrCode"",strErrCode);
	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Association RMSND_Update_Deassoc_NumMstr Method 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/11/2003 	1.0   		MBT						   	Created      28/11/2003       *
**************************************************************************************/
function RMSND_Update_Deassoc_NumMstr(bcNumGen,strNumId,flgNumId) 
{
	//var psInputs	= TheApplication().NewPropertySet();
	///var psOutputs	= TheApplication().NewPropertySet();
	
	//var bsBlock 	= TheApplication().GetService(""RMS RMS Block Calc"");
	
	//var msFromStatus	= """";
	var msAssocStartId = """";
	with(bcNumGen) {
		ActivateField(""Is Associated"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""IMSI Assoc"");
		ActivateField(""Status"");
		ActivateField(""Status Bfr Assoc"");									
		ActivateField(""Alloc Id"");
		ActivateField(""Reserve Id"");
		ActivateField(""Assigned To"");
		ActivateField(""Block Id"");
		ClearToQuery();
		SetSearchSpec(""Id"",strNumId);
		ExecuteQuery();
		if(FirstRecord()) {
			if(flgNumId == 0) {
				
				SetFieldValue(""Is Associated"",""N"");
				msAssocStartId = GetFieldValue(""Assoc Start Id"");
				SetFieldValue(""Assoc Start Id"","""");
				SetFieldValue(""Status"",GetFieldValue(""Status Bfr Assoc""));
				SetFieldValue(""IMSI Assoc"",""N"");
				
	/*		Commented as there this condition is not necessary for release phase 1A	
			if(GetFieldValue(""Status Bfr Assoc"") != GetFieldValue(""Status"")) {		
					psInputs.SetProperty(""From Status"",msFromStatus);
					psInputs.SetProperty(""To Status"",GetFieldValue(""Status""));
					psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
					bsBlock.InvokeMethod(""UpdateNumberBlock"",psInputs,psOutputs);
				}
	*/			
			}
			WriteRecord(); 
		}
	}
	return (msAssocStartId);
	//psInputs = null;
	//psOutputs = null;
	//bsBlock = null;
}
"/**************************************************************************************
* Name          : RMS NM Number Association RefreshRecord Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File					              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/11/2003 	1.0   		MBT						   	Created      30/12/2003       *
**************************************************************************************/

function RefreshRecord_TO_BE_DELETED(boName,bcName){

	var psInputs;
	var psOutputs;
	var bsSIMNMRef;
	
	try{
	
	psInputs	= TheApplication().NewPropertySet();
	psOutputs	= TheApplication().NewPropertySet();
	
	bsSIMNMRef 	= TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
										
	psInputs.SetProperty(""Business Component Name"",bcName);
	psInputs.SetProperty(""Business Object Name"",boName);
	bsSIMNMRef.InvokeMethod(""Refresh Business Component"",psInputs,psOutputs);
	
	} catch(e) {
		throw(e);
	} finally {
		psInputs	= null;
		psOutputs	= null;
		bsSIMNMRef 	= null;
		
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Association RefreshingBc Method    		 	  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   By     	Comments
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   MBT		Created      12/12/2003       *
20060622        1.1   Prasad    SiebelES#3 Incorporated
*************************************************************************************
*/
function RefreshingBc_TO_BE_DELETED(bcNumAssocMstr,AssocId){		

//-------------------------------------------------------------------
//Query Association Master and move the pointer to the current record.
//-------------------------------------------------------------------

	var strPtrForCurrRec;
	with(bcNumAssocMstr) {
//1.1 below TODO
/*
		bcNumAssocMstr.InvokeMethod(""RefreshRecord"");
		bcNumAssocMstr.InvokeMethod(""UpdateLinks"");
*/
		ClearToQuery();
		ExecuteQuery();
		strPtrForCurrRec = FirstRecord();
	
		while(strPtrForCurrRec) {
			if(GetFieldValue(""Id"") == AssocId)
				break;
			strPtrForCurrRec = NextRecord();
		}
//1.1 above
	}
}
"/**************************************************************************************
RMS NM Number Association Service
This BS will always work on a single record in Association Master BC.
***************************************************************************************
* Date    	Ver   By      Comments                                          Reviewed Date
***************************************************************************************
22/11/2003  1.0   MBT	  Created                                           28/11/2003
31/05/2005  1.1   MBT	  P.Gautaman(Updated)                               31/05/2005
20060622    1.2   Prasad  SiebelES#3 Return errors in o/p propset, rather than RaiseError, 
                            removed RefreshingBC
                            Removed PreCanInvoke code which is unnecessary
                            Changes are radical, hence not all of the old code could be retained
                            Unused functions are yet to be marked so/deleted
20060706    1.3   Prasad  Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	Outputs.SetProperty(""Error Code"","""");
	Outputs.SetProperty(""Error Message"","""");
	var intReturn = ContinueOperation;
	var psAssocParam;
	var psNumSet;
	var psfnArg = TheApplication().NewPropertySet();		//For passing output arguments from functions
	var marrNumSet;
	var strObjectId;
	var strErrVal = """";
	var strErrCode = """";
	var strRuleId;
	var intNumOfElement;
	var marrSource = new Array();
//this will be ROW_ID of master record	
	var strAssocId = Inputs.GetProperty(""AssociationId"");
	var bIsAssocMstrRec=false;
	var strAssocMstrStatus;
	try{ 
		var boNumAssociation = TheApplication().GetBusObject(""RMS NM Number Association"");
		var bcNumAssociationMstr = boNumAssociation.GetBusComp(""RMS NM Number Association Master"");
	 	var bcNumAssociationStartNum = boNumAssociation.GetBusComp(""RMS NM Number Association Start Number"");
		bcNumAssociationMstr.ActivateField(""Status"");
		bcNumAssociationMstr.ActivateField(""Association Id"");
		bcNumAssociationMstr.ActivateField(""Rule Type"");
		bcNumAssociationMstr.SetSearchSpec(""Id"",strAssocId);
		bcNumAssociationMstr.ExecuteQuery();
		bIsAssocMstrRec = bcNumAssociationMstr.FirstRecord();
		if(!bIsAssocMstrRec)
		{//MUST have a record else error out
			Outputs.SetProperty(""Error Code"",""RMS_NO_RECORD"");
			Outputs.SetProperty(""Error Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMS_NO_RECORD"",MethodName));
			intReturn = CancelOperation;
		}
		else//process ONLY if a record was found
		{
			strAssocMstrStatus = bcNumAssociationMstr.GetFieldValue(""Status"");
			bcNumAssociationStartNum.ExecuteQuery();
			switch (MethodName)
			{
				case ""AssociateNumbers"":
				  	intReturn = CancelOperation;
					psfnArg.SetProperty(""strErrVal"","""");
					psfnArg.SetProperty(""strErrCode"","""");
//try to lock the record first, get the status (must be pending), then change the status to (processing) 
//if any write error, this means record modified by other user, set error
//Check current status
					if(strAssocMstrStatus == TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"")) 
					{
						Outputs.SetProperty(""Error Code"",""RMSASS009"");
						Outputs.SetProperty(""Error Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS009""));
						intReturn = CancelOperation;
						break;
					}
					else if(strAssocMstrStatus == TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING"") || 
							strAssocMstrStatus == TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""SUBMITTED"")) 
					{
						try
						{
							bcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
							bcNumAssociationMstr.WriteRecord();//here we may get an error if some other session has done changes
						}
						catch(e)
						{
							Outputs.SetProperty(""Error Code"",""RMSASS009"");
							Outputs.SetProperty(""Error Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS009""));
							intReturn = CancelOperation;
							break;
						}
					}
					else//some other sttaus? Do not allow
					{
						Outputs.SetProperty(""Error Code"",""RMS_NO_RECORD"");
						Outputs.SetProperty(""Error Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMS_NO_RECORD"",MethodName));
						intReturn = CancelOperation;
						break;
					}
					psAssocParam = GetAssocParam(Inputs,bcNumAssociationMstr,bcNumAssociationStartNum,psfnArg);
					strErrVal    = psfnArg.GetProperty(""strErrVal"");
					strErrCode   = psfnArg.GetProperty(""strErrCode"");
				  	if(strErrVal != """") 
				  	{
			  			bcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""))
			  			bcNumAssociationMstr.WriteRecord();
						Outputs.SetProperty(""Error Code"",strErrCode);
						Outputs.SetProperty(""Error Message"",strErrVal);
				    	break;//exit out of the case statement
				  	}
					BuildSourceArray(marrSource,bcNumAssociationMstr,psAssocParam);
					psfnArg.SetProperty(""strErrVal"","""");
					psfnArg.SetProperty(""strErrCode"","""");
					psNumSet     = ValidateQty(psAssocParam,psfnArg);
					strErrVal    = psfnArg.GetProperty(""strErrVal"");
					strErrCode   = psfnArg.GetProperty(""strErrCode"");
				
//-----------------------------------------------------------------
//1.1	Added to update the number set based on Splitted record id.
//-----------------------------------------------------------------
//				psNumSet = UpdateSplitNumSet(psNumSet);
//----------------------------------------------------------------------------
// Updating the status of Assoc Mastr to Pending when an error is encountered.
//----------------------------------------------------------------------------
				  	if(strErrVal != """")
				  	{
			  			bcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""))
			  			bcNumAssociationMstr.WriteRecord();
						Outputs.SetProperty(""Error Code"",strErrCode);
						Outputs.SetProperty(""Error Message"",strErrVal);
				    	break;//exit out of the case statement
				  	}
					else 
				  		UpdateAssocDetails(psAssocParam,strAssocId);
					AssociateNumbers(psNumSet, psAssocParam,marrSource,psfnArg);
					strErrVal    = psfnArg.GetProperty(""strErrVal"");
					strErrCode   = psfnArg.GetProperty(""strErrCode"");
//----------------------------------------------------------------------------
// Updating the status of Assoc Mstr to Pending when an error is encountered.
//----------------------------------------------------------------------------
				  	if(""RMSASS001"" != strErrCode)//RMSASS001 is actually status mesg for Successful Association
					{
			  			bcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));
			  			bcNumAssociationMstr.WriteRecord();
				  	}//anyway the raiseerror was being done, moved out of if
					Outputs.SetProperty(""Error Code"",strErrCode);
					Outputs.SetProperty(""Error Message"",strErrVal);
			    	break;//exit out of the case statement
				case ""DeassociateNumbers"":
				  	intReturn = CancelOperation;
					if(strAssocMstrStatus == TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"")) 
					{
						Outputs.SetProperty(""Error Code"",""RMSASS010"");
						Outputs.SetProperty(""Error Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS010""));
						intReturn = CancelOperation;
						break;
					}
					else if(strAssocMstrStatus == TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""ASSOCIATED"")) 
					{
						try
						{
							bcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
							bcNumAssociationMstr.WriteRecord();//here we may get an error if some other session has done changes
						}
						catch(e)
						{
							Outputs.SetProperty(""Error Code"",""RMSASS010"");
							Outputs.SetProperty(""Error Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS010""));
							intReturn = CancelOperation;
							break;
						}
					}
					else//some other sttaus? Do not allow
					{
						Outputs.SetProperty(""Error Code"",""RMS_NO_RECORD"");
						Outputs.SetProperty(""Error Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMS_NO_RECORD"",MethodName));
						intReturn = CancelOperation;
						break;
					}
					strErrVal = RMSND_DeAssociation(strAssocId,psfnArg);
					Outputs.SetProperty(""Error Code"",psfnArg.GetProperty(""strErrCode""));
					Outputs.SetProperty(""Error Message"",psfnArg.GetProperty(""strErrVal""));
				  	break;
//------------------------------------------------------------
// Inserting the Association Parameters with the number types.
//------------------------------------------------------------
//this can be done by anyone anywhere? Not a UI driven method hence concurrency is controlled
			    case ""UpdateAssocParameters"":
			       	intReturn = CancelOperation;
			    	UpdateAssocParameters(Inputs,boNumAssociation,bcNumAssociationStartNum);
					bcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));
					bcNumAssociationMstr.WriteRecord();
			    	break;	
//-----------------------------------------------------------
// Setting the quantity of the association parameters record.
//-----------------------------------------------------------
//this can be done by anyone anywhere? Not a UI driven method hence concurrency is controlled
			    case ""UpdateQuantity"":
			       	intReturn = CancelOperation;
			    	UpdateQuantity(Inputs,boNumAssociation,bcNumAssociationMstr,bcNumAssociationStartNum);
			    	break;	
//for estimating the end numbers if the user wants to see the estimated end number.Function provided 
//separately becase of performace reasons, as there will normally be more than 1000 numbers for association.
//this can be done by anyone anywhere? Not a UI driven method hence concurrency is controlled
			    case ""EstimateEndNumber"":	
			    	intReturn = CancelOperation;
//To disable the error messages in GetAssocpara function
//			    	Inputs.SetProperty(""CallSource"",""Applet"");
//Get Association Parameters. same function is used for association function also
			    	psAssocParam = GetAssocParam(Inputs,bcNumAssociationMstr,bcNumAssociationStartNum,psfnArg);
//ignore errors? There was a switch that if CallSource = Applet, do not check errors			    	
//Estimate the end numbers for all records with start date specified.
			    	psfnArg.SetProperty(""strErrVal"","""");
			    	psfnArg.SetProperty(""strErrCode"","""");
		    		EstimateEndNumbers(psAssocParam,psfnArg,Inputs.GetProperty(""AssociationId""));
					Outputs.SetProperty(""Error Code"",psfnArg.GetProperty(""strErrCode""));
					Outputs.SetProperty(""Error Message"",psfnArg.GetProperty(""strErrVal""));
				  	break;
			    default:
			    	break;
		    }
	    }
	}
	catch(e)
	{
		//throw e;
//must return an error code rather than throwing an error
		Outputs.SetProperty(""Error Code"",""RMS_UNHNDLED_EXCEP"");
		Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_UNHNDLED_EXCEP"",e.errCode,e.errText));
	}
	finally 
	{
		bcNumAssociationMstr 		= null;
	 	bcNumAssociationStartNum 	= null;
		boNumAssociation 			= null;
		marrSource					= null;		
		psAssocParam				= null;
		psNumSet					= null;
		marrNumSet					= null;
//1.3 below
		psfnArg                     = null;
//1.3 above		
	}
	return(intReturn);
}
function SetArray(&arrArray,d1,d2,d3,d4,&value)
{
	try{
		TheApplication().Trace("function SetArray: START!"");
		//var strSTEng = TheApplication().GetProfileAttr(""RMS_ST_ENGINE"");
		var strSTEng = ""Y"";

// Commented the below code as it was overriding the passed array element values.

	/*	if ((d2 != ""?"")) {
			if ((typeof(arrArray[d1]) != "function"") && (strSTEng == ""Y"")){
				arrArray[d1] = new Array();
			}
		} else {
			arrArray[d1] = value;
			return(true);
		}
		if ((d3 != ""?"")) {
			if ((typeof(arrArray[d1][d2]) != "function"") && (strSTEng == ""Y""))		
				arrArray[d1][d2] = new Array();
		} else {
			arrArray[d1][d2] = value;
			return(true);
		}
		if ((d4 != ""?"")) {
			if((typeof(arrArray[d1][d2][d3]) != "function"") && (strSTEng == ""Y""))
				arrArray[d1][d2][d3] = new Array();
		} else {
				arrArray[d1][d2][d3] = value;
				// Commented the below code as it was overriding the passed array element values.

				//var arrArrayTemp = arrArray[d1][d2][d3];
				
				return(true);
		}
		*/
		if ((d2 == ""?"")) {
			arrArray[d1] = value;
			return(true);
		}
		if ((d3 == ""?"")) {
			arrArray[d1][d2] = value;
			return(true);
		}if ((d4 == ""?"")) {
				arrArray[d1][d2][d3] = value;
				return(true);
		}
		
	} catch(e) {
		var test = e.errText;
		throw(e);
	}
}
function SetCnctRecCnt(marrSource) {
	var miNumOfCnctRec = 0;
	var msNumType = ""NumType"";
	for(var i=0;i<getArrayLength(marrSource);i++) {
		miNumOfCnctRec = ToInteger(miNumOfCnctRec) + ToInteger(marrSource[i][msNumType][1]);
	}

	if(miNumOfCnctRec==0)
		return(1);
	else
		return(miNumOfCnctRec);
}
function SetNumCnctRec(&marrSource,msNumType,msDestNum) {
	var intNumRecCnt;
	for(var i = 0;i<getArrayLength(marrSource);i++) {
		intNumRecCnt = 1;
		for(var j=0;j<getArrayLength(marrSource[i][msDestNum]);j++) {
			if(marrSource[i][msDestNum][j] != ""X"")
				intNumRecCnt = intNumRecCnt * marrSource[i][msDestNum][j];
		}
		marrSource[i][msNumType][1] = intNumRecCnt;
	}
	
}
"/**************************************************************************************
* Name          : RMS NM Number Association Calculate Quantity		    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 27/07/2005 	1.0   		MBT						   	Created      27/07/2005       *
**************************************************************************************/
function SortGen(msGenLvl) {
	var marrGenSup	= new Array();
	var strNewString = """";	
	
	marrGenSup	= msGenLvl.split(""/"");
	marrGenSup.sort();
	
	for(var i=0;i<getArrayLength(marrGenSup);i++) {
		if(strNewString =="""")
			strNewString = marrGenSup[i];
		else
			strNewString  = strNewString+ ""/"" + marrGenSup[i];
	}
	return(strNewString)
}
function SynchronizeArrays(&marrSource,msTypArr)
{
	var marrInnerArray	 = new Array();
	marrInnerArray = marrSource;
	for(var intOuterArrCnt=0;intOuterArrCnt < getArrayLength(marrSource);intOuterArrCnt++)	{
		for(var intInnerArrCnt=ToInteger(intOuterArrCnt)+1;intInnerArrCnt<getArrayLength(marrInnerArray);intInnerArrCnt++) {
			var mintOutDestLen = getArrayLength(marrSource[intOuterArrCnt][msTypArr]);
			var mintInnDestLen = getArrayLength(marrSource[intInnerArrCnt][msTypArr]);
			if(mintOutDestLen < mintInnDestLen) {
				for(var i = mintOutDestLen;i<mintInnDestLen;i++)
					marrSource[intOuterArrCnt][msTypArr][i] = ""X"";
			}
		}
	}

	var marrInnerArray	 = new Array();
	marrInnerArray = marrSource;
	for(var intOuterArrCnt=ToInteger(getArrayLength(marrSource))-1;intOuterArrCnt>=0;intOuterArrCnt--){
		for(var intInnerArrCnt=ToInteger(intOuterArrCnt)-1;intInnerArrCnt>=0;intInnerArrCnt--) {
			var mintOutDestLen = getArrayLength(marrSource[intOuterArrCnt][msTypArr]);
			var mintInnDestLen = getArrayLength(marrSource[intInnerArrCnt][msTypArr]);
			if(mintOutDestLen < mintInnDestLen) {
				for(var i = mintOutDestLen;i<mintInnDestLen;i++)
					marrSource[intOuterArrCnt][msTypArr][i] = ""X"";
			}
		}
	}	
}
"/**************************************************************************************
* Name          : RMS NM Number UpdateAssocDetails 	  							  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Function to update end number of association start parameters       *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/11/2003 	1.0   		MBT						   	Created      28/11/2003       *
**************************************************************************************/
function UpdateAssocDetails(&psAssocParam,msAssocId) 
{
	var psAssocParamRec;
	var boNumAssociation			= TheApplication().GetBusObject(""RMS NM Number Association"");
	var bcNumAssociationStartNum 	= boNumAssociation.GetBusComp(""RMS NM Number Association Start Number"");
	for (var i=0;i<psAssocParam.GetChildCount();i++) 
	{
		psAssocParamRec = psAssocParam.GetChild(i);
		if(psAssocParamRec.GetProperty(""EndingNumber"") != """") 
		{
			with(bcNumAssociationStartNum) 
			{
				ActivateField(""End Number"");
				ClearToQuery();
				SetSearchSpec(""Ass Id"",msAssocId);
				SetSearchSpec(""Sequence"",(i+1));
				ExecuteQuery(ForwardOnly);
				if(FirstRecord()) 
				{
					SetFieldValue(""End Number"",psAssocParamRec.GetProperty(""EndingNumber""));
					WriteRecord();
				}
			}
		}
	}
	bcNumAssociationStartNum	= null; 
	boNumAssociation			= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Association UpdateAssocMstr Method    		 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      28/12/2003       *
**************************************************************************************/
function UpdateAssocMstr(msRuleType,mbcNMNumAssocMstrCnct,mbcNMNumAssocMstr,msParentAssocMstrId,msAssocId)
{
	var strErrVal = """";
//	try{

	if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) {
		with(mbcNMNumAssocMstrCnct) {
			ClearToQuery();
			var strSearch = ""[Association Id] = '"" + msParentAssocMstrId + ""' AND "";
			strSearch = strSearch + ""[Flag] = 'N'"" ;

			SetSearchExpr(strSearch); 
	  	  	ExecuteQuery(1);
	   		FirstRecord();
		}
	}
	with(mbcNMNumAssocMstr) {
		ActivateField(""Flag"");
		ActivateField(""Status"");
		if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"") && !(mbcNMNumAssocMstrCnct.FirstRecord())) {
			ClearToQuery();
			SetSearchSpec(""Id"",msParentAssocMstrId);
			ExecuteQuery();
			if(FirstRecord()) {
				SetFieldValue(""Flag"",""Y"");
				WriteRecord();
			}
		}	
		ClearToQuery();
		SetSearchSpec(""Id"",msAssocId);
		ExecuteQuery(1);
		if(FirstRecord()) {
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""ASSOCIATED""));
			WriteRecord(); 
		}
	}	
	return(strErrVal);
/*
	} catch (e) {
		return(e.errText);
	}
*/
}
"/**************************************************************************************
* Name          : RMS NM Number Association Update Association Parameters		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      28/12/2003       *
* 31/05/2005	1.1			MBT							Gautaman	 31/05/2005		  *	
**************************************************************************************/
function UpdateAssocParameters(Inputs,boNumAssociation,bcNumAssociationStartNum){

	var intSeq=1;	
	var intRecCnt = 0;
	var intObjectId;
	var intRuleId;
	var intAssocId;
	
	var boAssRule; 
	var bcAssRuleMstr;
	var bcAssRuleDtl
	var intRuleId;
	var strPRuleId;
	var blnIsRecord;
	var strErrVal;
	var strRuleType;
	
	var arrDestTypeId 		= new Array();
	var arrDestSubTypeId 	= new Array();
//1.1 Added to set the split record id in Association Parameters	
	var arrSplitRecId		= new Array();
	var flgGlblVarbl;
	
//	intObjectId = Inputs.GetProperty(""Object Id"");
	intRuleId   = Inputs.GetProperty(""Rule Id"");
	intAssocId	= Inputs.GetProperty(""AssociationId"");
	
//	flgGlblVarbl = TheApplication().GetSharedGlobal(""g_flgAssMstr"");
//	if(flgGlblVarbl != ""Y"" ) {

		boAssRule = TheApplication().GetBusObject(""RMS NM Association Rule"");
		bcAssRuleMstr = boAssRule.GetBusComp(""RMS NM Association Rule Master"");		
		bcAssRuleDtl = boAssRule.GetBusComp(""RMS NM Association Rule Detail"");		

//---------------------------------------------------------------------------
//Querying Association Rule detail and populating the number id's in an array.
//---------------------------------------------------------------------------

		with(bcAssRuleMstr) {
	
			ActivateField(""Rule Type"");
			ActivateField(""Id"");
			ClearToQuery();
			SetSearchSpec(""Id"",intRuleId);
			ExecuteQuery(1);
			FirstRecord(); 
			strRuleType = GetFieldValue(""Rule Type"");
		}
		with(bcAssRuleDtl) {
			ActivateField(""Rule Id"");
			ActivateField(""Parent Rule Id"");
			ActivateField(""Source Number Type Id"");
			ActivateField(""Source Number Subtype Id"");
			ActivateField(""Destination Number Type Id"");
			ActivateField(""Destination Number Subtype Id"");
			ActivateField(""Sequence"");
			ActivateField(""Split"");			
			ActivateField(""Split Record Id"");			
			ClearToQuery();
			SetSearchSpec(""Rule Id"",intRuleId);
			SetSortSpec(""Sequence(ASCENDING)"");
			ExecuteQuery();
			blnIsRecord = FirstRecord(); 
			if(blnIsRecord) {
				strPRuleId = GetFieldValue(""Parent Rule Id"");	
				if(strPRuleId == """") {
					arrDestTypeId[intRecCnt] = GetFieldValue(""Source Number Type Id"");
					arrDestSubTypeId[intRecCnt] = GetFieldValue(""Source Number Subtype Id"");
					arrSplitRecId[intRecCnt] = """";
					intRecCnt++;
					GetDestType(bcAssRuleDtl,arrDestTypeId,arrDestSubTypeId,intRecCnt,arrSplitRecId);
				}
				else {
					intRecCnt++;
					GetDestType(bcAssRuleDtl,arrDestTypeId,arrDestSubTypeId,intRecCnt,arrSplitRecId);
				}
				intRecCnt++;
				blnIsRecord = NextRecord();
			}
			while(blnIsRecord) {
				GetDestType(bcAssRuleDtl,arrDestTypeId,arrDestSubTypeId,intRecCnt,arrSplitRecId);
				blnIsRecord = NextRecord();	
				intRecCnt++;
			}
		}

//-----------------------------------------------------------
//Populating the Association parameters with the number id's.
//-----------------------------------------------------------
	
		with(bcNumAssociationStartNum) {
		
			for(var intArrLen = 0;intArrLen < arrDestTypeId.length;intArrLen++) {
				if(intSeq == 1 && strPRuleId != """") {
					TheApplication().SetSharedGlobal(""g_flgQty"",""Y"");										
					NewRecord(1);
					SetFieldValue(""Rule Id"",strPRuleId);
					SetFieldValue(""Ass Id"",intAssocId);  
					SetFieldValue(""Sequence"",intSeq);
					TheApplication().SetSharedGlobal(""g_flgQty"",""Y"");										
					WriteRecord();
					intSeq++;
				}
				else {
					TheApplication().SetSharedGlobal(""g_flgQty"",""Y"");										
					NewRecord(1);
					SetFieldValue(""Ass Id"",intAssocId);
					SetFieldValue(""Type Id"",arrDestTypeId[intArrLen]);
					SetFieldValue(""Sub Type Id"",arrDestSubTypeId[intArrLen]);
					if(arrSplitRecId[intArrLen] != """")
						SetFieldValue(""Split Record Id"",arrSplitRecId[intArrLen]);
					SetFieldValue(""Sequence"",intSeq);
					TheApplication().SetSharedGlobal(""g_flgQty"",""Y"");										
					WriteRecord();
					intSeq++;
				}
				
			}
		
		}
//	}
//	TheApplication().SetSharedGlobal(""g_flgAssMstr"",""N"");

	bcAssRuleMstr 	= null;		
	bcAssRuleDtl 	= null;	
	boAssRule 		= null;
}
function UpdateBlock(&bcNumberMstr,msFromStatus)
{
	
	if(bcNumberMstr.GetFieldValue(""Status"") != msFromStatus) {
		var psInputs	= TheApplication().NewPropertySet();
		var psOutputs	= TheApplication().NewPropertySet();
	
		var bsBlock 	= TheApplication().GetService(""RMS RMS Block Calc"");
	
		psInputs.SetProperty(""From Status"",msFromStatus);
		psInputs.SetProperty(""To Status"",bcNumberMstr.GetFieldValue(""Status""));
		psInputs.SetProperty(""Object Id"",bcNumberMstr.GetFieldValue(""Block Id""));
		bsBlock.InvokeMethod(""UpdateNumberBlock"",psInputs,psOutputs);
		
		psInputs = null;
		psOutputs = null;
		bsBlock = null;
	}
	
					
}
function UpdateGenLevel(mbcNMNumMstr,msGenLvl,msNoOfMSISDN) {
	var msCnctGenLvl = """";
	with(mbcNMNumMstr) {
		if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""SIM"")) {
			if(GetFieldValue(""SIM Generation Support"")!="""")
				msCnctGenLvl = 	GetFieldValue(""SIM Generation Support"") + ""/""+msGenLvl;
			else
				msCnctGenLvl = msGenLvl;	
			SetFieldValue(""SIM Generation Support"",msCnctGenLvl);
		}
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Association CheckHLRID Method    		 	  		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Verify the Association Parameters	    		                      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 09/10/2005 	1.0   		MBT						   	Created      09/10/2005       *
**************************************************************************************/
function UpdateNumMstrCnct(mbcNMNumCnct,mbcNMNumAssocCnctCurr,mbcNMNumMstr)
{
	with(mbcNMNumCnct) {
		ActivateField(""Concat Id"");
		ClearToQuery();	
		SetSearchSpec(""Number Id"",mbcNMNumMstr.GetFieldValue(""Id""));	
		ExecuteQuery(ForwardOnly);
		var blnIsRecord = FirstRecord();
		if(!blnIsRecord) {	
			with(mbcNMNumCnct) {
				NewRecord(1);
				SetFieldValue(""Concat Id"",mbcNMNumAssocCnctCurr.GetFieldValue(""Id""));
				SetFieldValue(""Number Id"",mbcNMNumMstr.GetFieldValue(""Id""));
				WriteRecord();
			}
		}else {
			if(GetFieldValue(""Concat Id"")!=mbcNMNumAssocCnctCurr.GetFieldValue(""Id"")) {
				with(mbcNMNumCnct) {
					NewRecord(1);
					SetFieldValue(""Concat Id"",mbcNMNumAssocCnctCurr.GetFieldValue(""Id""));
					SetFieldValue(""Number Id"",mbcNMNumMstr.GetFieldValue(""Id""));
					WriteRecord();
				}
			}
		}
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Association Update Parameter quantity   		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      28/12/2003       *
**************************************************************************************/

function UpdateQuantity(Inputs,boNumAssocNew,bcNumAssocMstr,bcNumAssStartNum)
{
	var boAssRule;
	var bcAssRuleMstr;
	//var bcNumAssocMstr;
	var bcAssRuleDtl;
	
	var strRuleId;
	var strAssocMstrId;
	var strRulMstrId;
	var strRuleType;
	var strqty=Inputs.GetProperty(""Qty"");
	
	
	var arrAssWorkId = new Array();
	var arrQuantity = new Array();
	
	var intWrkIdCnt=0;		
	
	var flgGlblVarbl;
	var flgNumAssWorkRec;
	var intSeq = Inputs.GetProperty(""RecSeq"");

//-------------------------------------------------------
//Querying Association master to get Assoc Id and Rule Id
//-------------------------------------------------------	
	
	with(bcNumAssocMstr) {
		//ActivateField(""Rule Id""); KT 21-06-06 
		//ActivateField(""Id"");
		strRuleId = GetFieldValue(""Rule Id"");	
		strAssocMstrId = GetFieldValue(""Id"");		
	}

	boAssRule = TheApplication().GetBusObject(""RMS NM Association Rule"");
	bcAssRuleMstr = boAssRule.GetBusComp(""RMS NM Association Rule Master"");		
	bcAssRuleDtl = boAssRule.GetBusComp(""RMS NM Association Rule Detail"");		

//------------------------------------------
//Query Association Rule and get the Rule Id
//------------------------------------------

	with(bcAssRuleMstr) {
	
		ActivateField(""Id"");
		ClearToQuery();
		SetSearchSpec(""Id"",strRuleId);
		ExecuteQuery(1);
		if(FirstRecord()) {
			strRulMstrId = GetFieldValue(""Id"");
			strRuleType  = GetFieldValue(""Rule Type"");
		}
	}

//--------------------------------------------------------------------
//Query Association Parameters and store the records id's in and array.
//--------------------------------------------------------------------
	
	with(bcNumAssStartNum) {
		
		ActivateField(""Sequence"");
		ClearToQuery();
		SetSearchSpec(""Ass Id"",strAssocMstrId);
		SetSortSpec(""Sequence(ASCENDING)"");
		ExecuteQuery(1);
		flgNumAssWorkRec = FirstRecord();
	
		while (flgNumAssWorkRec) {
			arrAssWorkId[intWrkIdCnt] = GetFieldValue(""Id"");
			flgNumAssWorkRec = NextRecord();
			intWrkIdCnt++;
		
		}
	}

//------------------------------------------------------------
//Calculating the quantity and updating the parameters record.
//------------------------------------------------------------
	
	CalculateQuantity(arrAssWorkId,strRulMstrId,strqty,strRuleType,arrQuantity);

//------------------------------------
//Refreshing the Association Master BC
//------------------------------------
	
//	RefreshingBc(bcNumAssocMstr,strAssocMstrId);
	
	bcAssRuleMstr 	= null;		
	bcAssRuleDtl 	= null;
	boAssRule 		= null;
	

}
"/**************************************************************************************
* Name          : RMS NM Number Association ValidateQty						     	  *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver       By      Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 06/07/2005 	1.0   	  MBT	  Created      06/07/2005       *
* 06/07/2005	1.1		  MBT	  P.Gautaman	 06/07/2005		  *
20060706        1.2       Prasad  Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function UpdateSIM(msNoOfMSISDN,msAssocStartId)
{
	var mboNMNumAssoc 			= TheApplication().GetBusObject(""RMS NM Number Association Service"");  			//customized BO for the Business Service
	var mbcNMNumMstr 			= mboNMNumAssoc.GetBusComp(""RMS NM Number Enquiry For Update"");
	
//-----------------------------------------------------------------------
//Query for associated SIM and update it with the no of MSISDN associated.
//-----------------------------------------------------------------------
	with(mbcNMNumMstr) 
	{
		SetViewMode(AllView);
		ActivateField(""No. Of Assigned MSISDNs"");
		ClearToQuery();
		SetSearchSpec(""Id"",msAssocStartId);
		ExecuteQuery();
		if(FirstRecord()){
			SetFieldValue(""No. Of Assigned MSISDNs"", msNoOfMSISDN);
			WriteRecord();
		}
	}
//1.2 below
	mbcNMNumMstr  = null;
	mboNMNumAssoc = null;
//1.2 below
}
"/**************************************************************************************
* Name          : RMS NM Number Association UpdateSingleCnct Method    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003  	 1.0   	MBT		 Created      28/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function UpdateSingleCnct(msAssocId)
{
	var sRuleType = psAssocParam.GetProperty(""RuleType"");
	var marrNumSet = new Array();
	
	var mboNMNumAssoc 			= TheApplication().GetBusObject(""RMS NM Number Association Service"");  			//customized BO for the Business Service
	var mbcNMNumAssocMstr   	= mboNMNumAssoc.GetBusComp(""RMS NM Number Association Master"");					//BC based on Number Association Master
	var mbcNMNumAssocMstrCnct	= mboNMNumAssoc.GetBusComp(""RMS NM Number Association Master Concat"");			//BC based on MTM table between Association Master and Cnct Table, used for updating the flag
	
	var mbIsRecord;
	var mpsNumSet 				= TheApplication().NewPropertySet();
	var marrNumSet 				= new Array();
	var marrNumPropSet 			= new Array();
	var marrNumber 				= new Array();
	var marrConcatType 			= new Array();
	
	var msCnctNumber  = """";
	var psNum;
	
	with(mbcNMNumAssocMstr) {
		ActivateField(""Rule Type"");
		ActivateField(""Rule Id"");
		
		ClearToQuery();
		SetSearchSpec(""Id"",msAssocId);
		ExexuteQuery(ForwardOnly);
		
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) return false;
	}
	
	var msConcatType = GetSeqConcatType(msAssocId);
	marrConcatArray = msConcatType.split("" / "");
	
	
	psNum = TheApplication().NewPropertySet();
	marrNumPropSet[""SIM""] = psNum;
	psNum = TheApplication().NewPropertySet();
	marrNumPropSet[""IMSI""] = psNum;
	psNum = TheApplication().NewPropertySet();
	marrNumPropSet[""MSISDN""] = psNum;
	
	var mpsTemp;
	var miNumSetCnt = -1;
	var msPrevRootNumber = """";
	
	with(mbcNMNumAssocMstrCnct) {
		ActivateField(""Associated Numbers"");
		ActivateField(""Associated Type"");
		ClearToQuery();
		SetSearchSpec(""Association Id"", mbcNMNumAssocMstr(""Id""));
		SetSortSpec(""Created,Root Assoc Id (ASCENDING)"");
		ExecuteQuery(ForwardOnly);
		
		mbIsRecord = FirstRecord();
		
		while (msIsRecord) {
			msCnctNumber = GetFieldValue(""Associated Numbers"")		
			marrNumber = msCnctNumber.split("" / "");			
			
			if(msPrevRootNumber != marrNumber[0]) miNumSetCnt = getArrayLength(marrNumSet);
			
			for(var miNumCnt = 0; miNumCnt < getArrayLength(marrNumber);miNumCnt++) {
				mpsTemp = mpsNumPropSet[marrConcatType[miNumCnt]];	
					
				if (mpsTemp.PropertyExists(marrNumber[miCnt]))
					miNumSetCnt = mpsTemp.GetProperty(marrNumber[miCnt]);
				else  {
					marrNumSet[miNumSetCnt][getArrayLength(marrNumSet)] = marrNumber[miNumCnt];
					mpsTemp.SetProperty(marrNumber[miNumCnt],miNumSetCnt);
				}
			}
			
			mbIsRecord = NextRecord();
		}
	}
	
	mbcNMNumAssocMstr   	= null;
	mbcNMNumAssocMstrCnct	= null;
	mboNMNumAssoc 			= null;
	
	mpsNumSet 				= null;
	
	marrNumSet 				= null;
	marrNumSet 				= null;
	marrNumPropSet 			= null;
	marrNumber 				= null;
	marrConcatType 			= null;
//1.1 below
	psNum                   = null;
//1.1 above	
}
"/**************************************************************************************
* Name          : RMS NM Number Association ValidateQty						     	  *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/05/2005 	1.0   		MBT						   	Created      31/05/2005       *
* 31/05/2005	1.1			MBT							P.Gautaman	 31/05/2005		  *			
**************************************************************************************/
function UpdateSplitNumSet(psNumSet) {
	var psNumSetCopyRec;
	var psNumSetRec;
	var blnSplitIdMch = ""Y"";
	
	var arrSplittedIds = new Array();
	var psNumSetCopy = psNumSet.Copy();
	var psNewNumSet = TheApplication().NewPropertySet();
	
	for (var i=0;i<psNumSet.GetChildCount();i++) 
	{
		blnSplitIdMch = ""Y"";
		var psNumSetCopy = psNumSet.Copy();
		psNumSetRec = psNumSet.GetChild(i);
		var psNum = TheApplication().NewPropertySet();

		if(psNumSetRec.GetProperty(""SplitRecordId"")!="""") 
		{
			for (var intArrSplitRecId=0;intArrSplitRecId<getArrayLength(arrSplittedIds);intArrSplitRecId++) 
			{
				if(arrSplittedIds[intArrSplitRecId] == psNumSetRec.GetProperty(""SplitRecordId""))		
					blnSplitIdMch = ""N"";
//					break;
			}
			
			if(blnSplitIdMch == ""Y"") 
			{
			
				psNum.SetProperty(""SplitRecordId"",psNumSetRec.GetProperty(""SplitRecordId""));
				var intCnt = 0;

//				var temp6 = psNumSetCopyRec.GetProperty(psNumSetCopyRec.GetProperty(i));															
				
				for(var intCpyNumSetCnt=0;intCpyNumSetCnt<psNumSetCopy.GetChildCount();intCpyNumSetCnt++) 
				{
						psNumSetCopyRec = psNumSetCopy.GetChild(intCpyNumSetCnt);
						var temp = psNumSetRec.GetProperty(""SplitRecordId"");
						var temp1 = psNumSetCopyRec.GetProperty(""SplitRecordId"");
						var temp2 = psNumSetCopyRec.GetProperty(""IdentificationNum"");
						var temp3 = psNumSetRec.GetProperty(""IdentificationNum"");
					if(psNumSetCopyRec.GetProperty(""IdentificationNum"") != psNumSetRec.GetProperty(""IdentificationNum"")) 
					{
						if(psNumSetRec.GetProperty(""SplitRecordId"") == psNumSetCopyRec.GetProperty(""SplitRecordId"")) 
						{
							var temp2 = psNumSetRec.GetProperty(i);
							var temp3 = psNumSetCopyRec.GetProperty(i);
							var temp4 = psNumSetCopyRec.GetProperty(""NumQty"");

							for(var j=0;j<psNumSetCopyRec.GetProperty(""NumQty"");j++) 
							{
								psNum.SetProperty(intCnt++,psNumSetCopyRec.GetProperty(j));
								psNum.SetProperty(psNumSetCopyRec.GetProperty(j),psNumSetCopyRec.GetProperty(psNumSetCopyRec.GetProperty(j)));
								psNum.SetProperty(intCnt++,psNumSetRec.GetProperty(j));
/*								var temp6 = psNumSetRec.GetProperty(j);
								var temp5 = psNumSetRec.GetProperty(psNumSetRec.GetProperty(j));
								psNum.SetProperty(psNumSetRec.GetProperty(j),psNumSetRec.GetProperty(psNumSetRec.GetProperty(j)));*/
								
								intCnt++;
							}
						}
					}
					else 
					{
						psNum = psNumSetCopyRec.Copy();
					}
					
				}
				psNewNumSet.AddChild(psNum);
				arrSplittedIds[intArrSplitRecId++]=psNumSetRec.GetProperty(""SplitRecordId"");				
			}
		}
		else
			psNewNumSet.AddChild(psNumSet.GetChild(i));
//			psNum = psNumSet.GetChild(i);
		
			
//		psNewNumSet.AddChild(psNum);
	}
	return(psNewNumSet);
}
function UpsertNumAssocMstrCnct(mbcNMNumAssocMstrCnct,mbcNMNumAssocCnctCurr,msRuleType,msParentAssocMstrId, msAssocId, mbCreateNew)
{
	var mbIsRecord;
	
	with(mbcNMNumAssocMstrCnct) {
		if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) {	
			ActivateField(""Association Id"");
			ActivateField(""Concat Id"");
			ActivateField(""Flag"");
			
			ClearToQuery();
			SetSearchSpec(""Association Id"",msParentAssocMstrId);
			SetSearchSpec(""Concat Id"",mbcNMNumAssocCnctCurr.GetFieldValue(""Id""));
			ExecuteQuery(ForwardOnly);
			
			mbIsRecord = FirstRecord();
			while(mbIsRecord) {
				SetFieldValue(""Flag"",""Y"");
				WriteRecord();
				mbIsRecord = NextRecord();
			}
		}
					
		NewRecord(1);
		SetFieldValue(""Association Id"",msAssocId);
		SetFieldValue(""Concat Id"",mbcNMNumAssocCnctCurr.GetFieldValue(""Id""));
		if (mbCreateNew)
			SetFieldValue(""Flag"",""N"");
		WriteRecord();
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Association ValidateQty						      *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      31/12/2003       *
**************************************************************************************/
function ValidateQty(&psAssocParam,&psfnArgs) {
	
	var psAssocParamRec;
	var boNumberMstr = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumberMstr = boNumberMstr.GetBusComp(""RMS NM Number Enquiry"");
	var boNumAssocDtl = TheApplication().GetBusObject(""RMS NM Number Association Service"");
	var bcNumAssocDtl = boNumAssocDtl.GetBusComp(""RMS NM Number Association Detail"");
	var bcAssocCnct = boNumAssocDtl.GetBusComp(""RMS NM Number Association Master Concat"");
	
	var blnNumMstrRec;
	var psNumSet = TheApplication().NewPropertySet();
	var psNum;
	
	var intNumCount = 0;
	var intPrevNum = 0;
	var arrNumSet = new Array();
	var msHLRID	   = """";
	var strIsSequenced;// = psAssocParamRec.GetProperty(""SequenceFlag"");
	var strSearchSpec = """";
	
	if(!CheckHLRID(psAssocParam)) 
	{
		psfnArgs.SetProperty(""strErrCode"",""RMSASS017"");
		psfnArgs.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS017""));
		return false;	
	}
			
	for (var i=0;i<psAssocParam.GetChildCount();i++) 
	{
		psAssocParamRec = psAssocParam.GetChild(i);
		psNum = TheApplication().NewPropertySet();
		arrNumSet[i] = psNum;
		//intParamCntr = psAssocParamRec.GetProperty(""AssocParamSeqNum"");
		
		strIsSequenced = psAssocParamRec.GetProperty(""SequenceFlag"");
		intPrevNum = 0;
		var intPrevAssocSeq = 0;
		
		
		if(psAssocParamRec.GetProperty(""ParentRuleId"") != """") 
		{
			with (bcAssocCnct) {
				ActivateField(""Associated Type"");
				ActivateField(""Associated Numbers"");
				ActivateField(""Allocation Id"");
				ActivateField(""Reserve Id"");
				ActivateField(""Generated Number"");
				ActivateField(""HLR Id"");
				
				ClearToQuery();
				SetSearchSpec(""Association Id"", psAssocParamRec.GetProperty(""ParentAssocId""));
				SetSearchSpec(""Flag"",""N"");
				SetSearchSpec(""Generated Number"","" >='"" + psAssocParamRec.GetProperty(""AssocGenNum"") + ""'"");
				SetSearchSpec(""Assoc Status"",""='"" + psAssocParamRec.GetProperty(""NumStatus"") + ""'"");
				SetSearchSpec(""HLR Id"",psAssocParamRec.GetProperty(""HLRID""));
				SetSortSpec(""Generated Number(ASCENDING)"");
				ExecuteQuery(ForwardOnly);
				blnNumMstrRec = FirstRecord();
				if(blnNumMstrRec) psNum.SetType(GetFieldValue(""Associated Type""));
			}
			psNum.SetProperty(""IdentificationNum"",i);
			while(blnNumMstrRec) {  
				if(!CheckNumberOverlap(arrNumSet,psNum.GetType(),bcAssocCnct.GetFieldValue(""Associated Numbers""))) 
				{
					psfnArgs.SetProperty(""strErrCode"",""RMSASS003"");
					psfnArgs.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS003""));
					return false;
				}
				psNum.SetProperty(intNumCount,bcAssocCnct.GetFieldValue(""Associated Numbers""));
				psNum.SetProperty(bcAssocCnct.GetFieldValue(""Associated Numbers""),bcAssocCnct.GetFieldValue(""Id""));
				psNum.SetProperty(""Type"",bcAssocCnct.GetFieldValue(""Associated Type""));
					intNumCount++;
				
				if (psAssocParamRec.GetProperty(""Quantity"") == intNumCount) {
					psAssocParamRec.SetProperty(""EndingNumber"",bcAssocCnct.GetFieldValue(""Associated Numbers""));
					break;
				}
				blnNumMstrRec = bcAssocCnct.NextRecord();
			}

			if (psAssocParamRec.GetProperty(""Quantity"") > intNumCount) 
			{
					psfnArgs.SetProperty(""strErrCode"",""RMSASS004"");
					psfnArgs.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS004""));
					return false;
			}
			psNumSet.AddChild(psNum);
		}
		else {
			with(bcNumberMstr) {
				ActivateField(""Type Identifier"");
				ActivateField(""Number String"");
				ActivateField(""Number"");
				ActivateField(""Allocated To"");
				ActivateField(""Reserved To"");
				ActivateField(""Is Associated"");
				ActivateField(""Type"");	
				ActivateField(""Generation Level"");					
				ActivateField(""HLR Id"");
				
				ClearToQuery();
		/*		strSearchSpec = ""[Type Id] = '"" + psAssocParamRec.GetProperty(""TypeId"") + ""'"";
				strSearchSpec = strSearchSpec + "" AND [Subtype Id] = '"" + psAssocParamRec.GetProperty(""SubtypeId"") + ""'"";
				strSearchSpec = strSearchSpec + "" AND [Scheme Id] = '"" + psAssocParamRec.GetProperty(""SchemeId"") + ""'"";
				strSearchSpec = strSearchSpec + "" AND [Block Id] = '"" + psAssocParamRec.GetProperty(""BlockId"") + ""'"";
				strSearchSpec = strSearchSpec + "" AND [Is Associated] = 'N'"";
				strSearchSpec = strSearchSpec + "" AND [HLR Id] = '"" + psAssocParamRec.GetProperty(""HLRID"") + ""'"";
				if(psAssocParamRec.GetProperty(""AllocatedTo"") != """")
					strSearchSpec = strSearchSpec + "" AND [Allocated To] = '"" + psAssocParamRec.GetProperty(""AllocatedTo"") + ""'"";
				if(psAssocParamRec.GetProperty(""ReservedTo"") != """")
					strSearchSpec = strSearchSpec + "" AND [Reserved To] = '"" + psAssocParamRec.GetProperty(""ReservedTo"") + ""'"";
				
				strSearchSpec = strSearchSpec + "" AND [Number] >= '"" + psAssocParamRec.GetProperty(""StartNum"") + ""'"";		
				strSearchSpec = strSearchSpec + "" AND [Status] = '"" + psAssocParamRec.GetProperty(""NumStatus"") + ""'"";		
				
		*/		
				SetSearchSpec(""Type Id"", psAssocParamRec.GetProperty(""TypeId""));
				SetSearchSpec(""Subtype Id"",psAssocParamRec.GetProperty(""SubtypeId""));
				SetSearchSpec(""Scheme Id"",psAssocParamRec.GetProperty(""SchemeId""));
				SetSearchSpec(""Block Id"",psAssocParamRec.GetProperty(""BlockId""));
				SetSearchSpec(""Is Associated"",""N"");
				SetSearchSpec(""HLR Id"",""='"" + psAssocParamRec.GetProperty(""HLRID"") + ""'"");
				
				if(psAssocParamRec.GetProperty(""AllocatedTo"") != """")
					SetSearchSpec(""Allocated To"",psAssocParamRec.GetProperty(""AllocatedTo""));
				if(psAssocParamRec.GetProperty(""ReservedTo"") != """")
					SetSearchSpec(""Reserved To"",psAssocParamRec.GetProperty(""ReservedTo""));
			
				SetSearchSpec(""Number"","" >= '"" + psAssocParamRec.GetProperty(""StartNum"") + ""'"");
				SetSearchSpec(""Status"",""='"" + psAssocParamRec.GetProperty(""NumStatus"") + ""'"");
				//below 1.1
				SetSearchSpec(""Special Category Type"",""='"" + psAssocParamRec.GetProperty(""Special Category Type"") + ""'"");
				//above 1.1 
				//SetSearchExpr(strSearchSpec);
				//SetSortSpec(""Number(ASCENDING)"");
				ExecuteQuery(ForwardOnly);
				blnNumMstrRec = FirstRecord();
				if(blnNumMstrRec){
			  		intPrevNum	= GetFieldValue(""Number"");		
				 	psNum.SetType(GetFieldValue(""Type Identifier""));
				}
			}
			
			intNumCount = 0;			
			psNum.SetProperty(""IdentificationNum"",i);		
			while(blnNumMstrRec) {  
				if (!CheckNumberOverlap(arrNumSet,psNum.GetType(),bcNumberMstr.GetFieldValue(""Number String""))) 
				{
					psfnArgs.SetProperty(""strErrCode"",""RMSASS005"");
					psfnArgs.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS005"",bcNumberMstr.GetFieldValue(""Type"")));
					return false;
				}
				psNum.SetProperty(intNumCount,bcNumberMstr.GetFieldValue(""Number String""));
				psNum.SetProperty(""Type"",bcNumberMstr.GetFieldValue(""Type""));
				psNum.SetProperty(""GenLvl"",bcNumberMstr.GetFieldValue(""Generation Level""));
				psNum.SetProperty(bcNumberMstr.GetFieldValue(""Number String""),bcNumberMstr.GetFieldValue(""Id""));
//				psNum.SetProperty(bcNumberMstr.GetFieldValue(""Type Id""),bcNumberMstr.GetFieldValue(""Number String""));
				psNum.SetProperty(""SplitRecordId"",psAssocParamRec.GetProperty(""SplitRecordId""));

				
//------------------------------------------------------------------------
//Check whether the numbers are in sequence (if sequence flag is checked).
//------------------------------------------------------------------------

				if ((strIsSequenced == ""Y"") && (bcNumberMstr.GetFieldValue(""Number"") - intPrevNum) > 1) 
				{
					psfnArgs.SetProperty(""strErrCode"",""RMSASS006"");
					psfnArgs.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS006"",bcNumberMstr.GetFieldValue(""Type"")));
					return false;
				}
//------------------------------------------------------------------------------
//Previous Number has to be stored to check whether the Numbers are in sequence.
//------------------------------------------------------------------------------
				if (strIsSequenced == ""Y"") intPrevNum = bcNumberMstr.GetFieldValue(""Number"");

//------------------------------------------------------------------------------------------
//Increment the counter to avoid the calculation required to find out the property set count.
//------------------------------------------------------------------------------------------

				intNumCount++;
//------------------------------------------------------------------------------------------
//If the required quantity is met, then set the ending number and continue with the FOR loop.
//------------------------------------------------------------------------------------------

				if (psAssocParamRec.GetProperty(""Quantity"") == intNumCount) {
					psAssocParamRec.SetProperty(""EndingNumber"",bcNumberMstr.GetFieldValue(""Number String""));
					break;
				}
				blnNumMstrRec = bcNumberMstr.NextRecord();
				if(blnNumMstrRec) psNum.SetType(bcNumberMstr.GetFieldValue(""Type Identifier""));
			}
			psNum.SetProperty(""NumQty"",intNumCount);
			psNumSet.AddChild(psNum);
		}
		if (psAssocParamRec.GetProperty(""Quantity"") > intNumCount) 
		{
			psfnArgs.SetProperty(""strErrCode"",""RMSASS007"");
			psfnArgs.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS007"",psAssocParamRec.GetProperty(""SchemeName"")));
			return false;
		}
	} 
	bcNumberMstr 	= null;
	boNumberMstr 	= null;
	bcNumAssocDtl 	= null;
	bcAssocCnct 	= null;
	boNumAssocDtl 	= null;
	return psNumSet;
}
"/*
????????       | 1.0  | TM     | Creation
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
*/
function AssociateNumbers(psNumSet,psAssocParam,marrSource,psOp)
{
try{
	var mpsAssocParamRec = GetPropertySet(psAssocParam,""ParamRec"");
	var mpsPSIndx = TheApplication().NewPropertySet();
	var mpsNumPropSet;
	var mpsTempNumSet;	
	var strErrVal = """";
	psOp.SetProperty(""strErrVal"","""");	
	psOp.SetProperty(""strErrCode"","""");	
	if(mpsAssocParamRec == """") return 0;
	var mboNMNumAssoc 			= TheApplication().GetBusObject(""RMS NM Number Association Service"");  			//customized BO for the Business Service
	var mbcNMNumAssocMstr   	= mboNMNumAssoc.GetBusComp(""RMS NM Number Association Master"");					//BC based on Number Association Master
	var mbcNMNumAssocDtl    	= mboNMNumAssoc.GetBusComp(""RMS NM Number Association Detail"");					//BC based on Association Detail having no relationship specified in the BO.
	var mbcNMNumAssocMstrCnct	= mboNMNumAssoc.GetBusComp(""RMS NM Number Association Master Concat"");			//BC based on MTM table between Association Master and Cnct Table, used for updating the flag
	var mbcNMNumAssocCnct   	= mboNMNumAssoc.GetBusComp(""RMS NM Association Number Type Display"");			//BC based on Cnct table which is having 1:M link with Association Master
	var mbcNMNumAssocCnctNL 	= mboNMNumAssoc.GetBusComp(""RMS NM Association Number Type Display No Links"");	//BC based on Cnct table which is having no links in BO. used for querying Cnct records
	var mbcNMNumMstr 			= mboNMNumAssoc.GetBusComp(""RMS NM Number Enquiry For Update"");
	var mbcNMNumCnct			= mboNMNumAssoc.GetBusComp(""RMS NM Number Master Concat"");
	var mbcSIMNumInfo           = mboNMNumAssoc.GetBusComp(""RMS NM SIM ORDER LINE ITEM"");
	var mboNMAssocRul 			= TheApplication().GetBusObject(""RMS NM Association Rule"");
	var bcNMAssocRulDtl  		= mboNMAssocRul.GetBusComp(""RMS NM Association Rule Detail"");
	var mbcNMNumAssocCnctCurr;
	var marrDest 				= new Array();
	var marrNumPropSet 			= new Array();
	var marrNumbers 			= new Array();
	var marrParentAssocNum 		= new Array();	
	var arrTempArray 			= new Array();
	var mbIsRecord;												
	var mbSourceNum;
	var mbIsCnctRec;
	var mbCreateNew 			= true;
	var mbIsRuleRec;    										
	var mbIsIMSI				= ""N"";
	var msCrdRatio				= """";
	var msTypeCnct				= """";		
	var msNoOfSIM				= 0;
	var msNoOfIMSI				= 0;
	var msNoOfMSISDN			= 0;			
	var msConcatType;
	var msGenLvl="""";
	var psfnArgs = TheApplication().NewPropertySet();
	GetConcatType(psAssocParam.GetProperty(""RuleId""),psfnArgs);
	msTypeCnct = psfnArgs.GetProperty(""msTypeCnct"");
	msCrdRatio = psfnArgs.GetProperty(""msCrdRatio"");
	msNoOfSIM = ToNumber(psfnArgs.GetProperty(""msNoOfSIM""));
	msNoOfIMSI = ToNumber(psfnArgs.GetProperty(""msNoOfIMSI""));
	msNoOfMSISDN = ToNumber(psfnArgs.GetProperty(""msNoOfMSISDN""));
	msGenLvl = psfnArgs.GetProperty(""msGenLvl"");
	msCrdRatio					= ToString(msNoOfSIM)+"":""+ToString(msNoOfIMSI);
	var msReserveId 			= psAssocParam.GetProperty(""ReservedToId"");			
	var msAllocId				= psAssocParam.GetProperty(""AllocId"");
	var msRuleType 				= psAssocParam.GetProperty(""RuleType"");
	var msStatus 				= TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""NOT AVAILABLE""); 
	var msAssocId 				= psAssocParam.GetProperty(""AssocId"");
	var msParentAssocMstrId		= """";
	var msCnctNum 				= """";
	var msParentAssocId			= """";
	var msAssocStartId 			= """";
	var msAssocStartsts			= """";
	var msFromStatus			= """";
	var msSIMIdentifier			= TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""SIM"");
	var msSIMId					= """";
	var msAllocTo				= """";
	var msAllocateId			= """";
	var miNumSetCnt 			= psNumSet.GetChildCount();
	var miParamCnt 				= 0;		
	var miNoOfCnctRec 			= SetCnctRecCnt(marrSource);
	var miAssocSeq 				= 0;										
	var miDestCnt 				= 0;
	var miCnctCnt				= 0;
	var miQty 					= 0;
	var miAvailableAssocSeq		= 0;
	var miParecntAssocCnt		= 0;
	var miArrayLength 			= 0;
	var miTempCnt,  miParentAssocCnt = 0;
	var blnIsRecord;
	with (mbcNMNumAssocMstr) {
		ActivateField(""Status"");
		ClearToQuery();
		SetSearchSpec(""Id"",psAssocParam.GetProperty(""AssocId""));
		ExecuteQuery();
		mbIsRecord = FirstRecord();
		if(mbIsRecord != true) return 0;
	}
	if((msTypeCnct.indexOf(""SIM"") >= 0) && (msTypeCnct.indexOf(""IMSI"") >= 0)) 
		mbIsIMSI = ""Y"";
// Refer to comment1 in AssociateNumbers_comment section
	while (miParamCnt < miNumSetCnt) {
		if((miParamCnt ==0) && (msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD""))) {
			msParentAssocMstrId 	= mpsAssocParamRec.GetChild(miParamCnt).GetProperty(""ParentAssocId"");
		}
		
		marrNumPropSet[miParamCnt] 	= psNumSet.GetChild(miParamCnt);
		miParamCnt++;
	}
	marrNumbers = RMSNA_GetConcatNumberArray_Split(psAssocParam,miNumSetCnt,miNoOfCnctRec,marrDest,marrNumPropSet,marrSource,mpsPSIndx);
	if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""PARENT""))
		mbSourceNum = true;
	else
		mbSourceNum = false;
	//If the Rule is of Type 'Child' then find out the next available Assoc Seq
	if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) {			
		with(mbcNMNumAssocDtl) {
			ActivateField(""Association Seq Num"");
			ClearToQuery();
			SetSearchSpec(""Association Id"", msParentAssocMstrId);
			SetSortSpec(""Association Seq Num (DESCENDING)"");
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) return 0;
			miAvailableAssocSeq = ToInteger(GetFieldValue(""Association Seq Num"")) + 1;		
		}
	}
	for (miQty = 0;miQty < psAssocParam.GetProperty(""RootQty"");miQty++) {
		mbCreateNew = true;
		msAssocStartId = """";
		mpsTempNumSet = TheApplication().NewPropertySet();
		for (miCnctCnt = 0;miCnctCnt < miNoOfCnctRec;miCnctCnt++) {
			
			//If the Rule Type is 'Child' and mbCreateNew is true then set mbCreateNew to false
			//else set it true			
			if((miCnctCnt == 0) && (msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD""))) 
				mbCreateNew = false;
			else
				mbCreateNew = true;
			//this is for creating a cnct bc without any links to assoc mstr
			if(!mbCreateNew)
				mbcNMNumAssocCnctCurr = mbcNMNumAssocCnctNL;
			else
				mbcNMNumAssocCnctCurr = mbcNMNumAssocCnct;
			with (mbcNMNumAssocCnctCurr) {
				if(mbCreateNew) {
					NewRecord(1);	
					
					if(msAssocStartId == """") {
						mpsNumPropSet 	= marrNumPropSet[0];
						msAssocStartId 	=  mpsNumPropSet.GetProperty(marrNumbers[miQty][miCnctCnt][0]);
						if(mpsNumPropSet.GetType() == msSIMIdentifier) {
							msSIMId = msAssocStartId;
						}
					}
				}
				else {
					ActivateField(""Associated Number"");
					ActivateField(""Associated Type"");
					ActivateField(""Reserve Id"");
					ActivateField(""Status"");
					ActivateField(""Assoc Start Id"");
					ActivateField(""Allocation Id"");
					ClearToQuery();
					SetSearchSpec(""Associated Number"",marrNumbers[miQty][miCnctCnt][0]);
					ExecuteQuery(ForwardOnly);
					mbIsCnctRec 	= FirstRecord();
					if(!mbIsCnctRec) return 0;
					msAssocStartId 	= GetFieldValue(""Assoc Start Id"");
				}
				msCnctNum = """";
				for (miArrayLength = 0;miArrayLength < getArrayLength(marrNumbers[miQty][miCnctCnt]); miArrayLength++) {
					if(msCnctNum == """") {
						msCnctNum = marrNumbers[miQty][miCnctCnt][miArrayLength];
						msConcatType = psNumSet.GetChild(mpsPSIndx.GetProperty(ToString(miQty)+ToString(miCnctCnt)+ToString(miArrayLength))).GetProperty(""Type"");
					}
					else{
						if(marrNumbers[miQty][miCnctCnt][miArrayLength] == ""X"") 
							continue;
						msCnctNum = msCnctNum + "" / "" + marrNumbers[miQty][miCnctCnt][miArrayLength];
						msConcatType = msConcatType + "" / ""+ psNumSet.GetChild(mpsPSIndx.GetProperty(ToString(miQty)+ToString(miCnctCnt)+ToString(miArrayLength))).GetProperty(""Type"");
					}
				}
				SetFieldValue(""Associated Number"",msCnctNum);
				SetFieldValue(""Associated Type"", msConcatType);
				SetFieldValue(""Assoc Start Id"", msAssocStartId);
				SetFieldValue(""Allocation Id"",msAllocId);
				SetFieldValue(""Reserve Id"",msReserveId);
				SetFieldValue(""Status"",msStatus);
				WriteRecord();
			}
			miAssocSeq++;
			mbSourceNum = true;
			for(miParamCnt=0; miParamCnt < getArrayLength(marrNumbers[miQty][miCnctCnt])-1;miParamCnt = miParamCnt) {
				if(marrNumbers[miQty][miCnctCnt][miParamCnt] == ""X"")
					continue;
				with(mbcNMNumAssocDtl) {
					if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) {
						if(mbCreateNew) {
							mbSourceNum = true;
							for(var i = 0; i < getArrayLength(marrParentAssocNum); i = i) {
								NewRecord(1);
								miAssocSeq = miAvailableAssocSeq++;
								SetFieldValue(""Association Seq Num"",miAssocSeq);
								if(mbSourceNum) 
									SetFieldValue(""Source Num Id"",marrParentAssocNum[i++]);
								else
									SetFieldValue(""Parent Ass Id"",msParentAssocId);
								SetFieldValue(""Destination Num Id"",marrParentAssocNum[i++]);
								SetFieldValue(""Association Id"",msParentAssocMstrId);
								SetFieldValue(""Number Association Concat Id"",mbcNMNumAssocCnctCurr.GetFieldValue(""Id""));
								WriteRecord();
								msParentAssocId = GetFieldValue(""Id"");
								mbSourceNum = false;		
							}
						}
						else {
							ActivateField(""Association Seq Num"");
							ActivateField(""Association Id"");
							ActivateField(""Source Num Id"");
							ActivateField(""Destination Num Id"");
							ActivateField(""Parent Ass Id"");
							ActivateField(""Association Seq Num"");
							ActivateField(""Number Association Concat Id"");
							ClearToQuery();
							SetSearchSpec(""Number Association Concat Id"", mbcNMNumAssocCnctCurr.GetFieldValue(""Id""));
							SetSearchSpec(""Association Id"",msParentAssocMstrId);
							ExecuteQuery();
							mbIsCnctRec = FirstRecord();		
							if(!mbIsCnctRec) return 0;
							miAssocSeq = GetFieldValue(""Association Seq Num"");
							miTempCnt = 0;
							miParentAssocCnt =0;
							marrParentAssocNum = new Array();
							
							while (mbIsCnctRec) {
								arrTempArray[miTempCnt][""Source Num Id""] = GetFieldValue(""Source Num Id"");
								arrTempArray[miTempCnt][""Destination Num Id""] = GetFieldValue(""Destination Num Id"");
								arrTempArray[miTempCnt][""Id""] = GetFieldValue(""Id"");
								arrTempArray[miTempCnt][""Parent Ass Id""] = GetFieldValue(""Parent Ass Id"");
								mbIsCnctRec = NextRecord();
							}
							
							miTempCnt=0;
								
							for(miTempCnt=0;miTempCnt< getArrayLength(arrTempArray);miTempCnt++) {
								if(arrTempArray[miTempCnt][""Source Num Id""] != """") {
									mbSourceNum = false;
									msParentAssocId = arrTempArray[miTempCnt][""Id""];
									marrParentAssocNum[miParentAssocCnt++] = arrTempArray[miTempCnt][""Source Num Id""];
									marrParentAssocNum[miParentAssocCnt++] = arrTempArray[miTempCnt][""Destination Num Id""];
									break;
								}
							}
							for(miTempCnt=0;miTempCnt < getArrayLength(arrTempArray);miTempCnt++) {
								if(arrTempArray[miTempCnt][""Parent Ass id""] == msParentAssocId) {
									msParentAssocId = arrTempArray[miTempCnt][""Id""];
									marrParentAssocNum[miParentAssocCnt++] = arrTempArray[miTempCnt][""Destination Num Id""];
									miTempCnt = 0;
								}
							}	
						}
					}
						NewRecord(1);
						SetFieldValue(""Association Seq Num"",miAssocSeq);
						mpsNumPropSet = """";
						if(mbSourceNum) {
							mpsNumPropSet = marrNumPropSet[mpsPSIndx.GetProperty(ToString(miQty)+ToString(miCnctCnt)+ToString(miParamCnt))];
							SetFieldValue(""Source Num Id"",mpsNumPropSet.GetProperty(marrNumbers[miQty][miCnctCnt][miParamCnt++]));
						}
						else
							SetFieldValue(""Parent Ass Id"",msParentAssocId);
						if((msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) && (miParamCnt == 0)) miParamCnt++;
						mpsNumPropSet = marrNumPropSet[mpsPSIndx.GetProperty(ToString(miQty)+ToString(miCnctCnt)+ToString(miParamCnt))];
						SetFieldValue(""Association Id"",msAssocId);
						SetFieldValue(""Number Association Concat Id"",mbcNMNumAssocCnctCurr.GetFieldValue(""Id""));
						var temp = mpsNumPropSet.GetProperty(marrNumbers[miQty][miCnctCnt][miParamCnt]);
						SetFieldValue(""Destination Num Id"",mpsNumPropSet.GetProperty(marrNumbers[miQty][miCnctCnt][miParamCnt++]));
						WriteRecord();
						msParentAssocId = GetFieldValue(""Id"");
						mbSourceNum = false;
					}
					}
					UpsertNumAssocMstrCnct(mbcNMNumAssocMstrCnct,mbcNMNumAssocCnctCurr,msRuleType,msParentAssocMstrId, msAssocId, mbCreateNew);
			
			psfnArgs.Reset();
			psfnArgs = GetmsAssocStartsts(mbcNMNumMstr,msAssocStartId);
			msAssocStartsts = psfnArgs.GetProperty(""msAssocStartsts"");
			msAllocTo = psfnArgs.GetProperty(""msAllocTo"");
			msAllocateId = psfnArgs.GetProperty(""msAllocateId"");
			for(var miNumCnt=0; miNumCnt < getArrayLength(marrNumbers[miQty][miCnctCnt]); miNumCnt++) {
				mpsNumPropSet = marrNumPropSet[mpsPSIndx.GetProperty(ToString(miQty)+ToString(miCnctCnt)+ToString(miNumCnt))];
				if(marrNumbers[miQty][miCnctCnt][miNumCnt] != ""X"") {			
					if(!(mpsTempNumSet.PropertyExists(marrNumbers[miQty][miCnctCnt][miNumCnt]))) {
						mpsTempNumSet.SetProperty(marrNumbers[miQty][miCnctCnt][miNumCnt],"""")
						with(mbcNMNumMstr) {
							ActivateField(""Status"");
							ActivateField(""Is Associated"");
							ActivateField(""Assoc Start Id"");
							ActivateField(""IMSI Assoc"");
							ActivateField(""Status Bfr Assoc"");
							ActivateField(""Block Id"");
							ActivateField(""Sales Code"");
							ActivateField(""Allocated To"");
							ActivateField(""Allocation Id"");
							ActivateField(""Card Ratio"");						
							ActivateField(""Type Identifier"");	
							ActivateField(""SIM Generation Support"");
							ActivateField(""No. Of Assigned MSISDNs"");
							ClearToQuery();
							SetSearchSpec(""Id"",mpsNumPropSet.GetProperty(marrNumbers[miQty][miCnctCnt][miNumCnt]));
							ExecuteQuery(ForwardOnly);
							mbIsRecord = FirstRecord();
							if(mbIsRecord) {
								msFromStatus = GetFieldValue(""Status"");	
								SetFieldValue(""Assoc Start Id"", msAssocStartId);
								msGenLvl = SortGen(msGenLvl);
								SetFieldValue(""SIM Generation Support"",msGenLvl);
								if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""MSISDN""))
								UpdateSIM(msNoOfMSISDN,msAssocStartId);								
								SetFieldValue(""Is Associated"",""Y"");
								SetFieldValue(""IMSI Assoc"",mbIsIMSI);
								SetFieldValue(""Status"",msAssocStartsts);
								SetFieldValue(""Status Bfr Assoc"",GetFieldValue(""Status""));
								SetFieldValue(""Card Ratio"",msCrdRatio);
								if(GetFieldValue(""Allocated To"") == """") {
									SetFieldValue(""Allocated To"",msAllocTo);
									SetFieldValue(""Sales Code"",msAllocTo);
									SetFieldValue(""Allocation Id"",msAllocateId);
								}
								SetFieldValue(""No. Of Assigned MSISDNs"", msNoOfMSISDN);
								WriteRecord();
								//below 1.2
								// KT 20061003 commented 
								//UpdateBlock(mbcNMNumMstr,msFromStatus);
								//above 1.2
							}
						}
					}
	
					if(mbIsRecord) {
						UpdateNumMstrCnct(mbcNMNumCnct,mbcNMNumAssocCnctCurr,mbcNMNumMstr);
					}
					
					with(mbcSIMNumInfo){
						ActivateField(""Assoc Start Id"");
						ActivateField(""SIM Id"");
						ClearToQuery();
						SetSearchSpec(""Assoc Start Id"",msAssocStartId);
						ExecuteQuery();
					
						if(!FirstRecord()){
							NewRecord(1);
							SetFieldValue(""Assoc Start Id"",msAssocStartId);
							SetFieldValue(""SIM Id"",msAssocStartId);
							WriteRecord();
						}
					}
				}
			}
		}
	}
	strErrVal = UpdateAssocMstr(msRuleType,mbcNMNumAssocMstrCnct,mbcNMNumAssocMstr,msParentAssocMstrId,msAssocId);
 	if(strErrVal == """")
	{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASS001"");
		psOp.SetProperty(""strErrVal"",strErrVal);	
		psOp.SetProperty(""strErrCode"",""RMSASS001"");	
	}	
}finally{	
//1.1 below
	mpsPSIndx       = null;
	mpsTempNumSet   = null;
	psfnArgs        = null;
	bcNMAssocRulDtl = null;
	mboNMAssocRul   = null;
	mbcSIMNumInfo   = null;
//1.1 above
	mbcNMNumAssocMstr 		= null;
	mbcNMNumAssocDtl		= null;
	mbcNMNumAssocMstrCnct	= null;
	mbcNMNumAssocCnct		= null;
	mbcNMNumAssocCnctNL		= null;
	mbcNMNumMstr			= null;
	mbcNMNumCnct			= null;
	mboNMNumAssoc  			= null;
}
return(strErrVal);
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
                                 Objects must not be destroyed, these are passed to 
                                 func AssociateNumbers.
---------------+------+--------+----------------------------------------------
*/
function AssociateNumbers_ObjectDeclare(mboNMNumAssoc,mbcNMNumAssocMstr,mbcNMNumAssocDtl,mbcNMNumAssocMstrCnct,mbcNMNumAssocCnct,mbcNMNumAssocCnctNL,mbcNMNumMstr,mbcNMNumCnct,mbcSIMNumInfo, mboNMAssocRul, bcNMAssocRulDtl)
{
	mboNMNumAssoc 			= TheApplication().GetBusObject(""RMS NM Number Association Service"");  			//customized BO for the Business Service
	mbcNMNumAssocMstr   	= mboNMNumAssoc.GetBusComp(""RMS NM Number Association Master"");					//BC based on Number Association Master
	mbcNMNumAssocDtl    	= mboNMNumAssoc.GetBusComp(""RMS NM Number Association Detail"");					//BC based on Association Detail having no relationship specified in the BO.
	mbcNMNumAssocMstrCnct	= mboNMNumAssoc.GetBusComp(""RMS NM Number Association Master Concat"");			//BC based on MTM table between Association Master and Cnct Table, used for updating the flag
	mbcNMNumAssocCnct   	= mboNMNumAssoc.GetBusComp(""RMS NM Association Number Type Display"");			//BC based on Cnct table which is having 1:M link with Association Master
	mbcNMNumAssocCnctNL 	= mboNMNumAssoc.GetBusComp(""RMS NM Association Number Type Display No Links"");	//BC based on Cnct table which is having no links in BO. used for querying Cnct records
	mbcNMNumMstr 			= mboNMNumAssoc.GetBusComp(""RMS NM Number Enquiry For Update"");
	mbcNMNumCnct			= mboNMNumAssoc.GetBusComp(""RMS NM Number Master Concat"");
	mbcSIMNumInfo           = mboNMNumAssoc.GetBusComp(""RMS NM SIM ORDER LINE ITEM"");

	mboNMAssocRul 			= TheApplication().GetBusObject(""RMS NM Association Rule"");
	bcNMAssocRulDtl  		= mboNMAssocRul.GetBusComp(""RMS NM Association Rule Detail"");
}
function AssociateNumbers_comments(&psNumSet,&psAssocParam){

//------------------------------------------------------------------------------------------------
//	Comment 1--
//------------------------------------------------------------------------------------------------
// Query Assoc Rule Detail and obtain the no of destination for each number type specified in the 
// Assoc Rule. This is used for determining the number of Cnct records to be inserted.
// If the rule is like 
//	Source		Dest	no of dest
//--------------------------------
//	Type1     	Type2   2
// there will be two records in cnct table 
// Type1Number1-Type2Number1 and Type1Number1-Type2Number2
//------------------------------------------------------------------------------------------------


//Create the Cnct number from marrNumbers Array which contains numbers in sequence
/*	msCnctNum = """";
	for (miArrayLength = 0;miArrayLength < getArrayLength(marrNumbers[miQty][miCnctCnt]); miArrayLength++) {
		if(msCnctNum == """") msCnctNum = marrNumbers[miQty][miCnctCnt][miArrayLength];
		else
			msCnctNum = msCnctNum + "" / "" + marrNumbers[miQty][miCnctCnt][miArrayLength];
	}*/
	
//mtm bc update for association master


/*	with (bcNMAssocRulDtl) {
		ActivateField(""No of Destinations"");
		ActivateField(""Split Record Id"");		
		ClearToQuery();
		SetSearchSpec(""Rule Id"",psAssocParam.GetProperty(""RuleId""));
		ExecuteQuery(ForwardOnly);
		mbIsRuleRec = FirstRecord();
		if(!mbIsRuleRec) return 0;

		marrDest[miDestCnt++] 	= 1;
		while(mbIsRuleRec) {
			miNoOfCnctRec = miNoOfCnctRec * ToInteger(GetFieldValue(""No of Destinations""))
			marrDest[miDestCnt++] = miNoOfCnctRec;
			mbIsRuleRec = NextRecord();
		}

	}*/

	
}
"/**************************************************************************************
* Name          : RMS NM Number Association CreateAssocParam Method    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/05/2005 	 1.0   	MBT		 Created      30/05/2005       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function BuildSourceArray(marrSource,bcNumAssociationMstr,psAssocParam) {

	var mboNMAssocRul			= TheApplication().GetBusObject(""RMS NM Association Rule"");
	var bcNMAssocRulDtl  		= mboNMAssocRul.GetBusComp(""RMS NM Association Rule Detail"");
	
	var boNumAssocDtl = TheApplication().GetBusObject(""RMS NM Number Association Service"");
	var bcAssocCnct 	= boNumAssocDtl.GetBusComp(""RMS NM Number Association Master Concat"");
	
	var marrSrcNumType = new Array();
	var mstrSrcNumType;
	var marrNumDest = new Array();
	
	var msNumType = ""NumType"";
	var msPSNumInd = ""PSNumInd"";
	var msDestNum  = ""DestNum"";
	
	var psAssocParamRec;
	var psfnArgs = TheApplication().NewPropertySet();
	
	try{	
	with (bcNMAssocRulDtl) {
		ActivateField(""No of Destinations"");
		ActivateField(""Split Record Id"");		
		ActivateField(""Sequence"");
		ActivateField(""Source Number Type"");
		ActivateField(""Source Number Type Id"");
		ActivateField(""Source Number Subtype"");
		ActivateField(""Destination Number Type"");
		ActivateField(""Destination Number Type Id"");
		ActivateField(""Destination Number Subtype"");
		ActivateField(""Destination Number Type Identifier"");
		ActivateField(""Parent Rule"");
		ActivateField(""Rule Id"");
		ActivateField(""No of Destinations"");			
		ActivateField(""Split"");							
		ActivateField(""Split Record Id"");
		var temp = bcNumAssociationMstr.GetFieldValue(""Rule Id"");
		ClearToQuery();
		SetSearchSpec(""Rule Id"",bcNumAssociationMstr.GetFieldValue(""Rule Id""));
		ExecuteQuery(ForwardOnly);
		var mbIsRuleRec = FirstRecord();

		if(!mbIsRuleRec) return 0;
		var intDtlRecCnt = 0;
		
		//initializing the no of dest for first element (source number) to 1
		if(mbIsRuleRec) {
			psAssocParamRec = psAssocParam.GetChild(0);
			if(psAssocParamRec.GetProperty(""ParentRuleId"") != """") {
				with (bcAssocCnct) {
					ActivateField(""Associated Type"");
					ActivateField(""Associated Numbers"");
					ActivateField(""Allocation Id"");
					ActivateField(""Reserve Id"");
					ActivateField(""Generated Number"");
					ActivateField(""HLR Id"");
					
					ClearToQuery();
					SetSearchSpec(""Association Id"", psAssocParamRec.GetProperty(""ParentAssocId""));
					SetSearchSpec(""Flag"",""N"");
					SetSearchSpec(""Generated Number"","" >='"" + psAssocParamRec.GetProperty(""AssocGenNum"") + ""'"");
					SetSearchSpec(""Assoc Status"",""='"" + psAssocParamRec.GetProperty(""NumStatus"") + ""'"");
	//				SetSearchSpec(""HLR Id"",psAssocParamRec.GetProperty(""HLRID""));
					SetSortSpec(""Generated Number(ASCENDING)"");
					ExecuteQuery(ForwardOnly);
					var blnNumMstrRec = FirstRecord();
					if(blnNumMstrRec) //psNum.SetType(GetFieldValue(""Associated Type""));
						marrSource[0][msNumType][0] = GetFieldValue(""Associated Type"");
				}
			}else {
				
	 			SetArray(marrSource,0,msNumType,0,""?"",GetFieldValue(""Source Number Type""));
	 			
	 		}
				SetArray(marrSource,0,msPSNumInd,0,""?"",0);
				SetArray(marrSource,0,msDestNum,0,""?"",1);
		}
		var temp = marrSource[0][msNumType][0];
		var intPsNNumCnt = 0;
		var intBranchCnt = 0;
		var intDestCnt = 0;
		var intTtlNoOfDestCnt = 0;
		var mblnSplit = ""N"";

		var mintNoOfDest = 0;
		var mstrChkNumType;
		var intPsValCnt = 1;
		while(mbIsRuleRec) {
			var mintArraylen = getArrayLength(marrSource);
			for(var i = 0;i<mintArraylen;i++) {
				mblnSplit = ""N"";
				if(i == 0 && psAssocParamRec.GetProperty(""ParentRuleId"") != """")
					mstrChkNumType = marrSource[i][msNumType][0];
				else
					mstrChkNumType = GetFieldValue(""Source Number Type"");
				psfnArgs.SetProperty(""mblnSplit"",mblnSplit);
				if(CheckSourceExists(marrSource[i][msNumType][0],mstrChkNumType,marrSrcNumType,psfnArgs)){
					mblnSplit = psfnArgs.GetProperty(""mblnSplit"");
					if(mblnSplit==""N"") {
						var mstrCnctType = ToString(marrSource[i][msNumType][0]);
						var temp3 = mstrCnctType;
						intDestCnt++;
						intPsNNumCnt++;
						psfnArgs.SetProperty(""intPsValCnt"",intPsValCnt);
						ConstructArray(i,marrSource,msNumType,msDestNum,msPSNumInd,bcNMAssocRulDtl,mstrCnctType,intDestCnt,intPsNNumCnt,mblnSplit,psfnArgs);
						intPsValCnt = ToNumber(psfnArgs.GetProperty(""intPsValCnt""));
					} else {
						mstrSrcNumType = """";
						for(var intSrcLen =0;intSrcLen<ToInteger(getArrayLength(marrSrcNumType))-1;intSrcLen++) {
							if(intSrcLen==0)
								mstrSrcNumType = marrSrcNumType[intSrcLen]; 
							if((ToInteger(getArrayLength(marrSrcNumType))-1) != 1)
								mstrSrcNumType = mstrSrcNumType + "";""+marrSrcNumType[intSrcLen]
						}
						CopyArray((ToInteger(intBranchCnt)+1),marrSource,msDestNum,msPSNumInd);
						psfnArgs.SetProperty(""intPsValCnt"",intPsValCnt);
						ConstructArray((ToInteger(intBranchCnt)+1),marrSource,msNumType,msDestNum,msPSNumInd,bcNMAssocRulDtl,mstrSrcNumType,intDestCnt,intPsNNumCnt,mblnSplit,psfnArgs);
						intPsValCnt = ToNumber(psfnArgs.GetProperty(""intPsValCnt""));
						intBranchCnt++;
					}
				}
			 }

			mbIsRuleRec	= NextRecord();
		}
		SynchronizeArrays(marrSource,msDestNum);
		SynchronizeArrays(marrSource,msPSNumInd);
		SetNumCnctRec(marrSource,msNumType,msDestNum);
	}
	for(var itwer = 0;itwer<getArrayLength(marrSource);itwer++) {
		for(var jar = 0;jar<getArrayLength(marrSource[itwer][msNumType]);jar++)
			var temp = marrSource[itwer][msNumType][jar];
	}		
	
	for(var i=0;i<getArrayLength(marrSource);i++) {
		for(var j=0;j<getArrayLength(marrSource[i][msDestNum]);j++)
			var temp = marrSource[i][msDestNum][j];
	}

	for(var i=0;i<getArrayLength(marrSource);i++) {
		for(var j=0;j<getArrayLength(marrSource[i][msPSNumInd]);j++)
			var temp = marrSource[i][msPSNumInd][j];
	}
	} catch (e) {
		throw(e);
	} finally {
		bcNMAssocRulDtl	= null;
		mboNMAssocRul	= null;
		
		boNumAssocDtl 	= null;
		bcAssocCnct 	= null;
		
		marrSrcNumType 	= null;
		marrNumDest 	= null;
//1.1 below
		psfnArgs = null;
//1.1 above
	}	
}
"/**************************************************************************************
* Name          : RMS NM Number Association Calculate Quantity		    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function CalculateQuantity(&arrAssWorkId,Idn,intSourceQuantity,strRuleType,noOfDest) {	

	var boAssRulDtl = TheApplication().GetBusObject(""RMS NM Association Rule"");
	var bcAssRuleDtl = boAssRulDtl.GetBusComp(""RMS NM Association Rule Detail"");
	var boNumAssocNew = TheApplication().GetBusObject(""RMS NM Number Association"");
	var bcNumAssStartNum = boNumAssocNew.GetBusComp(""RMS NM Number Association Start Number"");	

	var arrNoOfDestn = new Array();
	var arrBlnSplit  = new Array();
	
	var intStartNumRecCnt = 0;
	var intQtyUpd=0;
	var blnAssRuleDtlRec;

//-------------------------------------------------------------------------------
//Querying Association Detail and populating the No. of destinations in an array.
//-------------------------------------------------------------------------------	

	with(bcAssRuleDtl) {	
	
		ActivateField(""No of Destinations"");
		ActivateField(""Split"");
		ActivateField(""Split Record Id"");
		ClearToQuery();
		SetSearchSpec(""Rule Id"",Idn);
		ExecuteQuery(1);
		blnAssRuleDtlRec = FirstRecord(); 
	
		while (blnAssRuleDtlRec) {
			arrNoOfDestn[intStartNumRecCnt] = GetFieldValue(""No of Destinations"");
			if(ToInteger(intQtyUpd) == 0)
				arrBlnSplit[intQtyUpd++]= ""N"";
			if(GetFieldValue(""Split"")== ""Y"" || GetFieldValue(""Split Record Id"") != """")
				arrBlnSplit[intQtyUpd++]= ""Y"";
			else 
				arrBlnSplit[intQtyUpd++]= ""N"";
			
			blnAssRuleDtlRec = NextRecord();	
			intStartNumRecCnt++;
		}
	}
	for(var i=0;i<ToInteger(arrBlnSplit.length);i++)
		var temp = arrBlnSplit[i];
	

//--------------------------------------------------------------------------------------------------------------------
//Calculating the quantity based on the No. of destination and populating the association parameters with the quantity.
//--------------------------------------------------------------------------------------------------------------------	

	for(intStartNumRecCnt=0;ToInteger(intStartNumRecCnt)<ToInteger(arrAssWorkId.length);intStartNumRecCnt++) {

		if (intStartNumRecCnt == 0)
			noOfDest[intStartNumRecCnt] = intSourceQuantity;
		else {
			if(arrBlnSplit[intStartNumRecCnt] == ""Y"")
				noOfDest[intStartNumRecCnt] = noOfDest[intStartNumRecCnt-1];
			else				
				noOfDest[intStartNumRecCnt] = noOfDest[intStartNumRecCnt-1] * ToInteger(arrNoOfDestn[intStartNumRecCnt-1]);
		}
	
		with(bcNumAssStartNum) {
			ActivateField(""Quantity"");
			ActivateField(""Qty Read Only"");	
			ClearToQuery();
			SetSearchSpec(""Id"",arrAssWorkId[intStartNumRecCnt]);
			ExecuteQuery(1);
			if(intStartNumRecCnt!=0) {
				if(FirstRecord()){
					SetFieldValue(""Qty Read Only"",""N"");
					SetFieldValue(""Quantity"",noOfDest[intStartNumRecCnt]);
					SetFieldValue(""Qty Read Only"",""Y"");
					WriteRecord(); 
				}
			}
		}
	}
	
	bcAssRuleDtl 		= null;
	boAssRulDtl 		= null;
	
	bcNumAssStartNum 	= null;	
	boNumAssocNew 		= null;

	arrNoOfDestn 		= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Association CheckHLRID Method    		 	  		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Verify the Association Parameters	    		                      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	 1.0   	MBT		 Created      12/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function CheckHLRID(&psAssocParam)
{
	var psAssocParamRec;
	var msHLRID			= """";
	var msHLRCheck		= """";
	var blnReturn		= true;
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref = boSysPref.GetBusComp(""System Preferences""); 	
	
	with(bcSysPref) {
		ActivateField(""Name"");
		ActivateField(""Value"");		
		ClearToQuery();
		SetSearchSpec(""Name"",""RMSHLRCHECK"");
		ExecuteQuery();
		
		if(!FirstRecord())
			msHLRCheck = ""N""
		else
			msHLRCheck = GetFieldValue(""Value"");
		if(msHLRCheck == ""Y"") {
			for (var i=0;i<psAssocParam.GetChildCount();i++) {
				psAssocParamRec = psAssocParam.GetChild(i);
				if(msHLRID == """") {
					msHLRID = psAssocParamRec.GetProperty(""HLRID"");
				} else if(msHLRID != psAssocParamRec.GetProperty(""HLRID"")) {
					blnReturn = false;
					break;
				} 
			}
		}
	}
//1.1 below
	bcSysPref = null;
	boSysPref = null;
//1.1 above
	return(blnReturn);
	
}
"/**************************************************************************************
* Name          : RMS NM Number Association CheckNumberOverlap Method    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/
function CheckNumberOverlap(&marrNumSet,msTypeIdentifier,msNumber)
{
	var miCnt;
	var psNumSet;
	
	for(miCnt =0; miCnt < getArrayLength(marrNumSet);miCnt++) {
		psNumSet = marrNumSet[miCnt];
		if(psNumSet.GetType() == msTypeIdentifier) {
			if(psNumSet.PropertyExists(msNumber)) 
				return false;
		}
	}
	
	return true;
}
"/**************************************************************************************
* Name          : RMS NM Number Association CreateAssocParam Method    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/05/2005 	1.0   		MBT						   	Created      30/05/2005       *
**************************************************************************************/
function CheckSourceExists(mstrSrcNumtype,mstrChkNumtype,&marrSrcNumType,psfnArgs) {
	
	marrSrcNumType = new Array();
	marrSrcNumType = mstrSrcNumtype.split("";"");
	var intCntArrLen;
	for(var i=0;i<getArrayLength(marrSrcNumType);i++) {
		var temp = marrSrcNumType[i];
		if(marrSrcNumType[i] == mstrChkNumtype) {
			var temp1 = marrSrcNumType[i+1];
			if(defined(marrSrcNumType[i+1]))
				psfnArgs.SetProperty(""mblnSplit"",""Y"");
			return true;
		}
	}
	return false;
}
"/**************************************************************************************
* Name          : RMS NM Number Association CreateAssocParam Method    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/05/2005 	1.0   		MBT						   	Created      30/05/2005       *
**************************************************************************************/
function ConstructArray(intBranchCnt,&marrSource,msNumType,msDestNum,msPSNumInd,bcAssRuldtl,mstrCnctType,intDestCnt,intPsNNumCnt,mblnSplit,psfnArgs){
	var intPsValCnt = ToInteger(psfnArgs.GetProperty(""intPsValCnt""));
	marrSource[intBranchCnt][msNumType][0] = mstrCnctType + "";""+ ToString(bcAssRuldtl.GetFieldValue(""Destination Number Type""));

	if(bcAssRuldtl.GetFieldValue(""Split Record Id"") != """" || bcAssRuldtl.GetFieldValue(""Split"") == ""Y"")
		marrSource[intBranchCnt][msDestNum][intDestCnt] = 1;
	else
		marrSource[intBranchCnt][msDestNum][intDestCnt] = bcAssRuldtl.GetFieldValue(""No of Destinations"");

	if(mblnSplit == ""Y"") {
		var temp = ToInteger(marrSource[ToInteger(intBranchCnt)-1][msPSNumInd][intPsNNumCnt])+1;
//		marrSource[intBranchCnt][msPSNumInd][intPsNNumCnt]  = ToInteger(marrSource[ToInteger(intBranchCnt)-1][msPSNumInd][intPsNNumCnt])+1;
		marrSource[intBranchCnt][msPSNumInd][intPsNNumCnt] = 	intPsValCnt++;
	}
	else {
		var temp = ToInteger(marrSource[intBranchCnt][msPSNumInd][ToInteger(intPsNNumCnt)-1])+1;
//		marrSource[intBranchCnt][msPSNumInd][intPsNNumCnt]  = ToInteger(marrSource[intBranchCnt][msPSNumInd][ToInteger(intPsNNumCnt)-1])+1;
		marrSource[intBranchCnt][msPSNumInd][intPsNNumCnt] = intPsValCnt++;
	}
	
	psfnArgs.SetProperty(""intPsValCnt"",intPsValCnt);
}
"/**************************************************************************************
* Name          : RMS NM Number Association CreateAssocParam Method    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/05/2005 	1.0   		MBT						   	Created      30/05/2005       *
**************************************************************************************/
function CopyArray(intBranchCnt,&marrSource,msDestNum,msPSNumInd) 
{
	var intPrevBranchcnt=ToInteger(intBranchCnt)-1;
	for(var i=0;i<getArrayLength(marrSource[intPrevBranchcnt][msDestNum]);i++) {
		marrSource[intBranchCnt][msDestNum][i] = marrSource[intPrevBranchcnt][msDestNum][i];
	}
	
	for(var i=0;i<getArrayLength(marrSource[intPrevBranchcnt][msPSNumInd]);i++) {
		marrSource[intBranchCnt][msPSNumInd][i] = marrSource[intPrevBranchcnt][msPSNumInd][i];
	}
	
}
"/**************************************************************************************
* Name          : RMS NM Number Association CreateAssocParam Method    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/
function CreateAssocParam(msSourceNum, msDestinationNum)
{
	var boNumberMstr 	= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumberMstr 	= boNumberMstr.GetBusComp(""RMS NM Number Enquiry"");
	
	//the follwing definition can be removed in future
	var boNumAssocDtl 	= TheApplication().GetBusObject(""RMS NM Number Association Service"");
	var bcNumAssocMstr 	= boNumAssocDtl.GetBusComp(""RMS NM Number Association Master"");
	var bcNumAssocDtl 	= boNumAssocDtl.GetBusComp(""RMS NM Number Association Detail"");
	var bcAssocCnct 	= boNumAssocDtl.GetBusComp(""RMS NM Association Number Type Display"");
	
	var mbIsRecord;
	var msSourceId;
	var msDestinationId;

	with(bcNumberMstr) {
		ActivateField(""Number String"");
		ClearToQuery();
		SetSearchSpec(""Number String"", msSourceNum);
		ExecuteQuery();
		mbIsRecord = FirstRecord();
		
		if(!mbIsRecord) return false;
		msSourceId = GetFieldValue(""Id"");
	}
	
	bcNumberMstr 	= null;
	boNumberMstr 	= null;
	
	bcNumAssocMstr 	= null;
	bcNumAssocDtl 	= null;
	bcAssocCnct 	= null;	
	boNumAssocDtl 	= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Association DeleteSIMOrderNum					      *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      28/11/2003       *
**************************************************************************************/
function DeleteSIMOrderNum(mbcSIMNumInfo,msAssocStartId)
{
	with(mbcSIMNumInfo) {
		with(mbcSIMNumInfo){
			ActivateField(""Assoc Start Id"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",msAssocStartId);
			ExecuteQuery();

			while(FirstRecord())
				DeleteRecord();
		}
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Estimate End Numbers						      	  *
* Author        : Mahindra British Telecom                                            *
* Description   : EstimateEndNumbers	    		                  				  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 03/08/2004 	1.0   		MBT						   	Created      			      *
**************************************************************************************/
function EstimateEndNumbers(psAssocParam,psfnArg,msAssocId) {
	
	var strErrVal  = """";
	var strErrCode = """";
	psfnArg.SetProperty(""strErrVal"","""");
	psfnArg.SetProperty(""strErrCode"","""");
	var psAssocParamRec;
	var blnException		= false; //for raising exception and free object definitions

	var boNumberMstr		= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumberMstr		= boNumberMstr.GetBusComp(""RMS NM Number Enquiry"");

	var boNumAssocDtl		= TheApplication().GetBusObject(""RMS NM Number Association Service"");
	var bcAssocCnct			= boNumAssocDtl.GetBusComp(""RMS NM Number Association Master Concat"");

	var boNumAssociation	        = TheApplication().GetBusObject(""RMS NM Number Association"");
	var bcNumAssociationStartNum 	= boNumAssociation.GetBusComp(""RMS NM Number Association Start Number"");
	 	
	var blnNumMstrRec;
	var blnIsAssocMstrDtl;
	var psNumSet			= TheApplication().NewPropertySet();
	var psNum;
	
	var intNumCount 		= 0;
	var intPrevNum			= 0;
	var arrNumSet			= new Array();
	var strIsSequenced;
	try{	
	for (var i =0;i<psAssocParam.GetChildCount();i++) {
		psAssocParamRec = psAssocParam.GetChild(i);
		psNum = TheApplication().NewPropertySet();
		arrNumSet[i] = psNum;
		
		strIsSequenced = psAssocParamRec.GetProperty(""SequenceFlag"");
		intPrevNum = 0;
		var intPrevAssocSeq = 0;
		
		
		with(bcNumAssociationStartNum) {
			ActivateField(""End Number"");
			ClearToQuery();
			SetSearchSpec(""Ass Id"",msAssocId);
			SetSearchSpec(""Sequence"",(i+1));
			ExecuteQuery();
			blnIsAssocMstrDtl = FirstRecord();
			
			if(blnIsAssocMstrDtl) {
				SetFieldValue(""End Number"","""");
			}
		}			
		if(psAssocParamRec.GetProperty(""ParentRuleId"") != """") {
			if(psAssocParamRec.GetProperty(""AssocGenNum"") == """") continue;
			with (bcAssocCnct) {
				ActivateField(""Associated Type"");
				ActivateField(""Associated Numbers"");
				ActivateField(""Allocation Id"");
				ActivateField(""Reserve Id"");
				ActivateField(""Generated Number"");
				
				ClearToQuery();
				SetSearchSpec(""Association Id"", psAssocParamRec.GetProperty(""ParentAssocId""));
				SetSearchSpec(""Flag"",""N"");
				SetSearchSpec(""Generated Number"","" >='"" + psAssocParamRec.GetProperty(""AssocGenNum"") + ""'"");
				SetSearchSpec(""Assoc Status"",""='"" + psAssocParamRec.GetProperty(""NumStatus"") + ""'"");
				SetSortSpec(""Generated Number(ASCENDING)"");
				ExecuteQuery(ForwardOnly);
				blnNumMstrRec = FirstRecord();
				if(blnNumMstrRec) psNum.SetType(GetFieldValue(""Associated Type""));
			}	
			while(blnNumMstrRec) {  
				if(!CheckNumberOverlap(arrNumSet,psNum.GetType(),bcAssocCnct.GetFieldValue(""Associated Numbers""))) {
					psfnArg.SetProperty(""strErrCode"",""RMSASS003"");
					psfnArg.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS003""));
					blnException	= true;
					TheApplication().RaiseErrorText(""ERROR"");
				}
				psNum.SetProperty(intNumCount,bcAssocCnct.GetFieldValue(""Associated Numbers""));
				psNum.SetProperty(bcAssocCnct.GetFieldValue(""Associated Numbers""),bcAssocCnct.GetFieldValue(""Id""));
					intNumCount++;
				
				if (psAssocParamRec.GetProperty(""Quantity"") == intNumCount) {
					psAssocParamRec.SetProperty(""EndingNumber"",bcAssocCnct.GetFieldValue(""Associated Numbers""));
					if(blnIsAssocMstrDtl) {
						bcNumAssociationStartNum.SetFieldValue(""End Number"",psAssocParamRec.GetProperty(""EndingNumber""));
						bcNumAssociationStartNum.WriteRecord();
					}
					break;
				}
				blnNumMstrRec = bcAssocCnct.NextRecord();
			}

			if (psAssocParamRec.GetProperty(""Quantity"") > intNumCount) {
					psfnArg.SetProperty(""strErrCode"",""RMSASS004"");
					psfnArg.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS004""));
					blnException	= true;
					TheApplication().RaiseErrorText(""ERROR"");
			}
			psNumSet.AddChild(psNum);
		}
		else {
			if(psAssocParamRec.GetProperty(""StartNum"") == """") continue;
			with(bcNumberMstr) {
				ActivateField(""Type Identifier"");
				ActivateField(""Number String"");
				ActivateField(""Number"");
				ActivateField(""Allocated To"");
				ActivateField(""Reserved To"");
				ActivateField(""Is Associated"");
				ActivateField(""Type"");	
				
				ClearToQuery();
				SetSearchSpec(""Status"",""='"" + psAssocParamRec.GetProperty(""NumStatus"") + ""'"");
				SetSearchSpec(""Type Id"", psAssocParamRec.GetProperty(""TypeId""));
				SetSearchSpec(""Subtype Id"",psAssocParamRec.GetProperty(""SubtypeId""));
				SetSearchSpec(""Scheme Id"",psAssocParamRec.GetProperty(""SchemeId""));
				SetSearchSpec(""Block Id"",psAssocParamRec.GetProperty(""BlockId""));
				SetSearchSpec(""Is Associated"",""N"");
				var test = psAssocParamRec.GetProperty(""NumStatus"");
				if(psAssocParamRec.GetProperty(""AllocatedTo"") != """")
					SetSearchSpec(""Allocated To"",psAssocParamRec.GetProperty(""AllocatedTo""));
				if(psAssocParamRec.GetProperty(""ReservedTo"") != """")
					SetSearchSpec(""Reserved To"",psAssocParamRec.GetProperty(""ReservedTo""));
			
				SetSearchSpec(""Number"","" >= '"" + psAssocParamRec.GetProperty(""StartNum"") + ""'"");
				SetSortSpec(""Number(ASCENDING)"");
				ExecuteQuery(ForwardOnly);
				blnNumMstrRec = FirstRecord();
				if(blnNumMstrRec){
			  		intPrevNum	= GetFieldValue(""Number"");		
				 	psNum.SetType(GetFieldValue(""Type Identifier""));
				}
			}
			
			intNumCount = 0;			
			while(blnNumMstrRec) {  
				if (!CheckNumberOverlap(arrNumSet,psNum.GetType(),bcNumberMstr.GetFieldValue(""Number String""))) {
					psfnArg.SetProperty(""strErrCode"",""RMSASS005"");
					psfnArg.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS005"",bcNumberMstr.GetFieldValue(""Type"")));
					blnException	= true;
					TheApplication().RaiseErrorText(""ERROR"");
				}
				psNum.SetProperty(intNumCount,bcNumberMstr.GetFieldValue(""Number String""));
				psNum.SetProperty(bcNumberMstr.GetFieldValue(""Number String""),bcNumberMstr.GetFieldValue(""Id""));
				
//------------------------------------------------------------------------
//Check whether the numbers are in sequence (if sequence flag is checked).
//------------------------------------------------------------------------

				if ((strIsSequenced == ""Y"") && (bcNumberMstr.GetFieldValue(""Number"") - intPrevNum) > 1) {
					psfnArg.SetProperty(""strErrCode"",""RMSASS006"");
					psfnArg.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS006"",bcNumberMstr.GetFieldValue(""Type"")));
					blnException	= true;
					TheApplication().RaiseErrorText(""ERROR"");
				}
//------------------------------------------------------------------------------
//Previous Number has to be stored to check whether the Numbers are in sequence.
//------------------------------------------------------------------------------
				if (strIsSequenced == ""Y"") intPrevNum = bcNumberMstr.GetFieldValue(""Number"");

//------------------------------------------------------------------------------------------
//Increment the counter to avoid the calculation required to find out the property set count.
//------------------------------------------------------------------------------------------

				intNumCount++;
//------------------------------------------------------------------------------------------
//If the required quantity is met, then set the ending number and continue with the FOR loop.
//------------------------------------------------------------------------------------------

				if (psAssocParamRec.GetProperty(""Quantity"") == intNumCount) {
					psAssocParamRec.SetProperty(""EndingNumber"",bcNumberMstr.GetFieldValue(""Number String""));
					
					//bcNumAssociationStartNum.ExecuteQuery();	
					if(blnIsAssocMstrDtl) {
						bcNumAssociationStartNum.SetFieldValue(""End Number"",psAssocParamRec.GetProperty(""EndingNumber""));
						bcNumAssociationStartNum.WriteRecord();
					}
					
					
					break;
				}
				blnNumMstrRec = bcNumberMstr.NextRecord();
				if(blnNumMstrRec) psNum.SetType(bcNumberMstr.GetFieldValue(""Type Identifier""));
			}
			psNumSet.AddChild(psNum);
		}
		if (psAssocParamRec.GetProperty(""Quantity"") > intNumCount) {
			psfnArg.SetProperty(""strErrCode"",""RMSASS007"");
			psfnArg.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS007"",psAssocParamRec.GetProperty(""SchemeName"")));
			blnException	= true;
			TheApplication().RaiseErrorText(""ERROR"");
		}
	} 
	} catch(e) {
		if(!blnException)//if not a known exception then throw out
			throw(e);
	} finally{
	
		psNumSet 					= null;
		psNum						= null;
		arrNumSet					= null;
		
		bcNumberMstr 				= null;
		boNumberMstr 				= null;
		bcAssocCnct 				= null;
		boNumAssocDtl 				= null;
		bcNumAssociationStartNum 	= null;
		boNumAssociation			= null;
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Association GetAssocParam							  *	
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	 1.0   	MBT		 Created      12/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
20060808       | 1.2  | Kalyana| Added  new property for Special Category Type to exclude
								 special  numbers for association for bulk prepaid activation.
**************************************************************************************/
function GetAssocParam(&Inputs,bcNumAssocMstr,bcNumAssocParam,psfnArg)
{
	var blnRec;
	var psAssocParam;
	var psAssocParamRec;
	with(bcNumAssocParam) 
	{
		ActivateField(""Rule Id"");
		ActivateField(""Parent Ass Id"");
		ActivateField(""Associated Start Number Id"");
		ActivateField(""Associated Start Number"");
		ActivateField(""Type"");
		ActivateField(""Type Id"");
		ActivateField(""Sub Type Id"");
		ActivateField(""Scheme Id"");
		ActivateField(""Block Id"");
		ActivateField(""Number Id"");
		ActivateField(""Assoc HLR Id"");
		ActivateField(""Number HLR ID"");
		ActivateField(""Number"");
		ActivateField(""Assigned To"");
		ActivateField(""Scheme Name"");
		ActivateField(""Alloc Id"");
		ActivateField(""Reserve Id"");
		ActivateField(""Allocated To"");
		ActivateField(""Reserved To"");
		ActivateField(""Number Status"");
		ActivateField(""Sequence Flag"");
		ActivateField(""Split Record Id"");
		ActivateField(""Quantity"");
		ActivateField(""Assoc Number Status"");
		ActivateField(""Assoc Generated Num""); //added as per bug fix
		//below 1.2
		ActivateField(""Special Category Type"");
		//above 1.2
		ClearToQuery()
		ExecuteQuery(ForwardOnly);
		FirstRecord();
	}
	if(bcNumAssocParam.FirstRecord() != true) return 0;
	blnRec = bcNumAssocParam.FirstRecord();
	psAssocParam = TheApplication().NewPropertySet();
//-------------------------------------------------------------
//Populating a property set with association parameters values.
//-------------------------------------------------------------
	psAssocParam.SetProperty(""AssocMstrId"",Inputs.GetProperty(""AssociationId""));
	psAssocParam.SetProperty(""RuleId"",bcNumAssocMstr.GetFieldValue(""Rule Id""));
	psAssocParam.SetProperty(""RuleType"",bcNumAssocMstr.GetFieldValue(""Rule Type""));
	psAssocParam.SetProperty(""AssocId"",bcNumAssocMstr.GetFieldValue(""Id""));
	psAssocParam.SetProperty(""RootQty"",bcNumAssocParam.GetFieldValue(""Quantity""));
	while(blnRec) 
	{
		psAssocParamRec = TheApplication().NewPropertySet();
		with(psAssocParamRec) 
		{
			SetType(""ParamRec"");
			if(bcNumAssocParam.GetFieldValue(""Rule Id"") != """") 
			{
				SetProperty(""ParentRuleId"", bcNumAssocParam.GetFieldValue(""Rule Id""));
				SetProperty(""ParentAssocId"", bcNumAssocParam.GetFieldValue(""Parent Ass Id""));
				SetProperty(""StartNumId"",bcNumAssocParam.GetFieldValue(""Associated Start Number Id""));
				SetProperty(""AssocGenNum"",bcNumAssocParam.GetFieldValue(""Assoc Generated Num""));
				SetProperty(""SplitRecordId"",bcNumAssocParam.GetFieldValue(""Split Record Id""));
				if(bcNumAssocParam.GetFieldValue(""Associated Start Number"") == """") 
				{
					psfnArg.SetProperty(""strErrCode"", ""RMSASS014"");
					psfnArg.SetProperty(""strErrVal"", TheApplication().LookupMessage(""User Defined Errors"",""RMSASS014""));
					return false;
				}
				SetProperty(""StartNum"",bcNumAssocParam.GetFieldValue(""Associated Start Number""));
				SetProperty(""NumStatus"",bcNumAssocParam.GetFieldValue(""Assoc Number Status""));
				SetProperty(""HLRID"",bcNumAssocParam.GetFieldValue(""Assoc HLR Id""));
			}
			else 
			{
				SetProperty(""TypeId"",bcNumAssocParam.GetFieldValue(""Type Id""));
				SetProperty(""SubtypeId"",bcNumAssocParam.GetFieldValue(""Sub Type Id""));
				SetProperty(""SchemeId"",bcNumAssocParam.GetFieldValue(""Scheme Id""));
				SetProperty(""SchemeName"",bcNumAssocParam.GetFieldValue(""Scheme Name""));
				SetProperty(""BlockId"",bcNumAssocParam.GetFieldValue(""Block Id""));
				SetProperty(""StartNumId"",bcNumAssocParam.GetFieldValue(""Number Id""));
				SetProperty(""SplitRecordId"",bcNumAssocParam.GetFieldValue(""Split Record Id""));
				if(bcNumAssocParam.GetFieldValue(""Number"") == """") 
				{
					psfnArg.SetProperty(""strErrCode"", ""RMSASS015"");
					psfnArg.SetProperty(""strErrVal"", TheApplication().LookupMessage(""User Defined Errors"",""RMSASS015"",bcNumAssocParam.GetFieldValue(""Type"")));
					return false;
				}
				SetProperty(""StartNum"",bcNumAssocParam.GetFieldValue(""Number""));
				SetProperty(""NumStatus"",bcNumAssocParam.GetFieldValue(""Number Status""));
				SetProperty(""HLRID"",bcNumAssocParam.GetFieldValue(""Number HLR ID""));
				//below 1.2
				SetProperty(""Special Category Type"",bcNumAssocParam.GetFieldValue(""Special Category Type""));
				//above 1.2
				}
			SetProperty(""AllocId"",bcNumAssocParam.GetFieldValue(""Alloc Id""));
			SetProperty(""SequenceFlag"",bcNumAssocParam.GetFieldValue(""Sequence Flag""));
			SetProperty(""Quantity"",bcNumAssocParam.GetFieldValue(""Quantity""));
		}
		psAssocParam.SetProperty(""ReservedToId"",bcNumAssocParam.GetFieldValue(""Reserve Id""));
		psAssocParam.SetProperty(""AllocatedTo"",bcNumAssocParam.GetFieldValue(""Allocated To""));
		psAssocParam.SetProperty(""ReservedTo"",bcNumAssocParam.GetFieldValue(""Reserved To""));
		psAssocParam.SetProperty(""AssignedToId"",bcNumAssocParam.GetFieldValue(""Assigned To""));
		psAssocParam.AddChild(psAssocParamRec);
		blnRec = bcNumAssocParam.NextRecord();
	}
//1.1 below
	psAssocParamRec = null;
	//psAssocParam = null;  commented by Ramakrishna :20060713
//1.1 above
	return(psAssocParam);
}
"/**************************************************************************************
* Name          : RMS NM Number Association GetConcatType Method    		 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      12/12/2003    
* 20061003      1.1         Kalyana				Changed arguments for recusive fucn   *
**************************************************************************************/
function GetConcatType(strRuleId,psfnArg) 
{
	var strConcatType = """";
	var blnIsRecord;
	var blnFirstRecord = true;
	
	var strTypeCnct = psfnArg.GetProperty(""msTypeCnct"");
	var msCrdRatio = psfnArg.GetProperty(""msCrdRatio"");
	var miNoOfSIM = ToInteger(psfnArg.GetProperty(""msNoOfSIM""));
	var miNoOfIMSI = ToInteger(psfnArg.GetProperty(""msNoOfIMSI""));
	var miNoOfMSISDN = ToInteger(psfnArg.GetProperty(""msNoOfMSISDN""));	
	var msGenLvl = psfnArg.GetProperty(""msGenLvl"");	
	
	var boNMAssocRul 		= TheApplication().GetBusObject(""RMS NM Association Rule"");
	var bcNMAssocRulMstr 	= boNMAssocRul.GetBusComp(""RMS NM Association Rule Master"");
	var bcNMAssocRulDtl  	= boNMAssocRul.GetBusComp(""RMS NM Association Rule Detail"");
	
//-----------------------------------------------------
//Querying the Association Rule to get the Number Type.
//-----------------------------------------------------
	try {
	with(bcNMAssocRulMstr) {
		ActivateField(""Rule Type"");
		ActivateField(""Parent Rule Id"");
		ClearToQuery();
		SetSearchSpec(""Id"",strRuleId);
		ExecuteQuery(ForwardOnly);
		blnIsRecord = FirstRecord();
		if(!blnIsRecord) return 0;
	}
	
	
	with(bcNMAssocRulDtl) {
		ActivateField(""No of Destinations"");
		ActivateField(""Source Number Type"");
		ActivateField(""Source Gen Level"");		
		ActivateField(""Destination Number Type"");
		ActivateField(""Destination Gen Level"");		
		ActivateField(""Parent Rule Id"");
		ActivateField(""Destination Number Type Identifier"");
		ActivateField(""Source Number Type Identifier"");
		ActivateField(""Split"");
		ActivateField(""Split Record Id"");		
		
		ClearToQuery();
		ExecuteQuery(ForwardOnly);
		blnIsRecord = FirstRecord();
		if(!blnIsRecord) return 0;
	}
	
	if(bcNMAssocRulMstr.GetFieldValue(""Rule Type"") == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD""))  {
	 	 //below 1.1
		 //strConcatType = GetConcatType(bcNMAssocRulDtl.GetFieldValue(""Parent Rule Id""),strTypeCnct);
		 strConcatType = GetConcatType(bcNMAssocRulDtl.GetFieldValue(""Parent Rule Id""),psfnArg);		
		 //above 1.1
	} 

//---------------------------------------------------------------
//Concatenate the Number Type name and populate it in a variable.
//---------------------------------------------------------------
	
	while(blnIsRecord) {
	
		if(strConcatType == """") {
			strConcatType = bcNMAssocRulDtl.GetFieldValue(""Source Number Type"");
			strTypeCnct   = bcNMAssocRulDtl.GetFieldValue(""Source Number Type Identifier"");
			if(bcNMAssocRulDtl.GetFieldValue(""Source Number Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""SIM""))
				miNoOfSIM = 1;
			if(bcNMAssocRulDtl.GetFieldValue(""Source Number Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""IMSI"")) {
				miNoOfIMSI = 1;
				if(msGenLvl == """")
					msGenLvl = bcNMAssocRulDtl.GetFieldValue(""Source Gen Level"");
				else
					msGenLvl = msGenLvl + ""/""+bcNMAssocRulDtl.GetFieldValue(""Source Gen Level"");
			}
			if(bcNMAssocRulDtl.GetFieldValue(""Source Number Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""MSISDN""))
				miNoOfMSISDN = 1;
				
		}
		if(bcNMAssocRulDtl.GetFieldValue(""Destination Number Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""SIM"")) {
			if(bcNMAssocRulDtl.GetFieldValue(""Split"") == ""Y"" || bcNMAssocRulDtl.GetFieldValue(""Split Record Id"") != """")	
				miNoOfSIM = ToInteger(miNoOfSIM) + 1;
			else
				miNoOfSIM = ToInteger(miNoOfSIM) + ToInteger(bcNMAssocRulDtl.GetFieldValue(""No of Destinations""));
		}
		if(bcNMAssocRulDtl.GetFieldValue(""Destination Number Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""IMSI""))	 {
			if(bcNMAssocRulDtl.GetFieldValue(""Split"") == ""Y"" || bcNMAssocRulDtl.GetFieldValue(""Split Record Id"") != """")	
				miNoOfIMSI = ToInteger(miNoOfIMSI) + 1;
			else
				miNoOfIMSI = ToInteger(miNoOfIMSI) + ToInteger(bcNMAssocRulDtl.GetFieldValue(""No of Destinations""));
				
			if(msGenLvl == """") {
				if(bcNMAssocRulDtl.GetFieldValue(""Destination Gen Level"")!="""")
					msGenLvl = bcNMAssocRulDtl.GetFieldValue(""Destination Gen Level"");
			}else {
				if(bcNMAssocRulDtl.GetFieldValue(""Destination Gen Level"")!="""")
					msGenLvl = msGenLvl + ""/""+bcNMAssocRulDtl.GetFieldValue(""Destination Gen Level"");
			}
		}
		if(bcNMAssocRulDtl.GetFieldValue(""Destination Number Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""MSISDN"")) {
			if(bcNMAssocRulDtl.GetFieldValue(""Split"") == ""Y"" || bcNMAssocRulDtl.GetFieldValue(""Split Record Id"") != """")	
				miNoOfMSISDN = ToInteger(miNoOfMSISDN) + 1;
			else
				miNoOfMSISDN = ToInteger(miNoOfMSISDN) + ToInteger(bcNMAssocRulDtl.GetFieldValue(""No of Destinations""));		
		}
				
		strConcatType = strConcatType + "" / "" + bcNMAssocRulDtl.GetFieldValue(""Destination Number Type"");
		strTypeCnct   = strTypeCnct   + "" / "" + bcNMAssocRulDtl.GetFieldValue(""Destination Number Type Identifier"");
		
		blnIsRecord = bcNMAssocRulDtl.NextRecord();
	}
	
	} catch (e) {
	
	} finally {
		bcNMAssocRulMstr 	= null;
		bcNMAssocRulDtl  	= null;
		boNMAssocRul 		= null;
		
		//These attributes are set because of script changes in 78. Functions cannot pass strings as reference
		psfnArg.SetProperty(""msTypeCnct"", strTypeCnct);
		psfnArg.SetProperty(""msCrdRatio"", msCrdRatio);
		psfnArg.SetProperty(""msNoOfSIM"", miNoOfSIM);
		psfnArg.SetProperty(""msNoOfIMSI"", miNoOfIMSI);
		psfnArg.SetProperty(""msNoOfMSISDN"",miNoOfMSISDN);	
		psfnArg.SetProperty(""msGenLvl"",msGenLvl);	
	
	}
	//return(strConcatType);
	//return(strConcatType);
}
"/**************************************************************************************
* Name          : RMS NM Number Association GetDestType Method    		 	  		  *	 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/
function GetDestType(bcAssRuleDtl,&strDestTypeId,&strDestSubTypeId,intRecCnt,&arrSplitRecId) {

	strDestTypeId[intRecCnt] = bcAssRuleDtl.GetFieldValue(""Destination Number Type Id"");
	strDestSubTypeId[intRecCnt] = bcAssRuleDtl.GetFieldValue(""Destination Number Subtype Id"");
	if(bcAssRuleDtl.GetFieldValue(""Split"") == ""Y"")
		arrSplitRecId[intRecCnt] = bcAssRuleDtl.GetFieldValue(""Id"");
	else if(bcAssRuleDtl.GetFieldValue(""Split Record Id"") != """")
		arrSplitRecId[intRecCnt] = bcAssRuleDtl.GetFieldValue(""Split Record Id"");
	else
		arrSplitRecId[intRecCnt] = """";	
}
"/**************************************************************************************
* Name          : RMS NM Number Association GetPropertySet							  *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/
function GetPropertySet(&psPropSet,strSearchType)
{
	var psRetPropSet 	= psPropSet;
	var psTravPropSet;
	var psResultPropSet;
	
	var intChildCount;
	var intImdtChildCount = 0;  
	var intLoopCount;
	
	var strType;
	
//--------------------------------------------
//If the input property set is null then exit.
//--------------------------------------------

	if(psRetPropSet.GetChildCount() == 0) return """";

//------------------------------
//Number of child property sets.
//------------------------------

	intImdtChildCount = psRetPropSet.GetChildCount();
	
	for(intLoopCount=0;intLoopCount<intImdtChildCount;intLoopCount++){

//-----------------------------------------
//Hold the child of the input property set.
//-----------------------------------------

		psTravPropSet	= psRetPropSet.GetChild(intLoopCount);
		
//------------------------------------------------------------
//Search whether the child ps corresponds to the search string
//------------------------------------------------------------

		if(psTravPropSet.GetType() == strSearchType) 

//-----------------------------------
//If yes then return the propertyset.
//-----------------------------------

			return(psRetPropSet);
//-----------------------------------------------------------------------------
//If no child is there for the continue the loop so that it will exit the loop.
//-----------------------------------------------------------------------------

		if(psRetPropSet.GetChildCount() == 0) continue;		
		
//-------------------------------------------------------------------------------------------------
//if input property set is having child property sets then call the function to check inside those.
//-------------------------------------------------------------------------------------------------

		psResultPropSet = GetPropertySet(psTravPropSet,strSearchType);
		
//---------------------------------------------------------------------------------------------------------------------
//if the propertyset doesn't contain the search string then check the string inside the next child of input propertyset.
//---------------------------------------------------------------------------------------------------------------------		

		if(psResultPropSet == """") 
			continue;
		else

//------------------------------------------------------------
//else return the parentproperty set which contains the value.
//------------------------------------------------------------

			return(psResultPropSet);
	}
	
	if(intImdtChildCount == intLoopCount) return("""");
}
"/**************************************************************************************
* Name          : RMS NM Number Association GetSeqConcatType             		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/11/2003 	 1.0   	MBT      Created      12/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function GetSeqConcatType(strRuleId) 
{
	var strConcatType = """";
	var blnIsRecord;
	var blnFirstRecord = true;
	var arrConcatType = new Array();
	
	var boNMAssocRul = TheApplication().GetBusObject(""RMS NM Association Rule"");
	var bcNMAssocRulMstr = boNMAssocRul.GetBusComp(""RMS NM Association Rule Master"");
	var bcNMAssocRulDtl  = boNMAssocRul.GetBusComp(""RMS NM Association Rule Detail"");
	
	with(bcNMAssocRulMstr) 
	{
		ActivateField(""Rule Type"");
		ActivateField(""Parent Rule Id"");
		ClearToQuery();
		SetSearchSpec(""Id"",strRuleId);
		ExecuteQuery(ForwardOnly);
		blnIsRecord = FirstRecord();
		if(!blnIsRecord) return 0;
	}
	
	
	with(bcNMAssocRulDtl) 
	{
		ActivateField(""Source Number Type Identifier"");
		ActivateField(""Destination Number Type Identifier"");
		ActivateField(""Parent Rule Id"");
		ClearToQuery();
		ExecuteQuery(ForwardOnly);
		blnIsRecord = FirstRecord();
		if(!blnIsRecord) return 0;
	}
	
	if(bcNMAssocRulMstr.GetFieldValue(""Rule Type"") == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD""))  
	{
		strConcatType = GetConcatType(bcNMAssocRulDtl.GetFieldValue(""Parent Rule Id""));	
	} 
	
	if(strConcatType != """") marrConcatType = strConcatType.split("" / "");
	
	var miArrCnt = getArrayLength(marrConcatType);
	while(blnIsRecord) 
	{
		if(miArrCnt == 0) 
			marrConcatType[miArrCnt++] = bcNMAssocRulDtl.GetFieldValue(""Source Number Type"");
		marrConcatType[miArrCnt++] =  bcNMAssocRulDtl.GetFieldValue(""Destination Number Type"");
				
		
		blnIsRecord = bcNMAssocRulDtl.NextRecord();
	}
	
	var marrSeqConcatType 	= new Array();
	var mpsConcatIndex 		= TheApplication().NewPropertySet();
	var miSeqCnt = 0;
	
	for(var miCnt = 0; miCnt < miArrCnt; miCnt++) {
		if((marrConcatType[miCnt] == ""SIM"") && (!mpsConcatIndex.PropertyExists(miCnt))) {
			marrSeqConcatType[miCnt]	= marrConcatType[miCnt];
			mpsConcatIndex 				= miCnt;
		}
	}
	
	for(var miCnt = 0; miCnt < miArrCnt; miCnt++) {
		if((marrConcatType[miCnt] == ""IMSI"") && (!mpsConcatIndex.PropertyExists(miCnt))) {
			marrSeqConcatType[miCnt]	= marrConcatType[miCnt];
			mpsConcatIndex 				= miCnt;
		}
	}
	
	for(var miCnt = 0; miCnt < miArrCnt; miCnt++) {
		if((marrConcatType[miCnt] == ""MSISDN"") && (!mpsConcatIndex.PropertyExists(miCnt))) {
			marrSeqConcatType[miCnt] 	= marrConcatType[miCnt];
			mpsConcatIndex 				= miCnt;
		}
	}
	
	bcNMAssocRulMstr 	= null;
	bcNMAssocRulDtl  	= null;
	boNMAssocRul 		= null;
//1.1 below
	mpsConcatIndex = null;
//1.1 above	
	return(marrSeqConcatType.join("" / ""));
}
"/*Name          : RMS NM Number GetSysPrefValue
---------------------------------------------------------------------------------------
Date        Ver  By        Comments     Reviewed Date
---------------------------------------------------------------------------------------
20060920 	1.0  Kalyana        Created        
---------------------------------------------------------------------------------------*/
function GetSysPrefValue()
{
var boSysPref = TheApplication().GetBusObject(""System Preferences"");
var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
var SysPrefval =""""	
with(bcSysPref)
	{
        ActivateField(""Value"");
		ClearToQuery();
		SetSearchSpec(""Name"",""RMS_BYPASS_DEASSOCIATION"");
		ExecuteQuery(ForwardOnly);
	}
	if(bcSysPref.FirstRecord()) 
	{
	SysPrefval = bcSysPref.GetFieldValue(""Value"");
	}
	bcSysPref = null;
	boSysPref = null;
	return(SysPrefval);
}
"/**************************************************************************************
* Name          : RMS NM Number Association GetmsAssocStartsts					      *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	 1.0   	MBT		 Created      28/11/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function GetmsAssocStartsts(mbcNMNumMstr,msAssocStartId,&msAllocTo,&msAllocateId)
{
	var psfnArgs = TheApplication().NewPropertySet();
	
	with(mbcNMNumMstr) {
		ActivateField(""Status"");
		ActivateField(""Allocated To"");
		ActivateField(""Allocation Id"");
		
		ClearToQuery();
		SetSearchSpec(""Id"",msAssocStartId);
		ExecuteQuery();
		if(FirstRecord()) {
			psfnArgs.SetProperty(""msAllocateId"",GetFieldValue(""Allocation Id""));
			psfnArgs.SetProperty(""msAllocTo"",GetFieldValue(""Allocated To""));
			psfnArgs.SetProperty(""msAssocStartsts"",GetFieldValue(""Status""));
			return(psfnArgs);
		}
	}
//1.1 below
	psfnArgs = null;
//1.1 above
}
"/**************************************************************************************
* Name          : RMS NM Number Association RMSNA_GetConcatNumberArray Method  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003  	 1.0   	MBT		 Created      12/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
****************************marrParentAssocNum**********************************************************/
function RMSNA_GetConcatNumberArray(&psAssocParam,miNumSetCnt,miNoOfCnctRec, &marrDest,&marrNumPropSet)
{
	
	var miQty 		= 0;
	var miNoOfDest 	= 0;
	var mpsTempNumSet;
	var miParamCnt	= 0;
	var miIncrement = 0;
	
	var miKstart = 0;
	var miKend   = 0;
	var msNumber = """";
	var miK = 0;
	var miCnctCnt	= 0;
	var marrIsFirst = new Array();
	var marrNumbers = new Array();
	
//----------------Populate the Cnct array numbers-----------------	
//Consider the case of a Parent rule as:
//Source			Dest		No of Dest
//Type1			Type2		2
//Type2			Type3		3
//Due to the previous calculation: miNoOfCnctRec will be 1*2*3 = 6
//so for one set of association there will be 6 cnct records
//so the numbers will be in the following fashion
//	   |<-------------Numbers in Cnct table----------------->|	
//	   |							     [Type3.Num1] {1}    |
//	   |					 {1}		 [Type3.Num2] {2}    |
//	   |			   	  -[Type2.Num1] -[Type3.Num3] {3}	 |
//[Set1] |	[Type1.Num1]-|									 |
//{1}	   |	{1}	          -[Type2.Num2] -[Type3.Num4] {1}	 |
//	   |		   		     {2}		 [Type3.Num5] {2}	 |
//	   |		   				         [Type3.Num6] {3}	 |
//-------------------------------------------------------------------
	   var temp = psAssocParam.GetProperty(""RootQty"");
	for(miQty=0;miQty < psAssocParam.GetProperty(""RootQty"");miQty++) {
		miNoOfDest = 1;
		var mpsTempNumSet = TheApplication().NewPropertySet();
		
		for(miParamCnt=0; miParamCnt < miNumSetCnt; miParamCnt++) {
		
//------------------------------------------------------------------------
//marrIsFirst is used for getting the First Property from the Property set.
//------------------------------------------------------------------------

			if (marrIsFirst.length == miParamCnt)	marrIsFirst[miParamCnt] = 0;
			var temp1 = marrDest[miParamCnt];
			var temp2 = marrDest[miParamCnt];
			if(miNoOfDest < marrDest[miParamCnt]) miNoOfDest = marrDest[miParamCnt];
			miIncrement = miNoOfCnctRec/miNoOfDest;
			miKstart = -(miIncrement);
			miKend   = 0;
			
			for(miCnctCnt = 0;miCnctCnt < miNoOfDest;miCnctCnt++) {
				miKstart = miKstart + miIncrement;
				miKend   = miKend + miIncrement;
			
				msNumber = marrNumPropSet[miParamCnt].GetProperty(marrIsFirst[miParamCnt]);	
				marrIsFirst[miParamCnt] += 1;
				
				for(miK = miKstart; miK < miKend; miK++) {
					if(msNumber != """")
						marrNumbers[miQty][miK][miParamCnt] = msNumber;
				}
			}
		}
	}
	for(var i = 0;i<getArrayLength(marrNumbers);i++){
		for(var k = 0;k<getArrayLength(marrNumbers[i]);k++){		
			for(var j = 0;j<getArrayLength(marrNumbers[i][k]);j++){		
				var temp = marrNumbers[i][k][j];
			}
		}
	}
//1.1 below
	mpsTempNumSet = null;
//1.1 above
	return (marrNumbers);
}
"/**************************************************************************************
* Name          : RMS NM Number Association RMSNA_GetConcatNumberArray Method  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 04/06/2005 	 1.0   	MBT		 Created(P.Gautaman)  04/06/2005   *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function RMSNA_GetConcatNumberArray_Split(&psAssocParam,miNumSetCnt,miNoOfCnctRec, &marrDest,&marrNumPropSet,marrSource,&mpsPSIndx)
{
	
	var miQty 		= 0;
	var miNoOfDest 	= 1;
	var mpsTempNumSet;
	var miParamCnt	= 0;
	var miIncrement = 0;
	
	var miKstart = 0;
	var miKend   = 0;
	var msNumber = """";
	var miK = 0;
	var miCnctCnt	= 0;
	var marrIsFirst = new Array();
	var marrPrevFirst = new Array();
	var marrNumbers = new Array();
	
	var msNumType = ""NumType"";
	var msPSNumInd = ""PSNumInd"";
	var msDestNum  = ""DestNum"";
	
	var miPrevK;
	var miKend;
	
//----------------Populate the Cnct array numbers-----------------	
//Consider the case of a Parent rule as:
//Source			Dest		No of Dest
//Type1			Type2		2
//Type2			Type3		3
//Due to the previous calculation: miNoOfCnctRec will be 1*2*3 = 6
//so for one set of association there will be 6 cnct records
//so the numbers will be in the following fashion
//	   |<-------------Numbers in Cnct table----------------->|	
//	   |							     [Type3.Num1] {1}    |
//	   |					 {1}		 [Type3.Num2] {2}    |
//	   |			   	  -[Type2.Num1] -[Type3.Num3] {3}	 |
//[Set1] |	[Type1.Num1]-|									 |
//{1}	   |	{1}	          -[Type2.Num2] -[Type3.Num4] {1}	 |
//	   |		   		     {2}		 [Type3.Num5] {2}	 |
//	   |		   				         [Type3.Num6] {3}	 |
//-------------------------------------------------------------------

	for(var i=0;i<getArrayLength(marrSource[0][msPSNumInd]);i++) {
		marrIsFirst[i]=0;
	}
	
		
	   var temp = psAssocParam.GetProperty(""RootQty"");
	for(miQty=0;miQty < psAssocParam.GetProperty(""RootQty"");miQty++) {
//		miNoOfDest = 1;
		var mpsTempNumSet = TheApplication().NewPropertySet();
		
		for(miParamCnt=0; miParamCnt < getArrayLength(marrSource[0][msPSNumInd]); miParamCnt++) {
		
			miPrevK = 0;
			miKend = 0;
						
//------------------------------------------------------------------------
//marrIsFirst is used for getting the First Property from the Property set.
//------------------------------------------------------------------------

//			if (marrIsFirst.length == miParamCnt)	marrIsFirst[miParamCnt] = 0;
//			if(miNoOfDest < marrDest[miParamCnt]) miNoOfDest = marrDest[miParamCnt];
			marrPrevFirst[miParamCnt] = marrIsFirst[miParamCnt];
			for(var ibranch=0;ibranch<getArrayLength(marrSource);ibranch++) {
				marrIsFirst[miParamCnt] = marrPrevFirst[miParamCnt];
				miPrevK = miKend;		
				if(marrSource[ibranch][msDestNum][miParamCnt] == ""X"")
					miNoOfDest = 1;
				else
					miNoOfDest = marrSource[ibranch][msDestNum][miParamCnt];
					
					miIncrement = marrSource[ibranch][msNumType][1]/miNoOfDest;
				miKstart = -(miIncrement)+miPrevK;
				miKend   = 0;
				
				for(miCnctCnt = 0;miCnctCnt < miNoOfDest;miCnctCnt++) {
					miKstart = miKstart + miIncrement;
					miKend   = miKstart + miIncrement;
					if(marrSource[ibranch][msPSNumInd][miParamCnt] == ""X"")
						msNumber = ""X"";
					else
						msNumber = marrNumPropSet[marrSource[ibranch][msPSNumInd][miParamCnt]].GetProperty(marrIsFirst[miParamCnt]);	
					marrIsFirst[miParamCnt] += 1;
					
					for(miK = miKstart; miK < miKend; miK++) {
							SetArray(marrNumbers,miQty,miK,miParamCnt,""?"",msNumber);
							//STScript marrNumbers[miQty][miK][miParamCnt] = msNumber;
//							marrNumbers[miQty][miK][miParamCnt][0] = marrSource[ibranch][msPSNumInd][miParamCnt];
							var mstrCnct = ToString(miQty) + ToString(miK) + ToString(miParamCnt);
							mpsPSIndx.SetProperty(mstrCnct,marrSource[ibranch][msPSNumInd][miParamCnt])
//							mpsPSIndx.SetProperty(mstrCnct,marrSource[miQty][msPSNumInd][miParamCnt])
					}
				}
			}
			marrPrevFirst[miParamCnt] = marrIsFirst[miParamCnt];
		}
	}
	
	for(var i = 0;i<getArrayLength(marrNumbers);i++){
		for(var k = 0;k<getArrayLength(marrNumbers[i]);k++){		
		var test5 = getArrayLength(marrNumbers[i][k]);
			for(var j = 0;j<getArrayLength(marrNumbers[i][k]);j++){		
				var temp = marrNumbers[i][k][j];
			}
		}
	}
//1.1 below
	mpsTempNumSet = null;
//1.1 above	
	return (marrNumbers);
}
"/**************************************************************************************
* Name          : RMS NM Number Association RMSND_Cnct_NumberType      		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/
function RMSND_Cnct_NumberType(strParAssocId,&strConcatNumberType,bcNumAssociationMstr) {

	var boNumRulDtl;
	var bcNumRulDtl;
	var strMstrRulId;
	var flgRec;
	
	boNumRulDtl = TheApplication().GetBusObject(""RMS NM Association Rule"");
	bcNumRulDtl = boNumRulDtl.GetBusComp(""RMS NM Association Rule Detail"");		

	with(bcNumAssociationMstr) {
		ActivateField(""Rule Id"");
		ClearToQuery()
		SetSearchSpec(""Id"",strParAssocId);
		ExecuteQuery();
		if(FirstRecord())
			strMstrRulId = GetFieldValue(""Rule Id"");
	}	
	
	with(bcNumRulDtl) {
		ActivateField(""Source Number Type"");
		ActivateField(""Destination Number Type"")
		ActivateField(""Rule Id"");
		ClearToQuery()
		SetSearchSpec(""Rule Id"",strMstrRulId);
		SetSortSpec(""Sequence(Ascending)"");
		ExecuteQuery();
		flgRec = FirstRecord();

//-----------------------------------------------------
//Concat the number type and populate them in a string.
//-----------------------------------------------------

		while(flgRec) {
			if(GetFieldValue(""Sequence"") == 1) {
				strConcatNumberType = GetFieldValue(""Source Number Type"") + ' / ';	
				strConcatNumberType = strConcatNumberType + GetFieldValue(""Destination Number Type"") + ' / ';
			}
			else	
				strConcatNumberType = strConcatNumberType + GetFieldValue(""Destination Number Type"") + ' / ';
			flgRec = NextRecord();
		}
		strConcatNumberType = strConcatNumberType.substring(0,(strConcatNumberType.length-3));
	}
	
	bcNumRulDtl		= null;
	boNumRulDtl		= null;
}
"/*20060919  Kalyana  Deleted function comments as script length is exceeding 16K
  20060919	1.3      Kalyana   Added code to bypass DeAssociation based on Sys Pref Value for Child Rule
---------------------------------------------------------------------------------------*/
function RMSND_DeAssociation(msAssocId,psOp) {
	var mboNumAssociation,mbcNumAssociationMstr;
	var mbcNumAssStartNum;
	var mbcNumAssNumType,mbcNumAssDtl,mbcNumAssocMstrCnct;
	var mbcNumMstr,mbcNumMasterCnct;
	var mboNumGen;
	var mbcNumGen;
	var mboNumAssociationNoLink;
	var mbcSIMNumInfo;
	var mbIsRec;
	var msAssociationId		= """";
	var msParAssId			= """";
	var msParRowId			= """";
	var msNumId				= """";
	var msParAssocId		= """";
	var msRuleType			= """";
	var msRowId				= """";
	var msConcatNumberType	= """";
	var msAssocStartId		= """";
	var marrCnctId 			= new Array();
	var marrCnctIdUpd 		= new Array();
	var marrConcatNumber 	= new Array();
	var marrNumId 			= new Array();
	var marrNumIdMstr 		= new Array();
	var marrCnctIdStsChk    = new Array();
	var miCnctIdCnt 		= 0;
	var miCnctIdCntUpd 		= 0;
	var miNumIdCnt			= 0;
	var miNumId 			= 0;
	var miNumIdMstr			= 0;
	var miCnctIdStsChkCnt   = 0; 
	var strErrVal   = """";
	var strErrCode  = """";
	// below 1.3
	var byPassDeassociation= """";
	// above 1.3
	psOp.SetProperty(""strErrVal"","""");
	psOp.SetProperty(""strErrCode"","""");
	mboNumAssociation 		= TheApplication().GetBusObject(""RMS NM Number Association Service"");
	mbcNumAssociationMstr 	= mboNumAssociation.GetBusComp(""RMS NM Number Association Master"");
	mbcNumAssStartNum 		= mboNumAssociation.GetBusComp(""RMS NM Number Association Start Number"");
	mbcSIMNumInfo           = mboNumAssociation.GetBusComp(""RMS NM SIM ORDER LINE ITEM"");
	mboNumGen 				= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	mbcNumGen  				= mboNumGen.GetBusComp(""RMS NM Number Enquiry"");
	mboNumAssociationNoLink = TheApplication().GetBusObject(""RMS NM Number Association"");
	mbcNumAssNumType 		= mboNumAssociationNoLink.GetBusComp(""RMS NM Association Number Type Display"");	
	mbcNumAssDtl 			= mboNumAssociation.GetBusComp(""RMS NM Number Association Detail"");	
	mbcNumAssocMstrCnct 	= mboNumAssociation.GetBusComp(""RMS NM Number Association Master Concat"");		
	mbcNumMasterCnct 		= mboNumAssociation.GetBusComp(""RMS NM Number Master Concat"");
	try {
			//below 1.3
			byPassDeassociation = GetSysPrefValue();
			//above 1.3
			with(mbcNumAssociationMstr) {
			ActivateField(""Association Id"");
			ActivateField(""Rule Type"");
			ClearToQuery();
			SetSearchSpec(""Id"",msAssocId);
			ExecuteQuery(ForwardOnly);
			FirstRecord();
			msAssociationId = GetFieldValue(""Association Id"");
			msRuleType = GetFieldValue(""Rule Type"");
		}
	}
	catch (e) {
		strErrVal  = TheApplication().LookupMessage(""User Defined Errors"",""RMSASS008"");
		strErrCode = ""RMSASS008"";
		psOp.SetProperty(""strErrVal"",strErrVal);
		psOp.SetProperty(""strErrCode"",strErrCode);
		return(strErrVal);
	}
// below 1.2
		if(mbcNumAssociationMstr.GetFieldValue(""Status"")==TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""ASSOCIATED"")) {
// above 1.2		
		mbcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
		mbcNumAssociationMstr.WriteRecord();
	}
//The Code below checks whether the status of the associated numbers have changed.
	with(mbcNumAssocMstrCnct){
		ActivateField(""Association Id"");
		ActivateField(""Concat Id"");
		ClearToQuery();
		SetSearchSpec(""Association Id"",msAssocId);
		ExecuteQuery();
		var blnIsRec = FirstRecord();
		while(blnIsRec) {
			marrCnctIdStsChk[miCnctIdStsChkCnt++] = GetFieldValue(""Concat Id"");
			blnIsRec = NextRecord();
		}
	}
	for(miCnctIdStsChkCnt = 0;miCnctIdStsChkCnt < marrCnctIdStsChk.length; miCnctIdStsChkCnt++) {
		with(mbcNumMasterCnct){
			ActivateField(""Concat Id"");
			ActivateField(""Status Bfr Assoc"");
			ActivateField(""Status"");
			ClearToQuery();
			SetSearchSpec(""Concat Id"",marrCnctIdStsChk[miCnctIdStsChkCnt]);
			ExecuteQuery();
			var blnIsrec = FirstRecord();
			while(blnIsrec) {
				if(GetFieldValue(""Status"") != GetFieldValue(""Status Bfr Assoc"")){	
					//below 1.3
					if((byPassDeassociation != ""Y"") || (msRuleType != TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) || ((GetFieldValue(""Status"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE"")) && (GetFieldValue(""Status"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""))))
			  		  {
					//above 1.3
						mbcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""ASSOCIATED""));
						mbcNumAssociationMstr.WriteRecord();
						strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASS011"");
						strErrCode = ""RMSASS011"";
						psOp.SetProperty(""strErrVal"",strErrVal);
						psOp.SetProperty(""strErrCode"",strErrCode);
						//below 1.3
						mbcNumAssociationMstr 	= null;
						mbcNumAssDtl 			= null;
						mbcNumAssocMstrCnct 	= null;		
						mbcNumMasterCnct 		= null;
						mbcNumAssStartNum		= null;
						mbcSIMNumInfo 			= null;
						mboNumAssociation 		= null;
						mbcNumAssNumType 		= null;
						mboNumAssociationNoLink = null;
						mbcNumGen  				= null;	
						mboNumGen 				= null;
						marrCnctId 				= null;
						marrCnctIdUpd 			= null;
						marrConcatNumber 		= null;
						marrNumId 				= null;
						marrNumIdMstr 			= null;
						marrCnctIdStsChk    	= null;
						return(strErrVal);
					   }//End of if((byPassDeassociation != ""Y"")
					   //above 1.3	
				} 
				blnIsrec = NextRecord();
			}
		}	
	}
//The Code below checks whether the associated number is used by any other rule or not.
//If it is not used then the ids of the concatenated numbers are populated in an array.		
	with(mbcNumAssocMstrCnct) {
		ActivateField(""Concat Id"");
		ActivateField(""Flag"");
		ClearToQuery();
		SetSearchSpec(""Association Id"",msAssocId);
		SetSearchSpec(""Flag"",""Y"");
		ExecuteQuery(ForwardOnly);
		if(FirstRecord()) {
			mbcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""ASSOCIATED""));
			mbcNumAssociationMstr.WriteRecord();
//			RefreshingBc(mbcNumAssociationMstr,msAssocId);
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASS012"");
			strErrCode = ""RMSASS012"";
			psOp.SetProperty(""strErrVal"",strErrVal);
			psOp.SetProperty(""strErrCode"",strErrCode);
			return(strErrVal);
		}
		ClearToQuery();
//below 1.2
		//SetSearchSpec(""Id"",msAssocId);
		SetSearchSpec(""Association Id"",msAssocId);
//above  1.2		
		ExecuteQuery(ForwardOnly);
		mbIsRec = FirstRecord();
		
		while(mbIsRec) {
			marrCnctId[miCnctIdCnt] = GetFieldValue(""Concat Id"");
			miCnctIdCnt++;
			mbIsRec = NextRecord();
		}
	}
//The code below get all those  concat Ids that has to be updated with the parent associated number in case of child rule.
	if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) {
		with(mbcNumAssStartNum) {
			ActivateField(""Parent Ass Id"");
			ClearToQuery();
			SetSearchSpec(""Ass Id"",msAssocId);
			SetSearchSpec(""Sequence"",1);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
				msParAssocId = GetFieldValue(""Parent Ass Id"");
		}	
		RMSND_Cnct_NumberType(msParAssocId,msConcatNumberType,mbcNumAssociationMstr);
		with(mbcNumAssocMstrCnct) {
			for(var miCnctIdCnt = 0;ToInteger(miCnctIdCnt) < ToInteger(marrCnctId.length);miCnctIdCnt++) {
				ActivateField(""Concat Id"");
				ClearToQuery();
				SetSearchSpec(""Association Id"",msParAssocId);
				SetSearchSpec(""Concat Id"",marrCnctId[miCnctIdCnt]);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord()) {
					marrCnctIdUpd[miCnctIdCntUpd] =	marrCnctId[miCnctIdCnt];			
					miCnctIdCntUpd++;
				}
			}
		}
		with(mbcNumAssDtl) {
			for(miCnctIdCntUpd = 0;ToInteger(miCnctIdCntUpd) < ToInteger(marrCnctIdUpd.length);miCnctIdCntUpd++) {
				miNumIdCnt	=0;		
				ActivateField(""Parent Ass Id"");
				ActivateField(""Id"");
				ActivateField(""Source Num Id"");
				ActivateField(""Destination Num Id"");
				ClearToQuery();
				SetSearchSpec(""Association Id"",msParAssocId);
				SetSearchSpec(""Number Association Concat Id"",marrCnctIdUpd[miCnctIdCntUpd]);
				ExecuteQuery();
				if(FirstRecord()) {
					msParAssId = GetFieldValue(""Parent Ass Id"");
					msParRowId = GetFieldValue(""Id"");
					if(msParAssId == """") 
						msRowId = msParRowId;
				}
				if(msParAssId != """") {
					while(FirstRecord()) {
						ClearToQuery();
						SetSearchSpec(""Association Id"",msParAssocId);
						SetSearchSpec(""Id"",msParAssId);
						ExecuteQuery();
						if(FirstRecord()) {
							msParAssId = GetFieldValue(""Parent Ass Id"");
							msParRowId = GetFieldValue(""Id""); 
							if(msParAssId == """") {
								msRowId = msParRowId;
								break;
							}
						}
					}
				}
				ClearToQuery();
				SetSearchSpec(""Association Id"",msParAssocId);
				SetSearchSpec(""Id"",msRowId);
				ExecuteQuery();
				if(FirstRecord()) {
					msParAssId = GetFieldValue(""Id"");
					with(mbcNumGen)	{
						ActivateField(""Number String"");
						ClearToQuery();
						SetSearchSpec(""Id"",mbcNumAssDtl.GetFieldValue(""Source Num Id""));
						marrNumId[miCnctIdCntUpd][miNumIdCnt++] = mbcNumAssDtl.GetFieldValue(""Source Num Id"");
						marrNumIdMstr[miNumIdMstr++] = mbcNumAssDtl.GetFieldValue(""Source Num Id"");					
						ExecuteQuery();
						if(FirstRecord())
							marrConcatNumber[miCnctIdCntUpd] = GetFieldValue(""Number String"") + ' / ';	
						ClearToQuery();
						SetSearchSpec(""Id"",mbcNumAssDtl.GetFieldValue(""Destination Num Id""));
						marrNumId[miCnctIdCntUpd][miNumIdCnt++] = mbcNumAssDtl.GetFieldValue(""Destination Num Id"");
						marrNumIdMstr[miNumIdMstr++] = mbcNumAssDtl.GetFieldValue(""Destination Num Id"");					
						ExecuteQuery();
						if(FirstRecord())
							marrConcatNumber[miCnctIdCntUpd] = marrConcatNumber[miCnctIdCntUpd] + GetFieldValue(""Number String"") + ' / ';
					}
				}
				while(FirstRecord()) {
					ClearToQuery();
					SetSearchSpec(""Association Id"",msParAssocId);
					SetSearchSpec(""Parent Ass Id"",msParAssId);
					ExecuteQuery();
					if(FirstRecord()) {
						msParAssId = GetFieldValue(""Id"");
						with(mbcNumGen) {								 
							ClearToQuery();
							SetSearchSpec(""Id"",mbcNumAssDtl.GetFieldValue(""Destination Num Id""));
							marrNumId[miCnctIdCntUpd][miNumIdCnt++] = mbcNumAssDtl.GetFieldValue(""Destination Num Id"");
							marrNumIdMstr[miNumIdMstr++] = mbcNumAssDtl.GetFieldValue(""Destination Num Id"");					
							ExecuteQuery();
							if(FirstRecord())
								marrConcatNumber[miCnctIdCntUpd] = marrConcatNumber[miCnctIdCntUpd] + GetFieldValue(""Number String"") + ' / ';	
						}
					}
				}		
				marrConcatNumber[miCnctIdCntUpd] = marrConcatNumber[miCnctIdCntUpd].substring(0,(marrConcatNumber[miCnctIdCntUpd].length-3));
				with(mbcNumAssNumType) {
					ActivateField(""Associated Number"");
					ActivateField(""Associated Type"");
					ClearToQuery();
					SetSearchSpec(""Id"",marrCnctIdUpd[miCnctIdCntUpd]);
					ExecuteQuery();
					if(FirstRecord()) {
						SetFieldValue(""Associated Number"",marrConcatNumber[miCnctIdCntUpd]);
						SetFieldValue(""Associated Type"",msConcatNumberType);
						WriteRecord();
					}
				}
			}
		}
	}
// The following code deletes the appropriate records for each concat ids.
	miCnctIdCntUpd = 0;
	for(var miCnctIdCnt = 0;ToInteger(miCnctIdCnt) < ToInteger(marrCnctId.length);miCnctIdCnt++) {
		if(marrCnctId[miCnctIdCnt] != marrCnctIdUpd[miCnctIdCntUpd]) {
			with(mbcNumAssNumType) {
				ClearToQuery();
				SetSearchSpec(""Id"",marrCnctId[miCnctIdCnt])
				ExecuteQuery()
				if(FirstRecord()) {
					with(mbcNumMasterCnct) {
						ActivateField(""Number Id"");
						ClearToQuery();
						SetSearchSpec(""Concat Id"",marrCnctId[miCnctIdCnt]);
						ExecuteQuery();
						mbIsRec = FirstRecord();
						while(mbIsRec) {
							msNumId = GetFieldValue(""Number Id"");
							if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) {
								for(miNumIdCnt =0 ;ToInteger(miNumIdCnt) < ToInteger(marrNumIdMstr.length);miNumIdCnt++) {
									if(GetFieldValue(""Number Id"") == marrNumIdMstr[miNumIdCnt]) {
										miNumId = 1;
										break;
									}
								}	
							}
							msAssocStartId = RMSND_Update_Deassoc_NumMstr(mbcNumGen,msNumId,miNumId) 								
							mbIsRec=NextRecord();
							miNumId = 0;
						}
						miNumId = 0;
					}	
					DeleteRecord();
				}
			}
		}
		with(mbcNumAssocMstrCnct) {
			ClearToQuery();
			SetSearchSpec(""Association Id"",msAssocId);
			SetSearchSpec(""Concat Id"",marrCnctId[miCnctIdCnt]);
			ExecuteQuery();
			if(FirstRecord())	
				DeleteRecord();
		}
		with(mbcNumAssDtl) {
			ClearToQuery();
			SetSearchSpec(""Association Id"",msAssocId);
			SetSearchSpec(""Number Association Concat Id"",marrCnctId[miCnctIdCnt]);
			ExecuteQuery();
			while(FirstRecord()) 
				DeleteRecord();
		}
		with(mbcNumMasterCnct) {
			ActivateField(""Number Id"");
			ClearToQuery();
			SetSearchSpec(""Concat Id"",marrCnctId[miCnctIdCnt]);
			ExecuteQuery();
			mbIsRec = FirstRecord();
			while(mbIsRec) {
				msNumId = GetFieldValue(""Number Id"");
				if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"") && marrCnctId[miCnctIdCnt] == marrCnctIdUpd[miCnctIdCntUpd]) {
					for(miNumIdCnt=0 ;ToInteger(miNumIdCnt) < ToInteger(getArrayLength(marrNumId[miCnctIdCntUpd]));miNumIdCnt++) {
						if(GetFieldValue(""Number Id"") == marrNumId[miCnctIdCntUpd][miNumIdCnt]) {
							miNumId = 1;
							break;
						}
					}	
				}
				msAssocStartId = RMSND_Update_Deassoc_NumMstr(mbcNumGen,msNumId,miNumId) 					
				if(ToInteger(miNumId) == 0) {
					if(!(PreviousRecord())) {
						DeleteRecord();
					}
					else {
						mbIsRec = NextRecord();
						mbIsRec = DeleteRecord();
						mbIsRec = NextRecord();
					}
				}
				if(miNumId == 1)
					mbIsRec=NextRecord();
				miNumId = 0;
			}
		}	
		if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) {
			if(marrCnctId[miCnctIdCnt] == marrCnctIdUpd[miCnctIdCntUpd]) {
				with(mbcNumAssocMstrCnct) {
					ActivateField(""Concat Id"");
					ActivateField(""Flag"");
					ClearToQuery();
					SetSearchSpec(""Association Id"",msParAssocId);
					SetSearchSpec(""Concat Id"",marrCnctId[miCnctIdCnt])
					ExecuteQuery();
					if(FirstRecord()) {
						SetFieldValue(""Flag"",""N"");
						WriteRecord(); 
					}
				}
			}
		}
		if(marrCnctId[miCnctIdCnt] == marrCnctIdUpd[miCnctIdCntUpd])
			miCnctIdCntUpd++;
	}	
	if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""PARENT"") && msAssocStartId != """")
		DeleteSIMOrderNum(mbcSIMNumInfo,msAssocStartId);
	if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) 
	{
		with(mbcNumAssocMstrCnct) 
		{
			ClearToQuery();
			SetSearchSpec(""Association Id"",msParAssocId);
			SetSearchSpec(""Flag"",""N"");
			ExecuteQuery();
		}	
	}
	with(mbcNumAssociationMstr) 
	{
		if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"") && (mbcNumAssocMstrCnct.FirstRecord())) 
		{
			ActivateField(""Flag"");
			ActivateField(""Status"");
			ClearToQuery();
			SetSearchSpec(""Id"",msParAssocId);
			ExecuteQuery();
			if(FirstRecord()) 
			{
				SetFieldValue(""Flag"",""N"");
				WriteRecord();
			}
		}
		ActivateField(""Status"");		
		ClearToQuery();
		SetSearchSpec(""Id"",msAssocId);
		ExecuteQuery();
		if(FirstRecord()) {			
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));
			WriteRecord(); 
		}
	}	
	//free object definitions
	mbcNumAssociationMstr 	= null;
	mbcNumAssDtl 			= null;
	mbcNumAssocMstrCnct 	= null;		
	mbcNumMasterCnct 		= null;
	mbcNumAssStartNum		= null;
	mbcSIMNumInfo 			= null;
	mboNumAssociation 		= null;
	mbcNumAssNumType 		= null;
	mboNumAssociationNoLink = null;
	mbcNumGen  				= null;	
	mboNumGen 				= null;
	marrCnctId 				= null;
	marrCnctIdUpd 			= null;
	marrConcatNumber 		= null;
	marrNumId 				= null;
	marrNumIdMstr 			= null;
	marrCnctIdStsChk    	= null;
	strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSASS013"");
	strErrCode = ""RMSASS013"";
	psOp.SetProperty(""strErrVal"",strErrVal);
	psOp.SetProperty(""strErrCode"",strErrCode);
	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Association RMSND_Update_Deassoc_NumMstr Method 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/11/2003 	1.0   		MBT						   	Created      28/11/2003       *
**************************************************************************************/
function RMSND_Update_Deassoc_NumMstr(bcNumGen,strNumId,flgNumId) 
{
	//var psInputs	= TheApplication().NewPropertySet();
	///var psOutputs	= TheApplication().NewPropertySet();
	
	//var bsBlock 	= TheApplication().GetService(""RMS RMS Block Calc"");
	
	//var msFromStatus	= """";
	var msAssocStartId = """";
	with(bcNumGen) {
		ActivateField(""Is Associated"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""IMSI Assoc"");
		ActivateField(""Status"");
		ActivateField(""Status Bfr Assoc"");									
		ActivateField(""Alloc Id"");
		ActivateField(""Reserve Id"");
		ActivateField(""Assigned To"");
		ActivateField(""Block Id"");
		ClearToQuery();
		SetSearchSpec(""Id"",strNumId);
		ExecuteQuery();
		if(FirstRecord()) {
			if(flgNumId == 0) {
				
				SetFieldValue(""Is Associated"",""N"");
				msAssocStartId = GetFieldValue(""Assoc Start Id"");
				SetFieldValue(""Assoc Start Id"","""");
				SetFieldValue(""Status"",GetFieldValue(""Status Bfr Assoc""));
				SetFieldValue(""IMSI Assoc"",""N"");
				
	/*		Commented as there this condition is not necessary for release phase 1A	
			if(GetFieldValue(""Status Bfr Assoc"") != GetFieldValue(""Status"")) {		
					psInputs.SetProperty(""From Status"",msFromStatus);
					psInputs.SetProperty(""To Status"",GetFieldValue(""Status""));
					psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
					bsBlock.InvokeMethod(""UpdateNumberBlock"",psInputs,psOutputs);
				}
	*/			
			}
			WriteRecord(); 
		}
	}
	return (msAssocStartId);
	//psInputs = null;
	//psOutputs = null;
	//bsBlock = null;
}
"/**************************************************************************************
* Name          : RMS NM Number Association RefreshRecord Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File					              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/11/2003 	1.0   		MBT						   	Created      30/12/2003       *
**************************************************************************************/

function RefreshRecord_TO_BE_DELETED(boName,bcName){

	var psInputs;
	var psOutputs;
	var bsSIMNMRef;
	
	try{
	
	psInputs	= TheApplication().NewPropertySet();
	psOutputs	= TheApplication().NewPropertySet();
	
	bsSIMNMRef 	= TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
										
	psInputs.SetProperty(""Business Component Name"",bcName);
	psInputs.SetProperty(""Business Object Name"",boName);
	bsSIMNMRef.InvokeMethod(""Refresh Business Component"",psInputs,psOutputs);
	
	} catch(e) {
		throw(e);
	} finally {
		psInputs	= null;
		psOutputs	= null;
		bsSIMNMRef 	= null;
		
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Association RefreshingBc Method    		 	  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   By     	Comments
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   MBT		Created      12/12/2003       *
20060622        1.1   Prasad    SiebelES#3 Incorporated
*************************************************************************************
*/
function RefreshingBc_TO_BE_DELETED(bcNumAssocMstr,AssocId){		

//-------------------------------------------------------------------
//Query Association Master and move the pointer to the current record.
//-------------------------------------------------------------------

	var strPtrForCurrRec;
	with(bcNumAssocMstr) {
//1.1 below TODO
/*
		bcNumAssocMstr.InvokeMethod(""RefreshRecord"");
		bcNumAssocMstr.InvokeMethod(""UpdateLinks"");
*/
		ClearToQuery();
		ExecuteQuery();
		strPtrForCurrRec = FirstRecord();
	
		while(strPtrForCurrRec) {
			if(GetFieldValue(""Id"") == AssocId)
				break;
			strPtrForCurrRec = NextRecord();
		}
//1.1 above
	}
}
"/**************************************************************************************
RMS NM Number Association Service
This BS will always work on a single record in Association Master BC.
***************************************************************************************
* Date    	Ver   By      Comments                                          Reviewed Date
***************************************************************************************
22/11/2003  1.0   MBT	  Created                                           28/11/2003
31/05/2005  1.1   MBT	  P.Gautaman(Updated)                               31/05/2005
20060622    1.2   Prasad  SiebelES#3 Return errors in o/p propset, rather than RaiseError, 
                            removed RefreshingBC
                            Removed PreCanInvoke code which is unnecessary
                            Changes are radical, hence not all of the old code could be retained
                            Unused functions are yet to be marked so/deleted
20060706    1.3   Prasad  Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	Outputs.SetProperty(""Error Code"","""");
	Outputs.SetProperty(""Error Message"","""");
	var intReturn = ContinueOperation;
	var psAssocParam;
	var psNumSet;
	var psfnArg = TheApplication().NewPropertySet();		//For passing output arguments from functions
	var marrNumSet;
	var strObjectId;
	var strErrVal = """";
	var strErrCode = """";
	var strRuleId;
	var intNumOfElement;
	var marrSource = new Array();
//this will be ROW_ID of master record	
	var strAssocId = Inputs.GetProperty(""AssociationId"");
	var bIsAssocMstrRec=false;
	var strAssocMstrStatus;
	try{ 
		var boNumAssociation = TheApplication().GetBusObject(""RMS NM Number Association"");
		var bcNumAssociationMstr = boNumAssociation.GetBusComp(""RMS NM Number Association Master"");
	 	var bcNumAssociationStartNum = boNumAssociation.GetBusComp(""RMS NM Number Association Start Number"");
		bcNumAssociationMstr.ActivateField(""Status"");
		bcNumAssociationMstr.ActivateField(""Association Id"");
		bcNumAssociationMstr.ActivateField(""Rule Type"");
		bcNumAssociationMstr.SetSearchSpec(""Id"",strAssocId);
		bcNumAssociationMstr.ExecuteQuery();
		bIsAssocMstrRec = bcNumAssociationMstr.FirstRecord();
		if(!bIsAssocMstrRec)
		{//MUST have a record else error out
			Outputs.SetProperty(""Error Code"",""RMS_NO_RECORD"");
			Outputs.SetProperty(""Error Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMS_NO_RECORD"",MethodName));
			intReturn = CancelOperation;
		}
		else//process ONLY if a record was found
		{
			strAssocMstrStatus = bcNumAssociationMstr.GetFieldValue(""Status"");
			bcNumAssociationStartNum.ExecuteQuery();
			switch (MethodName)
			{
				case ""AssociateNumbers"":
				  	intReturn = CancelOperation;
					psfnArg.SetProperty(""strErrVal"","""");
					psfnArg.SetProperty(""strErrCode"","""");
//try to lock the record first, get the status (must be pending), then change the status to (processing) 
//if any write error, this means record modified by other user, set error
//Check current status
					if(strAssocMstrStatus == TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"")) 
					{
						Outputs.SetProperty(""Error Code"",""RMSASS009"");
						Outputs.SetProperty(""Error Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS009""));
						intReturn = CancelOperation;
						break;
					}
					else if(strAssocMstrStatus == TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING"")) 
					{
						try
						{
							bcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
							bcNumAssociationMstr.WriteRecord();//here we may get an error if some other session has done changes
						}
						catch(e)
						{
							Outputs.SetProperty(""Error Code"",""RMSASS009"");
							Outputs.SetProperty(""Error Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS009""));
							intReturn = CancelOperation;
							break;
						}
					}
					else//some other sttaus? Do not allow
					{
						Outputs.SetProperty(""Error Code"",""RMS_NO_RECORD"");
						Outputs.SetProperty(""Error Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMS_NO_RECORD"",MethodName));
						intReturn = CancelOperation;
						break;
					}
					psAssocParam = GetAssocParam(Inputs,bcNumAssociationMstr,bcNumAssociationStartNum,psfnArg);
					strErrVal    = psfnArg.GetProperty(""strErrVal"");
					strErrCode   = psfnArg.GetProperty(""strErrCode"");
				  	if(strErrVal != """") 
				  	{
			  			bcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""))
			  			bcNumAssociationMstr.WriteRecord();
						Outputs.SetProperty(""Error Code"",strErrCode);
						Outputs.SetProperty(""Error Message"",strErrVal);
				    	break;//exit out of the case statement
				  	}
					BuildSourceArray(marrSource,bcNumAssociationMstr,psAssocParam);
					psfnArg.SetProperty(""strErrVal"","""");
					psfnArg.SetProperty(""strErrCode"","""");
					psNumSet     = ValidateQty(psAssocParam,psfnArg);
					strErrVal    = psfnArg.GetProperty(""strErrVal"");
					strErrCode   = psfnArg.GetProperty(""strErrCode"");
//-----------------------------------------------------------------
//1.1	Added to update the number set based on Splitted record id.
//-----------------------------------------------------------------
//				psNumSet = UpdateSplitNumSet(psNumSet);
//----------------------------------------------------------------------------
// Updating the status of Assoc Mastr to Pending when an error is encountered.
//----------------------------------------------------------------------------
				  	if(strErrVal != """")
				  	{
			  			bcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""))
			  			bcNumAssociationMstr.WriteRecord();
						Outputs.SetProperty(""Error Code"",strErrCode);
						Outputs.SetProperty(""Error Message"",strErrVal);
				    	break;//exit out of the case statement
				  	}
					else 
				  		UpdateAssocDetails(psAssocParam,strAssocId);
					AssociateNumbers(psNumSet, psAssocParam,marrSource,psfnArg);
					strErrVal    = psfnArg.GetProperty(""strErrVal"");
					strErrCode   = psfnArg.GetProperty(""strErrCode"");
//----------------------------------------------------------------------------
// Updating the status of Assoc Mstr to Pending when an error is encountered.
//----------------------------------------------------------------------------
				  	if(""RMSASS001"" != strErrCode)//RMSASS001 is actually status mesg for Successful Association
					{
			  			bcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));
			  			bcNumAssociationMstr.WriteRecord();
				  	}//anyway the raiseerror was being done, moved out of if
					Outputs.SetProperty(""Error Code"",strErrCode);
					Outputs.SetProperty(""Error Message"",strErrVal);
			    	break;//exit out of the case statement
				case ""DeassociateNumbers"":
				  	intReturn = CancelOperation;
					if(strAssocMstrStatus == TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"")) 
					{
						Outputs.SetProperty(""Error Code"",""RMSASS010"");
						Outputs.SetProperty(""Error Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS010""));
						intReturn = CancelOperation;
						break;
					}
					else if(strAssocMstrStatus == TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""ASSOCIATED"")) 
					{
						try
						{
							bcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
							bcNumAssociationMstr.WriteRecord();//here we may get an error if some other session has done changes
						}
						catch(e)
						{
							Outputs.SetProperty(""Error Code"",""RMSASS010"");
							Outputs.SetProperty(""Error Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS010""));
							intReturn = CancelOperation;
							break;
						}
					}
					else//some other sttaus? Do not allow
					{
						Outputs.SetProperty(""Error Code"",""RMS_NO_RECORD"");
						Outputs.SetProperty(""Error Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMS_NO_RECORD"",MethodName));
						intReturn = CancelOperation;
						break;
					}
					strErrVal = RMSND_DeAssociation(strAssocId,psfnArg);
					Outputs.SetProperty(""Error Code"",psfnArg.GetProperty(""strErrCode""));
					Outputs.SetProperty(""Error Message"",psfnArg.GetProperty(""strErrVal""));
				  	break;
//------------------------------------------------------------
// Inserting the Association Parameters with the number types.
//------------------------------------------------------------
//this can be done by anyone anywhere? Not a UI driven method hence concurrency is controlled
			    case ""UpdateAssocParameters"":
			       	intReturn = CancelOperation;
			    	UpdateAssocParameters(Inputs,boNumAssociation,bcNumAssociationStartNum);
					bcNumAssociationMstr.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));
					bcNumAssociationMstr.WriteRecord();
			    	break;	
//-----------------------------------------------------------
// Setting the quantity of the association parameters record.
//-----------------------------------------------------------
//this can be done by anyone anywhere? Not a UI driven method hence concurrency is controlled
			    case ""UpdateQuantity"":
			       	intReturn = CancelOperation;
			    	UpdateQuantity(Inputs,boNumAssociation,bcNumAssociationMstr,bcNumAssociationStartNum);
			    	break;	
//for estimating the end numbers if the user wants to see the estimated end number.Function provided 
//separately becase of performace reasons, as there will normally be more than 1000 numbers for association.
//this can be done by anyone anywhere? Not a UI driven method hence concurrency is controlled
			    case ""EstimateEndNumber"":	
			    	intReturn = CancelOperation;
//To disable the error messages in GetAssocpara function
//			    	Inputs.SetProperty(""CallSource"",""Applet"");
//Get Association Parameters. same function is used for association function also
			    	psAssocParam = GetAssocParam(Inputs,bcNumAssociationMstr,bcNumAssociationStartNum,psfnArg);
//ignore errors? There was a switch that if CallSource = Applet, do not check errors			    	
//Estimate the end numbers for all records with start date specified.
			    	psfnArg.SetProperty(""strErrVal"","""");
			    	psfnArg.SetProperty(""strErrCode"","""");
		    		EstimateEndNumbers(psAssocParam,psfnArg,Inputs.GetProperty(""AssociationId""));
					Outputs.SetProperty(""Error Code"",psfnArg.GetProperty(""strErrCode""));
					Outputs.SetProperty(""Error Message"",psfnArg.GetProperty(""strErrVal""));
				  	break;
			    default:
			    	break;
		    }
	    }
	}
	catch(e)
	{
		//throw e;
//must return an error code rather than throwing an error
		Outputs.SetProperty(""Error Code"",""RMS_UNHNDLED_EXCEP"");
		Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_UNHNDLED_EXCEP"",e.errCode,e.errText));
	}
	finally 
	{
		bcNumAssociationMstr 		= null;
	 	bcNumAssociationStartNum 	= null;
		boNumAssociation 			= null;
		marrSource					= null;		
		psAssocParam				= null;
		psNumSet					= null;
		marrNumSet					= null;
//1.3 below
		psfnArg                     = null;
//1.3 above		
	}
	return(intReturn);
}
function SetArray(&arrArray,d1,d2,d3,d4,&value)
{
	try{
	
		var strSTEng = TheApplication().GetProfileAttr(""RMS_ST_ENGINE"");

		if ((d2 != ""?"")) {
			if ((typeof(arrArray[d1]) != "function"") && (strSTEng == ""Y"")){
				arrArray[d1] = new Array();
			}
		} else {
			arrArray[d1] = value;
			return(true);
		}
		if ((d3 != ""?"")) {
			if ((typeof(arrArray[d1][d2]) != "function"") && (strSTEng == ""Y""))		
				arrArray[d1][d2] = new Array();
		} else {
			arrArray[d1][d2] = value;
			return(true);
		}
		if ((d4 != ""?"")) {
			if((typeof(arrArray[d1][d2][d3]) != "function"") && (strSTEng == ""Y""))
				arrArray[d1][d2][d3] = new Array();
		} else {
				arrArray[d1][d2][d3] = value;
				return(true);
		}
	} catch(e) {
		var test = e.errText;
		throw(e);
	}
}
function SetCnctRecCnt(marrSource) {
	var miNumOfCnctRec = 0;
	var msNumType = ""NumType"";
	for(var i=0;i<getArrayLength(marrSource);i++) {
		miNumOfCnctRec = ToInteger(miNumOfCnctRec) + ToInteger(marrSource[i][msNumType][1]);
	}

	if(miNumOfCnctRec==0)
		return(1);
	else
		return(miNumOfCnctRec);
}
function SetNumCnctRec(&marrSource,msNumType,msDestNum) {
	var intNumRecCnt;
	for(var i = 0;i<getArrayLength(marrSource);i++) {
		intNumRecCnt = 1;
		for(var j=0;j<getArrayLength(marrSource[i][msDestNum]);j++) {
			if(marrSource[i][msDestNum][j] != ""X"")
				intNumRecCnt = intNumRecCnt * marrSource[i][msDestNum][j];
		}
		marrSource[i][msNumType][1] = intNumRecCnt;
	}
	
}
"/**************************************************************************************
* Name          : RMS NM Number Association Calculate Quantity		    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 27/07/2005 	1.0   		MBT						   	Created      27/07/2005       *
**************************************************************************************/
function SortGen(msGenLvl) {
	var marrGenSup	= new Array();
	var strNewString = """";	
	
	marrGenSup	= msGenLvl.split(""/"");
	marrGenSup.sort();
	
	for(var i=0;i<getArrayLength(marrGenSup);i++) {
		if(strNewString =="""")
			strNewString = marrGenSup[i];
		else
			strNewString  = strNewString+ ""/"" + marrGenSup[i];
	}
	return(strNewString)
}
function SynchronizeArrays(&marrSource,msTypArr)
{
	var marrInnerArray	 = new Array();
	marrInnerArray = marrSource;
	for(var intOuterArrCnt=0;intOuterArrCnt < getArrayLength(marrSource);intOuterArrCnt++)	{
		for(var intInnerArrCnt=ToInteger(intOuterArrCnt)+1;intInnerArrCnt<getArrayLength(marrInnerArray);intInnerArrCnt++) {
			var mintOutDestLen = getArrayLength(marrSource[intOuterArrCnt][msTypArr]);
			var mintInnDestLen = getArrayLength(marrSource[intInnerArrCnt][msTypArr]);
			if(mintOutDestLen < mintInnDestLen) {
				for(var i = mintOutDestLen;i<mintInnDestLen;i++)
					marrSource[intOuterArrCnt][msTypArr][i] = ""X"";
			}
		}
	}

	var marrInnerArray	 = new Array();
	marrInnerArray = marrSource;
	for(var intOuterArrCnt=ToInteger(getArrayLength(marrSource))-1;intOuterArrCnt>=0;intOuterArrCnt--){
		for(var intInnerArrCnt=ToInteger(intOuterArrCnt)-1;intInnerArrCnt>=0;intInnerArrCnt--) {
			var mintOutDestLen = getArrayLength(marrSource[intOuterArrCnt][msTypArr]);
			var mintInnDestLen = getArrayLength(marrSource[intInnerArrCnt][msTypArr]);
			if(mintOutDestLen < mintInnDestLen) {
				for(var i = mintOutDestLen;i<mintInnDestLen;i++)
					marrSource[intOuterArrCnt][msTypArr][i] = ""X"";
			}
		}
	}	
}
"/**************************************************************************************
* Name          : RMS NM Number UpdateAssocDetails 	  							  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Function to update end number of association start parameters       *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/11/2003 	1.0   		MBT						   	Created      28/11/2003       *
**************************************************************************************/
function UpdateAssocDetails(&psAssocParam,msAssocId) 
{
	var psAssocParamRec;
	var boNumAssociation			= TheApplication().GetBusObject(""RMS NM Number Association"");
	var bcNumAssociationStartNum 	= boNumAssociation.GetBusComp(""RMS NM Number Association Start Number"");
	for (var i=0;i<psAssocParam.GetChildCount();i++) 
	{
		psAssocParamRec = psAssocParam.GetChild(i);
		if(psAssocParamRec.GetProperty(""EndingNumber"") != """") 
		{
			with(bcNumAssociationStartNum) 
			{
				ActivateField(""End Number"");
				ClearToQuery();
				SetSearchSpec(""Ass Id"",msAssocId);
				SetSearchSpec(""Sequence"",(i+1));
				ExecuteQuery(ForwardOnly);
				if(FirstRecord()) 
				{
					SetFieldValue(""End Number"",psAssocParamRec.GetProperty(""EndingNumber""));
					WriteRecord();
				}
			}
		}
	}
	bcNumAssociationStartNum	= null; 
	boNumAssociation			= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Association UpdateAssocMstr Method    		 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      28/12/2003       *
**************************************************************************************/
function UpdateAssocMstr(msRuleType,mbcNMNumAssocMstrCnct,mbcNMNumAssocMstr,msParentAssocMstrId,msAssocId)
{
	var strErrVal = """";
//	try{

	if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) {
		with(mbcNMNumAssocMstrCnct) {
			ClearToQuery();
			var strSearch = ""[Association Id] = '"" + msParentAssocMstrId + ""' AND "";
			strSearch = strSearch + ""[Flag] = 'N'"" ;

			SetSearchExpr(strSearch); 
	  	  	ExecuteQuery(1);
	   		FirstRecord();
		}
	}
	with(mbcNMNumAssocMstr) {
		ActivateField(""Flag"");
		ActivateField(""Status"");
		if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"") && !(mbcNMNumAssocMstrCnct.FirstRecord())) {
			ClearToQuery();
			SetSearchSpec(""Id"",msParentAssocMstrId);
			ExecuteQuery();
			if(FirstRecord()) {
				SetFieldValue(""Flag"",""Y"");
				WriteRecord();
			}
		}	
		ClearToQuery();
		SetSearchSpec(""Id"",msAssocId);
		ExecuteQuery(1);
		if(FirstRecord()) {
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""ASSOCIATED""));
			WriteRecord(); 
		}
	}	
	return(strErrVal);
/*
	} catch (e) {
		return(e.errText);
	}
*/
}
"/**************************************************************************************
* Name          : RMS NM Number Association Update Association Parameters		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      28/12/2003       *
* 31/05/2005	1.1			MBT							Gautaman	 31/05/2005		  *	
**************************************************************************************/
function UpdateAssocParameters(Inputs,boNumAssociation,bcNumAssociationStartNum){

	var intSeq=1;	
	var intRecCnt = 0;
	var intObjectId;
	var intRuleId;
	var intAssocId;
	
	var boAssRule; 
	var bcAssRuleMstr;
	var bcAssRuleDtl
	var intRuleId;
	var strPRuleId;
	var blnIsRecord;
	var strErrVal;
	var strRuleType;
	
	var arrDestTypeId 		= new Array();
	var arrDestSubTypeId 	= new Array();
//1.1 Added to set the split record id in Association Parameters	
	var arrSplitRecId		= new Array();
	var flgGlblVarbl;
	
//	intObjectId = Inputs.GetProperty(""Object Id"");
	intRuleId   = Inputs.GetProperty(""Rule Id"");
	intAssocId	= Inputs.GetProperty(""AssociationId"");
	
//	flgGlblVarbl = TheApplication().GetSharedGlobal(""g_flgAssMstr"");
//	if(flgGlblVarbl != ""Y"" ) {

		boAssRule = TheApplication().GetBusObject(""RMS NM Association Rule"");
		bcAssRuleMstr = boAssRule.GetBusComp(""RMS NM Association Rule Master"");		
		bcAssRuleDtl = boAssRule.GetBusComp(""RMS NM Association Rule Detail"");		

//---------------------------------------------------------------------------
//Querying Association Rule detail and populating the number id's in an array.
//---------------------------------------------------------------------------

		with(bcAssRuleMstr) {
	
			ActivateField(""Rule Type"");
			ActivateField(""Id"");
			ClearToQuery();
			SetSearchSpec(""Id"",intRuleId);
			ExecuteQuery(1);
			FirstRecord(); 
			strRuleType = GetFieldValue(""Rule Type"");
		}
		with(bcAssRuleDtl) {
			ActivateField(""Rule Id"");
			ActivateField(""Parent Rule Id"");
			ActivateField(""Source Number Type Id"");
			ActivateField(""Source Number Subtype Id"");
			ActivateField(""Destination Number Type Id"");
			ActivateField(""Destination Number Subtype Id"");
			ActivateField(""Sequence"");
			ActivateField(""Split"");			
			ActivateField(""Split Record Id"");			
			ClearToQuery();
			SetSearchSpec(""Rule Id"",intRuleId);
			SetSortSpec(""Sequence(ASCENDING)"");
			ExecuteQuery();
			blnIsRecord = FirstRecord(); 
			if(blnIsRecord) {
				strPRuleId = GetFieldValue(""Parent Rule Id"");	
				if(strPRuleId == """") {
					arrDestTypeId[intRecCnt] = GetFieldValue(""Source Number Type Id"");
					arrDestSubTypeId[intRecCnt] = GetFieldValue(""Source Number Subtype Id"");
					arrSplitRecId[intRecCnt] = """";
					intRecCnt++;
					GetDestType(bcAssRuleDtl,arrDestTypeId,arrDestSubTypeId,intRecCnt,arrSplitRecId);
				}
				else {
					intRecCnt++;
					GetDestType(bcAssRuleDtl,arrDestTypeId,arrDestSubTypeId,intRecCnt,arrSplitRecId);
				}
				intRecCnt++;
				blnIsRecord = NextRecord();
			}
			while(blnIsRecord) {
				GetDestType(bcAssRuleDtl,arrDestTypeId,arrDestSubTypeId,intRecCnt,arrSplitRecId);
				blnIsRecord = NextRecord();	
				intRecCnt++;
			}
		}

//-----------------------------------------------------------
//Populating the Association parameters with the number id's.
//-----------------------------------------------------------
	
		with(bcNumAssociationStartNum) {
		
			for(var intArrLen = 0;intArrLen < arrDestTypeId.length;intArrLen++) {
				if(intSeq == 1 && strPRuleId != """") {
					TheApplication().SetSharedGlobal(""g_flgQty"",""Y"");										
					NewRecord(1);
					SetFieldValue(""Rule Id"",strPRuleId);
					SetFieldValue(""Ass Id"",intAssocId);  
					SetFieldValue(""Sequence"",intSeq);
					TheApplication().SetSharedGlobal(""g_flgQty"",""Y"");										
					WriteRecord();
					intSeq++;
				}
				else {
					TheApplication().SetSharedGlobal(""g_flgQty"",""Y"");										
					NewRecord(1);
					SetFieldValue(""Ass Id"",intAssocId);
					SetFieldValue(""Type Id"",arrDestTypeId[intArrLen]);
					SetFieldValue(""Sub Type Id"",arrDestSubTypeId[intArrLen]);
					if(arrSplitRecId[intArrLen] != """")
						SetFieldValue(""Split Record Id"",arrSplitRecId[intArrLen]);
					SetFieldValue(""Sequence"",intSeq);
					TheApplication().SetSharedGlobal(""g_flgQty"",""Y"");										
					WriteRecord();
					intSeq++;
				}
				
			}
		
		}
//	}
//	TheApplication().SetSharedGlobal(""g_flgAssMstr"",""N"");

	bcAssRuleMstr 	= null;		
	bcAssRuleDtl 	= null;	
	boAssRule 		= null;
}
function UpdateBlock(&bcNumberMstr,msFromStatus)
{
	
	if(bcNumberMstr.GetFieldValue(""Status"") != msFromStatus) {
		var psInputs	= TheApplication().NewPropertySet();
		var psOutputs	= TheApplication().NewPropertySet();
	
		var bsBlock 	= TheApplication().GetService(""RMS RMS Block Calc"");
	
		psInputs.SetProperty(""From Status"",msFromStatus);
		psInputs.SetProperty(""To Status"",bcNumberMstr.GetFieldValue(""Status""));
		psInputs.SetProperty(""Object Id"",bcNumberMstr.GetFieldValue(""Block Id""));
		bsBlock.InvokeMethod(""UpdateNumberBlock"",psInputs,psOutputs);
		
		psInputs = null;
		psOutputs = null;
		bsBlock = null;
	}
	
					
}
function UpdateGenLevel(mbcNMNumMstr,msGenLvl,msNoOfMSISDN) {
	var msCnctGenLvl = """";
	with(mbcNMNumMstr) {
		if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""SIM"")) {
			if(GetFieldValue(""SIM Generation Support"")!="""")
				msCnctGenLvl = 	GetFieldValue(""SIM Generation Support"") + ""/""+msGenLvl;
			else
				msCnctGenLvl = msGenLvl;	
			SetFieldValue(""SIM Generation Support"",msCnctGenLvl);
		}
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Association CheckHLRID Method    		 	  		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Verify the Association Parameters	    		                      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 09/10/2005 	1.0   		MBT						   	Created      09/10/2005       *
**************************************************************************************/
function UpdateNumMstrCnct(mbcNMNumCnct,mbcNMNumAssocCnctCurr,mbcNMNumMstr)
{
	with(mbcNMNumCnct) {
		ActivateField(""Concat Id"");
		ClearToQuery();	
		SetSearchSpec(""Number Id"",mbcNMNumMstr.GetFieldValue(""Id""));	
		ExecuteQuery(ForwardOnly);
		var blnIsRecord = FirstRecord();
		if(!blnIsRecord) {	
			with(mbcNMNumCnct) {
				NewRecord(1);
				SetFieldValue(""Concat Id"",mbcNMNumAssocCnctCurr.GetFieldValue(""Id""));
				SetFieldValue(""Number Id"",mbcNMNumMstr.GetFieldValue(""Id""));
				WriteRecord();
			}
		}else {
			if(GetFieldValue(""Concat Id"")!=mbcNMNumAssocCnctCurr.GetFieldValue(""Id"")) {
				with(mbcNMNumCnct) {
					NewRecord(1);
					SetFieldValue(""Concat Id"",mbcNMNumAssocCnctCurr.GetFieldValue(""Id""));
					SetFieldValue(""Number Id"",mbcNMNumMstr.GetFieldValue(""Id""));
					WriteRecord();
				}
			}
		}
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Association Update Parameter quantity   		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      28/12/2003       *
**************************************************************************************/

function UpdateQuantity(Inputs,boNumAssocNew,bcNumAssocMstr,bcNumAssStartNum)
{
	var boAssRule;
	var bcAssRuleMstr;
	//var bcNumAssocMstr;
	var bcAssRuleDtl;
	
	var strRuleId;
	var strAssocMstrId;
	var strRulMstrId;
	var strRuleType;
	var strqty=Inputs.GetProperty(""Qty"");
	
	
	var arrAssWorkId = new Array();
	var arrQuantity = new Array();
	
	var intWrkIdCnt=0;		
	
	var flgGlblVarbl;
	var flgNumAssWorkRec;
	var intSeq = Inputs.GetProperty(""RecSeq"");

//-------------------------------------------------------
//Querying Association master to get Assoc Id and Rule Id
//-------------------------------------------------------	
	
	with(bcNumAssocMstr) {
		//ActivateField(""Rule Id""); KT 21-06-06 
		//ActivateField(""Id"");
		strRuleId = GetFieldValue(""Rule Id"");	
		strAssocMstrId = GetFieldValue(""Id"");		
	}

	boAssRule = TheApplication().GetBusObject(""RMS NM Association Rule"");
	bcAssRuleMstr = boAssRule.GetBusComp(""RMS NM Association Rule Master"");		
	bcAssRuleDtl = boAssRule.GetBusComp(""RMS NM Association Rule Detail"");		

//------------------------------------------
//Query Association Rule and get the Rule Id
//------------------------------------------

	with(bcAssRuleMstr) {
	
		ActivateField(""Id"");
		ClearToQuery();
		SetSearchSpec(""Id"",strRuleId);
		ExecuteQuery(1);
		if(FirstRecord()) {
			strRulMstrId = GetFieldValue(""Id"");
			strRuleType  = GetFieldValue(""Rule Type"");
		}
	}

//--------------------------------------------------------------------
//Query Association Parameters and store the records id's in and array.
//--------------------------------------------------------------------
	
	with(bcNumAssStartNum) {
		
		ActivateField(""Sequence"");
		ClearToQuery();
		SetSearchSpec(""Ass Id"",strAssocMstrId);
		SetSortSpec(""Sequence(ASCENDING)"");
		ExecuteQuery(1);
		flgNumAssWorkRec = FirstRecord();
	
		while (flgNumAssWorkRec) {
			arrAssWorkId[intWrkIdCnt] = GetFieldValue(""Id"");
			flgNumAssWorkRec = NextRecord();
			intWrkIdCnt++;
		
		}
	}

//------------------------------------------------------------
//Calculating the quantity and updating the parameters record.
//------------------------------------------------------------
	
	CalculateQuantity(arrAssWorkId,strRulMstrId,strqty,strRuleType,arrQuantity);

//------------------------------------
//Refreshing the Association Master BC
//------------------------------------
	
//	RefreshingBc(bcNumAssocMstr,strAssocMstrId);
	
	bcAssRuleMstr 	= null;		
	bcAssRuleDtl 	= null;
	boAssRule 		= null;
	

}
"/**************************************************************************************
* Name          : RMS NM Number Association ValidateQty						     	  *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver       By      Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 06/07/2005 	1.0   	  MBT	  Created      06/07/2005       *
* 06/07/2005	1.1		  MBT	  P.Gautaman	 06/07/2005		  *
20060706        1.2       Prasad  Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function UpdateSIM(msNoOfMSISDN,msAssocStartId)
{
	var mboNMNumAssoc 			= TheApplication().GetBusObject(""RMS NM Number Association Service"");  			//customized BO for the Business Service
	var mbcNMNumMstr 			= mboNMNumAssoc.GetBusComp(""RMS NM Number Enquiry For Update"");
	
//-----------------------------------------------------------------------
//Query for associated SIM and update it with the no of MSISDN associated.
//-----------------------------------------------------------------------
	with(mbcNMNumMstr) 
	{
		SetViewMode(AllView);
		ActivateField(""No. Of Assigned MSISDNs"");
		ClearToQuery();
		SetSearchSpec(""Id"",msAssocStartId);
		ExecuteQuery();
		if(FirstRecord()){
			SetFieldValue(""No. Of Assigned MSISDNs"", msNoOfMSISDN);
			WriteRecord();
		}
	}
//1.2 below
	mbcNMNumMstr  = null;
	mboNMNumAssoc = null;
//1.2 below
}
"/**************************************************************************************
* Name          : RMS NM Number Association UpdateSingleCnct Method    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003  	 1.0   	MBT		 Created      28/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function UpdateSingleCnct(msAssocId)
{
	var sRuleType = psAssocParam.GetProperty(""RuleType"");
	var marrNumSet = new Array();
	
	var mboNMNumAssoc 			= TheApplication().GetBusObject(""RMS NM Number Association Service"");  			//customized BO for the Business Service
	var mbcNMNumAssocMstr   	= mboNMNumAssoc.GetBusComp(""RMS NM Number Association Master"");					//BC based on Number Association Master
	var mbcNMNumAssocMstrCnct	= mboNMNumAssoc.GetBusComp(""RMS NM Number Association Master Concat"");			//BC based on MTM table between Association Master and Cnct Table, used for updating the flag
	
	var mbIsRecord;
	var mpsNumSet 				= TheApplication().NewPropertySet();
	var marrNumSet 				= new Array();
	var marrNumPropSet 			= new Array();
	var marrNumber 				= new Array();
	var marrConcatType 			= new Array();
	
	var msCnctNumber  = """";
	var psNum;
	
	with(mbcNMNumAssocMstr) {
		ActivateField(""Rule Type"");
		ActivateField(""Rule Id"");
		
		ClearToQuery();
		SetSearchSpec(""Id"",msAssocId);
		ExexuteQuery(ForwardOnly);
		
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) return false;
	}
	
	var msConcatType = GetSeqConcatType(msAssocId);
	marrConcatArray = msConcatType.split("" / "");
	
	
	psNum = TheApplication().NewPropertySet();
	marrNumPropSet[""SIM""] = psNum;
	psNum = TheApplication().NewPropertySet();
	marrNumPropSet[""IMSI""] = psNum;
	psNum = TheApplication().NewPropertySet();
	marrNumPropSet[""MSISDN""] = psNum;
	
	var mpsTemp;
	var miNumSetCnt = -1;
	var msPrevRootNumber = """";
	
	with(mbcNMNumAssocMstrCnct) {
		ActivateField(""Associated Numbers"");
		ActivateField(""Associated Type"");
		ClearToQuery();
		SetSearchSpec(""Association Id"", mbcNMNumAssocMstr(""Id""));
		SetSortSpec(""Created,Root Assoc Id (ASCENDING)"");
		ExecuteQuery(ForwardOnly);
		
		mbIsRecord = FirstRecord();
		
		while (msIsRecord) {
			msCnctNumber = GetFieldValue(""Associated Numbers"")		
			marrNumber = msCnctNumber.split("" / "");			
			
			if(msPrevRootNumber != marrNumber[0]) miNumSetCnt = getArrayLength(marrNumSet);
			
			for(var miNumCnt = 0; miNumCnt < getArrayLength(marrNumber);miNumCnt++) {
				mpsTemp = mpsNumPropSet[marrConcatType[miNumCnt]];	
					
				if (mpsTemp.PropertyExists(marrNumber[miCnt]))
					miNumSetCnt = mpsTemp.GetProperty(marrNumber[miCnt]);
				else  {
					marrNumSet[miNumSetCnt][getArrayLength(marrNumSet)] = marrNumber[miNumCnt];
					mpsTemp.SetProperty(marrNumber[miNumCnt],miNumSetCnt);
				}
			}
			
			mbIsRecord = NextRecord();
		}
	}
	
	mbcNMNumAssocMstr   	= null;
	mbcNMNumAssocMstrCnct	= null;
	mboNMNumAssoc 			= null;
	
	mpsNumSet 				= null;
	
	marrNumSet 				= null;
	marrNumSet 				= null;
	marrNumPropSet 			= null;
	marrNumber 				= null;
	marrConcatType 			= null;
//1.1 below
	psNum                   = null;
//1.1 above	
}
"/**************************************************************************************
* Name          : RMS NM Number Association ValidateQty						     	  *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/05/2005 	1.0   		MBT						   	Created      31/05/2005       *
* 31/05/2005	1.1			MBT							P.Gautaman	 31/05/2005		  *			
**************************************************************************************/
function UpdateSplitNumSet(psNumSet) {
	var psNumSetCopyRec;
	var psNumSetRec;
	var blnSplitIdMch = ""Y"";
	
	var arrSplittedIds = new Array();
	var psNumSetCopy = psNumSet.Copy();
	var psNewNumSet = TheApplication().NewPropertySet();
	
	for (var i=0;i<psNumSet.GetChildCount();i++) 
	{
		blnSplitIdMch = ""Y"";
		var psNumSetCopy = psNumSet.Copy();
		psNumSetRec = psNumSet.GetChild(i);
		var psNum = TheApplication().NewPropertySet();

		if(psNumSetRec.GetProperty(""SplitRecordId"")!="""") 
		{
			for (var intArrSplitRecId=0;intArrSplitRecId<getArrayLength(arrSplittedIds);intArrSplitRecId++) 
			{
				if(arrSplittedIds[intArrSplitRecId] == psNumSetRec.GetProperty(""SplitRecordId""))		
					blnSplitIdMch = ""N"";
//					break;
			}
			
			if(blnSplitIdMch == ""Y"") 
			{
			
				psNum.SetProperty(""SplitRecordId"",psNumSetRec.GetProperty(""SplitRecordId""));
				var intCnt = 0;

//				var temp6 = psNumSetCopyRec.GetProperty(psNumSetCopyRec.GetProperty(i));															
				
				for(var intCpyNumSetCnt=0;intCpyNumSetCnt<psNumSetCopy.GetChildCount();intCpyNumSetCnt++) 
				{
						psNumSetCopyRec = psNumSetCopy.GetChild(intCpyNumSetCnt);
						var temp = psNumSetRec.GetProperty(""SplitRecordId"");
						var temp1 = psNumSetCopyRec.GetProperty(""SplitRecordId"");
						var temp2 = psNumSetCopyRec.GetProperty(""IdentificationNum"");
						var temp3 = psNumSetRec.GetProperty(""IdentificationNum"");
					if(psNumSetCopyRec.GetProperty(""IdentificationNum"") != psNumSetRec.GetProperty(""IdentificationNum"")) 
					{
						if(psNumSetRec.GetProperty(""SplitRecordId"") == psNumSetCopyRec.GetProperty(""SplitRecordId"")) 
						{
							var temp2 = psNumSetRec.GetProperty(i);
							var temp3 = psNumSetCopyRec.GetProperty(i);
							var temp4 = psNumSetCopyRec.GetProperty(""NumQty"");

							for(var j=0;j<psNumSetCopyRec.GetProperty(""NumQty"");j++) 
							{
								psNum.SetProperty(intCnt++,psNumSetCopyRec.GetProperty(j));
								psNum.SetProperty(psNumSetCopyRec.GetProperty(j),psNumSetCopyRec.GetProperty(psNumSetCopyRec.GetProperty(j)));
								psNum.SetProperty(intCnt++,psNumSetRec.GetProperty(j));
/*								var temp6 = psNumSetRec.GetProperty(j);
								var temp5 = psNumSetRec.GetProperty(psNumSetRec.GetProperty(j));
								psNum.SetProperty(psNumSetRec.GetProperty(j),psNumSetRec.GetProperty(psNumSetRec.GetProperty(j)));*/
								
								intCnt++;
							}
						}
					}
					else 
					{
						psNum = psNumSetCopyRec.Copy();
					}
					
				}
				psNewNumSet.AddChild(psNum);
				arrSplittedIds[intArrSplitRecId++]=psNumSetRec.GetProperty(""SplitRecordId"");				
			}
		}
		else
			psNewNumSet.AddChild(psNumSet.GetChild(i));
//			psNum = psNumSet.GetChild(i);
		
			
//		psNewNumSet.AddChild(psNum);
	}
	return(psNewNumSet);
}
function UpsertNumAssocMstrCnct(mbcNMNumAssocMstrCnct,mbcNMNumAssocCnctCurr,msRuleType,msParentAssocMstrId, msAssocId, mbCreateNew)
{
	var mbIsRecord;
	
	with(mbcNMNumAssocMstrCnct) {
		if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) {	
			ActivateField(""Association Id"");
			ActivateField(""Concat Id"");
			ActivateField(""Flag"");
			
			ClearToQuery();
			SetSearchSpec(""Association Id"",msParentAssocMstrId);
			SetSearchSpec(""Concat Id"",mbcNMNumAssocCnctCurr.GetFieldValue(""Id""));
			ExecuteQuery(ForwardOnly);
			
			mbIsRecord = FirstRecord();
			while(mbIsRecord) {
				SetFieldValue(""Flag"",""Y"");
				WriteRecord();
				mbIsRecord = NextRecord();
			}
		}
					
		NewRecord(1);
		SetFieldValue(""Association Id"",msAssocId);
		SetFieldValue(""Concat Id"",mbcNMNumAssocCnctCurr.GetFieldValue(""Id""));
		if (mbCreateNew)
			SetFieldValue(""Flag"",""N"");
		WriteRecord();
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Association ValidateQty						      *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Association Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      31/12/2003       *
**************************************************************************************/
function ValidateQty(&psAssocParam,&psfnArgs) {
	
	var psAssocParamRec;
	var boNumberMstr = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumberMstr = boNumberMstr.GetBusComp(""RMS NM Number Enquiry"");
	var boNumAssocDtl = TheApplication().GetBusObject(""RMS NM Number Association Service"");
	var bcNumAssocDtl = boNumAssocDtl.GetBusComp(""RMS NM Number Association Detail"");
	var bcAssocCnct = boNumAssocDtl.GetBusComp(""RMS NM Number Association Master Concat"");
	
	var blnNumMstrRec;
	var psNumSet = TheApplication().NewPropertySet();
	var psNum;
	
	var intNumCount = 0;
	var intPrevNum = 0;
	var arrNumSet = new Array();
	var msHLRID	   = """";
	var strIsSequenced;// = psAssocParamRec.GetProperty(""SequenceFlag"");
	var strSearchSpec = """";
	
	if(!CheckHLRID(psAssocParam)) 
	{
		psfnArgs.SetProperty(""strErrCode"",""RMSASS017"");
		psfnArgs.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS017""));
		return false;	
	}
			
	for (var i=0;i<psAssocParam.GetChildCount();i++) 
	{
		psAssocParamRec = psAssocParam.GetChild(i);
		psNum = TheApplication().NewPropertySet();
		arrNumSet[i] = psNum;
		//intParamCntr = psAssocParamRec.GetProperty(""AssocParamSeqNum"");
		
		strIsSequenced = psAssocParamRec.GetProperty(""SequenceFlag"");
		intPrevNum = 0;
		var intPrevAssocSeq = 0;
		
		
		if(psAssocParamRec.GetProperty(""ParentRuleId"") != """") 
		{
			with (bcAssocCnct) {
				ActivateField(""Associated Type"");
				ActivateField(""Associated Numbers"");
				ActivateField(""Allocation Id"");
				ActivateField(""Reserve Id"");
				ActivateField(""Generated Number"");
				ActivateField(""HLR Id"");
				
				ClearToQuery();
				SetSearchSpec(""Association Id"", psAssocParamRec.GetProperty(""ParentAssocId""));
				SetSearchSpec(""Flag"",""N"");
				SetSearchSpec(""Generated Number"","" >='"" + psAssocParamRec.GetProperty(""AssocGenNum"") + ""'"");
				SetSearchSpec(""Assoc Status"",""='"" + psAssocParamRec.GetProperty(""NumStatus"") + ""'"");
				SetSearchSpec(""HLR Id"",psAssocParamRec.GetProperty(""HLRID""));
				SetSortSpec(""Generated Number(ASCENDING)"");
				ExecuteQuery(ForwardOnly);
				blnNumMstrRec = FirstRecord();
				if(blnNumMstrRec) psNum.SetType(GetFieldValue(""Associated Type""));
			}
			psNum.SetProperty(""IdentificationNum"",i);
			while(blnNumMstrRec) {  
				if(!CheckNumberOverlap(arrNumSet,psNum.GetType(),bcAssocCnct.GetFieldValue(""Associated Numbers""))) 
				{
					psfnArgs.SetProperty(""strErrCode"",""RMSASS003"");
					psfnArgs.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS003""));
					return false;
				}
				psNum.SetProperty(intNumCount,bcAssocCnct.GetFieldValue(""Associated Numbers""));
				psNum.SetProperty(bcAssocCnct.GetFieldValue(""Associated Numbers""),bcAssocCnct.GetFieldValue(""Id""));
				psNum.SetProperty(""Type"",bcAssocCnct.GetFieldValue(""Associated Type""));
					intNumCount++;
				
				if (psAssocParamRec.GetProperty(""Quantity"") == intNumCount) {
					psAssocParamRec.SetProperty(""EndingNumber"",bcAssocCnct.GetFieldValue(""Associated Numbers""));
					break;
				}
				blnNumMstrRec = bcAssocCnct.NextRecord();
			}

			if (psAssocParamRec.GetProperty(""Quantity"") > intNumCount) 
			{
					psfnArgs.SetProperty(""strErrCode"",""RMSASS004"");
					psfnArgs.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS004""));
					return false;
			}
			psNumSet.AddChild(psNum);
		}
		else {
			with(bcNumberMstr) {
				ActivateField(""Type Identifier"");
				ActivateField(""Number String"");
				ActivateField(""Number"");
				ActivateField(""Allocated To"");
				ActivateField(""Reserved To"");
				ActivateField(""Is Associated"");
				ActivateField(""Type"");	
				ActivateField(""Generation Level"");					
				ActivateField(""HLR Id"");
				
				ClearToQuery();
		/*		strSearchSpec = ""[Type Id] = '"" + psAssocParamRec.GetProperty(""TypeId"") + ""'"";
				strSearchSpec = strSearchSpec + "" AND [Subtype Id] = '"" + psAssocParamRec.GetProperty(""SubtypeId"") + ""'"";
				strSearchSpec = strSearchSpec + "" AND [Scheme Id] = '"" + psAssocParamRec.GetProperty(""SchemeId"") + ""'"";
				strSearchSpec = strSearchSpec + "" AND [Block Id] = '"" + psAssocParamRec.GetProperty(""BlockId"") + ""'"";
				strSearchSpec = strSearchSpec + "" AND [Is Associated] = 'N'"";
				strSearchSpec = strSearchSpec + "" AND [HLR Id] = '"" + psAssocParamRec.GetProperty(""HLRID"") + ""'"";
				if(psAssocParamRec.GetProperty(""AllocatedTo"") != """")
					strSearchSpec = strSearchSpec + "" AND [Allocated To] = '"" + psAssocParamRec.GetProperty(""AllocatedTo"") + ""'"";
				if(psAssocParamRec.GetProperty(""ReservedTo"") != """")
					strSearchSpec = strSearchSpec + "" AND [Reserved To] = '"" + psAssocParamRec.GetProperty(""ReservedTo"") + ""'"";
				
				strSearchSpec = strSearchSpec + "" AND [Number] >= '"" + psAssocParamRec.GetProperty(""StartNum"") + ""'"";		
				strSearchSpec = strSearchSpec + "" AND [Status] = '"" + psAssocParamRec.GetProperty(""NumStatus"") + ""'"";		
				
		*/		
				SetSearchSpec(""Type Id"", psAssocParamRec.GetProperty(""TypeId""));
				SetSearchSpec(""Subtype Id"",psAssocParamRec.GetProperty(""SubtypeId""));
				SetSearchSpec(""Scheme Id"",psAssocParamRec.GetProperty(""SchemeId""));
				SetSearchSpec(""Block Id"",psAssocParamRec.GetProperty(""BlockId""));
				SetSearchSpec(""Is Associated"",""N"");
				SetSearchSpec(""HLR Id"",""='"" + psAssocParamRec.GetProperty(""HLRID"") + ""'"");
				
				if(psAssocParamRec.GetProperty(""AllocatedTo"") != """")
					SetSearchSpec(""Allocated To"",psAssocParamRec.GetProperty(""AllocatedTo""));
				if(psAssocParamRec.GetProperty(""ReservedTo"") != """")
					SetSearchSpec(""Reserved To"",psAssocParamRec.GetProperty(""ReservedTo""));
			
				SetSearchSpec(""Number"","" >= '"" + psAssocParamRec.GetProperty(""StartNum"") + ""'"");
				SetSearchSpec(""Status"",""='"" + psAssocParamRec.GetProperty(""NumStatus"") + ""'"");
				//below 1.1
				SetSearchSpec(""Special Category Type"",""='"" + psAssocParamRec.GetProperty(""Special Category Type"") + ""'"");
				//above 1.1 
				//SetSearchExpr(strSearchSpec);
				//SetSortSpec(""Number(ASCENDING)"");
				ExecuteQuery(ForwardOnly);
				blnNumMstrRec = FirstRecord();
				if(blnNumMstrRec){
			  		intPrevNum	= GetFieldValue(""Number"");		
				 	psNum.SetType(GetFieldValue(""Type Identifier""));
				}
			}
			
			intNumCount = 0;			
			psNum.SetProperty(""IdentificationNum"",i);		
			while(blnNumMstrRec) {  
				if (!CheckNumberOverlap(arrNumSet,psNum.GetType(),bcNumberMstr.GetFieldValue(""Number String""))) 
				{
					psfnArgs.SetProperty(""strErrCode"",""RMSASS005"");
					psfnArgs.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS005"",bcNumberMstr.GetFieldValue(""Type"")));
					return false;
				}
				psNum.SetProperty(intNumCount,bcNumberMstr.GetFieldValue(""Number String""));
				psNum.SetProperty(""Type"",bcNumberMstr.GetFieldValue(""Type""));
				psNum.SetProperty(""GenLvl"",bcNumberMstr.GetFieldValue(""Generation Level""));
				psNum.SetProperty(bcNumberMstr.GetFieldValue(""Number String""),bcNumberMstr.GetFieldValue(""Id""));
//				psNum.SetProperty(bcNumberMstr.GetFieldValue(""Type Id""),bcNumberMstr.GetFieldValue(""Number String""));
				psNum.SetProperty(""SplitRecordId"",psAssocParamRec.GetProperty(""SplitRecordId""));

				
//------------------------------------------------------------------------
//Check whether the numbers are in sequence (if sequence flag is checked).
//------------------------------------------------------------------------

				if ((strIsSequenced == ""Y"") && (bcNumberMstr.GetFieldValue(""Number"") - intPrevNum) > 1) 
				{
					psfnArgs.SetProperty(""strErrCode"",""RMSASS006"");
					psfnArgs.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS006"",bcNumberMstr.GetFieldValue(""Type"")));
					return false;
				}
//------------------------------------------------------------------------------
//Previous Number has to be stored to check whether the Numbers are in sequence.
//------------------------------------------------------------------------------
				if (strIsSequenced == ""Y"") intPrevNum = bcNumberMstr.GetFieldValue(""Number"");

//------------------------------------------------------------------------------------------
//Increment the counter to avoid the calculation required to find out the property set count.
//------------------------------------------------------------------------------------------

				intNumCount++;
//------------------------------------------------------------------------------------------
//If the required quantity is met, then set the ending number and continue with the FOR loop.
//------------------------------------------------------------------------------------------

				if (psAssocParamRec.GetProperty(""Quantity"") == intNumCount) {
					psAssocParamRec.SetProperty(""EndingNumber"",bcNumberMstr.GetFieldValue(""Number String""));
					break;
				}
				blnNumMstrRec = bcNumberMstr.NextRecord();
				if(blnNumMstrRec) psNum.SetType(bcNumberMstr.GetFieldValue(""Type Identifier""));
			}
			psNum.SetProperty(""NumQty"",intNumCount);
			psNumSet.AddChild(psNum);
		}
		if (psAssocParamRec.GetProperty(""Quantity"") > intNumCount) 
		{
			psfnArgs.SetProperty(""strErrCode"",""RMSASS007"");
			psfnArgs.SetProperty(""strErrVal"",TheApplication().LookupMessage(""User Defined Errors"",""RMSASS007"",psAssocParamRec.GetProperty(""SchemeName"")));
			return false;
		}
	} 
	bcNumberMstr 	= null;
	boNumberMstr 	= null;
	bcNumAssocDtl 	= null;
	bcAssocCnct 	= null;
	boNumAssocDtl 	= null;
	return psNumSet;
}
"/**************************************************************************************
* Name          : RMS NM Number Calculation Service CalculateNumWithDelimiter Method * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function CalculateNumWithDelimiter(intSchemeId,&intLengthRunn){

	var boNMScheme;
	var bcNMSchLvl;
	var blnIsRecord;
	var strNumber 	= """";
	var intCount 	= 0;
	
	boNMScheme = TheApplication().GetBusObject(""RMS NM Number Scheme"");
	bcNMSchLvl = boNMScheme.GetBusComp(""RMS NM Scheme Level"");
	
	try{
	with(bcNMSchLvl){
		ActivateField(""Value"");
		ActivateField(""Level Type"");
		ActivateField(""Length"");
		ActivateField(""Delimiter"");
		ClearToQuery();
		SetSearchSpec(""Scheme Id"",intSchemeId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}
	
	while(blnIsRecord){
		if(bcNMSchLvl.GetFieldValue(""Level Type"") != (TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING""))){
			strNumber = strNumber + bcNMSchLvl.GetFieldValue(""Value"");
			if(bcNMSchLvl.GetFieldValue(""Delimiter"") != """" && bcNMSchLvl.GetFieldValue(""Delimiter"") != (TheApplication().InvokeMethod(""LookupValue"", ""NM_FORMAT_DELIMITER"", ""NONE"")))
				strNumber = strNumber + bcNMSchLvl.GetFieldValue(""Delimiter"");
		}
		else{
			for(intCount;intCount < bcNMSchLvl.GetFieldValue(""Length""); intCount++)
				strNumber = strNumber + ""N"";	
			intLengthRunn = bcNMSchLvl.GetFieldValue(""Length"");	
		}	 
		blnIsRecord = bcNMSchLvl.NextRecord();
	}	
	
	} catch(e) {
		throw(e);
	} finally {
		
		bcNMSchLvl = null;
		boNMScheme = null;
	}
	
	return(strNumber);

}
"/*****************************************************************************************
* Name          : RMS NM Number Calculation Service CalculateNumWithoutDelimiter Method * 
* Author        : Mahindra British Telecom                                               *
* Description   : RMS NM Number Generation Code File	    		                     *
* Amendment Details                                                                      *
******************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date       *
******************************************************************************************
*                                                                                        *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003          *
*****************************************************************************************/

function CalculateNumWithoutDelimiter(intSchemeId,&intLengthRunn){

	var boNMScheme;
	var bcNMSchLvl;
	var blnIsRecord;
	var strNumber 	= """";
	var intCount 	= 0;
	
	boNMScheme = TheApplication().GetBusObject(""RMS NM Number Scheme"");
	bcNMSchLvl = boNMScheme.GetBusComp(""RMS NM Scheme Level"");
	
	try{
	with(bcNMSchLvl){
		ActivateField(""Value"");
		ActivateField(""Level Type"");
		ActivateField(""Length"");
		ClearToQuery();
		SetSearchSpec(""Scheme Id"",intSchemeId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}
	
	while(blnIsRecord){
		if(bcNMSchLvl.GetFieldValue(""Level Type"") != (TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING"")))
			strNumber = strNumber + bcNMSchLvl.GetFieldValue(""Value"");
		else{
			for(intCount;intCount < bcNMSchLvl.GetFieldValue(""Length""); intCount++)
				strNumber = strNumber + ""N"";	
			intLengthRunn = bcNMSchLvl.GetFieldValue(""Length"");	
		}	 
		blnIsRecord = bcNMSchLvl.NextRecord();
	}	
	
	} catch(e) {
		throw(e);
	} finally {
		bcNMSchLvl = null;
		boNMScheme = null;
	}
	return(strNumber);
}
"/**************************************************************************************
* Name          : RMS NM Number Calculation Service PreCanInvoke Method         	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation Code File Used While Importing MSISDNs	  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs){

	var intSchemeId;
	var strOutputNum;
	var intLengthRunn 	= 0;
	var intTempLength 	= 0;
	var intReturn 		= ContinueOperation;
	
	intSchemeId = Inputs.GetProperty(""Scheme Id"");
	
	switch(MethodName){
//-------------------------------------------------------------------------------------	
// Function calculating the scheme format without delimiter, having running number
//-------------------------------------------------------------------------------------	
		case ""Number Without Delimiter"" :
			strOutputNum = CalculateNumWithoutDelimiter(intSchemeId,intLengthRunn);
			Outputs.SetProperty(""Output Num"",strOutputNum);
			intReturn = CancelOperation;
			break;

//------------------------------------------------------------------------------------------------	
// Function calculating the fixed value of scheme format without delimiter and running number
//------------------------------------------------------------------------------------------------	
		case ""Fixed Number"":
			strOutputNum = CalculateNumWithoutDelimiter(intSchemeId,intLengthRunn);
			intTempLength = (ToInteger(strOutputNum.length)-intLengthRunn);
			strOutputNum = strOutputNum.substring(0,intTempLength);
			Outputs.SetProperty(""Output Num"",strOutputNum);
			intReturn = CancelOperation;
			break;

//-------------------------------------------------------------------------------------	
// Function calculating the scheme format with delimiter, having running number
//-------------------------------------------------------------------------------------	
		case ""Number With Delimiter"":		
			strOutputNum = CalculateNumWithDelimiter(intSchemeId,intLengthRunn);
			Outputs.SetProperty(""Output Num"",strOutputNum);
			intReturn = CancelOperation;
			break;

//---------------------------------------------------------------------------------------
// Function calculating the scheme format with delimiter but without running number
//---------------------------------------------------------------------------------------	
		case ""Number Without Running Value"":
			strOutputNum = CalculateNumWithDelimiter(intSchemeId,intLengthRunn);
			intTempLength = (ToInteger(strOutputNum.length)-intLengthRunn);
			strOutputNum = strOutputNum.substring(0,intTempLength);
			Outputs.SetProperty(""Output Num"",strOutputNum);
			intReturn = CancelOperation;
			break;	
	}

	return (intReturn);
}
"/**************************************************************************************
* Name          : RMS NM Number Enquiry Check Available Date Function.		          * 
* Author        : Mahindra British Telecom                                            *
* Description   : The date is checked against the min and max quarantine specified.   *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT						   	Created      14/12/2003       *
**************************************************************************************/

function CheckAvlDate(strQuaPeriod,strQuaUOM,dtQuaDate){

	var intQuarantineTime;
	var strConvDay;
	
	var strDays   = TheApplication().InvokeMethod (""LookupValue"", ""NM_QUARANTINE_UOM"", ""DAYS"");
	var strMonths = TheApplication().InvokeMethod (""LookupValue"", ""NM_QUARANTINE_UOM"", ""MONTHS"");
	var strWeeks  = TheApplication().InvokeMethod (""LookupValue"", ""NM_QUARANTINE_UOM"", ""WEEKS"");
	var strYears  = TheApplication().InvokeMethod (""LookupValue"", ""NM_QUARANTINE_UOM"", ""YEARS"");
	var strConvDay;

	switch (strQuaUOM){			
			
		case strDays: 
			intQuarantineTime = new Date(dtQuaDate.getFullYear(),dtQuaDate.getMonth(),ToInteger(dtQuaDate.getDate()) + ToInteger(strQuaPeriod));
			break;
				
		case strMonths: 
			intQuarantineTime = new Date(dtQuaDate.getFullYear(),dtQuaDate.getMonth() + ToInteger(strQuaPeriod),ToInteger(dtQuaDate.getDate()));
			break;
	
		case strWeeks: 
			strConvDay=	ToInteger(strQuaPeriod)*7;	
			intQuarantineTime = new Date(dtQuaDate.getFullYear(),dtQuaDate.getMonth(),ToInteger(dtQuaDate.getDate())+strConvDay);
			break;
				
		case strYears: 
			intQuarantineTime = new Date(ToInteger(dtQuaDate.getFullYear())+ ToInteger(strQuaPeriod),dtQuaDate.getMonth(),ToInteger(dtQuaDate.getDate()));
			break;
	}
		
	return intQuarantineTime;
}
"/**************************************************************************************
* Name          : NM Number Deployment Service CheckFieldValues Method 	          * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Deployment Code File                      			      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003	1.0   		   MBT					   	Created       24/12/2003      *
**************************************************************************************/

function CheckFieldValues(bcNMNumMaster,bcNMNumDeploy,strType){

	var strCurrSchemeId;
	var strCurrStatus;
	var strCurrType;
    var	strCurrClass;
    var strCurrPrice;
	var strErrVal ="""";
	
	var blnIsModified = false;
	
//---------------------------------------------------------------
//Checking whether the record is already modified by anather user
//---------------------------------------------------------------
	strCurrSchemeId = bcNMNumDeploy.GetFieldValue(""Scheme Id"");
	strCurrStatus   = bcNMNumDeploy.GetFieldValue(""Current Status"");
	strCurrType	    = bcNMNumDeploy.GetFieldValue(""Special Category(Type)"");
	strCurrClass    = bcNMNumDeploy.GetFieldValue(""Current Class"");
	strCurrPrice	= bcNMNumDeploy.GetFieldValue(""Current Price"");
	
	if((strCurrSchemeId != bcNMNumMaster.GetFieldValue(""Scheme Id""))
								||
		(strCurrStatus != bcNMNumMaster.GetFieldValue(""Status""))
								||
		(strCurrType != bcNMNumMaster.GetFieldValue(""Special Category Type""))
								||
		(strCurrClass != bcNMNumMaster.GetFieldValue(""Class""))
								||
		(strCurrPrice != bcNMNumMaster.GetFieldValue(""Price""))){
		
		blnIsModified = true;
			
		if(bcNMNumDeploy.GetFieldValue(""To Status"")!= strCurrStatus)
			bcNMNumDeploy.SetFieldValue(""To Status"",strCurrStatus);
	
		if(strType == TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")){
			if(bcNMNumDeploy.GetFieldValue(""To Special Category(Type)"")!= strCurrType)
				bcNMNumDeploy.SetFieldValue(""To Special Category(Type)"",strCurrType);
			if(bcNMNumDeploy.GetFieldValue(""To Class"")!= strCurrClass)
				bcNMNumDeploy.SetFieldValue(""To Class"",strCurrClass);
			if(bcNMNumDeploy.GetFieldValue(""To Price"")!= strCurrPrice)
				bcNMNumDeploy.SetFieldValue(""To Price"",strCurrPrice);
			if(bcNMNumDeploy.GetFieldValue(""To Scheme Id"")!= strCurrSchemeId)
				bcNMNumDeploy.SetFieldValue(""To Scheme Id"",strCurrSchemeId);
		}
	
	}
	
	if(blnIsModified == true){
		strErrVal = ""RMSNRD009""
		bcNMNumDeploy.SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD009""));
	}
	
	return(strErrVal);	
			
}
"/**************************************************************************************
* Name          : NM Number Deployment Service CreateAllocRecord Method			  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Deployment Code File            	                      *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     			Comments     Reviewed Date        *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	 1.0   		MBT   					Created      24/12/2003 	      *
**************************************************************************************/

function CreateAllocRecord(bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,bcNMConcat){		 
	
	var strAssocStartId;
	var strAllocatedTo;
	var strAllocId;
	var strSearchExpr 	= """"; 
	var strErrVal 		= """";
	var strCurrStatus 	= TheApplication().InvokeMethod(""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE"");

	var blnIsRecord;
	var strNumStatus;
	
	var intStartNo;
	var intEndNo;
	
	
	
//-------------------------------------------------------------------------------
// Check for the Record in Number allocation whether the Status of the Number to
// redeploy is 'Processing'.
//-------------------------------------------------------------------------------

		with(bcNMNumDeploy){
			if(blnIsDeallocation ==""Y"")
				strSearchExpr = ""[Status] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"") +""' AND [Scheme Id] = '""+ GetFieldValue(""Scheme Id"") +""' AND [Block Id] = '""+ bcNMNumDeploy.GetFieldValue(""Block Id"") +""' AND [SIM Artwork Id] = '""+ GetFieldValue(""SIM Artwork Id"") +""' AND [Alloc From] = '""+ GetFieldValue(""Allocated To"") +""'""; 	
			else
				strSearchExpr = ""[Status] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"") +""' AND [Scheme Id] = '""+ GetFieldValue(""Scheme Id"") +""' AND [Block Id] = '""+ bcNMNumDeploy.GetFieldValue(""Block Id"") +""' AND [SIM Artwork Id] = '""+ GetFieldValue(""SIM Artwork Id"") +""' AND [Alloc To] = '""+ GetFieldValue(""To Sales Code"") +""'""; 	
		
			with(bcNumAlloc){
				ActivateField(""Scheme Id"");
				ActivateField(""Block Id"");
				ActivateField(""SIM Artwork Id"");
				ActivateField(""Alloc To"");
				ActivateField(""Status"");
				ActivateField(""Start Num"");
				ActivateField(""End Num"");
				ActivateField(""Start Num String"");
				ActivateField(""End Num String"");
				ActivateField(""To Dealer Name"");
				ActivateField(""To Dealer Area Name"");
				ActivateField(""To Dealer Channel Name"");
				ClearToQuery();
				SetSearchExpr(strSearchExpr);
				ExecuteQuery();
				blnIsRecord = FirstRecord();
			}
			
//--------------------
// Concurrency check.
//--------------------			
			while(blnIsRecord){
				intStartNo = bcNumAlloc.GetFieldValue(""Start Num"");
				intEndNo   = bcNumAlloc.GetFieldValue(""End Num"");
				if((GetFieldValue(""Number""))>=intStartNo && (GetFieldValue(""Number""))<=intEndNo){
						strErrVal = ""RMSNRD009""
						SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD009""));	
						return(strErrVal);
				}
				blnIsRecord = bcNumAlloc.NextRecord();
			}
		
		
		}

//-----------------------------------------------------------------------------------
// Fetch the Number from Number Master and set the 'Status' of the Number and also
// fetch the 'assoc Start Id' of the Number.
//-----------------------------------------------------------------------------------						
		with(bcNumberMaster){
			ActivateField(""SIM Artwork Id"");
			ClearToQuery();
			SetSearchSpec(""Id"",bcNMNumDeploy.GetFieldValue(""Number Id""));
			ExecuteQuery();
			FirstRecord();
			strNumStatus = GetFieldValue(""Status"");
			strAllocatedTo = bcNMNumDeploy.GetFieldValue(""To Sales Code"");
			strAssocStartId = GetFieldValue(""Assoc Start Id"");
		}
		
//--------------------------------------------------------------------------------------------------------
// Creating the record in number allocation table using unique Scheme.Block,Sales code and SIM artwork.
//-------------------------------------------------------------------------------------------------------
	
		with(bcNumAlloc){
			ActivateField(""Alloc From"");
			ActivateField(""Start Num String"");
			ActivateField(""Start Num"");
			ActivateField(""End Num String"");
			ActivateField(""End Num"");
			ActivateField(""Quantity"");
			ActivateField(""Operation"");
			ActivateField(""Number Id"");
			ActivateField(""Type Id"");
			ActivateField(""Alloc Date"");
			ActivateField(""Current Date"");
			
			NewRecord(1);
			strAllocId = GetFieldValue(""Id"");
			SetFieldValue(""Alloc Date"",GetFieldValue(""Current Date""));
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""COMPLETE""));
			SetFieldValue(""Scheme Id"",bcNMNumDeploy.GetFieldValue(""Scheme Id""));	
			SetFieldValue(""Block Id"",bcNMNumDeploy.GetFieldValue(""Block Id""));
			SetFieldValue(""Number Id"",bcNumberMaster.GetFieldValue(""Id""));	
			SetFieldValue(""Type Id"",bcNMNumDeploy.GetFieldValue(""Type Id""));
			SetFieldValue(""SIM Artwork Id"",bcNumberMaster.GetFieldValue(""SIM Artwork Id""));
			SetFieldValue(""Alloc From"",bcNMNumDeploy.GetFieldValue(""Allocated To""));	
			if(blnIsDeallocation ==""Y""){
				SetFieldValue(""Alloc To"","""");	
				SetFieldValue(""To Dealer Name"","""");
				SetFieldValue(""To Dealer Area Name"","""");
				SetFieldValue(""To Dealer Channel Name"","""");
			}
			else{
				SetFieldValue(""Alloc To"",bcNMNumDeploy.GetFieldValue(""To Sales Code""));			
				SetFieldValue(""To Dealer Name"",bcNMNumDeploy.GetFieldValue(""To Dealer Name""));
				SetFieldValue(""To Dealer Area Name"",bcNMNumDeploy.GetFieldValue(""To Dealer Area Name""));
				SetFieldValue(""To Dealer Channel Name"",bcNMNumDeploy.GetFieldValue(""To Dealer Channel Name""));
			}
			SetFieldValue(""End Num String"",bcNumberMaster.GetFieldValue(""NumStringNoCS""));	
			SetFieldValue(""End Num"",bcNumberMaster.GetFieldValue(""Number""));
			SetFieldValue(""Quantity"",""1"");	
			if(blnIsDeallocation ==""N"")
				SetFieldValue(""Operation"",TheApplication().InvokeMethod(""LookupValue"", ""NM_ALLOCATION_OPERATION"",""ALLOCATE""));	
			else
				SetFieldValue(""Operation"",TheApplication().InvokeMethod(""LookupValue"", ""NM_ALLOCATION_OPERATION"",""DEALLOCATE""))
			WriteRecord();
		}
						
//------------------------------------------------------------------------------------------------
// Calling the function to update the asociated number and intersection table between 'Allocation'
// 'Number Master'
//-----------------------------------------------------------------------------------------------
		strErrVal = UpdateAssocAllocNumbers(bcNumberMaster,bcNMMstrAlloc,bcNMNumDeploy,strAssocStartId,strAllocatedTo,strAllocId,strToStatus,strNumStatus,bcNMConcat,blnIsDeallocation);
		
				
	return(strErrVal);		
			
}
"/**************************************************************************************
* Name          : NM Number Deployment Service RefreshBC Method				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Deployment Code File            	                          *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     			Comments     Reviewed Date        *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	 1.0   		MBT   					Created       24/12/2003	      *
**************************************************************************************/

function RefreshBC(){

//--------------------------------------------------------------
//Calling the Business Service to refresh the Business component
//--------------------------------------------------------------
	
	var bsNMRefreshBC;
	var psInput  = TheApplication().NewPropertySet();
	var psoutput = TheApplication().NewPropertySet();
				
	bsNMRefreshBC = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
	psInput.SetProperty(""Business Object Name"",""RMS NM Number Redeployment"");
	psInput.SetProperty(""Business Component Name"",""RMS NM Number Deployment Detail"");
	bsNMRefreshBC.InvokeMethod(""Refresh Business Component"",psInput,psoutput);
	
	bsNMRefreshBC	= null;
	psInput			= null;
	psoutput		= null;
}
"/**************************************************************************************
* Name          : NM Number Deployment Service RefreshBC Method				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Deployment Code File            	                          *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     			Comments     Reviewed Date        *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	 1.0   		MBT   					Created       24/12/2003	      *
**************************************************************************************/

function RefreshBusComp(msBusComp,msBusObj){

//--------------------------------------------------------------
//Calling the Business Service to refresh the Business component
//--------------------------------------------------------------
	
	var bsNMRefreshBC;
	var psInput  = TheApplication().NewPropertySet();
	var psoutput = TheApplication().NewPropertySet();
				
	bsNMRefreshBC = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
	psInput.SetProperty(""Business Object Name"",msBusObj);
	psInput.SetProperty(""Business Component Name"",msBusComp);
	bsNMRefreshBC.InvokeMethod(""Refresh Business Component"",psInput,psoutput);
	
	bsNMRefreshBC	= null;
	psInput			= null;
	psoutput		= null;
}
"/**************************************************************************************
* Name          : NM Number Deployment Service PreInvokeMethod			 	          * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Deployment Code File                      			      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmmendedBy  	Comments	   				Reviewed Date *
***************************************************************************************
*                                                                                     *
* 16/12/2003	1.0   		   	MBT			Created     	 		 	16/12/2003    *
*																					  *	
* 30/03/2003	1.1				MBT			Added code for inserting	02/04/2004 	  *	
*											dealer name, area and 					  *
*											channel name - Phase 1A2				  *
* 25/09/2005 	1.2   			Raja,MBT	 Modified      			25/09/2005      
* - Disable Update Block count functionality as per the new requirement		
20060706       | 1.3           | Prasad |   Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var boNMNumTransfer;
	var boNumberMaster;
	var boNumAlloc;
	var boNumBlock;
	var boNumReserve;
	
	var bcNMNumRedeploy;
	var bcNMNumDeploy;
	var bcNMNumMaster;
	var bcNumberMaster;
	var bcNumBlock;
	var bcNumAlloc;
	var bcNumReserve;
	var bcNumMstrReserve;
	var bcNMMstrAlloc;
	var bcNMMsisdnInfo;
	var bcNMConcat;
	
	var strErrVal = """";
	var strNumString;
	var strNumber ="""";

	var intCount;
	var intReturn = ContinueOperation;
	
	try{
	
		boNMNumTransfer = TheApplication().GetBusObject(""RMS NM Number Redeployment"");
		bcNMNumRedeploy = boNMNumTransfer.GetBusComp(""RMS NM Number Redeployment""); 
		bcNMNumDeploy   = boNMNumTransfer.GetBusComp(""RMS NM Number Deployment Detail"");
		bcNMNumMaster   = boNMNumTransfer.GetBusComp(""RMS NM Number Master Deployment"");
		bcNumberMaster  = boNMNumTransfer.GetBusComp(""RMS NM Number Master Redeployment"");
		bcNumAlloc      = boNMNumTransfer.GetBusComp(""RMS NM Alloc Deployment"");
		bcNMMstrAlloc	= boNMNumTransfer.GetBusComp(""RMS NM Deployment Master Alloc"");
		boNumBlock		= TheApplication().GetBusObject(""RMS NM Number Scheme"");	
		bcNumBlock		= boNumBlock.GetBusComp(""RMS NM Number Block"");
		bcNMMsisdnInfo  = boNMNumTransfer.GetBusComp(""RMS NM Number Master MSISDN Info"");
		bcNMConcat		= boNMNumTransfer.GetBusComp(""RMS NM Number Concat"");
		
		var strSearchExpr = ""[Redeploy Id] = '""+ Inputs.GetProperty(""Object Id"") +""' AND [Result] = '""+ (TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING"")) +""'""; 
		RefreshBC(); 		
		
		
		if(MethodName == ""UpdateNumbers""){
		
			with(bcNMNumRedeploy) {
				ClearToQuery();
				SetSearchSpec(""Id"",Inputs.GetProperty(""Object Id""));
				ExecuteQuery();	
			}
			with(bcNMNumDeploy){
				ActivateField(""Result"");
				ActivateField(""Number"");
				ActivateField(""Number String"");
				ActivateField(""Number Id"");
				ActivateField(""Current Status"");
				ActivateField(""Special Category(Type)"");
				ActivateField(""Current Price"");
				ActivateField(""Current Class"");
				ActivateField(""Scheme Id"");
				ActivateField(""Block Id"");
				ActivateField(""Allocated To"");
				ActivateField(""To Inventory"");
				ActivateField(""SIM Artwork Id"");
				ActivateField(""To Scheme Id"");
				ActivateField(""To Price"");
				ActivateField(""To Class"");
				ActivateField(""To Status"");
				ActivateField(""Comments"");
				ActivateField(""Type Identifier"");
				ActivateField(""To Sales Code"");
				ActivateField(""Is Associated"");
				ActivateField(""Is Internal"");
				ActivateField(""To Special Category(Type)"");
				ActivateField(""Deassociation Flg"");
				ActivateField(""DisableField"");

//----------------------------------
// Code for Phase 1A2 requirement.	
//----------------------------------				
				ActivateField(""From Dealer Name"");	
				ActivateField(""From Dealer Area Name"");	
				ActivateField(""From Dealer Channel Name"");	
				ActivateField(""To Dealer Name"");	
				ActivateField(""To Dealer Area Name"");	
				ActivateField(""To Dealer Channel Name"");	
				ClearToQuery();
				SetSearchExpr(strSearchExpr);
				ExecuteQuery();
			}
	
			intReturn = CancelOperation;
			strErrVal = UpdateNumbers(bcNMNumDeploy,bcNMNumMaster,bcNumberMaster,bcNumAlloc,bcNumBlock,bcNumReserve,bcNumMstrReserve,bcNMMstrAlloc,Inputs,bcNMMsisdnInfo,bcNMConcat);	
			//RefreshBC();//can re remove this refresh and use BC methods? which one i hav no idea 
			bcNMNumRedeploy.InvokeMethod(""RefreshRecord"");
			bcNMNumRedeploy.InvokeMethod(""UpdateLinks"");
			return(intReturn);
			
		}
			
		bcNMNumRedeploy  = null;
		bcNMNumDeploy    = null;
		bcNMNumMaster	 = null;
		bcNumberMaster   = null;
		boNumAlloc       = null;
		boNumReserve     = null;
		bcNumAlloc       = null;
		bcNumReserve     = null;
		boNMNumTransfer  = null;
		boNumberMaster   = null;
		return (intReturn);
		
	}
	catch(e)
	{//what will this do?
		throw(e);
	}
	finally
	{
		bcNMNumRedeploy  = null;
		bcNMNumDeploy    = null;
		bcNMNumMaster 	 = null;
		bcNumberMaster   = null;
		boNumAlloc       = null;
		boNumReserve     = null;
		bcNumAlloc       = null;
		bcNumReserve     = null;
		boNMNumTransfer  = null;
		boNumberMaster   = null;
//1.3 below
		bcNMConcat = null;
		bcNMMsisdnInfo = null;
		bcNMMstrAlloc = null;
		bcNumBlock = null;
		boNumBlock = null;
//1.3 below
	}
}
"/**************************************************************************************
* Name          : NM Number Deployment Service UpdateAllocateSIMNum Method            * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Deployment Code File            	                      *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     			Comments     Reviewed Date        *
***************************************************************************************
*                                                                                     *
* 22/04/2004 	 1.0   		MBT   					Created       24/04/2004
* 09/09/2004	 1.1        Nitin              Called Number Deassociation function   *
* 15/11/2005	 2.0        Nitin              Updated calling condition for Deassociation function   *
20060706       | 2.1      | Prasad |           Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function UpdateAllocateSIMNum(bcNMMsisdnInfo,bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,strCurrStatus,strAssocStartId,bcNMConcat,blnIsInternal,bsDeassociate)
{
	var strErrVal = """";
	var psInputs;
	var psOutputs;	
	psInputs 	    = TheApplication().NewPropertySet();
	psOutputs 	    = TheApplication().NewPropertySet();
//----------------------------------------------------------------------------------------------------------
// If the status is changed to 'Allocated' then if Sales code is filled then create the record in Allocation
// table.If To Sales Code is not filled then updating the comment.
//----------------------------------------------------------------------------------------------------------
		
	if(strToStatus == ToString(TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""ALLOCATED""))){
						
		if(bcNMNumDeploy.GetFieldValue(""To Sales Code"") == """"){
			bcNMNumDeploy.SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD007""));
			strErrVal = ""RMSNRD007"";
		}
		else{			
			//if(blnIsInternal == 2){	
				blnIsDeallocation = ""N"";
				strErrVal = CreateAllocRecord(bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,bcNMConcat);
			//}
			//else{
			//	bcNMNumDeploy.SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD006""));
			//	bcNMNumDeploy.SetFieldValue(""To Sales Code"","""");
			//	bcNMNumDeploy.SetFieldValue(""To Dealer Name"","""");	
			//	bcNMNumDeploy.SetFieldValue(""To Dealer Area Name"","""");
			//	bcNMNumDeploy.SetFieldValue(""To Dealer Channel Name"","""");
			//	strErrVal = ""RMSNRD006"";
			//}	
		}
	}		
//--------------------------------------------------------------------------------------
// If the Status is changed to 'Available' then Deallocating the Number from the dealer 
//--------------------------------------------------------------------------------------

	if(strToStatus == ToString(TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE""))){
		
		if(bcNMNumDeploy.GetFieldValue(""To Sales Code"") == """"){
			blnIsDeallocation = ""Y"";
			strErrVal = CreateAllocRecord(bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,bcNMConcat);
		}
		else{
			//if(blnIsInternal == 1){	
			//	blnIsDeallocation = ""N"";
			//	strErrVal = CreateAllocRecord(bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,bcNMConcat);
			bcNMNumDeploy.SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD015""));
			strErrVal = ""RMSNRD015"";
			//}
			//else{
			//	bcNMNumDeploy.SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD005""));
			//	bcNMNumDeploy.SetFieldValue(""To Sales Code"","""");
			//	bcNMNumDeploy.SetFieldValue(""To Dealer Name"","""");	
			//	bcNMNumDeploy.SetFieldValue(""To Dealer Area Name"","""");
			//	bcNMNumDeploy.SetFieldValue(""To Dealer Channel Name"","""");
			//	strErrVal = ""RMSNRD005"";
			//}	
		}
	}
		
//-----------------------------------------------------------------------
// If 'To Status' is 'Lost' then Setting the values in Number Master
// and updating the block count.
//------------------------------------------------------------------------
	if(strToStatus == ToString(TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""LOST""))){
		UpdateAssociatedNumStatus(bcNumberMaster,strAssocStartId,strToStatus,bcNMConcat);
	}
//1.1....calling deassociation function if the deassociation flag is true	

//RMS:NN:20051115:Added condition. If no Error occurred then only deassociate numbers.	
	if(strErrVal == """")
	{
		if(bcNMNumDeploy.GetFieldValue(""Deassociation Flg"") == ""Y"")
		{
			with(bcNMMsisdnInfo)
			{
				ActivateField(""Assoc Start Id"");
		    	ActivateField(""Status"");
		    	ActivateField(""Block Id"");
		    	ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",strAssocStartId);
				ExecuteQuery();
				var blnIsRecord = FirstRecord();
				if(blnIsRecord)
				{
		    		psInputs.SetProperty(""MSISDN Id"",bcNMMsisdnInfo.GetFieldValue(""Id""));	
					psInputs.SetProperty(""Assoc Start Id"",bcNMMsisdnInfo.GetFieldValue(""Assoc Start Id""));	
					psInputs.SetProperty(""Current Status"",bcNMMsisdnInfo.GetFieldValue(""Status""));	
					psInputs.SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));	
					psInputs.SetProperty(""Block Id"",bcNMMsisdnInfo.GetFieldValue(""Block Id""));
					psInputs.SetProperty(""Partial(Y/N)"",""Y"");
					psInputs.SetProperty(""Type"",""SIM"");						
					bsDeassociate.InvokeMethod(""DeAssociate"",psInputs,psOutputs);
				}
			}
		}	
	}//RMS:NN:20051115:Ends
//2.1 below
	psInputs = null;
	psOutputs = null;
//2.1 above
	return(strErrVal);
}
"/**************************************************************************************
* Name          : NM Number Deployment Service UpdateAssociatedNumber Method     	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Deployment Code File            	                      *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     			Comments     Reviewed Date        *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	 1.0   		MBT   					Created       24/12/2003	      *
* 25/09/2005 	1.1   			Raja,MBT	 Modified      			25/09/2005      
* - Disable Update Block count functionality as per the new requirement	
**************************************************************************************/

function UpdateAssocAllocNumbers(bcNumberMaster,bcNMMstrAlloc,bcNMNumDeploy,strAssocStartId,strAllocatedTo,strAllocId,strToStatus,strNumStatus,bcNMConcat,blnIsDeallocation){
	
	var blnIsRecord;
	var intNumId;
	var strErrVal="""";
//Raja, MBT - Disable Update Block count	
/*	var psInputs;
	var psOutputs;
	var bsBlkCount;*/
	
	var boNMAllocMstr;
	var bcNMAllocMstr;
	
	boNMAllocMstr	= TheApplication().GetBusObject(""RMS NM Number Allocation"");
	bcNMAllocMstr	= boNMAllocMstr.GetBusComp(""RMS NM Number Master Allocation"");
//Raja, MBT - Disable Update Block count
	/*psInputs 	    = TheApplication().NewPropertySet();
	psOutputs 	    = TheApplication().NewPropertySet();*/
	
//-------------------------------------------------------------------------------------------
// Fetching all the assocated Numbers from Number Master using 'Assoc Start Id'  of SIM Number 
// Changing their status to 'Allocated'
//--------------------------------------------------------------------------------------------

	with(bcNumberMaster){
		ClearToQuery();
		SetSearchSpec(""Assoc Start Id"",strAssocStartId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
		
		while(blnIsRecord){
			intNumId = GetFieldValue(""Id"");
		//Raja, MBT - Disable Update Block count	
		/*	psInputs.SetProperty(""From Status"",strNumStatus);
			psInputs.SetProperty(""To Status"",strToStatus);
			psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));*/
					
			if(strToStatus != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""))
				SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED""));
			else
				SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));
			
			SetFieldValue(""Allocated To"",strAllocatedTo);
			SetFieldValue(""Sales Code"",strAllocatedTo);
			SetFieldValue(""Dealer Name"",bcNMNumDeploy.GetFieldValue(""To Dealer Name""));
			SetFieldValue(""Dealer Area Name"",bcNMNumDeploy.GetFieldValue(""To Dealer Area Name""));
			SetFieldValue(""Dealer Channel Name"",bcNMNumDeploy.GetFieldValue(""To Dealer Channel Name""));
			SetFieldValue(""Reserve Id"","""");
			SetFieldValue(""Reserved To"","""");
			SetFieldValue(""Blocking Date"","""");
			SetFieldValue(""Blocked For"","""");
		//	SetFieldValue(""Assigned To"","""");
			SetFieldValue(""Assigned Id"","""");
			SetFieldValue(""Assigned Date"","""");
			
			if(blnIsDeallocation == ""Y"")
				SetFieldValue(""Alloc Id"","""");
			else
				SetFieldValue(""Alloc Id"",strAllocId);
			
			SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
			WriteRecord();
			//Raja, MBT - Disable Update Block count
			/*bsBlkCount = TheApplication().GetService(""RMS RMS Block Calc"");							
			bsBlkCount.InvokeMethod(""UpdateNumberBlock"",psInputs,psOutputs);*/
				
			
//------------------------------------------------------------------------------
// Creating the records in 'Allocation Master BC' using 'Num Id' and 'Alloc Id'
//------------------------------------------------------------------------------	
			with(bcNMAllocMstr){
				ActivateField(""Num Id"");
				ActivateField(""Alloc Id"");
				ActivateField(""Status Before Allocation"");
				ClearToQuery();
				NewRecord(1);
				SetFieldValue(""Alloc Id"",strAllocId);
				SetFieldValue(""Num Id"",intNumId);
				if(strAllocatedTo !="""")
					SetFieldValue(""Status Before Allocation"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE""));
				WriteRecord();
			}
			
			blnIsRecord = NextRecord();
		}
		
	}
	
	with(bcNMConcat){
		ActivateField(""Status"");
		ActivateField(""Assoc Start Id"");
		ClearToQuery();
		SetSearchSpec(""Assoc Start Id"",strAssocStartId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
		
		while(blnIsRecord){
			SetFieldValue(""Status"",strToStatus);
			WriteRecord();
			blnIsRecord = NextRecord();
		}
	}
	
	bcNMAllocMstr	= null;
	boNMAllocMstr	= null;
	//Raja, MBT - Disable Update Block count
	/*psInputs		= null;
	psOutputs		= null;*/
	
	return(strErrVal);
}
"/**************************************************************************************
* Name          : NM Number Deployment Service UpdateAssociatedNumStatus Method       * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Deployment Code File            	                      *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     			Comments     Reviewed Date        *
***************************************************************************************
*                                                                                     *
* 27/04/2004 	 1.0   		MBT   					Created       24/12/2003	      *
* 25/09/2005 	1.1   			Raja,MBT	 Modified      			25/09/2005      
* - Disable Update Block count functionality as per the new requirement	
**************************************************************************************/

function UpdateAssociatedNumStatus(bcNumberMaster,strAssocStartId,strToStatus,bcNMConcat){
	
	var blnIsRecord;
	//Raja, MBT - Disable Update Block count
	/*var psInputs;
	var psOutputs;
	var bsBlkCount;*/
	var strFromStatus;
	
	/*psInputs 	    = TheApplication().NewPropertySet();
	psOutputs 	    = TheApplication().NewPropertySet();*/
	
	with(bcNumberMaster){
		ActivateField(""Allocated To"");
		ClearToQuery();
		SetSearchSpec(""Assoc Start Id"",strAssocStartId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
		
		while(blnIsRecord){
			SetFieldValue(""Reserve Id"","""");
			SetFieldValue(""Reservation End Date"","""");
			SetFieldValue(""Reserved To"","""");
			SetFieldValue(""Blocking Date"","""");
			SetFieldValue(""Blocked For"","""");
			SetFieldValue(""Assigned Id"","""");
			SetFieldValue(""Assigned Date"","""");
			SetFieldValue(""Allocated To"","""");
			
			strFromStatus = GetFieldValue(""Status"");
			
			if(GetFieldValue(""Status"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""LOST"")){ 
				if(strToStatus != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""LOST"")){ 
					SetFieldValue(""Status Bfr Lost"","""");
				}
			}
										
//-----------------------------------------------------------
// Setting status before lost if the status is set to lost.
//------------------------------------------------------------			
			if((strToStatus != bcNumberMaster.GetFieldValue(""Status""))
							&&
				(strToStatus == ToString(TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""LOST""))))			
				SetFieldValue(""Status Bfr Lost"",bcNumberMaster.GetFieldValue(""Status""));
			
			SetFieldValue(""Status"",strToStatus);
			SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
			WriteRecord();
		//Raja, MBT - Disable Update Block count
		/*	psInputs.SetProperty(""From Status"",strFromStatus);
			psInputs.SetProperty(""To Status"",strToStatus);
			psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
							
			bsBlkCount = TheApplication().GetService(""RMS RMS Block Calc"");							
			bsBlkCount.InvokeMethod(""UpdateNumberBlock"",psInputs,psOutputs);*/
			blnIsRecord = NextRecord();
		}
	}
	
	
//---------------------------------------------
// Updating the concat status of the numbers.
//---------------------------------------------

	with(bcNMConcat){
		ActivateField(""Status"");
		ActivateField(""Assoc Start Id"");
		ClearToQuery();
		SetSearchSpec(""Assoc Start Id"",strAssocStartId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
		
		while(blnIsRecord){
			SetFieldValue(""Status"",strToStatus);
			WriteRecord();
			blnIsRecord = NextRecord();
		}
	}
//Raja, MBT - Disable Update Block count	
/*	psInputs	= null;
	psOutputs	= null;*/
}
"/**************************************************************************************
* Name          : NM Number Deployment Service UpdateAvailableMSISDNNum Method           * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update Available MSISDN Number            	                      	  *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     			Comments     Reviewed Date        *
***************************************************************************************
*                                                                                     *
* 01/06/2006 	 1.0   		MBT   					Created       01/06/2006	      *
**************************************************************************************/
function UpdateAvailableMSISDNNum(bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,bcNMNumMaster,bcNMConcat,bsDeassociate,strCurrStatus,strToStatus,strToBlockId,strToSchemeId,strToClass,strToType,strToPrice,strFromSchemeId,strFromBlockId,strAssocStartId,psInputs,psOutputs){

	var strErrVal = """";
	var blnIsDeallocation 	= ""N"";

//-----------------------------------------------------------------------
// If 'To Status' is 'Allocated' then Setting the values in Number Master
// and updating the block count.
//------------------------------------------------------------------------
			if(strToStatus == ToString(TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""ALLOCATED""))){
		
				if(bcNMNumDeploy.GetFieldValue(""To Sales Code"") == """"){
					bcNMNumDeploy.SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD006""));
					bcNMNumDeploy.SetFieldValue(""To Sales Code"","""");
					bcNMNumDeploy.SetFieldValue(""To Dealer Name"","""");	
					bcNMNumDeploy.SetFieldValue(""To Dealer Area Name"","""");
					bcNMNumDeploy.SetFieldValue(""To Dealer Channel Name"","""");
					strErrVal = ""RMSNRD006"";
				}
				else{
			 
					if(bcNMNumDeploy.GetFieldValue(""Allocated To"") == """"){
						blnIsDeallocation = ""N"";
						strErrVal = CreateAllocRecord(bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,bcNMConcat);
					}
					else{
						if(bcNMNumDeploy.GetFieldValue(""Allocated To"") != bcNMNumDeploy.GetFieldValue(""To Sales Code"")){ 
							blnIsDeallocation = ""N"";
							strErrVal = CreateAllocRecord(bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,bcNMConcat);
						}
					}		
				}
			}

//-----------------------------------------------------------------------
// If 'To Status' is 'Not Available ' then Setting the values in Number Master
// and updating the block count.
//------------------------------------------------------------------------
			if(strToStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""NOT AVAILABLE"")){
				bcNMNumMaster.SetFieldValue(""Status"",strToStatus);
				bcNMNumMaster.SetFieldValue(""Status Date"",bcNMNumMaster.GetFieldValue(""Current Date""));

				if(strToBlockId != strFromBlockId)
					bcNMNumMaster.SetFieldValue(""Block Id"",strToBlockId);

				strErrVal = UpdateNumRecord(bcNMNumMaster,strCurrStatus,strToStatus,strToBlockId,strToSchemeId,strToClass,strToType,strToPrice,strFromSchemeId,strFromBlockId);
				if(strErrVal !="""")
						return(strErrVal);
			}
			else{
//-----------------------------------------------------------------------
// If 'To Status' is 'Available ' then Setting the values in Number Master
// if number is associated ,deassociating it and updating the block count.
//------------------------------------------------------------------------
				if(strToStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE"")){
					if(bcNMNumDeploy.GetFieldValue(""Is Associated"") == ""Y""){
						if(bcNMNumDeploy.GetFieldValue(""Deassociation Flg"") == ""Y""){
							if(strToClass !="""")
								bcNMNumMaster.SetFieldValue(""Class"",strToClass);
							if(strToType !="""")
								bcNMNumMaster.SetFieldValue(""Special Category Type"",strToType);
							if(strToPrice !="""")
								bcNMNumMaster.SetFieldValue(""Price"",strToPrice);
							bcNMNumMaster.WriteRecord();
							psInputs.SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));
							bsDeassociate.InvokeMethod(""DeAssociate"",psInputs,psOutputs); 
							UpdateAssociatedNumStatus(bcNumberMaster,strAssocStartId,strToStatus,bcNMConcat);
						
						}
					}
					else if(strToBlockId != strFromBlockId){
							bcNMNumMaster.SetFieldValue(""Block Id"",strToBlockId);
							strErrVal = UpdateNumRecord(bcNMNumMaster,strCurrStatus,strToStatus,strToBlockId,strToSchemeId,strToClass,strToType,strToPrice,strFromSchemeId,strFromBlockId);
						} else {
						if(strToClass !="""")
							bcNMNumMaster.SetFieldValue(""Class"",strToClass);
						if(strToType !="""")
							bcNMNumMaster.SetFieldValue(""Special Category Type"",strToType);
						if(strToPrice !="""")
							bcNMNumMaster.SetFieldValue(""Price"",strToPrice);
					}
				
					if(strErrVal !="""")
						return(strErrVal);
				}
				else{
			
//-----------------------------------------------------------------------
// If 'To Status' is 'Lost' then Setting the values in Number Master
// and updating the block count.
//------------------------------------------------------------------------
					if(strToStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""LOST"")){
						bcNMNumMaster.SetFieldValue(""Status Bfr Lost"",strCurrStatus);
						bcNMNumMaster.SetFieldValue(""Status"",strToStatus);
						bcNMNumMaster.SetFieldValue(""Status Date"",bcNMNumMaster.GetFieldValue(""Current Date""));
				
						if(strToBlockId != strFromBlockId)
							bcNMNumMaster.SetFieldValue(""Block Id"",strToBlockId);
				
						strErrVal = UpdateNumRecord(bcNMNumMaster,strCurrStatus,strToStatus,strToBlockId,strToSchemeId,strToClass,strToType,strToPrice,strFromSchemeId,strFromBlockId);
						if(strErrVal !="""")
						return(strErrVal);
					}
				}
			}

		
	return(strErrVal);

}
"/**************************************************************************************
* Name          : NM Number Deployment Service UpdateAvailableSIMNum Method           * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update Available SIM Number            	                      	  *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     			Comments     Reviewed Date        *
***************************************************************************************
*                                                                                     *
* 22/04/2004 	 1.0   		MBT   					Created       24/04/2004	      *
**************************************************************************************/
function UpdateAvailableSIMNum(bcNMMsisdnInfo,bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,strCurrStatus,strAssocStartId,bcNMConcat,blnIsInternal,bsDeassociate){

	var strErrVal = """";
	var blnIsRecord;

	var psInputs;
	var psOutputs;	

	psInputs 	    = TheApplication().NewPropertySet();
	psOutputs 	    = TheApplication().NewPropertySet();

//-------------------------------------------------------------------------
// If To Status is set to Available. Deassociating the MSISDN if selected.
//-------------------------------------------------------------------------	
	if(strToStatus == ToString(TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE""))){

		if(bcNMNumDeploy.GetFieldValue(""Deassociation Flg"") == ""Y""){
			with(bcNMMsisdnInfo){
				ActivateField(""Assoc Start Id"");
		    	ActivateField(""Status"");
		    	ActivateField(""Block Id"");
		    	ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",strAssocStartId);
				ExecuteQuery();
				blnIsRecord = FirstRecord();
				if(blnIsRecord){
		    		psInputs.SetProperty(""MSISDN Id"",bcNMMsisdnInfo.GetFieldValue(""Id""));	
					psInputs.SetProperty(""Assoc Start Id"",bcNMMsisdnInfo.GetFieldValue(""Assoc Start Id""));	
					psInputs.SetProperty(""Current Status"",bcNMMsisdnInfo.GetFieldValue(""Status""));	
					psInputs.SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));	
					psInputs.SetProperty(""Block Id"",bcNMMsisdnInfo.GetFieldValue(""Block Id""));
					psInputs.SetProperty(""Partial(Y/N)"",""Y"");
					psInputs.SetProperty(""Type"",""SIM"");						
					bsDeassociate.InvokeMethod(""DeAssociate"",psInputs,psOutputs);
				}
			}
		}	
	
		if((bcNMNumDeploy.GetFieldValue(""To Sales Code"") == """")
								&&
			(bcNMNumDeploy.GetFieldValue(""Allocated To"") != """")){
			blnIsDeallocation = ""Y"";
			strErrVal = CreateAllocRecord(bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,bcNMConcat);
		}
		else if(bcNMNumDeploy.GetFieldValue(""To Sales Code"") != """"){
			bcNMNumDeploy.SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD015""));
			strErrVal = ""RMSNRD015"";
			//if(blnIsInternal == 1){		
			//	if(bcNMNumDeploy.GetFieldValue(""Allocated To"") == """"){
			//		blnIsDeallocation = ""N"";
			//		strErrVal = CreateAllocRecord(bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,bcNMConcat);
			//	}
			//	else{
			//		if(bcNMNumDeploy.GetFieldValue(""Allocated To"") != bcNMNumDeploy.GetFieldValue(""To Sales Code"")){ 
			//			blnIsDeallocation = ""N"";
			//			strErrVal = CreateAllocRecord(bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,bcNMConcat);
			//		}
			//	}		
			//}
			//else{
			//	bcNMNumDeploy.SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD005""));
			//	bcNMNumDeploy.SetFieldValue(""To Sales Code"","""");
			//	bcNMNumDeploy.SetFieldValue(""To Dealer Name"","""");	
			//	bcNMNumDeploy.SetFieldValue(""To Dealer Area Name"","""");
			//	bcNMNumDeploy.SetFieldValue(""To Dealer Channel Name"","""");
			//	strErrVal = ""RMSNRD005"";
			//}
		}	
	}		
//-------------------------------------
// If To Status is set to Allocated
//------------------------------------	
			
	else if(strToStatus == ToString(TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""ALLOCATED""))){
		
		if(bcNMNumDeploy.GetFieldValue(""To Sales Code"") == """"){
			bcNMNumDeploy.SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD006""));
			bcNMNumDeploy.SetFieldValue(""To Sales Code"","""");
			bcNMNumDeploy.SetFieldValue(""To Dealer Name"","""");	
			bcNMNumDeploy.SetFieldValue(""To Dealer Area Name"","""");
			bcNMNumDeploy.SetFieldValue(""To Dealer Channel Name"","""");
			strErrVal = ""RMSNRD006"";
		}
		else{
		 	//if(blnIsInternal == 2){		
				if(bcNMNumDeploy.GetFieldValue(""Allocated To"") == """"){
					blnIsDeallocation = ""N"";
					strErrVal = CreateAllocRecord(bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,bcNMConcat);
				}
				else{
					if(bcNMNumDeploy.GetFieldValue(""Allocated To"") != bcNMNumDeploy.GetFieldValue(""To Sales Code"")){ 
						blnIsDeallocation = ""N"";
						strErrVal = CreateAllocRecord(bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,bcNMConcat);
					}
				}		
			//}
			//else{
			//	bcNMNumDeploy.SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD006""));
			//	bcNMNumDeploy.SetFieldValue(""To Sales Code"","""");
			//	bcNMNumDeploy.SetFieldValue(""To Dealer Name"","""");	
			//	bcNMNumDeploy.SetFieldValue(""To Dealer Area Name"","""");
			//	bcNMNumDeploy.SetFieldValue(""To Dealer Channel Name"","""");
			//	strErrVal = ""RMSNRD006"";
			//}	
		}
	}	
//--------------------------------
// If To Status is set to Lost.
//--------------------------------
	else if(strToStatus == ToString(TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""LOST"")))
		UpdateAssociatedNumStatus(bcNumberMaster,strAssocStartId,strToStatus,bcNMConcat);

	
	psInputs	= null;
	psOutputs	= null;	
	
	return(strErrVal);

}
"/**************************************************************************************
* Name          : NM Number Deployment Service UpdateHappointment Method              * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update Reservation Quota            	                      		  *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     			Comments     Reviewed Date        *
***************************************************************************************
*                                                                                     *
* 22/04/2004 	 1.0   		MBT   					Created       24/04/2004	      *
**************************************************************************************/
function UpdateHAppointment(strDealerCode){
//RK:22-06-2006
/*	var boVBCDMS;
	var bcVBCDMS;
	var intHAppointment;
		
	boVBCDMS = TheApplication().GetBusObject(""RMS BO DMS"");
	bcVBCDMS = boVBCDMS.GetBusComp(""RMS VBC DMS"");

	with(bcVBCDMS) {
		ActivateField(""DEALER_CODE"");
		ActivateField(""HAPPOINTMENT"");
		ClearToQuery();
		SetSearchSpec(""DEALER_CODE"",strDealerCode);
		ExecuteQuery();
		FirstRecord();		
	}
	
	if(bcVBCDMS.FirstRecord()){
		intHAppointment = ((ToInteger(bcVBCDMS.GetFieldValue(""HAPPOINTMENT""))) + 1);
		bcVBCDMS.SetFieldValue(""HAPPOINTMENT"",intHAppointment);		
		bcVBCDMS.WriteRecord();
	}
	
	bcVBCDMS   = null;	
	boVBCDMS  = null;
	
*/	
}
"/**************************************************************************************
* Name          : NM Number Deployment Service UpdateLostSIMNum Method                * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Deployment Code File            	                      *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     			Comments     Reviewed Date        *
**************************************************************************************
*                                                                                     *
* 22/04/2004 	 1.0   		MBT   					Created       24/04/2004	      *
**************************************************************************************/

function UpdateLostSIMNum(bcNMMsisdnInfo,bcNMNumDeploy,bcNMNumMaster,bcNumberMaster,strToStatus,strNumStatus,strAssocStartId,bcNMConcat,bsDeassociate,blnIsInternal){

   	var psInputs;
	var psOutputs;
  
	var strErrVal = """";
	var stRMSISDNId;
	
	var blnIsRecord;
	
	psInputs 	    = TheApplication().NewPropertySet();
	psOutputs 	    = TheApplication().NewPropertySet();
	   
//-----------------------------------------------------------------------------
// If 'To Status' is 'Trashed' then Deassociate the number,change the status 
// of SIM IMSI and MSISDN number and updating the Block Count.
//-----------------------------------------------------------------------------
	if(strToStatus == ToString(TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""TRASHED""))){
		
		with(bcNMMsisdnInfo){
			ActivateField(""Assoc Start Id"");
		    ActivateField(""Status"");
		    ActivateField(""Block Id"");
		    ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",strAssocStartId);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
			if(blnIsRecord){
		    	psInputs.SetProperty(""MSISDN Id"",bcNMMsisdnInfo.GetFieldValue(""Id""));	
				psInputs.SetProperty(""Assoc Start Id"",bcNMMsisdnInfo.GetFieldValue(""Assoc Start Id""));	
				psInputs.SetProperty(""Current Status"",bcNMMsisdnInfo.GetFieldValue(""Status""));	
				psInputs.SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE""));	
				psInputs.SetProperty(""Block Id"",bcNMMsisdnInfo.GetFieldValue(""Block Id""));
				psInputs.SetProperty(""Partial(Y/N)"",""Y"");
				psInputs.SetProperty(""Type"",""SIM"");						
				bsDeassociate.InvokeMethod(""DeAssociate"",psInputs,psOutputs);
			}
		}
		
		UpdateAssociatedNumStatus(bcNumberMaster,strAssocStartId,strToStatus,bcNMConcat);	
	}
			
//-----------------------------------------------------------------------------
// If 'To Status' is 'Available' check if status before lost was 'Available'
// Update the status information and the block information.
//-----------------------------------------------------------------------------
	if(strToStatus == ToString(TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE""))){
		
		if(bcNMNumMaster.GetFieldValue(""Status Bfr Lost"")==ToString(TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE"")))
			UpdateAssociatedNumStatus(bcNumberMaster,strAssocStartId,strToStatus,bcNMConcat);
		else{
			bcNMNumDeploy.SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD011"",strToStatus,bcNMNumMaster.GetFieldValue(""Status Bfr Lost"")));
			strErrVal = ""RMSNRD011"";
		}	
	}
	
//-----------------------------------------------------------------------------
// If 'To Status' is 'Allocated' check if status before lost was 'Allocated'
// Update the status information and the block information.
//-----------------------------------------------------------------------------
	if(strToStatus == ToString(TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""ALLOCATED""))){
		
		if(bcNMNumMaster.GetFieldValue(""Status Bfr Lost"")==ToString(TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""ALLOCATED"")))
			UpdateAssociatedNumStatus(bcNumberMaster,strAssocStartId,strToStatus,bcNMConcat);
		else{
			bcNMNumDeploy.SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD011"",strToStatus,bcNMNumMaster.GetFieldValue(""Status Bfr Lost"")));
			strErrVal = ""RMSNRD011"";
		}	
		
	}			

	psInputs 	    = null;
	psOutputs 	    = null;
	
	return(strErrVal);		
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
---------------+------+--------+----------------------------------------------
*/
function UpdateMSISDNNumbers(bcNMNumDeploy,bcNMNumMaster,bcNumberMaster,bcNumAlloc,bcNumBlock,bcNumReserve,bcNumMstrReserve,Inputs,bcNMConcat,bcNMMstrAlloc)
{
	var strCurrStatus;
	var strToStatus;
	var strNumber;
	var strNumId;
	var strToSchemeId;
	var strFromSchemeId;
	var strToClass;
	var strToType;
	var strFromBlockId;
	var strToBlockId;
	var strSalesCode;
	var strToPrice;
	var strErrVal="""";
	var strAssocStartId;
	var strNumberString;
	var strTypeIdentifier;
	var strNotAvailable ;
	var strAvailable;
	var strQuarantine;
	var strLost;
	var strReserved;
	var strDealerCode;
	
//----------------------------------
// Code for Phase 1A2 requirement.	
//----------------------------------
	var strDlrName;
	var strDlrAreaName;
	var strDlrChnlName;
			
	var intAvailableQty;
	
	var blnIsAssociated;
	var blnIsInternal;
	var blnIsRecord;
	
	var psInputs 	    = TheApplication().NewPropertySet();
	var psOutputs 	    = TheApplication().NewPropertySet();
	
	var bsDeassociate;
		

	strNumId	     = bcNMNumDeploy.GetFieldValue(""Number Id"");
	strNumber        = bcNMNumDeploy.GetFieldValue(""Number"");
	strFromSchemeId  = bcNMNumDeploy.GetFieldValue(""Scheme Id"");
	strTypeIdentifier= bcNMNumDeploy.GetFieldValue(""Type Identifier"");
	strCurrStatus    = bcNMNumDeploy.GetFieldValue(""Current Status"");
	strToStatus      = bcNMNumDeploy.GetFieldValue(""To Status"");
	strToSchemeId    = bcNMNumDeploy.GetFieldValue(""To Scheme Id"");
	strToType	     = bcNMNumDeploy.GetFieldValue(""To Special Category(Type)"");
	strToClass       = bcNMNumDeploy.GetFieldValue(""To Class"");
	strToPrice	     = bcNMNumDeploy.GetFieldValue(""To Price"");	
	strSalesCode     = bcNMNumDeploy.GetFieldValue(""To Sales Code"");
	strFromBlockId   = bcNMNumMaster.GetFieldValue(""Block Id"");
	strAssocStartId  = bcNMNumMaster.GetFieldValue(""Assoc Start Id"");	
	strNumberString  = ToString(bcNMNumMaster.GetFieldValue(""NumStringDelimNoCS""));
	blnIsAssociated  = bcNMNumDeploy.GetFieldValue(""Is Associated"");
	blnIsInternal	 =	bcNMNumDeploy.GetFieldValue(""Is Internal"");	
	
	strDlrName = bcNMNumDeploy.GetFieldValue(""To Dealer Name"");	
	strDlrAreaName = bcNMNumDeploy.GetFieldValue(""To Dealer Area Name"");
	strDlrChnlName = bcNMNumDeploy.GetFieldValue(""To Dealer Channel Name"");
	
//------------------------------------------------------------------------------------	
//  For Partial Deassociation setting the inputs to the Deassociation business service.
//------------------------------------------------------------------------------------
	
	psInputs.SetProperty(""MSISDN Id"",strNumId);	
	psInputs.SetProperty(""Assoc Start Id"",strAssocStartId);
	psInputs.SetProperty(""Block Id"",strFromBlockId);	
	psInputs.SetProperty(""Current Status"",strCurrStatus);	
	psInputs.SetProperty(""Partial(Y/N)"",""Y"");
	psInputs.SetProperty(""Type"",""MSISDN"");						
	
	bsDeassociate	 = TheApplication().GetService(""RMS RMS Deployment Deassociate Function"");
	
	with(bcNumBlock){
	
		ActivateField(""Available Quantity"");

//---------------------------------------------------------------------------------------
// If 'Current Inventory' and 'To Inventory' are different then fetching the 'To Block Id'
//----------------------------------------------------------------------------------------
		
		if((strFromSchemeId != strToSchemeId)&&(strToSchemeId !="""")){
			ClearToQuery();
			SetSearchSpec(""Scheme Id"",strToSchemeId);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
				strToBlockId = GetFieldValue(""Id"");
					
//-------------------------------------------------------------------------------------------------		
// Raising an error if the Quantity in the 'To Block' is insufficient to transfer from 'From Block'
//-------------------------------------------------------------------------------------------------				

			ClearToQuery();
			SetSearchSpec(""Id"",strToBlockId);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord()){
				intAvailableQty = ToInteger(bcNumBlock.GetFieldValue(""Available Quantity""));
				
				if(intAvailableQty < 1){
					strErrVal = ""RMSNIM003"";
					bcNMNumDeploy.SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD013""));
					return(strErrVal);
				}
			}
		}
		else
			strToBlockId = strFromBlockId ;	
	}	

//-----------------------------------------------------------------------
// Switch case depending on the 'Current Status' of the number to update.		
//-----------------------------------------------------------------------
	strNotAvailable = TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""NOT AVAILABLE"");
	strAvailable    = TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE"");
	strQuarantine   = TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""QUARANTINE"");
	strLost         = TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""LOST"");
	strReserved	    = TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""RESERVED"");
	
	switch(strCurrStatus){
		
		case strNotAvailable:
							
				strErrVal = UpdateNotAvailableMSISDNNum(bcNMNumMaster,strCurrStatus,strToStatus,strToBlockId,strToSchemeId,strToClass,strToType,strToPrice,strFromSchemeId,strFromBlockId);
				if(strErrVal !="""")
					return(strErrVal);
						
			break;	
		
		
		case strAvailable:
		
			strErrVal = UpdateAvailableMSISDNNum(bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,bcNMNumMaster,bcNMConcat,bsDeassociate,strCurrStatus,strToStatus,strToBlockId,strToSchemeId,strToClass,strToType,strToPrice,strFromSchemeId,strFromBlockId,strAssocStartId,psInputs,psOutputs);
			if(strErrVal !="""")
					return(strErrVal);
				
			break;	
		case strQuarantine:	
//-----------------------------------------------------------------------------
// If 'To Status' is 'Available' then Deassociate the number,change the status 
// of SIM IMSI and MSISDN number and updating the Block Count.
//-----------------------------------------------------------------------------
			if(strToStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE"")){
				//if(ValidateQuarantineDate(bcNMNumMaster,bsDeassociate,psInputs,psOutputs,strToStatus,bcNMNumDeploy)) {
					bcNMNumMaster.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE""));
					bcNMNumMaster.SetFieldValue(""Status Date"",bcNMNumMaster.GetFieldValue(""Current Date""));
					if(bcNMNumDeploy.GetFieldValue(""Is Associated"") != ""Y""){
						UpdateQuarantineMSISDN(bcNMNumMaster);	
				//	}
					if(strToBlockId != strFromBlockId)
						bcNMNumMaster.SetFieldValue(""Block Id"",strToBlockId);	
						
					strErrVal = UpdateNumRecord(bcNMNumMaster,strCurrStatus,strToStatus,strToBlockId,strToSchemeId,strToClass,strToType,strToPrice,strFromSchemeId,strFromBlockId);
	
					if(strErrVal !="""")
						return(strErrVal);
					
				} else {
					return(""error"");
				}
			}

			if(strToStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""NOT AVAILABLE"")){
				if(ValidateQuarantineDate(bcNMNumMaster,bsDeassociate,psInputs,psOutputs,strToStatus,bcNMNumDeploy)) {
					bcNMNumMaster.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""NOT AVAILABLE""));
					bcNMNumMaster.SetFieldValue(""Status Date"",bcNMNumMaster.GetFieldValue(""Current Date""));
					if(bcNMNumDeploy.GetFieldValue(""Is Associated"") != ""Y""){
						UpdateQuarantineMSISDN(bcNMNumMaster);		
					}
					if(strToBlockId != strFromBlockId)
						bcNMNumMaster.SetFieldValue(""Block Id"",strToBlockId);
							
					strErrVal = UpdateNumRecord(bcNMNumMaster,strCurrStatus,strToStatus,strToBlockId,strToSchemeId,strToClass,strToType,strToPrice,strFromSchemeId,strFromBlockId);
					if(strErrVal !="""")
						return(strErrVal);
				} else {
					return(""error"");
				}
			}	
			if(strToStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""QUARANTINE"")){
			
				if(bcNMNumDeploy.GetFieldValue(""Is Associated"") == ""Y""){
					if(bcNMNumDeploy.GetFieldValue(""Deassociation Flg"") == ""Y""){
						if(strToClass !="""")
							bcNMNumMaster.SetFieldValue(""Class"",strToClass);
						if(strToType !="""")
							bcNMNumMaster.SetFieldValue(""Special Category Type"",strToType);
						if(strToPrice !="""")
							bcNMNumMaster.SetFieldValue(""Price"",strToPrice);
						bcNMNumMaster.WriteRecord();
						psInputs.SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE""));
						bsDeassociate.InvokeMethod(""DeAssociate"",psInputs,psOutputs); 
						return(strErrVal);
					}
				}
				else if(strToBlockId != strFromBlockId){
					bcNMNumMaster.SetFieldValue(""Block Id"",strToBlockId);
					strErrVal = UpdateNumRecord(bcNMNumMaster,strCurrStatus,strToStatus,strToBlockId,strToSchemeId,strToClass,strToType,strToPrice,strFromSchemeId,strFromBlockId);
				} else {
					if(strToClass !="""")
						bcNMNumMaster.SetFieldValue(""Class"",strToClass);
					if(strToType !="""")
						bcNMNumMaster.SetFieldValue(""Special Category Type"",strToType);
					if(strToPrice !="""")
						bcNMNumMaster.SetFieldValue(""Price"",strToPrice);
				}
				
				if(strErrVal !="""")
					return(strErrVal);
			}					
			break;	
				
		case strLost:
//-----------------------------------------------------------------------------
// If 'To Status' is 'Lost' then setting the field values in number master and
// updating the block count;
//-----------------------------------------------------------------------------
			if(strToStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""LOST"")){
				bcNMNumMaster.SetFieldValue(""Status Bfr Lost"",strCurrStatus);
				
				if(strToBlockId != strFromBlockId)
						bcNMNumMaster.SetFieldValue(""Block Id"",strToBlockId);
				
				strErrVal = UpdateNumRecord(bcNMNumMaster,strCurrStatus,strToStatus,strToBlockId,strToSchemeId,strToClass,strToType,strToPrice,strFromSchemeId,strFromBlockId);
		
				if(strErrVal !="""")
					return(strErrVal);
			}		
			break;
			
		case strReserved:
			if(strToStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""RESERVED"")){		
				if(bcNMNumDeploy.GetFieldValue(""Is Associated"") == ""Y"")
					break;
	
				else{
					
					if(strToBlockId != strFromBlockId)
						bcNMNumMaster.SetFieldValue(""Block Id"",strToBlockId);
					
					strErrVal = UpdateNumRecord(bcNMNumMaster,strCurrStatus,strToStatus,strToBlockId,strToSchemeId,strToClass,strToType,strToPrice,strFromSchemeId,strFromBlockId);
						
					if(strErrVal !="""")
						return(strErrVal);
						
					if(bcNMNumDeploy.GetFieldValue(""To Sales Code"") != """"){						
						if(bcNMNumMaster.GetFieldValue(""Reserved To"") != bcNMNumDeploy.GetFieldValue(""To Sales Code"")){
					
							strDealerCode = bcNMNumMaster.GetFieldValue(""Reserved To"");	
						
							bcNMNumMaster.SetFieldValue(""Reserved To"",bcNMNumDeploy.GetFieldValue(""To Sales Code""));	
							bcNMNumMaster.SetFieldValue(""Dealer Name"",bcNMNumDeploy.GetFieldValue(""To Dealer Name""));
							bcNMNumMaster.SetFieldValue(""Dealer Area Code"",bcNMNumDeploy.GetFieldValue(""To Dealer Area Name""));
							bcNMNumMaster.SetFieldValue(""Dealer Channel Code"",bcNMNumDeploy.GetFieldValue(""To Dealer Channel Name""));	
						
							//if(bcNMNumMaster.GetFieldValue(""Source System"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""RMS""))
							//	UpdateHAppointment(strDealerCode);				
				
						}
					}	
				}
			}
			break;		
		
		default:
			strErrVal = UpdateNumRecord(bcNMNumMaster,strCurrStatus,strToStatus,strToBlockId,strToSchemeId,strToClass,strToType,strToPrice,strFromSchemeId,strFromBlockId);
						
			if(strErrVal !="""")
				return(strErrVal);
			break; 	
			
		}	
				
	bcNMNumMaster.WriteRecord();
	
	
	psInputs	= null;
	psOutputs	= null;
//1.1 below
	bsDeassociate = null;
//1.1 above	
	return(strErrVal);
}
"/**************************************************************************************
* Name          : NM Number Deployment Service UpdateNotAvailableMSISDNNum Method           * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update NotAvailable MSISDN Number            	                      	  *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     			Comments     Reviewed Date        *
***************************************************************************************
*                                                                                     *
* 01/06/2006 	 1.0   		MBT   					Created       01/06/2006	      *
**************************************************************************************/
function UpdateNotAvailableMSISDNNum(bcNMNumMaster,strCurrStatus,strToStatus,strToBlockId,strToSchemeId,strToClass,strToType,strToPrice,strFromSchemeId,strFromBlockId){


	var strErrVal = """";
//-----------------------------------------------------------------------
// If 'To Status' is 'Available ' then Setting the values in Number Master
// and updating the block count.
//------------------------------------------------------------------------
			if(strToStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE"")){
				bcNMNumMaster.SetFieldValue(""Status"",strToStatus);
				bcNMNumMaster.SetFieldValue(""Status Date"",bcNMNumMaster.GetFieldValue(""Current Date""));
					
				if(strToBlockId != strFromBlockId)
					bcNMNumMaster.SetFieldValue(""Block Id"",strToBlockId);
										
				strErrVal = UpdateNumRecord(bcNMNumMaster,strCurrStatus,strToStatus,strToBlockId,strToSchemeId,strToClass,strToType,strToPrice,strFromSchemeId,strFromBlockId);
				if(strErrVal !="""")
						return(strErrVal);
			}
			else{
//-----------------------------------------------------------------------
// If 'To Status' is 'Not Available ' then Setting the values in Number Master
// if number is associated ,deassociating it and updating the block count
//-----------------------------------------------------------------------
		
				if(strToStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""NOT AVAILABLE"")){
					
					if(strToBlockId != strFromBlockId)
						bcNMNumMaster.SetFieldValue(""Block Id"",strToBlockId);
					
					strErrVal = UpdateNumRecord(bcNMNumMaster,strCurrStatus,strToStatus,strToBlockId,strToSchemeId,strToClass,strToType,strToPrice,strFromSchemeId,strFromBlockId);
					if(strErrVal !="""")
						return(strErrVal);
				}
			}
	return(strErrVal);		
}
"/**************************************************************************************
* Name          : NM Number Deployment Service UpdateNumRecord Method 	              * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Deployment Code File                      			      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date   		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003	1.0   		   MBT					   	Created       24/12/2003      *
* 25/09/2005 	1.1   			Raja,MBT	 Modified      			25/09/2005      
* - Disable Update Block count functionality as per the new requirement	
**************************************************************************************/

function UpdateNumRecord(bcNMNumMaster,strCurrStatus,strToStatus,strToBlockId,strToSchemeId,strToClass,strToType,strToPrice,strFromSchemeId,strFromBlockId){		

	var strErrVal = """";
	//Raja, MBT - Disable Update Block count
	/*var psInputs;
	var psOutputs;
		
	var bsBlkCount;	

		
	psInputs 	    = TheApplication().NewPropertySet();
	psOutputs 	    = TheApplication().NewPropertySet();
	
	psInputs.SetProperty(""From Status"",strCurrStatus);
	psInputs.SetProperty(""To Status"",strToStatus);
	psInputs.SetProperty(""Object Id"",strToBlockId);*/
	
//-----------------------------------------------------------------------
// Setting the changed field values in the Number Master and then calling
// the business service to update the block count
//-----------------------------------------------------------------------
			
	if(strToSchemeId !="""")
		bcNMNumMaster.SetFieldValue(""Scheme Id"",strToSchemeId);
	if(strToClass !="""")
		bcNMNumMaster.SetFieldValue(""Class"",strToClass);
	if(strToType !="""")
		bcNMNumMaster.SetFieldValue(""Special Category Type"",strToType);
	if(strToPrice !="""")
		bcNMNumMaster.SetFieldValue(""Price"",strToPrice);
//Raja, MBT - Disable Update Block count		
//--------------------------------------------------------
// Calling the business service to update the block count
//--------------------------------------------------------		
/*	
	if((strFromSchemeId != """") && (strToSchemeId != """")){
		if(strFromSchemeId != strToSchemeId){
			psInputs.SetProperty(""From Status"",strCurrStatus);
			psInputs.SetProperty(""To Status"","""");
			psInputs.SetProperty(""Object Id"",strFromBlockId);
			bsBlkCount = TheApplication().GetService(""RMS RMS Block Calc"");							
			bsBlkCount.InvokeMethod(""UpdateNumberBlock"",psInputs,psOutputs);
			
			psInputs.SetProperty(""From Status"","""");
			psInputs.SetProperty(""To Status"",strToStatus);
			psInputs.SetProperty(""Object Id"",strToBlockId);
			bsBlkCount = TheApplication().GetService(""RMS RMS Block Calc"");							
			bsBlkCount.InvokeMethod(""UpdateNumberBlock"",psInputs,psOutputs);
			return(strErrVal);	
		}
	}
	
	bsBlkCount = TheApplication().GetService(""RMS RMS Block Calc"");							
	bsBlkCount.InvokeMethod(""UpdateNumberBlock"",psInputs,psOutputs);
	
	psInputs	= null;
	psOutputs	= null;		
	
	bsBlkCount	= null;*/
	
	return(strErrVal);							
}
"/**************************************************************************************
* Name          : NM Number Deployment Service UpdateNumStatus Method 	              * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Deployment Code File                      			      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003	1.0   		   MBT					   	Created       24/12/2003      *
* 25/09/2005 	1.1   			Raja,MBT	 Modified      			25/09/2005      
* - Disable Update Block count functionality as per the new requirement	
**************************************************************************************/

function UpdateNumStatus(bcNMNumMaster,strCurrStatus,strToStatus,strBlockId){		

	var psInputs;
	var psOutputs;
		
	var bsBlkCount;	
	var strErrVal = """";
		
	psInputs 	    = TheApplication().NewPropertySet();
	psOutputs 	    = TheApplication().NewPropertySet();
	
	psInputs.SetProperty(""From Status"",strCurrStatus);
	psInputs.SetProperty(""To Status"",strToStatus);
	psInputs.SetProperty(""Object Id"",strToBlockId);
		
//--------------------------------------------------------
// Calling the business service to update the block count
//--------------------------------------------------------		

	bsBlkCount = TheApplication().GetService(""RMS RMS Block Calc"");							
	bsBlkCount.InvokeMethod(""UpdateNumberBlock"",psInputs,psOutputs);
	
	
	psInputs	= null;
	psOutputs	= null;
		
	bsBlkCount	= null;	
	
	return(strErrVal);							
}
"/********************************************************************************************
* Name          : NM Number Deployment Service UpdateNumbers Method		 	                * 
* Author        : Mahindra British Telecom                                                  *
* Description   : NM Number Deployment Code File                      			            *
*																					        *
* Amendment Details                                                                         *
*********************************************************************************************
* Date    		Version  	AmendedBy  Comments     Reviewed Date    *
*********************************************************************************************
*                                                                                           *
* 22/12/2003	1.0   		MBT	       Created       24/12/2003                             *
* 23/06/2006	1.1   		ARUNJ      SiebelES#12 Incorporated condition after ExecuteQuery*
*********************************************************************************************/

function UpdateNumbers(bcNMNumDeploy,bcNMNumMaster,bcNumberMaster,bcNumAlloc,bcNumBlock,bcNumReserve,bcNumMstrReserve,bcNMMstrAlloc,Inputs,bcNMMsisdnInfo,bcNMConcat){
	
	var blnIsRecord;
	
	var strErrVal ="""";
	var strType;
	var strNumId;
	var blnFlg;
//-------------------------------------------------------------------------
// 	Calling the Update SIM or SMISDN Function for each record independently
//  having Status 'Pending'.
//--------------------------------------------------------------------------

	blnIsRecord = bcNMNumDeploy.FirstRecord();
	
	with(bcNumberMaster){		
		ActivateField(""Status"");
		ActivateField(""Allocated To"");
		ActivateField(""Alloc Id"");
		ActivateField(""Dealer Name"");
		ActivateField(""Dealer Area Name"");
		ActivateField(""Dealer Channel Name"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Block Id"");
		ActivateField(""Reserve Id"");
		ActivateField(""Reservation End Date"");
		ActivateField(""Reserved To"");
		ActivateField(""Blocking Date"");
		ActivateField(""Blocked For"");
		ActivateField(""Sales Code"");
	//	ActivateField(""Assigned To"");
		ActivateField(""Assigned Id"");
		ActivateField(""Assigned Date"");
		ActivateField(""Status Date"");
		ActivateField(""Current Date"");
		ActivateField(""NumStringNoCS"");
		ActivateField(""Number"");
		ActivateField(""Status Bfr Lost"");
	
	}
			
	while(blnIsRecord){
	
		if(bcNMNumDeploy.GetFieldValue(""Result"") == (TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""COMPLETE"")) || bcNMNumDeploy.GetFieldValue(""Result"")== (TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""))){
			strErrVal = ""RMSNIM006"";
			return(strErrVal);
		}
		else{
	
			bcNMNumDeploy.SetFieldValue(""Result"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
			bcNMNumDeploy.WriteRecord();
			
			strType 		= ToString(bcNMNumDeploy.GetFieldValue(""Type Identifier""));
			strNumId	    = ToString(bcNMNumDeploy.GetFieldValue(""Number Id""));
//----------------------------------------------------------------------
// Calling the functions 'UpdateSIMNumbers' or 'UpdateMSISDNNumbers'
// depending on the Type Identifier of the Number
//----------------------------------------------------------------------
			with(bcNMNumMaster){	
				ActivateField(""Block Id"");
				ActivateField(""Assoc Start Id"");
				ActivateField(""Status"");
				ActivateField(""Special Category Type"");
				ActivateField(""Class"");
				ActivateField(""NumStringDelimNoCS"");
				ActivateField(""Price"");
				ActivateField(""Status Bfr Lost"");
				ActivateField(""Dealer Name"");
				ActivateField(""Dealer Area Code"");
				ActivateField(""Dealer Channel Code""); 
				ActivateField(""Blocking Date"");
				ActivateField(""Blocked For"");
				ActivateField(""Reserved To"");
				ActivateField(""Reserve Id"");
				ActivateField(""Reservation End Date"");
				ActivateField(""Available Date"");
				ActivateField(""Quarantine Date"");
				ActivateField(""Sales Code"");
				ActivateField(""Assigned Id"");
				ActivateField(""Assigned Date"");
				ActivateField(""Is Associated"");
				ActivateField(""Current Date"");
				ActivateField(""Status Date"");
				ActivateField(""Source System"");
				ActivateField(""Disconnect Type"");
				ActivateField(""Alloc Id"");
				ActivateField(""Record Blocking Date"");
				ActivateField(""Record Blocked For"");
				ActivateField(""Using Type"");
				ActivateField(""Artwork Id"");
				ActivateField(""PreActivationId"");
				
				ClearToQuery();
				SetSearchSpec(""Id"",strNumId);
				ExecuteQuery(ForwardOnly);
// below 1.1
			//	FirstRecord();
// above 1.1
			}
// below 1.1
			if(bcNMNumMaster.FirstRecord()){
// above 1.1
				strErrVal = CheckFieldValues(bcNMNumMaster,bcNMNumDeploy,strType);
				if(strErrVal != """"){
					blnIsRecord = bcNMNumDeploy.NextRecord();
					continue;	
				}
	
				if(strType == TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""))
					strErrVal = UpdateMSISDNNumbers(bcNMNumDeploy,bcNMNumMaster,bcNumberMaster,bcNumAlloc,bcNumBlock,bcNumReserve,bcNumMstrReserve,Inputs,bcNMConcat,bcNMMstrAlloc);
				else
					strErrVal = UpdateSIMNumbers(bcNMNumDeploy,bcNMNumMaster,bcNumberMaster,bcNumAlloc,bcNMMstrAlloc,Inputs,bcNMMsisdnInfo,bcNMConcat);
// below 1.1
			}
// above 1.1
		}
		
		if(strErrVal != """")
			bcNMNumDeploy.SetFieldValue(""Result"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""FAILED""));
	 	else
	 		bcNMNumDeploy.SetFieldValue(""Result"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""COMPLETE""));

	 	bcNMNumDeploy.WriteRecord();
	 
	 	blnIsRecord = bcNMNumDeploy.NextRecord();
	}
	
	return(strErrVal);	
}
"/**************************************************************************************
* Name          : NM Number Deployment Service UpdateQuarantineMSISDN Method          * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Deployment Code File            	                      *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     			Comments     Reviewed Date        *
***************************************************************************************
*                                                                                     *
* 22/04/2004 	 1.0   		MBT   					Created       24/04/2004	      *
**************************************************************************************/

function UpdateQuarantineMSISDN(&bcNumberMaster)
{
	with(bcNumberMaster) {
		SetFieldValue(""Reserve Id"","""");
		SetFieldValue(""Reserved To"","""");
		SetFieldValue(""Sales Code"","""");
		SetFieldValue(""Available Date"","""");
		SetFieldValue(""Assigned Date"","""");
		SetFieldValue(""Quarantine Date"","""");
		SetFieldValue(""Dealer Name"","""");
		SetFieldValue(""Dealer Channel Code"","""");
		SetFieldValue(""Dealer Area Code"","""");
		SetFieldValue(""Source System"","""");
		SetFieldValue(""Disconnect Type"","""");
		SetFieldValue(""Alloc Id"","""");	
		SetFieldValue(""PreActivationId"","""");	
		
		SetFieldValue(""Record Blocking Date"","""");
		SetFieldValue(""Record Blocked For"","""");
		SetFieldValue(""Assigned Id"","""");
		SetFieldValue(""Using Type"","""");
		SetFieldValue(""Reservation End Date"","""");	
		SetFieldValue(""Artwork Id"","""");
		
	}
}
"/**************************************************************************************
* Name          : NM Number Deployment Service UpdateSIMNumbers Method 	              * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Deployment Code File                      			      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 23/12/2003	1.0   		   MBT					   	Created       24/12/2003      *
**************************************************************************************/

function UpdateSIMNumbers(bcNMNumDeploy,bcNMNumMaster,bcNumberMaster,bcNumAlloc,bcNMMstrAlloc,Inputs,bcNMMsisdnInfo,bcNMConcat){
	
	var strCurrStatus;
	var strToStatus;
	var strAssocStartId;
	var strErrVal="""";
	var blnIsDeallocation 	= ""N"";
	var blnIsAssociated 	= false;
	
	var blnIsInternal;
	var blnIsRecord			= false;
	
	var bsDeassociate;
	
	strCurrStatus     = ToString(bcNMNumDeploy.GetFieldValue(""Current Status""));
	strToStatus       = ToString(bcNMNumDeploy.GetFieldValue(""To Status""));
	strAssocStartId   = bcNMNumMaster.GetFieldValue(""Assoc Start Id"");	
	blnIsAssociated   = bcNMNumDeploy.GetFieldValue(""Is Associated"");
	blnIsInternal	  =	ToInteger(bcNMNumDeploy.GetFieldValue(""Is Internal""));	
	bsDeassociate	  = TheApplication().GetService(""RMS RMS Deployment Deassociate Function"");
	
//-----------------------------------
// Checking if number is associated.
//-----------------------------------
	if(blnIsAssociated == false){
		bcNMNumDeploy.SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD010""));
		bcNMNumDeploy.SetFieldValue(""To Sales Code"","""");
		bcNMNumDeploy.SetFieldValue(""To Dealer Name"","""");	
		bcNMNumDeploy.SetFieldValue(""To Dealer Area Name"","""");
		bcNMNumDeploy.SetFieldValue(""To Dealer Channel Name"","""");
		strErrVal = ""RMSNRD010"";
		return(strErrVal);
	}
			
  	if(strCurrStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""))
		strErrVal = UpdateAvailableSIMNum(bcNMMsisdnInfo,bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,strCurrStatus,strAssocStartId,bcNMConcat,blnIsInternal,bsDeassociate);
	
	else if(strCurrStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED""))
		strErrVal = UpdateAllocateSIMNum(bcNMMsisdnInfo,bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,strCurrStatus,strAssocStartId,bcNMConcat,blnIsInternal,bsDeassociate);
	
	else if(strCurrStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""LOST""))
		strErrVal = UpdateLostSIMNum(bcNMMsisdnInfo,bcNMNumDeploy,bcNMNumMaster,bcNumberMaster,strToStatus,strCurrStatus,strAssocStartId,bcNMConcat,bsDeassociate,blnIsInternal);

	else if(strCurrStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED""))
		strErrVal = UpdateTrashedSIMNum(bcNMMsisdnInfo,bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,strCurrStatus,strAssocStartId,bcNMConcat,blnIsInternal,bsDeassociate);
	
	bsDeassociate = null;
	
	return(strErrVal);
}
"/**************************************************************************************
* Name          : NM Number Deployment Service UpdateTrashedSIMNum Method             * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Deployment Code File            	                      *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     			Comments     Reviewed Date        *
***************************************************************************************
*                                                                                     *
* 22/04/2004 	 1.0   		MBT   					Created       24/04/2004	      *
**************************************************************************************/

function UpdateTrashedSIMNum(bcNMMsisdnInfo,bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,strNumStatus,strAssocStartId,bcNMConcat,blnIsInternal,bsDeassociate){

	var psInputs;
	var psOutputs;
     
	var strErrVal = """";
	var blnIsRecord;
	
	psInputs 	    = TheApplication().NewPropertySet();
	psOutputs 	    = TheApplication().NewPropertySet();

//-------------------------------------------------
// If status is changed to Available from Trashed.
//-------------------------------------------------
	if(strToStatus == ToString(TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE""))){
				
		with(bcNMMsisdnInfo){
			ActivateField(""Assoc Start Id"");
		    ActivateField(""Status"");
		    ActivateField(""Block Id"");
		    ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",strAssocStartId);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
			if(blnIsRecord){
		    	psInputs.SetProperty(""MSISDN Id"",bcNMMsisdnInfo.GetFieldValue(""Id""));	
				psInputs.SetProperty(""Assoc Start Id"",bcNMMsisdnInfo.GetFieldValue(""Assoc Start Id""));	
				psInputs.SetProperty(""Current Status"",bcNMMsisdnInfo.GetFieldValue(""Status""));	
				psInputs.SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE""));	
				psInputs.SetProperty(""Block Id"",bcNMMsisdnInfo.GetFieldValue(""Block Id""));
				psInputs.SetProperty(""Partial(Y/N)"",""Y"");
				psInputs.SetProperty(""Type"",""SIM"");						
				bsDeassociate.InvokeMethod(""DeAssociate"",psInputs,psOutputs);
			}
		}
		
		if((bcNMNumDeploy.GetFieldValue(""Allocated To"") != """")
								&&
			(bcNMNumDeploy.GetFieldValue(""To Sales Code"") == """")){
				blnIsDeallocation = ""Y"";
				strErrVal = CreateAllocRecord(bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,bcNMConcat);
		}
		
		else if	((bcNMNumDeploy.GetFieldValue(""Allocated To"") == """")
								&&
			(bcNMNumDeploy.GetFieldValue(""To Sales Code"") == """")){	
					UpdateAssociatedNumStatus(bcNumberMaster,strAssocStartId,strToStatus,bcNMConcat);
		}
					
		else{						
			if(blnIsInternal == 1){		
				if(bcNMNumDeploy.GetFieldValue(""Allocated To"") == """"){
					blnIsDeallocation = ""N"";
					strErrVal = CreateAllocRecord(bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,bcNMConcat);
				}
				else{
					if(bcNMNumDeploy.GetFieldValue(""Allocated To"") != bcNMNumDeploy.GetFieldValue(""To Sales Code"")){ 
						blnIsDeallocation = ""N"";
						strErrVal = CreateAllocRecord(bcNMNumDeploy,bcNumAlloc,bcNumberMaster,bcNMMstrAlloc,blnIsDeallocation,strToStatus,bcNMConcat);
					}
					else
						UpdateAssociatedNumStatus(bcNumberMaster,strAssocStartId,strToStatus,bcNMConcat);
				}		
			}
			else{
				bcNMNumDeploy.SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD005""));
				bcNMNumDeploy.SetFieldValue(""To Sales Code"","""");
				bcNMNumDeploy.SetFieldValue(""To Dealer Name"","""");	
				bcNMNumDeploy.SetFieldValue(""To Dealer Area Name"","""");
				bcNMNumDeploy.SetFieldValue(""To Dealer Channel Name"","""");
				strErrVal = ""RMSNRD005"";
			}
		}	
	}
	
//-------------------------------------------------
// If status is changed to Allocated from Trashed.
//-------------------------------------------------
	if(strToStatus == ToString(TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""ALLOCATED""))){
		
		if(blnIsInternal == 2){		
			if(bcNMNumDeploy.GetFieldValue(""Allocated To"") == """"){
				bcNMNumDeploy.SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD012""));
				bcNMNumDeploy.SetFieldValue(""To Sales Code"","""");
				bcNMNumDeploy.SetFieldValue(""To Dealer Name"","""");	
				bcNMNumDeploy.SetFieldValue(""To Dealer Area Name"","""");
				bcNMNumDeploy.SetFieldValue(""To Dealer Channel Name"","""");
				strErrVal = ""RMSNRD012"";		
			}
			else{
				if(bcNMNumDeploy.GetFieldValue(""Allocated To"") != bcNMNumDeploy.GetFieldValue(""To Sales Code"")){ 
					bcNMNumDeploy.SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD013"",bcNMNumDeploy.GetFieldValue(""Allocated To"")));
					bcNMNumDeploy.SetFieldValue(""To Sales Code"","""");
					bcNMNumDeploy.SetFieldValue(""To Dealer Name"","""");	
					bcNMNumDeploy.SetFieldValue(""To Dealer Area Name"","""");
					bcNMNumDeploy.SetFieldValue(""To Dealer Channel Name"","""");
					strErrVal = ""RMSNRD013"";			
				}
				else
					UpdateAssociatedNumStatus(bcNumberMaster,strAssocStartId,strToStatus,bcNMConcat);
			}		
		}
		else{
			bcNMNumDeploy.SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD006""));
			bcNMNumDeploy.SetFieldValue(""To Sales Code"","""");
			bcNMNumDeploy.SetFieldValue(""To Dealer Name"","""");	
			bcNMNumDeploy.SetFieldValue(""To Dealer Area Name"","""");
			bcNMNumDeploy.SetFieldValue(""To Dealer Channel Name"","""");
			strErrVal = ""RMSNRD006"";
		}

	
	}
	
	psInputs	= null;
	psOutputs	= null;
	
	return(strErrVal);
}
