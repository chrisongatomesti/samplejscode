function ValidateQuarantineDate(&bcNumberMaster,&bsDeassociate,&psInputs,&psOutputs,strToStatus,&bcNMNumDeploy)
{
	var boNumberScheme;
	var bcNumberScheme;
	
	var boNumEnquiry;
	var bcNumEnquiry;
	
	var strSchemeId;
	var strQuaDate;
	var strAvaDate;
	var strDate1;
  	var strDate2;
    var strErrVal;
	
	var intTDCode;
	
	var dtQuaDate;
	var dtAvaDate;
	var intAvaiPeriod = 0;
	var intCurrPeriod = 0;
	
	var dtMinAvlDate;
	var dtMaxAvlDate;
	var dtCurrDate;
	
	var blnIsRecord	= false;
	
	var intReturn = false;

	try{

		boNumEnquiry = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
		bcNumEnquiry = boNumEnquiry.GetBusComp(""RMS NM Number Enquiry"");
		
		boNumberScheme = TheApplication().GetBusObject(""RMS NM Number Scheme"");
		bcNumberScheme = boNumberScheme.GetBusComp(""RMS NM Number Scheme"");
		
		

		with(bcNumEnquiry) {
			ActivateField(""Scheme Id"");
			ActivateField(""Quarantine Date"");
			ActivateField(""Available Date"");
			ActivateField(""Current Date"");
			ActivateField(""Disconnect Type"");
			
			ClearToQuery();
			SetSearchSpec(""Id"",bcNumberMaster.GetFieldValue(""Id""));
			ExecuteQuery(ForwardOnly);
			
			blnIsRecord = FirstRecord();
			
			if(blnIsRecord) {
				strSchemeId = bcNumEnquiry.GetFieldValue(""Scheme Id"");
				strQuaDate	= bcNumEnquiry.GetFieldValue(""Quarantine Date"");
				strAvaDate	= bcNumEnquiry.GetFieldValue(""Available Date"");
				intTDCode	= bcNumEnquiry.GetFieldValue(""Disconnect Type"");
				
				dtQuaDate = new Date(strQuaDate);
				dtAvaDate = new Date(strAvaDate);
			}
			
			
		}
		
		
		
//----------------------------------------------------------------------------
// For the corresponding scheme retrieve the min and max quarantine periods.
//----------------------------------------------------------------------------	
		with(bcNumberScheme) {
			ActivateField(""Max. Dis. Quarantine Period"");
			ActivateField(""Max. Dis. Qurantine UOM"");
			ActivateField(""Max. Ter. Quarantine Period"");
			ActivateField(""Max. Ter. Quarantine UOM"");
			ActivateField(""Min. Dis. Quarantine Period"");
			ActivateField(""Min. Dis. Quarantine UOM"");
			ActivateField(""Min. Ter. Quarantine Period"");
			ActivateField(""Min. Ter. Quarantine UOM"");
			ClearToQuery();
			SetSearchSpec(""Id"",strSchemeId);	
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();	
		}

		if(blnIsRecord) {
			intReturn = false;
			
			if(intTDCode == TheApplication().InvokeMethod(""LookupValue"", ""RMS_DISCONNECT_TYPE"", ""T"")){
				dtMinAvlDate = CheckAvlDate(bcNumberScheme.GetFieldValue(""Min. Ter. Quarantine Period""),bcNumberScheme.GetFieldValue(""Min. Ter. Quarantine UOM""),dtQuaDate);
				//dtMaxAvlDate = CheckAvlDate(bcNumberScheme.GetFieldValue(""Max. Ter. Quarantine Period""),bcNumberScheme.GetFieldValue(""Max. Ter. Quarantine UOM""),dtQuaDate);
			}
			else if((intTDCode == TheApplication().InvokeMethod(""LookupValue"", ""RMS_DISCONNECT_TYPE"", ""D"")) || intTDCode == """"){
				dtMinAvlDate = CheckAvlDate(bcNumberScheme.GetFieldValue(""Min. Dis. Quarantine Period""),bcNumberScheme.GetFieldValue(""Min. Dis. Quarantine UOM""),dtQuaDate);
				//dtMaxAvlDate = CheckAvlDate(bcNumberScheme.GetFieldValue(""Max. Dis. Quarantine Period""),bcNumberScheme.GetFieldValue(""Max. Dis. Qurantine UOM""),dtQuaDate);
			}

			intAvaiPeriod = dtMinAvlDate.getTime();
			
			dtCurrDate	= new Date(bcNumEnquiry.GetFieldValue(""Current Date""));
			intCurrPeriod = dtCurrDate.getTime();
			//var test = dtMinAvlDate.toLocalString();
			
			if(intAvaiPeriod <= intCurrPeriod) {
				if(bcNMNumDeploy.GetFieldValue(""Is Associated"") == ""Y""){
					psInputs.SetProperty(""To Status"",strToStatus);
					bsDeassociate.InvokeMethod(""DeAssociate"",psInputs,psOutputs); 
					RefreshBusComp(""RMS NM Number Master Deployment"",""RMS NM Number Transfer"");
				} else {
					
				}
				intReturn = true;
			} else {
				bcNMNumDeploy.SetFieldValue(""Comments"",TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD014""));
				bcNMNumDeploy.WriteRecord();
				//bcNMNumDeploy.SetFieldValue(""Result"",TheApplication());
			}
		
		}
		
		bcNumberScheme = null;
		bcNumEnquiry   = null;
		boNumEnquiry   = null;		
		boNumberScheme = null;
		return (intReturn);

	}catch(e){
		bcNumberScheme = null;
		bcNumEnquiry   = null;
		boNumEnquiry   = null;		
		boNumberScheme = null;
		
		//throw(e);
		return (intReturn);	
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Enquiry Check Available Date Function.		          * 
* Author        : Mahindra British Telecom                                            *
* Description   : The date is checked against the min and max quarantine specified.   *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT						   	Created      14/12/2003       *
**************************************************************************************/

function CheckAvlDate(strQuaPeriod,strQuaUOM,dtQuaDate){

	var intQuarantineTime;
	var strConvDay;
	
	var strDays   = TheApplication().InvokeMethod (""LookupValue"", ""NM_QUARANTINE_UOM"", ""DAYS"");
	var strMonths = TheApplication().InvokeMethod (""LookupValue"", ""NM_QUARANTINE_UOM"", ""MONTHS"");
	var strWeeks  = TheApplication().InvokeMethod (""LookupValue"", ""NM_QUARANTINE_UOM"", ""WEEKS"");
	var strYears  = TheApplication().InvokeMethod (""LookupValue"", ""NM_QUARANTINE_UOM"", ""YEARS"");
	var strConvDay;

	switch (strQuaUOM){			
			
		case strDays: 
			intQuarantineTime = new Date(dtQuaDate.getFullYear(),dtQuaDate.getMonth(),ToInteger(dtQuaDate.getDate()) + ToInteger(strQuaPeriod));
			break;
				
		case strMonths: 
			intQuarantineTime = new Date(dtQuaDate.getFullYear(),dtQuaDate.getMonth() + ToInteger(strQuaPeriod),ToInteger(dtQuaDate.getDate()));
			break;
	
		case strWeeks: 
			strConvDay=	ToInteger(strQuaPeriod)*7;	
			intQuarantineTime = new Date(dtQuaDate.getFullYear(),dtQuaDate.getMonth(),ToInteger(dtQuaDate.getDate())+strConvDay);
			break;
				
		case strYears: 
			intQuarantineTime = new Date(ToInteger(dtQuaDate.getFullYear())+ ToInteger(strQuaPeriod),dtQuaDate.getMonth(),ToInteger(dtQuaDate.getDate()));
			break;
	}
		
	return intQuarantineTime;
}
"/*****************************************************************************************
* Name          : RMS NM Number Enquiry PreInvoke Method.					              * 
* Author        : Mahindra British Telecom                                                *
* Description   : RMS NM Number Enquiry Code File.                                        *
* Amendment Details                                                                       *
*******************************************************************************************
* Date    		Version  AmendedBy  Comments						Reviewed Date         *
*******************************************************************************************
*                                                                                         *
* 12/12/2003 	1.0   	 MBT		Created							14/12/2003            *
* 23/06/2006 	1.1   	 ARUNJ	   	SiebelES#12 Incorporated condition after ExecuteQuery *
*******************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs){

	var boNumberScheme;
	var bcNumberScheme;
	
	var boNumEnquiry;
	var bcNumEnquiry;
	
	var strSchemeId;
	var strQuaDate;
	var strAvaDate;
	var strDate1;
  	var strDate2;
    var strErrVal;
	
	var intTDCode;
	
	var dtQuaDate;
	var dtAvaDate;
	var intAvaiPeriod = 0;
	
	var dtMinAvlDate;
	var dtMaxAvlDate;

	var intReturn = ContinueOperation;

	try{

		boNumEnquiry = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
		bcNumEnquiry = boNumEnquiry.GetBusComp(""RMS NM Number Enquiry"");
		
		boNumberScheme = TheApplication().GetBusObject(""RMS NM Number Scheme"");
		bcNumberScheme = boNumberScheme.GetBusComp(""RMS NM Number Scheme"");

		strSchemeId = Inputs.GetProperty(""Scheme Id"");
		strQuaDate	= Inputs.GetProperty(""Quarantine Date"");
		strAvaDate	= Inputs.GetProperty(""Available Date"");
		
		intTDCode	= Inputs.GetProperty(""TerminationDismantle"");

		dtQuaDate = new Date(strQuaDate);
		dtAvaDate = new Date(strAvaDate);

//----------------------------------------------------------------------------
// For the corresponding scheme retrieve the min and max quarantine periods.
//----------------------------------------------------------------------------	
		with(bcNumberScheme) {
			ActivateField(""Max. Dis. Quarantine Period"");
			ActivateField(""Max. Dis. Qurantine UOM"");
			ActivateField(""Max. Ter. Quarantine Period"");
			ActivateField(""Max. Ter. Quarantine UOM"");
			ActivateField(""Min. Dis. Quarantine Period"");
			ActivateField(""Min. Dis. Quarantine UOM"");
			ActivateField(""Min. Ter. Quarantine Period"");
			ActivateField(""Min. Ter. Quarantine UOM"");
			ClearToQuery();
			SetSearchSpec(""Id"",strSchemeId);	
			ExecuteQuery(ForwardOnly);
// below 1.1
		//	FirstRecord();	
// above 1.1
		}
// below 1.1
		if (bcNumberScheme.FirstRecord()) {
// above 1.1
		if(MethodName == ""Available Date"") {
			intReturn = CancelOperation;
			
			if(intTDCode == TheApplication().InvokeMethod(""LookupValue"", ""RMS_DISCONNECT_TYPE"", ""T"")){
				dtMinAvlDate = CheckAvlDate(bcNumberScheme.GetFieldValue(""Min. Ter. Quarantine Period""),bcNumberScheme.GetFieldValue(""Min. Ter. Quarantine UOM""),dtQuaDate);
				dtMaxAvlDate = CheckAvlDate(bcNumberScheme.GetFieldValue(""Max. Ter. Quarantine Period""),bcNumberScheme.GetFieldValue(""Max. Ter. Quarantine UOM""),dtQuaDate);
			}
			else if((intTDCode == TheApplication().InvokeMethod(""LookupValue"", ""RMS_DISCONNECT_TYPE"", ""D"")) || intTDCode == """"){
				dtMinAvlDate = CheckAvlDate(bcNumberScheme.GetFieldValue(""Min. Dis. Quarantine Period""),bcNumberScheme.GetFieldValue(""Min. Dis. Quarantine UOM""),dtQuaDate);
				dtMaxAvlDate = CheckAvlDate(bcNumberScheme.GetFieldValue(""Max. Dis. Quarantine Period""),bcNumberScheme.GetFieldValue(""Max. Dis. Qurantine UOM""),dtQuaDate);
			}

			intAvaiPeriod = dtAvaDate.getTime();
			
						
			if(!((intAvaiPeriod <= ToInteger(dtMaxAvlDate.getTime())) &&  (intAvaiPeriod >= ToInteger(dtMinAvlDate.getTime())))){
				
				strDate1 = dtMaxAvlDate.toLocaleString();
				strDate2 = dtMinAvlDate.toLocaleString();
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNUM001"",strDate2,strDate1);
     			TheApplication().RaiseErrorText(strErrVal);
  			}
		}
// below 1.1
		}
// above 1.1	
		bcNumberScheme = null;
		bcNumEnquiry   = null;
		boNumEnquiry   = null;		
		boNumberScheme = null;
		return (intReturn);

	}catch(e){
		bcNumberScheme = null;
		bcNumEnquiry   = null;
		boNumEnquiry   = null;		
		boNumberScheme = null;
			
		throw(e);
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Format Service CheckFormat Function 		          * 
* Author        : Mahindra British Telecom                                            *
* Description   : Checks the number format specified.  	                              *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	        Comments        	Reviewed Date *
***************************************************************************************
*                                                                                     *
* 26/03/2005 	V1.0   	 	 MBT					 Created       		26/03/2005    *
* 27/03/2005    V2.0         MBT                     Kadali Srinivas    27/03/2005    *
**************************************************************************************/

function CheckFormat(&bcNumberType,&bcNumberFormat,Inputs){
//--------------[GB][12/04/06]-----------------------
	var boSystemPref;	//Business Object ""System Preferences""
	var bcSystemPref;   //Business Component ""System Preferences""
	

	var strErrVal	= """";
	var temp;
	
	var blnIsRecord;
	
	var intObjectId ;
	var intLength;
	var intCount 	= 0;
	var intCheck 	= 1;
	var intSequence = 1;
	var intYear		= 0;	
	var intHLR 		= 0;
	var strPrevLevelType = """";
	var strSearchStr = """";
	var blnRunngType = false;
	
	intObjectId     = Inputs.GetProperty(""Object Id"");
					
	with(bcNumberType){
		ActivateField(""Valid"");
		ActivateField(""Type Identifier"");
		ClearToQuery();
		SetSearchSpec(""Id"",intObjectId);
		ExecuteQuery();
	}
	
	with(bcNumberFormat){
		ActivateField(""Sequence"");
		ActivateField(""Level Type"");
		ActivateField(""Value Type"");
		ClearToQuery();
		SetSortSpec(""Sequence(ASCENDING)"");
		ExecuteQuery(ForwardBackward);
	}
			
	blnIsRecord = bcNumberFormat.FirstRecord();			
										
	while(blnIsRecord){
		intCount++;
		blnIsRecord = bcNumberFormat.NextRecord();
	}
	
//-------------------------------------------------------
// Display an error if no records exist for the format.
//-------------------------------------------------------			
	if(intCount < 1){
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNTY001"");
		return(strErrVal);
	}
	
	blnIsRecord=bcNumberFormat.FirstRecord();
						
	for(intCheck=1;intCheck<=intCount;intCheck++){
		if(bcNumberFormat.GetFieldValue(""Level Type"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING""))
			blnRunngType = true;

//---------------------------------- V2.0 ---------------------------------------
// Display an error if more than one record has level type as Year Of Production.
//-------------------------------------------------------------------------------
	if(bcNumberFormat.GetFieldValue(""Level Type"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""YEAR"")){
			intYear++;
		}
		
		if(intYear > 1){
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNTY002"", TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""YEAR""));
			return(strErrVal);
		}

//-----------------------------------------------------------------
// Display an error if more than one record has level type as HLR.
//-----------------------------------------------------------------
		if(bcNumberFormat.GetFieldValue(""Level Type"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""HLR"")){
			intHLR++;
		}
		
		if(intHLR > 1){
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNTY005"", TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""HLR""));
			return(strErrVal);
		}

//---------------------------------------------------------------------
// Display an error if numeric is not set for HLR / Batch Counter.
//---------------------------------------------------------------------
		if((bcNumberFormat.GetFieldValue(""Level Type"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""HLR""))&&(bcNumberFormat.GetFieldValue(""Value Type"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_VALUE_TYPE"", ""NUMERIC""))){
	 		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNTY007"", TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""HLR""),TheApplication().InvokeMethod (""LookupValue"", ""NM_VALUE_TYPE"", ""NUMERIC""));
			return(strErrVal);
		}
	
//---------------------------------------------------------------------------
// Display an error if the last record doesnt have level type as Running or Checksum and
// if the value type is Alphanumeric.
//---------------------------------------------------------------------------
		if(intCheck==intCount){

				if((bcNumberFormat.GetFieldValue(""Level Type"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING"") && bcNumberFormat.GetFieldValue(""Level Type"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""CHECKSUM""))||(bcNumberFormat.GetFieldValue(""Value Type"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_VALUE_TYPE"", ""ALPHANUMERIC""))){
	 				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNTY003"", TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING""),TheApplication().InvokeMethod (""LookupValue"", ""NM_VALUE_TYPE"", ""NUMERIC""));
					return(strErrVal);
				}	


				if(bcNumberFormat.GetFieldValue(""Level Type"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""CHECKSUM"")) {
					if(strPrevLevelType != TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING"") && strPrevLevelType != TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""CHECKSUM"")) {
		 				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNTY008"", TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING""),TheApplication().InvokeMethod (""LookupValue"", ""NM_VALUE_TYPE"", ""NUMERIC""));
						return(strErrVal);
					}						
				} 

		
//------------------------------------------------------------------------
// To inform user to fill in the HLR type for SIM or IMSI number types.
//------------------------------------------------------------------------				
//--------------[GB][12/04/06]-----------------------
//Comment:if System Preference ""STC_HLR_CHECK"" has value ""YES"" then check for HLR
//------------------------------------------------------------------
	boSystemPref 	= TheApplication().GetBusObject(""System Preferences""); 		
	bcSystemPref 	= boSystemPref.GetBusComp(""System Preferences""); 
	
	strSearchStr = ""[Name]='RMS_HLR_CHECK' AND [Value] ='YES'"";
	bcSystemPref.ClearToQuery();
	bcSystemPref.SetSearchExpr(strSearchStr);
	bcSystemPref.ExecuteQuery(ForwardOnly);
		if(bcSystemPref.FirstRecord())
//----------------[GB][12/04/06]--------------------
			if(((intHLR == 0) || (intHLR =="""")) && ((bcNumberType.GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
											||
				(bcNumberType.GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"")))){	
	 			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNTY006"", TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""HLR""),bcNumberType.GetFieldValue(""Type Identifier""));
				return(strErrVal);
			}	

        }
//----------------------------------------------------------
// Only the last level should have level type as Running.	
//----------------------------------------------------------
		else if(bcNumberFormat.GetFieldValue(""Level Type"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING"")){
			bcNumberFormat.NextRecord();
			temp = bcNumberFormat.GetFieldValue(""Level Type"");
			if(bcNumberFormat.GetFieldValue(""Level Type"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""CHECKSUM"")) {
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNTY004"", TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING""));
				return(strErrVal);
			}
			bcNumberFormat.PreviousRecord()
		}
		else if(bcNumberFormat.GetFieldValue(""Level Type"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""CHECKSUM"")) {
			bcNumberFormat.NextRecord();
			temp = bcNumberFormat.GetFieldValue(""Level Type"");
			if(bcNumberFormat.GetFieldValue(""Level Type"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""CHECKSUM"")) {
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNTY009"", TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""CHECKSUM""));
				return(strErrVal);
			}
			bcNumberFormat.PreviousRecord();
		}
		strPrevLevelType = bcNumberFormat.GetFieldValue(""Level Type"");
		blnIsRecord = bcNumberFormat.NextRecord();
	}
	if(!blnRunngType) {
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNTY006"", TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING""),bcNumberType.GetFieldValue(""Type Identifier""));
		return(strErrVal);
	}
	blnIsRecord = bcNumberFormat.FirstRecord();			
										
	while(blnIsRecord){
		bcNumberFormat.SetFieldValue(""Sequence"",intSequence);
		intSequence = intSequence + 1;
		bcNumberFormat.WriteRecord();
		intCount++;
		blnIsRecord = bcNumberFormat.NextRecord();
	}
	
	bcSystemPref = null;
	boSystemPref = null;
							
	return(strErrVal);			
}
"/**************************************************************************************
* Name          : RMS NM Number Format Service PreInvoke Method 		                  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Format Code File      	                              *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	        Comments        	Reviewed Date *
***************************************************************************************
*                                                                                     *
* 26/03/2005 	 1.0   	 	 MBT					 Created       		26/03/2005    *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs){
	
	try{
	
		var boNumberType;
	
		var bcNumberType;
		var bcNumberFormat;
	
		var strErrVal ="""";
	
		var intReturn = ContinueOperation;
		
		boNumberType 	= TheApplication().GetBusObject(""RMS NM Number Type"");
		bcNumberType 	= boNumberType.GetBusComp(""RMS NM Number Type"");
		bcNumberFormat	= boNumberType.GetBusComp(""RMS NM Number Format"");		

		if(MethodName ==""CheckFormat""){
			intReturn = CancelOperation;
			strErrVal = CheckFormat(bcNumberType,bcNumberFormat,Inputs);
			if(strErrVal !=""""){
				TheApplication().RaiseErrorText(strErrVal);
			}
			else{
				bcNumberType.SetFieldValue(""Valid"",""Y"");
				bcNumberType.WriteRecord();
			}
		}
		
		bcNumberType	= null;
		bcNumberFormat  = null;
		boNumberType	= null;	
		return(intReturn);	
	
	}catch(e){

		bcNumberType	= null;
		bcNumberFormat  = null;
		boNumberType	= null;	
		throw e;
	}
	
}
"/**************************************************************************************
* Name          : NM Number Generation ChkVanityMatrix function		         		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Generation Code File	    		                      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 05/04/2005 	1.0   		MBT						   	Created      05/04/2005       *
**************************************************************************************/
function BuilLeftOutDigitArray(Mask,&intStartPoint,&strLeftOutDigitArray,strRunNumWithZero)
{
	var intLeftOutArrayCnt = 0;
	var intArrayCnt = 0;
	for(var intRunNumCnt = 0;intRunNumCnt<ToString(strRunNumWithZero).length;) {
		if(intRunNumCnt == intStartPoint[intArrayCnt]) {
			if(intRunNumCnt != 0)
				intLeftOutArrayCnt++;
			intRunNumCnt = intStartPoint[intArrayCnt] + ToInteger(Mask.length);
			intArrayCnt++;
		}

		if(ToString(strRunNumWithZero).charAt(intRunNumCnt) != """" && ToString(strRunNumWithZero).charAt(intRunNumCnt) != null) {
			if(strLeftOutDigitArray[intLeftOutArrayCnt] != null && strLeftOutDigitArray[intLeftOutArrayCnt] != """") 
				strLeftOutDigitArray[intLeftOutArrayCnt] = strLeftOutDigitArray[intLeftOutArrayCnt] + ToString(strRunNumWithZero).charAt(intRunNumCnt);
			else
				strLeftOutDigitArray[intLeftOutArrayCnt] = ToString(strRunNumWithZero).charAt(intRunNumCnt);																				
		}					
			intRunNumCnt++;
	}
}
"/**************************************************************************************
* Name          : NM Number Generation CancelGeneratedNumbers function         	 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Generation Code File	    		                      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	 1.0   	MBT						   	Created      12/12/2003       *
* 23/06/2006 	 1.1   	ARUNJ	 SiebelES#12 Incorporated condition after ExecuteQuery *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function CancelGeneratedNumbers(intObjectId)
{
	var boNumGen;
    var bcNumberMaster;
	var bcNumGen;
	var bcNMBlock;
	var boSysPref;
    var bcSysPref;
	var strStsAfterGen;
   	var	strTypeId;
   	var strStatus;
   	var strBlockId;
   	var strSchId;
   	var strErrVal = """";
   	var strStartNum;
   	var intBatchCounter;
   	var blnIsRecord;
   	var psInputs;
	var psOutputs;
	var bsBlkCount;
	var blnBlockUpdate	= false;

	boNumGen		= TheApplication().GetBusObject(""RMS NM Number Generation"");
	
	bcNumGen		= boNumGen.GetBusComp(""RMS NM Number Generation"");
	bcNumberMaster 	= boNumGen.GetBusComp(""RMS NM Number Master Generation"");
	bcNMBlock		= boNumGen.GetBusComp(""RMS NM Number Scheme Format Info"");
	boSysPref 		= TheApplication().GetBusObject(""System Preferences"");
	bcSysPref		= boSysPref.GetBusComp(""System Preferences"");
		
	psInputs 		= TheApplication().NewPropertySet();
	psOutputs 		= TheApplication().NewPropertySet();


	with(bcSysPref) 
	{
		ActivateField(""Value"");
		ClearToQuery();
		SetSearchSpec(""Name"",""RMS_BLOCK_UPDATION"");
		SetSearchSpec(""Value"",""Y"");
		ExecuteQuery(ForwardOnly);
		
		if(FirstRecord())
			blnBlockUpdate = true;
	}
	
	with(bcNumGen)
	{
		ActivateField(""Scheme Id"");
		ActivateField(""Number Status"");		
		ActivateField(""Type Id"");
		ActivateField(""Block Id"");
		ActivateField(""Block Starting String Number"");
		ActivateField(""Quantity Str"");
		ActivateField(""Start String Number"");
		ActivateField(""End Number Str"");
		ActivateField(""Status"");
		ActivateField(""HLR Id"");
		ActivateField(""Batch Number"");
		ActivateField(""Type Identifier"");
		ActivateField(""Post Generation Status"");
		ActivateField(""Generated Message"");	
		ClearToQuery();
		SetSearchSpec(""Id"",intObjectId);
		ExecuteQuery();
// below 1.1
	//	FirstRecord();
// above 1.1
	}
// below 1.1	
	if (bcNumGen.FirstRecord())	{
// above 1.1
	strTypeId 		= bcNumGen.GetFieldValue(""Type Id"");	
	strStatus 		= bcNumGen.GetFieldValue(""Status"");
	strBlockId		= bcNumGen.GetFieldValue(""Block Id"");
	strSchId 		= bcNumGen.GetFieldValue(""Scheme Id"");
	strStartNum		= bcNumGen.GetFieldValue(""Start String Number"");
	if(bcNumGen.GetFieldValue(""Number Status"")!="""")
		strStsAfterGen  = bcNumGen.GetFieldValue(""Number Status"");		
	else
		strStsAfterGen  = bcNumGen.GetFieldValue(""Post Generation Status"");
	
//---------------------------------------------------------------------------------------------------------------------------------------
// The selected record has been modified by another user since it was retrieved.Please refresh the Applet
//---------------------------------------------------------------------------------------------------------------------------------------		
	
	if(bcNumGen.GetFieldValue(""Status"")==(TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"")) || bcNumGen.GetFieldValue(""Status"")==(TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""))) 
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN004"");
	else{
		bcNumGen.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
		bcNumGen.WriteRecord();

//-------------------------------			
// Getting The Numbers Generated
//-------------------------------			
		with(bcNumberMaster) {
			ActivateField(""Gen Log Id"");
			ActivateField(""Status"");		
			ActivateField(""Is Associated"");		
			ClearToQuery();
			SetSearchSpec(""Gen Log Id"",intObjectId);
			ExecuteQuery();	
			blnIsRecord = FirstRecord();
		}
//-----------------------------------------------------------------------------------------------------
// If the staus of the numbers retrieved is not the same as 'Post Generation Status' as specified for 
// the corresponding number type then cannot cancel the generation. 
//----------------------------------------------------------------------------------------------------- 		
		while (blnIsRecord) {
			if(bcNumberMaster.GetFieldValue(""Status"") != strStsAfterGen || bcNumberMaster.GetFieldValue(""Is Associated"") == ""Y"") {
				bcNumGen.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""GENERATED""));
				bcNumGen.WriteRecord();
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN006"");
				break;
			}
			blnIsRecord = bcNumberMaster.NextRecord();	
		}
		
		if(strErrVal == """"){
			psInputs.SetProperty(""From Status"",strStsAfterGen);
			psInputs.SetProperty(""To Status"","""");
			psInputs.SetProperty(""Object Id"",strBlockId);
			bsBlkCount = TheApplication().GetService(""RMS RMS Block Calc"");
				
			while (bcNumberMaster.FirstRecord()) {
				if(blnBlockUpdate == true) //due to performance impact
					bsBlkCount.InvokeMethod(""UpdateNumberBlock"",psInputs,psOutputs);
				bcNumberMaster.DeleteRecord();
			}
				
			bcNumGen.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));
			with(bcNMBlock){
				ActivateField(""Next Start Number"");
				ClearToQuery();
				SetSearchSpec(""Id"",strBlockId);
				ExecuteQuery();
// below 1.1
				//	FirstRecord();
// above 1.1
				}
// below 1.1
				if (bcNMBlock.FirstRecord()){
// above 1.1					
			if((ToInteger(strStartNum)) < (ToInteger(bcNMBlock.GetFieldValue(""Next Start Number""))) ){
				bcNMBlock.SetFieldValue(""Next Start Number"",strStartNum);
				bcNMBlock.WriteRecord();
			}	

//------------------------------------------
// Display a successfull deletion message.
//------------------------------------------				
			bcNumGen.SetFieldValue(""Generated Message"", """");	
			bcNumGen.WriteRecord();
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN007"");	
// below 1.1
				}
// above 1.1
		}
	}
// below 1.1
	}
// above 1.1
	bcNumberMaster	= null;
	bcNumGen		= null;
	bcNMBlock		= null;
	boNumGen		= null;
	
    bcSysPref		= null;
    boSysPref		= null;
    
	psInputs		= null;
	psOutputs		= null;
//1.2 below
	bsBlkCount      = null;
//1.2 above
	return(strErrVal);
}
"/**************************************************************************************
* Name          : NM Number Generation ChkVanityMatrix function		         		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Generation Code File	    		                      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 19/04/2005 	1.0   		MBT						   	Created      19/04/2005       *
* 19/04/2005 	1.0   		MBT						   	Gautam      19/04/2005       *
**************************************************************************************/

function CheckCode(Mask,strRunNumWithZero,&strRunnNumMskChk,Seq,&intNoOfOccurence,&intIncrementMskLenght,&blnCdCheck,&intStartPoint,&intArrayCnt) {
//-----------------------------------------------------------------------------
// If the function is called for the first time the set the value to be checked 
//as the start from left of running number til the nmask length.
//-----------------------------------------------------------------------------
	if(intIncrementMskLenght == 0)
		strRunnNumMskChk = ToString(strRunNumWithZero).substring(intIncrementMskLenght,ToString(Mask).length);

//----------------------------------------------------------------------------
// Call the isspecialnumber function to check whether number matches the mask.
//----------------------------------------------------------------------------	
	if(IsSpecialNumber(Mask,strRunnNumMskChk,Seq)) {
//------------------------------------------------------------------------------------------
// Storing the start point of the position from where the number was matched.This is done to
//build the left out array.
//-------------------------------------------------------------------------------------------	
		intStartPoint[intArrayCnt++] = intIncrementMskLenght;
//------------------------------------------------------------------------------------------------------
//If the no of occurence is more than one then again call the check code function after decrementing the 
//no of occurence by one.
//--------------------------------------------------------------------------------------------------------		
		if(intNoOfOccurence>1) {
			intNoOfOccurence--;
			intIncrementMskLenght = ToInteger(intIncrementMskLenght) + ToInteger(ToString(Mask).length);
			var intTolength = ToInteger(intIncrementMskLenght) + (ToInteger(ToString(Mask).length));
			strRunnNumMskChk = ToString(strRunNumWithZero).substring(ToInteger(intIncrementMskLenght),ToInteger(intTolength));	
			if(ToString(strRunnNumMskChk).length >= ToString(Mask).length)
				CheckCode(Mask,strRunNumWithZero,strRunnNumMskChk,Seq,intNoOfOccurence,intIncrementMskLenght,blnCdCheck,intStartPoint,intArrayCnt);
			else {
				blnCdCheck = false
				return(false)
			}
		}
		else {
//-------------------------------------------------------------------------------------------------------
//If then number matches the mask and the no of occurence is one then set the code check to true and exit.
//-------------------------------------------------------------------------------------------------------		
			blnCdCheck = true;
			return(true)
		}
	}
	else {
//------------------------------------------------------------------------------------------------------
//If values does not match the mask then increment the position of the runing value one step to right and 
//again call the check code function.
//------------------------------------------------------------------------------------------------------	
		intIncrementMskLenght++;
		var len = ToInteger(ToString(Mask).length)+ ToInteger(intIncrementMskLenght);
	    strRunnNumMskChk = ToString(strRunNumWithZero).substring(intIncrementMskLenght,len);
		if(ToString(strRunnNumMskChk).length >= ToString(Mask).length) {
			CheckCode(Mask,strRunNumWithZero,strRunnNumMskChk,Seq,intNoOfOccurence,intIncrementMskLenght,blnCdCheck,intStartPoint,intArrayCnt);
		}
		else {
			blnCdCheck = false;
			return(false);
		}
	}
}
"/**************************************************************************************
* Name          : NM Number Generation ChkVanityMatrix function		         		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Generation Code File	    		                      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 05/04/2005 	1.0   		MBT						   	Created      05/04/2005       *
**************************************************************************************/

function ChkVanityMatrix(&bcNumberMaster,&bcNumGen,strRunNumWithZero,&psfnArgs,&bcSpecialNumber,&bcRuleComb){
	
	var blnCdCheck = (psfnArgs.GetProperty(""blnCdCheck"") == ""true"")?true:false;
	var blnrulComCheck = (psfnArgs.GetProperty(""blnrulComCheck"") == ""true"")?true:false;
	var intStartPoint = new Array;
	var intArrayCnt=0;
	var blnSpecCatRec;
	var boNumberScheme;
	var strSchemeId;
	var strRunnNumMskChk;
	var intIncrementMskLenght = 0;
	var strLeftOutDigitArray = new Array; //MS:20060130: need to change the variable name

	strSchemeId 	= bcNumGen.GetFieldValue(""Scheme Id"");
	
	var boVanityruleMarix = TheApplication().GetBusObject(""RMS NM Vanity Rule Definition"");
	var bcRuleDefinition = boVanityruleMarix.GetBusComp(""RMS NM Rule Definitions"");
	
	
//--------------------------------------------------------
// Query Special category to get all the category records.
//--------------------------------------------------------
/**************************************MS 30-06-2006 *******************************************************	
	with(bcSpecialNumber) {
		ActivateField(""Id"");			
		ActivateField(""Scheme Id"");
		ActivateField(""Sequence Flag"");
		ActivateField(""Priority"");
		ActivateField(""Mask"");
		ActivateField(""Reverse Check"");
		ActivateField(""Rule Code Name"");
		ActivateField(""Rule Code Mask"");
		ActivateField(""Rule Code Occurence"");		
		ActivateField(""Rule Code Mask Seq"");
		ActivateField(""Rule Comb Code"");
		ActivateField(""Rule Code Reverse Check"");
		ActivateField(""Rule Code Type"");
		ActivateField(""Price"");
		ActivateField(""Default Category Id"");
		ClearToQuery();
		SetSearchSpec(""Scheme Id"",strSchemeId);
	//	SetSearchSpec(""Expired"",""N"");
	//	SetSearchSpec(""In Use Flag For Gen"",""Y"");
		SetSortSpec(""Priority (ASCENDING)"");
		ExecuteQuery(ForwardBackward);
	}
******************************commented to avoid repeatative queries to table********MS 30-06-2006**********/
	blnSpecCatRec = bcSpecialNumber.FirstRecord();
	while (blnSpecCatRec) {
//--------------------------------------------------------------------
// Initialise the variable for code check and combination chk to false.
//--------------------------------------------------------------------	
		blnCdCheck = false;
		blnrulComCheck = false;
//---------------------------------------------------------------------------------
// If mask is entered for the specail category then check for only the mask and exit.
//----------------------------------------------------------------------------------		
		if(bcSpecialNumber.GetFieldValue(""Mask"") != """" && bcSpecialNumber.GetFieldValue(""Mask"") != null) {
			if(IsSpecialNumber(bcSpecialNumber.GetFieldValue(""Mask""),ToString(strRunNumWithZero),bcSpecialNumber.GetFieldValue(""Sequence Flag""))) {
					blnCdCheck = true;
					blnrulComCheck =true;
					break;
			} 
		 } else {
		 
//-------------------------------------------------
// If mask is not entered then check for Rule code.
//-------------------------------------------------

			var strRuleCodeMask = bcSpecialNumber.GetFieldValue(""Rule Code Mask"");
			var strSchemeCatId	= bcSpecialNumber.GetFieldValue(""Id"");
			var intNoOfOccurence = bcSpecialNumber.GetFieldValue(""Rule Code Occurence"");
			var intArrayCnt = 0;	
//-----------------------------------------------------------------------------------------------
// If rule code is a filler then check for check whether the entire mask matches the filler digit.
//------------------------------------------------------------------------------------------------			

			if(bcSpecialNumber.GetFieldValue(""Rule Code Type"") == TheApplication().InvokeMethod(""LookupValue"", ""RMS_RUL_TYPE"", ""FILLER"")){
				for(var intRunNumLen =0;intRunNumLen<ToInteger(ToString(strRunNumWithZero).length);intRunNumLen++) {
					if(ToString(strRunNumWithZero).charAt(intRunNumLen)!= bcSpecialNumber.GetFieldValue(""Rule Code Mask"")) {
						blnCdCheck = false;
						break;										
					} else
						blnCdCheck = true;
				}
			} else {

//-----------------------------------------------------------------------------------------------
// If rule code is not a filler tyoe then call checkcode function to check whether the running
//number matches the code definition. 
//------------------------------------------------------------------------------------------------			
				intIncrementMskLenght = 0;
				CheckCode(bcSpecialNumber.GetFieldValue(""Rule Code Mask""),strRunNumWithZero,strRunnNumMskChk,bcSpecialNumber.GetFieldValue(""Rule Code Mask Seq""),intNoOfOccurence,intIncrementMskLenght,blnCdCheck,intStartPoint,intArrayCnt);
		
//-------------------------------------------------------------------------
// If code definition matches then build an array with the left out digits.
//-------------------------------------------------------------------------
				if(blnCdCheck)
					BuilLeftOutDigitArray(bcSpecialNumber.GetFieldValue(""Rule Code Mask""),intStartPoint,strLeftOutDigitArray,strRunNumWithZero);

//----------------------------------------------------------------------------------------
// If code definition is not matched and the reverse check is true then reverse the number
//and call the checkcode function.
//----------------------------------------------------------------------------------------
				
				if(bcSpecialNumber.GetFieldValue(""Rule Code Reverse Check"") == ""Y"" && blnCdCheck == false) {
					var strReverRunnNumWithZero = """";
					for(var intRunNumLen = ToInteger(ToString(strRunNumWithZero).length)-1;intRunNumLen>=0;intRunNumLen--)
						strReverRunnNumWithZero = strReverRunnNumWithZero + ToString(strRunNumWithZero).charAt(intRunNumLen);
						//MS:20060130:as part of script change for 78 var intStartPoint= new Array;
						intStartPoint= new Array;
						var intArrayCnt=0;						
						intIncrementMskLenght = 0;
					CheckCode(bcSpecialNumber.GetFieldValue(""Rule Code Mask""),strReverRunnNumWithZero,strRunnNumMskChk,bcSpecialNumber.GetFieldValue(""Rule Code Mask Seq""),intNoOfOccurence,intIncrementMskLenght,blnCdCheck,intStartPoint,intArrayCnt);
					if(blnCdCheck) {
						var strLeftOutDigitArray = new Array;											
						BuilLeftOutDigitArray(bcSpecialNumber.GetFieldValue(""Rule Code Mask""),intStartPoint,strLeftOutDigitArray,strReverRunnNumWithZero);	
					}
				}
			}
	  	 }
			
//--------------------------------------------------------------
// If code definition is matched then check for the combination.
//--------------------------------------------------------------
			if((blnCdCheck) &&(!blnrulComCheck)) {
				with(bcRuleComb) {
					ActivateField(""Rule Comb Id"");
					ActivateField(""Special Cat Id"");
					ActivateField(""Id"");
					ClearToQuery();
					SetSearchSpec(""Special Cat Id"",bcSpecialNumber.GetFieldValue(""Id""));
					ExecuteQuery(ForwardBackward);		
					
					var blnIsComRec = FirstRecord();
					if(!blnIsComRec)
						blnrulComCheck = true;
//------------------------------------------------------------
// Loop through each rule combination and check for the match.
//------------------------------------------------------------
					while(blnIsComRec) {
						with(bcRuleDefinition) {
						
							ActivateField(""Rule Comb Id"");
							ActivateField(""Mask"");
							ActivateField(""No Of Occurences"");
							ActivateField(""Mask Seq"");
							ActivateField(""Reverse Check"");
							ActivateField(""Type"");
							ClearToQuery();
							SetSearchSpec(""Id"",bcRuleComb.GetFieldValue(""Rule Comb Id""));
							ExecuteQuery(ForwardBackward);		
							var blnRulComRec = FirstRecord();
							var intRuleCombNoOfOccurences = GetFieldValue(""No Of Occurences"");
	
							if(FirstRecord()){
//--------------------------------------------------------------------------------------------
//If rule combination is a filler then check whether the entire mask matches the filler digit.
//--------------------------------------------------------------------------------------------
								if(GetFieldValue(""Type"") == TheApplication().InvokeMethod(""LookupValue"", ""RMS_RUL_TYPE"", ""FILLER"")) {
									for(intArrayCnt = 0;intArrayCnt < getArrayLength(strLeftOutDigitArray);intArrayCnt++){
										for(var intRunNumLen =0;intRunNumLen<ToInteger(ToString(strLeftOutDigitArray[intArrayCnt]).length);intRunNumLen++) {
											if(strLeftOutDigitArray[intArrayCnt].charAt(intRunNumLen)!= GetFieldValue(""Mask"")) {
												blnrulComCheck = false;
												break;										
											}else{
												blnrulComCheck = true;
											}
											
										}
									}
								}
//--------------------------------------------------------------------------------------------
//If rule combination is a not a filler then loop through each of the leftout array value and call the
//check code function to check whether it matche the mask.
//--------------------------------------------------------------------------------------------								
								else {
									for(intArrayCnt = 0;intArrayCnt < getArrayLength(strLeftOutDigitArray);intArrayCnt++){
										var intStartPointArrayCnt = 0;
										strRunnNumMskChk = """";
										intIncrementMskLenght = 0
										CheckCode(GetFieldValue(""Mask""),strLeftOutDigitArray[intArrayCnt],strRunnNumMskChk,GetFieldValue(""Mask Seq""),intRuleCombNoOfOccurences,intIncrementMskLenght,blnrulComCheck,intStartPoint,intStartPointArrayCnt);
//---------------------------------------------------------------------------------------------------------------
//If reverse check for the rule comb is true then reverse the value in the array and call the checkcode function.
//---------------------------------------------------------------------------------------------------------------																		
										if(GetFieldValue(""Reverse Check"") == ""Y"" && blnrulComCheck == false)	{
											intIncrementMskLenght = 0;
											strReverRunnNumWithZero = """";
											for(var intRunNumLen = ToInteger(ToString(strLeftOutDigitArray[intArrayCnt]).length)-1;intRunNumLen>=0;intRunNumLen--)
												strReverRunnNumWithZero = strReverRunnNumWithZero + ToString(strLeftOutDigitArray[intArrayCnt]).charAt(intRunNumLen);
											CheckCode(GetFieldValue(""Mask""),strReverRunnNumWithZero,strRunnNumMskChk,GetFieldValue(""Mask Seq""),intRuleCombNoOfOccurences,intIncrementMskLenght,blnrulComCheck,intStartPoint,intStartPointArrayCnt);
										}
										if(blnrulComCheck == true && intRuleCombNoOfOccurences == 1)										
											break;										
									}
								}
							}
						}
						blnIsComRec = NextRecord();
					}
//					bcRuleComb = NextRecord()
				}
			}
			if(blnCdCheck == true && blnrulComCheck == true)
				break;
		blnSpecCatRec = bcSpecialNumber.NextRecord();
	}
	boVanityruleMarix = null;
	bcRuleDefinition = null;
	
	psfnArgs.SetProperty(""blnCdCheck"",blnCdCheck);
	psfnArgs.SetProperty(""blnrulComCheck"",blnrulComCheck);
	return(blnSpecCatRec);
	
}
function ChkVanityMatrix_1(strSchemeId,strRunNumWithZero,&psfnArgs,&bcSpecialNumber,&bcRuleComb)
{
	var blnCdCheck = (psfnArgs.GetProperty(""blnCdCheck"") == ""true"")?true:false;
	var blnrulComCheck = (psfnArgs.GetProperty(""blnrulComCheck"") == ""true"")?true:false;
	var intStartPoint = new Array;
	var intArrayCnt=0;
	var blnSpecCatRec;
	var boNumberScheme;
	var strSchemeId;
	var strRunnNumMskChk;
	var intIncrementMskLenght = 0;
	var strLeftOutDigitArray = new Array; //MS:20060130: need to change the variable name

//	strSchemeId 	= bcNumGen.GetFieldValue(""Scheme Id"");
	
	var boVanityruleMarix = TheApplication().GetBusObject(""RMS NM Vanity Rule Definition"");
	var bcRuleDefinition = boVanityruleMarix.GetBusComp(""RMS NM Rule Definitions"");
	
	
//--------------------------------------------------------
// Query Special category to get all the category records.
//--------------------------------------------------------
	
	with(bcSpecialNumber) {
		ActivateField(""Id"");			
		ActivateField(""Scheme Id"");
		ActivateField(""Sequence Flag"");
		ActivateField(""Priority"");
		ActivateField(""Mask"");
		ActivateField(""Reverse Check"");
		ActivateField(""Rule Code Name"");
		ActivateField(""Rule Code Mask"");
		ActivateField(""Rule Code Occurence"");		
		ActivateField(""Rule Code Mask Seq"");
		ActivateField(""Rule Comb Code"");
		ActivateField(""Rule Code Reverse Check"");
		ActivateField(""Rule Code Type"");
		ActivateField(""Price"");
		ActivateField(""Default Category Id"");
		ActivateField(""Default Category"");
		ClearToQuery();
		SetSearchSpec(""Scheme Id"",strSchemeId);
	//	SetSearchSpec(""Expired"",""N"");
	//	SetSearchSpec(""In Use Flag For Gen"",""Y"");
		SetSortSpec(""Priority (ASCENDING)"");
		ExecuteQuery(ForwardBackward);
	}
	blnSpecCatRec = bcSpecialNumber.FirstRecord();
	while (blnSpecCatRec) {
//--------------------------------------------------------------------
// Initialise the variable for code check and combination chk to false.
//--------------------------------------------------------------------	
		blnCdCheck = false;
		blnrulComCheck = false;
//---------------------------------------------------------------------------------
// If mask is entered for the specail category then check for only the mask and exit.
//----------------------------------------------------------------------------------		
		if(bcSpecialNumber.GetFieldValue(""Mask"") != """" && bcSpecialNumber.GetFieldValue(""Mask"") != null) {
			if(IsSpecialNumber(bcSpecialNumber.GetFieldValue(""Mask""),ToString(strRunNumWithZero),bcSpecialNumber.GetFieldValue(""Sequence Flag""))) {
					blnCdCheck = true;
					blnrulComCheck =true;
					break;
			} 
		 } else {
		 
//-------------------------------------------------
// If mask is not entered then check for Rule code.
//-------------------------------------------------

			var strRuleCodeMask = bcSpecialNumber.GetFieldValue(""Rule Code Mask"");
			var strSchemeCatId	= bcSpecialNumber.GetFieldValue(""Id"");
			var intNoOfOccurence = bcSpecialNumber.GetFieldValue(""Rule Code Occurence"");
			var intArrayCnt = 0;	
//-----------------------------------------------------------------------------------------------
// If rule code is a filler then check for check whether the entire mask matches the filler digit.
//------------------------------------------------------------------------------------------------			

			if(bcSpecialNumber.GetFieldValue(""Rule Code Type"") == TheApplication().InvokeMethod(""LookupValue"", ""RMS_RUL_TYPE"", ""FILLER"")){
				for(var intRunNumLen =0;intRunNumLen<ToInteger(ToString(strRunNumWithZero).length);intRunNumLen++) {
					if(ToString(strRunNumWithZero).charAt(intRunNumLen)!= bcSpecialNumber.GetFieldValue(""Rule Code Mask"")) {
						blnCdCheck = false;
						break;										
					} else
						blnCdCheck = true;
				}
			} else {

//-----------------------------------------------------------------------------------------------
// If rule code is not a filler tyoe then call checkcode function to check whether the running
//number matches the code definition. 
//------------------------------------------------------------------------------------------------			
				intIncrementMskLenght = 0;
				CheckCode(bcSpecialNumber.GetFieldValue(""Rule Code Mask""),strRunNumWithZero,strRunnNumMskChk,bcSpecialNumber.GetFieldValue(""Rule Code Mask Seq""),intNoOfOccurence,intIncrementMskLenght,blnCdCheck,intStartPoint,intArrayCnt);
		
//-------------------------------------------------------------------------
// If code definition matches then build an array with the left out digits.
//-------------------------------------------------------------------------
				if(blnCdCheck)
					BuilLeftOutDigitArray(bcSpecialNumber.GetFieldValue(""Rule Code Mask""),intStartPoint,strLeftOutDigitArray,strRunNumWithZero);

//----------------------------------------------------------------------------------------
// If code definition is not matched and the reverse check is true then reverse the number
//and call the checkcode function.
//----------------------------------------------------------------------------------------
				
				if(bcSpecialNumber.GetFieldValue(""Rule Code Reverse Check"") == ""Y"" && blnCdCheck == false) {
					var strReverRunnNumWithZero = """";
					for(var intRunNumLen = ToInteger(ToString(strRunNumWithZero).length)-1;intRunNumLen>=0;intRunNumLen--)
						strReverRunnNumWithZero = strReverRunnNumWithZero + ToString(strRunNumWithZero).charAt(intRunNumLen);
						//MS:20060130:as part of script change for 78 var intStartPoint= new Array;
						intStartPoint= new Array;
						var intArrayCnt=0;						
						intIncrementMskLenght = 0;
					CheckCode(bcSpecialNumber.GetFieldValue(""Rule Code Mask""),strReverRunnNumWithZero,strRunnNumMskChk,bcSpecialNumber.GetFieldValue(""Rule Code Mask Seq""),intNoOfOccurence,intIncrementMskLenght,blnCdCheck,intStartPoint,intArrayCnt);
					if(blnCdCheck) {
						var strLeftOutDigitArray = new Array;											
						BuilLeftOutDigitArray(bcSpecialNumber.GetFieldValue(""Rule Code Mask""),intStartPoint,strLeftOutDigitArray,strReverRunnNumWithZero);	
					}
				}
			}
	  	 }
			
//--------------------------------------------------------------
// If code definition is matched then check for the combination.
//--------------------------------------------------------------
			if((blnCdCheck) &&(!blnrulComCheck)) {
				with(bcRuleComb) {
					ActivateField(""Rule Comb Id"");
					ActivateField(""Special Cat Id"");
					ActivateField(""Id"");
					ClearToQuery();
					SetSearchSpec(""Special Cat Id"",bcSpecialNumber.GetFieldValue(""Id""));
					ExecuteQuery(ForwardBackward);		
					
					var blnIsComRec = FirstRecord();
					if(!blnIsComRec)
						blnrulComCheck = true;
//------------------------------------------------------------
// Loop through each rule combination and check for the match.
//------------------------------------------------------------
					while(blnIsComRec) {
						with(bcRuleDefinition) {
						
							ActivateField(""Rule Comb Id"");
							ActivateField(""Mask"");
							ActivateField(""No Of Occurences"");
							ActivateField(""Mask Seq"");
							ActivateField(""Reverse Check"");
							ActivateField(""Type"");
							ClearToQuery();
							SetSearchSpec(""Id"",bcRuleComb.GetFieldValue(""Rule Comb Id""));
							ExecuteQuery(ForwardBackward);		
							var blnRulComRec = FirstRecord();
							var intRuleCombNoOfOccurences = GetFieldValue(""No Of Occurences"");
	
							if(FirstRecord()){
//--------------------------------------------------------------------------------------------
//If rule combination is a filler then check whether the entire mask matches the filler digit.
//--------------------------------------------------------------------------------------------
								if(GetFieldValue(""Type"") == TheApplication().InvokeMethod(""LookupValue"", ""RMS_RUL_TYPE"", ""FILLER"")) {
									for(intArrayCnt = 0;intArrayCnt < getArrayLength(strLeftOutDigitArray);intArrayCnt++){
										for(var intRunNumLen =0;intRunNumLen<ToInteger(ToString(strLeftOutDigitArray[intArrayCnt]).length);intRunNumLen++) {
											if(strLeftOutDigitArray[intArrayCnt].charAt(intRunNumLen)!= GetFieldValue(""Mask"")) {
												blnrulComCheck = false;
												break;										
											}else{
												blnrulComCheck = true;
											}
											
										}
									}
								}
//--------------------------------------------------------------------------------------------
//If rule combination is a not a filler then loop through each of the leftout array value and call the
//check code function to check whether it matche the mask.
//--------------------------------------------------------------------------------------------								
								else {
									for(intArrayCnt = 0;intArrayCnt < getArrayLength(strLeftOutDigitArray);intArrayCnt++){
										var intStartPointArrayCnt = 0;
										strRunnNumMskChk = """";
										intIncrementMskLenght = 0
										CheckCode(GetFieldValue(""Mask""),strLeftOutDigitArray[intArrayCnt],strRunnNumMskChk,GetFieldValue(""Mask Seq""),intRuleCombNoOfOccurences,intIncrementMskLenght,blnrulComCheck,intStartPoint,intStartPointArrayCnt);
//---------------------------------------------------------------------------------------------------------------
//If reverse check for the rule comb is true then reverse the value in the array and call the checkcode function.
//---------------------------------------------------------------------------------------------------------------																		
										if(GetFieldValue(""Reverse Check"") == ""Y"" && blnrulComCheck == false)	{
											intIncrementMskLenght = 0;
											strReverRunnNumWithZero = """";
											for(var intRunNumLen = ToInteger(ToString(strLeftOutDigitArray[intArrayCnt]).length)-1;intRunNumLen>=0;intRunNumLen--)
												strReverRunnNumWithZero = strReverRunnNumWithZero + ToString(strLeftOutDigitArray[intArrayCnt]).charAt(intRunNumLen);
											CheckCode(GetFieldValue(""Mask""),strReverRunnNumWithZero,strRunnNumMskChk,GetFieldValue(""Mask Seq""),intRuleCombNoOfOccurences,intIncrementMskLenght,blnrulComCheck,intStartPoint,intStartPointArrayCnt);
										}
										if(blnrulComCheck == true && intRuleCombNoOfOccurences == 1)										
											break;										
									}
								}
							}
						}
						blnIsComRec = NextRecord();
					}
//					bcRuleComb = NextRecord()
				}
			}
			if(blnCdCheck == true && blnrulComCheck == true)
				break;
			//added for HCPT
			if(blnCdCheck == true && blnrulComCheck == false && bcSpecialNumber.GetFieldValue(""Default Category Id"") != """") {
				break;
			//////////////
			}
		blnSpecCatRec = bcSpecialNumber.NextRecord();
	}
	boVanityruleMarix = null;
	bcRuleDefinition = null;
	
	psfnArgs.SetProperty(""blnCdCheck"",blnCdCheck);
	psfnArgs.SetProperty(""blnrulComCheck"",blnrulComCheck);
	return(blnSpecCatRec);


}
"/**************************************************************************************
* Name          : RMS NM Number Generation Service GeneratedNumbers Numbers Function * 
* Author        : Mahindra British Telecom                                            *
* Description   : Invoking the start generate numbers function after increamenting    *
*				  batch counter and fetching the relevant number scheme information.  *
*																					  *		 
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 05/04/2003 	 1.0   	MBT    	 Kadali Srinivas - Ver. 2.0   15/04/2003       *   
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/

//============================= Kadali Srinivas - Ver. 2.0 ==================================
//	This Method is called for the Allocation of only MSISDN numbers to the Distributors.
//===========================================================================================	
function GenerateAllocateNumbers(bcNumGen,bcNMAlloc,bcSchemeLevel,strFixFormatDel,strFixFormat,strWithoutDel)
{
	var strTypeIdentfier 	= bcNumGen.GetFieldValue(""Type Identifier"");
	var strAllocTo			= bcNumGen.GetFieldValue(""Alloc To"");
	var strFormat			= bcNumGen.GetFieldValue(""Format"");
	var strStartStringNum	= bcNumGen.GetFieldValue(""Start String Number"");
	var strTotalString;
	var bsNMAlloc;
	
	var psInputs;
	var psOutputs;

	if((strTypeIdentfier == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"",""MSISDN"")) && (bcNumGen.GetFieldValue(""Alloc To"") != """")){
			
		if(bcSchemeLevel.GetFieldValue(""Delimiter"") != """" && bcSchemeLevel.GetFieldValue(""Delimiter"") != (TheApplication().InvokeMethod(""LookupValue"", ""NM_FORMAT_DELIMITER"", ""NONE""))){
			strTotalString = strFixFormatDel + strStartStringNum;
		}
		else{
			strTotalString = strWithoutDel + strStartStringNum;	
		}
			bcNMAlloc.ActivateField(""Status"");
			bcNMAlloc.ActivateField(""Scheme Id"");
			bcNMAlloc.ActivateField(""Block Id"");
			bcNMAlloc.ActivateField(""Type Id"");
			bcNMAlloc.ActivateField(""Alloc To"");
			bcNMAlloc.ActivateField(""Start Num String"");			
			bcNMAlloc.ActivateField(""Quantity"");
			
			bcNMAlloc.SetViewMode(AllView);
			bcNMAlloc.NewRecord(1);
			
			bcNMAlloc.SetFieldValue(""Scheme Id"", bcNumGen.GetFieldValue(""Scheme Id""));
			bcNMAlloc.SetFieldValue(""Block Id"", bcNumGen.GetFieldValue(""Block Id""));
			bcNMAlloc.SetFieldValue(""Type Id"", bcNumGen.GetFieldValue(""Type Id""));
			bcNMAlloc.SetFieldValue(""Alloc From"", """");
			bcNMAlloc.SetFieldValue(""Start Num String"", strTotalString);
			bcNMAlloc.SetFieldValue(""Alloc To"", bcNumGen.GetFieldValue(""Alloc To""));
			bcNMAlloc.SetFieldValue(""Quantity"", ToInteger(bcNumGen.GetFieldValue(""Quantity Str"")));
//			bcNMAlloc.SetUserProperty(""blnFromAllocation"",""Y"");
			bcNMAlloc.WriteRecord();
		  	
					
			psInputs  		= TheApplication().NewPropertySet();
			psOutputs  		= TheApplication().NewPropertySet();
			
			psInputs.SetProperty(""intObjectId"",bcNMAlloc.GetFieldValue(""Id""));							
			bsNMAlloc 	= TheApplication().GetService(""RMS NM Number Allocation"");
			
			TheApplication().SetProfileAttr(""AllocFromGen"", ""Y"");
			bsNMAlloc.InvokeMethod(""Allocate"", psInputs,psOutputs);
			TheApplication().SetProfileAttr(""AllocFromGen"", ""N"");			

	}
	
	psInputs 	= null;
	psOutputs 	= null;
//1.1 below
	bsNMAlloc = null;
//1.1 above
}
"/**************************************************************************************
* Name          : RMS NM Number Generation Service GeneratedNumbers Numbers Function * 
* Author        : Mahindra British Telecom                                            *
* Description   : Invoking the start generate numbers function after increamenting    *
*				  batch counter and fetching the relevant number scheme information.  *
*																					  *		 
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 05/12/2003 	 1.0   		 MBT   						Created      15/12/2003       *
* 23/06/2006 	1.1   		ARUNJ   	SiebelES#12 Incorporated condition after ExecuteQuery *	
**************************************************************************************/

function GenerateNumbers(intObjectId){

	var boNumGen;
	var boNMScheme;
	var boNMAlloc;
		
	var bcNumGen;
	var bcSchemeLevel;
	var bcSchemeInfo;
	var bcNMAlloc;
	
	var strFixFormatDel = """";
	var strFixFormat	= """";
	var strErrVal 		= """";
	var strSchemeFormat = """";
	var strSearchExpr	= """";
	var strWithoutDel	= """";
	var strSchemeId	;
	var strVal;
	var strNumDelim 	= """";
	var strNum 			= """";
	var strAlgorithm = new Array;
	
	var intAlgoCnt = 0;
	
	var intdoubledigit;
	var intsingledigit;
	var intLengthOfRunningValue = 0;
	var intBatchCounter;
	var intCount;
	var intBatchCnt;
//	var intCount = 0;  //MS:20060130: as part of script change to 78
	var blnChecksumReq;
	var blnSchLvlRec;
	var blnIsRecord;
	var blnBatchCnt = false;
	var strLevelName;

	boNumGen		= TheApplication().GetBusObject(""RMS NM Number Generation"");
	boNMScheme 		= TheApplication().GetBusObject(""RMS NM Number Scheme"");
	boNMAlloc		= TheApplication().GetBusObject(""RMS NM Number Allocation"");
	
	bcNumGen		= boNumGen.GetBusComp(""RMS NM Number Generation"");
	bcSchemeLevel	= boNMScheme.GetBusComp(""RMS NM Scheme Level Updation"");
	bcSchemeInfo	= boNumGen.GetBusComp(""RMS NUM GENERATION SCHEME INFO"");
	bcNMAlloc		= boNMAlloc.GetBusComp(""RMS NM Number Allocation"");
	
	with(bcNumGen){
		ActivateField(""Scheme Id"");
		ActivateField(""Type Id"");
		ActivateField(""Block Id"");
		ActivateField(""Block Starting String Number"");
		ActivateField(""Quantity Str"");
		ActivateField(""Start String Number"");
		ActivateField(""Start Number"");
		ActivateField(""End Number Str"");
		ActivateField(""End Number"");
		ActivateField(""Status"");
		ActivateField(""HLR Id"");
		ActivateField(""Batch Number"");
		ActivateField(""Type Identifier"");
		ActivateField(""Post Generation Status"");
		ActivateField(""Subtype Id"");
		ActivateField(""Format"");
		ActivateField(""SIM Order Raised"");
		ActivateField(""Generated Message"");
		ActivateField(""Alloc To"");
		ActivateField(""Checksum Required"");
		ClearToQuery();
		SetSearchSpec(""Id"",intObjectId);
		ExecuteQuery();
// below 1.1
//		FirstRecord();
// above 1.1
	}	
// below 1.1
	if (bcNumGen.FirstRecord())	{
// above 1.1

//--------------------------------------------------------------------------
// Display an error message if another user is accessing the same record.
//--------------------------------------------------------------------------
//	if(bcNumGen.GetFieldValue(""Status"")== (TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""GENERATED"")) || bcNumGen.GetFieldValue(""Status"")== (TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"")))
	if(bcNumGen.GetFieldValue(""Status"")== (TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""GENERATED"")))
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN004"");

	else{
		bcNumGen.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
		bcNumGen.WriteRecord();

//--------------------------------------------------------------------------------------
// Incrementing the batch counter of the scheme.
// Batch counter reflects the no. of times numbers were generated against the scheme.
//--------------------------------------------------------------------------------------				
		strSchemeId = bcNumGen.GetFieldValue(""Scheme Id"");
		
		with(bcSchemeLevel){
			ActivateField(""Scheme Id"");
			ActivateField(""Level Type"");
			ActivateField(""Length"");
			ActivateField(""Delimiter"");
			ActivateField(""Value"");
			ActivateField(""Max Reached"");
			ActivateField(""Level Name"");
			ActivateField(""Algorithm"");
			ClearToQuery();
			SetSearchSpec(""Scheme Id"",bcNumGen.GetFieldValue(""Scheme Id""));
			ExecuteQuery();
			blnSchLvlRec = FirstRecord();
		}
		
				
//------------------------------------------------------------------------------------
// Breaking the number to update the batch number and providing the inputs of HLR
// and batch number for making the checksum digits.
//------------------------------------------------------------------------------------		
		while(blnSchLvlRec){
	
			if(bcSchemeLevel.GetFieldValue(""Level Type"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING"")
					&&
			bcSchemeLevel.GetFieldValue(""Level Type"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""CHECKSUM"")){
					
				if(bcSchemeLevel.GetFieldValue(""Level Type"") == (TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""YEAR""))){

					var dtSysDate;
					var dtSysDateObj;
				
					dtSysDate    = Clib.time();
					dtSysDateObj = Date.fromSystem(dtSysDate);
					dtSysDateObj.setTime(dtSysDateObj.getTime());
					
					//----------------------------------------	
					//Getting the current day, month and year.
					//----------------------------------------	
				
				 	var mstrCurrDay   = ToNumber(dtSysDateObj.getDate());
					var mstrCurrMonth = ToNumber(dtSysDateObj.getMonth());	
					var mstrCurrYear  = ToString(dtSysDateObj.getFullYear());
					mstrCurrYear  = mstrCurrYear.substring(2,4);

/*----------------------	V2.0	------------------------------------------
					if(bcSchemeLevel.GetFieldValue(""Max Reached"") == ""Y""){
						strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN028"");			
						return(strErrVal);
					}	
					
					if(bcNumGen.GetFieldValue(""Batch Number"") == """"){
					
						//strFixFormat = ToString(bcNumGen.GetFieldValue(""HLR Id"")) + ToString(bcSchemeLevel.GetFieldValue(""Value""));
						strFixFormat = strFixFormat + ToString(bcSchemeLevel.GetFieldValue(""Value""));
						bcNumGen.SetFieldValue(""Batch Number"",ToString(bcSchemeLevel.GetFieldValue(""Value"")));	
						bcNumGen.WriteRecord();	
						
						blnBatchCnt = true;
						intBatchCnt = bcSchemeLevel.GetFieldValue(""Value"");
						 
						intBatchCounter = ToInteger(bcSchemeLevel.GetFieldValue(""Value"")) + 1;
						
						if(ToString(intBatchCounter).length < ToInteger(bcSchemeLevel.GetFieldValue(""Length""))){
							for(intCount = ToString(intBatchCounter).length; intCount != ToInteger(bcSchemeLevel.GetFieldValue(""Length""));intCount++)
								intBatchCounter = ""0"" + intBatchCounter;
						}
						else if(ToString(intBatchCounter).length > ToInteger(bcSchemeLevel.GetFieldValue(""Length""))){
							bcSchemeLevel.SetFieldValue(""Max Reached"",""Y"");
							intBatchCounter = ToInteger(bcSchemeLevel.GetFieldValue(""Value""));	
						}							
					
						bcSchemeLevel.SetFieldValue(""Value"",intBatchCounter);
						bcSchemeLevel.WriteRecord();
					}
			
					else

					strFixFormat = strFixFormat + ToString(bcNumGen.GetFieldValue(""Batch Number""));
					//strFixFormat = ToString(bcNumGen.GetFieldValue(""HLR Id"")) + ToString(bcNumGen.GetFieldValue(""Batch Number""));
//-------------------------------  V2.0  ------------------------------------*/		
					strFixFormat = strFixFormat + mstrCurrYear;				
//					strWithoutDel = strWithoutDel + bcNumGen.GetFieldValue(""Batch Number"");	
					strWithoutDel = strWithoutDel + mstrCurrYear;
//					strFixFormatDel = strFixFormatDel + bcNumGen.GetFieldValue(""Batch Number"");	
					strFixFormatDel = strFixFormatDel + mstrCurrYear;
					if(bcSchemeLevel.GetFieldValue(""Delimiter"") != """" && bcSchemeLevel.GetFieldValue(""Delimiter"") != (TheApplication().InvokeMethod(""LookupValue"", ""NM_FORMAT_DELIMITER"", ""NONE"")))
						if(bcSchemeLevel.GetFieldValue(""Delimiter"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_FORMAT_DELIMITER"", ""SPACE"")){
							strFixFormatDel = strFixFormatDel + "" "";
						}
						else
						{
							strFixFormatDel = strFixFormatDel + bcSchemeLevel.GetFieldValue(""Delimiter"");
						}
					
					blnSchLvlRec = bcSchemeLevel.NextRecord();
					continue;						
							
				}
				
				if(bcSchemeLevel.GetFieldValue(""Level Type"") == (TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""HLR""))){
					strFixFormat = strFixFormat + ToString(bcNumGen.GetFieldValue(""HLR Id""));
				}
				
				if(bcSchemeLevel.GetFieldValue(""Level Type"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""YEAR"")
										&&
					bcSchemeLevel.GetFieldValue(""Level Type"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""HLR""))
				{
					strFixFormat  = strFixFormat + bcSchemeLevel.GetFieldValue(""Value"");
				}
				
				
				strWithoutDel = strWithoutDel + bcSchemeLevel.GetFieldValue(""Value"");
				strFixFormatDel = strFixFormatDel + bcSchemeLevel.GetFieldValue(""Value"");
				if(bcSchemeLevel.GetFieldValue(""Delimiter"") != """" && bcSchemeLevel.GetFieldValue(""Delimiter"") != (TheApplication().InvokeMethod(""LookupValue"", ""NM_FORMAT_DELIMITER"", ""NONE""))){
						if(bcSchemeLevel.GetFieldValue(""Delimiter"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_FORMAT_DELIMITER"", ""SPACE"")){
							strFixFormatDel = strFixFormatDel + "" "";
						}
						else{
							strFixFormatDel = strFixFormatDel + bcSchemeLevel.GetFieldValue(""Delimiter"");
						}
				}
			}
			else {
				if(bcSchemeLevel.GetFieldValue(""Level Type"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING""))
					intLengthOfRunningValue = ToInteger(bcSchemeLevel.GetFieldValue(""Length""));	
				if(bcSchemeLevel.GetFieldValue(""Level Type"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""CHECKSUM""))
					strAlgorithm[intAlgoCnt++] = bcSchemeLevel.GetFieldValue(""Algorithm"");
			}
				
				 
			blnSchLvlRec = bcSchemeLevel.NextRecord();
		}	
		
		strLevelName	= bcSchemeLevel.GetFieldValue(""Level Name"");
		blnChecksumReq 	= bcNumGen.GetFieldValue(""Checksum Required"");
		
		strErrVal = StartGenerateNumbers(bcNumGen,strFixFormatDel,intLengthOfRunningValue,strFixFormat,strWithoutDel,blnBatchCnt,intBatchCnt,intBatchCounter,strAlgorithm,blnChecksumReq,strLevelName);

		with(bcSchemeLevel){
			ActivateField(""Current Format"");
			ActivateField(""Scheme Id"");
			ActivateField(""Level Type"");
			ActivateField(""Length"");
			ActivateField(""Delimiter"");
			ActivateField(""Value"");
			ClearToQuery();
			SetSearchSpec(""Scheme Id"",strSchemeId);
			ExecuteQuery();
			blnSchLvlRec = FirstRecord();
		}
			
		while(blnSchLvlRec){
			strVal = bcSchemeLevel.GetFieldValue(""Value"");
//-----------------------------------------------------------------
// Populating the scheme format with the delimiters if mentioned.
//-----------------------------------------------------------------
			if(bcSchemeLevel.GetFieldValue(""Level Type"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING"")){
				if(bcSchemeLevel.GetFieldValue(""Delimiter"") != """" && bcSchemeLevel.GetFieldValue(""Delimiter"") != (TheApplication().InvokeMethod(""LookupValue"", ""NM_FORMAT_DELIMITER"", ""NONE"")))
					if(bcSchemeLevel.GetFieldValue(""Delimiter"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_FORMAT_DELIMITER"", ""SPACE"")){	
						strVal = strVal + "" "";
					}
					else{						
						strVal = strVal + ToString(bcSchemeLevel.GetFieldValue(""Delimiter""));
					}

//-------------------------------------------------------------------------------
// Storing numbers with delimiters and also without delimiters for the check of 
// unique format values.
//--------------------------------------------------------------------------------
					strNumDelim = strNumDelim + strVal;
			}
			else{
				for (intCount=0; intCount < bcSchemeLevel.GetFieldValue(""Length"");intCount++)
					strVal = strVal + 'N';
				
				strNumDelim = strNumDelim + strVal ;
			}	
	
			blnSchLvlRec = bcSchemeLevel.NextRecord();
	
		}

		with(bcSchemeInfo){
			ActivateField(""Current Format"");
			ClearToQuery();
			SetSearchSpec(""Id"",strSchemeId);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
// below 1.1
			if (blnIsRecord){
// above 1.1
			bcSchemeInfo.SetFieldValue(""Current Format"",strNumDelim);
			bcSchemeInfo.WriteRecord();
// below 1.1
			}
// above 1.1
		}
		
	}

//============================= Kadali Srinivas - Ver. 2.0 ==================================
//	This Method is called for the Allocation of only MSISDN numbers to the Distributors.
//===========================================================================================	
	GenerateAllocateNumbers(bcNumGen,bcNMAlloc,bcSchemeLevel,strFixFormatDel,strFixFormat,strWithoutDel);
	
	
	bcNumGen.SetFieldValue(""Generated Message"", strErrVal);
	bcNumGen.WriteRecord();
// below 1.1
	}
// above 1.1	
	bcSchemeLevel  	= null;
	bcNumGen		= null;
	bcSchemeInfo    = null;
	bcNMAlloc		= null;	
	boNMScheme		= null;
	boNumGen		= null;
	boNMAlloc		= null;
	
	return(strErrVal);	
	
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
---------------+------+--------+----------------------------------------------
*/
function Invoke_ChkVanityMatrix_1(strSchemeId,strRunNumWithZero)
{
	var boNumberScheme;
	var bcSpecialNumber;
	var bcRuleComb;
	var psfnArgs;

	var blnCdCheck = false;
	var blnrulComCheck = false;
	var blnVanityCheck = false;

	psfnArgs = TheApplication().NewPropertySet();


	boNumberScheme  = TheApplication().GetBusObject(""RMS NM Number Scheme"");
	bcSpecialNumber = boNumberScheme.GetBusComp(""RMS NM Scheme Special Category"");
	bcRuleComb = boNumberScheme.GetBusComp(""RMS NM Special Cat Rule Comb"");
	psfnArgs.SetProperty(""blnCdCheck"",false);
	psfnArgs.SetProperty(""blnrulComCheck"",false);
	QuerySpecialNumber(bcSpecialNumber, strSchemeId);
	blnVanityCheck = ChkVanityMatrix_1(strSchemeId,strRunNumWithZero,psfnArgs,bcSpecialNumber,bcRuleComb);
	blnCdCheck = (psfnArgs.GetProperty(""blnCdCheck"") == ""true"")?true:false;
	blnrulComCheck = (psfnArgs.GetProperty(""blnrulComCheck"") == ""true"")?true:false;

	if(blnCdCheck == true && blnrulComCheck == true) {
		return(bcSpecialNumber.GetFieldValue(""Category""));
	}
	if(blnCdCheck == true && blnVanityCheck == true && blnrulComCheck == false ) {
		//if(bcSpecialNumber.LastRecord()){ 
			if(bcSpecialNumber.GetFieldValue(""Default Category Id"")!="""") {
				return(bcSpecialNumber.GetFieldValue(""Default Category""));
			}
		//}
	}
//1.1 below
	bcRuleComb = null;
	bcSpecialNumber = null;
	boNumberScheme = null;
	psfnArgs = null;
//1.1 above
}
"/**************************************************************************************
* Name          : NM Number Generation IsSpecial function		         		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Generation Code File	    		                      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function IsSpecialNumber(sFormat, sFullNum, sSeq){
	
	var nCount    = 0, nFormatLength;
	var arrFormat = new Array();
	var arrIndex  = new Array();
	var sIndex, sValue;

	sIndex = sValue = """";
//Get the last format number values.
	var sNum 	  = sFullNum.substring(sFullNum.length - sFormat.length);


//Validate the number value entered matches the number format length.
	if (sNum.length < sFormat.length)	return false;
	
			
//Validate whether each digit in the number format corresponds to the right number value supplied. 
	for (; nCount < sFormat.length; nCount++)
	{	
//Check if the format specified is a number datatype.
		if (Clib.isdigit(sFormat.charAt(nCount)))		
		{	
			if (sFormat.charAt(nCount) != sNum.charAt(nCount))	break;
		
			continue;
		}
		
//Checking whether the format is in the mask value array.If not then append it to the array.
		if (isFinite(arrFormat[sFormat.charAt(nCount)]))					
		{
		
//Check mask value with the original value specified.		
			if (arrFormat[sFormat.charAt(nCount)] != ToInteger(sNum.charAt(nCount)))	break;	

		}
		else
//Check the value of mask with each value of mask specified.
			if (sValue.indexOf(sNum.charAt(nCount)) >= 0)	break;
			
			else
			{ 
//If value not specified,then add it to the existing list.
				sIndex = sIndex + sFormat.charAt(nCount);
				sValue = sValue + sNum.charAt(nCount);
				arrFormat[sFormat.charAt(nCount)]  = ToInteger(sNum.charAt(nCount));
			}	

//If sequence specified for format then check for the sequencing.					
			if (sSeq == ""Y"")						
			
				if (((sFormat.charCodeAt(nCount)-sIndex.charCodeAt(0)) + ToInteger(sValue.charAt(0))) 
				      != ToInteger(sNum.charAt(nCount)))	break;
									
	} //End of for loop.
	
	return (nCount==sFormat.length?true:false);
}
"/**************************************************************************************
* Name          : NM Number Generation IsSpecial function		         		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Generation Code File	    		                      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/4/2005 	1.0   		MBT						   	Created      02/04/2005       *
**************************************************************************************/
function LuhnAlgorithm(strNum,intLength,&intCount,&intChecksum1,intdoubledigit,intsingledigit,strFinalChkNum) {
	for(var intNumCount= ToInteger(intLength); intNumCount>=0; intNumCount = ToInteger(intNumCount)-1)
	{
		if(intCount == 1)
		{
			intdoubledigit = ToInteger(strNum.charAt(ToInteger(intNumCount))* 2);
			intsingledigit = MakeSingleDigit(intdoubledigit);
			strFinalChkNum = strFinalChkNum + ToString(intsingledigit); 
		}

		if(intCount == 0) {
			strFinalChkNum = strFinalChkNum + ToString(strNum.charAt(ToInteger(intNumCount)));
		}
		if(intCount == 1)
		{
			intCount = 0;
		}
		else
		{
			intCount = 1;	
		}
	}
	for(var intNumCount= 0; intNumCount <= ToInteger(strFinalChkNum.length); intNumCount = ToInteger(intNumCount)+1) {
		intChecksum1 = ToInteger(intChecksum1) + ToInteger(strFinalChkNum.charAt(ToInteger(intNumCount)));
	}
	
	intChecksum1 = ToInteger(intChecksum1) % 10;
	if(intChecksum1 != 0){
		intChecksum1 = ToInteger(10 - ToInteger(intChecksum1));						
	}
	else
		intChecksum1 = intChecksum1;		
}
"/**************************************************************************************
* Name          : NM Number Generation IsSpecial function		         		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Generation Code File	    		                      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/04/2005 	1.0   		MBT						   	Created      02/04/2005       *
**************************************************************************************/
function MakeSingleDigit(intdoubledigit)
{
try{
	var intIndividualdigit = 0;
	var vdouble = ToInteger(ToString(intdoubledigit).length);
	var intdoubledigit1 = ToString(intdoubledigit);
	var intNumCount11 = 1;

	while(ToString(intdoubledigit).length  > 1)
	{
		for(intNumCount11; intNumCount11 <= vdouble; intNumCount11++)
		{
		   intIndividualdigit = intIndividualdigit + ToInteger(intdoubledigit1.charAt(ToInteger(intNumCount11)-1));
		}
		intdoubledigit = intIndividualdigit;
	}
	return(intdoubledigit);	
	}
	catch(e)
	{
		var strMessage = e.errText;
	}
	return CancelOperation;
}
"/**************************************************************************************
* Name          : RMS NM Number Generation PopulateEnd Number Function         	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Populates the end number and also checks for the concurrency.	      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      05/12/2003       *
* 23/06/2006 	1.1   		ARUNJ   	SiebelES#12 Incorporated condition after ExecuteQuery *	
* 09/01/2007	1.2         MANOJ       changed start num and end number to numeric fields*
**************************************************************************************/

function PopulateEndNum(intObjectId,strSchId,strBlkId,intQty,intStNum,&strStNum,strBlkStNo,&intEndNum,&strEndNum,intBlkStrNum,intBlkEndNum){

	var boNumGen;
	var boNMScheme;
	
	var bcNumGen;
	var bcNMBlock;
	var bcSchemeLevel;
	
	var intAvailQty;
	var intStartNumLenCnt;
	var intEndNumLenCnt;
	
	var strErrVal = """";
	var strSearchExpr;
	var blnSchLvlRec;
	var blnIsRecord;
	var varjk;
	var flgBatchCounter = ""N"";
	
	boNumGen 		= TheApplication().GetBusObject(""RMS NM Number Generation"");
	boNMScheme		= TheApplication().GetBusObject(""RMS NM Number Scheme"");
	
	bcNumGen		= boNumGen.GetBusComp(""RMS NM Number Generation"");
	bcNMBlock		= boNMScheme.GetBusComp(""RMS NM Number Block"");
    bcSchemeLevel	= boNMScheme.GetBusComp(""RMS NM Scheme Level Updation"");
     
//--------------------------------------------------------------------------------------
// Check if the quantity specified fits in the block quantity defined in number scheme.	
//--------------------------------------------------------------------------------------
	with(bcNMBlock){
		ActivateField(""Available Quantity"");
		ClearToQuery();
		SetSearchSpec(""Id"",strBlkId);
		ExecuteQuery();
// below 1.1
//		FirstRecord();
// above 1.1
	}
// below 1.1
	if (bcNMBlock.FirstRecord()){
// above 1.1		
		intAvailQty = ToNumber(bcNMBlock.GetFieldValue(""Available Quantity""));

    with(bcSchemeLevel){
    		ActivateField(""Scheme Id"");
			ActivateField(""Level Type"");
			ClearToQuery();
			SetSearchSpec(""Scheme Id"",strSchId);
			ExecuteQuery();
			blnSchLvlRec = FirstRecord();
	}  	
	
	while(blnSchLvlRec){
			if(bcSchemeLevel.GetFieldValue(""Level Type"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""BATCH COUNTER""))
				flgBatchCounter = ""Y"";
			blnSchLvlRec = bcSchemeLevel.NextRecord();	
	}
	
	
	
	
	
	if(intAvailQty < intQty)
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN001"",intAvailQty);
	
	if((intEndNum > intBlkEndNum) || (intStNum < intBlkStrNum))
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN010"",intBlkStrNum,intBlkEndNum);
		
		
	if(	strErrVal == """"){
//----------------------------------------------------------------------
// Checking for the concurrency of the start number and the end number. 
//----------------------------------------------------------------------
/*	below 1.2
	changed fields from Start Number to Start Number Numeric and End Number to End Number Numeric
	changes were made to enforce numeric search instead of string search for overlap query
		
	strSearchExpr = ""[Scheme Id] = '"" + strSchId +
						""' AND [Block Id] ='"" + strBlkId +
						""' AND [Id] <>'"" + intObjectId + 
						""' AND (([Start Number] <= '"" + intStNum +
						""' AND [End Number] >= '"" + intStNum +
						""') OR ([Start Number] <= '"" + intEndNum +
						""' AND [End Number] >= '"" + intEndNum +
						""') OR ([Start Number] >= '"" + intStNum +
						""' AND [End Number] <= '"" + intEndNum + ""'))"";
above 1.2*/	
		strSearchExpr = ""[Scheme Id] = '"" + strSchId +
						""' AND [Block Id] ='"" + strBlkId +
						""' AND [Id] <>'"" + intObjectId + 
						""' AND (([Start Number Numeric] <= "" + intStNum +
						"" AND [End Number Numeric] >= "" + intStNum +
						"") OR ([Start Number Numeric] <= "" + intEndNum +
						"" AND [End Number Numeric] >= "" + intEndNum +
						"") OR ([Start Number Numeric] >= "" + intStNum +
						"" AND [End Number Numeric] <= "" + intEndNum + ""))"";
//--------------------------------------------------------------------------------
//Code added for appending Batch Counter(if specified) in the search specification  
//--------------------------------------------------------------------------------
	if(flgBatchCounter == ""Y"")
		strSearchExpr= strSearchExpr + "" AND [Batch Number] = ''"";
	
	
	
		
		with(bcNumGen){
			ActivateField(""Start String Number"");
			ActivateField(""End Number Str"");
			ClearToQuery();
			SetSearchExpr(strSearchExpr);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}
		
		while(blnIsRecord){		
//--------------------------------------------------
// Display an error if start number is overlapping.	
//--------------------------------------------------	
			if((intStNum >= (ToInteger(bcNumGen.GetFieldValue(""Start String Number"")))) && (intStNum <= (ToInteger(bcNumGen.GetFieldValue(""End Number Str""))))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN002"",bcNumGen.GetFieldValue(""Start String Number""),bcNumGen.GetFieldValue(""End Number Str""));	
				break;
			}	

//------------------------------------------------
// Display an error if end number is overlapping.
//------------------------------------------------				
			else if((intEndNum >= (ToInteger(bcNumGen.GetFieldValue(""Start String Number"")))) && (intEndNum <= (ToInteger(bcNumGen.GetFieldValue(""End Number Str""))))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN003"",bcNumGen.GetFieldValue(""Start String Number""),bcNumGen.GetFieldValue(""End Number Str""));	
				break;
			}

//---------------------------------------------------------------
// Display an error if start number or end number is overlapping.
//---------------------------------------------------------------				
			else if((intStNum <= (ToInteger(bcNumGen.GetFieldValue(""Start String Number"")))) && (intEndNum >= (ToInteger(bcNumGen.GetFieldValue(""End Number Str""))))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN008"",intStNum,intQty,bcNumGen.GetFieldValue(""Start String Number""),bcNumGen.GetFieldValue(""End Number Str""));	
				break;
			}	
					
			blnIsRecord = bcNumGen.NextRecord();
		}
	}

//------------------------------------------------------------------------------------------
// Appending no. of zeros for starting number and the end number as per the length of block.
//------------------------------------------------------------------------------------------
	if(strErrVal == """"){
		if(strStNum.length < strBlkStNo.length){
			for (intStartNumLenCnt = strStNum.length; intStartNumLenCnt != strBlkStNo.length; intStartNumLenCnt++)
				strStNum = ""0"" + strStNum;
		}

		if(strEndNum.length < strBlkStNo.length){
			for (intEndNumLenCnt = strEndNum.length; intEndNumLenCnt != strBlkStNo.length; intEndNumLenCnt++)
				strEndNum = ""0"" + strEndNum;
		}
	}
	
// below 1.1
	}
// above 1.1	
	bcNumGen 		= null;
	bcNMBlock 		= null;
	bcSchemeLevel	= null;
	boNumGen 		= null;
	boNMScheme 		= null;
	
	return(strErrVal);
}
function QuerySpecialNumber(&bcSpecialNumber, strSchemeId)
{
//--------------------------------------------------------
// Query Special category to get all the category records.
//--------------------------------------------------------
	
	with(bcSpecialNumber) {
		ActivateField(""Id"");			
		ActivateField(""Scheme Id"");
		ActivateField(""Sequence Flag"");
		ActivateField(""Priority"");
		ActivateField(""Mask"");
		ActivateField(""Reverse Check"");
		ActivateField(""Rule Code Name"");
		ActivateField(""Rule Code Mask"");
		ActivateField(""Category"");
		ActivateField(""Rule Code Occurence"");		
		ActivateField(""Rule Code Mask Seq"");
		ActivateField(""Rule Comb Code"");
		ActivateField(""Rule Code Reverse Check"");
		ActivateField(""Rule Code Type"");
		ActivateField(""Price"");
		ActivateField(""Default Category Id"");
		ActivateField(""Default Category"");
		ClearToQuery();
		SetSearchSpec(""Scheme Id"",strSchemeId);
	//	SetSearchSpec(""Expired"",""N"");
	//	SetSearchSpec(""In Use Flag For Gen"",""Y"");
		SetSortSpec(""Priority (ASCENDING)"");
		ExecuteQuery(ForwardBackward);
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Generation RefreshingBc function	         		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function RefreshingBc(){

	var psInputs;
	var psOutputs;
	var bsSIMNMRef;
	
	psInputs = TheApplication().NewPropertySet();
	psOutputs = TheApplication().NewPropertySet();
	
	bsSIMNMRef = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
										
	psInputs.SetProperty(""Business Component Name"",""RMS NM Number Generation"");
	psInputs.SetProperty(""Business Object Name"",""RMS NM Number Generation"");
	bsSIMNMRef.InvokeMethod(""Refresh Business Component"",psInputs,psOutputs);
	
	psInputs 	= null;
	psOutputs 	= null;
	bsSIMNMRef	= null;
	
}
"/**************************************************************************************
* Name          : RMS NM Number Generation Service PreInvoke Method         		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      08/12/2003       *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs){

	var intObjectId;  
	var strErrVal 	= """";
	var intReturn	= ContinueOperation;
	intObjectId		= Inputs.GetProperty(""Object Id"");
	
	try{
	
		switch(MethodName){
			case ""GenerateNumbers"":
				strErrVal = GenerateNumbers(intObjectId);
				intReturn = CancelOperation;
				//RefreshingBc();
			
				//if(strErrVal != """")
//					TheApplication().RaiseErrorText(strErrVal);
				break;
	
			case ""CancelGeneratedNumbers"":
				strErrVal = CancelGeneratedNumbers(intObjectId);		
				intReturn = CancelOperation;
				RefreshingBc();
				if(strErrVal != """")
					TheApplication().RaiseErrorText(strErrVal);
				break;
				
//--------------------------------------------------------------------------
// Validates the record for concurrency before saving the generation record.
//--------------------------------------------------------------------------					
			case ""ValidateRecord"":
				strErrVal = ValidateGeneration(Inputs,Outputs);
				intReturn = CancelOperation;
				if(strErrVal != """")
					TheApplication().RaiseErrorText(strErrVal);
				break;	
			
			case ""CheckVanity"":
				Outputs.SetProperty(""Category"",Invoke_ChkVanityMatrix_1(Inputs.GetProperty(""SchemeId""),Inputs.GetProperty(""Number"")));	
				intReturn = CancelOperation;
				break;
			
			case ""Special_Numbers"":
				strErrVal 	= 	Special_Numbers(intObjectId);
				intReturn 	= 	CancelOperation;
				if(strErrVal != """")
					TheApplication().RaiseErrorText(strErrVal);
				break;

				
			default:
				break;
						
		}
	}catch(e){
		throw e;
	}
	
	return(intReturn);			
}
"/**************************************************************************************
* Name          : RMS NM Number Generation Service SPecial Numbers  Method       * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation SPecial Numbers	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*              | 1.0  | MBT                                                                  *
* 
20060804       | 1.1  | Kalyana | Siebel ES SCR 20060803, Objects Destroyed
**************************************************************************************/
function Special_Numbers(objid)
{

	var	boNumberGen;
	var	bcNumberGen;
	var bsSplNo;
	var psInput;
	var psOutput;
	var strConn;
	var strUserId;
	var strPwd;
	var strBatchsize;
	var strLogFile;
	var strErrVal 	=	"""";
	var strPrefix	=	"""";
	var strCMD;
	var strStartNum;
	var strEndNum;
	var strFormat;
	var i;
	//below 1.1
	var boSysPref;
	var bcSysPref;
	//above 1.1
	try
	{
		boSysPref = TheApplication().GetBusObject(""System Preferences"");
		bcSysPref = boSysPref.GetBusComp(""System Preferences"");

		//-----GETTING THE Connection String FROM SYSTEM PREFERENCE------------
		bcSysPref.ActivateField(""Value"");
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""STC_SPLNUM_CONN_STR"");
		bcSysPref.ExecuteQuery();
		if(bcSysPref.FirstRecord()) 
		{	 
			strConn		= 	bcSysPref.GetFieldValue(""Value"");
		}


		//-----GETTING THE UserId FROM SYSTEM PREFERENCE------------
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""STC_SPLNUM_USER_ID"");
		bcSysPref.ExecuteQuery();
		if(bcSysPref.FirstRecord()) 
		{	 
			strUserId	= 	bcSysPref.GetFieldValue(""Value"");
		}


		//-----GETTING THE PASSWORD FROM SYSTEM PREFERENCE------------
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""STC_SPLNUM_PWD"");
		bcSysPref.ExecuteQuery();
		if(bcSysPref.FirstRecord()) 
		{	 
			strPwd		= 	bcSysPref.GetFieldValue(""Value"");
		}


		//-----GETTING THE BATCHSIZE FROM SYSTEM PREFERENCE------------
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""STC_SPLNUM_BATCHSIZE"");
		bcSysPref.ExecuteQuery();
		if(bcSysPref.FirstRecord()) 
		{	 
			strBatchsize	= 	bcSysPref.GetFieldValue(""Value"");
		}

		//-----GETTING THE LOGFILE FROM SYSTEM PREFERENCE------------
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""STC_SPLNUM_LOGFILE"");
		bcSysPref.ExecuteQuery();
		if(bcSysPref.FirstRecord()) 
		{	 
			strLogFile		= 	bcSysPref.GetFieldValue(""Value"");
		}

		//---------------------------------------------------------------------------
		boNumberGen 	= TheApplication().GetBusObject(""RMS NM Number Generation"");
		bcNumberGen		= boNumberGen.GetBusComp(""RMS NM Number Generation"");
		with(bcNumberGen)
		{
			ActivateField(""Start String Number"");
			ActivateField(""End Number Str"");
			ActivateField(""Format"");
			ClearToQuery();
			SetSearchSpec(""Id"",objid);
			ExecuteQuery();
			if (bcNumberGen.FirstRecord())
			{
				strFormat	=	bcNumberGen.GetFieldValue(""Format"");
				for(i=0;i<strFormat.length;i++)
				{
					if(Clib.isdigit(strFormat.charAt(i)))
						strPrefix	+=	strFormat.charAt(i);
					else
						break;
				}
				strStartNum	=	strPrefix + bcNumberGen.GetFieldValue(""Start String Number"");
				strEndNum	=	strPrefix + bcNumberGen.GetFieldValue(""End Number Str"");
			 }
		 }
//----------CALLING THE JAVA BUSINESS SERVICE ---------------------------------------------------

		bsSplNo		=	TheApplication().GetService(""STC Special Numbers"");
		psInput		= 	TheApplication().NewPropertySet();
		psOutput 	= 	TheApplication().NewPropertySet();

		psInput.SetProperty(""StartingNumber"", strStartNum);
		psInput.SetProperty(""EndingNumber"", strEndNum);
		psInput.SetProperty(""ConnecString"", strConn);
		psInput.SetProperty(""UserId"", strUserId);
		psInput.SetProperty(""Password"", strPwd);
		psInput.SetProperty(""BatchSize"", strBatchsize);
		psInput.SetProperty(""LogFile"", strLogFile);

		bsSplNo.InvokeMethod(""RunCategory"",psInput,psOutput);
	

//-----------------------------------------------------------------------------------------------

	}
	catch(e)
	{
		TheApplication.RaiseErrorText(strErrVal);
	}
   //below 1.1
	//Added finally block
	finally
	{
	bcNumberGen = null;
	boNumberGen = null;
	bcSysPref   = null;
	boSysPref   = null;
	bsSplNo		= null;
	}
	//above 1.1
	return(strErrVal);
//return (CancelOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Generation Service SPecial Numbers  Method       * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation SPecial Numbers	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*              | 1.0  | MBT                                                                  *
* 
20060804       | 1.1  | Kalyana | Siebel ES SCR 20060803, Objects Destroyed
**************************************************************************************/
function Special_Numbers1(objid)
{
	//TheApplication.RaiseErrorText(""Special Numbers"");
	var	boNumberGen;
	var	bcNumberGen;
	var strFile;
	var strPath;
	var strErrVal 	=	"""";
	var strPrefix	=	"""";
	var strCMD;
	var strStartNum;
	var strEndNum;
	var strFormat;
	var i;
	//below 1.1
	var boSysPref;
	var bcSysPref;
	//above 1.1
	try
	{
		//below 1.1
		//var boSysPref = TheApplication().GetBusObject(""System Preferences"");
		//var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
		boSysPref = TheApplication().GetBusObject(""System Preferences"");
		bcSysPref = boSysPref.GetBusComp(""System Preferences"");
		//above 1.1
		//-----GETTING THE ABSOLUTE PATH FROM SYSTEM PREFERENCE------------
		bcSysPref.ActivateField(""Value"");
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""HCPT_SPLNUM_PROG_PATH"");
		bcSysPref.ExecuteQuery();
		if(bcSysPref.FirstRecord()) 
		{	 
			strPath		= 	bcSysPref.GetFieldValue(""Value"");
		}
		//-----GETTING THE FILE NAME FROM SYSTEM PREFERENCE------------
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""HCPT_SPLNUM_PROG_FILE"");
		bcSysPref.ExecuteQuery();
		if(bcSysPref.FirstRecord()) 
		{	 
			strFile		= 	bcSysPref.GetFieldValue(""Value"");
		}
		boNumberGen 	= TheApplication().GetBusObject(""RMS NM Number Generation"");
		bcNumberGen		= boNumberGen.GetBusComp(""RMS NM Number Generation"");
		with(bcNumberGen)
		{
			ActivateField(""Start String Number"");
			ActivateField(""End Number Str"");
			ActivateField(""Format"");
			ClearToQuery();
			SetSearchSpec(""Id"",objid);
			ExecuteQuery();
			if (bcNumberGen.FirstRecord())
			{
				strFormat	=	bcNumberGen.GetFieldValue(""Format"");
				for(i=0;i<strFormat.length;i++)
				{
					if(Clib.isdigit(strFormat.charAt(i)))
						strPrefix	+=	strFormat.charAt(i);
					else
						break;
				}
				strStartNum	=	strPrefix + bcNumberGen.GetFieldValue(""Start String Number"");
				strEndNum	=	strPrefix + bcNumberGen.GetFieldValue(""End Number Str"");
			}
		}
	strCMD		=	""java -classpath "" + strPath + "" "" + strFile + "" "" + strStartNum + "" "" + strEndNum;
	strErrVal	=	Clib.system(strCMD);
	strErrVal 	+=	""	Special Numbers	"" + objid;
	}
	catch(e)
	{
		TheApplication.RaiseErrorText(strErrVal);
	}
   //below 1.1
	//Added finally block
	finally
	{
	bcNumberGen = null;
	boNumberGen = null;
	bcSysPref   = null;
	boSysPref   = null;
	}
	//above 1.1
	return(strErrVal);
//return (CancelOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Generation Service StartGenerateNumbers Method       * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	V1.0   	MBT		 Created      	 12/12/2003       *
* 28/03/2005	V2.0	MBT		 Kadali Srinivas		 28/03/2005		  *
20060706       | 2.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/

function StartGenerateNumbers(bcNumGen, strFixFormatDel, intLengthOfRunningValue, strFixFormat, strWithoutDel, blnBatchCnt, intBatchCnt, intBatchCounter, strAlgorithm, blnChecksumReq, strLevelName)
{
	var boNumberGen;
 	var boNumberScheme;
 	var boNumberEnquiry;
    var bcSpecialNumber; 
    var bcNumberMaster;
	var bcNMBlock;
    var bcNumberGen;
    var boSysPref;
    var bcSysPref;
    
	var bcRuleComb;    
    var intEndNum;
	var intNumber;
	var intNumCount;
	var intRunNumLenCnt	= 0;	
	var intLength 		= 0;
	var intdoubledigit;
	var intsingledigit;
	var	strFinalChkNum;
	
	var intCurrNumber	= """";
	var intQuantity		= 1;
	var strChksumAlgorithm;
	var strSchemeId; 
	var flgSpecCatRec;
	var strRunNumWithZero; //MS:20060130 need to check
	var strRunNum;
	var strNum;
	var strErrVal = """";
	var strSearchExpr = """";
	//var strSearchExpr = """"; //MS:20060130: as part of script change to 78
	
	var psInputs;
	var psOutputs;
	var psfnArgs;
	var bsBlkCount;
	
	var blnIsRecord;
	var blnCdCheck = false;
	var blnrulComCheck = false;
	var blnBlockUpdate	= false;
	var blnVanityCheck	= false;
	var blnIsChekDef = ""N"";

	
	psInputs = TheApplication().NewPropertySet();
	psOutputs = TheApplication().NewPropertySet();
	psfnArgs = TheApplication().NewPropertySet();
	
	boNumberGen 	= TheApplication().GetBusObject(""RMS NM Number Generation"");
	boNumberEnquiry = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNumberGen		= boNumberGen.GetBusComp(""RMS NM Number Generation"");
	bcNumberMaster 	= boNumberEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	bcNMBlock		= boNumberGen.GetBusComp(""RMS NM Number Scheme Format Info"");
	
	boNumberScheme  = TheApplication().GetBusObject(""RMS NM Number Scheme"");
	bcSpecialNumber = boNumberScheme.GetBusComp(""RMS NM Scheme Special Category"");
	bcRuleComb = boNumberScheme.GetBusComp(""RMS NM Special Cat Rule Comb"");

	boSysPref 		= TheApplication().GetBusObject(""System Preferences"");
	bcSysPref		= boSysPref.GetBusComp(""System Preferences"");
	
	with(bcSysPref) {
		ActivateField(""Value"");
		ClearToQuery();
		SetSearchSpec(""Name"",""RMS_BLOCK_UPDATION"");
		SetSearchSpec(""Value"",""Y"");
		ExecuteQuery(ForwardOnly);
		
		if(FirstRecord())
			blnBlockUpdate = true;
	}

	with(bcNumberGen){
		ActivateField(""Start string Number"");
		ActivateField(""Start Number"");
		ActivateField(""End Number Str"");
		ActivateField(""End Number"");
		ActivateField(""Status"");
		ActivateField(""Checksum Required"");
		ExecuteQuery();
	}
	
	with(psInputs){
		SetProperty(""From Status"","""");
		if(bcNumGen.GetFieldValue(""Number Status"")!= """")
			SetProperty(""To Status"",bcNumGen.GetFieldValue(""Number Status""));
		else
			SetProperty(""To Status"",bcNumGen.GetFieldValue(""Post Generation Status""));
		SetProperty(""Object Id"",bcNumGen.GetFieldValue(""Block Id""));
	}	
	
	bsBlkCount = TheApplication().GetService(""RMS RMS Block Calc"");
	
//------------------------------------------------------
// Generating the numbers till the quantity specified.
//------------------------------------------------------
	with(bcNumberMaster) {
		ActivateField(""Gen Log Id"");
		ActivateField(""Type Id"");
		ActivateField(""Subtype Id"");
		ActivateField(""Number"");
		ActivateField(""Number String"");
		ActivateField(""Status"");
		ActivateField(""Block Id"");
		ActivateField(""Special Category Id"");
		ActivateField(""Block Name"");
		ActivateField(""Scheme Id"");	
		ActivateField(""Comments"");
		ActivateField(""HLR Id"");
		ActivateField(""Number Without Delimiter"");
		ActivateField(""CheckSum1"");
		ActivateField(""Current Date"");
		ActivateField(""Status Date"");
		ActivateField(""Special Category Id"");
		ActivateField(""Number String With Checksum"");
		ActivateField(""Number Type Identifier Denorm"");
		ActivateField(""Price"");
		
	}
	intEndNum = ToInteger(bcNumGen.GetFieldValue(""Start String Number"")) + ToInteger(bcNumGen.GetFieldValue(""Quantity Str""));
	
	//Querying special category for the scheme to avoid repeatative query inside CheckVanityMatrix function
	QuerySpecialNumber(bcSpecialNumber, bcNumGen.GetFieldValue(""Scheme Id""));
	
	for (intNumber = ToInteger(bcNumGen.GetFieldValue(""Start String Number"")); intNumber < intEndNum; intNumber++) {
		blnIsChekDef = ""N"";
		blnCdCheck = false;
		blnrulComCheck = false;
//----------------------------------------------------------------------
// Populating the running value of the number by appending zeros to it.
//----------------------------------------------------------------------
		strRunNumWithZero = intNumber;
		strRunNum = ToString(intNumber);
		if(strRunNum.length < intLengthOfRunningValue ){
			for (intRunNumLenCnt = strRunNum.length; intRunNumLenCnt != intLengthOfRunningValue; intRunNumLenCnt++)
				strRunNumWithZero = ""0"" + strRunNumWithZero;
		}

//---------------------------------------------------------								
// Calculating the check sum while generating SIM numbers		
//---------------------------------------------------------
//----------------- Removed to include the new checksum logic as part of V2.0 ---------------------
/*		if(bcNumGen.GetFieldValue(""Type Identifier"") == (TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))){
			intChecksum1 = 0;
			intChecksum2 = 0;
			strNum 		 = strFixFormat + strRunNumWithZero;
			intLength 	 = ToInteger(strNum.length);
			for(intNumCount=0;intNumCount<intLength;intNumCount++)
				intChecksum1 = intChecksum1 + ToInteger(strNum.charAt(intNumCount));
			intChecksum1 = intChecksum1 % 10;
			
			for(intNumCount=0;intNumCount<intLength; intNumCount=intNumCount+2)
				intChecksum2 = intChecksum2 + ToInteger(strNum.charAt(intNumCount));
			
			intChecksum2 = intChecksum2 * 3;
			intChecksum2 = intChecksum2 % 10;
		}	
*/
//------------------------------- V2.0 --------------------------------------------------------					
// Calculating the check sum while generating SIM numbers as part of new CHECKSUM LOGIC		
//----------------------------------------------------------------------------------------------

	
	for(var intArrcnt = 0;intArrcnt < getArrayLength(strAlgorithm);intArrcnt++) {
		if(strAlgorithm[intArrcnt] == TheApplication().InvokeMethod(""LookupValue"", ""RMS_CHKSUM_ALGORITHM"", ""LUHN"")) {

			var intChecksum1 = 0;
			var intCount	 = 1;
			var intsingledigit = 0;
			var intdoubledigit = 0;
			var strNum 	= strFixFormat + ToString(strRunNumWithZero);		
			var strFinalChkNum = """";	
			intLength  = ToInteger(strNum.length)-1;			

//			blnChecksumReq = bcNumberGen.GetFieldValue(""Checksum Required"");
			blnIsChekDef = ""Y"";
			if(blnChecksumReq == ""Y""){
				LuhnAlgorithm(strNum,intLength,intCount,intChecksum1,intdoubledigit,intsingledigit,strFinalChkNum) 
			}
			
		}
	}
//RK:21-04-2006
			var strNum 	= strFixFormat + ToString(strRunNumWithZero);
			psfnArgs.SetProperty(""blnCdCheck"",blnCdCheck);
			psfnArgs.SetProperty(""blnrulComCheck"",blnrulComCheck);
//RK
		with(bcNumberMaster){
			
			NewRecord(1);
			SetFieldValue(""Gen Log Id"",bcNumGen.GetFieldValue(""Id""));		
			SetFieldValue(""Type Id"",bcNumGen.GetFieldValue(""Type Id""));
			SetFieldValue(""Number Type Identifier Denorm"",bcNumGen.GetFieldValue(""Type Identifier""));
//RK:20-04-2006
//			ChkVanityMatrix(bcNumberMaster,bcNumGen,strRunNumWithZero,blnCdCheck,blnrulComCheck,bcSpecialNumber,bcRuleComb);
//			ChkVanityMatrix(bcNumberMaster,bcNumGen,strNum,blnCdCheck,blnrulComCheck,bcSpecialNumber,bcRuleComb);
			blnVanityCheck = ChkVanityMatrix(bcNumberMaster,bcNumGen,strNum,psfnArgs,bcSpecialNumber,bcRuleComb);
			blnCdCheck = (psfnArgs.GetProperty(""blnCdCheck"") == ""true"")?true:false;
			blnrulComCheck = (psfnArgs.GetProperty(""blnrulComCheck"") == ""true"")?true:false;
//RK
			if(blnCdCheck == true && blnrulComCheck == true) {
				SetFieldValue(""Special Category Id"",bcSpecialNumber.GetFieldValue(""Id""));	
				SetFieldValue(""Price"",bcSpecialNumber.GetFieldValue(""Price""));				
				
			}
			else if(blnCdCheck == true && blnVanityCheck == true && blnrulComCheck == false ) {
				//if(bcSpecialNumber.LastRecord()){ 
					if(bcSpecialNumber.GetFieldValue(""Default Category Id"")!="""") {
						SetFieldValue(""Special Category Id"",bcSpecialNumber.GetFieldValue(""Default Category Id""));	
						SetFieldValue(""Price"",bcSpecialNumber.GetFieldValue(""Price""));
					}
				//}
			}
			//------------------------------- V2.0 --------------------------------------------------------		
		    /*flgSpecCatRec = bcSpecialNumber.FirstRecord();
			while (flgSpecCatRec) {
		    if (IsSpecialNumber(bcSpecialNumber.GetFieldValue(""Mask""),ToString(strRunNumWithZero),bcSpecialNumber.GetFieldValue(""Sequence Flag""))) {
				bcNumberMaster.SetFieldValue(""Special Category Id"",bcSpecialNumber.GetFieldValue(""Id""));
				//var a = bcSpecialNumber.GetFieldValue(""Id"");
				flgSpecCatRec = false; //exit-while loop
			}
			else
				flgSpecCatRec = bcSpecialNumber.NextRecord();	
			}*/
			
			if(blnBatchCnt == true){
				intBatchNum = intBatchCnt + strRunNumWithZero ;
				SetFieldValue(""Number"",ToInteger(intBatchNum));
			}	
			else
				SetFieldValue(""Number"",ToInteger(intNumber));
			
			if(bcNumGen.GetFieldValue(""Alloc To"") == """"){
				if(bcNumGen.GetFieldValue(""Number Status"") != """"){
					SetFieldValue(""Status"",bcNumGen.GetFieldValue(""Number Status""));
				}
				else
					SetFieldValue(""Status"",bcNumGen.GetFieldValue(""Post Generation Status""));					
			}
			else
				SetFieldValue(""Status"", TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));
				
			SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
			SetFieldValue(""Block Id"",bcNumGen.GetFieldValue(""Block Id""));
			SetFieldValue(""Scheme Id"",bcNumGen.GetFieldValue(""Scheme Id""));
			if(bcNumGen.GetFieldValue(""HLR Id"") != """")
				SetFieldValue(""HLR Id"",bcNumGen.GetFieldValue(""HLR Id""));
			
			if(bcNumGen.GetFieldValue(""Subtype Id"") != """") 
				SetFieldValue(""Subtype Id"",bcNumGen.GetFieldValue(""Subtype Id""));				

//----------------------------------------------------------------------------------
// Setting the number with the fixed value and running value with the delimeters.
// If number type is 'SIM' then appending checksum numbers also to it.
//----------------------------------------------------------------------------------

				if(blnChecksumReq == ""Y"" && blnIsChekDef ==""Y""){
					SetFieldValue(""CheckSum1"",intChecksum1);
					SetFieldValue(""Number String With Checksum"", strWithoutDel + strRunNumWithZero + intChecksum1);	
				}
				else {
					SetFieldValue(""Number String With Checksum"", strWithoutDel + strRunNumWithZero);
				}


			if(bcNumGen.GetFieldValue(""Type Identifier"") == (TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))){
				SetFieldValue(""Number String"",strFixFormatDel + strRunNumWithZero);
				strChksumAlgorithm = TheApplication().InvokeMethod(""LookupValue"", ""RMS_CHKSUM_ALGORITHM"", ""LUHN"");
				
				SetFieldValue(""Number Without Delimiter"",strWithoutDel + strRunNumWithZero);
				
			}	
			else{
				SetFieldValue(""Number String"",strFixFormatDel + strRunNumWithZero);
				SetFieldValue(""Number Without Delimiter"",strWithoutDel + strRunNumWithZero);
//				SetFieldValue(""Number String With Checksum"", strWithoutDel + strRunNumWithZero);
			}	
			WriteRecord();
		}

//-------------------------------------
// Updating the count of Number block
//-------------------------------------				
		if(blnBlockUpdate == true) //due to performance impact
			bsBlkCount.InvokeMethod(""UpdateNumberBlock"",psInputs,psOutputs);
		
//----------------------------------------------------------------
// Setting up the end number and the quantity currently generated
//----------------------------------------------------------------		
		bcNumGen.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));
		bcNumGen.SetFieldValue(""Quantity Str"",intQuantity);
		bcNumGen.SetFieldValue(""End Number Str"",strRunNumWithZero);
		bcNumGen.SetFieldValue(""End Number"",intNumber);
		bcNumGen.SetFieldValue(""SIM Order Raised"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""NO""));
		bcNumGen.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
		
		intQuantity	= intQuantity + 1;
		bcNumGen.WriteRecord();	
	}
	
	bcNumGen.SetFieldValue(""Status"",(TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""GENERATED"")));
	bcNumGen.WriteRecord();

	with(bcNMBlock){
		ActivateField(""Next Start Number"");
		ClearToQuery();
		SetSearchSpec(""Id"",bcNumGen.GetFieldValue(""Block Id""));
		ExecuteQuery();
		FirstRecord();
	}
	
//------------------------------------------------------------------------------
//Calculating the Next Starting Number for the selected Scheme and Number Block	
//------------------------------------------------------------------------------
	if(ToInteger(bcNMBlock.GetFieldValue(""Next Start Number"")) == ToInteger(bcNumGen.GetFieldValue(""Start String Number""))){
		
		strSearchExpr = ""[Status] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""GENERATED"")+
						""' AND [Scheme Id] = '"" + bcNumGen.GetFieldValue(""Scheme Id"") +
						""' AND [Block Id] = '"" + bcNumGen.GetFieldValue(""Block Id"") + ""'"";
						
								
		with(bcNumberGen){
			ClearToQuery();
			SetSortSpec(""Start Number Numeric(ASCENDING)"");
			SetSearchExpr(strSearchExpr);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}
	
		while(blnIsRecord){
			intCurrNumber 	= bcNumberGen.GetFieldValue(""End Number"");
			blnIsRecord		= bcNumberGen.NextRecord();
			if(blnIsRecord){
				
				if(ToInteger(intCurrNumber)+1 != ToInteger(bcNumberGen.GetFieldValue(""Start Number""))){
					strRunNumWithZero = ToInteger(intCurrNumber)+1;
					break;
				}
				else
					continue;		
			}
			else
				strRunNumWithZero = ToInteger(intCurrNumber)+1;
		}
	
/*------------------------------   V2.0  -------------------------------
		if(blnBatchCnt == true){
			
			intBatchLength = ToString(intBatchCounter).length;
			
			while(intBatchLength > 0){
				intMaxBatchCounter = ToString(intMaxBatchCounter) + 9;
				intBatchLength = ToInteger(intBatchLength) - 1;
			}	
			
			if(ToInteger(intMaxBatchCounter) >= ToInteger(intBatchCounter))
				strRunNumWithZero = 0;
		}			 
/*-----------------------------------------------------------------------*/				
		if(ToString(strRunNumWithZero).length < intLengthOfRunningValue){
			for(intRunNumLenCnt = ToString(strRunNumWithZero).length; intRunNumLenCnt != intLengthOfRunningValue;intRunNumLenCnt++)
				strRunNumWithZero = ""0"" + strRunNumWithZero;
		}
		bcNMBlock.SetFieldValue(""Next Start Number"",strRunNumWithZero);
		bcNMBlock.WriteRecord();
	}	
		
	
    bcNumberGen		= null;
    bcNumberMaster  = null;
    bcNMBlock		= null;
    
    boNumberScheme  = null;
    boNumberGen		= null;
    bcRuleComb      = null;
    boSysPref		= null;
    bcSysPref		= null;
    
    psInputs		= null;
    psOutputs		= null;
    bsBlkCount		= null;
//2.1 below
	bcSpecialNumber = null;
	boNumberEnquiry = null;
	psfnArgs = null; 
//2.1 above
//--------------------------------------------------
// Display the successfull generation of numbers.
//--------------------------------------------------    
    strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN005"",bcNumGen.GetFieldValue(""Quantity Str""));
	return(strErrVal);
	
}
"/**************************************************************************************
* Name          : RMS NM Number Generation ValidateGeneration Function	         	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      05/12/2003       *
**************************************************************************************/

function ValidateGeneration(Inputs,Outputs){
	
	var strSchId;
	var strBlkId;
	var strStNum;
	var strBlkStNo;
	var strEndNum;
	var strErrVal = """";

	var intQty;
	var intStNum;
	var intEndNum;
	var intObjectId;
	var intCount;
	var intBlkStrNum;
	var intBlkEndNum;


	strSchId    = Inputs.GetProperty(""Scheme Id"");
	strBlkId    = Inputs.GetProperty(""Block Id"");
		
	intQty    	= ToNumber(Inputs.GetProperty(""Quantity Str""));
	intStNum  	= ToNumber(Inputs.GetProperty(""Start String Number""));
	strStNum	= Inputs.GetProperty(""Start String Number"");	
	strBlkStNo	= Inputs.GetProperty(""Block Starting String Number"");
	intObjectId	= Inputs.GetProperty(""Object Id"");
	intBlkStrNum = Inputs.GetProperty(""Block Start Num"");
	intBlkEndNum = Inputs.GetProperty(""Block End Num"");

	
//-------------------------------------------------------------------------
// If quantity is not specified then assume the quantity requested is '1'
//-------------------------------------------------------------------------
	if(intQty == """" || intQty == 0)
		intQty = 1;
		
//-----------------------------------------------------------
// Check if numeric value has been entered for start number.
//-----------------------------------------------------------	
	for(intCount=0;intCount<(ToString(strStNum).length);intCount++){
		if(!(Clib.isdigit(strStNum.charAt(intCount))))
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN009"");
	}		
		
	if(strErrVal == """"){
		intEndNum	= intQty + intStNum - 1;
		strEndNum	= ToString(intEndNum);
		
//-------------------------------------------------------------------------------------------
// Calling the function which calculates the end number and check the concurrency of numbers.	
//-------------------------------------------------------------------------------------------
		strErrVal = PopulateEndNum(intObjectId,strSchId,strBlkId,intQty,intStNum,strStNum,strBlkStNo,intEndNum,strEndNum,intBlkStrNum,intBlkEndNum);
	
		if(strErrVal == """"){

//--------------------------------------
// Setting the end number and quantity	
//--------------------------------------
			Outputs.SetProperty(""Start String Number"",strStNum);
			Outputs.SetProperty(""End Number Str"",strEndNum);
			Outputs.SetProperty(""Quantity Str"",intQty);
		}
	}	
	return(strErrVal);

}
"/**************************************************************************************
* Name          : RMS NM Number Generation Import MSISDN Service CheckNumber Method  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation Import MSISDN Code File	    		      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
* 22/11/2003 	1.0     MBT		 Created      28/11/2003       *
* 23/06/2006 	1.1     ARUNJ	 SiebelES#12 Rearranged code on 'Scheme Id'*
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function CheckNumber(strFileName,intSchemeId,strSchemeName,&Inputs,&Outputs)
{
		var boNumGen;
		var bcNMBlock;
		var bcNMMstr;
		var bcNumGen;
		var cmdArray 		= new Array();
		var nmblockArray 	= new Array();
		var numberArray 	= new Array();
		var finalArray 		= new Array();;
		var strClass;
		var strType;
		var strNumber = """";
		var strHLRId;
		var strTemp_Line ="""";
		var strWithoutDelimiter;
		var strWithDelimiter;
		var strFixedNum;
		var strWithoutRunning;
		var strBlockId;
		var strTypeId;
		var strSubtypeId;
		var strNumberString;
		var strRunnNumber = """";
		var strRunnNumWithDeli;
		var strErrVal = """";
		
		var blnIsRecord;
		var blnImport = true;
		
		var intBlockCount = 0;
		var intFileNumCount = 0;
		var intTempCount;
		var intFinalCount = 0;
		var intCount;
		var intLineCnt = 1;
		
		var currPrice;
		
		var psInputs;
		var psOutputs;
		var bsBlkCount;
		var psProperty;
		var psFileContent;
		
					
		boNumGen		= TheApplication().GetBusObject(""RMS NM Number Generation"");
		bcNumGen		= boNumGen.GetBusComp(""RMS NM Number Generation"");
		bcNMMstr		= boNumGen.GetBusComp(""RMS NM Number Master Generation NL"");	
		bcNMBlock		= boNumGen.GetBusComp(""RMS NM Number Scheme Format Info"");	
	
		psInputs 	= TheApplication().NewPropertySet();
		psOutputs 	= TheApplication().NewPropertySet();
		psProperty	= TheApplication().NewPropertySet();
		
		for(var i = 0;i < Inputs.GetChildCount();i++) {
			
			if(Inputs.GetChild(i).GetType() == ""FileContent"")
				psFileContent = Inputs.GetChild(0);
		}
		
		with(bcNumGen){
			ActivateField(""Scheme Id"");
			ActivateField(""Type Id"");
			ActivateField(""Block Id"");
			ActivateField(""Quantity Str"");
			ActivateField(""Start String Number"");
			ActivateField(""End Number Str"");
			ActivateField(""Status"");
			ActivateField(""Subtype Id"");
			ActivateField(""Block Name"");
			ActivateField(""Scheme Name"");
			ActivateField(""Start Number"");
			ActivateField(""End Number"");
		}
		
		with(bcNMMstr){
			ActivateField(""Gen Log Id"");
			ActivateField(""Type Id"");
			ActivateField(""Subtype Id"");
			ActivateField(""Number"");
			ActivateField(""Number String"");
			ActivateField(""Status"");
			ActivateField(""Block Id"");
			ActivateField(""Scheme Id"");	
			ActivateField(""Class"");
			ActivateField(""Price"");
			ActivateField(""Special Category Type"");
			ActivateField(""HLR Id"");
			ActivateField(""Number Without Delimiter"");
			ActivateField(""Current Date"");
			ActivateField(""Status Date"");
		}
						
		with(bcNMBlock){
	
			ActivateField(""Start Number"");
			ActivateField(""End Number"");
			ActivateField(""Total Count"");
			ActivateField(""Current Quantity"");
			ActivateField(""Subtype"");
			ActivateField(""Type"");
			ActivateField(""Scheme Id"");
			ActivateField(""Scheme Format With Delimiter"");
			ActivateField(""Scheme Format Without Delimiter"");
			ActivateField(""Scheme Format Without Running Number"");
			ActivateField(""Fixed Number"");
			ActivateField(""Name"");
			ClearToQuery();
			//SetSearchSpec(""Scheme Id"",intSchemeId);
			SetSearchSpec(""Scheme Name"",strSchemeName);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
// below 1.1
		//	intSchemeId			= GetFieldValue(""Scheme Id"");
// above 1.1
			
			if(blnIsRecord){
				strWithoutDelimiter = GetFieldValue(""Scheme Format Without Delimiter"");
				strWithDelimiter	= GetFieldValue(""Scheme Format With Delimiter"");
				strFixedNum			= GetFieldValue(""Fixed Number"");
 				strWithoutRunning	= GetFieldValue(""Scheme Format Without Running Number"");
 				strTypeId			= GetFieldValue(""Type"");
 				strSubtypeId		= GetFieldValue(""Subtype"");
// below 1.1
				intSchemeId			= GetFieldValue(""Scheme Id"");
// above 1.1
 			}
		}

//Creating two dimensional array where no of rows = No of Block records for the selected Scheme	
		if(blnIsRecord){
		
			while(blnIsRecord){
		
				nmblockArray[intBlockCount][0] = bcNMBlock.GetFieldValue(""Start Number"");
				nmblockArray[intBlockCount][1] = bcNMBlock.GetFieldValue(""End Number"");
				nmblockArray[intBlockCount][2] = bcNMBlock.GetFieldValue(""Total Count"");
				nmblockArray[intBlockCount][3] = bcNMBlock.GetFieldValue(""Current Quantity"");
				nmblockArray[intBlockCount][4] = bcNMBlock.GetFieldValue(""Id"");
				nmblockArray[intBlockCount][5] = bcNMBlock.GetFieldValue(""Name"");
			
				blnIsRecord = bcNMBlock.NextRecord();
				intBlockCount = intBlockCount + 1;
			}
		
			//fp = Clib.fopen(strFileName,""r"");
		
			//if ( fp == null ){
			if(psFileContent == null) {
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN011"");
			}
			else
			{
			//Clib.fscanf(fp,""%s"",strTemp_Line);
				//strTemp_Line = Clib.fgets(fp);
				strTemp_Line = psFileContent.GetProperty(intLineCnt++);
				
				if(strTemp_Line.indexOf(""IMPORT MSISDN"") == -1) {
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN026"");
					blnImport = false;
				}
			
				//while(!(Clib.feof(fp)) && blnImport)
				while(strTemp_Line != """" && blnImport)
				{
					//Clib.fscanf(fp,""%s"",strTemp_Line);
					strTemp_Line = psFileContent.GetProperty(intLineCnt++);
					
					if(strTemp_Line == """")
						break;
					cmdArray = strTemp_Line.split("","");
				
					strNumberString	= cmdArray[2];
	        		currPrice 		= cmdArray[3];
	        		strClass 		= (TheApplication().InvokeMethod(""LookupValue"", ""NM_INV_CLASS"", cmdArray[0]));
	        		if(strClass == """"){
	        			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN012"",strNumberString);
	        			break;
	        		}		
		      		if(strErrVal == """"){
		       			strType = (TheApplication().InvokeMethod(""LookupValue"", ""NM_INV_TYPE"", cmdArray[1]));
	        			if(strType == """"){
	        				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN013"",strNumberString);
	        				break;
	        			}	
		        		if(strErrVal == """"){    	
			        		if(ToString(cmdArray[4]).length > 2){
			        			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN014"");
			        			break;
			        		}	
			        		if(strErrVal == """"){	
			        			Clib.sprintf(strHLRId,""%02s"",cmdArray[4]);
			        	    	if (TheApplication().InvokeMethod(""LookupValue"", ""NM_HLR_ID"", strHLRId) == """"){
			        	    		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN024"",strNumberString);
			        				break;
			        	    	}
			        			strNumber = """";

	//Removing the delimiters from the number and used it for further validation

				        		for(var intCount=0;intCount<ToString(strNumberString).length;intCount++){
				        			if((Clib.isdigit(strNumberString.charAt(intCount))))
			        				strNumber = strNumber + strNumberString.charAt(intCount);
				        		}		

	//Setting the number as property and check the number duplication in file.

					        	if(psProperty.PropertyExists(strNumber)){
									strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN015"",strNumberString);
									break;
								}	
				        		else
				        			psProperty.SetProperty(strNumber,"""");	
				        		if(strErrVal == """"){
				        	

	//Checking the length  of the number, should be same as the scheme format length  

				        			if(strWithoutDelimiter.length != strNumber.length){
				        				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN016"",strNumberString);
				        				break;
				        			}
				        			if(strErrVal == """"){	

	//Checking for the fixed number, should be same as fixed number of scheme format  

					        			if(ToString(strNumber.substring(0,strFixedNum.length)) != strFixedNum){
					        				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN017"",strNumberString);
					        				break;
					        			}	
				    	    			if(strErrVal == """"){
				        		

	//Substring the running part of the number	

											strRunnNumber = strNumber.substring(strFixedNum.length,strNumber.length);
					
											for(intCount=0; intCount<intBlockCount ; intCount++){
											
												if((ToInteger(strRunnNumber) >= nmblockArray[intCount][0]) && (ToInteger(strRunnNumber)<= nmblockArray[intCount][1]) ){
													if(ToInteger(nmblockArray[intCount][3]) < ToInteger(nmblockArray[intCount][2])){
														
														strRunnNumWithDeli = strWithoutRunning + strRunnNumber;

							//Checking for the duplication of number in the database

														with(bcNMMstr){
															ActivateField(""Id"");
															SetViewMode(AllView);
															ClearToQuery();
															SetSearchSpec(""Number String"",strRunnNumWithDeli);
															ExecuteQuery();
														}	
														if(bcNMMstr.FirstRecord()){
															strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN018"",strNumberString);
															break;
														}	
														numberArray[intFileNumCount][0] = nmblockArray[intCount][4] ;//storing the block id
														numberArray[intFileNumCount][1] = intSchemeId;//storing the scheme id
														numberArray[intFileNumCount][2] = strRunnNumber; //storing the running number
														numberArray[intFileNumCount][3] = ToInteger(strRunnNumber);//storing the integer value of running number
														numberArray[intFileNumCount][4] = strRunnNumWithDeli;//stoing the number with delimiter
														numberArray[intFileNumCount][5] = strClass;//storing class
														numberArray[intFileNumCount][6] = strType;//storing special category type
														numberArray[intFileNumCount][7] = currPrice;//storing price
														numberArray[intFileNumCount][8] = strHLRId;//storing HLR Id
														numberArray[intFileNumCount][9] = nmblockArray[intCount][5];//storing Block Name
														numberArray[intFileNumCount][10]= strNumber;
													
														intFileNumCount = intFileNumCount + 1;
														nmblockArray[intCount][3] = ToInteger(nmblockArray[intCount][3]) + 1;
														//strTemp_Line = """";		
													//Clib.fscanf(fp,""%s"",strTemp_Line);
														break;
													
													}
													else{
														strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN019"",nmblockArray[intCount][5]);
														break;
													}	
												}
												else{
													strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN025"",strNumberString);
													break;
												}
											}
										
											if(strErrVal != """")
												break;
										
										}	
									}	
								}	
							}	
						}	
					}
				}
			

//Calling the sort function which sort the array on 'Block Name'

				if(strErrVal == """"){
					if(getArrayLength(numberArray) == 0)
						strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN023"");
				}		
		
				if(strErrVal == """"){
					SortArray(numberArray,0,intFileNumCount);
					strBlockId = numberArray[0][0];
				 				
					for(intTempCount=0;intTempCount < intFileNumCount;intTempCount++){
								 
						finalArray[intFinalCount][0] =  numberArray[intTempCount][0];
					 	finalArray[intFinalCount][1] =  numberArray[intTempCount][1];
					 	finalArray[intFinalCount][2] =  numberArray[intTempCount][2];
					 	finalArray[intFinalCount][3] =  numberArray[intTempCount][3];
					 	finalArray[intFinalCount][4] =  numberArray[intTempCount][4];
					 	finalArray[intFinalCount][5] =  numberArray[intTempCount][5];
					 	finalArray[intFinalCount][6] =  numberArray[intTempCount][6];
					 	finalArray[intFinalCount][7] =  numberArray[intTempCount][7];
					 	finalArray[intFinalCount][8] =  numberArray[intTempCount][8];
					 	finalArray[intFinalCount][9] =  numberArray[intTempCount][9];
					 	finalArray[intFinalCount][10] =  numberArray[intTempCount][10];
					 				
					 	if(numberArray[intTempCount+1][0] != strBlockId){

	//sorting the array on running number

					 		SortArray(finalArray,3,(intFinalCount+1));

	//Creating record in Number Generation Screen, Table  'CX_NUM_GEN_LOG'

					 		with(bcNumGen){
					 	
					 			NewRecord(1);
					 			SetFieldValue(""Scheme Id"",intSchemeId);
					 			SetFieldValue(""Scheme Name"",strSchemeName);
					 			SetFieldValue(""Type Id"",strTypeId);
					 			SetFieldValue(""Subtype Id"",strSubtypeId);
					 			SetFieldValue(""Block Id"",strBlockId);
					 			var temp = ToString(finalArray[intFinalCount][9]);
					 			SetFieldValue(""Block Name"",temp);//finalArray[intFinalCount][9]);
					 			SetFieldValue(""Start String Number"",finalArray[0][2]);
					 			SetFieldValue(""Start Number"",finalArray[0][3]);
					 			SetFieldValue(""Quantity Str"",intFinalCount + 1);
					 			SetFieldValue(""End Number Str"",finalArray[intFinalCount][2]);
					 			SetFieldValue(""End Number"",finalArray[intFinalCount][3]);
					 			SetFieldValue(""Status"",(TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""GENERATED"")));
					 			WriteRecord();				 	
					 		}

	//Creating record in Number Master table 'CX_NUM_MSTR'

					 		for(intCount=0; intCount<=intFinalCount;intCount++){
					 	
						 		with(bcNMMstr){
						 	
						 			NewRecord(1);
						 			SetFieldValue(""Gen Log Id"",bcNumGen.GetFieldValue(""Id""));
						 			SetFieldValue(""Scheme Id"",intSchemeId);
						 			SetFieldValue(""Block Id"",finalArray[intCount][0]);
						 			SetFieldValue(""Type Id"",strTypeId);
						 			SetFieldValue(""Subtype Id"",strSubtypeId);
						 			SetFieldValue(""Number"",finalArray[intCount][3]);
						 			SetFieldValue(""Number String"",finalArray[intCount][4]);
						 			SetFieldValue(""Status"",(TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE"")));
						 			SetFieldValue(""Class"",finalArray[intCount][5]);
						 			SetFieldValue(""Special Category Type"",finalArray[intCount][6]);	 	
						 			SetFieldValue(""Price"",finalArray[intCount][7]);	 	
						 			SetFieldValue(""HLR Id"",finalArray[intCount][8]);
						 			SetFieldValue(""Number Without Delimiter"",finalArray[intCount][10]);	 
						 			SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
						 			WriteRecord();	
						 		}

	//Updating the Number Block count

								with(psInputs){
									SetProperty(""From Status"","""");
									SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE""));
									SetProperty(""Object Id"",finalArray[intCount][0]);
								}	
		
								bsBlkCount = TheApplication().GetService(""RMS RMS Block Calc"");
								bsBlkCount.InvokeMethod(""UpdateNumberBlock"",psInputs,psOutputs);
					 	
					 		}
					 		finalArray = null;
					 		strBlockId = numberArray[intTempCount+1][0];
					 		intFinalCount = 0;
					 		finalArray = new Array();
					 		continue;
					 	}
					 	intFinalCount = intFinalCount + 1;
				 	}
				 	//strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN020"");
				 	//Clib.fclose(fp);
        		 	//fp = null;
				}
			}
        }
        else
        	strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN027"");
		        
        cmdArray 	= null;
		nmblockArray= null;
		numberArray = null;
		
		finalArray 	= null;	
		psInputs	= null;
		psOutputs	= null;	
		psProperty	= null;
		
		bcNMBlock	= null;
		bcNumGen	= null;
		bcNMMstr	= null;
		boNumGen	= null;
//1.2 below	
		bsBlkCount = null;
//1.2 above
		//if(fp != null) Clib.fclose(fp);
		return strErrVal;
}
"/**************************************************************************************
* Name          : RMS NM Number Generation RefreshingBc function	         		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   	MBT		 Created      12/12/2003       *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed 
                                 this function actually needs to be defunc
**************************************************************************************/

function RefreshingBc(){

	var psInputs;
	var psOutputs;
	var bsSIMNMRef;
	
	psInputs = TheApplication().NewPropertySet();
	psOutputs = TheApplication().NewPropertySet();
	
	bsSIMNMRef = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
										
	psInputs.SetProperty(""Business Component Name"",""RMS NM Number Generation"");
	psInputs.SetProperty(""Business Object Name"",""RMS NM Number Generation"");
	bsSIMNMRef.InvokeMethod(""Refresh Business Component"",psInputs,psOutputs);
	
	psInputs 	= null;
	psOutputs 	= null;
//1.1 below
	bsSIMNMRef = null;
//1.1 above
}
"/**************************************************************************************
* Name          : RMS NM Number Generation Import MSISDN Service PreInvoke Method    * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation Import MSISDN Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/11/2003 	1.0   		MBT						   	Created      28/11/2003       *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{

	var strFileName;
	var strSchemeName;
	var strSchemeId;
	var strErrVal = """";
	var intReturn = ContinueOperation;

	try{
	
		if(MethodName == ""Import""){
			intReturn = CancelOperation;
			strFileName 	= Inputs.GetProperty(""File Name"");
			strSchemeName 	= Inputs.GetProperty(""Scheme Name"");
			strSchemeId		= Inputs.GetProperty(""Scheme Id"");
			strErrVal = CheckNumber(strFileName,strSchemeId,strSchemeName,Inputs,Outputs);
			RefreshingBc();
			if(strErrVal != """")
				//TheApplication().RaiseErrorText(strErrVal);
				Outputs.SetProperty(""ErrMessage"",strErrVal);
		}
	}catch(e){
		throw e;
	}		


	return (intReturn);
}
"/**************************************************************************************
* Name          : RMS NM Number Generation Import MSISDN Service SortArray Method    * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation Import MSISDN Code File	    		      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/11/2003 	1.0   		MBT						   	Created      28/11/2003       *
**************************************************************************************/
function SortArray(&numberArray,intColumn,intCount){

	var intCurrCount;
	var intNextCount;
	var tempArray = new Array();

	for(intCurrCount = 0;intCurrCount<intCount-1 ; intCurrCount++){
		for(intNextCount = intCurrCount+1;intNextCount<intCount;intNextCount++){
		
		
			if(numberArray[intCurrCount][intColumn] > numberArray[intNextCount][intColumn]){
			
				tempArray[0][0] = numberArray[intNextCount][0];
				tempArray[0][1] = numberArray[intNextCount][1];
				tempArray[0][2] = numberArray[intNextCount][2];
				tempArray[0][3] = numberArray[intNextCount][3];
				tempArray[0][4] = numberArray[intNextCount][4];
				tempArray[0][5] = numberArray[intNextCount][5];
				tempArray[0][6] = numberArray[intNextCount][6];
				tempArray[0][7] = numberArray[intNextCount][7];
				tempArray[0][8] = numberArray[intNextCount][8];
				tempArray[0][9] = numberArray[intNextCount][9];
				tempArray[0][10] = numberArray[intNextCount][10];
				
				numberArray[intNextCount][0] = numberArray[intCurrCount][0];
				numberArray[intNextCount][1] = numberArray[intCurrCount][1];
				numberArray[intNextCount][2] = numberArray[intCurrCount][2];
				numberArray[intNextCount][3] = numberArray[intCurrCount][3];
				numberArray[intNextCount][4] = numberArray[intCurrCount][4];
				numberArray[intNextCount][5] = numberArray[intCurrCount][5];
				numberArray[intNextCount][6] = numberArray[intCurrCount][6];
				numberArray[intNextCount][7] = numberArray[intCurrCount][7];
				numberArray[intNextCount][8] = numberArray[intCurrCount][8];
				numberArray[intNextCount][9] = numberArray[intCurrCount][9];
				numberArray[intNextCount][10] = numberArray[intCurrCount][10];
				
				numberArray[intCurrCount][0] = tempArray[0][0];
				numberArray[intCurrCount][1] = tempArray[0][1];
				numberArray[intCurrCount][2] = tempArray[0][2];
				numberArray[intCurrCount][3] = tempArray[0][3];
				numberArray[intCurrCount][4] = tempArray[0][4];
				numberArray[intCurrCount][5] = tempArray[0][5];
				numberArray[intCurrCount][6] = tempArray[0][6];
				numberArray[intCurrCount][7] = tempArray[0][7];
				numberArray[intCurrCount][8] = tempArray[0][8];
				numberArray[intCurrCount][9] = tempArray[0][9];
				numberArray[intCurrCount][10] = tempArray[0][10];
				
				
			
			}
		}	
	}
	
	
	tempArray = null;
}
"/**************************************************************************************
* Name          : NM Number Generation ChkVanityMatrix function		         		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Generation Code File	    		                      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 05/04/2005 	1.0   		MBT						   	Created      05/04/2005       *
**************************************************************************************/
function BuilLeftOutDigitArray(Mask,&intStartPoint,&strLeftOutDigitArray,strRunNumWithZero)
{
	var intLeftOutArrayCnt = 0;
	var intArrayCnt = 0;
	for(var intRunNumCnt = 0;intRunNumCnt<ToString(strRunNumWithZero).length;) {
		if(intRunNumCnt == intStartPoint[intArrayCnt]) {
			if(intRunNumCnt != 0)
				intLeftOutArrayCnt++;
			intRunNumCnt = intStartPoint[intArrayCnt] + ToInteger(Mask.length);
			intArrayCnt++;
		}

		if(ToString(strRunNumWithZero).charAt(intRunNumCnt) != """" && ToString(strRunNumWithZero).charAt(intRunNumCnt) != null) {
			if(strLeftOutDigitArray[intLeftOutArrayCnt] != null && strLeftOutDigitArray[intLeftOutArrayCnt] != """") 
				strLeftOutDigitArray[intLeftOutArrayCnt] = strLeftOutDigitArray[intLeftOutArrayCnt] + ToString(strRunNumWithZero).charAt(intRunNumCnt);
			else
				strLeftOutDigitArray[intLeftOutArrayCnt] = ToString(strRunNumWithZero).charAt(intRunNumCnt);																				
		}					
			intRunNumCnt++;
	}
}
"/**************************************************************************************
* Name          : NM Number Generation CancelGeneratedNumbers function         	 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Generation Code File	    		                      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	 1.0   	MBT						   	Created      12/12/2003       *
* 23/06/2006 	 1.1   	ARUNJ	 SiebelES#12 Incorporated condition after ExecuteQuery *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function CancelGeneratedNumbers(intObjectId)
{
	var boNumGen;
    var bcNumberMaster;
	var bcNumGen;
	var bcNMBlock;
	var boSysPref;
    var bcSysPref;
	var strStsAfterGen;
   	var	strTypeId;
   	var strStatus;
   	var strBlockId;
   	var strSchId;
   	var strErrVal = """";
   	var strStartNum;
   	var intBatchCounter;
   	var blnIsRecord;
   	var psInputs;
	var psOutputs;
	var bsBlkCount;
	var blnBlockUpdate	= false;

	boNumGen		= TheApplication().GetBusObject(""RMS NM Number Generation"");
	
	bcNumGen		= boNumGen.GetBusComp(""RMS NM Number Generation"");
	bcNumberMaster 	= boNumGen.GetBusComp(""RMS NM Number Master Generation"");
	bcNMBlock		= boNumGen.GetBusComp(""RMS NM Number Scheme Format Info"");
	boSysPref 		= TheApplication().GetBusObject(""System Preferences"");
	bcSysPref		= boSysPref.GetBusComp(""System Preferences"");
		
	psInputs 		= TheApplication().NewPropertySet();
	psOutputs 		= TheApplication().NewPropertySet();


	with(bcSysPref) 
	{
		ActivateField(""Value"");
		ClearToQuery();
		SetSearchSpec(""Name"",""RMS_BLOCK_UPDATION"");
		SetSearchSpec(""Value"",""Y"");
		ExecuteQuery(ForwardOnly);
		
		if(FirstRecord())
			blnBlockUpdate = true;
	}
	
	with(bcNumGen)
	{
		ActivateField(""Scheme Id"");
		ActivateField(""Number Status"");		
		ActivateField(""Type Id"");
		ActivateField(""Block Id"");
		ActivateField(""Block Starting String Number"");
		ActivateField(""Quantity Str"");
		ActivateField(""Start String Number"");
		ActivateField(""End Number Str"");
		ActivateField(""Status"");
		ActivateField(""HLR Id"");
		ActivateField(""Batch Number"");
		ActivateField(""Type Identifier"");
		ActivateField(""Post Generation Status"");
		ActivateField(""Generated Message"");	
		ClearToQuery();
		SetSearchSpec(""Id"",intObjectId);
		ExecuteQuery();
// below 1.1
	//	FirstRecord();
// above 1.1
	}
// below 1.1	
	if (bcNumGen.FirstRecord())	{
// above 1.1
	strTypeId 		= bcNumGen.GetFieldValue(""Type Id"");	
	strStatus 		= bcNumGen.GetFieldValue(""Status"");
	strBlockId		= bcNumGen.GetFieldValue(""Block Id"");
	strSchId 		= bcNumGen.GetFieldValue(""Scheme Id"");
	strStartNum		= bcNumGen.GetFieldValue(""Start String Number"");
	if(bcNumGen.GetFieldValue(""Number Status"")!="""")
		strStsAfterGen  = bcNumGen.GetFieldValue(""Number Status"");		
	else
		strStsAfterGen  = bcNumGen.GetFieldValue(""Post Generation Status"");
	
//---------------------------------------------------------------------------------------------------------------------------------------
// The selected record has been modified by another user since it was retrieved.Please refresh the Applet
//---------------------------------------------------------------------------------------------------------------------------------------		
	
	if(bcNumGen.GetFieldValue(""Status"")==(TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"")) || bcNumGen.GetFieldValue(""Status"")==(TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""))) 
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN004"");
	else{
		bcNumGen.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
		bcNumGen.WriteRecord();

//-------------------------------			
// Getting The Numbers Generated
//-------------------------------			
		with(bcNumberMaster) {
			ActivateField(""Gen Log Id"");
			ActivateField(""Status"");		
			ActivateField(""Is Associated"");		
			ClearToQuery();
			SetSearchSpec(""Gen Log Id"",intObjectId);
			ExecuteQuery();	
			blnIsRecord = FirstRecord();
		}
//-----------------------------------------------------------------------------------------------------
// If the staus of the numbers retrieved is not the same as 'Post Generation Status' as specified for 
// the corresponding number type then cannot cancel the generation. 
//----------------------------------------------------------------------------------------------------- 		
		while (blnIsRecord) {
			if(bcNumberMaster.GetFieldValue(""Status"") != strStsAfterGen || bcNumberMaster.GetFieldValue(""Is Associated"") == ""Y"") {
				bcNumGen.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""GENERATED""));
				bcNumGen.WriteRecord();
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN006"");
				break;
			}
			blnIsRecord = bcNumberMaster.NextRecord();	
		}
		
		if(strErrVal == """"){
			psInputs.SetProperty(""From Status"",strStsAfterGen);
			psInputs.SetProperty(""To Status"","""");
			psInputs.SetProperty(""Object Id"",strBlockId);
			bsBlkCount = TheApplication().GetService(""RMS RMS Block Calc"");
				
			while (bcNumberMaster.FirstRecord()) {
				if(blnBlockUpdate == true) //due to performance impact
					bsBlkCount.InvokeMethod(""UpdateNumberBlock"",psInputs,psOutputs);
				bcNumberMaster.DeleteRecord();
			}
				
			bcNumGen.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));
			with(bcNMBlock){
				ActivateField(""Next Start Number"");
				ClearToQuery();
				SetSearchSpec(""Id"",strBlockId);
				ExecuteQuery();
// below 1.1
				//	FirstRecord();
// above 1.1
				}
// below 1.1
				if (bcNMBlock.FirstRecord()){
// above 1.1					
			if((ToInteger(strStartNum)) < (ToInteger(bcNMBlock.GetFieldValue(""Next Start Number""))) ){
				bcNMBlock.SetFieldValue(""Next Start Number"",strStartNum);
				bcNMBlock.WriteRecord();
			}	

//------------------------------------------
// Display a successfull deletion message.
//------------------------------------------				
			bcNumGen.SetFieldValue(""Generated Message"", """");	
			bcNumGen.WriteRecord();
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN007"");	
// below 1.1
				}
// above 1.1
		}
	}
// below 1.1
	}
// above 1.1
	bcNumberMaster	= null;
	bcNumGen		= null;
	bcNMBlock		= null;
	boNumGen		= null;
	
    bcSysPref		= null;
    boSysPref		= null;
    
	psInputs		= null;
	psOutputs		= null;
//1.2 below
	bsBlkCount      = null;
//1.2 above
	return(strErrVal);
}
"/**************************************************************************************
* Name          : NM Number Generation ChkVanityMatrix function		         		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Generation Code File	    		                      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 19/04/2005 	1.0   		MBT						   	Created      19/04/2005       *
* 19/04/2005 	1.0   		MBT						   	Gautam      19/04/2005       *
**************************************************************************************/

function CheckCode(Mask,strRunNumWithZero,&strRunnNumMskChk,Seq,&intNoOfOccurence,&intIncrementMskLenght,&blnCdCheck,&intStartPoint,&intArrayCnt) {
//-----------------------------------------------------------------------------
// If the function is called for the first time the set the value to be checked 
//as the start from left of running number til the nmask length.
//-----------------------------------------------------------------------------
	if(intIncrementMskLenght == 0)
		strRunnNumMskChk = ToString(strRunNumWithZero).substring(intIncrementMskLenght,ToString(Mask).length);

//----------------------------------------------------------------------------
// Call the isspecialnumber function to check whether number matches the mask.
//----------------------------------------------------------------------------	
	if(IsSpecialNumber(Mask,strRunnNumMskChk,Seq)) {
//------------------------------------------------------------------------------------------
// Storing the start point of the position from where the number was matched.This is done to
//build the left out array.
//-------------------------------------------------------------------------------------------	
		intStartPoint[intArrayCnt++] = intIncrementMskLenght;
//------------------------------------------------------------------------------------------------------
//If the no of occurence is more than one then again call the check code function after decrementing the 
//no of occurence by one.
//--------------------------------------------------------------------------------------------------------		
		if(intNoOfOccurence>1) {
			intNoOfOccurence--;
			intIncrementMskLenght = ToInteger(intIncrementMskLenght) + ToInteger(ToString(Mask).length);
			var intTolength = ToInteger(intIncrementMskLenght) + (ToInteger(ToString(Mask).length));
			strRunnNumMskChk = ToString(strRunNumWithZero).substring(ToInteger(intIncrementMskLenght),ToInteger(intTolength));	
			if(ToString(strRunnNumMskChk).length >= ToString(Mask).length)
				CheckCode(Mask,strRunNumWithZero,strRunnNumMskChk,Seq,intNoOfOccurence,intIncrementMskLenght,blnCdCheck,intStartPoint,intArrayCnt);
			else {
				blnCdCheck = false
				return(false)
			}
		}
		else {
//-------------------------------------------------------------------------------------------------------
//If then number matches the mask and the no of occurence is one then set the code check to true and exit.
//-------------------------------------------------------------------------------------------------------		
			blnCdCheck = true;
			return(true)
		}
	}
	else {
//------------------------------------------------------------------------------------------------------
//If values does not match the mask then increment the position of the runing value one step to right and 
//again call the check code function.
//------------------------------------------------------------------------------------------------------	
		intIncrementMskLenght++;
		var len = ToInteger(ToString(Mask).length)+ ToInteger(intIncrementMskLenght);
	    strRunnNumMskChk = ToString(strRunNumWithZero).substring(intIncrementMskLenght,len);
		if(ToString(strRunnNumMskChk).length >= ToString(Mask).length) {
			CheckCode(Mask,strRunNumWithZero,strRunnNumMskChk,Seq,intNoOfOccurence,intIncrementMskLenght,blnCdCheck,intStartPoint,intArrayCnt);
		}
		else {
			blnCdCheck = false;
			return(false);
		}
	}
}
"/**************************************************************************************
* Name          : NM Number Generation ChkVanityMatrix function		         		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Generation Code File	    		                      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 05/04/2005 	1.0   		MBT						   	Created      05/04/2005       *
**************************************************************************************/

function ChkVanityMatrix(&bcNumberMaster,&bcNumGen,strRunNumWithZero,&psfnArgs,&bcSpecialNumber,&bcRuleComb){
	
	var blnCdCheck = (psfnArgs.GetProperty(""blnCdCheck"") == ""true"")?true:false;
	var blnrulComCheck = (psfnArgs.GetProperty(""blnrulComCheck"") == ""true"")?true:false;
	var intStartPoint = new Array;
	var intArrayCnt=0;
	var blnSpecCatRec;
	var boNumberScheme;
	var strSchemeId;
	var strRunnNumMskChk;
	var intIncrementMskLenght = 0;
	var strLeftOutDigitArray = new Array; //MS:20060130: need to change the variable name

	strSchemeId 	= bcNumGen.GetFieldValue(""Scheme Id"");
	
	var boVanityruleMarix = TheApplication().GetBusObject(""RMS NM Vanity Rule Definition"");
	var bcRuleDefinition = boVanityruleMarix.GetBusComp(""RMS NM Rule Definitions"");
	
	
//--------------------------------------------------------
// Query Special category to get all the category records.
//--------------------------------------------------------
/**************************************MS 30-06-2006 *******************************************************	
	with(bcSpecialNumber) {
		ActivateField(""Id"");			
		ActivateField(""Scheme Id"");
		ActivateField(""Sequence Flag"");
		ActivateField(""Priority"");
		ActivateField(""Mask"");
		ActivateField(""Reverse Check"");
		ActivateField(""Rule Code Name"");
		ActivateField(""Rule Code Mask"");
		ActivateField(""Rule Code Occurence"");		
		ActivateField(""Rule Code Mask Seq"");
		ActivateField(""Rule Comb Code"");
		ActivateField(""Rule Code Reverse Check"");
		ActivateField(""Rule Code Type"");
		ActivateField(""Price"");
		ActivateField(""Default Category Id"");
		ClearToQuery();
		SetSearchSpec(""Scheme Id"",strSchemeId);
	//	SetSearchSpec(""Expired"",""N"");
	//	SetSearchSpec(""In Use Flag For Gen"",""Y"");
		SetSortSpec(""Priority (ASCENDING)"");
		ExecuteQuery(ForwardBackward);
	}
******************************commented to avoid repeatative queries to table********MS 30-06-2006**********/
	blnSpecCatRec = bcSpecialNumber.FirstRecord();
	while (blnSpecCatRec) {
//--------------------------------------------------------------------
// Initialise the variable for code check and combination chk to false.
//--------------------------------------------------------------------	
		blnCdCheck = false;
		blnrulComCheck = false;
//---------------------------------------------------------------------------------
// If mask is entered for the specail category then check for only the mask and exit.
//----------------------------------------------------------------------------------		
		if(bcSpecialNumber.GetFieldValue(""Mask"") != """" && bcSpecialNumber.GetFieldValue(""Mask"") != null) {
			if(IsSpecialNumber(bcSpecialNumber.GetFieldValue(""Mask""),ToString(strRunNumWithZero),bcSpecialNumber.GetFieldValue(""Sequence Flag""))) {
					blnCdCheck = true;
					blnrulComCheck =true;
					break;
			} 
		 } else {
		 
//-------------------------------------------------
// If mask is not entered then check for Rule code.
//-------------------------------------------------

			var strRuleCodeMask = bcSpecialNumber.GetFieldValue(""Rule Code Mask"");
			var strSchemeCatId	= bcSpecialNumber.GetFieldValue(""Id"");
			var intNoOfOccurence = bcSpecialNumber.GetFieldValue(""Rule Code Occurence"");
			var intArrayCnt = 0;	
//-----------------------------------------------------------------------------------------------
// If rule code is a filler then check for check whether the entire mask matches the filler digit.
//------------------------------------------------------------------------------------------------			

			if(bcSpecialNumber.GetFieldValue(""Rule Code Type"") == TheApplication().InvokeMethod(""LookupValue"", ""RMS_RUL_TYPE"", ""FILLER"")){
				for(var intRunNumLen =0;intRunNumLen<ToInteger(ToString(strRunNumWithZero).length);intRunNumLen++) {
					if(ToString(strRunNumWithZero).charAt(intRunNumLen)!= bcSpecialNumber.GetFieldValue(""Rule Code Mask"")) {
						blnCdCheck = false;
						break;										
					} else
						blnCdCheck = true;
				}
			} else {

//-----------------------------------------------------------------------------------------------
// If rule code is not a filler tyoe then call checkcode function to check whether the running
//number matches the code definition. 
//------------------------------------------------------------------------------------------------			
				intIncrementMskLenght = 0;
				CheckCode(bcSpecialNumber.GetFieldValue(""Rule Code Mask""),strRunNumWithZero,strRunnNumMskChk,bcSpecialNumber.GetFieldValue(""Rule Code Mask Seq""),intNoOfOccurence,intIncrementMskLenght,blnCdCheck,intStartPoint,intArrayCnt);
		
//-------------------------------------------------------------------------
// If code definition matches then build an array with the left out digits.
//-------------------------------------------------------------------------
				if(blnCdCheck)
					BuilLeftOutDigitArray(bcSpecialNumber.GetFieldValue(""Rule Code Mask""),intStartPoint,strLeftOutDigitArray,strRunNumWithZero);

//----------------------------------------------------------------------------------------
// If code definition is not matched and the reverse check is true then reverse the number
//and call the checkcode function.
//----------------------------------------------------------------------------------------
				
				if(bcSpecialNumber.GetFieldValue(""Rule Code Reverse Check"") == ""Y"" && blnCdCheck == false) {
					var strReverRunnNumWithZero = """";
					for(var intRunNumLen = ToInteger(ToString(strRunNumWithZero).length)-1;intRunNumLen>=0;intRunNumLen--)
						strReverRunnNumWithZero = strReverRunnNumWithZero + ToString(strRunNumWithZero).charAt(intRunNumLen);
						//MS:20060130:as part of script change for 78 var intStartPoint= new Array;
						intStartPoint= new Array;
						var intArrayCnt=0;						
						intIncrementMskLenght = 0;
					CheckCode(bcSpecialNumber.GetFieldValue(""Rule Code Mask""),strReverRunnNumWithZero,strRunnNumMskChk,bcSpecialNumber.GetFieldValue(""Rule Code Mask Seq""),intNoOfOccurence,intIncrementMskLenght,blnCdCheck,intStartPoint,intArrayCnt);
					if(blnCdCheck) {
						var strLeftOutDigitArray = new Array;											
						BuilLeftOutDigitArray(bcSpecialNumber.GetFieldValue(""Rule Code Mask""),intStartPoint,strLeftOutDigitArray,strReverRunnNumWithZero);	
					}
				}
			}
	  	 }
			
//--------------------------------------------------------------
// If code definition is matched then check for the combination.
//--------------------------------------------------------------
			if((blnCdCheck) &&(!blnrulComCheck)) {
				with(bcRuleComb) {
					ActivateField(""Rule Comb Id"");
					ActivateField(""Special Cat Id"");
					ActivateField(""Id"");
					ClearToQuery();
					SetSearchSpec(""Special Cat Id"",bcSpecialNumber.GetFieldValue(""Id""));
					ExecuteQuery(ForwardBackward);		
					
					var blnIsComRec = FirstRecord();
					if(!blnIsComRec)
						blnrulComCheck = true;
//------------------------------------------------------------
// Loop through each rule combination and check for the match.
//------------------------------------------------------------
					while(blnIsComRec) {
						with(bcRuleDefinition) {
						
							ActivateField(""Rule Comb Id"");
							ActivateField(""Mask"");
							ActivateField(""No Of Occurences"");
							ActivateField(""Mask Seq"");
							ActivateField(""Reverse Check"");
							ActivateField(""Type"");
							ClearToQuery();
							SetSearchSpec(""Id"",bcRuleComb.GetFieldValue(""Rule Comb Id""));
							ExecuteQuery(ForwardBackward);		
							var blnRulComRec = FirstRecord();
							var intRuleCombNoOfOccurences = GetFieldValue(""No Of Occurences"");
	
							if(FirstRecord()){
//--------------------------------------------------------------------------------------------
//If rule combination is a filler then check whether the entire mask matches the filler digit.
//--------------------------------------------------------------------------------------------
								if(GetFieldValue(""Type"") == TheApplication().InvokeMethod(""LookupValue"", ""RMS_RUL_TYPE"", ""FILLER"")) {
									for(intArrayCnt = 0;intArrayCnt < getArrayLength(strLeftOutDigitArray);intArrayCnt++){
										for(var intRunNumLen =0;intRunNumLen<ToInteger(ToString(strLeftOutDigitArray[intArrayCnt]).length);intRunNumLen++) {
											if(strLeftOutDigitArray[intArrayCnt].charAt(intRunNumLen)!= GetFieldValue(""Mask"")) {
												blnrulComCheck = false;
												break;										
											}else{
												blnrulComCheck = true;
											}
											
										}
									}
								}
//--------------------------------------------------------------------------------------------
//If rule combination is a not a filler then loop through each of the leftout array value and call the
//check code function to check whether it matche the mask.
//--------------------------------------------------------------------------------------------								
								else {
									for(intArrayCnt = 0;intArrayCnt < getArrayLength(strLeftOutDigitArray);intArrayCnt++){
										var intStartPointArrayCnt = 0;
										strRunnNumMskChk = """";
										intIncrementMskLenght = 0
										CheckCode(GetFieldValue(""Mask""),strLeftOutDigitArray[intArrayCnt],strRunnNumMskChk,GetFieldValue(""Mask Seq""),intRuleCombNoOfOccurences,intIncrementMskLenght,blnrulComCheck,intStartPoint,intStartPointArrayCnt);
//---------------------------------------------------------------------------------------------------------------
//If reverse check for the rule comb is true then reverse the value in the array and call the checkcode function.
//---------------------------------------------------------------------------------------------------------------																		
										if(GetFieldValue(""Reverse Check"") == ""Y"" && blnrulComCheck == false)	{
											intIncrementMskLenght = 0;
											strReverRunnNumWithZero = """";
											for(var intRunNumLen = ToInteger(ToString(strLeftOutDigitArray[intArrayCnt]).length)-1;intRunNumLen>=0;intRunNumLen--)
												strReverRunnNumWithZero = strReverRunnNumWithZero + ToString(strLeftOutDigitArray[intArrayCnt]).charAt(intRunNumLen);
											CheckCode(GetFieldValue(""Mask""),strReverRunnNumWithZero,strRunnNumMskChk,GetFieldValue(""Mask Seq""),intRuleCombNoOfOccurences,intIncrementMskLenght,blnrulComCheck,intStartPoint,intStartPointArrayCnt);
										}
										if(blnrulComCheck == true && intRuleCombNoOfOccurences == 1)										
											break;										
									}
								}
							}
						}
						blnIsComRec = NextRecord();
					}
//					bcRuleComb = NextRecord()
				}
			}
			if(blnCdCheck == true && blnrulComCheck == true)
				break;
		blnSpecCatRec = bcSpecialNumber.NextRecord();
	}
	boVanityruleMarix = null;
	bcRuleDefinition = null;
	
	psfnArgs.SetProperty(""blnCdCheck"",blnCdCheck);
	psfnArgs.SetProperty(""blnrulComCheck"",blnrulComCheck);
	return(blnSpecCatRec);
	
}
function ChkVanityMatrix_1(strSchemeId,strRunNumWithZero,&psfnArgs,&bcSpecialNumber,&bcRuleComb)
{
	var blnCdCheck = (psfnArgs.GetProperty(""blnCdCheck"") == ""true"")?true:false;
	var blnrulComCheck = (psfnArgs.GetProperty(""blnrulComCheck"") == ""true"")?true:false;
	var intStartPoint = new Array;
	var intArrayCnt=0;
	var blnSpecCatRec;
	var boNumberScheme;
	var strSchemeId;
	var strRunnNumMskChk;
	var intIncrementMskLenght = 0;
	var strLeftOutDigitArray = new Array; //MS:20060130: need to change the variable name

//	strSchemeId 	= bcNumGen.GetFieldValue(""Scheme Id"");
	
	var boVanityruleMarix = TheApplication().GetBusObject(""RMS NM Vanity Rule Definition"");
	var bcRuleDefinition = boVanityruleMarix.GetBusComp(""RMS NM Rule Definitions"");
	
	
//--------------------------------------------------------
// Query Special category to get all the category records.
//--------------------------------------------------------
	
	with(bcSpecialNumber) {
		ActivateField(""Id"");			
		ActivateField(""Scheme Id"");
		ActivateField(""Sequence Flag"");
		ActivateField(""Priority"");
		ActivateField(""Mask"");
		ActivateField(""Reverse Check"");
		ActivateField(""Rule Code Name"");
		ActivateField(""Rule Code Mask"");
		ActivateField(""Rule Code Occurence"");		
		ActivateField(""Rule Code Mask Seq"");
		ActivateField(""Rule Comb Code"");
		ActivateField(""Rule Code Reverse Check"");
		ActivateField(""Rule Code Type"");
		ActivateField(""Price"");
		ActivateField(""Default Category Id"");
		ActivateField(""Default Category"");
		ClearToQuery();
		SetSearchSpec(""Scheme Id"",strSchemeId);
	//	SetSearchSpec(""Expired"",""N"");
	//	SetSearchSpec(""In Use Flag For Gen"",""Y"");
		SetSortSpec(""Priority (ASCENDING)"");
		ExecuteQuery(ForwardBackward);
	}
	blnSpecCatRec = bcSpecialNumber.FirstRecord();
	while (blnSpecCatRec) {
//--------------------------------------------------------------------
// Initialise the variable for code check and combination chk to false.
//--------------------------------------------------------------------	
		blnCdCheck = false;
		blnrulComCheck = false;
//---------------------------------------------------------------------------------
// If mask is entered for the specail category then check for only the mask and exit.
//----------------------------------------------------------------------------------		
		if(bcSpecialNumber.GetFieldValue(""Mask"") != """" && bcSpecialNumber.GetFieldValue(""Mask"") != null) {
			if(IsSpecialNumber(bcSpecialNumber.GetFieldValue(""Mask""),ToString(strRunNumWithZero),bcSpecialNumber.GetFieldValue(""Sequence Flag""))) {
					blnCdCheck = true;
					blnrulComCheck =true;
					break;
			} 
		 } else {
		 
//-------------------------------------------------
// If mask is not entered then check for Rule code.
//-------------------------------------------------

			var strRuleCodeMask = bcSpecialNumber.GetFieldValue(""Rule Code Mask"");
			var strSchemeCatId	= bcSpecialNumber.GetFieldValue(""Id"");
			var intNoOfOccurence = bcSpecialNumber.GetFieldValue(""Rule Code Occurence"");
			var intArrayCnt = 0;	
//-----------------------------------------------------------------------------------------------
// If rule code is a filler then check for check whether the entire mask matches the filler digit.
//------------------------------------------------------------------------------------------------			

			if(bcSpecialNumber.GetFieldValue(""Rule Code Type"") == TheApplication().InvokeMethod(""LookupValue"", ""RMS_RUL_TYPE"", ""FILLER"")){
				for(var intRunNumLen =0;intRunNumLen<ToInteger(ToString(strRunNumWithZero).length);intRunNumLen++) {
					if(ToString(strRunNumWithZero).charAt(intRunNumLen)!= bcSpecialNumber.GetFieldValue(""Rule Code Mask"")) {
						blnCdCheck = false;
						break;										
					} else
						blnCdCheck = true;
				}
			} else {

//-----------------------------------------------------------------------------------------------
// If rule code is not a filler tyoe then call checkcode function to check whether the running
//number matches the code definition. 
//------------------------------------------------------------------------------------------------			
				intIncrementMskLenght = 0;
				CheckCode(bcSpecialNumber.GetFieldValue(""Rule Code Mask""),strRunNumWithZero,strRunnNumMskChk,bcSpecialNumber.GetFieldValue(""Rule Code Mask Seq""),intNoOfOccurence,intIncrementMskLenght,blnCdCheck,intStartPoint,intArrayCnt);
		
//-------------------------------------------------------------------------
// If code definition matches then build an array with the left out digits.
//-------------------------------------------------------------------------
				if(blnCdCheck)
					BuilLeftOutDigitArray(bcSpecialNumber.GetFieldValue(""Rule Code Mask""),intStartPoint,strLeftOutDigitArray,strRunNumWithZero);

//----------------------------------------------------------------------------------------
// If code definition is not matched and the reverse check is true then reverse the number
//and call the checkcode function.
//----------------------------------------------------------------------------------------
				
				if(bcSpecialNumber.GetFieldValue(""Rule Code Reverse Check"") == ""Y"" && blnCdCheck == false) {
					var strReverRunnNumWithZero = """";
					for(var intRunNumLen = ToInteger(ToString(strRunNumWithZero).length)-1;intRunNumLen>=0;intRunNumLen--)
						strReverRunnNumWithZero = strReverRunnNumWithZero + ToString(strRunNumWithZero).charAt(intRunNumLen);
						//MS:20060130:as part of script change for 78 var intStartPoint= new Array;
						intStartPoint= new Array;
						var intArrayCnt=0;						
						intIncrementMskLenght = 0;
					CheckCode(bcSpecialNumber.GetFieldValue(""Rule Code Mask""),strReverRunnNumWithZero,strRunnNumMskChk,bcSpecialNumber.GetFieldValue(""Rule Code Mask Seq""),intNoOfOccurence,intIncrementMskLenght,blnCdCheck,intStartPoint,intArrayCnt);
					if(blnCdCheck) {
						var strLeftOutDigitArray = new Array;											
						BuilLeftOutDigitArray(bcSpecialNumber.GetFieldValue(""Rule Code Mask""),intStartPoint,strLeftOutDigitArray,strReverRunnNumWithZero);	
					}
				}
			}
	  	 }
			
//--------------------------------------------------------------
// If code definition is matched then check for the combination.
//--------------------------------------------------------------
			if((blnCdCheck) &&(!blnrulComCheck)) {
				with(bcRuleComb) {
					ActivateField(""Rule Comb Id"");
					ActivateField(""Special Cat Id"");
					ActivateField(""Id"");
					ClearToQuery();
					SetSearchSpec(""Special Cat Id"",bcSpecialNumber.GetFieldValue(""Id""));
					ExecuteQuery(ForwardBackward);		
					
					var blnIsComRec = FirstRecord();
					if(!blnIsComRec)
						blnrulComCheck = true;
//------------------------------------------------------------
// Loop through each rule combination and check for the match.
//------------------------------------------------------------
					while(blnIsComRec) {
						with(bcRuleDefinition) {
						
							ActivateField(""Rule Comb Id"");
							ActivateField(""Mask"");
							ActivateField(""No Of Occurences"");
							ActivateField(""Mask Seq"");
							ActivateField(""Reverse Check"");
							ActivateField(""Type"");
							ClearToQuery();
							SetSearchSpec(""Id"",bcRuleComb.GetFieldValue(""Rule Comb Id""));
							ExecuteQuery(ForwardBackward);		
							var blnRulComRec = FirstRecord();
							var intRuleCombNoOfOccurences = GetFieldValue(""No Of Occurences"");
	
							if(FirstRecord()){
//--------------------------------------------------------------------------------------------
//If rule combination is a filler then check whether the entire mask matches the filler digit.
//--------------------------------------------------------------------------------------------
								if(GetFieldValue(""Type"") == TheApplication().InvokeMethod(""LookupValue"", ""RMS_RUL_TYPE"", ""FILLER"")) {
									for(intArrayCnt = 0;intArrayCnt < getArrayLength(strLeftOutDigitArray);intArrayCnt++){
										for(var intRunNumLen =0;intRunNumLen<ToInteger(ToString(strLeftOutDigitArray[intArrayCnt]).length);intRunNumLen++) {
											if(strLeftOutDigitArray[intArrayCnt].charAt(intRunNumLen)!= GetFieldValue(""Mask"")) {
												blnrulComCheck = false;
												break;										
											}else{
												blnrulComCheck = true;
											}
											
										}
									}
								}
//--------------------------------------------------------------------------------------------
//If rule combination is a not a filler then loop through each of the leftout array value and call the
//check code function to check whether it matche the mask.
//--------------------------------------------------------------------------------------------								
								else {
									for(intArrayCnt = 0;intArrayCnt < getArrayLength(strLeftOutDigitArray);intArrayCnt++){
										var intStartPointArrayCnt = 0;
										strRunnNumMskChk = """";
										intIncrementMskLenght = 0
										CheckCode(GetFieldValue(""Mask""),strLeftOutDigitArray[intArrayCnt],strRunnNumMskChk,GetFieldValue(""Mask Seq""),intRuleCombNoOfOccurences,intIncrementMskLenght,blnrulComCheck,intStartPoint,intStartPointArrayCnt);
//---------------------------------------------------------------------------------------------------------------
//If reverse check for the rule comb is true then reverse the value in the array and call the checkcode function.
//---------------------------------------------------------------------------------------------------------------																		
										if(GetFieldValue(""Reverse Check"") == ""Y"" && blnrulComCheck == false)	{
											intIncrementMskLenght = 0;
											strReverRunnNumWithZero = """";
											for(var intRunNumLen = ToInteger(ToString(strLeftOutDigitArray[intArrayCnt]).length)-1;intRunNumLen>=0;intRunNumLen--)
												strReverRunnNumWithZero = strReverRunnNumWithZero + ToString(strLeftOutDigitArray[intArrayCnt]).charAt(intRunNumLen);
											CheckCode(GetFieldValue(""Mask""),strReverRunnNumWithZero,strRunnNumMskChk,GetFieldValue(""Mask Seq""),intRuleCombNoOfOccurences,intIncrementMskLenght,blnrulComCheck,intStartPoint,intStartPointArrayCnt);
										}
										if(blnrulComCheck == true && intRuleCombNoOfOccurences == 1)										
											break;										
									}
								}
							}
						}
						blnIsComRec = NextRecord();
					}
//					bcRuleComb = NextRecord()
				}
			}
			if(blnCdCheck == true && blnrulComCheck == true)
				break;
			//added for STC
			if(blnCdCheck == true && blnrulComCheck == false && bcSpecialNumber.GetFieldValue(""Default Category Id"") != """") {
				break;
			//////////////
			}
		blnSpecCatRec = bcSpecialNumber.NextRecord();
	}
	boVanityruleMarix = null;
	bcRuleDefinition = null;
	
	psfnArgs.SetProperty(""blnCdCheck"",blnCdCheck);
	psfnArgs.SetProperty(""blnrulComCheck"",blnrulComCheck);
	return(blnSpecCatRec);


}
"/**************************************************************************************
* Name          : RMS NM Number Generation Service GeneratedNumbers Numbers Function * 
* Author        : Mahindra British Telecom                                            *
* Description   : Invoking the start generate numbers function after increamenting    *
*				  batch counter and fetching the relevant number scheme information.  *
*																					  *		 
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 05/04/2003 	 1.0   	MBT    	 Kadali Srinivas - Ver. 2.0   15/04/2003       *   
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/

//============================= Kadali Srinivas - Ver. 2.0 ==================================
//	This Method is called for the Allocation of only MSISDN numbers to the Distributors.
//===========================================================================================	
function GenerateAllocateNumbers(bcNumGen,bcNMAlloc,bcSchemeLevel,strFixFormatDel,strFixFormat,strWithoutDel)
{
	var strTypeIdentfier 	= bcNumGen.GetFieldValue(""Type Identifier"");
	var strAllocTo			= bcNumGen.GetFieldValue(""Alloc To"");
	var strFormat			= bcNumGen.GetFieldValue(""Format"");
	var strStartStringNum	= bcNumGen.GetFieldValue(""Start String Number"");
	var strTotalString;
	var bsNMAlloc;
	
	var psInputs;
	var psOutputs;

	if((strTypeIdentfier == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"",""MSISDN"")) && (bcNumGen.GetFieldValue(""Alloc To"") != """")){
			
		if(bcSchemeLevel.GetFieldValue(""Delimiter"") != """" && bcSchemeLevel.GetFieldValue(""Delimiter"") != (TheApplication().InvokeMethod(""LookupValue"", ""NM_FORMAT_DELIMITER"", ""NONE""))){
			strTotalString = strFixFormatDel + strStartStringNum;
		}
		else{
			strTotalString = strWithoutDel + strStartStringNum;	
		}
			bcNMAlloc.ActivateField(""Status"");
			bcNMAlloc.ActivateField(""Scheme Id"");
			bcNMAlloc.ActivateField(""Block Id"");
			bcNMAlloc.ActivateField(""Type Id"");
			bcNMAlloc.ActivateField(""Alloc To"");
			bcNMAlloc.ActivateField(""Start Num String"");			
			bcNMAlloc.ActivateField(""Quantity"");
			
			bcNMAlloc.SetViewMode(AllView);
			bcNMAlloc.NewRecord(1);
			
			bcNMAlloc.SetFieldValue(""Scheme Id"", bcNumGen.GetFieldValue(""Scheme Id""));
			bcNMAlloc.SetFieldValue(""Block Id"", bcNumGen.GetFieldValue(""Block Id""));
			bcNMAlloc.SetFieldValue(""Type Id"", bcNumGen.GetFieldValue(""Type Id""));
			bcNMAlloc.SetFieldValue(""Alloc From"", """");
			bcNMAlloc.SetFieldValue(""Start Num String"", strTotalString);
			bcNMAlloc.SetFieldValue(""Alloc To"", bcNumGen.GetFieldValue(""Alloc To""));
			bcNMAlloc.SetFieldValue(""Quantity"", ToInteger(bcNumGen.GetFieldValue(""Quantity Str"")));
//			bcNMAlloc.SetUserProperty(""blnFromAllocation"",""Y"");
			bcNMAlloc.WriteRecord();
		  	
					
			psInputs  		= TheApplication().NewPropertySet();
			psOutputs  		= TheApplication().NewPropertySet();
			
			psInputs.SetProperty(""intObjectId"",bcNMAlloc.GetFieldValue(""Id""));							
			bsNMAlloc 	= TheApplication().GetService(""RMS NM Number Allocation"");
			
			TheApplication().SetProfileAttr(""AllocFromGen"", ""Y"");
			bsNMAlloc.InvokeMethod(""Allocate"", psInputs,psOutputs);
			TheApplication().SetProfileAttr(""AllocFromGen"", ""N"");			

	}
	
	psInputs 	= null;
	psOutputs 	= null;
//1.1 below
	bsNMAlloc = null;
//1.1 above
}
"/**************************************************************************************
* Name          : RMS NM Number Generation Service GeneratedNumbers Numbers Function * 
* Author        : Mahindra British Telecom                                            *
* Description   : Invoking the start generate numbers function after increamenting    *
*				  batch counter and fetching the relevant number scheme information.  *
*																					  *		 
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 05/12/2003 	 1.0   		 MBT   						Created      15/12/2003       *
* 23/06/2006 	1.1   		ARUNJ   	SiebelES#12 Incorporated condition after ExecuteQuery *	
**************************************************************************************/

function GenerateNumbers(intObjectId){

	var boNumGen;
	var boNMScheme;
	var boNMAlloc;
		
	var bcNumGen;
	var bcSchemeLevel;
	var bcSchemeInfo;
	var bcNMAlloc;
	
	var strFixFormatDel = """";
	var strFixFormat	= """";
	var strErrVal 		= """";
	var strSchemeFormat = """";
	var strSearchExpr	= """";
	var strWithoutDel	= """";
	var strSchemeId	;
	var strVal;
	var strNumDelim 	= """";
	var strNum 			= """";
	var strAlgorithm 	= new Array;
	var strFlag 		= """";
	
	var intAlgoCnt = 0;
	
	var intdoubledigit;
	var intsingledigit;
	var intLengthOfRunningValue = 0;
	var intBatchCounter;
	var intCount;
	var intBatchCnt;
//	var intCount = 0;  //MS:20060130: as part of script change to 78
	var blnChecksumReq;
	var blnSchLvlRec;
	var blnIsRecord;
	var blnBatchCnt = false;
	var strLevelName;
	var boSysPref;
	var bcSysPref;

	boNumGen		= TheApplication().GetBusObject(""RMS NM Number Generation"");
	boNMScheme 		= TheApplication().GetBusObject(""RMS NM Number Scheme"");
	boNMAlloc		= TheApplication().GetBusObject(""RMS NM Number Allocation"");
	
	bcNumGen		= boNumGen.GetBusComp(""RMS NM Number Generation"");
	bcSchemeLevel	= boNMScheme.GetBusComp(""RMS NM Scheme Level Updation"");
	bcSchemeInfo	= boNumGen.GetBusComp(""RMS NUM GENERATION SCHEME INFO"");
	bcNMAlloc		= boNMAlloc.GetBusComp(""RMS NM Number Allocation"");

	boSysPref = TheApplication().GetBusObject(""System Preferences"");
	bcSysPref = boSysPref.GetBusComp(""System Preferences"");


	try{

	
	with(bcNumGen){
		ActivateField(""Scheme Id"");
		ActivateField(""Type Id"");
		ActivateField(""Block Id"");
		ActivateField(""Block Starting String Number"");
		ActivateField(""Quantity Str"");
		ActivateField(""Start String Number"");
		ActivateField(""Start Number"");
		ActivateField(""End Number Str"");
		ActivateField(""End Number"");
		ActivateField(""Status"");
		ActivateField(""HLR Id"");
		ActivateField(""Batch Number"");
		ActivateField(""Type Identifier"");
		ActivateField(""Post Generation Status"");
		ActivateField(""Subtype Id"");
		ActivateField(""Format"");
		ActivateField(""SIM Order Raised"");
		ActivateField(""Generated Message"");
		ActivateField(""Alloc To"");
		ActivateField(""Checksum Required"");
		ClearToQuery();
		SetSearchSpec(""Id"",intObjectId);
		ExecuteQuery();
// below 1.1
//		FirstRecord();
// above 1.1
	}	
// below 1.1
	if (bcNumGen.FirstRecord())	{
// above 1.1

//--------------------------------------------------------------------------
// Display an error message if another user is accessing the same record.
//--------------------------------------------------------------------------
//	if(bcNumGen.GetFieldValue(""Status"")== (TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""GENERATED"")) || bcNumGen.GetFieldValue(""Status"")== (TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"")))
	if(bcNumGen.GetFieldValue(""Status"")== (TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""GENERATED"")))
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN004"");

	else{
		bcNumGen.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
		bcNumGen.WriteRecord();

//--------------------------------------------------------------------------------------
// Incrementing the batch counter of the scheme.
// Batch counter reflects the no. of times numbers were generated against the scheme.
//--------------------------------------------------------------------------------------				
		strSchemeId = bcNumGen.GetFieldValue(""Scheme Id"");
		
		with(bcSchemeLevel){
			ActivateField(""Scheme Id"");
			ActivateField(""Level Type"");
			ActivateField(""Length"");
			ActivateField(""Delimiter"");
			ActivateField(""Value"");
			ActivateField(""Max Reached"");
			ActivateField(""Level Name"");
			ActivateField(""Algorithm"");
			ClearToQuery();
			SetSearchSpec(""Scheme Id"",bcNumGen.GetFieldValue(""Scheme Id""));
			ExecuteQuery();
			blnSchLvlRec = FirstRecord();
		}
		
				
//------------------------------------------------------------------------------------
// Breaking the number to update the batch number and providing the inputs of HLR
// and batch number for making the checksum digits.
//------------------------------------------------------------------------------------		
		while(blnSchLvlRec){
	
			if(bcSchemeLevel.GetFieldValue(""Level Type"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING"")
					&&
			bcSchemeLevel.GetFieldValue(""Level Type"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""CHECKSUM"")){
					
				if(bcSchemeLevel.GetFieldValue(""Level Type"") == (TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""YEAR""))){

					var dtSysDate;
					var dtSysDateObj;
				
					dtSysDate    = Clib.time();
					dtSysDateObj = Date.fromSystem(dtSysDate);
					dtSysDateObj.setTime(dtSysDateObj.getTime());
					
					//----------------------------------------	
					//Getting the current day, month and year.
					//----------------------------------------	
				
				 	var mstrCurrDay   = ToNumber(dtSysDateObj.getDate());
					var mstrCurrMonth = ToNumber(dtSysDateObj.getMonth());	
					var mstrCurrYear  = ToString(dtSysDateObj.getFullYear());
					mstrCurrYear  = mstrCurrYear.substring(2,4);

/*----------------------	V2.0	------------------------------------------
					if(bcSchemeLevel.GetFieldValue(""Max Reached"") == ""Y""){
						strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN028"");			
						return(strErrVal);
					}	
					
					if(bcNumGen.GetFieldValue(""Batch Number"") == """"){
					
						//strFixFormat = ToString(bcNumGen.GetFieldValue(""HLR Id"")) + ToString(bcSchemeLevel.GetFieldValue(""Value""));
						strFixFormat = strFixFormat + ToString(bcSchemeLevel.GetFieldValue(""Value""));
						bcNumGen.SetFieldValue(""Batch Number"",ToString(bcSchemeLevel.GetFieldValue(""Value"")));	
						bcNumGen.WriteRecord();	
						
						blnBatchCnt = true;
						intBatchCnt = bcSchemeLevel.GetFieldValue(""Value"");
						 
						intBatchCounter = ToInteger(bcSchemeLevel.GetFieldValue(""Value"")) + 1;
						
						if(ToString(intBatchCounter).length < ToInteger(bcSchemeLevel.GetFieldValue(""Length""))){
							for(intCount = ToString(intBatchCounter).length; intCount != ToInteger(bcSchemeLevel.GetFieldValue(""Length""));intCount++)
								intBatchCounter = ""0"" + intBatchCounter;
						}
						else if(ToString(intBatchCounter).length > ToInteger(bcSchemeLevel.GetFieldValue(""Length""))){
							bcSchemeLevel.SetFieldValue(""Max Reached"",""Y"");
							intBatchCounter = ToInteger(bcSchemeLevel.GetFieldValue(""Value""));	
						}							
					
						bcSchemeLevel.SetFieldValue(""Value"",intBatchCounter);
						bcSchemeLevel.WriteRecord();
					}
			
					else

					strFixFormat = strFixFormat + ToString(bcNumGen.GetFieldValue(""Batch Number""));
					//strFixFormat = ToString(bcNumGen.GetFieldValue(""HLR Id"")) + ToString(bcNumGen.GetFieldValue(""Batch Number""));
//-------------------------------  V2.0  ------------------------------------*/		
					strFixFormat = strFixFormat + mstrCurrYear;				
//					strWithoutDel = strWithoutDel + bcNumGen.GetFieldValue(""Batch Number"");	
					strWithoutDel = strWithoutDel + mstrCurrYear;
//					strFixFormatDel = strFixFormatDel + bcNumGen.GetFieldValue(""Batch Number"");	
					strFixFormatDel = strFixFormatDel + mstrCurrYear;
					if(bcSchemeLevel.GetFieldValue(""Delimiter"") != """" && bcSchemeLevel.GetFieldValue(""Delimiter"") != (TheApplication().InvokeMethod(""LookupValue"", ""NM_FORMAT_DELIMITER"", ""NONE"")))
						if(bcSchemeLevel.GetFieldValue(""Delimiter"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_FORMAT_DELIMITER"", ""SPACE"")){
							strFixFormatDel = strFixFormatDel + "" "";
						}
						else
						{
							strFixFormatDel = strFixFormatDel + bcSchemeLevel.GetFieldValue(""Delimiter"");
						}
					
					blnSchLvlRec = bcSchemeLevel.NextRecord();
					continue;						
							
				}
				
				if(bcSchemeLevel.GetFieldValue(""Level Type"") == (TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""HLR""))){
					strFixFormat = strFixFormat + ToString(bcNumGen.GetFieldValue(""HLR Id""));
				}
				
				if(bcSchemeLevel.GetFieldValue(""Level Type"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""YEAR"")
										&&
					bcSchemeLevel.GetFieldValue(""Level Type"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""HLR""))
				{
					strFixFormat  = strFixFormat + bcSchemeLevel.GetFieldValue(""Value"");
				}
				
				
				strWithoutDel = strWithoutDel + bcSchemeLevel.GetFieldValue(""Value"");
				strFixFormatDel = strFixFormatDel + bcSchemeLevel.GetFieldValue(""Value"");
				if(bcSchemeLevel.GetFieldValue(""Delimiter"") != """" && bcSchemeLevel.GetFieldValue(""Delimiter"") != (TheApplication().InvokeMethod(""LookupValue"", ""NM_FORMAT_DELIMITER"", ""NONE""))){
						if(bcSchemeLevel.GetFieldValue(""Delimiter"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_FORMAT_DELIMITER"", ""SPACE"")){
							strFixFormatDel = strFixFormatDel + "" "";
						}
						else{
							strFixFormatDel = strFixFormatDel + bcSchemeLevel.GetFieldValue(""Delimiter"");
						}
				}
			}
			else {
				if(bcSchemeLevel.GetFieldValue(""Level Type"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING""))
					intLengthOfRunningValue = ToInteger(bcSchemeLevel.GetFieldValue(""Length""));	
				if(bcSchemeLevel.GetFieldValue(""Level Type"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""CHECKSUM""))
					strAlgorithm[intAlgoCnt++] = bcSchemeLevel.GetFieldValue(""Algorithm"");
			}
				
				 
			blnSchLvlRec = bcSchemeLevel.NextRecord();
		}	
		
		strLevelName	= bcSchemeLevel.GetFieldValue(""Level Name"");
		blnChecksumReq 	= bcNumGen.GetFieldValue(""Checksum Required"");
		
		strErrVal = StartGenerateNumbers(bcNumGen,strFixFormatDel,intLengthOfRunningValue,strFixFormat,strWithoutDel,blnBatchCnt,intBatchCnt,intBatchCounter,strAlgorithm,blnChecksumReq,strLevelName);



		with(bcSchemeLevel){
			ActivateField(""Current Format"");
			ActivateField(""Scheme Id"");
			ActivateField(""Level Type"");
			ActivateField(""Length"");
			ActivateField(""Delimiter"");
			ActivateField(""Value"");
			ClearToQuery();
			SetSearchSpec(""Scheme Id"",strSchemeId);
			ExecuteQuery();
			blnSchLvlRec = FirstRecord();
		}
			
		while(blnSchLvlRec){
			strVal = bcSchemeLevel.GetFieldValue(""Value"");
//-----------------------------------------------------------------
// Populating the scheme format with the delimiters if mentioned.
//-----------------------------------------------------------------
			if(bcSchemeLevel.GetFieldValue(""Level Type"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING"")){
				if(bcSchemeLevel.GetFieldValue(""Delimiter"") != """" && bcSchemeLevel.GetFieldValue(""Delimiter"") != (TheApplication().InvokeMethod(""LookupValue"", ""NM_FORMAT_DELIMITER"", ""NONE"")))
					if(bcSchemeLevel.GetFieldValue(""Delimiter"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_FORMAT_DELIMITER"", ""SPACE"")){	
						strVal = strVal + "" "";
					}
					else{						
						strVal = strVal + ToString(bcSchemeLevel.GetFieldValue(""Delimiter""));
					}

//-------------------------------------------------------------------------------
// Storing numbers with delimiters and also without delimiters for the check of 
// unique format values.
//--------------------------------------------------------------------------------
					strNumDelim = strNumDelim + strVal;
			}
			else{
				for (intCount=0; intCount < bcSchemeLevel.GetFieldValue(""Length"");intCount++)
					strVal = strVal + 'N';
				
				strNumDelim = strNumDelim + strVal ;
			}	
	
			blnSchLvlRec = bcSchemeLevel.NextRecord();
	
		}

		with(bcSchemeInfo){
			ActivateField(""Current Format"");
			ClearToQuery();
			SetSearchSpec(""Id"",strSchemeId);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
// below 1.1
			if (blnIsRecord){
// above 1.1
			bcSchemeInfo.SetFieldValue(""Current Format"",strNumDelim);
			bcSchemeInfo.WriteRecord();
// below 1.1
			}
// above 1.1
		}
		
	}

//============================= Kadali Srinivas - Ver. 2.0 ==================================
//	This Method is called for the Allocation of only MSISDN numbers to the Distributors.
//===========================================================================================	
	GenerateAllocateNumbers(bcNumGen,bcNMAlloc,bcSchemeLevel,strFixFormatDel,strFixFormat,strWithoutDel);

	
	bcNumGen.SetFieldValue(""Generated Message"", strErrVal);
	bcNumGen.WriteRecord();


	//--------------------------[GB 03102006]----------------------------------------------------
		if(bcNumGen.GetFieldValue(""Status"")== (TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""GENERATED"")) && bcNumGen.GetFieldValue(""Type Identifier"")== (TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")))
		{

		//-----GETTING THE Special Category Flag FROM SYSTEM PREFERENCE------------
				bcSysPref.ActivateField(""Value"");
				bcSysPref.ClearToQuery();
				bcSysPref.SetSearchSpec(""Name"",""STC_SPLNUM_AUTO"");
				bcSysPref.ExecuteQuery();
				if(bcSysPref.FirstRecord()) 
				{	 
					strFlag		= 	bcSysPref.GetFieldValue(""Value"");
				}
				if(strFlag == ""Y"")
					Special_Numbers(intObjectId);
		}

//------------------------------------------------------------------------------

// below 1.1
	}
// above 1.1	
	}

	catch (e) {
		var test1 = e.errText;
		var test2 = ""help"";
	} 

	finally {
	bcNumGen		= null;
	bcSchemeInfo    = null;
	bcNMAlloc		= null;	
	boNMScheme		= null;
	boNumGen		= null;
	boNMAlloc		= null;
	boSysPref		= null;
	bcSysPref		= null;

	}
	return(strErrVal);	
	
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
---------------+------+--------+----------------------------------------------
*/
function Invoke_ChkVanityMatrix_1(strSchemeId,strRunNumWithZero)
{
	var boNumberScheme;
	var bcSpecialNumber;
	var bcRuleComb;
	var psfnArgs;

	var blnCdCheck = false;
	var blnrulComCheck = false;
	var blnVanityCheck = false;

	psfnArgs = TheApplication().NewPropertySet();


	boNumberScheme  = TheApplication().GetBusObject(""RMS NM Number Scheme"");
	bcSpecialNumber = boNumberScheme.GetBusComp(""RMS NM Scheme Special Category"");
	bcRuleComb = boNumberScheme.GetBusComp(""RMS NM Special Cat Rule Comb"");
	psfnArgs.SetProperty(""blnCdCheck"",false);
	psfnArgs.SetProperty(""blnrulComCheck"",false);
	QuerySpecialNumber(bcSpecialNumber, strSchemeId);
	blnVanityCheck = ChkVanityMatrix_1(strSchemeId,strRunNumWithZero,psfnArgs,bcSpecialNumber,bcRuleComb);
	blnCdCheck = (psfnArgs.GetProperty(""blnCdCheck"") == ""true"")?true:false;
	blnrulComCheck = (psfnArgs.GetProperty(""blnrulComCheck"") == ""true"")?true:false;

	if(blnCdCheck == true && blnrulComCheck == true) {
		return(bcSpecialNumber.GetFieldValue(""Category""));
	}
	if(blnCdCheck == true && blnVanityCheck == true && blnrulComCheck == false ) {
		//if(bcSpecialNumber.LastRecord()){ 
			if(bcSpecialNumber.GetFieldValue(""Default Category Id"")!="""") {
				return(bcSpecialNumber.GetFieldValue(""Default Category""));
			}
		//}
	}
//1.1 below
	bcRuleComb = null;
	bcSpecialNumber = null;
	boNumberScheme = null;
	psfnArgs = null;
//1.1 above
}
"/**************************************************************************************
* Name          : NM Number Generation IsSpecial function		         		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Generation Code File	    		                      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function IsSpecialNumber(sFormat, sFullNum, sSeq){
	
	var nCount    = 0, nFormatLength;
	var arrFormat = new Array();
	var arrIndex  = new Array();
	var sIndex, sValue;

	sIndex = sValue = """";
//Get the last format number values.
	var sNum 	  = sFullNum.substring(sFullNum.length - sFormat.length);


//Validate the number value entered matches the number format length.
	if (sNum.length < sFormat.length)	return false;
	
			
//Validate whether each digit in the number format corresponds to the right number value supplied. 
	for (; nCount < sFormat.length; nCount++)
	{	
//Check if the format specified is a number datatype.
		if (Clib.isdigit(sFormat.charAt(nCount)))		
		{	
			if (sFormat.charAt(nCount) != sNum.charAt(nCount))	break;
		
			continue;
		}
		
//Checking whether the format is in the mask value array.If not then append it to the array.
		if (isFinite(arrFormat[sFormat.charAt(nCount)]))					
		{
		
//Check mask value with the original value specified.		
			if (arrFormat[sFormat.charAt(nCount)] != ToInteger(sNum.charAt(nCount)))	break;	

		}
		else
//Check the value of mask with each value of mask specified.
			if (sValue.indexOf(sNum.charAt(nCount)) >= 0)	break;
			
			else
			{ 
//If value not specified,then add it to the existing list.
				sIndex = sIndex + sFormat.charAt(nCount);
				sValue = sValue + sNum.charAt(nCount);
				arrFormat[sFormat.charAt(nCount)]  = ToInteger(sNum.charAt(nCount));
			}	

//If sequence specified for format then check for the sequencing.					
			if (sSeq == ""Y"")						
			
				if (((sFormat.charCodeAt(nCount)-sIndex.charCodeAt(0)) + ToInteger(sValue.charAt(0))) 
				      != ToInteger(sNum.charAt(nCount)))	break;
									
	} //End of for loop.
	
	return (nCount==sFormat.length?true:false);
}
"/**************************************************************************************
* Name          : NM Number Generation IsSpecial function		         		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Generation Code File	    		                      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/4/2005 	1.0   		MBT						   	Created      02/04/2005       *
**************************************************************************************/
function LuhnAlgorithm(strNum,intLength,&intCount,&intChecksum1,intdoubledigit,intsingledigit,strFinalChkNum) {
	for(var intNumCount= ToInteger(intLength); intNumCount>=0; intNumCount = ToInteger(intNumCount)-1)
	{
		if(intCount == 1)
		{
			intdoubledigit = ToInteger(strNum.charAt(ToInteger(intNumCount))* 2);
			intsingledigit = MakeSingleDigit(intdoubledigit);
			strFinalChkNum = strFinalChkNum + ToString(intsingledigit); 
		}

		if(intCount == 0) {
			strFinalChkNum = strFinalChkNum + ToString(strNum.charAt(ToInteger(intNumCount)));
		}
		if(intCount == 1)
		{
			intCount = 0;
		}
		else
		{
			intCount = 1;	
		}
	}
	for(var intNumCount= 0; intNumCount <= ToInteger(strFinalChkNum.length); intNumCount = ToInteger(intNumCount)+1) {
		intChecksum1 = ToInteger(intChecksum1) + ToInteger(strFinalChkNum.charAt(ToInteger(intNumCount)));
	}
	
	intChecksum1 = ToInteger(intChecksum1) % 10;
	if(intChecksum1 != 0){
		intChecksum1 = ToInteger(10 - ToInteger(intChecksum1));						
	}
	else
		intChecksum1 = intChecksum1;		
}
"/**************************************************************************************
* Name          : NM Number Generation IsSpecial function		         		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Generation Code File	    		                      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/04/2005 	1.0   		MBT						   	Created      02/04/2005       *
**************************************************************************************/
function MakeSingleDigit(intdoubledigit)
{
try{
	var intIndividualdigit = 0;
	var vdouble = ToInteger(ToString(intdoubledigit).length);
	var intdoubledigit1 = ToString(intdoubledigit);
	var intNumCount11 = 1;

	while(ToString(intdoubledigit).length  > 1)
	{
		for(intNumCount11; intNumCount11 <= vdouble; intNumCount11++)
		{
		   intIndividualdigit = intIndividualdigit + ToInteger(intdoubledigit1.charAt(ToInteger(intNumCount11)-1));
		}
		intdoubledigit = intIndividualdigit;
	}
	return(intdoubledigit);	
	}
	catch(e)
	{
		var strMessage = e.errText;
	}
	return CancelOperation;
}
"/**************************************************************************************
* Name          : RMS NM Number Generation PopulateEnd Number Function         	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Populates the end number and also checks for the concurrency.	      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      05/12/2003       *
* 23/06/2006 	1.1   		ARUNJ   	SiebelES#12 Incorporated condition after ExecuteQuery *	
**************************************************************************************/

function PopulateEndNum(intObjectId,strSchId,strBlkId,intQty,intStNum,&strStNum,strBlkStNo,&intEndNum,&strEndNum,intBlkStrNum,intBlkEndNum){

	var boNumGen;
	var boNMScheme;
	
	var bcNumGen;
	var bcNMBlock;
	var bcSchemeLevel;
	
	var intAvailQty;
	var intStartNumLenCnt;
	var intEndNumLenCnt;
	
	var strErrVal = """";
	var strSearchExpr;
	var blnSchLvlRec;
	var blnIsRecord;
	var varjk;
	var flgBatchCounter = ""N"";
	
	boNumGen 		= TheApplication().GetBusObject(""RMS NM Number Generation"");
	boNMScheme		= TheApplication().GetBusObject(""RMS NM Number Scheme"");
	
	bcNumGen		= boNumGen.GetBusComp(""RMS NM Number Generation"");
	bcNMBlock		= boNMScheme.GetBusComp(""RMS NM Number Block"");
    bcSchemeLevel	= boNMScheme.GetBusComp(""RMS NM Scheme Level Updation"");
     
//--------------------------------------------------------------------------------------
// Check if the quantity specified fits in the block quantity defined in number scheme.	
//--------------------------------------------------------------------------------------
	with(bcNMBlock){
		ActivateField(""Available Quantity"");
		ClearToQuery();
		SetSearchSpec(""Id"",strBlkId);
		ExecuteQuery();
// below 1.1
//		FirstRecord();
// above 1.1
	}
// below 1.1
	if (bcNMBlock.FirstRecord()){
// above 1.1		
		intAvailQty = ToNumber(bcNMBlock.GetFieldValue(""Available Quantity""));

    with(bcSchemeLevel){
    		ActivateField(""Scheme Id"");
			ActivateField(""Level Type"");
			ClearToQuery();
			SetSearchSpec(""Scheme Id"",strSchId);
			ExecuteQuery();
			blnSchLvlRec = FirstRecord();
	}  	
	
	while(blnSchLvlRec){
			if(bcSchemeLevel.GetFieldValue(""Level Type"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_LEVEL_TYPE"", ""BATCH COUNTER""))
				flgBatchCounter = ""Y"";
			blnSchLvlRec = bcSchemeLevel.NextRecord();	
	}
	
	
	
	
	
	if(intAvailQty < intQty)
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN001"",intAvailQty);
	
	if((intEndNum > intBlkEndNum) || (intStNum < intBlkStrNum))
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN010"",intBlkStrNum,intBlkEndNum);
		
		
	if(	strErrVal == """"){
//----------------------------------------------------------------------
// Checking for the concurrency of the start number and the end number. 
//----------------------------------------------------------------------
		strSearchExpr = ""[Scheme Id] = '"" + strSchId +
						""' AND [Block Id] ='"" + strBlkId +
						""' AND [Id] <>'"" + intObjectId + 
						""' AND (([Start Number] <= '"" + intStNum +
						""' AND [End Number] >= '"" + intStNum +
						""') OR ([Start Number] <= '"" + intEndNum +
						""' AND [End Number] >= '"" + intEndNum +
						""') OR ([Start Number] >= '"" + intStNum +
						""' AND [End Number] <= '"" + intEndNum + ""'))"";
	

//--------------------------------------------------------------------------------
//Code added for appending Batch Counter(if specified) in the search specification  
//--------------------------------------------------------------------------------
	if(flgBatchCounter == ""Y"")
		strSearchExpr= strSearchExpr + "" AND [Batch Number] = ''"";
	
	
	
		
		with(bcNumGen){
			ActivateField(""Start String Number"");
			ActivateField(""End Number Str"");
			ClearToQuery();
			SetSearchExpr(strSearchExpr);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}
		
		while(blnIsRecord){		
//--------------------------------------------------
// Display an error if start number is overlapping.	
//--------------------------------------------------	
			if((intStNum >= (ToInteger(bcNumGen.GetFieldValue(""Start String Number"")))) && (intStNum <= (ToInteger(bcNumGen.GetFieldValue(""End Number Str""))))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN002"",bcNumGen.GetFieldValue(""Start String Number""),bcNumGen.GetFieldValue(""End Number Str""));	
				break;
			}	

//------------------------------------------------
// Display an error if end number is overlapping.
//------------------------------------------------				
			else if((intEndNum >= (ToInteger(bcNumGen.GetFieldValue(""Start String Number"")))) && (intEndNum <= (ToInteger(bcNumGen.GetFieldValue(""End Number Str""))))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN003"",bcNumGen.GetFieldValue(""Start String Number""),bcNumGen.GetFieldValue(""End Number Str""));	
				break;
			}

//---------------------------------------------------------------
// Display an error if start number or end number is overlapping.
//---------------------------------------------------------------				
			else if((intStNum <= (ToInteger(bcNumGen.GetFieldValue(""Start String Number"")))) && (intEndNum >= (ToInteger(bcNumGen.GetFieldValue(""End Number Str""))))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN008"",intStNum,intQty,bcNumGen.GetFieldValue(""Start String Number""),bcNumGen.GetFieldValue(""End Number Str""));	
				break;
			}	
					
			blnIsRecord = bcNumGen.NextRecord();
		}
	}

//------------------------------------------------------------------------------------------
// Appending no. of zeros for starting number and the end number as per the length of block.
//------------------------------------------------------------------------------------------
	if(strErrVal == """"){
		if(strStNum.length < strBlkStNo.length){
			for (intStartNumLenCnt = strStNum.length; intStartNumLenCnt != strBlkStNo.length; intStartNumLenCnt++)
				strStNum = ""0"" + strStNum;
		}

		if(strEndNum.length < strBlkStNo.length){
			for (intEndNumLenCnt = strEndNum.length; intEndNumLenCnt != strBlkStNo.length; intEndNumLenCnt++)
				strEndNum = ""0"" + strEndNum;
		}
	}
	
// below 1.1
	}
// above 1.1	
	bcNumGen 		= null;
	bcNMBlock 		= null;
	bcSchemeLevel	= null;
	boNumGen 		= null;
	boNMScheme 		= null;
	
	return(strErrVal);
}
function QuerySpecialNumber(&bcSpecialNumber, strSchemeId)
{
//--------------------------------------------------------
// Query Special category to get all the category records.
//--------------------------------------------------------
	
	with(bcSpecialNumber) {
		ActivateField(""Id"");			
		ActivateField(""Scheme Id"");
		ActivateField(""Sequence Flag"");
		ActivateField(""Priority"");
		ActivateField(""Mask"");
		ActivateField(""Reverse Check"");
		ActivateField(""Rule Code Name"");
		ActivateField(""Rule Code Mask"");
		ActivateField(""Category"");
		ActivateField(""Rule Code Occurence"");		
		ActivateField(""Rule Code Mask Seq"");
		ActivateField(""Rule Comb Code"");
		ActivateField(""Rule Code Reverse Check"");
		ActivateField(""Rule Code Type"");
		ActivateField(""Price"");
		ActivateField(""Default Category Id"");
		ActivateField(""Default Category"");
		ClearToQuery();
		SetSearchSpec(""Scheme Id"",strSchemeId);
	//	SetSearchSpec(""Expired"",""N"");
	//	SetSearchSpec(""In Use Flag For Gen"",""Y"");
		SetSortSpec(""Priority (ASCENDING)"");
		ExecuteQuery(ForwardBackward);
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Generation RefreshingBc function	         		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      12/12/2003       *
**************************************************************************************/

function RefreshingBc(){

	var psInputs;
	var psOutputs;
	var bsSIMNMRef;
	
	psInputs = TheApplication().NewPropertySet();
	psOutputs = TheApplication().NewPropertySet();
	
	bsSIMNMRef = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
										
	psInputs.SetProperty(""Business Component Name"",""RMS NM Number Generation"");
	psInputs.SetProperty(""Business Object Name"",""RMS NM Number Generation"");
	bsSIMNMRef.InvokeMethod(""Refresh Business Component"",psInputs,psOutputs);
	
	psInputs 	= null;
	psOutputs 	= null;
	bsSIMNMRef	= null;
	
}
"/**************************************************************************************
* Name          : RMS NM Number Generation Service PreInvoke Method         		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      08/12/2003       *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs){

	var intObjectId;  
	var strErrVal 	= """";
	var intReturn	= ContinueOperation;
	intObjectId		= Inputs.GetProperty(""Object Id"");
	
	try{
	
		switch(MethodName){
			case ""GenerateNumbers"":
				strErrVal = GenerateNumbers(intObjectId);
				intReturn = CancelOperation;
				RefreshingBc();
	
//				if(strErrVal != """")
//					TheApplication().RaiseErrorText(strErrVal);
				break;
	
			case ""CancelGeneratedNumbers"":
				strErrVal = CancelGeneratedNumbers(intObjectId);		
				intReturn = CancelOperation;
				RefreshingBc();
				if(strErrVal != """")
					TheApplication().RaiseErrorText(strErrVal);
				break;
				
//--------------------------------------------------------------------------
// Validates the record for concurrency before saving the generation record.
//--------------------------------------------------------------------------					
			case ""ValidateRecord"":
				strErrVal = ValidateGeneration(Inputs,Outputs);
				intReturn = CancelOperation;
				if(strErrVal != """")
					TheApplication().RaiseErrorText(strErrVal);
				break;	
			
			case ""CheckVanity"":
				Outputs.SetProperty(""Category"",Invoke_ChkVanityMatrix_1(Inputs.GetProperty(""SchemeId""),Inputs.GetProperty(""Number"")));	
				intReturn = CancelOperation;
				break;
			
			case ""Special_Numbers"":
				strErrVal 	= 	Special_Numbers(intObjectId);
				intReturn 	= 	CancelOperation;
				if(strErrVal != """")
					TheApplication().RaiseErrorText(strErrVal);
				break;

				
			default:
				break;
						
		}
	}catch(e){

		throw e;
		
	}
	
	return(intReturn);			
}
"/**************************************************************************************
* Name          : RMS NM Number Generation Service SPecial Numbers  Method       * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation SPecial Numbers	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*              | 1.0  | MBT                                                                  *
* 
20060804       | 1.1  | Kalyana | Siebel ES SCR 20060803, Objects Destroyed
**************************************************************************************/
function Special_Numbers(objid)
{

	var	boNumberGen;
	var	bcNumberGen;
	var bsSplNo;
	var psInput;
	var psOutput;
	var strConn;
	var strUserId;
	var strPwd;
	var strBatchsize;
	var strLogFile;
	var strErrVal 	=	"""";
	var strPrefix	=	"""";
	var strCMD;
	var strStartNum;
	var strEndNum;
	var strFormat;
	var i;
	//below 1.1
	var boSysPref;
	var bcSysPref;
	//above 1.1
	try
	{
		boSysPref = TheApplication().GetBusObject(""System Preferences"");
		bcSysPref = boSysPref.GetBusComp(""System Preferences"");

		//-----GETTING THE Connection String FROM SYSTEM PREFERENCE------------
		bcSysPref.ActivateField(""Value"");
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""STC_SPLNUM_CONN_STR"");
		bcSysPref.ExecuteQuery();
		if(bcSysPref.FirstRecord()) 
		{	 
			strConn		= 	bcSysPref.GetFieldValue(""Value"");
		}


		//-----GETTING THE UserId FROM SYSTEM PREFERENCE------------
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""STC_SPLNUM_USER_ID"");
		bcSysPref.ExecuteQuery();
		if(bcSysPref.FirstRecord()) 
		{	 
			strUserId	= 	bcSysPref.GetFieldValue(""Value"");
		}


		//-----GETTING THE PASSWORD FROM SYSTEM PREFERENCE------------
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""STC_SPLNUM_PWD"");
		bcSysPref.ExecuteQuery();
		if(bcSysPref.FirstRecord()) 
		{	 
			strPwd		= 	bcSysPref.GetFieldValue(""Value"");
		}


		//-----GETTING THE BATCHSIZE FROM SYSTEM PREFERENCE------------
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""STC_SPLNUM_BATCHSIZE"");
		bcSysPref.ExecuteQuery();
		if(bcSysPref.FirstRecord()) 
		{	 
			strBatchsize	= 	bcSysPref.GetFieldValue(""Value"");
		}

		//-----GETTING THE LOGFILE FROM SYSTEM PREFERENCE------------
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""STC_SPLNUM_LOGFILE"");
		bcSysPref.ExecuteQuery();
		if(bcSysPref.FirstRecord()) 
		{	 
			strLogFile		= 	bcSysPref.GetFieldValue(""Value"");
		}

		//---------------------------------------------------------------------------
		boNumberGen 	= TheApplication().GetBusObject(""RMS NM Number Generation"");
		bcNumberGen		= boNumberGen.GetBusComp(""RMS NM Number Generation"");
		with(bcNumberGen)
		{
			ActivateField(""Start String Number"");
			ActivateField(""End Number Str"");
			ActivateField(""Format"");
			ClearToQuery();
//NM_TYPE_IDENTIFIER
			SetSearchSpec(""Id"",objid);
			ExecuteQuery();
			if (bcNumberGen.FirstRecord())
			{
				strFormat	=	bcNumberGen.GetFieldValue(""Format"");
				for(i=0;i<strFormat.length;i++)
				{
					if(Clib.isdigit(strFormat.charAt(i)))
						strPrefix	+=	strFormat.charAt(i);
					else
						break;
				}
				strStartNum	=	strPrefix + bcNumberGen.GetFieldValue(""Start String Number"");
				strEndNum	=	strPrefix + bcNumberGen.GetFieldValue(""End Number Str"");
			 }
		 }
//----------CALLING THE JAVA BUSINESS SERVICE ---------------------------------------------------

		bsSplNo		=	TheApplication().GetService(""STC Special Numbers"");
		psInput		= 	TheApplication().NewPropertySet();
		psOutput 	= 	TheApplication().NewPropertySet();

		psInput.SetProperty(""StartingNumber"", strStartNum);
		psInput.SetProperty(""EndingNumber"", strEndNum);
		psInput.SetProperty(""ConnecString"", strConn);
		psInput.SetProperty(""UserId"", strUserId);
		psInput.SetProperty(""Password"", strPwd);
		psInput.SetProperty(""BatchSize"", strBatchsize);
		psInput.SetProperty(""LogFile"", strLogFile);

		bsSplNo.InvokeMethod(""RunCategory"",psInput,psOutput);
	

//-----------------------------------------------------------------------------------------------

	}
	catch(e)
	{
		TheApplication.RaiseErrorText(strErrVal);
	}
   //below 1.1
	//Added finally block
	finally
	{
	bcNumberGen = null;
	boNumberGen = null;
	bcSysPref   = null;
	boSysPref   = null;
	bsSplNo		= null;
	}
	//above 1.1
	return(strErrVal);
//return (CancelOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Generation Service SPecial Numbers  Method       * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation SPecial Numbers	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*              | 1.0  | MBT                                                                  *
* 
20060804       | 1.1  | Kalyana | Siebel ES SCR 20060803, Objects Destroyed
**************************************************************************************/
function Special_Numbers1(objid)
{
	//TheApplication.RaiseErrorText(""Special Numbers"");
	var	boNumberGen;
	var	bcNumberGen;
	var strFile;
	var strPath;
	var strErrVal 	=	"""";
	var strPrefix	=	"""";
	var strCMD;
	var strStartNum;
	var strEndNum;
	var strFormat;
	var i;
	//below 1.1
	var boSysPref;
	var bcSysPref;
	//above 1.1
	try
	{
		//below 1.1
		//var boSysPref = TheApplication().GetBusObject(""System Preferences"");
		//var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
		boSysPref = TheApplication().GetBusObject(""System Preferences"");
		bcSysPref = boSysPref.GetBusComp(""System Preferences"");
		//above 1.1
		//-----GETTING THE ABSOLUTE PATH FROM SYSTEM PREFERENCE------------
		bcSysPref.ActivateField(""Value"");
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""HCPT_SPLNUM_PROG_PATH"");
		bcSysPref.ExecuteQuery();
		if(bcSysPref.FirstRecord()) 
		{	 
			strPath		= 	bcSysPref.GetFieldValue(""Value"");
		}
		//-----GETTING THE FILE NAME FROM SYSTEM PREFERENCE------------
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""HCPT_SPLNUM_PROG_FILE"");
		bcSysPref.ExecuteQuery();
		if(bcSysPref.FirstRecord()) 
		{	 
			strFile		= 	bcSysPref.GetFieldValue(""Value"");
		}
		boNumberGen 	= TheApplication().GetBusObject(""RMS NM Number Generation"");
		bcNumberGen		= boNumberGen.GetBusComp(""RMS NM Number Generation"");
		with(bcNumberGen)
		{
			ActivateField(""Start String Number"");
			ActivateField(""End Number Str"");
			ActivateField(""Format"");
			ClearToQuery();
			SetSearchSpec(""Id"",objid);
			ExecuteQuery();
			if (bcNumberGen.FirstRecord())
			{
				strFormat	=	bcNumberGen.GetFieldValue(""Format"");
				for(i=0;i<strFormat.length;i++)
				{
					if(Clib.isdigit(strFormat.charAt(i)))
						strPrefix	+=	strFormat.charAt(i);
					else
						break;
				}
				strStartNum	=	strPrefix + bcNumberGen.GetFieldValue(""Start String Number"");
				strEndNum	=	strPrefix + bcNumberGen.GetFieldValue(""End Number Str"");
			}
		}
	strCMD		=	""java -classpath "" + strPath + "" "" + strFile + "" "" + strStartNum + "" "" + strEndNum;
	strErrVal	=	Clib.system(strCMD);
	strErrVal 	+=	""	Special Numbers	"" + objid;
	}
	catch(e)
	{
		TheApplication.RaiseErrorText(strErrVal);
	}
   //below 1.1
	//Added finally block
	finally
	{
	bcNumberGen = null;
	boNumberGen = null;
	bcSysPref   = null;
	boSysPref   = null;
	}
	//above 1.1
	return(strErrVal);
//return (CancelOperation);
}
"/**************************************************************************************
* Name          : RMS NM Number Generation Service StartGenerateNumbers Method       * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	V1.0   	MBT		 Created      	 12/12/2003       *
* 28/03/2005	V2.0	MBT		 Kadali Srinivas		 28/03/2005		  *
20060706       | 2.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/

function StartGenerateNumbers(bcNumGen, strFixFormatDel, intLengthOfRunningValue, strFixFormat, strWithoutDel, blnBatchCnt, intBatchCnt, intBatchCounter, strAlgorithm, blnChecksumReq, strLevelName)
{
	var boNumberGen;
 	var boNumberScheme;
 	var boNumberEnquiry;
    var bcSpecialNumber; 
    var bcNumberMaster;
	var bcNMBlock;
    var bcNumberGen;
    var boSysPref;
    var bcSysPref;
    
	var bcRuleComb;    
    var intEndNum;
	var intNumber;
	var intNumCount;
	var intRunNumLenCnt	= 0;	
	var intLength 		= 0;
	var intdoubledigit;
	var intsingledigit;
	var	strFinalChkNum;
	
	var intCurrNumber	= """";
	var intQuantity		= 1;
	var strChksumAlgorithm;
	var strSchemeId; 
	var flgSpecCatRec;
	var strRunNumWithZero; //MS:20060130 need to check
	var strRunNum;
	var strNum;
	var strErrVal = """";
	var strSearchExpr = """";
	//var strSearchExpr = """"; //MS:20060130: as part of script change to 78
	
	var psInputs;
	var psOutputs;
	var psfnArgs;
	var bsBlkCount;
	
	var blnIsRecord;
	var blnCdCheck = false;
	var blnrulComCheck = false;
	var blnBlockUpdate	= false;
	var blnVanityCheck	= false;
	var blnIsChekDef = ""N"";

	
	psInputs = TheApplication().NewPropertySet();
	psOutputs = TheApplication().NewPropertySet();
	psfnArgs = TheApplication().NewPropertySet();
	
	boNumberGen 	= TheApplication().GetBusObject(""RMS NM Number Generation"");
	boNumberEnquiry = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNumberGen		= boNumberGen.GetBusComp(""RMS NM Number Generation"");
	bcNumberMaster 	= boNumberEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	bcNMBlock		= boNumberGen.GetBusComp(""RMS NM Number Scheme Format Info"");
	
	boNumberScheme  = TheApplication().GetBusObject(""RMS NM Number Scheme"");
	bcSpecialNumber = boNumberScheme.GetBusComp(""RMS NM Scheme Special Category"");
	bcRuleComb = boNumberScheme.GetBusComp(""RMS NM Special Cat Rule Comb"");

	boSysPref 		= TheApplication().GetBusObject(""System Preferences"");
	bcSysPref		= boSysPref.GetBusComp(""System Preferences"");
	
	with(bcSysPref) {
		ActivateField(""Value"");
		ClearToQuery();
		SetSearchSpec(""Name"",""RMS_BLOCK_UPDATION"");
		SetSearchSpec(""Value"",""Y"");
		ExecuteQuery(ForwardOnly);
		
		if(FirstRecord())
			blnBlockUpdate = true;
	}

	with(bcNumberGen){
		ActivateField(""Start string Number"");
		ActivateField(""Start Number"");
		ActivateField(""End Number Str"");
		ActivateField(""End Number"");
		ActivateField(""Status"");
		ActivateField(""Checksum Required"");
		ExecuteQuery();
	}
	
	with(psInputs){
		SetProperty(""From Status"","""");
		if(bcNumGen.GetFieldValue(""Number Status"")!= """")
			SetProperty(""To Status"",bcNumGen.GetFieldValue(""Number Status""));
		else
			SetProperty(""To Status"",bcNumGen.GetFieldValue(""Post Generation Status""));
		SetProperty(""Object Id"",bcNumGen.GetFieldValue(""Block Id""));
	}	
	
	bsBlkCount = TheApplication().GetService(""RMS RMS Block Calc"");
	
//------------------------------------------------------
// Generating the numbers till the quantity specified.
//------------------------------------------------------
	with(bcNumberMaster) {
		ActivateField(""Gen Log Id"");
		ActivateField(""Type Id"");
		ActivateField(""Subtype Id"");
		ActivateField(""Number"");
		ActivateField(""Number String"");
		ActivateField(""Status"");
		ActivateField(""Block Id"");
		ActivateField(""Special Category Id"");
		ActivateField(""Block Name"");
		ActivateField(""Scheme Id"");	
		ActivateField(""Comments"");
		ActivateField(""HLR Id"");
		ActivateField(""Number Without Delimiter"");
		ActivateField(""CheckSum1"");
		ActivateField(""Current Date"");
		ActivateField(""Status Date"");
		ActivateField(""Special Category Id"");
		ActivateField(""Number String With Checksum"");
		ActivateField(""Number Type Identifier Denorm"");
		ActivateField(""Price"");
		
	}
	intEndNum = ToInteger(bcNumGen.GetFieldValue(""Start String Number"")) + ToInteger(bcNumGen.GetFieldValue(""Quantity Str""));
	
	//Querying special category for the scheme to avoid repeatative query inside CheckVanityMatrix function
	QuerySpecialNumber(bcSpecialNumber, bcNumGen.GetFieldValue(""Scheme Id""));
	
	for (intNumber = ToInteger(bcNumGen.GetFieldValue(""Start String Number"")); intNumber < intEndNum; intNumber++) {
		blnIsChekDef = ""N"";
		blnCdCheck = false;
		blnrulComCheck = false;
//----------------------------------------------------------------------
// Populating the running value of the number by appending zeros to it.
//----------------------------------------------------------------------
		strRunNumWithZero = intNumber;
		strRunNum = ToString(intNumber);
		if(strRunNum.length < intLengthOfRunningValue ){
			for (intRunNumLenCnt = strRunNum.length; intRunNumLenCnt != intLengthOfRunningValue; intRunNumLenCnt++)
				strRunNumWithZero = ""0"" + strRunNumWithZero;
		}

//---------------------------------------------------------								
// Calculating the check sum while generating SIM numbers		
//---------------------------------------------------------
//----------------- Removed to include the new checksum logic as part of V2.0 ---------------------
/*		if(bcNumGen.GetFieldValue(""Type Identifier"") == (TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))){
			intChecksum1 = 0;
			intChecksum2 = 0;
			strNum 		 = strFixFormat + strRunNumWithZero;
			intLength 	 = ToInteger(strNum.length);
			for(intNumCount=0;intNumCount<intLength;intNumCount++)
				intChecksum1 = intChecksum1 + ToInteger(strNum.charAt(intNumCount));
			intChecksum1 = intChecksum1 % 10;
			
			for(intNumCount=0;intNumCount<intLength; intNumCount=intNumCount+2)
				intChecksum2 = intChecksum2 + ToInteger(strNum.charAt(intNumCount));
			
			intChecksum2 = intChecksum2 * 3;
			intChecksum2 = intChecksum2 % 10;
		}	
*/
//------------------------------- V2.0 --------------------------------------------------------					
// Calculating the check sum while generating SIM numbers as part of new CHECKSUM LOGIC		
//----------------------------------------------------------------------------------------------

	
	for(var intArrcnt = 0;intArrcnt < getArrayLength(strAlgorithm);intArrcnt++) {
		if(strAlgorithm[intArrcnt] == TheApplication().InvokeMethod(""LookupValue"", ""RMS_CHKSUM_ALGORITHM"", ""LUHN"")) {

			var intChecksum1 = 0;
			var intCount	 = 1;
			var intsingledigit = 0;
			var intdoubledigit = 0;
			var strNum 	= strFixFormat + ToString(strRunNumWithZero);		
			var strFinalChkNum = """";	
			intLength  = ToInteger(strNum.length)-1;			

//			blnChecksumReq = bcNumberGen.GetFieldValue(""Checksum Required"");
			blnIsChekDef = ""Y"";
			if(blnChecksumReq == ""Y""){
				LuhnAlgorithm(strNum,intLength,intCount,intChecksum1,intdoubledigit,intsingledigit,strFinalChkNum) 
			}
			
		}
	}
//RK:21-04-2006
			var strNum 	= strFixFormat + ToString(strRunNumWithZero);
			psfnArgs.SetProperty(""blnCdCheck"",blnCdCheck);
			psfnArgs.SetProperty(""blnrulComCheck"",blnrulComCheck);
//RK
		with(bcNumberMaster){
			
			NewRecord(1);
			SetFieldValue(""Gen Log Id"",bcNumGen.GetFieldValue(""Id""));		
			SetFieldValue(""Type Id"",bcNumGen.GetFieldValue(""Type Id""));
			SetFieldValue(""Number Type Identifier Denorm"",bcNumGen.GetFieldValue(""Type Identifier""));
//RK:20-04-2006
//			ChkVanityMatrix(bcNumberMaster,bcNumGen,strRunNumWithZero,blnCdCheck,blnrulComCheck,bcSpecialNumber,bcRuleComb);
//			ChkVanityMatrix(bcNumberMaster,bcNumGen,strNum,blnCdCheck,blnrulComCheck,bcSpecialNumber,bcRuleComb);
			blnVanityCheck = ChkVanityMatrix(bcNumberMaster,bcNumGen,strNum,psfnArgs,bcSpecialNumber,bcRuleComb);
			blnCdCheck = (psfnArgs.GetProperty(""blnCdCheck"") == ""true"")?true:false;
			blnrulComCheck = (psfnArgs.GetProperty(""blnrulComCheck"") == ""true"")?true:false;
//RK
			if(blnCdCheck == true && blnrulComCheck == true) {
				SetFieldValue(""Special Category Id"",bcSpecialNumber.GetFieldValue(""Id""));	
				SetFieldValue(""Price"",bcSpecialNumber.GetFieldValue(""Price""));				
				
			}
			else if(blnCdCheck == true && blnVanityCheck == true && blnrulComCheck == false ) {
				//if(bcSpecialNumber.LastRecord()){ 
					if(bcSpecialNumber.GetFieldValue(""Default Category Id"")!="""") {
						SetFieldValue(""Special Category Id"",bcSpecialNumber.GetFieldValue(""Default Category Id""));	
						SetFieldValue(""Price"",bcSpecialNumber.GetFieldValue(""Price""));
					}
				//}
			}
			//------------------------------- V2.0 --------------------------------------------------------		
		    /*flgSpecCatRec = bcSpecialNumber.FirstRecord();
			while (flgSpecCatRec) {
		    if (IsSpecialNumber(bcSpecialNumber.GetFieldValue(""Mask""),ToString(strRunNumWithZero),bcSpecialNumber.GetFieldValue(""Sequence Flag""))) {
				bcNumberMaster.SetFieldValue(""Special Category Id"",bcSpecialNumber.GetFieldValue(""Id""));
				//var a = bcSpecialNumber.GetFieldValue(""Id"");
				flgSpecCatRec = false; //exit-while loop
			}
			else
				flgSpecCatRec = bcSpecialNumber.NextRecord();	
			}*/
			
			if(blnBatchCnt == true){
				intBatchNum = intBatchCnt + strRunNumWithZero ;
				SetFieldValue(""Number"",ToInteger(intBatchNum));
			}	
			else
				SetFieldValue(""Number"",ToInteger(intNumber));
			
			if(bcNumGen.GetFieldValue(""Alloc To"") == """"){
				if(bcNumGen.GetFieldValue(""Number Status"") != """"){
					SetFieldValue(""Status"",bcNumGen.GetFieldValue(""Number Status""));
				}
				else
					SetFieldValue(""Status"",bcNumGen.GetFieldValue(""Post Generation Status""));					
			}
			else
				SetFieldValue(""Status"", TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));
				
			SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
			SetFieldValue(""Block Id"",bcNumGen.GetFieldValue(""Block Id""));
			SetFieldValue(""Scheme Id"",bcNumGen.GetFieldValue(""Scheme Id""));
			if(bcNumGen.GetFieldValue(""HLR Id"") != """")
				SetFieldValue(""HLR Id"",bcNumGen.GetFieldValue(""HLR Id""));
			
			if(bcNumGen.GetFieldValue(""Subtype Id"") != """") 
				SetFieldValue(""Subtype Id"",bcNumGen.GetFieldValue(""Subtype Id""));				

//----------------------------------------------------------------------------------
// Setting the number with the fixed value and running value with the delimeters.
// If number type is 'SIM' then appending checksum numbers also to it.
//----------------------------------------------------------------------------------

				if(blnChecksumReq == ""Y"" && blnIsChekDef ==""Y""){
					SetFieldValue(""CheckSum1"",intChecksum1);
					SetFieldValue(""Number String With Checksum"", strWithoutDel + strRunNumWithZero + intChecksum1);	
				}
				else {
					SetFieldValue(""Number String With Checksum"", strWithoutDel + strRunNumWithZero);
				}


			if(bcNumGen.GetFieldValue(""Type Identifier"") == (TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))){
				SetFieldValue(""Number String"",strFixFormatDel + strRunNumWithZero);
				strChksumAlgorithm = TheApplication().InvokeMethod(""LookupValue"", ""RMS_CHKSUM_ALGORITHM"", ""LUHN"");
				
				SetFieldValue(""Number Without Delimiter"",strWithoutDel + strRunNumWithZero);
				
			}	
			else{
				SetFieldValue(""Number String"",strFixFormatDel + strRunNumWithZero);
				SetFieldValue(""Number Without Delimiter"",strWithoutDel + strRunNumWithZero);
//				SetFieldValue(""Number String With Checksum"", strWithoutDel + strRunNumWithZero);
			}	
			WriteRecord();
		}

//-------------------------------------
// Updating the count of Number block
//-------------------------------------				
		if(blnBlockUpdate == true) //due to performance impact
			bsBlkCount.InvokeMethod(""UpdateNumberBlock"",psInputs,psOutputs);
		
//----------------------------------------------------------------
// Setting up the end number and the quantity currently generated
//----------------------------------------------------------------		
		bcNumGen.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));
		bcNumGen.SetFieldValue(""Quantity Str"",intQuantity);
		bcNumGen.SetFieldValue(""End Number Str"",strRunNumWithZero);
		bcNumGen.SetFieldValue(""End Number"",intNumber);
		bcNumGen.SetFieldValue(""SIM Order Raised"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""NO""));
		bcNumGen.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
		
		intQuantity	= intQuantity + 1;
		bcNumGen.WriteRecord();	
	}
	
	bcNumGen.SetFieldValue(""Status"",(TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""GENERATED"")));
	bcNumGen.WriteRecord();

	with(bcNMBlock){
		ActivateField(""Next Start Number"");
		ClearToQuery();
		SetSearchSpec(""Id"",bcNumGen.GetFieldValue(""Block Id""));
		ExecuteQuery();
		FirstRecord();
	}
	
//------------------------------------------------------------------------------
//Calculating the Next Starting Number for the selected Scheme and Number Block	
//------------------------------------------------------------------------------
	if(ToInteger(bcNMBlock.GetFieldValue(""Next Start Number"")) == ToInteger(bcNumGen.GetFieldValue(""Start String Number""))){
		
		strSearchExpr = ""[Status] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""GENERATED"")+
						""' AND [Scheme Id] = '"" + bcNumGen.GetFieldValue(""Scheme Id"") +
						""' AND [Block Id] = '"" + bcNumGen.GetFieldValue(""Block Id"") + ""'"";
						
								
		with(bcNumberGen){
			ClearToQuery();
			SetSortSpec(""Start Number Numeric(ASCENDING)"");
			SetSearchExpr(strSearchExpr);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}
	
		while(blnIsRecord){
			intCurrNumber 	= bcNumberGen.GetFieldValue(""End Number"");
			blnIsRecord		= bcNumberGen.NextRecord();
			if(blnIsRecord){
				
				if(ToInteger(intCurrNumber)+1 != ToInteger(bcNumberGen.GetFieldValue(""Start Number""))){
					strRunNumWithZero = ToInteger(intCurrNumber)+1;
					break;
				}
				else
					continue;		
			}
			else
				strRunNumWithZero = ToInteger(intCurrNumber)+1;
		}
	
/*------------------------------   V2.0  -------------------------------
		if(blnBatchCnt == true){
			
			intBatchLength = ToString(intBatchCounter).length;
			
			while(intBatchLength > 0){
				intMaxBatchCounter = ToString(intMaxBatchCounter) + 9;
				intBatchLength = ToInteger(intBatchLength) - 1;
			}	
			
			if(ToInteger(intMaxBatchCounter) >= ToInteger(intBatchCounter))
				strRunNumWithZero = 0;
		}			 
/*-----------------------------------------------------------------------*/				
		if(ToString(strRunNumWithZero).length < intLengthOfRunningValue){
			for(intRunNumLenCnt = ToString(strRunNumWithZero).length; intRunNumLenCnt != intLengthOfRunningValue;intRunNumLenCnt++)
				strRunNumWithZero = ""0"" + strRunNumWithZero;
		}
		bcNMBlock.SetFieldValue(""Next Start Number"",strRunNumWithZero);
		bcNMBlock.WriteRecord();
	}	
		
	
    bcNumberGen		= null;
    bcNumberMaster  = null;
    bcNMBlock		= null;
    
    boNumberScheme  = null;
    boNumberGen		= null;
    bcRuleComb      = null;
    boSysPref		= null;
    bcSysPref		= null;
    
    psInputs		= null;
    psOutputs		= null;
    bsBlkCount		= null;
//2.1 below
	bcSpecialNumber = null;
	boNumberEnquiry = null;
	psfnArgs = null; 
//2.1 above
//--------------------------------------------------
// Display the successfull generation of numbers.
//--------------------------------------------------    
    strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN005"",bcNumGen.GetFieldValue(""Quantity Str""));
	return(strErrVal);
	
}
"/**************************************************************************************
* Name          : RMS NM Number Generation ValidateGeneration Function	         	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Generation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      05/12/2003       *
**************************************************************************************/

function ValidateGeneration(Inputs,Outputs){
	
	var strSchId;
	var strBlkId;
	var strStNum;
	var strBlkStNo;
	var strEndNum;
	var strErrVal = """";

	var intQty;
	var intStNum;
	var intEndNum;
	var intObjectId;
	var intCount;
	var intBlkStrNum;
	var intBlkEndNum;


	strSchId    = Inputs.GetProperty(""Scheme Id"");
	strBlkId    = Inputs.GetProperty(""Block Id"");
		
	intQty    	= ToNumber(Inputs.GetProperty(""Quantity Str""));
	intStNum  	= ToNumber(Inputs.GetProperty(""Start String Number""));
	strStNum	= Inputs.GetProperty(""Start String Number"");	
	strBlkStNo	= Inputs.GetProperty(""Block Starting String Number"");
	intObjectId	= Inputs.GetProperty(""Object Id"");
	intBlkStrNum = Inputs.GetProperty(""Block Start Num"");
	intBlkEndNum = Inputs.GetProperty(""Block End Num"");

	
//-------------------------------------------------------------------------
// If quantity is not specified then assume the quantity requested is '1'
//-------------------------------------------------------------------------
	if(intQty == """" || intQty == 0)
		intQty = 1;
		
//-----------------------------------------------------------
// Check if numeric value has been entered for start number.
//-----------------------------------------------------------	
	for(intCount=0;intCount<(ToString(strStNum).length);intCount++){
		if(!(Clib.isdigit(strStNum.charAt(intCount))))
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSGEN009"");
	}		
		
	if(strErrVal == """"){
		intEndNum	= intQty + intStNum - 1;
		strEndNum	= ToString(intEndNum);
		
//-------------------------------------------------------------------------------------------
// Calling the function which calculates the end number and check the concurrency of numbers.	
//-------------------------------------------------------------------------------------------
		strErrVal = PopulateEndNum(intObjectId,strSchId,strBlkId,intQty,intStNum,strStNum,strBlkStNo,intEndNum,strEndNum,intBlkStrNum,intBlkEndNum);
	
		if(strErrVal == """"){

//--------------------------------------
// Setting the end number and quantity	
//--------------------------------------
			Outputs.SetProperty(""Start String Number"",strStNum);
			Outputs.SetProperty(""End Number Str"",strEndNum);
			Outputs.SetProperty(""Quantity Str"",intQty);
		}
	}	
	return(strErrVal);

}
"/**************************************************************************************
* Name          : NM Number Inventory Service Change Inventory Function				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Function for changing the inventory.    	                          *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     			Comments     Reviewed Date        *
***************************************************************************************
*                                                                                     *
* 10/12/2003 	 1.0   		MBT   					Created       12/12/2003	      *
**************************************************************************************/

function ChangeInventory(&bcNumberInventory,&bcNumberAllInventory,&bcNumberMaster,&bcNMBlock,Inputs,strSearchExpr)
{

	var intCount = 1;
	var intObjectId;
	var intAvailableQty = 0;
	var intQuantity;
	var intStartNum;
	var intEndNum;
	
	var strSearchExpr;
	var strNumSearchExpr;
	var strToStatus;
//	var strToClass;
	var strToPrice;
	var strToInventory;
	var strToType;
	var strToSchemeId;
	var strToBlockId;
	var strNumStatus;
	var strTypeIdFrom = """";
	var strTypeIdTo = """";
	var strErrVal ="""";
	var strEndNum = """";
	var strFromStatus;
	var strFromBlockId;
	var strFromSchemeId;
	var strIsAssociated;
	
	
	var blnIsRecord;
	var dtCreated;

	var bsUpdateBlock;
	
	var prsInputs   = TheApplication().NewPropertySet();
	var prsOutputs  = TheApplication().NewPropertySet();
	
	bsUpdateBlock =  TheApplication().GetService(""RMS RMS Block Calc"");
	
	intObjectId 	= Inputs.GetProperty(""Object Id"");
	strFromStatus 	= Inputs.GetProperty(""FromStatus"");
	strFromSchemeId = Inputs.GetProperty(""SchemeId"");
	intQuantity     = ToInteger(Inputs.GetProperty(""Quantity""));
	intStartNum     = ToInteger(Inputs.GetProperty(""StartNumber""));

	
	with(bcNumberInventory){
		ActivateField(""Quantity"");
		ActivateField(""Start Number"");
		ActivateField(""Generated Number"");
		ActivateField(""To Inventory"");
//		ActivateField(""To Class"");
		ActivateField(""To Status"");
		ActivateField(""To Price"");
		ActivateField(""To Type"");
		ActivateField(""Scheme Id"");
		ActivateField(""HLR Id"");
		ActivateField(""To Scheme Id"");
		ActivateField(""Action"");
		ActivateField(""Created"");
		ActivateField(""Change Inventory Flag"");
		ActivateField(""End Number"");
		ActivateField(""End Number String"");
		ActivateField(""Quantity"");
		ActivateField(""From Inv TypeIdentifierId"");
		ActivateField(""To Inv TypeIdentifierId"");
		ClearToQuery();
		SetSearchSpec(""Id"",intObjectId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();

		if(blnIsRecord)
		{
		    strToStatus		=	GetFieldValue(""To Status"");
//			strToClass		=	GetFieldValue(""To Class"");
			strToPrice 	 	=	GetFieldValue(""To Price"");
			strToInventory	=	GetFieldValue(""To Inventory"");
			strToType  		=	GetFieldValue(""To Type"");
			strToSchemeId 	=	GetFieldValue(""To Scheme Id"")
			dtCreated		=	GetFieldValue(""Created"");
			strTypeIdFrom	=   GetFieldValue(""From Inv TypeIdentifierId"");
			strTypeIdTo		=   GetFieldValue(""To Inv TypeIdentifierId"");
		}
	}

//-------------------------------------------------------------------------------------
// Inform the user to refresh the applet if another user is accessing the same record.
//-------------------------------------------------------------------------------------
	if(bcNumberInventory.GetFieldValue(""Action"") == (TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""COMPLETE"")) || bcNumberInventory.GetFieldValue(""Action"")== (TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"")))
	{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNIM003"");
		return(strErrVal);
	}
	else
	{
//-------------------------------------------------------
// If start number isnt available then inform the user.
//-------------------------------------------------------
		if(bcNumberMaster.FirstRecord())
		{
			if(bcNumberMaster.GetFieldValue(""Number"")!= intStartNum)
			{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNIM005"");
				return(strErrVal);
			}

			intCount = bcNumberInventory.GetFieldValue(""Quantity"");
	
			blnIsRecord = bcNumberMaster.FirstRecord();

			while(intCount > 0 && blnIsRecord)
			{
				intAvailableQty = intAvailableQty + 1;
				strEndNum = bcNumberMaster.GetFieldValue(""Number String"");
				intEndNum = bcNumberMaster.GetFieldValue(""Number"");
				intCount = intCount-1;
				blnIsRecord = bcNumberMaster.NextRecord();
			}

//----------------------------------------------------------
// If quantity of numbers arnt available then inform user.	
//----------------------------------------------------------			
			if(intCount >0)
			{	
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNIM001"",intAvailableQty);
				return(strErrVal); 
			}
		}
		else
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNIM005"");
			return(strErrVal); 
		}		
		
		bcNumberInventory.SetFieldValue(""End Number"",intEndNum);
		bcNumberInventory.SetFieldValue(""End Number String"",strEndNum);
        bcNumberInventory.SetFieldValue(""Action"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
		bcNumberInventory.WriteRecord();
		RefreshBC();
		
		strErrVal = CheckConcurrency(bcNumberAllInventory,dtCreated,Inputs);
		if(strErrVal != """")
			return(strErrVal);

//-------------------------------------------------------------------------	
// Querying on Number Block using 'From Scheme Id' to get 'From Block Id'
//-------------------------------------------------------------------------
		with(bcNMBlock){
			ActivateField(""Available Quantity"");
			ClearToQuery();
			SetSearchSpec(""Scheme Id"",strFromSchemeId);
			ExecuteQuery();

			if(FirstRecord())
				strFromBlockId = GetFieldValue(""Id"");

//------------------------------------------------------------------
// Querying on Number Block using 'To Scheme Id' to get 'To Block Id'	
//------------------------------------------------------------------
			if(strFromSchemeId != strToSchemeId){
				ClearToQuery();
				SetSearchSpec(""Scheme Id"",strToSchemeId);
				ExecuteQuery();
				if(FirstRecord()){
					strToBlockId = GetFieldValue(""Id"");
//-------------------------------------------------------------------------------------------------		
// Raising an error if the Quantity in the 'To Block' is insufficient to transfer from 'From Block'
//-------------------------------------------------------------------------------------------------				
					ClearToQuery();
					SetSearchSpec(""Id"",strToBlockId);
					ExecuteQuery();
					if(FirstRecord())
						intAvailableQty = bcNMBlock.GetFieldValue(""Available Quantity"");
				
					if(intAvailableQty < intQuantity){
						strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNIM002"",intAvailableQty);
						return(strErrVal);
					}
				}
			}
			else
				strToBlockId = strFromBlockId ;
								
		}	
		
		
		blnIsRecord = bcNumberMaster.FirstRecord();
				
		with(bcNumberMaster){					 													
//------------------------------------------------------------------
// Setting the values in the Number master for the transfered number.
//------------------------------------------------------------------
			for(intCount=0;intCount<intQuantity;intCount++)
			{
				strNumStatus    = GetFieldValue(""Status"");
				strIsAssociated = GetFieldValue(""Is Associated"");
						
			/*	if(strToClass != """")
					SetFieldValue(""Class"",strToClass);	*/
				if(strToPrice != """")
					SetFieldValue(""Price"",strToPrice);
				if(strToType != """")
					SetFieldValue(""Special Category Type"",strToType);
				if(strTypeIdFrom != strTypeIdTo)
					SetFieldValue(""Type Id"",strTypeIdTo);

				SetFieldValue(""Inv Trans Id"",intObjectId);
			
				
//------------------------------------------------------------------------------------------------
//If the 'From Status' is blank or status is Reserved or Assigned then To Status is not changed.
//------------------------------------------------------------------------------------------------
				if((strFromStatus =="""") 
								|| 
					(strNumStatus != TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE"")) 
								|| 
					(strNumStatus != TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""))
								||
					(strNumStatus != TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE""))){
					SetFieldValue(""Status"",strNumStatus);
					strFromStatus = strNumStatus;
				}	
				else if((strFromStatus !="""") && (strToStatus == strFromStatus))
					SetFieldValue(""Status"",strFromStatus);
				
//--------------------------------------------------------------------------------------------------------						
//If 'From Block' and ' To Block' are different then changing the scheme id and block id in Number Master 
//and then updating the number block information depending on the status of number.
//--------------------------------------------------------------------------------------------------------
				if(strToBlockId != strFromBlockId){
					
					SetFieldValue(""Scheme Id"",strToSchemeId);		
					SetFieldValue(""Block Id"",strToBlockId);		
					WriteRecord();
						
					if((strToStatus =="""") || (strIsAssociated == ""Y""))	
						strToStatus = strNumStatus;	
					else{
						SetFieldValue(""Status"",strToStatus);
						SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));		
						WriteRecord();	
					}
					prsInputs.SetProperty(""From Status"",strFromStatus);
					prsInputs.SetProperty(""To Status"","""");
					prsInputs.SetProperty(""Object Id"",strFromBlockId);
						
					bsUpdateBlock.InvokeMethod(""UpdateNumberBlock"",prsInputs,prsOutputs);
						
					if((strFromStatus != """")&&(strToStatus ==""""))
						strToStatus = strFromStatus;
													
					prsInputs.SetProperty(""From Status"","""");
					prsInputs.SetProperty(""To Status"",strToStatus);
					prsInputs.SetProperty(""Object Id"",strToBlockId);
					bsUpdateBlock.InvokeMethod(""UpdateNumberBlock"",prsInputs,prsOutputs);
				
//---------------------------------------------------------------------------------------
// If the block hasnt changed but status has then updating the number block information.	
//---------------------------------------------------------------------------------------			
				} 
				else if(strToStatus != strFromStatus){	
					if(strToStatus != """"){
						SetFieldValue(""Status"",strToStatus);
						SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
						WriteRecord();
						prsInputs.SetProperty(""From Status"",strFromStatus);
						prsInputs.SetProperty(""To Status"",strToStatus);
						prsInputs.SetProperty(""Object Id"",strToBlockId);
						bsUpdateBlock.InvokeMethod(""UpdateNumberBlock"",prsInputs,prsOutputs);
					}
				}
				blnIsRecord = NextRecord();
			}
		}
		
		bcNumberInventory.SetFieldValue(""Change Inventory Flag"",""Y"");
		bcNumberInventory.SetFieldValue(""Action"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""COMPLETE""));
		bcNumberInventory.WriteRecord();
	}
	
	prsInputs		= null;
	prsOutputs		= null;
	bsUpdateBlock	= null;
	
	return(strErrVal);	
	
}
"/**************************************************************************************
* Name          : NM Number Inventory Service CheckConcurrancy Function				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Function To check for concurrency.            	                  *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     			Comments     Reviewed Date        *
***************************************************************************************
*                                                                                     *
* 10/12/2003 	 1.0   		MBT   					Created       12/12/2003	      *
**************************************************************************************/

function CheckConcurrency(&bcNumberAllInventory,dtCreated,Inputs){
	
	var strCompleted;
	var strSearchExpr = """";
	var strErrVal = """";
		
	var dtCreated;
	var intStartNum;
	var intEndNum;
	var intObjectId;
	var intSchemeId;
	var blnIsRecord;
		
	strCompleted 	= TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"",""COMPLETE"");
	intStartNum     = ToInteger(Inputs.GetProperty(""StartNumber""));
	intEndNum 		= ToInteger(Inputs.GetProperty(""EndNumber""));
	intSchemeId     = Inputs.GetProperty(""SchemeId"");
	intObjectId		= Inputs.GetProperty(""Object Id"");


//----------------------------------------------------------------------
//   Checking for records which are overlapping in Number Inventory 
//----------------------------------------------------------------------

	strSearchExpr 	= ""[Action] <> '"" + strCompleted + ""' AND [Created] < '"" + dtCreated + ""' AND [Id] <> '"" + intObjectId + ""' AND [Scheme Id] = '"" + intSchemeId + ""'"" ;

	with(bcNumberAllInventory){
		ActivateField(""Start Number"");
		ActivateField(""End Number"");
		ActivateField(""Action"");
		ActivateField(""Created"");
		ActivateField(""Scheme Id"");
		ActivateField(""Start Number String"");
		ActivateField(""End Number String"");
		ClearToQuery();
		SetSearchExpr(strSearchExpr);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	
		while(blnIsRecord){
		
			if((intStartNum >= (GetFieldValue(""Start Number""))) && (intStartNum <= (GetFieldValue(""End Number"")))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNIM004"",GetFieldValue(""Start Number String""),GetFieldValue(""End Number String""));
				return(strErrVal);
			}	
				
			if((intEndNum >= (GetFieldValue(""Start Number""))) && (intEndNum <= (GetFieldValue(""End Number"")))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNIM004"",GetFieldValue(""Start Number String""),GetFieldValue(""End Number String""));
				return(strErrVal);
			}	
			
			if((intStartNum <= (GetFieldValue(""Start Number""))) && (intEndNum >= (GetFieldValue(""End Number"")))){
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNIM004"",GetFieldValue(""Start Number String""),GetFieldValue(""End Number String""));
				return(strErrVal);
			}
			
			blnIsRecord = NextRecord();	
		}
	}
  return(strErrVal)
}
"/**************************************************************************************
* Name          : NM Number Inventory Service PopulateEndNum Function				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Function to populate the end number.     	                          *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     			Comments     Reviewed Date        *
***************************************************************************************
*                                                                                     *
* 10/12/2003 	 1.0   		MBT   					Created       12/12/2003	      *
**************************************************************************************/

function PopulateEndNum(bcNumberMaster,Inputs,Outputs,intQuantity){

	var strErrVal ="""";
	var strEndNum;
	
	var intCount; 
	var intAvailQty = 0;
	var intEndNum;
	var intNumber;
	
	var blnIsRecord;
			
	blnIsRecord  = bcNumberMaster.FirstRecord();
	intCount = intQuantity;
	
//------------------------------------------------------------------------
// Raising an error if the Quantity required to transfer is not available 
//------------------------------------------------------------------------	
	while(intCount>0){
		if(blnIsRecord){
			intAvailQty = intAvailQty + 1;
			strEndNum = bcNumberMaster.GetFieldValue(""Number String"");
			intEndNum = bcNumberMaster.GetFieldValue(""Number"");
			Outputs.SetProperty(""EndNumber"",intEndNum);
			Outputs.SetProperty(""EndNumberString"",strEndNum);
			blnIsRecord = bcNumberMaster.NextRecord();
			intCount = intCount-1;
		}
		else
			break;
	}
	
	if(intCount >0){	
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNIM001"",intAvailQty);
		return(strErrVal); 
	}
   return(strErrVal);
}
"/**************************************************************************************
* Name          : NM Number Inventory Service RefreshBC Method		        		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Inventory Code File            	                          *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     			Comments     Reviewed Date        *
***************************************************************************************
*                                                                                     *
* 10/12/2003 	 1.0   		MBT   					Created       12/12/2003	      *
**************************************************************************************/

function RefreshBC(){

//--------------------------------------------------------------
//Calling the Business Service to refresh the Business component
//--------------------------------------------------------------
	
	var bsNMInv;
	var psInput  = TheApplication().NewPropertySet();
	var psoutput = TheApplication().NewPropertySet();
				
	bsNMInv = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
	psInput.SetProperty(""Business Object Name"",""RMS NM Number Inventory Maintenance"");
	psInput.SetProperty(""Business Component Name"",""RMS NM Number Inventory Maintenance"");
	bsNMInv.InvokeMethod(""Refresh Business Component"",psInput,psoutput);
	
	psInput		= null;
	psoutput	= null;
	bsNMInv		= null;
}
"/******************************************************************************************
* Name          : NM Number Inventory Service PreInvoke Method					 	      * 
* Author        : Mahindra British Telecom                                                *
* Description   : NM Number Inventory Code File            	                              *
*                                                                                         *
* Amendment Details                                                                       *
*******************************************************************************************
* Date    		Version  	AmendedBy Comments								Reviewed Date *
*******************************************************************************************
*                                                                                          *
* 10/12/2003 	 1.0   		MBT 	  Created							    12/12/2003	   *
* 23/06/2006 	 1.1   		ARUNJ 	  SiebelES#12 Incorporated condition after ExecuteQuery*
*******************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var boNumberInventory;
	var boNMBlock;
			
	var bcNumberInventory;
	var bcNumberAllInventory;
	var bcNumberMaster;
	var bcNMBlock;
	
	var strFromStatus  ;
	var strFromSchemeId;
	var strFromPrice ;
	var strFromType ;
	var intQuantity;
	var strHLRId;
	var strIsAssociated = ""N"";
//	var strFromClass;
	var strSearchExpr;
	var strErrVal ="""";
		
	var intNumber;

	var strErrVal ="""";
	var intReturn = ContinueOperation;
	
	try{				

		boNumberInventory   =  TheApplication().GetBusObject(""RMS NM Number Inventory Maintenance"");
		bcNumberInventory   =  boNumberInventory.GetBusComp(""RMS NM Number Inventory Maintenance"");
		bcNumberAllInventory=  boNumberInventory.GetBusComp(""RMS NM Number All Inventory Maintenance"");
		bcNumberMaster	    =  boNumberInventory.GetBusComp(""RMS NM Number Master For Inventory Maintenance"");
		boNMBlock	  	    =  TheApplication().GetBusObject(""RMS NM Number Scheme"");
		bcNMBlock	        =  boNMBlock.GetBusComp(""RMS NM Number Block"");
	
		
		strFromStatus 		= Inputs.GetProperty(""FromStatus"");
		strFromSchemeId 	= Inputs.GetProperty(""SchemeId"");
		strFromPrice   		= Inputs.GetProperty(""Price"");
		strFromType     	= Inputs.GetProperty(""Type"");
		intQuantity     	= ToInteger(Inputs.GetProperty(""Quantity""));
		strHLRId        	= Inputs.GetProperty(""HLRId"");
		intNumber       	= ToInteger(Inputs.GetProperty(""StartNumber""));
//		strFromClass    	= Inputs.GetProperty(""Class"");
	
//----------------------------------------------------------------------------------------
// Creating a search expression to get the Numbers from Number Master using Start Number,quantity 
//  and other values entered in 'From' fields.
//----------------------------------------------------------------------------------------	
		
        strSearchExpr  = ""[Scheme Id] = '"" + strFromSchemeId + ""' AND [Number] >= '"" + intNumber + ""'"";
		
		if(strFromStatus != """"){
			if((strFromStatus == TheApplication().InvokeMethod(""LookupValue"",""NM_INVENTORY_FROM_STATUS"", ""AVAILABLE"") ) 
			|| 
			(strFromStatus == TheApplication().InvokeMethod(""LookupValue"",""NM_INVENTORY_FROM_STATUS"", ""NOT AVAILABLE""))
			|| 
			(strFromStatus == TheApplication().InvokeMethod(""LookupValue"",""QUARANTINE"", ""NOT AVAILABLE"")) )
			strSearchExpr = strSearchExpr + "" AND ([Is Associated] = '"" + strIsAssociated + ""' OR [Is Associated] IS NULL) AND [Status] = '"" + strFromStatus + ""'"";
			else
				strSearchExpr = strSearchExpr + "" AND [Status] = '"" + strFromStatus + ""'"";
		}
		if(strHLRId != """")
			strSearchExpr  = strSearchExpr + "" AND [HLR Id] = '"" + strHLRId  + ""'"";				
//		if(strFromClass != """")
//			strSearchExpr = strSearchExpr  + "" AND [Class] = '"" + strFromClass + ""'"";				
		if(strFromType != """")
			strSearchExpr  = strSearchExpr + "" AND [Special Category Type] = '"" + strFromType + ""'"";				
		if(strFromPrice != """")
			strSearchExpr = strSearchExpr + "" AND [Price] = '"" + strFromPrice+ ""'"";				
	
		with(bcNumberMaster){					 															
			ActivateField(""Status"");
			ActivateField(""Scheme Id"");
			ActivateField(""Number"");
			ActivateField(""Number String"");
//			ActivateField(""Class"");
			ActivateField(""Price"");
			ActivateField(""Special Category Type"");
			ActivateField(""Inv Trans Id"");
			ActivateField(""Is Associated"");
			ActivateField(""Block Id"");
			ActivateField(""Current Date"");
			ActivateField(""Status Date"");
			ActivateField(""Type Id"");
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(strSearchExpr);
			ExecuteQuery();
// below 1.1
//			FirstRecord();
// above 1.1
		}
// below 1.1
		if (bcNumberMaster.FirstRecord()){
// above 1.1
		
//--------------------------------------------------------------------------
// 	Changing the Scheme/Inventory of the Numbers with all the validations.
//--------------------------------------------------------------------------	
		switch (MethodName)	 {
		
  			case ""ChangeInventory"" :
				intReturn =CancelOperation;
                strErrVal =	ChangeInventory(bcNumberInventory,bcNumberAllInventory,bcNumberMaster,bcNMBlock,Inputs,strSearchExpr);
				if(strErrVal != """")
				{
                    bcNumberInventory.SetFieldValue(""Action"",TheApplication().InvokeMethod(""LookupValue"",""RMS_OPR_STATUS"", ""PENDING""));
					bcNumberInventory.WriteRecord();
					RefreshBC();
					TheApplication().RaiseErrorText(strErrVal);
				}
				RefreshBC();
				break;
	
			case ""PopulateEndNum"":
				intReturn =CancelOperation;
				strErrVal =	PopulateEndNum(bcNumberMaster,Inputs,Outputs,intQuantity);
				if(strErrVal != """")								
					TheApplication().RaiseErrorText(strErrVal);
				break;
		}
// below 1.1		
		}	
// above 1.1			
		bcNumberInventory	= null;
		bcNumberAllInventory= null;
		bcNumberMaster   	= null;
		bcNMBlock	     	= null;
		boNumberInventory	= null;
		boNMBlock        	= null;
		return (intReturn);
	
	}catch(e){
	
		
		bcNumberInventory   = null;
		bcNumberAllInventory= null;
		bcNumberMaster   	= null;
		bcNMBlock	     	= null;
		boNumberInventory   = null;
		boNMBlock           = null;
		throw e;
	}
	


}
"/*****************************************************************************************
* Name          : NM Number Redeployment GetNumberDetails Method			 	         * 
* Author        : Mahindra British Telecom                                               *
* Description   : NM Number Redeployment Code File                      			     *
*																					     *
* Amendment Details                                                                      *
******************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date       *
******************************************************************************************
*                                                                                        *
* 12/12/2003	1.0   		   MBT					   	Created       12/12/2003         *
* 30/11/2005	2.0			Ramakrishna 	Changed the Searchspec    30/08/2007		 *
*****************************************************************************************/

function GetNumberDetails(bcNMNumRedeploy,bcNMNumDeploy,bcNumberMaster,Inputs){

	var File ;

	var strFileLine="""";
	var strFileName;
	var strFileType;
	var strRecArr = new Array();
	var strNumArr = new Array();
	//var strImportDate;
	var strNumber;
	var strNumberString;
	var strType;
	var strStatus;
	var strSearchExpr;
	var strFileImportName;
	var strErrVal ="""";
	
	var intRedeployId;
	var intIndex; 
	var intLength;
	var intCount = 0;
	var intRec;
	
	var blnIsRecord;
	var psProperty = TheApplication().NewPropertySet();
			
	strFileName 		= Inputs.GetProperty(""FileName"");
	strFileType 		= ToString(Inputs.GetProperty(""FileType""));
	strFileType 		= Clib.strlwr(strFileType);
	
	if((strFileType!=""csv"")){
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD008"");
		return(strErrVal);
	}
	intIndex    		= strFileName.lastIndexOf(""/"");
	if(intIndex < 0) 
		intIndex    		= strFileName.lastIndexOf(""\\"");
	
	intLength   		= strFileName.length;
	
	strFileImportName 	= strFileName;			
	strFileName       	= strFileName.substring(intIndex +1,intLength);
	strFileName			= strFileName.substring(strFileName.indexOf(""_"")+1);
	strFileName			= strFileName.substring(strFileName.indexOf(""_"")+1);
	//Clib.strftime(strImportDate,""%c"",Clib.localtime(Clib.time()));

	File = Clib.fopen(strFileImportName, ""r"");

//------------------------------------------------
// Raising an error if the file to import is empty
//------------------------------------------------
	
	if ( File == null ){
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD001"",strFileName);
		return(strErrVal);
	}
	else{
	
//------------------------------------------------
// Storing all the records from the file in array
//------------------------------------------------
		
		while(!(Clib.feof(File))){
			strFileLine = """";
			Clib.fscanf(File,""%s"",strFileLine);
			strRecArr[intCount] = strFileLine;
			strNumber = strRecArr[intCount];
			if(strFileLine == """" )
				break;	
//------------------------------------------------------------------------
//Setting the number as property and check the number duplication in file.
//------------------------------------------------------------------------           
          	if(psProperty.PropertyExists(strNumber)){
     			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD004"");
     			return(strErrVal);
     		}
         	else
           		psProperty.SetProperty(strNumber,""""); 
           
           	
			intCount++;
		} 
		
		strType = ToString(strRecArr[0]);
		
		if((strType != TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))&&(strType != TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""))){
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD003"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""),TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""));
			return(strErrVal);
		}
			
		for(intRec=1;intRec<intCount;intRec++){
			var strNum=ToString(strRecArr[intRec]);
			//strSearchExpr = ""[Type Identifier] = '"" + strType + ""' AND [NumString] = '"" + strNum + ""'"";
//2.0 Below		
			strSearchExpr = ""[Number Type Identifier] = '"" + strType + ""' AND [NumStringDelimNoCS] = '"" + strNum + ""'"";
/*	RK 
			if(strType == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
				//strSearchExpr = ""[Type Identifier] = '"" + strType + ""' AND [NumString] = '"" + strNum + ""'"";
				strSearchExpr = ""[Number Type Identifier] = '"" + strType + ""' AND [NumStringDelimNoCS] = '"" + strNum + ""'"";
			if(strType == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""))
				//strSearchExpr = ""[Type Identifier] = '"" + strType + ""' AND [NumStringDelimNoCS] = '"" + strNum + ""'"";
				strSearchExpr = ""[Number Type Identifier] = '"" + strType + ""' AND [NumStringDelimNoCS] = '"" + strNum + ""'"";
*/				
//2.0 Above
//-----------------------------------------------------------------------------
// Querying the number Master using 'Type Identifier' and 'Number String' and
// Checking whether Number is valid.If valid, storing the field values in array
//-----------------------------------------------------------------------------

			with(bcNumberMaster){
				//RK 30-08-07
				//ActivateField(""Type Identifier"");
				ActivateField(""Number Type Identifier"");
				//RK 30-08-07
				ActivateField(""NumStringDelim"");
				//RK 30-08-07	
				//ActivateField(""NumString"");
				//RK 30-08-07	
				ActivateField(""Allocated To"");	
				ActivateField(""Reserved To"");	
				ActivateField(""Class"");	
				ActivateField(""Price"");	
				ActivateField(""Status"");	
				ActivateField(""Special Category Type"");	
				ActivateField(""Type Id"");	
				ActivateField(""Scheme Id"");	

//-----------------------------------------------------------
// Code added for Phase 1A2 for activating dealer name,
// dealer area code and dealer channel code.
//-----------------------------------------------------------
				
				ActivateField(""Dealer Name"");	
				ActivateField(""Dealer Area Code"");	
				ActivateField(""Dealer Channel Code"");	
				
				ClearToQuery();
				SetSearchExpr(strSearchExpr);
				ExecuteQuery();
				blnIsRecord = FirstRecord();
			}
			if(blnIsRecord){
			
//-----------------------------------------------------------
// Code Modified for strNumArr (Kalyan)
// 
//-----------------------------------------------------------
			
			   SetArray(strNumArr,intRec,0 ,""?"",""?"",bcNumberMaster.GetFieldValue(""Id"")); 
			   SetArray(strNumArr,intRec,1 ,""?"",""?"",bcNumberMaster.GetFieldValue(""NumStringDelim"")); 
			   SetArray(strNumArr,intRec,2 ,""?"",""?"",bcNumberMaster.GetFieldValue(""Status"")); 
			   SetArray(strNumArr,intRec,3 ,""?"",""?"",bcNumberMaster.GetFieldValue(""Class"")); 
			   SetArray(strNumArr,intRec,4 ,""?"",""?"",bcNumberMaster.GetFieldValue(""Price"")); 
			   SetArray(strNumArr,intRec,5 ,""?"",""?"",bcNumberMaster.GetFieldValue(""Special Category Type"")); 
			   SetArray(strNumArr,intRec,6 ,""?"",""?"",bcNumberMaster.GetFieldValue(""Type Id"")); 
			   SetArray(strNumArr,intRec,7 ,""?"",""?"",bcNumberMaster.GetFieldValue(""Scheme Id"")); 
			   SetArray(strNumArr,intRec,8 ,""?"",""?"",bcNumberMaster.GetFieldValue(""Allocated To"")); 
			   SetArray(strNumArr,intRec,9 ,""?"",""?"",bcNumberMaster.GetFieldValue(""Dealer Name"")); 
			   SetArray(strNumArr,intRec,10 ,""?"",""?"",bcNumberMaster.GetFieldValue(""Dealer Area Code"")); 
			   SetArray(strNumArr,intRec,11 ,""?"",""?"",bcNumberMaster.GetFieldValue(""Dealer Channel Code"")); 
			    SetArray(strNumArr,intRec,12 ,""?"",""?"",bcNumberMaster.GetFieldValue(""Reserved To"")); 
			   			   
				/*strNumArr[intRec][0] = bcNumberMaster.GetFieldValue(""Id"");
				strNumArr[intRec][1] = bcNumberMaster.GetFieldValue(""NumStringDelim"");
				strNumArr[intRec][2] = bcNumberMaster.GetFieldValue(""Status"");
				strNumArr[intRec][3] = bcNumberMaster.GetFieldValue(""Class"");
				strNumArr[intRec][4] = bcNumberMaster.GetFieldValue(""Price"");
				strNumArr[intRec][5] = bcNumberMaster.GetFieldValue(""Special Category Type"");
				strNumArr[intRec][6] = bcNumberMaster.GetFieldValue(""Type Id"");
				strNumArr[intRec][7] = bcNumberMaster.GetFieldValue(""Scheme Id"");
				strNumArr[intRec][8] = bcNumberMaster.GetFieldValue(""Allocated To"");
//-----------------------------------------------------------
// Code added for Phase 1A2 for storing dealer name,
// dealer area code and dealer channel code.
//-----------------------------------------------------------
				strNumArr[intRec][9] = bcNumberMaster.GetFieldValue(""Dealer Name"");
				strNumArr[intRec][10] = bcNumberMaster.GetFieldValue(""Dealer Area Code"");
				strNumArr[intRec][11] = bcNumberMaster.GetFieldValue(""Dealer Channel Code"");
				strNumArr[intRec][12] = bcNumberMaster.GetFieldValue(""Reserved To"");*/
				
			}
			else{
//--------------------------------------------------------------------
// Raising an error if the number specified in the file doesnt exist.
//--------------------------------------------------------------------
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNRD002"",strRecArr[intRec]);
				Clib.fclose(File);
				return(strErrVal);
			}
		}
	}
	Clib.fclose(File);

//----------------------------------------
// Crating the new record in Redeployment  
//----------------------------------------
		
	with(bcNMNumRedeploy){
		NewRecord(1);
		intRedeployId = GetFieldValue(""Id"");
		SetFieldValue(""Import File Name"",strFileName);
		//SetFieldValue(""Import Date"",strImportDate);
		SetFieldValue(""Import For"",strType);
		WriteRecord();
	}
	
//-----------------------------------------------------------
// Inserting the Numbers in Deployment Detail from the file.
//-----------------------------------------------------------
	for(intCount =1;intCount<ToInteger(strNumArr.length);intCount++){
		with(bcNMNumDeploy){
			var temp1 = ToString(strNumArr[intCount][2]);
			var temp2  = strNumArr[intCount][7];
			
			NewRecord(1);
			SetFieldValue(""Number Id"",strNumArr[intCount][0]);
			SetFieldValue(""Number String"",strNumArr[intCount][1]);
			SetFieldValue(""Redeploy Id"",intRedeployId);
			SetFieldValue(""Current Status"",strNumArr[intCount][2]);
			SetFieldValue(""To Status"",temp1);
			SetFieldValue(""Current Class"",strNumArr[intCount][3]);
			SetFieldValue(""Current Price"",strNumArr[intCount][4]);
			SetFieldValue(""Special Category(Type)"",strNumArr[intCount][5]);
			SetFieldValue(""Type Id"",strNumArr[intCount][6]);
			SetFieldValue(""Scheme Id"",strNumArr[intCount][7]);
			SetFieldValue(""Allocated To"",strNumArr[intCount][8]);
			SetFieldValue(""Reserved To"",strNumArr[intCount][12]);

//-----------------------------------------------------------
// Code added for Phase 1A2 for setting dealer name,
// dealer area code and dealer channel code.
//-----------------------------------------------------------
			SetFieldValue(""From Dealer Name"",strNumArr[intCount][9]);
			SetFieldValue(""From Dealer Area Name"",strNumArr[intCount][10]);
			SetFieldValue(""From Dealer Channel Name"",strNumArr[intCount][11]);

			strStatus = ToString(strNumArr[intCount][2]);
			
				if(((strType == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"")) || (strType == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")))
							&&
				((strStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""NOT AVAILABLE""))||(strStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""ASSIGNED"")))){
						SetFieldValue(""Result"",(TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""COMPLETE"")));
				}
				else
					SetFieldValue(""Result"",(TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""NEW"")));		
								
			WriteRecord();
		}
	}		
		
	File		= null;
	psProperty	= null;
	
	return(strErrVal);
		
}
"/**************************************************************************************
* Name          : NM Number Redeployment Service PreInvokeMethod			 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : NM Number Redeployment Code File                      			  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 16/12/2003	1.0   		   MBT					   	Created       16/12/2003      *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs){
	
	var boNMNumTransfer;
	
	var bcNMNumRedeploy;
	var bcNMNumDeploy;
	var bcNumberMaster;
	
	var strErrVal = """";
	
	var intReturn = ContinueOperation;
	
	try{
	
		boNMNumTransfer = TheApplication().GetBusObject(""RMS NM Number Redeployment"");
		bcNMNumRedeploy = boNMNumTransfer.GetBusComp(""RMS NM Number Redeployment"");
		bcNMNumDeploy   = boNMNumTransfer.GetBusComp(""RMS NM Number Deployment Detail"");
		bcNumberMaster  = boNMNumTransfer.GetBusComp(""RMS NM Number Master Deployment"");
	
		with(bcNMNumRedeploy){
			ActivateField(""Import File Name"");
			ActivateField(""Import Date"");
			ActivateField(""Import For"");
			
		}
		
		with(bcNMNumDeploy){
			ActivateField(""Number String"");
			ActivateField(""NumStringDelim"");
			ActivateField(""Redeploy Id"");
			ActivateField(""Number Id"");
			ActivateField(""To Status"");
			ActivateField(""Special Category(Type)"");
			ActivateField(""Result"");
			ActivateField(""Allocated To"");
			ActivateField(""Reserved To"");
			ActivateField(""Current Class"");
			ActivateField(""Current Price"");
			ActivateField(""Current Status"");
			ActivateField(""Result"");
//-----------------------------------------------------------
// Code added for Phase 1A2 for activating dealer name,
// dealer area code and dealer channel code.
//-----------------------------------------------------------
				
			ActivateField(""From Dealer Name"");	
			ActivateField(""From Dealer Area Name"");	
			ActivateField(""From Dealer Channel Name"");	
			
			
		}
	
		if(MethodName == ""Import""){
		
			intReturn = CancelOperation;		
			strErrVal = GetNumberDetails(bcNMNumRedeploy,bcNMNumDeploy,bcNumberMaster,Inputs);	
			if(strErrVal !=""""){
				TheApplication().RaiseErrorText(strErrVal);
				return(intReturn);
			}
			
	
		}
		
		bcNMNumRedeploy = null;
		bcNMNumDeploy   = null;
		bcNumberMaster  = null;
		boNMNumTransfer = null;
		return (intReturn);
		
	}catch(e){
	
		bcNMNumRedeploy = null;
		bcNMNumDeploy = null;
		bcNumberMaster = null;
		boNMNumTransfer = null;
		throw(e);
	}
}
"// Modified by kalyan for SetArray in PreInvoke Method

function SetArray(arrArray,d1,d2,d3,d4,value)
{
	try{
//var strSTEng = TheApplication().GetProfileAttr(""RMS_ST_ENGINE"");
var strSTEng = ""Y"";
if ((d2 != ""?"")) {
if ((typeof(arrArray[d1]) != "function"")&& (strSTEng == ""Y""))
{
arrArray[d1] = new Array();
}
} else {
arrArray[d1] = value;
return(true);
}
if ((d3 != ""?"")) {
if ((typeof(arrArray[d1][d2]) != "function"")&& (strSTEng == ""Y""))
arrArray[d1][d2] = new Array();
} else {
arrArray[d1][d2] = value;
return(true);
}
if ((d4 != ""?"")) {
if((typeof(arrArray[d1][d2][d3]) != "function"")&& (strSTEng == ""Y""))
arrArray[d1][d2][d3] = new Array();
} else {
arrArray[d1][d2][d3] = value;
return(true);
}
} 
catch(e) {
var test = e.errText;
throw(e);
}
}
"/*****************************************************************************************
* Name          : NM Number Cancel Reservation Numbers Function   			 	  	     * 
* Author        : Mahindra British Telecom                                               *
* Description   : Cancel Reservation of numbers.       					                 *
* Amendment Details                                                                      *
******************************************************************************************
* Date    		Version AmendedBy Comments                              Reviewed Date    *
******************************************************************************************
*                                                                                        *
* 22/12/2003 	1.0   	MBT		   	Created                             28/12/2003       *
* 23/06/2006 	1.1   	ARUNJ		SiebelES#12 Incorporated condition after ExecuteQuery*
*******************************************************************************************/

function CancelReservation(bcResrvNum,bcNumberResrv,strSource){

	var intAssocStartId;
	var intNumId;
	var intHAppointment
	
	var strErrVal = """";
	var strStatusBfrResrv;
	var boVBCDMS;
	var bcVBCDBS;
	
	var blnIsRecord;
	blnIsRecord = bcResrvNum.FirstRecord();

	boVBCDMS = TheApplication().GetBusObject(""Channel Partner""); // 21st june
	bcVBCDBS = boVBCDMS.GetBusComp(""Channel Partner"");
	
	while(blnIsRecord){
		intNumId 			= bcResrvNum.GetFieldValue(""Id"");
		intAssocStartId	  	= bcResrvNum.GetFieldValue(""Assoc Start Id"");
		strStatusBfrResrv   = bcResrvNum.GetFieldValue(""Num Mstr Status Before Reservation"");
		//strStatusBfrResrv 	= bcResrvNum.GetFieldValue(""Status""); 
		
		UpdateCancelResrvNumbers(bcNumberResrv,bcResrvNum);
		
//----------------------------------------------------------------------------------------
//Calling the function which changes the status of number and update into reqd tables 	
//-----------------------------------------------------------------------------------------	 
					
		if(bcResrvNum.GetFieldValue(""Is Associated"") == ""Y""){				
//----------------------------------
// Updating the associated numbers.
//----------------------------------	
			UpdateAssoNumbers(intNumId,intAssocStartId,bcNumberResrv);

//------------------------------------------------------------
// Updating the concatenated number record in CX_NUM_ASS_CNCT.
//------------------------------------------------------------	
			UpdateAssCnctNumbers(intAssocStartId,bcNumberResrv,strStatusBfrResrv);		
		}
        
        bcNumberResrv.SetFieldValue(""End Num"",bcResrvNum.GetFieldValue(""Number""));
        bcNumberResrv.SetFieldValue(""End Num String"",bcResrvNum.GetFieldValue(""Number String""));
		blnIsRecord = bcResrvNum.NextRecord();
	}
	
	if(bcResrvNum.GetFieldValue(""Source System"")  != TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""RMS"")){
		with(bcVBCDBS) {
			ActivateField(""HAPPOINTMENT"");
			ClearToQuery();
			SetSearchSpec(""DEALER_CODE"",bcNumberResrv.GetFieldValue(""Reserved To""));
			ExecuteQuery();		
// below 1.1
//	        if(FirstRecord()) 
//				intHAppointment = GetFieldValue(""HAPPOINTMENT"");
// above 1.1
		}
// below 1.1
		if (bcVBCDBS.FirstRecord()){
// above 1.1		
			intHAppointment = ToInteger(bcVBCDBS.GetFieldValue(""HAPPOINTMENT"")) + 1;
			bcVBCDBS.SetFieldValue(""HAPPOINTMENT"",intHAppointment);		
			bcVBCDBS.WriteRecord();
// below 1.1
		}
// above 1.1
	}
	if(strSource != TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""DSO"")) 
		strErrVal = ""RMSRSR011"";
	
	bcVBCDBS	= null;
	boVBCDMS	= null;
		
	return(strErrVal);	
}
function CheckAuthentication(bcResrvNum)
{
	var strErrVal = """";
	var blnIsRecord;
	var logUsrPosId = TheApplication().PositionId();
	var logUsrName = TheApplication().LoginName();
	var logUsrId = TheApplication().LoginId();
	var recUsrName;
	var recUsrId;
	var recUsrPosId;
	var chkNext = ""True"";
	
	blnIsRecord = bcResrvNum.FirstRecord();
	
	while(blnIsRecord && (chkNext == ""True"")){
		
		recUsrName = bcResrvNum.GetFieldValue(""Reserved By"");
		recUsrId = bcResrvNum.GetFieldValue(""Reserved By Login"");
		if (recUsrId != logUsrId){
			recUsrPosId = GetPrimaryPosition(recUsrId);
			chkNext = CheckPosition(logUsrPosId,recUsrPosId);
		} 
		blnIsRecord = bcResrvNum.NextRecord();	
	}
	if (chkNext != ""True""){
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR014"");
	}
	return strErrVal;
}
function CheckPosition(logUsrPosId,recUsrPosId)
{
	var blnIsRecord;
	var prtPosId;
	var chkNext;
	var posBO = TheApplication().GetBusObject(""Position"");
	var posBC = posBO.GetBusComp(""Position"");
	with (posBC){
		SetViewMode(AllView);

		ActivateField(""Parent Position Id"");
		ClearToQuery();
		SetSearchSpec(""Id"",recUsrPosId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
		if (blnIsRecord){
			prtPosId = GetFieldValue(""Parent Position Id"");	
			if (prtPosId == logUsrPosId){
				chkNext = ""True"";	
			}else if (prtPosId == """" || prtPosId == null){
				chkNext = ""False"";
			}else{
				chkNext = CheckPosition(logUsrPosId,prtPosId);
			}
		}

	}
	posBC = null;
	posBO = null;
	return chkNext;
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation CheckQuantity Function					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Checks the overlapping of numbers as quantity specified.            *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      26/12/2003       *
**************************************************************************************/

function CheckQuantity(bcNumberResrv,&dtResrvEnd,strSource,strChkAuth){

	var boNMResrv;
	var boNMEnquiry;
	var bcNMResrv;
	var bcResrvNum;
	
	
	
	var strReservedTo;
	var strSearchExpr = """";
	var strErrVal = """";
	var strSearchStatus;
	var strOperation;
	var strEndNum;

		
	var blnIsRecord;
	var blnIsSequence;
	
	var intStartNum;
	var intEndNum;
	var intQuantity;
	var intNumId;
			
	boNMResrv		= TheApplication().GetBusObject(""RMS NM Number Reservation"");
	bcNMResrv		= boNMResrv.GetBusComp(""RMS NM Number Reservation"");		

	boNMEnquiry		= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcResrvNum		= boNMEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	

	
	intStartNum		= bcNumberResrv.GetFieldValue(""Start Num"");
	intEndNum		= bcNumberResrv.GetFieldValue(""End Num"");
	strEndNum		= bcNumberResrv.GetFieldValue(""End Num String"");
	intQuantity		= bcNumberResrv.GetFieldValue(""Qty"");
	intNumId		= bcNumberResrv.GetFieldValue(""Number Id"");
	blnIsSequence	= bcNumberResrv.GetFieldValue(""Is Sequence"");
	strOperation    = bcNumberResrv.GetFieldValue(""Operation"");
	

	
		
	if(strOperation == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_OPERATION"", ""RESERVE"")){
		strSearchStatus = 	""[Status] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"")+""' AND "";
		strSearchStatus = 	strSearchStatus + ""[Is Associated] = 'N' AND "";
		strSearchStatus = 	strSearchStatus + ""[Allocated To] = '""+ bcNumberResrv.GetFieldValue(""ReservedFromCode"")+""'"";
	}
	else if(strOperation == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_OPERATION"", ""CANCEL RESERVATION"")) {
		//strSearchStatus = 	""[Status] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED"")+""' AND "";
		strSearchStatus = 	""[Status] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED"")+""'"";
		//strSearchStatus = 	strSearchStatus + ""[Reserved To] = '""+ bcNumberResrv.GetFieldValue(""Reserved To"")+""'"";
	}
		
	
	strSearchExpr  	= 	""[Scheme Id] = '"" + bcNumberResrv.GetFieldValue(""Scheme Id"") +  
						""' AND [Block Id] = '"" + bcNumberResrv.GetFieldValue(""Block Id"") +
						//""' AND [Category Name] = '""+ bcNumberResrv.GetFieldValue(""Special Category"") + 
						""' AND [Number] >= "" + intStartNum + "" AND "" + strSearchStatus;
	
	if(bcNumberResrv.GetFieldValue(""Special Category"") != """")
					strSearchExpr = strSearchExpr + "" AND [Category Name] = '""+bcNumberResrv.GetFieldValue(""Special Category"")+""'"";
				else
					strSearchExpr = strSearchExpr + "" AND [Category Name] = ''"";
//-------------------------------------------------------------------
// If Is Sequence is selected then calculating end number so as to 
// retrieve only that set of numbers.
//-------------------------------------------------------------------
	intEndNum = ToInteger(intStartNum) + ToInteger(intQuantity) - 1;
	if(blnIsSequence == ""Y"")
		strSearchExpr = strSearchExpr + "" AND [Number] <= "" + intEndNum + """"; 
	
//-----------------------------------------------------------------------
// 	
	
	strReservedTo = bcNumberResrv.GetFieldValue(""Reserved To"");
	strErrVal = CheckReservationQuota(strOperation,strReservedTo,intQuantity,strSource);
	
	
		
//---------------------------
// Populate the end number.
//---------------------------
	if(strErrVal == """"){
		strErrVal = PopulateEndNum(intNumId,strSearchExpr,blnIsSequence,intStartNum,intEndNum,strEndNum,intQuantity);
	
	    if(strErrVal == """"){
	
			strSearchExpr = """";
			strSearchExpr	= 	""[Scheme Id] = '"" + bcNumberResrv.GetFieldValue(""Scheme Id"") +  
								""' AND [Block Id] = '"" + bcNumberResrv.GetFieldValue(""Block Id"") +
								""' AND [Operation] = '"" + bcNumberResrv.GetFieldValue(""Operation"") +
								""' AND ([Status] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING"") +
					 			""' OR [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING"") +
					 			""' ) AND [Id] <> '"" + bcNumberResrv.GetFieldValue(""Id"") + 
					 			""' AND [Created] < '"" + bcNumberResrv.GetFieldValue(""Created"") + ""'"";
							 	
	//-------------------------------------------------------------------------------------------------------
	//Checking for the concurrency of the start number and the end number selected for the given operation
	//-------------------------------------------------------------------------------------------------------
			with(bcNMResrv){
				ClearToQuery();
				ActivateField(""Scheme Id"");
				ActivateField(""Block Id"");
				ActivateField(""Status"");
				ActivateField(""Created"");
				ActivateField(""Reserved For"");
				ActivateField(""Start Num"");
				ActivateField(""End Num"");
				ActivateField(""Operation"");
				ActivateField(""Start Num String"");
				ActivateField(""End Num String"");
				SetSearchExpr(strSearchExpr);
				ExecuteQuery();
				blnIsRecord = FirstRecord();
			}
			
			while(blnIsRecord){
	//--------------------------------------------------
	// Display an error if start number is overlapping.	
	//--------------------------------------------------	
		
				if((intStartNum >= ToInteger(bcNMResrv.GetFieldValue(""Start Num""))) && (intStartNum <= ToInteger(bcNMResrv.GetFieldValue(""End Num"")))){
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR007"",bcNMResrv.GetFieldValue(""Start Num String""),bcNMResrv.GetFieldValue(""End Num String""));	
					break;
				}	
	//------------------------------------------------
	// Display an error if end number is overlapping.
	//------------------------------------------------				
				else if((intEndNum >= ToInteger(bcNMResrv.GetFieldValue(""Start Num""))) && ToInteger(intEndNum <= (bcNMResrv.GetFieldValue(""End Num"")))){
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR008"",bcNMResrv.GetFieldValue(""Start Num String""),bcNMResrv.GetFieldValue(""End Num String""));	
					break;
				}	
				
	//----------------------------------------------------------------
	// Display an error if both start and end number are overlapping.
	//----------------------------------------------------------------				
				else if((intStartNum <= ToInteger(bcNMResrv.GetFieldValue(""Start Num""))) && ToInteger(intEndNum >= (bcNMResrv.GetFieldValue(""End Num"")))){
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR009"",bcNMResrv.GetFieldValue(""Start Num String""),bcNMResrv.GetFieldValue(""End Num String""));	
					break;
				}				
				blnIsRecord = bcNMResrv.NextRecord();	
			
			}
	
	//----------------------------------------------------------------------------
	// Retrieving numbers as per the start number and end number and reserving
	// or cancelling the reservation as per the operation selected.
	//----------------------------------------------------------------------------	
			if(strErrVal == """"){
	
				if(strOperation == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_OPERATION"", ""RESERVE"")){
					strSearchStatus = ""[Status] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"")+""' AND "";
					strSearchStatus = strSearchStatus + ""[Is Associated] = 'N' AND "";
					strSearchStatus = strSearchStatus + ""[Allocated To] = '""+ bcNumberResrv.GetFieldValue(""ReservedFromCode"")+""'"";
				}
				else if	(strOperation == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_OPERATION"", ""CANCEL RESERVATION"")) {
					//strSearchStatus =  ""[Status] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED"")+""' AND "";
					strSearchStatus =  ""[Status] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED"")+""'"";
					//strSearchStatus = strSearchStatus + ""[Reserved To] = '""+ bcNumberResrv.GetFieldValue(""Reserved To"")+""'"";
				}
				
				strSearchExpr  = ""[Scheme Id] = '"" + bcNumberResrv.GetFieldValue(""Scheme Id"") +  
							""' AND [Block Id] = '"" + bcNumberResrv.GetFieldValue(""Block Id"") +
							""' AND [Number] >= '"" + intStartNum +
							""' AND [Number] <= '"" + intEndNum + ""' AND "" + strSearchStatus;
							
				if(bcNumberResrv.GetFieldValue(""HLR Id"") != """")
					strSearchExpr = strSearchExpr + "" AND [HLR ID] = '""+bcNumberResrv.GetFieldValue(""HLR Id"")+""'"";
				if(bcNumberResrv.GetFieldValue(""Class"") != """")
					strSearchExpr = strSearchExpr + "" AND [Class] = '""+bcNumberResrv.GetFieldValue(""Class"")+""'"";
				if(bcNumberResrv.GetFieldValue(""Special Category"") != """")
					strSearchExpr = strSearchExpr + "" AND [Special Category Type] = '""+bcNumberResrv.GetFieldValue(""Special Category"")+""'"";
				else
					strSearchExpr = strSearchExpr + "" AND [Special Category Type] = ''"";
				
				with(bcResrvNum){
						ActivateField(""Scheme Id"");
						ActivateField(""Block Id"");
						ActivateField(""Number"");
						ActivateField(""Reservation End Date"");
						ActivateField(""Status"");
						ActivateField(""Status Date"");
						ActivateField(""Assoc Start Id"");
						ActivateField(""Source System"");
						ActivateField(""HLR ID"");
						ActivateField(""Class"");
						ActivateField(""Special Category"");
						ActivateField(""Is Associated"");
						ActivateField(""Status Before Reservation"");
						ActivateField(""Resv Id"");
						ActivateField(""Reserved For"");
						ActivateField(""Reserved To"");
						//RK 05-07-07
						ActivateField(""Allocated To"");
						ActivateField(""Reserved By"");
						ActivateField(""Reserved By Login"");
						//RK 05-07-07
						ActivateField(""Sales Code"");
						ActivateField(""Num Mstr Status Before Reservation"");
//-----------------------------------------------------------
// Code added for Phase 1A2 for activating dealer name,
// dealer area code and dealer channel code.
//-----------------------------------------------------------						
						ActivateField(""Dealer Name"");
						ActivateField(""Dealer Area Code"");
						ActivateField(""Dealer Channel Code"");
						ActivateField(""Reservation Period Special Category"");
						ActivateField(""Reservation Period"");
						ActivateField(""Special Category Id"");
						ClearToQuery();
						SetSearchExpr(strSearchExpr);
						ExecuteQuery();
				}
						
				if(bcNumberResrv.GetFieldValue(""Operation"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_OPERATION"", ""RESERVE""))
					strErrVal = ReserveNumbers(bcResrvNum,bcNumberResrv,dtResrvEnd,strSource);
				else{
					if(strChkAuth == ""Y""){
						strErrVal = CheckAuthentication(bcResrvNum);
					}
					if(strErrVal == """"){
						strErrVal = CancelReservation(bcResrvNum,bcNumberResrv,strSource);
					}
				}
				if ((strErrVal == ""RMSRSR010"") || (strErrVal == ""RMSRSR011"")){
					UpdateReservationQuota(strOperation,strReservedTo,intQuantity,strSource);
				}
			}
		
		}
	}
			
	
	bcNMResrv = null;
	bcResrvNum = null;
	boNMResrv = null;
	boNMEnquiry = null;
	
	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation CheckReservationQuota Function					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Checks the Available Quota of DSA as quantity specified.            *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      26/12/2003       *
**************************************************************************************/

function CheckReservationQuota(strOperation,strReservedTo,intQuantity,strSource){
	
	var strDealer;
	var intRsvAlblQta;
	var intRsvQta;
	var blnIsRecord;
	var strErrVal = """";
	var PtrBO = TheApplication().GetBusObject(""Channel Partner"");
	var PtrBC = PtrBO.GetBusComp(""Channel Partner"");
	
		
	if(strSource == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""RMS"")){
		with(PtrBC){
		SetViewMode(AllView);
		ActivateField(""CSN"");
		ActivateField(""STC Available Quota"");
		ActivateField(""STC Reservation Quota"");
		ClearToQuery();
		SetSearchSpec(""Id"",strReservedTo);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
		}//end with
		if(blnIsRecord){
		
			intRsvAlblQta = PtrBC.GetFieldValue(""STC Available Quota"");
			strDealer = PtrBC.GetFieldValue(""CSN"");
			intRsvQta = PtrBC.GetFieldValue(""STC Reservation Quota"");
			if(strOperation == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_OPERATION"", ""RESERVE"")){
				if(ToInteger(intRsvAlblQta) - ToInteger(intQuantity) < 0)
					if(ToInteger(intRsvAlblQta) == 0) 
						strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR001"",strDealer);
					else
						strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR012"",strDealer,intRsvAlblQta);
			}/*else if(strOperation == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_OPERATION"", ""CANCEL RESERVATION"")){
				if(ToInteger(intRsvQta) - ToInteger(intRsvAlblQta) < ToInteger(intQuantity))
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR003"");		
			}*/
		}
	}//end if
	return(strErrVal);
}
"/**************************************************************************************
* Name          : NM Number Scheme Service DateToString Method				 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : Terminate Order Code File                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/12/2003	1.0   		Mahindra British Telecom   	Created       29/12/2003      *
**************************************************************************************/

//-------------------------------------------------------------------------------------
//Gets the 'Date','Month','Hours','Minutes','Second' and appends them to a string.
//-------------------------------------------------------------------------------------

function DateToString(intCDate){
	var dtDatum = ((intCDate.getMonth() + 1) + ""/"" + intCDate.getDate() + ""/"" + intCDate.getFullYear()
	+ "" "" + intCDate.getHours() + "":"" + intCDate.getMinutes()+ "":"" + intCDate.getSeconds());
	return dtDatum;
}
function GetPrimaryPosition(recUsrId)
{
	var blnIsRecord;
	var priPosId;
	var empBO = TheApplication().GetBusObject(""Employee"");
	var empBC = empBO.GetBusComp(""Employee"");
	with (empBC){
		SetViewMode(AllView);

		ActivateField(""Primary Position Id"");
		ClearToQuery();
		SetSearchSpec(""Id"",recUsrId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
		if (blnIsRecord){
			priPosId = GetFieldValue(""Primary Position Id"");
		}
	}
	empBC = null;
	empBO = null;
	
	return priPosId;
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation PopulateEndNum Function	    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Populates the end number if quantity specified is available.	      *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 26/12/2003 	1.0   		MBT						   	Created      28/12/2003       *
**************************************************************************************/

function PopulateEndNum(intNumId,strSearchExpr,blnIsSequence,intStartNum,&intEndNum,&strEndNum,intQuantity){

	var boNumberResrv;
	var bcNumMstr;

	var blnIsRecord;
	
	var strErrVal = """";

	var intCount = 0;

	boNumberResrv 	= TheApplication().GetBusObject(""RMS NM Number Reservation"");
	bcNumMstr    	= boNumberResrv.GetBusComp(""RMS NM Resrv Start Num"");

	
	
	if(strErrVal == """"){
	
	
		with(bcNumMstr){
			ActivateField(""Number String"");
			ActivateField(""Number"");
			ActivateField(""Scheme Id"");
			ActivateField(""Block Id"");
			ActivateField(""Reserved To"");
			ActivateField(""Status"");
			//RK 10-07-2007
			ActivateField(""Allocated To"");
			ActivateField(""Is Associated"");
			//RK 10-07-2007
			ClearToQuery();
			SetSearchExpr(strSearchExpr);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}
	
	//---------------------------------------------------------------------
	// Display an error if start number is not available for reservation.
	//---------------------------------------------------------------------
		if(!blnIsRecord)
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR003"");
		else if(intNumId != bcNumMstr.GetFieldValue(""Id"")) 
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR003"");
		else{
			while(blnIsRecord){
				if(blnIsSequence == ""Y""){
				
					if(bcNumMstr.GetFieldValue(""Number"") != (ToInteger(intStartNum) + intCount)){
	//------------------------------------------------------------------------
	// Display an error if numbers arn't available for reservation in sequence.
	//------------------------------------------------------------------------				
						strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR004"",intCount);
						break;
					}
				}
				strEndNum 	= ToString(bcNumMstr.GetFieldValue(""Number String""));	
				intEndNum 	= ToInteger(bcNumMstr.GetFieldValue(""Number""));
				intCount 	= intCount + 1;
				
				if(intQuantity == intCount)	
					break;	
					
				blnIsRecord = bcNumMstr.NextRecord();	
		 	}
	
			if((strErrVal == """") && (intQuantity != intCount))
	//------------------------------------------------------------------------------------
	// Display an error if requested quantity of numbers arn't available for reservation.
	//------------------------------------------------------------------------------------		
		 		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR002"",intCount);
		 }
	} 
	 	
	 
	 bcNumMstr = null;
	 boNumberResrv = null;
	
	 return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation RefreshRecord Method		    	 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Reservation Code File					              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      28/12/2003       *
**************************************************************************************/

function RefreshRecord(strSource){

	var psInputs;
	var psOutputs;
	var bsSIMNMRef;
	
	psInputs	= TheApplication().NewPropertySet();
	psOutputs	= TheApplication().NewPropertySet();
	
	bsSIMNMRef 	= TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
										
	if(strSource == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""RMS"")) {
		psInputs.SetProperty(""Business Component Name"",""RMS NM Number Reservation"");
		psInputs.SetProperty(""Business Object Name"",""RMS NM Number Reservation"");
	}
	else if(strSource == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""CSR""))	{
		psInputs.SetProperty(""Business Component Name"",""RMS NM Number Reservation For CSR"");
		psInputs.SetProperty(""Business Object Name"",""RMS NM Number Reservation For CSR"");
	}		
	else if(strSource == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""DSO""))	{
		psInputs.SetProperty(""Business Component Name"",""RMS NM Number Reservation For DSO"");
		psInputs.SetProperty(""Business Object Name"",""RMS NM Number Reservation For DSO"");
	}
	bsSIMNMRef.InvokeMethod(""Refresh Business Component"",psInputs,psOutputs);
	
	
	psInputs	= null;
	psOutputs	= null;
	bsSIMNMRef	= null;
}
"/*********************************************************************************************
* Name          : RMS NM Number Reservation ReserveNumbers Function				             *  
* Author        : Mahindra British Telecom                                                   *
* Description   : Reserve the numbers					                                     *
* Amendment Details                                                                          *
**********************************************************************************************
* Date    		Version  	AmendedBy   	Comments                        Reviewed Date    *
**********************************************************************************************
*                                                                                            *
* 22/12/2003 	1.0   		MBT			   	Created                         28/12/2003       *
* 26/06/2006 	1.1   		ARUNJ		   	SiebelES#12 moved few lines of code to while loop* 
***********************************************************************************************/

function ReserveNumbers(bcResrvNum,bcNumberResrv,&dtResrvEnd,strSource){

	var intAssocStartId;
	var intNumId;
	var intQuantity = 1;
	
	var strErrVal = """";
	var strStatusBfrResrv = """";
	var blnIsRecord;
	var blnIsRecord1;
	var strResrvPeriod;
	var strReservedTo;
	
	var PtrBO = TheApplication().GetBusObject(""Channel Partner"");
	var PtrBC = PtrBO.GetBusComp(""Channel Partner"");
	
	strReservedTo = bcNumberResrv.GetFieldValue(""Reserved To"");

	with(PtrBC){
		SetViewMode(AllView);
		ActivateField(""STC Reservation Period"");
		ClearToQuery();
		SetSearchSpec(""Id"",strReservedTo);
		ExecuteQuery();
		blnIsRecord1 = FirstRecord();
	}
	if(blnIsRecord1){	
		strResrvPeriod = PtrBC.GetFieldValue(""STC Reservation Period"");	
	}
	
	blnIsRecord 		= bcResrvNum.FirstRecord();
// below 1.1
/*	strResrvPeriod = bcResrvNum.GetFieldValue(""Reservation Period Special Category"");
	
	if(strResrvPeriod == """" || strResrvPeriod == "" ""){
		strResrvPeriod = bcResrvNum.GetFieldValue(""Reservation Period"");
	}
*/
// above 1.1
	while(blnIsRecord){
// below 1.1
		/*strResrvPeriod = bcResrvNum.GetFieldValue(""Reservation Period Special Category"");
		if(strResrvPeriod == """" || strResrvPeriod == "" ""){
			strResrvPeriod = bcResrvNum.GetFieldValue(""Reservation Period"");
		}*/
// above 1.1
		intNumId 		= bcResrvNum.GetFieldValue(""Id"");
		intAssocStartId = bcResrvNum.GetFieldValue(""Assoc Start Id"");
			
//-----------------------------------
// Update the number for reservation.	
//-----------------------------------	 
		UpdateReserveNumbers(bcNumberResrv,bcResrvNum,dtResrvEnd,strResrvPeriod,strSource);
		if(bcResrvNum.GetFieldValue(""Is Associated"") == ""Y"") {				
//----------------------------------------------
// Update the associated numbers for reservation.
//----------------------------------------------	
			UpdateAssoNumbers(intNumId,intAssocStartId,bcNumberResrv,dtResrvEnd,strResrvPeriod,strSource);

//------------------------------------------------------------
// Updating the concatenated number record in CX_NUM_ASS_CNCT.
//------------------------------------------------------------	
			//Temp Commented By RK:
			//UpdateAssCnctNumbers(intAssocStartId,bcNumberResrv,strStatusBfrResrv);
			// END RK
			UpdateAssCnctNumbers(intAssocStartId,bcNumberResrv,TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED""));		
		}
		bcNumberResrv.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));		
		bcNumberResrv.SetFieldValue(""Qty"",intQuantity);
		bcNumberResrv.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));		
        bcNumberResrv.SetFieldValue(""End Num"",bcResrvNum.GetFieldValue(""Number""));
        bcNumberResrv.SetFieldValue(""End Num String"",bcResrvNum.GetFieldValue(""Number String""));
		bcNumberResrv.SetUserProperty(""blnFromReservation"",""Y"")
		bcNumberResrv.WriteRecord();
		
		intQuantity = ToInteger(intQuantity) + 1;
		blnIsRecord = bcResrvNum.NextRecord();
	}	
	strErrVal = ""RMSRSR010"";	
	
	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation ResrvCanclResrv Function				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : The main function for Reservation and Cancel Reservation.			  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      28/12/2003       *
**************************************************************************************/

function ResrvCanclResrv(intObjectId,strSource,strChkAuth){
	
    var boNumberResrv;
    var bcNumberResrv;
   
    var strResrvStatus;
    var strErrVal = """";
 	var dtResrvEnd;   
    
    var blnIsRecord;
               
   	boNumberResrv = TheApplication().GetBusObject(""RMS NM Number Reservation"");
	bcNumberResrv = boNumberResrv.GetBusComp(""RMS NM Number Reservation"");

	with(bcNumberResrv){
		ActivateField(""Id"");
		ActivateField(""Status"");
		ActivateField(""Scheme Id"");
		ActivateField(""Block Id"");
		ActivateField(""HLR Id"");
		ActivateField(""Special Category"");
		ActivateField(""Class"");
		ActivateField(""Reserved To"");
		ActivateField(""Reserved For"");
		ActivateField(""Curr Date"");
		ActivateField(""Reservation End Date"");
		ActivateField(""HAppointment"");
		ActivateField(""Start Num"");
		ActivateField(""Start Num String"");
		ActivateField(""End Num"");
		ActivateField(""End Num String"");
		ActivateField(""Qty"");
		ActivateField(""Number Id"");
		ActivateField(""Is Sequence"");
		ClearToQuery();
		SetSearchSpec(""Id"",intObjectId);
		ExecuteQuery();
	}

	blnIsRecord = bcNumberResrv.FirstRecord();
	
	if(blnIsRecord){
		strResrvStatus	= bcNumberResrv.GetFieldValue(""Status"");
			
//---------------------------------------------------------------------------------------
// Display an message to refresh the applet if another user is accessing the same record.
//---------------------------------------------------------------------------------------
		if(strResrvStatus != TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""))
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR006"");
		if(strErrVal == """"){
//-------------------------------------------------------------------------------------------------------
// Change status to processing so that another user cant access this record till processing is complete.
//-------------------------------------------------------------------------------------------------------
			bcNumberResrv.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PROCESSING""));
			bcNumberResrv.WriteRecord();

			strErrVal = CheckQuantity(bcNumberResrv,dtResrvEnd,strSource,strChkAuth);
//---------------------------------------------------------------------------------------------------
//Display the message as completed if successfully reserved (RMSRSR010) or cancelled (RMSRSR011).
//---------------------------------------------------------------------------------------------------
			if(strErrVal == ""RMSRSR010"" || strErrVal == ""RMSRSR011""){
				if(bcNumberResrv.GetFieldValue(""Operation"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_OPERATION"", ""RESERVE""))
					bcNumberResrv.SetFieldValue(""Reservation End Date"",dtResrvEnd);
				bcNumberResrv.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""COMPLETE""));
				if(strErrVal == ""RMSRSR010"")
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR010"");
				else
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR011"");	
				
			}
//--------------------------------------------------------
// If not successful then set the status back to Pending.
//--------------------------------------------------------			
			else
				bcNumberResrv.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_OPR_STATUS"", ""PENDING""));		
	
			bcNumberResrv.SetUserProperty(""blnFromReservation"",""Y"")				
			bcNumberResrv.WriteRecord();
		}	
	}
	
	
	bcNumberResrv = null;	
	boNumberResrv = null;
	
	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation Service_PreInvoke Method    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Reservation Code File	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT					    	Created       28/12/2003       *
* 05/07/2007    1.1         Ramakrishna G      Modified for W4(Req)   05/07/2007
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs){

	var intObjectId;
	var intReturn = ContinueOperation;
	var intEndNum;
	var intQuantity;
	
	var strEndNum;
	var strSource;
	var strChkAuth;
	var strErrVal = """";
	
	intObjectId = Inputs.GetProperty(""Object Id"");
		
	
	
		switch (MethodName){
			
			case ""Reserve"":
				strSource = Inputs.GetProperty(""Source"");
//below 1.1
				strChkAuth = Inputs.GetProperty(""CheckCancelReservation"");
//Above 1.1
				strErrVal = ResrvCanclResrv(intObjectId,strSource,strChkAuth);
				RefreshRecord(strSource);
			  	intReturn = CancelOperation;
			  	if(strErrVal != """")
//below 1.1
			  		Outputs.SetProperty(""strErrVal"",strErrVal);
			  		//TheApplication().RaiseErrorText(strErrVal);
//Above 1.1
			  	break;
			
			case ""CancelReservation"":
				strSource = Inputs.GetProperty(""Source"");
//below 1.1
				strChkAuth = Inputs.GetProperty(""CheckCancelReservation"");
//Above 1.1	
				strErrVal = ResrvCanclResrv(intObjectId,strSource,strChkAuth);
				RefreshRecord(strSource);
			  	intReturn = CancelOperation;
			  	if(strErrVal != """")
//below 1.1
			  		Outputs.SetProperty(""strErrVal"",strErrVal);
			  		//TheApplication().RaiseErrorText(strErrVal);
//Above 1.1
			  	break;
		    		    	
		    case ""Validate"":
		    	strSource = Inputs.GetProperty(""Source"");
		    	strErrVal = Validation(Inputs,intEndNum,strEndNum,intQuantity);
		       	intReturn = CancelOperation;
//---------------------------------------------------------------
// Setting the end number if the required quantity is available.
//---------------------------------------------------------------
				if(strErrVal == """"){
					Outputs.SetProperty(""End Num"",intEndNum);
					Outputs.SetProperty(""End Num String"",strEndNum);
					Outputs.SetProperty(""Quantity"",intQuantity);
				}
				else 
//below 1.1
					Outputs.SetProperty(""strErrVal"",strErrVal);
			  		//TheApplication().RaiseErrorText(strErrVal);
//Above 1.1
		    	break;	
		    
		    case Default:
		    	break;
	    		
	    }
	
   
	return(intReturn);
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateAssCnctNumbers Function 		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update the associated cnct record.  	    		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      28/12/2003       *
**************************************************************************************/

function UpdateAssCnctNumbers(intAssocStartId,bcNumberResrv,strStatusBfrResrv){
		
	var boNumberMasterConcatNumber;
	var bcNumberMasterAssociationConcat;
	var blnIsRecord;
		
	boNumberMasterConcatNumber = TheApplication().GetBusObject(""RMS NM Number Association"");
	bcNumberMasterAssociationConcat = boNumberMasterConcatNumber.GetBusComp(""RMS NM Association Number Type Display"");
		
	with(bcNumberMasterAssociationConcat){
		ActivateField(""Status"");
		ActivateField(""Reserve Id"");
		SetSearchSpec(""Assoc Start Id"",intAssocStartId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}	
		
    while(blnIsRecord){
		bcNumberMasterAssociationConcat.SetFieldValue(""Reserve Id"","""");
		bcNumberMasterAssociationConcat.SetFieldValue(""Status"",strStatusBfrResrv);
//below 1.1
		bcNumberMasterAssociationConcat.WriteRecord();
//above 1.1
		blnIsRecord = bcNumberMasterAssociationConcat.NextRecord();		
	}
	
	bcNumberMasterAssociationConcat	= null;
	boNumberMasterConcatNumber		= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateAssoNumbers Function   		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update the associated numbers.	        		                  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      28/12/2003       *
**************************************************************************************/

function UpdateAssoNumbers(intNumId,intAssocStartId,bcNumberResrv,dtResrvEnd,strResrvPeriod,strSource){

	var boNumberMaster; 
	var bcNumberMaster;
	
	var blnIsRecord;
	
	boNumberMaster 		= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNumberMaster		= boNumberMaster.GetBusComp(""RMS NM Number Enquiry For Update"");

//---------------------------------------------------------
//Retriveing the associated numbers from CX_NUM_MSTR
//---------------------------------------------------------
	with(bcNumberMaster){
		ActivateField(""Assoc Start Id"");
		ActivateField(""Id"");
		ActivateField(""Resv Id"");
		ActivateField(""Reserved To"");
		ActivateField(""Status Before Reservation"");
		ActivateField(""Num Mstr Status Before Reservation"");
		ActivateField(""Reservation End Date"");
		ActivateField(""Source System"");
		ActivateField(""Sales Code"");
		ActivateField(""Block Id"");
		ClearToQuery();		
		SetSearchSpec(""Assoc Start Id"",intAssocStartId);
		SetSearchSpec(""Id"",""<>'""+intNumId+""'"");
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}
	
	while(blnIsRecord){
//-----------------------------------------------------------------------------------------
//Calling the function which changes the status of number and update into reqd tables 	
//-----------------------------------------------------------------------------------------	 
		if(bcNumberResrv.GetFieldValue(""Operation"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_OPERATION"", ""RESERVE""))
			UpdateReserveNumbers(bcNumberResrv,bcNumberMaster,dtResrvEnd,strResrvPeriod,strSource);
		else
			UpdateCancelResrvNumbers(bcNumberResrv,bcNumberMaster);
				
		blnIsRecord = bcNumberMaster.NextRecord();	
	}
	
	
	bcNumberMaster = null;		
	boNumberMaster = null;
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation UpdateCancelResrvNumbers Function    	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Cancel Resrv number									              *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/12/2003 	1.0   		MBT						   	Created      26/12/2003       *
**************************************************************************************/

function UpdateCancelResrvNumbers(bcNumberResrv,bcResrvNum){
		
	var strStatBfrResrv;
	var strFromStatus;
	
	var psBlkInputs;
	var psBlkOutputs;
	var bsRMSBlk;
	
	psBlkInputs 	= TheApplication().NewPropertySet();
	psBlkOutputs 	= TheApplication().NewPropertySet();
	strStatBfrResrv = bcResrvNum.GetFieldValue(""Num Mstr Status Before Reservation"");
//	strStatBfrResrv = bcResrvNum.GetFieldValue(""Status Before Reservation"");
	strFromStatus	= bcResrvNum.GetFieldValue(""Status"");
		
	with(bcResrvNum){
		/*ActivateField(""Status"");
		ActivateField(""Status Date"");
		ActivateField(""Reserved Id"");
		ActivateField(""Reserved To"");
		ActivateField(""Reservation End Date""); KT 21-06-06 */
		SetFieldValue(""Status"",strStatBfrResrv);
		SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
		SetFieldValue(""Resv Id"","""");
		SetFieldValue(""Reserved To"","""");
		SetFieldValue(""Sales Code"","""");
		SetFieldValue(""Reservation End Date"","""");	
		SetFieldValue(""Num Mstr Status Before Reservation"","""");
		
		WriteRecord();
	}		
	UpdateMasterResrv(bcResrvNum.GetFieldValue(""Id""),bcNumberResrv.GetFieldValue(""Id""),strStatBfrResrv,bcNumberResrv.GetFieldValue(""Operation""));
		
	with(psBlkInputs){
			SetProperty(""Object Id"",bcResrvNum.GetFieldValue(""Block Id""));
			SetProperty(""From Status"",strFromStatus);
			SetProperty(""To Status"",strStatBfrResrv);
	}
		
	bsRMSBlk = TheApplication().GetService(""RMS RMS Block Calc"");
	bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
	
	psBlkInputs		= null;
	psBlkOutputs	= null;
	bsRMSBlk		= null;
}
"/**************************************************************************************
* Name          : RMS NM Number Allocation UpdateMasterAlloc Function    		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Create a new record in the MTM table (CX_MSTR_RESRV)       		  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 26/12/2003 	1.0   		MBT						   	Created      28/12/2003       *
**************************************************************************************/

function UpdateMasterResrv(intNumId,intResrvId,strStatusResrv,strOperation){

	var boNMResrv;
	var bcNMMstrResrv;
try{	
	boNMResrv		= TheApplication().GetBusObject(""RMS NM Number Reservation"");
	bcNMMstrResrv	= boNMResrv.GetBusComp(""RMS NM Number Master Reservation"");

//------------------------------------------------------------------------------------------------
//Populating the new record in table CX_NUM_RESRV with corresponding number Id and Allocation Id
//------------------------------------------------------------------------------------------------	

	with(bcNMMstrResrv){
		ActivateField(""Number Id"");
		ActivateField(""Resrv Id"");
		ActivateField(""Sts Bfr Reservation"");
		NewRecord(1);
		SetFieldValue(""Number Id"",intNumId);
		SetFieldValue(""Resrv Id"",intResrvId);
		if(strOperation == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_OPERATION"", ""RESERVE""))
			SetFieldValue(""Sts Bfr Reservation"",strStatusResrv);
		else
			SetFieldValue(""Sts Bfr Reservation"","""");	

		WriteRecord();
	}
	
	bcNMMstrResrv = null;
	boNMResrv = null;
	}
	
catch(e){

	var strErrCode = e.errCode
	var strErrMesg = e.errText


	}	
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation Update Reservation End Date Function     * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update the Reservation end date.	   		                          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      28/12/2003       *
**************************************************************************************/

function UpdateReservationEndDate(bcNumberResrv,bcResrvNum,ReservationPeriod){
	
	var dtSysDate;
	var dtSysDateObj;
	var dtQuarantineDate;
	var dtQuarantineDateObj;
	
	dtSysDate = Clib.time();
	dtSysDateObj = Date.fromSystem(dtSysDate);
	dtSysDateObj.setTime(dtSysDateObj.getTime());
	dtQuarantineDate = bcNumberResrv.GetFieldValue(""Curr Date"");
	dtQuarantineDateObj = new Date(dtQuarantineDate);
  	dtQuarantineDateObj.setTime(dtQuarantineDateObj.getTime() + (ReservationPeriod * 24 * 60 * 60 * 1000));
	return(dtQuarantineDateObj);
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation CheckReservationQuota Function					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Checks the Available Quota of DSA as quantity specified.            *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      26/12/2003       *
**************************************************************************************/

function UpdateReservationQuota(strOperation,strReservedTo,intQuantity,strSource){
	
	var intRsvAlblQta;
	var intRsvQta;
	var blnIsRecord;
	//var strErrVal = """";
	var PtrBO = TheApplication().GetBusObject(""Channel Partner"");
	var PtrBC = PtrBO.GetBusComp(""Channel Partner"");
	
		
	if(strSource == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""RMS"")){
		with(PtrBC){
		SetViewMode(AllView);
		ActivateField(""CSN"");
		ActivateField(""STC Available Quota"");
		ActivateField(""STC Reservation Quota"");
		ClearToQuery();
		SetSearchSpec(""Id"",strReservedTo);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
		}
		if(blnIsRecord){
		
			intRsvAlblQta = PtrBC.GetFieldValue(""STC Available Quota"");
			intRsvQta     = PtrBC.GetFieldValue(""STC Reservation Quota"");
			if(strOperation == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_OPERATION"", ""RESERVE"")){
				intRsvAlblQta = ToInteger(intRsvAlblQta) - ToInteger(intQuantity);
//				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR003"");
				 
			}else if(strOperation == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_OPERATION"", ""CANCEL RESERVATION"")){
				intRsvAlblQta = ToInteger(intRsvAlblQta) + ToInteger(intQuantity);
//				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSRSR003"");		
			}
		PtrBC.SetFieldValue(""STC Available Quota"",ToInteger(intRsvAlblQta));
		PtrBC.WriteRecord();
		}
		
		
	}
//	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation UpdateNumbers Function    		 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : Update the Reserved number	    		                          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      28/12/2003       *
**************************************************************************************/

function UpdateReserveNumbers(bcNumberResrv,bcResrvNum,&dtResrvEnd,strResrvPeriod,strSource){
			
	var psBlkInputs;
	var psBlkOutputs;
	
	var bsRMSBlk;
				
	var strToStatus;
	var strFromStatus;
		
	var intNumId;
	var dtQuarantineDateObj;
	

	psBlkInputs			= TheApplication().NewPropertySet();
	psBlkOutputs		= TheApplication().NewPropertySet();
	
	intNumId 			= bcResrvNum.GetFieldValue(""Id"");
	strFromStatus 		= bcResrvNum.GetFieldValue(""Status"");
			
//---------------------------------
// Change the status to ""Reserved"".
//---------------------------------
	var temp9 = bcNumberResrv.GetFieldValue(""Id"");
	bcResrvNum.SetFieldValue(""Resv Id"",ToString(temp9));
    strToStatus =TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED"");
    bcResrvNum.SetFieldValue(""Status"",strToStatus);	
    bcResrvNum.SetFieldValue(""Num Mstr Status Before Reservation"",strFromStatus);
	bcResrvNum.SetFieldValue(""Status Date"",bcResrvNum.GetFieldValue(""Current Date""));
	
	dtQuarantineDateObj	= UpdateReservationEndDate(bcNumberResrv,bcResrvNum,strResrvPeriod);
	dtResrvEnd 			= DateToString(dtQuarantineDateObj);
	
	bcResrvNum.SetFieldValue(""Reservation End Date"",dtResrvEnd);
//	bcResrvNum.SetFieldValue(""Reserved Id"",bcNumberResrv.GetFieldValue(""Id""));	
	bcResrvNum.SetFieldValue(""Reserved To"",bcNumberResrv.GetFieldValue(""Reserved For""));	
	bcResrvNum.SetFieldValue(""Sales Code"",bcNumberResrv.GetFieldValue(""Reserved To""));	
	bcResrvNum.SetFieldValue(""Source System"",strSource);
//	bcResrvNum.SetFieldValue(""Reserved For"",bcNumberResrv.GetFieldValue(""Reserved For""));	


//------------------------------------------------------------------------------
// Create a new record in the MTM table CX_MSTR_RESRV storing the Number Id and
// the current Reserved Id alongwith the status before reservation.
//------------------------------------------------------------------------------							
		
	UpdateMasterResrv(intNumId,bcNumberResrv.GetFieldValue(""Id""),strFromStatus,bcNumberResrv.GetFieldValue(""Operation""));
	bcResrvNum.WriteRecord();
	
//----------------------------------------------
// Update the block count if status is changed.
//----------------------------------------------	
	with(psBlkInputs){
		SetProperty(""Object Id"",bcResrvNum.GetFieldValue(""Block Id""));
		SetProperty(""From Status"",strFromStatus);
		SetProperty(""To Status"",strToStatus);
	}
		

	psBlkInputs		= null;
	psBlkOutputs	= null;
	bsRMSBlk		= null;

}
"/**************************************************************************************
* Name          : RMS NM Number Reservation Validation Function						  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Validates if the specified quantity is available and depending on   *
*               : on that populates the end number.                                   *       
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      28/12/2003       *
**************************************************************************************/

function Validation(Inputs,&intEndNum,&strEndNum,&intQuantity){
	    
    
    
    var intStartNum;
    var intEndNum;
    var intNumId;
    var intHAppointment
    
    var strOperation;    
    var strSearchExpr;
    var strSearchStatus;
    var strStartNum;
    var strEndNum;
    var strReservedTo;
    var strErrVal = """";
            
    var blnIsSequence;
        
	intStartNum     = Inputs.GetProperty(""Start Num"");
	intQuantity		= Inputs.GetProperty(""Quantity"");
	intNumId		= Inputs.GetProperty(""Number Id"");
	blnIsSequence	= Inputs.GetProperty(""Is Sequence"");
	strOperation	= Inputs.GetProperty(""Operation"");
	intHAppointment = Inputs.GetProperty(""HAppointment"");
	strReservedTo	= Inputs.GetProperty(""Reserved To"");

	
	if(strErrVal == """"){	
		if(strOperation == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_OPERATION"", ""RESERVE""))	{
			strSearchStatus = ""[Status] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"")+""' AND "";
			strSearchStatus = strSearchStatus + ""[Is Associated] = 'N' AND "";
			strSearchStatus	= strSearchStatus + ""[Allocated To] = '""+ Inputs.GetProperty(""ReservedFromCode"") + ""'"";
		}
		else if(strOperation == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_OPERATION"", ""CANCEL RESERVATION"")) {
			//strSearchStatus = ""[Status] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED"")+""' AND "";
		    //strSearchStatus	= strSearchStatus + ""[Reserved To] = '""+ Inputs.GetProperty(""Reserved To"") + ""'"";
			strSearchStatus = ""[Status] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED"")+""'"";
			
		}
	}	
	
	if(strErrVal == """"){
	
		strSearchExpr  =	""[Scheme Id] = '"" + Inputs.GetProperty(""Scheme Id"") +  
							""' AND [Block Id] = '"" + Inputs.GetProperty(""Block Id"") +""'"";
		if(Inputs.GetProperty(""HLR ID"") != """")
			strSearchExpr = strSearchExpr + "" AND [HLR ID] = '""+ Inputs.GetProperty(""HLR ID"") + ""'"";
		if(Inputs.GetProperty(""Class"") != """")
			strSearchExpr = strSearchExpr + "" AND [Class] = '""+ Inputs.GetProperty(""Class"") + ""'"";
		if(Inputs.GetProperty(""Special Category"") != """")
			strSearchExpr = strSearchExpr + "" AND [Category Name] = '""+ Inputs.GetProperty(""Special Category"") + ""'"";
		else
			strSearchExpr = strSearchExpr + "" AND [Category Name] = ''"";
			
			strSearchExpr = strSearchExpr + "" AND [Number] >= '"" + intStartNum + ""' AND "" + strSearchStatus;
	
		if(intQuantity == """")
			intQuantity = 1;
	
//-------------------------------------------------------------------
// If Is Sequence is selected then calculating end number so as to 
// retrieve only that set of numbers.
//-------------------------------------------------------------------
		intEndNum = ToNumber(intStartNum) + ToNumber(intQuantity) - 1;
		
		if(blnIsSequence == ""Y""){
			strSearchExpr = strSearchExpr + "" AND [Number] <= '"" + intEndNum + ""'""; 
		}
		
		
//--------------------------
// Populate the end number.
//--------------------------
		if(strErrVal == """")
			strErrVal = PopulateEndNum(intNumId,strSearchExpr,blnIsSequence,intStartNum,intEndNum,strEndNum,intQuantity);
	}

	return (strErrVal);
}
"/*************************************************************************************** 
* Name 			: RMS NM Number Scheme Check Unique Function.                         * 
* Author 		: Mahindra British Telecom                                             * 
* Description 	: Checks on the uniqueness of the scheme.                              * 
* Amendment Details 																   *
* ************************************************************************************** 
* Date 			Version 			AmendedBy 		Comments 			Reviewed Date  *
* ************************************************************************************** 
* 02/12/2003 	1.0 					MBT			 Created 			04/12/2003     *
* *************************************************************************************/ 

function CheckUnique(bcNumberScheme,bcNumberAllScheme,Inputs){
 
	 var strTypeIdentifier; 
	 var strType; 
	 var strHLRId;
	 var strSubType;
	 var strValue; 
	 var strSearchExpr;
	 var strSchemeName;
	 var strErrVal ="""";
	 
	 var blnIsRecord; 
   
   	 strTypeIdentifier = bcNumberScheme.GetFieldValue(""Type Identifier""); 
    
//---------------------------------------------------------------------------------------------
// Checking the uniqueness of the scheme created depending on the 'Type' ,'Subtype' and 'HLR Id'
//---------------------------------------------------------------------------------------------
   	 if(strTypeIdentifier != TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")){ 
   
   		strType 	= bcNumberScheme.GetFieldValue(""Type Id""); 
		strHLRId 	= bcNumberScheme.GetFieldValue(""HLR Id""); 
       	strValue 	= TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""); 
       	
    	strSearchExpr = ""[HLR Id] = '"" + strHLRId + ""' AND [Type Identifier] = '"" + strTypeIdentifier + ""' AND [Id] <> '"" + Inputs.GetProperty(""Object Id"") + ""'""; 
    
       	with(bcNumberAllScheme){
    		 ActivateField(""Scheme Name"");
    		 ClearToQuery(); 
   			 SetSearchExpr(strSearchExpr); 
	     	 ExecuteQuery(); 
    	 	 blnIsRecord = FirstRecord();
       	} 
      
      	if(blnIsRecord){
      		 strSchemeName = bcNumberAllScheme.GetFieldValue(""Scheme Name""); 
     		 strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC012"",strSchemeName); 
  		}
    } 	 
   	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Scheme Refresh BC Function        		              * 
* Author        : Mahindra British Telecom                                            *
* Description   : Refreshes the BC to reflect the current / updated values.	          *	
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   	MBT		 Created      02/12/2003       *
20060710       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function RefreshingBC(){

	var psInputs;
	var psOutputs;
	var bsSIMNMRef;
	
	psInputs = TheApplication().NewPropertySet();
	psOutputs = TheApplication().NewPropertySet();
	
	bsSIMNMRef = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
										
	psInputs.SetProperty(""Business Component Name"",""RMS NM Number Scheme"");
	psInputs.SetProperty(""Business Object Name"",""RMS NM Number Scheme"");
	bsSIMNMRef.InvokeMethod(""Refresh Business Component"",psInputs,psOutputs);
	
	psInputs 	= null;
	psOutputs 	= null;
//1.1 below
	bsSIMNMRef = null;
//1.1 above
	
}
"/**************************************************************************************
* Name          : RMS NM Number Scheme Release Scheme Function	     			 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Validates the scheme for its format valuers before releasing.       *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003	1.0   		   MBT					   	Created        03/12/2003     *
* 01/04/05      1.1            MBT                      Gautam		   01/04/05       *	
**************************************************************************************/

function ReleaseScheme(bcNumberScheme,bcNumberAllScheme,bcNumberSchemeLevel,bcNumberSubType,Inputs){

	var blnIsRecord;		
	
	var strNumDelim ="""";
	var strNum="""";
	var strNumLike = """";
	var strVal;
	var strTypeIdentifier;
	var strLevelName;
	var strLevelType;
	var strErrVal = """";
	var strSchemeName;
	var strSearchExpr = """";
	var intCount = 0;


//--------------------------------------------------------------
// Code commented as initially it was checking for unique HLR 
// which was not reqd later.
//--------------------------------------------------------------	
//	if (bcNumberScheme.GetFieldValue(""HLR Id"") != """"){
//		strErrVal = CheckUnique(bcNumberScheme,bcNumberAllScheme,Inputs);
//		if(strErrVal !="""")
//		return(strErrVal);
//	}
	
	strTypeIdentifier = bcNumberScheme.GetFieldValue(""Type Identifier""); 
	
	blnIsRecord = bcNumberSchemeLevel.FirstRecord();

//----------------------------------------------------------
// Cannot release a scheme if no format has been specified.	
//----------------------------------------------------------
	if(!blnIsRecord){
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC013"",bcNumberScheme.GetFieldValue(""Name""));
		return(strErrVal);
    }

//----------------------------------------------------------------------------------
// Check if the values have been properly entered for the specified number formats.
//----------------------------------------------------------------------------------
	while(blnIsRecord){
	    strLevelType = bcNumberSchemeLevel.GetFieldValue(""Level Type"");
		if(strLevelType != TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING"")){
			strErrVal = ValidateNumberLevel(bcNumberSchemeLevel);
			if(strErrVal != """")	
				return(strErrVal);
		}
		blnIsRecord = bcNumberSchemeLevel.NextRecord();
	}
	
	RefreshingBC();
	
	blnIsRecord = bcNumberSchemeLevel.FirstRecord();
		 	
//---------------------------------------------------------------------------------
// To check whether values are entered for all level types in scheme format except
// for Running level type.
//---------------------------------------------------------------------------------
	while(blnIsRecord){
		
		strVal = bcNumberSchemeLevel.GetFieldValue(""Value"");
		strLevelName = bcNumberSchemeLevel.GetFieldValue(""Level Name"");

		if((bcNumberSchemeLevel.GetFieldValue(""Level Type"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING"") 
		 && bcNumberSchemeLevel.GetFieldValue(""Level Type"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""CHECKSUM"")
		&& bcNumberSchemeLevel.GetFieldValue(""Level Type"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""YEAR"")
		) && strVal.length == 0){
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC010"",strLevelName);
			return(strErrVal);
		}

//-----------------------------------------------------------------
// Populating the scheme format with the delimiters if mentioned.
//-----------------------------------------------------------------
		if(bcNumberSchemeLevel.GetFieldValue(""Level Type"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING"")
					&&
			bcNumberSchemeLevel.GetFieldValue(""Level Type"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""CHECKSUM"")					
		){
			if(bcNumberSchemeLevel.GetFieldValue(""Delimiter"") != """" && bcNumberSchemeLevel.GetFieldValue(""Delimiter"") != (TheApplication().InvokeMethod(""LookupValue"", ""NM_FORMAT_DELIMITER"", ""NONE""))){
				if(bcNumberSchemeLevel.GetFieldValue(""Delimiter"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_FORMAT_DELIMITER"", ""SPACE"")){
					strVal = strVal + "" "";
				}
				else{
					strVal = strVal + ToString(bcNumberSchemeLevel.GetFieldValue(""Delimiter""));
				}
			}	

//-------------------------------------------------------------------------------
// Storing numbers with delimiters and also without delimiters for the check of 
// unique format values.
//--------------------------------------------------------------------------------
			strNumDelim = strNumDelim + strVal;
			//This is to ensure that different schemes with different start batch numbers are not allowed 
			//if allowed, duplicate numbers may be generated
			if(bcNumberSchemeLevel.GetFieldValue(""Level Type"") ==  TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""BATCH COUNTER"")){
				for (intCount=0; intCount < bcNumberSchemeLevel.GetFieldValue(""Length"");intCount++)
					strNum = strNum + 'B';
			} else {
				strNum = strNum + ToString(bcNumberSchemeLevel.GetFieldValue(""Value""));
			}
			
			//strNum = strNum + ToString(bcNumberSchemeLevel.GetFieldValue(""Value""));
		}
		else{
			for (intCount=0; intCount < bcNumberSchemeLevel.GetFieldValue(""Length"");intCount++) {
				if(bcNumberSchemeLevel.GetFieldValue(""Level Type"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING""))
					strVal = strVal + 'N';
				if(bcNumberSchemeLevel.GetFieldValue(""Level Type"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""CHECKSUM""))
					strVal = strVal + 'C';					
			}
			strNumDelim = strNumDelim + strVal ;
			strNum   = strNum + strVal;
		}	
		blnIsRecord = bcNumberSchemeLevel.NextRecord();
	}
	
//----------------------------------------------------------------------
// Checking if a similar kind of scheme format with same values exist.
// If it exists inform user to have unique scheme format values.
//----------------------------------------------------------------------
	if(strTypeIdentifier != TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")){ 
		
		strSearchExpr = ""[Number String] = '"" + strNum + ""' AND [Id] <> '"" + Inputs.GetProperty(""Object Id"") + ""'"";
   		
   		with(bcNumberAllScheme){
			ActivateField(""Scheme Name"");
			ClearToQuery();
			SetSearchExpr(strSearchExpr);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}

		if(blnIsRecord){
			strSchemeName = bcNumberAllScheme.GetFieldValue(""Scheme Name"");
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC014"",strSchemeName);
			return(strErrVal);
		}
	}
		
	bcNumberScheme.SetFieldValue(""Number String"",strNum);			
	bcNumberScheme.SetFieldValue(""Format"",strNumDelim);
	bcNumberScheme.SetFieldValue(""Current Format"",strNumDelim);
	bcNumberScheme.SetFieldValue(""Status"",""Y"");	
	bcNumberScheme.WriteRecord();
	
	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM Number Scheme Service PreInvoke Method				 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Scheme Code File                      				  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date(dd/mm/yyyy) 	Ver     By       Comments					Reviewed Date *
***************************************************************************************
*                                                                                     *
* 01/12/2003	     1.0   	MBT		 Created						03/12/2003    *
* 28/06/2006         1.1    ARUNJ    ES#40 and ES #12 Incorporated changes     *
20060710           | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed, moved all freeing codelines from catch to finally
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var boNumberScheme;
	var boNumberType; 
	var bcNumberScheme;
	var bcNumberAllScheme;
	var bcNumberSchemeLevel;
	var bcNumberSubType;
	var bcNumberBlock;
// below 1.1
//	var bcNumberFormat;	
//	var bcSpecialCategory;
//	var bcSpecialCatRulComb;
// above 1.1	
	var strErrVal = """";

	var blnIsRecord;
	
	var intReturn = ContinueOperation;
	var intHlr;
				
	try{
	
		boNumberScheme 		= TheApplication().GetBusObject(""RMS NM Number Scheme"");
		bcNumberScheme 		= boNumberScheme.GetBusComp(""RMS NM Number Scheme"");	
// below 1.1		
//		bcNumberAllScheme 	= boNumberScheme.GetBusComp(""RMS NM Number All Scheme"");		
// above 1.1
		bcNumberSchemeLevel = boNumberScheme.GetBusComp(""RMS NM Scheme Level"");
// below 1.1
//		bcNumberBlock       = boNumberScheme.GetBusComp(""RMS NM Number Block"");		
//		bcSpecialCategory   = boNumberScheme.GetBusComp(""RMS NM Scheme Special Category"");		
//		bcSpecialCatRulComb = boNumberScheme.GetBusComp(""RMS NM Special Cat Rule Comb"");
			
//		boNumberType 		= TheApplication().GetBusObject(""RMS NM Number Type"");
//		bcNumberSubType 	= boNumberType.GetBusComp(""RMS NM Number Subtype"");
// above  1.1				
		with(bcNumberScheme)
		{
			ActivateField(""Name"");
			ActivateField(""Type Id"");
			ActivateField(""Type Identifier"");
			ActivateField(""HLR Id"");
			ActivateField(""Subtype Type Id"");
			ActivateField(""Format Received"");
			ActivateField(""Format"");
			ActivateField(""Status"");
			ActivateField(""Reuse After Disconnect"");
			ActivateField(""Number String"");
			ActivateField(""Current Format"");
			ClearToQuery();
			SetSearchSpec(""Id"",Inputs.GetProperty(""Object Id""));
			ExecuteQuery();
		}
		with(bcNumberSchemeLevel){
			ActivateField(""Scheme Id"");	
			ActivateField(""Level Name"");
			ActivateField(""Type Id"");
			ActivateField(""Object Id"");
			ActivateField(""Delimiter"");
			ActivateField(""Value"");
			ActivateField(""Level Type"");
			ActivateField(""Length"");
			ClearToQuery();
			ExecuteQuery();
		}
		switch(MethodName)
		{
//-------------------------------------------------------------------------
// Delete all the records in the scheme format if number type has changed.
//-------------------------------------------------------------------------
			case ""CheckPreset"":
				intReturn = CancelOperation;			
				while(bcNumberSchemeLevel.FirstRecord())
				{
					bcNumberSchemeLevel.DeleteRecord();
				}	
				break;
//---------------------------------------------------------------------------------
// Validate the block formats defined. If duplicate blocks defined throw an error.
//---------------------------------------------------------------------------------								
			case ""Validate Block"":
				intReturn = CancelOperation;
// below 1.1
				bcNumberBlock       = boNumberScheme.GetBusComp(""RMS NM Number Block"");	
// above 1.1
			  	strErrVal = ValidateNumberBlock(bcNumberScheme,bcNumberSchemeLevel,bcNumberBlock,Inputs,Outputs)
			  	if(strErrVal != """")
					TheApplication().RaiseErrorText(strErrVal);
				break;
//--------------------------------------------------
// On update of HLR ID set the corresponding value. 
//--------------------------------------------------		    
		   	case ""SetHLR"":			
				intReturn = CancelOperation;			
				blnIsRecord = bcNumberScheme.FirstRecord();
				if(blnIsRecord)
				{
					intHlr = Inputs.GetProperty(""HLR Id"");
					SetHLR(bcNumberSchemeLevel,intHlr);
					RefreshingBC();			  	
			  	}
			  	break;
//--------------------------------------------------------------------------
// Check if the formats have been defined before releasing the scheme.Also 
// unique schemes exists as per formats specified if the type isnt MSISDN.
//--------------------------------------------------------------------------		    
		   	case ""ReleaseScheme"":
// below 1.1
//		   		intReturn = CancelOperation;
//				strErrVal = ReleaseScheme(bcNumberScheme,bcNumberAllScheme,bcNumberSchemeLevel,bcNumberSubType,Inputs)
//				if(strErrVal != """")
//					TheApplication().RaiseErrorText(strErrVal);				
//				break;
// above 1.1
				intReturn = CancelOperation;
// below 1.1
				bcNumberAllScheme 	= boNumberScheme.GetBusComp(""RMS NM Number All Scheme"");	
				boNumberType 		= TheApplication().GetBusObject(""RMS NM Number Type"");
				bcNumberSubType 	= boNumberType.GetBusComp(""RMS NM Number Subtype"");
       			blnIsRecord = bcNumberScheme.FirstRecord();
       			if(blnIsRecord)
       			{
// above 1.1
       				strErrVal = ReleaseScheme(bcNumberScheme,bcNumberAllScheme,bcNumberSchemeLevel,bcNumberSubType,Inputs)
// below 1.1
    			}
// above 1.1
    			if(strErrVal != """")
     				TheApplication().RaiseErrorText(strErrVal);    
    			break;
		
			default:
				break;	
		}
	}
	catch(e)//what does this do at all? not much useful
	{
		throw(e);
	}
	finally
	{
//1.2 below
		bcNumberAllScheme = null;
		bcNumberScheme 		= null;
// below 1.1
		bcNumberAllScheme   = null;
// above 1.1
		bcNumberSchemeLevel = null;
		bcNumberSubType 	= null;
		bcNumberBlock 		= null;
// below 1.1
//		bcNumberFormat      = null;
// above 1.1
		boNumberScheme 		= null;
		boNumberType 		= null;
//1.2 above
	}
	return (intReturn);
}
"/**************************************************************************************
* Name          : RMS NM Number Scheme SetHLR Function        		                  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Function that sets the HLR value in format if the HLR ID is changed *
*				  in scheme.														  *	
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003 	1.0   		MBT						   	Created      02/12/2003       *
**************************************************************************************/
function SetHLR(bcNumberSchemeLevel,intHlr){

	var blnIsRecord;
	var strLevelType;
		
	blnIsRecord = bcNumberSchemeLevel.FirstRecord();
	
	while(blnIsRecord){
		strLevelType = bcNumberSchemeLevel.GetFieldValue(""Level Type"");
		if(strLevelType == TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""HLR"")){
			bcNumberSchemeLevel.SetFieldValue(""Value"",intHlr);
			bcNumberSchemeLevel.WriteRecord();
		}
		blnIsRecord = bcNumberSchemeLevel.NextRecord();
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Scheme ValidateNumberBlock Function			 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : Checks if duplicate blocks have been specified.      				  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003	1.0   		  MBT   					Created       03/12/2003      *
**************************************************************************************/

function ValidateNumberBlock(bcNumberScheme,bcNumberSchemeLevel,bcNumberBlock,Inputs,Outputs){

	var intStartNum;
	var intEndNum;
	var intLength;
	var intPrevStartNum;
	var intPrevEndNum;
	var intBlkId;
		
	var strBlockName;
	var strPrevBlockName;
	var strStartNum;
	var strEndNum;
	var strRecievedDate;
	var strErrVal = """";	
			
	var blnIsRecord;
		
	strBlockName    = Inputs.GetProperty(""Name"");
	strStartNum     = Inputs.GetProperty(""Start Number"");
	strEndNum       = Inputs.GetProperty(""End Number"");
	strRecievedDate = Inputs.GetProperty(""Recieved Date"");
	intBlkId		= Inputs.GetProperty(""BlkId"");

//-------------------------------------------------------
// Check whether the start number contains only numerics.
//-------------------------------------------------------
	for (intLength=0; intLength < strStartNum.length; intLength++){
		if (!Clib.isdigit(strStartNum.charAt(intLength))) {	
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC001"");
			return(strErrVal);
		}
	}

//------------------------------------------------------
// Check whether the end number contains only numerics.
//------------------------------------------------------
	for (intLength=0; intLength < strEndNum.length; intLength++){
		if (!Clib.isdigit(strEndNum.charAt(intLength))){		
	 		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC002"");
			return(strErrVal);
	 	}
	}				

//-----------------------------------------
// Converting the string fields to integer
//-----------------------------------------
	intStartNum = ToNumber(strStartNum);
	intEndNum  = ToNumber(strEndNum);

//---------------------------------------------------
// Check if end number is greater than start number.
//---------------------------------------------------
	if( intEndNum < intStartNum){ 
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC003"");
		return(strErrVal);
	}
	var blnSchLvlRec = 	bcNumberSchemeLevel.FirstRecord();
	while(blnSchLvlRec) {
		if(bcNumberSchemeLevel.GetFieldValue(""Level Type"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING"")) {
			intLength = bcNumberSchemeLevel.GetFieldValue(""Length""); 
			break;
		}
		bcNumberSchemeLevel.NextRecord();
	}
		
//---------------------------------------------------------------------
// If the length of start/end number of block is greater than that
// defined in scheme format for running level type then raise an error.
//---------------------------------------------------------------------
	
		
	if(strStartNum.length > intLength){ 
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC004"");
		return(strErrVal);				
	}							

	if(strEndNum.length > intLength){
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC005"");
		return(strErrVal);				
	}						

//---------------------------------------------------------------------
// If length of start/end number of block is less than that defined in
// scheme format for running level then append zeros to them.
//---------------------------------------------------------------------
	while(strStartNum.length < intLength)
		strStartNum = ""0"" + strStartNum;
	
	while(strEndNum.length < intLength)
		strEndNum = ""0"" + strEndNum;

//----------------------------------------------
// Check for overlapping of numbers in a block.
//----------------------------------------------
	with(bcNumberBlock) {
		ActivateField(""Start Number"");
		ActivateField(""End Number"");			
		ActivateField(""Name"");	
		ActivateField(""Scheme Id"");					
		ClearToQuery();
		SetSearchSpec(""Scheme Id"",Inputs.GetProperty(""Object Id""));
		SetSearchSpec(""Id"",""<> '"" + intBlkId + ""'"");
		ExecuteQuery();			
	}

	blnIsRecord = bcNumberBlock.FirstRecord();	 		
	
	while(blnIsRecord){		
		intPrevStartNum 	= ToInteger(bcNumberBlock.GetFieldValue(""Start Number""));
		intPrevEndNum   	= ToInteger(bcNumberBlock.GetFieldValue(""End Number""));
		strPrevBlockName	= bcNumberBlock.GetFieldValue(""Name"");
			
//----------------------------------------------------------------
// Raise an error if start number has been used in another block.				
//----------------------------------------------------------------
		if((intStartNum >= intPrevStartNum) && (intStartNum <= intPrevEndNum)){
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC006"",strPrevBlockName);
			return(strErrVal);									
        }
             
//----------------------------------------------------------------
// Raise an error if end number has been used in another block.				
//----------------------------------------------------------------
		if((intEndNum >= intPrevStartNum) && (intEndNum <= intPrevEndNum)){
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC007"",strPrevBlockName);
			return(strErrVal);	
		}

//----------------------------------------------------------------
// Raise an error if number has been used in another block.				
//----------------------------------------------------------------
		if((intStartNum <= intPrevStartNum) && (intEndNum >= intPrevEndNum)){
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC006"",strPrevBlockName);
			return(strErrVal);	
		}
			
		blnIsRecord = bcNumberBlock.NextRecord();
	}
		
	Outputs.SetProperty(""Start String Number"",strStartNum);
	Outputs.SetProperty(""End String Number"",strEndNum);
	Outputs.SetProperty(""Start Number"",intStartNum);
	Outputs.SetProperty(""End Number"",intEndNum);
	return(strErrVal);

}
"/**************************************************************************************
* Name          : RMS NM Number Scheme Validate Number Level Function				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Validates if the right values have been entered for levels.   	  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003	1.0   		  MBT   					Created        03/12/2003     *
* 01/04/2005    1.1			  MBT	                    Gautaman       01/04/2005  
**************************************************************************************/

function ValidateNumberLevel(bcNumberSchemeLevel){

	var intValue; //ms:20050130: variable name to be changed to reflect the type
	var intLength;
	var intCount=0;
	 
	var strLevelName;
	var strValueType;
	var strLevelType;
	var strErrVal = """";
	
	intValue	  = bcNumberSchemeLevel.GetFieldValue(""Value"");
	intLength     = bcNumberSchemeLevel.GetFieldValue(""Length"");
	
	strValueType  = bcNumberSchemeLevel.GetFieldValue(""Value Type"");
	strLevelType  = bcNumberSchemeLevel.GetFieldValue(""Level Type"");
	strLevelName  = bcNumberSchemeLevel.GetFieldValue(""Level Name"");

//-------------------------------------------------------------------
// Check if numerics have been entered if the value type is numeric.
//-------------------------------------------------------------------
	if(strValueType == TheApplication().InvokeMethod (""LookupValue"", ""NM_VALUE_TYPE"", ""NUMERIC"")){
		for(; intCount < intValue.length; intCount++){
			if(!Clib.isdigit(intValue.charAt(intCount))){		
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC008"",strLevelName);
				return(strErrVal);
			}
		}
	}

//----------------------------------------------------------------------------
// Check if alphanumerics have been entered if the value type is alphanumeric.
//----------------------------------------------------------------------------
	else if(strValueType == TheApplication().InvokeMethod (""LookupValue"", ""NM_VALUE_TYPE"", ""ALPHANUMERIC"")){
		for(; intCount< intValue.length; intCount++){
			if(!Clib.isalnum(intValue.charAt(intCount))){		
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC009"",strLevelName);
				return(strErrVal);
			}
		 }
	}	

//------------------------------------------------------------
// Check if any value has been entered for a fixed level type. 
//------------------------------------------------------------
	if((strLevelType == TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""FIXED"")) && (intValue.length) == 0) {
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC010"",strLevelName);
		return(strErrVal);
	}
	
//-------------------------------------------------------------------------
// Check for length of value as compared to length defined in number type.
//-------------------------------------------------------------------------
	if((intValue.length) > intLength && (strLevelType == TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""FIXED""))){
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC011"",strLevelName);
		return(strErrVal);
	}
	else if((intValue.length) > intLength && (strLevelType == TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""BATCH COUNTER""))){
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSNSC011"",strLevelName);
		return(strErrVal);
	}
// v1.1 aaded the conditon for year level type.	
	else if(intValue.length != intLength && strLevelType != TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""YEAR"") 
			&& strLevelType != TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""CHECKSUM"") 
			&& strLevelType != TheApplication().InvokeMethod (""LookupValue"", ""NM_LEVEL_TYPE"", ""RUNNING"")){		
			for(intCount = intValue.length; intCount != intLength; intCount++)
				intValue = ""0"" + intValue;				
			bcNumberSchemeLevel.SetFieldValue(""Value"",intValue); 
			bcNumberSchemeLevel.WriteRecord();
			RefreshingBC();	
	}
	
	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS NM ReservedExport Service ReservedExport Method				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM ReservedExport Code File                      			  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	1.0     MBT      Created       03/12/2003      *
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function ReservedExport(msReservationId,&Outputs)
{
	var strFileContent;
	var mboNumReserve 		= TheApplication().GetBusObject(""RMS NM Number Reservation"");
	var mbcNumReserve 		= mboNumReserve.GetBusComp(""RMS NM Number Reservation"");
	var mbcNumReserveNum 	= mboNumReserve.GetBusComp(""RMS NM Resrv Start Num"");
	var psFileContent		= TheApplication().NewPropertySet();
	var miLineNum			= 1;
	var msFirstNum;
	var mbIsRecord;
	try 
	{
		with(mbcNumReserve) 
		{
			ActivateField(""Id"");
			ActivateField(""Qty"");
			ActivateField(""HLR Id"");
			ActivateField(""Reserved To"");
			ActivateField(""Reservation End Date"");
			ActivateField(""Reserved Date"");
			ClearToQuery();
			SetSearchSpec(""Id"",msReservationId);
			ExecuteQuery();
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) return false;
		}
		with(mbcNumReserveNum) 
		{
			SetViewMode(AllView);
			ActivateField(""HLR Id"");
			ActivateField(""Number String"");
			ClearToQuery();
			ExecuteQuery();
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) return false;
		}
		psFileContent.SetProperty(miLineNum++,""Store Name:"" + mbcNumReserve.GetFieldValue(""Reserved To"") + ""\tHLR: "" + mbcNumReserve.GetFieldValue(""HLR Id"") + ""\tQty: "" + mbcNumReserve.GetFieldValue(""Qty""));
		psFileContent.SetProperty(miLineNum++,""From:"" + mbcNumReserve.GetFieldValue(""Reserved Date"") + ""\tTo: "" + mbcNumReserve.GetFieldValue(""Reservation End Date"") + ""\n"");
		psFileContent.SetProperty(miLineNum++,""\n"");
		while(mbIsRecord) 
		{	
			msFirstNum = mbcNumReserveNum.GetFieldValue(""Number String"");
			mbIsRecord = mbcNumReserveNum.NextRecord();
			if(mbIsRecord)
				psFileContent.SetProperty(miLineNum++, msFirstNum + ""\t"" + mbcNumReserveNum.GetFieldValue(""Number String""));
			else
				psFileContent.SetProperty(miLineNum++, mbcNumReserveNum.GetFieldValue(""Number String""));
			mbIsRecord = mbcNumReserveNum.NextRecord();
		}
		psFileContent.SetType(""FileContent"");
		Outputs.AddChild(psFileContent);
	} 
	catch(e) 
	{
		Outputs.SetProperty(""ErrCode"",e.errCode);
		Outputs.SetProperty(""ErrMessage"",e.errText);	
	} 
	finally 
	{
		mbcNumReserveNum 	= null;
		mbcNumReserve 		= null;
		mboNumReserve		= null;
//1.1 below
		psFileContent = null;
//1.1 below		
		Outputs.SetProperty(""ErrCode"","""");
		Outputs.SetProperty(""ErrMessage"","""");
	}
}
"/**************************************************************************************
* Name          : RMS NM ReservedExport Service PreInvoke Method				 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM ReservedExport Code File                      			  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	1.0   		   MBT					   	Created       03/12/2003      *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""ReservedExport"") {
		ReservedExport(Inputs.GetProperty(""ReservationId""),Outputs);
		return (CancelOperation);
	}
	else
		return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""NumberAssociation"")
	{
		NumberAssociation();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}



function NumberAssociation()
{
	var sRowId="""";
	var psInputs = TheApplication().NewPropertySet();
	var psOutputs = TheApplication().NewPropertySet();
	var oSerAccBO;
	var oSerSubAccBC;
	var bsRMSIntfOM;
	var IsRecord;
	//var sMSISDN;
	//var sSIMnum;
	
	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_TERMINATION"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-02.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */

	//var file=Clib.fopen(""/siebelfs/hout.csv"", ""rt"");

	if (file==null)
	{
		TheApplication().RaiseErrorText(""Error in opening the file"");
	}
	else
	{
		while(!Clib.feof(file))
		{
			sRowId = (Clib.fgets(file));  
			sRowId = trim(sRowId);
			oSerAccBO = TheApplication().GetBusObject(""STC Service Account"");
			oSerSubAccBC = oSerAccBO.GetBusComp(""CUT Service Sub Accounts"");
			bsRMSIntfOM = TheApplication().GetService(""RMS RMS Interface Order Management"");
			with(oSerSubAccBC)
			{
				ActivateField(""Id"");
				ActivateField(""DUNS Number"");
				ActivateField(""STC-ICCID"");
				ClearToQuery();
				SetSearchSpec(""Id"", sRowId);
				// SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE""));    
				ExecuteQuery(ForwardOnly);
				IsRecord = FirstRecord(); 
		   
				if(IsRecord)
				{
					//sMSISDN = GetFieldValue(""DUNS Number"");
					//sSIMnum = GetFieldValue(""STC-ICCID"");
					psInputs.SetProperty(""Contract Id"",GetFieldValue(""Id"")); 
					psInputs.SetProperty(""SIM Number"",GetFieldValue(""STC-ICCID""));
					psInputs.SetProperty(""MSISDN Number"",GetFieldValue(""DUNS Number"")); 
					bsRMSIntfOM.InvokeMethod(""ActivateOrder"",psInputs,psOutputs); 
				} // End of IsRecord
			} // End of With statements  
		} // End of while 
	}// End of else
	bsRMSIntfOM=null;
	psInputs=null;
	psOutputs=null;
	oSerAccBO=null;
	oSerSubAccBC=null;
	sRowId=null;
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060706       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed,corrected the sequence of object freeing
20061006	   | 1.2  | AmitK  | To Add Special Category and POC to File  
---------------+------+--------+----------------------------------------------
*/
function GenerateFile(strBatchId)
{
	var strSIM;
	var strRecord;
	var blnIsRecord;
	var blnIsRecord1;
	var reccount;
	var FileObject;
	var strFilePath;
	var strFileName=""STARTERPACK_""+strBatchId+"".txt"";
	var strErrVal;
	
	var boAUCRegistration 	= TheApplication().GetBusObject(""RMS AUC Registration"");
	var bcAUCRegistration	= boAUCRegistration.GetBusComp(""RMS AUC Registration"");
	var bcPreActivation		= boAUCRegistration.GetBusComp(""RMS AUC IMSI  Pre Activation EBC"");
	
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref = boSysPref.GetBusComp(""System Preferences"");

	var strDate;
	var strExpDate;
	var dtFiledate;
	var dtSysdate;

	Clib.strftime(strDate,""%Y%m%d"",Clib.localtime(Clib.time()));

	try
	{
	//-----GETTING THE FILE PATH FROM SYSTEM PREFERENCE------------
		bcSysPref.ActivateField(""Value"");
		
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""RMS_IF_SIMPAIRING_DIR_IN"");
		bcSysPref.ExecuteQuery();
	
		if(bcSysPref.FirstRecord()) 
		{	 
			strFilePath = bcSysPref.GetFieldValue(""Value"");
		}
	//-----QUERY THE bcAUCRegistration BC FOR RECORD COUNT----------
			reccount=0;
		with(bcAUCRegistration)
		{
			ActivateField(""Quantity"");
			
			ClearToQuery();
			SetSearchSpec(""Id"", strBatchId);
			ExecuteQuery(ForwardOnly);
			blnIsRecord1 = FirstRecord();

			if(blnIsRecord1)
			{
				reccount = GetFieldValue(""Quantity"");
			}
		}
	//-----QUERY THE BC FOR BATCH NO--------------------------------	
		with(bcPreActivation)
		{
			ActivateField(""Batch No"");
			ActivateField(""Id"");
			ActivateField(""SIM"");
			ActivateField(""MSISDN"");
			ActivateField(""IMSI"");
			ActivateField(""Expiry Date"");
			ActivateField(""Balance"");
			ActivateField(""Package Id"");
			ActivateField(""Active Period"");
			ActivateField(""Grace Period"");
			
			//1.2 below 
			ActivateField(""Special Category"");
			//ActivateField(""POC"");
			//1.2 above 

//			reccount=0;
			ClearToQuery();
			SetSearchSpec(""Batch No"", strBatchId);
			ExecuteQuery(ForwardOnly);
		//	blnIsRecord = FirstRecord();
//--------------------------------------------------------------------------------------
//		COUNT THE NUMBER OF RECORDS

/*			while(blnIsRecord)
			{
				reccount=reccount+1;
				blnIsRecord=NextRecord();
			}
*/
//----------------------------------------------------------------------------------------
//		WRITING EACH RECORD TO THE FILE
			
			blnIsRecord = FirstRecord();
			
				FileObject = Clib.fopen(strFilePath + strFileName,""w"");
				if(FileObject==null)
					TheApplication().RaiseErrorText(""Could not create File"");
	
				strRecord=""0|""+strBatchId+""|""+strDate+""|""+reccount;
				Clib.fputs(strRecord + ""\n"", FileObject);
	
				while(blnIsRecord)
				{
					
					dtFiledate = new Date(GetFieldValue(""Expiry Date""));	
		            dtSysdate = dtFiledate.toSystem();
					Clib.strftime(strExpDate,""%Y%m%d"",Clib.localtime(dtSysdate));

					strSIM	=	GetFieldValue(""SIM"");
					strSIM	=	strSIM.substring(0,19);
					strRecord=""1|""+strBatchId+""|""+GetFieldValue(""Id"")+""|""+strSIM+""|""+GetFieldValue(""MSISDN"");
					strRecord=strRecord+""|""+GetFieldValue(""IMSI"")+""|""+strExpDate;
					strRecord=strRecord+""|""+GetFieldValue(""Balance"")+""|""+GetFieldValue(""Package Id"");
					strRecord=strRecord+""|""+GetFieldValue(""Active Period"")+""|""+GetFieldValue(""Grace Period"");
					//1.2 below
					strRecord=strRecord+""|""+GetFieldValue(""Special Category"")+""|""+GetFieldValue(""POC"");
					//1.2 above 
					Clib.fputs(strRecord + ""\n"", FileObject);
	
					blnIsRecord=NextRecord();
				}//while end

				strRecord=""2|""+strBatchId+""|""+strDate+""|""+reccount;
				Clib.fputs(strRecord + ""\n"", FileObject);
				

				Clib.fclose(FileObject);
			

		

		}//with end
	
	}//try end
	catch(e)  
	{
		strErrVal = e.errText;
		if (FileObject != null)
			Clib.fclose(FileObject);
		throw(e);
	}
	finally
	{
//1.1 below
		bcAUCRegistration	= 	null;
		bcPreActivation		=	null;
		boAUCRegistration	=	null;
		bcSysPref			=	null;
		boSysPref			=	null;
//1.1 above
	}

	return (CancelOperation);

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{

	var strErrVal = """";
	var strBatchId = """";
	
	if(MethodName==""GenerateFile"")
	{
		strBatchId = Inputs.GetProperty(""Object Id"");
		strErrVal=GenerateFile(strBatchId);
		//if (strErrVal!="""")
		//	TheApplication().RaiseErrorText(strErrVal);
	}

	return (CancelOperation);
}
"/**************************************************************************************
* Name          : RMS Business Service PreInvoke Method				        	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS Business Service Code File                      				  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 11/10/2003	1.0   		Mahindra British Telecom   	Created       11/10/2003      *
**************************************************************************************/


function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{

	var boNumScheme;
	var bcNumberBlock;
	
	var intBlockId;
	var strFromStatus;
	var strToStatus;
	
	boNumScheme = TheApplication().GetBusObject(""RMS NM Number Scheme"");
	bcNumberBlock = boNumScheme.GetBusComp(""RMS NM Number Block Updation"");

	intBlockId    = Inputs.GetProperty(""Object Id"");
	strFromStatus = Inputs.GetProperty(""From Status"");
	strToStatus   = Inputs.GetProperty(""To Status"");

	if(MethodName == ""UpdateNumberBlock""){
		
		with(bcNumberBlock){

			ActivateField(""Available Count"");
			ActivateField(""Not Available Count"");
			ActivateField(""Allocated Count"");
			ActivateField(""Assigned Count"");
			ActivateField(""Quarantine Count"");
			ActivateField(""Reserved Count"");
			ActivateField(""Trash Count"");
			ActivateField(""Lost Count"");
			ActivateField(""With SIM Supplier"");
			ActivateField(""Unregistered Count"");
			
			ClearToQuery();
			SetSearchSpec(""Id"",intBlockId);
			ExecuteQuery();	
			FirstRecord();

            if(strFromStatus != """"){
             	if(strFromStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""))
					SetFieldValue(""Available Count"",ToInteger(GetFieldValue(""Available Count""))-1);
				else if(strFromStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE""))
					SetFieldValue(""Not Available Count"",ToInteger(GetFieldValue(""Not Available Count""))-1);
				else if(strFromStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED""))
					SetFieldValue(""Allocated Count"",ToInteger(GetFieldValue(""Allocated Count""))-1);
				else if(strFromStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED""))
					SetFieldValue(""Reserved Count"",ToInteger(GetFieldValue(""Reserved Count""))-1);
				else if(strFromStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED""))
					SetFieldValue(""Assigned Count"",ToInteger(GetFieldValue(""Assigned Count""))-1);
				else if(strFromStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE""))
					SetFieldValue(""Quarantine Count"",ToInteger(GetFieldValue(""Quarantine Count""))-1);
				else if(strFromStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED""))
					SetFieldValue(""Trash Count"",ToInteger(GetFieldValue(""Trash Count""))-1);
				else if(strFromStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""LOST""))
					SetFieldValue(""Lost Count"",ToInteger(GetFieldValue(""Lost Count""))-1);
				else if(strFromStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""))
					SetFieldValue(""With SIM Supplier"",ToInteger(GetFieldValue(""With SIM Supplier""))-1);
				else if(strFromStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""UNREGISTERED""))
					SetFieldValue(""Unregistered Count"",ToInteger(GetFieldValue(""Unregistered Count""))-1);	
			}
			if(strToStatus != """"){
				if(strToStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""))
					SetFieldValue(""Available Count"",ToInteger(GetFieldValue(""Available Count""))+1);
				else if(strToStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE""))
					SetFieldValue(""Not Available Count"",ToInteger(GetFieldValue(""Not Available Count""))+1);
				else if(strToStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED""))
					SetFieldValue(""Allocated Count"",ToInteger(GetFieldValue(""Allocated Count""))+1);
				else if(strToStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED""))
					SetFieldValue(""Reserved Count"",ToInteger(GetFieldValue(""Reserved Count""))+1);
				else if(strToStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED""))
					SetFieldValue(""Assigned Count"",ToInteger(GetFieldValue(""Assigned Count""))+1);
                else if(strToStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE""))
					SetFieldValue(""Quarantine Count"",ToInteger(GetFieldValue(""Quarantine Count""))+1);
				else if(strToStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED""))
					SetFieldValue(""Trash Count"",ToInteger(GetFieldValue(""Trash Count""))+1);
				else if(strToStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""LOST""))
					SetFieldValue(""Lost Count"",ToInteger(GetFieldValue(""Lost Count""))+1);
				else if(strToStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""))
					SetFieldValue(""With SIM Supplier"",ToInteger(GetFieldValue(""With SIM Supplier""))+1);
				else if(strToStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""UNREGISTERED""))
					SetFieldValue(""Unregistered Count"",ToInteger(GetFieldValue(""Unregistered Count""))+1);	
			}
			
			WriteRecord();
		}
			
			bcNumberBlock = null;	
			boNumScheme = null;
			
			intBlockId    = """";
			strFromStatus = """";
			strToStatus   = """";
			
			return(CancelOperation);
		
	}
	
	
	
    return (ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS RMS Block Numbers Service BlockNumbers Method				  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function to block the specified number                      		  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 29/03/2004	1.0   		Mahindra British Telecom   	Created       29/03/2004      *
* 22/06/2006    1.1         Kalyana                     ES#14 						  *
* 23/01/2007	1.2			Manoj						perfomance 					  *
**************************************************************************************/
function BlockNumbers(&Inputs,&Outputs,&bcNumMstr)
{
	var strSrchExpr	 = """";
	var blnIsRec	 = false;
	var strStatus	 = """";
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
    var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
	var BlockPeriod = """"; 
	var BlockPeriodUOM = """";
	try{


	//New 
	if (TheApplication().GetProfileAttr(""ORDERBLOCKPERIOD"") == """")
	{
		bcSysPref.ActivateField(""Value"");
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""RMS_ORDERBLOCKPERIOD"");
		bcSysPref.ExecuteQuery();
		if(bcSysPref.FirstRecord()) 
		{
			BlockPeriod = bcSysPref.GetFieldValue(""Value"");
		}
	}
	else 
		BlockPeriod = TheApplication().GetProfileAttr(""ORDERBLOCKPERIOD"");
	if (TheApplication().GetProfileAttr(""ORDERBLOCKPERIODUOM"") == """")
	{
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""RMS_ORDERBLOCKPERIODUOM"");
		bcSysPref.ExecuteQuery();
		if(bcSysPref.FirstRecord()) 
		{
			BlockPeriodUOM = bcSysPref.GetFieldValue(""Value"");
		}
	}
	else 
		BlockPeriodUOM = TheApplication().GetProfileAttr(""ORDERBLOCKPERIODUOM"");
/*---------------------------------------------------------------------------------------------	
	 KT 22/06/2006 Chaged Search Specification on calculated field to normal field 
	-----------------------------------------------------------------------------------------------*/	
	//strSrchExpr	= ""[Calc Number Without Delimiter] = '""+Inputs.GetProperty(""BlockNumber"")+""'"";
	  strSrchExpr	= ""[Num Mstr Number String] = '""+Inputs.GetProperty(""BlockNumber"")+""'"";
	//1.2 below
	if(Inputs.GetProperty(""BlockNumber"") == """") {
		Outputs.SetProperty(""ErrCode"",""RMSIFBN003"");
		Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFBN003"",Inputs.GetProperty(""BlockNumber"")));		
		TheApplication().RaiseErrorText(""EXIT"");
	}
	//1.2 above
	with(bcNumMstr) {
		ClearToQuery();
		SetSearchExpr(strSrchExpr);
		ExecuteQuery(ForwardOnly);
			
		blnIsRec = FirstRecord();
		
		if(blnIsRec) {
			strStatus = GetFieldValue(""Status"");
			
			if((GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""SIM""))
				&&
			   (GetFieldValue(""Record Blocked For"") != """")) {
				Outputs.SetProperty(""ErrCode"",""RMSIFBN001"");
				Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFBN001"",Inputs.GetProperty(""BlockNumber""),GetFieldValue(""Record Blocked For"")));	
				TheApplication().RaiseErrorText(""EXIT"");	
				
			} else if((strStatus != TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED""))
				&&
			   (strStatus != TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""RESERVED""))) {
				
				Outputs.SetProperty(""ErrCode"",""RMSIFBN002"");
				Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFBN002"",Inputs.GetProperty(""BlockNumber"")));		
				TheApplication().RaiseErrorText(""EXIT"");
			}
		} else {
			Outputs.SetProperty(""ErrCode"",""RMSIFBN003"");
			Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFBN003"",Inputs.GetProperty(""BlockNumber"")));		
			TheApplication().RaiseErrorText(""EXIT"");
		}
		
		//Query all associated numbers if the specified number is associated
		if(GetFieldValue(""Assoc Start Id"") != """") {
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",GetFieldValue(""Assoc Start Id""));
			ExecuteQuery(ForwardOnly);
			blnIsRec = FirstRecord();
		}
		
		while(blnIsRec) {
			//if(GetFieldValue(""Calc Number Without Delimiter"") == Inputs.GetProperty(""BlockNumber"")) {
			if(GetFieldValue(""Num Mstr Number String"") == Inputs.GetProperty(""BlockNumber"")) {	
			//personalid/customer id of the customer/dealer for which the number is blocked to
				SetFieldValue(""Record Blocked For"",Inputs.GetProperty(""BlockedFor"")); 
				//Set the block date so that the number may not be visible immediately to other dealers
				//useful for MSISDN numbers, to avoid two dealers using the same MSISDN number to two customers
				//if(Inputs.GetProperty(""BlockPeriod"") != """") {  //kt 28-06-06
					if(BlockPeriod != """"){
						//var msBlockDate = CalcBlockingDate(Inputs.GetProperty(""BlockPeriodUOM""), Inputs.GetProperty(""BlockPeriod""), GetFieldValue(""Current Date""));
						var msBlockDate = CalcBlockingDate(BlockPeriodUOM,BlockPeriod, GetFieldValue(""Current Date""));
						SetFieldValue(""Record Blocking Date"",msBlockDate);
				} else {
					SetFieldValue(""Record Blocking Date"",GetFieldValue(""Current Date""));
				}
				WriteRecord();
			}
			blnIsRec = NextRecord();
		}
	}
	
	} catch(e) {
		bcSysPref = null;
		boSysPref = null;  
		if(Outputs.GetProperty(""ErrCode"") == """"){
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrMessage"",e.errText);
		}
	} finally {
	bcSysPref = null;
	boSysPref = null; 
	}
	
	return(Outputs.GetProperty(""ErrCode""));
}
"/**************************************************************************************
* Name          : RMS Interface Order			 	          						  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Calculate Available Date                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 1/11/2003	1.0   		Mahindra British Telecom   	Created       05/11/2003          *
**************************************************************************************/
function CalcBlockingDate(BlockPeriodUOM, BlockingPeriod, CurrentDate)
{
	
	
	var dtBlockingDateObj = new Date(CurrentDate);
 
    switch (BlockPeriodUOM) {

  	    case ""D"": 
			dtBlockingDateObj.setDate(ToInteger(dtBlockingDateObj.getDate()) + ToInteger(BlockingPeriod));
        	break;
             	
   		case ""M"": 
			dtBlockingDateObj.setMonth(ToNumber(ToNumber(dtBlockingDateObj.getMonth()) + ToNumber(BlockingPeriod)));
			break;
		
    	case ""W"":
			dtBlockingDateObj.setDate(dtBlockingDateObj.getDate() + (BlockingPeriod * 7));
       		break;
   		
   		case ""Y"": 
  			dtBlockingDateObj.setFullYear(ToNumber(ToNumber(dtBlockingDateObj.getFullYear()) + ToNumber(BlockingPeriod)));
			break;
   }
   
   return(DateToString(dtBlockingDateObj));
}
"/**************************************************************************************
* Name          : RMS RMS Block Numbers Service CancelBlockNumbers Method	       	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function to Cancel the blocking of numbers            			  *	
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 29/03/2004	1.0   		Mahindra British Telecom   	Created       29/03/2004      *
* 22/06/2006    1.1         Kalyana                     ES#14 
**************************************************************************************/
function CancelBlockNumbers(&Inputs,&Outputs,&bcNumMstr)
{
	var strSrchExpr	 = """";
	var blnIsRec	 = false;
	
	try{
    /*---------------------------------------------------------------------------------------------	
	 KT 22/06/2006 Chaged Search Specification on calculated field to normal field
	-----------------------------------------------------------------------------------------------*/	
	//strSrchExpr	= ""[Calc Number Without Delimiter] = '""+Inputs.GetProperty(""CancelNumber"")+""'"";
	  strSrchExpr	= ""[Num Mstr Number String] = '""+Inputs.GetProperty(""CancelNumber"")+""'"";	
	if(Inputs.GetProperty(""CancelNumber"") == """")
		return (Outputs.GetProperty(""ErrCode""));
	with(bcNumMstr) {
		ClearToQuery();
		SetSearchExpr(strSrchExpr);
		ExecuteQuery(ForwardOnly);
			
		blnIsRec = FirstRecord();
		//If specified number not available in system throw error message
		if(!blnIsRec) {
			Outputs.SetProperty(""ErrCode"",""RMSIFBN003"");
			Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFBN003"",Inputs.GetProperty(""BlockNumber"")));		
			TheApplication().RaiseErrorText(""EXIT"");
			//If BlockedFor is specified, then validate
		}
/*23mar:ms: commented as this condition will not work for numbers which are re-used after blocking Date
		else if (Inputs.GetProperty(""BlockedFor"") != """" ) {
			if(GetFieldValue(""Record Blocked For"") != Inputs.GetProperty(""BlockedFor"")) {
				Outputs.SetProperty(""ErrCode"",""RMSIFBN001"");
				Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFBN001"",Inputs.GetProperty(""BlockNumber""),GetFieldValue(""Record Blocked For"")));		
				TheApplication().RaiseErrorText(""EXIT"");
			}
		}
*/		
		//Query all associated numbers if the specified number is already associated
		if(GetFieldValue(""Assoc Start Id"") != """") {
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",GetFieldValue(""Assoc Start Id""));
			ExecuteQuery(ForwardOnly);
			blnIsRec = FirstRecord();
		}
		while(blnIsRec) {
			
			//clear off the dealer code so that number can be used for different customer
			SetFieldValue(""Record Blocked For"",""""); 
			//Set the block date so that the number number can be used for different customer
			SetFieldValue(""Record Blocking Date"","""");
			WriteRecord();
			
			blnIsRec = NextRecord();
		}
	}
	} catch(e) {
		if(Outputs.GetProperty(""ErrCode"") == """"){
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrMessage"",e.errText);
		}
	} finally {
	
	}
	
	return(Outputs.GetProperty(""ErrCode""));
}
"/**************************************************************************************
* Name          : NM Number Reservation DateToString  Method		 	              * 
* Author        : Mahindra British Telecom                                            *
* Description   : DateToString Code File                      				          *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003	1.0   		Mahindra British Telecom   	Created       30/12/2003      *
**************************************************************************************/

//-------------------------------------------------------------------------------------
//Gets the 'Date','Month','Hours','Minutes','Second' and appends them to a string.
//-------------------------------------------------------------------------------------

function DateToString (intCDate)
{
	var dtDatum = ((intCDate.getMonth() + 1) + ""/"" + intCDate.getDate() + ""/"" + intCDate.getFullYear()
	+ "" "" + intCDate.getHours() + "":"" + intCDate.getMinutes()+ "":"" + intCDate.getSeconds());
	return dtDatum
}
"/**************************************************************************************
* Name          : RMS RMS Block Numbers Service PreInvoke Method				      * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS RMS Block Numbers Business Service Code File    				  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 29/03/2004	1.0   		Mahindra British Telecom   	Created       29/03/2004      *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{

	var boNumMstr;
	var bcNumMstr;
	
	var strErrVal	= """";
	
	var intReturn 	= CancelOperation;
	
	Outputs.SetProperty(""ErrCode"", """");
	Outputs.SetProperty(""ErrMessage"","""");
	
	try{
	boNumMstr = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNumMstr = boNumMstr.GetBusComp(""RMS NM Number Enquiry"");
		
	with(bcNumMstr) {
		//ActivateField(""Calc Number Without Delimiter""); //KT 22-06-06
		ActivateField(""Num Mstr Number String"");
		ActivateField(""Record Blocked For"");
		ActivateField(""Record Blocking Date"");						
		ActivateField(""Current Date"");	
		ActivateField(""Status"");
		ActivateField(""Assoc Start Id"");					
		ActivateField(""Type Identifier"");
	}
	
	switch(MethodName) {
		case ""BlockNumber"":
			if(Inputs.GetProperty(""ReleaseNumber"") != """") {
				Inputs.SetProperty(""CancelNumber"",Inputs.GetProperty(""ReleaseNumber""));
				strErrVal = CancelBlockNumbers(Inputs,Outputs,bcNumMstr);
			}
			
			if(Outputs.GetProperty(""ErrCode"") == """") {
				strErrVal = BlockNumbers(Inputs,Outputs,bcNumMstr);
			}
			break;
		case ""CancelBlockNumber"":
			Inputs.SetProperty(""CancelNumber"",Inputs.GetProperty(""BlockNumber""));
			strErrVal = CancelBlockNumbers(Inputs,Outputs,bcNumMstr);
			break;
		default:
			intReturn 	= ContinueOperation;
			break;
			
	}
	
	
	} catch(e) {
		if(Outputs.GetProperty(""ErrCode"") == """") {
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrMessage"",e.errText);
		}
			
	} finally {
		bcNumMstr = null;
		boNumMstr = null;
	}
    return (intReturn);
}
"/**************************************************************************************
* Name          : RMS NM Number Cancel Reservation Service_PreInvoke Method    	  *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Cancel Reservation Code File	    		          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   	MBT		 Created      30/12/2003       *
* 22/06/2006	1.1     Kalyana  SiebelES#6 commented UpdateAssociatedNumbers					
20060710      | 1.2  |  Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function CancelReservation(&Inputs,&Outputs,&strErrVal)
{
	var boNumberMaster;
	var bcNumberMaster;
	//var bcNMMstr;
	var strSource;
	var intSalesCode;
	var intPersonalId;

	var SearchExpr = """";
	var strBlockId;
	var strFromStatus;
	var strToStatus;
	var strDealerType;
	
	var strReturn	= """";
	var intOverduePeriod;	
	var blnIsRecord;
	
//----GB 01/06/06---------------------------------------
var strToday;
var tm=Clib.localtime(Clib.time());	
Clib.strftime(strToday,""%m/%d/%Y %H:%M:%S"",tm);
//------------------------------------------------------


	boNumberMaster	= 	TheApplication().GetBusObject(""RMS NM Number Enquiry"");      //21st June 05
	bcNumberMaster = boNumberMaster.GetBusComp(""RMS NM Number Enquiry For Update"");  //21st June 05

	strSource		=	Inputs.GetProperty(""Source""); 
	intSalesCode	=	Inputs.GetProperty(""Sales_Code"");
	intPersonalId	=	Inputs.GetProperty(""Personal_Id"");
//	strMSISDNNumber	=	Inputs.GetProperty(""MSISDN"");
	
	with(bcNumberMaster){
			
		ActivateField(""Status"");
		ActivateField(""Number String"");
		ActivateField(""Type Identifier"");
		ActivateField(""Is Associated"");
		ActivateField(""Block Id"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Reservation End Date"");
		ActivateField(""Todays Date"");
		ActivateField(""Reserved To"");
		ActivateField(""Sales Code"");
		ActivateField(""Source System"");
		ActivateField(""Status Before Reservation"");
		ActivateField(""Num Mstr Status Before Reservation"");
		ActivateField(""Resrv Date Diff"");
		ActivateField(""Resv Id""); // Reservation Id
		ActivateField(""Status Date"");
		ActivateField(""Current Date"");
		ActivateField(""Dealer Name"");
		ActivateField(""Dealer Area Code"");
		ActivateField(""Dealer Channel Code"");
		ActivateField(""Record Blocking Date"");
		ActivateField(""Record Blocked For"");
		ActivateField(""Resrv Date Diff"");
		
	}
	
	
	if(strSource == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""RMS"")) {

		Outputs.SetProperty(""Error_Code"",""0"");
		Outputs.SetProperty(""Error_Message"","""");
/*		strReturn = GetSysParam(""RMS_OVERDUE_PERIOD_DAYS"");
		if(strReturn == """") {
			intOverduePeriod = 0;
		} else {
			intOverduePeriod = ToNumber(strReturn);
		}
*/

	with(bcNumberMaster){
//			SearchExpr = SearchExpr + "" OR [Status] = '""+TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""OVERDUE"")+""' "";
//----------GB 01/06/06-------------------------------------------------------------------------
			SearchExpr = ""[Reservation End Date] <='"" + strToday + ""' "";
			SearchExpr = SearchExpr+ ""AND [Status] = '""+TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""RESERVED"")+""' "";

			ClearToQuery();
			SetSearchExpr(SearchExpr);

			ExecuteQuery();
			blnIsRecord=FirstRecord();
			
			while(blnIsRecord)
			{
				//
						strBlockId 		= GetFieldValue(""Block Id"");
						strFromStatus 	= GetFieldValue(""Status"");					

							strToStatus		= GetFieldValue(""Num Mstr Status Before Reservation"");
						if(strToStatus == """")					
							strToStatus 	= TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"");
							
						//ver 1.1 ----------KT 22/06/06-------------------------------------------------------------------------
						
						/*	bcNMMstr	=   boNumberMaster.GetBusComp(""RMS NM Number Enquiry For Update"");
						var strAssocId=GetFieldValue(""Assoc Start Id"");
						if (strAssocId!="""")
							UpdateAssociatedNumbers(GetFieldValue(""Assoc Start Id""),bcNMMstr,strToStatus); */
					//		SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));						
				CancelReservedNumbers(bcNumberMaster,strSource,strFromStatus,strToStatus,Outputs); //21st JUNE 05				
				blnIsRecord	= NextRecord();			




//-----------------------------------------------------------------------------
// If 'Reservation End Date' is same as Todays date then update the
// 'Status' to 'Overdue'. Clear the Reservation Information from Num Master. 
//-----------------------------------------------------------------------------
/*GB 03/06/06				if((GetFieldValue(""Resrv Date Diff"") >= 0)// && (GetFieldValue(""Resrv Date Diff"") < intOverduePeriod)
					&&
    				(GetFieldValue(""Status"") == TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""RESERVED""))) {
						strBlockId 		= GetFieldValue(""Block Id"");
						strFromStatus 	= GetFieldValue(""Status"");
						strToStatus 	= TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""OVERDUE"");
						
					if(GetFieldValue(""Is Associated"") == ""Y"")
					{
//						bcNMMstr	=   boNumberMaster.GetBusComp(""RMS NM Master Rsrv""); //22nd june
						bcNMMstr	=   boNumberMaster.GetBusComp(""RMS NM Number Enquiry For Update"");
						UpdateAssociatedNumbers(GetFieldValue(""Assoc Start Id""),bcNMMstr); 
//						UpdateAssociatedNumbers(GetFieldValue(""Assoc Start Id""),bcNumberMaster); //22nd June
					} 
					else if(GetFieldValue(""Is Associated"") != ""Y"")
					{
						SetFieldValue(""Status"",strToStatus);
						SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));

						WriteRecord()
						UpdateNumberBlock(strBlockId,strFromStatus,strToStatus);
						
					}
				}

//----------------------------------------------------------------------
// If 'Reservation End Date' is same as Todays date then update the
// 'Status' to 'Status Before Reservation'. 
// Clear the Reservation Information from Num Master. 
//----------------------------------------------------------------------
					else if(GetFieldValue(""Resrv Date Diff"") > intOverduePeriod)
	//					CancelReservedNumbers(bcNumberMaster,strSource,bcDMSVBC,""AVAILABLE"",strPropectDealerCode,strCustomerDealerCode,Outputs);
						CancelReservedNumbers(bcNumberMaster,strSource,""ALLOCATED"",Outputs); //21st JUNE 05


				blnIsRecord	= NextRecord();			
GB 03/06/06*/			
			}//WHILE ENDS
		} //with ends
	}//IF FOR RMS ENDS

	else if(strSource == TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""IVR"")){
		
		if(Inputs.GetProperty(""MSISDN"") == """") 
		{
			Outputs.SetProperty(""Error_Code"",""RMSIVR006"");
			Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR006""));
			TheApplication().RaiseErrorText(""EXIT"");
		}
			
		if(intSalesCode != """") 
		{ //sales code will be popualated for dealers
			
			strDealerType	= ""DEALER"";
//			strDealerCode	= intSalesCode;
		} 
		else if(intPersonalId != """") 
		{
		//Personal id will be populated in case of prospect
			strDealerType	= ""PROSPECT"";
//			strDealerCode	= GetDealerCode(strMSISDNNumber,""PCU"");
		} 
		else 
		{ //else customer
			strDealerType	= ""CUSTOMER"";
//			strDealerCode	= GetDealerCode(strMSISDNNumber,""CUS"");
		}
		
		
//		IVRCancellation(Inputs,Outputs,bcNumberMaster,strDealerType,strDealerCode);
		IVRCancellation(Inputs,Outputs,bcNumberMaster,strDealerType);

		if(Outputs.GetProperty(""Error_Code"") == """") 
		{
			Outputs.SetProperty(""Error_Code"",""0"")
		}
	} 
//1.2 below
	bcNumberMaster = null;
	boNumberMaster = null;
//1.2 above
	return(strErrVal);		
}
"/**************************************************************************************
* Name          : RMS NM Number Cancel Reservation CancelReservedNumbers Method   	  *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Cancel Reservation Code File	    		          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      30/12/2003       *
**************************************************************************************/
function CancelReservedNumbers(bcNumberMaster,strSource,strFromStatus,strTargetStatus,&Outputs) // strPropectDealerCode,strCustomerDealerCode,
{

	var strBlockId;
	var strToStatus;	
	var blnUpdateDMS  = false;

	try{
	with(bcNumberMaster) {
			
		/*ActivateField(""Reserved To"");	
		ActivateField(""Reservation End Date"");
		ActivateField(""Resv Id"");
		ActivateField(""Status"");
		ActivateField(""Block Id"");
		ActivateField(""Num Mstr Status Before Reservation"");KT 21-06-06*/
		strBlockId  	= GetFieldValue(""Block Id"");
		//strToStatus		= GetFieldValue(""Num Mstr Status Before Reservation""); //21ST JUNE
		strToStatus		= strTargetStatus;
		if(strToStatus == """")					
			strToStatus 	= TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"");
		
		SetFieldValue(""Status"",strToStatus);
		SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
		var strReservedTo = GetFieldValue(""Reserved To"");
		SetFieldValue(""Reserved To"","""");
		SetFieldValue(""Reservation End Date"","""");
		SetFieldValue(""Resv Id"","""");

	
		SetFieldValue(""Record Blocked For"","""");
		SetFieldValue(""Record Blocking Date"","""");
	
		SetFieldValue(""Num Mstr Status Before Reservation"","""");
		SetFieldValue(""Source System"","""");
	


		WriteRecord();
//-----------------------------------------
// Update Partner Reservation Quota.
//-----------------------------------------
		var intQuantity = 1;
		var strTypeMSISDN = TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""MSISDN"");
		var strType = GetFieldValue(""Type Identifier"");
		if(strType == strTypeMSISDN){
			UpdateReservationQuota(strReservedTo,intQuantity);
		}
//-----------------------------------------
// Update the block count of MSISDN number.
//-----------------------------------------
//		UpdateNumberBlock(strBlockId,strFromStatus,strToStatus);
	}

	} catch(e) {
		if(Outputs.GetProperty(""ErrCode"") == ""0"") {
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrMessaage"",e.errText);
		}
 	} 
	
}
"/**************************************************************************************
* Name          : RMS NM Number Cancel Reservation CancelReservedNumbers Method   	  *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Cancel Reservation Code File	    		          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      30/12/2003       *
**************************************************************************************/
function CancelReservedNumbersOld(IsAssociated,strAssocStartId,bcNMMstr,bcNumberMaster,strSource,bcDMSVBC) {

	var strDealerCode;
	var strResrvSrc;
	var	blnIsRecord;
	var boDMSVBC;
	var bcDMSVBC;
	var strBlockId;
	var strFromStatus;	
	var strToStatus;	
	
	
	if(IsAssociated == ""Y"") {
// =========================== COMMENTED FOR FUTURE USE Ver 2.0 =============================/
/*		with(bcNumberMaster) {
		    ActivateField(""Assoc Start Id"");
			ActivateField(""Status Before Reserv"");								
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",strAssocStartId);
			ExecuteQuery();

			blnIsRecord=FirstRecord();
			strResrvSrc   = GetFieldValue(""Source System"");
			while(blnIsRecord){
			
				SetFieldValue(""Status"",GetFieldValue(""Status Before Reserv""));
				SetFieldValue(""Reserved To"","""");
				SetFieldValue(""Reservation End Date"","""");
				SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
				WriteRecord();
//-----------------------------------------
// Update the block count of MSISDN number.
//-----------------------------------------
				psBlkInputs  = TheApplication().NewPropertySet();
				psBlkOutputs = TheApplication().NewPropertySet();				
				with(psBlkInputs){
					SetProperty(""Object Id"",GetFieldValue(""Block Id""));
					SetProperty(""From Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED""));
					SetProperty(""To Status"",GetFieldValue(""Status Before Reserv""));
				}
				
				bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
				blnIsRecord=bcNumberMaster.NextRecord();
			}		
		}
*/	}
	else {
		with(bcNumberMaster) {
			
			strDealerCode = GetFieldValue(""Reserved To"");
			strResrvSrc   = GetFieldValue(""Source System"");
			
			strBlockId  	= GetFieldValue(""Block Id"");
			strFromStatus	= GetFieldValue(""Status"");
			strToStatus		= GetFieldValue(""Status Before Reservation"");
			
			SetFieldValue(""Status"",GetFieldValue(""Status Before Reservation""));
			SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
			SetFieldValue(""Reserved To"","""");
			SetFieldValue(""Reservation End Date"","""");
			SetFieldValue(""Reservation Id"","""");
			SetFieldValue(""Record Blocked For"","""");
			SetFieldValue(""Record Blocking Date"","""");
			//SetFieldValue(""Dealer Name"","""");
			//SetFieldValue(""Dealer Area Code"","""");
			//SetFieldValue(""Dealer Channel Code"","""");
			SetFieldValue(""Status Before Reservation"","""");
			WriteRecord();
//-----------------------------------------
// Update the block count of MSISDN number.
//-----------------------------------------
			UpdateNumberBlock(strBlockId,strFromStatus,strToStatus);
		}
	}
}
"/**************************************************************************************
* Name          : RMS RMS CancelReservation GetContractId  Method		   			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : GetContract Id Code File                      		      		  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003	1.0   		Mahindra British Telecom   	Created       30/12/2003      *
**************************************************************************************/
function GetContractId(strOldMSISDNNumber,&Outputs)
{
	var boNumberMaster;
	var bcNumberMaster;
	
	var strReturn		= """";
	
	try{
//	boNumberMaster = TheApplication().GetBusObject(""RMS NM Number Reservation""); //21st June 05

	boNumberMaster = TheApplication().GetBusObject(""RMS NM Number Enquiry"");        //21st June 05
	bcNumberMaster = boNumberMaster.GetBusComp(""RMS NM Number Enquiry For Update""); //21st June 05
	
//	bcNumberMaster = boNumberMaster.GetBusComp(""RMS NM Master Rsrv"");        //21st June 05
	
	with(bcNumberMaster) {
		ActivateField(""Number String"");
		ActivateField(""Assigned Id"");
		ClearToQuery();
		SetSearchSpec(""Number String"",strOldMSISDNNumber);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord()) 
			strReturn = GetFieldValue(""Assigned Id"");
	}
	} catch(e) {
		if(Outputs.GetProperty(""ErrCode"") == ""0"") {
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrCode"",e.errText);
		}
	
	} finally {
		bcNumberMaster = null;
		boNumberMaster = null;
	}
	
	return(strReturn);
}
"/**************************************************************************************
* Name          : RMS RMS CancelReservation GetDealerCode  Method		 	  			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Get Dealer code from System Preferences for existing customers      *
*				  and Prospect                		      							  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003	1.0   		Mahindra British Telecom   	Created       30/12/2003      *
**************************************************************************************/
function GetDealerCode(strDealerType)
{
	var boSysPref;
	var bcSysPref;
	
	var blnIsRecord	= false;
	
	var strSysDealerCode	= """";
	var strDealerCode		= """";
	
	switch(strDealerType) 
	{
		case ""CUS"":
			strSysDealerCode = ""RMS_IVR_CUST_DEALERCODE"";
			break;
		case ""PCU"":
			strSysDealerCode = ""RMS_IVR_PROSP_DEALERCODE"";
			break;
		default:
			break;
	}
	
	if(strSysDealerCode != """") 
	{
		boSysPref = TheApplication().GetBusObject(""System Preferences"");
		bcSysPref = boSysPref.GetBusComp(""System Preferences"");
		
		with(bcSysPref) 
		{
			ActivateField(""Value"");
			ActivateField(""Name"");
		
			ClearToQuery();
			SetSearchSpec(""Name"",strSysDealerCode);
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();	
		
			if(blnIsRecord) 
			{
				strDealerCode = GetFieldValue(""Value"");
			}
		}
	}
	
	bcSysPref	= null;
	boSysPref	= null;
	
	return(strDealerCode);
	
}
"/**************************************************************************************
* Name          : RMS Number Reservation GetContractId  Method		 	  			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Get System Prefernce values                      		      		  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/06/2004	1.0   		Mahindra British Telecom   	Created       15/10/2004      *
**************************************************************************************/
function GetSysParam(strParamName)
{
	var boSysPref;
	var bcSysPref;
	
	var strReturn	= """"
	
	var blnIsRecord = false;
	
	
	boSysPref = TheApplication().GetBusObject(""System Preferences"");
	bcSysPref = boSysPref.GetBusComp(""System Preferences"");
	
	with(bcSysPref) {	
		ActivateField(""Value"");
		ActivateField(""Name"");
		
		ClearToQuery();
		SetSearchSpec(""Name"",strParamName);
		ExecuteQuery(ForwardOnly);
		blnIsRecord = FirstRecord();	
		
		if(blnIsRecord) {
			strReturn = GetFieldValue(""Value"");
		}
	}
	
	bcSysPref = null;
	boSysPref = null;
	
	return(strReturn);
}
"/**************************************************************************************
* Name          : RMS RMS CancelReservation IVRCancellation  Method		 	  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Function for IVR Cabcellation                    		      		  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/06/2004	1.0   		Mahindra British Telecom   	Created       15/10/2004      *
**************************************************************************************/

function IVRCancellation(&Inputs,&Outputs,&bcNumberMaster,strDealerType) //,strDealerCode
{
	
	var blnIsRecord 	= false;
	var blnUpdateDMS	= false;
	
	var strBlockId		= """";
	var strFromStatus 	= """";
	var strToStatus 	= """";
	var strPersonalId	= """";
	var strMSISDNNumber	= """";
	var strSearchSpec	= """";
	
	var boDMSVBC;
	var bcDMSVBC;
	
	try{
	
	Outputs.SetProperty(""Error_Code"",""0"");
	Outputs.SetProperty(""Error_Message"","""");

	strPersonalId	=	Inputs.GetProperty(""Personal Id"");
	strMSISDNNumber	=	Inputs.GetProperty(""MSISDN"");
	
    // In case of prospect cancelling reservation personal id will not be null
    
	switch(strDealerType) 
	{
		case ""DEALER"":
			
			if(strDealerCode == """")
			{
				Outputs.SetProperty(""Error_Code"",""RMSIVR004"");
				Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR004""));
				TheApplication().RaiseErrorText(""EXIT"");
			}
			
			strSearchSpec = ""[Number String] = '"" + strMSISDNNumber + ""'"";
			
			with(bcNumberMaster)
			{	
				ClearToQuery();
				SetSearchExpr(strSearchSpec);
				ExecuteQuery(ForwardOnly);
					
				blnIsRecord=FirstRecord();
				//var test = GetFieldValue(""Block Id"");	
				if(!blnIsRecord) 
				{
					Outputs.SetProperty(""Error_Code"",""RMSIVR006"");
					Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR006""));
					TheApplication().RaiseErrorText(""EXIT"");
				} 
				else if (GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""RESERVED"")) 
				{
					Outputs.SetProperty(""Error_Code"",""RMSIVR010"");
					Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR010""));
					TheApplication().RaiseErrorText(""EXIT"");
				} 
				else if (GetFieldValue(""Reserved To"") != strDealerCode) 
				{
					Outputs.SetProperty(""Error_Code"",""RMSIVR007"");
					Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR007""));
					TheApplication().RaiseErrorText(""EXIT"");
				}
				
				blnUpdateDMS = true;
			}
			break;
		case ""CUSTOMER"":
			
			strPersonalId = GetContractId(strMSISDNNumber,Outputs);
			
			strSearchSpec = ""[Number String] = '"" + strMSISDNNumber + ""'"";
			
			with(bcNumberMaster){
			
				ClearToQuery();
				SetSearchExpr(strSearchSpec);
				ExecuteQuery(ForwardOnly);
					
				blnIsRecord=FirstRecord();
				if(!blnIsRecord) 
				{
					Outputs.SetProperty(""Error_Code"",""RMSIVR006"");
					Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR006""));
					TheApplication().RaiseErrorText(""EXIT"");
				} 
				else if (GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""RESERVED"")) 
				{
					Outputs.SetProperty(""Error_Code"",""RMSIVR010"");
					Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR010""));
					TheApplication().RaiseErrorText(""EXIT"");
				} 
				/*else if (GetFieldValue(""Record Blocked For"") != strPersonalId) {
					Outputs.SetProperty(""Error_Code"",""RMSIVR011"");
					Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR011""), ""Customer"");
					TheApplication().RaiseErrorText(""EXIT"");
				}*/		
			}
			break;
		case ""PROSPECT"":
			
			strSearchSpec = ""[Number String] = '"" + strMSISDNNumber + ""'"";
			
			
			with(bcNumberMaster)
			{
				ClearToQuery();
				SetSearchExpr(strSearchSpec);
				ExecuteQuery(ForwardOnly);
					
				blnIsRecord=FirstRecord();
				if(!blnIsRecord)
				{
					Outputs.SetProperty(""Error_Code"",""RMSIVR006"");
					Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR006""));
					TheApplication().RaiseErrorText(""EXIT"");
				} 
				else if (GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""RESERVED"")) 
				{
					Outputs.SetProperty(""Error_Code"",""RMSIVR010"");
					Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR010""));
					TheApplication().RaiseErrorText(""EXIT"");
				} 
				else if (GetFieldValue(""Record Blocked For"") != strPersonalId) 
				{
					Outputs.SetProperty(""Error_Code"",""RMSIVR011"");
					Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR011""), ""Prospect"");
					TheApplication().RaiseErrorText(""EXIT"");
				}
					
			}
			break;
		default:
			break;
	}
	if(blnIsRecord)
	{
		with(bcNumberMaster)
		{			 		
			strFromStatus	= GetFieldValue(""Status"");
			strToStatus		= GetFieldValue(""Status Before Reservation"");
		 	strBlockId  	= GetFieldValue(""Block Id"");
		 		
			SetFieldValue(""Reservation End Date"","""");
			SetFieldValue(""Status"",GetFieldValue(""Num Mstr Status Before Reservation""));
			SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
			SetFieldValue(""Reserved To"","""");
			//SetFieldValue(""Status Before Reservation"","""");
			SetFieldValue(""Record Blocking Date"","""");
			SetFieldValue(""Record Blocked For"","""");
			SetFieldValue(""Reservation Id"","""");
			SetFieldValue(""Record Blocked For"","""");
			SetFieldValue(""Record Blocking Date"","""");
			SetFieldValue(""Num Mstr Status Before Reservation"","""");
			SetFieldValue(""Source System"","""");
			WriteRecord();
		}
		
		UpdateNumberBlock(strBlockId,strFromStatus,strToStatus);
		
	}
// Update the DMS Reservation quota if dealer is cancelling the reservation
	if(blnUpdateDMS) 
	{
		boDMSVBC		=	TheApplication().GetBusObject(""RMS BO DMS"");
		bcDMSVBC  		=	boDMSVBC.GetBusComp(""RMS VBC DMS"");

		with(bcDMSVBC) 
		{
			ActivateField(""DEALER_CODE"");
			ActivateField(""HAPPOINTMENT"");	
			ClearToQuery();
			SetSearchSpec(""DEALER_CODE"",strDealerCode);
			ExecuteQuery();
		
			if(FirstRecord()) 
			{
				SetFieldValue(""HAPPOINTMENT"",ToInteger(GetFieldValue(""HAPPOINTMENT"")) + 1);
				WriteRecord();
			}
		}
	}
	} catch(e) {
		if(Outputs.GetProperty(""Error_Code"") == ""0"") {
			Outputs.SetProperty(""Error_Code"",e.errCode);
			Outputs.SetProperty(""Error_Message"",e.errText);
		}
		//throw(e);
		
	
	} finally {
		bcDMSVBC 	= null;
		boDMSVBC	= null;
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Cancel Reservation Service_PreInvoke Method    	  *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Cancel Reservation For IVR Code File	    		  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      30/12/2003       *
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{

	var intReturn = ContinueOperation;	
	var strErrVal = """";
	
 	if(MethodName==""CancelReservation"") {
		intReturn = CancelOperation;
		strErrVal = CancelReservation(Inputs,Outputs,strErrVal);
		if(strErrVal != """" && Outputs.GetProperty(""Error_Code"") != ""0"")
			TheApplication().RaiseError(strErrVal);
	}
	return(intReturn);		
}
"/**************************************************************************************
* Name          : RMS NM Number Cancel Reservation Update Associate Numbers Method   *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Cancel Reservation Code File	    		          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      30/12/2003       *
**************************************************************************************/

function UpdateAssociatedNumbers(strAssocStartId,bcNMMstr,strToStatus) {

	var blnIsRecord;

	with(bcNMMstr) {

		ActivateField(""Reserved To"");
		ActivateField(""Reservation End Date"");
		ActivateField(""Resv Id"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Status"");
		ActivateField(""Status Date"");
		ActivateField(""Current Date"");		
		ClearToQuery();
		SetSearchSpec(""Assoc Start Id"",strAssocStartId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();

		while(blnIsRecord) {

			SetFieldValue(""Status"",strToStatus);
			SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
			SetFieldValue(""Reserved To"","""");
			SetFieldValue(""Reservation End Date"","""");
			SetFieldValue(""Resv Id"","""");
			

			WriteRecord();
			blnIsRecord = bcNMMstr.NextRecord();
		}
	}
}
"/**************************************************************************************
* Name          : Update Number Block Function									   	  *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Cancel Reservation Code File	    		          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 11/06/2004 	1.0   		MBT						   	Created      11/06/2004       *
**************************************************************************************/

function UpdateNumberBlock(strBlockId,strFromStatus,strToStatus){
	
	var psBlkInputs;
	var psBlkOutputs;
	var bsRMSBlk;

	bsRMSBlk = TheApplication().GetService(""RMS RMS Block Calc"");
	
	psBlkInputs = TheApplication().NewPropertySet();
	psBlkOutputs = TheApplication().NewPropertySet();

	with(psBlkInputs){
		SetProperty(""Object Id"",strBlockId);
		SetProperty(""From Status"",strFromStatus);
		SetProperty(""To Status"",strToStatus);
	}
	
	bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
	
	psBlkInputs		= null;
	psBlkOutputs	= null;
	bsRMSBlk		= null;
}
function UpdateReservationQuota(strReservedTo,intQuantity){
	var intRsvAlblQta;
	var intRsvQta;
	var blnIsRecord;
	try
	{
		var PtrBO = TheApplication().GetBusObject(""Channel Partner"");
		var PtrBC = PtrBO.GetBusComp(""Channel Partner"");
		with(PtrBC){
		ActivateField(""CSN"");
		ActivateField(""STC Available Quota"");
		ActivateField(""STC Reservation Quota"");
		ClearToQuery();
		SetSearchSpec(""Id"",strReservedTo);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
		}
		if(blnIsRecord){
			intRsvAlblQta = PtrBC.GetFieldValue(""STC Available Quota"");
			intRsvQta     = PtrBC.GetFieldValue(""STC Reservation Quota"");
			intRsvAlblQta = ToInteger(intRsvAlblQta) + ToInteger(intQuantity);
			PtrBC.SetFieldValue(""STC Available Quota"",ToInteger(intRsvAlblQta));
			PtrBC.WriteRecord();
		}
	}
	catch(e) 
	{
		TheApplication().RaiseErrorText(e.toString());
	} 
	finally
	{
		PtrBC = null;	
		PtrBO = null;
	}

}
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Calculate Available date                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0   		MBT  	Created       01/11/2003                          *
**************************************************************************************/
function CalcAvailDate(&bcNumberScheme, &bcNumberMaster, strSchemeId, dtQuarantineDate,QuarPeriod,QuarUOM)
{
	var dtSysDate 			= Clib.time();
	var dtSysDateObj 		= Date.fromSystem(dtSysDate);
		
    //var dtQuarantineDate 	= bcNumberMaster.GetFieldValue(""Quarantine Date"");
	var dtQuarantineDateObj = new Date(dtQuarantineDate);
	//below 1.1
	/*var QuarUOM 			= """";
	var QuarPeriod 			= """";*/
	//above 1.1

// =========================== COMMENTED FOR FUTURE USE Ver 2.0 =============================/	
/*	with(bcNumberScheme) {

		ActivateField(""Max. Ter. Quarantine UOM"");
		ActivateField(""Max. Ter. Quarantine Period"");
		ClearToQuery();
		SetSearchSpec(""Id"", strSchemeId);
		ExecuteQuery(ForwardOnly);
		
		if(FirstRecord()) {
			QuarUOM = GetFieldValue(""Max. Ter. Quarantine UOM"");
			QuarPeriod = GetFieldValue(""Max. Ter. Quarantine Period"");
		}
		
	}*/
	
 
//	if(bcNumberScheme.FirstRecord()) {
	    switch (QuarUOM) {
	
	  	    case ""Days"": 
				dtQuarantineDateObj.setDate(ToInteger(dtQuarantineDateObj.getDate()) + ToInteger(QuarPeriod));
	        	break;
	             	
	   		case ""Months"": 
				dtQuarantineDateObj.setMonth(ToNumber(ToNumber(dtQuarantineDateObj.getMonth()) + ToNumber(QuarPeriod)));
				break;
			
	    	case ""Weeks"":
				dtQuarantineDateObj.setDate(dtQuarantineDateObj.getDate() + (QuarPeriod * 7));
	       		break;
	   		
	   		case ""Year"": 
	  			dtQuarantineDateObj.setFullYear(ToNumber(ToNumber(dtQuarantineDateObj.getFullYear()) + ToNumber(QuarPeriod)));
				break;
	   }
//	 }
   
   return(dtQuarantineDateObj);
	    
}
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Calculate Available Date                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 1/11/2003	1.0   		Mahindra British Telecom   	Created       05/11/2003          *
**************************************************************************************/
function CalcAvailableDate(QuarUOM, QuarPeriod, &bcNumberMaster)
{
	
	var dtSysDate 			= Clib.time();
	var dtSysDateObj 		= Date.fromSystem(dtSysDate);
	
	var dtQuarantineDate 	= bcNumberMaster.GetFieldValue(""Current Date"");
	var dtQuarantineDateObj = new Date(dtQuarantineDate);
 
    switch (QuarUOM) {

  	    case ""Days"": 
			dtQuarantineDateObj.setDate(ToInteger(dtQuarantineDateObj.getDate()) + ToInteger(QuarPeriod));
        	break;
             	
   		case ""Months"": 
			dtQuarantineDateObj.setMonth(ToNumber(ToNumber(dtQuarantineDateObj.getMonth()) + ToNumber(QuarPeriod)));
			break;
		
    	case ""Weeks"":
			dtQuarantineDateObj.setDate(dtQuarantineDateObj.getDate() + (QuarPeriod * 7));
       		break;
   		
   		case ""Year"": 
  			dtQuarantineDateObj.setFullYear(ToNumber(ToNumber(dtQuarantineDateObj.getFullYear()) + ToNumber(QuarPeriod)));
			break;
   }
   
   return(dtQuarantineDateObj);
}
function  ChangeNumberStatus(strSource,sRequestType,&bcNumberMaster,&bcNumberScheme,blnIsSIMTwiceAssociated,&strNumber,&Inputs,bcNumberAssignedDetail){
	var intArrLen = 0;
	var dtQuarantineDateObj;
	var bsNumberBlock;
	var strPrevSts;
	var dtQuarantineDateObj = new Date();
	var psInputs = TheApplication().NewPropertySet();
	var psOutputs = TheApplication().NewPropertySet();
	var strQuarantineEvent = """";
	switch(strSource) {
	case ""Change SIM Number"":
			for(var intArrLen = 0;intArrLen < getArrayLength(strNumber);intArrLen++) {
				with(bcNumberMaster){
					ActivateField(""Status"");
					ActivateField(""STC Allocated To"");
					ActivateField(""Assigned Id"");
					ActivateField(""Allocation Id"");	
					ActivateField(""Block Id"");
					ActivateField(""Assigned Date"");
					ActivateField(""Assigned By"");
					ActivateField(""Type Identifier"");
					ActivateField(""Status Date"");
					ActivateField(""Current Date"");
					ActivateField(""No. Of Assigned MSISDNs"");
					ActivateField(""Assoc Start Id"");
					ClearToQuery();
					SetSearchSpec(""Id"",strNumber[intArrLen]);
					ExecuteQuery();
					if(FirstRecord()) {
						if(((GetFieldValue(""Type Identifier"")== TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))) || (GetFieldValue(""Type Identifier"")==TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI""))){
							if(GetFieldValue(""Type Identifier"")== TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"")){
								SetFieldValue(""No. Of Assigned MSISDNs"",ToInteger(GetFieldValue(""No. Of Assigned MSISDNs""))-1);				
								WriteRecord();
								strPrevSts = GetFieldValue(""Status"");
								if(GetFieldValue(""No. Of Assigned MSISDNs"")==0) {
									SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED""));
									SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
									SetFieldValue(""Assigned Id"","""");
									SetFieldValue(""Assigned Date"","""");
									SetFieldValue(""Assigned By"","""");
									ClearAssignedDetails(bcNumberAssignedDetail,bcNumberMaster)									
									WriteRecord();
								}
							} else {		
								strPrevSts = GetFieldValue(""Status"");
								SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED""));
								SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
								SetFieldValue(""Assigned Id"","""");
								SetFieldValue(""Assigned Date"","""");
								SetFieldValue(""Assigned By"","""");
								ClearAssignedDetails(bcNumberAssignedDetail,bcNumberMaster)								
								WriteRecord();
							}
						}
						else if(GetFieldValue(""Type Identifier"")== TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")) {
							strPrevSts = GetFieldValue(""Status"");
							SetFieldValue(""Assoc Start Id"","""");
							SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED""));
							SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
							SetFieldValue(""Assigned Id"","""");
							SetFieldValue(""Assigned Date"","""");
							SetFieldValue(""Assigned By"","""");
							ClearAssignedDetails(bcNumberAssignedDetail,bcNumberMaster)							
							WriteRecord();
						}
					}
				}
				if(TheApplication().GetProfileAttr(""RMS_BLOCK_UPDATION"") == ""Y"") {				
					bsNumberBlock = TheApplication().GetService(""RMS RMS Block Calc"");
					psInputs.SetProperty(""From Status"", strPrevSts);
					psInputs.SetProperty(""Object Id"",bcNumberMaster.GetFieldValue(""Block Id""));
					psInputs.SetProperty(""To Status"",bcNumberMaster.GetFieldValue(""Status""));		
					bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);
				}
		    }
		break;
		case ""Change MSISDN Number"":					
				for(var intArrLen = 0;intArrLen < getArrayLength(strNumber);intArrLen++) {
					with(bcNumberMaster){
					ActivateField(""Status"");
					ActivateField(""Assigned Id"");
					ActivateField(""Allocation Id"");	
					ActivateField(""Block Id"");
					ActivateField(""Assigned Date"");
					ActivateField(""Assigned By"");
					ActivateField(""Type Identifier"");
					ActivateField(""Available Date"");
					ActivateField(""Quarantine Date"");
					ActivateField(""Current Date"");
					ActivateField(""Scheme Id"");
					ActivateField(""Is Associated"");
					ActivateField(""Assoc Start Id"");
					ActivateField(""Status Date"");
					ActivateField(""Special Category Id"");
					ActivateField(""Special Quarantine Period"");
					ActivateField(""Number String"");
					ActivateField(""No. Of Assigned MSISDNs"");															
					ClearToQuery();
					SetSearchSpec(""Id"",strNumber[intArrLen]);
					ExecuteQuery();
					if(FirstRecord()) {
						if(GetFieldValue(""Type Identifier"")== TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"")){
							SetFieldValue(""No. Of Assigned MSISDNs"",ToInteger(GetFieldValue(""No. Of Assigned MSISDNs""))-1);
							WriteRecord();			}	
						if(GetFieldValue(""Type Identifier"")== TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")){
							strPrevSts = GetFieldValue(""Status"");
							strQuarantineEvent= TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Change MSISDN"");
							GetQuarantineDetails(Inputs,bcNumberMaster.GetFieldValue(""Scheme Id""),bcNumberMaster.GetFieldValue(""Number String""), strQuarantineEvent);
							var strQuarantinePeriod= Inputs.GetProperty(""Quarantine Period"");
							var strQuarantineUOM = Inputs.GetProperty(""Quarantine UOM"");
							dtQuarantineDateObj = CalcAvailDate(bcNumberScheme, bcNumberMaster, bcNumberMaster.GetFieldValue(""Scheme Id""),bcNumberMaster.GetFieldValue(""Current Date""),strQuarantinePeriod,strQuarantineUOM);
							SetUserProperty(""SuppressScript"",""Y"");
							SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""QUARANTINE""));
							SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
							SetFieldValue(""Quarantine Date"", GetFieldValue(""Current Date""));
							SetFieldValue(""Assigned Id"","""");
							SetFieldValue(""Assigned Date"","""");
							SetFieldValue(""Assoc Start Id"","""");
							SetFieldValue(""Is Associated"",""N"");
							SetFieldValue(""Available Date"",DateToString(dtQuarantineDateObj));
							ClearAssignedDetails(bcNumberAssignedDetail,bcNumberMaster)
							SetUserProperty(""SuppressScript"",""N"");
							WriteRecord();	}}}
				if(TheApplication().GetProfileAttr(""RMS_BLOCK_UPDATION"") == ""Y"") {				
					bsNumberBlock = TheApplication().GetService(""RMS RMS Block Calc"");
					psInputs.SetProperty(""From Status"", strPrevSts);
					psInputs.SetProperty(""Object Id"",bcNumberMaster.GetFieldValue(""Block Id""));
					psInputs.SetProperty(""To Status"",bcNumberMaster.GetFieldValue(""Status""));		
					bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);
				}
		    }
		break;
		case ""Cancel Order"":		
		case ""ReUse"":
			for(intArrLen = 0; intArrLen < getArrayLength(strNumber); intArrLen++){
				with(bcNumberMaster){
					ActivateField(""Assigned Id"");
					ActivateField(""Assigned Date"");
					ActivateField(""Allocation Id"");
					ActivateField(""Reserved To"");
					ActivateField(""Sales Code"");
					ActivateField(""Status"");
					ActivateField(""Block Id"");
					ActivateField(""Assigned Id"");
					ActivateField(""Type Identifier"");
					ActivateField(""Assoc Start Id"");
					ActivateField(""Scheme Id"");
					ActivateField(""Current Date"");
					ActivateField(""Quarantine Date"");
					ActivateField(""Status Date"");
					ActivateField(""Available Date"");
					ActivateField(""Is Associated"");
					ActivateField(""Special Quarantine Period"");
					ActivateField(""Quarantine UOM"");										
					ActivateField(""Quarantine Period"");															
					ActivateField(""Special Category Id"");															
					ActivateField(""Allocated To"");	
						ActivateField(""STC Vanity Paid"");								
					ActivateField(""Pre Activation Id"");
					ClearToQuery();
					SetSearchSpec(""Id"", strNumber[intArrLen]);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord()) {
						if((GetFieldValue(""Type Identifier"")==""SIM"" && blnIsSIMTwiceAssociated == ""N"") ||(GetFieldValue(""Type Identifier"")==""IMSI"")){
							strPrevSts = GetFieldValue(""Status"");
						if (strSource != ""ReUse"")
							SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED""));
							SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
							SetFieldValue(""Assigned Id"","""");
							SetFieldValue(""Assigned Date"","""");
							if(Inputs.GetProperty(""Partial(Y/N)"") != ""Y"")
								SetFieldValue(""Assoc Start Id"","""");
							WriteRecord();
						}
						else if(GetFieldValue(""Type Identifier"")==""MSISDN"") {
							var strQuarantinePeriod="""";
							var strQuarantineUOM = """";
							strPrevSts = GetFieldValue(""Status"");
							if(GetFieldValue(""Special Category Id"") != """") {
								strQuarantinePeriod = GetFieldValue(""Special Quarantine Period"");
								strQuarantineUOM = ""Days"";
							}else {
								strQuarantinePeriod = GetFieldValue(""Quarantine Period"");
								strQuarantineUOM = GetFieldValue(""Quarantine UOM"");
							}
							dtQuarantineDateObj = CalcAvailDate(bcNumberScheme, bcNumberMaster, bcNumberMaster.GetFieldValue(""Scheme Id""),bcNumberMaster.GetFieldValue(""Current Date""),strQuarantinePeriod,strQuarantineUOM);
							SetUserProperty(""SuppressScript"",""Y"");
							SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
							if (strSource == ""Cancel Order"")
							{
								SetFieldValue(""Quarantine Date"", GetFieldValue(""Current Date""));
								SetFieldValue(""Available Date"",DateToString(dtQuarantineDateObj));
								SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""QUARANTINE""));
							}
							else if(strSource == ""ReUse"") {
                            	SetFieldValue(""Allocated To"","""");
								SetFieldValue(""Allocation Id"","""");
								SetFieldValue(""Pre Activation Id"","""");  
								if(sRequestType == ""Number Reclaim"")//RohitR:22-04-21:Number Reclaim PT
						        {}
								else{  
								SetFieldValue(""Quarantine Date"", """"); 
								SetFieldValue(""Available Date"","""");
								}
								if (strPrevSts == TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""QUARANTINE""))
									SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
								}
								SetFieldValue(""Assigned Id"","""");
								SetFieldValue(""Assigned Date"","""");
								SetFieldValue(""Assoc Start Id"","""");
								SetFieldValue(""Is Associated"",""N"");
								SetFieldValue(""STC Vanity Paid"",""No"");
								SetUserProperty(""SuppressScript"",""N"");
								WriteRecord();
							}
						if(TheApplication().GetProfileAttr(""RMS_BLOCK_UPDATION"") == ""Y"") {
							bsNumberBlock = TheApplication().GetService(""RMS RMS Block Calc"");
							psInputs.SetProperty(""From Status"", strPrevSts);
							psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
							psInputs.SetProperty(""To Status"",GetFieldValue(""Status""));		
							bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);
						}
					}
				}
			}
			break;	
		case ""MSISDN Takeover"":
		case ""Disconnect"":
			for(intArrLen = 0; intArrLen < strNumber.length; intArrLen++){
					with(bcNumberMaster){
					ActivateField(""Status"");
					ActivateField(""Block Id"");
					ActivateField(""Assigned Id"");
					ActivateField(""Assoc Start Id"");
					ActivateField(""Assigned Id"");
					ActivateField(""Type Identifier"");
					ActivateField(""Is Associated"");
					ActivateField(""Scheme Id"");
					ActivateField(""Record Blocking Date"");
					ActivateField(""Record Blocked For"");
					ActivateField(""Reservation End Date"");
					ActivateField(""Current Date"");
					ActivateField(""Status Date"");
					ActivateField(""Assigned Date"");
					ActivateField(""Available Date"");
					ActivateField(""Calc Current Date"");
					ActivateField(""Special Category Id"");
					ActivateField(""Quarantine Date"");
					ActivateField(""STC Allocated To"");
					ActivateField(""Disconnect Type"");
					ActivateField(""Number String"");
					/*1.2Amit*/ActivateField(""Pre Activation Id"");
					ClearToQuery();
					SetSearchSpec(""Id"",strNumber[intArrLen]);
					ExecuteQuery();
					if(FirstRecord()) {
						if((GetFieldValue(""Type Identifier"")==""SIM"" && blnIsSIMTwiceAssociated == ""N"")||(GetFieldValue(""Type Identifier"")==""IMSI"")){
							strPrevSts = GetFieldValue(""Status"");
							if((strSource == ""MSISDN Takeover"") && (Inputs.GetProperty(""SIMTakeover"") == ""Y"")) {
								SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED""));
								SetFieldValue(""STC Allocated To"",Inputs.GetProperty(""SIMTakeoverPartnerCode""));
								SetFieldValue(""Record Blocked For"", Inputs.GetProperty(""BlockedFor""));
								SetFieldValue(""Record Blocking Date"","""");
								/*1.2Amit*/SetFieldValue(""Pre Activation Id"","""");
							} else {
								SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED""));
								SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
							}
							SetFieldValue(""Assigned Id"","""");
							SetFieldValue(""Assigned Date"","""");
							if(Inputs.GetProperty(""Partial(Y/N)"") != ""Y"")
							SetFieldValue(""Assoc Start Id"","""");
							SetFieldValue(""Disconnect Type"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_DISCONNECT_TYPE"", ""E""));
							WriteRecord();
					} else if(GetFieldValue(""Type Identifier"")==""MSISDN"") {
							var dtReservationEndDate = new Date(GetFieldValue(""Current Date""));							
							dtReservationEndDate.setDate(ToInteger(dtReservationEndDate.getDate()) + 2);
							strPrevSts = GetFieldValue(""Status"");		
							SetUserProperty(""SuppressScript"",""Y"");
							if(strSource == ""MSISDN Takeover"") {
								SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED""));
								SetFieldValue(""STC Allocated To"",Inputs.GetProperty(""NewPartnerCode""));
								SetFieldValue(""Record Blocked For"", Inputs.GetProperty(""BlockedFor""));
								SetFieldValue(""Record Blocking Date"","""");
							} else {
								SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""QUARANTINE""));
								SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
								dtQuarantineDateObj = GetFieldValue(""Current Date"");
								strPrevSts = GetFieldValue(""Status"");
								strQuarantineEvent= TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Service Termination"");
								GetQuarantineDetails(Inputs,bcNumberMaster.GetFieldValue(""Scheme Id""),bcNumberMaster.GetFieldValue(""Number String""), strQuarantineEvent);
								var strQuarantinePeriod= Inputs.GetProperty(""Quarantine Period"");
								var strQuarantineUOM = Inputs.GetProperty(""Quarantine UOM"");
								//above 1.1
								dtQuarantineDateObj = CalcAvailDate(bcNumberScheme, bcNumberMaster, bcNumberMaster.GetFieldValue(""Scheme Id""),bcNumberMaster.GetFieldValue(""Current Date""),strQuarantinePeriod,strQuarantineUOM);
							}
							SetFieldValue(""Record Blocking Date"","""");
							SetFieldValue(""Reservation End Date"", """");
							SetFieldValue(""Assigned Id"","""");
							SetFieldValue(""Assigned Date"","""");
							SetFieldValue(""Assoc Start Id"","""");
							SetFieldValue(""Is Associated"",""N"");
							if(strSource != ""MSISDN Takeover"")
								SetFieldValue(""Available Date"",DateToString(dtQuarantineDateObj));
							SetUserProperty(""SuppressScript"",""N"");
							SetFieldValue(""Disconnect Type"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_DISCONNECT_TYPE"", ""E""));
							WriteRecord();
						}
						if(TheApplication().GetProfileAttr(""RMS_BLOCK_UPDATION"") == ""Y"") {
							bsNumberBlock = TheApplication().GetService(""RMS RMS Block Calc"");
							psInputs.SetProperty(""From Status"", strPrevSts);
							psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
							psInputs.SetProperty(""To Status"",GetFieldValue(""Status""));		
							bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);
						}
					}
				}
			}
		break;
	}
	bsNumberBlock 	= null;
	psInputs		= null;
	psOutputs		= null;
}
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Clear Assigned Details Code File                    				  *
*				:Code added to delete the intersection details of number master and   *
*				 service account while deassociating.								  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 04/08/2005	1.0   		MBT  	Created       04/08/2005                          *
**************************************************************************************/
function ClearAssignedDetails(bcNumberAssignedDetail,bcNumberMaster){

	with(bcNumberAssignedDetail) {
		var id = bcNumberMaster.GetFieldValue(""Id"");
		ClearToQuery();
		SetSearchSpec(""Number Id"",bcNumberMaster.GetFieldValue(""Id""));
		ExecuteQuery();
		if(FirstRecord())
			DeleteRecord();
	}

}
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Convert date object to string format Code File                      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/10/2003	1.0   		Mahindra British Telecom   	Created       29/10/2003      *
**************************************************************************************/

//-------------------------------------------------------------------------------------
//Gets the 'Date','Month','Hours','Minutes','Second' and appends them to a string.
//-------------------------------------------------------------------------------------

function DateToString (dtCDate)
{
	var dtDatum = ((dtCDate.getMonth() + 1) + ""/"" + dtCDate.getDate() + ""/"" + dtCDate.getFullYear()
	+ "" "" + dtCDate.getHours() + "":"" + dtCDate.getMinutes()+ "":"" + dtCDate.getSeconds());
	return dtDatum;
}
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : DeAssociate Code File                      				          *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0   		MBT  	Created       01/11/2003                          *
**************************************************************************************/

function DeAssociate(Inputs,&bcNumberMaster,&bcAssocNumberTypeDisplay,&bcNumberAssocDetail,&bcNumberAssocMasterConcat,&bcNumberMasterConcat,&bcNumberScheme,bcNumberAssignedDetail)
{
	var strMSISDNnumber;
	var strAssocStartId;
	var strNumberId;
	var intConcatId;
	var strNumber = new Array();
	var strNumberString;
	var intRecCnt=0;
	var blnIsRecord;
	var strStatus;
	var strAssocNumber;
	var strSource;
	var blnIsSIMTwiceAssociated = ""N"";
	
//----------------------------------------
//Get MSISDN as one of the input parameter
//----------------------------------------
	strMSISDNnumber  = Inputs.GetProperty(""MSISDN Number"");
 	strSource	   	 =  Inputs.GetProperty(""Source"");     

//---------------------------------------------------------------
//Using MSISDN Number to Get Assoc Start ID from Number Master BC
//---------------------------------------------------------------
    		
	with(bcNumberMaster) {
		
		ActivateField(""Assoc Start Id"");
		ActivateField(""Number"");
		ActivateField(""Number String"");
		ActivateField(""Is Associated"");
		ClearToQuery();
		SetSearchSpec(""Number String"",strMSISDNnumber);
		ExecuteQuery();
		if(FirstRecord()) {
			if(GetFieldValue(""Is Associated"") != ""Y"") {
				strErrVal = ""RMSDA001"";
				return(strErrVal);
			}
			strAssocStartId =GetFieldValue(""Assoc Start Id"");
			strNumberId     =GetFieldValue(""Id"");
		}
		else {
			strErrVal = ""RMSDA002"";
			return(strErrVal);
		}
	}
			
//--------------------------------------------------------------------------
//Using Number Id get the Concat Id from Number Master Concat BC.Also check,
//whether SIM is associated with any other MSISDN number.
//--------------------------------------------------------------------------

	with(bcNumberMasterConcat) {
	
		ActivateField(""Number Id"");
		ActivateField(""Concat Id"");
		
		IsSIMTwiceAssociated(blnIsSIMTwiceAssociated,bcNumberMasterConcat,strAssocStartId);
		
		ClearToQuery();
		SetSearchSpec(""Number Id"",strNumberId);
		ExecuteQuery();
		
		if(FirstRecord())
			intConcatId = GetFieldValue(""Concat Id"");
	
		ClearToQuery();
		SetSearchSpec(""Concat Id"", intConcatId);
		ExecuteQuery();

//-----------------------------------------------------------------------------
//Delete the records from Number Master concat having the concat id same as the
//concat id of the input number.
//-----------------------------------------------------------------------------

		while(FirstRecord()){
			strNumber[intRecCnt++] = GetFieldValue(""Number Id"");
			DeleteRecord();
		}
	}
			
	with(bcAssocNumberTypeDisplay) {
		ClearToQuery()
		SetSearchSpec(""Id"",intConcatId);
		ExecuteQuery();
		while(FirstRecord())
			DeleteRecord();
	}

//-----------------------------------------------------------------------------
//Delete the records from Association Detail having the concat id same as the
//concat id of the input number.
//-----------------------------------------------------------------------------

	with(bcNumberAssocDetail){
		ActivateField(""Association Id"");
		ActivateField(""Association Seq Num"");
		ActivateField(""Destination Num Id"");
		ActivateField(""Number Association Concat Id"");
		ActivateField(""Source Num Id"");
		ActivateField(""Row Id"");
		ActivateField(""Parent Ass Id"");
		ClearToQuery();
		SetSearchSpec(""Number Association Concat Id"", intConcatId);
		ExecuteQuery();
		blnIsRecord=FirstRecord();
		while(FirstRecord())
			DeleteRecord();
	}

//----------------------------------------------------------------------------------
//Delete the records from Association Master concat having the concat id same as the
//concat id of the input number.
//----------------------------------------------------------------------------------
			
	with(bcNumberAssocMasterConcat){
		ActivateField(""Association Id"");
		ActivateField(""Concat Id"");
		ActivateField(""Flag"");
		ClearToQuery();
		SetSearchSpec(""Concat Id"",intConcatId);
		ExecuteQuery();
		blnIsRecord=FirstRecord();
		while(FirstRecord())
			DeleteRecord();
	}

//------------------------------------------------------------------------
//for each number retieved from Number Master Concat BC delete the records
//from the array, if not then leave the records in array.
//------------------------------------------------------------------------
	with(bcNumberMasterConcat){
		ClearToQuery();
		SetSearchSpec(""Number Id"", strNumberId);
		ExecuteQuery();
		blnIsRecord=FirstRecord();
		if(!blnIsRecord())
		strNumber=null;
	}
	ChangeNumberStatus(Inputs,strSource,bcNumberMaster,bcNumberScheme,blnIsSIMTwiceAssociated,strNumber,bcNumberAssignedDetail);
}
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Partial DeAssociate Code File                      				  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 21/06/2005	1.0   		MBT  	Created       21/06/2005                          *
*									P.GAUTAMAN										  *	
**************************************************************************************/
function GetConcatId(bcNumberMaster,strGenLvl,bcAssocMstrCnct,strSIMAssocStartId,bcNumberMasterConcat)
{
	with(bcNumberMaster) {
		ClearToQuery();
		SetSearchSpec(""Assoc Start Id"",strSIMAssocStartId);
		SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI""));
		SetSearchSpec(""Generation Level"",strGenLvl);
		ExecuteQuery();
		if(FirstRecord()){
			with(bcNumberMasterConcat) {
				ActivateField(""Concat Id"");
				ClearToQuery();
				SetSearchSpec(""Number Id"",bcNumberMaster.GetFieldValue(""Id""));				
				ExecuteQuery();
				if(FirstRecord())
					return(GetFieldValue(""Concat Id""));
			}
		}
	}
	
}
"/**************************************************************************************
* Name          : GetQuarantineDetails				 	          			          * 
* Author        : Tech Mahindra                                                       *
* Description   : To get Quarantine Period and Quarantine UOM values based on 
                  Quarantine event  	                      				          *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 20060905	     1.0   		Kalyana Tangirala  	        Created                                 *
**************************************************************************************/
function GetQuarantineDetails(Inputs, strSchemeId, strMSISDN, QuarEvent)
{
    var blnIsRecord		 = false; 
	var boNumberScheme   = TheApplication().GetBusObject(""RMS NM Number Scheme"");
	var bcNumberScheme   = boNumberScheme.GetBusComp(""RMS NM Number Scheme"");
	var bcQuarantine     = boNumberScheme.GetBusComp(""RMS NM Number Quarantine"");
	
    var blnsIsQuarantine = false;
	var strSearchExp     = """";
	try{
	with(bcNumberScheme)
	{
		ClearToQuery();
		SetSearchSpec(""Id"",strSchemeId);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord()) {
	
			strSearchExp =    strSearchExp +""[Scheme Id] ='""+strSchemeId+""'""; 
			if(QuarEvent== TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Change MSISDN""))
			{
				strSearchExp = strSearchExp + "" AND [Quarantine Event] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Change MSISDN"") + ""'"";
			}
			else if(QuarEvent == TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Service Termination""))
			{
				strSearchExp = strSearchExp + "" AND [Quarantine Event] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Service Termination"") + ""'"";
			}
			with(bcQuarantine)
			{
				ActivateField(""Quarantine Period"");
				ActivateField(""Quarantine UOM"");
				ClearToQuery();
				SetSearchExpr(strSearchExp);
				ExecuteQuery(ForwardOnly);
				blnsIsQuarantine = FirstRecord();
				if(blnsIsQuarantine)
				{
					Inputs.SetProperty(""Quarantine Period"",bcQuarantine.GetFieldValue(""Quarantine Period""));
					Inputs.SetProperty(""Quarantine UOM"",bcQuarantine.GetFieldValue(""Quarantine UOM""));
				}//end of if(blnsIsQuarantine)
				//if no record with that quarantine event is found then query on ""Default"" quarantine event
				else{
					ClearToQuery();
					SetSearchSpec(""Scheme Id"",strSchemeId);
					SetSearchSpec(""Quarantine Event"",TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Default""));
					ExecuteQuery(ForwardOnly);
					blnsIsQuarantine = FirstRecord();
					if(blnsIsQuarantine)
					{
						Inputs.SetProperty(""Quarantine Period"",bcQuarantine.GetFieldValue(""Quarantine Period""));
						Inputs.SetProperty(""Quarantine UOM"",bcQuarantine.GetFieldValue(""Quarantine UOM""));
					}//end of if(blnsIsQuarantine)
				}//end of else
			}//end of with(bcQuarantine)
		}//end of if(FirstRecord())
	}//end of with(bcNumberScheme)
	
	}//try
	catch(e) {
    throw(e.toString());
         }
	finally
	{
	bcNumberScheme = null;
	bcQuarantine   = null;
	boNumberScheme = null;
	
	}
	}//end of function"
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Is SIM Twice Associated	                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0   		MBT  	Created       01/11/2003                          *
**************************************************************************************/
function IsSIMTwiceAssociated(&blnIsSIMTwiceAssociated,bcNumberMasterConcat,strAssocStartId) 
{
	var intRecCnt = 0;
	var blnIsSIMTwiceAssociated = ""N"";

	with(bcNumberMasterConcat) {
		ClearToQuery();
		SetSearchSpec(""Number Id"",strAssocStartId);
		ExecuteQuery();
		var blnIsRecord = FirstRecord();
		while(blnIsRecord) {
			intRecCnt++;
			if(ToInteger(intRecCnt) > 1)
				break;
			blnIsRecord = NextRecord();
		}
		if(ToInteger(intRecCnt) > 1) 
			blnIsSIMTwiceAssociated = ""Y"";
	}
	
	return (blnIsSIMTwiceAssociated);
}
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Partial DeAssociate Code File                      				  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0   		MBT  	Created       01/11/2003                          *
**************************************************************************************/
function PartialDeAssociate_old(&Inputs,&bcNumberMaster,&bcAssocNumberTypeDisplay,&bcNumberAssocDetail,&bcNumberAssocMasterConcat,&bcNumberMasterConcat,&bcNumberScheme)
{
	var strMSISDNNumber			= """";
	var strMSISDNId				= """";
	var strAssocStartId			= """";
	var strConcatId				= """";
	var strCnctAssNumber 		= """";
	var strCnctAssNumberType 	= """";
	var strErrVal				= """";
	
	var strNumber 				= new Array();
	
	var intRecCnt				= 0;
	
	var blnIsRecord				= false;
		
	strMSISDNNumber  			= Inputs.GetProperty(""MSISDN Number"");
 	

//-----------------------------------------------------------------------
//Query Number Master to validate the MSISDN number and get the Number Id
//and Assoc Start Id
//-----------------------------------------------------------------------
 	
 	with( bcNumberMaster) {
		ActivateField(""Assoc Start Id"");
		ActivateField(""Type Identifier"");
		ActivateField(""Is Associated"");
		
		ClearToQuery()
		SetSearchSpec(""Number String"",strMSISDNNumber);
		ExecuteQuery();
		if(FirstRecord()) {
			if(GetFieldValue(""Type Identifier"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")) {
				strErrVal = ""RMSDA001"";
				return(strErrVal);
			}
			if(GetFieldValue(""Is Associated"") != ""Y"") {
				strErrVal = ""RMSDA002"";
				return(strErrVal);
			}
			strMSISDNId     = GetFieldValue(""Id"");
			strAssocStartId = GetFieldValue(""Assoc Start Id"");
		}
		else {
			strErrVal = ""RMSDA001""
			return(strErrVal);
		}
 	}
 	
//-------------------------------------------------------------------
//Locate the record in Number Mstr-Concat table and delete the record.
//-------------------------------------------------------------------

	with(bcNumberMasterConcat) {

		ActivateField(""Number Id"");
		ActivateField(""Concat Id"");
		ClearToQuery();
		SetSearchSpec(""Number Id"",strMSISDNId);
		ExecuteQuery(ForwardOnly);
	    blnIsRecord = FirstRecord();
	    if(FirstRecord()) {
		    strConcatId = GetFieldValue(""Concat Id"");
		    DeleteRecord();
	    }
	}

//-------------------------------------------------------------------------
//Locate the record in Association detai and delete the record.Then rebuild 
//the Concatenated number and update the concate table.
//-------------------------------------------------------------------------
	
	with(bcNumberAssocDetail) {
		ActivateField(""Association Id"");
		ActivateField(""Association Seq Num"");
		ActivateField(""Destination Num Id"");
		ActivateField(""Source Number Type"");
		ActivateField(""Destination Number Type"");
		ActivateField(""Number Association Concat Id"");
		ActivateField(""Source Num Id"");
		ActivateField(""Source Number"");
		ActivateField(""Destination Number"");
		ActivateField(""Row Id"");
		ActivateField(""Parent Ass Id"");
		
		ClearToQuery();
		SetSearchSpec(""Destination Num Id"", strMSISDNId);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord()) 
			DeleteRecord();
		
		ClearToQuery();
		SetSearchSpec(""Source Num Id"", strAssocStartId);
		ExecuteQuery();
		while(FirstRecord()) {
			if(GetFieldValue(""Source Num Id"") != """") {
				strCnctAssNumber     = strCnctAssNumber + "" / "" + GetFieldValue(""Source Number"");
				strCnctAssNumberType = strCnctAssNumberType + "" / "" + GetFieldValue(""Source Number Type"");
			}
			
			strCnctAssNumber     = strCnctAssNumber + "" / "" + GetFieldValue(""Destination Number"");
			strCnctAssNumberType = strCnctAssNumberType + "" / "" + GetFieldValue(""Destination Number Type"");

			ClearToQuery();
			SetSearchSpec(""Parent Ass Id"", GetFieldValue(""Id""));
			ExecuteQuery(ForwardOnly);
		}
	}
	
//-------------------------------------------------------------------------
//Updating the new concatenated number and number type in concat table
//-------------------------------------------------------------------------
	
	with(bcAssocNumberTypeDisplay) {
		ActivateField(""Associated Number"");
		ActivateField(""Associated Type"");
		
		ClearToQuery();
		SetSearchSpec(""Id"", strConcatId);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord()) {
			SetFieldValue(""Associated Number"",strCnctAssNumber);
			SetFieldValue(""Associated Type"",strCnctAssNumberType);
			WriteRecord();
		}
	}
	with( bcNumberMaster) {
		ActivateField(""Id"");
		ClearToQuery();
		SetSearchSpec(""Assoc Start Id"",strAssocStartId);
		ExecuteQuery(ForwardOnly);
		blnIsRecord = FirstRecord();
		var intCnt = 0;
		while(blnIsRecord) {
			strNumber[intCnt++] = GetFieldValue(""Id"");
			blnIsRecord = NextRecord();
		}
	}
	
	ChangeNumberStatus(Inputs.GetProperty(""Source""),bcNumberMaster,bcNumberScheme,IsSIMTwiceAssociated(bcNumberMasterConcat,strAssocStartId),strNumber,Inputs)
}
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Partial DeAssociate Code File                      				  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0   		MBT  	Created       01/11/2003                          *
**************************************************************************************/
function PartialDeassociation(Inputs,bcNumberMaster,bcAssocNumberTypeDisplay,bcNumberAssocDetail,bcNumberAssocMasterConcat,bcNumberMasterConcat,bcNumberScheme,bcNumberAssignedDetail)
{
	var strMSISDNNumber;
	var strMSISDNId;
	var strAssocStartId;
	var strConcatId;
	var strSearchExpr;
	var strAssNumber = new Array();
	var strAssNumberType = new Array();
	var strCnctAssNumber = """";
	var strCnctAssNumberType = """";	
	var strNumberString;
	var intRecCnt=0;
	var intConcatId;
	var blnIsRecord;
	var strStatus;
	var strSource;
	var strErrVal = """";
	var strAssocMstrId = """";
	var blnIsSIMTwiceAssociated = ""N"";
	
	strMSISDNNumber  = Inputs.GetProperty(""MSISDN Number"");
 	strSource        = Inputs.GetProperty(""Source"");

//-------------------------------------------------------------------------------
// Query Number Master to validate the MSISDN or SIM Number .If SIM Number then 
// querying the number Master to fetch MSISDn number Number using 'Assoc Start Id'
// and then taking the values 'Id' of MSISDN number and 'Assoc Start Id'.
//-------------------------------------------------------------------------------


 	with(bcNumberMaster) {
		ActivateField(""Assoc Start Id"");
		ActivateField(""Type Identifier"");
		ActivateField(""Is Associated"");
		ClearToQuery()
		SetSearchSpec(""Number String"",strMSISDNNumber);
		ExecuteQuery();
		if(FirstRecord()) {
			if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"")) {
				strAssocStartId = GetFieldValue(""Assoc Start Id"");
				strSearchExpr = ""[Assoc Start Id] = '""+ strAssocStartId +""' AND [Type Identifier] = '""+ TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"") +""'"";
				ClearToQuery()
				SetSearchExpr(strSearchExpr);
				ExecuteQuery();
				if(FirstRecord()){
					strMSISDNId = GetFieldValue(""Id"");
				}
				else{
					strErrVal = ""RMSDA001""
					return(strErrVal);
				}
			}
			else{	
				var test = 	GetFieldValue(""Is Associated"");
				var test2 = GetFieldValue(""Type Identifier"");
				var test3 = TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"");
				
				if(GetFieldValue(""Type Identifier"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")) {
					strErrVal = ""RMSDA001"";
					return(strErrVal);
				}
				if(GetFieldValue(""Is Associated"") != ""Y"") {
					strErrVal = ""RMSDA002"";
					return(strErrVal);
				}
				strMSISDNId = GetFieldValue(""Id"");
				strAssocStartId = GetFieldValue(""Assoc Start Id"");
			}
		}
		else {
			strErrVal = ""RMSDA001"";
			return(strErrVal);
		}
 	}
 	
//-------------------------------------------------------------------
//Locate the record in Number Mstr-Concat table and delete the record.
//-------------------------------------------------------------------

	with(bcNumberMasterConcat) {

		ActivateField(""Number Id"");
		ActivateField(""Concat Id"");
		
		IsSIMTwiceAssociated(blnIsSIMTwiceAssociated,bcNumberMasterConcat,strAssocStartId);
		
		ClearToQuery();
		SetSearchSpec(""Number Id"",strMSISDNId);
		ExecuteQuery();
		
		if(FirstRecord())
			intConcatId = GetFieldValue(""Concat Id"");
	
		ClearToQuery();
		SetSearchSpec(""Concat Id"",intConcatId);
		ExecuteQuery();
	    blnIsRecord = FirstRecord();

//-----------------------------------------------------------------------------
//Delete the records from Number Master concat having the concat id same as the
//concat id of the input number.
//-----------------------------------------------------------------------------

		while(blnIsRecord){
			strAssNumber[intRecCnt++] = GetFieldValue(""Number Id"");
		    blnIsRecord = NextRecord();
		}
				
		ClearToQuery();
		SetSearchSpec(""Number Id"",strMSISDNId);
		ExecuteQuery();
	    blnIsRecord = FirstRecord();
	    
	    if(FirstRecord()) {
		    strConcatId = GetFieldValue(""Concat Id"");
		    DeleteRecord();
	    }
	}

//-------------------------------------------------------------------------
//Locate the record in Association detai and delete the record.Then rebuild 
//the Concatenated number and update the concate table.
//-------------------------------------------------------------------------

	if(Inputs.GetProperty(""GenLevel"") != """")
		var strConcatId = GetConcatId(bcNumberMaster,Inputs.GetProperty(""GenLevel""),bcNumberAssocMasterConcat,strAssocStartId,bcNumberMasterConcat);
		
	with(bcNumberAssocDetail) {
		ActivateField(""Association Id"");
		ActivateField(""Association Seq Num"");
		ActivateField(""Destination Num Id"");
		ActivateField(""Number Association Concat Id"");
		ActivateField(""Source Num Id"");
		ActivateField(""Source Number"");
		ActivateField(""Destination Number"");
		ActivateField(""Source Number Type"");
		ActivateField(""Destination Number Type"");
		ActivateField(""Row Id"");
		ActivateField(""Parent Ass Id"");
		
		ClearToQuery();
		SetSearchSpec(""Destination Num Id"", strMSISDNId);
		ExecuteQuery();
		if(FirstRecord()) 
			DeleteRecord();
		
		ClearToQuery();
		SetSearchSpec(""Source Num Id"", strAssocStartId);
		if(strConcatId!="""")	
			SetSearchSpec(""Number Association Concat Id"",strConcatId);
		ExecuteQuery();
		if(FirstRecord()) {
			strAssocMstrId = GetFieldValue(""Association Id"");
		}
		
		while(FirstRecord()) {
			if(GetFieldValue(""Source Num Id"") != """") {
				strCnctAssNumber     = strCnctAssNumber + GetFieldValue(""Source Number"");
				strCnctAssNumberType = strCnctAssNumberType + GetFieldValue(""Source Number Type"");
			}
			
			strCnctAssNumber     = strCnctAssNumber + "" / "" +GetFieldValue(""Destination Number"");
			strCnctAssNumberType = strCnctAssNumberType + "" / "" + GetFieldValue(""Destination Number Type"");

			ClearToQuery();
			SetSearchSpec(""Parent Ass Id"", GetFieldValue(""Id""));
			ExecuteQuery();
		}
		
		if(FirstRecord()) {
			strAssocMstrId = GetFieldValue(""Association Id"");
		}
	}
	
//-------------------------------------------------------------------------
//Updating the new concatenated number and number type in concat table
//-------------------------------------------------------------------------
	
	with(bcAssocNumberTypeDisplay) {
		ActivateField(""Associated Number"");
		ActivateField(""Associated Type"");
		ClearToQuery();
		SetSearchSpec(""Id"", strConcatId);
		ExecuteQuery();
		if(FirstRecord()) {
			SetFieldValue(""Associated Number"",strCnctAssNumber);
			SetFieldValue(""Associated Type"",strCnctAssNumberType);
			WriteRecord();
		}
	}

	// this will be useful in future. This is not required now as in association the start numbers
	//are constrained based on status and not on Flag value
		if(strAssocMstrId != """") {
			with(bcNumberAssocMasterConcat) {
				ActivateField(""Flag"");
				ClearToQuery();
				SetSearchSpec(""Association Id"",strAssocMstrId);
				SetSearchSpec(""Concat Id"",strConcatId);
				ExecuteQuery(ForwardOnly);
				
				if(FirstRecord()) {
					SetFieldValue(""Flag"",""N"");
					WriteRecord();
				}
			}
		}
  ChangeNumberStatus(Inputs.GetProperty(""Source""),bcNumberMaster,bcNumberScheme,blnIsSIMTwiceAssociated,strAssNumber,Inputs,bcNumberAssignedDetail);		
  return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method				 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Partial DeAssociate Code File                      				  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0   		MBT  	Created       01/11/2003                          *
**************************************************************************************/
function PartialDeassociation(Inputs,bcNumberMaster,bcAssocNumberTypeDisplay,bcNumberAssocDetail,bcNumberAssocMasterConcat,bcNumberMasterConcat,bcNumberScheme,bcNumberAssignedDetail)
{
	var strMSISDNNumber;
	var strMSISDNId;
	var strAssocStartId;
	var strConcatId;
	var strSearchExpr;
	var strAssNumber = new Array();
	var strAssNumberType = new Array();
	var strCnctAssNumber = """";
	var strCnctAssNumberType = """";	
	var strNumberString;
	var intRecCnt=0;
	var intConcatId;
	var blnIsRecord;
	var strStatus;
	var strSource;
	var strErrVal = """";
	var strAssocMstrId = """";
	var blnIsSIMTwiceAssociated = ""N"";
	
	strMSISDNNumber  = Inputs.GetProperty(""MSISDN Number"");
 	strSource        = Inputs.GetProperty(""Source"");

//-------------------------------------------------------------------------------
// Query Number Master to validate the MSISDN or SIM Number .If SIM Number then 
// querying the number Master to fetch MSISDn number Number using 'Assoc Start Id'
// and then taking the values 'Id' of MSISDN number and 'Assoc Start Id'.
//-------------------------------------------------------------------------------


 	with(bcNumberMaster) {
		ActivateField(""Assoc Start Id"");
		ActivateField(""Type Identifier"");
		ActivateField(""Is Associated"");
		ClearToQuery()
		SetSearchSpec(""Number String"",strMSISDNNumber);
		ExecuteQuery();
		if(FirstRecord()) {
			if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"")) {
				strAssocStartId = GetFieldValue(""Assoc Start Id"");
				strSearchExpr = ""[Assoc Start Id] = '""+ strAssocStartId +""' AND [Type Identifier] = '""+ TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"") +""'"";
				ClearToQuery()
				SetSearchExpr(strSearchExpr);
				ExecuteQuery();
				if(FirstRecord()){
					strMSISDNId = GetFieldValue(""Id"");
				}
				else{
					strErrVal = ""RMSDA001""
					return(strErrVal);
				}
			}
			else{	
				var test = 	GetFieldValue(""Is Associated"");
				var test2 = GetFieldValue(""Type Identifier"");
				var test3 = TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"");
				
				if(GetFieldValue(""Type Identifier"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")) {
					strErrVal = ""RMSDA001"";
					return(strErrVal);
				}
				if(GetFieldValue(""Is Associated"") != ""Y"") {
					strErrVal = ""RMSDA002"";
					return(strErrVal);
				}
				strMSISDNId = GetFieldValue(""Id"");
				strAssocStartId = GetFieldValue(""Assoc Start Id"");
			}
		}
		else {
			strErrVal = ""RMSDA001"";
			return(strErrVal);
		}
 	}
 	
//-------------------------------------------------------------------
//Locate the record in Number Mstr-Concat table and delete the record.
//-------------------------------------------------------------------

	with(bcNumberMasterConcat) {

		ActivateField(""Number Id"");
		ActivateField(""Concat Id"");
		
		IsSIMTwiceAssociated(blnIsSIMTwiceAssociated,bcNumberMasterConcat,strAssocStartId);
		
		ClearToQuery();
		SetSearchSpec(""Number Id"",strMSISDNId);
		ExecuteQuery();
		
		if(FirstRecord())
			intConcatId = GetFieldValue(""Concat Id"");
	
		ClearToQuery();
		SetSearchSpec(""Concat Id"",intConcatId);
		ExecuteQuery();
	    blnIsRecord = FirstRecord();

//-----------------------------------------------------------------------------
//Delete the records from Number Master concat having the concat id same as the
//concat id of the input number.
//-----------------------------------------------------------------------------

		while(blnIsRecord){
			strAssNumber[intRecCnt++] = GetFieldValue(""Number Id"");
		    blnIsRecord = NextRecord();
		}
				
		ClearToQuery();
		SetSearchSpec(""Number Id"",strMSISDNId);
		ExecuteQuery();
	    blnIsRecord = FirstRecord();
	    
	    if(FirstRecord()) {
		    strConcatId = GetFieldValue(""Concat Id"");
		    DeleteRecord();
	    }
	}

//-------------------------------------------------------------------------
//Locate the record in Association detai and delete the record.Then rebuild 
//the Concatenated number and update the concate table.
//-------------------------------------------------------------------------

	if(Inputs.GetProperty(""GenLevel"") != """")
		var strConcatId = GetConcatId(bcNumberMaster,Inputs.GetProperty(""GenLevel""),bcNumberAssocMasterConcat,strAssocStartId,bcNumberMasterConcat);
		
	with(bcNumberAssocDetail) {
		ActivateField(""Association Id"");
		ActivateField(""Association Seq Num"");
		ActivateField(""Destination Num Id"");
		ActivateField(""Number Association Concat Id"");
		ActivateField(""Source Num Id"");
		ActivateField(""Source Number"");
		ActivateField(""Destination Number"");
		ActivateField(""Source Number Type"");
		ActivateField(""Destination Number Type"");
		ActivateField(""Row Id"");
		ActivateField(""Parent Ass Id"");
		
		ClearToQuery();
		SetSearchSpec(""Destination Num Id"", strMSISDNId);
		ExecuteQuery();
		if(FirstRecord()) 
			DeleteRecord();
		
		ClearToQuery();
		SetSearchSpec(""Source Num Id"", strAssocStartId);
		if(strConcatId!="""")	
			SetSearchSpec(""Number Association Concat Id"",strConcatId);
		ExecuteQuery();
		if(FirstRecord()) {
			strAssocMstrId = GetFieldValue(""Association Id"");
		}
		
		while(FirstRecord()) {
			if(GetFieldValue(""Source Num Id"") != """") {
				strCnctAssNumber     = strCnctAssNumber + GetFieldValue(""Source Number"");
				strCnctAssNumberType = strCnctAssNumberType + GetFieldValue(""Source Number Type"");
			}
			
			strCnctAssNumber     = strCnctAssNumber + "" / "" +GetFieldValue(""Destination Number"");
			strCnctAssNumberType = strCnctAssNumberType + "" / "" + GetFieldValue(""Destination Number Type"");

			ClearToQuery();
			SetSearchSpec(""Parent Ass Id"", GetFieldValue(""Id""));
			ExecuteQuery();
		}
		
		if(FirstRecord()) {
			strAssocMstrId = GetFieldValue(""Association Id"");
		}
	}
	
//-------------------------------------------------------------------------
//Updating the new concatenated number and number type in concat table
//-------------------------------------------------------------------------
	
	with(bcAssocNumberTypeDisplay) {
		ActivateField(""Associated Number"");
		ActivateField(""Associated Type"");
		ClearToQuery();
		SetSearchSpec(""Id"", strConcatId);
		ExecuteQuery();
		if(FirstRecord()) {
			SetFieldValue(""Associated Number"",strCnctAssNumber);
			SetFieldValue(""Associated Type"",strCnctAssNumberType);
			WriteRecord();
		}
	}

	// this will be useful in future. This is not required now as in association the start numbers
	//are constrained based on status and not on Flag value
		if(strAssocMstrId != """") {
			with(bcNumberAssocMasterConcat) {
				ActivateField(""Flag"");
				ClearToQuery();
				SetSearchSpec(""Association Id"",strAssocMstrId);
				SetSearchSpec(""Concat Id"",strConcatId);
				ExecuteQuery(ForwardOnly);
				
				if(FirstRecord()) {
					SetFieldValue(""Flag"",""N"");
					WriteRecord();
				}
			}
		}
  ChangeNumberStatus(Inputs.GetProperty(""Source""),Inputs.GetProperty(""RequestType""),bcNumberMaster,bcNumberScheme,blnIsSIMTwiceAssociated,strAssNumber,Inputs,bcNumberAssignedDetail);//RohitR:22-04-21:Number Reclaim PT		
  return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS RMS De-Association						 	          		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Service_PreInvokeMethod										      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/10/2003	 1.0   	MBT      Created       29/10/2003      *
20060711       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var psInputs	= TheApplication().NewPropertySet();
	var psOutputs	= TheApplication().NewPropertySet();
	var intReturn 	= ContinueOperation;	
	var strErrVal 	= """";
	var bsSIMNMRef;
	var blnIsPartial;
	try
	{
		var boNumberAssociation       = TheApplication().GetBusObject(""RMS NM Number Association"");
		var bcAssocNumberTypeDisplay  = boNumberAssociation.GetBusComp(""RMS NM Association Number Type Display"");
		var bcNumberAssocDetail       = boNumberAssociation.GetBusComp(""RMS NM Number Association Detail"");
		var bcNumberAssocMasterConcat = boNumberAssociation.GetBusComp(""RMS NM Number Association Master Concat"");
		var bcNumberMasterConcat      =	boNumberAssociation.GetBusComp(""RMS NM Number Master Concat"");

		var boNumberEnquiry			  = TheApplication().GetBusObject(""RMS NM Number Enquiry"");	
		var bcNumberMaster 	          = boNumberEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
		var bcNumberAssignedDetail    = boNumberEnquiry.GetBusComp(""RMS NM Number Assigned Details"");
		
		var boNumberScheme			  = TheApplication().GetBusObject(""RMS NM Number Scheme"");
		var bcNumberScheme			  = boNumberScheme.GetBusComp(""RMS NM Number Scheme"");

		Outputs.SetProperty(""ErrCode"","""");
		Outputs.SetProperty(""ErrMessage"","""");
														
		switch(MethodName){
		
			case ""DeAssociate"":
					
				intReturn = CancelOperation;
				blnIsPartial = Inputs.GetProperty(""Partial(Y/N)"");
				if(blnIsPartial == ""N"") {
					//strErrVal = DeAssociate(Inputs,bcNumberMaster,bcAssocNumberTypeDisplay,bcNumberAssocDetail,bcNumberAssocMasterConcat,bcNumberMasterConcat,bcNumberScheme,bcNumberAssignedDetail);
					strErrVal = DeAssociate(Inputs,bcNumberMaster,bcAssocNumberTypeDisplay,bcNumberAssocDetail,bcNumberAssocMasterConcat,bcNumberMasterConcat,bcNumberScheme,bcNumberAssignedDetail);
					TheApplication().RaiseError(strErrVal);					
				}
				else if(blnIsPartial == ""Y"") {
					strErrVal = PartialDeassociation(Inputs,bcNumberMaster,bcAssocNumberTypeDisplay,bcNumberAssocDetail,bcNumberAssocMasterConcat,bcNumberMasterConcat,bcNumberScheme,bcNumberAssignedDetail);
					Outputs.SetProperty(""ErrCode"",strErrVal);
					if(strErrVal != """")
						Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",strErrVal));					
					
				}

			break;
			
		}
	}
	
	catch(e)
	{
		Outputs.SetProperty(""ErrCode"",e.errCode);
		Outputs.SetProperty(""ErrMessage"",e.errText);
		throw(e);
	}
	finally
	{
//1.1 below
		bcAssocNumberTypeDisplay  	= null;
		bcNumberAssocDetail       	= null;
		bcNumberAssocMasterConcat 	= null;
		bcNumberMasterConcat      	= null;
		boNumberAssociation       	= null;

		bcNumberScheme			  	= null;
		boNumberScheme			  	= null;

		bcNumberMaster 	          	= null;
		bcNumberAssignedDetail      = null;
		boNumberEnquiry             = null;

		psInputs					= null;
		psOutputs					= null;
//1.1 above
	}
	return(intReturn);	
}
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method                     * 
* Author        : Mahindra British Telecom                                            *
* Description   : Calculate Available date                                *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003 1.0     MBT   Created       01/11/2003                          *
**************************************************************************************/
function CalcAvailDate(&bcNumberScheme, &bcNumberMaster, strSchemeId, dtQuarantineDate,QuarPeriod,QuarUOM)
{
 var dtSysDate    = Clib.time();
 var dtSysDateObj   = Date.fromSystem(dtSysDate);
  
    //var dtQuarantineDate  = bcNumberMaster.GetFieldValue(""Quarantine Date"");
 var dtQuarantineDateObj = new Date(dtQuarantineDate);
 //below 1.1
 /*var QuarUOM    = """";
 var QuarPeriod    = """";*/
 //above 1.1

// =========================== COMMENTED FOR FUTURE USE Ver 2.0 =============================/ 
/* with(bcNumberScheme) {

  ActivateField(""Max. Ter. Quarantine UOM"");
  ActivateField(""Max. Ter. Quarantine Period"");
  ClearToQuery();
  SetSearchSpec(""Id"", strSchemeId);
  ExecuteQuery(ForwardOnly);
  
  if(FirstRecord()) {
   QuarUOM = GetFieldValue(""Max. Ter. Quarantine UOM"");
   QuarPeriod = GetFieldValue(""Max. Ter. Quarantine Period"");
  }
  
 }*/
 
 
// if(bcNumberScheme.FirstRecord()) {
     switch (QuarUOM) {
 
        case ""Days"": 
    dtQuarantineDateObj.setDate(ToInteger(dtQuarantineDateObj.getDate()) + ToInteger(QuarPeriod));
          break;
               
      case ""Months"": 
    dtQuarantineDateObj.setMonth(ToNumber(ToNumber(dtQuarantineDateObj.getMonth()) + ToNumber(QuarPeriod)));
    break;
   
      case ""Weeks"":
    dtQuarantineDateObj.setDate(dtQuarantineDateObj.getDate() + (QuarPeriod * 7));
          break;
      
      case ""Year"": 
      dtQuarantineDateObj.setFullYear(ToNumber(ToNumber(dtQuarantineDateObj.getFullYear()) + ToNumber(QuarPeriod)));
    break;
    }
//  }
   
   return(dtQuarantineDateObj);
     
}
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method                     * 
* Author        : Mahindra British Telecom                                            *
* Description   : Calculate Available Date                                *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 1/11/2003 1.0     Mahindra British Telecom    Created       05/11/2003          *
**************************************************************************************/
function CalcAvailableDate(QuarUOM, QuarPeriod, &bcNumberMaster)
{
 
 var dtSysDate    = Clib.time();
 var dtSysDateObj   = Date.fromSystem(dtSysDate);
 
 var dtQuarantineDate  = bcNumberMaster.GetFieldValue(""Current Date"");
 var dtQuarantineDateObj = new Date(dtQuarantineDate);
 
    switch (QuarUOM) {

       case ""Days"": 
   dtQuarantineDateObj.setDate(ToInteger(dtQuarantineDateObj.getDate()) + ToInteger(QuarPeriod));
         break;
              
     case ""Months"": 
   dtQuarantineDateObj.setMonth(ToNumber(ToNumber(dtQuarantineDateObj.getMonth()) + ToNumber(QuarPeriod)));
   break;
  
     case ""Weeks"":
   dtQuarantineDateObj.setDate(dtQuarantineDateObj.getDate() + (QuarPeriod * 7));
         break;
     
     case ""Year"": 
     dtQuarantineDateObj.setFullYear(ToNumber(ToNumber(dtQuarantineDateObj.getFullYear()) + ToNumber(QuarPeriod)));
   break;
   }
   
   return(dtQuarantineDateObj);
}
"//KT:20060905:Removed function comments as script length is exceeded 16K
//version 1.1 Kalyana Tangirala Added new code for calculating quarantine period based on quarantine event defined  at scheme level
function  ChangeNumberStatus(strSource,&bcNumberMaster,&bcNumberScheme,blnIsSIMTwiceAssociated,&strNumber,&Inputs,bcNumberAssignedDetail){
 var intArrLen = 0;
 var dtQuarantineDateObj;
 var bsNumberBlock;
 var strPrevSts;
 var dtQuarantineDateObj = new Date();
 var psInputs = TheApplication().NewPropertySet();
 var psOutputs = TheApplication().NewPropertySet();
 var strQuarantineEvent = """";
 switch(strSource) {
 case ""Change SIM Number"":
//Loop through each number in the array, and change the status of the SIM and IMSI Number.
   for(var intArrLen = 0;intArrLen < getArrayLength(strNumber);intArrLen++) {
    with(bcNumberMaster){
     ActivateField(""Status"");
     ActivateField(""Assigned Id"");
     ActivateField(""Allocation Id""); 
     ActivateField(""Block Id"");
     ActivateField(""Assigned Date"");
     ActivateField(""Assigned By"");
     ActivateField(""Type Identifier"");
     ActivateField(""Status Date"");
     ActivateField(""Current Date"");
     ActivateField(""No. Of Assigned MSISDNs"");
     ActivateField(""Assoc Start Id"");
     ClearToQuery();
     SetSearchSpec(""Id"",strNumber[intArrLen]);
     ExecuteQuery();
     if(FirstRecord()) {
      if(((GetFieldValue(""Type Identifier"")== TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))) || (GetFieldValue(""Type Identifier"")==TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI""))){
       if(GetFieldValue(""Type Identifier"")== TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"")){
        SetFieldValue(""No. Of Assigned MSISDNs"",ToInteger(GetFieldValue(""No. Of Assigned MSISDNs""))-1);    
        WriteRecord();
        strPrevSts = GetFieldValue(""Status"");
        if(GetFieldValue(""No. Of Assigned MSISDNs"")==0) {
         SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED""));
         SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
         SetFieldValue(""Assigned Id"","""");
         SetFieldValue(""Assigned Date"","""");
         SetFieldValue(""Assigned By"","""");
         ClearAssignedDetails(bcNumberAssignedDetail,bcNumberMaster)         
         WriteRecord();
        }
       } else {  
        strPrevSts = GetFieldValue(""Status"");
        SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED""));
        SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
        SetFieldValue(""Assigned Id"","""");
        SetFieldValue(""Assigned Date"","""");
        SetFieldValue(""Assigned By"","""");
        ClearAssignedDetails(bcNumberAssignedDetail,bcNumberMaster)        
        WriteRecord();
       }
      }
      else if(GetFieldValue(""Type Identifier"")== TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")) {
       strPrevSts = GetFieldValue(""Status"");
       SetFieldValue(""Assoc Start Id"","""");
       SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED""));
       SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
       SetFieldValue(""Assigned Id"","""");
       SetFieldValue(""Assigned Date"","""");
       SetFieldValue(""Assigned By"","""");
       ClearAssignedDetails(bcNumberAssignedDetail,bcNumberMaster)       
       WriteRecord();
      }
     }
    }
    if(TheApplication().GetProfileAttr(""RMS_BLOCK_UPDATION"") == ""Y"") {    
     bsNumberBlock = TheApplication().GetService(""RMS RMS Block Calc"");
     psInputs.SetProperty(""From Status"", strPrevSts);
     psInputs.SetProperty(""Object Id"",bcNumberMaster.GetFieldValue(""Block Id""));
     psInputs.SetProperty(""To Status"",bcNumberMaster.GetFieldValue(""Status""));  
     bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);
    }
      }
  break;
  case ""Change MSISDN Number"":     
//Loop through each number in the array, and change the status of the MSISDN Number.
    for(var intArrLen = 0;intArrLen < getArrayLength(strNumber);intArrLen++) {
     with(bcNumberMaster){
     ActivateField(""Status"");
     ActivateField(""Assigned Id"");
     ActivateField(""Allocation Id""); 
     ActivateField(""Block Id"");
     ActivateField(""Assigned Date"");
     ActivateField(""Assigned By"");
     ActivateField(""Type Identifier"");
     ActivateField(""Available Date"");
     ActivateField(""Quarantine Date"");
     ActivateField(""Current Date"");
     ActivateField(""Scheme Id"");
     ActivateField(""Is Associated"");
     ActivateField(""Assoc Start Id"");
     ActivateField(""Status Date"");
     ActivateField(""Special Category Id"");
     ActivateField(""Special Quarantine Period"");
     ActivateField(""Number String"");
     ActivateField(""No. Of Assigned MSISDNs"");               
     ClearToQuery();
     SetSearchSpec(""Id"",strNumber[intArrLen]);
     ExecuteQuery();
     if(FirstRecord()) {
      if(GetFieldValue(""Type Identifier"")== TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"")){
       SetFieldValue(""No. Of Assigned MSISDNs"",ToInteger(GetFieldValue(""No. Of Assigned MSISDNs""))-1);
       WriteRecord();
      } 
      if(GetFieldValue(""Type Identifier"")== TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")){
       strPrevSts = GetFieldValue(""Status"");
       //below 1.1
       strQuarantineEvent= TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Change MSISDN"");
       GetQuarantineDetails(Inputs,bcNumberMaster.GetFieldValue(""Scheme Id""),bcNumberMaster.GetFieldValue(""Number String""), strQuarantineEvent);
       var strQuarantinePeriod= Inputs.GetProperty(""Quarantine Period"");
       var strQuarantineUOM = Inputs.GetProperty(""Quarantine UOM"");
       //above 1.1
       dtQuarantineDateObj = CalcAvailDate(bcNumberScheme, bcNumberMaster, bcNumberMaster.GetFieldValue(""Scheme Id""),bcNumberMaster.GetFieldValue(""Current Date""),strQuarantinePeriod,strQuarantineUOM);
       SetUserProperty(""SuppressScript"",""Y"");
       SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""QUARANTINE""));
       SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
       SetFieldValue(""Quarantine Date"", GetFieldValue(""Current Date""));
       SetFieldValue(""Assigned Id"","""");
       SetFieldValue(""Assigned Date"","""");
       SetFieldValue(""Assoc Start Id"","""");
       SetFieldValue(""Is Associated"",""N"");
       SetFieldValue(""Available Date"",DateToString(dtQuarantineDateObj));
       ClearAssignedDetails(bcNumberAssignedDetail,bcNumberMaster)
       SetUserProperty(""SuppressScript"",""N"");
       WriteRecord();
      }
     }
    }
    if(TheApplication().GetProfileAttr(""RMS_BLOCK_UPDATION"") == ""Y"") {    
     bsNumberBlock = TheApplication().GetService(""RMS RMS Block Calc"");
     psInputs.SetProperty(""From Status"", strPrevSts);
     psInputs.SetProperty(""Object Id"",bcNumberMaster.GetFieldValue(""Block Id""));
     psInputs.SetProperty(""To Status"",bcNumberMaster.GetFieldValue(""Status""));  
     bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);
    }
      }
  break;
  case ""Cancel Order"":  
  case ""ReUse"":
   for(intArrLen = 0; intArrLen < getArrayLength(strNumber); intArrLen++){
    with(bcNumberMaster){
     ActivateField(""Assigned Id"");
     ActivateField(""Assigned Date"");
     ActivateField(""Allocation Id"");
     ActivateField(""Reserved To"");
     ActivateField(""Sales Code"");
     ActivateField(""Status"");
     ActivateField(""Block Id"");
     ActivateField(""Assigned Id"");
     ActivateField(""Type Identifier"");
     ActivateField(""Assoc Start Id"");
     ActivateField(""Scheme Id"");
     ActivateField(""Current Date"");
     ActivateField(""Quarantine Date"");
     ActivateField(""Status Date"");
     ActivateField(""Available Date"");
     ActivateField(""Is Associated"");
     ActivateField(""Special Quarantine Period"");
     ActivateField(""Quarantine UOM"");          
     ActivateField(""Quarantine Period"");               
     ActivateField(""Special Category Id"");               
     ActivateField(""Allocated To""); 
      ActivateField(""STC Vanity Paid"");        
     ActivateField(""Pre Activation Id"");
     ClearToQuery();
     SetSearchSpec(""Id"", strNumber[intArrLen]);
     ExecuteQuery(ForwardOnly);
     if(FirstRecord()) {
      if((GetFieldValue(""Type Identifier"")==""SIM"" && blnIsSIMTwiceAssociated == ""N"") ||(GetFieldValue(""Type Identifier"")==""IMSI"")){
       strPrevSts = GetFieldValue(""Status"");
      if (strSource != ""ReUse"")
       SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED""));
       SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
       SetFieldValue(""Assigned Id"","""");
       SetFieldValue(""Assigned Date"","""");
       if(Inputs.GetProperty(""Partial(Y/N)"") != ""Y"")
        SetFieldValue(""Assoc Start Id"","""");
       WriteRecord();
      }
      else if(GetFieldValue(""Type Identifier"")==""MSISDN"") {
       var strQuarantinePeriod="""";
       var strQuarantineUOM = """";
       strPrevSts = GetFieldValue(""Status"");
       if(GetFieldValue(""Special Category Id"") != """") {
        strQuarantinePeriod = GetFieldValue(""Special Quarantine Period"");
        strQuarantineUOM = ""Days"";
       }else {
        strQuarantinePeriod = GetFieldValue(""Quarantine Period"");
        strQuarantineUOM = GetFieldValue(""Quarantine UOM"");
       }
       dtQuarantineDateObj = CalcAvailDate(bcNumberScheme, bcNumberMaster, bcNumberMaster.GetFieldValue(""Scheme Id""),bcNumberMaster.GetFieldValue(""Current Date""),strQuarantinePeriod,strQuarantineUOM);
       SetUserProperty(""SuppressScript"",""Y"");
       SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
       if (strSource == ""Cancel Order"")
       {
        SetFieldValue(""Quarantine Date"", GetFieldValue(""Current Date""));
        SetFieldValue(""Available Date"",DateToString(dtQuarantineDateObj));
        SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""QUARANTINE""));
       }
       else if(strSource == ""ReUse"") {
                             SetFieldValue(""Allocated To"","""");
        SetFieldValue(""Allocation Id"","""");
        SetFieldValue(""Pre Activation Id"","""");   
        SetFieldValue(""Quarantine Date"", """"); 
        SetFieldValue(""Available Date"","""");
        if (strPrevSts == TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""QUARANTINE""))
         SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
        }
        SetFieldValue(""Assigned Id"","""");
        SetFieldValue(""Assigned Date"","""");
        SetFieldValue(""Assoc Start Id"","""");
        SetFieldValue(""Is Associated"",""N"");
        SetFieldValue(""STC Vanity Paid"",""No"");
        SetUserProperty(""SuppressScript"",""N"");
        WriteRecord();
       }
      if(TheApplication().GetProfileAttr(""RMS_BLOCK_UPDATION"") == ""Y"") {
       bsNumberBlock = TheApplication().GetService(""RMS RMS Block Calc"");
       psInputs.SetProperty(""From Status"", strPrevSts);
       psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
       psInputs.SetProperty(""To Status"",GetFieldValue(""Status""));  
       bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);
      }
     }
    }
   }
   break; 
  case ""MSISDN Takeover"":
  case ""Disconnect"":
   for(intArrLen = 0; intArrLen < strNumber.length; intArrLen++){
     with(bcNumberMaster){
     ActivateField(""Status"");
     ActivateField(""Block Id"");
     ActivateField(""Assigned Id"");
     ActivateField(""Assoc Start Id"");
     ActivateField(""Assigned Id"");
     ActivateField(""Type Identifier"");
     ActivateField(""Is Associated"");
     ActivateField(""Scheme Id"");
     ActivateField(""Record Blocking Date"");
     ActivateField(""Record Blocked For"");
     ActivateField(""Reservation End Date"");
     ActivateField(""Current Date"");
     ActivateField(""Status Date"");
     ActivateField(""Assigned Date"");
     ActivateField(""Available Date"");
     ActivateField(""Calc Current Date"");
     ActivateField(""Special Category Id"");
     ActivateField(""Quarantine Date"");
     ActivateField(""Allocated To"");
     ActivateField(""Disconnect Type"");
     ActivateField(""Number String"");
     /*1.2Amit*/ActivateField(""Pre Activation Id"");
     ClearToQuery();
     SetSearchSpec(""Id"",strNumber[intArrLen]);
     ExecuteQuery();
     if(FirstRecord()) {
      if((GetFieldValue(""Type Identifier"")==""SIM"" && blnIsSIMTwiceAssociated == ""N"")||(GetFieldValue(""Type Identifier"")==""IMSI"")){
       strPrevSts = GetFieldValue(""Status"");
       if((strSource == ""MSISDN Takeover"") && (Inputs.GetProperty(""SIMTakeover"") == ""Y"")) {
        SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED""));
        SetFieldValue(""Allocated To"",Inputs.GetProperty(""SIMTakeoverPartnerCode""));
        SetFieldValue(""Record Blocked For"", Inputs.GetProperty(""BlockedFor""));
        SetFieldValue(""Record Blocking Date"","""");
        /*1.2Amit*/SetFieldValue(""Pre Activation Id"","""");
       } else {
        SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED""));
        SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
       }
       SetFieldValue(""Assigned Id"","""");
       SetFieldValue(""Assigned Date"","""");
       if(Inputs.GetProperty(""Partial(Y/N)"") != ""Y"")
       SetFieldValue(""Assoc Start Id"","""");
       SetFieldValue(""Disconnect Type"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_DISCONNECT_TYPE"", ""E""));
       WriteRecord();
     } else if(GetFieldValue(""Type Identifier"")==""MSISDN"") {
       var dtReservationEndDate = new Date(GetFieldValue(""Current Date""));       
       dtReservationEndDate.setDate(ToInteger(dtReservationEndDate.getDate()) + 2);
       strPrevSts = GetFieldValue(""Status"");  
       SetUserProperty(""SuppressScript"",""Y"");
       if(strSource == ""MSISDN Takeover"") {
        SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED""));
        SetFieldValue(""Allocated To"",Inputs.GetProperty(""NewPartnerCode""));
        SetFieldValue(""Record Blocked For"", Inputs.GetProperty(""BlockedFor""));
        SetFieldValue(""Record Blocking Date"","""");
       } else {
        SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""QUARANTINE""));
        SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
        dtQuarantineDateObj = GetFieldValue(""Current Date"");
        strPrevSts = GetFieldValue(""Status"");
        strQuarantineEvent= TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Service Termination"");
        GetQuarantineDetails(Inputs,bcNumberMaster.GetFieldValue(""Scheme Id""),bcNumberMaster.GetFieldValue(""Number String""), strQuarantineEvent);
        var strQuarantinePeriod= Inputs.GetProperty(""Quarantine Period"");
        var strQuarantineUOM = Inputs.GetProperty(""Quarantine UOM"");
        //above 1.1
        dtQuarantineDateObj = CalcAvailDate(bcNumberScheme, bcNumberMaster, bcNumberMaster.GetFieldValue(""Scheme Id""),bcNumberMaster.GetFieldValue(""Current Date""),strQuarantinePeriod,strQuarantineUOM);
       }
       SetFieldValue(""Record Blocking Date"","""");
       SetFieldValue(""Reservation End Date"", """");
       SetFieldValue(""Assigned Id"","""");
       SetFieldValue(""Assigned Date"","""");
       SetFieldValue(""Assoc Start Id"","""");
       SetFieldValue(""Is Associated"",""N"");
       if(strSource != ""MSISDN Takeover"")
        SetFieldValue(""Available Date"",DateToString(dtQuarantineDateObj));
       SetUserProperty(""SuppressScript"",""N"");
       SetFieldValue(""Disconnect Type"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_DISCONNECT_TYPE"", ""E""));
       WriteRecord();
      }
      if(TheApplication().GetProfileAttr(""RMS_BLOCK_UPDATION"") == ""Y"") {
       bsNumberBlock = TheApplication().GetService(""RMS RMS Block Calc"");
       psInputs.SetProperty(""From Status"", strPrevSts);
       psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
       psInputs.SetProperty(""To Status"",GetFieldValue(""Status""));  
       bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);
      }
     }
    }
   }
  break;
 }
 bsNumberBlock  = null;
 psInputs  = null;
 psOutputs  = null;
}
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method                     * 
* Author        : Mahindra British Telecom                                            *
* Description   : Clear Assigned Details Code File                          *
*    :Code added to delete the intersection details of number master and   *
*     service account while deassociating.          *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 04/08/2005 1.0     MBT   Created       04/08/2005                          *
**************************************************************************************/
function ClearAssignedDetails(bcNumberAssignedDetail,bcNumberMaster){

 with(bcNumberAssignedDetail) {
  var id = bcNumberMaster.GetFieldValue(""Id"");
  ClearToQuery();
  SetSearchSpec(""Number Id"",bcNumberMaster.GetFieldValue(""Id""));
  ExecuteQuery();
  if(FirstRecord())
   DeleteRecord();
 }

}
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method                     * 
* Author        : Mahindra British Telecom                                            *
* Description   : Convert date object to string format Code File                      *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/10/2003 1.0     Mahindra British Telecom    Created       29/10/2003      *
**************************************************************************************/

//-------------------------------------------------------------------------------------
//Gets the 'Date','Month','Hours','Minutes','Second' and appends them to a string.
//-------------------------------------------------------------------------------------

function DateToString (dtCDate)
{
 var dtDatum = ((dtCDate.getMonth() + 1) + ""/"" + dtCDate.getDate() + ""/"" + dtCDate.getFullYear()
 + "" "" + dtCDate.getHours() + "":"" + dtCDate.getMinutes()+ "":"" + dtCDate.getSeconds());
 return dtDatum;
}
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method                     * 
* Author        : Mahindra British Telecom                                            *
* Description   : DeAssociate Code File                                    *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003 1.0     MBT   Created       01/11/2003                          *
**************************************************************************************/

function DeAssociate(Inputs,&bcNumberMaster,&bcAssocNumberTypeDisplay,&bcNumberAssocDetail,&bcNumberAssocMasterConcat,&bcNumberMasterConcat,&bcNumberScheme,bcNumberAssignedDetail)
{
 var strMSISDNnumber;
 var strAssocStartId;
 var strNumberId;
 var intConcatId;
 var strNumber = new Array();
 var strNumberString;
 var intRecCnt=0;
 var blnIsRecord;
 var strStatus;
 var strAssocNumber;
 var strSource;
 var blnIsSIMTwiceAssociated = ""N"";
 
//----------------------------------------
//Get MSISDN as one of the input parameter
//----------------------------------------
 strMSISDNnumber  = Inputs.GetProperty(""MSISDN Number"");
  strSource      =  Inputs.GetProperty(""Source"");     

//---------------------------------------------------------------
//Using MSISDN Number to Get Assoc Start ID from Number Master BC
//---------------------------------------------------------------
      
 with(bcNumberMaster) {
  
  ActivateField(""Assoc Start Id"");
  ActivateField(""Number"");
  ActivateField(""Number String"");
  ActivateField(""Is Associated"");
  ClearToQuery();
  SetSearchSpec(""Number String"",strMSISDNnumber);
  ExecuteQuery();
  if(FirstRecord()) {
   if(GetFieldValue(""Is Associated"") != ""Y"") {
    strErrVal = ""RMSDA001"";
    return(strErrVal);
   }
   strAssocStartId =GetFieldValue(""Assoc Start Id"");
   strNumberId     =GetFieldValue(""Id"");
  }
  else {
   strErrVal = ""RMSDA002"";
   return(strErrVal);
  }
 }
   
//--------------------------------------------------------------------------
//Using Number Id get the Concat Id from Number Master Concat BC.Also check,
//whether SIM is associated with any other MSISDN number.
//--------------------------------------------------------------------------

 with(bcNumberMasterConcat) {
 
  ActivateField(""Number Id"");
  ActivateField(""Concat Id"");
  
  IsSIMTwiceAssociated(blnIsSIMTwiceAssociated,bcNumberMasterConcat,strAssocStartId);
  
  ClearToQuery();
  SetSearchSpec(""Number Id"",strNumberId);
  ExecuteQuery();
  
  if(FirstRecord())
   intConcatId = GetFieldValue(""Concat Id"");
 
  ClearToQuery();
  SetSearchSpec(""Concat Id"", intConcatId);
  ExecuteQuery();

//-----------------------------------------------------------------------------
//Delete the records from Number Master concat having the concat id same as the
//concat id of the input number.
//-----------------------------------------------------------------------------

  while(FirstRecord()){
   strNumber[intRecCnt++] = GetFieldValue(""Number Id"");
   DeleteRecord();
  }
 }
   
 with(bcAssocNumberTypeDisplay) {
  ClearToQuery()
  SetSearchSpec(""Id"",intConcatId);
  ExecuteQuery();
  while(FirstRecord())
   DeleteRecord();
 }

//-----------------------------------------------------------------------------
//Delete the records from Association Detail having the concat id same as the
//concat id of the input number.
//-----------------------------------------------------------------------------

 with(bcNumberAssocDetail){
  ActivateField(""Association Id"");
  ActivateField(""Association Seq Num"");
  ActivateField(""Destination Num Id"");
  ActivateField(""Number Association Concat Id"");
  ActivateField(""Source Num Id"");
  ActivateField(""Row Id"");
  ActivateField(""Parent Ass Id"");
  ClearToQuery();
  SetSearchSpec(""Number Association Concat Id"", intConcatId);
  ExecuteQuery();
  blnIsRecord=FirstRecord();
  while(FirstRecord())
   DeleteRecord();
 }

//----------------------------------------------------------------------------------
//Delete the records from Association Master concat having the concat id same as the
//concat id of the input number.
//----------------------------------------------------------------------------------
   
 with(bcNumberAssocMasterConcat){
  ActivateField(""Association Id"");
  ActivateField(""Concat Id"");
  ActivateField(""Flag"");
  ClearToQuery();
  SetSearchSpec(""Concat Id"",intConcatId);
  ExecuteQuery();
  blnIsRecord=FirstRecord();
  while(FirstRecord())
   DeleteRecord();
 }

//------------------------------------------------------------------------
//for each number retieved from Number Master Concat BC delete the records
//from the array, if not then leave the records in array.
//------------------------------------------------------------------------
 with(bcNumberMasterConcat){
  ClearToQuery();
  SetSearchSpec(""Number Id"", strNumberId);
  ExecuteQuery();
  blnIsRecord=FirstRecord();
  if(!blnIsRecord())
  strNumber=null;
 }
 ChangeNumberStatus(Inputs,strSource,bcNumberMaster,bcNumberScheme,blnIsSIMTwiceAssociated,strNumber,bcNumberAssignedDetail);
}
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method                     * 
* Author        : Mahindra British Telecom                                            *
* Description   : Partial DeAssociate Code File                            *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 21/06/2005 1.0     MBT   Created       21/06/2005                          *
*         P.GAUTAMAN            * 
**************************************************************************************/
function GetConcatId(bcNumberMaster,strGenLvl,bcAssocMstrCnct,strSIMAssocStartId,bcNumberMasterConcat)
{
 with(bcNumberMaster) {
  ClearToQuery();
  SetSearchSpec(""Assoc Start Id"",strSIMAssocStartId);
  SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI""));
  SetSearchSpec(""Generation Level"",strGenLvl);
  ExecuteQuery();
  if(FirstRecord()){
   with(bcNumberMasterConcat) {
    ActivateField(""Concat Id"");
    ClearToQuery();
    SetSearchSpec(""Number Id"",bcNumberMaster.GetFieldValue(""Id""));    
    ExecuteQuery();
    if(FirstRecord())
     return(GetFieldValue(""Concat Id""));
   }
  }
 }
 
}
"/**************************************************************************************
* Name          : GetQuarantineDetails                             * 
* Author        : Tech Mahindra                                                       *
* Description   : To get Quarantine Period and Quarantine UOM values based on 
                  Quarantine event                                       *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 20060905      1.0     Kalyana Tangirala           Created                                 *
**************************************************************************************/
function GetQuarantineDetails(Inputs, strSchemeId, strMSISDN, QuarEvent)
{
    var blnIsRecord   = false; 
 var boNumberScheme   = TheApplication().GetBusObject(""RMS NM Number Scheme"");
 var bcNumberScheme   = boNumberScheme.GetBusComp(""RMS NM Number Scheme"");
 var bcQuarantine     = boNumberScheme.GetBusComp(""RMS NM Number Quarantine"");
 
    var blnsIsQuarantine = false;
 var strSearchExp     = """";
 try{
 with(bcNumberScheme)
 {
  ClearToQuery();
  SetSearchSpec(""Id"",strSchemeId);
  ExecuteQuery(ForwardOnly);
  if(FirstRecord()) {
 
   strSearchExp =    strSearchExp +""[Scheme Id] ='""+strSchemeId+""'""; 
   if(QuarEvent== TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Change MSISDN""))
   {
    strSearchExp = strSearchExp + "" AND [Quarantine Event] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Change MSISDN"") + ""'"";
   }
   else if(QuarEvent == TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Service Termination""))
   {
    strSearchExp = strSearchExp + "" AND [Quarantine Event] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Service Termination"") + ""'"";
   }
   with(bcQuarantine)
   {
    ActivateField(""Quarantine Period"");
    ActivateField(""Quarantine UOM"");
    ClearToQuery();
    SetSearchExpr(strSearchExp);
    ExecuteQuery(ForwardOnly);
    blnsIsQuarantine = FirstRecord();
    if(blnsIsQuarantine)
    {
     Inputs.SetProperty(""Quarantine Period"",bcQuarantine.GetFieldValue(""Quarantine Period""));
     Inputs.SetProperty(""Quarantine UOM"",bcQuarantine.GetFieldValue(""Quarantine UOM""));
    }//end of if(blnsIsQuarantine)
    //if no record with that quarantine event is found then query on ""Default"" quarantine event
    else{
     ClearToQuery();
     SetSearchSpec(""Scheme Id"",strSchemeId);
     SetSearchSpec(""Quarantine Event"",TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Default""));
     ExecuteQuery(ForwardOnly);
     blnsIsQuarantine = FirstRecord();
     if(blnsIsQuarantine)
     {
      Inputs.SetProperty(""Quarantine Period"",bcQuarantine.GetFieldValue(""Quarantine Period""));
      Inputs.SetProperty(""Quarantine UOM"",bcQuarantine.GetFieldValue(""Quarantine UOM""));
     }//end of if(blnsIsQuarantine)
    }//end of else
   }//end of with(bcQuarantine)
  }//end of if(FirstRecord())
 }//end of with(bcNumberScheme)
 
 }//try
 catch(e) {
    throw(e.toString());
         }
 finally
 {
 bcNumberScheme = null;
 bcQuarantine   = null;
 boNumberScheme = null;
 
 }
 }//end of function"
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method                     * 
* Author        : Mahindra British Telecom                                            *
* Description   : Is SIM Twice Associated                                 *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003 1.0     MBT   Created       01/11/2003                          *
**************************************************************************************/
function IsSIMTwiceAssociated(&blnIsSIMTwiceAssociated,bcNumberMasterConcat,strAssocStartId) 
{
 var intRecCnt = 0;
 var blnIsSIMTwiceAssociated = ""N"";

 with(bcNumberMasterConcat) {
  ClearToQuery();
  SetSearchSpec(""Number Id"",strAssocStartId);
  ExecuteQuery();
  var blnIsRecord = FirstRecord();
  while(blnIsRecord) {
   intRecCnt++;
   if(ToInteger(intRecCnt) > 1)
    break;
   blnIsRecord = NextRecord();
  }
  if(ToInteger(intRecCnt) > 1) 
   blnIsSIMTwiceAssociated = ""Y"";
 }
 
 return (blnIsSIMTwiceAssociated);
}
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method                     * 
* Author        : Mahindra British Telecom                                            *
* Description   : Partial DeAssociate Code File                            *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003 1.0     MBT   Created       01/11/2003                          *
**************************************************************************************/
function PartialDeAssociate_old(&Inputs,&bcNumberMaster,&bcAssocNumberTypeDisplay,&bcNumberAssocDetail,&bcNumberAssocMasterConcat,&bcNumberMasterConcat,&bcNumberScheme)
{
 var strMSISDNNumber   = """";
 var strMSISDNId    = """";
 var strAssocStartId   = """";
 var strConcatId    = """";
 var strCnctAssNumber   = """";
 var strCnctAssNumberType  = """";
 var strErrVal    = """";
 
 var strNumber     = new Array();
 
 var intRecCnt    = 0;
 
 var blnIsRecord    = false;
  
 strMSISDNNumber     = Inputs.GetProperty(""MSISDN Number"");
  

//-----------------------------------------------------------------------
//Query Number Master to validate the MSISDN number and get the Number Id
//and Assoc Start Id
//-----------------------------------------------------------------------
  
  with( bcNumberMaster) {
  ActivateField(""Assoc Start Id"");
  ActivateField(""Type Identifier"");
  ActivateField(""Is Associated"");
  
  ClearToQuery()
  SetSearchSpec(""Number String"",strMSISDNNumber);
  ExecuteQuery();
  if(FirstRecord()) {
   if(GetFieldValue(""Type Identifier"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")) {
    strErrVal = ""RMSDA001"";
    return(strErrVal);
   }
   if(GetFieldValue(""Is Associated"") != ""Y"") {
    strErrVal = ""RMSDA002"";
    return(strErrVal);
   }
   strMSISDNId     = GetFieldValue(""Id"");
   strAssocStartId = GetFieldValue(""Assoc Start Id"");
  }
  else {
   strErrVal = ""RMSDA001""
   return(strErrVal);
  }
  }
  
//-------------------------------------------------------------------
//Locate the record in Number Mstr-Concat table and delete the record.
//-------------------------------------------------------------------

 with(bcNumberMasterConcat) {

  ActivateField(""Number Id"");
  ActivateField(""Concat Id"");
  ClearToQuery();
  SetSearchSpec(""Number Id"",strMSISDNId);
  ExecuteQuery(ForwardOnly);
     blnIsRecord = FirstRecord();
     if(FirstRecord()) {
      strConcatId = GetFieldValue(""Concat Id"");
      DeleteRecord();
     }
 }

//-------------------------------------------------------------------------
//Locate the record in Association detai and delete the record.Then rebuild 
//the Concatenated number and update the concate table.
//-------------------------------------------------------------------------
 
 with(bcNumberAssocDetail) {
  ActivateField(""Association Id"");
  ActivateField(""Association Seq Num"");
  ActivateField(""Destination Num Id"");
  ActivateField(""Source Number Type"");
  ActivateField(""Destination Number Type"");
  ActivateField(""Number Association Concat Id"");
  ActivateField(""Source Num Id"");
  ActivateField(""Source Number"");
  ActivateField(""Destination Number"");
  ActivateField(""Row Id"");
  ActivateField(""Parent Ass Id"");
  
  ClearToQuery();
  SetSearchSpec(""Destination Num Id"", strMSISDNId);
  ExecuteQuery(ForwardOnly);
  if(FirstRecord()) 
   DeleteRecord();
  
  ClearToQuery();
  SetSearchSpec(""Source Num Id"", strAssocStartId);
  ExecuteQuery();
  while(FirstRecord()) {
   if(GetFieldValue(""Source Num Id"") != """") {
    strCnctAssNumber     = strCnctAssNumber + "" / "" + GetFieldValue(""Source Number"");
    strCnctAssNumberType = strCnctAssNumberType + "" / "" + GetFieldValue(""Source Number Type"");
   }
   
   strCnctAssNumber     = strCnctAssNumber + "" / "" + GetFieldValue(""Destination Number"");
   strCnctAssNumberType = strCnctAssNumberType + "" / "" + GetFieldValue(""Destination Number Type"");

   ClearToQuery();
   SetSearchSpec(""Parent Ass Id"", GetFieldValue(""Id""));
   ExecuteQuery(ForwardOnly);
  }
 }
 
//-------------------------------------------------------------------------
//Updating the new concatenated number and number type in concat table
//-------------------------------------------------------------------------
 
 with(bcAssocNumberTypeDisplay) {
  ActivateField(""Associated Number"");
  ActivateField(""Associated Type"");
  
  ClearToQuery();
  SetSearchSpec(""Id"", strConcatId);
  ExecuteQuery(ForwardOnly);
  if(FirstRecord()) {
   SetFieldValue(""Associated Number"",strCnctAssNumber);
   SetFieldValue(""Associated Type"",strCnctAssNumberType);
   WriteRecord();
  }
 }
 with( bcNumberMaster) {
  ActivateField(""Id"");
  ClearToQuery();
  SetSearchSpec(""Assoc Start Id"",strAssocStartId);
  ExecuteQuery(ForwardOnly);
  blnIsRecord = FirstRecord();
  var intCnt = 0;
  while(blnIsRecord) {
   strNumber[intCnt++] = GetFieldValue(""Id"");
   blnIsRecord = NextRecord();
  }
 }
 
 ChangeNumberStatus(Inputs.GetProperty(""Source""),bcNumberMaster,bcNumberScheme,IsSIMTwiceAssociated(bcNumberMasterConcat,strAssocStartId),strNumber,Inputs)
}
"/**************************************************************************************
* Name          : RMS RMS Deassociation Method                     * 
* Author        : Mahindra British Telecom                                            *
* Description   : Partial DeAssociate Code File                            *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003 1.0     MBT   Created       01/11/2003                          *
**************************************************************************************/
function PartialDeassociation(Inputs,bcNumberMaster,bcAssocNumberTypeDisplay,bcNumberAssocDetail,bcNumberAssocMasterConcat,bcNumberMasterConcat,bcNumberScheme,bcNumberAssignedDetail)
{
 var strMSISDNNumber;
 var strMSISDNId;
 var strAssocStartId;
 var strConcatId;
 var strSearchExpr;
 var strAssNumber = new Array();
 var strAssNumberType = new Array();
 var strCnctAssNumber = """";
 var strCnctAssNumberType = """"; 
 var strNumberString;
 var intRecCnt=0;
 var intConcatId;
 var blnIsRecord;
 var strStatus;
 var strSource;
 var strErrVal = """";
 var strAssocMstrId = """";
 var blnIsSIMTwiceAssociated = ""N"";
 
 strMSISDNNumber  = Inputs.GetProperty(""MSISDN Number"");
  strSource        = Inputs.GetProperty(""Source"");

//-------------------------------------------------------------------------------
// Query Number Master to validate the MSISDN or SIM Number .If SIM Number then 
// querying the number Master to fetch MSISDn number Number using 'Assoc Start Id'
// and then taking the values 'Id' of MSISDN number and 'Assoc Start Id'.
//-------------------------------------------------------------------------------


  with(bcNumberMaster) {
  ActivateField(""Assoc Start Id"");
  ActivateField(""Type Identifier"");
  ActivateField(""Is Associated"");
  ClearToQuery()
  SetSearchSpec(""Number String"",strMSISDNNumber);
  ExecuteQuery();
  if(FirstRecord()) {
   if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"")) {
    strAssocStartId = GetFieldValue(""Assoc Start Id"");
    strSearchExpr = ""[Assoc Start Id] = '""+ strAssocStartId +""' AND [Type Identifier] = '""+ TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"") +""'"";
    ClearToQuery()
    SetSearchExpr(strSearchExpr);
    ExecuteQuery();
    if(FirstRecord()){
     strMSISDNId = GetFieldValue(""Id"");
    }
    else{
     strErrVal = ""RMSDA001""
     return(strErrVal);
    }
   }
   else{ 
    var test =  GetFieldValue(""Is Associated"");
    var test2 = GetFieldValue(""Type Identifier"");
    var test3 = TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"");
    
    if(GetFieldValue(""Type Identifier"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")) {
     strErrVal = ""RMSDA001"";
     return(strErrVal);
    }
    if(GetFieldValue(""Is Associated"") != ""Y"") {
     strErrVal = ""RMSDA002"";
     return(strErrVal);
    }
    strMSISDNId = GetFieldValue(""Id"");
    strAssocStartId = GetFieldValue(""Assoc Start Id"");
   }
  }
  else {
   strErrVal = ""RMSDA001"";
   return(strErrVal);
  }
  }
  
//-------------------------------------------------------------------
//Locate the record in Number Mstr-Concat table and delete the record.
//-------------------------------------------------------------------

 with(bcNumberMasterConcat) {

  ActivateField(""Number Id"");
  ActivateField(""Concat Id"");
  
  IsSIMTwiceAssociated(blnIsSIMTwiceAssociated,bcNumberMasterConcat,strAssocStartId);
  
  ClearToQuery();
  SetSearchSpec(""Number Id"",strMSISDNId);
  ExecuteQuery();
  
  if(FirstRecord())
   intConcatId = GetFieldValue(""Concat Id"");
 
  ClearToQuery();
  SetSearchSpec(""Concat Id"",intConcatId);
  ExecuteQuery();
     blnIsRecord = FirstRecord();

//-----------------------------------------------------------------------------
//Delete the records from Number Master concat having the concat id same as the
//concat id of the input number.
//-----------------------------------------------------------------------------

  while(blnIsRecord){
   strAssNumber[intRecCnt++] = GetFieldValue(""Number Id"");
      blnIsRecord = NextRecord();
  }
    
  ClearToQuery();
  SetSearchSpec(""Number Id"",strMSISDNId);
  ExecuteQuery();
     blnIsRecord = FirstRecord();
     
     if(FirstRecord()) {
      strConcatId = GetFieldValue(""Concat Id"");
      DeleteRecord();
     }
 }

//-------------------------------------------------------------------------
//Locate the record in Association detai and delete the record.Then rebuild 
//the Concatenated number and update the concate table.
//-------------------------------------------------------------------------

 if(Inputs.GetProperty(""GenLevel"") != """")
  var strConcatId = GetConcatId(bcNumberMaster,Inputs.GetProperty(""GenLevel""),bcNumberAssocMasterConcat,strAssocStartId,bcNumberMasterConcat);
  
 with(bcNumberAssocDetail) {
  ActivateField(""Association Id"");
  ActivateField(""Association Seq Num"");
  ActivateField(""Destination Num Id"");
  ActivateField(""Number Association Concat Id"");
  ActivateField(""Source Num Id"");
  ActivateField(""Source Number"");
  ActivateField(""Destination Number"");
  ActivateField(""Source Number Type"");
  ActivateField(""Destination Number Type"");
  ActivateField(""Row Id"");
  ActivateField(""Parent Ass Id"");
  
  ClearToQuery();
  SetSearchSpec(""Destination Num Id"", strMSISDNId);
  ExecuteQuery();
  if(FirstRecord()) 
   DeleteRecord();
  
  ClearToQuery();
  SetSearchSpec(""Source Num Id"", strAssocStartId);
  if(strConcatId!="""") 
   SetSearchSpec(""Number Association Concat Id"",strConcatId);
  ExecuteQuery();
  if(FirstRecord()) {
   strAssocMstrId = GetFieldValue(""Association Id"");
  }
  
  while(FirstRecord()) {
   if(GetFieldValue(""Source Num Id"") != """") {
    strCnctAssNumber     = strCnctAssNumber + GetFieldValue(""Source Number"");
    strCnctAssNumberType = strCnctAssNumberType + GetFieldValue(""Source Number Type"");
   }
   
   strCnctAssNumber     = strCnctAssNumber + "" / "" +GetFieldValue(""Destination Number"");
   strCnctAssNumberType = strCnctAssNumberType + "" / "" + GetFieldValue(""Destination Number Type"");

   ClearToQuery();
   SetSearchSpec(""Parent Ass Id"", GetFieldValue(""Id""));
   ExecuteQuery();
  }
  
  if(FirstRecord()) {
   strAssocMstrId = GetFieldValue(""Association Id"");
  }
 }
 
//-------------------------------------------------------------------------
//Updating the new concatenated number and number type in concat table
//-------------------------------------------------------------------------
 
 with(bcAssocNumberTypeDisplay) {
  ActivateField(""Associated Number"");
  ActivateField(""Associated Type"");
  ClearToQuery();
  SetSearchSpec(""Id"", strConcatId);
  ExecuteQuery();
  if(FirstRecord()) {
   SetFieldValue(""Associated Number"",strCnctAssNumber);
   SetFieldValue(""Associated Type"",strCnctAssNumberType);
   WriteRecord();
  }
 }

 // this will be useful in future. This is not required now as in association the start numbers
 //are constrained based on status and not on Flag value
  if(strAssocMstrId != """") {
   with(bcNumberAssocMasterConcat) {
    ActivateField(""Flag"");
    ClearToQuery();
    SetSearchSpec(""Association Id"",strAssocMstrId);
    SetSearchSpec(""Concat Id"",strConcatId);
    ExecuteQuery(ForwardOnly);
    
    if(FirstRecord()) {
     SetFieldValue(""Flag"",""N"");
     WriteRecord();
    }
   }
  }
  ChangeNumberStatus(Inputs.GetProperty(""Source""),bcNumberMaster,bcNumberScheme,blnIsSIMTwiceAssociated,strAssNumber,Inputs,bcNumberAssignedDetail);  
  return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS RMS De-Association                      * 
* Author        : Mahindra British Telecom                                            *
* Description   : Service_PreInvokeMethod                *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Ver     By       Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/10/2003  1.0    MBT      Created       29/10/2003      *
20060711       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
 var psInputs = TheApplication().NewPropertySet();
 var psOutputs = TheApplication().NewPropertySet();
 var intReturn  = ContinueOperation; 
 var strErrVal  = """";
 var bsSIMNMRef;
 var blnIsPartial;
 try
 {
  var boNumberAssociation       = TheApplication().GetBusObject(""RMS NM Number Association"");
  var bcAssocNumberTypeDisplay  = boNumberAssociation.GetBusComp(""RMS NM Association Number Type Display"");
  var bcNumberAssocDetail       = boNumberAssociation.GetBusComp(""RMS NM Number Association Detail"");
  var bcNumberAssocMasterConcat = boNumberAssociation.GetBusComp(""RMS NM Number Association Master Concat"");
  var bcNumberMasterConcat      = boNumberAssociation.GetBusComp(""RMS NM Number Master Concat"");

  var boNumberEnquiry     = TheApplication().GetBusObject(""RMS NM Number Enquiry""); 
  var bcNumberMaster            = boNumberEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
  var bcNumberAssignedDetail    = boNumberEnquiry.GetBusComp(""RMS NM Number Assigned Details"");
  
  var boNumberScheme     = TheApplication().GetBusObject(""RMS NM Number Scheme"");
  var bcNumberScheme     = boNumberScheme.GetBusComp(""RMS NM Number Scheme"");

  Outputs.SetProperty(""ErrCode"","""");
  Outputs.SetProperty(""ErrMessage"","""");
              
  switch(MethodName){
  
   case ""DeAssociate"":
     
    intReturn = CancelOperation;
    blnIsPartial = Inputs.GetProperty(""Partial(Y/N)"");
    if(blnIsPartial == ""N"") {
     //strErrVal = DeAssociate(Inputs,bcNumberMaster,bcAssocNumberTypeDisplay,bcNumberAssocDetail,bcNumberAssocMasterConcat,bcNumberMasterConcat,bcNumberScheme,bcNumberAssignedDetail);
     strErrVal = DeAssociate(Inputs,bcNumberMaster,bcAssocNumberTypeDisplay,bcNumberAssocDetail,bcNumberAssocMasterConcat,bcNumberMasterConcat,bcNumberScheme,bcNumberAssignedDetail);
     TheApplication().RaiseError(strErrVal);     
    }
    else if(blnIsPartial == ""Y"") {
     strErrVal = PartialDeassociation(Inputs,bcNumberMaster,bcAssocNumberTypeDisplay,bcNumberAssocDetail,bcNumberAssocMasterConcat,bcNumberMasterConcat,bcNumberScheme,bcNumberAssignedDetail);
     Outputs.SetProperty(""ErrCode"",strErrVal);
     if(strErrVal != """")
      Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",strErrVal));     
     
    }

   break;
   
  }
 }
 
 catch(e)
 {
  Outputs.SetProperty(""ErrCode"",e.errCode);
  Outputs.SetProperty(""ErrMessage"",e.errText);
  throw(e);
 }
 finally
 {
//1.1 below
  bcAssocNumberTypeDisplay   = null;
  bcNumberAssocDetail        = null;
  bcNumberAssocMasterConcat  = null;
  bcNumberMasterConcat       = null;
  boNumberAssociation        = null;

  bcNumberScheme      = null;
  boNumberScheme      = null;

  bcNumberMaster             = null;
  bcNumberAssignedDetail      = null;
  boNumberEnquiry             = null;

  psInputs     = null;
  psOutputs     = null;
//1.1 above
 }
 return(intReturn); 
}
"/**************************************************************************************
* Name          : Calculate Available Date Function			 	          			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Calculate Available Date                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 1/11/2003		  1.0   	MBT						   	Created       05/11/2003      *
**************************************************************************************/
function CalcAvailableDate(QuarUOM, QuarPeriod, &bcNumberInfo){
	
	var dtSysDate 			= Clib.time();
	var dtSysDateObj 		= Date.fromSystem(dtSysDate);
	
	var dtQuarantineDate 	= bcNumberInfo.GetFieldValue(""Quarantine Date"");
	var dtQuarantineDateObj = new Date(dtQuarantineDate);
 
    switch (QuarUOM) {

  	    case ""Days"": 
			dtQuarantineDateObj.setDate(ToInteger(dtQuarantineDateObj.getDate()) + ToInteger(QuarPeriod));
        	break;
             	
   		case ""Months"": 
			dtQuarantineDateObj.setMonth(ToNumber(ToNumber(dtQuarantineDateObj.getMonth()) + ToNumber(QuarPeriod)));
			break;
		
    	case ""Weeks"":
			dtQuarantineDateObj.setDate(dtQuarantineDateObj.getDate() + (QuarPeriod * 7));
       		break;
   		
   		case ""Year"": 
  			//dtQuarantineDateObj.setFullYear(ToNumber(ToNumber(dtQuarantineDateObj.getFullYear()) + ToNumber(QuarPeriod)));
  			
  			var year = ToNumber(dtQuarantineDateObj.getFullYear()) + ToNumber(QuarPeriod);
			var month = ToNumber(dtQuarantineDateObj.getMonth());
			var date = ToInteger(dtQuarantineDateObj.getDate());
		    dtQuarantineDateObj.setFullYear(year,month,date);
  			
  			//dtQuarantineDateObj.setFullYear(ToNumber(ToNumber(dtQuarantineDateObj.getFullYear()) + ToNumber(QuarPeriod)));
			break;
   }
   
   return(dtQuarantineDateObj);
}
"/**************************************************************************************
* Name          : Change MSISDN Status Function				 				          * 
* Author        : Mahindra British Telecom                                            *
* Description   : Change MSISDN Status                      					      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/10/2003	1.0   		Mahindra British Telecom   	Created       29/10/2003      *
* 25/09/2005 	1.1   			Raja,MBT	 Modified      			25/09/2005      
* - Disable Update Block count functionality as per the new requirement	
**************************************************************************************/

function ChangeMSISDNStatus(bcNumberInfo,bcNumberScheme,stRMSISDNId,strBlockId,strCurrStatus,strToStatus,strType,strNumber){

	var dtQuarantineDateObj;
	//Raja, MBT - Disable Update Block count
/*	var bsBlkCount;
	
	var psInputs = TheApplication().NewPropertySet();
	var psOutputs = TheApplication().NewPropertySet();*/
	//1.2
	var sAssocStartId	= """";
	var sPreActivationId = """";
	
	//1.2
	
	var blnIsRecord;
	
	with(bcNumberInfo){
		ActivateField(""Scheme Id"");
		ActivateField(""Quarantine Date"");
		ActivateField(""Allocation Id"");		
		ActivateField(""Reserve Id"");
		ActivateField(""Reservation End Date"");
		ActivateField(""Reserved To"");
		ActivateField(""Record Blocking Date"");
		ActivateField(""Record Blocked For"");
		ActivateField(""Assigned Id"");
		ActivateField(""Assigned Date"");
		ActivateField(""Available Date"");
		ActivateField(""Status"");
		ActivateField(""Status Date"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Is Associated"");
		ActivateField(""Available Date"");
		ActivateField(""Current Date"");
		ActivateField(""Status Bfr Assoc"");
		ActivateField(""Disconnect Type"");
		ActivateField(""Sales Code"");
		ActivateField(""Using Type"");
		ActivateField(""Artwork Id"");
		ActivateField(""Dlr Allocated To"");
		ActivateField(""PreActivationId"");

		ClearToQuery();
		SetSearchSpec(""Id"",stRMSISDNId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
		
		while(blnIsRecord){
			sAssocStartId = GetFieldValue(""Assoc Start Id"");
			sPreActivationId = GetFieldValue(""PreActivationId"");
			SetFieldValue(""Status"",strToStatus);
			SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
			SetFieldValue(""Assoc Start Id"","""");
			SetFieldValue(""Status Bfr Assoc"","""");
			SetFieldValue(""Is Associated"",""N"");
		//1.2	
			if(strToStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE"")){
					if(GetFieldValue(""PreActivationId"") != """")
						SetFieldValue(""PreActivationId"","""");
					SetFieldValue(""Quarantine Date"","""");
					SetFieldValue(""Available Date"","""");
					SetFieldValue(""Disconnect Type"","""");
					SetFieldValue(""Sales Code"","""");
					SetFieldValue(""Allocation Id"","""");		
					SetFieldValue(""Reserve Id"","""");
					SetFieldValue(""Reserved To"","""");
					SetFieldValue(""Record Blocking Date"","""");
					SetFieldValue(""Record Blocked For"","""");
					SetFieldValue(""Assigned Id"","""");
					SetFieldValue(""Assigned Date"","""");
					SetFieldValue(""Using Type"","""");
					SetFieldValue(""Reservation End Date"","""");	
					SetFieldValue(""Artwork Id"","""");
					SetFieldValue(""Dlr Allocated To"","""");

			}
			//1.2
			if(strToStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE"")){
				SetFieldValue(""Quarantine Date"",GetFieldValue(""Current Date""));
				SetFieldValue(""Allocation Id"","""");		
				SetFieldValue(""Reserve Id"","""");
				SetFieldValue(""Reserved To"","""");
				SetFieldValue(""Record Blocking Date"","""");
				SetFieldValue(""Record Blocked For"","""");
				SetFieldValue(""Assigned Id"","""");
				SetFieldValue(""Assigned Date"","""");
				SetFieldValue(""Dlr Allocated To"","""");
				if(GetFieldValue(""PreActivationId"") != """")
					SetFieldValue(""PreActivationId"","""");
								
				with(bcNumberScheme) {
					ActivateField(""Quarantine UOM"");
					ActivateField(""Quarantine Period"");
					ClearToQuery();
					SetSearchSpec(""Id"", bcNumberInfo.GetFieldValue(""Scheme Id""));
					ExecuteQuery();
					if(FirstRecord()){ 
						dtQuarantineDateObj = CalcAvailableDate(GetFieldValue(""Quarantine UOM""), GetFieldValue(""Quarantine Period""), bcNumberInfo);
						bcNumberInfo.SetFieldValue(""Available Date"",DateToString(dtQuarantineDateObj));
//below 1.1
						bcNumberInfo.WriteRecord();
//above 1.1
					}
				}
			
			}
			
			if((strCurrStatus == TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE""))
										&&
				(strToStatus != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE""))){
					if(GetFieldValue(""PreActivationId"") != """")
						SetFieldValue(""PreActivationId"","""");
					SetFieldValue(""Quarantine Date"","""");
					SetFieldValue(""Available Date"","""");
					SetFieldValue(""Disconnect Type"","""");
					SetFieldValue(""Sales Code"","""");
					SetFieldValue(""Allocation Id"","""");		
					SetFieldValue(""Reserve Id"","""");
					SetFieldValue(""Reserved To"","""");
					SetFieldValue(""Record Blocking Date"","""");
					SetFieldValue(""Record Blocked For"","""");
					SetFieldValue(""Assigned Id"","""");
					SetFieldValue(""Assigned Date"","""");
					SetFieldValue(""Using Type"","""");
					SetFieldValue(""Reservation End Date"","""");	
					SetFieldValue(""Artwork Id"","""");
					SetFieldValue(""Dlr Allocated To"","""");
			}									
			
			WriteRecord();
		//Raja, MBT - Disable Update Block count
		/*	psInputs.SetProperty(""From Status"",GetFieldValue(""Status""));
			psInputs.SetProperty(""To Status"",strToStatus);
			psInputs.SetProperty(""Object Id"",strBlockId);
							
			bsBlkCount = TheApplication().GetService(""RMS RMS Block Calc"");							
			bsBlkCount.InvokeMethod(""UpdateNumberBlock"",psInputs,psOutputs);*/
			blnIsRecord = NextRecord();
		}
		//1.2
		if(FirstRecord() && sAssocStartId != """" && sPreActivationId != """") {
			ActivateField(""PreActivationId"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",sAssocStartId);
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();
			while(blnIsRecord) {
				if(GetFieldValue(""PreActivationId"") != """") {
					SetFieldValue(""PreActivationId"","""");
				}
				WriteRecord();
				blnIsRecord = NextRecord();
			}
			
		}
		//1.2
	}
//Raja, MBT - Disable Update Block count	
/*	psInputs	= null;	
	psOutputs	= null;
	bsBlkCount	= null;*/
}
"/* Name          : RMS NM Association Rule Service PreInvoke Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Change Number status as per the source.                            		  			  *
*
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 01/12/2003	 1.0   		 MBT						 Created      01/12/2003      *
**************************************************************************************/
function ChangeNumberStatus(strSource,bcNumberMaster,bcNumberScheme,blnIsSIMTwiceAssociated,blnNumExists,strNumber,Inputs)
{
	var intArrLen = 0;
	var dtQuarantineDateObj;
	var bsNumberBlock;
	var strSource;
	var strPrevSts;
	var strTypeIdentifier;
	var strToStatus;
	var strCurrStatus;
	var strSIMType  = TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"");
	var strIMSIType = TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"");
	var strMSISDNType= TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"");
	
	var psInputs  = TheApplication().NewPropertySet();
	var psOutputs = TheApplication().NewPropertySet();

	strTypeIdentifier = Inputs.GetProperty(""Type Identifier"");
	strToStatus 	  = Inputs.GetProperty(""To Status"");
	strCurrStatus     = Inputs.GetProperty(""Current Status"");
	
	
		
//----------------------------------------------------------------------------------------
//Loop through each number in the array, and change the status of the SIM and IMSI Number.
//and MSISDN Number.Status of SIM will be changed only if it is not associated with any 
//other MSISDN number
//----------------------------------------------------------------------------------------				

			
			
				
			for(intArrLen = 0;intArrLen < strNumber.length;intArrLen++) {

				with(bcNumberMaster){
					ActivateField(""Status"");
					ActivateField(""Block Id"");
					ActivateField(""Type Identifier"");
					ClearToQuery();
					SetSearchSpec(""Id"",strNumber[intArrLen]);
					ExecuteQuery();
					while(FirstRecord()) {
						if(((GetFieldValue(""Type Identifier"") == strSIMType)||(GetFieldValue(""Type Identifier"") == strIMSIType)) && blnIsSIMTwiceAssociated == ""N""){
							if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""ALLOCATED"")){
								SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE""));
								WriteRecord();
							}
							if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""QUARANTINE"")){
								SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""TRASHED""));
								WriteRecord();
							}
							if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""LOST"")){
								SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""TRASHED""));
								WriteRecord();
									}
						}
						
						if(GetFieldValue(""Type Identifier"") == strMSISDNType){
							if(strTypeIdentifier == strSIMType){
								if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""ALLOCATED"")){
									SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE""));
									WriteRecord();
								}
							}
							if(strTypeIdentifier == strMSISDNType){
								if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""ALLOCATED"")){
									SetFieldValue(""Status"",strToStatus);
									WriteRecord();
								}
								if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""AVAILABLE"")){
									SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""NOT AVAILABLE""));
									WriteRecord();
								}
								if(strCurrStatus == TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""LOST"")){
									SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_REDEPLOYMENT_STATUS"", ""NOT AVAILABLE""));
									WriteRecord();
								}
							}
						}
						bsNumberBlock = TheApplication().GetService(""RMS RMS Block Calc"");
						psInputs.SetProperty(""From Status"", strCurrStatus);
						psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
						psInputs.SetProperty(""To Status"",GetFieldValue(""Status""));		
						bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);
					}
				 }
			
					
			}
	
	psInputs		= null;
	psOutputs		= null;
	bsNumberBlock	= null;
}
"/**************************************************************************************
* Name          : RMS RMS Deployment Deassociate Service DateToString Method	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : Date To String Code File                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/10/2003	1.0   		Mahindra British Telecom   	Created       29/10/2003      *
**************************************************************************************/

//-------------------------------------------------------------------------------------
//Gets the 'Date','Month','Hours','Minutes','Second' and appends them to a string.
//-------------------------------------------------------------------------------------

function DateToString (dtCDate)
{
	var dtDatum = ((dtCDate.getMonth() + 1) + ""/"" + dtCDate.getDate() + ""/"" + dtCDate.getFullYear()
	+ "" "" + dtCDate.getHours() + "":"" + dtCDate.getMinutes()+ "":"" + dtCDate.getSeconds());
	return dtDatum;
}
"/**************************************************************************************
* Name          : RMS RMS Deployment Deassociate Service Deassociate Method	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : Function for deassociating numbers               		      		  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/12/2003	1.0   		Mahindra British Telecom   	Created       15/12/2003      *
**************************************************************************************/

function DeAssociate(Inputs,bcNumberMaster,bcAssocNumberTypeDisplay,bcNumberAssocDetail,bcNumberAssocMasterConcat,bcNumberMasterConcat,bcNumberScheme)
{
	try
	{
	
	//var stRMSISDNnumber;
	var strNumberId;
	var intConcatId;
	var strNumber = new Array();
	var strNumberString;
	var intRecCnt=0;
	
	var blnIsRecord;
	var strStatus;
	var strAssocNumber;
	//var strSource;
	var blnIsSIMTwiceAssociated = ""N"";
	var strErrVal="""";
	
//----------------------------------------
//Get MSISDN as one of the input parameter
//----------------------------------------
	//stRMSISDNnumber  = Inputs.GetProperty(""MSISDN Number"");
 	//strSource	   	 =  Inputs.GetProperty(""Source"");     
 	var stRMSISDNId		 = Inputs.GetProperty(""MSISDN Id"");
	var strAssocStartId  = Inputs.GetProperty(""Assoc Start Id"");
	var strCurrStatus	 = Inputs.GetProperty(""Current Status"");
	var strToStatus		 = Inputs.GetProperty(""To Status"");
	var strBlockId		 = Inputs.GetProperty(""Block Id"");
	var strType			 = Inputs.GetProperty(""Type"");

//---------------------------------------------------------------
//Using MSISDN Number to Get Assoc Start ID from Number Master BC
//---------------------------------------------------------------
    		
	with(bcNumberMaster) {
		
		ActivateField(""Assoc Start Id"");
		ActivateField(""Number"");
		ActivateField(""Number String"");
		ActivateField(""Is Associated"");
		ClearToQuery();
		SetSearchSpec(""Id"",stRMSISDNId);
		ExecuteQuery();
		if(FirstRecord()) {
			if(GetFieldValue(""Is Associated"") != ""Y"") {
				strErrVal = ""RMSDA001"";
				return(strErrVal);
			}
			strAssocStartId =GetFieldValue(""Assoc Start Id"");
			strNumberId     =GetFieldValue(""Id"");
		}
		else {
			strErrVal = ""RMSDA002"";
			return(strErrVal);
		}
	}
			
//--------------------------------------------------------------------------
//Using Number Id get the Concat Id from Number Master Concat BC.Also check,
//whether SIM is associated with any other MSISDN number.
//--------------------------------------------------------------------------

	with(bcNumberMasterConcat) {
	
		ActivateField(""Number Id"");
		ActivateField(""Concat Id"");
		
		IsSIMTwiceAssociated(blnIsSIMTwiceAssociated,bcNumberMasterConcat,strAssocStartId);
		
		ClearToQuery();
		SetSearchSpec(""Number Id"",strNumberId);
		ExecuteQuery();
		
		if(FirstRecord())
			intConcatId = GetFieldValue(""Concat Id"");
	
		ClearToQuery();
		SetSearchSpec(""Concat Id"", intConcatId);
		ExecuteQuery();

//-----------------------------------------------------------------------------
//Delete the records from Number Master concat having the concat id same as the
//concat id of the input number.
//-----------------------------------------------------------------------------

		while(FirstRecord()){
			strNumber[intRecCnt++] = GetFieldValue(""Number Id"");
			DeleteRecord();
		}
	}
			
	with(bcAssocNumberTypeDisplay) {
		ClearToQuery()
		SetSearchSpec(""Id"",intConcatId);
		ExecuteQuery();
		while(FirstRecord())
			DeleteRecord();
	}

//-----------------------------------------------------------------------------
//Delete the records from Association Detail having the concat id same as the
//concat id of the input number.
//-----------------------------------------------------------------------------

	with(bcNumberAssocDetail){
		ActivateField(""Association Id"");
		ActivateField(""Association Seq Num"");
		ActivateField(""Destination Num Id"");
		ActivateField(""Number Association Concat Id"");
		ActivateField(""Source Num Id"");
		ActivateField(""Row Id"");
		ActivateField(""Parent Ass Id"");
		ClearToQuery();
		SetSearchSpec(""Number Association Concat Id"", intConcatId);
		ExecuteQuery();
		blnIsRecord=FirstRecord();
		while(FirstRecord())
			DeleteRecord();
	}

//----------------------------------------------------------------------------------
//Delete the records from Association Master concat having the concat id same as the
//concat id of the input number.
//----------------------------------------------------------------------------------
			
	with(bcNumberAssocMasterConcat){
		ActivateField(""Association Id"");
		ActivateField(""Concat Id"");
		ActivateField(""Flag"");
		ClearToQuery();
		SetSearchSpec(""Concat Id"",intConcatId);
		ExecuteQuery();
		blnIsRecord=FirstRecord();
		while(FirstRecord())
			DeleteRecord();
	}

//------------------------------------------------------------------------
//for each number retieved from Number Master Concat BC delete the records
//from the array, if not then leave the records in array.
//------------------------------------------------------------------------
	with(bcNumberMasterConcat){
		ClearToQuery();
		SetSearchSpec(""Number Id"", strNumberId);
		ExecuteQuery();
		blnIsRecord=FirstRecord();
		if(!blnIsRecord)
		strNumber=null;
	}
     //ChangeNumberStatus(strSource,bcNumberMaster,bcNumberScheme,blnIsSIMTwiceAssociated,blnNumExists,Inputs)
	ChangeMSISDNStatus(bcNumberMaster,bcNumberScheme,stRMSISDNId,strBlockId,strCurrStatus,strToStatus,strType,strNumber);
	return(strErrVal);
	}
	catch(e)
	{
	
	strErrVal = e.toString();
	//throw(e.toString());
	return(strErrVal);
	}
	finally
	{
	var test = """";
	}
	
}
"/**************************************************************************************
* Name          : RMS RMS Deployment Deassociate Service IsSIMTwiceAssociated Method * 
* Author        : Mahindra British Telecom                                            *
* Description   : Is SIM Twice Associated	                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0   		MBT  	Created       01/11/2003                          *
**************************************************************************************/
function IsSIMTwiceAssociated(&blnIsSIMTwiceAssociated,bcNumberMasterConcat,strAssocStartId) 
{
	var intRecCnt = 0;
	var blnIsSIMTwiceAssociated = ""N"";

	with(bcNumberMasterConcat) {
		ClearToQuery();
		SetSearchSpec(""Number Id"",strAssocStartId);
		ExecuteQuery();
		var blnIsRecord = FirstRecord();
		while(blnIsRecord) {
			intRecCnt++;
			if(ToInteger(intRecCnt) > 1)
				break;
			blnIsRecord = NextRecord();
		}
		if(ToInteger(intRecCnt) > 1) 
			blnIsSIMTwiceAssociated = ""Y"";
	}
	
	return (blnIsSIMTwiceAssociated);
}
"/**************************************************************************************
* Name          : RMS RMS Deployment Deassociate Service PartialDeassociation Method * 
* Author        : Mahindra British Telecom                                            *
* Description   : Partial DeAssociate Code File                      				  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0   		MBT  	Created       01/11/2003                          *
**************************************************************************************/
function PartialDeassociation(Inputs,bcNumberInfo,bcAssocNumberTypeDisplay,bcNumberAssocDetail,bcNumberAssocMasterConcat,bcNumberMasterConcat,bcNumberScheme){

	var stRMSISDNNumber;
    //var stRMSISDNId;
	//var strAssocStartId;
	var strConcatId;
	var strSearchExpr;
	var strAssNumber = new Array();
	var strAssNumberType = new Array();
	var strCnctAssNumber = """";
	var strCnctAssNumberType = """";	
	var intRecCnt=0;
	var intConcatId;
	var blnIsRecord;
	//var strToStatus;
	//var strCurrStatus;
	var strErrVal = """";
	var blnIsSIMTwiceAssociated = ""N"";
	var strAssocMstrId		= """";
	
    var stRMSISDNId		 = Inputs.GetProperty(""MSISDN Id"");
	var strAssocStartId  = Inputs.GetProperty(""Assoc Start Id"");
	var strCurrStatus	 = Inputs.GetProperty(""Current Status"");
	var strToStatus		 = Inputs.GetProperty(""To Status"");
	var strBlockId		 = Inputs.GetProperty(""Block Id"");
	var strType			 = Inputs.GetProperty(""Type"");
	
//-------------------------------------------------------------------
//Locate the record in Number Mstr-Concat table and delete the record.
//-------------------------------------------------------------------

	with(bcNumberMasterConcat) {

		ActivateField(""Number Id"");
		ActivateField(""Concat Id"");
		
		IsSIMTwiceAssociated(blnIsSIMTwiceAssociated,bcNumberMasterConcat,strAssocStartId);
		
		ClearToQuery();
		SetSearchSpec(""Number Id"",stRMSISDNId);
		ExecuteQuery();
		
		if(FirstRecord())
			intConcatId = GetFieldValue(""Concat Id"");
	
		ClearToQuery();
		SetSearchSpec(""Concat Id"",intConcatId);
		ExecuteQuery();
	    blnIsRecord = FirstRecord();

//-----------------------------------------------------------------------------
//Delete the records from Number Master concat having the concat id same as the
//concat id of the input number.
//-----------------------------------------------------------------------------

		while(blnIsRecord){
			strAssNumber[intRecCnt++] = GetFieldValue(""Number Id"");
		    blnIsRecord = NextRecord();
		}
				
		ClearToQuery();
		SetSearchSpec(""Number Id"",stRMSISDNId);
		ExecuteQuery();
	    blnIsRecord = FirstRecord();
	    
	    if(FirstRecord()) {
		    strConcatId = GetFieldValue(""Concat Id"");
		    DeleteRecord();
	    }
	}

//----------------------------------------------------------------------------
//Locate the record in Association detail and delete the record.Then rebuild 
//the Concatenated number and update the concate table.
//-----------------------------------------------------------------------------
	
 	with(bcNumberAssocDetail) {
		ActivateField(""Association Id"");
		ActivateField(""Association Seq Num"");
		ActivateField(""Destination Num Id"");
		ActivateField(""Number Association Concat Id"");
		ActivateField(""Source Num Id"");
		ActivateField(""Source Number"");
		ActivateField(""Destination Number"");
		ActivateField(""Source Number Type"");
		ActivateField(""Destination Number Type"");
		ActivateField(""Row Id"");
		ActivateField(""Parent Ass Id"");
		
		ClearToQuery();
		SetSearchSpec(""Destination Num Id"", stRMSISDNId);
		ExecuteQuery();
		if(FirstRecord()) {
			DeleteRecord();
		}
		
		ClearToQuery();
		SetSearchSpec(""Source Num Id"", strAssocStartId);
		ExecuteQuery();
		
		if(FirstRecord()) {
				strAssocMstrId = GetFieldValue(""Association Id"");
		}
		
		while(FirstRecord()) {
			if(GetFieldValue(""Source Num Id"") != """") {
				strCnctAssNumber     = strCnctAssNumber + GetFieldValue(""Source Number"");
				strCnctAssNumberType = strCnctAssNumberType + GetFieldValue(""Source Number Type"");
			}
			
			strCnctAssNumber     = strCnctAssNumber + "" / "" +GetFieldValue(""Destination Number"");
			strCnctAssNumberType = strCnctAssNumberType + "" / "" + GetFieldValue(""Destination Number Type"");

			ClearToQuery();
			SetSearchSpec(""Parent Ass Id"", GetFieldValue(""Id""));
			ExecuteQuery();
		}
		if(FirstRecord()) {
			strAssocMstrId = GetFieldValue(""Association Id"");
		}
	}
	
//-------------------------------------------------------------------------
//Updating the new concatenated number and number type in concat table
//-------------------------------------------------------------------------
	
	with(bcAssocNumberTypeDisplay) {
		ActivateField(""Associated Number"");
		ActivateField(""Associated Type"");
		ClearToQuery();
		SetSearchSpec(""Id"", strConcatId);
		ExecuteQuery();
		if(FirstRecord()) {
			SetFieldValue(""Associated Number"",strCnctAssNumber);
			SetFieldValue(""Associated Type"",strCnctAssNumberType);
			WriteRecord();
		}
	}

	// this will be useful in future. This is not required now as in association the start numbers
	//are constrained based on status and not on Flag value
		if(strAssocMstrId != """") {


			with(bcNumberAssocMasterConcat) {
				ActivateField(""Flag"");
				ClearToQuery();
				SetSearchSpec(""Association Id"",strAssocMstrId);
				SetSearchSpec(""Concat Id"",strConcatId);
				ExecuteQuery(ForwardOnly);
				
				if(FirstRecord()) {
					SetFieldValue(""Flag"",""N"");
					WriteRecord();
				}
			}
//------19 jan 2007-------------------------------------------------------
			var mboNumAssocMstrCnct  = TheApplication().GetBusObject(""RMS NM Number Association Service"");
			var mbcNumAssocMstrCnct  = mboNumAssocMstrCnct.GetBusComp(""RMS NM Number Association Master"");
			
			
			 //if(msRuleType == TheApplication().InvokeMethod (""LookupValue"", ""ASS_RULE_TYPE"", ""CHILD"")) 
			 //{
			  with(bcNumberAssocMasterConcat) 
			  {
			   ClearToQuery();
			   SetSearchSpec(""Association Id"",strAssocMstrId);
			   SetSearchSpec(""Flag"",""N"");
			   ExecuteQuery(ForwardOnly);
			  } 
			 //}
			 with(mbcNumAssocMstrCnct) 
			 {
			  if(bcNumberAssocMasterConcat.FirstRecord()) 
			  {
			   ActivateField(""Flag"");
			   ActivateField(""Status"");
			   ClearToQuery();
			   SetSearchSpec(""Id"",strAssocMstrId);
			   SetSearchSpec(""Flag"",""Y"");
			   ExecuteQuery(ForwardOnly);
			   if(FirstRecord()) 
			   {
			    SetFieldValue(""Flag"",""N"");
			    WriteRecord();
			   }
			  }
			 }
			mbcNumAssocMstrCnct	 = null;	
			mboNumAssocMstrCnct  = null;

//------19 jan 2007-------End------------------------------------------------
	}

	ChangeMSISDNStatus(bcNumberInfo,bcNumberScheme,stRMSISDNId,strBlockId,strCurrStatus,strToStatus,strType,strAssNumber);	


  return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS RMS Deployment Deassociate Service DateToString Method	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : Service_PreInvokeMethod										      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/10/2003	1.0   		Mahindra British Telecom   	Created       29/10/2003      *
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var psInputs	= TheApplication().NewPropertySet();
	var psOutputs	= TheApplication().NewPropertySet();
	
	var intReturn 	= ContinueOperation;	
	
	var strErrVal 	= """";
	
	var bsSIMNMRef;
	
	var blnIsPartial;

	try{
		var boNumberAssociation       = TheApplication().GetBusObject(""RMS NM Number Association"");
		var bcNumberInfo 	          = boNumberAssociation.GetBusComp(""RMS NM MSISDN Enquiry"");
		var bcAssocNumberTypeDisplay  = boNumberAssociation.GetBusComp(""RMS NM Association Number Type Display"");
		var bcNumberAssocDetail       = boNumberAssociation.GetBusComp(""RMS NM Number Association Detail"");
		var bcNumberAssocMasterConcat = boNumberAssociation.GetBusComp(""RMS NM Number Association Master Concat"");
		var bcNumberMasterConcat      =	boNumberAssociation.GetBusComp(""RMS NM Number Master Concat"");
		
		var boNumberScheme			  = TheApplication().GetBusObject(""RMS NM Number Scheme"");
		var bcNumberScheme			  = boNumberScheme.GetBusComp(""RMS NM Number Scheme"");

		Outputs.SetProperty(""ErrCode"","""");
		Outputs.SetProperty(""ErrMessage"","""");
													
		switch(MethodName){
		
			case ""DeAssociate"":
					
				intReturn = CancelOperation;
				blnIsPartial = Inputs.GetProperty(""Partial(Y/N)"");
				if(blnIsPartial == ""N"") {
					strErrVal = DeAssociate(Inputs,bcNumberInfo,bcAssocNumberTypeDisplay,bcNumberAssocDetail,bcNumberAssocMasterConcat,bcNumberMasterConcat,bcNumberScheme);
					TheApplication().RaiseError(strErrVal);					
				}
				else if(blnIsPartial == ""Y"") {
					strErrVal = PartialDeassociation(Inputs,bcNumberInfo,bcAssocNumberTypeDisplay,bcNumberAssocDetail,bcNumberAssocMasterConcat,bcNumberMasterConcat,bcNumberScheme);
					Outputs.SetProperty(""ErrCode"",strErrVal);
					if(strErrVal != """")
						Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",strErrVal));					
					
				}

			break;
			
		}
		
		
	}catch(e){

		bcNumberInfo	          = null;
		boNumberAssociation       = null;
		bcAssocNumberTypeDisplay  = null;
		bcNumberAssocDetail       = null;
		bcNumberAssocMasterConcat = null;
		bcNumberMasterConcat      =	null;
		boNumberScheme			  = null;
		bcNumberScheme			  = null;
		
		throw(e.toString());
	} finally {
		bcNumberInfo	 	      = null;
		boNumberAssociation       = null;
		bcAssocNumberTypeDisplay  = null;
		bcNumberAssocDetail       = null;
		bcNumberAssocMasterConcat = null;
		bcNumberMasterConcat      =	null;
		bcNumberScheme			  = null;
		boNumberScheme			  = null;
		
		psInputs					= null;
		psOutputs					= null;
	} 
	return(intReturn);	
}
"/**************************************************************************************
* Name          : RMS RMS Get Associated Numbers Service GetAssociatedNum  Method	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : GetAssociatedNum Method                      		      		      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy    Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
10/06/2004	1.0   		MBT          Created       15/10/2004      *
20060707	1.1		Ramakrishna  Corrected wrong PUK1 to PUK2
20190103	1.2		NAVIN: Modified script to check null values for ""Assoc Start Id""
**************************************************************************************/
function GetAssociatedNum(&Inputs,&Outputs)
{
	var msAssocStartId 	= """", blnIsRecord = false, msSearchNum = """";
	var msErrCode = """";
	
	var boNumEnquiry 	= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumEnquiry 	= boNumEnquiry.GetBusComp(""RMS NM Number Enquiry"");
	
	var boSIMNumber 	= TheApplication().GetBusObject(""RMS SIM Number"");
	var bcSIMPprItem 	= boSIMNumber.GetBusComp(""RMS SIM Number Paper Item"");
	var msIMSIRTypeId	= GetSysPref(""RMS_IMSIR_SRCH_ID"");
	var msTypeId = """", msIMSIId	= """", msIMSI = """", msIMSIRId = """", msIMSIR = """";
	var msSupplierName  = """";//MANUJ: New SIM Card Vendor

	msSearchNum = Inputs.GetProperty(""Search Number""); //[NAVIN:03Jan2019:SIM/IMSI NULL CHECK]
	Outputs.SetProperty(""ICCID_ID"","""");
	Outputs.SetProperty(""IMSI_ID"","""");
	Outputs.SetProperty(""IMSIR_ID"","""");
	Outputs.SetProperty(""MSISDN_ID"","""");
	Outputs.SetProperty(""PIN1_ID"","""");
	Outputs.SetProperty(""PIN2_ID"","""");
	Outputs.SetProperty(""PUK1_ID"","""");
	Outputs.SetProperty(""PUK2_ID"","""");
	
	Outputs.SetProperty(""ICCID"","""");
	Outputs.SetProperty(""IMSI"","""");
	Outputs.SetProperty(""IMSIR"","""");
	Outputs.SetProperty(""MSISDN"","""");
	Outputs.SetProperty(""PIN1"","""");
	Outputs.SetProperty(""PIN2"","""");
	Outputs.SetProperty(""PUK1"","""");
	Outputs.SetProperty(""PUK2"","""");
	Outputs.SetProperty(""KI"","""");
	Outputs.SetProperty(""Supplier"","""");//MANUJ: New SIM Card Vendor
	if (msSearchNum != null && msSearchNum != """") //[NAVIN:03Jan2019:SIM/IMSI NULL CHECK]
	{
		with(bcNumEnquiry) {
			ActivateField(""Assoc Start Id"");
			ActivateField(""Number String without Delimiter"");
			ActivateField(""CheckSum1"");
			ActivateField(""CheckSum2"");
			ActivateField(""Calc Number String"");
			ActivateField(""Id"");
			ActivateField(""Number String"");
			ActivateField(""Type Id"");
			//MANUJ Added: New SIM Card Vendor
			ActivateField(""Supplier Name"");
			ClearToQuery();
			//SetSearchSpec(""Calc Number String"",Inputs.GetProperty(""Search Number""));
			SetSearchSpec(""Num Mstr Number String"", msSearchNum);
			ExecuteQuery(ForwardOnly);
			
			if(bcNumEnquiry.FirstRecord()) 
			{
				msAssocStartId = GetFieldValue(""Assoc Start Id"");
				
				if (msAssocStartId != null && msAssocStartId != """"){//[NAVIN:03Jan2019:SIM/IMSI NULL CHECK]
					ClearToQuery();
					SetSearchSpec(""Assoc Start Id"", msAssocStartId);
					ExecuteQuery(ForwardOnly);
					blnIsRecord = FirstRecord();
				}
				else {//[NAVIN:03Jan2019:SIM/IMSI NULL CHECK]
					msErrCode = ""ERROR"";
				}
			} 
			else
				msErrCode = ""ERROR"";
		}
	}
	else {
		msErrCode = ""ERROR"";
	}
	
	if(blnIsRecord)
	{
		while(blnIsRecord) 
		{
			msTypeId = bcNumEnquiry.GetFieldValue(""Type Id"");
			var RecId = bcNumEnquiry.GetFieldValue(""Id"");
			if(bcNumEnquiry.GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""SIM"")) 
			{
				Outputs.SetProperty(""Supplier"",bcNumEnquiry.GetFieldValue(""Supplier Name""));//MANUJ Added: New SIM Card Vendor
				Outputs.SetProperty(""ICCID_ID"",bcNumEnquiry.GetFieldValue(""Id""));
				Outputs.SetProperty(""ICCID"",bcNumEnquiry.GetFieldValue(""Number String""));
			} else if (bcNumEnquiry.GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""IMSI"")) 
			{	
				if(msTypeId == msIMSIRTypeId) {
					if(msIMSIR == """") {
						msIMSIRId 	= bcNumEnquiry.GetFieldValue(""Id"");
						msIMSIR		= bcNumEnquiry.GetFieldValue(""Number String"");
						Outputs.SetProperty(""IMSIR_ID"",msIMSIRId);
						Outputs.SetProperty(""IMSIR"",msIMSIR);
					} else {
						msIMSIRId 	= msIMSIRId + ""/"" + bcNumEnquiry.GetFieldValue(""Id"");
						msIMSIR		= msIMSIR + ""/"" + bcNumEnquiry.GetFieldValue(""Number String"");
						Outputs.SetProperty(""IMSIR_ID"",msIMSIRId);
						Outputs.SetProperty(""IMSIR"",msIMSIR);
					}
				} else {
						if(msIMSI == """") {
							msIMSIId 	= bcNumEnquiry.GetFieldValue(""Id"");
							msIMSI		= bcNumEnquiry.GetFieldValue(""Number String"");
							Outputs.SetProperty(""IMSI_ID"",msIMSIId);
							Outputs.SetProperty(""IMSI"",msIMSI);
						} else {
							msIMSIId 	= msIMSIId + ""/"" + bcNumEnquiry.GetFieldValue(""Id"");
							msIMSI		= msIMSI + ""/"" + bcNumEnquiry.GetFieldValue(""Number String"");
							Outputs.SetProperty(""IMSI_ID"",msIMSIId);
							Outputs.SetProperty(""IMSI"",msIMSI);
						}
				}
			} else if (bcNumEnquiry.GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""MSISDN"")) 
			{
				Outputs.SetProperty(""MSISDN_ID"",bcNumEnquiry.GetFieldValue(""Id""));
				Outputs.SetProperty(""MSISDN"",bcNumEnquiry.GetFieldValue(""Number String""));
			}
			blnIsRecord = bcNumEnquiry.NextRecord();
		}//end of while(blnIsRecord)
		
		with(bcSIMPprItem) {
			ActivateField(""Paper Item Value"");
			ActivateField(""Paper Item Id"");
			ActivateField(""Paper Item"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",msAssocStartId);
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();
			
			while(blnIsRecord) {

				if(GetFieldValue(""Paper Item"") == TheApplication().InvokeMethod(""LookupValue"",""RMS_PAPER_ITEM"",""PIN1"")) {
					Outputs.SetProperty(""PIN1_ID"",GetFieldValue(""Id""));
					Outputs.SetProperty(""PIN1"",GetFieldValue(""Paper Item Value""));
				}
				else if(GetFieldValue(""Paper Item"") == TheApplication().InvokeMethod(""LookupValue"",""RMS_PAPER_ITEM"",""PIN2"")) {
					Outputs.SetProperty(""PIN2_ID"",GetFieldValue(""Id""));
					Outputs.SetProperty(""PIN2"",GetFieldValue(""Paper Item Value""));
				}
				else if(GetFieldValue(""Paper Item"") == TheApplication().InvokeMethod(""LookupValue"",""RMS_PAPER_ITEM"",""PUK1"")) 
				{
					Outputs.SetProperty(""PUK1_ID"",GetFieldValue(""Id""));
					Outputs.SetProperty(""PUK1"",GetFieldValue(""Paper Item Value""));
				}
				else if(GetFieldValue(""Paper Item"") == TheApplication().InvokeMethod(""LookupValue"",""RMS_PAPER_ITEM"",""PUK2"")) 
				{//1.1
					Outputs.SetProperty(""PUK2_ID"",GetFieldValue(""Id""));
					Outputs.SetProperty(""PUK2"",GetFieldValue(""Paper Item Value""));
				}
				else if(GetFieldValue(""Paper Item"") == TheApplication().InvokeMethod(""LookupValue"",""RMS_PAPER_ITEM"",""KI"")) 
				{//1.1
					Outputs.SetProperty(""KI"",GetFieldValue(""Paper Item Value""));
				}
				blnIsRecord = NextRecord();
			}//end of while(blnIsRecord) {
		}//end of with(bcSIMPprItem)
	}//end of if(blnIsRecord)
	
	if(msErrCode != """") {
		Outputs.SetProperty(""ICCID_ID"","""");
		Outputs.SetProperty(""IMSI_ID"","""");
		Outputs.SetProperty(""IMSIR_ID"","""");
		Outputs.SetProperty(""MSISDN_ID"","""");
		Outputs.SetProperty(""PIN1_ID"","""");
		Outputs.SetProperty(""PIN2_ID"","""");
		Outputs.SetProperty(""PUK1_ID"","""");
		Outputs.SetProperty(""PUK2_ID"","""");
		
		Outputs.SetProperty(""ICCID"","""");
		Outputs.SetProperty(""IMSI"","""");
		Outputs.SetProperty(""IMSIR"","""");
		Outputs.SetProperty(""MSISDN"","""");
		Outputs.SetProperty(""PIN1"","""");
		Outputs.SetProperty(""PIN2"","""");
		Outputs.SetProperty(""PUK1"","""");
		Outputs.SetProperty(""PUK2"","""");
		Outputs.SetProperty(""KI"","""");
	}
	
	bcNumEnquiry = null;
	boNumEnquiry = null;
	bcSIMPprItem = null;
	boSIMNumber  = null;
	
}
function GetSysPref(strPref)
{
	var bsSysPref	= TheApplication().GetService(""TECHM BS IF COMMON"");
	var psInp		= TheApplication().NewPropertySet();
	var psOut		= TheApplication().NewPropertySet();
	
	psInp.SetProperty(strPref,"""");
	
	bsSysPref.InvokeMethod(""Get SysPref"",psInp,psOut);
	
	return (psOut.GetProperty(strPref));

}
"/**************************************************************************************
* Name          : RMS RMS Get Associated Numbers Service PreInvoke  Method		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Service PreInvoke Method                      		      		  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/06/2004	1.0   		Mahindra British Telecom   	Created       15/10/2004      *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""GetAssociatedNum"") {
		GetAssociatedNum(Inputs,Outputs);
		return(CancelOperation);
	} else
		return (ContinueOperation);
}
"/**************************************************************************************
* Name          : RMS RMS GetNumbers Service CalcDate Method					 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Calculate Date                      				      			  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 1/11/2003	1.0   		Mahindra British Telecom   	Created       05/11/2003          *
**************************************************************************************/
function CalcDate(UOM, Period,CurrentDate)
{
	
	var dtQuarantineDateObj = new Date(CurrentDate);
 
    switch (UOM) {

		case ""Minutes"": 
			dtQuarantineDateObj.setMinutes(ToNumber(dtQuarantineDateObj.getMinutes()) + ToNumber(Period));
        	break;
        	
  	    case ""Days"": 
			dtQuarantineDateObj.setDate(ToInteger(dtQuarantineDateObj.getDate()) + ToInteger(Period));
        	break;
             	
   		case ""Months"": 
			dtQuarantineDateObj.setMonth(ToNumber(ToNumber(dtQuarantineDateObj.getMonth()) + ToNumber(Period)));
			break;
		
    	case ""Weeks"":
			dtQuarantineDateObj.setDate(dtQuarantineDateObj.getDate() + (Period * 7));
       		break;
   		
   		case ""Year"": 
  			dtQuarantineDateObj.setFullYear(ToNumber(ToNumber(dtQuarantineDateObj.getFullYear()) + ToNumber(Period)));
			break;
   }
   
   return(DateToString(dtQuarantineDateObj));
}
"/**************************************************************************************
* Name          : RMS RMS GetNumbers Service DateToString Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Convert date object to string representation                    	  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/10/2003	1.0   		Mahindra British Telecom   	Created       29/10/2003      *
**************************************************************************************/

//-------------------------------------------------------------------------------------
//Gets the 'Date','Month','Hours','Minutes','Second' and appends them to a string.
//-------------------------------------------------------------------------------------

function DateToString (intCDate)
{
	var dtDatum = ((intCDate.getMonth() + 1) + ""/"" + intCDate.getDate() + ""/"" + intCDate.getFullYear()
	+ "" "" + intCDate.getHours() + "":"" + intCDate.getMinutes()+ "":"" + intCDate.getSeconds());
	return dtDatum
}
"/**************************************************************************************
* Name          : RMS RMS GetNumbers Service GetContractId Method					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : GetContractId Method                      		      			  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003	1.0   		Mahindra British Telecom   	Created       30/12/2003      *
**************************************************************************************/
function GetContractId(strOldMSISDNNumber,&Outputs)
{
	var boNumberMaster;
	var bcNumberMaster;
	
	var strReturn		= """";
	
	try{
	boNumberMaster = TheApplication().GetBusObject(""RMS NM Number Reservation"");
	bcNumberMaster = boNumberMaster.GetBusComp(""RMS NM Master Rsrv"");
	
	with(bcNumberMaster) {
		ActivateField(""Number String"");
		ActivateField(""Assigned Id"");
		ClearToQuery();
		SetSearchSpec(""Number String"",strOldMSISDNNumber);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord()) 
			strReturn = GetFieldValue(""Assigned Id"");
	}
	} catch(e) {
		if(Outputs.GetProperty(""ErrCode"") == ""0"") {
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrCode"",e.errText);
		}
	
	} finally {
		bcNumberMaster = null;
		boNumberMaster = null;
	}
	
	return(strReturn);
}
"/**************************************************************************************
* Name          : RMS RMS GetNumbers GetDealerCode  Method		 	  			  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Get Dealer Code                      		      		  			  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/06/2004	1.0   		Mahindra British Telecom   	Created       15/10/2004      *
**************************************************************************************/

function GetDealerCode(strDealerType)
{
	var boSysPref;
	var bcSysPref;
	
	var strSysDealerCode	= """";
	var strDealerCode		= """";
	
	var blnIsRecord			= false;
	
	switch(strDealerType) {
		case ""CUS"":
			strSysDealerCode = ""RMS_IVR_CUST_DEALERCODE"";
			break;
		case ""PCU"":
			strSysDealerCode = ""RMS_IVR_PROSP_DEALERCODE"";
			break;
		default:
			break;
	}
	
	if(strSysDealerCode != """") {
		boSysPref = TheApplication().GetBusObject(""System Preferences"");
		bcSysPref = boSysPref.GetBusComp(""System Preferences"");
		
		with(bcSysPref) {
			ActivateField(""Value"");
			ActivateField(""Name"");
		
			ClearToQuery();
			SetSearchSpec(""Name"",strSysDealerCode);
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();	
		
			if(blnIsRecord) {
				strDealerCode = GetFieldValue(""Value"");
			}
		}
	}
	
	bcSysPref		= null;
	boSysPref		= null;
	
	return(strDealerCode);
	
}
"/**************************************************************************************
* Name          : RMS RMS GetNumbers GetDealerQuota  Method		 	  			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Get Dealer Quota                      		      		  		  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/06/2004	1.0   		Mahindra British Telecom   	Created       15/10/2004      *
**************************************************************************************/

function GetDealerQuota(strDealer_Code,strQuotaField,&Outputs) 
{
	/*var boDMS;  // KT21-06-06
	var bcDMS;
	
	//var blnIsQuota = false;
	var intQuota	= 0;
	
	try{
	boDMS			= TheApplication().GetBusObject(""RMS BO DMS"");
	bcDMS			= boDMS.GetBusComp(""RMS VBC DMS"");
	
	with(bcDMS){
		ActivateField(strQuotaField);
		
		ClearToQuery();
		SetSearchSpec(""DEALER_CODE"",strDealer_Code);
		ExecuteQuery(ForwardOnly);
		
		if(FirstRecord()) {
			if(ToInteger(GetFieldValue(strQuotaField)) > 0)
				//blnIsQuota = true;
				intQuota	= GetFieldValue(strQuotaField);
		}
		
	}
	} catch(e) {
		if(Outputs.GetProperty(""Error_Code"") == ""0"") {
			Outputs.SetProperty(""Error_Code"",e.errCode);
			Outputs.SetProperty(""Error_Message"",e.errText);
		}
	} finally {
		bcDMS = null;
		boDMS = null;
	}
	
	//return(blnIsQuota);
	return(intQuota);*/
}
"/**************************************************************************************
* Name          : RMS RMS GetNumbers Get IVR Model Ramdom Number  Method		 	  *  
* Author        : Mahindra British Telecom                                            *
* Description   : Get Random Visibility                          		      		  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/06/2004	1.0   		Mahindra British Telecom   	Created       15/10/2004      *
**************************************************************************************/
function GetIVRModelVisibility(strRandomVisibility,IVR_Model)
{
	var blnRandom 		= false;
	var strRandom		= """";
	var strSubString	= """";
	var intIndexOfIVR 	= 0;
	var intLength		= 0;
	
	if(strRandomVisibility != """") {
		intIndexOfIVR = strRandomVisibility.indexOf(IVR_Model);
		
		
		if(intIndexOfIVR > -1) {
			strSubString = strRandomVisibility.substring(intIndexOfIVR);
			
			if(strSubString.length >= 3) {
				strRandom = strRandomVisibility.charAt(intIndexOfIVR+2);
				
				if(strRandom == ""Y"")
					blnRandom = true;
			}
		}
		
	}
	
	return(blnRandom);
}
"/**************************************************************************************
* Name          : RMS RMS GetNumbers GetMSISDN Method		 	  			  	  	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Query for MSISDN numbers								      		  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/10/2003	1.0   		Mahindra British Telecom   	Created       29/10/2003      *
* 05/07/2005	2.0   		Kadali Srinivas   			Created       			      *
**************************************************************************************/
function GetMSISDN(&bcNumberMaster,&psIVRSet,&Inputs,&Outputs)
{
	
	var dtCurrentDate;
	var blnIsRandom;
	var strRandomVisibility	= """";
	
	var strNumPattern	= Inputs.GetProperty(""Number_Mask"");
	var intRecCnt 		= 0;
	var intNumSetCnt	= 6;
	
	var intRecCnt 		= 0;
	var intSchIdCnt 	= 0;
	var intBlockPeriod	= 0;
	var blnIsRecord		= false;
	var blnIsRandom		= false;
	
	var strSrchExpr 	= """";
	var strDealerCode	= Inputs.GetProperty(""IVR_ID"");
	
	
//---------------------------------------------------------------------
//Query Number Scheme and get the inventories for the IVR model number.
//---------------------------------------------------------------------
	try{
	
/*======================== Ver 2.0 Kadali Srininvas ===================================
/*======================== Commented and left it for later use ==================
	with(bcSysPref) {
		ActivateField(""Value"");
		ActivateField(""Name"");
		
		ClearToQuery();
		SetSearchExpr(""[Name]= '"" +Inputs.GetProperty(""FETCH_PARAMETER"")+""' OR [Name]= 'RMS_IVR_BLOCK_PERIOD_MINUTES'"" + "" OR [Name]= 'RMS_IVR_RANDOM_VISIBILITY'"");
		ExecuteQuery(ForwardOnly);
		blnIsRecord = FirstRecord();
		
		while(blnIsRecord) {
			if(GetFieldValue(""Name"") == Inputs.GetProperty(""FETCH_PARAMETER""))
				intNumSetCnt = ToInteger(GetFieldValue(""Value""));
			else if(GetFieldValue(""Name"") == ""RMS_IVR_BLOCK_PERIOD_MINUTES"") 
				intBlockPeriod	= ToInteger(GetFieldValue(""Value""));
			else if(GetFieldValue(""Name"") == ""RMS_IVR_RANDOM_VISIBILITY"") 
				strRandomVisibility = GetFieldValue(""Value"");
			
			blnIsRecord = NextRecord();
		}
	}
	if(strRandomVisibility != """") 
		blnIsRandom = GetIVRModelVisibility(strRandomVisibility,Inputs.GetProperty(""IVR_Model""));
	
	if((Inputs.GetProperty(""FETCH_PARAMETER"") != ""RMS_IVR_FETCH_SIZE_6"") && (Inputs.GetProperty(""FETCH_PARAMETER"") != ""RMS_IVR_FETCH_SIZE_5C"")) {
	with(bcIVRModelNumber) {
		ActivateField(""Scheme Id"");
		ActivateField(""Current Date"");
		ClearToQuery();
		SetSearchSpec(""IVR Model Number"", Inputs.GetProperty(""IVR_Model""));
		ExecuteQuery(ForwardOnly);
		blnIsRecord = FirstRecord();
		if(!blnIsRecord) {
			Outputs.SetProperty(""Error_Code"",""RMSIVR002"");// There are no inventories defined for this IVr model number.
			Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR002""));
			TheApplication().RaiseErrorText(""EXIT"");
		} else {
			dtCurrentDate	= GetFieldValue(""Current Date"");
		}
		
		while(blnIsRecord) {
			if(intSchIdCnt == 0)
				strSrchExpr = strSrchExpr + "" ([Scheme Id] = '""+	GetFieldValue(""Scheme Id"")+""' OR"";
			else
				strSrchExpr = strSrchExpr + "" [Scheme Id] = '""+	GetFieldValue(""Scheme Id"")+""' OR"";
			intSchIdCnt++;
			blnIsRecord = NextRecord();
		}
		strSrchExpr = strSrchExpr.substring(0,(ToInteger(strSrchExpr.length) - 2));
	}
	}

//--------------------------------------------------------
//Construct the Search Expression and query number master.
//--------------------------------------------------------
	
	//strSrchExpr = strSrchExpr + "" AND (([Calc Blocking Period] > '"" + ToNumber(Clib.rsprintf(""%.4f"",intBlockPeriod/(24*60))) +  ""') OR [Record Blocking Date] IS NULL)"";


	if(Inputs.GetProperty(""FETCH_PARAMETER"") == ""RMS_IVR_FETCH_SIZE_5C"")	{
		strSrchExpr = ""[Type Identifier] = '""+TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")+""' "";
		strSrchExpr += "" AND [Record Blocked For] = '"" + Inputs.GetProperty(""Personal_Id"")+ ""'"";
		strSrchExpr += "" AND [Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED"")+""' AND ([Is Associated] = 'N' OR [Is Associated] IS NULL)"";
		//strSrchExpr += "" AND [Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED"")+""' AND [Is Associated] <> 'Y'"";
		
		//strSrchExpr += "" AND [Reserved To] = '""+ Inputs.GetProperty(""IVR_ID"")+ ""'"";
	} else if (Inputs.GetProperty(""FETCH_PARAMETER"") == ""RMS_IVR_FETCH_SIZE_6"") {
		strSrchExpr = ""[Type Identifier] = '""+TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")+""' "";
		strSrchExpr += "" AND [Reserved To] = '"" + Inputs.GetProperty(""IVR_ID"")+ ""'"";
		strSrchExpr += "" AND [Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED"")+""'"";
		strSrchExpr += "" AND ([Source System] = '""+TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""IVR"")+""' OR [Source System] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_RESERVE_SOURCE"", ""CSR"")+""')"";
	} else {
		if(Inputs.GetProperty(""HLR_ID"") == """") {
			strSrchExpr = strSrchExpr + ""[Type Identifier] = '""+TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")+""' "";
		} else {
			strSrchExpr = strSrchExpr + "" AND [HLR Id] = '""+Inputs.GetProperty(""HLR_ID"")+""' AND [Type Identifier] = '""+TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")+""' "";
		}
		strSrchExpr = strSrchExpr + "" AND [Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"")+""' AND ([Is Associated] = 'N' OR [Is Associated] IS NULL)"";
	
		if(Inputs.GetProperty(""Price"") != """")	{
			strSrchExpr = strSrchExpr + ""AND [Price] = '""+Inputs.GetProperty(""Price"")+""'"";
		}
	
		if(strNumPattern != """")	{
			if(!Clib.isdigit(strNumPattern.charAt(strNumPattern.length - 1)))
				strNumPattern = strNumPattern.substring(0,(strNumPattern.length - 1));
			strSrchExpr = strSrchExpr + ""AND [Number String without Delimiter] LIKE '*""+strNumPattern+""'"";
		}	
	}
	if((Inputs.GetProperty(""FETCH_PARAMETER"") != ""RMS_IVR_FETCH_SIZE_6"") && (Inputs.GetProperty(""FETCH_PARAMETER"") != ""RMS_IVR_FETCH_SIZE_5C"")) {
		if(intBlockPeriod > 0)
			strSrchExpr = strSrchExpr + "" AND (([Record Blocking Date] < '"" + CalcDate(""Minutes"", (0-intBlockPeriod),dtCurrentDate) +  ""') OR [Record Blocking Date] IS NULL)"";
	}
=================================== Ver 2.0 Kadali Srinivas ==================================*/

	strSrchExpr = strSrchExpr + ""[Allocated To] = '"" +  strDealerCode + ""'"";
	strSrchExpr = strSrchExpr + "" AND [Type Identifier] = '""+TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")+""' "";
	strSrchExpr = strSrchExpr + "" AND [Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"")+""' AND ([Is Associated] = 'N' OR [Is Associated] IS NULL)"";
	with(bcNumberMaster) {

		ActivateField(""Number String without Delimiter"");
		ActivateField(""Price"");
		ActivateField(""HLR Id"");
		ActivateField(""Current Date"");
		ActivateField(""Record Blocking Date"");
		ActivateField(""Record Blocked For"");
		ActivateField(""Calc Blocking Period"");
		ActivateField(""Random Number Sequence"");
		
		ClearToQuery();
		SetSearchExpr(strSrchExpr);
		if(blnIsRandom)
			SetSortSpec(""Random Number Sequence(ASCENDING)"");
		ExecuteQuery(ForwardOnly);
		blnIsRecord = FirstRecord();
		
		
		while(blnIsRecord) {
			
			var psIVRSetRec = TheApplication().NewPropertySet();
			psIVRSetRec.SetType(""NumSet"");	
			psIVRSetRec.SetProperty(""MSISDN Number"",GetFieldValue(""Number String without Delimiter""));
			psIVRSetRec.SetProperty(""Price"",GetFieldValue(""Price""));
//			psIVRSetRec.SetProperty(""HLR ID"",GetFieldValue(""HLR Id""));
			psIVRSet.AddChild(psIVRSetRec);		
			
			intRecCnt++;
			SetFieldValue(""Record Blocked For"",strDealerCode);
			SetFieldValue(""Record Blocking Date"",GetFieldValue(""Current Date""));
			if(blnIsRandom)
				SetFieldValue(""Random Number Sequence"",Math.round(Math.random()*100000));
			WriteRecord();
			if(intRecCnt == intNumSetCnt)
				break;
			blnIsRecord = NextRecord();
		}
	}
	
//---------------------------------------------
//Return error message is no numbers are found.
//---------------------------------------------

	if(ToInteger(intRecCnt) == 0) {
		Outputs.SetProperty(""Error_Code"",""RMSIVR001"");
		Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR001""));
		
	}
	
	} catch (e) {
		if(Outputs.GetProperty(""Error_Code"") == ""0"") {
			Outputs.SetProperty(""Error_Code"",e.errCode);
			Outputs.SetProperty(""Error_Message"",e.errText);
		}
	} finally {
	
		psIVRSetRec = null;
		strSrchExpr 	= """";
		strNumPattern	= """";
		strDealerCode	= """";
	}
	return """";
}
"/**************************************************************************************
* Name          : RMS RMS GetNumbers Service PreInvoke Method					 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Service_PreInvokeMethod										      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/10/2003	 1.0    MBT      Created       29/10/2003      *
20060711       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var psInputs;
	var psOutputs;
	var psIVRSet    		= TheApplication().NewPropertySet();
	var intReturn 			= ContinueOperation;	
	var strErrVal 			= """";
// =========================== COMMENTED FOR FUTURE USE Ver 2.0 =============================/	
//moved to declarations section to avoid invinitialization of BC each time get numbers method is invoked
	var boNumberEnquiry;
//var boNumberScheme;
	var bcNumberMaster;
//var boSysPref;
//var bcSysPref;
//var	bcIVRModel;
	psInputs   				= TheApplication().NewPropertySet();
	psOutputs  				= TheApplication().NewPropertySet();
	psIVRSet.SetType(""IVRSet"");
	try
	{
//moved to declarations section to avoid invinitialization of BC each time get numbers method is invoked
//boNumberScheme   	= TheApplication().GetBusObject(""RMS NM Number Scheme"");
//bcIVRModel			= boNumberScheme.GetBusComp(""RMS NM IVR Models"");
//bcNumberMaster 		= boNumberScheme.GetBusComp(""RMS NM IVR Number Master"");
	boNumberEnquiry   	= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNumberMaster 		= boNumberEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	
	//boSysPref			= TheApplication().GetBusObject(""System Preferences"");
	//bcSysPref			= boSysPref.GetBusComp(""System Preferences"");
	
	Outputs.SetProperty(""Error_Code"",""0"");
	Outputs.SetProperty(""Error_Message"","""");
	
	switch(MethodName) {
		case ""GetNumbers_IVR"":
			intReturn = CancelOperation;
//			if(!ValidateRequest(Inputs, Outputs,bcNumberMaster, bcSysPref)) {
//				break;
//			}
			GetMSISDN(bcNumberMaster,psIVRSet,Inputs,Outputs);
			Outputs.AddChild(psIVRSet);
			break;
		
		case ""ValidateReservationQuota"":
			intReturn = CancelOperation;
			Outputs.SetProperty(""IsValid"",""N"");
			
			if(Inputs.GetProperty(""MSISDN"") != """") {
				if(ValidateReservationQuota(Inputs,Outputs,bcNumberMaster,bcSysPref,""CUSTOMER"")) {
					Outputs.SetProperty(""IsValid"",""Y"");
				}
			} else {
				if(ValidateReservationQuota(Inputs,Outputs,bcNumberMaster,bcSysPref,""PROSPECT"")) {
					Outputs.SetProperty(""IsValid"",""Y"");
				}
			}
			break;
		default:
			break;	
	}
	} 
	catch(e) 
	{
//commented as destroying of bc will be taken care of by siebel
//bcIVRModel 		= null;
//bcNumberMaster	= null;
//boNumberScheme 	= null;
		if(strErrVal == """") 
		{
			Outputs.SetProperty(""Error_Code"",e.errCode);
			Outputs.SetProperty(""Error_Message"",e.errText);
		}	
	} 
	finally 
	{
//commented as destroying of bc will be taken care of by siebel
//bcIVRModel 		= null;
//bcNumberMaster	= null;
//boNumberScheme 	= null;
		psInputs		= null;
		psOutputs		= null;
		psIVRSet    	= null;
//1.1 below
		bcNumberMaster = null;
		boNumberEnquiry = null;
//1.1 above
	}
	return(intReturn);	
}
"/**************************************************************************************
* Name          : RMS RMS GetNumbers ValidateRequest  Method		 	  			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Validate and Set the parameters as per the IVR model	      		  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/06/2004	1.0   		Mahindra British Telecom   	Created       15/10/2004      *
**************************************************************************************/

function ValidateRequest(&Inputs, &Outputs,&bcNumberMaster, &bcSysPref)
{
	var blnValidRequest	= true;
	var strSearchExpr	= """";
	
	try{
	//Validate whether IVR Model is given as input argument
	if(Inputs.GetProperty(""IVR_Model"") == """") {
		Outputs.SetProperty(""Error_Code"",""RMSIVR008"");
		Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR008"",""IVR_Model""));
		TheApplication().RaiseErrorText(""EXIT"");
	}
	
	switch(Inputs.GetProperty(""IVR_Model"")) {
		case ""1"":
			
		case ""2"":
			
		case ""3"":
			//Validate whether HLR_ID is given as input argument
			/*if(Inputs.GetProperty(""HLR_ID"") == """") {
				Outputs.SetProperty(""Error_Code"",""RMSIVR008"");
				Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR008"",""HLR_ID""));
				TheApplication().RaiseErrorText(""EXIT"");
			}
			*/	
			Inputs.SetProperty(""FETCH_PARAMETER"",""RMS_IVR_FETCH_SIZE_"" + Inputs.GetProperty(""IVR_Model""));
			if(!ValidateReservationQuota(Inputs,Outputs,bcNumberMaster,bcSysPref,""DEALER"")) {
				blnValidRequest	= false;
			}
			break;
		case ""4"":
				
			if(Inputs.GetProperty(""Old_MSISDN_Number"") == """") {
				Outputs.SetProperty(""Error_Code"",""RMSIVR008"");
				Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR008"",""Old_MSISDN_Number""));
				TheApplication().RaiseErrorText(""EXIT"");
			} else {
				Inputs.SetProperty(""MSISDN"",Inputs.GetProperty(""Old_MSISDN_Number"") );
			}

			Inputs.SetProperty(""FETCH_PARAMETER"",""RMS_IVR_FETCH_SIZE_4"");
				
			if(!ValidateReservationQuota(Inputs,Outputs,bcNumberMaster,bcSysPref,""CUSTOMER"")) {
				blnValidRequest	= false;
			}
			Inputs.SetProperty(""IVR_ID"",GetDealerCode(""CUS""));
			break;
		case ""5"":
			if(Inputs.GetProperty(""Customer_Id"") == """") {
				Outputs.SetProperty(""Error_Code"",""RMSIVR008"");
				Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR008"",""Customer_Id""));
				TheApplication().RaiseErrorText(""EXIT"");
			} 
			
			Inputs.SetProperty(""FETCH_PARAMETER"",""RMS_IVR_FETCH_SIZE_5R"");
			
			if(Inputs.GetProperty(""IVR_ID"") == """"){
				Inputs.SetProperty(""IVR_ID"",GetDealerCode(""PCU""));
				
			} /*else {
				Inputs.SetProperty(""FETCH_PARAMETER"",""RMS_IVR_FETCH_SIZE_5C"");
			}*/
			Inputs.SetProperty(""Personal_Id"",Inputs.GetProperty(""Customer_Id""));
			if(!ValidateReservationQuota(Inputs,Outputs,bcNumberMaster,bcSysPref,""PROSPECT"")) {
				blnValidRequest	= false;
			}
			
			
			break;
		
		case ""6"":
			if(Inputs.GetProperty(""IVR_ID"") == """") {
				Outputs.SetProperty(""Error_Code"",""RMSIVR008"");
				Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR008"",""IVR ID""));
				TheApplication().RaiseErrorText(""EXIT"");
			} 
			
			if(Inputs.GetProperty(""IVR_ID"") != """"){
				Inputs.SetProperty(""FETCH_PARAMETER"",""RMS_IVR_FETCH_SIZE_6"");
				
			} 
			
			
			break;
			
		default:
			blnValidRequest = false;
			break;
	}
	
	} catch (e) {
		if(Outputs.GetProperty(""Error_Code"") == ""0"") {
			Outputs.SetProperty(""Error_Code"",e.errCode);
			Outputs.SetProperty(""Error_Message"",e.errText);
		}
		blnValidRequest = false;
	} finally {
	
	}
	return (blnValidRequest);
}
"/**************************************************************************************
* Name          : RMS RMS GetNumbers ValidateReservationQuota  Method		 	  	  *  
* Author        : Mahindra British Telecom                                            *
* Description   : Validate Reservation Quota                      		      		  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/06/2004	1.0   		Mahindra British Telecom   	Created       15/10/2004      *
**************************************************************************************/

function ValidateReservationQuota(&Inputs,&Outputs,&bcNumberMaster,&bcSysPref,strQuotaType)
{
	var strSysParamName	= """";
	var strSearch		= """"
	
	var intQuota	= 0;
	var intCnt		= 0;
	
	var blnIsQuota = true;
	
	try{
	
	switch (strQuotaType) {
		case ""DEALER"":
			if(Inputs.GetProperty(""IVR_ID"") != """") {
				intQuota = GetDealerQuota(Inputs.GetProperty(""IVR_ID""),""HAPPOINTMENT"",Outputs);
			} else {
				Outputs.SetProperty(""Error_Code"",""RMSIVR004"");
				Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR004""));
				TheApplication().RaiseErrorText(""EXIT"");
			}
			if(intQuota == 0) {
				Outputs.SetProperty(""Error_Code"",""RMSIVR003"");
				Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR003"",""dealer""));
				TheApplication().RaiseErrorText(""EXIT"");
			}
			break;
		
		case ""CUSTOMER"":
			if(Inputs.GetProperty(""IVR_ID"") == """") {
				with(bcSysPref) {
					ActivateField(""Value"");
					ActivateField(""Name"");
					
					ClearToQuery();
					SetSearchSpec(""Name"",""RMS_IVR_CUST_DEALERCODE"");
					ExecuteQuery(ForwardOnly);
					blnIsRecord = FirstRecord();
					
					
				}
				if(blnIsRecord) {
					Inputs.SetProperty(""IVR_ID"",bcSysPref.GetFieldValue(""Value""));
				}
			}
			
			if(Inputs.GetProperty(""IVR_ID"") != """") {
				intQuota = GetDealerQuota(Inputs.GetProperty(""IVR_ID""),""IVR_QUOTAS"",Outputs);
			} else {
				Outputs.SetProperty(""Error_Code"",""RMSIVR004"");
				Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR004""));
				TheApplication().RaiseErrorText(""EXIT"");
			}
			
			if(intQuota == 0) {
				Outputs.SetProperty(""Error_Code"",""RMSIVR003"");
				Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR003"",""customer""));
				TheApplication().RaiseErrorText(""EXIT"");
			}
			
			//search string for checking whether the MSISDN is in Assigned status
			strSearch	= ""([Number String without Delimiter] = '"" + Inputs.GetProperty(""MSISDN"") + ""'"";
			strSearch	+= "" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ASSIGNED"") + ""')"";
				
			with(bcNumberMaster) {
				ActivateField(""Number String without Delimiter"");
				ActivateField(""HLR Id"");
				ActivateField(""Assigned Id"");
				
				ClearToQuery();
				SetSearchExpr(strSearch);
				ExecuteQuery(ForwardOnly);

	//error code to be changed
				if(!FirstRecord()){
					Outputs.SetProperty(""Error_Code"",""RMSIVR009"");
					Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR009"",Inputs.GetProperty(""MSISDN"")));
					TheApplication().RaiseErrorText(""EXIT"");
				}
				
				Inputs.SetProperty(""HLR_ID"",GetFieldValue(""HLR Id""));
				//Inputs.SetProperty(""CONTRACT_ID"",GetFieldValue(""Assigned Id""));
						
				//search expression for checking whether the customer has reserved any number
				strSearch	= ""[Reserved To] = '"" + Inputs.GetProperty(""IVR_ID"") + ""'"";
				strSearch	+= "" AND [Record Blocked For] = '"" + GetFieldValue(""Assigned Id"") + ""'"";
				strSearch	+= "" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""RESERVED"") + ""'"";
				
				ClearToQuery();					
				SetSearchExpr(strSearch);
				ExecuteQuery(ForwardOnly);
				blnIsRecord = FirstRecord();
				
				while(blnIsRecord) {
					if(intCnt == intQuota)
						break;
					blnIsRecord = NextRecord();
					intCnt++;
				}
			}	
			if(intCnt >= intQuota) {
				Outputs.SetProperty(""Error_Code"",""RMSIVR003"");
				Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR003"",""customer""));
				TheApplication().RaiseErrorText(""EXIT"");
			}
				
			
			break;

		//Check reservation quota for propsect		
		case ""PROSPECT"":
			if(Inputs.GetProperty(""IVR_ID"") == """") {
				with(bcSysPref) {
					ActivateField(""Value"");
					ActivateField(""Name"");
					
					ClearToQuery();
					SetSearchSpec(""Name"",""RMS_IVR_PROSP_DEALERCODE"");
					ExecuteQuery(ForwardOnly);
					blnIsRecord = FirstRecord();
					
					
				}
				if(blnIsRecord) {
					Inputs.SetProperty(""IVR_ID"",bcSysPref.GetFieldValue(""Value""));
				}
			}
			
			if(Inputs.GetProperty(""IVR_ID"") != """") {
				intQuota = GetDealerQuota(Inputs.GetProperty(""IVR_ID""),""IVR_QUOTAS"",Outputs);
			} else {
				Outputs.SetProperty(""Error_Code"",""RMSIVR004"");
				Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR004""));
				TheApplication().RaiseErrorText(""EXIT"");
			}
			
			if(intQuota == 0) {
				Outputs.SetProperty(""Error_Code"",""RMSIVR003"");
				Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR003"",""prospect""));
				TheApplication().RaiseErrorText(""EXIT"");
			}
			
			
			//search expression for checking whether the customer has reserved any number
			strSearch	= ""[Reserved To] = '"" + Inputs.GetProperty(""IVR_ID"") + ""'"";
			strSearch	+= "" AND [Record Blocked For] = '"" + Inputs.GetProperty(""Personal_Id"") + ""'"";
			strSearch	+= "" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""RESERVED"") + ""'"";
					
			with(bcNumberMaster) {
				ActivateField(""Number String"");
				ActivateField(""HLR Id"");
				ActivateField(""Assigned Id"");
				
				ClearToQuery();
				SetSearchExpr(strSearch);
				ExecuteQuery(ForwardOnly);
				blnIsRecord = FirstRecord();
			
				while(blnIsRecord) {
					if(intCnt == intQuota)
						break;
					blnIsRecord = NextRecord();
					intCnt++;
				}
				
				if(intCnt >= intQuota) {
					Outputs.SetProperty(""Error_Code"",""RMSIVR003"");
					Outputs.SetProperty(""Error_Message"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR003"",""prospect""));
					TheApplication().RaiseErrorText(""EXIT"");
				}
				
			}
			break;
		default:
			blnIsQuota = false;
			break;
	}
		
	} catch(e) {
		if(Outputs.GetProperty(""Error_Code"") == ""0"") {
			Outputs.SetProperty(""Error_Code"",e.errCode);
			Outputs.SetProperty(""Error_Message"",e.errText);
		}
		blnIsQuota = false;
	} finally {
		
	}
	
	return(blnIsQuota);

}
"


var strAssocId;
var strMSISDNType;
var strMSISDNId;
var strMSISDNHLR;
var strSIMHLR;
var strSIMId;
var strSIMNumberDelim;
var strStatus;
var blnBlkUpdate;"
"/**************************************************************************************
* Name          : RSM Interface Order									 	          * 
* Author        : Mahindra British Telecom                                            *
* Description   : Activate Order Code File                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver    By     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0    MBT      Created       01/11/2003      *
* 14/06/2004	1.1	   Manoj	Modified	  14/06/2004	  *
20060711      | 1.2  | Prasad | Siebel ES SCR1, Objects Destroyed
* 20070322	  | 1.3	 | Manoj  | performance tuning

**************************************************************************************/
function ActivateOrder(&Inputs,&Outputs,&bcNumberMaster,&bcNumberBlock,&bcNumberAssocConcat,&bcNumberAssocDetail,&bcNumberMasterConcat,bcNumAssgnDetail)
{
	var strAssocStartId 	= """";
	var strConcatNumber		= """";
	var strConcatType		= """";
	var strConcatId			= """";
	var strSearchExpr		= """";
	var strErrVal 			= """";
	var strParAssId			= """";
	var strAssocMstrId		= """";
	var strAssSeqNo			= """";
	var strSIMAssocStartId  = """";
	var strParentIMSIId		= """";
	var bcAssocMstrCnct;
	var boNumberAssoc;
    var psInputs 			= TheApplication().NewPropertySet();
	var psOutputs 			= TheApplication().NewPropertySet();
	var bsNumberBlock;
	var blnIsRecord			= false;
	var blnIsDtlRecord		= false;
	var blnPerformance		= false;
	boNumberAssoc  			= TheApplication().GetBusObject(""RMS NM Number Association"");
	bcAssocMstrCnct			= boNumberAssoc.GetBusComp(""RMS NM Number Association Master Concat"");
//	try{
//----------------------
//Validate ActivateOrder
//----------------------

	ActivateOrderValidation(Inputs, Outputs, bcNumberMaster,strSIMAssocStartId);
	
	if(Outputs.GetProperty(""ErrCode"") != """") {
		//TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));
		strErrVal = Outputs.GetProperty(""ErrMessage"");
		return(strErrVal);
		}
	
//---------------------------------------------------------------------	
//Query Association Detail based on the SIM number and get the details
//like ConcatId and Parent Association Id.
//---------------------------------------------------------------------
	if(Inputs.GetProperty(""GenLevel"") != """")
		var strConcatId = GetConcatId(bcNumberMaster,Inputs.GetProperty(""GenLevel""),bcAssocMstrCnct,strSIMAssocStartId,bcNumberMasterConcat,strParentIMSIId);
	
	with(bcNumberAssocDetail){
		ActivateField(""Source Number with Chk Sum"");
		ActivateField(""Source Num Id"");
		ActivateField(""Association Seq Num"");
		ActivateField(""Number Association Concat Id"");
		ActivateField(""Association Id"");
		
		ClearToQuery();
		SetSearchSpec(""Source Number with Chk Sum"",strSIMNumberDelim);
		if(strConcatId!="""")	
			SetSearchSpec(""Number Association Concat Id"",strConcatId);
		ExecuteQuery();
		blnIsDtlRecord = FirstRecord();
		
		if(blnIsDtlRecord)  {
			strAssocStartId = GetFieldValue(""Source Num Id"");
			strParAssId		= GetFieldValue(""Id"");	
			strConcatId		= GetFieldValue(""Number Association Concat Id"");	
			strAssSeqNo 	= GetFieldValue(""Association Seq Num"");
			strAssocMstrId	= GetFieldValue(""Association Id"");
		}
		while(blnIsDtlRecord) {
			ClearToQuery();
			SetSearchSpec(""Parent Ass Id"",strParAssId);
			ExecuteQuery();
			blnIsDtlRecord = FirstRecord();
			if(blnIsDtlRecord) {
				strParAssId	= GetFieldValue(""Id"");
				strAssSeqNo = GetFieldValue(""Association Seq Num"");
			}
		}
	}


//---------------------------------------------------------------------------------------------------
//Create new record in number association detail for MSISDN number If MSISDN is not alreay associated.
//---------------------------------------------------------------------------------------------------
	if(strAssocId == """") {
	
		with(bcNumberAssocDetail) {
			NewRecord(1);
			SetFieldValue(""Destination Num Id"",strMSISDNId);
			SetFieldValue(""Number Association Concat Id"",strConcatId);
			SetFieldValue(""Parent Ass Id"",strParAssId);				
			SetFieldValue(""Association Seq Num"",strAssSeqNo)
			WriteRecord();
		}

		with(bcNumberAssocConcat) {
			ActivateField(""Associated Number"");
			ActivateField(""Associated Type"");
			ActivateField(""Assoc Start Id"");
			ActivateField(""Status"");
			ClearToQuery();
			SetSearchSpec(""Id"",strConcatId);
			ExecuteQuery();
			if(FirstRecord()) {
				strConcatNumber = GetFieldValue(""Associated Number"") + "" / "" + Inputs.GetProperty(""MSISDN Number"");
				strConcatType   = GetFieldValue(""Associated Type"") + "" / "" + strMSISDNType;
				SetFieldValue(""Associated Number"",strConcatNumber);
				SetFieldValue(""Associated Type"",strConcatType);
				SetFieldValue(""Assoc Start Id"",strAssocStartId);
				SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED""));		
				WriteRecord();
			}
		}
	// this will be useful in future. This is not required now as in association the start numbers
	//are constrained based on status and not on Flag value
		if(strAssocMstrId != """") {
			with(bcAssocMstrCnct) {
				ActivateField(""Flag"");
				ClearToQuery();
				SetSearchSpec(""Association Id"",strAssocMstrId);
				SetSearchSpec(""Concat Id"",strConcatId);
				ExecuteQuery(ForwardOnly);
				
				if(FirstRecord()) {
					SetFieldValue(""Flag"",""Y"");
					WriteRecord();
				}
			}
		}
		
//------------------------------------------------------------------------
//Creating a new record in the number master and concat intersection table.
//------------------------------------------------------------------------	

		with(bcNumberMasterConcat) {
			NewRecord(1);
			SetFieldValue(""Concat Id"",bcNumberAssocConcat.GetFieldValue(""Id""));	
			SetFieldValue(""Number Id"",strMSISDNId);
			WriteRecord();
		}
	}	
	
//------------------------------------------------------
//Update the SIM,IMSI and MSISDN numbers in number mater.
//------------------------------------------------------

	with(bcNumberMaster) {
		//1.3 below
		ClearToQuery()
		SetSearchSpec(""Num Mstr Number String"",Inputs.GetProperty(""MSISDN Number""));
		ExecuteQuery(ForwardOnly);
		if(FirstRecord() && (strAssocStartId != """")) {
			SetFieldValue(""Assoc Start Id"",strAssocStartId);
			WriteRecord();
			blnPerformance	= true;
		}
		
		if(blnPerformance) {
			strSearchExpr = ""[Assoc Start Id] = '"" + strAssocStartId + ""'"";
		} else {
			strSearchExpr = ""[Num Mstr Number String] = '""+Inputs.GetProperty(""SIM Number"")+""'"";
			strSearchExpr += "" OR [Num Mstr Number String] = '""+Inputs.GetProperty(""MSISDN Number"")+""'"";	
			strSearchExpr = strSearchExpr + "" OR [Assoc Start Id] = '"" + strAssocStartId + ""'"";	
		}//1.3 above
		ActivateField(""No. Of Assigned MSISDN"");
		ActivateField(""Parent Assoc Id"");
		ClearToQuery();
		SetSearchExpr(strSearchExpr);
		ExecuteQuery(ForwardOnly);
		
		blnIsRecord = FirstRecord();
		while(blnIsRecord) {
			SetFieldValue(""Assigned Date"",GetFieldValue(""Current Date""));		
			strStatus = GetFieldValue(""Status"");
			SetFieldValue(""Assigned Id"",Inputs.GetProperty(""Contract Id""));
			SetFieldValue(""Using Type"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_USING_TYPE"", ""ACTIVATION""));

			with(bcNumAssgnDetail){
				NewRecord(1);
				SetFieldValue(""Assigned Id"",Inputs.GetProperty(""Contract Id""));
				SetFieldValue(""Number Id"",bcNumberMaster.GetFieldValue(""Id""));
				WriteRecord();
			}
			
			if(GetFieldValue(""Num Mstr Number String"") == Inputs.GetProperty(""MSISDN Number"")) {
				SetFieldValue(""Assoc Start Id"",strAssocStartId);
				SetFieldValue(""Parent Assoc Id"",strParentIMSIId);
				SetFieldValue(""Is Associated"",""Y"");
				SetFieldValue(""Reservation End Date"","""");
				SetFieldValue(""Record Blocking Date"","""");
				if(Inputs.GetProperty(""GenLevel"")!="""")
					SetFieldValue(""SIM Generation Support"",Inputs.GetProperty(""GenLevel""));
			}
			if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
				SetFieldValue(""No. Of Assigned MSISDN"",ToInteger(GetFieldValue(""No. Of Assigned MSISDN""))+1);
			SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
			//After setting the values set the status as fields may become readonly after setting the status
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED""));
			WriteRecord();
			
			//Update the Block counter for the number
			if(blnBlkUpdate) {
				bsNumberBlock = TheApplication().GetService(""RMS RMS Block Calc"");
				psInputs.SetProperty(""From Status"", strStatus);
				psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
				psInputs.SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED""));
				bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);			
			}
			blnIsRecord = NextRecord();
		}
	}
//	} catch(e) {
//		if(Outputs.GetProperty(""ErrCode"") == """") {
//			Outputs.SetProperty(""ErrCode"",e.errCode);				
//			Outputs.SetProperty(""ErrMessage"",e.errText);
//		}
//	} finally {
//		psInputs 		= null;
//		psOutputs 		= null;
//		bsNumberBlock	= null;
//		bcAssocMstrCnct	= null;
//		boNumberAssoc	= null;
//	}
//1.2 below
	bcAssocMstrCnct = null;
	boNumberAssoc = null;
	bsNumberBlock = null;
	psInputs = null;
	psOutputs = null;
//1.2 above
	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS RMS Interface Order Management ActivateOrderValidation  Method * 
* Author        : Mahindra British Telecom                                            *
* Description   : Validate before Activate Order operation         		      		  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver    By     	Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/12/2003	1.0    MBT      Created       15/12/2003      *
* 08/06/05      1.1    Gautam	08/06/05        * 	 
20060711      | 1.2  | Prasad | Siebel ES SCR1, Objects Destroyed
201010219     | 1.3  | Kalyana | Added additional validations for proper SIM with check sum,Invalid MSISDN,Blank SIM and Blank MSISDN
**************************************************************************************/

function ActivateOrderValidation(&Inputs, &Outputs, &bcNumberMaster,&strSIMAssocStartId)
{
	//---------------------------------------------------------
	//Query Number master to get the MSISDN Id and number type.
	//---------------------------------------------------------
	var strSearchExpr			= """";
	var strStatus				= """";
//	var strSIMAssocStartId 		= """";
	var strMSISDNAssocStartId 	= """";

	var blnIsRecord				= false;
	var blnValidate = TheApplication().GetProfileAttr(""NOValidate"");
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref = boSysPref.GetBusComp(""System Preferences""); 
	
	//Below 1.3 Kalyana 20100219
	if ((Inputs.GetProperty(""SIM Number"") == null) || (Inputs.GetProperty(""SIM Number"") == """"))
	{
	Outputs.SetProperty(""ErrCode"",""RMSORD011"");				
	Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSORD011""));
	return;
	}
	if ((Inputs.GetProperty(""MSISDN Number"") == null) || (Inputs.GetProperty(""MSISDN Number"") == """"))
	{
	Outputs.SetProperty(""ErrCode"",""RMSAUC009"");				
	Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC009""));
	return;
	}
	 
     with(bcNumberMaster){
     ActivateField(""Assoc Start Id"");
     ClearToQuery();
     SetSearchSpec(""Num Mstr Number String"",Inputs.GetProperty(""SIM Number""));
	 ExecuteQuery();
	 blnIsRecord = FirstRecord();
     if (!blnIsRecord){
     
          Outputs.SetProperty(""ErrCode"",""RMSORD011"");				
	      Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSORD011""));
	      return;
     }
     else
     {
     var strSIMAssocId = GetFieldValue(""Assoc Start Id"");
     if ((strSIMAssocId == null) || (strSIMAssocId == """"))
     {
     Outputs.SetProperty(""ErrCode"",""RMSACT002"");				
	 Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSACT002""));
	 return;
     }
     }
     ClearToQuery();
     SetSearchSpec(""Num Mstr Number String"",Inputs.GetProperty(""MSISDN Number""));
     ExecuteQuery();
     blnIsRecord = FirstRecord();
     if(!blnIsRecord)
            {
            Outputs.SetProperty(""ErrCode"",""RMSAUC009"");				
	        Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC009""));
			return;
            }
		if((GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED"")) && (GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"")))
		 	{
		 	Outputs.SetProperty(""ErrCode"",""RMSACT006"");				
	        Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSACT006""));
			return;
		 	}
		
           }
     //Above 1.3 Kalyana 20100219
	
		
	
	if((Inputs.GetProperty(""SIM Number""))!=""""){
		strSearchExpr = ""[Num Mstr Number String] = '""+Inputs.GetProperty(""SIM Number"")+""'"";
		//strSearchExpr = ""[Number String] = '""+Inputs.GetProperty(""SIM Number"")+""'"";
	}
	if((Inputs.GetProperty(""MSISDN Number""))!=""""){
		if(strSearchExpr!="""")	
			strSearchExpr = strSearchExpr + "" OR [Num Mstr Number String] = '""+Inputs.GetProperty(""MSISDN Number"")+""'"";
			//strSearchExpr = strSearchExpr + "" OR [Number String] = '""+Inputs.GetProperty(""MSISDN Number"")+""'"";
		else
			strSearchExpr = ""[Num Mstr Number String] = '""+Inputs.GetProperty(""MSISDN Number"")+""'"";
			//strSearchExpr = ""[Number String] = '""+Inputs.GetProperty(""MSISDN Number"")+""'"";
	}	
	try
	{
	with(bcNumberMaster) 
	{
		ClearToQuery()
		SetSearchExpr(strSearchExpr);
		ExecuteQuery(ForwardOnly);
		
		blnIsRecord = FirstRecord();
		while(blnIsRecord) 
		{
//--------------------------------------------------------------------------------------------------------
//Check whether the MSISDN number has status Reserved or Overdue and it is reserved to proper personal id.
//--------------------------------------------------------------------------------------------------------			
			strStatus = GetFieldValue(""Status"");
			
			if(GetFieldValue(""Num Mstr Number String"") == Inputs.GetProperty(""MSISDN Number"")){
				if(GetFieldValue(""Is Associated"") == ""Y"") {
					strAssocId = GetFieldValue(""Assoc Start Id"");
					strMSISDNAssocStartId = strAssocId;
					
					if(strStatus != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"") && blnValidate!=""Y"") {
						Outputs.SetProperty(""ErrCode"",""RMSIFOM001"");				
						Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM001"",Inputs.GetProperty(""MSISDN Number"")));
						//TheApplication().RaiseErrorText(""EXIT"");
					    return;
					}
				
				} else {
					if(strStatus != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED"")
										   &&
					strStatus != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""OVERDUE"")
					
											&& 
//---------------------------------------------											
//Added for EE as MSISDN can be allocated. v1.1
//---------------------------------------------
					strStatus != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"") && blnValidate!=""Y"") {
											
						Outputs.SetProperty(""ErrCode"",""RMSIFOM002"");				
						Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM002"",Inputs.GetProperty(""MSISDN Number"")));
						return;
						//TheApplication().RaiseErrorText(""EXIT"");	
					}

					if(Inputs.GetProperty(""Contract Personal Id"")!=""""){
						if((GetFieldValue(""Reserved For"") != Inputs.GetProperty(""Contract Personal Id"")) 
											&&
						(GetFieldValue(""Record Blocked For"") != Inputs.GetProperty(""Contract Personal Id""))) {
							Outputs.SetProperty(""ErrCode"",""RMSIFOM003"");				
							Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM003"",Inputs.GetProperty(""MSISDN Number""),Inputs.GetProperty(""Contract Personal Id"")));
							//TheApplication().RaiseErrorText(""EXIT"");	
							return;
						}
					}
				}
				strMSISDNType = GetFieldValue(""Type"");
				strMSISDNId   = GetFieldValue(""Id"");
				strMSISDNHLR  = GetFieldValue(""HLR Id"");
			}
			
//-------------------------------------------------------------------------------------------
//Check whether the SIM number has status allocated and it is associated with an imsi number.
//-------------------------------------------------------------------------------------------
				
			if(GetFieldValue(""Num Mstr Number String"") == Inputs.GetProperty(""SIM Number"")){
			// if(GetFieldValue(""Number String"") == Inputs.GetProperty(""SIM Number"")){
				strSIMAssocStartId = GetFieldValue(""Assoc Start Id"");
				if((GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"")) && blnValidate!=""Y"" && GetFieldValue(""No. Of Assigned MSISDN"") == 0) {
					Outputs.SetProperty(""ErrCode"",""RMSIFOM004"");				
					Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM004"",Inputs.GetProperty(""SIM Number"")));
					//TheApplication().RaiseErrorText(""EXIT"");
					return;
			 	}
			 
			 	if((GetFieldValue(""Is Associated"") != ""Y"" || GetFieldValue(""IMSI Assoc"") != ""Y"") && blnValidate!=""Y"") {
			 		Outputs.SetProperty(""ErrCode"",""RMSIFOM005"");				
					Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM005"",Inputs.GetProperty(""SIM Number"")));
					//TheApplication().RaiseErrorText(""EXIT"");
					return;
			 	}

			 	strSIMHLR = GetFieldValue(""HLR Id"");
			 	strSIMId  = GetFieldValue(""Id"");
			 	strSIMNumberDelim = GetFieldValue(""Num Mstr Number String"");
			}				
			blnIsRecord = NextRecord();
		} 
		
//----------------------------------------------------------------------------------------------------
//Getting the value from System Preference to idebtify whether HLR validation needs to be done or not.
//-----------------------------------------------------------------------------------------------------	
	with(bcSysPref) {
		ActivateField(""Name"");
		ActivateField(""Value"");		
		ClearToQuery();
		SetSearchSpec(""Name"",""RMSHLRCHECK"");
		SetSearchSpec(""Value"",""Y"");
		ExecuteQuery();
		
		if(FirstRecord()) {		
			if(strMSISDNHLR != strSIMHLR && blnValidate!=""Y"") {
				Outputs.SetProperty(""ErrCode"",""RMSIFOM006"");
				Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM006""));
				//TheApplication().RaiseErrorText(""EXIT"");
				return;
			}
		}
	}
		
		if(strMSISDNAssocStartId != """") {
			if(strMSISDNAssocStartId != strSIMAssocStartId && blnValidate != ""Y"") {
				Outputs.SetProperty(""ErrCode"",""RMSIFOM007"");				
				Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM007""));
				//TheApplication().RaiseErrorText(""EXIT"");
				return;
			}
		}
// =========================== COMMENTED FOR FUTURE USE Ver 2.0 =============================/		
//--------------------------------------------------------------------
//Removed the check as SIM can be associated with more MSISDN numbers.
//--------------------------------------------------------------------
/*		if(strSIMAssocStartId != """") {
			with(bcNumberMaster) {
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",strSIMAssocStartId);
				SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""));
				ExecuteQuery();
				
				if(FirstRecord()) {
					if(GetFieldValue(""Number String"") != Inputs.GetProperty(""MSISDN Number"")) {
						Outputs.SetProperty(""ErrCode"",""RMSIFOM015"");				
						Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM015""));
						TheApplication().RaiseErrorText(""EXIT"");	
					}
				}
			}
		}*/
	} 
	} catch(e) {
		if(Outputs.GetProperty(""ErrCode"") == """") {
			Outputs.SetProperty(""ErrCode"",e.errCode);				
			Outputs.SetProperty(""ErrMessage"",e.errText);
		}
	}
	finally 
	{
//1.2 below
		bcSysPref = null;
		boSysPref = null;
//1.2 above	
	}
}
"/**************************************************************************************
* Name          : RMS RMS Interface Order Management ActivatePrepaidOrder Method 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : MS RMS Interface Order Management       		      		  		  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver    By       Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/12/2003	1.0    MBT      Created       15/12/2003      *
* 08/06/05      1.1	   Gautam	08/06/05        * 	 
20060711      | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
*************************************************************************************/
function ActivatePrepaidOrder(Inputs,Outputs,bcNumberMaster)
{
	var bsNumberBlock;
	var strStatus;
	var blnIsRecord;
	var strSIMAssocStartId = """";
	var strErrval = """";
    var psInputs 			= TheApplication().NewPropertySet();
	var psOutputs 			= TheApplication().NewPropertySet();
	with(bcNumberMaster) 
	{
			ActivateField(""Status"");
			ActivateField(""Current Date"");
			ActivateField(""Assoc Start Id"");			
			SetViewMode(AllView);
			ClearToQuery()
			SetSearchSpec(""Number String"",Inputs.GetProperty(""MSISDN Number""));
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
				var strSIMAssocStartId = GetFieldValue(""Assoc Start Id"");
		
			if(strSIMAssocStartId != """") {
				SetViewMode(AllView);	
				ClearToQuery()
				SetSearchSpec(""Assoc Start Id"",strSIMAssocStartId);
				ExecuteQuery(ForwardOnly);
				blnIsRecord = FirstRecord();
				while(blnIsRecord) {
					SetFieldValue(""Assigned Date"",GetFieldValue(""Current Date""));		
					strStatus = GetFieldValue(""Status"");
					SetFieldValue(""Assigned Id"",Inputs.GetProperty(""Contract Id""));
					SetFieldValue(""Using Type"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_USING_TYPE"", ""ACTIVATION""));
					
					if(GetFieldValue(""Number String"") == Inputs.GetProperty(""MSISDN Number"")) {
						SetFieldValue(""Reservation End Date"","""");
						SetFieldValue(""Record Blocking Date"","""");
					}
					SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
					//After setting the values set the status as fields may become readonly after setting the status
					SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED""));
					WriteRecord();
					
					//Update the Block counter for the number
					if(blnBlkUpdate) {
						bsNumberBlock = TheApplication().GetService(""RMS RMS Block Calc"");
						psInputs.SetProperty(""From Status"", strStatus);
						psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
						psInputs.SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED""));
						bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);			
					}
					blnIsRecord = NextRecord();
				}
			}
	}
//1.2 below
	bsNumberBlock = null;
	psInputs = null;
	psOutputs = null;
//1.2 above	
	return(strErrval);
}
"/**************************************************************************************
* Name          : RMS Interface Order			 	          						  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Calculate Available Date                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 1/11/2003	1.0   		Mahindra British Telecom   	Created       05/11/2003          *
**************************************************************************************/
function CalcAvailableDate(QuarUOM, QuarPeriod, &bcNumberMaster)
{
	
	var dtSysDate 			= Clib.time();
	var dtSysDateObj 		= Date.fromSystem(dtSysDate);
	
	var dtQuarantineDate 	= bcNumberMaster.GetFieldValue(""Quarantine Date"");
	var dtQuarantineDateObj = new Date(dtQuarantineDate);
 
    switch (QuarUOM) {

  	    case ""Days"": 
			dtQuarantineDateObj.setDate(ToInteger(dtQuarantineDateObj.getDate()) + ToInteger(QuarPeriod));
        	break;
             	
   		case ""Months"": 
			dtQuarantineDateObj.setMonth(ToNumber(ToNumber(dtQuarantineDateObj.getMonth()) + ToNumber(QuarPeriod)));
			break;
		
    	case ""Weeks"":
			dtQuarantineDateObj.setDate(dtQuarantineDateObj.getDate() + (QuarPeriod * 7));
       		break;
   		
   		case ""Year"": 
  			dtQuarantineDateObj.setFullYear(ToNumber(ToNumber(dtQuarantineDateObj.getFullYear()) + ToNumber(QuarPeriod)));
			break;
   }
   
   return(dtQuarantineDateObj);
}
"/**************************************************************************************
* Name          : RMS Interface Order									 	          * 
* Author        : Mahindra British Telecom                                            *
* Description   : Cancel Order File	                    		  				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003	1.0   		MBT  	Created       01/11/2003      					  *
**************************************************************************************/

function CancelOrder(&Inputs,&Outputs)
{

	var psInputs	= TheApplication().NewPropertySet();
	var psOutputs	= TheApplication().NewPropertySet();
	
	var bsRMSDeAssociation;
	var intRetValue = CancelOperation;
	var strErrVal = """";
	var strGenLvl = """";
//-------------------------------------------------------------------------------------
//Validate the Associated SIM-IMSI-MSISDN number.
//-------------------------------------------------------------------------------------
	try{
	strErrVal = NumberValidation(Inputs,Outputs,strGenLvl)
//-------------------------------------------------------------------------------------
//De-associate the Associated SIM-IMSI-MSISDN number.
//-------------------------------------------------------------------------------------

	if(strErrVal == """") {
		bsRMSDeAssociation = TheApplication().GetService(""RMS RMS Deassociate Function"");
		psInputs.SetProperty(""GenLevel"",strGenLvl);
		psInputs.SetProperty(""MSISDN Number"", Inputs.GetProperty(""MSISDN""));
		psInputs.SetProperty(""Source"",""Cancel Order"");
		psInputs.SetProperty(""Partial(Y/N)"",""Y"");	
		bsRMSDeAssociation.InvokeMethod(""DeAssociate"", psInputs, psOutputs);
		
		if(psOutputs.GetProperty(""ErrCode"") != """") {
			Outputs.SetProperty(""ErrCode"",psOutputs.GetProperty(""ErrCode""));
			Outputs.SetProperty(""ErrMessage"",psOutputs.GetProperty(""ErrMessage""));
		}
	} 

	} catch (e) {
		if(Outputs.GetProperty(""ErrCode"") == """") {
			Outputs.SetProperty(""ErrCode"",e.errCode);				
			Outputs.SetProperty(""ErrMessage"",e.errText);
		}
	} finally {
		psInputs = null;
		psOutputs = null;
		bsRMSDeAssociation = null;
	}
	
	return (Outputs.GetProperty(""ErrCode""));
}
"/**************************************************************************************
* Name          : Check Prepaid Card									 	          * 
* Author        : Mahindra British Telecom                                            *
* Description   : Function to check whether the SIM card is prepaid Code File         *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 07/08/2004	1.0   		Mahindra British Telecom   	Created       07/08/2004      *
* 22/06/2006    1.1         Kalyana
**************************************************************************************/
function CheckPrepaid(msSIMNumber)
{	
	var boNumberMaster;
	var bcNumberMaster;
	var blnIsRecord		= false;
	var blnIsPrepaid	= false;
	
	boNumberMaster 	= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNumberMaster 	= boNumberMaster.GetBusComp(""RMS NM Number Enquiry"");
	
	with(bcNumberMaster) {
		ActivateField(""Number String"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Status""); 
		ActivateField(""Type Identifier"");
		ActivateField(""Number String without Delimiter"");
		ActivateField(""Num Mstr Number String"");
	//  ActivateField(""Calc Number Without Delimiter"");
		
		ClearToQuery();
		/*---------------------------------------------------------------------------------------/
			vesion 1.1 changed seacrh specification from calculated field to normal field
        ---------------------------------------------------------------------------------------*/

		//SetSearchSpec(""Calc Number Without Delimiter"",msSIMNumber);
		SetSearchSpec(""Num Mstr Number String"",msSIMNumber);
		ExecuteQuery(ForwardOnly);
		
		blnIsRecord = FirstRecord();	
		
		if(FirstRecord) {
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",GetFieldValue(""Assoc Start Id""));
			SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""));
			ExecuteQuery(ForwardOnly);
			
			blnIsPrepaid = FirstRecord();
		}
	}
	
	bcNumberMaster	= null;
	boNumberMaster	= null;
	
	return(blnIsPrepaid);
}
"/**************************************************************************************
* Name          : RMS Interface Order			 							          * 
* Author        : Mahindra British Telecom                                            *
* Description   : Contract Takeover Code File                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 1/11/2003	1.0   		Mahindra British Telecom   	Created       05/11/2003	      *
**************************************************************************************/
function ContractTakeover(&Inputs,&Outputs,&bcNumberMaster)
{

	var strMSISDNNumber		= """";
	var strContractId		= """";
	var strContractIdNew	= """";
	var blnIsRecord			= false;
	
	
	strMSISDNNumber			= Inputs.GetProperty(""MSISDN Number"");
	strContractId			= Inputs.GetProperty(""Contract Id"");
	strContractIdNew		= Inputs.GetProperty(""New Contract Id"");
	
	try{
	
	with(bcNumberMaster){
		ActivateField(""Number String"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Assigned Id"");
		ActivateField(""Status""); 

//--------------------------------------------------------------------------------
//Query number master and get all the associated number.Check whether the associated
//numbers are assigned to account id supplied
//--------------------------------------------------------------------------------
	
		ClearToQuery();
		SetSearchSpec(""Number String"",strMSISDNNumber);
		ExecuteQuery();
		if(FirstRecord()) {
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"", GetFieldValue(""Assoc Start Id""));
			ExecuteQuery(ForwardBackward);
			blnIsRecord = FirstRecord();

			while(blnIsRecord){
				if(GetFieldValue(""Assigned Id"") != strContractId) {
					Outputs.SetProperty(""ErrCode"",""RMSIFOM009"");				
					Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM009"",GetFieldValue(""Number String""),GetFieldValue(""Assigned Id"")));
					TheApplication().RaiseErrorText(""EXIT"");
				} else if(GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED"") || GetFieldValue(""Assigned Id"") != strContractId){
					Outputs.SetProperty(""ErrCode"",""RMSIFOM008"");				
					Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM008"",GetFieldValue(""Number String"")));
					TheApplication().RaiseErrorText(""EXIT"");
				} 
				blnIsRecord = NextRecord();
			}
			blnIsRecord = FirstRecord();
			
			
			
//--------------------------------------------------------------------------------
//Assign the SIM-IMSI-MSISDN number to the new Account Id supplied as input.
//--------------------------------------------------------------------------------
		
			while(blnIsRecord) {
				SetFieldValue(""Assigned Id"", strContractIdNew);	
				WriteRecord();
				blnIsRecord = NextRecord();			
			}
		}
	}
	} catch(e) {
		if(Outputs.GetProperty(""ErrCode"") == """") {
			Outputs.SetProperty(""ErrCode"",e.errCode);				
			Outputs.SetProperty(""ErrMessage"",e.errText);
		}
	} finally {
		
	}
	
	return(Outputs.GetProperty(""ErrCode""));
}
"/**************************************************************************************
* Name          : RMS RMS Interface Order Management DateToString  Method 			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : DateToString Code File                      				      	  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/10/2003	1.0   		Mahindra British Telecom   	Created       29/10/2003      *
**************************************************************************************/

//-------------------------------------------------------------------------------------
//Gets the 'Date','Month','Hours','Minutes','Second' and appends them to a string.
//-------------------------------------------------------------------------------------

function DateToString (intCDate)
{
	var dtDatum = ((intCDate.getMonth() + 1) + ""/"" + intCDate.getDate() + ""/"" + intCDate.getFullYear()
	+ "" "" + intCDate.getHours() + "":"" + intCDate.getMinutes()+ "":"" + intCDate.getSeconds());
	return dtDatum
}
"/**************************************************************************************
* Name          : RMS RMS Interface Order Management GetAssocNumbers  Method 		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Get Associated Numbers                      		      		      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/12/2003	1.0   		Mahindra British Telecom   	Created       15/12/2003      *
**************************************************************************************/

function GetAssocNumbers(bcNumberMasterConcat,&strNumber,bcNumberMaster,&intRecCnt,&bcNumberMasterConcat)
{

	var blnIsRecord;

	with(bcNumberMasterConcat) {
		ActivateField(""Number Id"");
		ActivateField(""Concat Id"");
		ActivateField(""Number String"");
		
		ClearToQuery();
		SetSearchSpec(""Number Id"", bcNumberMaster.GetFieldValue(""Id""));
		ExecuteQuery();

		if(FirstRecord()) {
			ClearToQuery()
			SetSearchSpec(""Concat Id"", GetFieldValue(""Concat Id""));
			ExecuteQuery();
			blnIsRecord=FirstRecord();
			while(blnIsRecord){
				strNumber[intRecCnt++] = GetFieldValue(""Number String"");
				blnIsRecord=NextRecord();
			}
		}
	}
}
"/**************************************************************************************
* Name          : RMS RMS Interface Order Management GetAssocNumbers  Method 		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Get Associated Numbers                      		      		      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/12/2003	1.0   		Mahindra British Telecom   	Created       15/12/2003      *
**************************************************************************************/

function GetConcatId(bcNumberMaster,strGenLvl,bcAssocMstrCnct,strSIMAssocStartId,bcNumberMasterConcat,&strParentIMSIId)
{
	with(bcNumberMaster) {
		ClearToQuery();
		SetSearchSpec(""Assoc Start Id"",strSIMAssocStartId);
		SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI""));
		SetSearchSpec(""Generation Level"",strGenLvl);
		ExecuteQuery();
		if(FirstRecord()){
			strParentIMSIId = GetFieldValue(""Id"");
			with(bcNumberMasterConcat) {
				ActivateField(""Concat Id"");
				ClearToQuery();
				SetSearchSpec(""Number Id"",bcNumberMaster.GetFieldValue(""Id""));				
				ExecuteQuery();
				if(FirstRecord())
					return(GetFieldValue(""Concat Id""));
			}
		}else{
			return("""");
		}
	}

}
"/**************************************************************************************
* Name          : GetQuarantineDetails				 	          			          * 
* Author        : Tech Mahindra                                                       *
* Description   : To get Quarantine Period and Quarantine UOM values based on 
                  Quarantine event  	                      				          *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 20060905	     1.0   		Kalyana Tangirala  	        Created                                 *
**************************************************************************************/
function GetQuarantineDetails(Inputs, strSchemeId, strMSISDN, QuarEvent)
{
    var blnIsRecord		 = false; 
	var boNumberScheme   = TheApplication().GetBusObject(""RMS NM Number Scheme"");
	var bcNumberScheme   = boNumberScheme.GetBusComp(""RMS NM Number Scheme"");
	var bcQuarantine     = boNumberScheme.GetBusComp(""RMS NM Number Quarantine"");


    var blnsIsQuarantine = false;
	var strSearchExp     = """";
	try{
	with(bcNumberScheme)
	{
		ClearToQuery();
		SetSearchSpec(""Id"",strSchemeId);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord()) {
	
			strSearchExp =    strSearchExp +""[Scheme Id] ='""+strSchemeId+""'""; 
			if(QuarEvent== TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Change MSISDN""))
			{
				strSearchExp = strSearchExp + "" AND [Quarantine Event] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Change MSISDN"") + ""'"";
			}
			else if(QuarEvent == TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Service Termination""))
			{
				strSearchExp = strSearchExp + "" AND [Quarantine Event] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Service Termination"") + ""'"";
			}
			with(bcQuarantine)
			{
				ActivateField(""Quarantine Period"");
				ActivateField(""Quarantine UOM"");
				ClearToQuery();
				SetSearchExpr(strSearchExp);
				ExecuteQuery(ForwardOnly);
				blnsIsQuarantine = FirstRecord();
				if(blnsIsQuarantine)
				{
					Inputs.SetProperty(""Quarantine Period"",bcQuarantine.GetFieldValue(""Quarantine Period""));
					Inputs.SetProperty(""Quarantine UOM"",bcQuarantine.GetFieldValue(""Quarantine UOM""));
				}//end of if(blnsIsQuarantine)
				//if no record with that quarantine event is found then query on ""Default"" quarantine event
				else{
					ClearToQuery();
					SetSearchSpec(""Scheme Id"",strSchemeId);
					SetSearchSpec(""Quarantine Event"",TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Default""));
					ExecuteQuery(ForwardOnly);
					blnsIsQuarantine = FirstRecord();
					if(blnsIsQuarantine)
					{
						Inputs.SetProperty(""Quarantine Period"",bcQuarantine.GetFieldValue(""Quarantine Period""));
						Inputs.SetProperty(""Quarantine UOM"",bcQuarantine.GetFieldValue(""Quarantine UOM""));
					}//end of if(blnsIsQuarantine)
				}//end of else
			}//end of with(bcQuarantine)
		}//end of if(FirstRecord())
	}//end of with(bcNumberScheme)
	
	}//try
	catch(e) {
    throw(e.toString());
         }
	finally
	{
	bcNumberScheme = null;
	bcQuarantine   = null;
	boNumberScheme = null;
	
	}
	}//end of function"
"/**************************************************************************************
* Name          : RMS Interface Order			 	          						  * 
* Author        : Mahindra British Telecom                                            *
* Description   : MSISDN Takeover Code File                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
* 1/11/2003	     1.0   	MBT      Created       05/11/2003          *
20060711       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function MSISDNTakeover(&Inputs,&Outputs,bcNumberMaster,bcNumberBlock,bcNumberAssocConcat,bcNumberAssocDetail,bcNumberMasterConcat)
{
	var bsRMSDeAssociation;
	var strMSISDNNumber;
	var strNewSIMNumber;
	var strTransferSIM;
	var strContractId;
	var strNewAccntId;
	var strMSISDNTakeover;
	var blnIsRecord;
	var psInputs 			= TheApplication().NewPropertySet();
	var psOutputs 			= TheApplication().NewPropertySet();
		
	strMSISDNNumber	  = Inputs.GetProperty(""MSISDN Number"");
	strNewSIMNumber	  = Inputs.GetProperty(""New SIM Number"");
	strContractId     = Inputs.GetProperty(""Contract Id"");
	strNewAccntId     = Inputs.GetProperty(""New Account ID"");
	strTransferSIM 	  = Inputs.GetProperty(""TransferSIM"");
	
	try{
	with(bcNumberMaster){
		ActivateField(""Number String"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Status""); 
		ActivateField(""Type Identifier"");
		ActivateField(""Assigned Id"");
		ActivateField(""Assigned To"");
		ActivateField(""Reserved To"");
			
//----------------------------------------------------------------------------
//Query Number Master with the Input as MSISDN Number and get the coresponding
//Associated numbers.Check whether the associated numbers are assigned to the 
//Account Id supplied.
//----------------------------------------------------------------------------
	
		ClearToQuery();
		SetSearchSpec(""Number String"",strMSISDNNumber);
		ExecuteQuery();
		
		if(strTransferSIM == 'Y'){
			if(FirstRecord()) {
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"", GetFieldValue(""Assoc Start Id""))
				ExecuteQuery();
				blnIsRecord = FirstRecord();
				while(blnIsRecord) {
					if(GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED"") || GetFieldValue(""Assigned Id"") != strContractId){
						Outputs.SetProperty(""ErrCode"",""RMSIFOM009"");				
						Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM009"",GetFieldValue(""Number String""),GetFieldValue(""Assigned To"")));
						TheApplication().RaiseErrorText(""EXIT"");
					}
					bcNumberMaster.SetFieldValue(""Assigned Id"",strNewAccntId);
					blnIsRecord = NextRecord();
				}
				bcNumberMaster.WriteRecord();
			} else {
				Outputs.SetProperty(""ErrCode"",""RMSIFOM010"");				
				Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM010""));
			}
			
		}
			
//----------------------------------------------------------------------------
//If 'Transfer SIM' is Yes, then Deassociating the SIM-IMSI-MSISDN numbers.
//----------------------------------------------------------------------------
		if(strTransferSIM != ""Y""){
			if(!FirstRecord()) {
				Outputs.SetProperty(""ErrCode"",""RMSIFOM010"");				
				Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM010""));
			} else if(CheckPrepaid(Inputs.GetProperty(""New SIM Number""))) {
				Outputs.SetProperty(""ErrCode"",""RMSIFOM011"");				
				Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM011""));
			} else {
			
				bsRMSDeAssociation = TheApplication().GetService(""RMS RMS Deassociate Function"");
				psInputs.SetProperty(""MSISDN Number"",strMSISDNNumber);
				psInputs.SetProperty(""Source"",""MSISDN Takeover"");
				psInputs.SetProperty(""Partial(Y/N)"",""Y"");	
				bsRMSDeAssociation.InvokeMethod(""DeAssociate"", psInputs, psOutputs);
		
	//----------------------------------------------------------------------------
	//Activate the new MSISDN number for the other customer
	//----------------------------------------------------------------------------
				psInputs.SetProperty(""MSISDN Number"", strMSISDNNumber);
				psInputs.SetProperty(""SIM Number"", strNewSIMNumber);
				psInputs.SetProperty(""Contract Id"", strNewAccntId);
				
				ActivateOrder(psInputs,Outputs,bcNumberMaster,bcNumberBlock,bcNumberAssocConcat,bcNumberAssocDetail,bcNumberMasterConcat);
			}
		}
	}
	
	} catch(e) {
		if(Outputs.GetProperty(""ErrCode"") == """") {
			Outputs.SetProperty(""ErrCode"",e.errCode);				
			Outputs.SetProperty(""ErrMessage"",e.errText);
		}
	} finally 
	{
//1.1 below
		psInputs = null;
		psOutputs = null; 
//1.1 above	
		bsRMSDeAssociation = null;
	}
	return(Outputs.GetProperty(""ErrCode""));
}
"/**************************************************************************************
* Name          : RMS Interface Order			 	          						  * 
* Author        : Mahindra British Telecom                                            *
* Description   : MSISDN Takeover Code File                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
* 1/11/2003	     1.0   	MBT      Created       05/11/2003          *
20060711       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function MSISDNTakeover_STC(&Inputs,&Outputs,bcNumberMaster)
{
	var bsRMSDeAssociation;
	var strMSISDNNumber;
	var strNewSIMNumber;
	var strTransferSIM;
	var strContractId;
	var strNewAccntId;
	var strMSISDNTakeover;
	var blnIsRecord;
	var psInputs 			= TheApplication().NewPropertySet();
	var psOutputs 			= TheApplication().NewPropertySet();
		
	strMSISDNNumber	  = Inputs.GetProperty(""MSISDN Number"");
	strTransferSIM 	  = ""N"";
	
	try{
	with(bcNumberMaster){
		ActivateField(""Number String"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Status""); 
		ActivateField(""Type Identifier"");
		ActivateField(""Assigned Id"");
		ActivateField(""Assigned To"");
		ActivateField(""Reserved To"");
			
//----------------------------------------------------------------------------
//Query Number Master with the Input as MSISDN Number and get the coresponding
//Associated numbers.Check whether the associated numbers are assigned to the 
//Account Id supplied.
//----------------------------------------------------------------------------
	
		ClearToQuery();
		SetSearchSpec(""Number String"",strMSISDNNumber);
		ExecuteQuery();
		
		if(strTransferSIM == 'Y'){
			if(FirstRecord()) {
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"", GetFieldValue(""Assoc Start Id""))
				ExecuteQuery();
				blnIsRecord = FirstRecord();
				while(blnIsRecord) {
					if(GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED"") || GetFieldValue(""Assigned Id"") != strContractId){
						Outputs.SetProperty(""ErrCode"",""RMSIFOM009"");				
						Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM009"",GetFieldValue(""Number String""),GetFieldValue(""Assigned To"")));
						TheApplication().RaiseErrorText(""EXIT"");
					}
					bcNumberMaster.SetFieldValue(""Assigned Id"",strNewAccntId);
					blnIsRecord = NextRecord();
				}
				bcNumberMaster.WriteRecord();
			} else {
				Outputs.SetProperty(""ErrCode"",""RMSIFOM010"");				
				Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM010""));
			}
			
		}
			
//----------------------------------------------------------------------------
//If 'Transfer SIM' is Yes, then Deassociating the SIM-IMSI-MSISDN numbers.
//----------------------------------------------------------------------------
		if(strTransferSIM != ""Y""){
			if(!FirstRecord()) {
				Outputs.SetProperty(""ErrCode"",""RMSIFOM010"");				
				Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM010""));
			} else {
			
				bsRMSDeAssociation = TheApplication().GetService(""RMS RMS Deassociate Function"");
				psInputs.SetProperty(""MSISDN Number"",strMSISDNNumber);
				psInputs.SetProperty(""Source"",""MSISDN Takeover"");
				psInputs.SetProperty(""NewPartnerCode"",Inputs.GetProperty(""TakeoverPartnerCode""));
				psInputs.SetProperty(""BlockedFor"",Inputs.GetProperty(""BlockedFor""));
				psInputs.SetProperty(""SIMTakeover"",Inputs.GetProperty(""SIMTakeover""));
				psInputs.SetProperty(""SIMTakeoverPartnerCode"",Inputs.GetProperty(""SIMTakeoverPartnerCode""));
				psInputs.SetProperty(""Partial(Y/N)"",""Y"");	
				bsRMSDeAssociation.InvokeMethod(""DeAssociate"", psInputs, psOutputs);
				//KT 20071611 Getting oupt args 
				var errcode = """";
				var errMSg  = """";
				errcode = psOutputs.GetProperty(""ErrCode"");
				errMSg  = psOutputs.GetProperty(""ErrMessage"");
				if (errcode != """")
				{
				Outputs.SetProperty(""ErrCode"",errcode);				
				Outputs.SetProperty(""ErrMessage"",errMSg);
				}
               //End KT 20071611
			}
		}
	}
	
	} catch(e) {
		if(Outputs.GetProperty(""ErrCode"") == """") {
			Outputs.SetProperty(""ErrCode"",e.errCode);				
			Outputs.SetProperty(""ErrMessage"",e.errText);
		}
	} finally 
	{
//1.1 below
		psInputs = null;
		psOutputs = null; 
//1.1 above	
		bsRMSDeAssociation = null;
	}
	return(Outputs.GetProperty(""ErrCode""));
}
"/**************************************************************************************
* Name          : RMS Interface Order			 	          						  * 
* Author        : Mahindra British Telecom                                            *
* Description   : MSISDN Takeover Code File                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		 Ver    By     	 Comments     Reviewed Date    *
***************************************************************************************
* 1/11/2003	     1.0   	MBT      Created       05/11/2003          *
20060711       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function MSISDNTakeover_hcpt(&Inputs,&Outputs,bcNumberMaster)
{
	var bsRMSDeAssociation;
	var strMSISDNNumber;
	var strNewSIMNumber;
	var strTransferSIM;
	var strContractId;
	var strNewAccntId;
	var strMSISDNTakeover;
	var blnIsRecord;
	var psInputs 			= TheApplication().NewPropertySet();
	var psOutputs 			= TheApplication().NewPropertySet();
		
	strMSISDNNumber	  = Inputs.GetProperty(""MSISDN Number"");
	strTransferSIM 	  = ""N"";
	
	try{
	with(bcNumberMaster){
		ActivateField(""Number String"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Status""); 
		ActivateField(""Type Identifier"");
		ActivateField(""Assigned Id"");
		ActivateField(""Assigned To"");
		ActivateField(""Reserved To"");
			
//----------------------------------------------------------------------------
//Query Number Master with the Input as MSISDN Number and get the coresponding
//Associated numbers.Check whether the associated numbers are assigned to the 
//Account Id supplied.
//----------------------------------------------------------------------------
	
		ClearToQuery();
		SetSearchSpec(""Number String"",strMSISDNNumber);
		ExecuteQuery();
		
		if(strTransferSIM == 'Y'){
			if(FirstRecord()) {
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"", GetFieldValue(""Assoc Start Id""))
				ExecuteQuery();
				blnIsRecord = FirstRecord();
				while(blnIsRecord) {
					if(GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED"") || GetFieldValue(""Assigned Id"") != strContractId){
						Outputs.SetProperty(""ErrCode"",""RMSIFOM009"");				
						Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM009"",GetFieldValue(""Number String""),GetFieldValue(""Assigned To"")));
						TheApplication().RaiseErrorText(""EXIT"");
					}
					bcNumberMaster.SetFieldValue(""Assigned Id"",strNewAccntId);
					blnIsRecord = NextRecord();
				}
				bcNumberMaster.WriteRecord();
			} else {
				Outputs.SetProperty(""ErrCode"",""RMSIFOM010"");				
				Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM010""));
			}
			
		}
			
//----------------------------------------------------------------------------
//If 'Transfer SIM' is Yes, then Deassociating the SIM-IMSI-MSISDN numbers.
//----------------------------------------------------------------------------
		if(strTransferSIM != ""Y""){
			if(!FirstRecord()) {
				Outputs.SetProperty(""ErrCode"",""RMSIFOM010"");				
				Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM010""));
			} else {
			
				bsRMSDeAssociation = TheApplication().GetService(""RMS RMS Deassociate Function"");
				psInputs.SetProperty(""MSISDN Number"",strMSISDNNumber);
				psInputs.SetProperty(""Source"",""MSISDN Takeover"");
				psInputs.SetProperty(""NewPartnerCode"",Inputs.GetProperty(""TakeoverPartnerCode""));
				psInputs.SetProperty(""BlockedFor"",Inputs.GetProperty(""BlockedFor""));
				psInputs.SetProperty(""SIMTakeover"",Inputs.GetProperty(""SIMTakeover""));
				psInputs.SetProperty(""SIMTakeoverPartnerCode"",Inputs.GetProperty(""SIMTakeoverPartnerCode""));
				psInputs.SetProperty(""Partial(Y/N)"",""Y"");	
				bsRMSDeAssociation.InvokeMethod(""DeAssociate"", psInputs, psOutputs);
				//KT 20071611 Getting oupt args 
				var errcode = """";
				var errMSg  = """";
				errcode = psOutputs.GetProperty(""ErrCode"");
				errMSg  = psOutputs.GetProperty(""ErrMessage"");
				if (errcode != """")
				{
				Outputs.SetProperty(""ErrCode"",errcode);				
				Outputs.SetProperty(""ErrMessage"",errMSg);
				}
               //End KT 20071611
			}
		}
	}
	
	} catch(e) {
		if(Outputs.GetProperty(""ErrCode"") == """") {
			Outputs.SetProperty(""ErrCode"",e.errCode);				
			Outputs.SetProperty(""ErrMessage"",e.errText);
		}
	} finally 
	{
//1.1 below
		psInputs = null;
		psOutputs = null; 
//1.1 above	
		bsRMSDeAssociation = null;
	}
	return(Outputs.GetProperty(""ErrCode""));
}
"/**************************************************************************************
* Name          : RMS RMS Interface Order Management NumberValidation  Method 		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : function fr validating Numbers                      		      	  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/12/2003	1.0   		Mahindra British Telecom   	Created       15/12/2003      *
**************************************************************************************/

function NumberValidation(&Inputs,&Outputs,&strGenLvl)
{
	var blnIsRecord;
	var strErrVal = """";
	
	var boNumberMaster 	= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumberMaster 	= boNumberMaster.GetBusComp(""RMS NM Number Enquiry"");

	try{
	with(bcNumberMaster){
		ActivateField(""Assigned To"");
		ActivateField(""Assigned Id"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Type Identifier"");
		ActivateField(""Number Id"");
		ActivateField(""SIM Generation Support"");
			
//-------------------------------------------------------------------------------------
//Query Number Master with the Input MSISDN Number and get the Associated numbers
//Check whether the associated numbers are assigned to the contract id supplied.
//-------------------------------------------------------------------------------------
		var test = Inputs.GetProperty(""ContractID"");
		var test1 = Inputs.GetProperty(""MSISDN"");
		ClearToQuery();
		SetSearchSpec(""Number String"", Inputs.GetProperty(""MSISDN""));
		ExecuteQuery(ForwardOnly);
		
		if(FirstRecord()) {
			strGenLvl = GetFieldValue(""SIM Generation Support"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"", GetFieldValue(""Assoc Start Id""));
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();
			
			while(blnIsRecord) {
				if(GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED"")) {
					Outputs.SetProperty(""ErrCode"",""RMSIFOM008"");				
					Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM008"",Inputs.GetProperty(""MSISDN"")));
					TheApplication().RaiseErrorText(""EXIT"");
				 
				} else if(GetFieldValue(""Assigned Id"") != Inputs.GetProperty(""ContractID"")) {
				   	Outputs.SetProperty(""ErrCode"",""RMSIFOM009"");
					Outputs.SetProperty(""ErrMessage"",TheAplication().LookupMessage(""User Defined Errors"",""RMSIFOM009"",Inputs.GetProperty(""MSISDN""),GetFieldValue(""Assigned To"")));
					TheApplication().RaiseErrorText(""EXIT"");
				}
				strGenLvl = GetFieldValue(""SIM Generation Support"");
				blnIsRecord = NextRecord();
			}
		}
	}
	} catch(e) {
		if(Outputs.GetProperty(""ErrCode"") == """") {
			Outputs.SetProperty(""ErrCode"",e.errCode);				
			Outputs.SetProperty(""ErrMessage"",e.errText);
		}
	} finally {
		bcNumberMaster = null;
		boNumberMaster = null;
	}


	return(Outputs.GetProperty(""ErrCode""));
}
"/**************************************************************************************
* Name          : RMS RMS Interface Order Management					 	          * 
* Author        : Mahindra British Telecom                                            *
* Description   : Service_PreInvokeMethod										      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/10/2003	1.0   		Mahindra British Telecom   	Created       29/10/2003      *
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	strAssocId = """";
	strMSISDNType = """";
	strMSISDNId = """";
	strMSISDNHLR = """";
	strSIMHLR = """";
	strSIMId = """";
	strSIMNumberDelim = """";
	strStatus = """";
	blnBlkUpdate	= TheApplication().GetProfileAttr(""RMS_BLOCK_UPDATION"") == ""Y""?true:false;
      
   	var boNumberMaster;
	var bcNumberMaster;

	var	boNumberScheme;
	var bcNumberScheme;
	var	bcNumberBlock;
	var bcNumAssgnDetail;
	
	var	boNumberAssociation;
	var	bcNumberAssocConcat;
	var	bcNumberAssocDetail;
	var	bcNumberMasterConcat;
	var strSIMAssocStartId = """";	
	
	var psInputs;
	var psOutputs;

	var intReturn = CancelOperation;	
	var strErrVal = """";
	
	psInputs   = TheApplication().NewPropertySet();
	psOutputs  = TheApplication().NewPropertySet();
	

	Outputs.SetProperty(""ErrCode"","""");
	Outputs.SetProperty(""ErrMessage"","""");
	
	
	
	
	   	boNumberMaster 	= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
		//bcNumberMaster 	= boNumberMaster.GetBusComp(""RMS NM Number Enquiry Interface"");
		bcNumberMaster 	= boNumberMaster.GetBusComp(""RMS NM Number Enquiry"");
// below 1.1
//		bcNumAssgnDetail = boNumberMaster.GetBusComp(""RMS NM Number Assigned Details"");
// above 1.1		
		boNumberScheme = TheApplication().GetBusObject(""RMS NM Number Scheme"");
// below 1.1
//		bcNumberScheme = boNumberScheme.GetBusComp(""RMS NM Number Scheme"");
// above 1.1
		bcNumberBlock  = boNumberScheme.GetBusComp(""RMS NM Number Block"");
	
		boNumberAssociation  =	TheApplication().GetBusObject(""RMS NM Number Association"");
		bcNumberAssocConcat  =	boNumberAssociation.GetBusComp(""RMS NM Association Number Type Display"");
		bcNumberAssocDetail  =  boNumberAssociation.GetBusComp(""RMS NM Number Association Detail"");
		bcNumberMasterConcat =  boNumberAssociation.GetBusComp(""RMS NM Number Master Concat"");
		

		bcNumberMaster.InvokeMethod(""SetAdminMode"",""TRUE"");
		with(bcNumberMaster) {
			ActivateField(""Current Date"");
			ActivateField(""Assigned Date"");
			ActivateField(""Reserved For"");
			ActivateField(""Number String"");
			ActivateField(""Num Mstr Number String"");
			ActivateField(""Calc Number Without Delimiter"");
			ActivateField(""IMSI Assoc"");
			ActivateField(""Status"");
			ActivateField(""HLR Id"");		
			ActivateField(""Assigned To"");
			ActivateField(""Assigned Date"");
			ActivateField(""Is Associated"");
			ActivateField(""Type Identifier"");
			ActivateField(""Type"");
			ActivateField(""Assoc Start Id"");
			ActivateField(""Status"");
			ActivateField(""Block Id"");
			ActivateField(""Record Blocked For"");
			ActivateField(""Record Blocking Date"");			
			ActivateField(""Using Type"");	
			ActivateField(""Using Type"");	
			ActivateField(""Status Date"");	
			ActivateField(""Reservation End Date"");	
			ActivateField(""Parent Assoc Id"");		
			ActivateField(""No. Of Assigned MSISDN"");		
			ActivateField(""No. Of SIM Card IMSI""); 					
			ActivateField(""SIM Generation Support""); 								
		}	
							
		
		switch(MethodName){
		
			case ""ActivateOrder"":

// below 1.1
				bcNumAssgnDetail = boNumberMaster.GetBusComp(""RMS NM Number Assigned Details"");
// above 1.1
				strErrVal = ActivateOrder(Inputs,Outputs,bcNumberMaster,bcNumberBlock,bcNumberAssocConcat,bcNumberAssocDetail,bcNumberMasterConcat,bcNumAssgnDetail);
				break;
				
			case ""ActivateOrdValidation"":
					
				strErrVal = ActivateOrderValidation(Inputs,Outputs,bcNumberMaster,strSIMAssocStartId);
				break;

			case ""ActivatePrepaidOrder"":
					
				strErrVal = ActivatePrepaidOrder(Inputs,Outputs,bcNumberMaster);
				break;

			case ""TerminateOrder"":

// below 1.1
				bcNumberScheme = boNumberScheme.GetBusComp(""RMS NM Number Scheme"");
// above 1.1
				if(Inputs.GetProperty(""MSISDNTakeover"") == ""Y"") 
					strErrVal = MSISDNTakeover_STC(Inputs,Outputs,bcNumberMaster);
				else
					strErrVal = TerminateOrder(Inputs,Outputs,bcNumberMaster,bcNumberScheme,bcNumberMasterConcat);
				break;
					
			case ""MSISDNTakeover"":
			
				strErrVal = MSISDNTakeover(Inputs,Outputs,bcNumberMaster,bcNumberBlock,bcNumberAssocConcat,bcNumberAssocDetail,bcNumberMasterConcat);
	
				break;
			
			case ""CancelOrder"":
				
				strErrVal = CancelOrder(Inputs,Outputs);
				break;	

			case ""ContractTakeover"":

				strErrVal = ContractTakeover(Inputs,Outputs,bcNumberMaster);
				break;			



			default:
				intReturn = ContinueOperation;
				break;
					
		}

		
	bcNumberMaster.InvokeMethod(""SetAdminMode"",""FALSE"");
		

		bcNumberMaster 			= null;
		bcNumAssgnDetail		= null;
		boNumberMaster 			= null;
		
	 	bcNumberScheme 			= null;
		bcNumberBlock			= null;
		boNumberScheme 			= null;
			
		bcNumberAssocConcat 	= null;
		bcNumberAssocDetail 	= null;
		bcNumberMasterConcat	= null;
		boNumberAssociation 	= null;
		
		psInputs				= null;
		psOutputs				= null;
	

	
		//This can be commented out of error handling is done in workflow
	/*if(Outputs.GetProperty(""ErrCode"") != """")
		TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));*/ // KT 04-07-2006
		
	return(intReturn);		
}
"/**************************************************************************************
* Name          : RMS Interface Order			 	          						  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Terminate Order			                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 1/11/2003	1.0   		Mahindra British Telecom   	Created       05/11/2003          *
**************************************************************************************/
function TerminateOrder(&Inputs,&Outputs,&bcNumberMaster,&bcNumberScheme,&bcNumberMasterConcat)
{
    var strNumber 			= new Array();
    
	var dtQuarantineDateObj = new Date();
	
    var intRecCnt 			= 0;
    var intArrlen			= 0;
	var intReturn 			= ContinueOperation;
	
	var strErrVal 			= """";
	var strFromStatus		= """";
	var strToStatus			= """";
    
    var blnIsRecord			= false;
	
    var psInputs 			= TheApplication().NewPropertySet();
	var psOutputs 			= TheApplication().NewPropertySet();
	var bsNumberBlock 		= TheApplication().GetService(""RMS RMS Block Calc"");
    //below 1.1
	var strQuarantinePeriod = """";
 	var strQuarantineUOM    = """";
	var strQuarantineEvent= TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Service Termination"");     
	//above 1.1
//-------------------------------------------------------------------------------
//Query Number Master with MSISDN number and get all the associated numbers.
//Check whether the associated numbers are assigned to the account id supplied.
//-------------------------------------------------------------------------------
	try{
	with(bcNumberMaster) {
		ActivateField(""MSISDN Number"");	
		ActivateField(""Assigned Id"");
        ActivateField(""Assoc Start Id"");
        ActivateField(""Quarantine Date"");
        ActivateField(""Reserved To"");
        ActivateField(""Reservation End Date"");
        ActivateField(""Assigned Date"");
        ActivateField(""Available Date"");
		//below 1.1
		//ActivateField(""Quarantine Period"");
		//ActivateField(""Quarantine UOM"");
		  ActivateField(""Number String"");
		//above 1.1
		ActivateField(""Is Associated"");
		ActivateField(""Allocation Id"");
		ActivateField(""Reserve Id"");
		ActivateField(""Block Id"");
		ActivateField(""Scheme Id"");
		ActivateField(""Current Date"");
		ActivateField(""Disconnect Type"");
		ActivateField(""Reuse After Disconnect"");
		ActivateField(""Status Date"");
		ActivateField(""Using Type"");
		
		ClearToQuery();
		SetSearchSpec(""Number String"", Inputs.GetProperty(""MSISDN Number""));
		ExecuteQuery();
		
        if(FirstRecord()) {
			if(GetFieldValue(""Is Associated"")==""Y"")
				GetAssocNumbers(bcNumberMasterConcat,strNumber,bcNumberMaster,intRecCnt,bcNumberMasterConcat)
			
			for(intArrlen = 0;intArrlen <  getArrayLength(strNumber);intArrlen++) {
				ClearToQuery();
				SetSearchSpec(""Number String"", strNumber[intArrlen]);
				ExecuteQuery();
				
				if(FirstRecord()) {
					if(GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED"") || GetFieldValue(""Assigned Id"") != Inputs.GetProperty(""Contract Id"")){
						Outputs.SetProperty(""ErrCode"",""RMSIFOM008"");				
						Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM008"",strNumber[intArrlen]));
						TheApplication().RaiseErrorText(""EXIT"");	
					}	
				}
			}
		}
		
		for(intArrlen = 0;intArrlen <  getArrayLength(strNumber);intArrlen++) {
			ClearToQuery();
			SetSearchSpec(""Number String"", strNumber[intArrlen]);
			ExecuteQuery();
			if(FirstRecord()) {
				strFromStatus = GetFieldValue(""Status"");
					//below 1.1
					/*
					if(GetFieldValue(""Reuse After Disconnect"") == ""Y"") {
					strToStatus = TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE"");
					SetFieldValue(""Quarantine Date"",GetFieldValue(""Current Date""));
					
					
						with(bcNumberScheme) {
						//ms 10/05/2006 ActivateField(""Max. Ter. Quarantine UOM"");
						//ms 10/05/2006 ActivateField(""Max. Ter. Quarantine Period"");
						//ActivateField(""Quarantine UOM"");
						//ActivateField(""Quarantine Period"");
						ClearToQuery();
						SetSearchSpec(""Id"", bcNumberMaster.GetFieldValue(""Scheme Id""));
						ExecuteQuery();
						if(FirstRecord()) { 
							//ms 10/05/2006 dtQuarantineDateObj = CalcAvailableDate(GetFieldValue(""Max. Ter. Quarantine UOM""), GetFieldValue(""Max. Ter. Quarantine Period""), bcNumberMaster);
							dtQuarantineDateObj = CalcAvailableDate(GetFieldValue(""Quarantine UOM""), GetFieldValue(""Quarantine Period""), bcNumberMaster);
						}
					}
					
				} */
				//above 1.1
				if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")) {
					SetFieldValue(""Quarantine Date"",GetFieldValue(""Current Date""));
					SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
					//below 1.1
					/*with(bcNumberScheme) {
						//ms 10/05/2006 ActivateField(""Max. Ter. Quarantine UOM"");
						//ms 10/05/2006 ActivateField(""Max. Ter. Quarantine Period"");
						
						ActivateField(""Quarantine UOM"");
						ActivateField(""Quarantine Period"");
						ClearToQuery();
						SetSearchSpec(""Id"", bcNumberMaster.GetFieldValue(""Scheme Id""));
						ExecuteQuery();
						if(FirstRecord()) {
							//ms 10/05/2006 dtQuarantineDateObj = CalcAvailableDate(GetFieldValue(""Max. Ter. Quarantine UOM""), GetFieldValue(""Max. Ter. Quarantine Period""), bcNumberMaster);
							dtQuarantineDateObj = CalcAvailableDate(GetFieldValue(""Quarantine UOM""), GetFieldValue(""Quarantine Period""), bcNumberMaster);
						}
					}*/
					GetQuarantineDetails(Inputs,bcNumberMaster.GetFieldValue(""Scheme Id""),bcNumberMaster.GetFieldValue(""Number String""), strQuarantineEvent);
					strQuarantinePeriod= Inputs.GetProperty(""Quarantine Period"");
					strQuarantineUOM = Inputs.GetProperty(""Quarantine UOM"");
					dtQuarantineDateObj = CalcAvailableDate(strQuarantineUOM, strQuarantinePeriod, bcNumberMaster);
					//above 1.1
					strToStatus = TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE"");
					
					SetUserProperty(""SuppressScript"",""Y"");
					SetFieldValue(""Status"", strToStatus);
					SetFieldValue(""Assigned Id"", """");
        			SetFieldValue(""Reservation End Date"","""");
        			SetFieldValue(""Assigned Date"","""");
					SetFieldValue(""Available Date"",DateToString(dtQuarantineDateObj));
					SetFieldValue(""Disconnect Type"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_DISCONNECT_TYPE"", ""T""));
					WriteRecord();
					SetUserProperty(""SuppressScript"",""N"");									
				
				}
				else if (GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") || GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"")) {
					
					strFromStatus 	= GetFieldValue(""Status"");
					strToStatus 	= TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED"");
					
					SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));	
					SetFieldValue(""Assigned Id"", """");
        			SetFieldValue(""Assigned Date"","""");
					SetFieldValue(""Disconnect Type"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_DISCONNECT_TYPE"", ""T""));
					SetFieldValue(""Status"", strToStatus);
					
					WriteRecord();
				
				}
				if(TheApplication().GetProfileAttr(""RMS_BLOCK_UPDATION"") == ""Y"") {
					psInputs.SetProperty(""From Status"", strFromStatus);
					psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
					psInputs.SetProperty(""To Status"",strToStatus);		
					bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);
				}
			
			}
		}
	}
	} catch(e) {
		if(Outputs.GetProperty(""ErrCode"") == """") {
			Outputs.SetProperty(""ErrCode"",e.errCode);				
			Outputs.SetProperty(""ErrMessage"",e.errText);
		}
	
	} finally {
		psInputs = null;
		psOutputs = null;
		
		bsNumberBlock = null;
	}
	return(strErrVal);
}
"


var strAssocId;
var strMSISDNType;
var strMSISDNId;
var strMSISDNHLR;
var strSIMHLR;
var strSIMId;
var strSIMNumberDelim;
var strStatus;
var blnBlkUpdate;"
"/**************************************************************************************
* Name          : RSM Interface Order                     * 
* Author        : Mahindra British Telecom                                            *
* Description   : Activate Order Code File                                *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Ver    By         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003 1.0    MBT      Created       01/11/2003      *
* 14/06/2004 1.1    Manoj Modified   14/06/2004   *
20060711      | 1.2  | Prasad | Siebel ES SCR1, Objects Destroyed
* 20070322   | 1.3  | Manoj  | performance tuning

**************************************************************************************/
function ActivateOrder(&Inputs,&Outputs,&bcNumberMaster,&bcNumberBlock,&bcNumberAssocConcat,&bcNumberAssocDetail,&bcNumberMasterConcat,bcNumAssgnDetail)
{
 var strAssocStartId  = """";
 var strConcatNumber  = """";
 var strConcatType  = """";
 var strConcatId   = """";
 var strSearchExpr  = """";
 var strErrVal    = """";
 var strParAssId   = """";
 var strAssocMstrId  = """";
 var strAssSeqNo   = """";
 var strSIMAssocStartId  = """";
 var strParentIMSIId  = """";
 var bcAssocMstrCnct;
 var boNumberAssoc;
    var psInputs    = TheApplication().NewPropertySet();
 var psOutputs    = TheApplication().NewPropertySet();
 var bsNumberBlock;
 var blnIsRecord   = false;
 var blnIsDtlRecord  = false;
 var blnPerformance  = false;
 boNumberAssoc     = TheApplication().GetBusObject(""RMS NM Number Association"");
 bcAssocMstrCnct   = boNumberAssoc.GetBusComp(""RMS NM Number Association Master Concat"");
// try{
//----------------------
//Validate ActivateOrder
//----------------------

 ActivateOrderValidation(Inputs, Outputs, bcNumberMaster,strSIMAssocStartId);
 
 if(Outputs.GetProperty(""ErrCode"") != """") {
  //TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));
  strErrVal = Outputs.GetProperty(""ErrMessage"");
  return(strErrVal);
  }
 
//--------------------------------------------------------------------- 
//Query Association Detail based on the SIM number and get the details
//like ConcatId and Parent Association Id.
//---------------------------------------------------------------------
 if(Inputs.GetProperty(""GenLevel"") != """")
  var strConcatId = GetConcatId(bcNumberMaster,Inputs.GetProperty(""GenLevel""),bcAssocMstrCnct,strSIMAssocStartId,bcNumberMasterConcat,strParentIMSIId);
 
 with(bcNumberAssocDetail){
  ActivateField(""Source Number with Chk Sum"");
  ActivateField(""Source Num Id"");
  ActivateField(""Association Seq Num"");
  ActivateField(""Number Association Concat Id"");
  ActivateField(""Association Id"");
  
  ClearToQuery();
  SetSearchSpec(""Source Number with Chk Sum"",strSIMNumberDelim);
  if(strConcatId!="""") 
   SetSearchSpec(""Number Association Concat Id"",strConcatId);
  ExecuteQuery();
  blnIsDtlRecord = FirstRecord();
  
  if(blnIsDtlRecord)  {
   strAssocStartId = GetFieldValue(""Source Num Id"");
   strParAssId  = GetFieldValue(""Id""); 
   strConcatId  = GetFieldValue(""Number Association Concat Id""); 
   strAssSeqNo  = GetFieldValue(""Association Seq Num"");
   strAssocMstrId = GetFieldValue(""Association Id"");
  }
  while(blnIsDtlRecord) {
   ClearToQuery();
   SetSearchSpec(""Parent Ass Id"",strParAssId);
   ExecuteQuery();
   blnIsDtlRecord = FirstRecord();
   if(blnIsDtlRecord) {
    strParAssId = GetFieldValue(""Id"");
    strAssSeqNo = GetFieldValue(""Association Seq Num"");
   }
  }
 }


//---------------------------------------------------------------------------------------------------
//Create new record in number association detail for MSISDN number If MSISDN is not alreay associated.
//---------------------------------------------------------------------------------------------------
 if(strAssocId == """") {
 
  with(bcNumberAssocDetail) {
   NewRecord(1);
   SetFieldValue(""Destination Num Id"",strMSISDNId);
   SetFieldValue(""Number Association Concat Id"",strConcatId);
   SetFieldValue(""Parent Ass Id"",strParAssId);    
   SetFieldValue(""Association Seq Num"",strAssSeqNo)
   WriteRecord();
  }

  with(bcNumberAssocConcat) {
   ActivateField(""Associated Number"");
   ActivateField(""Associated Type"");
   ActivateField(""Assoc Start Id"");
   ActivateField(""Status"");
   ClearToQuery();
   SetSearchSpec(""Id"",strConcatId);
   ExecuteQuery();
   if(FirstRecord()) {
    strConcatNumber = GetFieldValue(""Associated Number"") + "" / "" + Inputs.GetProperty(""MSISDN Number"");
    strConcatType   = GetFieldValue(""Associated Type"") + "" / "" + strMSISDNType;
    SetFieldValue(""Associated Number"",strConcatNumber);
    SetFieldValue(""Associated Type"",strConcatType);
    SetFieldValue(""Assoc Start Id"",strAssocStartId);
    SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED""));  
    WriteRecord();
   }
  }
 // this will be useful in future. This is not required now as in association the start numbers
 //are constrained based on status and not on Flag value
  if(strAssocMstrId != """") {
   with(bcAssocMstrCnct) {
    ActivateField(""Flag"");
    ClearToQuery();
    SetSearchSpec(""Association Id"",strAssocMstrId);
    SetSearchSpec(""Concat Id"",strConcatId);
    ExecuteQuery(ForwardOnly);
    
    if(FirstRecord()) {
     SetFieldValue(""Flag"",""Y"");
     WriteRecord();
    }
   }
  }
  
//------------------------------------------------------------------------
//Creating a new record in the number master and concat intersection table.
//------------------------------------------------------------------------ 

  with(bcNumberMasterConcat) {
   NewRecord(1);
   SetFieldValue(""Concat Id"",bcNumberAssocConcat.GetFieldValue(""Id"")); 
   SetFieldValue(""Number Id"",strMSISDNId);
   WriteRecord();
  }
 } 
 
//------------------------------------------------------
//Update the SIM,IMSI and MSISDN numbers in number mater.
//------------------------------------------------------

 with(bcNumberMaster) {
  //1.3 below
  ClearToQuery()
  SetSearchSpec(""Num Mstr Number String"",Inputs.GetProperty(""MSISDN Number""));
  ExecuteQuery(ForwardOnly);
  if(FirstRecord() && (strAssocStartId != """")) {
   SetFieldValue(""Assoc Start Id"",strAssocStartId);
   WriteRecord();
   blnPerformance = true;
  }
  
  if(blnPerformance) {
   strSearchExpr = ""[Assoc Start Id] = '"" + strAssocStartId + ""'"";
  } else {
   strSearchExpr = ""[Num Mstr Number String] = '""+Inputs.GetProperty(""SIM Number"")+""'"";
   strSearchExpr += "" OR [Num Mstr Number String] = '""+Inputs.GetProperty(""MSISDN Number"")+""'""; 
   strSearchExpr = strSearchExpr + "" OR [Assoc Start Id] = '"" + strAssocStartId + ""'""; 
  }//1.3 above
  ActivateField(""No. Of Assigned MSISDN"");
  ActivateField(""Parent Assoc Id"");
  ClearToQuery();
  SetSearchExpr(strSearchExpr);
  ExecuteQuery(ForwardOnly);
  
  blnIsRecord = FirstRecord();
  while(blnIsRecord) {
   SetFieldValue(""Assigned Date"",GetFieldValue(""Current Date""));  
   strStatus = GetFieldValue(""Status"");
   SetFieldValue(""Assigned Id"",Inputs.GetProperty(""Contract Id""));
   SetFieldValue(""Using Type"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_USING_TYPE"", ""ACTIVATION""));

   with(bcNumAssgnDetail){
    NewRecord(1);
    SetFieldValue(""Assigned Id"",Inputs.GetProperty(""Contract Id""));
    SetFieldValue(""Number Id"",bcNumberMaster.GetFieldValue(""Id""));
    WriteRecord();
   }
   
   if(GetFieldValue(""Num Mstr Number String"") == Inputs.GetProperty(""MSISDN Number"")) {
    SetFieldValue(""Assoc Start Id"",strAssocStartId);
    SetFieldValue(""Parent Assoc Id"",strParentIMSIId);
    SetFieldValue(""Is Associated"",""Y"");
    SetFieldValue(""Reservation End Date"","""");
    SetFieldValue(""Record Blocking Date"","""");
    if(Inputs.GetProperty(""GenLevel"")!="""")
     SetFieldValue(""SIM Generation Support"",Inputs.GetProperty(""GenLevel""));
   }
   if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
    SetFieldValue(""No. Of Assigned MSISDN"",ToInteger(GetFieldValue(""No. Of Assigned MSISDN""))+1);
   SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
   //After setting the values set the status as fields may become readonly after setting the status
   SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED""));
   WriteRecord();
   
   //Update the Block counter for the number
   if(blnBlkUpdate) {
    bsNumberBlock = TheApplication().GetService(""RMS RMS Block Calc"");
    psInputs.SetProperty(""From Status"", strStatus);
    psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
    psInputs.SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED""));
    bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);   
   }
   blnIsRecord = NextRecord();
  }
 }
// } catch(e) {
//  if(Outputs.GetProperty(""ErrCode"") == """") {
//   Outputs.SetProperty(""ErrCode"",e.errCode);    
//   Outputs.SetProperty(""ErrMessage"",e.errText);
//  }
// } finally {
//  psInputs   = null;
//  psOutputs   = null;
//  bsNumberBlock = null;
//  bcAssocMstrCnct = null;
//  boNumberAssoc = null;
// }
//1.2 below
 bcAssocMstrCnct = null;
 boNumberAssoc = null;
 bsNumberBlock = null;
 psInputs = null;
 psOutputs = null;
//1.2 above
 return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS RMS Interface Order Management ActivateOrderValidation  Method * 
* Author        : Mahindra British Telecom                                            *
* Description   : Validate before Activate Order operation                     *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Ver    By      Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/12/2003 1.0    MBT      Created       15/12/2003      *
* 08/06/05      1.1    Gautam 08/06/05        *   
20060711      | 1.2  | Prasad | Siebel ES SCR1, Objects Destroyed
201010219     | 1.3  | Kalyana | Added additional validations for proper SIM with check sum,Invalid MSISDN,Blank SIM and Blank MSISDN
**************************************************************************************/

function ActivateOrderValidation(&Inputs, &Outputs, &bcNumberMaster,&strSIMAssocStartId)
{
 //---------------------------------------------------------
 //Query Number master to get the MSISDN Id and number type.
 //---------------------------------------------------------
 var strSearchExpr   = """";
 var strStatus    = """";
// var strSIMAssocStartId   = """";
 var strMSISDNAssocStartId  = """";

 var blnIsRecord    = false;
 var blnValidate = TheApplication().GetProfileAttr(""NOValidate"");
 var boSysPref = TheApplication().GetBusObject(""System Preferences"");
 var bcSysPref = boSysPref.GetBusComp(""System Preferences""); 
 
 //Below 1.3 Kalyana 20100219
 if ((Inputs.GetProperty(""SIM Number"") == null) || (Inputs.GetProperty(""SIM Number"") == """"))
 {
 Outputs.SetProperty(""ErrCode"",""RMSORD011"");    
 Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSORD011""));
 return;
 }
 if ((Inputs.GetProperty(""MSISDN Number"") == null) || (Inputs.GetProperty(""MSISDN Number"") == """"))
 {
 Outputs.SetProperty(""ErrCode"",""RMSAUC009"");    
 Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC009""));
 return;
 }
  
     with(bcNumberMaster){
     ActivateField(""Assoc Start Id"");
     ClearToQuery();
     SetSearchSpec(""Num Mstr Number String"",Inputs.GetProperty(""SIM Number""));
  ExecuteQuery();
  blnIsRecord = FirstRecord();
     if (!blnIsRecord){
     
          Outputs.SetProperty(""ErrCode"",""RMSORD011"");    
       Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSORD011""));
       return;
     }
     else
     {
     var strSIMAssocId = GetFieldValue(""Assoc Start Id"");
     if ((strSIMAssocId == null) || (strSIMAssocId == """"))
     {
     Outputs.SetProperty(""ErrCode"",""RMSACT002"");    
  Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSACT002""));
  return;
     }
     }
     ClearToQuery();
     SetSearchSpec(""Num Mstr Number String"",Inputs.GetProperty(""MSISDN Number""));
     ExecuteQuery();
     blnIsRecord = FirstRecord();
     if(!blnIsRecord)
            {
            Outputs.SetProperty(""ErrCode"",""RMSAUC009"");    
         Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC009""));
   return;
            }
  if((GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED"")) && (GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"")))
    {
    Outputs.SetProperty(""ErrCode"",""RMSACT006"");    
         Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSACT006""));
   return;
    }
  
           }
     //Above 1.3 Kalyana 20100219
 
  
 
 if((Inputs.GetProperty(""SIM Number""))!=""""){
  strSearchExpr = ""[Num Mstr Number String] = '""+Inputs.GetProperty(""SIM Number"")+""'"";
  //strSearchExpr = ""[Number String] = '""+Inputs.GetProperty(""SIM Number"")+""'"";
 }
 if((Inputs.GetProperty(""MSISDN Number""))!=""""){
  if(strSearchExpr!="""") 
   strSearchExpr = strSearchExpr + "" OR [Num Mstr Number String] = '""+Inputs.GetProperty(""MSISDN Number"")+""'"";
   //strSearchExpr = strSearchExpr + "" OR [Number String] = '""+Inputs.GetProperty(""MSISDN Number"")+""'"";
  else
   strSearchExpr = ""[Num Mstr Number String] = '""+Inputs.GetProperty(""MSISDN Number"")+""'"";
   //strSearchExpr = ""[Number String] = '""+Inputs.GetProperty(""MSISDN Number"")+""'"";
 } 
 try
 {
 with(bcNumberMaster) 
 {
  ClearToQuery()
  SetSearchExpr(strSearchExpr);
  ExecuteQuery(ForwardOnly);
  
  blnIsRecord = FirstRecord();
  while(blnIsRecord) 
  {
//--------------------------------------------------------------------------------------------------------
//Check whether the MSISDN number has status Reserved or Overdue and it is reserved to proper personal id.
//--------------------------------------------------------------------------------------------------------   
   strStatus = GetFieldValue(""Status"");
   
   if(GetFieldValue(""Num Mstr Number String"") == Inputs.GetProperty(""MSISDN Number"")){
    if(GetFieldValue(""Is Associated"") == ""Y"") {
     strAssocId = GetFieldValue(""Assoc Start Id"");
     strMSISDNAssocStartId = strAssocId;
     
     if(strStatus != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"") && blnValidate!=""Y"") {
      Outputs.SetProperty(""ErrCode"",""RMSIFOM001"");    
      Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM001"",Inputs.GetProperty(""MSISDN Number"")));
      //TheApplication().RaiseErrorText(""EXIT"");
         return;
     }
    
    } else {
     if(strStatus != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED"")
             &&
     strStatus != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""OVERDUE"")
     
           && 
//---------------------------------------------           
//Added for EE as MSISDN can be allocated. v1.1
//---------------------------------------------
     strStatus != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"") && blnValidate!=""Y"") {
           
      Outputs.SetProperty(""ErrCode"",""RMSIFOM002"");    
      Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM002"",Inputs.GetProperty(""MSISDN Number"")));
      return;
      //TheApplication().RaiseErrorText(""EXIT""); 
     }

     if(Inputs.GetProperty(""Contract Personal Id"")!=""""){
      if((GetFieldValue(""Reserved For"") != Inputs.GetProperty(""Contract Personal Id"")) 
           &&
      (GetFieldValue(""Record Blocked For"") != Inputs.GetProperty(""Contract Personal Id""))) {
       Outputs.SetProperty(""ErrCode"",""RMSIFOM003"");    
       Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM003"",Inputs.GetProperty(""MSISDN Number""),Inputs.GetProperty(""Contract Personal Id"")));
       //TheApplication().RaiseErrorText(""EXIT""); 
       return;
      }
     }
    }
    strMSISDNType = GetFieldValue(""Type"");
    strMSISDNId   = GetFieldValue(""Id"");
    strMSISDNHLR  = GetFieldValue(""HLR Id"");
   }
   
//-------------------------------------------------------------------------------------------
//Check whether the SIM number has status allocated and it is associated with an imsi number.
//-------------------------------------------------------------------------------------------
    
   if(GetFieldValue(""Num Mstr Number String"") == Inputs.GetProperty(""SIM Number"")){
   // if(GetFieldValue(""Number String"") == Inputs.GetProperty(""SIM Number"")){
    strSIMAssocStartId = GetFieldValue(""Assoc Start Id"");
    if((GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"")) && blnValidate!=""Y"" && GetFieldValue(""No. Of Assigned MSISDN"") == 0) {
     Outputs.SetProperty(""ErrCode"",""RMSIFOM004"");    
     Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM004"",Inputs.GetProperty(""SIM Number"")));
     //TheApplication().RaiseErrorText(""EXIT"");
     return;
     }
    
     if((GetFieldValue(""Is Associated"") != ""Y"" || GetFieldValue(""IMSI Assoc"") != ""Y"") && blnValidate!=""Y"") {
      Outputs.SetProperty(""ErrCode"",""RMSIFOM005"");    
     Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM005"",Inputs.GetProperty(""SIM Number"")));
     //TheApplication().RaiseErrorText(""EXIT"");
     return;
     }

     strSIMHLR = GetFieldValue(""HLR Id"");
     strSIMId  = GetFieldValue(""Id"");
     strSIMNumberDelim = GetFieldValue(""Num Mstr Number String"");
   }    
   blnIsRecord = NextRecord();
  } 
  
//----------------------------------------------------------------------------------------------------
//Getting the value from System Preference to idebtify whether HLR validation needs to be done or not.
//----------------------------------------------------------------------------------------------------- 
 with(bcSysPref) {
  ActivateField(""Name"");
  ActivateField(""Value"");  
  ClearToQuery();
  SetSearchSpec(""Name"",""RMSHLRCHECK"");
  SetSearchSpec(""Value"",""Y"");
  ExecuteQuery();
  
  if(FirstRecord()) {  
   if(strMSISDNHLR != strSIMHLR && blnValidate!=""Y"") {
    Outputs.SetProperty(""ErrCode"",""RMSIFOM006"");
    Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM006""));
    //TheApplication().RaiseErrorText(""EXIT"");
    return;
   }
  }
 }
  
  if(strMSISDNAssocStartId != """") {
   if(strMSISDNAssocStartId != strSIMAssocStartId && blnValidate != ""Y"") {
    Outputs.SetProperty(""ErrCode"",""RMSIFOM007"");    
    Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM007""));
    //TheApplication().RaiseErrorText(""EXIT"");
    return;
   }
  }
// =========================== COMMENTED FOR FUTURE USE Ver 2.0 =============================/  
//--------------------------------------------------------------------
//Removed the check as SIM can be associated with more MSISDN numbers.
//--------------------------------------------------------------------
/*  if(strSIMAssocStartId != """") {
   with(bcNumberMaster) {
    ClearToQuery();
    SetSearchSpec(""Assoc Start Id"",strSIMAssocStartId);
    SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""));
    ExecuteQuery();
    
    if(FirstRecord()) {
     if(GetFieldValue(""Number String"") != Inputs.GetProperty(""MSISDN Number"")) {
      Outputs.SetProperty(""ErrCode"",""RMSIFOM015"");    
      Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM015""));
      TheApplication().RaiseErrorText(""EXIT""); 
     }
    }
   }
  }*/
 } 
 } catch(e) {
  if(Outputs.GetProperty(""ErrCode"") == """") {
   Outputs.SetProperty(""ErrCode"",e.errCode);    
   Outputs.SetProperty(""ErrMessage"",e.errText);
  }
 }
 finally 
 {
//1.2 below
  bcSysPref = null;
  boSysPref = null;
//1.2 above 
 }
}
"/**************************************************************************************
* Name          : RMS RMS Interface Order Management ActivatePrepaidOrder Method    * 
* Author        : Mahindra British Telecom                                            *
* Description   : MS RMS Interface Order Management                       *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Ver    By       Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/12/2003 1.0    MBT      Created       15/12/2003      *
* 08/06/05      1.1    Gautam 08/06/05        *   
20060711      | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
*************************************************************************************/
function ActivatePrepaidOrder(Inputs,Outputs,bcNumberMaster)
{
 var bsNumberBlock;
 var strStatus;
 var blnIsRecord;
 var strSIMAssocStartId = """";
 var strErrval = """";
    var psInputs    = TheApplication().NewPropertySet();
 var psOutputs    = TheApplication().NewPropertySet();
 with(bcNumberMaster) 
 {
   ActivateField(""Status"");
   ActivateField(""Current Date"");
   ActivateField(""Assoc Start Id"");   
   SetViewMode(AllView);
   ClearToQuery()
   SetSearchSpec(""Number String"",Inputs.GetProperty(""MSISDN Number""));
   ExecuteQuery(ForwardOnly);
   if(FirstRecord())
    var strSIMAssocStartId = GetFieldValue(""Assoc Start Id"");
  
   if(strSIMAssocStartId != """") {
    SetViewMode(AllView); 
    ClearToQuery()
    SetSearchSpec(""Assoc Start Id"",strSIMAssocStartId);
    ExecuteQuery(ForwardOnly);
    blnIsRecord = FirstRecord();
    while(blnIsRecord) {
     SetFieldValue(""Assigned Date"",GetFieldValue(""Current Date""));  
     strStatus = GetFieldValue(""Status"");
     SetFieldValue(""Assigned Id"",Inputs.GetProperty(""Contract Id""));
     SetFieldValue(""Using Type"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_USING_TYPE"", ""ACTIVATION""));
     
     if(GetFieldValue(""Number String"") == Inputs.GetProperty(""MSISDN Number"")) {
      SetFieldValue(""Reservation End Date"","""");
      SetFieldValue(""Record Blocking Date"","""");
     }
     SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
     //After setting the values set the status as fields may become readonly after setting the status
     SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED""));
     WriteRecord();
     
     //Update the Block counter for the number
     if(blnBlkUpdate) {
      bsNumberBlock = TheApplication().GetService(""RMS RMS Block Calc"");
      psInputs.SetProperty(""From Status"", strStatus);
      psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
      psInputs.SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED""));
      bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);   
     }
     blnIsRecord = NextRecord();
    }
   }
 }
//1.2 below
 bsNumberBlock = null;
 psInputs = null;
 psOutputs = null;
//1.2 above 
 return(strErrval);
}
"/**************************************************************************************
* Name          : RMS Interface Order                       * 
* Author        : Mahindra British Telecom                                            *
* Description   : Calculate Available Date                                *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 1/11/2003 1.0     Mahindra British Telecom    Created       05/11/2003          *
**************************************************************************************/
function CalcAvailableDate(QuarUOM, QuarPeriod, &bcNumberMaster)
{
 
 var dtSysDate    = Clib.time();
 var dtSysDateObj   = Date.fromSystem(dtSysDate);
 
 var dtQuarantineDate  = bcNumberMaster.GetFieldValue(""Quarantine Date"");
 var dtQuarantineDateObj = new Date(dtQuarantineDate);
 
    switch (QuarUOM) {

       case ""Days"": 
   dtQuarantineDateObj.setDate(ToInteger(dtQuarantineDateObj.getDate()) + ToInteger(QuarPeriod));
         break;
              
     case ""Months"": 
   dtQuarantineDateObj.setMonth(ToNumber(ToNumber(dtQuarantineDateObj.getMonth()) + ToNumber(QuarPeriod)));
   break;
  
     case ""Weeks"":
   dtQuarantineDateObj.setDate(dtQuarantineDateObj.getDate() + (QuarPeriod * 7));
         break;
     
     case ""Year"": 
     dtQuarantineDateObj.setFullYear(ToNumber(ToNumber(dtQuarantineDateObj.getFullYear()) + ToNumber(QuarPeriod)));
   break;
   }
   
   return(dtQuarantineDateObj);
}
"/**************************************************************************************
* Name          : RMS Interface Order                     * 
* Author        : Mahindra British Telecom                                            *
* Description   : Cancel Order File                                   *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 31/10/2003 1.0     MBT   Created       01/11/2003             *
**************************************************************************************/

function CancelOrder(&Inputs,&Outputs)
{

 var psInputs = TheApplication().NewPropertySet();
 var psOutputs = TheApplication().NewPropertySet();
 
 var bsRMSDeAssociation;
 var intRetValue = CancelOperation;
 var strErrVal = """";
 var strGenLvl = """";
//-------------------------------------------------------------------------------------
//Validate the Associated SIM-IMSI-MSISDN number.
//-------------------------------------------------------------------------------------
 try{
 strErrVal = NumberValidation(Inputs,Outputs,strGenLvl)
//-------------------------------------------------------------------------------------
//De-associate the Associated SIM-IMSI-MSISDN number.
//-------------------------------------------------------------------------------------

 if(strErrVal == """") {
  bsRMSDeAssociation = TheApplication().GetService(""RMS RMS Deassociate Function"");
  psInputs.SetProperty(""GenLevel"",strGenLvl);
  psInputs.SetProperty(""MSISDN Number"", Inputs.GetProperty(""MSISDN""));
  psInputs.SetProperty(""Source"",""Cancel Order"");
  psInputs.SetProperty(""Partial(Y/N)"",""Y""); 
  bsRMSDeAssociation.InvokeMethod(""DeAssociate"", psInputs, psOutputs);
  
  if(psOutputs.GetProperty(""ErrCode"") != """") {
   Outputs.SetProperty(""ErrCode"",psOutputs.GetProperty(""ErrCode""));
   Outputs.SetProperty(""ErrMessage"",psOutputs.GetProperty(""ErrMessage""));
  }
 } 

 } catch (e) {
  if(Outputs.GetProperty(""ErrCode"") == """") {
   Outputs.SetProperty(""ErrCode"",e.errCode);    
   Outputs.SetProperty(""ErrMessage"",e.errText);
  }
 } finally {
  psInputs = null;
  psOutputs = null;
  bsRMSDeAssociation = null;
 }
 
 return (Outputs.GetProperty(""ErrCode""));
}
"/**************************************************************************************
* Name          : Check Prepaid Card                     * 
* Author        : Mahindra British Telecom                                            *
* Description   : Function to check whether the SIM card is prepaid Code File         *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 07/08/2004 1.0     Mahindra British Telecom    Created       07/08/2004      *
* 22/06/2006    1.1         Kalyana
**************************************************************************************/
function CheckPrepaid(msSIMNumber)
{ 
 var boNumberMaster;
 var bcNumberMaster;
 var blnIsRecord  = false;
 var blnIsPrepaid = false;
 
 boNumberMaster  = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
 bcNumberMaster  = boNumberMaster.GetBusComp(""RMS NM Number Enquiry"");
 
 with(bcNumberMaster) {
  ActivateField(""Number String"");
  ActivateField(""Assoc Start Id"");
  ActivateField(""Status""); 
  ActivateField(""Type Identifier"");
  ActivateField(""Number String without Delimiter"");
  ActivateField(""Num Mstr Number String"");
 //  ActivateField(""Calc Number Without Delimiter"");
  
  ClearToQuery();
  /*---------------------------------------------------------------------------------------/
   vesion 1.1 changed seacrh specification from calculated field to normal field
        ---------------------------------------------------------------------------------------*/

  //SetSearchSpec(""Calc Number Without Delimiter"",msSIMNumber);
  SetSearchSpec(""Num Mstr Number String"",msSIMNumber);
  ExecuteQuery(ForwardOnly);
  
  blnIsRecord = FirstRecord(); 
  
  if(FirstRecord) {
   ClearToQuery();
   SetSearchSpec(""Assoc Start Id"",GetFieldValue(""Assoc Start Id""));
   SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""));
   ExecuteQuery(ForwardOnly);
   
   blnIsPrepaid = FirstRecord();
  }
 }
 
 bcNumberMaster = null;
 boNumberMaster = null;
 
 return(blnIsPrepaid);
}
"/**************************************************************************************
* Name          : RMS Interface Order                     * 
* Author        : Mahindra British Telecom                                            *
* Description   : Contract Takeover Code File                                *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 1/11/2003 1.0     Mahindra British Telecom    Created       05/11/2003       *
**************************************************************************************/
function ContractTakeover(&Inputs,&Outputs,&bcNumberMaster)
{

 var strMSISDNNumber  = """";
 var strContractId  = """";
 var strContractIdNew = """";
 var blnIsRecord   = false;
 
 
 strMSISDNNumber   = Inputs.GetProperty(""MSISDN Number"");
 strContractId   = Inputs.GetProperty(""Contract Id"");
 strContractIdNew  = Inputs.GetProperty(""New Contract Id"");
 
 try{
 
 with(bcNumberMaster){
  ActivateField(""Number String"");
  ActivateField(""Assoc Start Id"");
  ActivateField(""Assigned Id"");
  ActivateField(""Status""); 

//--------------------------------------------------------------------------------
//Query number master and get all the associated number.Check whether the associated
//numbers are assigned to account id supplied
//--------------------------------------------------------------------------------
 
  ClearToQuery();
  SetSearchSpec(""Number String"",strMSISDNNumber);
  ExecuteQuery();
  if(FirstRecord()) {
   ClearToQuery();
   SetSearchSpec(""Assoc Start Id"", GetFieldValue(""Assoc Start Id""));
   ExecuteQuery(ForwardBackward);
   blnIsRecord = FirstRecord();

   while(blnIsRecord){
    if(GetFieldValue(""Assigned Id"") != strContractId) {
     Outputs.SetProperty(""ErrCode"",""RMSIFOM009"");    
     Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM009"",GetFieldValue(""Number String""),GetFieldValue(""Assigned Id"")));
     TheApplication().RaiseErrorText(""EXIT"");
    } else if(GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED"") || GetFieldValue(""Assigned Id"") != strContractId){
     Outputs.SetProperty(""ErrCode"",""RMSIFOM008"");    
     Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM008"",GetFieldValue(""Number String"")));
     TheApplication().RaiseErrorText(""EXIT"");
    } 
    blnIsRecord = NextRecord();
   }
   blnIsRecord = FirstRecord();
   
   
   
//--------------------------------------------------------------------------------
//Assign the SIM-IMSI-MSISDN number to the new Account Id supplied as input.
//--------------------------------------------------------------------------------
  
   while(blnIsRecord) {
    SetFieldValue(""Assigned Id"", strContractIdNew); 
    WriteRecord();
    blnIsRecord = NextRecord();   
   }
  }
 }
 } catch(e) {
  if(Outputs.GetProperty(""ErrCode"") == """") {
   Outputs.SetProperty(""ErrCode"",e.errCode);    
   Outputs.SetProperty(""ErrMessage"",e.errText);
  }
 } finally {
  
 }
 
 return(Outputs.GetProperty(""ErrCode""));
}
"/**************************************************************************************
* Name          : RMS RMS Interface Order Management DateToString  Method      * 
* Author        : Mahindra British Telecom                                            *
* Description   : DateToString Code File                                   *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/10/2003 1.0     Mahindra British Telecom    Created       29/10/2003      *
**************************************************************************************/

//-------------------------------------------------------------------------------------
//Gets the 'Date','Month','Hours','Minutes','Second' and appends them to a string.
//-------------------------------------------------------------------------------------

function DateToString (intCDate)
{
 var dtDatum = ((intCDate.getMonth() + 1) + ""/"" + intCDate.getDate() + ""/"" + intCDate.getFullYear()
 + "" "" + intCDate.getHours() + "":"" + intCDate.getMinutes()+ "":"" + intCDate.getSeconds());
 return dtDatum
}
"/**************************************************************************************
* Name          : RMS RMS Interface Order Management GetAssocNumbers  Method     * 
* Author        : Mahindra British Telecom                                            *
* Description   : Get Associated Numbers                                      *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/12/2003 1.0     Mahindra British Telecom    Created       15/12/2003      *
**************************************************************************************/

function GetAssocNumbers(bcNumberMasterConcat,&strNumber,bcNumberMaster,&intRecCnt,&bcNumberMasterConcat)
{

 var blnIsRecord;

 with(bcNumberMasterConcat) {
  ActivateField(""Number Id"");
  ActivateField(""Concat Id"");
  ActivateField(""Number String"");
  
  ClearToQuery();
  SetSearchSpec(""Number Id"", bcNumberMaster.GetFieldValue(""Id""));
  ExecuteQuery();

  if(FirstRecord()) {
   ClearToQuery()
   SetSearchSpec(""Concat Id"", GetFieldValue(""Concat Id""));
   ExecuteQuery();
   blnIsRecord=FirstRecord();
   while(blnIsRecord){
    strNumber[intRecCnt++] = GetFieldValue(""Number String"");
    blnIsRecord=NextRecord();
   }
  }
 }
}
"/**************************************************************************************
* Name          : RMS RMS Interface Order Management GetAssocNumbers  Method     * 
* Author        : Mahindra British Telecom                                            *
* Description   : Get Associated Numbers                                      *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/12/2003 1.0     Mahindra British Telecom    Created       15/12/2003      *
**************************************************************************************/

function GetConcatId(bcNumberMaster,strGenLvl,bcAssocMstrCnct,strSIMAssocStartId,bcNumberMasterConcat,&strParentIMSIId)
{
 with(bcNumberMaster) {
  ClearToQuery();
  SetSearchSpec(""Assoc Start Id"",strSIMAssocStartId);
  SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI""));
  SetSearchSpec(""Generation Level"",strGenLvl);
  ExecuteQuery();
  if(FirstRecord()){
   strParentIMSIId = GetFieldValue(""Id"");
   with(bcNumberMasterConcat) {
    ActivateField(""Concat Id"");
    ClearToQuery();
    SetSearchSpec(""Number Id"",bcNumberMaster.GetFieldValue(""Id""));    
    ExecuteQuery();
    if(FirstRecord())
     return(GetFieldValue(""Concat Id""));
   }
  }else{
   return("""");
  }
 }

}
"/**************************************************************************************
* Name          : GetQuarantineDetails                             * 
* Author        : Tech Mahindra                                                       *
* Description   : To get Quarantine Period and Quarantine UOM values based on 
                  Quarantine event                                       *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 20060905      1.0     Kalyana Tangirala           Created                                 *
**************************************************************************************/
function GetQuarantineDetails(Inputs, strSchemeId, strMSISDN, QuarEvent)
{
    var blnIsRecord   = false; 
 var boNumberScheme   = TheApplication().GetBusObject(""RMS NM Number Scheme"");
 var bcNumberScheme   = boNumberScheme.GetBusComp(""RMS NM Number Scheme"");
 var bcQuarantine     = boNumberScheme.GetBusComp(""RMS NM Number Quarantine"");


    var blnsIsQuarantine = false;
 var strSearchExp     = """";
 try{
 with(bcNumberScheme)
 {
  ClearToQuery();
  SetSearchSpec(""Id"",strSchemeId);
  ExecuteQuery(ForwardOnly);
  if(FirstRecord()) {
 
   strSearchExp =    strSearchExp +""[Scheme Id] ='""+strSchemeId+""'""; 
   if(QuarEvent== TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Change MSISDN""))
   {
    strSearchExp = strSearchExp + "" AND [Quarantine Event] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Change MSISDN"") + ""'"";
   }
   else if(QuarEvent == TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Service Termination""))
   {
    strSearchExp = strSearchExp + "" AND [Quarantine Event] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Service Termination"") + ""'"";
   }
   with(bcQuarantine)
   {
    ActivateField(""Quarantine Period"");
    ActivateField(""Quarantine UOM"");
    ClearToQuery();
    SetSearchExpr(strSearchExp);
    ExecuteQuery(ForwardOnly);
    blnsIsQuarantine = FirstRecord();
    if(blnsIsQuarantine)
    {
     Inputs.SetProperty(""Quarantine Period"",bcQuarantine.GetFieldValue(""Quarantine Period""));
     Inputs.SetProperty(""Quarantine UOM"",bcQuarantine.GetFieldValue(""Quarantine UOM""));
    }//end of if(blnsIsQuarantine)
    //if no record with that quarantine event is found then query on ""Default"" quarantine event
    else{
     ClearToQuery();
     SetSearchSpec(""Scheme Id"",strSchemeId);
     SetSearchSpec(""Quarantine Event"",TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Default""));
     ExecuteQuery(ForwardOnly);
     blnsIsQuarantine = FirstRecord();
     if(blnsIsQuarantine)
     {
      Inputs.SetProperty(""Quarantine Period"",bcQuarantine.GetFieldValue(""Quarantine Period""));
      Inputs.SetProperty(""Quarantine UOM"",bcQuarantine.GetFieldValue(""Quarantine UOM""));
     }//end of if(blnsIsQuarantine)
    }//end of else
   }//end of with(bcQuarantine)
  }//end of if(FirstRecord())
 }//end of with(bcNumberScheme)
 
 }//try
 catch(e) {
    throw(e.toString());
         }
 finally
 {
 bcNumberScheme = null;
 bcQuarantine   = null;
 boNumberScheme = null;
 
 }
 }//end of function"
"/**************************************************************************************
* Name          : RMS Interface Order                       * 
* Author        : Mahindra British Telecom                                            *
* Description   : MSISDN Takeover Code File                                *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date       Ver    By       Comments     Reviewed Date    *
***************************************************************************************
* 1/11/2003      1.0    MBT      Created       05/11/2003          *
20060711       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function MSISDNTakeover(&Inputs,&Outputs,bcNumberMaster,bcNumberBlock,bcNumberAssocConcat,bcNumberAssocDetail,bcNumberMasterConcat)
{
 var bsRMSDeAssociation;
 var strMSISDNNumber;
 var strNewSIMNumber;
 var strTransferSIM;
 var strContractId;
 var strNewAccntId;
 var strMSISDNTakeover;
 var blnIsRecord;
 var psInputs    = TheApplication().NewPropertySet();
 var psOutputs    = TheApplication().NewPropertySet();
  
 strMSISDNNumber   = Inputs.GetProperty(""MSISDN Number"");
 strNewSIMNumber   = Inputs.GetProperty(""New SIM Number"");
 strContractId     = Inputs.GetProperty(""Contract Id"");
 strNewAccntId     = Inputs.GetProperty(""New Account ID"");
 strTransferSIM    = Inputs.GetProperty(""TransferSIM"");
 
 try{
 with(bcNumberMaster){
  ActivateField(""Number String"");
  ActivateField(""Assoc Start Id"");
  ActivateField(""Status""); 
  ActivateField(""Type Identifier"");
  ActivateField(""Assigned Id"");
  ActivateField(""Assigned To"");
  ActivateField(""Reserved To"");
   
//----------------------------------------------------------------------------
//Query Number Master with the Input as MSISDN Number and get the coresponding
//Associated numbers.Check whether the associated numbers are assigned to the 
//Account Id supplied.
//----------------------------------------------------------------------------
 
  ClearToQuery();
  SetSearchSpec(""Number String"",strMSISDNNumber);
  ExecuteQuery();
  
  if(strTransferSIM == 'Y'){
   if(FirstRecord()) {
    ClearToQuery();
    SetSearchSpec(""Assoc Start Id"", GetFieldValue(""Assoc Start Id""))
    ExecuteQuery();
    blnIsRecord = FirstRecord();
    while(blnIsRecord) {
     if(GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED"") || GetFieldValue(""Assigned Id"") != strContractId){
      Outputs.SetProperty(""ErrCode"",""RMSIFOM009"");    
      Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM009"",GetFieldValue(""Number String""),GetFieldValue(""Assigned To"")));
      TheApplication().RaiseErrorText(""EXIT"");
     }
     bcNumberMaster.SetFieldValue(""Assigned Id"",strNewAccntId);
     blnIsRecord = NextRecord();
    }
    bcNumberMaster.WriteRecord();
   } else {
    Outputs.SetProperty(""ErrCode"",""RMSIFOM010"");    
    Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM010""));
   }
   
  }
   
//----------------------------------------------------------------------------
//If 'Transfer SIM' is Yes, then Deassociating the SIM-IMSI-MSISDN numbers.
//----------------------------------------------------------------------------
  if(strTransferSIM != ""Y""){
   if(!FirstRecord()) {
    Outputs.SetProperty(""ErrCode"",""RMSIFOM010"");    
    Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM010""));
   } else if(CheckPrepaid(Inputs.GetProperty(""New SIM Number""))) {
    Outputs.SetProperty(""ErrCode"",""RMSIFOM011"");    
    Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM011""));
   } else {
   
    bsRMSDeAssociation = TheApplication().GetService(""RMS RMS Deassociate Function"");
    psInputs.SetProperty(""MSISDN Number"",strMSISDNNumber);
    psInputs.SetProperty(""Source"",""MSISDN Takeover"");
    psInputs.SetProperty(""Partial(Y/N)"",""Y""); 
    bsRMSDeAssociation.InvokeMethod(""DeAssociate"", psInputs, psOutputs);
  
 //----------------------------------------------------------------------------
 //Activate the new MSISDN number for the other customer
 //----------------------------------------------------------------------------
    psInputs.SetProperty(""MSISDN Number"", strMSISDNNumber);
    psInputs.SetProperty(""SIM Number"", strNewSIMNumber);
    psInputs.SetProperty(""Contract Id"", strNewAccntId);
    
    ActivateOrder(psInputs,Outputs,bcNumberMaster,bcNumberBlock,bcNumberAssocConcat,bcNumberAssocDetail,bcNumberMasterConcat);
   }
  }
 }
 
 } catch(e) {
  if(Outputs.GetProperty(""ErrCode"") == """") {
   Outputs.SetProperty(""ErrCode"",e.errCode);    
   Outputs.SetProperty(""ErrMessage"",e.errText);
  }
 } finally 
 {
//1.1 below
  psInputs = null;
  psOutputs = null; 
//1.1 above 
  bsRMSDeAssociation = null;
 }
 return(Outputs.GetProperty(""ErrCode""));
}
"/**************************************************************************************
* Name          : RMS Interface Order                       * 
* Author        : Mahindra British Telecom                                            *
* Description   : MSISDN Takeover Code File                                *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date       Ver    By       Comments     Reviewed Date    *
***************************************************************************************
* 1/11/2003      1.0    MBT      Created       05/11/2003          *
20060711       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function MSISDNTakeover_STC(&Inputs,&Outputs,bcNumberMaster)
{
 var bsRMSDeAssociation;
 var strMSISDNNumber;
 var strNewSIMNumber;
 var strTransferSIM;
 var strContractId;
 var strNewAccntId;
 var strMSISDNTakeover;
 var blnIsRecord;
 var psInputs    = TheApplication().NewPropertySet();
 var psOutputs    = TheApplication().NewPropertySet();
  
 strMSISDNNumber   = Inputs.GetProperty(""MSISDN Number"");
 strTransferSIM    = ""N"";
 
 try{
 with(bcNumberMaster){
  ActivateField(""Number String"");
  ActivateField(""Assoc Start Id"");
  ActivateField(""Status""); 
  ActivateField(""Type Identifier"");
  ActivateField(""Assigned Id"");
  ActivateField(""Assigned To"");
  ActivateField(""Reserved To"");
   
//----------------------------------------------------------------------------
//Query Number Master with the Input as MSISDN Number and get the coresponding
//Associated numbers.Check whether the associated numbers are assigned to the 
//Account Id supplied.
//----------------------------------------------------------------------------
 
  ClearToQuery();
  SetSearchSpec(""Number String"",strMSISDNNumber);
  ExecuteQuery();
  
  if(strTransferSIM == 'Y'){
   if(FirstRecord()) {
    ClearToQuery();
    SetSearchSpec(""Assoc Start Id"", GetFieldValue(""Assoc Start Id""))
    ExecuteQuery();
    blnIsRecord = FirstRecord();
    while(blnIsRecord) {
     if(GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED"") || GetFieldValue(""Assigned Id"") != strContractId){
      Outputs.SetProperty(""ErrCode"",""RMSIFOM009"");    
      Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM009"",GetFieldValue(""Number String""),GetFieldValue(""Assigned To"")));
      TheApplication().RaiseErrorText(""EXIT"");
     }
     bcNumberMaster.SetFieldValue(""Assigned Id"",strNewAccntId);
     blnIsRecord = NextRecord();
    }
    bcNumberMaster.WriteRecord();
   } else {
    Outputs.SetProperty(""ErrCode"",""RMSIFOM010"");    
    Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM010""));
   }
   
  }
   
//----------------------------------------------------------------------------
//If 'Transfer SIM' is Yes, then Deassociating the SIM-IMSI-MSISDN numbers.
//----------------------------------------------------------------------------
  if(strTransferSIM != ""Y""){
   if(!FirstRecord()) {
    Outputs.SetProperty(""ErrCode"",""RMSIFOM010"");    
    Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM010""));
   } else {
   
    bsRMSDeAssociation = TheApplication().GetService(""RMS RMS Deassociate Function"");
    psInputs.SetProperty(""MSISDN Number"",strMSISDNNumber);
    psInputs.SetProperty(""Source"",""MSISDN Takeover"");
    psInputs.SetProperty(""NewPartnerCode"",Inputs.GetProperty(""TakeoverPartnerCode""));
    psInputs.SetProperty(""BlockedFor"",Inputs.GetProperty(""BlockedFor""));
    psInputs.SetProperty(""SIMTakeover"",Inputs.GetProperty(""SIMTakeover""));
    psInputs.SetProperty(""SIMTakeoverPartnerCode"",Inputs.GetProperty(""SIMTakeoverPartnerCode""));
    psInputs.SetProperty(""Partial(Y/N)"",""Y""); 
    bsRMSDeAssociation.InvokeMethod(""DeAssociate"", psInputs, psOutputs);
    //KT 20071611 Getting oupt args 
    var errcode = """";
    var errMSg  = """";
    errcode = psOutputs.GetProperty(""ErrCode"");
    errMSg  = psOutputs.GetProperty(""ErrMessage"");
    if (errcode != """")
    {
    Outputs.SetProperty(""ErrCode"",errcode);    
    Outputs.SetProperty(""ErrMessage"",errMSg);
    }
               //End KT 20071611
   }
  }
 }
 
 } catch(e) {
  if(Outputs.GetProperty(""ErrCode"") == """") {
   Outputs.SetProperty(""ErrCode"",e.errCode);    
   Outputs.SetProperty(""ErrMessage"",e.errText);
  }
 } finally 
 {
//1.1 below
  psInputs = null;
  psOutputs = null; 
//1.1 above 
  bsRMSDeAssociation = null;
 }
 return(Outputs.GetProperty(""ErrCode""));
}
"/**************************************************************************************
* Name          : RMS Interface Order                       * 
* Author        : Mahindra British Telecom                                            *
* Description   : MSISDN Takeover Code File                                *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date       Ver    By       Comments     Reviewed Date    *
***************************************************************************************
* 1/11/2003      1.0    MBT      Created       05/11/2003          *
20060711       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function MSISDNTakeover_hcpt(&Inputs,&Outputs,bcNumberMaster)
{
 var bsRMSDeAssociation;
 var strMSISDNNumber;
 var strNewSIMNumber;
 var strTransferSIM;
 var strContractId;
 var strNewAccntId;
 var strMSISDNTakeover;
 var blnIsRecord;
 var psInputs    = TheApplication().NewPropertySet();
 var psOutputs    = TheApplication().NewPropertySet();
  
 strMSISDNNumber   = Inputs.GetProperty(""MSISDN Number"");
 strTransferSIM    = ""N"";
 
 try{
 with(bcNumberMaster){
  ActivateField(""Number String"");
  ActivateField(""Assoc Start Id"");
  ActivateField(""Status""); 
  ActivateField(""Type Identifier"");
  ActivateField(""Assigned Id"");
  ActivateField(""Assigned To"");
  ActivateField(""Reserved To"");
   
//----------------------------------------------------------------------------
//Query Number Master with the Input as MSISDN Number and get the coresponding
//Associated numbers.Check whether the associated numbers are assigned to the 
//Account Id supplied.
//----------------------------------------------------------------------------
 
  ClearToQuery();
  SetSearchSpec(""Number String"",strMSISDNNumber);
  ExecuteQuery();
  
  if(strTransferSIM == 'Y'){
   if(FirstRecord()) {
    ClearToQuery();
    SetSearchSpec(""Assoc Start Id"", GetFieldValue(""Assoc Start Id""))
    ExecuteQuery();
    blnIsRecord = FirstRecord();
    while(blnIsRecord) {
     if(GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED"") || GetFieldValue(""Assigned Id"") != strContractId){
      Outputs.SetProperty(""ErrCode"",""RMSIFOM009"");    
      Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM009"",GetFieldValue(""Number String""),GetFieldValue(""Assigned To"")));
      TheApplication().RaiseErrorText(""EXIT"");
     }
     bcNumberMaster.SetFieldValue(""Assigned Id"",strNewAccntId);
     blnIsRecord = NextRecord();
    }
    bcNumberMaster.WriteRecord();
   } else {
    Outputs.SetProperty(""ErrCode"",""RMSIFOM010"");    
    Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM010""));
   }
   
  }
   
//----------------------------------------------------------------------------
//If 'Transfer SIM' is Yes, then Deassociating the SIM-IMSI-MSISDN numbers.
//----------------------------------------------------------------------------
  if(strTransferSIM != ""Y""){
   if(!FirstRecord()) {
    Outputs.SetProperty(""ErrCode"",""RMSIFOM010"");    
    Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM010""));
   } else {
   
    bsRMSDeAssociation = TheApplication().GetService(""RMS RMS Deassociate Function"");
    psInputs.SetProperty(""MSISDN Number"",strMSISDNNumber);
    psInputs.SetProperty(""Source"",""MSISDN Takeover"");
    psInputs.SetProperty(""NewPartnerCode"",Inputs.GetProperty(""TakeoverPartnerCode""));
    psInputs.SetProperty(""BlockedFor"",Inputs.GetProperty(""BlockedFor""));
    psInputs.SetProperty(""SIMTakeover"",Inputs.GetProperty(""SIMTakeover""));
    psInputs.SetProperty(""SIMTakeoverPartnerCode"",Inputs.GetProperty(""SIMTakeoverPartnerCode""));
    psInputs.SetProperty(""Partial(Y/N)"",""Y""); 
    bsRMSDeAssociation.InvokeMethod(""DeAssociate"", psInputs, psOutputs);
    //KT 20071611 Getting oupt args 
    var errcode = """";
    var errMSg  = """";
    errcode = psOutputs.GetProperty(""ErrCode"");
    errMSg  = psOutputs.GetProperty(""ErrMessage"");
    if (errcode != """")
    {
    Outputs.SetProperty(""ErrCode"",errcode);    
    Outputs.SetProperty(""ErrMessage"",errMSg);
    }
               //End KT 20071611
   }
  }
 }
 
 } catch(e) {
  if(Outputs.GetProperty(""ErrCode"") == """") {
   Outputs.SetProperty(""ErrCode"",e.errCode);    
   Outputs.SetProperty(""ErrMessage"",e.errText);
  }
 } finally 
 {
//1.1 below
  psInputs = null;
  psOutputs = null; 
//1.1 above 
  bsRMSDeAssociation = null;
 }
 return(Outputs.GetProperty(""ErrCode""));
}
"/**************************************************************************************
* Name          : RMS RMS Interface Order Management NumberValidation  Method     * 
* Author        : Mahindra British Telecom                                            *
* Description   : function fr validating Numbers                                 *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/12/2003 1.0     Mahindra British Telecom    Created       15/12/2003      *
**************************************************************************************/

function NumberValidation(&Inputs,&Outputs,&strGenLvl)
{
 var blnIsRecord;
 var strErrVal = """";
 
 var boNumberMaster  = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
 var bcNumberMaster  = boNumberMaster.GetBusComp(""RMS NM Number Enquiry"");

 try{
 with(bcNumberMaster){
  ActivateField(""Assigned To"");
  ActivateField(""Assigned Id"");
  ActivateField(""Assoc Start Id"");
  ActivateField(""Type Identifier"");
  ActivateField(""Number Id"");
  ActivateField(""SIM Generation Support"");
   
//-------------------------------------------------------------------------------------
//Query Number Master with the Input MSISDN Number and get the Associated numbers
//Check whether the associated numbers are assigned to the contract id supplied.
//-------------------------------------------------------------------------------------
  var test = Inputs.GetProperty(""ContractID"");
  var test1 = Inputs.GetProperty(""MSISDN"");
  ClearToQuery();
  SetSearchSpec(""Number String"", Inputs.GetProperty(""MSISDN""));
  ExecuteQuery(ForwardOnly);
  
  if(FirstRecord()) {
   strGenLvl = GetFieldValue(""SIM Generation Support"");
   ClearToQuery();
   SetSearchSpec(""Assoc Start Id"", GetFieldValue(""Assoc Start Id""));
   ExecuteQuery(ForwardOnly);
   blnIsRecord = FirstRecord();
   
   while(blnIsRecord) {
    if(GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED"")) {
     Outputs.SetProperty(""ErrCode"",""RMSIFOM008"");    
     Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM008"",Inputs.GetProperty(""MSISDN"")));
     TheApplication().RaiseErrorText(""EXIT"");
     
    } else if(GetFieldValue(""Assigned Id"") != Inputs.GetProperty(""ContractID"")) {
        Outputs.SetProperty(""ErrCode"",""RMSIFOM009"");
     Outputs.SetProperty(""ErrMessage"",TheAplication().LookupMessage(""User Defined Errors"",""RMSIFOM009"",Inputs.GetProperty(""MSISDN""),GetFieldValue(""Assigned To"")));
     TheApplication().RaiseErrorText(""EXIT"");
    }
    strGenLvl = GetFieldValue(""SIM Generation Support"");
    blnIsRecord = NextRecord();
   }
  }
 }
 } catch(e) {
  if(Outputs.GetProperty(""ErrCode"") == """") {
   Outputs.SetProperty(""ErrCode"",e.errCode);    
   Outputs.SetProperty(""ErrMessage"",e.errText);
  }
 } finally {
  bcNumberMaster = null;
  boNumberMaster = null;
 }


 return(Outputs.GetProperty(""ErrCode""));
}
"/**************************************************************************************
* Name          : RMS RMS Interface Order Management                 * 
* Author        : Mahindra British Telecom                                            *
* Description   : Service_PreInvokeMethod                *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/10/2003 1.0     Mahindra British Telecom    Created       29/10/2003      *
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
 strAssocId = """";
 strMSISDNType = """";
 strMSISDNId = """";
 strMSISDNHLR = """";
 strSIMHLR = """";
 strSIMId = """";
 strSIMNumberDelim = """";
 strStatus = """";
 blnBlkUpdate = TheApplication().GetProfileAttr(""RMS_BLOCK_UPDATION"") == ""Y""?true:false;
      
    var boNumberMaster;
 var bcNumberMaster;

 var boNumberScheme;
 var bcNumberScheme;
 var bcNumberBlock;
 var bcNumAssgnDetail;
 
 var boNumberAssociation;
 var bcNumberAssocConcat;
 var bcNumberAssocDetail;
 var bcNumberMasterConcat;
 var strSIMAssocStartId = """"; 
 
 var psInputs;
 var psOutputs;

 var intReturn = CancelOperation; 
 var strErrVal = """";
 
 psInputs   = TheApplication().NewPropertySet();
 psOutputs  = TheApplication().NewPropertySet();
 

 Outputs.SetProperty(""ErrCode"","""");
 Outputs.SetProperty(""ErrMessage"","""");
 
 
 
 
     boNumberMaster  = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
  //bcNumberMaster  = boNumberMaster.GetBusComp(""RMS NM Number Enquiry Interface"");
  bcNumberMaster  = boNumberMaster.GetBusComp(""RMS NM Number Enquiry"");
// below 1.1
//  bcNumAssgnDetail = boNumberMaster.GetBusComp(""RMS NM Number Assigned Details"");
// above 1.1  
  boNumberScheme = TheApplication().GetBusObject(""RMS NM Number Scheme"");
// below 1.1
//  bcNumberScheme = boNumberScheme.GetBusComp(""RMS NM Number Scheme"");
// above 1.1
  bcNumberBlock  = boNumberScheme.GetBusComp(""RMS NM Number Block"");
 
  boNumberAssociation  = TheApplication().GetBusObject(""RMS NM Number Association"");
  bcNumberAssocConcat  = boNumberAssociation.GetBusComp(""RMS NM Association Number Type Display"");
  bcNumberAssocDetail  =  boNumberAssociation.GetBusComp(""RMS NM Number Association Detail"");
  bcNumberMasterConcat =  boNumberAssociation.GetBusComp(""RMS NM Number Master Concat"");
  

  bcNumberMaster.InvokeMethod(""SetAdminMode"",""TRUE"");
  with(bcNumberMaster) {
   ActivateField(""Current Date"");
   ActivateField(""Assigned Date"");
   ActivateField(""Reserved For"");
   ActivateField(""Number String"");
   ActivateField(""Num Mstr Number String"");
   ActivateField(""Calc Number Without Delimiter"");
   ActivateField(""IMSI Assoc"");
   ActivateField(""Status"");
   ActivateField(""HLR Id"");  
   ActivateField(""Assigned To"");
   ActivateField(""Assigned Date"");
   ActivateField(""Is Associated"");
   ActivateField(""Type Identifier"");
   ActivateField(""Type"");
   ActivateField(""Assoc Start Id"");
   ActivateField(""Status"");
   ActivateField(""Block Id"");
   ActivateField(""Record Blocked For"");
   ActivateField(""Record Blocking Date"");   
   ActivateField(""Using Type""); 
   ActivateField(""Using Type""); 
   ActivateField(""Status Date""); 
   ActivateField(""Reservation End Date""); 
   ActivateField(""Parent Assoc Id"");  
   ActivateField(""No. Of Assigned MSISDN"");  
   ActivateField(""No. Of SIM Card IMSI"");      
   ActivateField(""SIM Generation Support"");         
  } 
       
  
  switch(MethodName){
  
   case ""ActivateOrder"":

// below 1.1
    bcNumAssgnDetail = boNumberMaster.GetBusComp(""RMS NM Number Assigned Details"");
// above 1.1
    strErrVal = ActivateOrder(Inputs,Outputs,bcNumberMaster,bcNumberBlock,bcNumberAssocConcat,bcNumberAssocDetail,bcNumberMasterConcat,bcNumAssgnDetail);
    break;
    
   case ""ActivateOrdValidation"":
     
    strErrVal = ActivateOrderValidation(Inputs,Outputs,bcNumberMaster,strSIMAssocStartId);
    break;

   case ""ActivatePrepaidOrder"":
     
    strErrVal = ActivatePrepaidOrder(Inputs,Outputs,bcNumberMaster);
    break;

   case ""TerminateOrder"":

// below 1.1
    bcNumberScheme = boNumberScheme.GetBusComp(""RMS NM Number Scheme"");
// above 1.1
    if(Inputs.GetProperty(""MSISDNTakeover"") == ""Y"") 
     strErrVal = MSISDNTakeover_STC(Inputs,Outputs,bcNumberMaster);
    else
     strErrVal = TerminateOrder(Inputs,Outputs,bcNumberMaster,bcNumberScheme,bcNumberMasterConcat);
    break;
     
   case ""MSISDNTakeover"":
   
    strErrVal = MSISDNTakeover(Inputs,Outputs,bcNumberMaster,bcNumberBlock,bcNumberAssocConcat,bcNumberAssocDetail,bcNumberMasterConcat);
 
    break;
   
   case ""CancelOrder"":
    
    strErrVal = CancelOrder(Inputs,Outputs);
    break; 

   case ""ContractTakeover"":

    strErrVal = ContractTakeover(Inputs,Outputs,bcNumberMaster);
    break;   



   default:
    intReturn = ContinueOperation;
    break;
     
  }

  
 bcNumberMaster.InvokeMethod(""SetAdminMode"",""FALSE"");
  

  bcNumberMaster    = null;
  bcNumAssgnDetail  = null;
  boNumberMaster    = null;
  
   bcNumberScheme    = null;
  bcNumberBlock   = null;
  boNumberScheme    = null;
   
  bcNumberAssocConcat  = null;
  bcNumberAssocDetail  = null;
  bcNumberMasterConcat = null;
  boNumberAssociation  = null;
  
  psInputs    = null;
  psOutputs    = null;
 

 
  //This can be commented out of error handling is done in workflow
 /*if(Outputs.GetProperty(""ErrCode"") != """")
  TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));*/ // KT 04-07-2006
  
 return(intReturn);  
}
"/**************************************************************************************
* Name          : RMS Interface Order                       * 
* Author        : Mahindra British Telecom                                            *
* Description   : Terminate Order                                   *
*                       *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Version   AmendedBy         Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 1/11/2003 1.0     Mahindra British Telecom    Created       05/11/2003          *
**************************************************************************************/
function TerminateOrder(&Inputs,&Outputs,&bcNumberMaster,&bcNumberScheme,&bcNumberMasterConcat)
{
    var strNumber    = new Array();
    
 var dtQuarantineDateObj = new Date();
 
    var intRecCnt    = 0;
    var intArrlen   = 0;
 var intReturn    = ContinueOperation;
 
 var strErrVal    = """";
 var strFromStatus  = """";
 var strToStatus   = """";
    
    var blnIsRecord   = false;
 
    var psInputs    = TheApplication().NewPropertySet();
 var psOutputs    = TheApplication().NewPropertySet();
 var bsNumberBlock   = TheApplication().GetService(""RMS RMS Block Calc"");
    //below 1.1
 var strQuarantinePeriod = """";
  var strQuarantineUOM    = """";
 var strQuarantineEvent= TheApplication().InvokeMethod(""LookupValue"", ""NM_QUARANTINE_EVENT"", ""Service Termination"");     
 //above 1.1
//-------------------------------------------------------------------------------
//Query Number Master with MSISDN number and get all the associated numbers.
//Check whether the associated numbers are assigned to the account id supplied.
//-------------------------------------------------------------------------------
 try{
 with(bcNumberMaster) {
  ActivateField(""MSISDN Number""); 
  ActivateField(""Assigned Id"");
        ActivateField(""Assoc Start Id"");
        ActivateField(""Quarantine Date"");
        ActivateField(""Reserved To"");
        ActivateField(""Reservation End Date"");
        ActivateField(""Assigned Date"");
        ActivateField(""Available Date"");
  //below 1.1
  //ActivateField(""Quarantine Period"");
  //ActivateField(""Quarantine UOM"");
    ActivateField(""Number String"");
  //above 1.1
  ActivateField(""Is Associated"");
  ActivateField(""Allocation Id"");
  ActivateField(""Reserve Id"");
  ActivateField(""Block Id"");
  ActivateField(""Scheme Id"");
  ActivateField(""Current Date"");
  ActivateField(""Disconnect Type"");
  ActivateField(""Reuse After Disconnect"");
  ActivateField(""Status Date"");
  ActivateField(""Using Type"");
  
  ClearToQuery();
  SetSearchSpec(""Number String"", Inputs.GetProperty(""MSISDN Number""));
  ExecuteQuery();
  
        if(FirstRecord()) {
   if(GetFieldValue(""Is Associated"")==""Y"")
    GetAssocNumbers(bcNumberMasterConcat,strNumber,bcNumberMaster,intRecCnt,bcNumberMasterConcat)
   
   for(intArrlen = 0;intArrlen <  getArrayLength(strNumber);intArrlen++) {
    ClearToQuery();
    SetSearchSpec(""Number String"", strNumber[intArrlen]);
    ExecuteQuery();
    
    if(FirstRecord()) {
     if(GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED"") || GetFieldValue(""Assigned Id"") != Inputs.GetProperty(""Contract Id"")){
      Outputs.SetProperty(""ErrCode"",""RMSIFOM008"");    
      Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIFOM008"",strNumber[intArrlen]));
      TheApplication().RaiseErrorText(""EXIT""); 
     } 
    }
   }
  }
  
  for(intArrlen = 0;intArrlen <  getArrayLength(strNumber);intArrlen++) {
   ClearToQuery();
   SetSearchSpec(""Number String"", strNumber[intArrlen]);
   ExecuteQuery();
   if(FirstRecord()) {
    strFromStatus = GetFieldValue(""Status"");
     //below 1.1
     /*
     if(GetFieldValue(""Reuse After Disconnect"") == ""Y"") {
     strToStatus = TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE"");
     SetFieldValue(""Quarantine Date"",GetFieldValue(""Current Date""));
     
     
      with(bcNumberScheme) {
      //ms 10/05/2006 ActivateField(""Max. Ter. Quarantine UOM"");
      //ms 10/05/2006 ActivateField(""Max. Ter. Quarantine Period"");
      //ActivateField(""Quarantine UOM"");
      //ActivateField(""Quarantine Period"");
      ClearToQuery();
      SetSearchSpec(""Id"", bcNumberMaster.GetFieldValue(""Scheme Id""));
      ExecuteQuery();
      if(FirstRecord()) { 
       //ms 10/05/2006 dtQuarantineDateObj = CalcAvailableDate(GetFieldValue(""Max. Ter. Quarantine UOM""), GetFieldValue(""Max. Ter. Quarantine Period""), bcNumberMaster);
       dtQuarantineDateObj = CalcAvailableDate(GetFieldValue(""Quarantine UOM""), GetFieldValue(""Quarantine Period""), bcNumberMaster);
      }
     }
     
    } */
    //above 1.1
    if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")) {
     SetFieldValue(""Quarantine Date"",GetFieldValue(""Current Date""));
     SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
     //below 1.1
     /*with(bcNumberScheme) {
      //ms 10/05/2006 ActivateField(""Max. Ter. Quarantine UOM"");
      //ms 10/05/2006 ActivateField(""Max. Ter. Quarantine Period"");
      
      ActivateField(""Quarantine UOM"");
      ActivateField(""Quarantine Period"");
      ClearToQuery();
      SetSearchSpec(""Id"", bcNumberMaster.GetFieldValue(""Scheme Id""));
      ExecuteQuery();
      if(FirstRecord()) {
       //ms 10/05/2006 dtQuarantineDateObj = CalcAvailableDate(GetFieldValue(""Max. Ter. Quarantine UOM""), GetFieldValue(""Max. Ter. Quarantine Period""), bcNumberMaster);
       dtQuarantineDateObj = CalcAvailableDate(GetFieldValue(""Quarantine UOM""), GetFieldValue(""Quarantine Period""), bcNumberMaster);
      }
     }*/
     GetQuarantineDetails(Inputs,bcNumberMaster.GetFieldValue(""Scheme Id""),bcNumberMaster.GetFieldValue(""Number String""), strQuarantineEvent);
     strQuarantinePeriod= Inputs.GetProperty(""Quarantine Period"");
     strQuarantineUOM = Inputs.GetProperty(""Quarantine UOM"");
     dtQuarantineDateObj = CalcAvailableDate(strQuarantineUOM, strQuarantinePeriod, bcNumberMaster);
     //above 1.1
     strToStatus = TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE"");
     
     SetUserProperty(""SuppressScript"",""Y"");
     SetFieldValue(""Status"", strToStatus);
     SetFieldValue(""Assigned Id"", """");
           SetFieldValue(""Reservation End Date"","""");
           SetFieldValue(""Assigned Date"","""");
     SetFieldValue(""Available Date"",DateToString(dtQuarantineDateObj));
     SetFieldValue(""Disconnect Type"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_DISCONNECT_TYPE"", ""T""));
     WriteRecord();
     SetUserProperty(""SuppressScript"",""N"");         
    
    }
    else if (GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") || GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"")) {
     
     strFromStatus  = GetFieldValue(""Status"");
     strToStatus  = TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED"");
     
     SetFieldValue(""Status Date"",GetFieldValue(""Current Date"")); 
     SetFieldValue(""Assigned Id"", """");
           SetFieldValue(""Assigned Date"","""");
     SetFieldValue(""Disconnect Type"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_DISCONNECT_TYPE"", ""T""));
     SetFieldValue(""Status"", strToStatus);
     
     WriteRecord();
    
    }
    if(TheApplication().GetProfileAttr(""RMS_BLOCK_UPDATION"") == ""Y"") {
     psInputs.SetProperty(""From Status"", strFromStatus);
     psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
     psInputs.SetProperty(""To Status"",strToStatus);  
     bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);
    }
   
   }
  }
 }
 } catch(e) {
  if(Outputs.GetProperty(""ErrCode"") == """") {
   Outputs.SetProperty(""ErrCode"",e.errCode);    
   Outputs.SetProperty(""ErrMessage"",e.errText);
  }
 
 } finally {
  psInputs = null;
  psOutputs = null;
  
  bsNumberBlock = null;
 }
 return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS RMS Interface Service Management					 	          * 
* Author        : Mahindra British Telecom                                            *
* Description   : Function to Create the New Reservation record for DSO			      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 24/05/2004	1.0   		Mahindra British Telecom   	Created       			      *
* 28/05/2004	1.01   		Mahindra British Telecom   	Created  
* 26/06/2006    1.1         Kalyana Tangirala           Commented Entire function for  future  use     			      *
**************************************************************************************/

function CreateResRecord(Inputs,Outputs,bcNumberReservation){

 /*var mbcStartNumId;
 var DealerCode;
 
 mbcStartNumId  = Inputs.GetProperty(""Number Id"");
 DealerCode     = TheApplication().GetProfileAttr(""Dealer Code"");
 
 var msOperation = Inputs.GetProperty(""Operation"");
 TheApplication().SetProfileAttr(""strOperation"",msOperation);
// Create the new Record in Number Record in Number Reservation business component using the Number Id.

  	with(bcNumberReservation){
		SetViewMode(AllView);
		ActivateField(""Number Id"");
		ActivateField(""Qty"");
		ActivateField(""Reserved To"");
		ActivateField(""Reserved For"");
		ActivateField(""Status"");
		ActivateField(""Start Num String"");
		ActivateField(""Is Sequence"");
		ActivateField(""Operation"");
		
		NewRecord(1);
		
		SetFieldValue(""Number Id"",Inputs.GetProperty(""Number Id""));
		SetFieldValue(""Qty"",Inputs.GetProperty(""Qty""));
		SetFieldValue(""Reserved To"",DealerCode);
		SetFieldValue(""Status"",Inputs.GetProperty(""Status""));
		SetFieldValue(""Is Sequence"",Inputs.GetProperty(""Is Sequence""));
		SetFieldValue(""Operation"", Inputs.GetProperty(""Operation""));
		SetFieldValue(""Reserved For"",Inputs.GetProperty(""ReservedFor""));
		
		var mbcStartNum   = bcNumberReservation.GetPicklistBusComp(""Start Num String"");
		var mbcReservedTo = bcNumberReservation.GetPicklistBusComp(""Reserved To"");
		
		with(mbcStartNum) {
			ClearToQuery()
			SetSearchSpec(""Id"",Inputs.GetProperty(""Number Id""));
			ExecuteQuery(ForwardOnly);
		
		if(FirstRecord())
			Pick();
		}
		with(mbcReservedTo) {
			ClearToQuery()
			SetSearchSpec(""DEALER_CODE"",DealerCode);
			ExecuteQuery(ForwardOnly);
		
		if(FirstRecord())
			Pick();
		}
		mbcStartNum  = null;
		mbcReservedTo= null;
		
//Send the Reserved Id parameter which is required for Number Reservation
		Outputs.SetProperty(""Reserved Id"",GetFieldValue(""Id""));
		WriteRecord();
		TheApplication().SetProfileAttr(""strOperation"","""");
	}*/
}
"/**************************************************************************************
* Name          : RMS RMS Interface Service Management							      * 
* Author        : Mahindra British Telecom                                            *
* Description   : Aunction to update O/P property   				      			  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 24/05/2004	1.0   		Mahindra British Telecom   	Created       			      *
* 28/05/2004	1.01   		Mahindra British Telecom   	Created       			      *
* 22/06/05		1.1			Kalyana	 ES#17 
**************************************************************************************/
function GetMSISDNId(Inputs,&Outputs,bcNumberMaster)
{
	with(bcNumberMaster) {
		ClearToQuery();
/*---------------------------------------------------------------------------------------/
vesion 1.1 changed seacrh specification from calculated field to normal field
/*---------------------------------------------------------------------------------------*/		
      //SetSearchSpec(""Calc Number Without Delimiter"", Inputs.GetProperty(""MSISDN Number""));//KT 22-06-06
		SetSearchSpec(""Num Mstr Number String"", Inputs.GetProperty(""MSISDN Number""));
		ExecuteQuery(ForwardOnly);
		
		if (FirstRecord())
			Outputs.SetProperty(""MSISDNId"",GetFieldValue(""Id""));
		else
			Outputs.SetProperty(""MSISDNId"","""");
	}
	
}
"/**************************************************************************************
* Name          : RMS RMS Interface Service Management					 	          * 
* Author        : Mahindra British Telecom                                            *
* Description   : Get Num Id													      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 26/06/2005	1.0   		Mahindra British Telecom   	Created      				  *
**************************************************************************************/
function GetNumId(bcNumberMaster,strNum) {
	with(bcNumberMaster) {
		ClearToQuery()
		SetSearchSpec(""Number String"",strNum);
		ExecuteQuery();
		if(FirstRecord())
			return(GetFieldValue(""Id""));
	}
	
}
"/**************************************************************************************
* Name          : MSISDN Activation Function								 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : Associates the MSISDN with SIM and activates it.					  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 11/05/2004	1.0   		Mahindra British Telecom   	Created       			      *
**************************************************************************************/
function MSISDNActivation(strAssocId,strContractId,strMSISDNId,strMSISDN,strMSISDNType,bcNumberMaster,bcNewNumInfo,bcNumberBlock,bcNumberAssocConcat,bcNumberAssocDetail,bcNumberMasterConcat){

	var strStatus;
	var strSIMNumberDelim;
 	var bsNumberBlock;
 	
	var blnIsRecord;

    var psInputs = TheApplication().NewPropertySet();
	var psOutputs = TheApplication().NewPropertySet();

//-------------------------------------------------------------
// Updating the old associated numbers with the assigned info.
//-------------------------------------------------------------

	with(bcNumberMaster){
	    ClearToQuery();
		SetSearchSpec(""Assoc Start Id"",strAssocId);
		ExecuteQuery();
	
		blnIsRecord = FirstRecord();
	
		while(blnIsRecord) {
			SetFieldValue(""Assigned By"",TheApplication().LoginName());
			SetFieldValue(""Assigned Date"",bcNewNumInfo.GetFieldValue(""Current Date""));
			WriteRecord();		
		
			if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
	        	strSIMNumberDelim = GetFieldValue(""Num Mstr Number String"");
	
	       	blnIsRecord = NextRecord(); 
        }   
    }
         			
	  	
//------------------------------------------------
// Updating the MSISDN number to assigned status.
//------------------------------------------------
	with(bcNewNumInfo){
		ClearToQuery()
		SetSearchSpec(""Id"",strMSISDNId);
		ExecuteQuery();
		
		blnIsRecord = FirstRecord();
		
		while(blnIsRecord) {
			strStatus = GetFieldValue(""Status"");
			SetFieldValue(""Assoc Start Id"",strAssocId);
			SetFieldValue(""Is Associated"",""Y"");
			SetFieldValue(""Assigned By"",TheApplication().LoginName());
			SetFieldValue(""Assigned Date"",bcNewNumInfo.GetFieldValue(""Current Date""));
			SetFieldValue(""Using Type"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_USING_TYPE"", ""ACTIVATION""));
			SetFieldValue(""Assigned Id"",strContractId);
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED""));
	    	SetFieldValue(""Status Date"",bcNewNumInfo.GetFieldValue(""Current Date""));
	    
			WriteRecord();
	
			bsNumberBlock = TheApplication().GetService(""RMS RMS Block Calc"");
			psInputs.SetProperty(""From Status"", strStatus);
			psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
			psInputs.SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED""));
			bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);	
		
			blnIsRecord = NextRecord();
		}
	}

   	 	
 	MSISDNAssociation(strMSISDNId,strSIMNumberDelim,strMSISDN,strMSISDNType,bcNumberBlock,bcNumberAssocConcat,bcNumberAssocDetail,bcNumberMasterConcat);
 	
 	psInputs		= null;
 	psOutputs		= null;
 	bsNumberBlock	= null;
}
"/**************************************************************************************
* Name          : MSISDN Association Function									 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Associate a MSISDN to a SIM/IMSI                      			  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 11/05/2004	1.0   		Mahindra British Telecom   	Created       			      *
**************************************************************************************/

function MSISDNAssociation(strMSISDNId,strSIMNumberDelim,strMSISDN,strMSISDNType,bcNumberBlock,bcNumberAssocConcat,bcNumberAssocDetail,bcNumberMasterConcat){

	var strAssocStartId;
	var strConcatNumber;
	var strConcatType;
	var strConcatId;
	var strParAssId;
	var strAssSeqNo;
	
	var blnIsDtlRecord;
	
//----------------------------------------------------------------------	
// Query Association Detail based on the SIM number and get the details
// like ConcatId and Parent Association Id.
//----------------------------------------------------------------------

	with(bcNumberAssocDetail){
		ActivateField(""Source Number with Chk Sum"");
		ActivateField(""Source Num Id"");
		ActivateField(""Association Seq Num"");
		ActivateField(""Number Association Concat Id"");

		ClearToQuery();
		SetSearchSpec(""Source Number with Chk Sum"",strSIMNumberDelim);
		ExecuteQuery();
		blnIsDtlRecord = FirstRecord();
	
		if(blnIsDtlRecord)  {
			strAssocStartId = GetFieldValue(""Source Num Id"");
			strParAssId		= GetFieldValue(""Id"");	
			strConcatId		= GetFieldValue(""Number Association Concat Id"");	
			strAssSeqNo 	= GetFieldValue(""Association Seq Num"");
		}
	
		while(blnIsDtlRecord) {
			ClearToQuery();
			SetSearchSpec(""Parent Ass Id"",strParAssId);
			ExecuteQuery();
			blnIsDtlRecord = FirstRecord();
			if(blnIsDtlRecord) {
				strParAssId	= GetFieldValue(""Id"");
				strAssSeqNo = GetFieldValue(""Association Seq Num"");
			}
		}
	}

//---------------------------------------------------------------------
// Create new record in number association detail for MSISDN number.
//---------------------------------------------------------------------
	with(bcNumberAssocDetail) {
			NewRecord(1);
			SetFieldValue(""Destination Num Id"",strMSISDNId);
			SetFieldValue(""Number Association Concat Id"",strConcatId);
			SetFieldValue(""Parent Ass Id"",strParAssId);				
			SetFieldValue(""Association Seq Num"",strAssSeqNo);
			WriteRecord();
	}

	with(bcNumberAssocConcat) {
		ActivateField(""Associated Number"");
		ActivateField(""Associated Type"");
		ActivateField(""Status"");
		ClearToQuery();
		SetSearchSpec(""Id"",strConcatId);
		ExecuteQuery();
		if(FirstRecord()) {
			strConcatNumber = GetFieldValue(""Associated Number"") + "" / "" + strMSISDN;
			strConcatType   = GetFieldValue(""Associated Type"") + "" / "" + strMSISDNType;
			SetFieldValue(""Associated Number"",strConcatNumber);
			SetFieldValue(""Associated Type"",strConcatType);		
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED""));
			WriteRecord();
		}
	}
	
//------------------------------------------------------------------------
//Creating a new record in the number master and concat intersection table.
//------------------------------------------------------------------------	

	with(bcNumberMasterConcat) {
		NewRecord(1);
		SetFieldValue(""Concat Id"",bcNumberAssocConcat.GetFieldValue(""Id""));	
		SetFieldValue(""Number Id"",strMSISDNId);
		WriteRecord();
	}

}
"/**************************************************************************************
* Name          : SIM Error Activation Function									 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Deassociates the current SIM and associates / activates the new SIM *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver    By      Comments                       Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 11/05/2004	1.0    MBT	    Created       			                          *
* 23/06/2006	1.1    ARUNJ    SiebelES#12 Incorporated condition after ExecuteQuery*
20060711      | 1.2  | Prasad | Siebel ES SCR1, Objects Destroyed
20100219      | 1.3  | Kalyana | Added more validations for invalid SIM with checksum,blank input args
**************************************************************************************/
function MSISDNErrorActivation(Inputs,bcNumberMaster,bcNewNumInfo,bcNumberBlock,bcNumberAssocConcat,bcNumberAssocDetail,bcNumberMasterConcat,&strPriceDiff)
{
    var strOldNumberId;
    var strNewNumberId;
    var strContractId;
    var strPersonalId;
    var strAssocId;
    var strErrVal = """";
    var strMSISDNId;
    var strMSISDN;
    var strMSISDNType;
    var strOldMSISDNPrice;
    var strNewMSISDNPrice;
    var strSIMNumber = """";
    var strGenLvl = """";

    var blnIsRecord;
    
    var bsRMSDeAssociation;
    
    var psInputs = TheApplication().NewPropertySet();
	var psOutputs = TheApplication().NewPropertySet();

	strOldNumberId	= Inputs.GetProperty(""OLD MSISDN Number Id"");
    strNewNumberId  = Inputs.GetProperty(""NEW MSISDN Number Id"");
    strSIMNumber    = Inputs.GetProperty(""SIM Number"");
    // Below 1.3 Kalyana 20100219
    if ((strOldNumberId == null) || (strNewNumberId == """") || (strNewNumberId == null) || (strNewNumberId == """") || (strSIMNumber == null) || (strSIMNumber == """"))
    {
    return(""RMSACT001"");
    }
    //Above 1.3    
	strPersonalId   = Inputs.GetProperty(""Personal Id"");
	var bsActivationOrder = TheApplication().GetService(""RMS RMS Interface Order Management"");
	
	with(bcNewNumInfo){
		ActivateField(""Number String"");
		ActivateField(""IMSI Assoc"");
		ActivateField(""Is Associated"");
		ActivateField(""HLR Id"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Status"");
		ActivateField(""Num Mstr Number String"");
		ActivateField(""Assigned Date"");
		ActivateField(""Assigned Id"");
		ActivateField(""Assigned By"");
		ActivateField(""Block Id"");
		ActivateField(""Type Identifier"");
		ActivateField(""Current Date"");
		ActivateField(""Reserved For"");
		ActivateField(""Reserved Blocked For"");
		ActivateField(""Type"");
   		ActivateField(""Status Date"");
   		ActivateField(""Price"");
   		    
   		ClearToQuery();
		SetSearchSpec(""Id"",strNewNumberId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();

//-----------------------------------------------
// Prompt the user if the number : 
// - Doesnt exist.
// - Status isnt reserved.
// - If reserved for some other account.
//-----------------------------------------------			
		if(!blnIsRecord)
			return(""RMSAUC009"");

		if((GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED"")) && (GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"")))
		 	return(""RMSACT006"");
			
		strMSISDNId = GetFieldValue(""Id"");
		strMSISDN   = GetFieldValue(""Number String"");
		strMSISDNType = GetFieldValue(""Type"");
		strNewMSISDNPrice = GetFieldValue(""Price"");

	 		
	}			

//-------------------------------------------------------------------------------
// Querying number master and retrieving the old MSISDN number for deassociation.
//--------------------------------------------------------------------------------
   //Below 1.3 Kalyana 20100219 To fix change msisdn issue for check sum
   
     with(bcNumberMaster){
     ActivateField(""Assoc Start Id"");
     ClearToQuery();
     SetSearchSpec(""Num Mstr Number String"",strSIMNumber);
	 ExecuteQuery();
	 blnIsRecord = FirstRecord();
     if (!blnIsRecord){
          return(""RMSORD011"");
     }
     else
     {
     var strSIMAssocId = GetFieldValue(""Assoc Start Id"");
     if ((strSIMAssocId == null) || (strSIMAssocId == """"))
     return(""RMSACT002"");
     }
     }
     //Above 1.3
	with(bcNumberMaster){
		ActivateField(""Number String"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Type Identifier"");
		ActivateField(""Using Type"");
		ActivateField(""HLR Id"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Is Associated"");	
		ActivateField(""Assigned Date"");	
		ActivateField(""Assigned Id"");
		ActivateField(""Assigned By"");
		ActivateField(""Current Date"");
		ActivateField(""Current User"");
		ActivateField(""Price"");
		ActivateField(""SIM Generation Support"");		
		ClearToQuery();
		SetSearchSpec(""Id"",strOldNumberId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
// below 1.1		
		if (blnIsRecord){
// above 1.1		
		strAssocId		= GetFieldValue(""Assoc Start Id"");
		//Below 1.3 Kalyana 20100219
		if ((strAssocId == null )|| (strAssocId == """") || (strAssocId != strSIMAssocId))
		{
		return(""RMSACT001"");
		}
		//Above End Kalyana 20100219
		bsRMSDeAssociation = TheApplication().GetService(""RMS RMS Deassociate Function"");
		
		

		psInputs.SetProperty(""MSISDN Number"", GetFieldValue(""Number String""));
		psInputs.SetProperty(""Source"",""Change MSISDN Number"");
		psInputs.SetProperty(""Partial(Y/N)"",""Y"");
		
		bsRMSDeAssociation.InvokeMethod(""DeAssociate"", psInputs, psOutputs);
        
        strErrVal = psOutputs.GetProperty(""ErrCode"");
                
        if(strErrVal != """") 
          	return(strErrVal);

//-----------------------------------------------------------
// Activate the new MSISDN number for the other customer.
//-----------------------------------------------------------
//		strContractId   = GetFieldValue(""Assigned Id"");
		strOldMSISDNPrice = GetFieldValue(""Price"");
        strErrVal = psOutputs.GetProperty(""ErrCode"");
              
       	if(strErrVal != """") 
      		return(strErrVal);

	    psInputs = TheApplication().NewPropertySet();
		psOutputs = TheApplication().NewPropertySet();

		psInputs.SetProperty(""MSISDN Number"", strMSISDN);
		psInputs.SetProperty(""GenLevel"",GetFieldValue(""SIM Generation Support""));
		psInputs.SetProperty(""SIM Number"",strSIMNumber);	
		psInputs.SetProperty(""Contract Id"",GetFieldValue(""Assigned Id""));					
		TheApplication().SetProfileAttr(""NOValidate"", ""Y"");
		bsActivationOrder.InvokeMethod(""ActivateOrder"", psInputs, psOutputs);
		TheApplication().SetProfileAttr(""NOValidate"", ""N"");
// below 1.1
	}
// above 1.1
	}
	
	psInputs	= null;
	psOutputs	= null;
//1.2 below
	bsActivationOrder = null;
	bsRMSDeAssociation = null;
//1.2 above
	
	return(strErrVal);	
}
"/**************************************************************************************
* Name          : RMS RMS Interface Service Management					 	          * 
* Author        : Mahindra British Telecom                                            *
* Description   : MSISDN Swap														  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 03/07/2005	1.0   		Mahindra British Telecom   	Created      				  *
**************************************************************************************/
function MSISDNSwap(Inputs,Outputs,bcNumberMaster) {
	/*var strOldSIMNum = """";  //KT 21-06-06
	var strOldSIMId = """";
	var strNewSIMNum = """";
	var strOldMSISDNId = """";
	var strOldMSISDNNum = """";
	var strNewSIMId ="""";
	var strNewMSISDNNum = """";
	var strNewMSISDNId = """";
	var strSRId = """";
	var strServAccntId = """";
	var strErrVal = """";
	
	var boAccnt = TheApplication().GetBusObject(""EECC Service Accounts"");
	var bcAccnt = boAccnt.GetBusComp(""CUT Service Sub Accounts"");
	var bcAsset = boAccnt.GetBusComp(""Asset Mgmt - Asset (Order Mgmt)"");
	    
	var boOrderMgmnt = TheApplication().GetBusObject(""Order Entry (Sales)"");
	var bcOrderMgmnt = boOrderMgmnt.GetBusComp(""Order Entry - Orders"");
	var bcOrderLineItem = boOrderMgmnt.GetBusComp(""Order Entry - Line Items (Simple)"");
	
	var boAssetSIMUpd =  TheApplication().GetBusObject(""Asset Management"");
	var bcAssetSIMUpd =  boAssetSIMUpd.GetBusComp(""Asset Mgmt - Asset"");
	
	var boSR =  TheApplication().GetBusObject(""Service Request"");
	var bcSR =  boSR.GetBusComp(""Service Request"");
	
	var bsRMSInterfaceServiceMgmnt = TheApplication().GetService(""RMS RMS Interface Service Management"");
    var psInputs = TheApplication().NewPropertySet();
	var psOutputs = TheApplication().NewPropertySet();

//Get Service Account and SR ID from order	
	with(bcOrderMgmnt) {
		SetViewMode(AllView);	
		ActivateField(""EE Current SIM"");
		ActivateField(""EE Current MSISDN"");		
		ActivateField(""EE New MSISDN"");				
		ActivateField(""Service Request Id"");
		ActivateField(""Service Account Id"");
		ClearToQuery()
		SetSearchSpec(""Id"",Inputs.GetProperty(""OrderId""));
		ExecuteQuery();
		if(FirstRecord())
			strServAccntId = GetFieldValue(""Service Account Id"");
	}
	
//Get old SIM and MSISDN from order.
		strOldSIMNum 	= bcOrderMgmnt.GetFieldValue(""EE Current SIM"");
		strOldSIMId 	= GetNumId(bcNumberMaster,strOldSIMNum);

		strOldMSISDNNum	= bcOrderMgmnt.GetFieldValue(""EE Current MSISDN"");
		strOldMSISDNId	= GetNumId(bcNumberMaster,strOldMSISDNNum);

		strNewMSISDNNum = bcOrderMgmnt.GetFieldValue(""EE New MSISDN"");		
		strNewMSISDNId = GetNumId(bcNumberMaster,strNewMSISDNNum);
			
	
//Get new MSISDN from order line item
/*	with(bcOrderLineItem) {
		ActivateField(""Service Id"");
		ActivateField(""Product"");
		ClearToQuery()
		SetSearchSpec(""Order Header Id"",Inputs.GetProperty(""OrderId""));
		ExecuteQuery();
		var blnIsRecord = FirstRecord();
		while(blnIsRecord) {
			if(GetFieldValue(""Product"") == TheApplication().InvokeMethod(""LookupValue"", ""EECC_ASSOC_ASSETS"", ""EECC_SIM_CARD"")) {
				strNewSIMNum = GetFieldValue(""Service Id"");		
				strNewSIMId = GetNumId(bcNumberMaster,strNewSIMNum);
				
			}			

			if(GetFieldValue(""Product"") == TheApplication().InvokeMethod(""LookupValue"", ""EECC_ASSOC_ASSETS"", ""EECC_MSISDN"")) {
				strNewMSISDNNum = GetFieldValue(""Service Id"");		
				strMSISDNId = GetNumId(bcNumberMaster,strNewMSISDNNum);
			}			
			blnIsRecord = NextRecord();	
		}
	}*/

//Call RMS BS to deassociate old SIM and associate new SIM

	/*psInputs.SetProperty(""NEW MSISDN Number Id"", strNewMSISDNId);
    psInputs.SetProperty(""OLD MSISDN Number Id"", strOldMSISDNId);
    psInputs.SetProperty(""SIM Number"",strOldSIMNum);
	bsRMSInterfaceServiceMgmnt.InvokeMethod(""MSISDNErrorActivation"", psInputs, psOutputs);
	

	if(psOutputs.GetProperty(""ErrCode"")!="""")
		return(psOutputs.GetProperty(""ErrCode""));
		
	
//Update Service Account with new MSISDN

	with(bcAccnt) {
		SetViewMode(AllView);
		ActivateField(""Service Id"");
		ActivateField(""EE MSISDN"");
		ActivateField(""EE MSISDN Id"");				
		ClearToQuery()
		SetSearchSpec(""Id"",strServAccntId);
		ExecuteQuery();
		if(FirstRecord()) {
			SetFieldValue(""EE MSISDN"",strNewMSISDNNum);	
			SetFieldValue(""EE MSISDN Id"",strNewMSISDNId);			
			WriteRecord();
		}
		
//Update Asset with new SIM

		with(bcAsset) {
			SetViewMode(AllView);		
			ActivateField(""Product Name"");
			ActivateField(""Serial Number"");
			ActivateField(""EE Last Changed Date"");			
			ActivateField(""Service Account Id"");						
			ClearToQuery();
			ExecuteQuery();
			var blnIsRecord = FirstRecord();
			while(blnIsRecord) {
				var currentTime;
				if(GetFieldValue(""Product Name"")==TheApplication().InvokeMethod(""LookupValue"", ""EECC_ASSOC_ASSETS"", ""EECC_MSISDN"")) {
					SetFieldValue(""Serial Number"",strNewMSISDNNum);
					WriteRecord();		
					break;
				}
				blnIsRecord	= NextRecord();
			}
		}
	}
	return(strErrVal);*/
	
}
"/**************************************************************************************
* Name          : SIM Activation Function								 	          * 
* Author        : Mahindra British Telecom                                            *
* Description   : Activates the SIM and associated IMSI number.    				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 11/05/2004	1.0   		Mahindra British Telecom   	Created       			      *
**************************************************************************************/
function SIMActivation(strNewAssocId,strSIMNumberDelim,strContractId,strMSISDNType,strMSISDN,strMSISDNId,bcNumberMaster,bcNewNumInfo,bcNumberBlock,bcNumberAssocConcat,bcNumberAssocDetail,bcNumberMasterConcat){

	var strStatus;

 	var bsNumberBlock;

	var blnIsRecord;
	
    var psInputs = TheApplication().NewPropertySet();
	var psOutputs = TheApplication().NewPropertySet();

//------------------------------------------
// Update the SIM,IMSI to assigned status.
//------------------------------------------
	with(bcNewNumInfo){
	    ClearToQuery()
		SetSearchSpec(""Assoc Start Id"",strNewAssocId);
		ExecuteQuery();
	
		blnIsRecord = FirstRecord();
		while(blnIsRecord) {
			if(GetFieldValue(""Id"") != strMSISDNId){		
				strStatus = GetFieldValue(""Status"");
				SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED""));
				SetFieldValue(""Assigned By"",TheApplication().LoginName());
				SetFieldValue(""Assigned Date"",bcNewNumInfo.GetFieldValue(""Current Date""));
				SetFieldValue(""Assigned Id"",strContractId);
				SetFieldValue(""Using Type"",TheApplication().InvokeMethod(""LookupValue"", ""RMS_USING_TYPE"", ""CHANGE""));
				SetFieldValue(""Status Date"",bcNewNumInfo.GetFieldValue(""Current Date""));
				WriteRecord();
				bsNumberBlock = TheApplication().GetService(""RMS RMS Block Calc"");
				psInputs.SetProperty(""From Status"", strStatus);
				psInputs.SetProperty(""Object Id"",GetFieldValue(""Block Id""));
				psInputs.SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ASSIGNED""));
				bsNumberBlock.InvokeMethod(""UpdateNumberBlock"", psInputs, psOutputs);			
			}
			blnIsRecord = NextRecord();
		}
	}

//------------------------------
// Updating the MSISDN number.
//------------------------------
	with(bcNumberMaster){
		ClearToQuery()
		SetSearchSpec(""Id"",strMSISDNId);
		ExecuteQuery();
		
		blnIsRecord = FirstRecord();
		
		while(blnIsRecord) {        	
			SetFieldValue(""Assoc Start Id"",strNewAssocId);
			SetFieldValue(""Is Associated"",""Y"");
			SetFieldValue(""Assigned By"",TheApplication().LoginName());
			SetFieldValue(""Assigned Date"",bcNewNumInfo.GetFieldValue(""Current Date""));
			WriteRecord();
			blnIsRecord = NextRecord();
		}
	}

 	MSISDNAssociation(strMSISDNId,strSIMNumberDelim,strMSISDN,strMSISDNType,bcNumberBlock,bcNumberAssocConcat,bcNumberAssocDetail,bcNumberMasterConcat);
 	
 	bsNumberBlock	= null;
 	psInputs		= null;
 	psOutputs		= null;
}
"/**************************************************************************************
* Name          : SIM Error Activation Function									 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Deassociates the current SIM and associates / activates the new SIM *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver    By     	Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 11/05/2004	1.0    MBT      Created       			      *
20060711      | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function SIMErrorActivation(Inputs,bcNumberMaster,bcNewNumInfo,bcNumberBlock,bcNumberAssocConcat,bcNumberAssocDetail,bcNumberMasterConcat)
{
    var strOldNumberId;
    var strNewNumberId;
    var strContractId;
    var strAssocId;
    var strNewAssocId;
    var strErrVal = """";
    var strSIMNumberDelim;
    var strMSISDNId;
    var strMSISDN;
    var strMSISDNType;
    var blnIsRecord;
    var blnMsisdn = false;
    var bsRMSDeAssociation;
    var psInputs = TheApplication().NewPropertySet();
	var psOutputs = TheApplication().NewPropertySet();
    
	strOldNumberId  = Inputs.GetProperty(""OLD Number Id"");
    strNewNumberId  = Inputs.GetProperty(""NEW Number Id"");
    var strNewSIMNumber;
    
    var bsActivationOrder = TheApplication().GetService(""RMS RMS Interface Order Management"");

	
	with(bcNewNumInfo){
		ActivateField(""Number String"");
		ActivateField(""IMSI Assoc"");
		ActivateField(""Is Associated"");
		ActivateField(""HLR Id"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Status"");
		ActivateField(""Num Mstr Number String"");
		ActivateField(""Assigned Date"");
		ActivateField(""Assigned Id"");
		ActivateField(""Assigned By"");
		ActivateField(""Block Id"");
		ActivateField(""Type Identifier"");
		ActivateField(""Current Date"");
		ActivateField(""Status Date"");
		ActivateField
    	ClearToQuery();
		SetSearchSpec(""Id"",strNewNumberId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();

//-----------------------------------------------
// Prompt the user if the number : 
// - Doesnt exist.
// - Isnt associated with an IMSI.
// - Status isnt allocated.
//-----------------------------------------------			
		if(!blnIsRecord)
			return(""RMSACT001"");

		if(GetFieldValue(""IMSI Assoc"") != ""Y"")	
			return(""RMSACT002"");

//		if((GetFieldValue(""Reserved For"") != strPersonalId) 
//							||
//			(GetFieldValue(""Reserved Blocked For"") != strPersonalId))
//		 	return(""RMSACT007"");
		
		strSIMNumberDelim = GetFieldValue(""Num Mstr Number String"");
		strNewAssocId     = GetFieldValue(""Assoc Start Id""); 	
		strNewSIMNumber	  = GetFieldValue(""Number String"");
	}			

//-------------------------------------------------------------------------------------------
// Querying number master and retrieving the SIM number info first. Using the assoc start id
// retrieving the associated MSISDN number for deassociation.
//-------------------------------------------------------------------------------------------
	with(bcNumberMaster){
		ActivateField(""Number String"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Type Identifier"");
		ActivateField(""Using Type"");
		ActivateField(""HLR Id"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Is Associated"");	
		ActivateField(""Assigned Date"");	
		ActivateField(""Assigned To"");
		ActivateField(""Assigned Id"");
		ActivateField(""Assigned By"");
		ActivateField(""Current Date"");
		ActivateField(""Current User"");
		ActivateField(""Type"");
		ActivateField(""SIM Generation Support"");		
		ClearToQuery();
		SetSearchSpec(""Id"",strOldNumberId);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
		
		if(blnIsRecord){
			strAssocId = GetFieldValue(""Assoc Start Id"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",strAssocId);
			SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""));
			if(Inputs.GetProperty(""MSISDNId"")!="""")
				SetSearchSpec(""Id"",Inputs.GetProperty(""MSISDNId""));			
			ExecuteQuery();
			blnIsRecord = FirstRecord();
			
			while(blnIsRecord) {
			    psInputs = TheApplication().NewPropertySet();
				psOutputs = TheApplication().NewPropertySet();

//----------------------------------------------------------------
// If the HLR isnt matching for MSISDN and the new SIM specified
// prompt the user.
//----------------------------------------------------------------
//				if(GetFieldValue(""HLR Id"") != bcNewNumInfo.GetFieldValue(""HLR Id""))
//					return(""RMSACT005"");	
		
				blnMsisdn = true;
				
				strMSISDNId = GetFieldValue(""Id"");
				strMSISDN 	= GetFieldValue(""Number String"");
				strMSISDNType = bcNumberMaster.GetFieldValue(""Type"");
				strContractId   = GetFieldValue(""Assigned Id"");					
				bsRMSDeAssociation = TheApplication().GetService(""RMS RMS Deassociate Function"");
				
				psInputs.SetProperty(""MSISDN Number"", GetFieldValue(""Number String""));
				psInputs.SetProperty(""GenLevel"", GetFieldValue(""SIM Generation Support""));				
				psInputs.SetProperty(""Source"",""Change SIM Number"");
				psInputs.SetProperty(""Partial(Y/N)"",""Y"");	
				
				bsRMSDeAssociation.InvokeMethod(""DeAssociate"", psInputs, psOutputs);
                
                strErrVal = psOutputs.GetProperty(""ErrCode"");
                
               	if(strErrVal != """") 
               		return(strErrVal);

			    psInputs = TheApplication().NewPropertySet();
				psOutputs = TheApplication().NewPropertySet();

				psInputs.SetProperty(""MSISDN Number"", GetFieldValue(""Number String""));
				psInputs.SetProperty(""GenLevel"",GetFieldValue(""SIM Generation Support""));
				//psInputs.SetProperty(""SIM Number"",strNewSIMNumber);
				psInputs.SetProperty(""SIM Number"",strSIMNumberDelim);	
				psInputs.SetProperty(""Contract Id"",GetFieldValue(""Assigned Id""));					
				TheApplication().SetProfileAttr(""NOValidate"", ""Y"");
				bsActivationOrder.InvokeMethod(""ActivateOrder"", psInputs, psOutputs);
				TheApplication().SetProfileAttr(""NOValidate"", ""N"");
            	blnIsRecord = NextRecord();
			}

//--------------------------------------------------------------
// Inform user that no msisdn was associated to the sim card.
//--------------------------------------------------------------
			if(!blnMsisdn)
				return(""RMSACT004"");
			
//----------------------------------------------------------------------------
//Activate the new MSISDN number for the other customer
//----------------------------------------------------------------------------

				
//			SIMActivation(strNewAssocId,strSIMNumberDelim,strContractId,strMSISDNType,strMSISDN,strMSISDNId,bcNumberMaster,bcNewNumInfo,bcNumberBlock,bcNumberAssocConcat,bcNumberAssocDetail,bcNumberMasterConcat);

							
		}
	}
	
	psInputs	= null;
	psOutputs	= null;
//1.1 below
	bsActivationOrder = null;
	bsRMSDeAssociation = null;
//1.1 above
	return(strErrVal);
}
"/**************************************************************************************
* Name          : RMS RMS Interface Service Management					 	          * 
* Author        : Mahindra British Telecom                                            *
* Description   : SIM Swap														      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/06/2005	1.0   		Mahindra British Telecom   	Created      				  *
**************************************************************************************/
function SIMSwap(Inputs,Outputs,bcNumberMaster) {  
	/*var strOldSIMNum = """";  //KT21-06-06
	var strOldSIMId = """"
	var strNewSIMNum = """";
	var strNewSIMId ="""";
	var strMSISDNNum = """";
	var strMSISDNId = """";
	var strSRId = """";
	var strServAccntId = """";
	
	var boAccnt = TheApplication().GetBusObject(""EECC Service Accounts"");
	var bcAccnt = boAccnt.GetBusComp(""CUT Service Sub Accounts"");
	var bcAsset = boAccnt.GetBusComp(""Asset Mgmt - Asset (Order Mgmt)"");
	    
	var boOrderMgmnt = TheApplication().GetBusObject(""Order Entry (Sales)"");
	var bcOrderMgmnt = boOrderMgmnt.GetBusComp(""Order Entry - Orders"");
	var bcOrderLineItem = boOrderMgmnt.GetBusComp(""Order Entry - Line Items (Simple)"");
	
	var boAssetSIMUpd =  TheApplication().GetBusObject(""Asset Management"");
	var bcAssetSIMUpd =  boAssetSIMUpd.GetBusComp(""Asset Mgmt - Asset"");
	
	var boSR =  TheApplication().GetBusObject(""Service Request"");
	var bcSR =  boSR.GetBusComp(""Service Request"");
	
	var bsRMSInterfaceServiceMgmnt = TheApplication().GetService(""RMS RMS Interface Service Management"");
    var psInputs = TheApplication().NewPropertySet();
	var psOutputs = TheApplication().NewPropertySet();

//Get Service Account and SR ID from order	
	with(bcOrderMgmnt) {
		SetViewMode(AllView);	
		ActivateField(""EE Current SIM"");
		ActivateField(""Service Request Id"");
		ActivateField(""Service Account Id"");
		ClearToQuery()
		SetSearchSpec(""Id"",Inputs.GetProperty(""OrderId""));
		ExecuteQuery();
		if(FirstRecord()) {
			strSRId = GetFieldValue(""Service Request Id"");
			strServAccntId = GetFieldValue(""Service Account Id"");
		}
	}
	
//Get Service Account and SR ID from order	

	if(strSRId != """") {
		with(bcSR) {
			SetViewMode(AllView);
			ActivateField(""EECC String 2"");
			ClearToQuery()
			SetSearchSpec(""Id"",strSRId);
			ExecuteQuery();
			if(FirstRecord())	
				strOldSIMNum = GetFieldValue(""EECC String 2"")
	
			strOldSIMId = GetNumId(bcNumberMaster,strOldSIMNum);
		}
	}else {
		strOldSIMNum = bcOrderMgmnt.GetFieldValue(""EE Current SIM"");
		
		strOldSIMId = GetNumId(bcNumberMaster,strOldSIMNum);
	}
	
//Get New SIM and MSISDN from order line item
	
	with(bcOrderLineItem) {
		ActivateField(""Service Id"");
		ActivateField(""Product"");
		ClearToQuery()
		SetSearchSpec(""Order Header Id"",Inputs.GetProperty(""OrderId""));
		ExecuteQuery();
		var blnIsRecord = FirstRecord();
		while(blnIsRecord) {
			if(GetFieldValue(""Product"") == TheApplication().InvokeMethod(""LookupValue"", ""EECC_ASSOC_ASSETS"", ""EECC_SIM_CARD"")) {
				strNewSIMNum = GetFieldValue(""Service Id"");		
				strNewSIMId = GetNumId(bcNumberMaster,strNewSIMNum);
				
			}			

			if(GetFieldValue(""Product"") == TheApplication().InvokeMethod(""LookupValue"", ""EECC_ASSOC_ASSETS"", ""EECC_MSISDN"")) {
				strMSISDNNum = GetFieldValue(""Service Id"");		
				strMSISDNId = GetNumId(bcNumberMaster,strMSISDNNum);
			}			
			blnIsRecord = NextRecord();	
		}
	}

//Call RMS BS to deassociate old SIM and associate new SIM

	psInputs.SetProperty(""NEW Number Id"", strNewSIMId);
    psInputs.SetProperty(""OLD Number Id"",strOldSIMId);
    psInputs.SetProperty(""MSISDNId"",strMSISDNId);
	bsRMSInterfaceServiceMgmnt.InvokeMethod(""SIMErrorActivation"", psInputs, psOutputs);

//Update Service Account with new SIM
	with(bcAccnt) {
		SetViewMode(AllView);
		ActivateField(""Service Id"");
		ActivateField(""EE SIM Number"");
		ActivateField(""EE SIM Id"");				
		ClearToQuery()
		SetSearchSpec(""Id"",strServAccntId);
		ExecuteQuery();
		if(FirstRecord()) {
			SetFieldValue(""EE SIM Number"",strNewSIMNum);
			SetFieldValue(""EE SIM Id"",strNewSIMId);			
			WriteRecord();
		}
//Update Asset with new SIM
		with(bcAsset) {
			SetViewMode(AllView);		
			ActivateField(""Product Name"");
			ActivateField(""Serial Number"");
			ActivateField(""EE Last Changed Date"");			
			ActivateField(""Service Account Id"");						
			ClearToQuery();
			ExecuteQuery();
			var blnIsRecord = FirstRecord();
			while(blnIsRecord) {
				var currentTime;
				if(GetFieldValue(""Product Name"")==TheApplication().InvokeMethod(""LookupValue"", ""EECC_ASSOC_ASSETS"", ""EECC_SIM_CARD"")) {
					Clib.strftime(currentTime,""%m/%d/%Y %X"" ,Clib.localtime(Clib.time())); 		
					SetFieldValue(""EE Last Changed Date"",currentTime);			
					SetFieldValue(""Serial Number"",strNewSIMNum);
					WriteRecord();		
					break;
				}
				blnIsRecord	= NextRecord();
			}
		}
	
	}*/
	
}
"/**************************************************************************************
* Name          : RMS RMS Interface Service Management					 	          * 
* Author        : Mahindra British Telecom                                            *
* Description   : Service_PreInvokeMethod										      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver    By     	Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/05/2004	1.0    MBT      Created      				  *
* 26/o6/2006    1.1    Kalyana 
20060711      | 1.2  | Prasad | Siebel ES SCR1, Objects Destroyed

**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   	var boNumberMaster;
	var bcNumberMaster;
	var bcNewNumInfo;

	var	boNumberScheme;
	var	bcNumberBlock;
	
	var	boNumberAssociation;
	var	bcNumberAssocConcat;
	var	bcNumberAssocDetail;
	var	bcNumberMasterConcat;
	var boNumberReservation;
	var bcNumberReservation;
	var boSysPref 		= TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref		= boSysPref.GetBusComp(""System Preferences"");
	
	var psInputs;
	var psOutputs;

	var intReturn = ContinueOperation;	
	var strErrVal = """";
	var strPriceDiff = """";
	
	psInputs   = TheApplication().NewPropertySet();
	psOutputs  = TheApplication().NewPropertySet();

	Outputs.SetProperty(""ErrCode"","""");
	Outputs.SetProperty(""ErrMessage"","""");
	
  	boNumberMaster 	= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNumberMaster 	= boNumberMaster.GetBusComp(""RMS NM Number Enquiry"");
	bcNewNumInfo 	= boNumberMaster.GetBusComp(""RMS NM Number Enquiry"");
	
	boNumberScheme = TheApplication().GetBusObject(""RMS NM Number Scheme"");
// below 1.2
//	bcNumberScheme = boNumberScheme.GetBusComp(""RMS NM Number Scheme"");
// above 1.2
	bcNumberBlock  = boNumberScheme.GetBusComp(""RMS NM Number Block"");
	
	boNumberAssociation  =	TheApplication().GetBusObject(""RMS NM Number Association"");
	bcNumberAssocConcat  =	boNumberAssociation.GetBusComp(""RMS NM Association Number Type Display"");
	bcNumberAssocDetail  =  boNumberAssociation.GetBusComp(""RMS NM Number Association Detail"");
	bcNumberMasterConcat =  boNumberAssociation.GetBusComp(""RMS NM Number Master Concat"");
	
	//boNumberReservation = TheApplication().GetBusObject(""RMS NM Number Reservation For DSO"");  KT 26-06-2006
	//bcNumberReservation  =	boNumberReservation.GetBusComp(""RMS NM Number Reservation For DSO""); KT 26-06-2006
	
	with(bcSysPref) {
		ActivateField(""Value"");
		ClearToQuery();
		SetSearchSpec(""Name"",""RMS_BLOCK_UPDATION"");
		SetSearchSpec(""Value"",""Y"");
		ExecuteQuery(ForwardOnly);
		
		if(FirstRecord())
			blnBlkUpdate	= true;
	}
	
	switch(MethodName){
		
		case ""SIMErrorActivation"":
					
			intReturn = CancelOperation;
			var strErrVal = """";
			strErrVal = SIMErrorActivation(Inputs,bcNumberMaster,bcNewNumInfo,bcNumberBlock,bcNumberAssocConcat,bcNumberAssocDetail,bcNumberMasterConcat);
			if(strErrVal != """") {
		  		Outputs.SetProperty(""ErrCode"",strErrVal);
		  		Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",strErrVal));
			}
			else {
				Outputs.SetProperty(""ErrCode"","""");
				Outputs.SetProperty(""ErrMessage"","""");
			}
			break;
				
		case ""MSISDNErrorActivation"":
					
			intReturn = CancelOperation;
			Outputs.SetProperty(""PriceDiff"",strPriceDiff);
			strErrVal = MSISDNErrorActivation(Inputs,bcNumberMaster,bcNewNumInfo,bcNumberBlock,bcNumberAssocConcat,bcNumberAssocDetail,bcNumberMasterConcat,strPriceDiff);
			if(strErrVal != """") {
				Outputs.SetProperty(""PriceDiff"",strPriceDiff);
		  		Outputs.SetProperty(""ErrCode"",strErrVal);
		  		Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",strErrVal));
			}
			else {
				Outputs.SetProperty(""PriceDiff"",strPriceDiff);			
				Outputs.SetProperty(""ErrCode"","""");
				Outputs.SetProperty(""ErrMessage"","""");
			}
			break;
			
		/*case ""CreateReservationRecord"":
					
			intReturn = CancelOperation;
			CreateResRecord(Inputs,Outputs,bcNumberReservation);
			break;*/

		case ""SIMSwap"":
					
			intReturn = CancelOperation;
			SIMSwap(Inputs,Outputs,bcNumberMaster);
			break;

		case ""MSISDNSwap"":
					
			intReturn = CancelOperation;
     		strErrVal=MSISDNSwap(Inputs,Outputs,bcNumberMaster);
     		if(strErrVal != """") {
		  		Outputs.SetProperty(""ErrCode"",strErrVal);
		  		Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",strErrVal));
     		}else {
		  		Outputs.SetProperty(""ErrCode"","""");
		  		Outputs.SetProperty(""ErrMessage"","""");
     		}
			break;

		case ""PopUpMssg"":
					
			intReturn = CancelOperation;
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",Inputs.GetProperty(""Errcode""));
			TheApplication().RaiseErrorText(strErrVal);
			break;			

		case ""GetMSISDNId"":
			Outputs.SetProperty(""MSISDNId"","""");
			intReturn = CancelOperation;
			GetMSISDNId(Inputs,Outputs,bcNumberMaster);
			break;			
		
		}

		bcNumberMaster 			= null;
		bcNewNumInfo			= null;
		boNumberMaster 			= null;
			
		bcNumberBlock 			= null;
// below 1.2		
//		bcNumberScheme			= null;
// above 1.2
		boNumberScheme 			= null;
		
		bcNumberMasterConcat 	= null;
		bcNumberAssocDetail		= null;
		bcNumberMasterConcat	= null;
		boNumberAssociation  	= null;
		
		//bcNumberReservation		= null;
		//boNumberReservation		= null;
		
		psInputs				= null;
		psOutputs				= null;
		
		bcSysPref				= null;
		boSysPref				= null;
//1.2 below
		bcNumberAssocConcat = null;
//1.2 above
		return(intReturn);
}
var IVRReservationPeriod;
"/**************************************************************************************
* Name          : RMS Number Reservation UpdateReservationEndDate  Method		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Function to Create Service Enquiry                    		      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 04/08/2004	1.0   		Mahindra British Telecom   	Created       04/08/2004      *
**************************************************************************************/
function CreateServiceEnquiry(&Inputs,&Outputs,msContractId)
{
	var bsCreateSR;
	
	var strSysPref	= """";
	var psInputs	= TheApplication().NewPropertySet();
	var psOutputs	= TheApplication().NewPropertySet();
	
	
	try{
		strSysPref	= GetSysPref(""VIBO_IVR_4_SE_CALLTYPE"");
		var arrCallType = strSysPref.split("","");
		if(getArrayLength(arrCallType) == 5) {
			bsCreateSR	= TheApplication().GetService(""RMS Service Request"");
			psInputs.SetProperty(""CallTypeTier1"",arrCallType[0]);
			psInputs.SetProperty(""CallTypeTier2"",arrCallType[1]);
			psInputs.SetProperty(""CallTypeTier3"",arrCallType[2]);
			psInputs.SetProperty(""ContractId"",msContractId);
			psInputs.SetProperty(""DivisionType"",arrCallType[3]);
			psInputs.SetProperty(""ChannelType"",arrCallType[4]);
			psInputs.SetProperty(""SRField"",""RMS Current MSISDN"");
			psInputs.SetProperty(""SRType"",TheApplication().InvokeMethod(""LookupValue"", ""TT_TYPE"", ""SI""));
			psInputs.SetProperty(""SRValue"",Inputs.GetProperty(""MSISDN_Number""));
			
			bsCreateSR.InvokeMethod(""CreateServiceRequest"",psInputs,psOutputs);
		} else {
			Outputs.SetProperty(""ErrCode"",""RMSIVR012"");
			Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR012"",""VIBO_IVR_4_SE_CALLTYPE""));
			TheApplication().RaiseErrorText(""EXIT"");
		}
		if(psOutputs.GetProperty(""ErrCode"") != ""0"") {
			Outputs.SetProperty(""ErrCode"",psOutputs.GetProperty(""ErrCode""));
			Outputs.SetProperty(""ErrMessage"",psOutputs.GetProperty(""ErrMessage""));
		}
		
	
	} catch(e) {
		if(Outputs.GetProperty(""ErrCode"") == ""0"") {
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrMessage"",e.errText);
		}
		
	} finally {
		bsCreateSR	= null;
		psInputs	= null;
		psOutputs	= null;
	}
	
	return """";
}
"/**************************************************************************************
* Name          : NM Number Reservation DateToString  Method		 	              * 
* Author        : Mahindra British Telecom                                            *
* Description   : DateToString Code File                      				          *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003	1.0   		Mahindra British Telecom   	Created       30/12/2003      *
**************************************************************************************/

//-------------------------------------------------------------------------------------
//Gets the 'Date','Month','Hours','Minutes','Second' and appends them to a string.
//-------------------------------------------------------------------------------------

function DateToString (intCDate)
{
	var dtDatum = ((intCDate.getMonth() + 1) + ""/"" + intCDate.getDate() + ""/"" + intCDate.getFullYear()
	+ "" "" + intCDate.getHours() + "":"" + intCDate.getMinutes()+ "":"" + intCDate.getSeconds());
	return dtDatum
}
"/**************************************************************************************
* Name          : RMS Number Reservation GetContractId  Method		 	  			  * 
* Author        : Mahindra British Telecom                                            *
* Description   : GetContractId Code File                      		      			  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003	1.0   		Mahindra British Telecom   	Created       30/12/2003      *
**************************************************************************************/
function GetContractId(strOldMSISDNNumber,&Outputs)
{
	var boNumberMaster;
	var bcNumberMaster;
	
	var strReturn		= """";
	
	try{
	boNumberMaster = TheApplication().GetBusObject(""RMS NM Number Reservation"");
	bcNumberMaster = boNumberMaster.GetBusComp(""RMS NM Master Rsrv"");
	
	with(bcNumberMaster) {
		ActivateField(""Number String"");
		ActivateField(""Assigned Id"");
		ClearToQuery();
		SetSearchSpec(""Number String"",strOldMSISDNNumber);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord()) 
			strReturn = GetFieldValue(""Assigned Id"");
	}
	} catch(e) {
		if(Outputs.GetProperty(""ErrCode"") == ""0"") {
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrCode"",e.errText);
		}
	
	} finally {
		bcNumberMaster = null;
		boNumberMaster = null;
	}
	
	return(strReturn);
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation GetDealerCode  Method		 	  		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Get Dealer Code from Sys Pref                      				  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/06/2004	1.0   		Mahindra British Telecom   	Created       15/06/2004      *
**************************************************************************************/
function GetDealerCode(strDealerType)
{
	var boSysPref;
	var bcSysPref;
	
	var strSysDealerCode	= """";
	var strDealerCode		= """";
	
	var blnIsRecord			= false;
	
	switch(strDealerType) {
		case ""CUS"":
			strSysDealerCode = ""VIBO_IVR_CUST_DEALERCODE"";
			break;
		case ""PCU"":
			strSysDealerCode = ""VIBO_IVR_PROSP_DEALERCODE"";
			break;
		default:
			break;
	}
	
	if(strSysDealerCode != """") {
		boSysPref = TheApplication().GetBusObject(""System Preferences"");
		bcSysPref = boSysPref.GetBusComp(""System Preferences"");
		
		with(bcSysPref) {
			ActivateField(""Value"");
			ActivateField(""Name"");
		
			ClearToQuery();
			SetSearchSpec(""Name"",strSysDealerCode);
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();	
		
			if(blnIsRecord) {
				strDealerCode = GetFieldValue(""Value"");
			}
		}
	}
	
	
	bcSysPref	= null;
	boSysPref	= null;
	
	return(strDealerCode);
	
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation GetSysPref  Method		 	  		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Get Sys Pref                      				  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/06/2004	1.0   		Mahindra British Telecom   	Created       15/06/2004      *
**************************************************************************************/
function GetSysPref(strName)
{
	var boSysPref;
	var bcSysPref;
	var strValue	= """";
	
	var blnIsRecord			= false;
	
	if(strName != """") {
		boSysPref = TheApplication().GetBusObject(""System Preferences"");
		bcSysPref = boSysPref.GetBusComp(""System Preferences"");
		
		with(bcSysPref) {
			ActivateField(""Value"");
			ActivateField(""Name"");
		
			ClearToQuery();
			SetSearchSpec(""Name"",strName);
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();	
		
			if(blnIsRecord) {
				strValue = GetFieldValue(""Value"");
			}
		}
	}
	
	
	bcSysPref	= null;
	boSysPref	= null;
	
	return(strValue);
	
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation IVRReservation  Method		 	  		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : IVRReservation Code File                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003	1.0   		Mahindra British Telecom   	Created       30/12/2003      *
**************************************************************************************/
function IVRReservation(DealerCode,MSISDNNumber,ReservedFor,&Outputs,&Inputs)
{
	var boNumberMaster;
	var bcNumberMaster;
	var boDMSVBC;
	var bcDMSVBC;
	
	var bsRMSBlk;
	var psBlkInputs

	var HAppointment;
	var blnIsRec;
	var dtDateobj;

	try{
	boNumberMaster = TheApplication().GetBusObject(""RMS NM Number Reservation"");
	bcNumberMaster = boNumberMaster.GetBusComp(""RMS NM Master Rsrv"");
	
	boDMSVBC = TheApplication().GetBusObject(""RMS BO DMS"");
	bcDMSVBC = boDMSVBC.GetBusComp(""RMS VBC DMS"");
	
//----------------------------------------------
// Querying and retrieving data from DMS system.
//----------------------------------------------	

	with(bcDMSVBC) {
		ActivateField(""HAPPOINTMENT"");
		ActivateField(""IVR_REDAYS"");
		ActivateField(""DEALER_CODE"");
		ActivateField(""Record Blocking Date"");
		ActivateField(""Record Blocked For"");
		
//-----------------------------------------------------------
// Code added for Phase 1A2 for activating dealer name,
// dealer area code and dealer channel code.
//-----------------------------------------------------------		
		ActivateField(""DEALER_NAME"");
		ActivateField(""AREANAME"");
		ActivateField(""CHANNELNAME"");
		
		ClearToQuery();
		SetSearchSpec(""DEALER_CODE"",DealerCode);
		ExecuteQuery();

		if(FirstRecord()) {
			HAppointment = GetFieldValue(""HAPPOINTMENT"");
			IVRReservationPeriod = GetFieldValue(""IVR_REDAYS"");
			
			if(ToInteger(HAppointment) <= 0) {
				Outputs.SetProperty(""ErrCode"",""RMSIVR003"");
				Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR003""));
				TheApplication().RaiseErrorText(""EXIT"");
			}	
		}
		else {
			Outputs.SetProperty(""ErrCode"",""RMSIVR004"");
			Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR004""));
			TheApplication().RaiseErrorText(""EXIT"");
		}
	}
	
//--------------------------------------------------------------------
// Querying Number Master and updating the numbers status accordingly.
//--------------------------------------------------------------------	
	
	with(bcNumberMaster) {
		//ActivateField(""Reserved For"");
		ActivateField(""Reservation End Date"");
		ActivateField(""Reserved To"");
		ActivateField(""Sales Code"");
		ActivateField(""Status Date"");
		ActivateField(""Current Date"");
		ActivateField(""Record Blocked For"");
		ActivateField(""Record Blocking Date"");
		ActivateField(""Num Mstr Status Before Reservation"");
//-----------------------------------------------------------
// Code added for Phase 1A2 for activating dealer name,
// dealer area code and dealer channel code.
//-----------------------------------------------------------		
		ActivateField(""Dealer Area Code"");
		ActivateField(""Dealer Channel Code"");
		ActivateField(""Dealer Name"");
		ActivateField(""Status Date"");
		ActivateField(""Source System"");
		
		ActivateField(""Status"");
		ActivateField(""Number String"");
		ActivateField(""Block Id"");
		//ActivateField(""Curr Date"");
		
		ClearToQuery();
		SetSearchSpec(""Number String"",MSISDNNumber);
		ExecuteQuery();
		
		if(FirstRecord()){
			if(GetFieldValue(""Status"") != TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE"")) {
				Outputs.SetProperty(""ErrCode"",""RMSIVR005"");
				Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR005""));
				TheApplication().RaiseErrorText(""EXIT"");
			} 
			if(GetFieldValue(""Is Associated"") == ""Y"") {
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",GetFieldValue(""Assoc Start Id""));
				ExecuteQuery(ForwardOnly);
				blnIsRec = FirstRecord();
				while(blnIsRec) {
					ReserveNumbers(bcNumberMaster,DealerCode,ReservedFor,Inputs);
					blnIsRec = NextRecord();
				}
				if(Inputs.GetProperty(""Source"") == ""IVR"") {
					bcDMSVBC.SetFieldValue(""HAPPOINTMENT"",ToInteger(HAppointment)-1);
					bcDMSVBC.WriteRecord();
				}
			}
			else {
				
				ReserveNumbers(bcNumberMaster,DealerCode,ReservedFor,Inputs);
//-----------------------------------
// Update HAppointment in DMS system.
//-----------------------------------
				if(Inputs.GetProperty(""Source"") == ""IVR"") {
					bcDMSVBC.SetFieldValue(""HAPPOINTMENT"",ToInteger(HAppointment)-1);
					bcDMSVBC.WriteRecord();
				}
			}
		}
		else {
			Outputs.SetProperty(""ErrCode"",""RMSIVR006"");
			Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR006""));
			TheApplication().RaiseErrorText(""EXIT"");
		
		}
	}
	} catch(e) {
		if(Outputs.GetProperty(""ErrCode"") == ""0"") {
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrMessage"",e.errText);
		}	

	} finally {
		
		bcNumberMaster	= null;
		boNumberMaster	= null;
		bcDMSVBC		= null;
		boDMSVBC		= null;
		
		bsRMSBlk	= null;
		psBlkInputs	= null;
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation ReserveNumbers  Method		 	  		  * 
* Author        : Mahindra British Telecom                                            *
* Description   : ReserveNumbers Code File                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003	1.0   		Mahindra British Telecom   	Created       30/12/2003      *
**************************************************************************************/
function ReserveNumbers(&bcNumberMaster,DealerCode,ReservedFor, &Inputs)
{
	var dtDateobj;
	var psBlkInputs;
	var psBlkOutputs;
	var bsRMSBlk;
	
	try{
	with(bcNumberMaster) {
	
		SetFieldValue(""Num Mstr Status Before Reservation"",GetFieldValue(""Status""));
		SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED""));
		//SetFieldValue(""Reserved For"",ReservedFor);
		dtDateobj = UpdateReservationEndDate(bcNumberMaster,IVRReservationPeriod);
		SetFieldValue(""Reservation End Date"",DateToString(dtDateobj));
		SetFieldValue(""Reserved To"",DealerCode);
		SetFieldValue(""Sales Code"",DealerCode);
		SetFieldValue(""Record Blocked For"",ReservedFor);
		if((Inputs.GetProperty(""Source"") == ""CUS"") || (Inputs.GetProperty(""Source"") == ""PCU"") || (Inputs.GetProperty(""Source"") == ""IVR"")) {
			SetFieldValue(""Source System"",TheApplication().InvokeMethod(""LookupValue"",""NM_RESERVE_SOURCE"",""IVR""));
		}
		if(Inputs.GetProperty(""Source"") == ""CUS"" )
			SetFieldValue(""Record Blocking Date"",DateToString(dtDateobj));
		else 
			SetFieldValue(""Record Blocking Date"",GetFieldValue(""Current Date""));
		SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
		WriteRecord();
				
//-----------------------------------------
// Update the block count of MSISDN number.
//-----------------------------------------
		psBlkInputs 	= TheApplication().NewPropertySet();
		psBlkOutputs	= TheApplication().NewPropertySet();
		
		with(psBlkInputs){
			SetProperty(""Object Id"",GetFieldValue(""Block Id""));
			SetProperty(""From Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));
			SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""RESERVED""));
		}
			
		bsRMSBlk = TheApplication().GetService(""RMS RMS Block Calc"");
		bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
		
	}
	} catch(e) {
		if(Outputs.GetProperty(""ErrCode"") == ""0"") {
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrMessage"",e.errText);
		}
		
		
	} finally {
		psBlkInputs	= null;
		psBlkOutputs= null;
		bsRMSBlk	= null;
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Reservation For IVR Service_PreInvoke Method    	  *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS NM Number Reservation For IVR Code File	    		          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003 	1.0   		MBT						   	Created      30/12/2003       *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs){

	var intReturn 		= CancelOperation;
	var strErrVal 		= """";
	var strReservedFor	= """";
	var strDealerCode	= """";
	var bsGetNumbers;
	
	var psInputs		= TheApplication().NewPropertySet();
	var psOutputs		= TheApplication().NewPropertySet();
	
	
	try{ 
	
	Outputs.SetProperty(""ErrCode"",""0"");
	Outputs.SetProperty(""ErrMessage"","""");
	
	bsGetNumbers		= TheApplication().GetService(""RMS RMS GetNumbers"");
	
	strDealerCode 		= Inputs.GetProperty(""Sales_Code"");
	
	if(Inputs.GetProperty(""MSISDN_Number"") == """") {
		Outputs.SetProperty(""ErrCode"",""RMSIVR006"");
		Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR006""));
		TheApplication().RaiseErrorText(""EXIT"");
	}
	
	switch(MethodName) {
		case ""IVRReservation"":
			
			switch(Inputs.GetProperty(""Source"")) {
				case ""IVR"": //Dealer thru IVR
					strDealerCode = Inputs.GetProperty(""Sales_Code"");
					strReservedFor = Inputs.GetProperty(""Reserved_For""); //this can be blank in case of customer
					strErrVal = IVRReservation(strDealerCode,Inputs.GetProperty(""MSISDN_Number""),strReservedFor,Outputs,Inputs);
					break;
				case ""CUS"": //Existing Customer
					strReservedFor = GetContractId(Inputs.GetProperty(""Old_MSISDN_Number""),Outputs);
					Outputs.SetProperty(""Contract_Id"",strReservedFor);
					if(strDealerCode == """")
						strDealerCode = GetDealerCode(""CUS"");
					if(strDealerCode != """") {
						psInputs.SetProperty(""IVR_ID"",strDealerCode);
						psInputs.SetProperty(""MSISDN"",Inputs.GetProperty(""Old_MSISDN_Number""));
						bsGetNumbers.InvokeMethod(""ValidateReservationQuota"",psInputs,psOutputs);
						if(psOutputs.GetProperty(""Error_Code"") == ""0"") {
							strErrVal = IVRReservation(strDealerCode,Inputs.GetProperty(""MSISDN_Number""),strReservedFor,Outputs,Inputs);
							//Create Service Enquiry 
							strErrVal = CreateServiceEnquiry(Inputs,Outputs,strReservedFor);
						} else {
							Outputs.SetProperty(""ErrCode"",psOutputs.GetProperty(""Error_Code""));
							Outputs.SetProperty(""ErrMessage"",psOutputs.GetProperty(""Error_Message""));
						}
					} else {
						Outputs.SetProperty(""ErrCode"",""RMSIVR004"");
						Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR004""));
					}
					break;
				case ""PCU"": //Potential Customer
					strReservedFor = Inputs.GetProperty(""Reserved_For"");
					if(strDealerCode == """")
						strDealerCode = GetDealerCode(""PCU"");
					if(strDealerCode != """") {
						psInputs.SetProperty(""IVR_ID"",strDealerCode);
						psInputs.SetProperty(""Personal_Id"",Inputs.GetProperty(""Reserved_For""));
						bsGetNumbers.InvokeMethod(""ValidateReservationQuota"",psInputs,psOutputs);
						if(psOutputs.GetProperty(""Error_Code"") == ""0"") {
							strErrVal = IVRReservation(strDealerCode,Inputs.GetProperty(""MSISDN_Number""),strReservedFor,Outputs,Inputs);
						} else {
							Outputs.SetProperty(""ErrCode"",psOutputs.GetProperty(""Error_Code""));
							Outputs.SetProperty(""ErrMessage"",psOutputs.GetProperty(""Error_Message""));
						}
					} else {
						Outputs.SetProperty(""ErrCode"",""RMSIVR004"");
						Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSIVR004""));
					}
					break;
				default:
					intReturn 		= ContinueOperation;
					break;				
			}
			
			break;
		default:
			intReturn = CancelOperation;
			break;
			
	}
		
	}catch(e){
		
		if(Outputs.GetProperty(""ErrCode"") == ""0"") {
			Outputs.SetProperty(""ErrCode"",e.errCode);
			Outputs.SetProperty(""ErrMessage"",e.errText);
		}
	
	
	} finally {
		Outputs.SetProperty(""Error_Code"",Outputs.GetProperty(""ErrCode""));
		Outputs.SetProperty(""Error_Message"",Outputs.GetProperty(""ErrMessage""));
		
		IVRReservationPeriod = """";
		
		psInputs		= null;
		psOutputs		= null;
		bsGetNumbers	= null;
	}
	return(intReturn);
}
"/**************************************************************************************
* Name          : RMS Number Reservation UpdateReservationEndDate  Method		 	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : UpdateReservationEndDate Code File                      		      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 30/12/2003	1.0   		Mahindra British Telecom   	Created       30/12/2003      *
**************************************************************************************/
function UpdateReservationEndDate(&bcNumberMstr,ReservationPeriod)
{
	
		var dtReservationEndDate = bcNumberMstr.GetFieldValue(""Current Date"");
		var dtReservationDateObj = new Date(dtReservationEndDate);
  
		dtReservationDateObj.setTime(dtReservationDateObj.getTime() + (ReservationPeriod * 24 * 60 * 60 * 1000));
		return(dtReservationDateObj);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
/**************************************************************************************
* Name          : RMS RMS Update Numbers Service PreInvoke Method			 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS RMS Update Numbers Code File            	                      *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver    By       Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 09/06/2004 	1.0    MBT   	Created       09/06/2004	  *
20060710      | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
20060713      | 1.2  | Kalyana| To  Set  property value ""ReUse""  instead  of ""CancelOrder""
								for Property Name ""Source""
20120726      | 1.3  | Suman Kanumuri | Added code for clearing Vanity Paid flag for recycled numbers
20121220      | 1.4  | Suman Kanumuri | Added Code for cleaning Migration SIM NUmber for recycled Numbers
20170516      | 1.5  | Navinkumar Rai | //[NAVIN:11May017:NumberReclaimSREnh]
**************************************************************************************/
	var boNumEnq, bcNumEnq;
	var strFromStatus, strToStatus, strBlockId, strNumAvlDateDiff;
	var bsDeassociate, psInputs, psOutputs;
	var vRecycleFlag = """";//[NAVIN:11May017:NumberReclaimSREnh]
	var blnIsRecord;
	var intRetCode = ContinueOperation;
	psInputs = TheApplication().NewPropertySet();
	psOutputs = TheApplication().NewPropertySet();
//-------------------[GB][11-05-2006]---------------------
	if(MethodName == ""UpdateNumberStatus"")
	{
		UpdateNumberStatus();
		intRetCode = CancelOperation;
	}
	else if(MethodName == ""UpdateNumbers"")
	{
		bsDeassociate	 = TheApplication().GetService(""RMS RMS Deassociate Function"");
		boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
		bcNumEnq = boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update""); // 23rd June : RMS NM Number Enquiry 
		with(bcNumEnq) 
		{
			ActivateField(""Number String"");
			ActivateField(""Assoc Start Id"");
			ActivateField(""Block Id"");
			ActivateField(""Status"");
			ActivateField(""Available Date"");
			ActivateField(""Quarantine Date"");
			ActivateField(""Status Date"");
			ActivateField(""Is Associated"");
			ActivateField(""Available Date Reached"");
			ActivateField(""Current Date"");
			ActivateField(""Assigned Id"");
			ActivateField(""Assigned Date"");
			ActivateField(""Allocation Id"");
			ActivateField(""Reserved To"");
			ActivateField(""Sales Code"");
			ActivateField(""Using Type"");
			ActivateField(""Resv Id""); // 23rd June
			ActivateField(""Reservation End Date"");
			ActivateField(""Record Blocked For"");
			ActivateField(""Record Blocking Date"");
			ActivateField(""Disconnect Type"");
			ActivateField(""Artwork Id"");
			ActivateField(""Pre Activation Id"");
			ActivateField(""Allocated To"");
//below 1.3
			ActivateField(""STC Vanity Paid"");
//above 1.2 
			//below 1.4
		//	ActivateField(""Migrated SIM Number"");
			//above 1.4
//29-Nov-2016 Fields added to mark null
			ActivateField(""STC Migration Type"");
			ActivateField(""STC Customer Existing Plan"");
			ActivateField(""Migrated SIM Number"");
			ActivateField(""STC Recycle Flag"");//[NAVIN:11May017:NumberReclaimSREnh]
			ClearToQuery();
			SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""));
			SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE""));				
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();	
		
			while(blnIsRecord){	
				
				strNumAvlDateDiff = GetFieldValue(""Available Date Reached"");
				vRecycleFlag = GetFieldValue(""STC Recycle Flag"");//[NAVIN:11May017:NumberReclaimSREnh]
				if((GetFieldValue(""Available Date Reached"") >= 0) && !(vRecycleFlag == ""N"")) //[NAVIN:11May017:NumberReclaimSREnh]
				{
						if(GetFieldValue(""Is Associated"") == ""Y""){
					
//						psInputs.SetProperty(""MSISDN Id"",GetFieldValue(""Id""));	
//						psInputs.SetProperty(""Assoc Start Id"",GetFieldValue(""Assoc Start Id""));
//						psInputs.SetProperty(""Block Id"",GetFieldValue(""Block Id""));	
//						psInputs.SetProperty(""Current Status"",GetFieldValue(""Status""));	
						psInputs.SetProperty(""Partial(Y/N)"",""Y"");
//below 1.2										
						//psInputs.SetProperty(""Source"",""Cancel Order"");
						psInputs.SetProperty(""Source"",""ReUse"");
//above 1.2 
						psInputs.SetProperty(""MSISDN Number"",GetFieldValue(""Number String""));
//						psInputs.SetProperty(""Type"",""MSISDN"");						
//						psInputs.SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE""));
						bsDeassociate.InvokeMethod(""DeAssociate"",psInputs,psOutputs); 
					}
								
					else {
					
						strFromStatus 	= TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE"");
						strToStatus 	= TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE"");
						strBlockId  	= GetFieldValue(""Block Id"");
						if(TheApplication().GetProfileAttr(""RMS_BLOCK_UPDATION"") == ""Y"")
							UpdateNumberBlock(strBlockId,strFromStatus,strToStatus);
		
						SetFieldValue(""Status"",strToStatus);
						SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
						SetFieldValue(""Available Date"","""");
						SetFieldValue(""Quarantine Date"","""");
						SetFieldValue(""Assoc Start Id"","""");
						SetFieldValue(""Assigned Id"","""");
						SetFieldValue(""Assigned Date"","""");
						SetFieldValue(""Allocation Id"","""");
						SetFieldValue(""Reserved To"","""");
						SetFieldValue(""Sales Code"","""");
						SetFieldValue(""Allocated To"","""");
						SetFieldValue(""Using Type"","""");
						SetFieldValue(""Resv Id"","""");
						SetFieldValue(""Reservation End Date"","""");
						SetFieldValue(""Record Blocked For"","""");
						SetFieldValue(""Record Blocking Date"","""");
						SetFieldValue(""Disconnect Type"","""");
						SetFieldValue(""Artwork Id"","""");
						SetFieldValue(""Pre Activation Id"","""");
//below 1.3						
						SetFieldValue(""STC Vanity Paid"",""No"");
//above 1.3
					//below 1.4
				//	SetFieldValue(""Migrated SIM Number"","""");
					//above 1.4
			//29-Nov-2016
					SetFieldValue(""STC Migration Type"","""");
					SetFieldValue(""STC Customer Existing Plan"","""");
					SetFieldValue(""Migrated SIM Number"","""");
			
						WriteRecord();
					}
				}
				blnIsRecord = bcNumEnq.NextRecord();
			}
		}				
		intRetCode = CancelOperation;
	}
	bcNumEnq 	= null;
	boNumEnq 	= null;
	psInputs	= null;
	psOutputs	= null;
//1.1 below
	bsDeassociate = null;
//1.1 above
	return intRetCode;
}
"/******************************************************************************
* Name          : Update Number Block Function						    	  *
* Author        : Mahindra British Telecom                                    *
* Description   : RMS NM Number Cancel Reservation Code File	              *
* Amendment Details                                                           *
*******************************************************************************
* Date    		Version  	AmendedBy     		Comments     Reviewed Date    *
*******************************************************************************
*                                                                             *
* 11/06/2004 	1.0   		MBT				   	Created      11/06/2004       *
******************************************************************************/

function UpdateNumberBlock(strBlockId,strFromStatus,strToStatus){
	
	var psBlkInputs;
	var psBlkOutputs;
	var bsRMSBlk;

	bsRMSBlk = TheApplication().GetService(""RMS RMS Block Calc"");
	
	psBlkInputs = TheApplication().NewPropertySet();
	psBlkOutputs = TheApplication().NewPropertySet();

	with(psBlkInputs){
		SetProperty(""Object Id"",strBlockId);
		SetProperty(""From Status"",strFromStatus);
		SetProperty(""To Status"",strToStatus);
	}
	
	bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
	
	psBlkInputs		= null;
	psBlkOutputs	= null;
	bsRMSBlk		= null;
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060710       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
---------------+------+--------+----------------------------------------------
*/
function UpdateNumberStatus()
{
	var	boNumEnq;
	var bcNumEnq;
	var bsDeassociate;
	var psInputs;
	var psOutputs;
	var blnIsRecord;
	var strCurrentDate;
	var strSearchSpec= """";
	var tm=Clib.localtime(Clib.time());
	Clib.strftime(strCurrentDate,""%m/%d/%Y %H:%M:%S"",tm);
	psInputs = TheApplication().NewPropertySet();
	psOutputs = TheApplication().NewPropertySet();
	bsDeassociate	 = TheApplication().GetService(""RMS RMS Deassociate Function"");
	boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNumEnq = boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update""); // 23rd June : RMS NM Number Enquiry 
	with(bcNumEnq) 
	{
		ActivateField(""Current Date"");
		ActivateField(""Expiry Date"");
		ClearToQuery();
		//Query only MSISDN numbers. Denorm field used due to performance reasons
		strSearchSpec = ""[Number Type Identifier Denorm] = '"" +TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"") + ""' "";
		//all MISDNS whose expiry date has been reached
		strSearchSpec+= "" AND [Expiry Date] <='"" + strCurrentDate + ""' "";
		//fetches numbers which are allocated to dealers and which are yet to be allocated to dealers
		strSearchSpec+= "" AND ([Status] = '"" +  TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""' "";
		strSearchSpec+= "" OR [Status] = '"" +  TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"") + ""') "";
		strSearchSpec+= "" AND [Is Associated] = 'Y'""; //fetches only associated MSISDN numbers
		SetSearchExpr(strSearchSpec);
		//SetSearchSpec(""Number Type Identifier Denorm"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""));			
		//SetSearchSpec(""Status"",TheApplication().InvokeMEthod(""LookupValue"","""",""""));
		//SetSearchSpec(""Expiry Date"",""<='""+strCurrentDate+""'"");	
		ExecuteQuery();
		blnIsRecord = FirstRecord();	
		while(blnIsRecord)
		{	
			psInputs.SetProperty(""Partial(Y/N)"",""Y"");
			//psInputs.SetProperty(""Partial(Y/N)"",""N"");
			psInputs.SetProperty(""Source"",""Disconnect"");
			psInputs.SetProperty(""MSISDN Number"",GetFieldValue(""Number String""));
			bsDeassociate.InvokeMethod(""DeAssociate"",psInputs,psOutputs); 
			blnIsRecord = bcNumEnq.NextRecord();
		}//  while ends
	}//  with ends			
	bcNumEnq 	= null;
	boNumEnq 	= null;
	psInputs	= null;
	psOutputs	= null;
//1.1 below
	bsDeassociate = null;
//1.1 above
	return (ContinueOperation);	
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
/**************************************************************************************
* Name          : RMS RMS Update Numbers Service PreInvoke Method           * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS RMS Update Numbers Code File                                   *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Ver    By       Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 09/06/2004  1.0    MBT    Created       09/06/2004   *
20060710      | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
20060713      | 1.2  | Kalyana| To  Set  property value ""ReUse""  instead  of ""CancelOrder""
        for Property Name ""Source""
20120726      | 1.3  | Suman Kanumuri | Added code for clearing Vanity Paid flag for recycled numbers
20121220      | 1.4  | Suman Kanumuri | Added Code for cleaning Migration SIM NUmber for recycled Numbers
20170516      | 1.5  | Navinkumar Rai | //[NAVIN:11May017:NumberReclaimSREnh]
**************************************************************************************/
var boNumEnq, bcNumEnq;
var strFromStatus, strToStatus, strBlockId, strNumAvlDateDiff;
var bsDeassociate, psInputs, psOutputs;
var vRecycleFlag = """";//[NAVIN:11May017:NumberReclaimSREnh]
var blnIsRecord;
var intRetCode = ContinueOperation;
 psInputs = TheApplication().NewPropertySet();
 psOutputs = TheApplication().NewPropertySet();
//-------------------[GB][11-05-2006]---------------------
 if(MethodName == ""UpdateNumberStatus"")
 {
  UpdateNumberStatus();
  intRetCode = CancelOperation;
 }
 else if(MethodName == ""UpdateNumbers"")
 {
  bsDeassociate  = TheApplication().GetService(""RMS RMS Deassociate Function"");
  boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
  bcNumEnq = boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update""); // 23rd June : RMS NM Number Enquiry 
  with(bcNumEnq) 
  {
   ActivateField(""Number String"");
   ActivateField(""Assoc Start Id"");
   ActivateField(""Block Id"");
   ActivateField(""Status"");
   ActivateField(""Available Date"");
   ActivateField(""Quarantine Date"");
   ActivateField(""Status Date"");
   ActivateField(""Is Associated"");
   ActivateField(""Available Date Reached"");
   ActivateField(""Current Date"");
   ActivateField(""Assigned Id"");
   ActivateField(""Assigned Date"");
   ActivateField(""Allocation Id"");
   ActivateField(""Reserved To"");
   ActivateField(""Sales Code"");
   ActivateField(""Using Type"");
   ActivateField(""Resv Id""); // 23rd June
   ActivateField(""Reservation End Date"");
   ActivateField(""Record Blocked For"");
   ActivateField(""Record Blocking Date"");
   ActivateField(""Disconnect Type"");
   ActivateField(""Artwork Id"");
   ActivateField(""Pre Activation Id"");
   ActivateField(""Allocated To"");
//below 1.3
   ActivateField(""STC Vanity Paid"");
//above 1.2 
   //below 1.4
  // ActivateField(""Migrated SIM Number"");
   //above 1.4
   ActivateField(""STC Recycle Flag"");//[NAVIN:11May017:NumberReclaimSREnh]
   ClearToQuery();
   SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""));
   SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE""));    
   ExecuteQuery(ForwardOnly);
   blnIsRecord = FirstRecord(); 
  
   while(blnIsRecord){ 
    
    strNumAvlDateDiff = GetFieldValue(""Available Date Reached"");
    vRecycleFlag = GetFieldValue(""STC Recycle Flag"");//[NAVIN:11May017:NumberReclaimSREnh]
    if((GetFieldValue(""Available Date Reached"") >= 0) && !(vRecycleFlag == ""N"")) //[NAVIN:11May017:NumberReclaimSREnh]
	{
      if(GetFieldValue(""Is Associated"") == ""Y""){
     
//      psInputs.SetProperty(""MSISDN Id"",GetFieldValue(""Id"")); 
//      psInputs.SetProperty(""Assoc Start Id"",GetFieldValue(""Assoc Start Id""));
//      psInputs.SetProperty(""Block Id"",GetFieldValue(""Block Id"")); 
//      psInputs.SetProperty(""Current Status"",GetFieldValue(""Status"")); 
      psInputs.SetProperty(""Partial(Y/N)"",""Y"");
//below 1.2          
      //psInputs.SetProperty(""Source"",""Cancel Order"");
      psInputs.SetProperty(""Source"",""ReUse"");
//above 1.2 
      psInputs.SetProperty(""MSISDN Number"",GetFieldValue(""Number String""));
//      psInputs.SetProperty(""Type"",""MSISDN"");      
//      psInputs.SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE""));
      bsDeassociate.InvokeMethod(""DeAssociate"",psInputs,psOutputs); 

    var bsMSISDNAllocation = TheApplication().GetService(""Workflow Process Manager"");
    var bsMSISDNInputs = TheApplication().NewPropertySet();
    var bsMSISDNOuputs = TheApplication().NewPropertySet();
    bsMSISDNInputs.SetProperty(""ProcessName"", ""STC Update DATA SIM Availability Date WF"");
    bsMSISDNInputs.SetProperty(""SIMNumber"", GetFieldValue(""Number String""));
    bsMSISDNInputs.SetProperty(""Process"", ""Allocation"");
    bsMSISDNAllocation.InvokeMethod(""RunProcess"", bsMSISDNInputs, bsMSISDNOuputs);
     }
        
     else {
     
      strFromStatus  = TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE"");
      strToStatus  = TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE"");
      strBlockId   = GetFieldValue(""Block Id"");
      if(TheApplication().GetProfileAttr(""RMS_BLOCK_UPDATION"") == ""Y"")
       UpdateNumberBlock(strBlockId,strFromStatus,strToStatus);
  
      SetFieldValue(""Status"",strToStatus);
      SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
      SetFieldValue(""Available Date"","""");
      SetFieldValue(""Quarantine Date"","""");
      SetFieldValue(""Assoc Start Id"","""");
      SetFieldValue(""Assigned Id"","""");
      SetFieldValue(""Assigned Date"","""");
      SetFieldValue(""Allocation Id"","""");
      SetFieldValue(""Reserved To"","""");
      SetFieldValue(""Sales Code"","""");
      SetFieldValue(""Allocated To"","""");
      SetFieldValue(""Using Type"","""");
      SetFieldValue(""Resv Id"","""");
      SetFieldValue(""Reservation End Date"","""");
      SetFieldValue(""Record Blocked For"","""");
      SetFieldValue(""Record Blocking Date"","""");
      SetFieldValue(""Disconnect Type"","""");
      SetFieldValue(""Artwork Id"","""");
      SetFieldValue(""Pre Activation Id"","""");
//below 1.3      
      SetFieldValue(""STC Vanity Paid"",""No"");
//above 1.3
     //below 1.4
    // SetFieldValue(""Migrated SIM Number"","""");
     //above 1.4
      WriteRecord();
     }
    }
    blnIsRecord = bcNumEnq.NextRecord();
   }
  }    
  intRetCode = CancelOperation;
 }
 bcNumEnq  = null;
 boNumEnq  = null;
 psInputs = null;
 psOutputs = null;
//1.1 below
 bsDeassociate = null;
//1.1 above
 return intRetCode;
}
"/******************************************************************************
* Name          : Update Number Block Function             *
* Author        : Mahindra British Telecom                                    *
* Description   : RMS NM Number Cancel Reservation Code File               *
* Amendment Details                                                           *
*******************************************************************************
* Date      Version   AmendedBy       Comments     Reviewed Date    *
*******************************************************************************
*                                                                             *
* 11/06/2004  1.0     MBT        Created      11/06/2004       *
******************************************************************************/

function UpdateNumberBlock(strBlockId,strFromStatus,strToStatus){
 
 var psBlkInputs;
 var psBlkOutputs;
 var bsRMSBlk;

 bsRMSBlk = TheApplication().GetService(""RMS RMS Block Calc"");
 
 psBlkInputs = TheApplication().NewPropertySet();
 psBlkOutputs = TheApplication().NewPropertySet();

 with(psBlkInputs){
  SetProperty(""Object Id"",strBlockId);
  SetProperty(""From Status"",strFromStatus);
  SetProperty(""To Status"",strToStatus);
 }
 
 bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
 
 psBlkInputs  = null;
 psBlkOutputs = null;
 bsRMSBlk  = null;
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060710       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
---------------+------+--------+----------------------------------------------
*/
function UpdateNumberStatus()
{
 var boNumEnq;
 var bcNumEnq;
 var bsDeassociate;
 var psInputs;
 var psOutputs;
 var blnIsRecord;
 var strCurrentDate;
 var strSearchSpec= """";
 var tm=Clib.localtime(Clib.time());
 Clib.strftime(strCurrentDate,""%m/%d/%Y %H:%M:%S"",tm);
 psInputs = TheApplication().NewPropertySet();
 psOutputs = TheApplication().NewPropertySet();
 bsDeassociate  = TheApplication().GetService(""RMS RMS Deassociate Function"");
 boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
 bcNumEnq = boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update""); // 23rd June : RMS NM Number Enquiry 
 with(bcNumEnq) 
 {
  ActivateField(""Current Date"");
  ActivateField(""Expiry Date"");
  ClearToQuery();
  //Query only MSISDN numbers. Denorm field used due to performance reasons
  strSearchSpec = ""[Number Type Identifier Denorm] = '"" +TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"") + ""' "";
  //all MISDNS whose expiry date has been reached
  strSearchSpec+= "" AND [Expiry Date] <='"" + strCurrentDate + ""' "";
  //fetches numbers which are allocated to dealers and which are yet to be allocated to dealers
  strSearchSpec+= "" AND ([Status] = '"" +  TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""' "";
  strSearchSpec+= "" OR [Status] = '"" +  TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"") + ""') "";
  strSearchSpec+= "" AND [Is Associated] = 'Y'""; //fetches only associated MSISDN numbers
  SetSearchExpr(strSearchSpec);
  //SetSearchSpec(""Number Type Identifier Denorm"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""));   
  //SetSearchSpec(""Status"",TheApplication().InvokeMEthod(""LookupValue"","""",""""));
  //SetSearchSpec(""Expiry Date"",""<='""+strCurrentDate+""'""); 
  ExecuteQuery();
  blnIsRecord = FirstRecord(); 
  while(blnIsRecord)
  { 
   psInputs.SetProperty(""Partial(Y/N)"",""Y"");
   //psInputs.SetProperty(""Partial(Y/N)"",""N"");
   psInputs.SetProperty(""Source"",""Disconnect"");
   psInputs.SetProperty(""MSISDN Number"",GetFieldValue(""Number String""));
   bsDeassociate.InvokeMethod(""DeAssociate"",psInputs,psOutputs); 
   blnIsRecord = bcNumEnq.NextRecord();
  }//  while ends
 }//  with ends   
 bcNumEnq  = null;
 boNumEnq  = null;
 psInputs = null;
 psOutputs = null;
//1.1 below
 bsDeassociate = null;
//1.1 above
 return (ContinueOperation); 
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
/**************************************************************************************
* Name          : RMS RMS Update Numbers Service PreInvoke Method			 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS RMS Update Numbers Code File            	                      *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver    By       Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 09/06/2004 	1.0    MBT   	Created       09/06/2004	  *
20060710      | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
20060713      | 1.2  | Kalyana| To  Set  property value ""ReUse""  instead  of ""CancelOrder""
								for Property Name ""Source""
20120726      | 1.3  | Suman Kanumuri | Added code for clearing Vanity Paid flag for recycled numbers
20121220      | 1.4  | Suman Kanumuri | Added Code for cleaning Migration SIM NUmber for recycled Numbers
20170516      | 1.5  | Navinkumar Rai | //[NAVIN:11May017:NumberReclaimSREnh]
**************************************************************************************/
	var	boNumEnq, bcNumEnq;
	var strFromStatus, strToStatus, strBlockId, strNumAvlDateDiff;
	var bsDeassociate, psInputs, psOutputs;
	var vRecycleFlag = """";//[NAVIN:11May017:NumberReclaimSREnh]
	var blnIsRecord;
	var intRetCode = ContinueOperation;
	psInputs = TheApplication().NewPropertySet();
	psOutputs = TheApplication().NewPropertySet();
//-------------------[GB][11-05-2006]---------------------
	if(MethodName == ""UpdateNumberStatus"")
	{
		UpdateNumberStatus();
		intRetCode = CancelOperation;
	}
	else if(MethodName == ""UpdateNumbers"")
	{
		bsDeassociate	 = TheApplication().GetService(""RMS RMS Deassociate Function"");
		boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
		bcNumEnq = boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update""); // 23rd June : RMS NM Number Enquiry 
		with(bcNumEnq) 
		{
			ActivateField(""Number String"");
			ActivateField(""Assoc Start Id"");
			ActivateField(""Block Id"");
			ActivateField(""Status"");
			ActivateField(""Available Date"");
			ActivateField(""Quarantine Date"");
			ActivateField(""Status Date"");
			ActivateField(""Is Associated"");
			ActivateField(""Available Date Reached"");
			ActivateField(""Current Date"");
			ActivateField(""Assigned Id"");
			ActivateField(""Assigned Date"");
			ActivateField(""Allocation Id"");
			ActivateField(""Reserved To"");
			ActivateField(""Sales Code"");
			ActivateField(""Using Type"");
			ActivateField(""Resv Id""); // 23rd June
			ActivateField(""Reservation End Date"");
			ActivateField(""Record Blocked For"");
			ActivateField(""Record Blocking Date"");
			ActivateField(""Disconnect Type"");
			ActivateField(""Artwork Id"");
			ActivateField(""Pre Activation Id"");
			ActivateField(""Allocated To"");
//below 1.3
			ActivateField(""STC Vanity Paid"");
//above 1.2 
			//below 1.4
			ActivateField(""Migrated SIM Number"");
			//above 1.4
			ActivateField(""STC Recycle Flag"");//[NAVIN:11May017:NumberReclaimSREnh]
			ClearToQuery();
			SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""));
			SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE""));				
			ExecuteQuery(ForwardOnly);
			blnIsRecord = FirstRecord();	
		
			while(blnIsRecord){	
				
				strNumAvlDateDiff = GetFieldValue(""Available Date Reached"");
				vRecycleFlag = GetFieldValue(""STC Recycle Flag"");//[NAVIN:11May017:NumberReclaimSREnh]
				if((GetFieldValue(""Available Date Reached"") >= 0) && !(vRecycleFlag == ""N"")) //[NAVIN:11May017:NumberReclaimSREnh]
				{
						if(GetFieldValue(""Is Associated"") == ""Y""){
					
//						psInputs.SetProperty(""MSISDN Id"",GetFieldValue(""Id""));	
//						psInputs.SetProperty(""Assoc Start Id"",GetFieldValue(""Assoc Start Id""));
//						psInputs.SetProperty(""Block Id"",GetFieldValue(""Block Id""));	
//						psInputs.SetProperty(""Current Status"",GetFieldValue(""Status""));	
						psInputs.SetProperty(""Partial(Y/N)"",""Y"");
//below 1.2										
						//psInputs.SetProperty(""Source"",""Cancel Order"");
						psInputs.SetProperty(""Source"",""ReUse"");
//above 1.2 
						psInputs.SetProperty(""MSISDN Number"",GetFieldValue(""Number String""));
//						psInputs.SetProperty(""Type"",""MSISDN"");						
//						psInputs.SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE""));
						bsDeassociate.InvokeMethod(""DeAssociate"",psInputs,psOutputs); 
					}
								
					else {
					
						strFromStatus 	= TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE"");
						strToStatus 	= TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE"");
						strBlockId  	= GetFieldValue(""Block Id"");
						if(TheApplication().GetProfileAttr(""RMS_BLOCK_UPDATION"") == ""Y"")
							UpdateNumberBlock(strBlockId,strFromStatus,strToStatus);
		
						SetFieldValue(""Status"",strToStatus);
						SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
						SetFieldValue(""Available Date"","""");
						SetFieldValue(""Quarantine Date"","""");
						SetFieldValue(""Assoc Start Id"","""");
						SetFieldValue(""Assigned Id"","""");
						SetFieldValue(""Assigned Date"","""");
						SetFieldValue(""Allocation Id"","""");
						SetFieldValue(""Reserved To"","""");
						SetFieldValue(""Sales Code"","""");
						SetFieldValue(""Allocated To"","""");
						SetFieldValue(""Using Type"","""");
						SetFieldValue(""Resv Id"","""");
						SetFieldValue(""Reservation End Date"","""");
						SetFieldValue(""Record Blocked For"","""");
						SetFieldValue(""Record Blocking Date"","""");
						SetFieldValue(""Disconnect Type"","""");
						SetFieldValue(""Artwork Id"","""");
						SetFieldValue(""Pre Activation Id"","""");
//below 1.3						
						SetFieldValue(""STC Vanity Paid"",""No"");
//above 1.3
					//below 1.4
					SetFieldValue(""Migrated SIM Number"","""");
					//above 1.4
						WriteRecord();
					}
				}
				blnIsRecord = bcNumEnq.NextRecord();
			}
		}				
		intRetCode = CancelOperation;
	}
	bcNumEnq 	= null;
	boNumEnq 	= null;
	psInputs	= null;
	psOutputs	= null;
//1.1 below
	bsDeassociate = null;
//1.1 above
	return intRetCode;
}
"/******************************************************************************
* Name          : Update Number Block Function						    	  *
* Author        : Mahindra British Telecom                                    *
* Description   : RMS NM Number Cancel Reservation Code File	              *
* Amendment Details                                                           *
*******************************************************************************
* Date    		Version  	AmendedBy     		Comments     Reviewed Date    *
*******************************************************************************
*                                                                             *
* 11/06/2004 	1.0   		MBT				   	Created      11/06/2004       *
******************************************************************************/

function UpdateNumberBlock(strBlockId,strFromStatus,strToStatus){
	
	var psBlkInputs;
	var psBlkOutputs;
	var bsRMSBlk;

	bsRMSBlk = TheApplication().GetService(""RMS RMS Block Calc"");
	
	psBlkInputs = TheApplication().NewPropertySet();
	psBlkOutputs = TheApplication().NewPropertySet();

	with(psBlkInputs){
		SetProperty(""Object Id"",strBlockId);
		SetProperty(""From Status"",strFromStatus);
		SetProperty(""To Status"",strToStatus);
	}
	
	bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
	
	psBlkInputs		= null;
	psBlkOutputs	= null;
	bsRMSBlk		= null;
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060710       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
---------------+------+--------+----------------------------------------------
*/
function UpdateNumberStatus()
{
	var	boNumEnq;
	var bcNumEnq;
	var bsDeassociate;
	var psInputs;
	var psOutputs;
	var blnIsRecord;
	var strCurrentDate;
	var strSearchSpec= """";
	var tm=Clib.localtime(Clib.time());
	Clib.strftime(strCurrentDate,""%m/%d/%Y %H:%M:%S"",tm);
	psInputs = TheApplication().NewPropertySet();
	psOutputs = TheApplication().NewPropertySet();
	bsDeassociate	 = TheApplication().GetService(""RMS RMS Deassociate Function"");
	boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNumEnq = boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update""); // 23rd June : RMS NM Number Enquiry 
	with(bcNumEnq) 
	{
		ActivateField(""Current Date"");
		ActivateField(""Expiry Date"");
		ClearToQuery();
		//Query only MSISDN numbers. Denorm field used due to performance reasons
		strSearchSpec = ""[Number Type Identifier Denorm] = '"" +TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"") + ""' "";
		//all MISDNS whose expiry date has been reached
		strSearchSpec+= "" AND [Expiry Date] <='"" + strCurrentDate + ""' "";
		//fetches numbers which are allocated to dealers and which are yet to be allocated to dealers
		strSearchSpec+= "" AND ([Status] = '"" +  TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""' "";
		strSearchSpec+= "" OR [Status] = '"" +  TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"") + ""') "";
		strSearchSpec+= "" AND [Is Associated] = 'Y'""; //fetches only associated MSISDN numbers
		SetSearchExpr(strSearchSpec);
		//SetSearchSpec(""Number Type Identifier Denorm"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""));			
		//SetSearchSpec(""Status"",TheApplication().InvokeMEthod(""LookupValue"","""",""""));
		//SetSearchSpec(""Expiry Date"",""<='""+strCurrentDate+""'"");	
		ExecuteQuery();
		blnIsRecord = FirstRecord();	
		while(blnIsRecord)
		{	
			psInputs.SetProperty(""Partial(Y/N)"",""Y"");
			//psInputs.SetProperty(""Partial(Y/N)"",""N"");
			psInputs.SetProperty(""Source"",""Disconnect"");
			psInputs.SetProperty(""MSISDN Number"",GetFieldValue(""Number String""));
			bsDeassociate.InvokeMethod(""DeAssociate"",psInputs,psOutputs); 
			blnIsRecord = bcNumEnq.NextRecord();
		}//  while ends
	}//  with ends			
	bcNumEnq 	= null;
	boNumEnq 	= null;
	psInputs	= null;
	psOutputs	= null;
//1.1 below
	bsDeassociate = null;
//1.1 above
	return (ContinueOperation);	
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
/**************************************************************************************
* Name          : RMS RMS Update Numbers Service PreInvoke Method           * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS RMS Update Numbers Code File                                   *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date      Ver    By       Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 09/06/2004  1.0    MBT    Created       09/06/2004   *
20060710      | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
20060713      | 1.2  | Kalyana| To  Set  property value ""ReUse""  instead  of ""CancelOrder"" for Property Name ""Source""
20120726      | 1.3  | Suman Kanumuri | Added code for clearing Vanity Paid flag for recycled numbers
20170516      | 1.5  | Navinkumar Rai | //[NAVIN:11May017:NumberReclaimSREnh]
**************************************************************************************/
var boNumEnq, bcNumEnq;
var strFromStatus, strToStatus, strBlockId, strNumAvlDateDiff;
var bsDeassociate, psInputs, psOutputs;
var vRecycleFlag = """";//[NAVIN:11May017:NumberReclaimSREnh]
var blnIsRecord;
var intRetCode = ContinueOperation;
 psInputs = TheApplication().NewPropertySet();
 psOutputs = TheApplication().NewPropertySet();
//-------------------[GB][11-05-2006]---------------------
 if(MethodName == ""UpdateNumberStatus"")
 {
  UpdateNumberStatus();
  intRetCode = CancelOperation;
 }
 else if(MethodName == ""UpdateNumbers"")
 {
  bsDeassociate  = TheApplication().GetService(""RMS RMS Deassociate Function CBS"");
  boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
  bcNumEnq = boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update""); // 23rd June : RMS NM Number Enquiry 
  with(bcNumEnq) 
  {
   ActivateField(""Number String"");
   ActivateField(""Assoc Start Id"");
   ActivateField(""Block Id"");
   ActivateField(""Status"");
   ActivateField(""Available Date"");
   ActivateField(""Quarantine Date"");
   ActivateField(""Status Date"");
   ActivateField(""Is Associated"");
   ActivateField(""Available Date Reached"");
   ActivateField(""Current Date"");
   ActivateField(""Assigned Id"");
   ActivateField(""Assigned Date"");
   ActivateField(""Allocation Id"");
   ActivateField(""Reserved To"");
   ActivateField(""Sales Code"");
   ActivateField(""Using Type"");
   ActivateField(""Resv Id""); // 23rd June
   ActivateField(""Reservation End Date"");
   ActivateField(""Record Blocked For"");
   ActivateField(""Record Blocking Date"");
   ActivateField(""Disconnect Type"");
   ActivateField(""Artwork Id"");
   ActivateField(""Pre Activation Id"");
   ActivateField(""Allocated To"");
//below 1.3
   ActivateField(""STC Vanity Paid"");
//above 1.2
ActivateField(""STC Recycle Flag"");//[NAVIN:11May017:NumberReclaimSREnh]
   ClearToQuery();
   SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""));
   SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE""));    
   ExecuteQuery(ForwardOnly);
   blnIsRecord = FirstRecord(); 
  
   while(blnIsRecord){ 
    
    strNumAvlDateDiff = GetFieldValue(""Available Date Reached"");
    vRecycleFlag = GetFieldValue(""STC Recycle Flag"");//[NAVIN:11May017:NumberReclaimSREnh]
    if((GetFieldValue(""Available Date Reached"") >= 0) && !(vRecycleFlag == ""N"")) //[NAVIN:11May017:NumberReclaimSREnh]
	{
      if(GetFieldValue(""Is Associated"") == ""Y""){
     
//      psInputs.SetProperty(""MSISDN Id"",GetFieldValue(""Id"")); 
//      psInputs.SetProperty(""Assoc Start Id"",GetFieldValue(""Assoc Start Id""));
//      psInputs.SetProperty(""Block Id"",GetFieldValue(""Block Id"")); 
//      psInputs.SetProperty(""Current Status"",GetFieldValue(""Status"")); 
      psInputs.SetProperty(""Partial(Y/N)"",""Y"");
//below 1.2          
      //psInputs.SetProperty(""Source"",""Cancel Order"");
      psInputs.SetProperty(""Source"",""ReUse"");
//above 1.2 
      psInputs.SetProperty(""MSISDN Number"",GetFieldValue(""Number String""));
//      psInputs.SetProperty(""Type"",""MSISDN"");      
//      psInputs.SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE""));
      bsDeassociate.InvokeMethod(""DeAssociate"",psInputs,psOutputs); 
     }
        
     else {
     
      strFromStatus  = TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE"");
      strToStatus  = TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE"");
      strBlockId   = GetFieldValue(""Block Id"");
      if(TheApplication().GetProfileAttr(""RMS_BLOCK_UPDATION"") == ""Y"")
       UpdateNumberBlock(strBlockId,strFromStatus,strToStatus);
  
      SetFieldValue(""Status"",strToStatus);
      SetFieldValue(""Status Date"",GetFieldValue(""Current Date""));
      SetFieldValue(""Available Date"","""");
      SetFieldValue(""Quarantine Date"","""");
      SetFieldValue(""Assoc Start Id"","""");
      SetFieldValue(""Assigned Id"","""");
      SetFieldValue(""Assigned Date"","""");
      SetFieldValue(""Allocation Id"","""");
      SetFieldValue(""Reserved To"","""");
      SetFieldValue(""Sales Code"","""");
      SetFieldValue(""Allocated To"","""");
      SetFieldValue(""Using Type"","""");
      SetFieldValue(""Resv Id"","""");
      SetFieldValue(""Reservation End Date"","""");
      SetFieldValue(""Record Blocked For"","""");
      SetFieldValue(""Record Blocking Date"","""");
      SetFieldValue(""Disconnect Type"","""");
      SetFieldValue(""Artwork Id"","""");
      SetFieldValue(""Pre Activation Id"","""");
//below 1.3      
      SetFieldValue(""STC Vanity Paid"",""No"");
//above 1.3
      WriteRecord();
     }
    }
    blnIsRecord = bcNumEnq.NextRecord();
   }
  }    
  intRetCode = CancelOperation;
 }
 bcNumEnq  = null;
 boNumEnq  = null;
 psInputs = null;
 psOutputs = null;
//1.1 below
 bsDeassociate = null;
//1.1 above
 return intRetCode;
}
"/******************************************************************************
* Name          : Update Number Block Function             *
* Author        : Mahindra British Telecom                                    *
* Description   : RMS NM Number Cancel Reservation Code File               *
* Amendment Details                                                           *
*******************************************************************************
* Date      Version   AmendedBy       Comments     Reviewed Date    *
*******************************************************************************
*                                                                             *
* 11/06/2004  1.0     MBT        Created      11/06/2004       *
******************************************************************************/

function UpdateNumberBlock(strBlockId,strFromStatus,strToStatus){
 
 var psBlkInputs;
 var psBlkOutputs;
 var bsRMSBlk;

 bsRMSBlk = TheApplication().GetService(""RMS RMS Block Calc"");
 
 psBlkInputs = TheApplication().NewPropertySet();
 psBlkOutputs = TheApplication().NewPropertySet();

 with(psBlkInputs){
  SetProperty(""Object Id"",strBlockId);
  SetProperty(""From Status"",strFromStatus);
  SetProperty(""To Status"",strToStatus);
 }
 
 bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
 
 psBlkInputs  = null;
 psBlkOutputs = null;
 bsRMSBlk  = null;
}
"/*
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
????????       | 1.0  | TM     | Creation
20060710       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
---------------+------+--------+----------------------------------------------
*/
function UpdateNumberStatus()
{
 var boNumEnq;
 var bcNumEnq;
 var bsDeassociate;
 var psInputs;
 var psOutputs;
 var blnIsRecord;
 var strCurrentDate;
 var strSearchSpec= """";
 var tm=Clib.localtime(Clib.time());
 Clib.strftime(strCurrentDate,""%m/%d/%Y %H:%M:%S"",tm);
 psInputs = TheApplication().NewPropertySet();
 psOutputs = TheApplication().NewPropertySet();
 bsDeassociate  = TheApplication().GetService(""RMS RMS Deassociate Function"");
 boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
 bcNumEnq = boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update""); // 23rd June : RMS NM Number Enquiry 
 with(bcNumEnq) 
 {
  ActivateField(""Current Date"");
  ActivateField(""Expiry Date"");
  ClearToQuery();
  //Query only MSISDN numbers. Denorm field used due to performance reasons
  strSearchSpec = ""[Number Type Identifier Denorm] = '"" +TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"") + ""' "";
  //all MISDNS whose expiry date has been reached
  strSearchSpec+= "" AND [Expiry Date] <='"" + strCurrentDate + ""' "";
  //fetches numbers which are allocated to dealers and which are yet to be allocated to dealers
  strSearchSpec+= "" AND ([Status] = '"" +  TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""' "";
  strSearchSpec+= "" OR [Status] = '"" +  TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"") + ""') "";
  strSearchSpec+= "" AND [Is Associated] = 'Y'""; //fetches only associated MSISDN numbers
  SetSearchExpr(strSearchSpec);
  //SetSearchSpec(""Number Type Identifier Denorm"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""));   
  //SetSearchSpec(""Status"",TheApplication().InvokeMEthod(""LookupValue"","""",""""));
  //SetSearchSpec(""Expiry Date"",""<='""+strCurrentDate+""'""); 
  ExecuteQuery();
  blnIsRecord = FirstRecord(); 
  while(blnIsRecord)
  { 
   psInputs.SetProperty(""Partial(Y/N)"",""Y"");
   //psInputs.SetProperty(""Partial(Y/N)"",""N"");
   psInputs.SetProperty(""Source"",""Disconnect"");
   psInputs.SetProperty(""MSISDN Number"",GetFieldValue(""Number String""));
   bsDeassociate.InvokeMethod(""DeAssociate"",psInputs,psOutputs); 
   blnIsRecord = bcNumEnq.NextRecord();
  }//  while ends
 }//  with ends   
 bcNumEnq  = null;
 boNumEnq  = null;
 psInputs = null;
 psOutputs = null;
//1.1 below
 bsDeassociate = null;
//1.1 above
 return (ContinueOperation); 
}
"/**************************************************************************************
* Name          : RMS RMS Utilities Service CallServerBS Method			 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : Method to invoke Business Service         	                      *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Ver     By     	 Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 09/06/2004 	1.0   	MBT   	 Created       09/06/2004	  *
20060710       | 1.1  | Prasad | Siebel ES SCR1, Objects Destroyed
**************************************************************************************/
function CallServerBS(&Inputs,&Outputs)
{
	var psInputs 		= TheApplication().NewPropertySet();
	var psOutputs 		= TheApplication().NewPropertySet();
	var bsService 		= TheApplication().GetService(Inputs.GetProperty(""BSName""));
	try
	{
		var psInputArgs     = Inputs.GetChild(0);
		var iInputArgsCnt 	= 0;
		var iInputArgsPsCnt = 0;
		var sPropName 		= psInputArgs.GetFirstProperty();
		while(sPropName != """") 
		{
			psInputs.SetProperty(sPropName,psInputArgs.GetProperty(sPropName));
			sPropName = psInputArgs.GetNextProperty();
		}
		for(iInputArgsPsCnt=0;iInputArgsPsCnt < psInputArgs.GetChildCount();iInputArgsPsCnt++) 
		{
			psInputs.AddChild(psInputArgs.GetChild(iInputArgsPsCnt));
			var test = psInputArgs.GetChild(iInputArgsPsCnt).GetType();
		}
		bsService.InvokeMethod(Inputs.GetProperty(""BSMethod""),psInputs,psOutputs);
		psOutputs.SetType(""BSOutputArgs"");
		Outputs.AddChild(psOutputs);
	} 
	catch(e) 
	{
		Outputs.SetProperty(""ErrCode"",e.errCode);
		Outputs.SetProperty(""ErrMessage"",e.errText);
	}
	finally
	{
//1.1 below
		psInputs = null;
		psOutputs = null; 
		bsService = null;
//1.1 above
	}
}
"/**************************************************************************************
* Name          : RMS RMS Utilities Service LookupMessage Method			 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : Get the Translated Error Message           	                      *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 09/06/2004 	1.0   		MBT   						Created       09/06/2004	  *
**************************************************************************************/
function LookupMessage(&Inputs,&Outputs)
{
	if(Inputs.GetProperty(""MessageCategory"") == """")
		Outputs.SetProperty(""Message"",TheApplication().LookupMessage(""User Defined Errors"",Inputs.GetProperty(""MessageCode"")));
	else
		Outputs.SetProperty(""Message"",TheApplication().LookupMessage(Inputs.GetProperty(""MessageCategory""),Inputs.GetProperty(""MessageCode"")));
}
"/**************************************************************************************
* Name          : RMS RMS Utilities Service PreInvoke Method			 	      	  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Service_PreInvoke            	                      				  *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    	  Version  By      Comments                           Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 09/06/2004   1.0     MBT     Created       09/06/2004	  *
20060627       1.1     Prasad  SiebelES#51 removed unnecessary code in PreCanInvoke, code is pasted below

	switch (MethodName) {
		case ""LookupMessage"":
			CanInvoke = ""TRUE"";
			return(CancelOperation);
		case ""CallServerBS"":
			CanInvoke = ""TRUE"";
			return(CancelOperation);
		default:
			return (ContinueOperation);
	}
	return (ContinueOperation);
*************************************************************************************
*/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	
	switch (MethodName) {
		case ""LookupMessage"":
			LookupMessage(Inputs,Outputs);
			break;
		case ""CallServerBS"":
			CallServerBS(Inputs,Outputs);	
			break;
		default:
			return (ContinueOperation);
	}
	
	return (CancelOperation);
}
function Allocate(Inputs,Outputs,strStartNum,strEndNum,vPartnerId,strQuantity,vOperation,vFileName)
{
 var strPrefix;
 var strRecord;
 var blnIsRecord;
 var blnIsRecord1; 
 var reccount;
 var vLastBlock  = false;
 
 var strErrVal;
 var psInput      =  TheApplication().NewPropertySet();
 var psOutput     =  TheApplication().NewPropertySet();
 
 
 var boNumEnq   =  TheApplication().GetBusObject(""RMS NM Number Enquiry"");
 var bcNumEnq  =  boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update"");
 
 var boSysPref   =  TheApplication().GetBusObject(""System Preferences"");
 var bcSysPref   =  boSysPref.GetBusComp(""System Preferences"");

 var boBlock   =  TheApplication().GetBusObject(""RMS NM Number Scheme"");
 var bcBlock   =  boBlock.GetBusComp(""RMS NM Number Block"");
 
 var boAlloc   =  TheApplication().GetBusObject(""RMS NM Number Allocation"");
 var bcAlloc   =  boAlloc.GetBusComp(""RMS NM Number Allocation"");
 

    var length;


 var strFormat  = """";
 var strSearchExpr = """";
    
    var vStartNum  = strStartNum;
 var vBlockId;
 var vSchemeId;
 var vOperation;
 var vQuantity;
 var vTotalQuantity;

 var vTypeIdn;
 var vTypeId;
 var vEndNum;


 var strDate;
 var strExpDate;
 var dtFiledate;
 var dtSysdate;
 var i;

 Clib.strftime(strDate,""%Y%m%d"",Clib.localtime(Clib.time()));

 try
 {

     
   //-----QUERY THE BC FOR BLOCK -------------------------------- 
   
   with(bcNumEnq)
   {
    
     ActivateField(""Scheme Id"");
     ActivateField(""Block Id"");
     ActivateField(""Type Id"");
     ActivateField(""Type Identifier"");
     ActivateField(""Number String"");
     ActivateField(""Format"");
     ActivateField(""Number Type Identifier Denorm"");
  
     
     //------loop to search for block with startnumber---------------
      
    vTotalQuantity = 0;
    
    while(true)
    {

/*    if( (ToNumber(strEndNum) - ToNumber(vStartNum) + 1) != strQuantity)
    {
      var rec = ""1|"" + strStartNum + ""|"" + strEndNum + ""|"" + vPartnerId + ""|"" + strQuantity + ""|"" + vOperation;
      Outputs.SetProperty(""Error Code"",""RMSSIMERP02"");
      Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMERP02"",buff,vFileName));
      break;
    }

*/


     vQuantity  = 0;
     
     ClearToQuery();
     strSearchExpr  =  ""[Number String] = '"" + vStartNum + ""' AND "";
     strSearchExpr  +=  ""[Number Type Identifier Denorm] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""SIM"") + ""'"";
     SetSearchExpr(strSearchExpr);
     ExecuteQuery();
     blnIsRecord = FirstRecord();
  
     if(blnIsRecord)
     {   
       vBlockId = GetFieldValue(""Block Id"");
       vSchemeId = GetFieldValue(""Scheme Id"");
       vTypeId  = GetFieldValue(""Type Id"");
       vTypeIdn = GetFieldValue(""Type Identifier"");      
       strFormat = GetFieldValue(""Format"");
       strPrefix =  """";
       
       //-----------Extract the Fixed number from Format--------------
       
       for(i=0;i<strFormat.length;i++)
       {
        if(Clib.isdigit(strFormat.charAt(i)))
         strPrefix += strFormat.charAt(i);
        else
         break;
       }
      
       //-----------GET THE BLOCK START NUMBER AND END NUMBER----------
         
       with(bcBlock)
       {
        ActivateField(""Start Number"");
        ActivateField(""Start String Number"");     
        ActivateField(""End Number"");
        ActivateField(""End String Number""); 
        
        ClearToQuery();
        SetSearchSpec(""Id"", vBlockId);
        ExecuteQuery();
        blnIsRecord1 = FirstRecord();
                   
        if(blnIsRecord1)
        { 
         //-------------Block End Number = Fixed number + Running Number-------------
          
         vEndNum = strPrefix + GetFieldValue(""End Number"");
                   
         // The File End number will be compared to (Block end num + prefix)
         
         if (strEndNum <= vEndNum)
         {
           // All the numbers in this record belong to the same block
           // Allocate all these numbers now

           vLastBlock   = true;

           if (vTotalQuantity != 0) // In case some numbers already allocated in previous iteration of loop
           {
            vQuantity  = strQuantity - vTotalQuantity; 
            vTotalQuantity += vQuantity;
           } 
           else
           { 
            vQuantity  = strQuantity; // quantity to be allocated for this block
            vTotalQuantity = vQuantity;  // total numbers allocated till now
           }
           
           Allocate_Numbers(Inputs,Outputs,bcAlloc,vLastBlock,vSchemeId,vBlockId,vTypeId,vPartnerId,vStartNum,strEndNum,vQuantity,vOperation,vFileName);
           break;
       
           
         }
         else
         {
           // All the numbers in this Block are to be allocated 
           // and in addition to it there are other numbers in the record

           vLastBlock  = false;
           
           // Calculate the quantity to be allocated for this block
           var runStartNum = vStartNum.substring(i); 
           var quan   = ToNumber(GetFieldValue(""End Number"")) - ToNumber(runStartNum); 
           vQuantity  = ToInteger(ToInteger(quan) + 1);//ToInteger(vEndNum) - ToInteger(vStartNum) + 1; //(Starting number Inclusive )
           
           vTotalQuantity += vQuantity; // total numbers allocated till now
           
           Allocate_Numbers(Inputs,Outputs,bcAlloc,vLastBlock,vSchemeId,vBlockId,vTypeId,vPartnerId,vStartNum,strEndNum,vQuantity,vOperation,vFileName);           

           // So set the new Start Number
           var halfnum = ToInteger(GetFieldValue(""End Number""));
           halfnum  = ToInteger(ToInteger(halfnum) + 1);
           vStartNum = strPrefix + halfnum;
           
          
         }
        } // if(blnIsRecord1) ends 
         
         
       }  // with bcBlock ends
      


     }    // if blnIsRecord ends
       
     }    // while true Ends 
     
     if(ToInteger(strQuantity) != ToInteger(vTotalQuantity))
     {
      // Numbers Allocated and the Required quantity of Numbers to be allocated, Mismatched
      // Throw Exception
      var rec = ""1|"" + strStartNum + ""|"" + strEndNum + ""|"" + vPartnerId + ""|"" + strQuantity + ""|"" + vOperation;
      Outputs.SetProperty(""Error Code"",""RMSSIMERP02"");
      Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMERP02"",rec,vFileName));

     }
    }     // with bcNumEnq ends
 
 }//try end
 catch(e)  
 {
    Outputs.SetProperty(""Error Code"", e.errCode);
    Outputs.SetProperty(""Error Message"", e.errText); 

  //strErrVal = e.errText;
  strErrVal = e.toString();

 }
 
 finally
 {
//1.1 below
  bcNumEnq   = null;
  boNumEnq   = null;
  bcAlloc    =  null;
  boAlloc    =  null;
  bcBlock    =  null;
  boBlock    =  null;
  bcSysPref   = null;
  boSysPref   = null;
//1.1 above

 return (CancelOperation);
 }
}
function Allocate_Numbers(Inputs,Outputs,bcAlloc,vLastBlock,vSchemeId,vBlockId,vTypeId,vPartnerId,vStartNum,strEndNum,vQuantity,vOperation,vFileName)
{
 var psInputs;
 var psOutputs;
 var bsNMAllocate;
 //var sPartnerCodeId = """"
 var boPartner = TheApplication().GetBusObject(""Channel Partner"");
 var bcPartner = boPartner.GetBusComp(""Channel Partner"");
 
 psInputs    = TheApplication().NewPropertySet();
 psOutputs    = TheApplication().NewPropertySet();
 bsNMAllocate = TheApplication().GetService(""RMS NM Number Allocation"");
 
 if((vPartnerId != """") && (Inputs.GetProperty(""PartnerCSN"") != ""Y"")) {
  with(bcPartner) {
   SetViewMode(AllView);
   ActivateField(""CSN"");
   ClearToQuery();
   SetSearchSpec(""Id"",vPartnerId);
   ExecuteQuery(ForwardOnly);
   
   if(FirstRecord()) {
    vPartnerId = GetFieldValue(""CSN"");
   }
  }
 } 

 with(bcAlloc)
 {
//            ViewMode(""AllView"");
      ActivateField(""Operation"");
      ActivateField(""Scheme Id"");
      ActivateField(""Block Id"");
      ActivateField(""Alloc To Id"");
      ActivateField(""Start Num String"");
      ActivateField(""Quantity"");
      

      ActivateField(""Start Num Status"");
      ActivateField(""Start Num"");
      ActivateField(""End Num String"");
      ActivateField(""Special Category Name"");
      ActivateField(""SIM Artwork Id"");
      ActivateField(""Number Id"");
      ActivateField(""Is Paired"");
      ActivateField(""Alloc From Id"");


     
      
      NewRecord(1);
      if (vOperation == 0)
      {

        SetFieldValue(""Scheme Id"",vSchemeId);
        SetFieldValue(""Block Id"",vBlockId);
        SetFieldValue(""Type Id"",vTypeId);
           
        //SetFieldValue(""Alloc To Id"",vPartnerId);
        //SetFieldValue(""Alloc To"",vPartnerId);
        var oBCPick =bcAlloc.GetPicklistBusComp(""Alloc To"");
  		with (oBCPick)
		{
		   ClearToQuery();
		   SetSearchSpec(""CSN"", vPartnerId);
		   SetSearchSpec(""Partnership Stage"",""Active"");
		   ExecuteQuery(ForwardOnly);
		   if(FirstRecord())
		   {
		    Pick();
		   }
		   else
		   {//error out or ignore this record
		    // ????
		   }
  		}
  		oBCPick = null;
        SetFieldValue(""Is Paired"",""Y"");
        SetFieldValue(""Start Num String"",vStartNum);
  
        SetFieldValue(""Quantity"",vQuantity);
   		TheApplication().SetSharedGlobal(""ByPassStatus"",TheApplication().InvokeMethod(""LookupValue"",""RMS_ALLOC_ADMIN"",""ERPASSIGNED_Y""));
        WriteRecord();
		TheApplication().SetSharedGlobal(""ByPassStatus"","""");
        // Check if the End Number(strEndNum) in file matches the End number in the new allocation record
        if (vLastBlock == true)
        {
         if (strEndNum == GetFieldValue(""End Num String""))
         {
          // Calling the BS Allocate method Allocate
          
          psInputs.SetProperty(""Object Id"",GetFieldValue(""Id"")); 
          psInputs.SetProperty(""ByPassStatus"",TheApplication().InvokeMethod(""LookupValue"",""RMS_ALLOC_ADMIN"",""ERPASSIGNED_Y""));       
          bsNMAllocate.InvokeMethod(""Allocate"",psInputs,psOutputs);
         }
         else
         {

          // Log the error for this block

          Outputs.SetProperty(""Error Code"",""RMSSIMERP03"");
          Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMERP03"",GetFieldValue(""End Num String""),vStartNum,strEndNum));

          // Numbers cant be allocated
          DeleteRecord();

         }
        }
        else // Not the last Block to be allocated
        {
          // Calling the BS Allocate method Allocate
          
          psInputs.SetProperty(""Object Id"",GetFieldValue(""Id"")); 
          psInputs.SetProperty(""ByPassStatus"",TheApplication().InvokeMethod(""LookupValue"",""RMS_ALLOC_ADMIN"",""ERPASSIGNED_Y""));              
          bsNMAllocate.InvokeMethod(""Allocate"",psInputs,psOutputs);         
        }
                
      }
      else if (vOperation == 1)
      {
        SetFieldValue(""Operation"",TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""DEALLOCATE""));
        SetFieldValue(""Scheme Id"",vSchemeId);
        SetFieldValue(""Block Id"",vBlockId);
        SetFieldValue(""Type Id"",vTypeId);
            
        //SetFieldValue(""Alloc From Id"",vPartnerId);
        //SetFieldValue(""Alloc From"",vPartnerId);
        var oBCPick =bcAlloc.GetPicklistBusComp(""Alloc From"");
  with (oBCPick)
  {
   ClearToQuery();
   SetSearchSpec(""CSN"", vPartnerId);
   SetSearchSpec(""Partnership Stage"",""Active"");
   ExecuteQuery(ForwardOnly);
   if(FirstRecord())
   {
    Pick();
   }
   else
   {//error out or ignore this record
    // ????
   }
  }
  oBCPick = null;
        SetFieldValue(""Is Paired"",""Y"");
        SetFieldValue(""Start Num String"",vStartNum);
  
        SetFieldValue(""Quantity"",vQuantity);       

        WriteRecord();

        // Check if the End Number(strEndNum) in file matches the End number in the new allocation record
        if (vLastBlock == true)
        {
         if (strEndNum == GetFieldValue(""End Num String""))
         {
          // Calling the BS Allocate method Allocate
          
          psInputs.SetProperty(""Object Id"",GetFieldValue(""Id"")); 
          //psInputs.SetProperty(""ByPassStatus"",TheApplication().InvokeMethod(""LookupValue"",""RMS_ALLOC_ADMIN"",""ERPASSIGNED_Y""));              
          bsNMAllocate.InvokeMethod(""Deallocate"",psInputs,psOutputs);
         }
         else
         {
          // Log the error for this block

          Outputs.SetProperty(""Error Code"",""RMSSIMERP03"");
          Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMERP03"",GetFieldValue(""End Num String""),vStartNum,strEndNum));

          // Numbers cant be allocated
          DeleteRecord();


         }
        }
        else // Not the last Block to be allocated
        {
          // Calling the BS Allocate method Allocate
          
          psInputs.SetProperty(""Object Id"",GetFieldValue(""Id""));
          //psInputs.SetProperty(""ByPassStatus"",TheApplication().InvokeMethod(""LookupValue"",""RMS_ALLOC_ADMIN"",""ERPASSIGNED_Y""));               
          bsNMAllocate.InvokeMethod(""Deallocate"",psInputs,psOutputs);
          
        }
                      
      }
      
      

     } // with Ends
     if (psOutputs.GetProperty(""Error Code"") != """" || psOutputs.GetProperty(""Error Message"") != """")
     {
       Outputs.SetProperty(""Error Code"", psOutputs.GetProperty(""Error Code""));
       Outputs.SetProperty(""Error Message"", psOutputs.GetProperty(""Error Message"")); 
     }
     
 psInputs  = null;
 psOutputs = null;
 bcPartner = null;
 boPartner = null;
 bsNMAllocate= null;
     
           
}
function GetDirectoryList(Inputs,Outputs,fileArray)
{

 var vPath   = Inputs.GetProperty(""DirectoryPath"");
 var vPattern  = Inputs.GetProperty(""FilePattern"");

 var vFNameForList  =  vPath  +  "filelist.lst"";
 
 
 // name of the OS, can be WIN, win, Win (Windows) or Unix, UNIX, unix (all flavours of UNIX)
 var vOperatingSys = Inputs.GetProperty(""OperatingSys"");
 
 
 // command string to execute list directory function on the OS
 var vCommand  = """";


 
 if(""unix"" == vOperatingSys.toLowerCase())
 {
   // In case unix

   //vCommand = ""ls "" + vPath + vPattern + "" | sort > "" + vFNameForList;
                                                vCommand = ""ls -1 "" + vPath + "" > "" + vFNameForList;
                                                
 } 
 else 
 {
   // In case Win
   
   vCommand = ""dir "" + vPath + vPattern + "" /N /B > "" + vFNameForList;
 }

   // now execute the command on OS, can be risky  

   var retmsg = Clib.system(vCommand);
                                 //TheApplication().RaiseErrorText(vCommand + "" \\\\"" + retmsg);
   // Creating the last file in Directory to mark the end of listing process
   
//   WriteToFile(""written the directory list file"",""_test"");
   
   
   // Filling the FileArray with names of files, read from the list of the files 
      
   var vInputString = """";
   var fpInputFile  = Clib.fopen(vFNameForList,""r"");
   
   var fileCount  = 0; 
   
   while (vInputString != null) 
      {
     vInputString = Clib.fgets(fpInputFile);
     
     if(vInputString == null) continue;
 
     //  remove the end of line character from the string
     //  for unix formatted file it is \n and for windows formatted file it is \r\n
    
      if(vInputString.indexOf(""\r"") != -1) 
      {
       vInputString    = vInputString.substring(0,vInputString.indexOf(""\r""));
       fileArray[fileCount]  =  vInputString;
       fileCount++;
      }
      else if(vInputString.indexOf(""\n"") != -1) 
      {
       
       vInputString    = vInputString.substring(0,vInputString.indexOf(""\n""));
       fileArray[fileCount]  = vInputString;
       fileCount++;
      }
   } // while Ends
   
   Clib.fclose(fpInputFile);


 return ContinueOperation;


}
function GetSystemPref(Inputs,Outputs)
{
		var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	    var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
	    
		bcSysPref.ActivateField(""Value"");
		bcSysPref.ActivateField(""Name"");
		
		bcSysPref.ClearToQuery();
		if(Inputs.GetProperty(""AllocationDetailDirIn1"")!= """")
			bcSysPref.SetSearchSpec(""Name"",Inputs.GetProperty(""AllocationDetailDirIn1""));
		else
			bcSysPref.SetSearchSpec(""Name"",""RMS_IF_SIMALLOC_DIR_IN"");
		bcSysPref.ExecuteQuery();

		if(bcSysPref.FirstRecord()) 
		{
			    Inputs.SetProperty(""DirectoryPath"",bcSysPref.GetFieldValue(""Value""));
		}
		
		
		bcSysPref.ClearToQuery();
		if(Inputs.GetProperty(""AllocationDetailDirOut1"")!= """")
			bcSysPref.SetSearchSpec(""Name"",Inputs.GetProperty(""AllocationDetailDirOut1""));
		else
			bcSysPref.SetSearchSpec(""Name"",""RMS_IF_SIMALLOC_DIR_OUT"");
		bcSysPref.ExecuteQuery();
		
		if(bcSysPref.FirstRecord()) 
		{
			    Inputs.SetProperty(""DirectoryPathOut"",bcSysPref.GetFieldValue(""Value""));
	    }
	    
    
		bcSysPref.ClearToQuery();
		if(Inputs.GetProperty(""AllocationOS"")!= """")
			bcSysPref.SetSearchSpec(""Name"",Inputs.GetProperty(""AllocationOS""));
		else
			bcSysPref.SetSearchSpec(""Name"",""HCPT_OS"");
		bcSysPref.ExecuteQuery();
		
		if(bcSysPref.FirstRecord()) 
		{
			    Inputs.SetProperty(""OperatingSys"",bcSysPref.GetFieldValue(""Value""));
	    }
	    
	    bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""RMS_IF_SIMALLOC_PARTNERCSN"");
		bcSysPref.SetSearchSpec(""Value"",""Y"");
		bcSysPref.ExecuteQuery();
		
		if(bcSysPref.FirstRecord()) 
		{
			    Inputs.SetProperty(""PartnerCSN"",""Y"");
	    }
	    
	    bcSysPref  = null;
		boSysPref  = null;


}
function MoveFile(Inputs,Outputs)
{
  // FilePath1, FileName1 is the source file
  // default operation is delete
  // if FilePath2 is the specified as destination path then copy there before deleting
  
  
   var vPath1 = Inputs.GetProperty(""DirectoryPath"");
   var vName1 = Inputs.GetProperty(""vFileName"");
   
   var vPath2 = Inputs.GetProperty(""DirectoryPathOut"");
   var vName2 = Inputs.GetProperty(""vFileName"");
   
   if("""" != (vPath2+vName2))//destination specified
    Clib.rename(vPath1+vName1,vPath2+vName2);
  /* else {
    if(vName1 != """" )
     Clib.remove(vPath1+vName1);
   }
  */
}
function ReadAllocFiles(Inputs,Outputs,fileArray)
{

 var vFullFileName   = """";
 var vFileName  = """";

 var vResult   = false;
 
    var fileCount  = 0;
 
 var mbIsRecord   = false;
 
 var vfilePath   = Inputs.GetProperty(""DirectoryPath"");

 var vfileName  = """";
 var errVal   = """";

 
 for(fileCount=0;fileCount<getArrayLength(fileArray);fileCount++)
 {
   
            if((fileArray[fileCount])!= "filelist.lst"")
   {
    vFileName   = fileArray[fileCount];
    vFullFileName = vfilePath + vFileName;
    ReadRecords(Inputs,Outputs,vFullFileName,vFileName);
    
    errVal = Outputs.GetProperty(""Error Code"");
    if(errVal != ""00000"" &&  errVal != ""RMSALC006"" && errVal != ""RMSALC007"")
    {
     var vErr    = Outputs.GetProperty(""Error Message"");
     var vErrCode   = Outputs.GetProperty(""Error Code"");
     var vObjName   = ""ERP SIM Allocation"";
     var vFunc    = ""ReadAllocFiles"";
     var vObjType   = ""Business Service"";
     var strGroupCode  = ""ERP_ALLOC"";
     var vMsgStr   = ""ERP Allocation File Processing Error. Check file: "" + vFullFileName + "".log for details""; 

     TheApplication().log_exception(""Exception"",vErr,vErrCode,strGroupCode,vObjName,vFunc,vObjType,vMsgStr);
    }
    
   }  // End of if
   
   // After processing file, Move the file to another folder
   if(vFileName != """") {
          Inputs.SetProperty(""vFileName"",vFileName);
          MoveFile(Inputs,Outputs);
         }
          vFullFileName = """";
            
 }//End of for
//          Outputs           = null;
   
}
function ReadRecords(Inputs,Outputs,vFullFileName,vFileName)
{

 var FileObject;
 var buff;
   var strArr;
 var strStartNum;
 var strEndNum;
 var vPartnerId;
 var strQuantity;
 var vOperation; 
 var vErrFileName = """";

 try
 { 
   //-------------Read From File-----------------------------------
   
      FileObject  = Clib.fopen(vFullFileName, ""r"");
      
   if(FileObject == null)
     TheApplication().RaiseErrorText(""Could not read File""); 
     
   buff   = Clib.fgets(FileObject); // Reading the Header    
   
   while(buff)
   {    

     buff   = Clib.fgets(FileObject);
     
     if(buff == null)
      continue;
     
     strArr   = buff.split(""|"");
     strStartNum  = """";
     strEndNum  = """";
     vPartnerId  = """";
     strQuantity  = """"; 
     
     if(strArr[0] == 1)
     if (strArr.length != 6 || strArr[0] == """" || strArr[1] == """" || strArr[2] == """" || strArr[3] == """" || strArr[4] == """" || strArr[5] == """") 
     {
      Outputs.SetProperty(""Error Code"",""RMSSIMERP01"");
      Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMERP01""));
      break;

     }
      
     if (strArr != """" && strArr[0] == 1)
     {
      strStartNum = strArr[1];
      strEndNum = strArr[2];
      vPartnerId = strArr[3];
      strQuantity = strArr[4];
      vOperation = ToInteger(strArr[5]);

      Outputs.SetProperty(""Error Code"", ""00000"");
      Outputs.SetProperty(""Error Message"", """"); 

            
      // For each Record read, call the Allocate Method
      
      Allocate(Inputs,Outputs,strStartNum,strEndNum,vPartnerId,strQuantity,vOperation,vFileName);
      
      var errVal = Outputs.GetProperty(""Error Code"");
      
      if(errVal != ""00000"" &&  errVal != ""RMSALC006"" && errVal != ""RMSALC007"")
      {
       // There is an Error in Allocation
       // Create Error File
       vErrFileName = Inputs.GetProperty(""DirectoryPathOut"") + vFileName + "".log""
          var FileErr  = Clib.fopen(vErrFileName, ""a"");
          Clib.fputs(""\n"" + buff + ""    "" + Outputs.GetProperty(""Error Code"") + Outputs.GetProperty(""Error Message""), FileErr);
          Clib.fclose(FileErr);
         
      }
      
     }
     
     
   } // While Ends

      Clib.fclose(FileObject);
      FileObject = null; 
  
  
   //-------------------------End Read File---------------------------------------
  } catch (e) {
   var strErr = e.errText;
  } finally
  {
    strArr = null;
    if (FileObject != null)
     Clib.fclose(FileObject);
     
  }

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{

 try
 {
    Outputs.SetProperty(""Error Code"", ""00000"");
    Outputs.SetProperty(""Error Message"", """"); 
  
   if(MethodName == ""Allocate"")
   {
   
     var fileArray       = new Array(); 
     GetSystemPref(Inputs,Outputs);
     GetDirectoryList(Inputs,Outputs,fileArray); 
     ReadAllocFiles(Inputs,Outputs,fileArray); 
   }
   

   

 }
 catch(e)
 {
  
   // Return an error code rather than throwing an error
   
   Outputs.SetProperty(""Error Code"",e.errCode);
   Outputs.SetProperty(""Error Message"",e.errText);
   
   // Logging the Exception
   
   var vErr   = e.errText;
   var vErrCode  =  e.errCode;
   var vObjName  =  ""RMS SIM Allocation"";
   var vFunc   =  ""PreInvokeMethod"";
   var vObjType  =  ""Business Service"";

   //TheApplication().log_exception(""Exception"",vErr,vErrCode,strGroupCode,vObjName,vFunc,vObjType);

 }
 finally 
 {
   return (CancelOperation);
 }




}
function WriteToFile(msgstr,msFileSuffix)

{
var msFileName = ""debug_BS_IF_COMMON"" + msFileSuffix + "".txt"";
var fptr=Clib.fopen(msFileName,""a"");
Clib.fputs(msgstr+""\n\r"",fptr);
Clib.fclose(fptr);
}
function Allocate(Inputs,Outputs,strStartNum,strEndNum,vPartnerId,strQuantity,vOperation,vFileName)
{
	var strPrefix;
	var strRecord;
	var blnIsRecord;
	var blnIsRecord1;	
	var reccount;
	var vLastBlock		=	false;
	
	var strErrVal;
	var	psInput     	= 	TheApplication().NewPropertySet();
	var	psOutput    	= 	TheApplication().NewPropertySet();
	
	
	var boNumEnq 		= 	TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumEnq		= 	boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update"");
	
	var boSysPref 		= 	TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref 		= 	boSysPref.GetBusComp(""System Preferences"");

	var boBlock 		= 	TheApplication().GetBusObject(""RMS NM Number Scheme"");
	var bcBlock 		= 	boBlock.GetBusComp(""RMS NM Number Block"");
	
	var boAlloc 		= 	TheApplication().GetBusObject(""RMS NM Number Allocation"");
	var bcAlloc 		= 	boAlloc.GetBusComp(""RMS NM Number Allocation"");
	

    var length;


	var strFormat		=	"""";
	var strSearchExpr	=	"""";
    
    var vStartNum		=	strStartNum;
	var vBlockId;
	var vSchemeId;
	var vOperation;
	var vQuantity;
	var vTotalQuantity;

	var vTypeIdn;
	var vTypeId;
	var vEndNum;


	var strDate;
	var strExpDate;
	var dtFiledate;
	var dtSysdate;
	var i;

	Clib.strftime(strDate,""%Y%m%d"",Clib.localtime(Clib.time()));

	try
	{

					
			//-----QUERY THE BC FOR BLOCK --------------------------------	
			
			with(bcNumEnq)
			{
				
					ActivateField(""Scheme Id"");
					ActivateField(""Block Id"");
					ActivateField(""Type Id"");
					ActivateField(""Type Identifier"");
					ActivateField(""Number String"");
					ActivateField(""Format"");
					ActivateField(""Number Type Identifier Denorm"");
		
					
					//------loop to search for block with startnumber---------------
						
				vTotalQuantity	=	0;
				
				while(true)
				{

/*				if( (ToNumber(strEndNum) - ToNumber(vStartNum) + 1) != strQuantity)
				{
						var rec = ""1|"" + strStartNum + ""|"" + strEndNum + ""|"" + vPartnerId + ""|"" + strQuantity + ""|"" + vOperation;
						Outputs.SetProperty(""Error Code"",""RMSSIMERP02"");
						Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMERP02"",buff,vFileName));
						break;
				}

*/


					vQuantity		=	0;
					
					ClearToQuery();
					strSearchExpr 	= 	""[Number String] = '"" + vStartNum + ""' AND "";
					strSearchExpr 	+= 	""[Number Type Identifier Denorm] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_TYPE_IDENTIFIER"",""SIM"") + ""'"";
					SetSearchExpr(strSearchExpr);
					ExecuteQuery();
					blnIsRecord = FirstRecord();
		
					if(blnIsRecord)
					{			
							vBlockId	=	GetFieldValue(""Block Id"");
							vSchemeId	=	GetFieldValue(""Scheme Id"");
							vTypeId		=	GetFieldValue(""Type Id"");
							vTypeIdn	=	GetFieldValue(""Type Identifier"");						
							strFormat	=	GetFieldValue(""Format"");
							strPrefix	= 	"""";
							
							//-----------Extract the Fixed number from Format--------------
							
							for(i=0;i<strFormat.length;i++)
							{
								if(Clib.isdigit(strFormat.charAt(i)))
									strPrefix	+=	strFormat.charAt(i);
								else
									break;
							}
						
							//-----------GET THE BLOCK START NUMBER AND END NUMBER----------
									
							with(bcBlock)
							{
								ActivateField(""Start Number"");
								ActivateField(""Start String Number"");					
								ActivateField(""End Number"");
								ActivateField(""End String Number"");	
								
								ClearToQuery();
								SetSearchSpec(""Id"", vBlockId);
								ExecuteQuery();
								blnIsRecord1 = FirstRecord();
																			
								if(blnIsRecord1)
								{	
									//-------------Block End Number = Fixed number + Running Number-------------
										
									vEndNum	=	strPrefix + GetFieldValue(""End Number"");
																			
									// The File End number will be compared to (Block end num + prefix)
									
									if (strEndNum	<=	vEndNum)
									{
											//	All the numbers in this record belong to the same block
											//	Allocate all these numbers now

											vLastBlock			=	true;

											if (vTotalQuantity != 0)	//	In case some numbers already allocated in previous iteration of loop
											{
												vQuantity		=	strQuantity	-	vTotalQuantity;	
												vTotalQuantity	+=	vQuantity;
											}	
											else
											{	
												vQuantity		=	strQuantity;	//	quantity to be allocated for this block
												vTotalQuantity	=	vQuantity;		//	total numbers allocated till now
											}
											
											Allocate_Numbers(Inputs,Outputs,bcAlloc,vLastBlock,vSchemeId,vBlockId,vTypeId,vPartnerId,vStartNum,strEndNum,vQuantity,vOperation,vFileName);
											break;
							
											
									}
									else
									{
											//	All the numbers in this Block are to be allocated 
											//	and in addition to it there are other numbers in the record

											vLastBlock		=	false;
											
											//	Calculate the quantity to be allocated for this block
											var runStartNum	=	vStartNum.substring(i);	
											var quan 		=	ToNumber(GetFieldValue(""End Number"")) - ToNumber(runStartNum);	
											vQuantity		=	ToInteger(ToInteger(quan) + 1);//ToInteger(vEndNum)	-	ToInteger(vStartNum)	+	1;	//(Starting number Inclusive )
											
											vTotalQuantity	+=	vQuantity;	//	total numbers allocated till now
											
											Allocate_Numbers(Inputs,Outputs,bcAlloc,vLastBlock,vSchemeId,vBlockId,vTypeId,vPartnerId,vStartNum,strEndNum,vQuantity,vOperation,vFileName);											

											//	So set the new Start Number
											var halfnum	=	ToInteger(GetFieldValue(""End Number""));
											halfnum		=	ToInteger(ToInteger(halfnum)	+	1);
											vStartNum	=	strPrefix	+	halfnum;
											
										
									}
								}	//	if(blnIsRecord1) ends	
									
									
							}		//	with bcBlock ends
						


					}				//	if blnIsRecord ends
							
					}				//	while true Ends	
					
					if(ToInteger(strQuantity)	!= ToInteger(vTotalQuantity))
					{
						//	Numbers Allocated and the Required quantity of Numbers to be allocated, Mismatched
						//	Throw Exception
						var rec = ""1|"" + strStartNum + ""|"" + strEndNum + ""|"" + vPartnerId + ""|"" + strQuantity + ""|"" + vOperation;
						Outputs.SetProperty(""Error Code"",""RMSSIMERP02"");
						Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMERP02"",rec,vFileName));

					}
				}					//	with bcNumEnq ends
	
	}//try end
	catch(e)  
	{
				Outputs.SetProperty(""Error Code"", e.errCode);
				Outputs.SetProperty(""Error Message"", e.errText);	

		//strErrVal = e.errText;
		strErrVal = e.toString();

	}
	
	finally
	{
//1.1 below
		bcNumEnq			=	null;
		boNumEnq			=	null;
		bcAlloc				= 	null;
		boAlloc				= 	null;
		bcBlock				= 	null;
		boBlock				= 	null;
		bcSysPref			=	null;
		boSysPref			=	null;
//1.1 above

	return (CancelOperation);
	}
}
function Allocate_Numbers(Inputs,Outputs,bcAlloc,vLastBlock,vSchemeId,vBlockId,vTypeId,vPartnerId,vStartNum,strEndNum,vQuantity,vOperation,vFileName)
{
	var psInputs;
	var psOutputs;
	var bsNMAllocate;
	//var sPartnerCodeId = """"
	var boPartner = TheApplication().GetBusObject(""Channel Partner"");
	var bcPartner = boPartner.GetBusComp(""Channel Partner"");
	
	psInputs  		= TheApplication().NewPropertySet();
	psOutputs  		= TheApplication().NewPropertySet();
	bsNMAllocate	= TheApplication().GetService(""RMS NM Number Allocation"");
	
	if((vPartnerId != """") && (Inputs.GetProperty(""PartnerCSN"") != ""Y"")) {
		with(bcPartner) {
			SetViewMode(AllView);
			ActivateField(""CSN"");
			ClearToQuery();
			SetSearchSpec(""Id"",vPartnerId);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord()) {
				vPartnerId = GetFieldValue(""CSN"");
			}
		}
	}	

	with(bcAlloc)
	{
//												ViewMode(""AllView"");
						ActivateField(""Operation"");
						ActivateField(""Scheme Id"");
						ActivateField(""Block Id"");
						ActivateField(""Alloc To Id"");
						ActivateField(""Start Num String"");
						ActivateField(""Quantity"");
						

						ActivateField(""Start Num Status"");
						ActivateField(""Start Num"");
						ActivateField(""End Num String"");
						ActivateField(""Special Category Name"");
						ActivateField(""SIM Artwork Id"");
						ActivateField(""Number Id"");
						ActivateField(""Is Paired"");
						ActivateField(""Alloc From Id"");


					
						
						NewRecord(1);
						if (vOperation	==	0)
						{

								SetFieldValue(""Scheme Id"",vSchemeId);
								SetFieldValue(""Block Id"",vBlockId);
								SetFieldValue(""Type Id"",vTypeId);
											
								//SetFieldValue(""Alloc To Id"",vPartnerId);
								SetFieldValue(""Alloc To"",vPartnerId);
								SetFieldValue(""Is Paired"",""Y"");
								SetFieldValue(""Start Num String"",vStartNum);
		
								SetFieldValue(""Quantity"",vQuantity);
			
								WriteRecord();

								// Check if the End Number(strEndNum) in file matches the End number in the new allocation record
								if (vLastBlock == true)
								{
									if (strEndNum	==	GetFieldValue(""End Num String""))
									{
										// Calling the BS Allocate method	Allocate
										
										psInputs.SetProperty(""Object Id"",GetFieldValue(""Id""));								
										bsNMAllocate.InvokeMethod(""Allocate"",psInputs,psOutputs);
									}
									else
									{

										// Log the error for this block

										Outputs.SetProperty(""Error Code"",""RMSSIMERP03"");
										Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMERP03"",GetFieldValue(""End Num String""),vStartNum,strEndNum));

										// Numbers cant be allocated
										DeleteRecord();

									}
								}
								else	// Not the last Block to be allocated
								{
										// Calling the BS Allocate method	Allocate
										
										psInputs.SetProperty(""Object Id"",GetFieldValue(""Id""));								
										bsNMAllocate.InvokeMethod(""Allocate"",psInputs,psOutputs);									
								}
																
						}
						else if (vOperation	==	1)
						{
								SetFieldValue(""Operation"",TheApplication().InvokeMethod(""LookupValue"",""NM_ALLOCATION_OPERATION"",""DEALLOCATE""));
								SetFieldValue(""Scheme Id"",vSchemeId);
								SetFieldValue(""Block Id"",vBlockId);
								SetFieldValue(""Type Id"",vTypeId);
												
								//SetFieldValue(""Alloc From Id"",vPartnerId);
								SetFieldValue(""Alloc From"",vPartnerId);
								SetFieldValue(""Is Paired"",""Y"");
								SetFieldValue(""Start Num String"",vStartNum);
		
								SetFieldValue(""Quantity"",vQuantity);							

								WriteRecord();

								// Check if the End Number(strEndNum) in file matches the End number in the new allocation record
								if (vLastBlock == true)
								{
									if (strEndNum	==	GetFieldValue(""End Num String""))
									{
										// Calling the BS Allocate method	Allocate
										
										psInputs.SetProperty(""Object Id"",GetFieldValue(""Id""));								
										bsNMAllocate.InvokeMethod(""Deallocate"",psInputs,psOutputs);
									}
									else
									{
										// Log the error for this block

										Outputs.SetProperty(""Error Code"",""RMSSIMERP03"");
										Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMERP03"",GetFieldValue(""End Num String""),vStartNum,strEndNum));

										// Numbers cant be allocated
										DeleteRecord();


									}
								}
								else	// Not the last Block to be allocated
								{
										// Calling the BS Allocate method	Allocate
										
										psInputs.SetProperty(""Object Id"",GetFieldValue(""Id""));								
										bsNMAllocate.InvokeMethod(""Deallocate"",psInputs,psOutputs);
										
								}
																						
						}
						
						

					}	// with Ends
					if (psOutputs.GetProperty(""Error Code"") != """" || psOutputs.GetProperty(""Error Message"")	!=	"""")
					{
							Outputs.SetProperty(""Error Code"", psOutputs.GetProperty(""Error Code""));
							Outputs.SetProperty(""Error Message"", psOutputs.GetProperty(""Error Message""));	
					}
					
	psInputs 	= null;
	psOutputs	= null;
	bcPartner	= null;
	boPartner	= null;
	bsNMAllocate= null;
					
											
}
function GetDirectoryList(Inputs,Outputs,fileArray)
{

	var vPath			=	Inputs.GetProperty(""DirectoryPath"");
	var vPattern		=	Inputs.GetProperty(""FilePattern"");

	var vFNameForList 	= 	vPath 	+ 	"filelist.lst"";
	
	
	//	name of the OS, can be WIN, win, Win (Windows) or Unix, UNIX, unix (all flavours of UNIX)
	var vOperatingSys	=	Inputs.GetProperty(""OperatingSys"");
	
	
	//	command string to execute list directory function on the OS
	var vCommand		=	"""";


	
	if(""unix"" == vOperatingSys.toLowerCase())
	{
			//	In case unix
		if(TheApplication().InvokeMethod(""LookupValue"",""RMS_ALLOC_ADMIN"",""NEWUNIXCMD"") != ""Y"")
			vCommand = ""ls "" + vPath + vPattern + "" | sort > "" + vFNameForList;
		else
			vCommand = ""ls -1 "" + vPath + "" > "" + vFNameForList;
	} 
	else 
	{
			//	In case Win
			
			vCommand = ""dir "" + vPath + vPattern + "" /N /B > "" + vFNameForList;
	}

			//	now execute the command on OS, can be risky		

			Clib.system(vCommand);
	
			// Creating the last file in Directory to mark the end of listing process
			
//			WriteToFile(""written the directory list file"",""_test"");
			
			
			//	Filling the FileArray with names of files, read from the list of the files 
						
			var vInputString	=	"""";
			var fpInputFile 	=	Clib.fopen(vFNameForList,""r"");
			
			var fileCount		=	0;	
			
			while (vInputString != null) 
	    	{
					vInputString	=	Clib.fgets(fpInputFile);
					
					if(vInputString == null) continue;
	
					//		remove the end of line character from the string
					//		for unix formatted file it is \n and for windows formatted file it is \r\n
				
						if(vInputString.indexOf(""\r"") != -1) 
						{
							vInputString 			=	vInputString.substring(0,vInputString.indexOf(""\r""));
							fileArray[fileCount] 	= 	vInputString;
							fileCount++;
						}
						else if(vInputString.indexOf(""\n"") != -1) 
						{
							
							vInputString 			=	vInputString.substring(0,vInputString.indexOf(""\n""));
							fileArray[fileCount] 	=	vInputString;
							fileCount++;
						}
			}	//	while Ends
			
			Clib.fclose(fpInputFile);


	return ContinueOperation;


}
function GetSystemPref(Inputs,Outputs)
{
		var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	    var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
	    
		bcSysPref.ActivateField(""Value"");
		bcSysPref.ActivateField(""Name"");
		
		bcSysPref.ClearToQuery();
		if(Inputs.GetProperty(""AllocationDetailDirIn1"")!= """")
			bcSysPref.SetSearchSpec(""Name"",Inputs.GetProperty(""AllocationDetailDirIn1""));
		else
			bcSysPref.SetSearchSpec(""Name"",""RMS_IF_SIMALLOC_DIR_IN"");
		bcSysPref.ExecuteQuery();

		if(bcSysPref.FirstRecord()) 
		{
			    Inputs.SetProperty(""DirectoryPath"",bcSysPref.GetFieldValue(""Value""));
		}
		
		
		bcSysPref.ClearToQuery();
		if(Inputs.GetProperty(""AllocationDetailDirOut1"")!= """")
			bcSysPref.SetSearchSpec(""Name"",Inputs.GetProperty(""AllocationDetailDirOut1""));
		else
			bcSysPref.SetSearchSpec(""Name"",""RMS_IF_SIMALLOC_DIR_OUT"");
		bcSysPref.ExecuteQuery();
		
		if(bcSysPref.FirstRecord()) 
		{
			    Inputs.SetProperty(""DirectoryPathOut"",bcSysPref.GetFieldValue(""Value""));
	    }
	    
	    
		bcSysPref.ClearToQuery();
		if(Inputs.GetProperty(""AllocationOS"")!= """")
			bcSysPref.SetSearchSpec(""Name"",Inputs.GetProperty(""AllocationOS""));
		else
			bcSysPref.SetSearchSpec(""Name"",""HCPT_OS"");
		bcSysPref.ExecuteQuery();
		
		if(bcSysPref.FirstRecord()) 
		{
			    Inputs.SetProperty(""OperatingSys"",bcSysPref.GetFieldValue(""Value""));
	    }
	    
	    bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""RMS_IF_SIMALLOC_PARTNERCSN"");
		bcSysPref.SetSearchSpec(""Value"",""Y"");
		bcSysPref.ExecuteQuery();
		
		if(bcSysPref.FirstRecord()) 
		{
			    Inputs.SetProperty(""PartnerCSN"",""Y"");
	    }
	    
	    bcSysPref  = null;
		boSysPref  = null;


}
function MoveFile(Inputs,Outputs)
{
		//	FilePath1, FileName1 is the source file
		//	default operation is delete
		//	if FilePath2 is the specified as destination path then copy there before deleting
		
		
			var vPath1 = Inputs.GetProperty(""DirectoryPath"");
			var vName1 = Inputs.GetProperty(""vFileName"");
			
			var vPath2 = Inputs.GetProperty(""DirectoryPathOut"");
			var vName2 = Inputs.GetProperty(""vFileName"");
			
			if("""" != (vPath2+vName2))//destination specified
				Clib.rename(vPath1+vName1,vPath2+vName2);
		/*	else {
				if(vName1 != """" )
					Clib.remove(vPath1+vName1);
			}
		*/
}
function ReadAllocFiles(Inputs,Outputs,fileArray)
{

	var vFullFileName   =	"""";
	var vFileName		=	"""";

	var vResult			=	false;
	
    var fileCount		=	0;
	
	var mbIsRecord 		=	false;
	
	var vfilePath 		=	Inputs.GetProperty(""DirectoryPath"");

	var vfileName		=	"""";
	var errVal			= """";

	
	for(fileCount=0;fileCount<getArrayLength(fileArray);fileCount++)
	{
			
           	if((fileArray[fileCount])!= "filelist.lst"")
			{
				vFileName 		=	fileArray[fileCount];
				vFullFileName	=	vfilePath + vFileName;
				ReadRecords(Inputs,Outputs,vFullFileName,vFileName);
				
				errVal = Outputs.GetProperty(""Error Code"");
				if(errVal	!= ""00000"" &&  errVal	!= ""RMSALC006"" && errVal	!= ""RMSALC007"")
				{
					var vErr 			= Outputs.GetProperty(""Error Message"");
					var vErrCode 		= Outputs.GetProperty(""Error Code"");
					var vObjName 		= ""ERP SIM Allocation"";
					var vFunc 			= ""ReadAllocFiles"";
					var vObjType 		= ""Business Service"";
					var strGroupCode 	= ""ERP_ALLOC"";
					var vMsgStr			= ""ERP Allocation File Processing Error. Check file: "" + vFullFileName + "".log for details"";	

					TheApplication().log_exception(""Exception"",vErr,vErrCode,strGroupCode,vObjName,vFunc,vObjType,vMsgStr);
				}
				
			} 	// End of if
			
			//	After processing file, Move the file to another folder
			if(vFileName != """") {
	         Inputs.SetProperty(""vFileName"",vFileName);
	         MoveFile(Inputs,Outputs);
	        }
	         vFullFileName = """";
			         
	}//End of for
//							   Outputs           = null;
			
}
function ReadRecords(Inputs,Outputs,vFullFileName,vFileName)
{

	var FileObject;
	var buff;
  	var strArr;
	var strStartNum;
	var strEndNum;
	var vPartnerId;
	var strQuantity;
	var vOperation;	
	var vErrFileName = """";

	try
	{	
			//-------------Read From File-----------------------------------
			
		    FileObject 	= Clib.fopen(vFullFileName, ""r"");
		    
			if(FileObject == null)
					TheApplication().RaiseErrorText(""Could not read File"");	
					
			buff			=	Clib.fgets(FileObject);	// Reading the Header				
			
			while(buff)
			{				

					buff			=	Clib.fgets(FileObject);
					
					if(buff == null)
						continue;
					
					strArr			=	buff.split(""|"");
					strStartNum		=	"""";
					strEndNum		=	"""";
					vPartnerId		=	"""";
					strQuantity		=	"""";	
					
					if(strArr[0] == 1)
					if (strArr.length != 6 || strArr[0] == """" || strArr[1] == """" || strArr[2] == """" || strArr[3] == """" || strArr[4] == """" || strArr[5] == """")	
					{
						Outputs.SetProperty(""Error Code"",""RMSSIMERP01"");
						Outputs.SetProperty(""Error Message"", TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMERP01""));
						break;

					}
						
					if (strArr != """" && strArr[0] == 1)
					{
						strStartNum	=	strArr[1];
						strEndNum	=	strArr[2];
						vPartnerId	=	strArr[3];
						strQuantity	=	strArr[4];
						vOperation	=	ToInteger(strArr[5]);

						Outputs.SetProperty(""Error Code"", ""00000"");
						Outputs.SetProperty(""Error Message"", """");	

												
						//	For each Record read, call the Allocate Method
						
						Allocate(Inputs,Outputs,strStartNum,strEndNum,vPartnerId,strQuantity,vOperation,vFileName);
						
						var errVal	=	Outputs.GetProperty(""Error Code"");
						
						if(errVal	!= ""00000"" &&  errVal	!= ""RMSALC006"" && errVal	!= ""RMSALC007"")
						{
							//	There is an Error in Allocation
							//	Create Error File
							vErrFileName = Inputs.GetProperty(""DirectoryPathOut"") + vFileName + "".log""
						    var FileErr 	= Clib.fopen(vErrFileName, ""a"");
						    Clib.fputs(""\n"" + buff	+ ""    "" + Outputs.GetProperty(""Error Code"")	+	Outputs.GetProperty(""Error Message""), FileErr);
						    Clib.fclose(FileErr);
						   
						}
						
					}
					
					
			}	//	While Ends

		    Clib.fclose(FileObject);
		    FileObject	=	null;	
		
		
			//-------------------------End Read File---------------------------------------
		} catch (e) {
			var strErr = e.errText;
		} finally
		{
				strArr = null;
				if (FileObject != null)
					Clib.fclose(FileObject);
					
		}

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{

	try
	{
				Outputs.SetProperty(""Error Code"", ""00000"");
				Outputs.SetProperty(""Error Message"", """");	
		
			if(MethodName == ""Allocate"")
			{
			
					var fileArray       = new Array();	
					GetSystemPref(Inputs,Outputs);
					GetDirectoryList(Inputs,Outputs,fileArray);	
					ReadAllocFiles(Inputs,Outputs,fileArray);	
			}
			

			

	}
	catch(e)
	{
		
			//	Return an error code rather than throwing an error
			
			Outputs.SetProperty(""Error Code"",e.errCode);
			Outputs.SetProperty(""Error Message"",e.errText);
			
			//	Logging the Exception
			
			var vErr 		=	e.errText;
			var vErrCode 	= 	e.errCode;
			var vObjName 	= 	""RMS SIM Allocation"";
			var vFunc 		= 	""PreInvokeMethod"";
			var vObjType 	= 	""Business Service"";

			//TheApplication().log_exception(""Exception"",vErr,vErrCode,strGroupCode,vObjName,vFunc,vObjType);

	}
	finally 
	{
			return (CancelOperation);
	}




}
function WriteToFile(msgstr,msFileSuffix)

{
	var msFileName = ""debug_BS_IF_COMMON"" + msFileSuffix + "".txt"";
	var fptr=Clib.fopen(msFileName,""a"");
	Clib.fputs(msgstr+""\n\r"",fptr);
	Clib.fclose(fptr);
}
"/*
 if(MethodName == ""ReleaseCardConfig"" && bcSIMCardConfig.GetFieldValue(""Is Released"",""N""))  //  ReleaseCardConfig : 26:07:2005 : Gen. Supported
		{
		  with(bcSIMCardConfig)
		  	{
		  		SetViewMode(AllView);
		  		ActivateField(""Is Released"");
		  		ActivateField(""Gen. Supported"");
		  		ActivateField(""Status"");
		  		ClearToQuery();
//		  		SetSearchSpec(""Id"",intConfigId);
//				ExecuteQuery();
//				FirstRecord();
				bcSIMCardConfig.SetFieldValue(""Is Released"",""Y"");
				bcSIMCardConfig.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_CARD_STATUS"", ""ACTIVE""));
	
				var marrGenSup	= new Array();
				var strString     = bcSIMCardConfig.GetFieldValue(""Gen. Supported"");
				marrGenSup		= strString.split(""/"");
				marrGenSup.sort();
				var strNewString  = marrGenSup[0]+ ""/"" + marrGenSup[1] + ""/"" + marrGenSup[2];
				bcSIMCardConfig.SetFieldValue(""Gen. Supported"",strNewString);
				bcSIMCardConfig.WriteRecord();
		}
	}
*/"
"/**************************************************************************************
* Name          : RMS SIM Card Config Service PreInvoke Method				 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS SIM Card Config Code File       	                              *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/11/2003 	 1.0   		MBT						   	Created       10/11/2003	  *
* 26/06/2006 	 1.1   		ARUNJ   	SiebelES#12 Incorporated condition after ExecuteQuery *	
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs){

	var boSIMCardConfig;

	var bcSIMCardConfig;
	var bcSIMOrderLine;

	var intConfigId;
	var intReturn = ContinueOperation; 	

	var blnOrderLine; 
// below 1.1
	var isRecord;
// above 1.1
	try
	{
	
		boSIMCardConfig = TheApplication().GetBusObject(""RMS SIM Card Config"");
		bcSIMCardConfig = boSIMCardConfig.GetBusComp(""RMS SIM Card Config"");
		bcSIMOrderLine = boSIMCardConfig.GetBusComp(""RMS SIM Order Line"");
		intConfigId = Inputs.GetProperty(""Object Id"");
	
		with(bcSIMCardConfig)
		{
			ActivateField(""Is Released"");
			ClearToQuery();
			SetSearchSpec(""Id"",intConfigId);
			ExecuteQuery();
// below 1.1
			isRecord = FirstRecord();
// above 1.1
		  
		}	
//---------------------------------------------------------
// below 1.1 included '&& isRecord'
	if(MethodName == ""ReleaseCardConfig"" && isRecord)  //  ReleaseCardConfig : 26:07:2005 : Gen. Supported
// above 1.1 
		{
 	    intReturn = CancelOperation;
		  with(bcSIMCardConfig)
		  	{
				InvokeMethod(""SetAdminMode"",""TRUE"");
		  		SetViewMode(AllView);
		  		ActivateField(""Is Released"");
		  		ActivateField(""Card Category"");		  		
		  		ActivateField(""No Of MSISDN Nos"");	
		  		ActivateField(""Gen. Supported"");
		  		ActivateField(""Status"");
		  		ClearToQuery();
		  		SetSearchSpec(""Id"",intConfigId);
				ExecuteQuery();
// below 1.1
				if (FirstRecord()) {
// above 1.1
				var miCnt 		= 0;
				var miSpCnt		= 0;
				var miArrLen 		= 0;
				var miCount   	= 0;
				var marrGenSup		= new Array();
				var marrGSup		= new Array();
				var strString	= bcSIMCardConfig.GetFieldValue(""Gen. Supported"");
				/*ms 09/04/2006 temperory commented 
				marrGenSup				= strString;
				miArrLen 				= getArrayLength(strString);
				
				*********************************************************/
				marrGenSup				= strString.split("""");
				miArrLen 				= getArrayLength(marrGenSup);
				/////////////////////////////////////////////////////////
				var strHOT     = TheApplication().InvokeMethod(""LookupValue"", ""RMS_CARD_CATEGORY"", ""HOT"");
				var strWARM    = TheApplication().InvokeMethod(""LookupValue"", ""RMS_CARD_CATEGORY"", ""WARM"");
				var strCOLD    = TheApplication().InvokeMethod(""LookupValue"", ""RMS_CARD_CATEGORY"", ""COLD"")				

//				if((GetFieldValue(""Card Category"") == strWARM ||GetFieldValue(""Card Category"") == strHOT)&& GetFieldValue(""No Of MSISDN Nos"") <= 0) 
//				   TheApplication().RaiseError(""RMSCRD002""); 
//				if(GetFieldValue(""Card Category"") == strCOLD && GetFieldValue(""No Of MSISDN Nos"") > 0)
//				   TheApplication().RaiseError(""RMSCRD003""); 				
				if(strString != """")
				 {
				if( miArrLen == 2 ) 
					{ 
					 if((strString.charAt(0) >=0 && strString.charAt(0) < 10) && (strString.charAt(1) == ""G"" || strString.charAt(1) ==""g"")) 
						{
							var strNewString  = strString.charAt(0)+ strString.charAt(1).toUpperCase();
							bcSIMCardConfig.SetFieldValue(""Gen. Supported"",strNewString);
							bcSIMCardConfig.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_CARD_STATUS"", ""ACTIVE""));
							bcSIMCardConfig.SetFieldValue(""Is Released"",""Y"");
							bcSIMCardConfig.WriteRecord();
				  		}
					 else if((strString.charAt(0) == ""G"" || strString.charAt(0) ==""g"")&&(strString.charAt(1) >=0 && strString.charAt(1) < 10)) 
						{
						//	marrGenSup.reverse();
							var strNewString  = strString.charAt(1)+ strString.charAt(0).toUpperCase();
							bcSIMCardConfig.SetFieldValue(""Gen. Supported"",strNewString);
							bcSIMCardConfig.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_CARD_STATUS"", ""ACTIVE""));
							bcSIMCardConfig.SetFieldValue(""Is Released"",""Y"");
							bcSIMCardConfig.WriteRecord();
				    	}
				     else
				         TheApplication().RaiseErrorText(""Error In Generation Supported Field. Enter Valid Data ( Ex: 2G )"");
				     }     	
				
				if( miArrLen > 4)
				    {
						for(miCnt = 0; miCnt < miArrLen ;miCnt++) // Conting Number of ""/"" : Slash
							{
							  if(strString.charAt(miCnt)==""/"")
							  		miSpCnt = miSpCnt + 1;
							} 
							
						if( miArrLen = 3*miSpCnt+2 ) // Checking Array Length
							{
			  					for(miCnt = 0; miCnt < miArrLen ;miCnt++)
									{
									  if( (strString.charAt(miCnt)==""/""  && ( miCnt+1)%3 == 0)|| (strString.charAt(miCnt) >=0 && strString.charAt(miCnt) < 10)|| (strString.charAt(miCnt) == ""G"" || strString.charAt(miCnt) ==""g""))
							            {
											marrGSup[miCnt] = strString.charAt(miCnt);
											miCount = miCount +1 ;
										}
									else
									   TheApplication().RaiseErrorText(""Error In Generation Supported Field. Enter Valid Data [ Ex: 2G/3G/4G ] "")
									 }
							}		
						else 
							TheApplication().RaiseErrorText(""Error In Generation Supported Field. Enter Valid Data [ Ex: 2G/3G  or 2G] "");
							
						if( miCount == miArrLen )
						   {
				   				marrGenSup		 = strString.split(""/"");
								marrGenSup.sort();
								var strNewString = """";
								var marrArrLen	 = getArrayLength(marrGenSup);
								for(miCnt = 0; miCnt < marrArrLen ;miCnt++)
								 {
								    strString = marrGenSup[miCnt];
								    
								    if((strString.charAt(0) >=0 && strString.charAt(0) < 10) && (strString.charAt(1) == ""G"" || strString.charAt(1) ==""g"")) 
									  {
									  	var strNewString1  = strString.charAt(0)+ strString.charAt(1).toUpperCase();
									  	marrGenSup[miCnt] = strNewString1;
									  }
									else if((strString.charAt(0) == ""G"" || strString.charAt(0) ==""g"")&&(strString.charAt(1) >=0 && strString.charAt(1) < 10)) 
									  {
										var strNewString1  = strString.charAt(1)+ strString.charAt(0).toUpperCase();
									  	marrGenSup[miCnt] = strNewString1;
									  }	
									else
								        TheApplication().RaiseErrorText(""Error In Generation Supported Field. Enter Valid Data ( Ex: 2G, 3G )"");
										
								    	strNewString  = strNewString + marrGenSup[miCnt]+ ""/"";
								 }	
								//strNewString = """";
								strNewString = strNewString.substring(0,strNewString.length-1);
								marrGenSup   = strNewString.split(""/"");
								marrGenSup.sort();
								strNewString = """";
								for(miCnt = 0; miCnt < marrArrLen ;miCnt++)
								 {
									strNewString  = strNewString + marrGenSup[miCnt]+ ""/"";	
								 }	 
								strNewString = strNewString.substring(0,strNewString.length-1);
												
								bcSIMCardConfig.SetFieldValue(""Gen. Supported"",strNewString);
								bcSIMCardConfig.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_CARD_STATUS"", ""ACTIVE""));
								bcSIMCardConfig.SetFieldValue(""Is Released"",""Y"");
								bcSIMCardConfig.WriteRecord();
							}			
					  }	
			 		/* MS 11/04/2006 commented as it doesnt seem to be logical as if it is 2G always it will give error
					else 
					   TheApplication().RaiseErrorText(""Error In Generation Supported Field. Enter Valid Data [ Ex: 2G/3G  or 2G] ""); 	   
                    ***************************** MS **********************************************************************************/
			    	}
    			else
   					{
   							bcSIMCardConfig.SetFieldValue(""Gen. Supported"",strString);
							bcSIMCardConfig.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_CARD_STATUS"", ""ACTIVE""));
							bcSIMCardConfig.SetFieldValue(""Is Released"",""Y"");
							bcSIMCardConfig.WriteRecord();
					 }		
// below 1.1   
				}
// above 1.1
	    	}

    	}


//-----------------------------------------------------------	
// Cannot unrelease a card config if an order is Associated
//-----------------------------------------------------------
		if(MethodName == ""UnreleaseCardConfig"")
		{
			intReturn = CancelOperation;	
			blnOrderLine = bcSIMOrderLine.FirstRecord();
			
			if(blnOrderLine)		 			
				TheApplication().RaiseError(""RMSCRD001"");
// below 1.1
			else if (isRecord) {
// above 1.1
				bcSIMCardConfig.SetFieldValue(""Is Released"",""N"");
				bcSIMCardConfig.WriteRecord();	
// below 1.1
			}
// above 1.1
		}
		bcSIMCardConfig	= null;
		bcSIMOrderLine	= null;
		boSIMCardConfig	= null;
	
		return (intReturn);
	
	}catch(e){
		
		bcSIMCardConfig	= null;
		bcSIMOrderLine	= null;
		boSIMCardConfig	= null;
		var test = e.errText;
		throw e;
	}		
	
}
"var miFileBatchSize	= ToNumber(TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""BATCH_SIZE""));
var mbFilePos		= false;
var mbBatchLoop		= true;
var msFileStartNum	= """";
var msFileEndNum	= """";
var sArrErrCnt			= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""ERROR_CNT"");
var sPORefId			= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_POREFID"");
var sBatchNum			= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_ORD_BATCH"");
var sPprItemIndxL		= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_PPRITMIDXL"");
var sPprItemIndxR		= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_PPRITMIDXR"");
var sPprItemIndxCnt		= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_PPRITMIDXCNT"");
var sSIMCfg				= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_SIMCFG"");
var sQty				= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_QTY"");

var iArrErrCnt			= ToNumber(sArrErrCnt.substring(2));
var iPORefId			= ToNumber(sPORefId.substring(2));
var iBatchNum			= ToNumber(sBatchNum.substring(2));
var iPprItemIndxL		= ToNumber(sPprItemIndxL.substring(2));
var iPprItemIndxR		= ToNumber(sPprItemIndxR.substring(2));
var iPprItemIndxCnt		= ToNumber(sPprItemIndxCnt.substring(2));
var ipSIMCfg			= ToNumber(sSIMCfg.substring(2));
var ipQty				= ToNumber(sQty.substring(2));
var iOrdLineId		    = ToNumber(sBatchNum.substring(2));
var msSIMLoc = 1;"
function BatchNumber()
{
	var bsBatchNum	= TheApplication().GetService(""TECHM BS IF COMMON"");
	var mpsInp		= TheApplication().NewPropertySet();
	var mpsOp		= TheApplication().NewPropertySet();
	
	mpsInp.SetProperty(""Sub Type"",""SEQ"");
	mpsInp.SetProperty(""BC Short Name"",""SIMORD"");
	mpsInp.SetProperty(""Prefix"","""");
	mpsInp.SetProperty(""Length"",""5"");
	mpsInp.SetProperty(""SysPrefPrefix"",""RMS"");
	
	bsBatchNum.InvokeMethod(""Get Next Id"", mpsInp, mpsOp);
	
	
	var msNextId = mpsOp.GetProperty(""Next Id"");

	mpsInp    	= null;
	mpsOp     	= null;
//	assocNextId = null;
	bsBatchNum		= null;
	
	return (msNextId);
	
}
"/**************************************************************************************
* Name          : Call Read  Order Files Function 				  	      *
* Author        : Kalyana											  * 
* Description 	: This function  will read  all the files present in  one specific folder in server								  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 20060610	     1.0  		Kalyana      			                                  *
* 20060710       1.1        Kalyana          Siebel ES SCR1, Objects Destroyed
* 20060804       1.2        Kalyana          Siebel ES SCR 20060803, Objects Destroyed
* 20060823       1.3        Kalyana          Added code to Reset Arrays to import multiple 
											 SIM Order Files
**************************************************************************************/

function CallReadOrderFiles(fileArray,Inputs)
{
    var marrOrdCnct 	= new Array();
	var marrInputParams = new Array();
	var marrError 		= new Array();
	var marrSIMIMSI		= new Array();
	var marrNumberType	= new Array();
	//var fileArray     = new Array();
	var intReturn		= CancelOperation;
	var mpsPprId		= TheApplication().NewPropertySet();
	var msFullFileName  = """";
	var msFileName      = """";
	var strErrVal		= """";
	var mbResult		= false;
	//var Inputs 			= TheApplication().NewPropertySet();
	var Outputs         = TheApplication().NewPropertySet();
    var fileCount=0;
	var count= getArrayLength(fileArray);		
	var boOrderQuery 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	    = boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");
	var strOrderId ="""";
	var strorderLineId ="""";
	var mbIsRecord = false;
	var filePath = Inputs.GetProperty(""DirectoryPath"");
	var filePathOut = Inputs.GetProperty(""DirectoryPathOut"");
	var fileName= """";
	var strComments = """";
	//1.4
	var mpFilePos;
	//1.4
	for(fileCount=0;fileCount<getArrayLength(fileArray);fileCount++){
		
	
           	if((fileArray[fileCount])!= "filelist.lst"")
			{
			while(mbBatchLoop) {
			    msFileStartNum = """";  //Added variable reset line
                msFileEndNum = """";  //Added variable reset line
				msFileName = fileArray[fileCount];
				msFullFileName = filePath + fileArray[fileCount];
				mbResult = 	ReadOrderFileNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrError,msFullFileName,marrNumberType,mpFilePos);
				if(mbResult){
			   		strErrVal = UpdateNumbersNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrNumberType,msFullFileName);
				            } //End of if(mbResult)
				 
		//-----------------------------------------------------------------------------
		//enable the following script, if an error file is required to be generated          // 01:07:2005
		//----------------------------------------------------------------------------
			if(strErrVal != """" || getArrayLength(marrError) > 0) 
			//{
			/*	marrError[getArrayLength(marrError)] = strErrVal;
				GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);	
			    	
			}
			else //commented for read tests*/
			      {
					if(marrError[0] != """") {
					GenerateErrorFileNew(strOrderId,marrInputParams,marrError,msFileName,marrNumberType,Inputs,Outputs);
					with(bcOrderLineQuery) 
		             {
					   ActivateField(""Order Id"");
					   ClearToQuery();
				       //SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
				       //SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
			        	SetSearchSpec(""Order Line Id"",marrNumberType[iOrdLineId]);
				        ExecuteQuery(ForwardOnly);
				        mbIsRecord = FirstRecord();
				        /*if(!mbIsRecord) {
					      strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
					      TheApplication().RaiseErrorText(strErrVal);
			            }*/ 
				        if(mbIsRecord)
						{
							strorderLineId = GetFieldValue(""Id"");
							strOrderId = GetFieldValue(""Order Id"");
							var strComments = Outputs.GetProperty(""strErrVal"");
						    UpdateFile(""I"",strComments,msFullFileName,strOrderId,strorderLineId);
					    }// End of if(mbIsRecord)
	             	   }//End of with(bcOrderLineQuery) 
				        //strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD019"");
				        //TheApplication().RaiseErrorText(Outputs.GetProperty(""strErrVal""));
					    /*var strComments = Outputs.GetProperty(""strErrVal"");
						UpdateFile(""I"",strComments,msFullFileName,strOrderId);*/
						mbFilePos = false;
				       } //End of if(marrError[0] != """")
				       } //End of if(strErrVal != """" || getArrayLength(marrError) > 0) 
			           	// below 1.3
						//Code to reset arrays
			            //after last file in filelist is processed no need to reset the arrays.
			            //1.4
			            if(!mbFilePos) {
			       		break;
			       	}else {
			       		marrOrdCnct			= null;
			       		marrInputParams 	= null;
			       		marrError			= null;
			       		marrSIMIMSI	     	= null;
			       		marrOrdCnct 		= new Array();
						marrInputParams 	= new Array();
						marrError 			= new Array();
						marrSIMIMSI	     	= new Array();
			       	}
			       		
			        } // end while
			            //1.4
					    if (fileCount<getArrayLength(fileArray)-1)
							{
							marrError 	     = null;
					        marrSIMIMSI	     = null;
					        marrNumberType	 = null;
						    marrOrdCnct 	 = null;
				  	        marrInputParams  = null;
				  	        msFileStartNum	 = """";
				  	        msFileEndNum     = """";
							marrOrdCnct 	 = new Array();
							marrInputParams  = new Array();
							marrError 		 = new Array();
				            marrSIMIMSI		 = new Array();
					        marrNumberType	 = new Array();
							}
							//above 1.3
					
				      } // End of if((fileArray[fileCount])!= "filelist.lst"")
			         Inputs.SetProperty(""msFileName"",msFileName);
			         FileOperations(Inputs,Outputs);
			         msFullFileName = """";
			       	
			        }//End of for
					//Inputs.SetProperty(""msFileName"","filelist.lst"");
					//FileOperations(Inputs,Outputs);	
				    //below 1.1
					bcOrderLineQuery = null;
					boOrderQuery     = null;
				    //above 1.1
					marrOrdCnct 	 = null;
					marrInputParams  = null;
					marrError 	     = null;
					marrSIMIMSI	     = null;
					marrNumberType	 = null;
					mpsPprId         = null;
				    //below 1.2
				   Outputs           = null;
				   //above 1.2
	} //End of function"
"/**************************************************************************************
* Name          : SIM Order Business Service ValidateOrder Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/
function CheckSequence(bcNumberEnquiry,bcOrdLineNum,&marrSeqChek,cheqSeqArgs) {
	var blnIsRecord;
	var mblnSplit = false;
	var mintRecCnt = 0 ;
	//20100227:Kalyana To check sequence for only SIM and IMSI
	var strSearchSpec ="""";
	mblnSplit= (cheqSeqArgs.GetProperty(""mblnSplit"") == ""true"")?true:false;//KT 21-042006
	mintRecCnt=ToInteger(cheqSeqArgs.GetProperty(""mintRecCnt""));//KT 21-042006
	with(bcNumberEnquiry) {
		ActivateField(""Type"");
		ActivateField(""Number"");
		ActivateField(""Number String With Checksum"");
		ActivateField(""Generation Level"");
		ClearToQuery();
		//Below  20100227:Kalyana To check sequence for only SIM and IMSI
		//SetSearchSpec(""Assoc Start Id"",bcOrdLineNum.GetFieldValue(""SIM Id""));
		strSearchSpec = strSearchSpec + ""([Number Type Identifier Denorm] = '""+TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"")+""'"";
    	strSearchSpec = strSearchSpec + "" OR [Number Type Identifier Denorm] = '""+TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"")+""')"";
		strSearchSpec = strSearchSpec + "" AND [Assoc Start Id] = '"" + bcOrdLineNum.GetFieldValue(""SIM Id"") + ""'"";		
		SetSearchExpr(strSearchSpec);
		//Above 20100227:Kalyana To check sequence for only SIM and IMSI
		ExecuteQuery();
		blnIsRecord = FirstRecord();
		if(mintRecCnt != 0) {
			while(blnIsRecord) {
				var type = GetFieldValue(""Type"");
				var arrval = marrSeqChek[GetFieldValue(""Type"")];
				var arrvalint = ToInteger(marrSeqChek[GetFieldValue(""Type"")])+1;
				var num = GetFieldValue(""Number"");
				if(GetFieldValue(""Number"") != (ToInteger(marrSeqChek[GetFieldValue(""Type"")])+1)) 
					 {
					mblnSplit = true;
					break;
				}
				blnIsRecord = NextRecord();
			}
		} else
			mblnSplit = true;

		blnIsRecord = FirstRecord();
		
		while(blnIsRecord){
			marrSeqChek[GetFieldValue(""Type"")] = GetFieldValue(""Number"");
			blnIsRecord = NextRecord();
		}
	}


       cheqSeqArgs.SetProperty(""mblnSplit"",mblnSplit);// KT 21-04-2006
       cheqSeqArgs.SetProperty(""mintRecCnt"",mintRecCnt);//KT 21-04-2006

}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Generate the Checksum number for validation						  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana      Siebel ES SCR1, Objects Destroyed* 
**************************************************************************************/
function ChecksumNumber(msNumber)
{

/*	var miChecksum1 	= 0;
	var miChecksum2 	= 0;
	var miNumCount 		= 0;
	var miLength 	 	= ToInteger(msNumber.length);
	
//  Removing the first 7 digits of the No. which are fixed digits

	for(miNumCount=7;miNumCount<miLength;miNumCount++)
		miChecksum1 = miChecksum1 + ToInteger(msNumber.charAt(miNumCount));
	miChecksum1 = miChecksum1 % 10;
	for(miNumCount=7;miNumCount<miLength; miNumCount=miNumCount+2)
		miChecksum2 = miChecksum2 + ToInteger(msNumber.charAt(miNumCount));
	miChecksum2 = miChecksum2 * 3;
	miChecksum2 = miChecksum2 % 10;
//  msNumber = msNumber + miChecksum1 + miChecksum2;
	return(ToString(miChecksum1) + ToString(miChecksum2)); 
*/

	var boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumEnqUpdate	= boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update"");
//below 1.1 
	var intReturn;
//above 1.1
	with(bcNumEnqUpdate)
	{
		SetViewMode(3);
		ActivateField(""CheckSum1"");
		ActivateField(""Number String without Delimiter"");
		ActivateField(""Number String"");
		ClearToQuery();
	    SetSearchSpec(""Number String"",msNumber);
		ExecuteQuery();
	    var NumStr = bcNumEnqUpdate.GetFieldValue(""Number String"");
	    var NumStr1 = bcNumEnqUpdate.GetFieldValue(""Number String without Delimiter"");
  	
		if (FirstRecord())
		{
		 	var Chksum = bcNumEnqUpdate.GetFieldValue(""CheckSum1"");
//below 1.1		 	
			//return(bcNumEnqUpdate.GetFieldValue(""CheckSum1""));
			intReturn  =  bcNumEnqUpdate.GetFieldValue(""CheckSum1"");
//above 1.1
		}	
		else
//below 1.1
			//return false;
			intReturn  = "false"";
//above 1.1
	}
//below 1.1
       bcNumEnqUpdate = null;
       boNumEnq       = null;
       return(intReturn);
//above 1.1
}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Clean the number from any delimiters								  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/
function CleanNumber(msNumberString) 
{
	var msOutString = """";
	var miCount = 0;
	
	for(miCount = 0; miCount < msNumberString.length;miCount++) 
	{
		if(Clib.isdigit(msNumberString.charAt(miCount)))
			msOutString += msNumberString.charAt(miCount);
	}
	
	return msOutString;
}
function CleanString(msString) 
{
	var msOutString = """";
	var miCount = 0;
	
	for(miCount = 0; miCount < msString.length;miCount++) 
	{
		if(Clib.isalnum(msString.charAt(miCount)) || (msString.charAt(miCount) == ""/"")|| (msString.charAt(miCount) == ""_""))
			msOutString += msString.charAt(miCount);
	}
	
	return msOutString;
}
function FileOperations(Inputs,Outputs)
{
//FilePath1, FileName1 is the source file
//default operation is delete
//if FilePath2, FileName2 is the specified as destination path and filename then copy there before deleting
	var msPath1 = Inputs.GetProperty(""DirectoryPath"");
	var msName1 = Inputs.GetProperty(""msFileName"");
	var msPath2 = Inputs.GetProperty(""DirectoryPathOut"");
	var msName2 = Inputs.GetProperty(""msFileName"");
	if("""" != (msPath2+msName2)) {//destination specified
		var iRet = Clib.rename(msPath1+msName1,msPath2+msName2);
		if((iRet != 0) && (msName2 != """")) {
			var dDate = new Date();
			Clib.rename(msPath1+msName1,msPath2+msName2+""_""+dDate.getTime());
		}
	} else
		Clib.remove(msPath1+msName1);
	return CancelOperation;
}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Siebel ES SCR1, Objects Destroyed
* 20060712      1.2         Kalyana         Commented  Entire  Code
**************************************************************************************/

function GenerateErrorFile(sOrderId,&marrInputParams,&marrError,msInpFileName,marrNumberType,Inputs,Outputs)
{
//below 1.2
/*
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderHdr 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Paper Item""); 
//	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");
	var mbIsPprItem			= false;  													
	var msPprItem			= """";														
	
	var mfpOutputFile;	
	var miCnt;
	var msErrorFile         = """";
	var msFile              = """";
	var strErrVal           = """";

//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
	with(bcOrderHdr)
	{
    	SetViewMode(AllView);
//		SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Id"", sOrderId);
    	ClearToQuery();
		ExecuteQuery(ForwardOnly);
         {
           with(bcOrdPprItem) 
            {
    		 SetViewMode(AllView);
			 ActivateField(""Paper Item Name"");
			 ClearToQuery();
			 ExecuteQuery();
			 mbIsPprItem = FirstRecord();
			
			while(mbIsPprItem) 
			 {
				if(msPprItem == """")
					msPprItem = bcOrdPprItem.GetFieldValue(""Paper Item Name"");
				else
		     		msPprItem += ""/"" + bcOrdPprItem.GetFieldValue(""Paper Item Name"");
					
				mbIsPprItem = bcOrdPprItem.NextRecord();	
			 }
		}
	}	
}	
//-------------------------------------------------------------------------------------
	try
	{
		var mboSysPref = TheApplication().GetBusObject(""System Preferences"");
		var mbcSysPref = mboSysPref.GetBusComp(""System Preferences"");
		
		with(mbcSysPref) 
		{
			ActivateField(""Value"");
			ClearToQuery();
			SetSearchSpec(""Name"",""RMS_SIMORDER_ERROR_FILEPATH""); //  VIBO_SIM_ERROR_FILEPATH(Dtd: 01:07:2005)
			ExecuteQuery(ForwardOnly);
			if(FirstRecord()) 
			{
				msFile = GetFieldValue(""Value"");
			} 
		}
		
		 //msErrorFile = msInpFileName.substring(0,msInpFileName.lastIndexOf(""\\"")) + ""_ERROR.log"";// for Windows
		//msErrorFile = msInpFileName.substring(msInpFileName.lastIndexOf(""/"")+1)+ ""_ERROR.log"";// for UNIX
		//msFile +=  msErrorFile;
          //msErrorFile = ""test.log"";
		  
		msFile =  msFile+msInpFileName+""_.log"";
	  //msFile = msInpFileName + ""_ERROR.err"";
      //UpdateFile(""O"","""",msErrorFile,marrInputParams[""P0_ref_number""]);
    	strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder004"",msFile);
		mfpOutputFile = Clib.fopen(msFile,""a"");
		
		Clib.fputs(""*********************************************\n"", mfpOutputFile);
		Clib.fputs(""*             HEADER DESCRIPTION        * \n"", mfpOutputFile);
		Clib.fputs(""*********************************************\n"", mfpOutputFile);
		//Clib.fputs(""\n"", mfpOutputFile);
		/*Clib.fputs(""Customer: HCPT\n""  , mfpOutputFile);
		Clib.fputs(""P0_ref_number: "" + marrNumberType[1] + ""\n"", mfpOutputFile);
		Clib.fputs(""Qty: "" + marrNumberType[2] + ""\n"", mfpOutputFile);
		Clib.fputs(""PartNo_SIMCardConfigNo: "" + marrNumberType[3] + ""\n"", mfpOutputFile);
		Clib.fputs(""Batch: "" + marrNumberType[4] + ""\n"", mfpOutputFile);*/
//above 1.2
//below 1.2
/*		
		Clib.fputs(""P0_ref_number: "" + marrInputParams[""PO_ref_number""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Quantity: "" + marrInputParams[""Quantity""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Type: "" + marrInputParams[""Type""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Memory: "" + marrInputParams[""Memory""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Profile: "" + marrInputParams[""Profile""]+ ""\n"", mfpOutputFile);
		Clib.fputs(""Graph_ref: "" + marrInputParams[""Graph_ref""] + ""\n"", mfpOutputFile); // Change
//		Clib.fputs(""Artwork: ""+ bcOrdLine.GetFieldValue(""ImageFileName"") + ""\n"", mfpOutputFile); 
		Clib.fputs(""Artwork: "" + marrInputParams[""Artwork""] + ""\n"", mfpOutputFile); 	// Change
        Clib.fputs(""Batch: "" + marrInputParams[""Batch""] + ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
		Clib.fputs(""Keyname: "" + marrInputParams[""Keyname""]+ ""\n"", mfpOutputFile);
		//Clib.fputs(""Transport_Key: "" + marrInputParams[""Transport_Key""]+ ""\n"", mfpOutputFile);
//		Clib.fputs(""Transport_3GOp_In: "" + marrInputParams[""Transport_3GOp_In""]+ ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
        Clib.fputs(""Address1: "" + marrInputParams[""Address1""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Address2: "" + marrInputParams[""Address2""] + ""\n"", mfpOutputFile);
		//Clib.fputs(""Address3: "" + marrInputParams[""Address3""] + ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""*            INPUT VARIABLES            *       \n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""Var_In_List: ""+ ""\n"", mfpOutputFile);
		Clib.fputs(""IMSI: ""+ marrInputParams[""IMSI""] + ""\n"", mfpOutputFile);
		//Clib.fputs(""Ser_Nb: ""+ marrInputParams[""Ser_Nb""] + ""\n"", mfpOutputFile);
		Clib.fputs(""ICCID: ""+ marrInputParams[""ICCID""] + ""\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""*            OUTPUT VARIABLES           *\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""Var_Out: ICCID,IMSI, ""+ msPprItem + ""\n"", mfpOutputFile); 					  // Changed 07:06:2005
		
//		Clib.fputs(""Var_Out: PIN1/PUK1/PIN2/PUK2/KI/ADM1\n"", mfpOutputFile);

		for(miCnt = 0; miCnt < getArrayLength(marrError);miCnt++) 
		{
			if(marrError[miCnt] != """") 
				Clib.fputs(marrError[miCnt] + ""\n"",mfpOutputFile);
		}
			
	} 
	catch(e) 
	{
		throw (e);
		
		

}
	finally 
	{
		if(mfpOutputFile != null)
		Clib.fclose(mfpOutputFile);
		Outputs.SetProperty(""strErrVal"",strErrVal);
//below 1.1		
		bcOrdPprItem  = null;
		bcOrderHdr    = null;
		boOrder       = null;
//above 1.1		
		mbcSysPref	  = null;
		mboSysPref	  = null;
	}*/
//above 1.2
}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Siebel ES SCR1, Objects Destroyed
**************************************************************************************/

function GenerateErrorFileNew(sOrderId,&marrInputParams,&marrError,msInpFileName,marrNumberType,Inputs,Outputs)
{
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderHdr 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Paper Item""); 
//	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");
	var mbIsPprItem			= false;  													
	var msPprItem			= """";														
	
	var mfpOutputFile;	
	var miCnt;
	var msErrorFile         = """";
	var msFile              = """";
	var strErrVal           = """";

//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
	with(bcOrderHdr)
	{
    	SetViewMode(AllView);
//		SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Id"", sOrderId);
    	ClearToQuery();
		ExecuteQuery(ForwardOnly);
         {
           with(bcOrdPprItem) 
            {
    		 SetViewMode(AllView);
			 ActivateField(""Paper Item Name"");
			 ClearToQuery();
			 ExecuteQuery();
			 mbIsPprItem = FirstRecord();
			
			while(mbIsPprItem) 
			 {
				if(msPprItem == """")
					msPprItem = bcOrdPprItem.GetFieldValue(""Paper Item Name"");
				else
		     		msPprItem += ""/"" + bcOrdPprItem.GetFieldValue(""Paper Item Name"");
					
				mbIsPprItem = bcOrdPprItem.NextRecord();	
			 }
		}
	}	
}	
//-------------------------------------------------------------------------------------
	try
	{
		var mboSysPref = TheApplication().GetBusObject(""System Preferences"");
		var mbcSysPref = mboSysPref.GetBusComp(""System Preferences"");
		
		with(mbcSysPref) 
		{
			ActivateField(""Value"");
			ClearToQuery();
			//KT New code
			if(Inputs.PropertyExists(""RMSSIMOrderErrorPath1""))
		    {
		    var testval = 	Inputs.GetProperty(""RMSSIMOrderErrorPath1"");
		    SetSearchSpec(""Name"",Inputs.GetProperty(""RMSSIMOrderErrorPath1""));
	        }
		    else
		    {
			SetSearchSpec(""Name"",""RMS_SIMORDER_ERROR_FILEPATH""); //  VIBO_SIM_ERROR_FILEPATH(Dtd: 01:07:2005)
			}
			ExecuteQuery(ForwardOnly);
			if(FirstRecord()) 
			{
				msFile = GetFieldValue(""Value"");
			} 
		}
		
		 //msErrorFile = msInpFileName.substring(0,msInpFileName.lastIndexOf(""\\"")) + ""_ERROR.log"";// for Windows
		//msErrorFile = msInpFileName.substring(msInpFileName.lastIndexOf(""/"")+1)+ ""_ERROR.log"";// for UNIX
		//msFile +=  msErrorFile;
          //msErrorFile = ""test.log"";
		  
		msFile =  msFile+msInpFileName+""_err.log"";
	  //msFile = msInpFileName + ""_ERROR.err"";
      //UpdateFile(""O"","""",msErrorFile,marrInputParams[""P0_ref_number""]);
    	strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder004"",msFile);
		mfpOutputFile = Clib.fopen(msFile,""a"");
		
		Clib.fputs(""*********************************************\n"", mfpOutputFile);
		Clib.fputs(""*             HEADER DESCRIPTION        * \n"", mfpOutputFile);
		Clib.fputs(""*********************************************\n"", mfpOutputFile);
		//Clib.fputs(""\n"", mfpOutputFile);
		Clib.fputs(""Customer: EDB\n""  , mfpOutputFile);
		Clib.fputs(""P0_ref_number: "" + marrNumberType[iPORefId] + ""\n"", mfpOutputFile);
		Clib.fputs(""Qty: "" + marrNumberType[ipQty] + ""\n"", mfpOutputFile);
		Clib.fputs(""PartNo_SIMCardConfigNo: "" + marrNumberType[ipSIMCfg] + ""\n"", mfpOutputFile);
		Clib.fputs(""Batch: "" + marrNumberType[iOrdLineId] + ""\n"", mfpOutputFile);
		/*Clib.fputs(""P0_ref_number: "" + marrInputParams[""PO_ref_number""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Quantity: "" + marrInputParams[""Quantity""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Type: "" + marrInputParams[""Type""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Memory: "" + marrInputParams[""Memory""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Profile: "" + marrInputParams[""Profile""]+ ""\n"", mfpOutputFile);
		Clib.fputs(""Graph_ref: "" + marrInputParams[""Graph_ref""] + ""\n"", mfpOutputFile); // Change
//		Clib.fputs(""Artwork: ""+ bcOrdLine.GetFieldValue(""ImageFileName"") + ""\n"", mfpOutputFile); 
		Clib.fputs(""Artwork: "" + marrInputParams[""Artwork""] + ""\n"", mfpOutputFile); 	// Change
        Clib.fputs(""Batch: "" + marrInputParams[""Batch""] + ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
		Clib.fputs(""Keyname: "" + marrInputParams[""Keyname""]+ ""\n"", mfpOutputFile);
		//Clib.fputs(""Transport_Key: "" + marrInputParams[""Transport_Key""]+ ""\n"", mfpOutputFile);
//		Clib.fputs(""Transport_3GOp_In: "" + marrInputParams[""Transport_3GOp_In""]+ ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
        Clib.fputs(""Address1: "" + marrInputParams[""Address1""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Address2: "" + marrInputParams[""Address2""] + ""\n"", mfpOutputFile);
		//Clib.fputs(""Address3: "" + marrInputParams[""Address3""] + ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""*            INPUT VARIABLES            *       \n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""Var_In_List: ""+ ""\n"", mfpOutputFile);
		Clib.fputs(""IMSI: ""+ marrInputParams[""IMSI""] + ""\n"", mfpOutputFile);
		//Clib.fputs(""Ser_Nb: ""+ marrInputParams[""Ser_Nb""] + ""\n"", mfpOutputFile);
		Clib.fputs(""ICCID: ""+ marrInputParams[""ICCID""] + ""\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""*            OUTPUT VARIABLES           *\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""Var_Out: ICCID,IMSI, ""+ msPprItem + ""\n"", mfpOutputFile); */					  // Changed 07:06:2005
		
//		Clib.fputs(""Var_Out: PIN1/PUK1/PIN2/PUK2/KI/ADM1\n"", mfpOutputFile);

		for(miCnt = 0; miCnt < getArrayLength(marrError);miCnt++) 
		{
			if(marrError[miCnt] != """") 
				Clib.fputs(marrError[miCnt] + ""\n"",mfpOutputFile);
		}
			
	} 
	catch(e) 
	{
     throw (e);
    }
	finally 
	{
		if(mfpOutputFile != null)
		Clib.fclose(mfpOutputFile);
		Outputs.SetProperty(""strErrVal"",strErrVal);
//below 1.1		
		bcOrdPprItem  = null;
		bcOrderHdr    = null;
		boOrder       = null;
//above 1.1				
		mbcSysPref	= null;
		mboSysPref	= null;
	}
}
function GenerateFile(sOrderId,sFilePath,&Outputs)
{
//below 1.1  Didn't put fuction  heading because  length already  exceeds  16k
/*
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Paper Item""); 				// Changed 07:06:2005  
	var bcOrder 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrdLine 			= boOrder.GetBusComp(""RMS SIM Order Line"");
	var bcOrdLineNum 		= boOrder.GetBusComp(""RMS SIM Order Line Num Info for Update"");
	var bcOrdFile 			= boOrder.GetBusComp(""RMS SIM Order File Info Query"");
	var boNumberEnquiry 	= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumberEnquiry		= boNumberEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	var marrStartNumbers 	= new Array();
	var mbIsRecord			= false;
	var mbIsFileRec 		= false;
	var mbIsPprItem			= false;  // Changed 07:06:2005
	var miFirstIndex;
//	var msPrevSIMNumber 	= """";
	var msNextSIMNumber		= """";
	var msNextIMSINumber	= """";
	var msSIMNumber 		= 0;
	var miFileSeq 			= 0;
	var miCount 			= 0;
	var miQty 				= 0;
	var msConcatNumber 		= """";
	var msFileName 			= """";
	var msIMSINumber 		= """";
	var msStrSIMNum			= """";
	var msGenLvl			= """";
	var msErrVal 			= """";
	var msPprItem			= """";   // Changed 07:06:2005
	var strSearchSpec 		= """";
	var msOrderLineId = """";
	var mfpOutputFile;
	var marrSeqChek = new Array();
	var mintRecCnt = 0;
	var mstrMSISDN = """";
	var mblnSplit = false;
	var mbIsOrderLine=false;
	var cheqSeqArgs;//KT 21-042006 
	var outFile ="""";
    var intLineItemCnt = 0;	//  KT 23-05-06  to  split  SIM  Order file for multiple  line items
	try
    {
	with(bcOrder) 
		{
			SetViewMode(3);
			ActivateField(""Quantity Ordered"");
			ActivateField(""SIM Card Config Type"");
			ActivateField(""Transport Key"");
			ActivateField(""Transport 3GOP key"");
			ActivateField(""Order Number"");
			ActivateField(""ImageFileName""); //Ch
			ActivateField(""PO Requisition Ref Number"");
			ActivateField(""Bill To Address"");
			ActivateField(""Bill To Address Line 2"");
			ActivateField(""Bill To Address Line 3"");
			ActivateField(""HLR ID"");
			ClearToQuery();
			SetSearchSpec(""Id"", sOrderId);
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) 
			{
				msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",sOrderId);
				TheApplication().RaiseErrorText(msErrVal);
			}
		}
		with(bcOrdLine) 
		{
			SetViewMode(3);
			ActivateField(""Profile"");
			ActivateField(""Transport Key"");
			ActivateField(""Transport 3GOP Key"");
			ActivateField(""Quantity Ordered"");
			ActivateField(""SIM Card Config Type"");
			ActivateField(""SIM Card Config Name"");			
			ActivateField(""ImageFileName"");
			ActivateField(""Id"");
			ActivateField(""Graphical Profile"");
			ActivateField(""Card Memory"");
			ActivateField(""Starting Number"");
			ActivateField(""Order Line Id""); // KT 24-04-2006
			ClearToQuery()
			ExecuteQuery();
			mbIsOrderLine = FirstRecord();
			if(!mbIsOrderLine) 
			{
				msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",sOrderId);
					TheApplication().RaiseErrorText(msErrVal);
			}else {
			msOrderLineId = GetFieldValue(""Order Line Id"");
			}
         	}// KT deleted
			with(bcOrdFile) 
		{
			SetViewMode(3);
			ActivateField(""File Sequence"");
			ActivateField(""HLR_Batch"");
			ClearToQuery();
			SetSearchSpec(""SIM Order Id"",sOrderId);
			SetSearchSpec(""File Type"",""O"");
			SetSortSpec(""File Sequence(DESCENDING)"");
			ExecuteQuery();
			mbIsFileRec = FirstRecord();
			if(mbIsFileRec) 
				miFileSeq = GetFieldValue(""File Sequence"");
			else
				miFileSeq = 0;
		}
		with(bcOrdPprItem) {
			ActivateField(""Paper Item Name"");
			ClearToQuery();
			ExecuteQuery(ForwardOnly);
			mbIsPprItem = FirstRecord();
			
			while(mbIsPprItem) {
				if(msPprItem == """")
					msPprItem = GetFieldValue(""Paper Item Name"");
				else
					msPprItem += ""/"" + GetFieldValue(""Paper Item Name"");
				mbIsPprItem = NextRecord();	
			}
		}
		while(mbIsOrderLine) {
				msOrderLineId = bcOrdLine.GetFieldValue(""Order Line Id"");
				with(bcOrdLineNum) 
				{
					SetViewMode(3);
					ActivateField(""Numbers"");
					ActivateField(""Generated Number"");
					ActivateField(""SIM Id"");
					ActivateField(""Concatenated Number Types"");
					ActivateField(""Order Line Id"");
					ClearToQuery();
					SetSearchSpec(""Order Id"",sOrderId)
					SetSearchSpec(""Order Line Id"",bcOrdLine.GetFieldValue(""Id""));
					SetSortSpec(""Generated Number(ASCENDING)"");
					ExecuteQuery();			
			    	mbIsRecord = FirstRecord();
				/*	if(!mbIsRecord) 
					{
						msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD020"",sOrderId);
						TheApplication().RaiseErrorText(msErrVal);
					}*/ 
//above 1.1
//below 1.1
/*
				}  
			while(mbIsRecord) 
			{	
			miQty++;
	//  23-05-06
	//			if(miCount == 0)
	//				msNextSIMNumber = bcOrdLineNum.GetFieldValue(""Generated Number"");
				msSIMNumber = bcOrdLineNum.GetFieldValue(""Generated Number"");
				cheqSeqArgs = TheApplication().NewPropertySet();// KT 21-04-2006
				cheqSeqArgs.SetProperty(""mblnSplit"",mblnSplit);// KT 21-04-2006
				cheqSeqArgs.SetProperty(""mintRecCnt"",mintRecCnt);//KT 21-04-2006
				CheckSequence(bcNumberEnquiry,bcOrdLineNum,marrSeqChek,cheqSeqArgs);//KT 21-04-2006
				mblnSplit = (cheqSeqArgs.GetProperty(""mblnSplit"")==""true"")?true:false;//KT 21-042006
	            mintRecCnt = ToInteger(cheqSeqArgs.GetProperty(""mintRecCnt""));//KT 21-042006
	//			if((msSIMNumber != msNextSIMNumber)  || (msIMSINumber != msNextIMSINumber) || (miQty > 5000)) 
				if((mblnSplit) || (miQty > 5000) ||   (intLineItemCnt != 0))
				{
					mblnSplit = false;
					mstrMSISDN = """";
					strSearchSpec = """";
					with(bcNumberEnquiry) {
						ActivateField(""Assoc Start Id"");
						ActivateField(""Type Identifier"");
						ActivateField(""Number String With Checksum"");
						ActivateField(""Generation Level"");
						ClearToQuery();
						strSearchSpec = ""[Assoc Start Id] = '"" + bcOrdLineNum.GetFieldValue(""SIM Id"") + ""'"";
						strSearchSpec = strSearchSpec + "" AND ([Type Identifier] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + ""'"";
						strSearchSpec = strSearchSpec + "" OR [Type Identifier] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"") + ""')"";
						SetSearchExpr(strSearchSpec);
						ExecuteQuery();
						var blnIsRecord = FirstRecord();
						msIMSINumber = """";
						mstrMSISDN	 = """";
						msGenLvl	 = """";
						while(blnIsRecord) {
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
								msStrSIMNum	= GetFieldValue(""Number String With Checksum"");
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"")) {
								if(msIMSINumber=="""") {
									msIMSINumber = 	GetFieldValue(""Number String With Checksum"");
									msGenLvl	 = 	GetFieldValue(""Generation Level"");
								}
								else {
									msIMSINumber = 	msIMSINumber + "" / ""+GetFieldValue(""Number String With Checksum"");
									msGenLvl	 = 	msGenLvl + ""/""+GetFieldValue(""Generation Level"");							
								}
							}
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""))
								mstrMSISDN = GetFieldValue(""Number String With Checksum"");
	
							blnIsRecord = NextRecord();
						}
						}
	//				if(Clib.strcmpi(msSIMNumber, msPrevSIMNumber) != 1) {
				  	SetArray(marrStartNumbers,miCount,1,""?"",""?"",msStrSIMNum); 
				    SetArray(marrStartNumbers,miCount,2,""?"",""?"",msIMSINumber);
				    SetArray(marrStartNumbers,miCount,3,""?"",""?"",mstrMSISDN);
				    SetArray(marrStartNumbers,miCount,4,""?"",""?"",msGenLvl);
				    SetArray(marrStartNumbers,miCount,5,""?"",""?"",bcOrdLine.GetFieldValue(""Id""));
				    SetArray(marrStartNumbers,miCount,6,""?"",""?"",bcOrdLine.GetFieldValue(""SIM Card Config Name""));
					SetArray(marrStartNumbers,miCount++,7,""?"",""?"",msOrderLineId);
				    miQty = 1;
				}
				SetArray(marrStartNumbers,miCount-1,0,""?"",""?"",miQty);
    //			the validation is on the assumption that first 7 digits of SIM Number will be constant
	//			Code commented for future use.	
	/*			msNextSIMNumber		= msSIMNumber.substring(0,8) + (ToNumber(msSIMNumber.substring(8))  + 1);
				msNextIMSINumber 	= ToNumber(msIMSINumber)+1;*/
//above 1.1
//below 1.1
/*			
				msNextSIMNumber = ToInteger(bcOrdLineNum.GetFieldValue(""Generated Number""))+1;
				mintRecCnt++;
				mbIsRecord = bcOrdLineNum.NextRecord();
			    intLineItemCnt = 0;
					}
			intLineItemCnt++;
			mbIsOrderLine = bcOrdLine.NextRecord();
		}
		for(miCount = 0; miCount < getArrayLength(marrStartNumbers); miCount++) 
		{
			//msFileName = ""HCPT_"" + bcOrder.GetFieldValue(""HLR ID"") + Clib.rsprintf(""%02s"",ToString(++miFileSeq)) + "".inp"";
			msFileName = ""HCPT_"" + marrStartNumbers[miCount][7] + ""_"" + Clib.rsprintf(""%02s"",ToString(++miFileSeq)) + "".inp"";
			var mstrFileData = """";
			outFile = sFilePath + msFileName;
			mfpOutputFile = Clib.fopen(outFile,""a"");
    		Clib.fputs(""*********************************************\n"",mfpOutputFile);
			mstrFileData = ""*********************************************"" + ""\n"";
			Clib.fputs(""             HEADER DESCRIPTION				 \n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""             HEADER DESCRIPTION				 "" + ""\n"";
			Clib.fputs(""*********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""*********************************************""+ ""\n"";
			Clib.fputs(""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""\n"";
			Clib.fputs(""Customer: HCPT\n""  , mfpOutputFile);
			mstrFileData = mstrFileData + ""Customer: HCPT""+ ""\n"";
      		Clib.fputs(""Quantity: "" + marrStartNumbers[miCount][0] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Quantity: "" + marrStartNumbers[miCount][0] + ""\n"";
//			Clib.fputs(""Quantity: "" + bcOrdLine.GetFieldValue(""Quantity Ordered"") + ""\n"", mfpOutputFile);
			//Clib.fputs(""Type: "" + bcOrdLine.GetFieldValue(""SIM Card Config Name"") + ""\n"", mfpOutputFile);
			//mstrFileData = mstrFileData + ""Type: "" + bcOrdLine.GetFieldValue(""SIM Card Config Name"")+ ""\n"";
	        Clib.fputs(""Type: "" + marrStartNumbers[miCount][6] + ""\n"", mfpOutputFile);//23-05-06 KT
			mstrFileData = mstrFileData + ""Type: "" + marrStartNumbers[miCount][6]+ ""\n"";
			//Clib.fputs(""Memory: "" + bcOrdLine.GetFieldValue(""Card Memory"") + ""\n"", mfpOutputFile);
			Clib.fputs(""Profile: "" + bcOrdLine.GetFieldValue(""Profile"")+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Profile: "" + bcOrdLine.GetFieldValue(""Profile"")+ ""\n"";
    		Clib.fputs(""Graph_ref: ""+ bcOrdLine.GetFieldValue(""Graphical Profile"") + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Graph_ref: ""+ bcOrdLine.GetFieldValue(""Graphical Profile"")+ ""\n"";
   	 		Clib.fputs(""Artwork: ""+ bcOrdLine.GetFieldValue(""ImageFileName"") + ""\n"", mfpOutputFile);  
			mstrFileData = mstrFileData + ""Artwork: ""+ bcOrdLine.GetFieldValue(""ImageFileName"")+ ""\n"";
	  	    //Clib.fputs(""Order Line Id: "" + bcOrdLine.GetFieldValue(""Order Line Id"")+ ""\n"", mfpOutputFile);  // KT 24-04-2006
			//mstrFileData = mstrFileData + ""Order Line Id: "" + bcOrdLine.GetFieldValue(""Order Line Id"")+ ""\n"";
	       	//Clib.fputs(""Batch: "" + bcOrder.GetFieldValue(""Batch Number"")+ ""\n"", mfpOutputFile);
	       	Clib.fputs(""Batch: "" + marrStartNumbers[miCount][7] + ""\n"", mfpOutputFile);
			Clib.fputs(""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""\n"";
			Clib.fputs(""Transport_Key: "" + bcOrder.GetFieldValue(""Transport Key"")+ ""\n"", mfpOutputFile); 
			mstrFileData = mstrFileData + ""Transport_Key: "" + bcOrder.GetFieldValue(""Transport Key"")+ ""\n"";
	  //	Clib.fputs(""Transport_3GOp_In: "" + bcOrder.GetFieldValue(""Transport 3GOP key"")+ ""\n"", mfpOutputFile);
			Clib.fputs(""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""\n"";
			Clib.fputs(""Address1: ""+ bcOrder.GetFieldValue(""Bill To Address"") +""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Address1: ""+ bcOrder.GetFieldValue(""Bill To Address"")+ ""\n"";
			Clib.fputs(""Address2: ""+ bcOrder.GetFieldValue(""Bill To Address Line 2"") + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Address2: ""+ bcOrder.GetFieldValue(""Bill To Address Line 2"")+ ""\n"";
			Clib.fputs(""Address3: ""+ bcOrder.GetFieldValue(""Bill To Address Line 3"") +""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Address3: ""+ bcOrder.GetFieldValue(""Bill To Address Line 3"")+ ""\n"";
			Clib.fputs(""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""\n"";
		//	Clib.fputs(""Graph_ref: ""+ bcOrdLine.GetFieldValue(""Graphical Profile"") + ""\n"", mfpOutputFile);
		//	Clib.fputs(""\n"", mfpOutputFile);
			Clib.fputs(""PO_ref_number: "" + bcOrder.GetFieldValue(""PO Requisition Ref Number"")+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""PO_ref_number: "" + bcOrder.GetFieldValue(""PO Requisition Ref Number"")+ ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+ ""\n"";			    		   	
			Clib.fputs(""            INPUT VARIABLES                 \n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""            INPUT VARIABLES                   ""+ ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************"" + ""\n"";
			Clib.fputs(""Var_In_List: ""+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Var_In_List: ""+ ""\n"";
//			Clib.fputs(""IMSI(""+marrStartNumbers[miCount][4]+""):""+ marrStartNumbers[miCount][2] + ""\n"", mfpOutputFile);
			Clib.fputs(""IMSI: ""+ marrStartNumbers[miCount][2] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""IMSI:""+ marrStartNumbers[miCount][2] + ""\n"";
			Clib.fputs(""Ser_Nb: ""+ marrStartNumbers[miCount][1] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""IMSI:""+ ""Ser_Nb: ""+ marrStartNumbers[miCount][1] + ""\n"";
//Added this line to include MSISDN number in the file.		
			//Clib.fputs(""MSISDN: ""+ marrStartNumbers[miCount][3] + ""\n"", mfpOutputFile); KT 24-04-2006
			mstrFileData = mstrFileData + ""MSISDN: ""+ marrStartNumbers[miCount][3] + ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+""\n"";
			Clib.fputs(""            OUTPUT VARIABLES                \n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""            OUTPUT VARIABLES                  ""+ ""\n"";		
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+ ""\n"";
			Clib.fputs(""Var_Out: "" + msPprItem + ""\n"", mfpOutputFile); 				// Changed 07:06:2005
			mstrFileData = mstrFileData + ""Var_Out: "" + msPprItem + ""\n"";
			Clib.fclose(mfpOutputFile);
		    bcOrdFile.NewRecord(1);
			bcOrdFile.SetFieldValue(""SIM Order Id"",bcOrder.GetFieldValue(""Id"")); 
			bcOrdFile.SetFieldValue(""File Sequence"", miFileSeq);
			bcOrdFile.SetFieldValue(""File Name"", msFileName);
			bcOrdFile.SetFieldValue(""File Type"", ""O"");
			bcOrdFile.SetFieldValue(""File Data"", mstrFileData);
			bcOrdFile.SetFieldValue(""SIM Order Line Id"", marrStartNumbers[miCount][5]);	
			bcOrdFile.SetFieldValue(""SIM Start Number"", marrStartNumbers[miCount][1]);			
			bcOrdFile.SetFieldValue(""Quantity Ordered"", marrStartNumbers[miCount][0]);						
			bcOrdFile.WriteRecord();
//			UpdateFile(""I"","""",msFileName,sOrderId);
		}
	} 
 catch(e)  
	{
		msErrVal = e.errText;
		if (mfpOutputFile != null)
			Clib.fclose(mfpOutputFile);
		if(strErrVal == """")
			msErrVal = e.errText;
          throw(e);
}
	finally 
	{
		bcNumberEnquiry     = null;
		bcOrdPprItem        = null;
		bcOrder 			= null;
		bcOrdLine 			= null;
		bcOrdLineNum 		= null;
		bcOrdFile 			= null;	
		boNumberEnquiry     = null;
		boOrder 			= null;
		cheqSeqArgs         = null;
		marrStartNumbers	= null;
	}
	return(msErrVal);*/
//above 1.1
}
function GenerateFileNew(sOrderId,sFilePath,&Outputs)
{
	var boOrder = TheApplication().GetBusObject(""RMS SIM Order"");
	//var bcOrdPprItem	= boOrder.GetBusComp(""RMS SIM Paper Item""); KT 04-07-2006				// Changed 07:06:2005  
	var strErrVal;
	var bcOrder = boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrdLine = boOrder.GetBusComp(""RMS SIM Order Line"");
	var bcOrdLineNum = boOrder.GetBusComp(""RMS SIM Order Line Num Info for Update"");
	var bcOrdFile = boOrder.GetBusComp(""RMS SIM Order File Info Query"");
	var boNumberEnquiry = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumberEnquiry	= boNumberEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	var marrStartNumbers = new Array();
	var marrStartNumbers2 = new Array();
	var marrStartNumbers3 = new Array();;
	var mbIsRecord = false;
	var mbIsFileRec = false;
	var mbIsPprItem	= false;
	var miFirstIndex;
	var msNextSIMNumber	= """";
	var msNextIMSINumber = """";
	var msSIMNumber = 0;
	var miFileSeq = 0;
	var miCount = 0;
	var miQty = 0;
	var msConcatNumber = """";
	var msFileName = """";
	var msIMSINumber = """";
	var msStrSIMNum	= """";
	var msGenLvl = """";
	var msErrVal = """";
	var msPprItem = """";
	var strSearchSpec 		= """";
	var msOrderLineId = """";
	var mfpOutputFile;
	var marrSeqChek = new Array();
	var mintRecCnt = 0;
	var mstrMSISDN = """";
	var mblnSplit = false;
	var mbIsOrderLine=false;
	var cheqSeqArgs;//KT 21-042006 
	var outFile ="""";
    var intLineItemCnt = 0;	
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");  // KT 05-07-2006 
    var bcSysPref = boSysPref.GetBusComp(""System Preferences""); // KT 05-07-2006
	var SplitQty ;// KT 18-06-2007
	var Regioncode ="""";
	var RegionName = """";
	var msBatchNum; //MS:01-NOV-09
	try
    {
	with(bcSysPref)
	{
    ActivateField(""Value"");
	ClearToQuery();
	SetSearchSpec(""Name"",""RMS_SIM_ORDER_VAR_OUT"");
	//below 1.1
    //ExecuteQuery();
     ExecuteQuery(ForwardOnly);
     //above 1.1
	if(FirstRecord()) 
	{
    msPprItem = GetFieldValue(""Value"");

    }
	//20070618:KT to split SIM Order file based on system preference value.
	ClearToQuery();
	SetSearchSpec(""Name"",""RMS_SIM_ORDER_QTY_TO_SPLIT"");
	ExecuteQuery(ForwardOnly);
    if(FirstRecord()) 
	{
    var SplitQty = GetFieldValue(""Value"");

    }
	}
    with(bcOrder) 
		{
			SetViewMode(3);
			ActivateField(""Quantity Ordered"");
			ActivateField(""SIM Card Config Type"");
			ActivateField(""Transport Key"");
			ActivateField(""Transport 3GOP key"");
			ActivateField(""Order Number"");
			ActivateField(""ImageFileName""); //Ch
			ActivateField(""PO Requisition Ref Number"");
			ActivateField(""Bill To Address"");
			ActivateField(""Bill To Address Line 2"");
			ActivateField(""Bill To Address Line 3"");
			ActivateField(""Profile"");
			ActivateField(""HLR ID"");
			ClearToQuery();
			SetSearchSpec(""Id"", sOrderId);
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) 
			{
				msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",sOrderId);
				//TheApplication().RaiseErrorText(msErrVal);
				return(msErrVal);
			}
		}
		with(bcOrdLine) 
		{
			SetViewMode(3);
			ActivateField(""Profile"");
			ActivateField(""Transport Key"");
			ActivateField(""Transport 3GOP Key"");
			ActivateField(""Quantity Ordered"");
			ActivateField(""SIM Card Config Type"");
			ActivateField(""SIM Card Config Name"");			
			ActivateField(""ImageFileName"");
			ActivateField(""Id"");
			ActivateField(""Graphical Profile"");
			ActivateField(""Card Memory"");
			ActivateField(""Starting Number"");
			ActivateField(""Artwork Name"");  // KT 27-06-2006
			ActivateField(""Order Line Id""); // KT 24-04-2006
			ActivateField(""Region Code"");
			ClearToQuery()
			ExecuteQuery();
			mbIsOrderLine = FirstRecord();
			if(!mbIsOrderLine) 
			{
				msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",sOrderId);
				//	TheApplication().RaiseErrorText(msErrVal);
				return(msErrVal);
			}else {
			msOrderLineId = GetFieldValue(""Order Line Id"");
			}
         	}// KT deleted
			with(bcOrdFile) 
		{
			SetViewMode(3);
			ActivateField(""File Sequence"");
			ActivateField(""HLR_Batch"");
			ClearToQuery();
			SetSearchSpec(""SIM Order Id"",sOrderId);
			SetSearchSpec(""File Type"",""O"");
			SetSortSpec(""File Sequence(DESCENDING)"");
			ExecuteQuery();
			mbIsFileRec = FirstRecord();
			if(mbIsFileRec) 
				miFileSeq = GetFieldValue(""File Sequence"");
			else
				miFileSeq = 0;
		}
		while(mbIsOrderLine) {
				msOrderLineId = bcOrdLine.GetFieldValue(""Order Line Id"");
				with(bcOrdLineNum) 
				{
					SetViewMode(3);
					ActivateField(""Numbers"");
					ActivateField(""Generated Number"");
					ActivateField(""SIM Id"");
					ActivateField(""Concatenated Number Types"");
					ActivateField(""Order Line Id"");
					ActivateField(""File Batch Number"");
					ClearToQuery();
					SetSearchSpec(""Order Id"",sOrderId)
					SetSearchSpec(""Order Line Id"",bcOrdLine.GetFieldValue(""Id""));
					SetSortSpec(""Generated Number(ASCENDING)"");
					//ExecuteQuery();	
					ExecuteQuery(ForwardOnly);
			    	mbIsRecord = FirstRecord();
					}
			while(mbIsRecord) 
			{	
			miQty++;

				msSIMNumber = bcOrdLineNum.GetFieldValue(""Generated Number"");
				cheqSeqArgs = TheApplication().NewPropertySet();// KT 21-04-2006
				cheqSeqArgs.SetProperty(""mblnSplit"",mblnSplit);// KT 21-04-2006
				cheqSeqArgs.SetProperty(""mintRecCnt"",mintRecCnt);//KT 21-04-2006
				CheckSequence(bcNumberEnquiry,bcOrdLineNum,marrSeqChek,cheqSeqArgs);//KT 21-04-2006
				mblnSplit = (cheqSeqArgs.GetProperty(""mblnSplit"")==""true"")?true:false;//KT 21-042006
	            mintRecCnt = ToInteger(cheqSeqArgs.GetProperty(""mintRecCnt""));//KT 21-042006
				if((mblnSplit) || (miQty > SplitQty) ||   (intLineItemCnt != 0))
				{
					mblnSplit = false;
					mstrMSISDN = """";
					strSearchSpec = """";
					msBatchNum	= BatchNumber();
					with(bcNumberEnquiry) {
						ActivateField(""Assoc Start Id"");
						ActivateField(""Type Identifier"");
						ActivateField(""Number String With Checksum"");
						ActivateField(""Generation Level"");
						//Giri 20092411 to write Starting IMSI with proper format
						ActivateField(""Type Id"");
						//
						ClearToQuery();
						strSearchSpec = ""[Assoc Start Id] = '"" + bcOrdLineNum.GetFieldValue(""SIM Id"") + ""'"";
						strSearchSpec = strSearchSpec + "" AND ([Type Identifier] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + ""'"";
						strSearchSpec = strSearchSpec + "" OR [Type Identifier] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"") + ""')"";
						SetSearchExpr(strSearchSpec);
						ExecuteQuery();
						var blnIsRecord = FirstRecord();
						msIMSINumber = """";
						mstrMSISDN	 = """";
						msGenLvl	 = """";
						var IMSITypeId = """";
						var IMSILTypeId = """";
						var IMSIRTypeId = """";
						var IMSIRFoundFirst = false;
						IMSILTypeId = GetSysPref(""RMS_IMSIL_SRCH_ID"");
						IMSIRTypeId = GetSysPref(""RMS_IMSIR_SRCH_ID"");
						while(blnIsRecord) {
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
								msStrSIMNum	= GetFieldValue(""Number String With Checksum"");
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"")) {
								if(msIMSINumber=="""") {
								    
								    IMSITypeId   = GetFieldValue(""Type Id"");
								    if(IMSIRTypeId == IMSITypeId)
								    {
								    IMSIRFoundFirst = true;
								    }
								    msIMSINumber = 	GetFieldValue(""Number String With Checksum"");
									msGenLvl	 = 	GetFieldValue(""Generation Level"");
								}
								else {
								    
								    if (!IMSIRFoundFirst)
								    {
									msIMSINumber = 	msIMSINumber + "" / ""+GetFieldValue(""Number String With Checksum"");
									msGenLvl	 = 	msGenLvl + ""/""+GetFieldValue(""Generation Level"");							
								   }
								   else
								   {
								   msIMSINumber = GetFieldValue(""Number String With Checksum"")+ "" / ""+	msIMSINumber;
								   msGenLvl	 = GetFieldValue(""Generation Level"")+ ""/""+	msGenLvl ;							
								   }
								   }
							}
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""))
								mstrMSISDN = GetFieldValue(""Number String With Checksum"");
	
							blnIsRecord = NextRecord();
						}
						}
						var arr = 0;
						marrStartNumbers[miCount] = marrStartNumbers2;
					marrStartNumbers[miCount][++arr] = marrStartNumbers3;
				  	SetArray(marrStartNumbers,miCount,arr,""?"",""?"",msStrSIMNum);	//arr=1
				    SetArray(marrStartNumbers,miCount,++arr,""?"",""?"",msIMSINumber); //arr=2
				    SetArray(marrStartNumbers,miCount,++arr,""?"",""?"",mstrMSISDN); //arr=3
				    SetArray(marrStartNumbers,miCount,++arr,""?"",""?"",msGenLvl); //arr=4
				   SetArray(marrStartNumbers,miCount,++arr,""?"",""?"",bcOrdLine.GetFieldValue(""Id"")); //arr=5
				   SetArray(marrStartNumbers,miCount,++arr,""?"",""?"",bcOrdLine.GetFieldValue(""SIM Card Config Name"")); //arr=6
					SetArray(marrStartNumbers,miCount,++arr,""?"",""?"",bcOrdLine.GetFieldValue(""Card Memory"")); //arr=7
				  	SetArray(marrStartNumbers,miCount,++arr,""?"",""?"",bcOrdLine.GetFieldValue(""Artwork Name"")); //arr=8
				  	SetArray(marrStartNumbers,miCount,++arr,""?"",""?"",bcOrdLine.GetFieldValue(""Graphical Profile"")); //arr=9
					//below 1.3
				    Regioncode             = bcOrdLine.GetFieldValue(""Region Code"");
					if (Regioncode != """")
					{
					var sRegionCode		   = TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""REGION_CODE"");
                    var iFromRegionCode    = ToNumber(sRegionCode.substring(0,1));
					var iToRegionCode	   = ToNumber(sRegionCode.substring(2));
					Regioncode             = ToNumber(Regioncode.substring(iFromRegionCode,iToRegionCode));
					RegionName             = TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",Regioncode);
					}
				  	SetArray(marrStartNumbers,miCount,++arr,""?"",""?"",msOrderLineId); //arr=10
				  	SetArray(marrStartNumbers,miCount,++arr,""?"",""?"",RegionName); //arr=11
				  	SetArray(marrStartNumbers,miCount++,++arr,""?"",""?"",msBatchNum); //arr=12 and miCount++ removed as done 2 lines above
					//Above 1.3
				    miQty = 1;
				}
			  	SetArray(marrStartNumbers,miCount-1,0,""?"",""?"",miQty);
				bcOrdLineNum.SetFieldValue(""File Batch Number"",msBatchNum);
    			msNextSIMNumber = ToInteger(bcOrdLineNum.GetFieldValue(""Generated Number""))+1;
				mintRecCnt++;
				mbIsRecord = bcOrdLineNum.NextRecord();
			    intLineItemCnt = 0;
					}
								
			intLineItemCnt++;
			mbIsOrderLine = bcOrdLine.NextRecord();
			if(mbIsOrderLine)
			{
				marrStartNumbers3 = new Array();
				marrStartNumbers2 = new Array();
				marrStartNumbers[miCount] = marrStartNumbers2;
				marrStartNumbers[miCount][0] = marrStartNumbers3;
			}
		}
		for(miCount = 0; miCount < getArrayLength(marrStartNumbers); miCount++) 
		{
			
		    /*if (marrStartNumbers[miCount][11]!="""")
			{		
			msFileName = ""simorder_""+bcOrder.GetFieldValue(""PO Requisition Ref Number"")+""_""+marrStartNumbers[miCount][6]+""-""+marrStartNumbers[miCount][11]+""_""+Clib.rsprintf(""%02s"",ToString(++miFileSeq)) + "".inp"";
			}
			else
			{
			msFileName = ""simorder_""+bcOrder.GetFieldValue(""PO Requisition Ref Number"")+""_""+marrStartNumbers[miCount][6]+""_""+Clib.rsprintf(""%02s"",ToString(++miFileSeq)) + "".inp"";
			}
			*/
			msFileName = GetSysPref(""RMS_SIMORDER_FILEOUTPUT_PREFIX"") + marrStartNumbers[miCount][12];
			
			var mstrFileData = """";
			outFile = sFilePath + msFileName;
			mstrFileData = ""*********************************************"" + ""\n"";
			mstrFileData = mstrFileData + ""*            HEADER DESCRIPTION        *"" + ""\n"";
			mstrFileData = mstrFileData + ""*********************************************""+ ""\n"";
			mstrFileData = mstrFileData + ""Customer: HCPT""+ ""\n"";
			mstrFileData = mstrFileData + ""PO_ref_number: "" + bcOrder.GetFieldValue(""PO Requisition Ref Number"")+ ""\n"";
			mstrFileData = mstrFileData + ""Quantity: "" + marrStartNumbers[miCount][0] + ""\n"";
			if (marrStartNumbers[miCount][11]!="""")
			{
			mstrFileData = mstrFileData + ""Type: "" + marrStartNumbers[miCount][6]+""-""+marrStartNumbers[miCount][11]+ ""\n"";
			}	
			else
			{
			mstrFileData = mstrFileData + ""Type: "" + marrStartNumbers[miCount][6]+ ""\n"";
			}
			mstrFileData = mstrFileData + ""Memory: "" + marrStartNumbers[miCount][7] + ""\n"";
			mstrFileData = mstrFileData + ""Profile: "" + marrStartNumbers[miCount][11]+ ""\n"";
			mstrFileData = mstrFileData + ""Graph_ref: ""+ marrStartNumbers[miCount][9]+ ""\n"";
			mstrFileData = mstrFileData + ""Artwork: ""+ marrStartNumbers[miCount][8]+ ""\n"";
			mstrFileData = mstrFileData + ""*""+ ""\n"";
			mstrFileData = mstrFileData + ""Keyname: "" + bcOrder.GetFieldValue(""Transport Key"")+ ""\n"";
			mstrFileData = mstrFileData + ""*""+ ""\n"";
			mstrFileData = mstrFileData + ""Address1: ""+ bcOrder.GetFieldValue(""Bill To Address"")+ ""\n"";
			mstrFileData = mstrFileData + ""Address2: ""+ bcOrder.GetFieldValue(""Bill To Address Line 2"")+ ""\n"";
			mstrFileData = mstrFileData + ""*""+ ""\n"";
			mstrFileData = mstrFileData + ""********************************************""+ ""\n"";			    		   	
			mstrFileData = mstrFileData + ""*            INPUT VARIABLES           *""+ ""\n"";
			mstrFileData = mstrFileData + ""********************************************"" + ""\n"";
			mstrFileData = mstrFileData + ""Var_In_List: ""+ ""\n"";
			mstrFileData = mstrFileData + ""IMSI:""+ marrStartNumbers[miCount][2] + ""\n"";
			mstrFileData = mstrFileData + ""ICCID: ""+ marrStartNumbers[miCount][1] + ""\n"";
			mstrFileData = mstrFileData + ""********************************************""+""\n"";
			mstrFileData = mstrFileData + ""*            OUTPUT VARIABLES          *""+ ""\n"";		
			mstrFileData = mstrFileData + ""********************************************""+ ""\n"";
			mstrFileData = mstrFileData + ""Var_Out: "" + msPprItem + ""\n"";
			bcOrdFile.NewRecord(1);
			bcOrdFile.SetFieldValue(""SIM Order Id"",bcOrder.GetFieldValue(""Id"")); 
			bcOrdFile.SetFieldValue(""File Sequence"", miFileSeq);
			bcOrdFile.SetFieldValue(""File Name"", msFileName);
			bcOrdFile.SetFieldValue(""File Type"", ""O"");
			bcOrdFile.SetFieldValue(""File Data"", mstrFileData);
			bcOrdFile.SetFieldValue(""BatchNumber"",marrStartNumbers[miCount][12]);
			bcOrdFile.SetFieldValue(""Starting SIM"",marrStartNumbers[miCount][1]);
			bcOrdFile.SetFieldValue(""Starting IMSI"",marrStartNumbers[miCount][2]);
			bcOrdFile.SetFieldValue(""SIM Order Line Id"", marrStartNumbers[miCount][5]);	
			bcOrdFile.SetFieldValue(""SIM Start Number"", marrStartNumbers[miCount][1]);			
			bcOrdFile.SetFieldValue(""Quantity Ordered"", marrStartNumbers[miCount][0]);						
			bcOrdFile.WriteRecord();
//			UpdateFile(""I"","""",msFileName,sOrderId);
		}
	} 
 catch(e)  
	{
		msErrVal = e.errText;
		if (mfpOutputFile != null)
			Clib.fclose(mfpOutputFile);
		if(strErrVal == """")
			msErrVal = e.errText;
          throw(e);
}
	finally 
	{
		bcNumberEnquiry     = null;
		boNumberEnquiry     = null;
		cheqSeqArgs         = null;
		bcSysPref           = null;
 		boSysPref           = null;
		bcOrder 			= null;
		bcOrdLine 			= null;
		bcOrdLineNum 		= null;
		bcOrdFile 			= null;	
		boOrder 			= null;
		marrStartNumbers	= null;
   }
	return(msErrVal);
}
"/**************************************************************************************
* Name          : SIM File Service GetDirrectoryList  Function				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Siebel ES SCR1, Objects Destroyed
**************************************************************************************/


function GetDirrectoryList(fileArray,Inputs,Outputs)
{
//the command to print the file names will be, name sorted
//for dos 
//dir [directory]\[pattern] /ON /B > [directory]\filelist.txt
//for unix??
//ls [directory]/[pattern] | sort > [directory]/filelist.txt
//populate the filenames in a propertyset, simple to call 
	var msPath = Inputs.GetProperty(""DirectoryPath"");
	var msPattern=Inputs.GetProperty(""FilePattern"");
	var msFNameForList = msPath + "filelist.lst"";
	var miCutLen = 1 + msPath.length;
//must get syspref EECC_SIEBEL_SERVER_OS
	var mpsSupply;
	var mpsReturn;
	var msOS;//name of the OS, can be WIN, win, Win (Windows) or Unix, UNIX, unix (all flavours of UNIX)
	var msCMD;//command string to execute list directory function on the OS
	//var mbsSYSPREF = TheApplication().GetService(""EECC BS Startup"");
	mpsSupply = TheApplication().NewPropertySet();
	mpsReturn = TheApplication().NewPropertySet();
	//mpsSupply.SetProperty(""Parameter Name"",""EECC_SIEBEL_SERVER_OS"");
	//mbsSYSPREF.InvokeMethod(""Get SysPref"",mpsSupply,mpsReturn);
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref= boSysPref.GetBusComp(""System Preferences"");
	with(bcSysPref) {
		ActivateField(""Value"");
		ClearToQuery();
		//KT New Code 
		if(Inputs.PropertyExists(""HCPTSIMOrderOS""))
		{
			var testval = 	Inputs.GetProperty(""HCPTSIMOrderOS"");
			SetSearchSpec(""Name"",Inputs.GetProperty(""HCPTSIMOrderOS""));
	    }
		else
		{
			//End of new code
			SetSearchSpec(""Name"",""RMS_OS"");
		}
		ExecuteQuery();
		
		if(FirstRecord())
			msOS = GetFieldValue(""Value"");
	}
	
	if(""unix"" == msOS.toLowerCase()){//unix
		//msCMD = ""ls "" + msPath + msPattern + "" | cut -c "" + miCutLen + ""- | sort > "" + msFNameForList;
		if(TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""NEWUNIXCMD"") != ""Y"")
			msCMD = ""ls "" + msPath + msPattern + "" | sort > "" + msFNameForList;
		else
			msCMD = ""ls -1 "" + msPath + "" > "" + msFNameForList;
	} else {
		msCMD = ""dir "" + msPath + msPattern + "" /ON /B > "" + msFNameForList;
	}
//now execute the command on OS, can be risky		
	var test = Clib.system(msCMD);
//	TheApplication().RaiseErrorText(test + "">>"" + msCMD);
//	WriteToFile(""written the directory list file"",""_test"");
	/*mpsSupply = TheApplication().NewPropertySet();
	mpsReturn = TheApplication().NewPropertySet();
	mpsSupply.SetProperty(""ContainerTag"",""FileList"");
	mpsSupply.SetProperty(""RecordTag"",""File"");
	mpsSupply.SetProperty(""FileName"",msFNameForList);
	TEXT2XML(mpsSupply,mpsReturn);
	LogPropSet(mpsReturn,""_GotFileList"");
	Outputs.AddChild(mpsReturn.GetChild(0).GetChild(0));
	LogPropSet(Outputs,""_GotFileList_2"");
	Outputs.SetProperty(""CountOfFiles"",mpsReturn.GetChild(0).GetChild(0).GetChildCount());*/
	var msInputString = """";
	var msFile = Inputs.GetProperty(""testfile"");
	//msFile = msPath+msFile;
	//var testfile = """";
	
	//Clib.fopen(testfile,""r"");
	//var mfpInputFile 	= Clib.fopen(msFile,""r"");
	 var mfpInputFile 	= Clib.fopen(msFNameForList,""r"");
	//Clib.fgets(mfpInputFile);  
     //msInputString = Clib.fgets(mfpInputFile);
	var fileCount=0;	
	 while (msInputString != null) 
	    	{
			msInputString = Clib.fgets(mfpInputFile);
			if(msInputString == null) continue;
	
	//		remove the end of line character from the string
	//		for unix formatted file it is \n and for windows formatted file it is \r\n

		if(msInputString.indexOf(""\r"") != -1) {
			msInputString = msInputString.substring(0,msInputString.indexOf(""\r""));
			fileArray[fileCount] = msInputString;
			fileCount++;
			} else if(msInputString.indexOf(""\n"") != -1) 
			{
			msInputString = msInputString.substring(0,msInputString.indexOf(""\n""));
			fileArray[fileCount] = msInputString;
			fileCount++;
		    }
			}
			//KT 20070815
		    Clib.fclose(mfpInputFile);
			//End of 20070815
//below 1.1		
		mpsReturn = null;
		mpsSupply = null;
		bcSysPref  = null;
		boSysPref  = null;
//above 1.1
		return CancelOperation;
}
function GetSysPref(strPref)
{
	var bsSysPref	= TheApplication().GetService(""TECHM BS IF COMMON"");
	var psInp		= TheApplication().NewPropertySet();
	var psOut		= TheApplication().NewPropertySet();
	
	psInp.SetProperty(strPref,"""");
	
	bsSysPref.InvokeMethod(""Get SysPref"",psInp,psOut);
	
	return (psOut.GetProperty(strPref));

}
"/**************************************************************************************
* Name          : SIM Order Business Service ReadOrderFile Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Commented entire function  becuase we are not  using  this function
**************************************************************************************/

function ReadOrderFile(&marrOrdCnct,&marrInputValues,&marrSIMIMSI,&mpsPprId,&marrError,msFileName,&marrNumType)
{
//below 1.1
/*
	var msInputString 	= """";
	var msTempString 	= """";
	var msTemp			= """";
	var msFile 			= msFileName;
	var mbError			= false;
	var mbValidateOrd	= false;
	var miCnt 			= 0;
	var miNumType		= 0;
	var marrInpStr		= new Array();
	//var marrOrdCnct 	= new Array();
	var marrTemp		= new Array();
	try
	{
    	var mfpInputFile 	= Clib.fopen(msFile,""r"");
	
	   while (msInputString != null) 
	    {
			msInputString = Clib.fgets(mfpInputFile);
			if(msInputString == null) continue;
	
	//		remove the end of line character from the string
	//		for unix formatted file it is \n and for windows formatted file it is \r\n

		if(msInputString.indexOf(""\r"") != -1) {
			msInputString = msInputString.substring(0,msInputString.indexOf(""\r""));
		} else if(msInputString.indexOf(""\n"") != -1) {
			
			msInputString = msInputString.substring(0,msInputString.indexOf(""\n""));
		}
		if(msInputString == """") continue;
		if(Clib.isdigit(msInputString.charAt(0))) 
		{		
			marrSIMIMSI[miCnt] = msInputString.split("" "");
			msTemp = marrSIMIMSI[miCnt][getArrayLength(marrSIMIMSI[miCnt])-1];
			if(!Clib.isalnum(msTemp.substring(msTemp.length-1))) 
			{
				//marrSIMIMSI[miCnt][getArrayLength(marrSIMIMSI[miCnt])-1] = msTemp.substring(0,msTemp.length-1);
				SetArray(marrSIMIMSI,miCnt,getArrayLength(marrSIMIMSI[miCnt])-1,""?"",""?"",msTemp.substring(0,msTemp.length-1));
				}
			miCnt++;
		}
		else if(Clib.isalpha(msInputString.charAt(0))) 
		{
			if(msInputString.substring(0,msInputString.indexOf("":"")) == ""Var_Out"") 
			{
//              msTempString = msInputString.substring(msInputString.indexOf("":"") + 2,msInputString.indexOf(""\n""));
				msTempString = msInputString.substring(msInputString.indexOf("":"") + 2);
				//marrNumType = msTempString.split(""/"");
				marrInpStr = msTempString.split(""/"");
				for(miNumType=0;miNumType < getArrayLength(marrInpStr);miNumType++) {
					marrNumType[miNumType] = marrInpStr[miNumType];
				}
			}
			else
			{
				marrInputValues[msInputString.substring(0,msInputString.indexOf("":""))] = msInputString.substring(msInputString.indexOf("":"") + 2);
		//		marrInputValues[msInputString.substring(0,msInputString.indexOf("":""))] = 	msInputString.substring(msInputString.indexOf("":"") + 2,msInputString.indexOf(""\n""));	
			}
		}
	}
	
	} catch(e){
		var test4 = e.errText;
		marrTemp 	= null;
		mbError 	= true;
		
		throw(e);
	} 
	finally 
	{
		if (mfpInputFile != null)
			Clib.fclose(mfpInputFile);	
	
	}
	if(mbError)
		return(!mbError);
	else {
		mbValidateOrd = ValidateOrder(marrInputValues,marrSIMIMSI,marrNumType,marrOrdCnct,mpsPprId,marrError);
		return(mbValidateOrd);
	}
*/
//above 1.1

}
"/**************************************************************************************
* Name          : SIM Order Business Service ReadOrderFile Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/

function ReadOrderFileNew(&marrOrdCnct,&marrInputValues,&marrSIMIMSI,&mpsPprId,&marrError,msFileName,&marrNumType,&mpFilePos)
{
	var msInputString 	= """";
	var msTempString 	= """";
	var msTemp			= """";
	var msFile 			= msFileName;
	var mbError			= false;
	var mbValidateOrd	= false;
	var miCnt 			= 0;
	var miNumType		= 0;
	var marrInpStr		= new Array();
	var marrSIMIMSI2;
	var marrSIMIMSI3 = new Array;
	//var marrOrdCnct 	= new Array();
	var msInputString1  = """";
	var msInputString2  = """";   
	var marrTemp		= new Array();
	//1.1
	var msSIMTemp		= """";
	var msBatchNum		= """";
	var msPORefNum		= """";
	//1.1

	try
	{
    	 var mfpInputFile 	= Clib.fopen(msFile,""r"");
    	 var testpos2 = mpFilePos;
    	 if(mbFilePos)
    	 	Clib.fsetpos(mfpInputFile,mpFilePos);
    	 	
	     while (msInputString != null) 
	    {
	    	//1.1
			Clib.fgetpos(mfpInputFile,mpFilePos);
			var testpos = mpFilePos;
			//1.1
			msInputString = Clib.fgets(mfpInputFile);
			if(msInputString == null) continue;
	
	//		remove the end of line character from the string
	//		for unix formatted file it is \n and for windows formatted file it is \r\n

			if(msInputString.indexOf(""\r"") != -1) {
				msInputString = msInputString.substring(0,msInputString.indexOf(""\r""));
			} else if(msInputString.indexOf(""\n"") != -1) {
				
				msInputString = msInputString.substring(0,msInputString.indexOf(""\n""));
			}
			if(msInputString == """") continue;
			//1.1
			//if((miCnt == miFileBatchSize) && (msInputString.substring(0,1) == ""1"")) {
			if((miCnt == miFileBatchSize) && (Clib.isdigit(msInputString.charAt(0)))) {
				mbFilePos = true;
				break;
			} else
				mbFilePos = false;
			//1.1
			//if(Clib.isdigit(msInputString.charAt(0))) //commented as the output file will not have prefix of 1 and 0
			if((msInputString.charAt(0) != "" "") && (msInputString.charAt(0) != ""*""))
			{		
				//commented as the output file will not have prefix of 1 and 0
				//if(msInputString.substring(0,msInputString.indexOf(""|"")) == ""1"")
				if(Clib.isdigit(msInputString.charAt(0))) 
				{
					//msInputString1 = msInputString.substring(msInputString.indexOf(""|"")+1);
					marrSIMIMSI[miCnt] = msInputString.split("" "");
					//marrSIMIMSI[miCnt] = msInputString1.split(""|"");
					msTemp = marrSIMIMSI[miCnt][getArrayLength(marrSIMIMSI[miCnt])-1];
					
					var test6 = getArrayLength(marrSIMIMSI[miCnt]);
				
					if(!Clib.isalnum(msTemp.substring(msTemp.length-1))) 
					{
						//marrSIMIMSI[miCnt][getArrayLength(marrSIMIMSI[miCnt])-1] = msTemp.substring(0,msTemp.length-1);
						SetArray(marrSIMIMSI,miCnt,getArrayLength(marrSIMIMSI[miCnt])-1,""?"",""?"",msTemp.substring(0,msTemp.length-1));
					}
					//1.1
					
					var IMSIRCnt = 0;
					var IMSIR = ""IMSIR"";
					var IMSIR1 = """";
					
					for(IMSIRCnt =0;IMSIRCnt < getArrayLength(marrInpStr);IMSIRCnt++)
					{
					
					IMSIR1 = marrInpStr[IMSIRCnt];
					if (IMSIR1 == IMSIR)
					{
					msSIMLoc = 2;
					}
					}

					
					
					
					msSIMTemp = marrSIMIMSI[miCnt][msSIMLoc];
					msSIMTemp = msSIMTemp.substring(0,msSIMTemp.length-1);
					
					if(msFileStartNum == """"){
						msFileStartNum 	= msSIMTemp;
						msFileEndNum	= msSIMTemp;
					} else {
						msFileStartNum 	= (msSIMTemp < msFileStartNum)?msSIMTemp:msFileStartNum;
						msFileEndNum	= (msSIMTemp > msFileEndNum)?msSIMTemp:msFileEndNum;
					}
						
					//1.1
					miCnt++;
			
			   	} //commented as the output file will not have prefix of 1 and 0
			   	
			   	if(msInputString.indexOf(""Batch:"") != -1)	
				{
					marrInpStr = msInputString.split("":"");
					msInputString = CleanString(marrInpStr[1]);
					msBatchNum = msInputString;
					
				}
				if(msInputString.indexOf(""PO_ref_number:"") != -1)	
				{
					marrInpStr = msInputString.split("":"");
					msInputString = CleanString(marrInpStr[1]);
					msPORefNum = msInputString;
					
				}
				
			   if(!Clib.isdigit(msInputString.charAt(0)) && (msInputString.indexOf(""Var_Out:"") != -1))	
				//if(msInputString.substring(0,msInputString.indexOf(""|"")) == ""0"")	//commented as the output file will not have prefix of 1 and 0
				{
					//msInputString2 = msInputString.substring(msInputString.indexOf(""|"")+1);
					//msInputString2 = msInputString.substring(msInputString.indexOf(""|"")+1);
					marrInpStr = msInputString.split("":"");
					msInputString = CleanString(marrInpStr[1]);
					msInputString = msBatchNum + ""/"" + msPORefNum + ""/"" + msInputString;
					marrInpStr = msInputString.split(""/"");
					for(miNumType=0;miNumType < getArrayLength(marrInpStr);miNumType++) {
						marrNumType[miNumType] = marrInpStr[miNumType];
						var test7 = marrInpStr[miNumType];
				        //var test8 = marrSIMIMSI[miCnt][1];
				        //var test9 = marrSIMIMSI[miCnt][2];
					}
				}
				//1.1
				//if(msInputString.substring(0,msInputString.indexOf(""|"")) == ""2"")	
				if((!Clib.isdigit(msInputString.charAt(0))) && (!Clib.isalpha(msInputString.charAt(0))) && (msInputString.charAt(0) != ""*""))	
				{
					mbFilePos = false;
				}
				//1.1
			} 
		
		/*else if(Clib.isalpha(msInputString.charAt(0))) 
		{
			if(msInputString.substring(0,msInputString.indexOf("":"")) == ""Var_Out"") 
			{
//              msTempString = msInputString.substring(msInputString.indexOf("":"") + 2,msInputString.indexOf(""\n""));
				msTempString = msInputString.substring(msInputString.indexOf("":"") + 2);
				//marrNumType = msTempString.split(""/"");
				marrInpStr = msTempString.split("","");
				for(miNumType=0;miNumType < getArrayLength(marrInpStr);miNumType++) {
					marrNumType[miNumType] = marrInpStr[miNumType];
				}
			}
			else
			{
				marrInputValues[msInputString.substring(0,msInputString.indexOf("":""))] = msInputString.substring(msInputString.indexOf("":"") + 2);
		//		marrInputValues[msInputString.substring(0,msInputString.indexOf("":""))] = 	msInputString.substring(msInputString.indexOf("":"") + 2,msInputString.indexOf(""\n""));	
			}
		}*/
	}
	
	} catch(e){
		var test4 = e.toString();
		marrTemp 	= null;
		mbError 	= true;
		
		throw(e);
	} 
	finally 
	{
		if (mfpInputFile != null)
			Clib.fclose(mfpInputFile);	
	
	}
	if(mbError)
		return(!mbError);
	else {
		mbValidateOrd = ValidateOrderNew(marrInputValues,marrSIMIMSI,marrNumType,marrOrdCnct,mpsPprId,marrError);
		return(mbValidateOrd);
	}


}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM File 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	/*var marrOrdCnct 	= new Array();
	var marrInputParams = new Array();
	var marrError 		= new Array();
	var marrSIMIMSI		= new Array();
	var marrNumberType	= new Array();*/
	var fileArray       = new Array();
	var intReturn		= CancelOperation;
	//var mpsPprId		= TheApplication().NewPropertySet();
	//var msFullFileName	= Inputs.GetProperty(""FilePath"");
	//var msFileName 		= Inputs.GetProperty(""FilePath"").substring(Inputs.GetProperty(""FileName"").lastIndexOf(""/"") + 1);
	var strErrVal		= """";
	//var mbResult		= false;
	//var Inputs 			= TheApplication().NewPropertySet();
	//var Outputs         = TheApplication().NewPropertySet();
	//try	{
	//KT 15-04-07 Moved code to method ReadOrderFile
	/* 
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
    var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
	bcSysPref.ActivateField(""Value"");
	bcSysPref.ClearToQuery();
	bcSysPref.SetSearchSpec(""Name"",""HCPT_IF_SIMDETAILFILE_DIR_IN"");
	bcSysPref.ExecuteQuery();
	if(bcSysPref.FirstRecord()) 
	{
    Inputs.SetProperty(""DirectoryPath"",bcSysPref.GetFieldValue(""Value""));
    //t1 = bcSysPref.GetFieldValue(""Value"");
	//Inputs.SetProperty(""testfile"",""C:\\Test1\\filelist.lst"");
	}
	bcSysPref.ClearToQuery();
	bcSysPref.SetSearchSpec(""Name"",""HCPT_IF_SIMDETAILFILE_DIR_OUT"");
	bcSysPref.ExecuteQuery();
	if(bcSysPref.FirstRecord()) 
	{
    Inputs.SetProperty(""DirectoryPathOut"",bcSysPref.GetFieldValue(""Value""));
    }
	*/
	switch(MethodName) 	
    {
		case ""GenerateFile"":

			
			strErrVal = GenerateFileNew(Inputs.GetProperty(""OrderId""),Inputs.GetProperty(""FilePath""),Outputs);
			//Above 1.1
			Outputs.SetProperty(""ErrMessage"",strErrVal);
			var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
			var bcOrder 			= boOrder.GetBusComp(""RMS SIM Order"");
			with(bcOrder)
			{
				InvokeMethod(""SetAdminMode"",""TRUE"");
				SetViewMode(AllView);
				ActivateField(""Status"");
				ActivateField(""Comments"");
				ActivateField(""Status"");
				ActivateField(""PO Generated Date"");
				ActivateField(""Current Date"");
				SetSearchSpec(""Id"",Inputs.GetProperty(""OrderId""));
				ExecuteQuery(ForwardOnly);
				var blnsIsRecord = FirstRecord();
				if(blnsIsRecord)
				{
					var dtCurrentDate = GetFieldValue(""Current Date"");
					if(strErrVal!= """")
					{
						SetUserProperty(""From BusService"",""Y""); 
						SetFieldValue(""Comments"",strErrVal);
						SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW""));
						WriteRecord();
						SetUserProperty(""From BusService"",""N"");
					}
					else 
					{
						SetUserProperty(""From BusService"",""N"");
						SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""PO GENERATED""));
						SetFieldValue(""PO Generated Date"",dtCurrentDate);
						WriteRecord();
						SetUserProperty(""From BusService"",""N"");
					}
				}
				InvokeMethod(""SetAdminMode"",""FALSE"");
			}
			bcOrder = null;
			boOrder = null;
			//below 1.1
			break;
			
		case ""ReadOrderFile"":
		    //KT 15-04-2007 Moved code
			var boSysPref = TheApplication().GetBusObject(""System Preferences"");
		    var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
			bcSysPref.ActivateField(""Value"");
			bcSysPref.ClearToQuery();
			//KT New Code
			if(Inputs.PropertyExists(""RMSSIMOrderErrorPath1""))
			{
				var testval = 	Inputs.GetProperty(""RMSSIMDetailDirIn1"");
				bcSysPref.SetSearchSpec(""Name"",Inputs.GetProperty(""RMSSIMDetailDirIn1""));
			}
			else
				//End of New Code
				bcSysPref.SetSearchSpec(""Name"",""RMS_IF_SIMDETAILFILE_DIR_IN"");
			bcSysPref.ExecuteQuery();
			if(bcSysPref.FirstRecord()) 
			{
			    Inputs.SetProperty(""DirectoryPath"",bcSysPref.GetFieldValue(""Value""));
			    //t1 = bcSysPref.GetFieldValue(""Value"");
				//Inputs.SetProperty(""testfile"",""C:\\Test1\\filelist.lst"");
			}
			bcSysPref.ClearToQuery();
			//KT New Code
			if(Inputs.PropertyExists(""RMSSIMOrderErrorPath1""))
			{
				var testval1 = 	Inputs.GetProperty(""RMSSIMDetailDirOut1"");
				bcSysPref.SetSearchSpec(""Name"",Inputs.GetProperty(""RMSSIMDetailDirOut1""));
			}
			else
			//End of New Code
				bcSysPref.SetSearchSpec(""Name"",""RMS_IF_SIMDETAILFILE_DIR_OUT"");
			bcSysPref.ExecuteQuery();
			if(bcSysPref.FirstRecord()) 
			{
		    	Inputs.SetProperty(""DirectoryPathOut"",bcSysPref.GetFieldValue(""Value""));
		    }
					GetDirrectoryList(fileArray,Inputs,Outputs);
					CallReadOrderFiles(fileArray,Inputs);
					/*	//mbResult = 	ReadOrderFileNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrError,msFullFileName,marrNumberType);
					if(mbResult)
						{	
		
					   	strErrVal = UpdateNumbersNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrNumberType,msFullFileName);
					 }
				//-----------------------------------------------------------------------------
				//enable the following script, if an error file is required to be generated          // 01:07:2005
				//----------------------------------------------------------------------------
					if(strErrVal != """" || getArrayLength(marrError) > 0) 
					//{
					/*	marrError[getArrayLength(marrError)] = strErrVal;
						GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);	
					    	
					}
					else //commented for read tests*/
					/*{
						if(marrError[0] != """") {
						GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);
						//strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD019"");
						TheApplication().RaiseErrorText(Outputs.GetProperty(""strErrVal""));
						}
					}//commented for read tests
						break;
					default:
						intReturn = ContinueOperation;*/
				break;
			case ""ReadOrderFileNew"":
				GetDirrectoryList(fileArray,Inputs,Outputs);
				CallReadOrderFiles(fileArray,Inputs);
				/*	//mbResult = 	ReadOrderFileNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrError,msFullFileName,marrNumberType);
				if(mbResult)
					{	
	
				   	strErrVal = UpdateNumbersNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrNumberType,msFullFileName);
				 }
			//-----------------------------------------------------------------------------
			//enable the following script, if an error file is required to be generated          // 01:07:2005
			//----------------------------------------------------------------------------
				if(strErrVal != """" || getArrayLength(marrError) > 0) 
				//{
				/*	marrError[getArrayLength(marrError)] = strErrVal;
					GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);	
				    	
				}
				else //commented for read tests*/
				/*{
					if(marrError[0] != """") {
					GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);
					//strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD019"");
					TheApplication().RaiseErrorText(Outputs.GetProperty(""strErrVal""));
					}
				}//commented for read tests
					break;
				default:
					intReturn = ContinueOperation;*/
				break;
			case ""BatchNum"":
				var sNextId = BatchNumber();
				Outputs.SetProperty(""BatchNumber"",sNextId);
				break;
		}
	
		//}
	//catch(e)
	//{

	//	if(strErrVal == """")
	//		strErrVal = e.errText;

	//}
	//finally
//	{ 
	
		fileArray           = null;
		bcSysPref           = null;
		boSysPref           = null;
		/*mpsPprId			= null;
	    marrOrdCnct 	    = null;
	    marrInputParams     = null;
	    marrError 	        = null;
	    marrSIMIMSI	        = null;
        marrNumberType	    = null;*/
//	}
//	if(strErrVal != """")
//		TheApplication().RaiseErrorText(strErrVal);
				
	return (intReturn);
}
function SetArray(&arrArray,d1,d2,d3,d4,&value)
{
	try{
//var strSTEng = TheApplication().GetProfileAttr(""RMS_ST_ENGINE"");
var strSTEng = ""Y"";
/*if ((d2 != ""?"")) {
if ((typeof(arrArray[d1]) != "function"") && (strSTEng == ""Y"")){
arrArray[d1] = new Array();
}
} else {
arrArray[d1] = value;
return(true);
}
if ((d3 != ""?"")) {
if ((typeof(arrArray[d1][d2]) != "function"")  && (strSTEng == ""Y""))
arrArray[d1][d2] = new Array();
} else {
arrArray[d1][d2] = value;
return(true);
}
if ((d4 != ""?"")) {
if((typeof(arrArray[d1][d2][d3]) != "function"")  && (strSTEng == ""Y""))
arrArray[d1][d2][d3] = new Array();
} else {
arrArray[d1][d2][d3] = value;
return(true);
}*/
if ((d2 == ""?"")){
arrArray[d1] = value;
return(true);
}
if ((d3 == ""?"")){
arrArray[d1][d2] = value;
return(true);
}
if ((d4 == ""?"")){
arrArray[d1][d2][d3] = value;
return(true);
}
}
 catch(e) {
var test = e.errText;
throw(e);
}


}
"/**************************************************************************************
* Name          : SIM Order Business Service UpdateFile Method 					  	  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/

function UpdateFile(strFileType,strComments,strFileName,strOrderId,strOrderLineId)
{
	var miFileSeq		= 0;
	var mbIsFileRec		= false;
	var msFileId		= """";
	var boOrder 		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderFileInfo = boOrder.GetBusComp(""RMS SIM Order File Info"");
	//1.1
	var msFileNameQry	= """";
	//1.1

	with(bcOrderFileInfo) 
	 {
		SetViewMode(3);
		ActivateField(""File Sequence"");
		ActivateField(""HLR_Batch"");
		ClearToQuery();
		SetSearchSpec(""SIM Order Id"",strOrderId);
		SetSearchSpec(""File Type"",strFileType);
		SetSortSpec(""File Sequence(DESCENDING)"");
		ExecuteQuery(ForwardOnly);
		mbIsFileRec = FirstRecord();

		if(mbIsFileRec) 
			miFileSeq = GetFieldValue(""File Sequence"");
		else
			miFileSeq = 0;
	 }

//  Update the file table with the appropriate parameters	

	with(bcOrderFileInfo) 
	{
		SetViewMode(AllView);
		ActivateField(""Id"");
		
		//SetFieldValue(""File Name"",strFileName.substring(strFileName.indexOf(""EE"")));
		var index = strFileName.lastIndexOf(""\\"");
		if (index <= 0)
        {
			index = strFileName.lastIndexOf(""/"");
	        if (index > 0)
	        {
			//1.1	SetFieldValue(""File Name"",strFileName.substring(strFileName.lastIndexOf(""/"")+1));
				msFileNameQry = strFileName.substring(strFileName.lastIndexOf(""/"")+1);
		    }
		}
		else 
		{
		//1.1	SetFieldValue(""File Name"",strFileName.substring(strFileName.lastIndexOf(""\\"")+1));
			msFileNameQry = strFileName.substring(strFileName.lastIndexOf(""\\"")+1);
		}
		//1.1
		ClearToQuery();
		SetSearchSpec(""File Name"",msFileNameQry);
		SetSearchSpec(""File Type"",strFileType);
		SetSearchSpec(""SIM Order Id"",strOrderId);
		SetSearchSpec(""SIM Order Line Id"",strOrderLineId);
		ExecuteQuery(ForwardOnly);
		
		if(!FirstRecord()) {
			NewRecord(1);
			SetFieldValue(""Comments"",strComments);
			SetFieldValue(""File Name"",msFileNameQry);
			SetFieldValue(""File Sequence"",miFileSeq);
			SetFieldValue(""File Type"",strFileType);
			SetFieldValue(""SIM Order Id"",strOrderId);
			SetFieldValue(""SIM Order Line Id"",strOrderLineId);
			WriteRecord();
		}
	    }//1.1
	msFileId = bcOrderFileInfo.GetFieldValue(""Id"");
	bcOrderFileInfo = null;
	boOrder			= null;
	return msFileId;
}
"/**************************************************************************************
* Name          : SIM Order Business Service UpdateNumbers Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* * 20060710    1.1         Kalyana      	Commented entire function  becuase we are not  using  this function
**************************************************************************************/

function UpdateNumbers(&marrOrdCnct,&marrInputParams,&marrSIMIMSI,&mpsPprId,&marrNumTypes,msFileName)
{
//below 1.1
/*	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var boNMEnquiry			= TheApplication().GetBusObject(""RMS NM Number Enquiry"");     // Changed 06:06:2005

//	var bcNumberMaster      = boOrder.GetBusComp(""RMS SIM Order NM Number Master"");
	var bcNumberMaster      = boNMEnquiry.GetBusComp(""RMS NM Number Enquiry For Update""); // Changed 06:06:2005
	
	var boSIMNumber         = TheApplication().GetBusObject(""RMS SIM Number"");     // Changed 06:06:2005
	var bcNumPaperItem      = boSIMNumber.GetBusComp(""RMS SIM Number Paper Item""); // Changed 06:06:2005
//	var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Number Paper Item""); 
//	var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Order Paper Item"");

	var bcOrder				= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrderUpd			= boOrder.GetBusComp(""RMS SIM Order Update"");
	var bcOrderLine			= boOrder.GetBusComp(""RMS SIM Order Line Update"");
	var bcOrderLineNumbers  = boOrder.GetBusComp(""RMS SIM Order Line Num Info"");
	var bcNumberConcat		= boOrder.GetBusComp(""RMS SIM Order Association Number Type Display"");
	var bcOrderLineRecdInfo = boOrder.GetBusComp(""RMS SIM Order Line Recd Info"");
	
	var boOrderQuery		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	= boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");

	var boSysPref			= TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref			= boSysPref.GetBusComp(""System Preferences"");
	
	var bsRMSBlk            = TheApplication().GetService(""RMS RMS Block Calc"");
	var psBlkInputs			= TheApplication().NewPropertySet();
	var psBlkOutputs		= TheApplication().NewPropertySet();
	
	var miRecdItemCount 	= 0; 
	var mbIsRecord 			= false;
	var strErrVal			= """";
	var strSIMCrdId			= """";
	var strSIMCrdPrice = """";
	var strOrderId			= """";
	var blnsIsPaperItem = false; //KT 30-04-06
	var blnBlkUpdate		= false;
	var dtCurrentDate ;
	
	try
	{
	
	with(bcSysPref) {
		ActivateField(""Value"");
		ClearToQuery();
		SetSearchSpec(""Name"",""RMS_BLOCK_UPDATION"");
		SetSearchSpec(""Value"",""Y"");
		ExecuteQuery(ForwardOnly);
		if(FirstRecord())
			blnBlkUpdate	= true;
	}
	with(bcOrderLineQuery) 
	{
		
		ActivateField(""Order Id"");
		ClearToQuery();
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strOrderId = GetFieldValue(""Order Id"");
	}

	with(bcOrder) 
	{
		SetViewMode(3);
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ActivateField(""Closed Date"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId);
	//	SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""]); KT 24-04-2006
		SetSearchSpec(""Revision Number"",1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);	
		} 
		dtCurrentDate = GetFieldValue(""Current Date"");
	}
	
	with(bcOrderUpd) 
	{
		SetViewMode(3);
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ActivateField(""Closed Date"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId);
		//SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""])
		SetSearchSpec(""Revision Number"",1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		dtCurrentDate = GetFieldValue(""Current Date"");
	}
	
	with(bcOrderLine) 
	{
		ActivateField(""Status"");
		ActivateField(""Id"");
		ActivateField(""Quantity Received"");
		ActivateField(""Fulfilled Date"");
		ActivateField(""SIM Card Config Id"");	
		ActivateField(""SIM Card Price"");
		ClearToQuery();
		//SetSearchSpec(""SIM Card Config Type"",marrInputParams[""Type""]);
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
	  //SetSearchSpec(""Profile"",marrInputParams[""Profile""]);  KT 24-04-2006
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]); 
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strSIMCrdId = GetFieldValue(""SIM Card Config Id"");
		strSIMCrdPrice = GetFieldValue(""SIM Card Price"");
	}
	
	var miCnt = 0;
	var miPprCnt = 0;
	
	var msFileId = UpdateFile(""I"","""",msFileName,bcOrderUpd.GetFieldValue(""Id""));

//	Update the Order Line Recieved Info Table	

	with(bcOrderLineRecdInfo) {
	NewRecord(1);
	SetFieldValue(""Input File Info Id"",msFileId);
	SetFieldValue(""Order Id"",bcOrder.GetFieldValue(""Id""));
	SetFieldValue(""Order Line Id"",bcOrderLine.GetFieldValue(""Id""));
	SetFieldValue(""Quantity Received"",getArrayLength(marrOrdCnct));
	WriteRecord();
	}
	
	for(miCnt =0; miCnt < getArrayLength(marrOrdCnct);miCnt++) 
	   {
		with(bcOrderLineNumbers) 
		{
			ActivateField(""Status"");
			ActivateField(""File Id"");
			ActivateField(""Assoc Start Id"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",marrOrdCnct[miCnt]);
//			SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""WITH SIM SUPPLIER""));
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) continue;
			
			miRecdItemCount++;
			SetFieldValue(""File Id"",msFileId);
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
		//	SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
			WriteRecord();
			
		}
		
		for(miPprCnt = 2;miPprCnt<getArrayLength(marrSIMIMSI[miCnt]);miPprCnt++) 
		{
			with(bcNumPaperItem)
			{
				ActivateField(""Paper Item Value"");
				ClearToQuery();
				SetSearchSpec(""Order Line Number Detail Id"",bcOrderLineNumbers.GetFieldValue(""Id"")); 
				SetSearchSpec(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt]));
				ExecuteQuery(ForwardOnly);
				blnsIsPaperItem = FirstRecord();
				if(!FirstRecord()) 
				{
					NewRecord(1);	
					SetFieldValue(""Order Line Number Detail Id"",bcOrderLineNumbers.GetFieldValue(""Id""));
					//SetFieldValue(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt-2]));//KT  14-06-06  commented as for new read file  format
				    SetFieldValue(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt]));
				}
				//SetFieldValue(""Paper Item Value"",marrSIMIMSI[miCnt][miPprCnt-2]);
				SetFieldValue(""Paper Item Value"",marrSIMIMSI[miCnt][miPprCnt]);
				WriteRecord();				
			}
		}

		with(bcNumberConcat) 
		{
				ActivateField(""Status"");
				ActivateField(""Associated Number"");
				
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",bcOrderLineNumbers.GetFieldValue(""Assoc Start Id""));
				ExecuteQuery(1);
				
				mbIsRecord = FirstRecord();
				while(mbIsRecord) {
					SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
				//	SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"")); KT 26-04-06
					WriteRecord();
					mbIsRecord = NextRecord();
				}
				
		}	
		
		with(bcNumberMaster) 
		{
			ActivateField(""SIM Card Id"");
			ActivateField(""Price"");			
			ActivateField(""Status"");
			ActivateField(""Block Id"");
			ActivateField(""Type Identifier"");
			ActivateField(""Number String With Checksum"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"", bcOrderLineNumbers.GetFieldValue(""Assoc Start Id""));
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) 
			{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD016"",marrInputParams[""P0_ref_number""]);
				TheApplication().RaiseErrorText(strErrVal);
			}
			
			while(mbIsRecord) 
			{
				if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
					SetFieldValue(""Number String With Checksum"",marrSIMIMSI[miCnt][1]);
				SetFieldValue(""SIM Card Id"",strSIMCrdId);			
				SetFieldValue(""Price"",strSIMCrdPrice);			
				SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
				//SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"")); KT 26-04-06
				WriteRecord();
				
				if(blnBlkUpdate) {
					with(psBlkInputs)
					{
						SetProperty(""Object Id"",GetFieldValue(""Block Id""));
						SetProperty(""From Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""WITH SIM SUPPLIER""));
						SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
					//	SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
					}
					
					bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
				}
				mbIsRecord = NextRecord();
			}
		}
		
		
	}

//	Update the Order Line Table for Quantity Recieved and Status fields

	with(bcOrderLine)
	{
		SetUserProperty(""Suppress OrdPreSetField"",""Y"");
		SetUserProperty(""SuppressWrite"",""Y"");
		SetFieldValue(""Quantity Received"",ToInteger(GetFieldValue(""Quantity Received"")) + miRecdItemCount);
		var test9 = (ToInteger(GetFieldValue(""Quantity Received""))+miRecdItemCount) ;
		if(ToInteger(GetFieldValue(""Quantity Ordered"")) <= ToInteger(GetFieldValue(""Quantity Received""))) 
		{
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""FULFILLED""));
			SetFieldValue(""Fulfilled Date"",dtCurrentDate);
			WriteRecord();
//			bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED""));
//			bcOrderUpd.WriteRecord();
		}
		else if(ToInteger(GetFieldValue(""Quantity Received"")) != 0) 
		{
//			bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
//			bcOrderUpd.WriteRecord();
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
			WriteRecord();
			
		}
		var mbIsRecord = FirstRecord();
		//MS 24-04-2006while(mbIsRecord) {
		if(mbIsRecord) {
			var mstrSrchExpr = ""[Status] <> '""+TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""FULFILLED"")+""'"";
			ClearToQuery();
			SetSearchExpr(mstrSrchExpr)
			ExecuteQuery();
			if(FirstRecord()) {
				bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
				bcOrderUpd.WriteRecord();
			
			}
			else {
				bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED""));
				bcOrderUpd.SetFieldValue(""Closed Date"",dtCurrentDate);
				bcOrderUpd.WriteRecord();
			}
		}
	}
	} catch(e){
		if(strErrVal == """") 
		{
			strErrVal = e.errText;
		} 
		
		throw (e);
		
	} finally {
	    bcSysPref           = null;
		boSysPref           = null;
		bcOrder				= null;
	    bcOrderUpd			= null;
	    bcOrderLine			= null;
	    bcOrderLineNumbers  = null;
	    bcNumberConcat		= null;
	    bcNumberMaster      = null;
	    bcOrderLineRecdInfo = null;
	    bcNumPaperItem		= null;
		boOrder 			= null;
		bcOrderLineQuery	= null;
		boOrderQuery		= null;
		bsRMSBlk            = null;
	    psBlkInputs			= null;
	    psBlkOutputs		= null;
	}
	
	return(strErrVal);*/
//above 1.1
}
"/**************************************************************************************
* Name          : SIM Order Business Service UpdateNumbers Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Siebel ES SCR1, Objects Destroyed
**************************************************************************************/

function UpdateNumbersNew(&marrOrdCnct,&marrInputParams,&marrSIMIMSI,&mpsPprId,&marrNumTypes,msFileName)
{
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var boNMEnquiry			= TheApplication().GetBusObject(""RMS NM Number Enquiry"");     // Changed 06:06:2005
//	var bcNumberMaster      = boOrder.GetBusComp(""RMS SIM Order NM Number Master"");
	var bcNumberMaster      = boNMEnquiry.GetBusComp(""RMS NM Number Enquiry For Update""); // Changed 06:06:2005
	var boSIMNumber         = TheApplication().GetBusObject(""RMS SIM Number"");     // Changed 06:06:2005
	var bcNumPaperItem      = boSIMNumber.GetBusComp(""RMS SIM Number Paper Item""); // Changed 06:06:2005
//	var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Number Paper Item""); 
//	var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Order Paper Item"");
	var bcOrder				= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrderUpd			= boOrder.GetBusComp(""RMS SIM Order Update"");
	var bcOrderLine			= boOrder.GetBusComp(""RMS SIM Order Line Update"");
	var bcOrderLineNumbers  = boOrder.GetBusComp(""RMS SIM Order Line Num Info"");
	var bcNumberConcat		= boOrder.GetBusComp(""RMS SIM Order Association Number Type Display"");
	var bcOrderLineRecdInfo = boOrder.GetBusComp(""RMS SIM Order Line Recd Info"");
	var bcOrdFile			= boOrder.GetBusComp(""RMS SIM Order File Info Query"");
	var boOrderQuery		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	= boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");
	var boSysPref			= TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref			= boSysPref.GetBusComp(""System Preferences"");
	var bsRMSBlk            = TheApplication().GetService(""RMS RMS Block Calc"");
	var psBlkInputs			= TheApplication().NewPropertySet();
	var psBlkOutputs		= TheApplication().NewPropertySet();
	var miRecdItemCount 	= 0; 
	var mbIsRecord 			= false;
	var msByPassAUC			= GetSysPref(""RMS_SIMORDER_BYPASS_AUCREG"");
	var strErrVal			= """";
	var strSIMCrdId			= """";
	var strSIMCrdPrice = """";
	var strOrderId			= """";
	var blnsIsPaperItem = false; //KT 30-04-06
	var blnBlkUpdate		= false;
	var dtCurrentDate ;

	var strOrderLineId		= """";
	try
	{
	
	with(bcSysPref) {
		ActivateField(""Value"");
		ClearToQuery();
		SetSearchSpec(""Name"",""RMS_BLOCK_UPDATION"");
		SetSearchSpec(""Value"",""Y"");
		ExecuteQuery(ForwardOnly);
		if(FirstRecord())
			blnBlkUpdate	= true;
	}
	
	
	with(bcOrdFile) {
		ActivateField(""SIM Order Line Id"");
		ActivateField(""SIM Order Id"");
		ClearToQuery();
		SetSearchSpec(""BatchNumber"",marrNumTypes[iBatchNum]);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord()){
			strOrderId 		= GetFieldValue(""SIM Order Id"");
			strOrderLineId	= GetFieldValue(""SIM Order Line Id"");
		}
	}
	
	with(bcOrderLineQuery) 
	{
		
		ActivateField(""Order Id"");
		ClearToQuery();
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		//SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		SetSearchSpec(""Id"",strOrderLineId);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strOrderId = GetFieldValue(""Order Id"");
	}

	with(bcOrder) 
	{
		SetViewMode(3);
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ActivateField(""Closed Date"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId);
	//	SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""]); KT 24-04-2006
		SetSearchSpec(""Revision Number"",1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);	
		} 
		dtCurrentDate = GetFieldValue(""Current Date"");
	}
	
	with(bcOrderUpd) 
	{
		SetViewMode(3);
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ActivateField(""Closed Date"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId);
		//SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""])
		SetSearchSpec(""Revision Number"",1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		dtCurrentDate = GetFieldValue(""Current Date"");
	}
	
	with(bcOrderLine) 
	{
		ActivateField(""Status"");
		ActivateField(""Id"");
		ActivateField(""Quantity Received"");
		ActivateField(""Fulfilled Date"");
		ActivateField(""SIM Card Config Id"");	
		ActivateField(""SIM Card Price"");
		ClearToQuery();
		//SetSearchSpec(""SIM Card Config Type"",marrInputParams[""Type""]);
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		//SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
	  	  SetSearchSpec(""Id"",strOrderLineId);
		//SetSearchSpec(""Profile"",marrInputParams[""Profile""]);  KT 24-04-2006
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]); 
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strSIMCrdId = GetFieldValue(""SIM Card Config Id"");
		strSIMCrdPrice = GetFieldValue(""SIM Card Price"");
	}
	
	var miCnt = 0;
	var miPprCnt = 0;
	
	var msFileId = UpdateFile(""I"","""",msFileName,bcOrderUpd.GetFieldValue(""Id""));

//	Update the Order Line Recieved Info Table	

	with(bcOrderLineRecdInfo) {
		ActivateField(""Quantity Received"");
		SetSearchSpec(""Order Id"",bcOrder.GetFieldValue(""Id""));
		SetSearchSpec(""Order Line Id"",bcOrderLine.GetFieldValue(""Id""));
		SetSearchSpec(""Input File Info Id"",msFileId);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord()) {
			SetFieldValue(""Quantity Received"",(ToNumber(GetFieldValue(""Quantity Received"")) + ToNumber(getArrayLength(marrOrdCnct))));
			WriteRecord();
		} else {
			NewRecord(1);
			SetFieldValue(""Input File Info Id"",msFileId);
			SetFieldValue(""Order Id"",bcOrder.GetFieldValue(""Id""));
			SetFieldValue(""Order Line Id"",bcOrderLine.GetFieldValue(""Id""));
			SetFieldValue(""Quantity Received"",getArrayLength(marrOrdCnct));
			WriteRecord();
		}
	}
	
	for(miCnt =0; miCnt < getArrayLength(marrOrdCnct);miCnt++) 
	   {
		with(bcOrderLineNumbers) 
		{
			ActivateField(""Status"");
			ActivateField(""File Id"");
			ActivateField(""Assoc Start Id"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",marrOrdCnct[miCnt]);
			var test9 = marrOrdCnct[miCnt];
//			SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""WITH SIM SUPPLIER""));
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) continue;
			
			miRecdItemCount++;
			SetFieldValue(""File Id"",msFileId);
			if(msByPassAUC == ""Y"")
				SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
			else
				SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
		//	SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
			WriteRecord();
			
		}
		
		for(miPprCnt = 2;miPprCnt<getArrayLength(marrSIMIMSI[miCnt]);miPprCnt++) 
		{
			with(bcNumPaperItem)
			{
				ActivateField(""Paper Item Value"");
				ClearToQuery();
				SetSearchSpec(""Order Line Number Detail Id"",bcOrderLineNumbers.GetFieldValue(""Id"")); 
				SetSearchSpec(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt+iPprItemIndxL]));
				var test10 = mpsPprId.GetProperty(marrNumTypes[miPprCnt+iPprItemIndxL]);
				ExecuteQuery(ForwardOnly);
				blnsIsPaperItem = FirstRecord();
				if(!FirstRecord()) 
				{
					NewRecord(1);	
					SetFieldValue(""Order Line Number Detail Id"",bcOrderLineNumbers.GetFieldValue(""Id""));
					SetFieldValue(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt+iPprItemIndxL]));
				}
				SetFieldValue(""Paper Item Value"",marrSIMIMSI[miCnt][miPprCnt]);
				WriteRecord();				
			}
		}

		with(bcNumberConcat) 
		{
				ActivateField(""Status"");
				ActivateField(""Associated Number"");
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",bcOrderLineNumbers.GetFieldValue(""Assoc Start Id""));
				//ExecuteQuery(1);
				ExecuteQuery(ForwardOnly);
				mbIsRecord = FirstRecord();
				while(mbIsRecord) {
					if(msByPassAUC == ""Y"")
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
					else
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
				//	SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"")); KT 26-04-06
					WriteRecord();
					mbIsRecord = NextRecord();
				}
				
		}	
		
		with(bcNumberMaster) 
		{
			ActivateField(""SIM Card Id"");
			ActivateField(""Price"");			
			ActivateField(""Status"");
			ActivateField(""Block Id"");
			ActivateField(""Type Identifier"");
			ActivateField(""Number String With Checksum"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"", bcOrderLineNumbers.GetFieldValue(""Assoc Start Id""));
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) 
			{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD016"",marrInputParams[""P0_ref_number""]);
				TheApplication().RaiseErrorText(strErrVal);
			}
			
			while(mbIsRecord) 
			{
				if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
				//SetFieldValue(""Number String With Checksum"",marrSIMIMSI[miCnt][1]);
				//SetFieldValue(""Number String With Checksum"",marrSIMIMSI[miCnt][2]);  //  change  as per  new  file format
				SetFieldValue(""Number String With Checksum"",marrSIMIMSI[miCnt][msSIMLoc]);
				SetFieldValue(""SIM Card Id"",strSIMCrdId);			
				SetFieldValue(""Price"",strSIMCrdPrice);	
				if(msByPassAUC == ""Y"")		
					SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
				else
					SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
				//SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"")); KT 26-04-06
				WriteRecord();
				
				if(blnBlkUpdate) {
					with(psBlkInputs)
					{
						SetProperty(""Object Id"",GetFieldValue(""Block Id""));
						SetProperty(""From Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""WITH SIM SUPPLIER""));
						if(msByPassAUC == ""Y"")	
							SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
						else
							SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
					//	SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
					}
					
					bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
				}
				mbIsRecord = NextRecord();
			}
		}
		
		
	}

//	Update the Order Line Table for Quantity Recieved and Status fields

	with(bcOrderLine)
	{
		SetUserProperty(""Suppress OrdPreSetField"",""Y"");
		SetUserProperty(""SuppressWrite"",""Y"");
		SetFieldValue(""Quantity Received"",ToInteger(GetFieldValue(""Quantity Received"")) + miRecdItemCount);
		var test9 = (ToInteger(GetFieldValue(""Quantity Received""))+miRecdItemCount) ;
		if(ToInteger(GetFieldValue(""Quantity Ordered"")) <= ToInteger(GetFieldValue(""Quantity Received""))) 
		{
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""FULFILLED""));
			SetFieldValue(""Fulfilled Date"",dtCurrentDate);
			WriteRecord();
//			bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED""));
//			bcOrderUpd.WriteRecord();
		}
		else if(ToInteger(GetFieldValue(""Quantity Received"")) != 0) 
		{
//			bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
//			bcOrderUpd.WriteRecord();
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
			WriteRecord();
			
		}
		var mbIsRecord = FirstRecord();
		//MS 24-04-2006while(mbIsRecord) {
		if(mbIsRecord) {
			var mstrSrchExpr = ""[Status] <> '""+TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""FULFILLED"")+""'"";
			ClearToQuery();
			SetSearchExpr(mstrSrchExpr)
			ExecuteQuery();
			if(FirstRecord()) {
				bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
				bcOrderUpd.WriteRecord();
			
			}
			else {
				bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED""));
				bcOrderUpd.SetFieldValue(""Closed Date"",dtCurrentDate);
				bcOrderUpd.WriteRecord();
			}
		}
	}
	} catch(e){
		if(strErrVal == """") 
		{
			strErrVal = e.errText;
		} 
		
		throw (e);
		
	} finally {

		bcOrder				= null;
	    bcOrderUpd			= null;
	    bcOrderLine			= null;
	    bcOrderLineNumbers  = null;
	    bcNumberConcat		= null;
	    bcNumberMaster      = null;
	    bcOrderLineRecdInfo = null;
	    bcNumPaperItem		= null;
		bcOrderLineQuery	= null;
		boOrder 			= null;
		boOrderQuery		= null;
//below 1.1 
		bcSysPref           = null;
		boNMEnquiry         = null;
		boSIMNumber         = null;
		boSysPref           = null;
//above 1.1
		bsRMSBlk            = null;
	    psBlkInputs			= null;
	    psBlkOutputs		= null;
	}
	return(strErrVal);
}
"/**************************************************************************************
* Name          : SIM Order Business Service ValidateOrder Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 27/07/2005    1.1         MBT             Updated (Changes for    27/07/2005		  *	
      	                                     mulitples IMSI in same file)   
* 20060710      1.2         Kalyana          Commented   entire  function  for future  use    
**************************************************************************************/

function ValidateOrder(&marrInputParams,&marrSIMIMSI,&marrNumTypes,&marrOrdCnct,&mpsPprId,&marrError)
{
//below 1.2
/*	
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderHdr 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrderLine			= boOrder.GetBusComp(""RMS SIM Order Line"");
	var bcOrderLineNum		= boOrder.GetBusComp(""RMS SIM Order Line Num Info"");
	
	var boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumEnqUpdate	= boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update"");
	
	var boOrderQuery		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	= boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");

//  var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Number Paper Item"");
		
	var mbIsRecord 			= false;
	var mpsSIM 				= TheApplication().NewPropertySet();
	var mpsIMSI 			= TheApplication().NewPropertySet();
	
	var miCnt 				= 0;
	var msNumber 			= """";
	var miErrCnt			= 0;
	var mpsPprItem 			= TheApplication().NewPropertySet();
	var strStatus 			= """";
	var strErrVal			= """";
	var psError 			= TheApplication().NewPropertySet();
	var marrNumIMSI			= new Array();
//  var marrOrdCnct = new Array();
	var strOrderId			= """";
	var strNumHandle		= """";
	var intCheckSumLen		= 1;
	var mbError 			= false;
	var msSIM="""";
	
	try {

	with(bcOrderLineQuery) 
	{

		ActivateField(""Order Id"");
		ClearToQuery();
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strOrderId = GetFieldValue(""Order Id"");
	}

	//Query the database with the Order Number				
	with(bcOrderHdr) {
		SetViewMode(AllView);
		ActivateField(""Id"");
		ActivateField(""Status"");
		ActivateField(""Order Number"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId) 
		//SetSearchSpec(""Revision Number"",1);
  	    //SetSearchSpec(""Profile"",marrInputParams[""Profile""]); 
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]);
		
		ExecuteQuery();
	}
//  If query is returning no records then set the Comments property and exit
	if(!bcOrderHdr.FirstRecord()) 
	{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
		marrError[miErrCnt++] = strErrVal;
		TheApplication().RaiseErrorText(strErrVal);
	} 
	else if(bcOrderHdr.GetFieldValue(""Status"") == TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED"")) 
	{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD017"",bcOrderHdr.GetFieldValue(""Order Number""));
		marrError[miErrCnt++] =  strErrVal;
		TheApplication().RaiseErrorText(strErrVal);
	} 
	else 
	{
		strStatus = bcOrderHdr.GetFieldValue(""Status"");
	}
	
//   Set the Status parameter

	with(bcOrderLine) {
		ActivateField(""Id"");
		ClearToQuery();
		var temp2 = marrInputParams[""Profile""];
		var temp4 =	marrInputParams[""Transport_Key""];
		//SetSearchSpec(""SIM Card Config Type"",marrInputParams[""Type""]);
		//SetSearchSpec(""Profile"",marrInputParams[""Profile""]);
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]);
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
	}
	
	if(!mbIsRecord) {
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
		marrError[miErrCnt++] =  strErrVal;
		TheApplication().RaiseErrorText(strErrVal);
	}
	
	var bcPaperItem	= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");	
	
//Query the Paper Item table corresponding to the Order Id

	with(bcPaperItem) {
		SetViewMode(AllView);
		ActivateField(""Paper Item Id"");
		ActivateField(""Length"");
		ActivateField(""Paper Item Name"");
		
		ClearToQuery();
		ExecuteQuery(1);
		mbIsRecord = FirstRecord();
		//if(!mbIsRecord) return """";
	}
	
	while(mbIsRecord) 
	{
		mpsPprItem.SetProperty(bcPaperItem.GetFieldValue(""Paper Item Name""),bcPaperItem.GetFieldValue(""Length""));
		mpsPprId.SetProperty(bcPaperItem.GetFieldValue(""Paper Item Name""),bcPaperItem.GetFieldValue(""Paper Item Id""));
		mbIsRecord = bcPaperItem.NextRecord();
	}
	
	with(bcOrderLineNum) 
	{
		//ActivateField(""Assoc Start Id"");
		ActivateField(""Id"");
		ActivateField(""Numbers"");
		ActivateField(""Concatenated Number Types"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Status"");
		ClearToQuery();
		ExecuteQuery();
		mbIsRecord = FirstRecord();
		
	}

/*	with(RMS SIM Number Paper Item) {
		ActivateField(); } */

//above 1.2
// below 1.2
/*	
var marrCnctNum = new Array();

	while(mbIsRecord) {
		msNumber = bcOrderLineNum.GetFieldValue(""Numbers"");
		marrCnctNum = msNumber.split("" / "");
		
		if(getArrayLength(marrCnctNum)>1) 
		{
//		Checking whether the input numbers are having delimiters. if yes then remove the delimiters
			if(isNaN(ToNumber(marrCnctNum[0])))
				mpsSIM.SetProperty(CleanNumber(marrCnctNum[0]),bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			else {
								
				mpsSIM.SetProperty(marrCnctNum[0],ToString(bcOrderLineNum.GetFieldValue(""Assoc Start Id"")));
			
			}
//		Checking whether the input numbers are having delimiters. if yes then remove the delimiters
			if(isNaN(ToNumber(marrCnctNum[1])))
				mpsIMSI.SetProperty(CleanNumber(marrCnctNum[1]),bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			else
				mpsIMSI.SetProperty(marrCnctNum[1],bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			
		}
		mbIsRecord = bcOrderLineNum.NextRecord();
	}
	var temp = marrInputParams[""IMSI""];
	marrNumIMSI = marrInputParams[""IMSI""].split("" / "");
	var msSIMLoc = getArrayLength(marrNumIMSI);
	//checking for SIM and IMSI numbers retrieved
	for(miCnt =0;miCnt < getArrayLength(marrSIMIMSI);miCnt++) 
	{
		marrError[miCnt] = """";
		var msSIM = marrSIMIMSI[miCnt][msSIMLoc];
		var msSIMNoCS = msSIM.substring(0,msSIM.length-1);

		
// Checking the SIM,Checksum,IMSI & SIM/IMSI Association

	
/*		if(!mpsSIM.PropertyExists(msSIMNoCS))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD010"") + msSIM;
			mbError = true;
			continue;
		}*/
		
//		var temp  = msSIM.substring(msSIM.length-1);
//		var temp1 =	ChecksumNumber(msSIMNoCS);
		
/*		if(msSIM.substring(msSIM.length-1) != ChecksumNumber(msSIMNoCS))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD011"") + msSIM;
			mbError = true;
			continue;		
		}
		if(!mpsIMSI.PropertyExists(marrSIMIMSI[miCnt][0]))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD012"") + marrSIMIMSI[miCnt][0];
			mbError = true;
			continue;
		
		}
		if(mpsSIM.GetProperty(msSIMNoCS) != (mpsIMSI.GetProperty(marrSIMIMSI[miCnt][0])))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][0];
			mbError = true;
			continue;		
		}*/
		

            //Check whether the numbers exists in RMS system
//above 1.2
//below 1.2
/*
		    with(bcNumEnqUpdate) {
			//ActivateField(""Number String With Checksum"");
			ActivateField(""Number String"");
			ActivateField(""Status"");
			for(var i = 0;i<getArrayLength(marrSIMIMSI[miCnt]);i++) {
					if(msSIMLoc >= i) {
					strNumHandle = marrSIMIMSI[miCnt][i];
					ClearToQuery();
					//SetSearchSpec(""Number String With Checksum"",marrSIMIMSI[miCnt][i]);
					if(msSIMLoc == i)
						SetSearchSpec(""Number String"",strNumHandle.substring(0,(strNumHandle.length - intCheckSumLen)));
					else 
						SetSearchSpec(""Number String"",strNumHandle);
					ExecuteQuery();
					if(!FirstRecord()) {
						marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][i];
						mbError = true;
						continue;
							}
				//Checking  whether some or all  number's are already received.
				else
				{
				if(bcNumEnqUpdate.GetFieldValue(""Status"")!= TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""WITH SIM SUPPLIER""))
				{
				marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder003"",marrSIMIMSI[miCnt][0]);
				mbError = true;
				}
				}	
				}
			    }
		        }	
			
/*			ClearToQuery();
			SetSearchSpec(""Number String With Checksum"",msSIM);
			ExecuteQuery();
			
			if(FirstRecord()) {
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",GetFieldValue(""Id""));
				ExecuteQuery();
				var mblnIsRecord = FirstRecord();
				var blnChkNumExists = false;
				while(mblnIsRecord) {
					for(var i = 0;i<getArrayLength(marrSIMIMSI[miCnt]);i++) {
						if(marrSIMIMSI[miCnt][i] == GetFieldValue(""Number String With Checksum"")) {
							blnChkNumExists = true;
							break;
						}
					}
					if(blnChkNumExists = false) {
						marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][i];
						mbError = true;
						continue;
					}
					mblnIsRecord = NextRecord();
				}
			}
		}*/

	
		//marrOrdCnct[miCnt] = mpsSIM.GetProperty(msSIM);
//abobe 1.2
//below 1.2
/*
		marrOrdCnct[miCnt] = mpsSIM.GetProperty(msSIMNoCS);
		
	}
			
	   		//Checking   whether all  Paper Item Values  are retrieved or not  KT 30-05-06
			for(var i=0;i<getArrayLength(marrOrdCnct);i++)
	   		var temp = marrOrdCnct[i];
	   		var miNumCnt = 0;
	  		for(miCnt =0;miCnt < getArrayLength(marrSIMIMSI);miCnt++) {
		 	var SImNum = marrSIMIMSI[miCnt][0];
			//if(getArrayLength(marrSIMIMSI[miCnt])< (getArrayLength(marrNumTypes)+2))
			if(getArrayLength(marrSIMIMSI[miCnt])< (getArrayLength(marrNumTypes)))
			{
			//var arrLengthDiff = (getArrayLength(marrNumTypes)+2)-getArrayLength(marrSIMIMSI[miCnt]);
			//var arrLengthDiff = (getArrayLength(marrNumTypes))-getArrayLength(marrSIMIMSI[miCnt]);
			var PprItemName ="""";
			/*if(arrLengthDiff > 1)
			{*/
//abobe 1.2
//below 1.2	
/*		
			for(var j=getArrayLength(marrSIMIMSI[miCnt]);j<getArrayLength(marrNumTypes);j++)
			{
			//var PprItemName ="""";
			//PprItemName = marrNumTypes[j-2]+ ""/""+marrNumTypes[j-1];
			if(PprItemName== """")
			{
            PprItemName= marrNumTypes[j];
			}
			else
			{
			PprItemName=PprItemName+"",""+marrNumTypes[j];
			}
			}
			marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder002"",PprItemName,SImNum)+ "":"";	
			mbError = true;
			}
			/*else
			{
			PprItemName = marrNumTypes[getArrayLength(marrNumTypes)-1];
			marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder002"",PprItemName,SImNum)+ "":"";
			mbError = true;
			}
			}*/
			//Checking for the length of paper items retrieved
//above 1.2 
//below 1.2
/*
			for(miNumCnt = 2;miNumCnt < getArrayLength(marrSIMIMSI[miCnt]);miNumCnt++) {
			msNumber = marrSIMIMSI[miCnt][miNumCnt];
			var testlength = mpsPprItem.GetProperty(marrNumTypes[miNumCnt-2]);
			var numlength = msNumber.length;
			//if(msNumber.length != mpsPprItem.GetProperty(marrNumTypes[miNumCnt-2])){// changed as per new file format
				if(msNumber.length != mpsPprItem.GetProperty(marrNumTypes[miNumCnt])){ 
				marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSORD018"",marrNumTypes[miNumCnt],msNumber,SImNum) + "":"";	
				mbError = true;
				continue;
			} 
		    }
		    }
	        } catch(e) {
		    mbError = true;
		    if(strErrVal != """") {
			throw (e);
		    } else {
			var temp = e.errText;
			marrError[miErrCnt++] =  e.errText;	
		    }
		
	        } finally {
		    bcOrderLineNum	= null;
		    bcOrderLine		= null;
		    bcOrderHdr		= null;
		    boOrder			= null;
		    mpsSIM			= null;
		    mpsIMSI			= null;
		    mpsPprItem		= null;
		    psError			= null;
	        }
	        //return bcOrderHdr.GetFieldValue(""Id"");
	        return (!mbError);
*/
//above 1.2
            }
"/**************************************************************************************
* Name          : SIM Order Business Service ValidateOrder Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 27/07/2005    1.1         MBT             Updated (Changes for    27/07/2005		  *	
*											mulitples IMSI in same file)   

* 20060710      1.2         Kalyana         Siebel ES SCR1, Objects Destroyed  
* 20061202      1.3         Kalyana         Added validation for invalid batch             
**************************************************************************************/

function ValidateOrderNew(&marrInputParams,&marrSIMIMSI,&marrNumTypes,&marrOrdCnct,&mpsPprId,&marrError)
{
	
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderHdr 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrderLine			= boOrder.GetBusComp(""RMS SIM Order Line"");
	var bcOrderLineNum		= boOrder.GetBusComp(""RMS SIM Order Line Num Info"");
	var boNumEnq 			= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumEnqUpdate	= boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update"");
	var boOrderQuery		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	= boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");
	var bcOrdFile			= boOrderQuery.GetBusComp(""RMS SIM Order File Info Query"");
//  var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Number Paper Item"");
	var mbIsRecord 			= false;
	var mpsSIM 				= TheApplication().NewPropertySet();
	var mpsIMSI 			= TheApplication().NewPropertySet();
	var miCnt 				= 0;
	var msNumber 			= """";
	var miErrCnt			= 0;
	var mpsPprItem 			= TheApplication().NewPropertySet();
	var strStatus 			= """";
	var strErrVal			= """";
	var psError 			= TheApplication().NewPropertySet();
	var marrNumIMSI			= new Array();
//  var marrOrdCnct = new Array();
	var strOrderId			= """";
	var strOrderLineId		= """";
	var strNumHandle		= """";
	var intCheckSumLen		= 1;
	var mbError 			= false;
	var msSIM="""";

//below  1.2	
	var bcPaperItem	= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");
//above  1.2
	try {


	with(bcOrdFile) {
		ActivateField(""SIM Order Line Id"");
		ActivateField(""SIM Order Id"");
		ClearToQuery();
		SetSearchSpec(""BatchNumber"",marrNumTypes[iBatchNum]);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord()){
			strOrderId 		= GetFieldValue(""SIM Order Id"");
			strOrderLineId	= GetFieldValue(""SIM Order Line Id"");
		}
	}
	//Query the database with the Order Number				
	with(bcOrderHdr) {
		SetViewMode(AllView);
		ActivateField(""Id"");
		ActivateField(""Status"");
		ActivateField(""Order Number"");
		ActivateField(""PO Requisition Ref Number"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId) 
		//SetSearchSpec(""Revision Number"",1);
  	    //SetSearchSpec(""Profile"",marrInputParams[""Profile""]); 
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]);
		//ExecuteQuery();
		ExecuteQuery(ForwardOnly);
	}
//  If query is returning no records then set the Comments property and exit
	if(!bcOrderHdr.FirstRecord()) 
	{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",strOrderId);
		marrError[miErrCnt++] = strErrVal;
		return (mbError);
		//TheApplication().RaiseErrorText(strErrVal);
	} 
	else if(bcOrderHdr.GetFieldValue(""Status"") == TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED"")) 
	{
		//strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD017"",bcOrderHdr.GetFieldValue(""Order Number""));
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder011"",bcOrderHdr.GetFieldValue(""Order Number""));
		marrError[miErrCnt++] =  strErrVal;
		return (mbError);
		//TheApplication().RaiseErrorText(strErrVal);
	} 
	//else if(bcOrderHdr.GetFieldValue(""PO Requisition Ref Number"") != marrNumTypes[1])
	else if(bcOrderHdr.GetFieldValue(""PO Requisition Ref Number"") != marrNumTypes[iPORefId])
	{
	strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder008"",marrNumTypes[iPORefId],bcOrderHdr.GetFieldValue(""Order Number""));
	marrError[miErrCnt++] =  strErrVal;
	return (mbError);
	}
	else 
	{
		strStatus = bcOrderHdr.GetFieldValue(""Status"");
	}
	
//   Set the Status parameter

	with(bcOrderLine) {
		ActivateField(""Id"");
		ClearToQuery();
		//var temp2 = marrInputParams[""Profile""];
		//var temp4 =	marrInputParams[""Transport_Key""];
		//SetSearchSpec(""SIM Card Config Type"",marrInputParams[""Type""]);
		//SetSearchSpec(""Profile"",marrInputParams[""Profile""]);
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]);
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		//SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		//SetSearchSpec(""Order Line Id"",marrNumTypes[4]);//KT 15-06-06   for  new read
		//SetSearchSpec(""Order Line Id"",strOrderLineId);
		SetSearchSpec(""Id"",strOrderLineId);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
	}
/* 02Nov09: commented as there is no need to check order line as it is not part of the file	
	if(!mbIsRecord) {
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder010"",strOrderLineId);
			marrError[miErrCnt++] = strErrVal;
			return (mbError);
	}
	----------------------------------------------------------------*/
//below 1.2	
	//var bcPaperItem	= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");	
//above 1.2 
//Query the Paper Item table corresponding to the Order Id

	with(bcPaperItem) {
		SetViewMode(AllView);
		ActivateField(""Paper Item Id"");
		ActivateField(""Length"");
		ActivateField(""Paper Item Name"");
		ClearToQuery();
		//ExecuteQuery(1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		//if(!mbIsRecord) return """";
                       }
	
	while(mbIsRecord) 
	{
		mpsPprItem.SetProperty(bcPaperItem.GetFieldValue(""Paper Item Name""),bcPaperItem.GetFieldValue(""Length""));
		mpsPprId.SetProperty(bcPaperItem.GetFieldValue(""Paper Item Name""),bcPaperItem.GetFieldValue(""Paper Item Id""));
		mbIsRecord = bcPaperItem.NextRecord();
	}
	
	with(bcOrderLineNum) 
	{
		//ActivateField(""Assoc Start Id"");
		ActivateField(""Id"");
		ActivateField(""Numbers"");
		ActivateField(""Concatenated Number Types"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Status"");
		ClearToQuery();
		//1.4
		SetSearchSpec(""NumberString"","">='"" + msFileStartNum + ""' AND [NumberString] <= '"" + msFileEndNum +""'"");
		//1.4
		//ExecuteQuery();
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		
	}

/*	with(RMS SIM Number Paper Item) {
		ActivateField(); } */
	var marrCnctNum = new Array();

	while(mbIsRecord) {
		msNumber = bcOrderLineNum.GetFieldValue(""Numbers"");
		marrCnctNum = msNumber.split("" / "");
		
		if(getArrayLength(marrCnctNum)>1) 
		{
//		Checking whether the input numbers are having delimiters. if yes then remove the delimiters
			if(isNaN(ToNumber(marrCnctNum[0])))
				mpsSIM.SetProperty(CleanNumber(marrCnctNum[0]),bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			else {
								
				mpsSIM.SetProperty(marrCnctNum[0],ToString(bcOrderLineNum.GetFieldValue(""Assoc Start Id"")));
			
			}
//		Checking whether the input numbers are having delimiters. if yes then remove the delimiters
			if(isNaN(ToNumber(marrCnctNum[1])))
				mpsIMSI.SetProperty(CleanNumber(marrCnctNum[1]),bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			else
				mpsIMSI.SetProperty(marrCnctNum[1],bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			
		}
		mbIsRecord = bcOrderLineNum.NextRecord();
	}
	//var temp = marrInputParams[""IMSI""];
	//marrNumIMSI = marrInputParams[""IMSI""].split("" / "");
	
	
	
	marrNumIMSI[0] = marrSIMIMSI[0][0];// change
	marrNumIMSI[1] = marrSIMIMSI[0][1];// change
	
	var IMSIRCnt = 0;
	var IMSIR = ""IMSIR"";
	var IMSIR1 = """";
	
	for(IMSIRCnt =0;IMSIRCnt < getArrayLength(marrNumTypes);IMSIRCnt++)
	{
	
	IMSIR1 = marrNumTypes[IMSIRCnt];
	if (IMSIR1 == IMSIR)
	{
	msSIMLoc = 2;
	}
	}
	
	
	//var msSIMLoc = getArrayLength(marrNumIMSI);
	//checking for SIM and IMSI numbers retrieved
	for(miCnt =0;miCnt < getArrayLength(marrSIMIMSI);miCnt++) 
	{
		if(miCnt == 0) //1.4 for avoiding error in getArrayCnt
			marrError[miCnt] = """";
	    var msSIM = marrSIMIMSI[miCnt][msSIMLoc];
		//var msSIM = marrSIMIMSI[miCnt][2];
		var msSIMNoCS = msSIM.substring(0,msSIM.length-1);
		
		
// Checking the SIM,Checksum,IMSI & SIM/IMSI Association

	//below 1.3
		if(!mpsSIM.PropertyExists(msSIMNoCS))
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder012"",msSIMNoCS,marrNumTypes[iOrdLineId]);
			marrError[miErrCnt++] = strErrVal;
			mbError = true;
	    }
	//above 1.3	
//		var temp  = msSIM.substring(msSIM.length-1);
//		var temp1 =	ChecksumNumber(msSIMNoCS);
		
/*		if(msSIM.substring(msSIM.length-1) != ChecksumNumber(msSIMNoCS))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD011"") + msSIM;
			mbError = true;
			continue;		
		}
		if(!mpsIMSI.PropertyExists(marrSIMIMSI[miCnt][0]))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD012"") + marrSIMIMSI[miCnt][0];
			mbError = true;
			continue;
		
		}
		if(mpsSIM.GetProperty(msSIMNoCS) != (mpsIMSI.GetProperty(marrSIMIMSI[miCnt][0])))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][0];
			mbError = true;
			continue;		
		}*/
		

            //Check whether the numbers exists in RMS system
		    with(bcNumEnqUpdate) {
				//ActivateField(""Number String With Checksum"");
				ActivateField(""Number String"");
				ActivateField(""Status"");
				for(var i = 0;i<getArrayLength(marrSIMIMSI[miCnt]);i++) {
					if(msSIMLoc >= i) {
						strNumHandle = marrSIMIMSI[miCnt][i];
						//strNumHandle = marrSIMIMSI[miCnt][0];
						ClearToQuery();
						//SetSearchSpec(""Number String With Checksum"",marrSIMIMSI[miCnt][i]);
						if(msSIMLoc == i)
							SetSearchSpec(""Number String"",strNumHandle.substring(0,(strNumHandle.length - intCheckSumLen)));
							//SetSearchSpec(""Number String"",strNumHandle);  // Change for New  read 
						else 
							//SetSearchSpec(""Number String"",strNumHandle.substring(0,(strNumHandle.length - intCheckSumLen)));
							SetSearchSpec(""Number String"",strNumHandle);
						//ExecuteQuery();
						ExecuteQuery(ForwardOnly);
						if(!FirstRecord()) {
							marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD016"",marrSIMIMSI[miCnt][i]);
							mbError = true;
						} //End of if(!FirstRecord())
						//Checking  whether some or all  number's are already received.
						else
						{
							if(bcNumEnqUpdate.GetFieldValue(""Status"")!= TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""WITH SIM SUPPLIER""))
							{
								marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder003"",marrSIMIMSI[miCnt][0]);
								mbError = true;
							}
						} //if	
					}//if
					if(miErrCnt>iArrErrCnt) {
						TheApplication().RaiseErrorText(""ERROR"");
					}
			 	}//for
		 	}//with
			
/*			ClearToQuery();
			SetSearchSpec(""Number String With Checksum"",msSIM);
			ExecuteQuery();
			
			if(FirstRecord()) {
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",GetFieldValue(""Id""));
				ExecuteQuery();
				var mblnIsRecord = FirstRecord();
				var blnChkNumExists = false;
				while(mblnIsRecord) {
					for(var i = 0;i<getArrayLength(marrSIMIMSI[miCnt]);i++) {
						if(marrSIMIMSI[miCnt][i] == GetFieldValue(""Number String With Checksum"")) {
							blnChkNumExists = true;
							break;
						}
					}
					if(blnChkNumExists = false) {
						marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][i];
						mbError = true;
						continue;
					}
					mblnIsRecord = NextRecord();
				}
			}
		}*/

	
		//marrOrdCnct[miCnt] = mpsSIM.GetProperty(msSIM);
		marrOrdCnct[miCnt] = mpsSIM.GetProperty(msSIMNoCS);
		var test786 = getArrayLength(marrOrdCnct);
		
	}
			
	   		//Checking   whether all  Paper Item Values  are retrieved or not  KT 30-05-06
			for(var i=0;i<getArrayLength(marrOrdCnct);i++)
			{
	   			var temp = marrOrdCnct[i];
	   			var miNumCnt = 0;
	  			for(miCnt =0;miCnt < getArrayLength(marrSIMIMSI);miCnt++) {
				var SImNum = marrSIMIMSI[miCnt][2];
				//if(getArrayLength(marrSIMIMSI[miCnt])< (getArrayLength(marrNumTypes)+2))
				if(getArrayLength(marrSIMIMSI[miCnt])< (getArrayLength(marrNumTypes)-iPprItemIndxCnt))//KT 23-06-06
				{
					//var arrLengthDiff = (getArrayLength(marrNumTypes)+2)-getArrayLength(marrSIMIMSI[miCnt]);
					//var arrLengthDiff = (getArrayLength(marrNumTypes))-getArrayLength(marrSIMIMSI[miCnt]);
					var PprItemName ="""";
					/*if(arrLengthDiff > 1)
					{*/
					for(var j=(getArrayLength(marrSIMIMSI[miCnt]))+iPprItemIndxL;(j<getArrayLength(marrNumTypes)-iPprItemIndxR);j++)//KT 23-06-06
					{
						//var PprItemName ="""";
						//PprItemName = marrNumTypes[j-2]+ ""/""+marrNumTypes[j-1];
						if(PprItemName== """")
						{
            				PprItemName= marrNumTypes[j];
						}
						else
						{
							PprItemName=PprItemName+"",""+marrNumTypes[j];
						}
						marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder002"",PprItemName,SImNum)+ "":"";	
						mbError = true;
						if(miErrCnt>iArrErrCnt) {
							TheApplication().RaiseErrorText(""ERROR"");
						}
					}
				}
				/*else
				{
					PprItemName = marrNumTypes[getArrayLength(marrNumTypes)-1];
					marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder002"",PprItemName,SImNum)+ "":"";
					mbError = true;
				}
				}*/
				//Checking for the length of paper items retrieved
				for(miNumCnt = 3;miNumCnt < getArrayLength(marrSIMIMSI[miCnt]);miNumCnt++) {
					msNumber = marrSIMIMSI[miCnt][miNumCnt];
					//if(msNumber.length != mpsPprItem.GetProperty(marrNumTypes[miNumCnt-2])){// changed as per new file format
					var msPprItemCaps = marrNumTypes[miNumCnt+iPprItemIndxL];
					var temp2	= msPprItemCaps.toUpperCase();
					var temp = mpsPprItem.GetProperty(msPprItemCaps.toUpperCase());
					
					if(msNumber.length != mpsPprItem.GetProperty(msPprItemCaps.toUpperCase()))
					{ 
						if(msPprItemCaps.toUpperCase() != ""ACTIVATION_CODE"")
						{
							marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSORD018"",marrNumTypes[miNumCnt+iPprItemIndxL],msNumber,SImNum) + "":"";	
							mbError = true;
							continue;
						}
					} 
					if(miErrCnt>iArrErrCnt) {
						TheApplication().RaiseErrorText(""ERROR"");
					}
		    	}
		    }
	        } 
			}catch(e) {
				mbError = true;
			    if(strErrVal != """") {
					//1.4 throw (e);
					marrError[miErrCnt++] =  e.errText;	
			    } else {
					marrError[miErrCnt++] =  e.errText;	
			    }
		
	        } finally {
			    bcOrderLineNum	  = null;
			    bcOrderLine		  = null;
			    bcOrderHdr		  = null;
	//below 1.2
			    bcNumEnqUpdate   = null;
				bcOrderLineQuery = null;
				bcPaperItem      = null;
				boNumEnq         = null;
				boOrderQuery     = null;
	//above 1.2
				boOrder			 = null;
			    mpsSIM			 = null;
			    mpsIMSI			 = null;
			    mpsPprItem		 = null;
			    psError		  	 = null;
	        }
	        //return bcOrderHdr.GetFieldValue(""Id"");
	        return (!mbError);
            }
"/*----------------------------------------------------------------------
Name                : [EECC BS IF COMMON], [WriteToFile]
Created By          : Prasad Bodas
Description         : Function to write plain text to debug log file
Input Parameters    : String to be written to file
Output Parameters   : none
-----------------------------------------------------------------------
Change History
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
20031225       | 1.00 | Prasad | Creation
---------------+------+--------+----------------------------------------------
*/
function WriteToFile(msgstr,msFileSuffix){
	var msFileName = ""debug_BS_IF_COMMON"" + msFileSuffix + "".txt"";
	var fptr=Clib.fopen(msFileName,""a"");
	Clib.fputs(msgstr+""\n\r"",fptr);
	Clib.fclose(fptr);
}
"var miFileBatchSize	= ToNumber(TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""BATCH_SIZE""));
var mbFilePos		= false;
var mbBatchLoop		= true;
var msFileStartNum	= """";
var msFileEndNum	= """";
var sArrErrCnt			= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""ERROR_CNT"");
var sPORefId			= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_POREFID"");
var sOrdLineId			= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_ORD_LINEID"");
var sPprItemIndxL		= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_PPRITMIDXL"");
var sPprItemIndxR		= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_PPRITMIDXR"");
var sPprItemIndxCnt		= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_PPRITMIDXCNT"");
var sSIMCfg				= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_SIMCFG"");
var sQty				= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_QTY"");

var iArrErrCnt			= ToNumber(sArrErrCnt.substring(2));
var iPORefId			= ToNumber(sPORefId.substring(2));
var iOrdLineId			= ToNumber(sOrdLineId.substring(2));
var iPprItemIndxL		= ToNumber(sPprItemIndxL.substring(2));
var iPprItemIndxR		= ToNumber(sPprItemIndxR.substring(2));
var iPprItemIndxCnt		= ToNumber(sPprItemIndxCnt.substring(2));
var ipSIMCfg			= ToNumber(sSIMCfg.substring(2));
var ipQty				= ToNumber(sQty.substring(2));"
"/**************************************************************************************
* Name          : Call Read  Order Files Function 				  	      *
* Author        : Kalyana											  * 
* Description 	: This function  will read  all the files present in  one specific folder in server								  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 20060610	     1.0  		Kalyana      			                                  *
* 20060710       1.1        Kalyana          Siebel ES SCR1, Objects Destroyed
* 20060804       1.2        Kalyana          Siebel ES SCR 20060803, Objects Destroyed
* 20060823       1.3        Kalyana          Added code to Reset Arrays to import multiple 
											 SIM Order Files
**************************************************************************************/

function CallReadOrderFiles(fileArray,Inputs)
{
    var marrOrdCnct 	= new Array();
	var marrInputParams = new Array();
	var marrError 		= new Array();
	var marrSIMIMSI		= new Array();
	var marrNumberType	= new Array();
	//var fileArray     = new Array();
	var intReturn		= CancelOperation;
	var mpsPprId		= TheApplication().NewPropertySet();
	var msFullFileName  = """";
	var msFileName      = """";
	var strErrVal		= """";
	var mbResult		= false;
	//var Inputs 			= TheApplication().NewPropertySet();
	var Outputs         = TheApplication().NewPropertySet();
    var fileCount=0;
	var count= getArrayLength(fileArray);		
	var boOrderQuery 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	    = boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");
	var strOrderId ="""";
	var strorderLineId ="""";
	var mbIsRecord = false;
	var filePath = Inputs.GetProperty(""DirectoryPath"");
	var filePathOut = Inputs.GetProperty(""DirectoryPathOut"");
	var fileName= """";
	var strComments = """";
	//1.4
	var mpFilePos;
	//1.4
	for(fileCount=0;fileCount<getArrayLength(fileArray);fileCount++){
		
	
           	if((fileArray[fileCount])!= "filelist.lst"")
			{
			while(mbBatchLoop) {
				msFileName = fileArray[fileCount];
				msFullFileName = filePath + fileArray[fileCount];
				mbResult = 	ReadOrderFileNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrError,msFullFileName,marrNumberType,mpFilePos);
				if(mbResult){
			   		strErrVal = UpdateNumbersNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrNumberType,msFullFileName);
				            } //End of if(mbResult)
				 
		//-----------------------------------------------------------------------------
		//enable the following script, if an error file is required to be generated          // 01:07:2005
		//----------------------------------------------------------------------------
			if(strErrVal != """" || getArrayLength(marrError) > 0) 
			//{
			/*	marrError[getArrayLength(marrError)] = strErrVal;
				GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);	
			    	
			}
			else //commented for read tests*/
			      {
					if(marrError[0] != """") {
					GenerateErrorFileNew(strOrderId,marrInputParams,marrError,msFileName,marrNumberType,Inputs,Outputs);
					with(bcOrderLineQuery) 
		             {
					   ActivateField(""Order Id"");
					   ClearToQuery();
				       //SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
				       //SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
			        	SetSearchSpec(""Order Line Id"",marrNumberType[iOrdLineId]);
				        ExecuteQuery(ForwardOnly);
				        mbIsRecord = FirstRecord();
				        /*if(!mbIsRecord) {
					      strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
					      TheApplication().RaiseErrorText(strErrVal);
			            }*/ 
				        if(mbIsRecord)
						{
							strorderLineId = GetFieldValue(""Id"");
							strOrderId = GetFieldValue(""Order Id"");
							var strComments = Outputs.GetProperty(""strErrVal"");
						    UpdateFile(""I"",strComments,msFullFileName,strOrderId,strorderLineId);
					    }// End of if(mbIsRecord)
	             	   }//End of with(bcOrderLineQuery) 
				        //strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD019"");
				        //TheApplication().RaiseErrorText(Outputs.GetProperty(""strErrVal""));
					    /*var strComments = Outputs.GetProperty(""strErrVal"");
						UpdateFile(""I"",strComments,msFullFileName,strOrderId);*/
						mbFilePos = false;
				       } //End of if(marrError[0] != """")
				       } //End of if(strErrVal != """" || getArrayLength(marrError) > 0) 
			           	// below 1.3
						//Code to reset arrays
			            //after last file in filelist is processed no need to reset the arrays.
			            //1.4
			            if(!mbFilePos) {
			       		break;
			       	}else {
			       		marrOrdCnct			= null;
			       		marrInputParams 	= null;
			       		marrError			= null;
			       		marrSIMIMSI	     	= null;
			       		marrOrdCnct 		= new Array();
						marrInputParams 	= new Array();
						marrError 			= new Array();
						marrSIMIMSI	     	= new Array();
			       	}
			       		
			        } // end while
			            //1.4
					    if (fileCount<getArrayLength(fileArray)-1)
							{
							marrError 	     = null;
					        marrSIMIMSI	     = null;
					        marrNumberType	 = null;
						    marrOrdCnct 	 = null;
				  	        marrInputParams  = null;
				  	        msFileStartNum	 = """";
				  	        msFileEndNum     = """";
							marrOrdCnct 	 = new Array();
							marrInputParams  = new Array();
							marrError 		 = new Array();
				            marrSIMIMSI		 = new Array();
					        marrNumberType	 = new Array();
							}
							//above 1.3
					
				      } // End of if((fileArray[fileCount])!= "filelist.lst"")
			         Inputs.SetProperty(""msFileName"",msFileName);
			         FileOperations(Inputs,Outputs);
			         msFullFileName = """";
			       	
			        }//End of for
					//Inputs.SetProperty(""msFileName"","filelist.lst"");
					//FileOperations(Inputs,Outputs);	
				    //below 1.1
					bcOrderLineQuery = null;
					boOrderQuery     = null;
				    //above 1.1
					marrOrdCnct 	 = null;
					marrInputParams  = null;
					marrError 	     = null;
					marrSIMIMSI	     = null;
					marrNumberType	 = null;
					mpsPprId         = null;
				    //below 1.2
				   Outputs           = null;
				   //above 1.2
	} //End of function"
"/**************************************************************************************
* Name          : SIM Order Business Service ValidateOrder Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/
function CheckSequence(bcNumberEnquiry,bcOrdLineNum,&marrSeqChek,cheqSeqArgs) {
	var blnIsRecord;
	var mblnSplit = false;
	var mintRecCnt = 0 ;
	mblnSplit= (cheqSeqArgs.GetProperty(""mblnSplit"") == ""true"")?true:false;//KT 21-042006
	mintRecCnt=ToInteger(cheqSeqArgs.GetProperty(""mintRecCnt""));//KT 21-042006
	with(bcNumberEnquiry) {
		ActivateField(""Type"");
		ActivateField(""Number"");
		ActivateField(""Number String With Checksum"");
		ActivateField(""Generation Level"");
		ClearToQuery();
		SetSearchSpec(""Assoc Start Id"",bcOrdLineNum.GetFieldValue(""SIM Id""));
//		SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI""));
		ExecuteQuery();
		blnIsRecord = FirstRecord();
		if(mintRecCnt != 0) {
			while(blnIsRecord) {
				if(GetFieldValue(""Number"") != (ToInteger(marrSeqChek[GetFieldValue(""Type"")])+1)) 
					 {
					mblnSplit = true;
					break;
				}
				blnIsRecord = NextRecord();
			}
		} else
			mblnSplit = true;

		blnIsRecord = FirstRecord();
		
		while(blnIsRecord){
			marrSeqChek[GetFieldValue(""Type"")] = GetFieldValue(""Number"");
			blnIsRecord = NextRecord();
		}
	}


       cheqSeqArgs.SetProperty(""mblnSplit"",mblnSplit);// KT 21-04-2006
       cheqSeqArgs.SetProperty(""mintRecCnt"",mintRecCnt);//KT 21-04-2006

}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Generate the Checksum number for validation						  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana      Siebel ES SCR1, Objects Destroyed* 
**************************************************************************************/
function ChecksumNumber(msNumber)
{

/*	var miChecksum1 	= 0;
	var miChecksum2 	= 0;
	var miNumCount 		= 0;
	var miLength 	 	= ToInteger(msNumber.length);
	
//  Removing the first 7 digits of the No. which are fixed digits

	for(miNumCount=7;miNumCount<miLength;miNumCount++)
		miChecksum1 = miChecksum1 + ToInteger(msNumber.charAt(miNumCount));
	miChecksum1 = miChecksum1 % 10;
	for(miNumCount=7;miNumCount<miLength; miNumCount=miNumCount+2)
		miChecksum2 = miChecksum2 + ToInteger(msNumber.charAt(miNumCount));
	miChecksum2 = miChecksum2 * 3;
	miChecksum2 = miChecksum2 % 10;
//  msNumber = msNumber + miChecksum1 + miChecksum2;
	return(ToString(miChecksum1) + ToString(miChecksum2)); 
*/

	var boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumEnqUpdate	= boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update"");
//below 1.1 
	var intReturn;
//above 1.1
	with(bcNumEnqUpdate)
	{
		SetViewMode(3);
		ActivateField(""CheckSum1"");
		ActivateField(""Number String without Delimiter"");
		ActivateField(""Number String"");
		ClearToQuery();
	    SetSearchSpec(""Number String"",msNumber);
		ExecuteQuery();
	    var NumStr = bcNumEnqUpdate.GetFieldValue(""Number String"");
	    var NumStr1 = bcNumEnqUpdate.GetFieldValue(""Number String without Delimiter"");
  	
		if (FirstRecord())
		{
		 	var Chksum = bcNumEnqUpdate.GetFieldValue(""CheckSum1"");
//below 1.1		 	
			//return(bcNumEnqUpdate.GetFieldValue(""CheckSum1""));
			intReturn  =  bcNumEnqUpdate.GetFieldValue(""CheckSum1"");
//above 1.1
		}	
		else
//below 1.1
			//return false;
			intReturn  = "false"";
//above 1.1
	}
//below 1.1
       bcNumEnqUpdate = null;
       boNumEnq       = null;
       return(intReturn);
//above 1.1
}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Clean the number from any delimiters								  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/
function CleanNumber(msNumberString) 
{
	var msOutString = """";
	var miCount = 0;
	
	for(miCount = 0; miCount < msNumberString.length;miCount++) 
	{
		if(Clib.isdigit(msNumberString.charAt(miCount)))
			msOutString += msNumberString.charAt(miCount);
	}
	
	return msOutString;
}
function FileOperations(Inputs,Outputs)
{
//FilePath1, FileName1 is the source file
//default operation is delete
//if FilePath2, FileName2 is the specified as destination path and filename then copy there before deleting
	var msPath1 = Inputs.GetProperty(""DirectoryPath"");
	var msName1 = Inputs.GetProperty(""msFileName"");
	var msPath2 = Inputs.GetProperty(""DirectoryPathOut"");
	var msName2 = Inputs.GetProperty(""msFileName"");
	if("""" != (msPath2+msName2)) {//destination specified
		var iRet = Clib.rename(msPath1+msName1,msPath2+msName2);
		if((iRet != 0) && (msName2 != """")) {
			var dDate = new Date();
			Clib.rename(msPath1+msName1,msPath2+msName2+""_""+dDate.getTime());
		}
	} else
		Clib.remove(msPath1+msName1);
	return CancelOperation;
}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Siebel ES SCR1, Objects Destroyed
* 20060712      1.2         Kalyana         Commented  Entire  Code
**************************************************************************************/

function GenerateErrorFile(sOrderId,&marrInputParams,&marrError,msInpFileName,marrNumberType,Inputs,Outputs)
{
//below 1.2
/*
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderHdr 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Paper Item""); 
//	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");
	var mbIsPprItem			= false;  													
	var msPprItem			= """";														
	
	var mfpOutputFile;	
	var miCnt;
	var msErrorFile         = """";
	var msFile              = """";
	var strErrVal           = """";

//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
	with(bcOrderHdr)
	{
    	SetViewMode(AllView);
//		SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Id"", sOrderId);
    	ClearToQuery();
		ExecuteQuery(ForwardOnly);
         {
           with(bcOrdPprItem) 
            {
    		 SetViewMode(AllView);
			 ActivateField(""Paper Item Name"");
			 ClearToQuery();
			 ExecuteQuery();
			 mbIsPprItem = FirstRecord();
			
			while(mbIsPprItem) 
			 {
				if(msPprItem == """")
					msPprItem = bcOrdPprItem.GetFieldValue(""Paper Item Name"");
				else
		     		msPprItem += ""/"" + bcOrdPprItem.GetFieldValue(""Paper Item Name"");
					
				mbIsPprItem = bcOrdPprItem.NextRecord();	
			 }
		}
	}	
}	
//-------------------------------------------------------------------------------------
	try
	{
		var mboSysPref = TheApplication().GetBusObject(""System Preferences"");
		var mbcSysPref = mboSysPref.GetBusComp(""System Preferences"");
		
		with(mbcSysPref) 
		{
			ActivateField(""Value"");
			ClearToQuery();
			SetSearchSpec(""Name"",""RMS_SIMORDER_ERROR_FILEPATH""); //  VIBO_SIM_ERROR_FILEPATH(Dtd: 01:07:2005)
			ExecuteQuery(ForwardOnly);
			if(FirstRecord()) 
			{
				msFile = GetFieldValue(""Value"");
			} 
		}
		
		 //msErrorFile = msInpFileName.substring(0,msInpFileName.lastIndexOf(""\\"")) + ""_ERROR.log"";// for Windows
		//msErrorFile = msInpFileName.substring(msInpFileName.lastIndexOf(""/"")+1)+ ""_ERROR.log"";// for UNIX
		//msFile +=  msErrorFile;
          //msErrorFile = ""test.log"";
		  
		msFile =  msFile+msInpFileName+""_.log"";
	  //msFile = msInpFileName + ""_ERROR.err"";
      //UpdateFile(""O"","""",msErrorFile,marrInputParams[""P0_ref_number""]);
    	strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder004"",msFile);
		mfpOutputFile = Clib.fopen(msFile,""a"");
		
		Clib.fputs(""*********************************************\n"", mfpOutputFile);
		Clib.fputs(""*             HEADER DESCRIPTION        * \n"", mfpOutputFile);
		Clib.fputs(""*********************************************\n"", mfpOutputFile);
		//Clib.fputs(""\n"", mfpOutputFile);
		/*Clib.fputs(""Customer: STC\n""  , mfpOutputFile);
		Clib.fputs(""P0_ref_number: "" + marrNumberType[1] + ""\n"", mfpOutputFile);
		Clib.fputs(""Qty: "" + marrNumberType[2] + ""\n"", mfpOutputFile);
		Clib.fputs(""PartNo_SIMCardConfigNo: "" + marrNumberType[3] + ""\n"", mfpOutputFile);
		Clib.fputs(""Batch: "" + marrNumberType[4] + ""\n"", mfpOutputFile);*/
//above 1.2
//below 1.2
/*		
		Clib.fputs(""P0_ref_number: "" + marrInputParams[""PO_ref_number""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Quantity: "" + marrInputParams[""Quantity""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Type: "" + marrInputParams[""Type""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Memory: "" + marrInputParams[""Memory""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Profile: "" + marrInputParams[""Profile""]+ ""\n"", mfpOutputFile);
		Clib.fputs(""Graph_ref: "" + marrInputParams[""Graph_ref""] + ""\n"", mfpOutputFile); // Change
//		Clib.fputs(""Artwork: ""+ bcOrdLine.GetFieldValue(""ImageFileName"") + ""\n"", mfpOutputFile); 
		Clib.fputs(""Artwork: "" + marrInputParams[""Artwork""] + ""\n"", mfpOutputFile); 	// Change
        Clib.fputs(""Batch: "" + marrInputParams[""Batch""] + ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
		Clib.fputs(""Keyname: "" + marrInputParams[""Keyname""]+ ""\n"", mfpOutputFile);
		//Clib.fputs(""Transport_Key: "" + marrInputParams[""Transport_Key""]+ ""\n"", mfpOutputFile);
//		Clib.fputs(""Transport_3GOp_In: "" + marrInputParams[""Transport_3GOp_In""]+ ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
        Clib.fputs(""Address1: "" + marrInputParams[""Address1""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Address2: "" + marrInputParams[""Address2""] + ""\n"", mfpOutputFile);
		//Clib.fputs(""Address3: "" + marrInputParams[""Address3""] + ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""*            INPUT VARIABLES            *       \n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""Var_In_List: ""+ ""\n"", mfpOutputFile);
		Clib.fputs(""IMSI: ""+ marrInputParams[""IMSI""] + ""\n"", mfpOutputFile);
		//Clib.fputs(""Ser_Nb: ""+ marrInputParams[""Ser_Nb""] + ""\n"", mfpOutputFile);
		Clib.fputs(""ICCID: ""+ marrInputParams[""ICCID""] + ""\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""*            OUTPUT VARIABLES           *\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""Var_Out: ICCID,IMSI, ""+ msPprItem + ""\n"", mfpOutputFile); 					  // Changed 07:06:2005
		
//		Clib.fputs(""Var_Out: PIN1/PUK1/PIN2/PUK2/KI/ADM1\n"", mfpOutputFile);

		for(miCnt = 0; miCnt < getArrayLength(marrError);miCnt++) 
		{
			if(marrError[miCnt] != """") 
				Clib.fputs(marrError[miCnt] + ""\n"",mfpOutputFile);
		}
			
	} 
	catch(e) 
	{
		throw (e);
		
		

}
	finally 
	{
		if(mfpOutputFile != null)
		Clib.fclose(mfpOutputFile);
		Outputs.SetProperty(""strErrVal"",strErrVal);
//below 1.1		
		bcOrdPprItem  = null;
		bcOrderHdr    = null;
		boOrder       = null;
//above 1.1		
		mbcSysPref	  = null;
		mboSysPref	  = null;
	}*/
//above 1.2
}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Siebel ES SCR1, Objects Destroyed
**************************************************************************************/

function GenerateErrorFileNew(sOrderId,&marrInputParams,&marrError,msInpFileName,marrNumberType,Inputs,Outputs)
{
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderHdr 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Paper Item""); 
//	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");
	var mbIsPprItem			= false;  													
	var msPprItem			= """";														
	
	var mfpOutputFile;	
	var miCnt;
	var msErrorFile         = """";
	var msFile              = """";
	var strErrVal           = """";

//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
	with(bcOrderHdr)
	{
    	SetViewMode(AllView);
//		SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Id"", sOrderId);
    	ClearToQuery();
		ExecuteQuery(ForwardOnly);
         {
           with(bcOrdPprItem) 
            {
    		 SetViewMode(AllView);
			 ActivateField(""Paper Item Name"");
			 ClearToQuery();
			 ExecuteQuery();
			 mbIsPprItem = FirstRecord();
			
			while(mbIsPprItem) 
			 {
				if(msPprItem == """")
					msPprItem = bcOrdPprItem.GetFieldValue(""Paper Item Name"");
				else
		     		msPprItem += ""/"" + bcOrdPprItem.GetFieldValue(""Paper Item Name"");
					
				mbIsPprItem = bcOrdPprItem.NextRecord();	
			 }
		}
	}	
}	
//-------------------------------------------------------------------------------------
	try
	{
		var mboSysPref = TheApplication().GetBusObject(""System Preferences"");
		var mbcSysPref = mboSysPref.GetBusComp(""System Preferences"");
		
		with(mbcSysPref) 
		{
			ActivateField(""Value"");
			ClearToQuery();
			SetSearchSpec(""Name"",""RMS_SIMORDER_ERROR_FILEPATH""); //  VIBO_SIM_ERROR_FILEPATH(Dtd: 01:07:2005)
			ExecuteQuery(ForwardOnly);
			if(FirstRecord()) 
			{
				msFile = GetFieldValue(""Value"");
			} 
		}
		
		 //msErrorFile = msInpFileName.substring(0,msInpFileName.lastIndexOf(""\\"")) + ""_ERROR.log"";// for Windows
		//msErrorFile = msInpFileName.substring(msInpFileName.lastIndexOf(""/"")+1)+ ""_ERROR.log"";// for UNIX
		//msFile +=  msErrorFile;
          //msErrorFile = ""test.log"";
		  
		msFile =  msFile+msInpFileName+""_err.log"";
	  //msFile = msInpFileName + ""_ERROR.err"";
      //UpdateFile(""O"","""",msErrorFile,marrInputParams[""P0_ref_number""]);
    	strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder004"",msFile);
		mfpOutputFile = Clib.fopen(msFile,""a"");
		
		Clib.fputs(""*********************************************\n"", mfpOutputFile);
		Clib.fputs(""*             HEADER DESCRIPTION        * \n"", mfpOutputFile);
		Clib.fputs(""*********************************************\n"", mfpOutputFile);
		//Clib.fputs(""\n"", mfpOutputFile);
		Clib.fputs(""Customer: STC\n""  , mfpOutputFile);
		Clib.fputs(""P0_ref_number: "" + marrNumberType[iPORefId] + ""\n"", mfpOutputFile);
		Clib.fputs(""Qty: "" + marrNumberType[ipQty] + ""\n"", mfpOutputFile);
		Clib.fputs(""PartNo_SIMCardConfigNo: "" + marrNumberType[ipSIMCfg] + ""\n"", mfpOutputFile);
		Clib.fputs(""Batch: "" + marrNumberType[iOrdLineId] + ""\n"", mfpOutputFile);
		/*Clib.fputs(""P0_ref_number: "" + marrInputParams[""PO_ref_number""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Quantity: "" + marrInputParams[""Quantity""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Type: "" + marrInputParams[""Type""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Memory: "" + marrInputParams[""Memory""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Profile: "" + marrInputParams[""Profile""]+ ""\n"", mfpOutputFile);
		Clib.fputs(""Graph_ref: "" + marrInputParams[""Graph_ref""] + ""\n"", mfpOutputFile); // Change
//		Clib.fputs(""Artwork: ""+ bcOrdLine.GetFieldValue(""ImageFileName"") + ""\n"", mfpOutputFile); 
		Clib.fputs(""Artwork: "" + marrInputParams[""Artwork""] + ""\n"", mfpOutputFile); 	// Change
        Clib.fputs(""Batch: "" + marrInputParams[""Batch""] + ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
		Clib.fputs(""Keyname: "" + marrInputParams[""Keyname""]+ ""\n"", mfpOutputFile);
		//Clib.fputs(""Transport_Key: "" + marrInputParams[""Transport_Key""]+ ""\n"", mfpOutputFile);
//		Clib.fputs(""Transport_3GOp_In: "" + marrInputParams[""Transport_3GOp_In""]+ ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
        Clib.fputs(""Address1: "" + marrInputParams[""Address1""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Address2: "" + marrInputParams[""Address2""] + ""\n"", mfpOutputFile);
		//Clib.fputs(""Address3: "" + marrInputParams[""Address3""] + ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""*            INPUT VARIABLES            *       \n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""Var_In_List: ""+ ""\n"", mfpOutputFile);
		Clib.fputs(""IMSI: ""+ marrInputParams[""IMSI""] + ""\n"", mfpOutputFile);
		//Clib.fputs(""Ser_Nb: ""+ marrInputParams[""Ser_Nb""] + ""\n"", mfpOutputFile);
		Clib.fputs(""ICCID: ""+ marrInputParams[""ICCID""] + ""\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""*            OUTPUT VARIABLES           *\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""Var_Out: ICCID,IMSI, ""+ msPprItem + ""\n"", mfpOutputFile); */					  // Changed 07:06:2005
		
//		Clib.fputs(""Var_Out: PIN1/PUK1/PIN2/PUK2/KI/ADM1\n"", mfpOutputFile);

		for(miCnt = 0; miCnt < getArrayLength(marrError);miCnt++) 
		{
			if(marrError[miCnt] != """") 
				Clib.fputs(marrError[miCnt] + ""\n"",mfpOutputFile);
		}
			
	} 
	catch(e) 
	{
     throw (e);
    }
	finally 
	{
		if(mfpOutputFile != null)
		Clib.fclose(mfpOutputFile);
		Outputs.SetProperty(""strErrVal"",strErrVal);
//below 1.1		
		bcOrdPprItem  = null;
		bcOrderHdr    = null;
		boOrder       = null;
//above 1.1				
		mbcSysPref	= null;
		mboSysPref	= null;
	}
}
function GenerateFile(sOrderId,sFilePath,&Outputs)
{
//below 1.1  Didn't put fuction  heading because  length already  exceeds  16k
/*
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Paper Item""); 				// Changed 07:06:2005  
	var bcOrder 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrdLine 			= boOrder.GetBusComp(""RMS SIM Order Line"");
	var bcOrdLineNum 		= boOrder.GetBusComp(""RMS SIM Order Line Num Info for Update"");
	var bcOrdFile 			= boOrder.GetBusComp(""RMS SIM Order File Info Query"");
	var boNumberEnquiry 	= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumberEnquiry		= boNumberEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	var marrStartNumbers 	= new Array();
	var mbIsRecord			= false;
	var mbIsFileRec 		= false;
	var mbIsPprItem			= false;  // Changed 07:06:2005
	var miFirstIndex;
//	var msPrevSIMNumber 	= """";
	var msNextSIMNumber		= """";
	var msNextIMSINumber	= """";
	var msSIMNumber 		= 0;
	var miFileSeq 			= 0;
	var miCount 			= 0;
	var miQty 				= 0;
	var msConcatNumber 		= """";
	var msFileName 			= """";
	var msIMSINumber 		= """";
	var msStrSIMNum			= """";
	var msGenLvl			= """";
	var msErrVal 			= """";
	var msPprItem			= """";   // Changed 07:06:2005
	var strSearchSpec 		= """";
	var msOrderLineId = """";
	var mfpOutputFile;
	var marrSeqChek = new Array();
	var mintRecCnt = 0;
	var mstrMSISDN = """";
	var mblnSplit = false;
	var mbIsOrderLine=false;
	var cheqSeqArgs;//KT 21-042006 
	var outFile ="""";
    var intLineItemCnt = 0;	//  KT 23-05-06  to  split  SIM  Order file for multiple  line items
	try
    {
	with(bcOrder) 
		{
			SetViewMode(3);
			ActivateField(""Quantity Ordered"");
			ActivateField(""SIM Card Config Type"");
			ActivateField(""Transport Key"");
			ActivateField(""Transport 3GOP key"");
			ActivateField(""Order Number"");
			ActivateField(""ImageFileName""); //Ch
			ActivateField(""PO Requisition Ref Number"");
			ActivateField(""Bill To Address"");
			ActivateField(""Bill To Address Line 2"");
			ActivateField(""Bill To Address Line 3"");
			ActivateField(""HLR ID"");
			ClearToQuery();
			SetSearchSpec(""Id"", sOrderId);
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) 
			{
				msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",sOrderId);
				TheApplication().RaiseErrorText(msErrVal);
			}
		}
		with(bcOrdLine) 
		{
			SetViewMode(3);
			ActivateField(""Profile"");
			ActivateField(""Transport Key"");
			ActivateField(""Transport 3GOP Key"");
			ActivateField(""Quantity Ordered"");
			ActivateField(""SIM Card Config Type"");
			ActivateField(""SIM Card Config Name"");			
			ActivateField(""ImageFileName"");
			ActivateField(""Id"");
			ActivateField(""Graphical Profile"");
			ActivateField(""Card Memory"");
			ActivateField(""Starting Number"");
			ActivateField(""Order Line Id""); // KT 24-04-2006
			ClearToQuery()
			ExecuteQuery();
			mbIsOrderLine = FirstRecord();
			if(!mbIsOrderLine) 
			{
				msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",sOrderId);
					TheApplication().RaiseErrorText(msErrVal);
			}else {
			msOrderLineId = GetFieldValue(""Order Line Id"");
			}
         	}// KT deleted
			with(bcOrdFile) 
		{
			SetViewMode(3);
			ActivateField(""File Sequence"");
			ActivateField(""HLR_Batch"");
			ClearToQuery();
			SetSearchSpec(""SIM Order Id"",sOrderId);
			SetSearchSpec(""File Type"",""O"");
			SetSortSpec(""File Sequence(DESCENDING)"");
			ExecuteQuery();
			mbIsFileRec = FirstRecord();
			if(mbIsFileRec) 
				miFileSeq = GetFieldValue(""File Sequence"");
			else
				miFileSeq = 0;
		}
		with(bcOrdPprItem) {
			ActivateField(""Paper Item Name"");
			ClearToQuery();
			ExecuteQuery(ForwardOnly);
			mbIsPprItem = FirstRecord();
			
			while(mbIsPprItem) {
				if(msPprItem == """")
					msPprItem = GetFieldValue(""Paper Item Name"");
				else
					msPprItem += ""/"" + GetFieldValue(""Paper Item Name"");
				mbIsPprItem = NextRecord();	
			}
		}
		while(mbIsOrderLine) {
				msOrderLineId = bcOrdLine.GetFieldValue(""Order Line Id"");
				with(bcOrdLineNum) 
				{
					SetViewMode(3);
					ActivateField(""Numbers"");
					ActivateField(""Generated Number"");
					ActivateField(""SIM Id"");
					ActivateField(""Concatenated Number Types"");
					ActivateField(""Order Line Id"");
					ClearToQuery();
					SetSearchSpec(""Order Id"",sOrderId)
					SetSearchSpec(""Order Line Id"",bcOrdLine.GetFieldValue(""Id""));
					SetSortSpec(""Generated Number(ASCENDING)"");
					ExecuteQuery();			
			    	mbIsRecord = FirstRecord();
				/*	if(!mbIsRecord) 
					{
						msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD020"",sOrderId);
						TheApplication().RaiseErrorText(msErrVal);
					}*/ 
//above 1.1
//below 1.1
/*
				}  
			while(mbIsRecord) 
			{	
			miQty++;
	//  23-05-06
	//			if(miCount == 0)
	//				msNextSIMNumber = bcOrdLineNum.GetFieldValue(""Generated Number"");
				msSIMNumber = bcOrdLineNum.GetFieldValue(""Generated Number"");
				cheqSeqArgs = TheApplication().NewPropertySet();// KT 21-04-2006
				cheqSeqArgs.SetProperty(""mblnSplit"",mblnSplit);// KT 21-04-2006
				cheqSeqArgs.SetProperty(""mintRecCnt"",mintRecCnt);//KT 21-04-2006
				CheckSequence(bcNumberEnquiry,bcOrdLineNum,marrSeqChek,cheqSeqArgs);//KT 21-04-2006
				mblnSplit = (cheqSeqArgs.GetProperty(""mblnSplit"")==""true"")?true:false;//KT 21-042006
	            mintRecCnt = ToInteger(cheqSeqArgs.GetProperty(""mintRecCnt""));//KT 21-042006
	//			if((msSIMNumber != msNextSIMNumber)  || (msIMSINumber != msNextIMSINumber) || (miQty > 5000)) 
				if((mblnSplit) || (miQty > 5000) ||   (intLineItemCnt != 0))
				{
					mblnSplit = false;
					mstrMSISDN = """";
					strSearchSpec = """";
					with(bcNumberEnquiry) {
						ActivateField(""Assoc Start Id"");
						ActivateField(""Type Identifier"");
						ActivateField(""Number String With Checksum"");
						ActivateField(""Generation Level"");
						ClearToQuery();
						strSearchSpec = ""[Assoc Start Id] = '"" + bcOrdLineNum.GetFieldValue(""SIM Id"") + ""'"";
						strSearchSpec = strSearchSpec + "" AND ([Type Identifier] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + ""'"";
						strSearchSpec = strSearchSpec + "" OR [Type Identifier] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"") + ""')"";
						SetSearchExpr(strSearchSpec);
						ExecuteQuery();
						var blnIsRecord = FirstRecord();
						msIMSINumber = """";
						mstrMSISDN	 = """";
						msGenLvl	 = """";
						while(blnIsRecord) {
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
								msStrSIMNum	= GetFieldValue(""Number String With Checksum"");
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"")) {
								if(msIMSINumber=="""") {
									msIMSINumber = 	GetFieldValue(""Number String With Checksum"");
									msGenLvl	 = 	GetFieldValue(""Generation Level"");
								}
								else {
									msIMSINumber = 	msIMSINumber + "" / ""+GetFieldValue(""Number String With Checksum"");
									msGenLvl	 = 	msGenLvl + ""/""+GetFieldValue(""Generation Level"");							
								}
							}
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""))
								mstrMSISDN = GetFieldValue(""Number String With Checksum"");
	
							blnIsRecord = NextRecord();
						}
						}
	//				if(Clib.strcmpi(msSIMNumber, msPrevSIMNumber) != 1) {
				  	SetArray(marrStartNumbers,miCount,1,""?"",""?"",msStrSIMNum); 
				    SetArray(marrStartNumbers,miCount,2,""?"",""?"",msIMSINumber);
				    SetArray(marrStartNumbers,miCount,3,""?"",""?"",mstrMSISDN);
				    SetArray(marrStartNumbers,miCount,4,""?"",""?"",msGenLvl);
				    SetArray(marrStartNumbers,miCount,5,""?"",""?"",bcOrdLine.GetFieldValue(""Id""));
				    SetArray(marrStartNumbers,miCount,6,""?"",""?"",bcOrdLine.GetFieldValue(""SIM Card Config Name""));
					SetArray(marrStartNumbers,miCount++,7,""?"",""?"",msOrderLineId);
				    miQty = 1;
				}
				SetArray(marrStartNumbers,miCount-1,0,""?"",""?"",miQty);
    //			the validation is on the assumption that first 7 digits of SIM Number will be constant
	//			Code commented for future use.	
	/*			msNextSIMNumber		= msSIMNumber.substring(0,8) + (ToNumber(msSIMNumber.substring(8))  + 1);
				msNextIMSINumber 	= ToNumber(msIMSINumber)+1;*/
//above 1.1
//below 1.1
/*			
				msNextSIMNumber = ToInteger(bcOrdLineNum.GetFieldValue(""Generated Number""))+1;
				mintRecCnt++;
				mbIsRecord = bcOrdLineNum.NextRecord();
			    intLineItemCnt = 0;
					}
			intLineItemCnt++;
			mbIsOrderLine = bcOrdLine.NextRecord();
		}
		for(miCount = 0; miCount < getArrayLength(marrStartNumbers); miCount++) 
		{
			//msFileName = ""STC_"" + bcOrder.GetFieldValue(""HLR ID"") + Clib.rsprintf(""%02s"",ToString(++miFileSeq)) + "".inp"";
			msFileName = ""STC_"" + marrStartNumbers[miCount][7] + ""_"" + Clib.rsprintf(""%02s"",ToString(++miFileSeq)) + "".inp"";
			var mstrFileData = """";
			outFile = sFilePath + msFileName;
			mfpOutputFile = Clib.fopen(outFile,""a"");
    		Clib.fputs(""*********************************************\n"",mfpOutputFile);
			mstrFileData = ""*********************************************"" + ""\n"";
			Clib.fputs(""             HEADER DESCRIPTION				 \n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""             HEADER DESCRIPTION				 "" + ""\n"";
			Clib.fputs(""*********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""*********************************************""+ ""\n"";
			Clib.fputs(""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""\n"";
			Clib.fputs(""Customer: STC\n""  , mfpOutputFile);
			mstrFileData = mstrFileData + ""Customer: STC""+ ""\n"";
      		Clib.fputs(""Quantity: "" + marrStartNumbers[miCount][0] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Quantity: "" + marrStartNumbers[miCount][0] + ""\n"";
//			Clib.fputs(""Quantity: "" + bcOrdLine.GetFieldValue(""Quantity Ordered"") + ""\n"", mfpOutputFile);
			//Clib.fputs(""Type: "" + bcOrdLine.GetFieldValue(""SIM Card Config Name"") + ""\n"", mfpOutputFile);
			//mstrFileData = mstrFileData + ""Type: "" + bcOrdLine.GetFieldValue(""SIM Card Config Name"")+ ""\n"";
	        Clib.fputs(""Type: "" + marrStartNumbers[miCount][6] + ""\n"", mfpOutputFile);//23-05-06 KT
			mstrFileData = mstrFileData + ""Type: "" + marrStartNumbers[miCount][6]+ ""\n"";
			//Clib.fputs(""Memory: "" + bcOrdLine.GetFieldValue(""Card Memory"") + ""\n"", mfpOutputFile);
			Clib.fputs(""Profile: "" + bcOrdLine.GetFieldValue(""Profile"")+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Profile: "" + bcOrdLine.GetFieldValue(""Profile"")+ ""\n"";
    		Clib.fputs(""Graph_ref: ""+ bcOrdLine.GetFieldValue(""Graphical Profile"") + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Graph_ref: ""+ bcOrdLine.GetFieldValue(""Graphical Profile"")+ ""\n"";
   	 		Clib.fputs(""Artwork: ""+ bcOrdLine.GetFieldValue(""ImageFileName"") + ""\n"", mfpOutputFile);  
			mstrFileData = mstrFileData + ""Artwork: ""+ bcOrdLine.GetFieldValue(""ImageFileName"")+ ""\n"";
	  	    //Clib.fputs(""Order Line Id: "" + bcOrdLine.GetFieldValue(""Order Line Id"")+ ""\n"", mfpOutputFile);  // KT 24-04-2006
			//mstrFileData = mstrFileData + ""Order Line Id: "" + bcOrdLine.GetFieldValue(""Order Line Id"")+ ""\n"";
	       	//Clib.fputs(""Batch: "" + bcOrder.GetFieldValue(""Batch Number"")+ ""\n"", mfpOutputFile);
	       	Clib.fputs(""Batch: "" + marrStartNumbers[miCount][7] + ""\n"", mfpOutputFile);
			Clib.fputs(""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""\n"";
			Clib.fputs(""Transport_Key: "" + bcOrder.GetFieldValue(""Transport Key"")+ ""\n"", mfpOutputFile); 
			mstrFileData = mstrFileData + ""Transport_Key: "" + bcOrder.GetFieldValue(""Transport Key"")+ ""\n"";
	  //	Clib.fputs(""Transport_3GOp_In: "" + bcOrder.GetFieldValue(""Transport 3GOP key"")+ ""\n"", mfpOutputFile);
			Clib.fputs(""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""\n"";
			Clib.fputs(""Address1: ""+ bcOrder.GetFieldValue(""Bill To Address"") +""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Address1: ""+ bcOrder.GetFieldValue(""Bill To Address"")+ ""\n"";
			Clib.fputs(""Address2: ""+ bcOrder.GetFieldValue(""Bill To Address Line 2"") + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Address2: ""+ bcOrder.GetFieldValue(""Bill To Address Line 2"")+ ""\n"";
			Clib.fputs(""Address3: ""+ bcOrder.GetFieldValue(""Bill To Address Line 3"") +""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Address3: ""+ bcOrder.GetFieldValue(""Bill To Address Line 3"")+ ""\n"";
			Clib.fputs(""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""\n"";
		//	Clib.fputs(""Graph_ref: ""+ bcOrdLine.GetFieldValue(""Graphical Profile"") + ""\n"", mfpOutputFile);
		//	Clib.fputs(""\n"", mfpOutputFile);
			Clib.fputs(""PO_ref_number: "" + bcOrder.GetFieldValue(""PO Requisition Ref Number"")+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""PO_ref_number: "" + bcOrder.GetFieldValue(""PO Requisition Ref Number"")+ ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+ ""\n"";			    		   	
			Clib.fputs(""            INPUT VARIABLES                 \n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""            INPUT VARIABLES                   ""+ ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************"" + ""\n"";
			Clib.fputs(""Var_In_List: ""+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Var_In_List: ""+ ""\n"";
//			Clib.fputs(""IMSI(""+marrStartNumbers[miCount][4]+""):""+ marrStartNumbers[miCount][2] + ""\n"", mfpOutputFile);
			Clib.fputs(""IMSI: ""+ marrStartNumbers[miCount][2] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""IMSI:""+ marrStartNumbers[miCount][2] + ""\n"";
			Clib.fputs(""Ser_Nb: ""+ marrStartNumbers[miCount][1] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""IMSI:""+ ""Ser_Nb: ""+ marrStartNumbers[miCount][1] + ""\n"";
//Added this line to include MSISDN number in the file.		
			//Clib.fputs(""MSISDN: ""+ marrStartNumbers[miCount][3] + ""\n"", mfpOutputFile); KT 24-04-2006
			mstrFileData = mstrFileData + ""MSISDN: ""+ marrStartNumbers[miCount][3] + ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+""\n"";
			Clib.fputs(""            OUTPUT VARIABLES                \n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""            OUTPUT VARIABLES                  ""+ ""\n"";		
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+ ""\n"";
			Clib.fputs(""Var_Out: "" + msPprItem + ""\n"", mfpOutputFile); 				// Changed 07:06:2005
			mstrFileData = mstrFileData + ""Var_Out: "" + msPprItem + ""\n"";
			Clib.fclose(mfpOutputFile);
		    bcOrdFile.NewRecord(1);
			bcOrdFile.SetFieldValue(""SIM Order Id"",bcOrder.GetFieldValue(""Id"")); 
			bcOrdFile.SetFieldValue(""File Sequence"", miFileSeq);
			bcOrdFile.SetFieldValue(""File Name"", msFileName);
			bcOrdFile.SetFieldValue(""File Type"", ""O"");
			bcOrdFile.SetFieldValue(""File Data"", mstrFileData);
			bcOrdFile.SetFieldValue(""SIM Order Line Id"", marrStartNumbers[miCount][5]);	
			bcOrdFile.SetFieldValue(""SIM Start Number"", marrStartNumbers[miCount][1]);			
			bcOrdFile.SetFieldValue(""Quantity Ordered"", marrStartNumbers[miCount][0]);						
			bcOrdFile.WriteRecord();
//			UpdateFile(""I"","""",msFileName,sOrderId);
		}
	} 
 catch(e)  
	{
		msErrVal = e.errText;
		if (mfpOutputFile != null)
			Clib.fclose(mfpOutputFile);
		if(strErrVal == """")
			msErrVal = e.errText;
          throw(e);
}
	finally 
	{
		bcNumberEnquiry     = null;
		bcOrdPprItem        = null;
		bcOrder 			= null;
		bcOrdLine 			= null;
		bcOrdLineNum 		= null;
		bcOrdFile 			= null;	
		boNumberEnquiry     = null;
		boOrder 			= null;
		cheqSeqArgs         = null;
		marrStartNumbers	= null;
	}
	return(msErrVal);*/
//above 1.1
}
"//20061008 Kalavana 1.2 Changed code to make SIM Ordering asynchronous
function GenerateFileNew(sOrderId,sFilePath,&Outputs)
{
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	//var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Paper Item""); KT 04-07-2006				// Changed 07:06:2005  
	var bcOrder 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrdLine 			= boOrder.GetBusComp(""RMS SIM Order Line"");
	var bcOrdLineNum 		= boOrder.GetBusComp(""RMS SIM Order Line Num Info for Update"");
	var bcOrdFile 			= boOrder.GetBusComp(""RMS SIM Order File Info Query"");
	var boNumberEnquiry 	= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumberEnquiry		= boNumberEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	var marrStartNumbers 	= new Array();
	var mbIsRecord			= false;
	var mbIsFileRec 		= false;
	var mbIsPprItem			= false;  // Changed 07:06:2005
	var miFirstIndex;
//	var msPrevSIMNumber 	= """";
	var msNextSIMNumber		= """";
	var msNextIMSINumber	= """";
	var msSIMNumber 		= 0;
	var miFileSeq 			= 0;
	var miCount 			= 0;
	var miQty 				= 0;
	var msConcatNumber 		= """";
	var msFileName 			= """";
	var msIMSINumber 		= """";
	var msStrSIMNum			= """";
	var msGenLvl			= """";
	var msErrVal 			= """";
	var msPprItem			= """";   // Changed 07:06:2005
	var strSearchSpec 		= """";
	var msOrderLineId = """";
	var mfpOutputFile;
	var marrSeqChek = new Array();
	var mintRecCnt = 0;
	var mstrMSISDN = """";
	var mblnSplit = false;
	var mbIsOrderLine=false;
	var cheqSeqArgs;//KT 21-042006 
	var outFile ="""";
    var intLineItemCnt = 0;	//  KT 23-05-2006 added  to  split  SIM  Order file for multiple  line items
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");  // KT 05-07-2006 
    var bcSysPref = boSysPref.GetBusComp(""System Preferences""); // KT 05-07-2006
	try
    {
	with(bcSysPref)
	{
    ActivateField(""Value"");
	ClearToQuery();
	SetSearchSpec(""Name"",""STC_SIM_ORDER_VAR_OUT"");
	//below 1.1
    //ExecuteQuery();
     ExecuteQuery(ForwardOnly);
     //above 1.1

	if(FirstRecord()) 
	{
    msPprItem = GetFieldValue(""Value"");
    }
	}
    with(bcOrder) 
		{
			SetViewMode(3);
			ActivateField(""Quantity Ordered"");
			ActivateField(""SIM Card Config Type"");
			ActivateField(""Transport Key"");
			ActivateField(""Transport 3GOP key"");
			ActivateField(""Order Number"");
			ActivateField(""ImageFileName""); //Ch
			ActivateField(""PO Requisition Ref Number"");
			ActivateField(""Bill To Address"");
			ActivateField(""Bill To Address Line 2"");
			ActivateField(""Bill To Address Line 3"");
			ActivateField(""Profile"");
			ActivateField(""HLR ID"");
			ClearToQuery();
			SetSearchSpec(""Id"", sOrderId);
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) 
			{
				msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",sOrderId);
				//TheApplication().RaiseErrorText(msErrVal);
				return(msErrVal);
			}
		}
		with(bcOrdLine) 
		{
			SetViewMode(3);
			ActivateField(""Profile"");
			ActivateField(""Transport Key"");
			ActivateField(""Transport 3GOP Key"");
			ActivateField(""Quantity Ordered"");
			ActivateField(""SIM Card Config Type"");
			ActivateField(""SIM Card Config Name"");			
			ActivateField(""ImageFileName"");
			ActivateField(""Id"");
			ActivateField(""Graphical Profile"");
			ActivateField(""Card Memory"");
			ActivateField(""Starting Number"");
			ActivateField(""Artwork Name"");  // KT 27-06-2006
			ActivateField(""Order Line Id""); // KT 24-04-2006
			ClearToQuery()
			ExecuteQuery();
			mbIsOrderLine = FirstRecord();
			if(!mbIsOrderLine) 
			{
				msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",sOrderId);
				//	TheApplication().RaiseErrorText(msErrVal);
				return(msErrVal);
			}else {
			msOrderLineId = GetFieldValue(""Order Line Id"");
			}
         	}// KT deleted
			with(bcOrdFile) 
		{
			SetViewMode(3);
			ActivateField(""File Sequence"");
			ActivateField(""HLR_Batch"");
			ClearToQuery();
			SetSearchSpec(""SIM Order Id"",sOrderId);
			SetSearchSpec(""File Type"",""O"");
			SetSortSpec(""File Sequence(DESCENDING)"");
			ExecuteQuery();
			mbIsFileRec = FirstRecord();
			if(mbIsFileRec) 
				miFileSeq = GetFieldValue(""File Sequence"");
			else
				miFileSeq = 0;
		}
		/*  KT 04-07-2006 commented to  get msPprItem  value from Sys Preference
			with(bcOrdPprItem) {
			ActivateField(""Paper Item Name"");
			ClearToQuery();
			ExecuteQuery(ForwardOnly);
			mbIsPprItem = FirstRecord();
			
			while(mbIsPprItem) {
				if(msPprItem == """")
					msPprItem = GetFieldValue(""Paper Item Name"");
				else
					msPprItem += "","" + GetFieldValue(""Paper Item Name"");
				mbIsPprItem = NextRecord();	
			}
		}*/
		while(mbIsOrderLine) {
				msOrderLineId = bcOrdLine.GetFieldValue(""Order Line Id"");
				with(bcOrdLineNum) 
				{
					SetViewMode(3);
					ActivateField(""Numbers"");
					ActivateField(""Generated Number"");
					ActivateField(""SIM Id"");
					ActivateField(""Concatenated Number Types"");
					ActivateField(""Order Line Id"");
					ClearToQuery();
					SetSearchSpec(""Order Id"",sOrderId)
					SetSearchSpec(""Order Line Id"",bcOrdLine.GetFieldValue(""Id""));
					SetSortSpec(""Generated Number(ASCENDING)"");
					//ExecuteQuery();	
					ExecuteQuery(ForwardOnly);
			    	mbIsRecord = FirstRecord();
				/*	if(!mbIsRecord) 
					{
						msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD020"",sOrderId);
						TheApplication().RaiseErrorText(msErrVal);
					}*/
				}
			while(mbIsRecord) 
			{	
			miQty++;
	//  23-05-06
	//			if(miCount == 0)
	//				msNextSIMNumber = bcOrdLineNum.GetFieldValue(""Generated Number"");
				msSIMNumber = bcOrdLineNum.GetFieldValue(""Generated Number"");
				cheqSeqArgs = TheApplication().NewPropertySet();// KT 21-04-2006
				cheqSeqArgs.SetProperty(""mblnSplit"",mblnSplit);// KT 21-04-2006
				cheqSeqArgs.SetProperty(""mintRecCnt"",mintRecCnt);//KT 21-04-2006
				CheckSequence(bcNumberEnquiry,bcOrdLineNum,marrSeqChek,cheqSeqArgs);//KT 21-04-2006
				mblnSplit = (cheqSeqArgs.GetProperty(""mblnSplit"")==""true"")?true:false;//KT 21-042006
	            mintRecCnt = ToInteger(cheqSeqArgs.GetProperty(""mintRecCnt""));//KT 21-042006
				if((mblnSplit) || (miQty > 5000) ||   (intLineItemCnt != 0))
				{
					mblnSplit = false;
					mstrMSISDN = """";
					strSearchSpec = """";
					with(bcNumberEnquiry) {
						ActivateField(""Assoc Start Id"");
						ActivateField(""Type Identifier"");
						ActivateField(""Number String With Checksum"");
						ActivateField(""Generation Level"");
						ClearToQuery();
						strSearchSpec = ""[Assoc Start Id] = '"" + bcOrdLineNum.GetFieldValue(""SIM Id"") + ""'"";
						strSearchSpec = strSearchSpec + "" AND ([Type Identifier] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + ""'"";
						strSearchSpec = strSearchSpec + "" OR [Type Identifier] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"") + ""')"";
						SetSearchExpr(strSearchSpec);
						ExecuteQuery();
						var blnIsRecord = FirstRecord();
						msIMSINumber = """";
						mstrMSISDN	 = """";
						msGenLvl	 = """";
						while(blnIsRecord) {
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
								msStrSIMNum	= GetFieldValue(""Number String With Checksum"");
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"")) {
								if(msIMSINumber=="""") {
									msIMSINumber = 	GetFieldValue(""Number String With Checksum"");
									msGenLvl	 = 	GetFieldValue(""Generation Level"");
								}
								else {
									msIMSINumber = 	msIMSINumber + "" / ""+GetFieldValue(""Number String With Checksum"");
									msGenLvl	 = 	msGenLvl + ""/""+GetFieldValue(""Generation Level"");							
								}
							}
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""))
								mstrMSISDN = GetFieldValue(""Number String With Checksum"");
	
							blnIsRecord = NextRecord();
						}
						}
				  	SetArray(marrStartNumbers,miCount,1,""?"",""?"",msStrSIMNum); 
				    SetArray(marrStartNumbers,miCount,2,""?"",""?"",msIMSINumber);
				    SetArray(marrStartNumbers,miCount,3,""?"",""?"",mstrMSISDN);
				    SetArray(marrStartNumbers,miCount,4,""?"",""?"",msGenLvl);
				    SetArray(marrStartNumbers,miCount,5,""?"",""?"",bcOrdLine.GetFieldValue(""Id""));
				    SetArray(marrStartNumbers,miCount,6,""?"",""?"",bcOrdLine.GetFieldValue(""SIM Card Config Name""));
					SetArray(marrStartNumbers,miCount,7,""?"",""?"",bcOrdLine.GetFieldValue(""Card Memory""));
					SetArray(marrStartNumbers,miCount,8,""?"",""?"",bcOrdLine.GetFieldValue(""Artwork Name""));
					SetArray(marrStartNumbers,miCount,9,""?"",""?"",bcOrdLine.GetFieldValue(""Graphical Profile""));
					SetArray(marrStartNumbers,miCount++,10,""?"",""?"",msOrderLineId);
				    miQty = 1;
				}
				SetArray(marrStartNumbers,miCount-1,0,""?"",""?"",miQty);
    //			the validation is on the assumption that first 7 digits of SIM Number will be constant
	//			Code commented for future use.	
	/*			msNextSIMNumber		= msSIMNumber.substring(0,8) + (ToNumber(msSIMNumber.substring(8))  + 1);
				msNextIMSINumber 	= ToNumber(msIMSINumber)+1;*/
				msNextSIMNumber = ToInteger(bcOrdLineNum.GetFieldValue(""Generated Number""))+1;
				mintRecCnt++;
				mbIsRecord = bcOrdLineNum.NextRecord();
			    intLineItemCnt = 0;
					}
			intLineItemCnt++;
			mbIsOrderLine = bcOrdLine.NextRecord();
		}
		for(miCount = 0; miCount < getArrayLength(marrStartNumbers); miCount++) 
		{
			/*var LineItemId = """";  //  KT  Added and  commented on 02-07-2006  
			if(LineItemId == """")  
			{
			LineItemId = marrStartNumbers[miCount][5];
			}
			else if(LineItemId != marrStartNumbers[miCount][5])
			{
			LineItemId = marrStartNumbers[miCount][5];
			miFileSeq = 0;
			}*/
			//msFileName = bcOrder.GetFieldValue(""PO Requisition Ref Number"")+""_""+marrStartNumbers[miCount][6]+""_simorder_""+Clib.rsprintf(""%02s"",ToString(++miFileSeq)) + "".inp"";
			msFileName = ""simorder_""+bcOrder.GetFieldValue(""PO Requisition Ref Number"")+""_""+marrStartNumbers[miCount][6]+""_""+Clib.rsprintf(""%02s"",ToString(++miFileSeq)) + "".inp"";
			var mstrFileData = """";
			outFile = sFilePath + msFileName;
			mfpOutputFile = Clib.fopen(outFile,""a"");
    		Clib.fputs(""*********************************************\n"",mfpOutputFile);
			mstrFileData = ""*********************************************"" + ""\n"";
			Clib.fputs(""*            HEADER DESCRIPTION        *\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""*            HEADER DESCRIPTION        *"" + ""\n"";
			Clib.fputs(""*********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""*********************************************""+ ""\n"";
			//Clib.fputs(""\n"", mfpOutputFile);
			//mstrFileData = mstrFileData + ""\n"";
			Clib.fputs(""Customer: STC\n""  , mfpOutputFile);
			mstrFileData = mstrFileData + ""Customer: STC""+ ""\n"";
      		Clib.fputs(""PO_ref_number: "" + bcOrder.GetFieldValue(""PO Requisition Ref Number"")+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""PO_ref_number: "" + bcOrder.GetFieldValue(""PO Requisition Ref Number"")+ ""\n"";
			Clib.fputs(""Quantity: "" + marrStartNumbers[miCount][0] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Quantity: "" + marrStartNumbers[miCount][0] + ""\n"";
	        Clib.fputs(""Type: "" + marrStartNumbers[miCount][6] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Type: "" + marrStartNumbers[miCount][6]+ ""\n"";
			Clib.fputs(""Memory: "" + marrStartNumbers[miCount][7] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Memory: "" + marrStartNumbers[miCount][7] + ""\n"";
			Clib.fputs(""Profile: "" + bcOrder.GetFieldValue(""Profile"")+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Profile: "" + bcOrder.GetFieldValue(""Profile"")+ ""\n"";
    		Clib.fputs(""Graph_ref: ""+ marrStartNumbers[miCount][9] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Graph_ref: ""+ marrStartNumbers[miCount][9]+ ""\n"";
   	 		Clib.fputs(""Artwork Id: ""+ marrStartNumbers[miCount][8] + ""\n"", mfpOutputFile);  
			mstrFileData = mstrFileData + ""Artwork: ""+ marrStartNumbers[miCount][8]+ ""\n"";
	  	    Clib.fputs(""Batch: "" + marrStartNumbers[miCount][10] + ""\n"", mfpOutputFile);
			Clib.fputs(""*\n"",mfpOutputFile);
			mstrFileData = mstrFileData + ""*""+ ""\n"";
			Clib.fputs(""Keyname: "" + bcOrder.GetFieldValue(""Transport Key"")+ ""\n"", mfpOutputFile); 
			mstrFileData = mstrFileData + ""Keyname: "" + bcOrder.GetFieldValue(""Transport Key"")+ ""\n"";
			Clib.fputs(""*\n"",mfpOutputFile);
			mstrFileData = mstrFileData + ""*""+ ""\n"";
			//	Clib.fputs(""Transport_3GOp_In: "" + bcOrder.GetFieldValue(""Transport 3GOP key"")+ ""\n"", mfpOutputFile);
			//Clib.fputs(""\n"", mfpOutputFile);
			//mstrFileData = mstrFileData + ""\n"";
			Clib.fputs(""Address1: ""+ bcOrder.GetFieldValue(""Bill To Address"") +""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Address1: ""+ bcOrder.GetFieldValue(""Bill To Address"")+ ""\n"";
			Clib.fputs(""Address2: ""+ bcOrder.GetFieldValue(""Bill To Address Line 2"") + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Address2: ""+ bcOrder.GetFieldValue(""Bill To Address Line 2"")+ ""\n"";
			Clib.fputs(""*\n"",mfpOutputFile);
			mstrFileData = mstrFileData + ""*""+ ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+ ""\n"";			    		   	
			Clib.fputs(""*            INPUT VARIABLES           *      \n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""*            INPUT VARIABLES           *""+ ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************"" + ""\n"";
			Clib.fputs(""Var_In_List: ""+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Var_In_List: ""+ ""\n"";
//			Clib.fputs(""IMSI(""+marrStartNumbers[miCount][4]+""):""+ marrStartNumbers[miCount][2] + ""\n"", mfpOutputFile);
			Clib.fputs(""IMSI: ""+ marrStartNumbers[miCount][2] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""IMSI:""+ marrStartNumbers[miCount][2] + ""\n"";
			Clib.fputs(""ICCID: ""+ marrStartNumbers[miCount][1] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""ICCID: ""+ marrStartNumbers[miCount][1] + ""\n"";
//Added this line to include MSISDN number in the file.		
			//Clib.fputs(""MSISDN: ""+ marrStartNumbers[miCount][3] + ""\n"", mfpOutputFile); KT 24-04-2006
			//mstrFileData = mstrFileData + ""MSISDN: ""+ marrStartNumbers[miCount][3] + ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+""\n"";
			Clib.fputs(""*            OUTPUT VARIABLES          *      \n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""*            OUTPUT VARIABLES          *""+ ""\n"";		
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+ ""\n"";
			Clib.fputs(""Var_Out: ICCID,IMSI,"" + msPprItem + ""\n"", mfpOutputFile); 				// Changed 07:06:2005
			mstrFileData = mstrFileData + ""Var_Out: "" + msPprItem + ""\n"";
			Clib.fclose(mfpOutputFile);
		    bcOrdFile.NewRecord(1);
			bcOrdFile.SetFieldValue(""SIM Order Id"",bcOrder.GetFieldValue(""Id"")); 
			bcOrdFile.SetFieldValue(""File Sequence"", miFileSeq);
			bcOrdFile.SetFieldValue(""File Name"", msFileName);
			bcOrdFile.SetFieldValue(""File Type"", ""O"");
			bcOrdFile.SetFieldValue(""File Data"", mstrFileData);
			bcOrdFile.SetFieldValue(""SIM Order Line Id"", marrStartNumbers[miCount][5]);	
			bcOrdFile.SetFieldValue(""SIM Start Number"", marrStartNumbers[miCount][1]);			
			bcOrdFile.SetFieldValue(""Quantity Ordered"", marrStartNumbers[miCount][0]);						
			bcOrdFile.WriteRecord();
//			UpdateFile(""I"","""",msFileName,sOrderId);
		}
	} 
 catch(e)  
	{
		msErrVal = e.errText;
		if (mfpOutputFile != null)
			Clib.fclose(mfpOutputFile);
		if(strErrVal == """")
			msErrVal = e.errText;
          throw(e);
}
	finally 
	{
//below 1.1		
		bcNumberEnquiry     = null;
		boNumberEnquiry     = null;
		cheqSeqArgs         = null;
//above 1.1 		
		bcSysPref           = null;
 		boSysPref           = null;
		bcOrder 			= null;
		bcOrdLine 			= null;
		bcOrdLineNum 		= null;
		bcOrdFile 			= null;	
		boOrder 			= null;
		marrStartNumbers	= null;
   }
	return(msErrVal);
}
"/**************************************************************************************
* Name          : SIM File Service GetDirrectoryList  Function				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Siebel ES SCR1, Objects Destroyed
**************************************************************************************/


function GetDirrectoryList(fileArray,Inputs,Outputs)
{
//the command to print the file names will be, name sorted
//for dos 
//dir [directory]\[pattern] /ON /B > [directory]\filelist.txt
//for unix??
//ls [directory]/[pattern] | sort > [directory]/filelist.txt
//populate the filenames in a propertyset, simple to call 
	var msPath = Inputs.GetProperty(""DirectoryPath"");
	var msPattern=Inputs.GetProperty(""FilePattern"");
	var msFNameForList = msPath + "filelist.lst"";
	var miCutLen = 1 + msPath.length;
//must get syspref EECC_SIEBEL_SERVER_OS
	var mpsSupply;
	var mpsReturn;
	var msOS;//name of the OS, can be WIN, win, Win (Windows) or Unix, UNIX, unix (all flavours of UNIX)
	var msCMD;//command string to execute list directory function on the OS
	//var mbsSYSPREF = TheApplication().GetService(""EECC BS Startup"");
	mpsSupply = TheApplication().NewPropertySet();
	mpsReturn = TheApplication().NewPropertySet();
	//mpsSupply.SetProperty(""Parameter Name"",""EECC_SIEBEL_SERVER_OS"");
	//mbsSYSPREF.InvokeMethod(""Get SysPref"",mpsSupply,mpsReturn);
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref= boSysPref.GetBusComp(""System Preferences"");
	with(bcSysPref) {
		ActivateField(""Value"");
		ClearToQuery();
		SetSearchSpec(""Name"",""STC_OS"");
		ExecuteQuery();
		
		if(FirstRecord())
			msOS = GetFieldValue(""Value"");
	}
	
	if(""unix"" == msOS.toLowerCase()){//unix
		//msCMD = ""ls "" + msPath + msPattern + "" | cut -c "" + miCutLen + ""- | sort > "" + msFNameForList;
		if(TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""NEWUNIXCMD"") != ""Y"")
			msCMD = ""ls "" + msPath + msPattern + "" | sort > "" + msFNameForList;
		else
			msCMD = ""ls -1 "" + msPath + "" > "" + msFNameForList;
	} else {
		msCMD = ""dir "" + msPath + msPattern + "" /ON /B > "" + msFNameForList;
	}
//now execute the command on OS, can be risky		
	var test = Clib.system(msCMD);
//	TheApplication().RaiseErrorText(test + "">>"" + msCMD);
//	WriteToFile(""written the directory list file"",""_test"");
	/*mpsSupply = TheApplication().NewPropertySet();
	mpsReturn = TheApplication().NewPropertySet();
	mpsSupply.SetProperty(""ContainerTag"",""FileList"");
	mpsSupply.SetProperty(""RecordTag"",""File"");
	mpsSupply.SetProperty(""FileName"",msFNameForList);
	TEXT2XML(mpsSupply,mpsReturn);
	LogPropSet(mpsReturn,""_GotFileList"");
	Outputs.AddChild(mpsReturn.GetChild(0).GetChild(0));
	LogPropSet(Outputs,""_GotFileList_2"");
	Outputs.SetProperty(""CountOfFiles"",mpsReturn.GetChild(0).GetChild(0).GetChildCount());*/
	var msInputString = """";
	var msFile = Inputs.GetProperty(""testfile"");
	//msFile = msPath+msFile;
	//var testfile = """";
	
	//Clib.fopen(testfile,""r"");
	//var mfpInputFile 	= Clib.fopen(msFile,""r"");
	 var mfpInputFile 	= Clib.fopen(msFNameForList,""r"");
	//Clib.fgets(mfpInputFile);  
     //msInputString = Clib.fgets(mfpInputFile);
	var fileCount=0;	
	 while (msInputString != null) 
	    	{
			msInputString = Clib.fgets(mfpInputFile);
			if(msInputString == null) continue;
	
	//		remove the end of line character from the string
	//		for unix formatted file it is \n and for windows formatted file it is \r\n

		if(msInputString.indexOf(""\r"") != -1) {
			msInputString = msInputString.substring(0,msInputString.indexOf(""\r""));
			fileArray[fileCount] = msInputString;
			fileCount++;
			} else if(msInputString.indexOf(""\n"") != -1) {
			
			msInputString = msInputString.substring(0,msInputString.indexOf(""\n""));
			fileArray[fileCount] = msInputString;
			fileCount++;
		}
		}
//below 1.1		
		mpsReturn = null;
		mpsSupply = null;
		bcSysPref  = null;
		boSysPref  = null;
//above 1.1
		return CancelOperation;
}
"/**************************************************************************************
* Name          : SIM Order Business Service ReadOrderFile Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Commented entire function  becuase we are not  using  this function
**************************************************************************************/

function ReadOrderFile(&marrOrdCnct,&marrInputValues,&marrSIMIMSI,&mpsPprId,&marrError,msFileName,&marrNumType)
{
//below 1.1
/*
	var msInputString 	= """";
	var msTempString 	= """";
	var msTemp			= """";
	var msFile 			= msFileName;
	var mbError			= false;
	var mbValidateOrd	= false;
	var miCnt 			= 0;
	var miNumType		= 0;
	var marrInpStr		= new Array();
	//var marrOrdCnct 	= new Array();
	var marrTemp		= new Array();
	try
	{
    	var mfpInputFile 	= Clib.fopen(msFile,""r"");
	
	   while (msInputString != null) 
	    {
			msInputString = Clib.fgets(mfpInputFile);
			if(msInputString == null) continue;
	
	//		remove the end of line character from the string
	//		for unix formatted file it is \n and for windows formatted file it is \r\n

		if(msInputString.indexOf(""\r"") != -1) {
			msInputString = msInputString.substring(0,msInputString.indexOf(""\r""));
		} else if(msInputString.indexOf(""\n"") != -1) {
			
			msInputString = msInputString.substring(0,msInputString.indexOf(""\n""));
		}
		if(msInputString == """") continue;
		if(Clib.isdigit(msInputString.charAt(0))) 
		{		
			marrSIMIMSI[miCnt] = msInputString.split("" "");
			msTemp = marrSIMIMSI[miCnt][getArrayLength(marrSIMIMSI[miCnt])-1];
			if(!Clib.isalnum(msTemp.substring(msTemp.length-1))) 
			{
				//marrSIMIMSI[miCnt][getArrayLength(marrSIMIMSI[miCnt])-1] = msTemp.substring(0,msTemp.length-1);
				SetArray(marrSIMIMSI,miCnt,getArrayLength(marrSIMIMSI[miCnt])-1,""?"",""?"",msTemp.substring(0,msTemp.length-1));
				}
			miCnt++;
		}
		else if(Clib.isalpha(msInputString.charAt(0))) 
		{
			if(msInputString.substring(0,msInputString.indexOf("":"")) == ""Var_Out"") 
			{
//              msTempString = msInputString.substring(msInputString.indexOf("":"") + 2,msInputString.indexOf(""\n""));
				msTempString = msInputString.substring(msInputString.indexOf("":"") + 2);
				//marrNumType = msTempString.split(""/"");
				marrInpStr = msTempString.split(""/"");
				for(miNumType=0;miNumType < getArrayLength(marrInpStr);miNumType++) {
					marrNumType[miNumType] = marrInpStr[miNumType];
				}
			}
			else
			{
				marrInputValues[msInputString.substring(0,msInputString.indexOf("":""))] = msInputString.substring(msInputString.indexOf("":"") + 2);
		//		marrInputValues[msInputString.substring(0,msInputString.indexOf("":""))] = 	msInputString.substring(msInputString.indexOf("":"") + 2,msInputString.indexOf(""\n""));	
			}
		}
	}
	
	} catch(e){
		var test4 = e.errText;
		marrTemp 	= null;
		mbError 	= true;
		
		throw(e);
	} 
	finally 
	{
		if (mfpInputFile != null)
			Clib.fclose(mfpInputFile);	
	
	}
	if(mbError)
		return(!mbError);
	else {
		mbValidateOrd = ValidateOrder(marrInputValues,marrSIMIMSI,marrNumType,marrOrdCnct,mpsPprId,marrError);
		return(mbValidateOrd);
	}
*/
//above 1.1

}
"/**************************************************************************************
* Name          : SIM Order Business Service ReadOrderFile Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/

function ReadOrderFileNew(&marrOrdCnct,&marrInputValues,&marrSIMIMSI,&mpsPprId,&marrError,msFileName,&marrNumType,&mpFilePos)
{
	var msInputString 	= """";
	var msTempString 	= """";
	var msTemp			= """";
	var msFile 			= msFileName;
	var mbError			= false;
	var mbValidateOrd	= false;
	var miCnt 			= 0;
	var miNumType		= 0;
	var marrInpStr		= new Array();
	//var marrOrdCnct 	= new Array();
	var msInputString1  = """";
	var msInputString2  = """";   
	var marrTemp		= new Array();
	//1.1
	var msSIMTemp		= """";
	//1.1

	try
	{
    	 var mfpInputFile 	= Clib.fopen(msFile,""r"");
    	 var testpos2 = mpFilePos;
    	 if(mbFilePos)
    	 	Clib.fsetpos(mfpInputFile,mpFilePos);
    	 	
	     while (msInputString != null) 
	    {
	    	//1.1
			Clib.fgetpos(mfpInputFile,mpFilePos);
			var testpos = mpFilePos;
			//1.1
			msInputString = Clib.fgets(mfpInputFile);
			if(msInputString == null) continue;
	
	//		remove the end of line character from the string
	//		for unix formatted file it is \n and for windows formatted file it is \r\n

			if(msInputString.indexOf(""\r"") != -1) {
				msInputString = msInputString.substring(0,msInputString.indexOf(""\r""));
			} else if(msInputString.indexOf(""\n"") != -1) {
				
				msInputString = msInputString.substring(0,msInputString.indexOf(""\n""));
			}
			if(msInputString == """") continue;
			//1.1
			if((miCnt == miFileBatchSize) && (msInputString.substring(0,1) == ""1"")) {
				mbFilePos = true;
				break;
			} else
				mbFilePos = false;
			//1.1
			if(Clib.isdigit(msInputString.charAt(0))) 
			{		
				
				if(msInputString.substring(0,msInputString.indexOf(""|"")) == ""1"")
				{
					msInputString1 = msInputString.substring(msInputString.indexOf(""|"")+1);
					//marrSIMIMSI[miCnt] = msInputString.split("" "");
					marrSIMIMSI[miCnt] = msInputString1.split(""|"");
					msTemp = marrSIMIMSI[miCnt][getArrayLength(marrSIMIMSI[miCnt])-1];
					
					var test6 = getArrayLength(marrSIMIMSI[miCnt]);
				
					if(!Clib.isalnum(msTemp.substring(msTemp.length-1))) 
					{
						//marrSIMIMSI[miCnt][getArrayLength(marrSIMIMSI[miCnt])-1] = msTemp.substring(0,msTemp.length-1);
						SetArray(marrSIMIMSI,miCnt,getArrayLength(marrSIMIMSI[miCnt])-1,""?"",""?"",msTemp.substring(0,msTemp.length-1));
					}
					//1.1
					msSIMTemp = marrSIMIMSI[miCnt][0];
					msSIMTemp = msSIMTemp.substring(0,msSIMTemp.length-1);
					
					if(msFileStartNum == """"){
						msFileStartNum 	= msSIMTemp;
						msFileEndNum	= msSIMTemp;
					} else {
						msFileStartNum 	= (msSIMTemp < msFileStartNum)?msSIMTemp:msFileStartNum;
						msFileEndNum	= (msSIMTemp > msFileEndNum)?msSIMTemp:msFileEndNum;
					}
						
					//1.1
					miCnt++;
			   }
				if(msInputString.substring(0,msInputString.indexOf(""|"")) == ""0"")	
				{
					msInputString2 = msInputString.substring(msInputString.indexOf(""|"")+1);
					marrInpStr = msInputString2.split(""|"");
					for(miNumType=0;miNumType < getArrayLength(marrInpStr);miNumType++) {
						marrNumType[miNumType] = marrInpStr[miNumType];
						var test7 = marrInpStr[miNumType];
				        //var test8 = marrSIMIMSI[miCnt][1];
				        //var test9 = marrSIMIMSI[miCnt][2];
					}
				}
				//1.1
				if(msInputString.substring(0,msInputString.indexOf(""|"")) == ""2"")	
				{
					mbFilePos = false;
				}
				//1.1
			}
		
		/*else if(Clib.isalpha(msInputString.charAt(0))) 
		{
			if(msInputString.substring(0,msInputString.indexOf("":"")) == ""Var_Out"") 
			{
//              msTempString = msInputString.substring(msInputString.indexOf("":"") + 2,msInputString.indexOf(""\n""));
				msTempString = msInputString.substring(msInputString.indexOf("":"") + 2);
				//marrNumType = msTempString.split(""/"");
				marrInpStr = msTempString.split("","");
				for(miNumType=0;miNumType < getArrayLength(marrInpStr);miNumType++) {
					marrNumType[miNumType] = marrInpStr[miNumType];
				}
			}
			else
			{
				marrInputValues[msInputString.substring(0,msInputString.indexOf("":""))] = msInputString.substring(msInputString.indexOf("":"") + 2);
		//		marrInputValues[msInputString.substring(0,msInputString.indexOf("":""))] = 	msInputString.substring(msInputString.indexOf("":"") + 2,msInputString.indexOf(""\n""));	
			}
		}*/
	}
	
	} catch(e){
		var test4 = e.toString();
		marrTemp 	= null;
		mbError 	= true;
		
		throw(e);
	} 
	finally 
	{
		if (mfpInputFile != null)
			Clib.fclose(mfpInputFile);	
	
	}
	if(mbError)
		return(!mbError);
	else {
		mbValidateOrd = ValidateOrderNew(marrInputValues,marrSIMIMSI,marrNumType,marrOrdCnct,mpsPprId,marrError);
		return(mbValidateOrd);
	}


}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM File 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	/*var marrOrdCnct 	= new Array();
	var marrInputParams = new Array();
	var marrError 		= new Array();
	var marrSIMIMSI		= new Array();
	var marrNumberType	= new Array();*/
	var fileArray       = new Array();
	var intReturn		= CancelOperation;
	//var mpsPprId		= TheApplication().NewPropertySet();
	//var msFullFileName	= Inputs.GetProperty(""FilePath"");
	//var msFileName 		= Inputs.GetProperty(""FilePath"").substring(Inputs.GetProperty(""FileName"").lastIndexOf(""/"") + 1);
	var strErrVal		= """";
	//var mbResult		= false;
	//var Inputs 			= TheApplication().NewPropertySet();
	//var Outputs         = TheApplication().NewPropertySet();
	//try	{
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
    var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
	bcSysPref.ActivateField(""Value"");
	bcSysPref.ClearToQuery();
	bcSysPref.SetSearchSpec(""Name"",""STC_IF_SIMDETAILFILE_DIR_IN"");
	bcSysPref.ExecuteQuery();
	if(bcSysPref.FirstRecord()) 
	{
    Inputs.SetProperty(""DirectoryPath"",bcSysPref.GetFieldValue(""Value""));
    //t1 = bcSysPref.GetFieldValue(""Value"");
	//Inputs.SetProperty(""testfile"",""C:\\Test1\\filelist.lst"");
	}
	bcSysPref.ClearToQuery();
	bcSysPref.SetSearchSpec(""Name"",""STC_IF_SIMDETAILFILE_DIR_OUT"");
	bcSysPref.ExecuteQuery();
	if(bcSysPref.FirstRecord()) 
	{
    Inputs.SetProperty(""DirectoryPathOut"",bcSysPref.GetFieldValue(""Value""));
    }
	switch(MethodName) 	
    {
		case ""GenerateFile"":

			
			strErrVal = GenerateFileNew(Inputs.GetProperty(""OrderId""),Inputs.GetProperty(""FilePath""),Outputs);
			//Above 1.1
			Outputs.SetProperty(""ErrMessage"",strErrVal);
			var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
			var bcOrder 			= boOrder.GetBusComp(""RMS SIM Order"");
			with(bcOrder)
			{
			InvokeMethod(""SetAdminMode"",""TRUE"");
			SetViewMode(AllView);
			ActivateField(""Status"");
			ActivateField(""Comments"");
			ActivateField(""Status"");
			ActivateField(""PO Generated Date"");
			ActivateField(""Current Date"");
			SetSearchSpec(""Id"",Inputs.GetProperty(""OrderId""));
			ExecuteQuery(ForwardOnly);
			var blnsIsRecord = FirstRecord();
			if(blnsIsRecord)
			{
			var dtCurrentDate = GetFieldValue(""Current Date"");
			if(strErrVal!= """")
			{
			SetUserProperty(""From BusService"",""Y""); 
			SetFieldValue(""Comments"",strErrVal);
			SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW""));
			WriteRecord();
			SetUserProperty(""From BusService"",""N"");
			}
			else 
			{
			SetUserProperty(""From BusService"",""N"");
			SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""PO GENERATED""));
			SetFieldValue(""PO Generated Date"",dtCurrentDate);
			WriteRecord();
			SetUserProperty(""From BusService"",""N"");
			}
			}
			InvokeMethod(""SetAdminMode"",""FALSE"");
			}
			bcOrder = null;
			boOrder = null;
			//below 1.1
			break;
			
		case ""ReadOrderFile"":
			GetDirrectoryList(fileArray,Inputs,Outputs);
			CallReadOrderFiles(fileArray,Inputs);
			/*	//mbResult = 	ReadOrderFileNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrError,msFullFileName,marrNumberType);
			if(mbResult)
				{	

			   	strErrVal = UpdateNumbersNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrNumberType,msFullFileName);
			 }
		//-----------------------------------------------------------------------------
		//enable the following script, if an error file is required to be generated          // 01:07:2005
		//----------------------------------------------------------------------------
			if(strErrVal != """" || getArrayLength(marrError) > 0) 
			//{
			/*	marrError[getArrayLength(marrError)] = strErrVal;
				GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);	
			    	
			}
			else //commented for read tests*/
			/*{
				if(marrError[0] != """") {
				GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);
				//strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD019"");
				TheApplication().RaiseErrorText(Outputs.GetProperty(""strErrVal""));
				}
			}//commented for read tests
				break;
			default:
				intReturn = ContinueOperation;*/
				break;
			case ""ReadOrderFileNew"":
			GetDirrectoryList(fileArray,Inputs,Outputs);
			CallReadOrderFiles(fileArray,Inputs);
			/*	//mbResult = 	ReadOrderFileNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrError,msFullFileName,marrNumberType);
			if(mbResult)
				{	

			   	strErrVal = UpdateNumbersNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrNumberType,msFullFileName);
			 }
		//-----------------------------------------------------------------------------
		//enable the following script, if an error file is required to be generated          // 01:07:2005
		//----------------------------------------------------------------------------
			if(strErrVal != """" || getArrayLength(marrError) > 0) 
			//{
			/*	marrError[getArrayLength(marrError)] = strErrVal;
				GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);	
			    	
			}
			else //commented for read tests*/
			/*{
				if(marrError[0] != """") {
				GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);
				//strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD019"");
				TheApplication().RaiseErrorText(Outputs.GetProperty(""strErrVal""));
				}
			}//commented for read tests
				break;
			default:
				intReturn = ContinueOperation;*/
				break;
		}
	
		//}
	//catch(e)
	//{

	//	if(strErrVal == """")
	//		strErrVal = e.errText;

	//}
	//finally
//	{ 
	
		fileArray           = null;
		bcSysPref           = null;
		boSysPref           = null;
		/*mpsPprId			= null;
	    marrOrdCnct 	    = null;
	    marrInputParams     = null;
	    marrError 	        = null;
	    marrSIMIMSI	        = null;
        marrNumberType	    = null;*/
//	}
//	if(strErrVal != """")
//		TheApplication().RaiseErrorText(strErrVal);
				
	return (intReturn);
}
function SetArray(&arrArray,d1,d2,d3,d4,&value)
{
	try{
var strSTEng = TheApplication().GetProfileAttr(""RMS_ST_ENGINE"");
if ((d2 != ""?"")) {
if ((typeof(arrArray[d1]) != "function"") && (strSTEng == ""Y"")){
arrArray[d1] = new Array();
}
} else {
arrArray[d1] = value;
return(true);
}
if ((d3 != ""?"")) {
if ((typeof(arrArray[d1][d2]) != "function"")  && (strSTEng == ""Y""))
arrArray[d1][d2] = new Array();
} else {
arrArray[d1][d2] = value;
return(true);
}
if ((d4 != ""?"")) {
if((typeof(arrArray[d1][d2][d3]) != "function"")  && (strSTEng == ""Y""))
arrArray[d1][d2][d3] = new Array();
} else {
arrArray[d1][d2][d3] = value;
return(true);
}
} catch(e) {
var test = e.errText;
throw(e);
}


}
"/**************************************************************************************
* Name          : SIM Order Business Service UpdateFile Method 					  	  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/

function UpdateFile(strFileType,strComments,strFileName,strOrderId,strOrderLineId)
{
	var miFileSeq		= 0;
	var mbIsFileRec		= false;
	var msFileId		= """";
	var boOrder 		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderFileInfo = boOrder.GetBusComp(""RMS SIM Order File Info"");
	//1.1
	var msFileNameQry	= """";
	//1.1

	with(bcOrderFileInfo) 
	 {
		SetViewMode(3);
		ActivateField(""File Sequence"");
		ActivateField(""HLR_Batch"");
		ClearToQuery();
		SetSearchSpec(""SIM Order Id"",strOrderId);
		SetSearchSpec(""File Type"",strFileType);
		SetSortSpec(""File Sequence(DESCENDING)"");
		ExecuteQuery(ForwardOnly);
		mbIsFileRec = FirstRecord();

		if(mbIsFileRec) 
			miFileSeq = GetFieldValue(""File Sequence"");
		else
			miFileSeq = 0;
	 }

//  Update the file table with the appropriate parameters	

	with(bcOrderFileInfo) 
	{
		SetViewMode(AllView);
		ActivateField(""Id"");
		
		//SetFieldValue(""File Name"",strFileName.substring(strFileName.indexOf(""EE"")));
		var index = strFileName.lastIndexOf(""\\"");
		if (index <= 0)
        {
			index = strFileName.lastIndexOf(""/"");
	        if (index > 0)
	        {
			//1.1	SetFieldValue(""File Name"",strFileName.substring(strFileName.lastIndexOf(""/"")+1));
				msFileNameQry = strFileName.substring(strFileName.lastIndexOf(""/"")+1);
		    }
		}
		else 
		{
		//1.1	SetFieldValue(""File Name"",strFileName.substring(strFileName.lastIndexOf(""\\"")+1));
			msFileNameQry = strFileName.substring(strFileName.lastIndexOf(""\\"")+1);
		}
		//1.1
		ClearToQuery();
		SetSearchSpec(""File Name"",msFileNameQry);
		SetSearchSpec(""File Type"",strFileType);
		SetSearchSpec(""SIM Order Id"",strOrderId);
		SetSearchSpec(""SIM Order Line Id"",strOrderLineId);
		ExecuteQuery(ForwardOnly);
		
		if(!FirstRecord()) {
			NewRecord(1);
			SetFieldValue(""Comments"",strComments);
			SetFieldValue(""File Name"",msFileNameQry);
			SetFieldValue(""File Sequence"",miFileSeq);
			SetFieldValue(""File Type"",strFileType);
			SetFieldValue(""SIM Order Id"",strOrderId);
			SetFieldValue(""SIM Order Line Id"",strOrderLineId);
			WriteRecord();
		}
	    }//1.1
	msFileId = bcOrderFileInfo.GetFieldValue(""Id"");
	bcOrderFileInfo = null;
	boOrder			= null;
	return msFileId;
}
