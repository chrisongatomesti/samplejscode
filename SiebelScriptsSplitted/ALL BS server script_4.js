"/**************************************************************************************
* Name          : SIM Order Business Service UpdateNumbers Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* * 20060710    1.1         Kalyana      	Commented entire function  becuase we are not  using  this function
**************************************************************************************/

function UpdateNumbers(&marrOrdCnct,&marrInputParams,&marrSIMIMSI,&mpsPprId,&marrNumTypes,msFileName)
{
//below 1.1
/*	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var boNMEnquiry			= TheApplication().GetBusObject(""RMS NM Number Enquiry"");     // Changed 06:06:2005

//	var bcNumberMaster      = boOrder.GetBusComp(""RMS SIM Order NM Number Master"");
	var bcNumberMaster      = boNMEnquiry.GetBusComp(""RMS NM Number Enquiry For Update""); // Changed 06:06:2005
	
	var boSIMNumber         = TheApplication().GetBusObject(""RMS SIM Number"");     // Changed 06:06:2005
	var bcNumPaperItem      = boSIMNumber.GetBusComp(""RMS SIM Number Paper Item""); // Changed 06:06:2005
//	var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Number Paper Item""); 
//	var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Order Paper Item"");

	var bcOrder				= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrderUpd			= boOrder.GetBusComp(""RMS SIM Order Update"");
	var bcOrderLine			= boOrder.GetBusComp(""RMS SIM Order Line Update"");
	var bcOrderLineNumbers  = boOrder.GetBusComp(""RMS SIM Order Line Num Info"");
	var bcNumberConcat		= boOrder.GetBusComp(""RMS SIM Order Association Number Type Display"");
	var bcOrderLineRecdInfo = boOrder.GetBusComp(""RMS SIM Order Line Recd Info"");
	
	var boOrderQuery		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	= boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");

	var boSysPref			= TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref			= boSysPref.GetBusComp(""System Preferences"");
	
	var bsRMSBlk            = TheApplication().GetService(""RMS RMS Block Calc"");
	var psBlkInputs			= TheApplication().NewPropertySet();
	var psBlkOutputs		= TheApplication().NewPropertySet();
	
	var miRecdItemCount 	= 0; 
	var mbIsRecord 			= false;
	var strErrVal			= """";
	var strSIMCrdId			= """";
	var strSIMCrdPrice = """";
	var strOrderId			= """";
	var blnsIsPaperItem = false; //KT 30-04-06
	var blnBlkUpdate		= false;
	var dtCurrentDate ;
	
	try
	{
	
	with(bcSysPref) {
		ActivateField(""Value"");
		ClearToQuery();
		SetSearchSpec(""Name"",""RMS_BLOCK_UPDATION"");
		SetSearchSpec(""Value"",""Y"");
		ExecuteQuery(ForwardOnly);
		if(FirstRecord())
			blnBlkUpdate	= true;
	}
	with(bcOrderLineQuery) 
	{
		
		ActivateField(""Order Id"");
		ClearToQuery();
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strOrderId = GetFieldValue(""Order Id"");
	}

	with(bcOrder) 
	{
		SetViewMode(3);
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ActivateField(""Closed Date"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId);
	//	SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""]); KT 24-04-2006
		SetSearchSpec(""Revision Number"",1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);	
		} 
		dtCurrentDate = GetFieldValue(""Current Date"");
	}
	
	with(bcOrderUpd) 
	{
		SetViewMode(3);
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ActivateField(""Closed Date"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId);
		//SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""])
		SetSearchSpec(""Revision Number"",1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		dtCurrentDate = GetFieldValue(""Current Date"");
	}
	
	with(bcOrderLine) 
	{
		ActivateField(""Status"");
		ActivateField(""Id"");
		ActivateField(""Quantity Received"");
		ActivateField(""Fulfilled Date"");
		ActivateField(""SIM Card Config Id"");	
		ActivateField(""SIM Card Price"");
		ClearToQuery();
		//SetSearchSpec(""SIM Card Config Type"",marrInputParams[""Type""]);
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
	  //SetSearchSpec(""Profile"",marrInputParams[""Profile""]);  KT 24-04-2006
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]); 
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strSIMCrdId = GetFieldValue(""SIM Card Config Id"");
		strSIMCrdPrice = GetFieldValue(""SIM Card Price"");
	}
	
	var miCnt = 0;
	var miPprCnt = 0;
	
	var msFileId = UpdateFile(""I"","""",msFileName,bcOrderUpd.GetFieldValue(""Id""));

//	Update the Order Line Recieved Info Table	

	with(bcOrderLineRecdInfo) {
	NewRecord(1);
	SetFieldValue(""Input File Info Id"",msFileId);
	SetFieldValue(""Order Id"",bcOrder.GetFieldValue(""Id""));
	SetFieldValue(""Order Line Id"",bcOrderLine.GetFieldValue(""Id""));
	SetFieldValue(""Quantity Received"",getArrayLength(marrOrdCnct));
	WriteRecord();
	}
	
	for(miCnt =0; miCnt < getArrayLength(marrOrdCnct);miCnt++) 
	   {
		with(bcOrderLineNumbers) 
		{
			ActivateField(""Status"");
			ActivateField(""File Id"");
			ActivateField(""Assoc Start Id"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",marrOrdCnct[miCnt]);
//			SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""WITH SIM SUPPLIER""));
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) continue;
			
			miRecdItemCount++;
			SetFieldValue(""File Id"",msFileId);
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
		//	SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
			WriteRecord();
			
		}
		
		for(miPprCnt = 2;miPprCnt<getArrayLength(marrSIMIMSI[miCnt]);miPprCnt++) 
		{
			with(bcNumPaperItem)
			{
				ActivateField(""Paper Item Value"");
				ClearToQuery();
				SetSearchSpec(""Order Line Number Detail Id"",bcOrderLineNumbers.GetFieldValue(""Id"")); 
				SetSearchSpec(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt]));
				ExecuteQuery(ForwardOnly);
				blnsIsPaperItem = FirstRecord();
				if(!FirstRecord()) 
				{
					NewRecord(1);	
					SetFieldValue(""Order Line Number Detail Id"",bcOrderLineNumbers.GetFieldValue(""Id""));
					//SetFieldValue(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt-2]));//KT  14-06-06  commented as for new read file  format
				    SetFieldValue(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt]));
				}
				//SetFieldValue(""Paper Item Value"",marrSIMIMSI[miCnt][miPprCnt-2]);
				SetFieldValue(""Paper Item Value"",marrSIMIMSI[miCnt][miPprCnt]);
				WriteRecord();				
			}
		}

		with(bcNumberConcat) 
		{
				ActivateField(""Status"");
				ActivateField(""Associated Number"");
				
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",bcOrderLineNumbers.GetFieldValue(""Assoc Start Id""));
				ExecuteQuery(1);
				
				mbIsRecord = FirstRecord();
				while(mbIsRecord) {
					SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
				//	SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"")); KT 26-04-06
					WriteRecord();
					mbIsRecord = NextRecord();
				}
				
		}	
		
		with(bcNumberMaster) 
		{
			ActivateField(""SIM Card Id"");
			ActivateField(""Price"");			
			ActivateField(""Status"");
			ActivateField(""Block Id"");
			ActivateField(""Type Identifier"");
			ActivateField(""Number String With Checksum"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"", bcOrderLineNumbers.GetFieldValue(""Assoc Start Id""));
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) 
			{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD016"",marrInputParams[""P0_ref_number""]);
				TheApplication().RaiseErrorText(strErrVal);
			}
			
			while(mbIsRecord) 
			{
				if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
					SetFieldValue(""Number String With Checksum"",marrSIMIMSI[miCnt][1]);
				SetFieldValue(""SIM Card Id"",strSIMCrdId);			
				SetFieldValue(""Price"",strSIMCrdPrice);			
				SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
				//SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"")); KT 26-04-06
				WriteRecord();
				
				if(blnBlkUpdate) {
					with(psBlkInputs)
					{
						SetProperty(""Object Id"",GetFieldValue(""Block Id""));
						SetProperty(""From Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""WITH SIM SUPPLIER""));
						SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
					//	SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
					}
					
					bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
				}
				mbIsRecord = NextRecord();
			}
		}
		
		
	}

//	Update the Order Line Table for Quantity Recieved and Status fields

	with(bcOrderLine)
	{
		SetUserProperty(""Suppress OrdPreSetField"",""Y"");
		SetUserProperty(""SuppressWrite"",""Y"");
		SetFieldValue(""Quantity Received"",ToInteger(GetFieldValue(""Quantity Received"")) + miRecdItemCount);
		var test9 = (ToInteger(GetFieldValue(""Quantity Received""))+miRecdItemCount) ;
		if(ToInteger(GetFieldValue(""Quantity Ordered"")) <= ToInteger(GetFieldValue(""Quantity Received""))) 
		{
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""FULFILLED""));
			SetFieldValue(""Fulfilled Date"",dtCurrentDate);
			WriteRecord();
//			bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED""));
//			bcOrderUpd.WriteRecord();
		}
		else if(ToInteger(GetFieldValue(""Quantity Received"")) != 0) 
		{
//			bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
//			bcOrderUpd.WriteRecord();
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
			WriteRecord();
			
		}
		var mbIsRecord = FirstRecord();
		//MS 24-04-2006while(mbIsRecord) {
		if(mbIsRecord) {
			var mstrSrchExpr = ""[Status] <> '""+TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""FULFILLED"")+""'"";
			ClearToQuery();
			SetSearchExpr(mstrSrchExpr)
			ExecuteQuery();
			if(FirstRecord()) {
				bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
				bcOrderUpd.WriteRecord();
			
			}
			else {
				bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED""));
				bcOrderUpd.SetFieldValue(""Closed Date"",dtCurrentDate);
				bcOrderUpd.WriteRecord();
			}
		}
	}
	} catch(e){
		if(strErrVal == """") 
		{
			strErrVal = e.errText;
		} 
		
		throw (e);
		
	} finally {
	    bcSysPref           = null;
		boSysPref           = null;
		bcOrder				= null;
	    bcOrderUpd			= null;
	    bcOrderLine			= null;
	    bcOrderLineNumbers  = null;
	    bcNumberConcat		= null;
	    bcNumberMaster      = null;
	    bcOrderLineRecdInfo = null;
	    bcNumPaperItem		= null;
		boOrder 			= null;
		bcOrderLineQuery	= null;
		boOrderQuery		= null;
		bsRMSBlk            = null;
	    psBlkInputs			= null;
	    psBlkOutputs		= null;
	}
	
	return(strErrVal);*/
//above 1.1
}
"/**************************************************************************************
* Name          : SIM Order Business Service UpdateNumbers Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Siebel ES SCR1, Objects Destroyed
**************************************************************************************/

function UpdateNumbersNew(&marrOrdCnct,&marrInputParams,&marrSIMIMSI,&mpsPprId,&marrNumTypes,msFileName)
{
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var boNMEnquiry			= TheApplication().GetBusObject(""RMS NM Number Enquiry"");     // Changed 06:06:2005
//	var bcNumberMaster      = boOrder.GetBusComp(""RMS SIM Order NM Number Master"");
	var bcNumberMaster      = boNMEnquiry.GetBusComp(""RMS NM Number Enquiry For Update""); // Changed 06:06:2005
	var boSIMNumber         = TheApplication().GetBusObject(""RMS SIM Number"");     // Changed 06:06:2005
	var bcNumPaperItem      = boSIMNumber.GetBusComp(""RMS SIM Number Paper Item""); // Changed 06:06:2005
//	var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Number Paper Item""); 
//	var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Order Paper Item"");
	var bcOrder				= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrderUpd			= boOrder.GetBusComp(""RMS SIM Order Update"");
	var bcOrderLine			= boOrder.GetBusComp(""RMS SIM Order Line Update"");
	var bcOrderLineNumbers  = boOrder.GetBusComp(""RMS SIM Order Line Num Info"");
	var bcNumberConcat		= boOrder.GetBusComp(""RMS SIM Order Association Number Type Display"");
	var bcOrderLineRecdInfo = boOrder.GetBusComp(""RMS SIM Order Line Recd Info"");
	var boOrderQuery		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	= boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");
	var boSysPref			= TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref			= boSysPref.GetBusComp(""System Preferences"");
	var bsRMSBlk            = TheApplication().GetService(""RMS RMS Block Calc"");
	var psBlkInputs			= TheApplication().NewPropertySet();
	var psBlkOutputs		= TheApplication().NewPropertySet();
	var miRecdItemCount 	= 0; 
	var mbIsRecord 			= false;
	var strErrVal			= """";
	var strSIMCrdId			= """";
	var strSIMCrdPrice = """";
	var strOrderId			= """";
	var blnsIsPaperItem = false; //KT 30-04-06
	var blnBlkUpdate		= false;
	var dtCurrentDate ;
	
	try
	{
	
	with(bcSysPref) {
		ActivateField(""Value"");
		ClearToQuery();
		SetSearchSpec(""Name"",""RMS_BLOCK_UPDATION"");
		SetSearchSpec(""Value"",""Y"");
		ExecuteQuery(ForwardOnly);
		if(FirstRecord())
			blnBlkUpdate	= true;
	}
	with(bcOrderLineQuery) 
	{
		
		ActivateField(""Order Id"");
		ClearToQuery();
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		//SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		SetSearchSpec(""Order Line Id"",marrNumTypes[iOrdLineId]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strOrderId = GetFieldValue(""Order Id"");
	}

	with(bcOrder) 
	{
		SetViewMode(3);
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ActivateField(""Closed Date"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId);
	//	SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""]); KT 24-04-2006
		SetSearchSpec(""Revision Number"",1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);	
		} 
		dtCurrentDate = GetFieldValue(""Current Date"");
	}
	
	with(bcOrderUpd) 
	{
		SetViewMode(3);
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ActivateField(""Closed Date"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId);
		//SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""])
		SetSearchSpec(""Revision Number"",1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		dtCurrentDate = GetFieldValue(""Current Date"");
	}
	
	with(bcOrderLine) 
	{
		ActivateField(""Status"");
		ActivateField(""Id"");
		ActivateField(""Quantity Received"");
		ActivateField(""Fulfilled Date"");
		ActivateField(""SIM Card Config Id"");	
		ActivateField(""SIM Card Price"");
		ClearToQuery();
		//SetSearchSpec(""SIM Card Config Type"",marrInputParams[""Type""]);
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		//SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
	  	  SetSearchSpec(""Order Line Id"",marrNumTypes[iOrdLineId]);
		//SetSearchSpec(""Profile"",marrInputParams[""Profile""]);  KT 24-04-2006
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]); 
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strSIMCrdId = GetFieldValue(""SIM Card Config Id"");
		strSIMCrdPrice = GetFieldValue(""SIM Card Price"");
	}
	
	var miCnt = 0;
	var miPprCnt = 0;
	
	var msFileId = UpdateFile(""I"","""",msFileName,bcOrderUpd.GetFieldValue(""Id""));

//	Update the Order Line Recieved Info Table	

	with(bcOrderLineRecdInfo) {
		ActivateField(""Quantity Received"");
		SetSearchSpec(""Order Id"",bcOrder.GetFieldValue(""Id""));
		SetSearchSpec(""Order Line Id"",bcOrderLine.GetFieldValue(""Id""));
		SetSearchSpec(""Input File Info Id"",msFileId);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord()) {
			SetFieldValue(""Quantity Received"",(ToNumber(GetFieldValue(""Quantity Received"")) + ToNumber(getArrayLength(marrOrdCnct))));
			WriteRecord();
		} else {
			NewRecord(1);
			SetFieldValue(""Input File Info Id"",msFileId);
			SetFieldValue(""Order Id"",bcOrder.GetFieldValue(""Id""));
			SetFieldValue(""Order Line Id"",bcOrderLine.GetFieldValue(""Id""));
			SetFieldValue(""Quantity Received"",getArrayLength(marrOrdCnct));
			WriteRecord();
		}
	}
	
	for(miCnt =0; miCnt < getArrayLength(marrOrdCnct);miCnt++) 
	   {
		with(bcOrderLineNumbers) 
		{
			ActivateField(""Status"");
			ActivateField(""File Id"");
			ActivateField(""Assoc Start Id"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",marrOrdCnct[miCnt]);
			var test9 = marrOrdCnct[miCnt];
//			SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""WITH SIM SUPPLIER""));
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) continue;
			
			miRecdItemCount++;
			SetFieldValue(""File Id"",msFileId);
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
		//	SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
			WriteRecord();
			
		}
		
		for(miPprCnt = 2;miPprCnt<getArrayLength(marrSIMIMSI[miCnt]);miPprCnt++) 
		{
			with(bcNumPaperItem)
			{
				ActivateField(""Paper Item Value"");
				ClearToQuery();
				SetSearchSpec(""Order Line Number Detail Id"",bcOrderLineNumbers.GetFieldValue(""Id"")); 
				SetSearchSpec(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt+iPprItemIndxL]));
				var test10 = mpsPprId.GetProperty(marrNumTypes[miPprCnt+iPprItemIndxL]);
				ExecuteQuery(ForwardOnly);
				blnsIsPaperItem = FirstRecord();
				if(!FirstRecord()) 
				{
					NewRecord(1);	
					SetFieldValue(""Order Line Number Detail Id"",bcOrderLineNumbers.GetFieldValue(""Id""));
					SetFieldValue(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt+iPprItemIndxL]));
				}
				SetFieldValue(""Paper Item Value"",marrSIMIMSI[miCnt][miPprCnt]);
				WriteRecord();				
			}
		}

		with(bcNumberConcat) 
		{
				ActivateField(""Status"");
				ActivateField(""Associated Number"");
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",bcOrderLineNumbers.GetFieldValue(""Assoc Start Id""));
				//ExecuteQuery(1);
				ExecuteQuery(ForwardOnly);
				mbIsRecord = FirstRecord();
				while(mbIsRecord) {
					SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
				//	SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"")); KT 26-04-06
					WriteRecord();
					mbIsRecord = NextRecord();
				}
				
		}	
		
		with(bcNumberMaster) 
		{
			ActivateField(""SIM Card Id"");
			ActivateField(""Price"");			
			ActivateField(""Status"");
			ActivateField(""Block Id"");
			ActivateField(""Type Identifier"");
			ActivateField(""Number String With Checksum"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"", bcOrderLineNumbers.GetFieldValue(""Assoc Start Id""));
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) 
			{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD016"",marrInputParams[""P0_ref_number""]);
				TheApplication().RaiseErrorText(strErrVal);
			}
			
			while(mbIsRecord) 
			{
				if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
				//SetFieldValue(""Number String With Checksum"",marrSIMIMSI[miCnt][1]);
				SetFieldValue(""Number String With Checksum"",marrSIMIMSI[miCnt][0]);  //  change  as per  new  file format
				SetFieldValue(""SIM Card Id"",strSIMCrdId);			
				SetFieldValue(""Price"",strSIMCrdPrice);			
				SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
				//SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"")); KT 26-04-06
				WriteRecord();
				
				if(blnBlkUpdate) {
					with(psBlkInputs)
					{
						SetProperty(""Object Id"",GetFieldValue(""Block Id""));
						SetProperty(""From Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""WITH SIM SUPPLIER""));
						SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
					//	SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
					}
					
					bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
				}
				mbIsRecord = NextRecord();
			}
		}
		
		
	}

//	Update the Order Line Table for Quantity Recieved and Status fields

	with(bcOrderLine)
	{
		SetUserProperty(""Suppress OrdPreSetField"",""Y"");
		SetUserProperty(""SuppressWrite"",""Y"");
		SetFieldValue(""Quantity Received"",ToInteger(GetFieldValue(""Quantity Received"")) + miRecdItemCount);
		var test9 = (ToInteger(GetFieldValue(""Quantity Received""))+miRecdItemCount) ;
		if(ToInteger(GetFieldValue(""Quantity Ordered"")) <= ToInteger(GetFieldValue(""Quantity Received""))) 
		{
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""FULFILLED""));
			SetFieldValue(""Fulfilled Date"",dtCurrentDate);
			WriteRecord();
//			bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED""));
//			bcOrderUpd.WriteRecord();
		}
		else if(ToInteger(GetFieldValue(""Quantity Received"")) != 0) 
		{
//			bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
//			bcOrderUpd.WriteRecord();
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
			WriteRecord();
			
		}
		var mbIsRecord = FirstRecord();
		//MS 24-04-2006while(mbIsRecord) {
		if(mbIsRecord) {
			var mstrSrchExpr = ""[Status] <> '""+TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""FULFILLED"")+""'"";
			ClearToQuery();
			SetSearchExpr(mstrSrchExpr)
			ExecuteQuery();
			if(FirstRecord()) {
				bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
				bcOrderUpd.WriteRecord();
			
			}
			else {
				bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED""));
				bcOrderUpd.SetFieldValue(""Closed Date"",dtCurrentDate);
				bcOrderUpd.WriteRecord();
			}
		}
	}
	} catch(e){
		if(strErrVal == """") 
		{
			strErrVal = e.errText;
		} 
		
		throw (e);
		
	} finally {

		bcOrder				= null;
	    bcOrderUpd			= null;
	    bcOrderLine			= null;
	    bcOrderLineNumbers  = null;
	    bcNumberConcat		= null;
	    bcNumberMaster      = null;
	    bcOrderLineRecdInfo = null;
	    bcNumPaperItem		= null;
		bcOrderLineQuery	= null;
		boOrder 			= null;
		boOrderQuery		= null;
//below 1.1 
		bcSysPref           = null;
		boNMEnquiry         = null;
		boSIMNumber         = null;
		boSysPref           = null;
//above 1.1
		bsRMSBlk            = null;
	    psBlkInputs			= null;
	    psBlkOutputs		= null;
	}
	return(strErrVal);
}
"/**************************************************************************************
* Name          : SIM Order Business Service ValidateOrder Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 27/07/2005    1.1         MBT             Updated (Changes for    27/07/2005		  *	
      	                                     mulitples IMSI in same file)   
* 20060710      1.2         Kalyana          Commented   entire  function  for future  use    
**************************************************************************************/

function ValidateOrder(&marrInputParams,&marrSIMIMSI,&marrNumTypes,&marrOrdCnct,&mpsPprId,&marrError)
{
//below 1.2
/*	
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderHdr 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrderLine			= boOrder.GetBusComp(""RMS SIM Order Line"");
	var bcOrderLineNum		= boOrder.GetBusComp(""RMS SIM Order Line Num Info"");
	
	var boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumEnqUpdate	= boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update"");
	
	var boOrderQuery		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	= boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");

//  var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Number Paper Item"");
		
	var mbIsRecord 			= false;
	var mpsSIM 				= TheApplication().NewPropertySet();
	var mpsIMSI 			= TheApplication().NewPropertySet();
	
	var miCnt 				= 0;
	var msNumber 			= """";
	var miErrCnt			= 0;
	var mpsPprItem 			= TheApplication().NewPropertySet();
	var strStatus 			= """";
	var strErrVal			= """";
	var psError 			= TheApplication().NewPropertySet();
	var marrNumIMSI			= new Array();
//  var marrOrdCnct = new Array();
	var strOrderId			= """";
	var strNumHandle		= """";
	var intCheckSumLen		= 1;
	var mbError 			= false;
	var msSIM="""";
	
	try {

	with(bcOrderLineQuery) 
	{

		ActivateField(""Order Id"");
		ClearToQuery();
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strOrderId = GetFieldValue(""Order Id"");
	}

	//Query the database with the Order Number				
	with(bcOrderHdr) {
		SetViewMode(AllView);
		ActivateField(""Id"");
		ActivateField(""Status"");
		ActivateField(""Order Number"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId) 
		//SetSearchSpec(""Revision Number"",1);
  	    //SetSearchSpec(""Profile"",marrInputParams[""Profile""]); 
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]);
		
		ExecuteQuery();
	}
//  If query is returning no records then set the Comments property and exit
	if(!bcOrderHdr.FirstRecord()) 
	{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
		marrError[miErrCnt++] = strErrVal;
		TheApplication().RaiseErrorText(strErrVal);
	} 
	else if(bcOrderHdr.GetFieldValue(""Status"") == TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED"")) 
	{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD017"",bcOrderHdr.GetFieldValue(""Order Number""));
		marrError[miErrCnt++] =  strErrVal;
		TheApplication().RaiseErrorText(strErrVal);
	} 
	else 
	{
		strStatus = bcOrderHdr.GetFieldValue(""Status"");
	}
	
//   Set the Status parameter

	with(bcOrderLine) {
		ActivateField(""Id"");
		ClearToQuery();
		var temp2 = marrInputParams[""Profile""];
		var temp4 =	marrInputParams[""Transport_Key""];
		//SetSearchSpec(""SIM Card Config Type"",marrInputParams[""Type""]);
		//SetSearchSpec(""Profile"",marrInputParams[""Profile""]);
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]);
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
	}
	
	if(!mbIsRecord) {
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
		marrError[miErrCnt++] =  strErrVal;
		TheApplication().RaiseErrorText(strErrVal);
	}
	
	var bcPaperItem	= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");	
	
//Query the Paper Item table corresponding to the Order Id

	with(bcPaperItem) {
		SetViewMode(AllView);
		ActivateField(""Paper Item Id"");
		ActivateField(""Length"");
		ActivateField(""Paper Item Name"");
		
		ClearToQuery();
		ExecuteQuery(1);
		mbIsRecord = FirstRecord();
		//if(!mbIsRecord) return """";
	}
	
	while(mbIsRecord) 
	{
		mpsPprItem.SetProperty(bcPaperItem.GetFieldValue(""Paper Item Name""),bcPaperItem.GetFieldValue(""Length""));
		mpsPprId.SetProperty(bcPaperItem.GetFieldValue(""Paper Item Name""),bcPaperItem.GetFieldValue(""Paper Item Id""));
		mbIsRecord = bcPaperItem.NextRecord();
	}
	
	with(bcOrderLineNum) 
	{
		//ActivateField(""Assoc Start Id"");
		ActivateField(""Id"");
		ActivateField(""Numbers"");
		ActivateField(""Concatenated Number Types"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Status"");
		ClearToQuery();
		ExecuteQuery();
		mbIsRecord = FirstRecord();
		
	}

/*	with(RMS SIM Number Paper Item) {
		ActivateField(); } */

//above 1.2
// below 1.2
/*	
var marrCnctNum = new Array();

	while(mbIsRecord) {
		msNumber = bcOrderLineNum.GetFieldValue(""Numbers"");
		marrCnctNum = msNumber.split("" / "");
		
		if(getArrayLength(marrCnctNum)>1) 
		{
//		Checking whether the input numbers are having delimiters. if yes then remove the delimiters
			if(isNaN(ToNumber(marrCnctNum[0])))
				mpsSIM.SetProperty(CleanNumber(marrCnctNum[0]),bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			else {
								
				mpsSIM.SetProperty(marrCnctNum[0],ToString(bcOrderLineNum.GetFieldValue(""Assoc Start Id"")));
			
			}
//		Checking whether the input numbers are having delimiters. if yes then remove the delimiters
			if(isNaN(ToNumber(marrCnctNum[1])))
				mpsIMSI.SetProperty(CleanNumber(marrCnctNum[1]),bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			else
				mpsIMSI.SetProperty(marrCnctNum[1],bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			
		}
		mbIsRecord = bcOrderLineNum.NextRecord();
	}
	var temp = marrInputParams[""IMSI""];
	marrNumIMSI = marrInputParams[""IMSI""].split("" / "");
	var msSIMLoc = getArrayLength(marrNumIMSI);
	//checking for SIM and IMSI numbers retrieved
	for(miCnt =0;miCnt < getArrayLength(marrSIMIMSI);miCnt++) 
	{
		marrError[miCnt] = """";
		var msSIM = marrSIMIMSI[miCnt][msSIMLoc];
		var msSIMNoCS = msSIM.substring(0,msSIM.length-1);

		
// Checking the SIM,Checksum,IMSI & SIM/IMSI Association

	
/*		if(!mpsSIM.PropertyExists(msSIMNoCS))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD010"") + msSIM;
			mbError = true;
			continue;
		}*/
		
//		var temp  = msSIM.substring(msSIM.length-1);
//		var temp1 =	ChecksumNumber(msSIMNoCS);
		
/*		if(msSIM.substring(msSIM.length-1) != ChecksumNumber(msSIMNoCS))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD011"") + msSIM;
			mbError = true;
			continue;		
		}
		if(!mpsIMSI.PropertyExists(marrSIMIMSI[miCnt][0]))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD012"") + marrSIMIMSI[miCnt][0];
			mbError = true;
			continue;
		
		}
		if(mpsSIM.GetProperty(msSIMNoCS) != (mpsIMSI.GetProperty(marrSIMIMSI[miCnt][0])))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][0];
			mbError = true;
			continue;		
		}*/
		

            //Check whether the numbers exists in RMS system
//above 1.2
//below 1.2
/*
		    with(bcNumEnqUpdate) {
			//ActivateField(""Number String With Checksum"");
			ActivateField(""Number String"");
			ActivateField(""Status"");
			for(var i = 0;i<getArrayLength(marrSIMIMSI[miCnt]);i++) {
					if(msSIMLoc >= i) {
					strNumHandle = marrSIMIMSI[miCnt][i];
					ClearToQuery();
					//SetSearchSpec(""Number String With Checksum"",marrSIMIMSI[miCnt][i]);
					if(msSIMLoc == i)
						SetSearchSpec(""Number String"",strNumHandle.substring(0,(strNumHandle.length - intCheckSumLen)));
					else 
						SetSearchSpec(""Number String"",strNumHandle);
					ExecuteQuery();
					if(!FirstRecord()) {
						marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][i];
						mbError = true;
						continue;
							}
				//Checking  whether some or all  number's are already received.
				else
				{
				if(bcNumEnqUpdate.GetFieldValue(""Status"")!= TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""WITH SIM SUPPLIER""))
				{
				marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder003"",marrSIMIMSI[miCnt][0]);
				mbError = true;
				}
				}	
				}
			    }
		        }	
			
/*			ClearToQuery();
			SetSearchSpec(""Number String With Checksum"",msSIM);
			ExecuteQuery();
			
			if(FirstRecord()) {
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",GetFieldValue(""Id""));
				ExecuteQuery();
				var mblnIsRecord = FirstRecord();
				var blnChkNumExists = false;
				while(mblnIsRecord) {
					for(var i = 0;i<getArrayLength(marrSIMIMSI[miCnt]);i++) {
						if(marrSIMIMSI[miCnt][i] == GetFieldValue(""Number String With Checksum"")) {
							blnChkNumExists = true;
							break;
						}
					}
					if(blnChkNumExists = false) {
						marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][i];
						mbError = true;
						continue;
					}
					mblnIsRecord = NextRecord();
				}
			}
		}*/

	
		//marrOrdCnct[miCnt] = mpsSIM.GetProperty(msSIM);
//abobe 1.2
//below 1.2
/*
		marrOrdCnct[miCnt] = mpsSIM.GetProperty(msSIMNoCS);
		
	}
			
	   		//Checking   whether all  Paper Item Values  are retrieved or not  KT 30-05-06
			for(var i=0;i<getArrayLength(marrOrdCnct);i++)
	   		var temp = marrOrdCnct[i];
	   		var miNumCnt = 0;
	  		for(miCnt =0;miCnt < getArrayLength(marrSIMIMSI);miCnt++) {
		 	var SImNum = marrSIMIMSI[miCnt][0];
			//if(getArrayLength(marrSIMIMSI[miCnt])< (getArrayLength(marrNumTypes)+2))
			if(getArrayLength(marrSIMIMSI[miCnt])< (getArrayLength(marrNumTypes)))
			{
			//var arrLengthDiff = (getArrayLength(marrNumTypes)+2)-getArrayLength(marrSIMIMSI[miCnt]);
			//var arrLengthDiff = (getArrayLength(marrNumTypes))-getArrayLength(marrSIMIMSI[miCnt]);
			var PprItemName ="""";
			/*if(arrLengthDiff > 1)
			{*/
//abobe 1.2
//below 1.2	
/*		
			for(var j=getArrayLength(marrSIMIMSI[miCnt]);j<getArrayLength(marrNumTypes);j++)
			{
			//var PprItemName ="""";
			//PprItemName = marrNumTypes[j-2]+ ""/""+marrNumTypes[j-1];
			if(PprItemName== """")
			{
            PprItemName= marrNumTypes[j];
			}
			else
			{
			PprItemName=PprItemName+"",""+marrNumTypes[j];
			}
			}
			marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder002"",PprItemName,SImNum)+ "":"";	
			mbError = true;
			}
			/*else
			{
			PprItemName = marrNumTypes[getArrayLength(marrNumTypes)-1];
			marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder002"",PprItemName,SImNum)+ "":"";
			mbError = true;
			}
			}*/
			//Checking for the length of paper items retrieved
//above 1.2 
//below 1.2
/*
			for(miNumCnt = 2;miNumCnt < getArrayLength(marrSIMIMSI[miCnt]);miNumCnt++) {
			msNumber = marrSIMIMSI[miCnt][miNumCnt];
			var testlength = mpsPprItem.GetProperty(marrNumTypes[miNumCnt-2]);
			var numlength = msNumber.length;
			//if(msNumber.length != mpsPprItem.GetProperty(marrNumTypes[miNumCnt-2])){// changed as per new file format
				if(msNumber.length != mpsPprItem.GetProperty(marrNumTypes[miNumCnt])){ 
				marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSORD018"",marrNumTypes[miNumCnt],msNumber,SImNum) + "":"";	
				mbError = true;
				continue;
			} 
		    }
		    }
	        } catch(e) {
		    mbError = true;
		    if(strErrVal != """") {
			throw (e);
		    } else {
			var temp = e.errText;
			marrError[miErrCnt++] =  e.errText;	
		    }
		
	        } finally {
		    bcOrderLineNum	= null;
		    bcOrderLine		= null;
		    bcOrderHdr		= null;
		    boOrder			= null;
		    mpsSIM			= null;
		    mpsIMSI			= null;
		    mpsPprItem		= null;
		    psError			= null;
	        }
	        //return bcOrderHdr.GetFieldValue(""Id"");
	        return (!mbError);
*/
//above 1.2
            }
"/**************************************************************************************
* Name          : SIM Order Business Service ValidateOrder Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 27/07/2005    1.1         MBT             Updated (Changes for    27/07/2005		  *	
*											mulitples IMSI in same file)   

* 20060710      1.2         Kalyana         Siebel ES SCR1, Objects Destroyed  
* 20061202      1.3         Kalyana         Added validation for invalid batch             
**************************************************************************************/

function ValidateOrderNew(&marrInputParams,&marrSIMIMSI,&marrNumTypes,&marrOrdCnct,&mpsPprId,&marrError)
{
	
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderHdr 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrderLine			= boOrder.GetBusComp(""RMS SIM Order Line"");
	var bcOrderLineNum		= boOrder.GetBusComp(""RMS SIM Order Line Num Info"");
	var boNumEnq 			= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumEnqUpdate	= boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update"");
	var boOrderQuery		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	= boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");
//  var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Number Paper Item"");
	var mbIsRecord 			= false;
	var mpsSIM 				= TheApplication().NewPropertySet();
	var mpsIMSI 			= TheApplication().NewPropertySet();
	var miCnt 				= 0;
	var msNumber 			= """";
	var miErrCnt			= 0;
	var mpsPprItem 			= TheApplication().NewPropertySet();
	var strStatus 			= """";
	var strErrVal			= """";
	var psError 			= TheApplication().NewPropertySet();
	var marrNumIMSI			= new Array();
//  var marrOrdCnct = new Array();
	var strOrderId			= """";
	var strNumHandle		= """";
	var intCheckSumLen		= 1;
	var mbError 			= false;
	var msSIM="""";
	//1.4
	//var iArrErrCnt			= ToNumber(TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""ERROR_CNT""));
	//var sPORefId			= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_POREFID"");
	//var sOrdLineId			= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_ORD_LINEID"");
	//var sPprItemIndxL		= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_PPRITMIDXL"");
	//var sPprItemIndxR		= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_PPRITMIDXR"");
	//var sPprItemIndxCnt		= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_PPRITMIDXCNT"");
	
	//var iPORefId			= ToNumber(sPORefId.substring(2));
	//var iOrdLineId			= ToNumber(sOrdLineId.substring(2));
	//var iPprItemIndxL		= ToNumber(sPprItemIndxL.substring(2));
	//var iPprItemIndxR		= ToNumber(sPprItemIndxR.substring(2));
	//var iPprItemIndxCnt		= ToNumber(sPprItemIndxCnt.substring(2));
	//1.4
//below  1.2	
	var bcPaperItem	= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");
//above  1.2
	try {

	with(bcOrderLineQuery) 
	{

		ActivateField(""Order Id"");
		ClearToQuery();
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		//SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		SetSearchSpec(""Order Line Id"",marrNumTypes[iOrdLineId]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder010"",marrNumTypes[iOrdLineId]);
			marrError[miErrCnt++] = strErrVal;
			return (mbError);
			//TheApplication().RaiseErrorText(strErrVal);
		}
		strOrderId = GetFieldValue(""Order Id"");
	}

	//Query the database with the Order Number				
	with(bcOrderHdr) {
		SetViewMode(AllView);
		ActivateField(""Id"");
		ActivateField(""Status"");
		ActivateField(""Order Number"");
		ActivateField(""PO Requisition Ref Number"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId) 
		//SetSearchSpec(""Revision Number"",1);
  	    //SetSearchSpec(""Profile"",marrInputParams[""Profile""]); 
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]);
		//ExecuteQuery();
		ExecuteQuery(ForwardOnly);
	}
//  If query is returning no records then set the Comments property and exit
	if(!bcOrderHdr.FirstRecord()) 
	{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",strOrderId);
		marrError[miErrCnt++] = strErrVal;
		return (mbError);
		//TheApplication().RaiseErrorText(strErrVal);
	} 
	else if(bcOrderHdr.GetFieldValue(""Status"") == TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED"")) 
	{
		//strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD017"",bcOrderHdr.GetFieldValue(""Order Number""));
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder011"",bcOrderHdr.GetFieldValue(""Order Number""));
		marrError[miErrCnt++] =  strErrVal;
		return (mbError);
		//TheApplication().RaiseErrorText(strErrVal);
	} 
	//else if(bcOrderHdr.GetFieldValue(""PO Requisition Ref Number"") != marrNumTypes[1])
	else if(bcOrderHdr.GetFieldValue(""PO Requisition Ref Number"") != marrNumTypes[iPORefId])
	{
	strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder008"",marrNumTypes[iPORefId],bcOrderHdr.GetFieldValue(""Order Number""));
	marrError[miErrCnt++] =  strErrVal;
	return (mbError);
	}
	else 
	{
		strStatus = bcOrderHdr.GetFieldValue(""Status"");
	}
	
//   Set the Status parameter

	with(bcOrderLine) {
		ActivateField(""Id"");
		ClearToQuery();
		//var temp2 = marrInputParams[""Profile""];
		//var temp4 =	marrInputParams[""Transport_Key""];
		//SetSearchSpec(""SIM Card Config Type"",marrInputParams[""Type""]);
		//SetSearchSpec(""Profile"",marrInputParams[""Profile""]);
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]);
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		//SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		//SetSearchSpec(""Order Line Id"",marrNumTypes[4]);//KT 15-06-06   for  new read
		SetSearchSpec(""Order Line Id"",marrNumTypes[iOrdLineId]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
	}
	
	if(!mbIsRecord) {
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder010"",marrNumTypes[iOrdLineId]);
			marrError[miErrCnt++] = strErrVal;
			return (mbError);
	}
//below 1.2	
	//var bcPaperItem	= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");	
//above 1.2 
//Query the Paper Item table corresponding to the Order Id

	with(bcPaperItem) {
		SetViewMode(AllView);
		ActivateField(""Paper Item Id"");
		ActivateField(""Length"");
		ActivateField(""Paper Item Name"");
		ClearToQuery();
		//ExecuteQuery(1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		//if(!mbIsRecord) return """";
                       }
	
	while(mbIsRecord) 
	{
		mpsPprItem.SetProperty(bcPaperItem.GetFieldValue(""Paper Item Name""),bcPaperItem.GetFieldValue(""Length""));
		mpsPprId.SetProperty(bcPaperItem.GetFieldValue(""Paper Item Name""),bcPaperItem.GetFieldValue(""Paper Item Id""));
		mbIsRecord = bcPaperItem.NextRecord();
	}
	
	with(bcOrderLineNum) 
	{
		//ActivateField(""Assoc Start Id"");
		ActivateField(""Id"");
		ActivateField(""Numbers"");
		ActivateField(""Concatenated Number Types"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Status"");
		ClearToQuery();
		//1.4
		SetSearchSpec(""NumberString"","">='"" + msFileStartNum + ""' AND [NumberString] <= '"" + msFileEndNum +""'"");
		//1.4
		//ExecuteQuery();
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		
	}

/*	with(RMS SIM Number Paper Item) {
		ActivateField(); } */
	var marrCnctNum = new Array();

	while(mbIsRecord) {
		msNumber = bcOrderLineNum.GetFieldValue(""Numbers"");
		marrCnctNum = msNumber.split("" / "");
		
		if(getArrayLength(marrCnctNum)>1) 
		{
//		Checking whether the input numbers are having delimiters. if yes then remove the delimiters
			if(isNaN(ToNumber(marrCnctNum[0])))
				mpsSIM.SetProperty(CleanNumber(marrCnctNum[0]),bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			else {
								
				mpsSIM.SetProperty(marrCnctNum[0],ToString(bcOrderLineNum.GetFieldValue(""Assoc Start Id"")));
			
			}
//		Checking whether the input numbers are having delimiters. if yes then remove the delimiters
			if(isNaN(ToNumber(marrCnctNum[1])))
				mpsIMSI.SetProperty(CleanNumber(marrCnctNum[1]),bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			else
				mpsIMSI.SetProperty(marrCnctNum[1],bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			
		}
		mbIsRecord = bcOrderLineNum.NextRecord();
	}
	//var temp = marrInputParams[""IMSI""];
	//marrNumIMSI = marrInputParams[""IMSI""].split("" / "");
	marrNumIMSI[0] = marrSIMIMSI[0][1];// change
	var msSIMLoc = getArrayLength(marrNumIMSI);
	//checking for SIM and IMSI numbers retrieved
	for(miCnt =0;miCnt < getArrayLength(marrSIMIMSI);miCnt++) 
	{
		if(miCnt == 0) //1.4 for avoiding error in getArrayCnt
			marrError[miCnt] = """";
		//var msSIM = marrSIMIMSI[miCnt][msSIMLoc];
		var msSIM = marrSIMIMSI[miCnt][0];
		var msSIMNoCS = msSIM.substring(0,msSIM.length-1);
		
		
// Checking the SIM,Checksum,IMSI & SIM/IMSI Association

	//below 1.3
		if(!mpsSIM.PropertyExists(msSIMNoCS))
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder012"",msSIMNoCS,marrNumTypes[iOrdLineId]);
			marrError[miErrCnt++] = strErrVal;
			mbError = true;
	    }
	//above 1.3	
//		var temp  = msSIM.substring(msSIM.length-1);
//		var temp1 =	ChecksumNumber(msSIMNoCS);
		
/*		if(msSIM.substring(msSIM.length-1) != ChecksumNumber(msSIMNoCS))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD011"") + msSIM;
			mbError = true;
			continue;		
		}
		if(!mpsIMSI.PropertyExists(marrSIMIMSI[miCnt][0]))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD012"") + marrSIMIMSI[miCnt][0];
			mbError = true;
			continue;
		
		}
		if(mpsSIM.GetProperty(msSIMNoCS) != (mpsIMSI.GetProperty(marrSIMIMSI[miCnt][0])))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][0];
			mbError = true;
			continue;		
		}*/
		

            //Check whether the numbers exists in RMS system
		    with(bcNumEnqUpdate) {
				//ActivateField(""Number String With Checksum"");
				ActivateField(""Number String"");
				ActivateField(""Status"");
				for(var i = 0;i<getArrayLength(marrSIMIMSI[miCnt]);i++) {
					if(msSIMLoc >= i) {
						strNumHandle = marrSIMIMSI[miCnt][i];
						//strNumHandle = marrSIMIMSI[miCnt][0];
						ClearToQuery();
						//SetSearchSpec(""Number String With Checksum"",marrSIMIMSI[miCnt][i]);
						if(msSIMLoc == i)
							//SetSearchSpec(""Number String"",strNumHandle.substring(0,(strNumHandle.length - intCheckSumLen)));
							SetSearchSpec(""Number String"",strNumHandle);  // Change for New  read 
						else 
							SetSearchSpec(""Number String"",strNumHandle.substring(0,(strNumHandle.length - intCheckSumLen)));
							//SetSearchSpec(""Number String"",strNumHandle);
						//ExecuteQuery();
						ExecuteQuery(ForwardOnly);
						if(!FirstRecord()) {
							marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD016"",marrSIMIMSI[miCnt][i]);
							mbError = true;
						} //End of if(!FirstRecord())
						//Checking  whether some or all  number's are already received.
						else
						{
							if(bcNumEnqUpdate.GetFieldValue(""Status"")!= TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""WITH SIM SUPPLIER""))
							{
								marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder003"",marrSIMIMSI[miCnt][0]);
								mbError = true;
							}
						} //if	
					}//if
					if(miErrCnt>iArrErrCnt) {
						TheApplication().RaiseErrorText(""ERROR"");
					}
			 	}//for
		 	}//with
			
/*			ClearToQuery();
			SetSearchSpec(""Number String With Checksum"",msSIM);
			ExecuteQuery();
			
			if(FirstRecord()) {
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",GetFieldValue(""Id""));
				ExecuteQuery();
				var mblnIsRecord = FirstRecord();
				var blnChkNumExists = false;
				while(mblnIsRecord) {
					for(var i = 0;i<getArrayLength(marrSIMIMSI[miCnt]);i++) {
						if(marrSIMIMSI[miCnt][i] == GetFieldValue(""Number String With Checksum"")) {
							blnChkNumExists = true;
							break;
						}
					}
					if(blnChkNumExists = false) {
						marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][i];
						mbError = true;
						continue;
					}
					mblnIsRecord = NextRecord();
				}
			}
		}*/

	
		//marrOrdCnct[miCnt] = mpsSIM.GetProperty(msSIM);
		marrOrdCnct[miCnt] = mpsSIM.GetProperty(msSIMNoCS);
		var test786 = getArrayLength(marrOrdCnct);
		
	}
			
	   		//Checking   whether all  Paper Item Values  are retrieved or not  KT 30-05-06
			for(var i=0;i<getArrayLength(marrOrdCnct);i++)
			{
	   			var temp = marrOrdCnct[i];
	   			var miNumCnt = 0;
	  			for(miCnt =0;miCnt < getArrayLength(marrSIMIMSI);miCnt++) {
				var SImNum = marrSIMIMSI[miCnt][0];
				//if(getArrayLength(marrSIMIMSI[miCnt])< (getArrayLength(marrNumTypes)+2))
				if(getArrayLength(marrSIMIMSI[miCnt])< (getArrayLength(marrNumTypes)-iPprItemIndxCnt))//KT 23-06-06
				{
					//var arrLengthDiff = (getArrayLength(marrNumTypes)+2)-getArrayLength(marrSIMIMSI[miCnt]);
					//var arrLengthDiff = (getArrayLength(marrNumTypes))-getArrayLength(marrSIMIMSI[miCnt]);
					var PprItemName ="""";
					/*if(arrLengthDiff > 1)
					{*/
					for(var j=(getArrayLength(marrSIMIMSI[miCnt]))+iPprItemIndxL;(j<getArrayLength(marrNumTypes)-iPprItemIndxR);j++)//KT 23-06-06
					{
						//var PprItemName ="""";
						//PprItemName = marrNumTypes[j-2]+ ""/""+marrNumTypes[j-1];
						if(PprItemName== """")
						{
            				PprItemName= marrNumTypes[j];
						}
						else
						{
							PprItemName=PprItemName+"",""+marrNumTypes[j];
						}
						marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder002"",PprItemName,SImNum)+ "":"";	
						mbError = true;
						if(miErrCnt>iArrErrCnt) {
							TheApplication().RaiseErrorText(""ERROR"");
						}
					}
				}
				/*else
				{
					PprItemName = marrNumTypes[getArrayLength(marrNumTypes)-1];
					marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder002"",PprItemName,SImNum)+ "":"";
					mbError = true;
				}
				}*/
				//Checking for the length of paper items retrieved
				for(miNumCnt = 2;miNumCnt < getArrayLength(marrSIMIMSI[miCnt]);miNumCnt++) {
					msNumber = marrSIMIMSI[miCnt][miNumCnt];
					//if(msNumber.length != mpsPprItem.GetProperty(marrNumTypes[miNumCnt-2])){// changed as per new file format
					if(msNumber.length != mpsPprItem.GetProperty(marrNumTypes[miNumCnt+iPprItemIndxL]))
					{ 
						marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSORD018"",marrNumTypes[miNumCnt+iPprItemIndxL],msNumber,SImNum) + "":"";	
						mbError = true;
						continue;
					} 
					if(miErrCnt>iArrErrCnt) {
						TheApplication().RaiseErrorText(""ERROR"");
					}
		    	}
		    }
	        } 
			}catch(e) {
				mbError = true;
			    if(strErrVal != """") {
					//1.4 throw (e);
					marrError[miErrCnt++] =  e.errText;	
			    } else {
					marrError[miErrCnt++] =  e.errText;	
			    }
		
	        } finally {
			    bcOrderLineNum	  = null;
			    bcOrderLine		  = null;
			    bcOrderHdr		  = null;
	//below 1.2
			    bcNumEnqUpdate   = null;
				bcOrderLineQuery = null;
				bcPaperItem      = null;
				boNumEnq         = null;
				boOrderQuery     = null;
	//above 1.2
				boOrder			 = null;
			    mpsSIM			 = null;
			    mpsIMSI			 = null;
			    mpsPprItem		 = null;
			    psError		  	 = null;
	        }
	        //return bcOrderHdr.GetFieldValue(""Id"");
	        return (!mbError);
            }
"/*----------------------------------------------------------------------
Name                : [EECC BS IF COMMON], [WriteToFile]
Created By          : Prasad Bodas
Description         : Function to write plain text to debug log file
Input Parameters    : String to be written to file
Output Parameters   : none
-----------------------------------------------------------------------
Change History
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
20031225       | 1.00 | Prasad | Creation
---------------+------+--------+----------------------------------------------
*/
function WriteToFile(msgstr,msFileSuffix){
	var msFileName = ""debug_BS_IF_COMMON"" + msFileSuffix + "".txt"";
	var fptr=Clib.fopen(msFileName,""a"");
	Clib.fputs(msgstr+""\n\r"",fptr);
	Clib.fclose(fptr);
}
"/**************************************************************************************
* Name          : Call Read  Order Files Function 				  	      *
* Author        : Kalyana											  * 
* Description 	: This function  will read  all the files present in  one specific folder in server								  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 20060610	     1.0  		Kalyana      			                                  *
* 20060710       1.1        Kalyana          Siebel ES SCR1, Objects Destroyed
* 20060804       1.2        Kalyana          Siebel ES SCR 20060803, Objects Destroyed
* 20060823       1.3        Kalyana          Added code to Reset Arrays to import multiple 
											 SIM Order Files
**************************************************************************************/

function CallReadOrderFiles(fileArray,Inputs)
{
    var marrOrdCnct 	= new Array();
	var marrInputParams = new Array();
	var marrError 		= new Array();
	var marrSIMIMSI		= new Array();
	var marrNumberType	= new Array();
	//var fileArray     = new Array();
	var intReturn		= CancelOperation;
	var mpsPprId		= TheApplication().NewPropertySet();
	var msFullFileName  = """";
	var msFileName      = """";
	var strErrVal		= """";
	var mbResult		= false;
	//var Inputs 			= TheApplication().NewPropertySet();
	var Outputs         = TheApplication().NewPropertySet();
    var fileCount=0;
	var count= getArrayLength(fileArray);		
	var boOrderQuery 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	    = boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");
	var strOrderId ="""";
	var strorderLineId ="""";
	var mbIsRecord = false;
	var filePath = Inputs.GetProperty(""DirectoryPath"");
	var filePathOut = Inputs.GetProperty(""DirectoryPathOut"");
	var fileName= """";
	var strComments = """";
	for(fileCount=0;fileCount<getArrayLength(fileArray);fileCount++){
			
           	if((fileArray[fileCount])!= "filelist.lst"")
			{
				msFileName = fileArray[fileCount];
				msFullFileName = filePath + fileArray[fileCount];
				mbResult = 	ReadOrderFileNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrError,msFullFileName,marrNumberType);
				if(mbResult){
			   		strErrVal = UpdateNumbersNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrNumberType,msFullFileName);
				            } //End of if(mbResult)
		//-----------------------------------------------------------------------------
		//enable the following script, if an error file is required to be generated          // 01:07:2005
		//----------------------------------------------------------------------------
			if(strErrVal != """" || getArrayLength(marrError) > 0) 
			//{
			/*	marrError[getArrayLength(marrError)] = strErrVal;
				GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);	
			    	
			}
			else //commented for read tests*/
			      {
					if(marrError[0] != """") {
					GenerateErrorFileNew(strOrderId,marrInputParams,marrError,msFileName,marrNumberType,Inputs,Outputs);
					with(bcOrderLineQuery) 
		             {
					   ActivateField(""Order Id"");
					   ClearToQuery();
				       //SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
				       //SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
			        	SetSearchSpec(""Order Line Id"",marrNumberType[4]);
				        ExecuteQuery(ForwardOnly);
				        mbIsRecord = FirstRecord();
				        /*if(!mbIsRecord) {
					      strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
					      TheApplication().RaiseErrorText(strErrVal);
			            }*/ 
				        if(mbIsRecord)
						{
						strorderLineId = GetFieldValue(""Id"");
						strOrderId = GetFieldValue(""Order Id"");
						var strComments = Outputs.GetProperty(""strErrVal"");
					    UpdateFile(""I"",strComments,msFullFileName,strOrderId,strorderLineId);
					    }// End of if(mbIsRecord)
	             	    }//End of with(bcOrderLineQuery) 
				        //strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD019"");
				        //TheApplication().RaiseErrorText(Outputs.GetProperty(""strErrVal""));
					    /*var strComments = Outputs.GetProperty(""strErrVal"");
						UpdateFile(""I"",strComments,msFullFileName,strOrderId);*/
				       } //End of if(marrError[0] != """")
			           } //End of if(strErrVal != """" || getArrayLength(marrError) > 0) 
			           	// below 1.3
						//Code to reset arrays
			            //after last file in filelist is processed no need to reset the arrays.
					    if (fileCount<getArrayLength(fileArray)-1)
							{
							marrError 	     = null;
					        marrSIMIMSI	     = null;
					        marrNumberType	 = null;
						    marrOrdCnct 	 = null;
				  	        marrInputParams  = null;
							marrOrdCnct 	 = new Array();
							marrInputParams  = new Array();
							marrError 		 = new Array();
				            marrSIMIMSI		 = new Array();
					        marrNumberType	 = new Array();
							}
							//above 1.3
				      } // End of if((fileArray[fileCount])!= "filelist.lst"")
			         Inputs.SetProperty(""msFileName"",msFileName);
			         FileOperations(Inputs,Outputs);
			         msFullFileName = """";
			        }//End of for
					//Inputs.SetProperty(""msFileName"","filelist.lst"");
					//FileOperations(Inputs,Outputs);
				    //below 1.1
					bcOrderLineQuery = null;
					boOrderQuery     = null;
				    //above 1.1
					marrOrdCnct 	 = null;
					marrInputParams  = null;
					marrError 	     = null;
					marrSIMIMSI	     = null;
					marrNumberType	 = null;
					mpsPprId         = null;
				    //below 1.2
				   Outputs           = null;
				   //above 1.2
	} //End of function"
"/**************************************************************************************
* Name          : SIM Order Business Service ValidateOrder Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/
function CheckSequence(bcNumberEnquiry,bcOrdLineNum,&marrSeqChek,cheqSeqArgs) {
	var blnIsRecord;
	var mblnSplit = false;
	var mintRecCnt = 0 ;
	mblnSplit= (cheqSeqArgs.GetProperty(""mblnSplit"") == ""true"")?true:false;//KT 21-042006
	mintRecCnt=ToInteger(cheqSeqArgs.GetProperty(""mintRecCnt""));//KT 21-042006
	with(bcNumberEnquiry) {
		ActivateField(""Type"");
		ActivateField(""Number"");
		ActivateField(""Number String With Checksum"");
		ActivateField(""Generation Level"");
		ClearToQuery();
		SetSearchSpec(""Assoc Start Id"",bcOrdLineNum.GetFieldValue(""SIM Id""));
//		SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI""));
		ExecuteQuery();
		blnIsRecord = FirstRecord();
		if(mintRecCnt != 0) {
			while(blnIsRecord) {
				if(GetFieldValue(""Number"") != (ToInteger(marrSeqChek[GetFieldValue(""Type"")])+1)) 
					 {
					mblnSplit = true;
					break;
				}
				blnIsRecord = NextRecord();
			}
		} else
			mblnSplit = true;

		blnIsRecord = FirstRecord();
		
		while(blnIsRecord){
			marrSeqChek[GetFieldValue(""Type"")] = GetFieldValue(""Number"");
			blnIsRecord = NextRecord();
		}
	}


       cheqSeqArgs.SetProperty(""mblnSplit"",mblnSplit);// KT 21-04-2006
       cheqSeqArgs.SetProperty(""mintRecCnt"",mintRecCnt);//KT 21-04-2006

}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Generate the Checksum number for validation						  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana      Siebel ES SCR1, Objects Destroyed* 
**************************************************************************************/
function ChecksumNumber(msNumber)
{

/*	var miChecksum1 	= 0;
	var miChecksum2 	= 0;
	var miNumCount 		= 0;
	var miLength 	 	= ToInteger(msNumber.length);
	
//  Removing the first 7 digits of the No. which are fixed digits

	for(miNumCount=7;miNumCount<miLength;miNumCount++)
		miChecksum1 = miChecksum1 + ToInteger(msNumber.charAt(miNumCount));
	miChecksum1 = miChecksum1 % 10;
	for(miNumCount=7;miNumCount<miLength; miNumCount=miNumCount+2)
		miChecksum2 = miChecksum2 + ToInteger(msNumber.charAt(miNumCount));
	miChecksum2 = miChecksum2 * 3;
	miChecksum2 = miChecksum2 % 10;
//  msNumber = msNumber + miChecksum1 + miChecksum2;
	return(ToString(miChecksum1) + ToString(miChecksum2)); 
*/

	var boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumEnqUpdate	= boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update"");
//below 1.1 
	var intReturn;
//above 1.1
	with(bcNumEnqUpdate)
	{
		SetViewMode(3);
		ActivateField(""CheckSum1"");
		ActivateField(""Number String without Delimiter"");
		ActivateField(""Number String"");
		ClearToQuery();
	    SetSearchSpec(""Number String"",msNumber);
		ExecuteQuery();
	    var NumStr = bcNumEnqUpdate.GetFieldValue(""Number String"");
	    var NumStr1 = bcNumEnqUpdate.GetFieldValue(""Number String without Delimiter"");
  	
		if (FirstRecord())
		{
		 	var Chksum = bcNumEnqUpdate.GetFieldValue(""CheckSum1"");
//below 1.1		 	
			//return(bcNumEnqUpdate.GetFieldValue(""CheckSum1""));
			intReturn  =  bcNumEnqUpdate.GetFieldValue(""CheckSum1"");
//above 1.1
		}	
		else
//below 1.1
			//return false;
			intReturn  = "false"";
//above 1.1
	}
//below 1.1
       bcNumEnqUpdate = null;
       boNumEnq       = null;
       return(intReturn);
//above 1.1
}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Clean the number from any delimiters								  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/
function CleanNumber(msNumberString) 
{
	var msOutString = """";
	var miCount = 0;
	
	for(miCount = 0; miCount < msNumberString.length;miCount++) 
	{
		if(Clib.isdigit(msNumberString.charAt(miCount)))
			msOutString += msNumberString.charAt(miCount);
	}
	
	return msOutString;
}
function FileOperations(Inputs,Outputs)
{
//FilePath1, FileName1 is the source file
//default operation is delete
//if FilePath2, FileName2 is the specified as destination path and filename then copy there before deleting
	var msPath1 = Inputs.GetProperty(""DirectoryPath"");
	var msName1 = Inputs.GetProperty(""msFileName"");
	var msPath2 = Inputs.GetProperty(""DirectoryPathOut"");
	var msName2 = Inputs.GetProperty(""msFileName"");
	if("""" != (msPath2+msName2))//destination specified
		Clib.rename(msPath1+msName1,msPath2+msName2);
	else
		Clib.remove(msPath1+msName1);
	return CancelOperation;
}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Siebel ES SCR1, Objects Destroyed
* 20060712      1.2         Kalyana         Commented  Entire  Code
**************************************************************************************/

function GenerateErrorFile(sOrderId,&marrInputParams,&marrError,msInpFileName,marrNumberType,Inputs,Outputs)
{
//below 1.2
/*
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderHdr 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Paper Item""); 
//	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");
	var mbIsPprItem			= false;  													
	var msPprItem			= """";														
	
	var mfpOutputFile;	
	var miCnt;
	var msErrorFile         = """";
	var msFile              = """";
	var strErrVal           = """";

//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
	with(bcOrderHdr)
	{
    	SetViewMode(AllView);
//		SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Id"", sOrderId);
    	ClearToQuery();
		ExecuteQuery(ForwardOnly);
         {
           with(bcOrdPprItem) 
            {
    		 SetViewMode(AllView);
			 ActivateField(""Paper Item Name"");
			 ClearToQuery();
			 ExecuteQuery();
			 mbIsPprItem = FirstRecord();
			
			while(mbIsPprItem) 
			 {
				if(msPprItem == """")
					msPprItem = bcOrdPprItem.GetFieldValue(""Paper Item Name"");
				else
		     		msPprItem += ""/"" + bcOrdPprItem.GetFieldValue(""Paper Item Name"");
					
				mbIsPprItem = bcOrdPprItem.NextRecord();	
			 }
		}
	}	
}	
//-------------------------------------------------------------------------------------
	try
	{
		var mboSysPref = TheApplication().GetBusObject(""System Preferences"");
		var mbcSysPref = mboSysPref.GetBusComp(""System Preferences"");
		
		with(mbcSysPref) 
		{
			ActivateField(""Value"");
			ClearToQuery();
			SetSearchSpec(""Name"",""RMS_SIMORDER_ERROR_FILEPATH""); //  VIBO_SIM_ERROR_FILEPATH(Dtd: 01:07:2005)
			ExecuteQuery(ForwardOnly);
			if(FirstRecord()) 
			{
				msFile = GetFieldValue(""Value"");
			} 
		}
		
		 //msErrorFile = msInpFileName.substring(0,msInpFileName.lastIndexOf(""\\"")) + ""_ERROR.log"";// for Windows
		//msErrorFile = msInpFileName.substring(msInpFileName.lastIndexOf(""/"")+1)+ ""_ERROR.log"";// for UNIX
		//msFile +=  msErrorFile;
          //msErrorFile = ""test.log"";
		  
		msFile =  msFile+msInpFileName+""_.log"";
	  //msFile = msInpFileName + ""_ERROR.err"";
      //UpdateFile(""O"","""",msErrorFile,marrInputParams[""P0_ref_number""]);
    	strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder004"",msFile);
		mfpOutputFile = Clib.fopen(msFile,""a"");
		
		Clib.fputs(""*********************************************\n"", mfpOutputFile);
		Clib.fputs(""*             HEADER DESCRIPTION        * \n"", mfpOutputFile);
		Clib.fputs(""*********************************************\n"", mfpOutputFile);
		//Clib.fputs(""\n"", mfpOutputFile);
		/*Clib.fputs(""Customer: STC\n""  , mfpOutputFile);
		Clib.fputs(""P0_ref_number: "" + marrNumberType[1] + ""\n"", mfpOutputFile);
		Clib.fputs(""Qty: "" + marrNumberType[2] + ""\n"", mfpOutputFile);
		Clib.fputs(""PartNo_SIMCardConfigNo: "" + marrNumberType[3] + ""\n"", mfpOutputFile);
		Clib.fputs(""Batch: "" + marrNumberType[4] + ""\n"", mfpOutputFile);*/
//above 1.2
//below 1.2
/*		
		Clib.fputs(""P0_ref_number: "" + marrInputParams[""PO_ref_number""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Quantity: "" + marrInputParams[""Quantity""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Type: "" + marrInputParams[""Type""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Memory: "" + marrInputParams[""Memory""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Profile: "" + marrInputParams[""Profile""]+ ""\n"", mfpOutputFile);
		Clib.fputs(""Graph_ref: "" + marrInputParams[""Graph_ref""] + ""\n"", mfpOutputFile); // Change
//		Clib.fputs(""Artwork: ""+ bcOrdLine.GetFieldValue(""ImageFileName"") + ""\n"", mfpOutputFile); 
		Clib.fputs(""Artwork: "" + marrInputParams[""Artwork""] + ""\n"", mfpOutputFile); 	// Change
        Clib.fputs(""Batch: "" + marrInputParams[""Batch""] + ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
		Clib.fputs(""Keyname: "" + marrInputParams[""Keyname""]+ ""\n"", mfpOutputFile);
		//Clib.fputs(""Transport_Key: "" + marrInputParams[""Transport_Key""]+ ""\n"", mfpOutputFile);
//		Clib.fputs(""Transport_3GOp_In: "" + marrInputParams[""Transport_3GOp_In""]+ ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
        Clib.fputs(""Address1: "" + marrInputParams[""Address1""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Address2: "" + marrInputParams[""Address2""] + ""\n"", mfpOutputFile);
		//Clib.fputs(""Address3: "" + marrInputParams[""Address3""] + ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""*            INPUT VARIABLES            *       \n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""Var_In_List: ""+ ""\n"", mfpOutputFile);
		Clib.fputs(""IMSI: ""+ marrInputParams[""IMSI""] + ""\n"", mfpOutputFile);
		//Clib.fputs(""Ser_Nb: ""+ marrInputParams[""Ser_Nb""] + ""\n"", mfpOutputFile);
		Clib.fputs(""ICCID: ""+ marrInputParams[""ICCID""] + ""\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""*            OUTPUT VARIABLES           *\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""Var_Out: ICCID,IMSI, ""+ msPprItem + ""\n"", mfpOutputFile); 					  // Changed 07:06:2005
		
//		Clib.fputs(""Var_Out: PIN1/PUK1/PIN2/PUK2/KI/ADM1\n"", mfpOutputFile);

		for(miCnt = 0; miCnt < getArrayLength(marrError);miCnt++) 
		{
			if(marrError[miCnt] != """") 
				Clib.fputs(marrError[miCnt] + ""\n"",mfpOutputFile);
		}
			
	} 
	catch(e) 
	{
		throw (e);
		
		

}
	finally 
	{
		if(mfpOutputFile != null)
		Clib.fclose(mfpOutputFile);
		Outputs.SetProperty(""strErrVal"",strErrVal);
//below 1.1		
		bcOrdPprItem  = null;
		bcOrderHdr    = null;
		boOrder       = null;
//above 1.1		
		mbcSysPref	  = null;
		mboSysPref	  = null;
	}*/
//above 1.2
}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Siebel ES SCR1, Objects Destroyed
**************************************************************************************/

function GenerateErrorFileNew(sOrderId,&marrInputParams,&marrError,msInpFileName,marrNumberType,Inputs,Outputs)
{
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderHdr 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Paper Item""); 
//	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");
	var mbIsPprItem			= false;  													
	var msPprItem			= """";														
	
	var mfpOutputFile;	
	var miCnt;
	var msErrorFile         = """";
	var msFile              = """";
	var strErrVal           = """";

//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
	with(bcOrderHdr)
	{
    	SetViewMode(AllView);
//		SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Id"", sOrderId);
    	ClearToQuery();
		ExecuteQuery(ForwardOnly);
         {
           with(bcOrdPprItem) 
            {
    		 SetViewMode(AllView);
			 ActivateField(""Paper Item Name"");
			 ClearToQuery();
			 ExecuteQuery();
			 mbIsPprItem = FirstRecord();
			
			while(mbIsPprItem) 
			 {
				if(msPprItem == """")
					msPprItem = bcOrdPprItem.GetFieldValue(""Paper Item Name"");
				else
		     		msPprItem += ""/"" + bcOrdPprItem.GetFieldValue(""Paper Item Name"");
					
				mbIsPprItem = bcOrdPprItem.NextRecord();	
			 }
		}
	}	
}	
//-------------------------------------------------------------------------------------
	try
	{
		var mboSysPref = TheApplication().GetBusObject(""System Preferences"");
		var mbcSysPref = mboSysPref.GetBusComp(""System Preferences"");
		
		with(mbcSysPref) 
		{
			ActivateField(""Value"");
			ClearToQuery();
			SetSearchSpec(""Name"",""RMS_SIMORDER_ERROR_FILEPATH""); //  VIBO_SIM_ERROR_FILEPATH(Dtd: 01:07:2005)
			ExecuteQuery(ForwardOnly);
			if(FirstRecord()) 
			{
				msFile = GetFieldValue(""Value"");
			} 
		}
		
		 //msErrorFile = msInpFileName.substring(0,msInpFileName.lastIndexOf(""\\"")) + ""_ERROR.log"";// for Windows
		//msErrorFile = msInpFileName.substring(msInpFileName.lastIndexOf(""/"")+1)+ ""_ERROR.log"";// for UNIX
		//msFile +=  msErrorFile;
          //msErrorFile = ""test.log"";
		  
		msFile =  msFile+msInpFileName+""_.log"";
	  //msFile = msInpFileName + ""_ERROR.err"";
      //UpdateFile(""O"","""",msErrorFile,marrInputParams[""P0_ref_number""]);
    	strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder004"",msFile);
		mfpOutputFile = Clib.fopen(msFile,""a"");
		
		Clib.fputs(""*********************************************\n"", mfpOutputFile);
		Clib.fputs(""*             HEADER DESCRIPTION        * \n"", mfpOutputFile);
		Clib.fputs(""*********************************************\n"", mfpOutputFile);
		//Clib.fputs(""\n"", mfpOutputFile);
		Clib.fputs(""Customer: STC\n""  , mfpOutputFile);
		Clib.fputs(""P0_ref_number: "" + marrNumberType[1] + ""\n"", mfpOutputFile);
		Clib.fputs(""Qty: "" + marrNumberType[2] + ""\n"", mfpOutputFile);
		Clib.fputs(""PartNo_SIMCardConfigNo: "" + marrNumberType[3] + ""\n"", mfpOutputFile);
		Clib.fputs(""Batch: "" + marrNumberType[4] + ""\n"", mfpOutputFile);
		/*Clib.fputs(""P0_ref_number: "" + marrInputParams[""PO_ref_number""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Quantity: "" + marrInputParams[""Quantity""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Type: "" + marrInputParams[""Type""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Memory: "" + marrInputParams[""Memory""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Profile: "" + marrInputParams[""Profile""]+ ""\n"", mfpOutputFile);
		Clib.fputs(""Graph_ref: "" + marrInputParams[""Graph_ref""] + ""\n"", mfpOutputFile); // Change
//		Clib.fputs(""Artwork: ""+ bcOrdLine.GetFieldValue(""ImageFileName"") + ""\n"", mfpOutputFile); 
		Clib.fputs(""Artwork: "" + marrInputParams[""Artwork""] + ""\n"", mfpOutputFile); 	// Change
        Clib.fputs(""Batch: "" + marrInputParams[""Batch""] + ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
		Clib.fputs(""Keyname: "" + marrInputParams[""Keyname""]+ ""\n"", mfpOutputFile);
		//Clib.fputs(""Transport_Key: "" + marrInputParams[""Transport_Key""]+ ""\n"", mfpOutputFile);
//		Clib.fputs(""Transport_3GOp_In: "" + marrInputParams[""Transport_3GOp_In""]+ ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
        Clib.fputs(""Address1: "" + marrInputParams[""Address1""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Address2: "" + marrInputParams[""Address2""] + ""\n"", mfpOutputFile);
		//Clib.fputs(""Address3: "" + marrInputParams[""Address3""] + ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""*            INPUT VARIABLES            *       \n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""Var_In_List: ""+ ""\n"", mfpOutputFile);
		Clib.fputs(""IMSI: ""+ marrInputParams[""IMSI""] + ""\n"", mfpOutputFile);
		//Clib.fputs(""Ser_Nb: ""+ marrInputParams[""Ser_Nb""] + ""\n"", mfpOutputFile);
		Clib.fputs(""ICCID: ""+ marrInputParams[""ICCID""] + ""\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""*            OUTPUT VARIABLES           *\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""Var_Out: ICCID,IMSI, ""+ msPprItem + ""\n"", mfpOutputFile); */					  // Changed 07:06:2005
		
//		Clib.fputs(""Var_Out: PIN1/PUK1/PIN2/PUK2/KI/ADM1\n"", mfpOutputFile);

		for(miCnt = 0; miCnt < getArrayLength(marrError);miCnt++) 
		{
			if(marrError[miCnt] != """") 
				Clib.fputs(marrError[miCnt] + ""\n"",mfpOutputFile);
		}
			
	} 
	catch(e) 
	{
     throw (e);
    }
	finally 
	{
		if(mfpOutputFile != null)
		Clib.fclose(mfpOutputFile);
		Outputs.SetProperty(""strErrVal"",strErrVal);
//below 1.1		
		bcOrdPprItem  = null;
		bcOrderHdr    = null;
		boOrder       = null;
//above 1.1				
		mbcSysPref	= null;
		mboSysPref	= null;
	}
}
function GenerateFile(sOrderId,sFilePath,&Outputs)
{
//below 1.1  Didn't put fuction  heading because  length already  exceeds  16k
/*
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Paper Item""); 				// Changed 07:06:2005  
	var bcOrder 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrdLine 			= boOrder.GetBusComp(""RMS SIM Order Line"");
	var bcOrdLineNum 		= boOrder.GetBusComp(""RMS SIM Order Line Num Info for Update"");
	var bcOrdFile 			= boOrder.GetBusComp(""RMS SIM Order File Info Query"");
	var boNumberEnquiry 	= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumberEnquiry		= boNumberEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	var marrStartNumbers 	= new Array();
	var mbIsRecord			= false;
	var mbIsFileRec 		= false;
	var mbIsPprItem			= false;  // Changed 07:06:2005
	var miFirstIndex;
//	var msPrevSIMNumber 	= """";
	var msNextSIMNumber		= """";
	var msNextIMSINumber	= """";
	var msSIMNumber 		= 0;
	var miFileSeq 			= 0;
	var miCount 			= 0;
	var miQty 				= 0;
	var msConcatNumber 		= """";
	var msFileName 			= """";
	var msIMSINumber 		= """";
	var msStrSIMNum			= """";
	var msGenLvl			= """";
	var msErrVal 			= """";
	var msPprItem			= """";   // Changed 07:06:2005
	var strSearchSpec 		= """";
	var msOrderLineId = """";
	var mfpOutputFile;
	var marrSeqChek = new Array();
	var mintRecCnt = 0;
	var mstrMSISDN = """";
	var mblnSplit = false;
	var mbIsOrderLine=false;
	var cheqSeqArgs;//KT 21-042006 
	var outFile ="""";
    var intLineItemCnt = 0;	//  KT 23-05-06  to  split  SIM  Order file for multiple  line items
	try
    {
	with(bcOrder) 
		{
			SetViewMode(3);
			ActivateField(""Quantity Ordered"");
			ActivateField(""SIM Card Config Type"");
			ActivateField(""Transport Key"");
			ActivateField(""Transport 3GOP key"");
			ActivateField(""Order Number"");
			ActivateField(""ImageFileName""); //Ch
			ActivateField(""PO Requisition Ref Number"");
			ActivateField(""Bill To Address"");
			ActivateField(""Bill To Address Line 2"");
			ActivateField(""Bill To Address Line 3"");
			ActivateField(""HLR ID"");
			ClearToQuery();
			SetSearchSpec(""Id"", sOrderId);
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) 
			{
				msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",sOrderId);
				TheApplication().RaiseErrorText(msErrVal);
			}
		}
		with(bcOrdLine) 
		{
			SetViewMode(3);
			ActivateField(""Profile"");
			ActivateField(""Transport Key"");
			ActivateField(""Transport 3GOP Key"");
			ActivateField(""Quantity Ordered"");
			ActivateField(""SIM Card Config Type"");
			ActivateField(""SIM Card Config Name"");			
			ActivateField(""ImageFileName"");
			ActivateField(""Id"");
			ActivateField(""Graphical Profile"");
			ActivateField(""Card Memory"");
			ActivateField(""Starting Number"");
			ActivateField(""Order Line Id""); // KT 24-04-2006
			ClearToQuery()
			ExecuteQuery();
			mbIsOrderLine = FirstRecord();
			if(!mbIsOrderLine) 
			{
				msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",sOrderId);
					TheApplication().RaiseErrorText(msErrVal);
			}else {
			msOrderLineId = GetFieldValue(""Order Line Id"");
			}
         	}// KT deleted
			with(bcOrdFile) 
		{
			SetViewMode(3);
			ActivateField(""File Sequence"");
			ActivateField(""HLR_Batch"");
			ClearToQuery();
			SetSearchSpec(""SIM Order Id"",sOrderId);
			SetSearchSpec(""File Type"",""O"");
			SetSortSpec(""File Sequence(DESCENDING)"");
			ExecuteQuery();
			mbIsFileRec = FirstRecord();
			if(mbIsFileRec) 
				miFileSeq = GetFieldValue(""File Sequence"");
			else
				miFileSeq = 0;
		}
		with(bcOrdPprItem) {
			ActivateField(""Paper Item Name"");
			ClearToQuery();
			ExecuteQuery(ForwardOnly);
			mbIsPprItem = FirstRecord();
			
			while(mbIsPprItem) {
				if(msPprItem == """")
					msPprItem = GetFieldValue(""Paper Item Name"");
				else
					msPprItem += ""/"" + GetFieldValue(""Paper Item Name"");
				mbIsPprItem = NextRecord();	
			}
		}
		while(mbIsOrderLine) {
				msOrderLineId = bcOrdLine.GetFieldValue(""Order Line Id"");
				with(bcOrdLineNum) 
				{
					SetViewMode(3);
					ActivateField(""Numbers"");
					ActivateField(""Generated Number"");
					ActivateField(""SIM Id"");
					ActivateField(""Concatenated Number Types"");
					ActivateField(""Order Line Id"");
					ClearToQuery();
					SetSearchSpec(""Order Id"",sOrderId)
					SetSearchSpec(""Order Line Id"",bcOrdLine.GetFieldValue(""Id""));
					SetSortSpec(""Generated Number(ASCENDING)"");
					ExecuteQuery();			
			    	mbIsRecord = FirstRecord();
				/*	if(!mbIsRecord) 
					{
						msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD020"",sOrderId);
						TheApplication().RaiseErrorText(msErrVal);
					}*/ 
//above 1.1
//below 1.1
/*
				}  
			while(mbIsRecord) 
			{	
			miQty++;
	//  23-05-06
	//			if(miCount == 0)
	//				msNextSIMNumber = bcOrdLineNum.GetFieldValue(""Generated Number"");
				msSIMNumber = bcOrdLineNum.GetFieldValue(""Generated Number"");
				cheqSeqArgs = TheApplication().NewPropertySet();// KT 21-04-2006
				cheqSeqArgs.SetProperty(""mblnSplit"",mblnSplit);// KT 21-04-2006
				cheqSeqArgs.SetProperty(""mintRecCnt"",mintRecCnt);//KT 21-04-2006
				CheckSequence(bcNumberEnquiry,bcOrdLineNum,marrSeqChek,cheqSeqArgs);//KT 21-04-2006
				mblnSplit = (cheqSeqArgs.GetProperty(""mblnSplit"")==""true"")?true:false;//KT 21-042006
	            mintRecCnt = ToInteger(cheqSeqArgs.GetProperty(""mintRecCnt""));//KT 21-042006
	//			if((msSIMNumber != msNextSIMNumber)  || (msIMSINumber != msNextIMSINumber) || (miQty > 5000)) 
				if((mblnSplit) || (miQty > 5000) ||   (intLineItemCnt != 0))
				{
					mblnSplit = false;
					mstrMSISDN = """";
					strSearchSpec = """";
					with(bcNumberEnquiry) {
						ActivateField(""Assoc Start Id"");
						ActivateField(""Type Identifier"");
						ActivateField(""Number String With Checksum"");
						ActivateField(""Generation Level"");
						ClearToQuery();
						strSearchSpec = ""[Assoc Start Id] = '"" + bcOrdLineNum.GetFieldValue(""SIM Id"") + ""'"";
						strSearchSpec = strSearchSpec + "" AND ([Type Identifier] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + ""'"";
						strSearchSpec = strSearchSpec + "" OR [Type Identifier] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"") + ""')"";
						SetSearchExpr(strSearchSpec);
						ExecuteQuery();
						var blnIsRecord = FirstRecord();
						msIMSINumber = """";
						mstrMSISDN	 = """";
						msGenLvl	 = """";
						while(blnIsRecord) {
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
								msStrSIMNum	= GetFieldValue(""Number String With Checksum"");
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"")) {
								if(msIMSINumber=="""") {
									msIMSINumber = 	GetFieldValue(""Number String With Checksum"");
									msGenLvl	 = 	GetFieldValue(""Generation Level"");
								}
								else {
									msIMSINumber = 	msIMSINumber + "" / ""+GetFieldValue(""Number String With Checksum"");
									msGenLvl	 = 	msGenLvl + ""/""+GetFieldValue(""Generation Level"");							
								}
							}
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""))
								mstrMSISDN = GetFieldValue(""Number String With Checksum"");
	
							blnIsRecord = NextRecord();
						}
						}
	//				if(Clib.strcmpi(msSIMNumber, msPrevSIMNumber) != 1) {
				  	SetArray(marrStartNumbers,miCount,1,""?"",""?"",msStrSIMNum); 
				    SetArray(marrStartNumbers,miCount,2,""?"",""?"",msIMSINumber);
				    SetArray(marrStartNumbers,miCount,3,""?"",""?"",mstrMSISDN);
				    SetArray(marrStartNumbers,miCount,4,""?"",""?"",msGenLvl);
				    SetArray(marrStartNumbers,miCount,5,""?"",""?"",bcOrdLine.GetFieldValue(""Id""));
				    SetArray(marrStartNumbers,miCount,6,""?"",""?"",bcOrdLine.GetFieldValue(""SIM Card Config Name""));
					SetArray(marrStartNumbers,miCount++,7,""?"",""?"",msOrderLineId);
				    miQty = 1;
				}
				SetArray(marrStartNumbers,miCount-1,0,""?"",""?"",miQty);
    //			the validation is on the assumption that first 7 digits of SIM Number will be constant
	//			Code commented for future use.	
	/*			msNextSIMNumber		= msSIMNumber.substring(0,8) + (ToNumber(msSIMNumber.substring(8))  + 1);
				msNextIMSINumber 	= ToNumber(msIMSINumber)+1;*/
//above 1.1
//below 1.1
/*			
				msNextSIMNumber = ToInteger(bcOrdLineNum.GetFieldValue(""Generated Number""))+1;
				mintRecCnt++;
				mbIsRecord = bcOrdLineNum.NextRecord();
			    intLineItemCnt = 0;
					}
			intLineItemCnt++;
			mbIsOrderLine = bcOrdLine.NextRecord();
		}
		for(miCount = 0; miCount < getArrayLength(marrStartNumbers); miCount++) 
		{
			//msFileName = ""STC_"" + bcOrder.GetFieldValue(""HLR ID"") + Clib.rsprintf(""%02s"",ToString(++miFileSeq)) + "".inp"";
			msFileName = ""STC_"" + marrStartNumbers[miCount][7] + ""_"" + Clib.rsprintf(""%02s"",ToString(++miFileSeq)) + "".inp"";
			var mstrFileData = """";
			outFile = sFilePath + msFileName;
			mfpOutputFile = Clib.fopen(outFile,""a"");
    		Clib.fputs(""*********************************************\n"",mfpOutputFile);
			mstrFileData = ""*********************************************"" + ""\n"";
			Clib.fputs(""             HEADER DESCRIPTION				 \n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""             HEADER DESCRIPTION				 "" + ""\n"";
			Clib.fputs(""*********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""*********************************************""+ ""\n"";
			Clib.fputs(""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""\n"";
			Clib.fputs(""Customer: STC\n""  , mfpOutputFile);
			mstrFileData = mstrFileData + ""Customer: STC""+ ""\n"";
      		Clib.fputs(""Quantity: "" + marrStartNumbers[miCount][0] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Quantity: "" + marrStartNumbers[miCount][0] + ""\n"";
//			Clib.fputs(""Quantity: "" + bcOrdLine.GetFieldValue(""Quantity Ordered"") + ""\n"", mfpOutputFile);
			//Clib.fputs(""Type: "" + bcOrdLine.GetFieldValue(""SIM Card Config Name"") + ""\n"", mfpOutputFile);
			//mstrFileData = mstrFileData + ""Type: "" + bcOrdLine.GetFieldValue(""SIM Card Config Name"")+ ""\n"";
	        Clib.fputs(""Type: "" + marrStartNumbers[miCount][6] + ""\n"", mfpOutputFile);//23-05-06 KT
			mstrFileData = mstrFileData + ""Type: "" + marrStartNumbers[miCount][6]+ ""\n"";
			//Clib.fputs(""Memory: "" + bcOrdLine.GetFieldValue(""Card Memory"") + ""\n"", mfpOutputFile);
			Clib.fputs(""Profile: "" + bcOrdLine.GetFieldValue(""Profile"")+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Profile: "" + bcOrdLine.GetFieldValue(""Profile"")+ ""\n"";
    		Clib.fputs(""Graph_ref: ""+ bcOrdLine.GetFieldValue(""Graphical Profile"") + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Graph_ref: ""+ bcOrdLine.GetFieldValue(""Graphical Profile"")+ ""\n"";
   	 		Clib.fputs(""Artwork: ""+ bcOrdLine.GetFieldValue(""ImageFileName"") + ""\n"", mfpOutputFile);  
			mstrFileData = mstrFileData + ""Artwork: ""+ bcOrdLine.GetFieldValue(""ImageFileName"")+ ""\n"";
	  	    //Clib.fputs(""Order Line Id: "" + bcOrdLine.GetFieldValue(""Order Line Id"")+ ""\n"", mfpOutputFile);  // KT 24-04-2006
			//mstrFileData = mstrFileData + ""Order Line Id: "" + bcOrdLine.GetFieldValue(""Order Line Id"")+ ""\n"";
	       	//Clib.fputs(""Batch: "" + bcOrder.GetFieldValue(""Batch Number"")+ ""\n"", mfpOutputFile);
	       	Clib.fputs(""Batch: "" + marrStartNumbers[miCount][7] + ""\n"", mfpOutputFile);
			Clib.fputs(""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""\n"";
			Clib.fputs(""Transport_Key: "" + bcOrder.GetFieldValue(""Transport Key"")+ ""\n"", mfpOutputFile); 
			mstrFileData = mstrFileData + ""Transport_Key: "" + bcOrder.GetFieldValue(""Transport Key"")+ ""\n"";
	  //	Clib.fputs(""Transport_3GOp_In: "" + bcOrder.GetFieldValue(""Transport 3GOP key"")+ ""\n"", mfpOutputFile);
			Clib.fputs(""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""\n"";
			Clib.fputs(""Address1: ""+ bcOrder.GetFieldValue(""Bill To Address"") +""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Address1: ""+ bcOrder.GetFieldValue(""Bill To Address"")+ ""\n"";
			Clib.fputs(""Address2: ""+ bcOrder.GetFieldValue(""Bill To Address Line 2"") + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Address2: ""+ bcOrder.GetFieldValue(""Bill To Address Line 2"")+ ""\n"";
			Clib.fputs(""Address3: ""+ bcOrder.GetFieldValue(""Bill To Address Line 3"") +""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Address3: ""+ bcOrder.GetFieldValue(""Bill To Address Line 3"")+ ""\n"";
			Clib.fputs(""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""\n"";
		//	Clib.fputs(""Graph_ref: ""+ bcOrdLine.GetFieldValue(""Graphical Profile"") + ""\n"", mfpOutputFile);
		//	Clib.fputs(""\n"", mfpOutputFile);
			Clib.fputs(""PO_ref_number: "" + bcOrder.GetFieldValue(""PO Requisition Ref Number"")+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""PO_ref_number: "" + bcOrder.GetFieldValue(""PO Requisition Ref Number"")+ ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+ ""\n"";			    		   	
			Clib.fputs(""            INPUT VARIABLES                 \n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""            INPUT VARIABLES                   ""+ ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************"" + ""\n"";
			Clib.fputs(""Var_In_List: ""+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Var_In_List: ""+ ""\n"";
//			Clib.fputs(""IMSI(""+marrStartNumbers[miCount][4]+""):""+ marrStartNumbers[miCount][2] + ""\n"", mfpOutputFile);
			Clib.fputs(""IMSI: ""+ marrStartNumbers[miCount][2] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""IMSI:""+ marrStartNumbers[miCount][2] + ""\n"";
			Clib.fputs(""Ser_Nb: ""+ marrStartNumbers[miCount][1] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""IMSI:""+ ""Ser_Nb: ""+ marrStartNumbers[miCount][1] + ""\n"";
//Added this line to include MSISDN number in the file.		
			//Clib.fputs(""MSISDN: ""+ marrStartNumbers[miCount][3] + ""\n"", mfpOutputFile); KT 24-04-2006
			mstrFileData = mstrFileData + ""MSISDN: ""+ marrStartNumbers[miCount][3] + ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+""\n"";
			Clib.fputs(""            OUTPUT VARIABLES                \n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""            OUTPUT VARIABLES                  ""+ ""\n"";		
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+ ""\n"";
			Clib.fputs(""Var_Out: "" + msPprItem + ""\n"", mfpOutputFile); 				// Changed 07:06:2005
			mstrFileData = mstrFileData + ""Var_Out: "" + msPprItem + ""\n"";
			Clib.fclose(mfpOutputFile);
		    bcOrdFile.NewRecord(1);
			bcOrdFile.SetFieldValue(""SIM Order Id"",bcOrder.GetFieldValue(""Id"")); 
			bcOrdFile.SetFieldValue(""File Sequence"", miFileSeq);
			bcOrdFile.SetFieldValue(""File Name"", msFileName);
			bcOrdFile.SetFieldValue(""File Type"", ""O"");
			bcOrdFile.SetFieldValue(""File Data"", mstrFileData);
			bcOrdFile.SetFieldValue(""SIM Order Line Id"", marrStartNumbers[miCount][5]);	
			bcOrdFile.SetFieldValue(""SIM Start Number"", marrStartNumbers[miCount][1]);			
			bcOrdFile.SetFieldValue(""Quantity Ordered"", marrStartNumbers[miCount][0]);						
			bcOrdFile.WriteRecord();
//			UpdateFile(""I"","""",msFileName,sOrderId);
		}
	} 
 catch(e)  
	{
		msErrVal = e.errText;
		if (mfpOutputFile != null)
			Clib.fclose(mfpOutputFile);
		if(strErrVal == """")
			msErrVal = e.errText;
          throw(e);
}
	finally 
	{
		bcNumberEnquiry     = null;
		bcOrdPprItem        = null;
		bcOrder 			= null;
		bcOrdLine 			= null;
		bcOrdLineNum 		= null;
		bcOrdFile 			= null;	
		boNumberEnquiry     = null;
		boOrder 			= null;
		cheqSeqArgs         = null;
		marrStartNumbers	= null;
	}
	return(msErrVal);*/
//above 1.1
}
"//20061008 Kalavana 1.2 Changed code to make SIM Ordering asynchronous
function GenerateFileNew(sOrderId,sFilePath,&Outputs)
{
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	//var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Paper Item""); KT 04-07-2006				// Changed 07:06:2005  
	var bcOrder 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrdLine 			= boOrder.GetBusComp(""RMS SIM Order Line"");
	var bcOrdLineNum 		= boOrder.GetBusComp(""RMS SIM Order Line Num Info for Update"");
	var bcOrdFile 			= boOrder.GetBusComp(""RMS SIM Order File Info Query"");
	var boNumberEnquiry 	= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumberEnquiry		= boNumberEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	var marrStartNumbers 	= new Array();
	var mbIsRecord			= false;
	var mbIsFileRec 		= false;
	var mbIsPprItem			= false;  // Changed 07:06:2005
	var miFirstIndex;
//	var msPrevSIMNumber 	= """";
	var msNextSIMNumber		= """";
	var msNextIMSINumber	= """";
	var msSIMNumber 		= 0;
	var miFileSeq 			= 0;
	var miCount 			= 0;
	var miQty 				= 0;
	var msConcatNumber 		= """";
	var msFileName 			= """";
	var msIMSINumber 		= """";
	var msStrSIMNum			= """";
	var msGenLvl			= """";
	var msErrVal 			= """";
	var msPprItem			= """";   // Changed 07:06:2005
	var strSearchSpec 		= """";
	var msOrderLineId = """";
	var mfpOutputFile;
	var marrSeqChek = new Array();
	var mintRecCnt = 0;
	var mstrMSISDN = """";
	var mblnSplit = false;
	var mbIsOrderLine=false;
	var cheqSeqArgs;//KT 21-042006 
	var outFile ="""";
    var intLineItemCnt = 0;	//  KT 23-05-2006 added  to  split  SIM  Order file for multiple  line items
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");  // KT 05-07-2006 
    var bcSysPref = boSysPref.GetBusComp(""System Preferences""); // KT 05-07-2006
	try
    {
	with(bcSysPref)
	{
    ActivateField(""Value"");
	ClearToQuery();
	SetSearchSpec(""Name"",""STC_SIM_ORDER_VAR_OUT"");
	//below 1.1
    //ExecuteQuery();
     ExecuteQuery(ForwardOnly);
     //above 1.1

	if(FirstRecord()) 
	{
    msPprItem = GetFieldValue(""Value"");
    }
	}
    with(bcOrder) 
		{
			SetViewMode(3);
			ActivateField(""Quantity Ordered"");
			ActivateField(""SIM Card Config Type"");
			ActivateField(""Transport Key"");
			ActivateField(""Transport 3GOP key"");
			ActivateField(""Order Number"");
			ActivateField(""ImageFileName""); //Ch
			ActivateField(""PO Requisition Ref Number"");
			ActivateField(""Bill To Address"");
			ActivateField(""Bill To Address Line 2"");
			ActivateField(""Bill To Address Line 3"");
			ActivateField(""Profile"");
			ActivateField(""HLR ID"");
			ClearToQuery();
			SetSearchSpec(""Id"", sOrderId);
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) 
			{
				msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",sOrderId);
				//TheApplication().RaiseErrorText(msErrVal);
				return(msErrVal);
			}
		}
		with(bcOrdLine) 
		{
			SetViewMode(3);
			ActivateField(""Profile"");
			ActivateField(""Transport Key"");
			ActivateField(""Transport 3GOP Key"");
			ActivateField(""Quantity Ordered"");
			ActivateField(""SIM Card Config Type"");
			ActivateField(""SIM Card Config Name"");			
			ActivateField(""ImageFileName"");
			ActivateField(""Id"");
			ActivateField(""Graphical Profile"");
			ActivateField(""Card Memory"");
			ActivateField(""Starting Number"");
			ActivateField(""Artwork Name"");  // KT 27-06-2006
			ActivateField(""Order Line Id""); // KT 24-04-2006
			ClearToQuery()
			ExecuteQuery();
			mbIsOrderLine = FirstRecord();
			if(!mbIsOrderLine) 
			{
				msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",sOrderId);
				//	TheApplication().RaiseErrorText(msErrVal);
				return(msErrVal);
			}else {
			msOrderLineId = GetFieldValue(""Order Line Id"");
			}
         	}// KT deleted
			with(bcOrdFile) 
		{
			SetViewMode(3);
			ActivateField(""File Sequence"");
			ActivateField(""HLR_Batch"");
			ClearToQuery();
			SetSearchSpec(""SIM Order Id"",sOrderId);
			SetSearchSpec(""File Type"",""O"");
			SetSortSpec(""File Sequence(DESCENDING)"");
			ExecuteQuery();
			mbIsFileRec = FirstRecord();
			if(mbIsFileRec) 
				miFileSeq = GetFieldValue(""File Sequence"");
			else
				miFileSeq = 0;
		}
		/*  KT 04-07-2006 commented to  get msPprItem  value from Sys Preference
			with(bcOrdPprItem) {
			ActivateField(""Paper Item Name"");
			ClearToQuery();
			ExecuteQuery(ForwardOnly);
			mbIsPprItem = FirstRecord();
			
			while(mbIsPprItem) {
				if(msPprItem == """")
					msPprItem = GetFieldValue(""Paper Item Name"");
				else
					msPprItem += "","" + GetFieldValue(""Paper Item Name"");
				mbIsPprItem = NextRecord();	
			}
		}*/
		while(mbIsOrderLine) {
				msOrderLineId = bcOrdLine.GetFieldValue(""Order Line Id"");
				with(bcOrdLineNum) 
				{
					SetViewMode(3);
					ActivateField(""Numbers"");
					ActivateField(""Generated Number"");
					ActivateField(""SIM Id"");
					ActivateField(""Concatenated Number Types"");
					ActivateField(""Order Line Id"");
					ClearToQuery();
					SetSearchSpec(""Order Id"",sOrderId)
					SetSearchSpec(""Order Line Id"",bcOrdLine.GetFieldValue(""Id""));
					SetSortSpec(""Generated Number(ASCENDING)"");
					//ExecuteQuery();	
					ExecuteQuery(ForwardOnly);
			    	mbIsRecord = FirstRecord();
				/*	if(!mbIsRecord) 
					{
						msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD020"",sOrderId);
						TheApplication().RaiseErrorText(msErrVal);
					}*/
				}
			while(mbIsRecord) 
			{	
			miQty++;
	//  23-05-06
	//			if(miCount == 0)
	//				msNextSIMNumber = bcOrdLineNum.GetFieldValue(""Generated Number"");
				msSIMNumber = bcOrdLineNum.GetFieldValue(""Generated Number"");
				cheqSeqArgs = TheApplication().NewPropertySet();// KT 21-04-2006
				cheqSeqArgs.SetProperty(""mblnSplit"",mblnSplit);// KT 21-04-2006
				cheqSeqArgs.SetProperty(""mintRecCnt"",mintRecCnt);//KT 21-04-2006
				CheckSequence(bcNumberEnquiry,bcOrdLineNum,marrSeqChek,cheqSeqArgs);//KT 21-04-2006
				mblnSplit = (cheqSeqArgs.GetProperty(""mblnSplit"")==""true"")?true:false;//KT 21-042006
	            mintRecCnt = ToInteger(cheqSeqArgs.GetProperty(""mintRecCnt""));//KT 21-042006
				if((mblnSplit) || (miQty > 5000) ||   (intLineItemCnt != 0))
				{
					mblnSplit = false;
					mstrMSISDN = """";
					strSearchSpec = """";
					with(bcNumberEnquiry) {
						ActivateField(""Assoc Start Id"");
						ActivateField(""Type Identifier"");
						ActivateField(""Number String With Checksum"");
						ActivateField(""Generation Level"");
						ClearToQuery();
						strSearchSpec = ""[Assoc Start Id] = '"" + bcOrdLineNum.GetFieldValue(""SIM Id"") + ""'"";
						strSearchSpec = strSearchSpec + "" AND ([Type Identifier] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + ""'"";
						strSearchSpec = strSearchSpec + "" OR [Type Identifier] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"") + ""')"";
						SetSearchExpr(strSearchSpec);
						ExecuteQuery();
						var blnIsRecord = FirstRecord();
						msIMSINumber = """";
						mstrMSISDN	 = """";
						msGenLvl	 = """";
						while(blnIsRecord) {
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
								msStrSIMNum	= GetFieldValue(""Number String With Checksum"");
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"")) {
								if(msIMSINumber=="""") {
									msIMSINumber = 	GetFieldValue(""Number String With Checksum"");
									msGenLvl	 = 	GetFieldValue(""Generation Level"");
								}
								else {
									msIMSINumber = 	msIMSINumber + "" / ""+GetFieldValue(""Number String With Checksum"");
									msGenLvl	 = 	msGenLvl + ""/""+GetFieldValue(""Generation Level"");							
								}
							}
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""))
								mstrMSISDN = GetFieldValue(""Number String With Checksum"");
	
							blnIsRecord = NextRecord();
						}
						}
				  	SetArray(marrStartNumbers,miCount,1,""?"",""?"",msStrSIMNum); 
				    SetArray(marrStartNumbers,miCount,2,""?"",""?"",msIMSINumber);
				    SetArray(marrStartNumbers,miCount,3,""?"",""?"",mstrMSISDN);
				    SetArray(marrStartNumbers,miCount,4,""?"",""?"",msGenLvl);
				    SetArray(marrStartNumbers,miCount,5,""?"",""?"",bcOrdLine.GetFieldValue(""Id""));
				    SetArray(marrStartNumbers,miCount,6,""?"",""?"",bcOrdLine.GetFieldValue(""SIM Card Config Name""));
					SetArray(marrStartNumbers,miCount,7,""?"",""?"",bcOrdLine.GetFieldValue(""Card Memory""));
					SetArray(marrStartNumbers,miCount,8,""?"",""?"",bcOrdLine.GetFieldValue(""Artwork Name""));
					SetArray(marrStartNumbers,miCount,9,""?"",""?"",bcOrdLine.GetFieldValue(""Graphical Profile""));
					SetArray(marrStartNumbers,miCount++,10,""?"",""?"",msOrderLineId);
				    miQty = 1;
				}
				SetArray(marrStartNumbers,miCount-1,0,""?"",""?"",miQty);
    //			the validation is on the assumption that first 7 digits of SIM Number will be constant
	//			Code commented for future use.	
	/*			msNextSIMNumber		= msSIMNumber.substring(0,8) + (ToNumber(msSIMNumber.substring(8))  + 1);
				msNextIMSINumber 	= ToNumber(msIMSINumber)+1;*/
				msNextSIMNumber = ToInteger(bcOrdLineNum.GetFieldValue(""Generated Number""))+1;
				mintRecCnt++;
				mbIsRecord = bcOrdLineNum.NextRecord();
			    intLineItemCnt = 0;
					}
			intLineItemCnt++;
			mbIsOrderLine = bcOrdLine.NextRecord();
		}
		for(miCount = 0; miCount < getArrayLength(marrStartNumbers); miCount++) 
		{
			/*var LineItemId = """";  //  KT  Added and  commented on 02-07-2006  
			if(LineItemId == """")  
			{
			LineItemId = marrStartNumbers[miCount][5];
			}
			else if(LineItemId != marrStartNumbers[miCount][5])
			{
			LineItemId = marrStartNumbers[miCount][5];
			miFileSeq = 0;
			}*/
			//msFileName = bcOrder.GetFieldValue(""PO Requisition Ref Number"")+""_""+marrStartNumbers[miCount][6]+""_simorder_""+Clib.rsprintf(""%02s"",ToString(++miFileSeq)) + "".inp"";
			msFileName = ""simorder_""+bcOrder.GetFieldValue(""PO Requisition Ref Number"")+""_""+marrStartNumbers[miCount][6]+""_""+Clib.rsprintf(""%02s"",ToString(++miFileSeq)) + "".inp"";
			var mstrFileData = """";
			outFile = sFilePath + msFileName;
			mfpOutputFile = Clib.fopen(outFile,""a"");
    		Clib.fputs(""*********************************************\n"",mfpOutputFile);
			mstrFileData = ""*********************************************"" + ""\n"";
			Clib.fputs(""*            HEADER DESCRIPTION        *\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""*            HEADER DESCRIPTION        *"" + ""\n"";
			Clib.fputs(""*********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""*********************************************""+ ""\n"";
			//Clib.fputs(""\n"", mfpOutputFile);
			//mstrFileData = mstrFileData + ""\n"";
			Clib.fputs(""Customer: STC\n""  , mfpOutputFile);
			mstrFileData = mstrFileData + ""Customer: STC""+ ""\n"";
      		Clib.fputs(""PO_ref_number: "" + bcOrder.GetFieldValue(""PO Requisition Ref Number"")+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""PO_ref_number: "" + bcOrder.GetFieldValue(""PO Requisition Ref Number"")+ ""\n"";
			Clib.fputs(""Quantity: "" + marrStartNumbers[miCount][0] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Quantity: "" + marrStartNumbers[miCount][0] + ""\n"";
	        Clib.fputs(""Type: "" + marrStartNumbers[miCount][6] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Type: "" + marrStartNumbers[miCount][6]+ ""\n"";
			Clib.fputs(""Memory: "" + marrStartNumbers[miCount][7] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Memory: "" + marrStartNumbers[miCount][7] + ""\n"";
			Clib.fputs(""Profile: "" + bcOrder.GetFieldValue(""Profile"")+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Profile: "" + bcOrder.GetFieldValue(""Profile"")+ ""\n"";
    		Clib.fputs(""Graph_ref: ""+ marrStartNumbers[miCount][9] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Graph_ref: ""+ marrStartNumbers[miCount][9]+ ""\n"";
   	 		Clib.fputs(""Artwork Id: ""+ marrStartNumbers[miCount][8] + ""\n"", mfpOutputFile);  
			mstrFileData = mstrFileData + ""Artwork: ""+ marrStartNumbers[miCount][8]+ ""\n"";
	  	    Clib.fputs(""Batch: "" + marrStartNumbers[miCount][10] + ""\n"", mfpOutputFile);
			Clib.fputs(""*\n"",mfpOutputFile);
			mstrFileData = mstrFileData + ""*""+ ""\n"";
			Clib.fputs(""Keyname: "" + bcOrder.GetFieldValue(""Transport Key"")+ ""\n"", mfpOutputFile); 
			mstrFileData = mstrFileData + ""Keyname: "" + bcOrder.GetFieldValue(""Transport Key"")+ ""\n"";
			Clib.fputs(""*\n"",mfpOutputFile);
			mstrFileData = mstrFileData + ""*""+ ""\n"";
			//	Clib.fputs(""Transport_3GOp_In: "" + bcOrder.GetFieldValue(""Transport 3GOP key"")+ ""\n"", mfpOutputFile);
			//Clib.fputs(""\n"", mfpOutputFile);
			//mstrFileData = mstrFileData + ""\n"";
			Clib.fputs(""Address1: ""+ bcOrder.GetFieldValue(""Bill To Address"") +""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Address1: ""+ bcOrder.GetFieldValue(""Bill To Address"")+ ""\n"";
			Clib.fputs(""Address2: ""+ bcOrder.GetFieldValue(""Bill To Address Line 2"") + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Address2: ""+ bcOrder.GetFieldValue(""Bill To Address Line 2"")+ ""\n"";
			Clib.fputs(""*\n"",mfpOutputFile);
			mstrFileData = mstrFileData + ""*""+ ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+ ""\n"";			    		   	
			Clib.fputs(""*            INPUT VARIABLES           *      \n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""*            INPUT VARIABLES           *""+ ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************"" + ""\n"";
			Clib.fputs(""Var_In_List: ""+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Var_In_List: ""+ ""\n"";
//			Clib.fputs(""IMSI(""+marrStartNumbers[miCount][4]+""):""+ marrStartNumbers[miCount][2] + ""\n"", mfpOutputFile);
			Clib.fputs(""IMSI: ""+ marrStartNumbers[miCount][2] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""IMSI:""+ marrStartNumbers[miCount][2] + ""\n"";
			Clib.fputs(""ICCID: ""+ marrStartNumbers[miCount][1] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""ICCID: ""+ marrStartNumbers[miCount][1] + ""\n"";
//Added this line to include MSISDN number in the file.		
			//Clib.fputs(""MSISDN: ""+ marrStartNumbers[miCount][3] + ""\n"", mfpOutputFile); KT 24-04-2006
			//mstrFileData = mstrFileData + ""MSISDN: ""+ marrStartNumbers[miCount][3] + ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+""\n"";
			Clib.fputs(""*            OUTPUT VARIABLES          *      \n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""*            OUTPUT VARIABLES          *""+ ""\n"";		
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+ ""\n"";
			Clib.fputs(""Var_Out: ICCID,IMSI,"" + msPprItem + ""\n"", mfpOutputFile); 				// Changed 07:06:2005
			mstrFileData = mstrFileData + ""Var_Out: "" + msPprItem + ""\n"";
			Clib.fclose(mfpOutputFile);
		    bcOrdFile.NewRecord(1);
			bcOrdFile.SetFieldValue(""SIM Order Id"",bcOrder.GetFieldValue(""Id"")); 
			bcOrdFile.SetFieldValue(""File Sequence"", miFileSeq);
			bcOrdFile.SetFieldValue(""File Name"", msFileName);
			bcOrdFile.SetFieldValue(""File Type"", ""O"");
			bcOrdFile.SetFieldValue(""File Data"", mstrFileData);
			bcOrdFile.SetFieldValue(""SIM Order Line Id"", marrStartNumbers[miCount][5]);	
			bcOrdFile.SetFieldValue(""SIM Start Number"", marrStartNumbers[miCount][1]);			
			bcOrdFile.SetFieldValue(""Quantity Ordered"", marrStartNumbers[miCount][0]);						
			bcOrdFile.WriteRecord();
//			UpdateFile(""I"","""",msFileName,sOrderId);
		}
	} 
 catch(e)  
	{
		msErrVal = e.errText;
		if (mfpOutputFile != null)
			Clib.fclose(mfpOutputFile);
		if(strErrVal == """")
			msErrVal = e.errText;
          throw(e);
}
	finally 
	{
//below 1.1		
		bcNumberEnquiry     = null;
		boNumberEnquiry     = null;
		cheqSeqArgs         = null;
//above 1.1 		
		bcSysPref           = null;
 		boSysPref           = null;
		bcOrder 			= null;
		bcOrdLine 			= null;
		bcOrdLineNum 		= null;
		bcOrdFile 			= null;	
		boOrder 			= null;
		marrStartNumbers	= null;
   }
	return(msErrVal);
}
"/**************************************************************************************
* Name          : SIM File Service GetDirrectoryList  Function				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Siebel ES SCR1, Objects Destroyed
**************************************************************************************/


function GetDirrectoryList(fileArray,Inputs,Outputs)
{
//the command to print the file names will be, name sorted
//for dos 
//dir [directory]\[pattern] /ON /B > [directory]\filelist.txt
//for unix??
//ls [directory]/[pattern] | sort > [directory]/filelist.txt
//populate the filenames in a propertyset, simple to call 
	var msPath = Inputs.GetProperty(""DirectoryPath"");
	var msPattern=Inputs.GetProperty(""FilePattern"");
	var msFNameForList = msPath + "filelist.lst"";
	var miCutLen = 1 + msPath.length;
//must get syspref EECC_SIEBEL_SERVER_OS
	var mpsSupply;
	var mpsReturn;
	var msOS;//name of the OS, can be WIN, win, Win (Windows) or Unix, UNIX, unix (all flavours of UNIX)
	var msCMD;//command string to execute list directory function on the OS
	//var mbsSYSPREF = TheApplication().GetService(""EECC BS Startup"");
	mpsSupply = TheApplication().NewPropertySet();
	mpsReturn = TheApplication().NewPropertySet();
	//mpsSupply.SetProperty(""Parameter Name"",""EECC_SIEBEL_SERVER_OS"");
	//mbsSYSPREF.InvokeMethod(""Get SysPref"",mpsSupply,mpsReturn);
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref= boSysPref.GetBusComp(""System Preferences"");
	with(bcSysPref) {
		ActivateField(""Value"");
		ClearToQuery();
		SetSearchSpec(""Name"",""STC_OS"");
		ExecuteQuery();
		
		if(FirstRecord())
			msOS = GetFieldValue(""Value"");
	}
	
	if(""unix"" == msOS.toLowerCase()){//unix
		//msCMD = ""ls "" + msPath + msPattern + "" | cut -c "" + miCutLen + ""- | sort > "" + msFNameForList;
		msCMD = ""ls "" + msPath + msPattern + "" | sort > "" + msFNameForList;
	} else {
		msCMD = ""dir "" + msPath + msPattern + "" /ON /B > "" + msFNameForList;
	}
//now execute the command on OS, can be risky		
	Clib.system(msCMD);
//	WriteToFile(""written the directory list file"",""_test"");
	/*mpsSupply = TheApplication().NewPropertySet();
	mpsReturn = TheApplication().NewPropertySet();
	mpsSupply.SetProperty(""ContainerTag"",""FileList"");
	mpsSupply.SetProperty(""RecordTag"",""File"");
	mpsSupply.SetProperty(""FileName"",msFNameForList);
	TEXT2XML(mpsSupply,mpsReturn);
	LogPropSet(mpsReturn,""_GotFileList"");
	Outputs.AddChild(mpsReturn.GetChild(0).GetChild(0));
	LogPropSet(Outputs,""_GotFileList_2"");
	Outputs.SetProperty(""CountOfFiles"",mpsReturn.GetChild(0).GetChild(0).GetChildCount());*/
	var msInputString = """";
	var msFile = Inputs.GetProperty(""testfile"");
	//msFile = msPath+msFile;
	//var testfile = """";
	
	//Clib.fopen(testfile,""r"");
	//var mfpInputFile 	= Clib.fopen(msFile,""r"");
	 var mfpInputFile 	= Clib.fopen(msFNameForList,""r"");
	//Clib.fgets(mfpInputFile);  
     //msInputString = Clib.fgets(mfpInputFile);
	var fileCount=0;	
	 while (msInputString != null) 
	    	{
			msInputString = Clib.fgets(mfpInputFile);
			if(msInputString == null) continue;
	
	//		remove the end of line character from the string
	//		for unix formatted file it is \n and for windows formatted file it is \r\n

		if(msInputString.indexOf(""\r"") != -1) {
			msInputString = msInputString.substring(0,msInputString.indexOf(""\r""));
			fileArray[fileCount] = msInputString;
			fileCount++;
			} else if(msInputString.indexOf(""\n"") != -1) {
			
			msInputString = msInputString.substring(0,msInputString.indexOf(""\n""));
			fileArray[fileCount] = msInputString;
			fileCount++;
		}
		}
//below 1.1		
		mpsReturn = null;
		mpsSupply = null;
		bcSysPref  = null;
		boSysPref  = null;
//above 1.1
		return CancelOperation;
}
"/**************************************************************************************
* Name          : SIM Order Business Service ReadOrderFile Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Commented entire function  becuase we are not  using  this function
**************************************************************************************/

function ReadOrderFile(&marrOrdCnct,&marrInputValues,&marrSIMIMSI,&mpsPprId,&marrError,msFileName,&marrNumType)
{
//below 1.1
/*
	var msInputString 	= """";
	var msTempString 	= """";
	var msTemp			= """";
	var msFile 			= msFileName;
	var mbError			= false;
	var mbValidateOrd	= false;
	var miCnt 			= 0;
	var miNumType		= 0;
	var marrInpStr		= new Array();
	//var marrOrdCnct 	= new Array();
	var marrTemp		= new Array();
	try
	{
    	var mfpInputFile 	= Clib.fopen(msFile,""r"");
	
	   while (msInputString != null) 
	    {
			msInputString = Clib.fgets(mfpInputFile);
			if(msInputString == null) continue;
	
	//		remove the end of line character from the string
	//		for unix formatted file it is \n and for windows formatted file it is \r\n

		if(msInputString.indexOf(""\r"") != -1) {
			msInputString = msInputString.substring(0,msInputString.indexOf(""\r""));
		} else if(msInputString.indexOf(""\n"") != -1) {
			
			msInputString = msInputString.substring(0,msInputString.indexOf(""\n""));
		}
		if(msInputString == """") continue;
		if(Clib.isdigit(msInputString.charAt(0))) 
		{		
			marrSIMIMSI[miCnt] = msInputString.split("" "");
			msTemp = marrSIMIMSI[miCnt][getArrayLength(marrSIMIMSI[miCnt])-1];
			if(!Clib.isalnum(msTemp.substring(msTemp.length-1))) 
			{
				//marrSIMIMSI[miCnt][getArrayLength(marrSIMIMSI[miCnt])-1] = msTemp.substring(0,msTemp.length-1);
				SetArray(marrSIMIMSI,miCnt,getArrayLength(marrSIMIMSI[miCnt])-1,""?"",""?"",msTemp.substring(0,msTemp.length-1));
				}
			miCnt++;
		}
		else if(Clib.isalpha(msInputString.charAt(0))) 
		{
			if(msInputString.substring(0,msInputString.indexOf("":"")) == ""Var_Out"") 
			{
//              msTempString = msInputString.substring(msInputString.indexOf("":"") + 2,msInputString.indexOf(""\n""));
				msTempString = msInputString.substring(msInputString.indexOf("":"") + 2);
				//marrNumType = msTempString.split(""/"");
				marrInpStr = msTempString.split(""/"");
				for(miNumType=0;miNumType < getArrayLength(marrInpStr);miNumType++) {
					marrNumType[miNumType] = marrInpStr[miNumType];
				}
			}
			else
			{
				marrInputValues[msInputString.substring(0,msInputString.indexOf("":""))] = msInputString.substring(msInputString.indexOf("":"") + 2);
		//		marrInputValues[msInputString.substring(0,msInputString.indexOf("":""))] = 	msInputString.substring(msInputString.indexOf("":"") + 2,msInputString.indexOf(""\n""));	
			}
		}
	}
	
	} catch(e){
		var test4 = e.errText;
		marrTemp 	= null;
		mbError 	= true;
		
		throw(e);
	} 
	finally 
	{
		if (mfpInputFile != null)
			Clib.fclose(mfpInputFile);	
	
	}
	if(mbError)
		return(!mbError);
	else {
		mbValidateOrd = ValidateOrder(marrInputValues,marrSIMIMSI,marrNumType,marrOrdCnct,mpsPprId,marrError);
		return(mbValidateOrd);
	}
*/
//above 1.1

}
"/**************************************************************************************
* Name          : SIM Order Business Service ReadOrderFile Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/

function ReadOrderFileNew(&marrOrdCnct,&marrInputValues,&marrSIMIMSI,&mpsPprId,&marrError,msFileName,&marrNumType)
{
	var msInputString 	= """";
	var msTempString 	= """";
	var msTemp			= """";
	var msFile 			= msFileName;
	var mbError			= false;
	var mbValidateOrd	= false;
	var miCnt 			= 0;
	var miNumType		= 0;
	var marrInpStr		= new Array();
	//var marrOrdCnct 	= new Array();
	var msInputString1  = """";
	var msInputString2  = """";   
	var marrTemp		= new Array();
	try
	{
    	 var mfpInputFile 	= Clib.fopen(msFile,""r"");
	     while (msInputString != null) 
	    {
			msInputString = Clib.fgets(mfpInputFile);
			if(msInputString == null) continue;
	
	//		remove the end of line character from the string
	//		for unix formatted file it is \n and for windows formatted file it is \r\n

			if(msInputString.indexOf(""\r"") != -1) {
				msInputString = msInputString.substring(0,msInputString.indexOf(""\r""));
			} else if(msInputString.indexOf(""\n"") != -1) {
				
				msInputString = msInputString.substring(0,msInputString.indexOf(""\n""));
			}
			if(msInputString == """") continue;
			if(Clib.isdigit(msInputString.charAt(0))) 
			{		
				
				if(msInputString.substring(0,msInputString.indexOf(""|"")) == ""1"")
				{
					msInputString1 = msInputString.substring(msInputString.indexOf(""|"")+1);
					//marrSIMIMSI[miCnt] = msInputString.split("" "");
					marrSIMIMSI[miCnt] = msInputString1.split(""|"");
					msTemp = marrSIMIMSI[miCnt][getArrayLength(marrSIMIMSI[miCnt])-1];
					
					var test6 = getArrayLength(marrSIMIMSI[miCnt]);
				
					if(!Clib.isalnum(msTemp.substring(msTemp.length-1))) 
					{
						//marrSIMIMSI[miCnt][getArrayLength(marrSIMIMSI[miCnt])-1] = msTemp.substring(0,msTemp.length-1);
						SetArray(marrSIMIMSI,miCnt,getArrayLength(marrSIMIMSI[miCnt])-1,""?"",""?"",msTemp.substring(0,msTemp.length-1));
					}
					miCnt++;
			   }
				if(msInputString.substring(0,msInputString.indexOf(""|"")) == ""0"")	
				{
					msInputString2 = msInputString.substring(msInputString.indexOf(""|"")+1);
					marrInpStr = msInputString2.split(""|"");
					for(miNumType=0;miNumType < getArrayLength(marrInpStr);miNumType++) {
						marrNumType[miNumType] = marrInpStr[miNumType];
						var test7 = marrInpStr[miNumType];
				        //var test8 = marrSIMIMSI[miCnt][1];
				        //var test9 = marrSIMIMSI[miCnt][2];
					}
				}
			}
		
		/*else if(Clib.isalpha(msInputString.charAt(0))) 
		{
			if(msInputString.substring(0,msInputString.indexOf("":"")) == ""Var_Out"") 
			{
//              msTempString = msInputString.substring(msInputString.indexOf("":"") + 2,msInputString.indexOf(""\n""));
				msTempString = msInputString.substring(msInputString.indexOf("":"") + 2);
				//marrNumType = msTempString.split(""/"");
				marrInpStr = msTempString.split("","");
				for(miNumType=0;miNumType < getArrayLength(marrInpStr);miNumType++) {
					marrNumType[miNumType] = marrInpStr[miNumType];
				}
			}
			else
			{
				marrInputValues[msInputString.substring(0,msInputString.indexOf("":""))] = msInputString.substring(msInputString.indexOf("":"") + 2);
		//		marrInputValues[msInputString.substring(0,msInputString.indexOf("":""))] = 	msInputString.substring(msInputString.indexOf("":"") + 2,msInputString.indexOf(""\n""));	
			}
		}*/
	}
	
	} catch(e){
		var test4 = e.errText;
		marrTemp 	= null;
		mbError 	= true;
		
		throw(e);
	} 
	finally 
	{
		if (mfpInputFile != null)
			Clib.fclose(mfpInputFile);	
	
	}
	if(mbError)
		return(!mbError);
	else {
		mbValidateOrd = ValidateOrderNew(marrInputValues,marrSIMIMSI,marrNumType,marrOrdCnct,mpsPprId,marrError);
		return(mbValidateOrd);
	}


}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM File 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	/*var marrOrdCnct 	= new Array();
	var marrInputParams = new Array();
	var marrError 		= new Array();
	var marrSIMIMSI		= new Array();
	var marrNumberType	= new Array();*/
	var fileArray       = new Array();
	var intReturn		= CancelOperation;
	//var mpsPprId		= TheApplication().NewPropertySet();
	//var msFullFileName	= Inputs.GetProperty(""FilePath"");
	//var msFileName 		= Inputs.GetProperty(""FilePath"").substring(Inputs.GetProperty(""FileName"").lastIndexOf(""/"") + 1);
	var strErrVal		= """";
	//var mbResult		= false;
	//var Inputs 			= TheApplication().NewPropertySet();
	//var Outputs         = TheApplication().NewPropertySet();
	//try	{
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
    var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
	bcSysPref.ActivateField(""Value"");
	bcSysPref.ClearToQuery();
	bcSysPref.SetSearchSpec(""Name"",""STC_IF_SIMDETAILFILE_DIR_IN"");
	bcSysPref.ExecuteQuery();
	if(bcSysPref.FirstRecord()) 
	{
    Inputs.SetProperty(""DirectoryPath"",bcSysPref.GetFieldValue(""Value""));
    //t1 = bcSysPref.GetFieldValue(""Value"");
	//Inputs.SetProperty(""testfile"",""C:\\Test1\\filelist.lst"");
	}
	bcSysPref.ClearToQuery();
	bcSysPref.SetSearchSpec(""Name"",""STC_IF_SIMDETAILFILE_DIR_OUT"");
	bcSysPref.ExecuteQuery();
	if(bcSysPref.FirstRecord()) 
	{
    Inputs.SetProperty(""DirectoryPathOut"",bcSysPref.GetFieldValue(""Value""));
    }
	switch(MethodName) 	
    {
		case ""GenerateFile"":

			
			strErrVal = GenerateFileNew(Inputs.GetProperty(""OrderId""),Inputs.GetProperty(""FilePath""),Outputs);
			//Above 1.1
			Outputs.SetProperty(""ErrMessage"",strErrVal);
			var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
			var bcOrder 			= boOrder.GetBusComp(""RMS SIM Order"");
			with(bcOrder)
			{
			InvokeMethod(""SetAdminMode"",""TRUE"");
			SetViewMode(AllView);
			ActivateField(""Status"");
			ActivateField(""Comments"");
			ActivateField(""Status"");
			ActivateField(""PO Generated Date"");
			ActivateField(""Current Date"");
			SetSearchSpec(""Id"",Inputs.GetProperty(""OrderId""));
			ExecuteQuery(ForwardOnly);
			var blnsIsRecord = FirstRecord();
			if(blnsIsRecord)
			{
			var dtCurrentDate = GetFieldValue(""Current Date"");
			if(strErrVal!= """")
			{
			SetUserProperty(""From BusService"",""Y""); 
			SetFieldValue(""Comments"",strErrVal);
			SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW""));
			WriteRecord();
			SetUserProperty(""From BusService"",""N"");
			}
			else 
			{
			SetUserProperty(""From BusService"",""N"");
			SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""PO GENERATED""));
			SetFieldValue(""PO Generated Date"",dtCurrentDate);
			WriteRecord();
			SetUserProperty(""From BusService"",""N"");
			}
			}
			InvokeMethod(""SetAdminMode"",""FALSE"");
			}
			bcOrder = null;
			boOrder = null;
			//below 1.1
			break;
			
		case ""ReadOrderFile"":
			GetDirrectoryList(fileArray,Inputs,Outputs);
			CallReadOrderFiles(fileArray,Inputs);
			/*	//mbResult = 	ReadOrderFileNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrError,msFullFileName,marrNumberType);
			if(mbResult)
				{	

			   	strErrVal = UpdateNumbersNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrNumberType,msFullFileName);
			 }
		//-----------------------------------------------------------------------------
		//enable the following script, if an error file is required to be generated          // 01:07:2005
		//----------------------------------------------------------------------------
			if(strErrVal != """" || getArrayLength(marrError) > 0) 
			//{
			/*	marrError[getArrayLength(marrError)] = strErrVal;
				GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);	
			    	
			}
			else //commented for read tests*/
			/*{
				if(marrError[0] != """") {
				GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);
				//strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD019"");
				TheApplication().RaiseErrorText(Outputs.GetProperty(""strErrVal""));
				}
			}//commented for read tests
				break;
			default:
				intReturn = ContinueOperation;*/
				break;
			case ""ReadOrderFileNew"":
			GetDirrectoryList(fileArray,Inputs,Outputs);
			CallReadOrderFiles(fileArray,Inputs);
			/*	//mbResult = 	ReadOrderFileNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrError,msFullFileName,marrNumberType);
			if(mbResult)
				{	

			   	strErrVal = UpdateNumbersNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrNumberType,msFullFileName);
			 }
		//-----------------------------------------------------------------------------
		//enable the following script, if an error file is required to be generated          // 01:07:2005
		//----------------------------------------------------------------------------
			if(strErrVal != """" || getArrayLength(marrError) > 0) 
			//{
			/*	marrError[getArrayLength(marrError)] = strErrVal;
				GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);	
			    	
			}
			else //commented for read tests*/
			/*{
				if(marrError[0] != """") {
				GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);
				//strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD019"");
				TheApplication().RaiseErrorText(Outputs.GetProperty(""strErrVal""));
				}
			}//commented for read tests
				break;
			default:
				intReturn = ContinueOperation;*/
				break;
		}
	
		//}
	//catch(e)
	//{

	//	if(strErrVal == """")
	//		strErrVal = e.errText;

	//}
	//finally
//	{ 
	
		fileArray           = null;
		bcSysPref           = null;
		boSysPref           = null;
		/*mpsPprId			= null;
	    marrOrdCnct 	    = null;
	    marrInputParams     = null;
	    marrError 	        = null;
	    marrSIMIMSI	        = null;
        marrNumberType	    = null;*/
//	}
//	if(strErrVal != """")
//		TheApplication().RaiseErrorText(strErrVal);
				
	return (intReturn);
}
function SetArray(&arrArray,d1,d2,d3,d4,&value)
{
	try{
var strSTEng = TheApplication().GetProfileAttr(""RMS_ST_ENGINE"");
if ((d2 != ""?"")) {
if ((typeof(arrArray[d1]) != "function"") && (strSTEng == ""Y"")){
arrArray[d1] = new Array();
}
} else {
arrArray[d1] = value;
return(true);
}
if ((d3 != ""?"")) {
if ((typeof(arrArray[d1][d2]) != "function"")  && (strSTEng == ""Y""))
arrArray[d1][d2] = new Array();
} else {
arrArray[d1][d2] = value;
return(true);
}
if ((d4 != ""?"")) {
if((typeof(arrArray[d1][d2][d3]) != "function"")  && (strSTEng == ""Y""))
arrArray[d1][d2][d3] = new Array();
} else {
arrArray[d1][d2][d3] = value;
return(true);
}
} catch(e) {
var test = e.errText;
throw(e);
}


}
"/**************************************************************************************
* Name          : SIM Order Business Service UpdateFile Method 					  	  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/

function UpdateFile(strFileType,strComments,strFileName,strOrderId,strOrderLineId)
{
	var miFileSeq		= 0;
	var mbIsFileRec		= false;
	var msFileId		= """";
	var boOrder 		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderFileInfo = boOrder.GetBusComp(""RMS SIM Order File Info"");

	with(bcOrderFileInfo) 
	 {
		SetViewMode(3);
		ActivateField(""File Sequence"");
		ActivateField(""HLR_Batch"");
		ClearToQuery();
		SetSearchSpec(""SIM Order Id"",strOrderId);
		SetSearchSpec(""File Type"",strFileType);
		SetSortSpec(""File Sequence(DESCENDING)"");
		ExecuteQuery(ForwardOnly);
		mbIsFileRec = FirstRecord();

		if(mbIsFileRec) 
			miFileSeq = GetFieldValue(""File Sequence"");
		else
			miFileSeq = 0;
	 }

//  Update the file table with the appropriate parameters	

	with(bcOrderFileInfo) 
	{
		SetViewMode(AllView);
		ActivateField(""Id"");
		NewRecord(1);
		SetFieldValue(""Comments"",strComments);
		//SetFieldValue(""File Name"",strFileName.substring(strFileName.indexOf(""EE"")));
		var index = strFileName.lastIndexOf(""\\"");
		if (index <= 0)
        {
		index = strFileName.lastIndexOf(""/"");
        if (index > 0)
        {
		SetFieldValue(""File Name"",strFileName.substring(strFileName.lastIndexOf(""/"")+1));
	    }
		}
		else 
		{
		SetFieldValue(""File Name"",strFileName.substring(strFileName.lastIndexOf(""\\"")+1));
		}
		SetFieldValue(""File Sequence"",miFileSeq);
		SetFieldValue(""File Type"",strFileType);
		SetFieldValue(""SIM Order Id"",strOrderId);
		SetFieldValue(""SIM Order Line Id"",strOrderLineId);
		WriteRecord();
	    }
	msFileId = bcOrderFileInfo.GetFieldValue(""Id"");
	bcOrderFileInfo = null;
	boOrder			= null;
	return msFileId;
}
"/**************************************************************************************
* Name          : SIM Order Business Service UpdateNumbers Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* * 20060710    1.1         Kalyana      	Commented entire function  becuase we are not  using  this function
**************************************************************************************/

function UpdateNumbers(&marrOrdCnct,&marrInputParams,&marrSIMIMSI,&mpsPprId,&marrNumTypes,msFileName)
{
//below 1.1
/*	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var boNMEnquiry			= TheApplication().GetBusObject(""RMS NM Number Enquiry"");     // Changed 06:06:2005

//	var bcNumberMaster      = boOrder.GetBusComp(""RMS SIM Order NM Number Master"");
	var bcNumberMaster      = boNMEnquiry.GetBusComp(""RMS NM Number Enquiry For Update""); // Changed 06:06:2005
	
	var boSIMNumber         = TheApplication().GetBusObject(""RMS SIM Number"");     // Changed 06:06:2005
	var bcNumPaperItem      = boSIMNumber.GetBusComp(""RMS SIM Number Paper Item""); // Changed 06:06:2005
//	var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Number Paper Item""); 
//	var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Order Paper Item"");

	var bcOrder				= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrderUpd			= boOrder.GetBusComp(""RMS SIM Order Update"");
	var bcOrderLine			= boOrder.GetBusComp(""RMS SIM Order Line Update"");
	var bcOrderLineNumbers  = boOrder.GetBusComp(""RMS SIM Order Line Num Info"");
	var bcNumberConcat		= boOrder.GetBusComp(""RMS SIM Order Association Number Type Display"");
	var bcOrderLineRecdInfo = boOrder.GetBusComp(""RMS SIM Order Line Recd Info"");
	
	var boOrderQuery		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	= boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");

	var boSysPref			= TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref			= boSysPref.GetBusComp(""System Preferences"");
	
	var bsRMSBlk            = TheApplication().GetService(""RMS RMS Block Calc"");
	var psBlkInputs			= TheApplication().NewPropertySet();
	var psBlkOutputs		= TheApplication().NewPropertySet();
	
	var miRecdItemCount 	= 0; 
	var mbIsRecord 			= false;
	var strErrVal			= """";
	var strSIMCrdId			= """";
	var strSIMCrdPrice = """";
	var strOrderId			= """";
	var blnsIsPaperItem = false; //KT 30-04-06
	var blnBlkUpdate		= false;
	var dtCurrentDate ;
	
	try
	{
	
	with(bcSysPref) {
		ActivateField(""Value"");
		ClearToQuery();
		SetSearchSpec(""Name"",""RMS_BLOCK_UPDATION"");
		SetSearchSpec(""Value"",""Y"");
		ExecuteQuery(ForwardOnly);
		if(FirstRecord())
			blnBlkUpdate	= true;
	}
	with(bcOrderLineQuery) 
	{
		
		ActivateField(""Order Id"");
		ClearToQuery();
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strOrderId = GetFieldValue(""Order Id"");
	}

	with(bcOrder) 
	{
		SetViewMode(3);
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ActivateField(""Closed Date"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId);
	//	SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""]); KT 24-04-2006
		SetSearchSpec(""Revision Number"",1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);	
		} 
		dtCurrentDate = GetFieldValue(""Current Date"");
	}
	
	with(bcOrderUpd) 
	{
		SetViewMode(3);
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ActivateField(""Closed Date"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId);
		//SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""])
		SetSearchSpec(""Revision Number"",1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		dtCurrentDate = GetFieldValue(""Current Date"");
	}
	
	with(bcOrderLine) 
	{
		ActivateField(""Status"");
		ActivateField(""Id"");
		ActivateField(""Quantity Received"");
		ActivateField(""Fulfilled Date"");
		ActivateField(""SIM Card Config Id"");	
		ActivateField(""SIM Card Price"");
		ClearToQuery();
		//SetSearchSpec(""SIM Card Config Type"",marrInputParams[""Type""]);
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
	  //SetSearchSpec(""Profile"",marrInputParams[""Profile""]);  KT 24-04-2006
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]); 
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strSIMCrdId = GetFieldValue(""SIM Card Config Id"");
		strSIMCrdPrice = GetFieldValue(""SIM Card Price"");
	}
	
	var miCnt = 0;
	var miPprCnt = 0;
	
	var msFileId = UpdateFile(""I"","""",msFileName,bcOrderUpd.GetFieldValue(""Id""));

//	Update the Order Line Recieved Info Table	

	with(bcOrderLineRecdInfo) {
	NewRecord(1);
	SetFieldValue(""Input File Info Id"",msFileId);
	SetFieldValue(""Order Id"",bcOrder.GetFieldValue(""Id""));
	SetFieldValue(""Order Line Id"",bcOrderLine.GetFieldValue(""Id""));
	SetFieldValue(""Quantity Received"",getArrayLength(marrOrdCnct));
	WriteRecord();
	}
	
	for(miCnt =0; miCnt < getArrayLength(marrOrdCnct);miCnt++) 
	   {
		with(bcOrderLineNumbers) 
		{
			ActivateField(""Status"");
			ActivateField(""File Id"");
			ActivateField(""Assoc Start Id"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",marrOrdCnct[miCnt]);
//			SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""WITH SIM SUPPLIER""));
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) continue;
			
			miRecdItemCount++;
			SetFieldValue(""File Id"",msFileId);
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
		//	SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
			WriteRecord();
			
		}
		
		for(miPprCnt = 2;miPprCnt<getArrayLength(marrSIMIMSI[miCnt]);miPprCnt++) 
		{
			with(bcNumPaperItem)
			{
				ActivateField(""Paper Item Value"");
				ClearToQuery();
				SetSearchSpec(""Order Line Number Detail Id"",bcOrderLineNumbers.GetFieldValue(""Id"")); 
				SetSearchSpec(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt]));
				ExecuteQuery(ForwardOnly);
				blnsIsPaperItem = FirstRecord();
				if(!FirstRecord()) 
				{
					NewRecord(1);	
					SetFieldValue(""Order Line Number Detail Id"",bcOrderLineNumbers.GetFieldValue(""Id""));
					//SetFieldValue(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt-2]));//KT  14-06-06  commented as for new read file  format
				    SetFieldValue(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt]));
				}
				//SetFieldValue(""Paper Item Value"",marrSIMIMSI[miCnt][miPprCnt-2]);
				SetFieldValue(""Paper Item Value"",marrSIMIMSI[miCnt][miPprCnt]);
				WriteRecord();				
			}
		}

		with(bcNumberConcat) 
		{
				ActivateField(""Status"");
				ActivateField(""Associated Number"");
				
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",bcOrderLineNumbers.GetFieldValue(""Assoc Start Id""));
				ExecuteQuery(1);
				
				mbIsRecord = FirstRecord();
				while(mbIsRecord) {
					SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
				//	SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"")); KT 26-04-06
					WriteRecord();
					mbIsRecord = NextRecord();
				}
				
		}	
		
		with(bcNumberMaster) 
		{
			ActivateField(""SIM Card Id"");
			ActivateField(""Price"");			
			ActivateField(""Status"");
			ActivateField(""Block Id"");
			ActivateField(""Type Identifier"");
			ActivateField(""Number String With Checksum"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"", bcOrderLineNumbers.GetFieldValue(""Assoc Start Id""));
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) 
			{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD016"",marrInputParams[""P0_ref_number""]);
				TheApplication().RaiseErrorText(strErrVal);
			}
			
			while(mbIsRecord) 
			{
				if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
					SetFieldValue(""Number String With Checksum"",marrSIMIMSI[miCnt][1]);
				SetFieldValue(""SIM Card Id"",strSIMCrdId);			
				SetFieldValue(""Price"",strSIMCrdPrice);			
				SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
				//SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"")); KT 26-04-06
				WriteRecord();
				
				if(blnBlkUpdate) {
					with(psBlkInputs)
					{
						SetProperty(""Object Id"",GetFieldValue(""Block Id""));
						SetProperty(""From Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""WITH SIM SUPPLIER""));
						SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
					//	SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
					}
					
					bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
				}
				mbIsRecord = NextRecord();
			}
		}
		
		
	}

//	Update the Order Line Table for Quantity Recieved and Status fields

	with(bcOrderLine)
	{
		SetUserProperty(""Suppress OrdPreSetField"",""Y"");
		SetUserProperty(""SuppressWrite"",""Y"");
		SetFieldValue(""Quantity Received"",ToInteger(GetFieldValue(""Quantity Received"")) + miRecdItemCount);
		var test9 = (ToInteger(GetFieldValue(""Quantity Received""))+miRecdItemCount) ;
		if(ToInteger(GetFieldValue(""Quantity Ordered"")) <= ToInteger(GetFieldValue(""Quantity Received""))) 
		{
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""FULFILLED""));
			SetFieldValue(""Fulfilled Date"",dtCurrentDate);
			WriteRecord();
//			bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED""));
//			bcOrderUpd.WriteRecord();
		}
		else if(ToInteger(GetFieldValue(""Quantity Received"")) != 0) 
		{
//			bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
//			bcOrderUpd.WriteRecord();
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
			WriteRecord();
			
		}
		var mbIsRecord = FirstRecord();
		//MS 24-04-2006while(mbIsRecord) {
		if(mbIsRecord) {
			var mstrSrchExpr = ""[Status] <> '""+TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""FULFILLED"")+""'"";
			ClearToQuery();
			SetSearchExpr(mstrSrchExpr)
			ExecuteQuery();
			if(FirstRecord()) {
				bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
				bcOrderUpd.WriteRecord();
			
			}
			else {
				bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED""));
				bcOrderUpd.SetFieldValue(""Closed Date"",dtCurrentDate);
				bcOrderUpd.WriteRecord();
			}
		}
	}
	} catch(e){
		if(strErrVal == """") 
		{
			strErrVal = e.errText;
		} 
		
		throw (e);
		
	} finally {
	    bcSysPref           = null;
		boSysPref           = null;
		bcOrder				= null;
	    bcOrderUpd			= null;
	    bcOrderLine			= null;
	    bcOrderLineNumbers  = null;
	    bcNumberConcat		= null;
	    bcNumberMaster      = null;
	    bcOrderLineRecdInfo = null;
	    bcNumPaperItem		= null;
		boOrder 			= null;
		bcOrderLineQuery	= null;
		boOrderQuery		= null;
		bsRMSBlk            = null;
	    psBlkInputs			= null;
	    psBlkOutputs		= null;
	}
	
	return(strErrVal);*/
//above 1.1
}
"/**************************************************************************************
* Name          : SIM Order Business Service UpdateNumbers Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Siebel ES SCR1, Objects Destroyed
**************************************************************************************/

function UpdateNumbersNew(&marrOrdCnct,&marrInputParams,&marrSIMIMSI,&mpsPprId,&marrNumTypes,msFileName)
{
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var boNMEnquiry			= TheApplication().GetBusObject(""RMS NM Number Enquiry"");     // Changed 06:06:2005
//	var bcNumberMaster      = boOrder.GetBusComp(""RMS SIM Order NM Number Master"");
	var bcNumberMaster      = boNMEnquiry.GetBusComp(""RMS NM Number Enquiry For Update""); // Changed 06:06:2005
	var boSIMNumber         = TheApplication().GetBusObject(""RMS SIM Number"");     // Changed 06:06:2005
	var bcNumPaperItem      = boSIMNumber.GetBusComp(""RMS SIM Number Paper Item""); // Changed 06:06:2005
//	var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Number Paper Item""); 
//	var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Order Paper Item"");
	var bcOrder				= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrderUpd			= boOrder.GetBusComp(""RMS SIM Order Update"");
	var bcOrderLine			= boOrder.GetBusComp(""RMS SIM Order Line Update"");
	var bcOrderLineNumbers  = boOrder.GetBusComp(""RMS SIM Order Line Num Info"");
	var bcNumberConcat		= boOrder.GetBusComp(""RMS SIM Order Association Number Type Display"");
	var bcOrderLineRecdInfo = boOrder.GetBusComp(""RMS SIM Order Line Recd Info"");
	var boOrderQuery		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	= boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");
	var boSysPref			= TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref			= boSysPref.GetBusComp(""System Preferences"");
	var bsRMSBlk            = TheApplication().GetService(""RMS RMS Block Calc"");
	var psBlkInputs			= TheApplication().NewPropertySet();
	var psBlkOutputs		= TheApplication().NewPropertySet();
	var miRecdItemCount 	= 0; 
	var mbIsRecord 			= false;
	var strErrVal			= """";
	var strSIMCrdId			= """";
	var strSIMCrdPrice = """";
	var strOrderId			= """";
	var blnsIsPaperItem = false; //KT 30-04-06
	var blnBlkUpdate		= false;
	var dtCurrentDate ;
	
	try
	{
	
	with(bcSysPref) {
		ActivateField(""Value"");
		ClearToQuery();
		SetSearchSpec(""Name"",""RMS_BLOCK_UPDATION"");
		SetSearchSpec(""Value"",""Y"");
		ExecuteQuery(ForwardOnly);
		if(FirstRecord())
			blnBlkUpdate	= true;
	}
	with(bcOrderLineQuery) 
	{
		
		ActivateField(""Order Id"");
		ClearToQuery();
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		//SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		SetSearchSpec(""Order Line Id"",marrNumTypes[4]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strOrderId = GetFieldValue(""Order Id"");
	}

	with(bcOrder) 
	{
		SetViewMode(3);
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ActivateField(""Closed Date"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId);
	//	SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""]); KT 24-04-2006
		SetSearchSpec(""Revision Number"",1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);	
		} 
		dtCurrentDate = GetFieldValue(""Current Date"");
	}
	
	with(bcOrderUpd) 
	{
		SetViewMode(3);
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ActivateField(""Closed Date"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId);
		//SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""])
		SetSearchSpec(""Revision Number"",1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		dtCurrentDate = GetFieldValue(""Current Date"");
	}
	
	with(bcOrderLine) 
	{
		ActivateField(""Status"");
		ActivateField(""Id"");
		ActivateField(""Quantity Received"");
		ActivateField(""Fulfilled Date"");
		ActivateField(""SIM Card Config Id"");	
		ActivateField(""SIM Card Price"");
		ClearToQuery();
		//SetSearchSpec(""SIM Card Config Type"",marrInputParams[""Type""]);
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		//SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
	  	  SetSearchSpec(""Order Line Id"",marrNumTypes[4]);
		//SetSearchSpec(""Profile"",marrInputParams[""Profile""]);  KT 24-04-2006
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]); 
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strSIMCrdId = GetFieldValue(""SIM Card Config Id"");
		strSIMCrdPrice = GetFieldValue(""SIM Card Price"");
	}
	
	var miCnt = 0;
	var miPprCnt = 0;
	
	var msFileId = UpdateFile(""I"","""",msFileName,bcOrderUpd.GetFieldValue(""Id""));

//	Update the Order Line Recieved Info Table	

	with(bcOrderLineRecdInfo) {
	NewRecord(1);
	SetFieldValue(""Input File Info Id"",msFileId);
	SetFieldValue(""Order Id"",bcOrder.GetFieldValue(""Id""));
	SetFieldValue(""Order Line Id"",bcOrderLine.GetFieldValue(""Id""));
	SetFieldValue(""Quantity Received"",getArrayLength(marrOrdCnct));
	WriteRecord();
	}
	
	for(miCnt =0; miCnt < getArrayLength(marrOrdCnct);miCnt++) 
	   {
		with(bcOrderLineNumbers) 
		{
			ActivateField(""Status"");
			ActivateField(""File Id"");
			ActivateField(""Assoc Start Id"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",marrOrdCnct[miCnt]);
			var test9 = marrOrdCnct[miCnt];
//			SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""WITH SIM SUPPLIER""));
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) continue;
			
			miRecdItemCount++;
			SetFieldValue(""File Id"",msFileId);
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
		//	SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
			WriteRecord();
			
		}
		
		for(miPprCnt = 2;miPprCnt<getArrayLength(marrSIMIMSI[miCnt]);miPprCnt++) 
		{
			with(bcNumPaperItem)
			{
				ActivateField(""Paper Item Value"");
				ClearToQuery();
				SetSearchSpec(""Order Line Number Detail Id"",bcOrderLineNumbers.GetFieldValue(""Id"")); 
				SetSearchSpec(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt+5]));
				var test10 = mpsPprId.GetProperty(marrNumTypes[miPprCnt+5]);
				ExecuteQuery(ForwardOnly);
				blnsIsPaperItem = FirstRecord();
				if(!FirstRecord()) 
				{
					NewRecord(1);	
					SetFieldValue(""Order Line Number Detail Id"",bcOrderLineNumbers.GetFieldValue(""Id""));
					SetFieldValue(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt+5]));
				}
				SetFieldValue(""Paper Item Value"",marrSIMIMSI[miCnt][miPprCnt]);
				WriteRecord();				
			}
		}

		with(bcNumberConcat) 
		{
				ActivateField(""Status"");
				ActivateField(""Associated Number"");
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",bcOrderLineNumbers.GetFieldValue(""Assoc Start Id""));
				//ExecuteQuery(1);
				ExecuteQuery(ForwardOnly);
				mbIsRecord = FirstRecord();
				while(mbIsRecord) {
					SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
				//	SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"")); KT 26-04-06
					WriteRecord();
					mbIsRecord = NextRecord();
				}
				
		}	
		
		with(bcNumberMaster) 
		{
			ActivateField(""SIM Card Id"");
			ActivateField(""Price"");			
			ActivateField(""Status"");
			ActivateField(""Block Id"");
			ActivateField(""Type Identifier"");
			ActivateField(""Number String With Checksum"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"", bcOrderLineNumbers.GetFieldValue(""Assoc Start Id""));
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) 
			{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD016"",marrInputParams[""P0_ref_number""]);
				TheApplication().RaiseErrorText(strErrVal);
			}
			
			while(mbIsRecord) 
			{
				if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
				//SetFieldValue(""Number String With Checksum"",marrSIMIMSI[miCnt][1]);
				SetFieldValue(""Number String With Checksum"",marrSIMIMSI[miCnt][0]);  //  change  as per  new  file format
				SetFieldValue(""SIM Card Id"",strSIMCrdId);			
				SetFieldValue(""Price"",strSIMCrdPrice);			
				SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
				//SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"")); KT 26-04-06
				WriteRecord();
				
				if(blnBlkUpdate) {
					with(psBlkInputs)
					{
						SetProperty(""Object Id"",GetFieldValue(""Block Id""));
						SetProperty(""From Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""WITH SIM SUPPLIER""));
						SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
					//	SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
					}
					
					bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
				}
				mbIsRecord = NextRecord();
			}
		}
		
		
	}

//	Update the Order Line Table for Quantity Recieved and Status fields

	with(bcOrderLine)
	{
		SetUserProperty(""Suppress OrdPreSetField"",""Y"");
		SetUserProperty(""SuppressWrite"",""Y"");
		SetFieldValue(""Quantity Received"",ToInteger(GetFieldValue(""Quantity Received"")) + miRecdItemCount);
		var test9 = (ToInteger(GetFieldValue(""Quantity Received""))+miRecdItemCount) ;
		if(ToInteger(GetFieldValue(""Quantity Ordered"")) <= ToInteger(GetFieldValue(""Quantity Received""))) 
		{
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""FULFILLED""));
			SetFieldValue(""Fulfilled Date"",dtCurrentDate);
			WriteRecord();
//			bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED""));
//			bcOrderUpd.WriteRecord();
		}
		else if(ToInteger(GetFieldValue(""Quantity Received"")) != 0) 
		{
//			bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
//			bcOrderUpd.WriteRecord();
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
			WriteRecord();
			
		}
		var mbIsRecord = FirstRecord();
		//MS 24-04-2006while(mbIsRecord) {
		if(mbIsRecord) {
			var mstrSrchExpr = ""[Status] <> '""+TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""FULFILLED"")+""'"";
			ClearToQuery();
			SetSearchExpr(mstrSrchExpr)
			ExecuteQuery();
			if(FirstRecord()) {
				bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
				bcOrderUpd.WriteRecord();
			
			}
			else {
				bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED""));
				bcOrderUpd.SetFieldValue(""Closed Date"",dtCurrentDate);
				bcOrderUpd.WriteRecord();
			}
		}
	}
	} catch(e){
		if(strErrVal == """") 
		{
			strErrVal = e.errText;
		} 
		
		throw (e);
		
	} finally {

		bcOrder				= null;
	    bcOrderUpd			= null;
	    bcOrderLine			= null;
	    bcOrderLineNumbers  = null;
	    bcNumberConcat		= null;
	    bcNumberMaster      = null;
	    bcOrderLineRecdInfo = null;
	    bcNumPaperItem		= null;
		bcOrderLineQuery	= null;
		boOrder 			= null;
		boOrderQuery		= null;
//below 1.1 
		bcSysPref           = null;
		boNMEnquiry         = null;
		boSIMNumber         = null;
		boSysPref           = null;
//above 1.1
		bsRMSBlk            = null;
	    psBlkInputs			= null;
	    psBlkOutputs		= null;
	}
	return(strErrVal);
}
"/**************************************************************************************
* Name          : SIM Order Business Service ValidateOrder Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 27/07/2005    1.1         MBT             Updated (Changes for    27/07/2005		  *	
      	                                     mulitples IMSI in same file)   
* 20060710      1.2         Kalyana          Commented   entire  function  for future  use    
**************************************************************************************/

function ValidateOrder(&marrInputParams,&marrSIMIMSI,&marrNumTypes,&marrOrdCnct,&mpsPprId,&marrError)
{
//below 1.2
/*	
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderHdr 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrderLine			= boOrder.GetBusComp(""RMS SIM Order Line"");
	var bcOrderLineNum		= boOrder.GetBusComp(""RMS SIM Order Line Num Info"");
	
	var boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumEnqUpdate	= boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update"");
	
	var boOrderQuery		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	= boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");

//  var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Number Paper Item"");
		
	var mbIsRecord 			= false;
	var mpsSIM 				= TheApplication().NewPropertySet();
	var mpsIMSI 			= TheApplication().NewPropertySet();
	
	var miCnt 				= 0;
	var msNumber 			= """";
	var miErrCnt			= 0;
	var mpsPprItem 			= TheApplication().NewPropertySet();
	var strStatus 			= """";
	var strErrVal			= """";
	var psError 			= TheApplication().NewPropertySet();
	var marrNumIMSI			= new Array();
//  var marrOrdCnct = new Array();
	var strOrderId			= """";
	var strNumHandle		= """";
	var intCheckSumLen		= 1;
	var mbError 			= false;
	var msSIM="""";
	
	try {

	with(bcOrderLineQuery) 
	{

		ActivateField(""Order Id"");
		ClearToQuery();
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strOrderId = GetFieldValue(""Order Id"");
	}

	//Query the database with the Order Number				
	with(bcOrderHdr) {
		SetViewMode(AllView);
		ActivateField(""Id"");
		ActivateField(""Status"");
		ActivateField(""Order Number"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId) 
		//SetSearchSpec(""Revision Number"",1);
  	    //SetSearchSpec(""Profile"",marrInputParams[""Profile""]); 
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]);
		
		ExecuteQuery();
	}
//  If query is returning no records then set the Comments property and exit
	if(!bcOrderHdr.FirstRecord()) 
	{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
		marrError[miErrCnt++] = strErrVal;
		TheApplication().RaiseErrorText(strErrVal);
	} 
	else if(bcOrderHdr.GetFieldValue(""Status"") == TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED"")) 
	{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD017"",bcOrderHdr.GetFieldValue(""Order Number""));
		marrError[miErrCnt++] =  strErrVal;
		TheApplication().RaiseErrorText(strErrVal);
	} 
	else 
	{
		strStatus = bcOrderHdr.GetFieldValue(""Status"");
	}
	
//   Set the Status parameter

	with(bcOrderLine) {
		ActivateField(""Id"");
		ClearToQuery();
		var temp2 = marrInputParams[""Profile""];
		var temp4 =	marrInputParams[""Transport_Key""];
		//SetSearchSpec(""SIM Card Config Type"",marrInputParams[""Type""]);
		//SetSearchSpec(""Profile"",marrInputParams[""Profile""]);
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]);
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
	}
	
	if(!mbIsRecord) {
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
		marrError[miErrCnt++] =  strErrVal;
		TheApplication().RaiseErrorText(strErrVal);
	}
	
	var bcPaperItem	= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");	
	
//Query the Paper Item table corresponding to the Order Id

	with(bcPaperItem) {
		SetViewMode(AllView);
		ActivateField(""Paper Item Id"");
		ActivateField(""Length"");
		ActivateField(""Paper Item Name"");
		
		ClearToQuery();
		ExecuteQuery(1);
		mbIsRecord = FirstRecord();
		//if(!mbIsRecord) return """";
	}
	
	while(mbIsRecord) 
	{
		mpsPprItem.SetProperty(bcPaperItem.GetFieldValue(""Paper Item Name""),bcPaperItem.GetFieldValue(""Length""));
		mpsPprId.SetProperty(bcPaperItem.GetFieldValue(""Paper Item Name""),bcPaperItem.GetFieldValue(""Paper Item Id""));
		mbIsRecord = bcPaperItem.NextRecord();
	}
	
	with(bcOrderLineNum) 
	{
		//ActivateField(""Assoc Start Id"");
		ActivateField(""Id"");
		ActivateField(""Numbers"");
		ActivateField(""Concatenated Number Types"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Status"");
		ClearToQuery();
		ExecuteQuery();
		mbIsRecord = FirstRecord();
		
	}

/*	with(RMS SIM Number Paper Item) {
		ActivateField(); } */

//above 1.2
// below 1.2
/*	
var marrCnctNum = new Array();

	while(mbIsRecord) {
		msNumber = bcOrderLineNum.GetFieldValue(""Numbers"");
		marrCnctNum = msNumber.split("" / "");
		
		if(getArrayLength(marrCnctNum)>1) 
		{
//		Checking whether the input numbers are having delimiters. if yes then remove the delimiters
			if(isNaN(ToNumber(marrCnctNum[0])))
				mpsSIM.SetProperty(CleanNumber(marrCnctNum[0]),bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			else {
								
				mpsSIM.SetProperty(marrCnctNum[0],ToString(bcOrderLineNum.GetFieldValue(""Assoc Start Id"")));
			
			}
//		Checking whether the input numbers are having delimiters. if yes then remove the delimiters
			if(isNaN(ToNumber(marrCnctNum[1])))
				mpsIMSI.SetProperty(CleanNumber(marrCnctNum[1]),bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			else
				mpsIMSI.SetProperty(marrCnctNum[1],bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			
		}
		mbIsRecord = bcOrderLineNum.NextRecord();
	}
	var temp = marrInputParams[""IMSI""];
	marrNumIMSI = marrInputParams[""IMSI""].split("" / "");
	var msSIMLoc = getArrayLength(marrNumIMSI);
	//checking for SIM and IMSI numbers retrieved
	for(miCnt =0;miCnt < getArrayLength(marrSIMIMSI);miCnt++) 
	{
		marrError[miCnt] = """";
		var msSIM = marrSIMIMSI[miCnt][msSIMLoc];
		var msSIMNoCS = msSIM.substring(0,msSIM.length-1);

		
// Checking the SIM,Checksum,IMSI & SIM/IMSI Association

	
/*		if(!mpsSIM.PropertyExists(msSIMNoCS))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD010"") + msSIM;
			mbError = true;
			continue;
		}*/
		
//		var temp  = msSIM.substring(msSIM.length-1);
//		var temp1 =	ChecksumNumber(msSIMNoCS);
		
/*		if(msSIM.substring(msSIM.length-1) != ChecksumNumber(msSIMNoCS))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD011"") + msSIM;
			mbError = true;
			continue;		
		}
		if(!mpsIMSI.PropertyExists(marrSIMIMSI[miCnt][0]))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD012"") + marrSIMIMSI[miCnt][0];
			mbError = true;
			continue;
		
		}
		if(mpsSIM.GetProperty(msSIMNoCS) != (mpsIMSI.GetProperty(marrSIMIMSI[miCnt][0])))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][0];
			mbError = true;
			continue;		
		}*/
		

            //Check whether the numbers exists in RMS system
//above 1.2
//below 1.2
/*
		    with(bcNumEnqUpdate) {
			//ActivateField(""Number String With Checksum"");
			ActivateField(""Number String"");
			ActivateField(""Status"");
			for(var i = 0;i<getArrayLength(marrSIMIMSI[miCnt]);i++) {
					if(msSIMLoc >= i) {
					strNumHandle = marrSIMIMSI[miCnt][i];
					ClearToQuery();
					//SetSearchSpec(""Number String With Checksum"",marrSIMIMSI[miCnt][i]);
					if(msSIMLoc == i)
						SetSearchSpec(""Number String"",strNumHandle.substring(0,(strNumHandle.length - intCheckSumLen)));
					else 
						SetSearchSpec(""Number String"",strNumHandle);
					ExecuteQuery();
					if(!FirstRecord()) {
						marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][i];
						mbError = true;
						continue;
							}
				//Checking  whether some or all  number's are already received.
				else
				{
				if(bcNumEnqUpdate.GetFieldValue(""Status"")!= TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""WITH SIM SUPPLIER""))
				{
				marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder003"",marrSIMIMSI[miCnt][0]);
				mbError = true;
				}
				}	
				}
			    }
		        }	
			
/*			ClearToQuery();
			SetSearchSpec(""Number String With Checksum"",msSIM);
			ExecuteQuery();
			
			if(FirstRecord()) {
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",GetFieldValue(""Id""));
				ExecuteQuery();
				var mblnIsRecord = FirstRecord();
				var blnChkNumExists = false;
				while(mblnIsRecord) {
					for(var i = 0;i<getArrayLength(marrSIMIMSI[miCnt]);i++) {
						if(marrSIMIMSI[miCnt][i] == GetFieldValue(""Number String With Checksum"")) {
							blnChkNumExists = true;
							break;
						}
					}
					if(blnChkNumExists = false) {
						marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][i];
						mbError = true;
						continue;
					}
					mblnIsRecord = NextRecord();
				}
			}
		}*/

	
		//marrOrdCnct[miCnt] = mpsSIM.GetProperty(msSIM);
//abobe 1.2
//below 1.2
/*
		marrOrdCnct[miCnt] = mpsSIM.GetProperty(msSIMNoCS);
		
	}
			
	   		//Checking   whether all  Paper Item Values  are retrieved or not  KT 30-05-06
			for(var i=0;i<getArrayLength(marrOrdCnct);i++)
	   		var temp = marrOrdCnct[i];
	   		var miNumCnt = 0;
	  		for(miCnt =0;miCnt < getArrayLength(marrSIMIMSI);miCnt++) {
		 	var SImNum = marrSIMIMSI[miCnt][0];
			//if(getArrayLength(marrSIMIMSI[miCnt])< (getArrayLength(marrNumTypes)+2))
			if(getArrayLength(marrSIMIMSI[miCnt])< (getArrayLength(marrNumTypes)))
			{
			//var arrLengthDiff = (getArrayLength(marrNumTypes)+2)-getArrayLength(marrSIMIMSI[miCnt]);
			//var arrLengthDiff = (getArrayLength(marrNumTypes))-getArrayLength(marrSIMIMSI[miCnt]);
			var PprItemName ="""";
			/*if(arrLengthDiff > 1)
			{*/
//abobe 1.2
//below 1.2	
/*		
			for(var j=getArrayLength(marrSIMIMSI[miCnt]);j<getArrayLength(marrNumTypes);j++)
			{
			//var PprItemName ="""";
			//PprItemName = marrNumTypes[j-2]+ ""/""+marrNumTypes[j-1];
			if(PprItemName== """")
			{
            PprItemName= marrNumTypes[j];
			}
			else
			{
			PprItemName=PprItemName+"",""+marrNumTypes[j];
			}
			}
			marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder002"",PprItemName,SImNum)+ "":"";	
			mbError = true;
			}
			/*else
			{
			PprItemName = marrNumTypes[getArrayLength(marrNumTypes)-1];
			marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder002"",PprItemName,SImNum)+ "":"";
			mbError = true;
			}
			}*/
			//Checking for the length of paper items retrieved
//above 1.2 
//below 1.2
/*
			for(miNumCnt = 2;miNumCnt < getArrayLength(marrSIMIMSI[miCnt]);miNumCnt++) {
			msNumber = marrSIMIMSI[miCnt][miNumCnt];
			var testlength = mpsPprItem.GetProperty(marrNumTypes[miNumCnt-2]);
			var numlength = msNumber.length;
			//if(msNumber.length != mpsPprItem.GetProperty(marrNumTypes[miNumCnt-2])){// changed as per new file format
				if(msNumber.length != mpsPprItem.GetProperty(marrNumTypes[miNumCnt])){ 
				marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSORD018"",marrNumTypes[miNumCnt],msNumber,SImNum) + "":"";	
				mbError = true;
				continue;
			} 
		    }
		    }
	        } catch(e) {
		    mbError = true;
		    if(strErrVal != """") {
			throw (e);
		    } else {
			var temp = e.errText;
			marrError[miErrCnt++] =  e.errText;	
		    }
		
	        } finally {
		    bcOrderLineNum	= null;
		    bcOrderLine		= null;
		    bcOrderHdr		= null;
		    boOrder			= null;
		    mpsSIM			= null;
		    mpsIMSI			= null;
		    mpsPprItem		= null;
		    psError			= null;
	        }
	        //return bcOrderHdr.GetFieldValue(""Id"");
	        return (!mbError);
*/
//above 1.2
            }
"/**************************************************************************************
* Name          : SIM Order Business Service ValidateOrder Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 27/07/2005    1.1         MBT             Updated (Changes for    27/07/2005		  *	
*											mulitples IMSI in same file)   

* 20060710      1.2         Kalyana         Siebel ES SCR1, Objects Destroyed  
* 20061202      1.3         Kalyana         Added validation for invalid batch             
**************************************************************************************/

function ValidateOrderNew(&marrInputParams,&marrSIMIMSI,&marrNumTypes,&marrOrdCnct,&mpsPprId,&marrError)
{
	
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderHdr 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrderLine			= boOrder.GetBusComp(""RMS SIM Order Line"");
	var bcOrderLineNum		= boOrder.GetBusComp(""RMS SIM Order Line Num Info"");
	var boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumEnqUpdate	= boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update"");
	var boOrderQuery		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	= boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");
//  var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Number Paper Item"");
	var mbIsRecord 			= false;
	var mpsSIM 				= TheApplication().NewPropertySet();
	var mpsIMSI 			= TheApplication().NewPropertySet();
	var miCnt 				= 0;
	var msNumber 			= """";
	var miErrCnt			= 0;
	var mpsPprItem 			= TheApplication().NewPropertySet();
	var strStatus 			= """";
	var strErrVal			= """";
	var psError 			= TheApplication().NewPropertySet();
	var marrNumIMSI			= new Array();
//  var marrOrdCnct = new Array();
	var strOrderId			= """";
	var strNumHandle		= """";
	var intCheckSumLen		= 1;
	var mbError 			= false;
	var msSIM="""";
//below  1.2	
	var bcPaperItem	= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");
//above  1.2
	try {

	with(bcOrderLineQuery) 
	{

		ActivateField(""Order Id"");
		ClearToQuery();
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		//SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		SetSearchSpec(""Order Line Id"",marrNumTypes[4]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder010"",marrNumTypes[4]);
			marrError[miErrCnt++] = strErrVal;
			return (mbError);
			//TheApplication().RaiseErrorText(strErrVal);
		}
		strOrderId = GetFieldValue(""Order Id"");
	}

	//Query the database with the Order Number				
	with(bcOrderHdr) {
		SetViewMode(AllView);
		ActivateField(""Id"");
		ActivateField(""Status"");
		ActivateField(""Order Number"");
		ActivateField(""PO Requisition Ref Number"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId) 
		//SetSearchSpec(""Revision Number"",1);
  	    //SetSearchSpec(""Profile"",marrInputParams[""Profile""]); 
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]);
		//ExecuteQuery();
		ExecuteQuery(ForwardOnly);
	}
//  If query is returning no records then set the Comments property and exit
	if(!bcOrderHdr.FirstRecord()) 
	{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",strOrderId);
		marrError[miErrCnt++] = strErrVal;
		return (mbError);
		//TheApplication().RaiseErrorText(strErrVal);
	} 
	else if(bcOrderHdr.GetFieldValue(""Status"") == TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED"")) 
	{
		//strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD017"",bcOrderHdr.GetFieldValue(""Order Number""));
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder011"",bcOrderHdr.GetFieldValue(""Order Number""));
		marrError[miErrCnt++] =  strErrVal;
		return (mbError);
		//TheApplication().RaiseErrorText(strErrVal);
	} 
	else if(bcOrderHdr.GetFieldValue(""PO Requisition Ref Number"") != marrNumTypes[1])
	{
	strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder008"",marrNumTypes[1],bcOrderHdr.GetFieldValue(""Order Number""));
	marrError[miErrCnt++] =  strErrVal;
	return (mbError);
	}
	else 
	{
		strStatus = bcOrderHdr.GetFieldValue(""Status"");
	}
	
//   Set the Status parameter

	with(bcOrderLine) {
		ActivateField(""Id"");
		ClearToQuery();
		//var temp2 = marrInputParams[""Profile""];
		//var temp4 =	marrInputParams[""Transport_Key""];
		//SetSearchSpec(""SIM Card Config Type"",marrInputParams[""Type""]);
		//SetSearchSpec(""Profile"",marrInputParams[""Profile""]);
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]);
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		//SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		SetSearchSpec(""Order Line Id"",marrNumTypes[4]);//KT 15-06-06   for  new read
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
	}
	
	if(!mbIsRecord) {
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder010"",marrNumTypes[4]);
			marrError[miErrCnt++] = strErrVal;
			return (mbError);
	}
//below 1.2	
	//var bcPaperItem	= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");	
//above 1.2 
//Query the Paper Item table corresponding to the Order Id

	with(bcPaperItem) {
		SetViewMode(AllView);
		ActivateField(""Paper Item Id"");
		ActivateField(""Length"");
		ActivateField(""Paper Item Name"");
		ClearToQuery();
		//ExecuteQuery(1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		//if(!mbIsRecord) return """";
                       }
	
	while(mbIsRecord) 
	{
		mpsPprItem.SetProperty(bcPaperItem.GetFieldValue(""Paper Item Name""),bcPaperItem.GetFieldValue(""Length""));
		mpsPprId.SetProperty(bcPaperItem.GetFieldValue(""Paper Item Name""),bcPaperItem.GetFieldValue(""Paper Item Id""));
		mbIsRecord = bcPaperItem.NextRecord();
	}
	
	with(bcOrderLineNum) 
	{
		//ActivateField(""Assoc Start Id"");
		ActivateField(""Id"");
		ActivateField(""Numbers"");
		ActivateField(""Concatenated Number Types"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Status"");
		ClearToQuery();
		//ExecuteQuery();
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		
	}

/*	with(RMS SIM Number Paper Item) {
		ActivateField(); } */
	var marrCnctNum = new Array();

	while(mbIsRecord) {
		msNumber = bcOrderLineNum.GetFieldValue(""Numbers"");
		marrCnctNum = msNumber.split("" / "");
		
		if(getArrayLength(marrCnctNum)>1) 
		{
//		Checking whether the input numbers are having delimiters. if yes then remove the delimiters
			if(isNaN(ToNumber(marrCnctNum[0])))
				mpsSIM.SetProperty(CleanNumber(marrCnctNum[0]),bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			else {
								
				mpsSIM.SetProperty(marrCnctNum[0],ToString(bcOrderLineNum.GetFieldValue(""Assoc Start Id"")));
			
			}
//		Checking whether the input numbers are having delimiters. if yes then remove the delimiters
			if(isNaN(ToNumber(marrCnctNum[1])))
				mpsIMSI.SetProperty(CleanNumber(marrCnctNum[1]),bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			else
				mpsIMSI.SetProperty(marrCnctNum[1],bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			
		}
		mbIsRecord = bcOrderLineNum.NextRecord();
	}
	//var temp = marrInputParams[""IMSI""];
	//marrNumIMSI = marrInputParams[""IMSI""].split("" / "");
	marrNumIMSI[0] = marrSIMIMSI[0][1];// change
	var msSIMLoc = getArrayLength(marrNumIMSI);
	//checking for SIM and IMSI numbers retrieved
	for(miCnt =0;miCnt < getArrayLength(marrSIMIMSI);miCnt++) 
	{
		marrError[miCnt] = """";
		//var msSIM = marrSIMIMSI[miCnt][msSIMLoc];
		var msSIM = marrSIMIMSI[miCnt][0];
		var msSIMNoCS = msSIM.substring(0,msSIM.length-1);
		
		
// Checking the SIM,Checksum,IMSI & SIM/IMSI Association

	//below 1.3
		if(!mpsSIM.PropertyExists(msSIMNoCS))
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder012"",msSIMNoCS,marrNumTypes[4]);
			marrError[miErrCnt++] = strErrVal;
			mbError = true;
	    }
	//above 1.3	
//		var temp  = msSIM.substring(msSIM.length-1);
//		var temp1 =	ChecksumNumber(msSIMNoCS);
		
/*		if(msSIM.substring(msSIM.length-1) != ChecksumNumber(msSIMNoCS))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD011"") + msSIM;
			mbError = true;
			continue;		
		}
		if(!mpsIMSI.PropertyExists(marrSIMIMSI[miCnt][0]))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD012"") + marrSIMIMSI[miCnt][0];
			mbError = true;
			continue;
		
		}
		if(mpsSIM.GetProperty(msSIMNoCS) != (mpsIMSI.GetProperty(marrSIMIMSI[miCnt][0])))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][0];
			mbError = true;
			continue;		
		}*/
		

            //Check whether the numbers exists in RMS system
		    with(bcNumEnqUpdate) {
			//ActivateField(""Number String With Checksum"");
			ActivateField(""Number String"");
			ActivateField(""Status"");
			for(var i = 0;i<getArrayLength(marrSIMIMSI[miCnt]);i++) {
					if(msSIMLoc >= i) {
					strNumHandle = marrSIMIMSI[miCnt][i];
					//strNumHandle = marrSIMIMSI[miCnt][0];
					ClearToQuery();
					//SetSearchSpec(""Number String With Checksum"",marrSIMIMSI[miCnt][i]);
					if(msSIMLoc == i)
						//SetSearchSpec(""Number String"",strNumHandle.substring(0,(strNumHandle.length - intCheckSumLen)));
						SetSearchSpec(""Number String"",strNumHandle);  // Change for New  read 
						else 
						SetSearchSpec(""Number String"",strNumHandle.substring(0,(strNumHandle.length - intCheckSumLen)));
						//SetSearchSpec(""Number String"",strNumHandle);
					//ExecuteQuery();
					ExecuteQuery(ForwardOnly);
					if(!FirstRecord()) {
						marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD016"",marrSIMIMSI[miCnt][i]);
						mbError = true;
							} //End of if(!FirstRecord())
				//Checking  whether some or all  number's are already received.
				else
				{
				if(bcNumEnqUpdate.GetFieldValue(""Status"")!= TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""WITH SIM SUPPLIER""))
				{
				marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder003"",marrSIMIMSI[miCnt][0]);
				mbError = true;
				}
				}	
				}
			    }
		        }	
			
/*			ClearToQuery();
			SetSearchSpec(""Number String With Checksum"",msSIM);
			ExecuteQuery();
			
			if(FirstRecord()) {
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",GetFieldValue(""Id""));
				ExecuteQuery();
				var mblnIsRecord = FirstRecord();
				var blnChkNumExists = false;
				while(mblnIsRecord) {
					for(var i = 0;i<getArrayLength(marrSIMIMSI[miCnt]);i++) {
						if(marrSIMIMSI[miCnt][i] == GetFieldValue(""Number String With Checksum"")) {
							blnChkNumExists = true;
							break;
						}
					}
					if(blnChkNumExists = false) {
						marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][i];
						mbError = true;
						continue;
					}
					mblnIsRecord = NextRecord();
				}
			}
		}*/

	
		//marrOrdCnct[miCnt] = mpsSIM.GetProperty(msSIM);
		marrOrdCnct[miCnt] = mpsSIM.GetProperty(msSIMNoCS);
		var test786 = getArrayLength(marrOrdCnct);
		
	}
			
	   		//Checking   whether all  Paper Item Values  are retrieved or not  KT 30-05-06
			for(var i=0;i<getArrayLength(marrOrdCnct);i++)
			{
	   		var temp = marrOrdCnct[i];
	   		var miNumCnt = 0;
	  		for(miCnt =0;miCnt < getArrayLength(marrSIMIMSI);miCnt++) {
			var SImNum = marrSIMIMSI[miCnt][0];
			//if(getArrayLength(marrSIMIMSI[miCnt])< (getArrayLength(marrNumTypes)+2))
			if(getArrayLength(marrSIMIMSI[miCnt])< (getArrayLength(marrNumTypes)-8))//KT 23-06-06
			{
			//var arrLengthDiff = (getArrayLength(marrNumTypes)+2)-getArrayLength(marrSIMIMSI[miCnt]);
			//var arrLengthDiff = (getArrayLength(marrNumTypes))-getArrayLength(marrSIMIMSI[miCnt]);
			var PprItemName ="""";
			/*if(arrLengthDiff > 1)
			{*/
			for(var j=(getArrayLength(marrSIMIMSI[miCnt]))+5;(j<getArrayLength(marrNumTypes)-3);j++)//KT 23-06-06
			{
			//var PprItemName ="""";
			//PprItemName = marrNumTypes[j-2]+ ""/""+marrNumTypes[j-1];
			if(PprItemName== """")
			{
            PprItemName= marrNumTypes[j];
			}
			else
			{
			PprItemName=PprItemName+"",""+marrNumTypes[j];
			}
			marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder002"",PprItemName,SImNum)+ "":"";	
			mbError = true;
			}
			}
			/*else
			{
			PprItemName = marrNumTypes[getArrayLength(marrNumTypes)-1];
			marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder002"",PprItemName,SImNum)+ "":"";
			mbError = true;
			}
			}*/
			//Checking for the length of paper items retrieved
			for(miNumCnt = 2;miNumCnt < getArrayLength(marrSIMIMSI[miCnt]);miNumCnt++) {
			msNumber = marrSIMIMSI[miCnt][miNumCnt];
			//if(msNumber.length != mpsPprItem.GetProperty(marrNumTypes[miNumCnt-2])){// changed as per new file format
				if(msNumber.length != mpsPprItem.GetProperty(marrNumTypes[miNumCnt+5]))
				{ 
				marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSORD018"",marrNumTypes[miNumCnt+5],msNumber,SImNum) + "":"";	
				mbError = true;
				continue;
				} 
		    }
		    }
	        } 
			}catch(e) {
		    mbError = true;
		    if(strErrVal != """") {
			throw (e);
		    } else {
			marrError[miErrCnt++] =  e.errText;	
		    }
		
	        } finally {
		    bcOrderLineNum	  = null;
		    bcOrderLine		  = null;
		    bcOrderHdr		  = null;
//below 1.2
		    bcNumEnqUpdate   = null;
			bcOrderLineQuery = null;
			bcPaperItem      = null;
			boNumEnq         = null;
			boOrderQuery     = null;
//above 1.2
			boOrder			 = null;
		    mpsSIM			 = null;
		    mpsIMSI			 = null;
		    mpsPprItem		 = null;
		    psError		  	 = null;
	        }
	        //return bcOrderHdr.GetFieldValue(""Id"");
	        return (!mbError);
            }
"/*----------------------------------------------------------------------
Name                : [EECC BS IF COMMON], [WriteToFile]
Created By          : Prasad Bodas
Description         : Function to write plain text to debug log file
Input Parameters    : String to be written to file
Output Parameters   : none
-----------------------------------------------------------------------
Change History
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
20031225       | 1.00 | Prasad | Creation
---------------+------+--------+----------------------------------------------
*/
function WriteToFile(msgstr,msFileSuffix){
	var msFileName = ""debug_BS_IF_COMMON"" + msFileSuffix + "".txt"";
	var fptr=Clib.fopen(msFileName,""a"");
	Clib.fputs(msgstr+""\n\r"",fptr);
	Clib.fclose(fptr);
}
"var miFileBatchSize	= ToNumber(TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""BATCH_SIZE""));
var mbFilePos		= false;
var mbBatchLoop		= true;
var msFileStartNum	= """";
var msFileEndNum	= """";
var sArrErrCnt			= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""ERROR_CNT"");
var sPORefId			= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_POREFID"");
var sOrdLineId			= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_ORD_LINEID"");
var sPprItemIndxL		= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_PPRITMIDXL"");
var sPprItemIndxR		= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_PPRITMIDXR"");
var sPprItemIndxCnt		= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_PPRITMIDXCNT"");
var sSIMCfg				= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_SIMCFG"");
var sQty				= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_QTY"");

var iArrErrCnt			= ToNumber(sArrErrCnt.substring(2));
var iPORefId			= ToNumber(sPORefId.substring(2));
var iOrdLineId			= ToNumber(sOrdLineId.substring(2));
var iPprItemIndxL		= ToNumber(sPprItemIndxL.substring(2));
var iPprItemIndxR		= ToNumber(sPprItemIndxR.substring(2));
var iPprItemIndxCnt		= ToNumber(sPprItemIndxCnt.substring(2));
var ipSIMCfg			= ToNumber(sSIMCfg.substring(2));
var ipQty				= ToNumber(sQty.substring(2));"
function BatchNumber()
{
	var bsBatchNum	= TheApplication().GetService(""TECHM BS IF COMMON"");
	var mpsInp		= TheApplication().NewPropertySet();
	var mpsOp		= TheApplication().NewPropertySet();
	
	mpsInp.SetProperty(""Sub Type"",""SEQ"");
	mpsInp.SetProperty(""BC Short Name"",""SIMORD"");
	mpsInp.SetProperty(""Prefix"","""");
	mpsInp.SetProperty(""Length"",""5"");
	mpsInp.SetProperty(""SysPrefPrefix"",""RMS"");
	
	bsBatchNum.InvokeMethod(""Get Next Id"", mpsInp, mpsOp);
	
	
	var msNextId = mpsOp.GetProperty(""Next Id"");

	mpsInp    	= null;
	mpsOp     	= null;
//	assocNextId = null;
	bsBatchNum		= null;
	
	return (msNextId);
	
}
"/**************************************************************************************
* Name          : Call Read  Order Files Function 				  	      *
* Author        : Kalyana											  * 
* Description 	: This function  will read  all the files present in  one specific folder in server								  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 20060610	     1.0  		Kalyana      			                                  *
* 20060710       1.1        Kalyana          Siebel ES SCR1, Objects Destroyed
* 20060804       1.2        Kalyana          Siebel ES SCR 20060803, Objects Destroyed
* 20060823       1.3        Kalyana          Added code to Reset Arrays to import multiple 
											 SIM Order Files
**************************************************************************************/

function CallReadOrderFiles(fileArray,Inputs)
{
    var marrOrdCnct 	= new Array();
	var marrInputParams = new Array();
	var marrError 		= new Array();
	var marrSIMIMSI		= new Array();
	var marrNumberType	= new Array();
	//var fileArray     = new Array();
	var intReturn		= CancelOperation;
	var mpsPprId		= TheApplication().NewPropertySet();
	var msFullFileName  = """";
	var msFileName      = """";
	var strErrVal		= """";
	var mbResult		= false;
	//var Inputs 			= TheApplication().NewPropertySet();
	var Outputs         = TheApplication().NewPropertySet();
    var fileCount=0;
	var count= getArrayLength(fileArray);		
	var boOrderQuery 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	    = boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");
	var strOrderId ="""";
	var strorderLineId ="""";
	var mbIsRecord = false;
	var filePath = Inputs.GetProperty(""DirectoryPath"");
	var filePathOut = Inputs.GetProperty(""DirectoryPathOut"");
	var fileName= """";
	var strComments = """";
	//1.4
	var mpFilePos;
	//1.4
	for(fileCount=0;fileCount<getArrayLength(fileArray);fileCount++){
		
	
           	if((fileArray[fileCount])!= "filelist.lst"")
			{
			while(mbBatchLoop) {
				msFileName = fileArray[fileCount];
				msFullFileName = filePath + fileArray[fileCount];
				mbResult = 	ReadOrderFileNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrError,msFullFileName,marrNumberType,mpFilePos);
				if(mbResult){
			   		strErrVal = UpdateNumbersNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrNumberType,msFullFileName);
				            } //End of if(mbResult)
				 
		//-----------------------------------------------------------------------------
		//enable the following script, if an error file is required to be generated          // 01:07:2005
		//----------------------------------------------------------------------------
			if(strErrVal != """" || getArrayLength(marrError) > 0) 
			//{
			/*	marrError[getArrayLength(marrError)] = strErrVal;
				GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);	
			    	
			}
			else //commented for read tests*/
			      {
					if(marrError[0] != """") {
					GenerateErrorFileNew(strOrderId,marrInputParams,marrError,msFileName,marrNumberType,Inputs,Outputs);
					with(bcOrderLineQuery) 
		             {
					   ActivateField(""Order Id"");
					   ClearToQuery();
				       //SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
				       //SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
			        	SetSearchSpec(""Order Line Id"",marrNumberType[iOrdLineId]);
				        ExecuteQuery(ForwardOnly);
				        mbIsRecord = FirstRecord();
				        /*if(!mbIsRecord) {
					      strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
					      TheApplication().RaiseErrorText(strErrVal);
			            }*/ 
				        if(mbIsRecord)
						{
							strorderLineId = GetFieldValue(""Id"");
							strOrderId = GetFieldValue(""Order Id"");
							var strComments = Outputs.GetProperty(""strErrVal"");
						    UpdateFile(""I"",strComments,msFullFileName,strOrderId,strorderLineId);
					    }// End of if(mbIsRecord)
	             	   }//End of with(bcOrderLineQuery) 
				        //strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD019"");
				        //TheApplication().RaiseErrorText(Outputs.GetProperty(""strErrVal""));
					    /*var strComments = Outputs.GetProperty(""strErrVal"");
						UpdateFile(""I"",strComments,msFullFileName,strOrderId);*/
						mbFilePos = false;
				       } //End of if(marrError[0] != """")
				       } //End of if(strErrVal != """" || getArrayLength(marrError) > 0) 
			           	// below 1.3
						//Code to reset arrays
			            //after last file in filelist is processed no need to reset the arrays.
			            //1.4
			            if(!mbFilePos) {
			       		break;
			       	}else {
			       		marrOrdCnct			= null;
			       		marrInputParams 	= null;
			       		marrError			= null;
			       		marrSIMIMSI	     	= null;
			       		marrOrdCnct 		= new Array();
						marrInputParams 	= new Array();
						marrError 			= new Array();
						marrSIMIMSI	     	= new Array();
			       	}
			       		
			        } // end while
			            //1.4
					    if (fileCount<getArrayLength(fileArray)-1)
							{
							marrError 	     = null;
					        marrSIMIMSI	     = null;
					        marrNumberType	 = null;
						    marrOrdCnct 	 = null;
				  	        marrInputParams  = null;
				  	        msFileStartNum	 = """";
				  	        msFileEndNum     = """";
							marrOrdCnct 	 = new Array();
							marrInputParams  = new Array();
							marrError 		 = new Array();
				            marrSIMIMSI		 = new Array();
					        marrNumberType	 = new Array();
							}
							//above 1.3
					
				      } // End of if((fileArray[fileCount])!= "filelist.lst"")
			         Inputs.SetProperty(""msFileName"",msFileName);
			         FileOperations(Inputs,Outputs);
			         msFullFileName = """";
			       	
			        }//End of for
					//Inputs.SetProperty(""msFileName"","filelist.lst"");
					//FileOperations(Inputs,Outputs);	
				    //below 1.1
					bcOrderLineQuery = null;
					boOrderQuery     = null;
				    //above 1.1
					marrOrdCnct 	 = null;
					marrInputParams  = null;
					marrError 	     = null;
					marrSIMIMSI	     = null;
					marrNumberType	 = null;
					mpsPprId         = null;
				    //below 1.2
				   Outputs           = null;
				   //above 1.2
	} //End of function"
"/**************************************************************************************
* Name          : SIM Order Business Service ValidateOrder Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/
function CheckSequence(bcNumberEnquiry,bcOrdLineNum,&marrSeqChek,cheqSeqArgs) {
	var blnIsRecord;
	var mblnSplit = false;
	var mintRecCnt = 0 ;
	mblnSplit= (cheqSeqArgs.GetProperty(""mblnSplit"") == ""true"")?true:false;//KT 21-042006
	mintRecCnt=ToInteger(cheqSeqArgs.GetProperty(""mintRecCnt""));//KT 21-042006
	with(bcNumberEnquiry) {
		ActivateField(""Type"");
		ActivateField(""Number"");
		ActivateField(""Number String With Checksum"");
		ActivateField(""Generation Level"");
		ClearToQuery();
		SetSearchSpec(""Assoc Start Id"",bcOrdLineNum.GetFieldValue(""SIM Id""));
//		SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI""));
		ExecuteQuery();
		blnIsRecord = FirstRecord();
		if(mintRecCnt != 0) {
			while(blnIsRecord) {
				if(GetFieldValue(""Number"") != (ToInteger(marrSeqChek[GetFieldValue(""Type"")])+1)) 
					 {
					mblnSplit = true;
					break;
				}
				blnIsRecord = NextRecord();
			}
		} else
			mblnSplit = true;

		blnIsRecord = FirstRecord();
		
		while(blnIsRecord){
			marrSeqChek[GetFieldValue(""Type"")] = GetFieldValue(""Number"");
			blnIsRecord = NextRecord();
		}
	}


       cheqSeqArgs.SetProperty(""mblnSplit"",mblnSplit);// KT 21-04-2006
       cheqSeqArgs.SetProperty(""mintRecCnt"",mintRecCnt);//KT 21-04-2006

}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Generate the Checksum number for validation						  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana      Siebel ES SCR1, Objects Destroyed* 
**************************************************************************************/
function ChecksumNumber(msNumber)
{

/*	var miChecksum1 	= 0;
	var miChecksum2 	= 0;
	var miNumCount 		= 0;
	var miLength 	 	= ToInteger(msNumber.length);
	
//  Removing the first 7 digits of the No. which are fixed digits

	for(miNumCount=7;miNumCount<miLength;miNumCount++)
		miChecksum1 = miChecksum1 + ToInteger(msNumber.charAt(miNumCount));
	miChecksum1 = miChecksum1 % 10;
	for(miNumCount=7;miNumCount<miLength; miNumCount=miNumCount+2)
		miChecksum2 = miChecksum2 + ToInteger(msNumber.charAt(miNumCount));
	miChecksum2 = miChecksum2 * 3;
	miChecksum2 = miChecksum2 % 10;
//  msNumber = msNumber + miChecksum1 + miChecksum2;
	return(ToString(miChecksum1) + ToString(miChecksum2)); 
*/

	var boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumEnqUpdate	= boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update"");
//below 1.1 
	var intReturn;
//above 1.1
	with(bcNumEnqUpdate)
	{
		SetViewMode(3);
		ActivateField(""CheckSum1"");
		ActivateField(""Number String without Delimiter"");
		ActivateField(""Number String"");
		ClearToQuery();
	    SetSearchSpec(""Number String"",msNumber);
		ExecuteQuery();
	    var NumStr = bcNumEnqUpdate.GetFieldValue(""Number String"");
	    var NumStr1 = bcNumEnqUpdate.GetFieldValue(""Number String without Delimiter"");
  	
		if (FirstRecord())
		{
		 	var Chksum = bcNumEnqUpdate.GetFieldValue(""CheckSum1"");
//below 1.1		 	
			//return(bcNumEnqUpdate.GetFieldValue(""CheckSum1""));
			intReturn  =  bcNumEnqUpdate.GetFieldValue(""CheckSum1"");
//above 1.1
		}	
		else
//below 1.1
			//return false;
			intReturn  = "false"";
//above 1.1
	}
//below 1.1
       bcNumEnqUpdate = null;
       boNumEnq       = null;
       return(intReturn);
//above 1.1
}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Clean the number from any delimiters								  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/
function CleanNumber(msNumberString) 
{
	var msOutString = """";
	var miCount = 0;
	
	for(miCount = 0; miCount < msNumberString.length;miCount++) 
	{
		if(Clib.isdigit(msNumberString.charAt(miCount)))
			msOutString += msNumberString.charAt(miCount);
	}
	
	return msOutString;
}
function FileOperations(Inputs,Outputs)
{
//FilePath1, FileName1 is the source file
//default operation is delete
//if FilePath2, FileName2 is the specified as destination path and filename then copy there before deleting
	var msPath1 = Inputs.GetProperty(""DirectoryPath"");
	var msName1 = Inputs.GetProperty(""msFileName"");
	var msPath2 = Inputs.GetProperty(""DirectoryPathOut"");
	var msName2 = Inputs.GetProperty(""msFileName"");
	if("""" != (msPath2+msName2)) {//destination specified
		var iRet = Clib.rename(msPath1+msName1,msPath2+msName2);
		if((iRet != 0) && (msName2 != """")) {
			var dDate = new Date();
			Clib.rename(msPath1+msName1,msPath2+msName2+""_""+dDate.getTime());
		}
	} else
		Clib.remove(msPath1+msName1);
	return CancelOperation;
}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Siebel ES SCR1, Objects Destroyed
* 20060712      1.2         Kalyana         Commented  Entire  Code
**************************************************************************************/

function GenerateErrorFile(sOrderId,&marrInputParams,&marrError,msInpFileName,marrNumberType,Inputs,Outputs)
{
//below 1.2
/*
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderHdr 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Paper Item""); 
//	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");
	var mbIsPprItem			= false;  													
	var msPprItem			= """";														
	
	var mfpOutputFile;	
	var miCnt;
	var msErrorFile         = """";
	var msFile              = """";
	var strErrVal           = """";

//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
	with(bcOrderHdr)
	{
    	SetViewMode(AllView);
//		SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Id"", sOrderId);
    	ClearToQuery();
		ExecuteQuery(ForwardOnly);
         {
           with(bcOrdPprItem) 
            {
    		 SetViewMode(AllView);
			 ActivateField(""Paper Item Name"");
			 ClearToQuery();
			 ExecuteQuery();
			 mbIsPprItem = FirstRecord();
			
			while(mbIsPprItem) 
			 {
				if(msPprItem == """")
					msPprItem = bcOrdPprItem.GetFieldValue(""Paper Item Name"");
				else
		     		msPprItem += ""/"" + bcOrdPprItem.GetFieldValue(""Paper Item Name"");
					
				mbIsPprItem = bcOrdPprItem.NextRecord();	
			 }
		}
	}	
}	
//-------------------------------------------------------------------------------------
	try
	{
		var mboSysPref = TheApplication().GetBusObject(""System Preferences"");
		var mbcSysPref = mboSysPref.GetBusComp(""System Preferences"");
		
		with(mbcSysPref) 
		{
			ActivateField(""Value"");
			ClearToQuery();
			SetSearchSpec(""Name"",""RMS_SIMORDER_ERROR_FILEPATH""); //  VIBO_SIM_ERROR_FILEPATH(Dtd: 01:07:2005)
			ExecuteQuery(ForwardOnly);
			if(FirstRecord()) 
			{
				msFile = GetFieldValue(""Value"");
			} 
		}
		
		 //msErrorFile = msInpFileName.substring(0,msInpFileName.lastIndexOf(""\\"")) + ""_ERROR.log"";// for Windows
		//msErrorFile = msInpFileName.substring(msInpFileName.lastIndexOf(""/"")+1)+ ""_ERROR.log"";// for UNIX
		//msFile +=  msErrorFile;
          //msErrorFile = ""test.log"";
		  
		msFile =  msFile+msInpFileName+""_.log"";
	  //msFile = msInpFileName + ""_ERROR.err"";
      //UpdateFile(""O"","""",msErrorFile,marrInputParams[""P0_ref_number""]);
    	strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder004"",msFile);
		mfpOutputFile = Clib.fopen(msFile,""a"");
		
		Clib.fputs(""*********************************************\n"", mfpOutputFile);
		Clib.fputs(""*             HEADER DESCRIPTION        * \n"", mfpOutputFile);
		Clib.fputs(""*********************************************\n"", mfpOutputFile);
		//Clib.fputs(""\n"", mfpOutputFile);
		/*Clib.fputs(""Customer: STC\n""  , mfpOutputFile);
		Clib.fputs(""P0_ref_number: "" + marrNumberType[1] + ""\n"", mfpOutputFile);
		Clib.fputs(""Qty: "" + marrNumberType[2] + ""\n"", mfpOutputFile);
		Clib.fputs(""PartNo_SIMCardConfigNo: "" + marrNumberType[3] + ""\n"", mfpOutputFile);
		Clib.fputs(""Batch: "" + marrNumberType[4] + ""\n"", mfpOutputFile);*/
//above 1.2
//below 1.2
/*		
		Clib.fputs(""P0_ref_number: "" + marrInputParams[""PO_ref_number""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Quantity: "" + marrInputParams[""Quantity""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Type: "" + marrInputParams[""Type""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Memory: "" + marrInputParams[""Memory""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Profile: "" + marrInputParams[""Profile""]+ ""\n"", mfpOutputFile);
		Clib.fputs(""Graph_ref: "" + marrInputParams[""Graph_ref""] + ""\n"", mfpOutputFile); // Change
//		Clib.fputs(""Artwork: ""+ bcOrdLine.GetFieldValue(""ImageFileName"") + ""\n"", mfpOutputFile); 
		Clib.fputs(""Artwork: "" + marrInputParams[""Artwork""] + ""\n"", mfpOutputFile); 	// Change
        Clib.fputs(""Batch: "" + marrInputParams[""Batch""] + ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
		Clib.fputs(""Keyname: "" + marrInputParams[""Keyname""]+ ""\n"", mfpOutputFile);
		//Clib.fputs(""Transport_Key: "" + marrInputParams[""Transport_Key""]+ ""\n"", mfpOutputFile);
//		Clib.fputs(""Transport_3GOp_In: "" + marrInputParams[""Transport_3GOp_In""]+ ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
        Clib.fputs(""Address1: "" + marrInputParams[""Address1""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Address2: "" + marrInputParams[""Address2""] + ""\n"", mfpOutputFile);
		//Clib.fputs(""Address3: "" + marrInputParams[""Address3""] + ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""*            INPUT VARIABLES            *       \n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""Var_In_List: ""+ ""\n"", mfpOutputFile);
		Clib.fputs(""IMSI: ""+ marrInputParams[""IMSI""] + ""\n"", mfpOutputFile);
		//Clib.fputs(""Ser_Nb: ""+ marrInputParams[""Ser_Nb""] + ""\n"", mfpOutputFile);
		Clib.fputs(""ICCID: ""+ marrInputParams[""ICCID""] + ""\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""*            OUTPUT VARIABLES           *\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""Var_Out: ICCID,IMSI, ""+ msPprItem + ""\n"", mfpOutputFile); 					  // Changed 07:06:2005
		
//		Clib.fputs(""Var_Out: PIN1/PUK1/PIN2/PUK2/KI/ADM1\n"", mfpOutputFile);

		for(miCnt = 0; miCnt < getArrayLength(marrError);miCnt++) 
		{
			if(marrError[miCnt] != """") 
				Clib.fputs(marrError[miCnt] + ""\n"",mfpOutputFile);
		}
			
	} 
	catch(e) 
	{
		throw (e);
		
		

}
	finally 
	{
		if(mfpOutputFile != null)
		Clib.fclose(mfpOutputFile);
		Outputs.SetProperty(""strErrVal"",strErrVal);
//below 1.1		
		bcOrdPprItem  = null;
		bcOrderHdr    = null;
		boOrder       = null;
//above 1.1		
		mbcSysPref	  = null;
		mboSysPref	  = null;
	}*/
//above 1.2
}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Siebel ES SCR1, Objects Destroyed
**************************************************************************************/

function GenerateErrorFileNew(sOrderId,&marrInputParams,&marrError,msInpFileName,marrNumberType,Inputs,Outputs)
{
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderHdr 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Paper Item""); 
//	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");
	var mbIsPprItem			= false;  													
	var msPprItem			= """";														
	
	var mfpOutputFile;	
	var miCnt;
	var msErrorFile         = """";
	var msFile              = """";
	var strErrVal           = """";

//-------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------
	with(bcOrderHdr)
	{
    	SetViewMode(AllView);
//		SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Id"", sOrderId);
    	ClearToQuery();
		ExecuteQuery(ForwardOnly);
         {
           with(bcOrdPprItem) 
            {
    		 SetViewMode(AllView);
			 ActivateField(""Paper Item Name"");
			 ClearToQuery();
			 ExecuteQuery();
			 mbIsPprItem = FirstRecord();
			
			while(mbIsPprItem) 
			 {
				if(msPprItem == """")
					msPprItem = bcOrdPprItem.GetFieldValue(""Paper Item Name"");
				else
		     		msPprItem += ""/"" + bcOrdPprItem.GetFieldValue(""Paper Item Name"");
					
				mbIsPprItem = bcOrdPprItem.NextRecord();	
			 }
		}
	}	
}	
//-------------------------------------------------------------------------------------
	try
	{
		var mboSysPref = TheApplication().GetBusObject(""System Preferences"");
		var mbcSysPref = mboSysPref.GetBusComp(""System Preferences"");
		
		with(mbcSysPref) 
		{
			ActivateField(""Value"");
			ClearToQuery();
			//KT New code
			if(Inputs.PropertyExists(""RMSSIMOrderErrorPath1""))
		    {
		    var testval = 	Inputs.GetProperty(""RMSSIMOrderErrorPath1"");
		    SetSearchSpec(""Name"",Inputs.GetProperty(""RMSSIMOrderErrorPath1""));
	        }
		    else
		    {
			SetSearchSpec(""Name"",""RMS_SIMORDER_ERROR_FILEPATH""); //  VIBO_SIM_ERROR_FILEPATH(Dtd: 01:07:2005)
			}
			ExecuteQuery(ForwardOnly);
			if(FirstRecord()) 
			{
				msFile = GetFieldValue(""Value"");
			} 
		}
		
		 //msErrorFile = msInpFileName.substring(0,msInpFileName.lastIndexOf(""\\"")) + ""_ERROR.log"";// for Windows
		//msErrorFile = msInpFileName.substring(msInpFileName.lastIndexOf(""/"")+1)+ ""_ERROR.log"";// for UNIX
		//msFile +=  msErrorFile;
          //msErrorFile = ""test.log"";
		  
		msFile =  msFile+msInpFileName+""_err.log"";
	  //msFile = msInpFileName + ""_ERROR.err"";
      //UpdateFile(""O"","""",msErrorFile,marrInputParams[""P0_ref_number""]);
    	strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder004"",msFile);
		mfpOutputFile = Clib.fopen(msFile,""a"");
		
		Clib.fputs(""*********************************************\n"", mfpOutputFile);
		Clib.fputs(""*             HEADER DESCRIPTION        * \n"", mfpOutputFile);
		Clib.fputs(""*********************************************\n"", mfpOutputFile);
		//Clib.fputs(""\n"", mfpOutputFile);
		Clib.fputs(""Customer: STC\n""  , mfpOutputFile);
		Clib.fputs(""P0_ref_number: "" + marrNumberType[iPORefId] + ""\n"", mfpOutputFile);
		Clib.fputs(""Qty: "" + marrNumberType[ipQty] + ""\n"", mfpOutputFile);
		Clib.fputs(""PartNo_SIMCardConfigNo: "" + marrNumberType[ipSIMCfg] + ""\n"", mfpOutputFile);
		Clib.fputs(""Batch: "" + marrNumberType[iOrdLineId] + ""\n"", mfpOutputFile);
		/*Clib.fputs(""P0_ref_number: "" + marrInputParams[""PO_ref_number""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Quantity: "" + marrInputParams[""Quantity""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Type: "" + marrInputParams[""Type""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Memory: "" + marrInputParams[""Memory""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Profile: "" + marrInputParams[""Profile""]+ ""\n"", mfpOutputFile);
		Clib.fputs(""Graph_ref: "" + marrInputParams[""Graph_ref""] + ""\n"", mfpOutputFile); // Change
//		Clib.fputs(""Artwork: ""+ bcOrdLine.GetFieldValue(""ImageFileName"") + ""\n"", mfpOutputFile); 
		Clib.fputs(""Artwork: "" + marrInputParams[""Artwork""] + ""\n"", mfpOutputFile); 	// Change
        Clib.fputs(""Batch: "" + marrInputParams[""Batch""] + ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
		Clib.fputs(""Keyname: "" + marrInputParams[""Keyname""]+ ""\n"", mfpOutputFile);
		//Clib.fputs(""Transport_Key: "" + marrInputParams[""Transport_Key""]+ ""\n"", mfpOutputFile);
//		Clib.fputs(""Transport_3GOp_In: "" + marrInputParams[""Transport_3GOp_In""]+ ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
        Clib.fputs(""Address1: "" + marrInputParams[""Address1""] + ""\n"", mfpOutputFile);
		Clib.fputs(""Address2: "" + marrInputParams[""Address2""] + ""\n"", mfpOutputFile);
		//Clib.fputs(""Address3: "" + marrInputParams[""Address3""] + ""\n"", mfpOutputFile);
		Clib.fputs(""*\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""*            INPUT VARIABLES            *       \n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""Var_In_List: ""+ ""\n"", mfpOutputFile);
		Clib.fputs(""IMSI: ""+ marrInputParams[""IMSI""] + ""\n"", mfpOutputFile);
		//Clib.fputs(""Ser_Nb: ""+ marrInputParams[""Ser_Nb""] + ""\n"", mfpOutputFile);
		Clib.fputs(""ICCID: ""+ marrInputParams[""ICCID""] + ""\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""*            OUTPUT VARIABLES           *\n"", mfpOutputFile);
		Clib.fputs(""********************************************\n"", mfpOutputFile);
		Clib.fputs(""Var_Out: ICCID,IMSI, ""+ msPprItem + ""\n"", mfpOutputFile); */					  // Changed 07:06:2005
		
//		Clib.fputs(""Var_Out: PIN1/PUK1/PIN2/PUK2/KI/ADM1\n"", mfpOutputFile);

		for(miCnt = 0; miCnt < getArrayLength(marrError);miCnt++) 
		{
			if(marrError[miCnt] != """") 
				Clib.fputs(marrError[miCnt] + ""\n"",mfpOutputFile);
		}
			
	} 
	catch(e) 
	{
     throw (e);
    }
	finally 
	{
		if(mfpOutputFile != null)
		Clib.fclose(mfpOutputFile);
		Outputs.SetProperty(""strErrVal"",strErrVal);
//below 1.1		
		bcOrdPprItem  = null;
		bcOrderHdr    = null;
		boOrder       = null;
//above 1.1				
		mbcSysPref	= null;
		mboSysPref	= null;
	}
}
function GenerateFile(sOrderId,sFilePath,&Outputs)
{
//below 1.1  Didn't put fuction  heading because  length already  exceeds  16k
/*
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Paper Item""); 				// Changed 07:06:2005  
	var bcOrder 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrdLine 			= boOrder.GetBusComp(""RMS SIM Order Line"");
	var bcOrdLineNum 		= boOrder.GetBusComp(""RMS SIM Order Line Num Info for Update"");
	var bcOrdFile 			= boOrder.GetBusComp(""RMS SIM Order File Info Query"");
	var boNumberEnquiry 	= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumberEnquiry		= boNumberEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	var marrStartNumbers 	= new Array();
	var mbIsRecord			= false;
	var mbIsFileRec 		= false;
	var mbIsPprItem			= false;  // Changed 07:06:2005
	var miFirstIndex;
//	var msPrevSIMNumber 	= """";
	var msNextSIMNumber		= """";
	var msNextIMSINumber	= """";
	var msSIMNumber 		= 0;
	var miFileSeq 			= 0;
	var miCount 			= 0;
	var miQty 				= 0;
	var msConcatNumber 		= """";
	var msFileName 			= """";
	var msIMSINumber 		= """";
	var msStrSIMNum			= """";
	var msGenLvl			= """";
	var msErrVal 			= """";
	var msPprItem			= """";   // Changed 07:06:2005
	var strSearchSpec 		= """";
	var msOrderLineId = """";
	var mfpOutputFile;
	var marrSeqChek = new Array();
	var mintRecCnt = 0;
	var mstrMSISDN = """";
	var mblnSplit = false;
	var mbIsOrderLine=false;
	var cheqSeqArgs;//KT 21-042006 
	var outFile ="""";
    var intLineItemCnt = 0;	//  KT 23-05-06  to  split  SIM  Order file for multiple  line items
	try
    {
	with(bcOrder) 
		{
			SetViewMode(3);
			ActivateField(""Quantity Ordered"");
			ActivateField(""SIM Card Config Type"");
			ActivateField(""Transport Key"");
			ActivateField(""Transport 3GOP key"");
			ActivateField(""Order Number"");
			ActivateField(""ImageFileName""); //Ch
			ActivateField(""PO Requisition Ref Number"");
			ActivateField(""Bill To Address"");
			ActivateField(""Bill To Address Line 2"");
			ActivateField(""Bill To Address Line 3"");
			ActivateField(""HLR ID"");
			ClearToQuery();
			SetSearchSpec(""Id"", sOrderId);
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) 
			{
				msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",sOrderId);
				TheApplication().RaiseErrorText(msErrVal);
			}
		}
		with(bcOrdLine) 
		{
			SetViewMode(3);
			ActivateField(""Profile"");
			ActivateField(""Transport Key"");
			ActivateField(""Transport 3GOP Key"");
			ActivateField(""Quantity Ordered"");
			ActivateField(""SIM Card Config Type"");
			ActivateField(""SIM Card Config Name"");			
			ActivateField(""ImageFileName"");
			ActivateField(""Id"");
			ActivateField(""Graphical Profile"");
			ActivateField(""Card Memory"");
			ActivateField(""Starting Number"");
			ActivateField(""Order Line Id""); // KT 24-04-2006
			ClearToQuery()
			ExecuteQuery();
			mbIsOrderLine = FirstRecord();
			if(!mbIsOrderLine) 
			{
				msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",sOrderId);
					TheApplication().RaiseErrorText(msErrVal);
			}else {
			msOrderLineId = GetFieldValue(""Order Line Id"");
			}
         	}// KT deleted
			with(bcOrdFile) 
		{
			SetViewMode(3);
			ActivateField(""File Sequence"");
			ActivateField(""HLR_Batch"");
			ClearToQuery();
			SetSearchSpec(""SIM Order Id"",sOrderId);
			SetSearchSpec(""File Type"",""O"");
			SetSortSpec(""File Sequence(DESCENDING)"");
			ExecuteQuery();
			mbIsFileRec = FirstRecord();
			if(mbIsFileRec) 
				miFileSeq = GetFieldValue(""File Sequence"");
			else
				miFileSeq = 0;
		}
		with(bcOrdPprItem) {
			ActivateField(""Paper Item Name"");
			ClearToQuery();
			ExecuteQuery(ForwardOnly);
			mbIsPprItem = FirstRecord();
			
			while(mbIsPprItem) {
				if(msPprItem == """")
					msPprItem = GetFieldValue(""Paper Item Name"");
				else
					msPprItem += ""/"" + GetFieldValue(""Paper Item Name"");
				mbIsPprItem = NextRecord();	
			}
		}
		while(mbIsOrderLine) {
				msOrderLineId = bcOrdLine.GetFieldValue(""Order Line Id"");
				with(bcOrdLineNum) 
				{
					SetViewMode(3);
					ActivateField(""Numbers"");
					ActivateField(""Generated Number"");
					ActivateField(""SIM Id"");
					ActivateField(""Concatenated Number Types"");
					ActivateField(""Order Line Id"");
					ClearToQuery();
					SetSearchSpec(""Order Id"",sOrderId)
					SetSearchSpec(""Order Line Id"",bcOrdLine.GetFieldValue(""Id""));
					SetSortSpec(""Generated Number(ASCENDING)"");
					ExecuteQuery();			
			    	mbIsRecord = FirstRecord();
				/*	if(!mbIsRecord) 
					{
						msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD020"",sOrderId);
						TheApplication().RaiseErrorText(msErrVal);
					}*/ 
//above 1.1
//below 1.1
/*
				}  
			while(mbIsRecord) 
			{	
			miQty++;
	//  23-05-06
	//			if(miCount == 0)
	//				msNextSIMNumber = bcOrdLineNum.GetFieldValue(""Generated Number"");
				msSIMNumber = bcOrdLineNum.GetFieldValue(""Generated Number"");
				cheqSeqArgs = TheApplication().NewPropertySet();// KT 21-04-2006
				cheqSeqArgs.SetProperty(""mblnSplit"",mblnSplit);// KT 21-04-2006
				cheqSeqArgs.SetProperty(""mintRecCnt"",mintRecCnt);//KT 21-04-2006
				CheckSequence(bcNumberEnquiry,bcOrdLineNum,marrSeqChek,cheqSeqArgs);//KT 21-04-2006
				mblnSplit = (cheqSeqArgs.GetProperty(""mblnSplit"")==""true"")?true:false;//KT 21-042006
	            mintRecCnt = ToInteger(cheqSeqArgs.GetProperty(""mintRecCnt""));//KT 21-042006
	//			if((msSIMNumber != msNextSIMNumber)  || (msIMSINumber != msNextIMSINumber) || (miQty > 5000)) 
				if((mblnSplit) || (miQty > 5000) ||   (intLineItemCnt != 0))
				{
					mblnSplit = false;
					mstrMSISDN = """";
					strSearchSpec = """";
					with(bcNumberEnquiry) {
						ActivateField(""Assoc Start Id"");
						ActivateField(""Type Identifier"");
						ActivateField(""Number String With Checksum"");
						ActivateField(""Generation Level"");
						ClearToQuery();
						strSearchSpec = ""[Assoc Start Id] = '"" + bcOrdLineNum.GetFieldValue(""SIM Id"") + ""'"";
						strSearchSpec = strSearchSpec + "" AND ([Type Identifier] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + ""'"";
						strSearchSpec = strSearchSpec + "" OR [Type Identifier] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"") + ""')"";
						SetSearchExpr(strSearchSpec);
						ExecuteQuery();
						var blnIsRecord = FirstRecord();
						msIMSINumber = """";
						mstrMSISDN	 = """";
						msGenLvl	 = """";
						while(blnIsRecord) {
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
								msStrSIMNum	= GetFieldValue(""Number String With Checksum"");
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"")) {
								if(msIMSINumber=="""") {
									msIMSINumber = 	GetFieldValue(""Number String With Checksum"");
									msGenLvl	 = 	GetFieldValue(""Generation Level"");
								}
								else {
									msIMSINumber = 	msIMSINumber + "" / ""+GetFieldValue(""Number String With Checksum"");
									msGenLvl	 = 	msGenLvl + ""/""+GetFieldValue(""Generation Level"");							
								}
							}
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""))
								mstrMSISDN = GetFieldValue(""Number String With Checksum"");
	
							blnIsRecord = NextRecord();
						}
						}
	//				if(Clib.strcmpi(msSIMNumber, msPrevSIMNumber) != 1) {
				  	SetArray(marrStartNumbers,miCount,1,""?"",""?"",msStrSIMNum); 
				    SetArray(marrStartNumbers,miCount,2,""?"",""?"",msIMSINumber);
				    SetArray(marrStartNumbers,miCount,3,""?"",""?"",mstrMSISDN);
				    SetArray(marrStartNumbers,miCount,4,""?"",""?"",msGenLvl);
				    SetArray(marrStartNumbers,miCount,5,""?"",""?"",bcOrdLine.GetFieldValue(""Id""));
				    SetArray(marrStartNumbers,miCount,6,""?"",""?"",bcOrdLine.GetFieldValue(""SIM Card Config Name""));
					SetArray(marrStartNumbers,miCount++,7,""?"",""?"",msOrderLineId);
				    miQty = 1;
				}
				SetArray(marrStartNumbers,miCount-1,0,""?"",""?"",miQty);
    //			the validation is on the assumption that first 7 digits of SIM Number will be constant
	//			Code commented for future use.	
	/*			msNextSIMNumber		= msSIMNumber.substring(0,8) + (ToNumber(msSIMNumber.substring(8))  + 1);
				msNextIMSINumber 	= ToNumber(msIMSINumber)+1;*/
//above 1.1
//below 1.1
/*			
				msNextSIMNumber = ToInteger(bcOrdLineNum.GetFieldValue(""Generated Number""))+1;
				mintRecCnt++;
				mbIsRecord = bcOrdLineNum.NextRecord();
			    intLineItemCnt = 0;
					}
			intLineItemCnt++;
			mbIsOrderLine = bcOrdLine.NextRecord();
		}
		for(miCount = 0; miCount < getArrayLength(marrStartNumbers); miCount++) 
		{
			//msFileName = ""STC_"" + bcOrder.GetFieldValue(""HLR ID"") + Clib.rsprintf(""%02s"",ToString(++miFileSeq)) + "".inp"";
			msFileName = ""STC_"" + marrStartNumbers[miCount][7] + ""_"" + Clib.rsprintf(""%02s"",ToString(++miFileSeq)) + "".inp"";
			var mstrFileData = """";
			outFile = sFilePath + msFileName;
			mfpOutputFile = Clib.fopen(outFile,""a"");
    		Clib.fputs(""*********************************************\n"",mfpOutputFile);
			mstrFileData = ""*********************************************"" + ""\n"";
			Clib.fputs(""             HEADER DESCRIPTION				 \n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""             HEADER DESCRIPTION				 "" + ""\n"";
			Clib.fputs(""*********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""*********************************************""+ ""\n"";
			Clib.fputs(""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""\n"";
			Clib.fputs(""Customer: STC\n""  , mfpOutputFile);
			mstrFileData = mstrFileData + ""Customer: STC""+ ""\n"";
      		Clib.fputs(""Quantity: "" + marrStartNumbers[miCount][0] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Quantity: "" + marrStartNumbers[miCount][0] + ""\n"";
//			Clib.fputs(""Quantity: "" + bcOrdLine.GetFieldValue(""Quantity Ordered"") + ""\n"", mfpOutputFile);
			//Clib.fputs(""Type: "" + bcOrdLine.GetFieldValue(""SIM Card Config Name"") + ""\n"", mfpOutputFile);
			//mstrFileData = mstrFileData + ""Type: "" + bcOrdLine.GetFieldValue(""SIM Card Config Name"")+ ""\n"";
	        Clib.fputs(""Type: "" + marrStartNumbers[miCount][6] + ""\n"", mfpOutputFile);//23-05-06 KT
			mstrFileData = mstrFileData + ""Type: "" + marrStartNumbers[miCount][6]+ ""\n"";
			//Clib.fputs(""Memory: "" + bcOrdLine.GetFieldValue(""Card Memory"") + ""\n"", mfpOutputFile);
			Clib.fputs(""Profile: "" + bcOrdLine.GetFieldValue(""Profile"")+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Profile: "" + bcOrdLine.GetFieldValue(""Profile"")+ ""\n"";
    		Clib.fputs(""Graph_ref: ""+ bcOrdLine.GetFieldValue(""Graphical Profile"") + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Graph_ref: ""+ bcOrdLine.GetFieldValue(""Graphical Profile"")+ ""\n"";
   	 		Clib.fputs(""Artwork: ""+ bcOrdLine.GetFieldValue(""ImageFileName"") + ""\n"", mfpOutputFile);  
			mstrFileData = mstrFileData + ""Artwork: ""+ bcOrdLine.GetFieldValue(""ImageFileName"")+ ""\n"";
	  	    //Clib.fputs(""Order Line Id: "" + bcOrdLine.GetFieldValue(""Order Line Id"")+ ""\n"", mfpOutputFile);  // KT 24-04-2006
			//mstrFileData = mstrFileData + ""Order Line Id: "" + bcOrdLine.GetFieldValue(""Order Line Id"")+ ""\n"";
	       	//Clib.fputs(""Batch: "" + bcOrder.GetFieldValue(""Batch Number"")+ ""\n"", mfpOutputFile);
	       	Clib.fputs(""Batch: "" + marrStartNumbers[miCount][7] + ""\n"", mfpOutputFile);
			Clib.fputs(""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""\n"";
			Clib.fputs(""Transport_Key: "" + bcOrder.GetFieldValue(""Transport Key"")+ ""\n"", mfpOutputFile); 
			mstrFileData = mstrFileData + ""Transport_Key: "" + bcOrder.GetFieldValue(""Transport Key"")+ ""\n"";
	  //	Clib.fputs(""Transport_3GOp_In: "" + bcOrder.GetFieldValue(""Transport 3GOP key"")+ ""\n"", mfpOutputFile);
			Clib.fputs(""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""\n"";
			Clib.fputs(""Address1: ""+ bcOrder.GetFieldValue(""Bill To Address"") +""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Address1: ""+ bcOrder.GetFieldValue(""Bill To Address"")+ ""\n"";
			Clib.fputs(""Address2: ""+ bcOrder.GetFieldValue(""Bill To Address Line 2"") + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Address2: ""+ bcOrder.GetFieldValue(""Bill To Address Line 2"")+ ""\n"";
			Clib.fputs(""Address3: ""+ bcOrder.GetFieldValue(""Bill To Address Line 3"") +""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Address3: ""+ bcOrder.GetFieldValue(""Bill To Address Line 3"")+ ""\n"";
			Clib.fputs(""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""\n"";
		//	Clib.fputs(""Graph_ref: ""+ bcOrdLine.GetFieldValue(""Graphical Profile"") + ""\n"", mfpOutputFile);
		//	Clib.fputs(""\n"", mfpOutputFile);
			Clib.fputs(""PO_ref_number: "" + bcOrder.GetFieldValue(""PO Requisition Ref Number"")+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""PO_ref_number: "" + bcOrder.GetFieldValue(""PO Requisition Ref Number"")+ ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+ ""\n"";			    		   	
			Clib.fputs(""            INPUT VARIABLES                 \n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""            INPUT VARIABLES                   ""+ ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************"" + ""\n"";
			Clib.fputs(""Var_In_List: ""+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Var_In_List: ""+ ""\n"";
//			Clib.fputs(""IMSI(""+marrStartNumbers[miCount][4]+""):""+ marrStartNumbers[miCount][2] + ""\n"", mfpOutputFile);
			Clib.fputs(""IMSI: ""+ marrStartNumbers[miCount][2] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""IMSI:""+ marrStartNumbers[miCount][2] + ""\n"";
			Clib.fputs(""Ser_Nb: ""+ marrStartNumbers[miCount][1] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""IMSI:""+ ""Ser_Nb: ""+ marrStartNumbers[miCount][1] + ""\n"";
//Added this line to include MSISDN number in the file.		
			//Clib.fputs(""MSISDN: ""+ marrStartNumbers[miCount][3] + ""\n"", mfpOutputFile); KT 24-04-2006
			mstrFileData = mstrFileData + ""MSISDN: ""+ marrStartNumbers[miCount][3] + ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+""\n"";
			Clib.fputs(""            OUTPUT VARIABLES                \n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""            OUTPUT VARIABLES                  ""+ ""\n"";		
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+ ""\n"";
			Clib.fputs(""Var_Out: "" + msPprItem + ""\n"", mfpOutputFile); 				// Changed 07:06:2005
			mstrFileData = mstrFileData + ""Var_Out: "" + msPprItem + ""\n"";
			Clib.fclose(mfpOutputFile);
		    bcOrdFile.NewRecord(1);
			bcOrdFile.SetFieldValue(""SIM Order Id"",bcOrder.GetFieldValue(""Id"")); 
			bcOrdFile.SetFieldValue(""File Sequence"", miFileSeq);
			bcOrdFile.SetFieldValue(""File Name"", msFileName);
			bcOrdFile.SetFieldValue(""File Type"", ""O"");
			bcOrdFile.SetFieldValue(""File Data"", mstrFileData);
			bcOrdFile.SetFieldValue(""SIM Order Line Id"", marrStartNumbers[miCount][5]);	
			bcOrdFile.SetFieldValue(""SIM Start Number"", marrStartNumbers[miCount][1]);			
			bcOrdFile.SetFieldValue(""Quantity Ordered"", marrStartNumbers[miCount][0]);						
			bcOrdFile.WriteRecord();
//			UpdateFile(""I"","""",msFileName,sOrderId);
		}
	} 
 catch(e)  
	{
		msErrVal = e.errText;
		if (mfpOutputFile != null)
			Clib.fclose(mfpOutputFile);
		if(strErrVal == """")
			msErrVal = e.errText;
          throw(e);
}
	finally 
	{
		bcNumberEnquiry     = null;
		bcOrdPprItem        = null;
		bcOrder 			= null;
		bcOrdLine 			= null;
		bcOrdLineNum 		= null;
		bcOrdFile 			= null;	
		boNumberEnquiry     = null;
		boOrder 			= null;
		cheqSeqArgs         = null;
		marrStartNumbers	= null;
	}
	return(msErrVal);*/
//above 1.1
}
function GenerateFileNew(sOrderId,sFilePath,&Outputs)
{
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	//var bcOrdPprItem		= boOrder.GetBusComp(""RMS SIM Paper Item""); KT 04-07-2006				// Changed 07:06:2005  
	var bcOrder 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrdLine 			= boOrder.GetBusComp(""RMS SIM Order Line"");
	var bcOrdLineNum 		= boOrder.GetBusComp(""RMS SIM Order Line Num Info for Update"");
	var bcOrdFile 			= boOrder.GetBusComp(""RMS SIM Order File Info Query"");
	var boNumberEnquiry 	= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumberEnquiry		= boNumberEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	var marrStartNumbers 	= new Array();
	var mbIsRecord			= false;
	var mbIsFileRec 		= false;
	var mbIsPprItem			= false;  // Changed 07:06:2005
	var miFirstIndex;
//	var msPrevSIMNumber 	= """";
	var msNextSIMNumber		= """";
	var msNextIMSINumber	= """";
	var msSIMNumber 		= 0;
	var miFileSeq 			= 0;
	var miCount 			= 0;
	var miQty 				= 0;
	var msConcatNumber 		= """";
	var msFileName 			= """";
	var msIMSINumber 		= """";
	var msStrSIMNum			= """";
	var msGenLvl			= """";
	var msErrVal 			= """";
	var msPprItem			= """";   // Changed 07:06:2005
	var strSearchSpec 		= """";
	var msOrderLineId = """";
	var mfpOutputFile;
	var marrSeqChek = new Array();
	var mintRecCnt = 0;
	var mstrMSISDN = """";
	var mblnSplit = false;
	var mbIsOrderLine=false;
	var cheqSeqArgs;//KT 21-042006 
	var outFile ="""";
    var intLineItemCnt = 0;	//  KT 23-05-2006 added  to  split  SIM  Order file for multiple  line items
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");  // KT 05-07-2006 
    var bcSysPref = boSysPref.GetBusComp(""System Preferences""); // KT 05-07-2006
	var SplitQty ;// KT 18-06-2007
	var Regioncode ="""";
	var RegionName = """";
	var msBatchNum; //MS:01-NOV-09
	try
    {
	with(bcSysPref)
	{
    ActivateField(""Value"");
	ClearToQuery();
	SetSearchSpec(""Name"",""RMS_SIM_ORDER_VAR_OUT"");
	//below 1.1
    //ExecuteQuery();
     ExecuteQuery(ForwardOnly);
     //above 1.1
	if(FirstRecord()) 
	{
    msPprItem = GetFieldValue(""Value"");

    }
	//20070618:KT to split SIM Order file based on system preference value.
	ClearToQuery();
	SetSearchSpec(""Name"",""RMS_SIM_ORDER_QTY_TO_SPLIT"");
	ExecuteQuery(ForwardOnly);
    if(FirstRecord()) 
	{
    var SplitQty = GetFieldValue(""Value"");

    }
	}
    with(bcOrder) 
		{
			SetViewMode(3);
			ActivateField(""Quantity Ordered"");
			ActivateField(""SIM Card Config Type"");
			ActivateField(""Transport Key"");
			ActivateField(""Transport 3GOP key"");
			ActivateField(""Order Number"");
			ActivateField(""ImageFileName""); //Ch
			ActivateField(""PO Requisition Ref Number"");
			ActivateField(""Bill To Address"");
			ActivateField(""Bill To Address Line 2"");
			ActivateField(""Bill To Address Line 3"");
			ActivateField(""Profile"");
			ActivateField(""HLR ID"");
			ClearToQuery();
			SetSearchSpec(""Id"", sOrderId);
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) 
			{
				msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",sOrderId);
				//TheApplication().RaiseErrorText(msErrVal);
				return(msErrVal);
			}
		}
		with(bcOrdLine) 
		{
			SetViewMode(3);
			ActivateField(""Profile"");
			ActivateField(""Transport Key"");
			ActivateField(""Transport 3GOP Key"");
			ActivateField(""Quantity Ordered"");
			ActivateField(""SIM Card Config Type"");
			ActivateField(""SIM Card Config Name"");			
			ActivateField(""ImageFileName"");
			ActivateField(""Id"");
			ActivateField(""Graphical Profile"");
			ActivateField(""Card Memory"");
			ActivateField(""Starting Number"");
			ActivateField(""Artwork Name"");  // KT 27-06-2006
			ActivateField(""Order Line Id""); // KT 24-04-2006
			ActivateField(""Region Code"");
			ClearToQuery()
			ExecuteQuery();
			mbIsOrderLine = FirstRecord();
			if(!mbIsOrderLine) 
			{
				msErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",sOrderId);
				//	TheApplication().RaiseErrorText(msErrVal);
				return(msErrVal);
			}else {
			msOrderLineId = GetFieldValue(""Order Line Id"");
			}
         	}// KT deleted
			with(bcOrdFile) 
		{
			SetViewMode(3);
			ActivateField(""File Sequence"");
			ActivateField(""HLR_Batch"");
			ClearToQuery();
			SetSearchSpec(""SIM Order Id"",sOrderId);
			SetSearchSpec(""File Type"",""O"");
			SetSortSpec(""File Sequence(DESCENDING)"");
			ExecuteQuery();
			mbIsFileRec = FirstRecord();
			if(mbIsFileRec) 
				miFileSeq = GetFieldValue(""File Sequence"");
			else
				miFileSeq = 0;
		}
		while(mbIsOrderLine) {
				msOrderLineId = bcOrdLine.GetFieldValue(""Order Line Id"");
				with(bcOrdLineNum) 
				{
					SetViewMode(3);
					ActivateField(""Numbers"");
					ActivateField(""Generated Number"");
					ActivateField(""SIM Id"");
					ActivateField(""Concatenated Number Types"");
					ActivateField(""Order Line Id"");
					ActivateField(""File Batch Number"");
					ClearToQuery();
					SetSearchSpec(""Order Id"",sOrderId)
					SetSearchSpec(""Order Line Id"",bcOrdLine.GetFieldValue(""Id""));
					SetSortSpec(""Generated Number(ASCENDING)"");
					//ExecuteQuery();	
					ExecuteQuery(ForwardOnly);
			    	mbIsRecord = FirstRecord();
					}
			while(mbIsRecord) 
			{	
			miQty++;

				msSIMNumber = bcOrdLineNum.GetFieldValue(""Generated Number"");
				cheqSeqArgs = TheApplication().NewPropertySet();// KT 21-04-2006
				cheqSeqArgs.SetProperty(""mblnSplit"",mblnSplit);// KT 21-04-2006
				cheqSeqArgs.SetProperty(""mintRecCnt"",mintRecCnt);//KT 21-04-2006
				CheckSequence(bcNumberEnquiry,bcOrdLineNum,marrSeqChek,cheqSeqArgs);//KT 21-04-2006
				mblnSplit = (cheqSeqArgs.GetProperty(""mblnSplit"")==""true"")?true:false;//KT 21-042006
	            mintRecCnt = ToInteger(cheqSeqArgs.GetProperty(""mintRecCnt""));//KT 21-042006
				if((mblnSplit) || (miQty > SplitQty) ||   (intLineItemCnt != 0))
				{
					mblnSplit = false;
					mstrMSISDN = """";
					strSearchSpec = """";
					msBatchNum	= BatchNumber();
					with(bcNumberEnquiry) {
						ActivateField(""Assoc Start Id"");
						ActivateField(""Type Identifier"");
						ActivateField(""Number String With Checksum"");
						ActivateField(""Generation Level"");
						ClearToQuery();
						strSearchSpec = ""[Assoc Start Id] = '"" + bcOrdLineNum.GetFieldValue(""SIM Id"") + ""'"";
						strSearchSpec = strSearchSpec + "" AND ([Type Identifier] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + ""'"";
						strSearchSpec = strSearchSpec + "" OR [Type Identifier] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"") + ""')"";
						SetSearchExpr(strSearchSpec);
						ExecuteQuery();
						var blnIsRecord = FirstRecord();
						msIMSINumber = """";
						mstrMSISDN	 = """";
						msGenLvl	 = """";
						while(blnIsRecord) {
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
								msStrSIMNum	= GetFieldValue(""Number String With Checksum"");
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"")) {
								if(msIMSINumber=="""") {
									msIMSINumber = 	GetFieldValue(""Number String With Checksum"");
									msGenLvl	 = 	GetFieldValue(""Generation Level"");
								}
								else {
									msIMSINumber = 	msIMSINumber + "" / ""+GetFieldValue(""Number String With Checksum"");
									msGenLvl	 = 	msGenLvl + ""/""+GetFieldValue(""Generation Level"");							
								}
							}
							if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""))
								mstrMSISDN = GetFieldValue(""Number String With Checksum"");
	
							blnIsRecord = NextRecord();
						}
						}
				  	SetArray(marrStartNumbers,miCount,1,""?"",""?"",msStrSIMNum); 
				    SetArray(marrStartNumbers,miCount,2,""?"",""?"",msIMSINumber);
				    SetArray(marrStartNumbers,miCount,3,""?"",""?"",mstrMSISDN);
				    SetArray(marrStartNumbers,miCount,4,""?"",""?"",msGenLvl);
				    SetArray(marrStartNumbers,miCount,5,""?"",""?"",bcOrdLine.GetFieldValue(""Id""));
				    SetArray(marrStartNumbers,miCount,6,""?"",""?"",bcOrdLine.GetFieldValue(""SIM Card Config Name""));
					SetArray(marrStartNumbers,miCount,7,""?"",""?"",bcOrdLine.GetFieldValue(""Card Memory""));
					SetArray(marrStartNumbers,miCount,8,""?"",""?"",bcOrdLine.GetFieldValue(""Artwork Name""));
					SetArray(marrStartNumbers,miCount,9,""?"",""?"",bcOrdLine.GetFieldValue(""Graphical Profile""));
					//below 1.3
				    Regioncode             = bcOrdLine.GetFieldValue(""Region Code"");
					if (Regioncode != """")
					{
					var sRegionCode		   = TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""REGION_CODE"");
                    var iFromRegionCode    = ToNumber(sRegionCode.substring(0,1));
					var iToRegionCode	   = ToNumber(sRegionCode.substring(2));
					Regioncode             = ToNumber(Regioncode.substring(iFromRegionCode,iToRegionCode));
					RegionName             = TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",Regioncode);
					}
					SetArray(marrStartNumbers,miCount,10,""?"",""?"",msOrderLineId);
					SetArray(marrStartNumbers,miCount,11,""?"",""?"",RegionName);
					SetArray(marrStartNumbers,miCount++,12,""?"",""?"",msBatchNum);
					//Above 1.3
				    miQty = 1;
				}
				SetArray(marrStartNumbers,miCount-1,0,""?"",""?"",miQty);
				bcOrdLineNum.SetFieldValue(""File Batch Number"",msBatchNum);
    			msNextSIMNumber = ToInteger(bcOrdLineNum.GetFieldValue(""Generated Number""))+1;
				mintRecCnt++;
				mbIsRecord = bcOrdLineNum.NextRecord();
			    intLineItemCnt = 0;
					}
			intLineItemCnt++;
			mbIsOrderLine = bcOrdLine.NextRecord();
		}
		for(miCount = 0; miCount < getArrayLength(marrStartNumbers); miCount++) 
		{
			
		    if (marrStartNumbers[miCount][11]!="""")
			{		
			msFileName = ""simorder_""+bcOrder.GetFieldValue(""PO Requisition Ref Number"")+""_""+marrStartNumbers[miCount][6]+""-""+marrStartNumbers[miCount][11]+""_""+Clib.rsprintf(""%02s"",ToString(++miFileSeq)) + "".inp"";
			}
			else
			{
			msFileName = ""simorder_""+bcOrder.GetFieldValue(""PO Requisition Ref Number"")+""_""+marrStartNumbers[miCount][6]+""_""+Clib.rsprintf(""%02s"",ToString(++miFileSeq)) + "".inp"";
			}
			var mstrFileData = """";
			outFile = sFilePath + msFileName;
			mfpOutputFile = Clib.fopen(outFile,""a"");
    		Clib.fputs(""*********************************************\n"",mfpOutputFile);
			mstrFileData = ""*********************************************"" + ""\n"";
			Clib.fputs(""*            HEADER DESCRIPTION        *\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""*            HEADER DESCRIPTION        *"" + ""\n"";
			Clib.fputs(""*********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""*********************************************""+ ""\n"";
			Clib.fputs(""Customer: STC\n""  , mfpOutputFile);
			mstrFileData = mstrFileData + ""Customer: STC""+ ""\n"";
      		Clib.fputs(""PO_ref_number: "" + bcOrder.GetFieldValue(""PO Requisition Ref Number"")+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""PO_ref_number: "" + bcOrder.GetFieldValue(""PO Requisition Ref Number"")+ ""\n"";
			Clib.fputs(""Quantity: "" + marrStartNumbers[miCount][0] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Quantity: "" + marrStartNumbers[miCount][0] + ""\n"";
			if (marrStartNumbers[miCount][11]!="""")
			{
			Clib.fputs(""Type: "" + marrStartNumbers[miCount][6] +""-""+marrStartNumbers[miCount][11]+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Type: "" + marrStartNumbers[miCount][6]+""-""+marrStartNumbers[miCount][11]+ ""\n"";
			}	
			else
			{
	        Clib.fputs(""Type: "" + marrStartNumbers[miCount][6] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Type: "" + marrStartNumbers[miCount][6]+ ""\n"";
			}
			Clib.fputs(""Memory: "" + marrStartNumbers[miCount][7] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Memory: "" + marrStartNumbers[miCount][7] + ""\n"";
			Clib.fputs(""Profile: "" + marrStartNumbers[miCount][11]+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Profile: "" + marrStartNumbers[miCount][11]+ ""\n"";
    		Clib.fputs(""Graph_ref: ""+ marrStartNumbers[miCount][9] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Graph_ref: ""+ marrStartNumbers[miCount][9]+ ""\n"";
   	 		Clib.fputs(""Artwork Id: ""+ marrStartNumbers[miCount][8] + ""\n"", mfpOutputFile);  
			mstrFileData = mstrFileData + ""Artwork: ""+ marrStartNumbers[miCount][8]+ ""\n"";
	  	    Clib.fputs(""Batch: "" + marrStartNumbers[miCount][10] + ""\n"", mfpOutputFile);
			Clib.fputs(""*\n"",mfpOutputFile);
			mstrFileData = mstrFileData + ""*""+ ""\n"";
			Clib.fputs(""Keyname: "" + bcOrder.GetFieldValue(""Transport Key"")+ ""\n"", mfpOutputFile); 
			mstrFileData = mstrFileData + ""Keyname: "" + bcOrder.GetFieldValue(""Transport Key"")+ ""\n"";
			Clib.fputs(""*\n"",mfpOutputFile);
			mstrFileData = mstrFileData + ""*""+ ""\n"";
			Clib.fputs(""Address1: ""+ bcOrder.GetFieldValue(""Bill To Address"") +""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Address1: ""+ bcOrder.GetFieldValue(""Bill To Address"")+ ""\n"";
			Clib.fputs(""Address2: ""+ bcOrder.GetFieldValue(""Bill To Address Line 2"") + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Address2: ""+ bcOrder.GetFieldValue(""Bill To Address Line 2"")+ ""\n"";
			Clib.fputs(""*\n"",mfpOutputFile);
			mstrFileData = mstrFileData + ""*""+ ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+ ""\n"";			    		   	
			Clib.fputs(""*            INPUT VARIABLES           *      \n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""*            INPUT VARIABLES           *""+ ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************"" + ""\n"";
			Clib.fputs(""Var_In_List: ""+ ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""Var_In_List: ""+ ""\n"";

			Clib.fputs(""IMSI: ""+ marrStartNumbers[miCount][2] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""IMSI:""+ marrStartNumbers[miCount][2] + ""\n"";
			Clib.fputs(""ICCID: ""+ marrStartNumbers[miCount][1] + ""\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""ICCID: ""+ marrStartNumbers[miCount][1] + ""\n"";
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+""\n"";
			Clib.fputs(""*            OUTPUT VARIABLES          *      \n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""*            OUTPUT VARIABLES          *""+ ""\n"";		
			Clib.fputs(""********************************************\n"", mfpOutputFile);
			mstrFileData = mstrFileData + ""********************************************""+ ""\n"";
			Clib.fputs(""Var_Out: ICCID,IMSI,"" + msPprItem + ""\n"", mfpOutputFile); 				// Changed 07:06:2005
			mstrFileData = mstrFileData + ""Var_Out: "" + msPprItem + ""\n"";
			Clib.fclose(mfpOutputFile);
		    bcOrdFile.NewRecord(1);
			bcOrdFile.SetFieldValue(""SIM Order Id"",bcOrder.GetFieldValue(""Id"")); 
			bcOrdFile.SetFieldValue(""File Sequence"", miFileSeq);
			bcOrdFile.SetFieldValue(""File Name"", msFileName);
			bcOrdFile.SetFieldValue(""File Type"", ""O"");
			bcOrdFile.SetFieldValue(""File Data"", mstrFileData);
			bcOrdFile.SetFieldValue(""BatchNumber"",marrStartNumbers[miCount][12]);
			bcOrdFile.SetFieldValue(""Starting SIM"",marrStartNumbers[miCount][1]);
			bcOrdFile.SetFieldValue(""Starting IMSI"",marrStartNumbers[miCount][2]);
			bcOrdFile.SetFieldValue(""SIM Order Line Id"", marrStartNumbers[miCount][5]);	
			bcOrdFile.SetFieldValue(""SIM Start Number"", marrStartNumbers[miCount][1]);			
			bcOrdFile.SetFieldValue(""Quantity Ordered"", marrStartNumbers[miCount][0]);						
			bcOrdFile.WriteRecord();
//			UpdateFile(""I"","""",msFileName,sOrderId);
		}
	} 
 catch(e)  
	{
		msErrVal = e.errText;
		if (mfpOutputFile != null)
			Clib.fclose(mfpOutputFile);
		if(strErrVal == """")
			msErrVal = e.errText;
          throw(e);
}
	finally 
	{
//below 1.1		
		bcNumberEnquiry     = null;
		boNumberEnquiry     = null;
		cheqSeqArgs         = null;
//above 1.1 		
		bcSysPref           = null;
 		boSysPref           = null;
		bcOrder 			= null;
		bcOrdLine 			= null;
		bcOrdLineNum 		= null;
		bcOrdFile 			= null;	
		boOrder 			= null;
		marrStartNumbers	= null;
   }
	return(msErrVal);
}
"/**************************************************************************************
* Name          : SIM File Service GetDirrectoryList  Function				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Siebel ES SCR1, Objects Destroyed
**************************************************************************************/


function GetDirrectoryList(fileArray,Inputs,Outputs)
{
//the command to print the file names will be, name sorted
//for dos 
//dir [directory]\[pattern] /ON /B > [directory]\filelist.txt
//for unix??
//ls [directory]/[pattern] | sort > [directory]/filelist.txt
//populate the filenames in a propertyset, simple to call 
	var msPath = Inputs.GetProperty(""DirectoryPath"");
	var msPattern=Inputs.GetProperty(""FilePattern"");
	var msFNameForList = msPath + "filelist.lst"";
	var miCutLen = 1 + msPath.length;
//must get syspref EECC_SIEBEL_SERVER_OS
	var mpsSupply;
	var mpsReturn;
	var msOS;//name of the OS, can be WIN, win, Win (Windows) or Unix, UNIX, unix (all flavours of UNIX)
	var msCMD;//command string to execute list directory function on the OS
	//var mbsSYSPREF = TheApplication().GetService(""EECC BS Startup"");
	mpsSupply = TheApplication().NewPropertySet();
	mpsReturn = TheApplication().NewPropertySet();
	//mpsSupply.SetProperty(""Parameter Name"",""EECC_SIEBEL_SERVER_OS"");
	//mbsSYSPREF.InvokeMethod(""Get SysPref"",mpsSupply,mpsReturn);
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref= boSysPref.GetBusComp(""System Preferences"");
	with(bcSysPref) {
		ActivateField(""Value"");
		ClearToQuery();
		//KT New Code 
		if(Inputs.PropertyExists(""STCSIMOrderOS""))
		{
			var testval = 	Inputs.GetProperty(""STCSIMOrderOS"");
			SetSearchSpec(""Name"",Inputs.GetProperty(""STCSIMOrderOS""));
	    }
		else
		{
			//End of new code
			SetSearchSpec(""Name"",""STC_OS"");
		}
		ExecuteQuery();
		
		if(FirstRecord())
			msOS = GetFieldValue(""Value"");
	}
	
	if(""unix"" == msOS.toLowerCase()){//unix
		//msCMD = ""ls "" + msPath + msPattern + "" | cut -c "" + miCutLen + ""- | sort > "" + msFNameForList;
		if(TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""NEWUNIXCMD"") != ""Y"")
			msCMD = ""ls "" + msPath + msPattern + "" | sort > "" + msFNameForList;
		else
			msCMD = ""ls -1 "" + msPath + "" > "" + msFNameForList;
	} else {
		msCMD = ""dir "" + msPath + msPattern + "" /ON /B > "" + msFNameForList;
	}
//now execute the command on OS, can be risky		
	var test = Clib.system(msCMD);
//	TheApplication().RaiseErrorText(test + "">>"" + msCMD);
//	WriteToFile(""written the directory list file"",""_test"");
	/*mpsSupply = TheApplication().NewPropertySet();
	mpsReturn = TheApplication().NewPropertySet();
	mpsSupply.SetProperty(""ContainerTag"",""FileList"");
	mpsSupply.SetProperty(""RecordTag"",""File"");
	mpsSupply.SetProperty(""FileName"",msFNameForList);
	TEXT2XML(mpsSupply,mpsReturn);
	LogPropSet(mpsReturn,""_GotFileList"");
	Outputs.AddChild(mpsReturn.GetChild(0).GetChild(0));
	LogPropSet(Outputs,""_GotFileList_2"");
	Outputs.SetProperty(""CountOfFiles"",mpsReturn.GetChild(0).GetChild(0).GetChildCount());*/
	var msInputString = """";
	var msFile = Inputs.GetProperty(""testfile"");
	//msFile = msPath+msFile;
	//var testfile = """";
	
	//Clib.fopen(testfile,""r"");
	//var mfpInputFile 	= Clib.fopen(msFile,""r"");
	 var mfpInputFile 	= Clib.fopen(msFNameForList,""r"");
	//Clib.fgets(mfpInputFile);  
     //msInputString = Clib.fgets(mfpInputFile);
	var fileCount=0;	
	 while (msInputString != null) 
	    	{
			msInputString = Clib.fgets(mfpInputFile);
			if(msInputString == null) continue;
	
	//		remove the end of line character from the string
	//		for unix formatted file it is \n and for windows formatted file it is \r\n

		if(msInputString.indexOf(""\r"") != -1) {
			msInputString = msInputString.substring(0,msInputString.indexOf(""\r""));
			fileArray[fileCount] = msInputString;
			fileCount++;
			} else if(msInputString.indexOf(""\n"") != -1) 
			{
			msInputString = msInputString.substring(0,msInputString.indexOf(""\n""));
			fileArray[fileCount] = msInputString;
			fileCount++;
		    }
			}
			//KT 20070815
		    Clib.fclose(mfpInputFile);
			//End of 20070815
//below 1.1		
		mpsReturn = null;
		mpsSupply = null;
		bcSysPref  = null;
		boSysPref  = null;
//above 1.1
		return CancelOperation;
}
"/**************************************************************************************
* Name          : SIM Order Business Service ReadOrderFile Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Commented entire function  becuase we are not  using  this function
**************************************************************************************/

function ReadOrderFile(&marrOrdCnct,&marrInputValues,&marrSIMIMSI,&mpsPprId,&marrError,msFileName,&marrNumType)
{
//below 1.1
/*
	var msInputString 	= """";
	var msTempString 	= """";
	var msTemp			= """";
	var msFile 			= msFileName;
	var mbError			= false;
	var mbValidateOrd	= false;
	var miCnt 			= 0;
	var miNumType		= 0;
	var marrInpStr		= new Array();
	//var marrOrdCnct 	= new Array();
	var marrTemp		= new Array();
	try
	{
    	var mfpInputFile 	= Clib.fopen(msFile,""r"");
	
	   while (msInputString != null) 
	    {
			msInputString = Clib.fgets(mfpInputFile);
			if(msInputString == null) continue;
	
	//		remove the end of line character from the string
	//		for unix formatted file it is \n and for windows formatted file it is \r\n

		if(msInputString.indexOf(""\r"") != -1) {
			msInputString = msInputString.substring(0,msInputString.indexOf(""\r""));
		} else if(msInputString.indexOf(""\n"") != -1) {
			
			msInputString = msInputString.substring(0,msInputString.indexOf(""\n""));
		}
		if(msInputString == """") continue;
		if(Clib.isdigit(msInputString.charAt(0))) 
		{		
			marrSIMIMSI[miCnt] = msInputString.split("" "");
			msTemp = marrSIMIMSI[miCnt][getArrayLength(marrSIMIMSI[miCnt])-1];
			if(!Clib.isalnum(msTemp.substring(msTemp.length-1))) 
			{
				//marrSIMIMSI[miCnt][getArrayLength(marrSIMIMSI[miCnt])-1] = msTemp.substring(0,msTemp.length-1);
				SetArray(marrSIMIMSI,miCnt,getArrayLength(marrSIMIMSI[miCnt])-1,""?"",""?"",msTemp.substring(0,msTemp.length-1));
				}
			miCnt++;
		}
		else if(Clib.isalpha(msInputString.charAt(0))) 
		{
			if(msInputString.substring(0,msInputString.indexOf("":"")) == ""Var_Out"") 
			{
//              msTempString = msInputString.substring(msInputString.indexOf("":"") + 2,msInputString.indexOf(""\n""));
				msTempString = msInputString.substring(msInputString.indexOf("":"") + 2);
				//marrNumType = msTempString.split(""/"");
				marrInpStr = msTempString.split(""/"");
				for(miNumType=0;miNumType < getArrayLength(marrInpStr);miNumType++) {
					marrNumType[miNumType] = marrInpStr[miNumType];
				}
			}
			else
			{
				marrInputValues[msInputString.substring(0,msInputString.indexOf("":""))] = msInputString.substring(msInputString.indexOf("":"") + 2);
		//		marrInputValues[msInputString.substring(0,msInputString.indexOf("":""))] = 	msInputString.substring(msInputString.indexOf("":"") + 2,msInputString.indexOf(""\n""));	
			}
		}
	}
	
	} catch(e){
		var test4 = e.errText;
		marrTemp 	= null;
		mbError 	= true;
		
		throw(e);
	} 
	finally 
	{
		if (mfpInputFile != null)
			Clib.fclose(mfpInputFile);	
	
	}
	if(mbError)
		return(!mbError);
	else {
		mbValidateOrd = ValidateOrder(marrInputValues,marrSIMIMSI,marrNumType,marrOrdCnct,mpsPprId,marrError);
		return(mbValidateOrd);
	}
*/
//above 1.1

}
"/**************************************************************************************
* Name          : SIM Order Business Service ReadOrderFile Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/

function ReadOrderFileNew(&marrOrdCnct,&marrInputValues,&marrSIMIMSI,&mpsPprId,&marrError,msFileName,&marrNumType,&mpFilePos)
{
	var msInputString 	= """";
	var msTempString 	= """";
	var msTemp			= """";
	var msFile 			= msFileName;
	var mbError			= false;
	var mbValidateOrd	= false;
	var miCnt 			= 0;
	var miNumType		= 0;
	var marrInpStr		= new Array();
	//var marrOrdCnct 	= new Array();
	var msInputString1  = """";
	var msInputString2  = """";   
	var marrTemp		= new Array();
	//1.1
	var msSIMTemp		= """";
	//1.1

	try
	{
    	 var mfpInputFile 	= Clib.fopen(msFile,""r"");
    	 var testpos2 = mpFilePos;
    	 if(mbFilePos)
    	 	Clib.fsetpos(mfpInputFile,mpFilePos);
    	 	
	     while (msInputString != null) 
	    {
	    	//1.1
			Clib.fgetpos(mfpInputFile,mpFilePos);
			var testpos = mpFilePos;
			//1.1
			msInputString = Clib.fgets(mfpInputFile);
			if(msInputString == null) continue;
	
	//		remove the end of line character from the string
	//		for unix formatted file it is \n and for windows formatted file it is \r\n

			if(msInputString.indexOf(""\r"") != -1) {
				msInputString = msInputString.substring(0,msInputString.indexOf(""\r""));
			} else if(msInputString.indexOf(""\n"") != -1) {
				
				msInputString = msInputString.substring(0,msInputString.indexOf(""\n""));
			}
			if(msInputString == """") continue;
			//1.1
			if((miCnt == miFileBatchSize) && (msInputString.substring(0,1) == ""1"")) {
				mbFilePos = true;
				break;
			} else
				mbFilePos = false;
			//1.1
			if(Clib.isdigit(msInputString.charAt(0))) 
			{		
				
				if(msInputString.substring(0,msInputString.indexOf(""|"")) == ""1"")
				{
					msInputString1 = msInputString.substring(msInputString.indexOf(""|"")+1);
					//marrSIMIMSI[miCnt] = msInputString.split("" "");
					marrSIMIMSI[miCnt] = msInputString1.split(""|"");
					msTemp = marrSIMIMSI[miCnt][getArrayLength(marrSIMIMSI[miCnt])-1];
					
					var test6 = getArrayLength(marrSIMIMSI[miCnt]);
				
					if(!Clib.isalnum(msTemp.substring(msTemp.length-1))) 
					{
						//marrSIMIMSI[miCnt][getArrayLength(marrSIMIMSI[miCnt])-1] = msTemp.substring(0,msTemp.length-1);
						SetArray(marrSIMIMSI,miCnt,getArrayLength(marrSIMIMSI[miCnt])-1,""?"",""?"",msTemp.substring(0,msTemp.length-1));
					}
					//1.1
					msSIMTemp = marrSIMIMSI[miCnt][0];
					msSIMTemp = msSIMTemp.substring(0,msSIMTemp.length-1);
					
					if(msFileStartNum == """"){
						msFileStartNum 	= msSIMTemp;
						msFileEndNum	= msSIMTemp;
					} else {
						msFileStartNum 	= (msSIMTemp < msFileStartNum)?msSIMTemp:msFileStartNum;
						msFileEndNum	= (msSIMTemp > msFileEndNum)?msSIMTemp:msFileEndNum;
					}
						
					//1.1
					miCnt++;
			   }
				if(msInputString.substring(0,msInputString.indexOf(""|"")) == ""0"")	
				{
					msInputString2 = msInputString.substring(msInputString.indexOf(""|"")+1);
					marrInpStr = msInputString2.split(""|"");
					for(miNumType=0;miNumType < getArrayLength(marrInpStr);miNumType++) {
						marrNumType[miNumType] = marrInpStr[miNumType];
						var test7 = marrInpStr[miNumType];
				        //var test8 = marrSIMIMSI[miCnt][1];
				        //var test9 = marrSIMIMSI[miCnt][2];
					}
				}
				//1.1
				if(msInputString.substring(0,msInputString.indexOf(""|"")) == ""2"")	
				{
					mbFilePos = false;
				}
				//1.1
			}
		
		/*else if(Clib.isalpha(msInputString.charAt(0))) 
		{
			if(msInputString.substring(0,msInputString.indexOf("":"")) == ""Var_Out"") 
			{
//              msTempString = msInputString.substring(msInputString.indexOf("":"") + 2,msInputString.indexOf(""\n""));
				msTempString = msInputString.substring(msInputString.indexOf("":"") + 2);
				//marrNumType = msTempString.split(""/"");
				marrInpStr = msTempString.split("","");
				for(miNumType=0;miNumType < getArrayLength(marrInpStr);miNumType++) {
					marrNumType[miNumType] = marrInpStr[miNumType];
				}
			}
			else
			{
				marrInputValues[msInputString.substring(0,msInputString.indexOf("":""))] = msInputString.substring(msInputString.indexOf("":"") + 2);
		//		marrInputValues[msInputString.substring(0,msInputString.indexOf("":""))] = 	msInputString.substring(msInputString.indexOf("":"") + 2,msInputString.indexOf(""\n""));	
			}
		}*/
	}
	
	} catch(e){
		var test4 = e.toString();
		marrTemp 	= null;
		mbError 	= true;
		
		throw(e);
	} 
	finally 
	{
		if (mfpInputFile != null)
			Clib.fclose(mfpInputFile);	
	
	}
	if(mbError)
		return(!mbError);
	else {
		mbValidateOrd = ValidateOrderNew(marrInputValues,marrSIMIMSI,marrNumType,marrOrdCnct,mpsPprId,marrError);
		return(mbValidateOrd);
	}


}
"/**************************************************************************************
* Name          : SIM File Service GenerateErrorFile Method 				  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM File 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	/*var marrOrdCnct 	= new Array();
	var marrInputParams = new Array();
	var marrError 		= new Array();
	var marrSIMIMSI		= new Array();
	var marrNumberType	= new Array();*/
	var fileArray       = new Array();
	var intReturn		= CancelOperation;
	//var mpsPprId		= TheApplication().NewPropertySet();
	//var msFullFileName	= Inputs.GetProperty(""FilePath"");
	//var msFileName 		= Inputs.GetProperty(""FilePath"").substring(Inputs.GetProperty(""FileName"").lastIndexOf(""/"") + 1);
	var strErrVal		= """";
	//var mbResult		= false;
	//var Inputs 			= TheApplication().NewPropertySet();
	//var Outputs         = TheApplication().NewPropertySet();
	//try	{
	//KT 15-04-07 Moved code to method ReadOrderFile
	/* 
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
    var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
	bcSysPref.ActivateField(""Value"");
	bcSysPref.ClearToQuery();
	bcSysPref.SetSearchSpec(""Name"",""STC_IF_SIMDETAILFILE_DIR_IN"");
	bcSysPref.ExecuteQuery();
	if(bcSysPref.FirstRecord()) 
	{
    Inputs.SetProperty(""DirectoryPath"",bcSysPref.GetFieldValue(""Value""));
    //t1 = bcSysPref.GetFieldValue(""Value"");
	//Inputs.SetProperty(""testfile"",""C:\\Test1\\filelist.lst"");
	}
	bcSysPref.ClearToQuery();
	bcSysPref.SetSearchSpec(""Name"",""STC_IF_SIMDETAILFILE_DIR_OUT"");
	bcSysPref.ExecuteQuery();
	if(bcSysPref.FirstRecord()) 
	{
    Inputs.SetProperty(""DirectoryPathOut"",bcSysPref.GetFieldValue(""Value""));
    }
	*/
	switch(MethodName) 	
    {
		case ""GenerateFile"":

			
			strErrVal = GenerateFileNew(Inputs.GetProperty(""OrderId""),Inputs.GetProperty(""FilePath""),Outputs);
			//Above 1.1
			Outputs.SetProperty(""ErrMessage"",strErrVal);
			var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
			var bcOrder 			= boOrder.GetBusComp(""RMS SIM Order"");
			with(bcOrder)
			{
				InvokeMethod(""SetAdminMode"",""TRUE"");
				SetViewMode(AllView);
				ActivateField(""Status"");
				ActivateField(""Comments"");
				ActivateField(""Status"");
				ActivateField(""PO Generated Date"");
				ActivateField(""Current Date"");
				SetSearchSpec(""Id"",Inputs.GetProperty(""OrderId""));
				ExecuteQuery(ForwardOnly);
				var blnsIsRecord = FirstRecord();
				if(blnsIsRecord)
				{
					var dtCurrentDate = GetFieldValue(""Current Date"");
					if(strErrVal!= """")
					{
						SetUserProperty(""From BusService"",""Y""); 
						SetFieldValue(""Comments"",strErrVal);
						SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW""));
						WriteRecord();
						SetUserProperty(""From BusService"",""N"");
					}
					else 
					{
						SetUserProperty(""From BusService"",""N"");
						SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""PO GENERATED""));
						SetFieldValue(""PO Generated Date"",dtCurrentDate);
						WriteRecord();
						SetUserProperty(""From BusService"",""N"");
					}
				}
				InvokeMethod(""SetAdminMode"",""FALSE"");
			}
			bcOrder = null;
			boOrder = null;
			//below 1.1
			break;
			
		case ""ReadOrderFile"":
		    //KT 15-04-2007 Moved code
			var boSysPref = TheApplication().GetBusObject(""System Preferences"");
		    var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
			bcSysPref.ActivateField(""Value"");
			bcSysPref.ClearToQuery();
			//KT New Code
			if(Inputs.PropertyExists(""RMSSIMOrderErrorPath1""))
			{
				var testval = 	Inputs.GetProperty(""RMSSIMDetailDirIn1"");
				bcSysPref.SetSearchSpec(""Name"",Inputs.GetProperty(""RMSSIMDetailDirIn1""));
			}
			else
				//End of New Code
				bcSysPref.SetSearchSpec(""Name"",""STC_IF_SIMDETAILFILE_DIR_IN"");
			bcSysPref.ExecuteQuery();
			if(bcSysPref.FirstRecord()) 
			{
			    Inputs.SetProperty(""DirectoryPath"",bcSysPref.GetFieldValue(""Value""));
			    //t1 = bcSysPref.GetFieldValue(""Value"");
				//Inputs.SetProperty(""testfile"",""C:\\Test1\\filelist.lst"");
			}
			bcSysPref.ClearToQuery();
			//KT New Code
			if(Inputs.PropertyExists(""RMSSIMOrderErrorPath1""))
			{
				var testval1 = 	Inputs.GetProperty(""RMSSIMDetailDirOut1"");
				bcSysPref.SetSearchSpec(""Name"",Inputs.GetProperty(""RMSSIMDetailDirOut1""));
			}
			else
			//End of New Code
				bcSysPref.SetSearchSpec(""Name"",""STC_IF_SIMDETAILFILE_DIR_OUT"");
			bcSysPref.ExecuteQuery();
			if(bcSysPref.FirstRecord()) 
			{
		    	Inputs.SetProperty(""DirectoryPathOut"",bcSysPref.GetFieldValue(""Value""));
		    }
					GetDirrectoryList(fileArray,Inputs,Outputs);
					CallReadOrderFiles(fileArray,Inputs);
					/*	//mbResult = 	ReadOrderFileNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrError,msFullFileName,marrNumberType);
					if(mbResult)
						{	
		
					   	strErrVal = UpdateNumbersNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrNumberType,msFullFileName);
					 }
				//-----------------------------------------------------------------------------
				//enable the following script, if an error file is required to be generated          // 01:07:2005
				//----------------------------------------------------------------------------
					if(strErrVal != """" || getArrayLength(marrError) > 0) 
					//{
					/*	marrError[getArrayLength(marrError)] = strErrVal;
						GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);	
					    	
					}
					else //commented for read tests*/
					/*{
						if(marrError[0] != """") {
						GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);
						//strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD019"");
						TheApplication().RaiseErrorText(Outputs.GetProperty(""strErrVal""));
						}
					}//commented for read tests
						break;
					default:
						intReturn = ContinueOperation;*/
				break;
			case ""ReadOrderFileNew"":
				GetDirrectoryList(fileArray,Inputs,Outputs);
				CallReadOrderFiles(fileArray,Inputs);
				/*	//mbResult = 	ReadOrderFileNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrError,msFullFileName,marrNumberType);
				if(mbResult)
					{	
	
				   	strErrVal = UpdateNumbersNew(marrOrdCnct,marrInputParams,marrSIMIMSI,mpsPprId,marrNumberType,msFullFileName);
				 }
			//-----------------------------------------------------------------------------
			//enable the following script, if an error file is required to be generated          // 01:07:2005
			//----------------------------------------------------------------------------
				if(strErrVal != """" || getArrayLength(marrError) > 0) 
				//{
				/*	marrError[getArrayLength(marrError)] = strErrVal;
					GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);	
				    	
				}
				else //commented for read tests*/
				/*{
					if(marrError[0] != """") {
					GenerateErrorFile(Inputs.GetProperty(""OrderId""),marrInputParams,marrError,msFileName,Inputs,Outputs);
					//strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD019"");
					TheApplication().RaiseErrorText(Outputs.GetProperty(""strErrVal""));
					}
				}//commented for read tests
					break;
				default:
					intReturn = ContinueOperation;*/
				break;
			case ""BatchNum"":
				var sNextId = BatchNumber();
				Outputs.SetProperty(""BatchNumber"",sNextId);
				break;
		}
	
		//}
	//catch(e)
	//{

	//	if(strErrVal == """")
	//		strErrVal = e.errText;

	//}
	//finally
//	{ 
	
		fileArray           = null;
		bcSysPref           = null;
		boSysPref           = null;
		/*mpsPprId			= null;
	    marrOrdCnct 	    = null;
	    marrInputParams     = null;
	    marrError 	        = null;
	    marrSIMIMSI	        = null;
        marrNumberType	    = null;*/
//	}
//	if(strErrVal != """")
//		TheApplication().RaiseErrorText(strErrVal);
				
	return (intReturn);
}
function SetArray(&arrArray,d1,d2,d3,d4,&value)
{
	try{
//var strSTEng = TheApplication().GetProfileAttr(""RMS_ST_ENGINE"");
var strSTEng = ""Y"";
if ((d2 != ""?"")) {
if ((typeof(arrArray[d1]) != "function"") && (strSTEng == ""Y"")){
arrArray[d1] = new Array();
}
} else {
arrArray[d1] = value;
return(true);
}
if ((d3 != ""?"")) {
if ((typeof(arrArray[d1][d2]) != "function"")  && (strSTEng == ""Y""))
arrArray[d1][d2] = new Array();
} else {
arrArray[d1][d2] = value;
return(true);
}
if ((d4 != ""?"")) {
if((typeof(arrArray[d1][d2][d3]) != "function"")  && (strSTEng == ""Y""))
arrArray[d1][d2][d3] = new Array();
} else {
arrArray[d1][d2][d3] = value;
return(true);
}
} catch(e) {
var test = e.errText;
throw(e);
}


}
"/**************************************************************************************
* Name          : SIM Order Business Service UpdateFile Method 					  	  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/

function UpdateFile(strFileType,strComments,strFileName,strOrderId,strOrderLineId)
{
	var miFileSeq		= 0;
	var mbIsFileRec		= false;
	var msFileId		= """";
	var boOrder 		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderFileInfo = boOrder.GetBusComp(""RMS SIM Order File Info"");
	//1.1
	var msFileNameQry	= """";
	//1.1

	with(bcOrderFileInfo) 
	 {
		SetViewMode(3);
		ActivateField(""File Sequence"");
		ActivateField(""HLR_Batch"");
		ClearToQuery();
		SetSearchSpec(""SIM Order Id"",strOrderId);
		SetSearchSpec(""File Type"",strFileType);
		SetSortSpec(""File Sequence(DESCENDING)"");
		ExecuteQuery(ForwardOnly);
		mbIsFileRec = FirstRecord();

		if(mbIsFileRec) 
			miFileSeq = GetFieldValue(""File Sequence"");
		else
			miFileSeq = 0;
	 }

//  Update the file table with the appropriate parameters	

	with(bcOrderFileInfo) 
	{
		SetViewMode(AllView);
		ActivateField(""Id"");
		
		//SetFieldValue(""File Name"",strFileName.substring(strFileName.indexOf(""EE"")));
		var index = strFileName.lastIndexOf(""\\"");
		if (index <= 0)
        {
			index = strFileName.lastIndexOf(""/"");
	        if (index > 0)
	        {
			//1.1	SetFieldValue(""File Name"",strFileName.substring(strFileName.lastIndexOf(""/"")+1));
				msFileNameQry = strFileName.substring(strFileName.lastIndexOf(""/"")+1);
		    }
		}
		else 
		{
		//1.1	SetFieldValue(""File Name"",strFileName.substring(strFileName.lastIndexOf(""\\"")+1));
			msFileNameQry = strFileName.substring(strFileName.lastIndexOf(""\\"")+1);
		}
		//1.1
		ClearToQuery();
		SetSearchSpec(""File Name"",msFileNameQry);
		SetSearchSpec(""File Type"",strFileType);
		SetSearchSpec(""SIM Order Id"",strOrderId);
		SetSearchSpec(""SIM Order Line Id"",strOrderLineId);
		ExecuteQuery(ForwardOnly);
		
		if(!FirstRecord()) {
			NewRecord(1);
			SetFieldValue(""Comments"",strComments);
			SetFieldValue(""File Name"",msFileNameQry);
			SetFieldValue(""File Sequence"",miFileSeq);
			SetFieldValue(""File Type"",strFileType);
			SetFieldValue(""SIM Order Id"",strOrderId);
			SetFieldValue(""SIM Order Line Id"",strOrderLineId);
			WriteRecord();
		}
	    }//1.1
	msFileId = bcOrderFileInfo.GetFieldValue(""Id"");
	bcOrderFileInfo = null;
	boOrder			= null;
	return msFileId;
}
"/**************************************************************************************
* Name          : SIM Order Business Service UpdateNumbers Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* * 20060710    1.1         Kalyana      	Commented entire function  becuase we are not  using  this function
**************************************************************************************/

function UpdateNumbers(&marrOrdCnct,&marrInputParams,&marrSIMIMSI,&mpsPprId,&marrNumTypes,msFileName)
{
//below 1.1
/*	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var boNMEnquiry			= TheApplication().GetBusObject(""RMS NM Number Enquiry"");     // Changed 06:06:2005

//	var bcNumberMaster      = boOrder.GetBusComp(""RMS SIM Order NM Number Master"");
	var bcNumberMaster      = boNMEnquiry.GetBusComp(""RMS NM Number Enquiry For Update""); // Changed 06:06:2005
	
	var boSIMNumber         = TheApplication().GetBusObject(""RMS SIM Number"");     // Changed 06:06:2005
	var bcNumPaperItem      = boSIMNumber.GetBusComp(""RMS SIM Number Paper Item""); // Changed 06:06:2005
//	var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Number Paper Item""); 
//	var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Order Paper Item"");

	var bcOrder				= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrderUpd			= boOrder.GetBusComp(""RMS SIM Order Update"");
	var bcOrderLine			= boOrder.GetBusComp(""RMS SIM Order Line Update"");
	var bcOrderLineNumbers  = boOrder.GetBusComp(""RMS SIM Order Line Num Info"");
	var bcNumberConcat		= boOrder.GetBusComp(""RMS SIM Order Association Number Type Display"");
	var bcOrderLineRecdInfo = boOrder.GetBusComp(""RMS SIM Order Line Recd Info"");
	
	var boOrderQuery		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	= boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");

	var boSysPref			= TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref			= boSysPref.GetBusComp(""System Preferences"");
	
	var bsRMSBlk            = TheApplication().GetService(""RMS RMS Block Calc"");
	var psBlkInputs			= TheApplication().NewPropertySet();
	var psBlkOutputs		= TheApplication().NewPropertySet();
	
	var miRecdItemCount 	= 0; 
	var mbIsRecord 			= false;
	var strErrVal			= """";
	var strSIMCrdId			= """";
	var strSIMCrdPrice = """";
	var strOrderId			= """";
	var blnsIsPaperItem = false; //KT 30-04-06
	var blnBlkUpdate		= false;
	var dtCurrentDate ;
	
	try
	{
	
	with(bcSysPref) {
		ActivateField(""Value"");
		ClearToQuery();
		SetSearchSpec(""Name"",""RMS_BLOCK_UPDATION"");
		SetSearchSpec(""Value"",""Y"");
		ExecuteQuery(ForwardOnly);
		if(FirstRecord())
			blnBlkUpdate	= true;
	}
	with(bcOrderLineQuery) 
	{
		
		ActivateField(""Order Id"");
		ClearToQuery();
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strOrderId = GetFieldValue(""Order Id"");
	}

	with(bcOrder) 
	{
		SetViewMode(3);
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ActivateField(""Closed Date"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId);
	//	SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""]); KT 24-04-2006
		SetSearchSpec(""Revision Number"",1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);	
		} 
		dtCurrentDate = GetFieldValue(""Current Date"");
	}
	
	with(bcOrderUpd) 
	{
		SetViewMode(3);
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ActivateField(""Closed Date"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId);
		//SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""])
		SetSearchSpec(""Revision Number"",1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		dtCurrentDate = GetFieldValue(""Current Date"");
	}
	
	with(bcOrderLine) 
	{
		ActivateField(""Status"");
		ActivateField(""Id"");
		ActivateField(""Quantity Received"");
		ActivateField(""Fulfilled Date"");
		ActivateField(""SIM Card Config Id"");	
		ActivateField(""SIM Card Price"");
		ClearToQuery();
		//SetSearchSpec(""SIM Card Config Type"",marrInputParams[""Type""]);
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
	  //SetSearchSpec(""Profile"",marrInputParams[""Profile""]);  KT 24-04-2006
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]); 
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strSIMCrdId = GetFieldValue(""SIM Card Config Id"");
		strSIMCrdPrice = GetFieldValue(""SIM Card Price"");
	}
	
	var miCnt = 0;
	var miPprCnt = 0;
	
	var msFileId = UpdateFile(""I"","""",msFileName,bcOrderUpd.GetFieldValue(""Id""));

//	Update the Order Line Recieved Info Table	

	with(bcOrderLineRecdInfo) {
	NewRecord(1);
	SetFieldValue(""Input File Info Id"",msFileId);
	SetFieldValue(""Order Id"",bcOrder.GetFieldValue(""Id""));
	SetFieldValue(""Order Line Id"",bcOrderLine.GetFieldValue(""Id""));
	SetFieldValue(""Quantity Received"",getArrayLength(marrOrdCnct));
	WriteRecord();
	}
	
	for(miCnt =0; miCnt < getArrayLength(marrOrdCnct);miCnt++) 
	   {
		with(bcOrderLineNumbers) 
		{
			ActivateField(""Status"");
			ActivateField(""File Id"");
			ActivateField(""Assoc Start Id"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",marrOrdCnct[miCnt]);
//			SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""WITH SIM SUPPLIER""));
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) continue;
			
			miRecdItemCount++;
			SetFieldValue(""File Id"",msFileId);
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
		//	SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
			WriteRecord();
			
		}
		
		for(miPprCnt = 2;miPprCnt<getArrayLength(marrSIMIMSI[miCnt]);miPprCnt++) 
		{
			with(bcNumPaperItem)
			{
				ActivateField(""Paper Item Value"");
				ClearToQuery();
				SetSearchSpec(""Order Line Number Detail Id"",bcOrderLineNumbers.GetFieldValue(""Id"")); 
				SetSearchSpec(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt]));
				ExecuteQuery(ForwardOnly);
				blnsIsPaperItem = FirstRecord();
				if(!FirstRecord()) 
				{
					NewRecord(1);	
					SetFieldValue(""Order Line Number Detail Id"",bcOrderLineNumbers.GetFieldValue(""Id""));
					//SetFieldValue(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt-2]));//KT  14-06-06  commented as for new read file  format
				    SetFieldValue(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt]));
				}
				//SetFieldValue(""Paper Item Value"",marrSIMIMSI[miCnt][miPprCnt-2]);
				SetFieldValue(""Paper Item Value"",marrSIMIMSI[miCnt][miPprCnt]);
				WriteRecord();				
			}
		}

		with(bcNumberConcat) 
		{
				ActivateField(""Status"");
				ActivateField(""Associated Number"");
				
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",bcOrderLineNumbers.GetFieldValue(""Assoc Start Id""));
				ExecuteQuery(1);
				
				mbIsRecord = FirstRecord();
				while(mbIsRecord) {
					SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
				//	SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"")); KT 26-04-06
					WriteRecord();
					mbIsRecord = NextRecord();
				}
				
		}	
		
		with(bcNumberMaster) 
		{
			ActivateField(""SIM Card Id"");
			ActivateField(""Price"");			
			ActivateField(""Status"");
			ActivateField(""Block Id"");
			ActivateField(""Type Identifier"");
			ActivateField(""Number String With Checksum"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"", bcOrderLineNumbers.GetFieldValue(""Assoc Start Id""));
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) 
			{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD016"",marrInputParams[""P0_ref_number""]);
				TheApplication().RaiseErrorText(strErrVal);
			}
			
			while(mbIsRecord) 
			{
				if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
					SetFieldValue(""Number String With Checksum"",marrSIMIMSI[miCnt][1]);
				SetFieldValue(""SIM Card Id"",strSIMCrdId);			
				SetFieldValue(""Price"",strSIMCrdPrice);			
				SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
				//SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"")); KT 26-04-06
				WriteRecord();
				
				if(blnBlkUpdate) {
					with(psBlkInputs)
					{
						SetProperty(""Object Id"",GetFieldValue(""Block Id""));
						SetProperty(""From Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""WITH SIM SUPPLIER""));
						SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
					//	SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
					}
					
					bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
				}
				mbIsRecord = NextRecord();
			}
		}
		
		
	}

//	Update the Order Line Table for Quantity Recieved and Status fields

	with(bcOrderLine)
	{
		SetUserProperty(""Suppress OrdPreSetField"",""Y"");
		SetUserProperty(""SuppressWrite"",""Y"");
		SetFieldValue(""Quantity Received"",ToInteger(GetFieldValue(""Quantity Received"")) + miRecdItemCount);
		var test9 = (ToInteger(GetFieldValue(""Quantity Received""))+miRecdItemCount) ;
		if(ToInteger(GetFieldValue(""Quantity Ordered"")) <= ToInteger(GetFieldValue(""Quantity Received""))) 
		{
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""FULFILLED""));
			SetFieldValue(""Fulfilled Date"",dtCurrentDate);
			WriteRecord();
//			bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED""));
//			bcOrderUpd.WriteRecord();
		}
		else if(ToInteger(GetFieldValue(""Quantity Received"")) != 0) 
		{
//			bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
//			bcOrderUpd.WriteRecord();
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
			WriteRecord();
			
		}
		var mbIsRecord = FirstRecord();
		//MS 24-04-2006while(mbIsRecord) {
		if(mbIsRecord) {
			var mstrSrchExpr = ""[Status] <> '""+TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""FULFILLED"")+""'"";
			ClearToQuery();
			SetSearchExpr(mstrSrchExpr)
			ExecuteQuery();
			if(FirstRecord()) {
				bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
				bcOrderUpd.WriteRecord();
			
			}
			else {
				bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED""));
				bcOrderUpd.SetFieldValue(""Closed Date"",dtCurrentDate);
				bcOrderUpd.WriteRecord();
			}
		}
	}
	} catch(e){
		if(strErrVal == """") 
		{
			strErrVal = e.errText;
		} 
		
		throw (e);
		
	} finally {
	    bcSysPref           = null;
		boSysPref           = null;
		bcOrder				= null;
	    bcOrderUpd			= null;
	    bcOrderLine			= null;
	    bcOrderLineNumbers  = null;
	    bcNumberConcat		= null;
	    bcNumberMaster      = null;
	    bcOrderLineRecdInfo = null;
	    bcNumPaperItem		= null;
		boOrder 			= null;
		bcOrderLineQuery	= null;
		boOrderQuery		= null;
		bsRMSBlk            = null;
	    psBlkInputs			= null;
	    psBlkOutputs		= null;
	}
	
	return(strErrVal);*/
//above 1.1
}
"/**************************************************************************************
* Name          : SIM Order Business Service UpdateNumbers Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 20060710      1.1         Kalyana         Siebel ES SCR1, Objects Destroyed
**************************************************************************************/

function UpdateNumbersNew(&marrOrdCnct,&marrInputParams,&marrSIMIMSI,&mpsPprId,&marrNumTypes,msFileName)
{
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var boNMEnquiry			= TheApplication().GetBusObject(""RMS NM Number Enquiry"");     // Changed 06:06:2005
//	var bcNumberMaster      = boOrder.GetBusComp(""RMS SIM Order NM Number Master"");
	var bcNumberMaster      = boNMEnquiry.GetBusComp(""RMS NM Number Enquiry For Update""); // Changed 06:06:2005
	var boSIMNumber         = TheApplication().GetBusObject(""RMS SIM Number"");     // Changed 06:06:2005
	var bcNumPaperItem      = boSIMNumber.GetBusComp(""RMS SIM Number Paper Item""); // Changed 06:06:2005
//	var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Number Paper Item""); 
//	var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Order Paper Item"");
	var bcOrder				= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrderUpd			= boOrder.GetBusComp(""RMS SIM Order Update"");
	var bcOrderLine			= boOrder.GetBusComp(""RMS SIM Order Line Update"");
	var bcOrderLineNumbers  = boOrder.GetBusComp(""RMS SIM Order Line Num Info"");
	var bcNumberConcat		= boOrder.GetBusComp(""RMS SIM Order Association Number Type Display"");
	var bcOrderLineRecdInfo = boOrder.GetBusComp(""RMS SIM Order Line Recd Info"");
	var boOrderQuery		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	= boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");
	var boSysPref			= TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref			= boSysPref.GetBusComp(""System Preferences"");
	var bsRMSBlk            = TheApplication().GetService(""RMS RMS Block Calc"");
	var psBlkInputs			= TheApplication().NewPropertySet();
	var psBlkOutputs		= TheApplication().NewPropertySet();
	var miRecdItemCount 	= 0; 
	var mbIsRecord 			= false;
	var strErrVal			= """";
	var strSIMCrdId			= """";
	var strSIMCrdPrice = """";
	var strOrderId			= """";
	var blnsIsPaperItem = false; //KT 30-04-06
	var blnBlkUpdate		= false;
	var dtCurrentDate ;
	
	try
	{
	
	with(bcSysPref) {
		ActivateField(""Value"");
		ClearToQuery();
		SetSearchSpec(""Name"",""RMS_BLOCK_UPDATION"");
		SetSearchSpec(""Value"",""Y"");
		ExecuteQuery(ForwardOnly);
		if(FirstRecord())
			blnBlkUpdate	= true;
	}
	with(bcOrderLineQuery) 
	{
		
		ActivateField(""Order Id"");
		ClearToQuery();
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		//SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		SetSearchSpec(""Order Line Id"",marrNumTypes[iOrdLineId]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strOrderId = GetFieldValue(""Order Id"");
	}

	with(bcOrder) 
	{
		SetViewMode(3);
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ActivateField(""Closed Date"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId);
	//	SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""]); KT 24-04-2006
		SetSearchSpec(""Revision Number"",1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);	
		} 
		dtCurrentDate = GetFieldValue(""Current Date"");
	}
	
	with(bcOrderUpd) 
	{
		SetViewMode(3);
		ActivateField(""Status"");
		ActivateField(""Current Date"");
		ActivateField(""Closed Date"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId);
		//SetSearchSpec(""Order Number"",marrInputParams[""PO_ref_number""])
		SetSearchSpec(""Revision Number"",1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		dtCurrentDate = GetFieldValue(""Current Date"");
	}
	
	with(bcOrderLine) 
	{
		ActivateField(""Status"");
		ActivateField(""Id"");
		ActivateField(""Quantity Received"");
		ActivateField(""Fulfilled Date"");
		ActivateField(""SIM Card Config Id"");	
		ActivateField(""SIM Card Price"");
		ClearToQuery();
		//SetSearchSpec(""SIM Card Config Type"",marrInputParams[""Type""]);
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		//SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
	  	  SetSearchSpec(""Order Line Id"",marrNumTypes[iOrdLineId]);
		//SetSearchSpec(""Profile"",marrInputParams[""Profile""]);  KT 24-04-2006
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]); 
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strSIMCrdId = GetFieldValue(""SIM Card Config Id"");
		strSIMCrdPrice = GetFieldValue(""SIM Card Price"");
	}
	
	var miCnt = 0;
	var miPprCnt = 0;
	
	var msFileId = UpdateFile(""I"","""",msFileName,bcOrderUpd.GetFieldValue(""Id""));

//	Update the Order Line Recieved Info Table	

	with(bcOrderLineRecdInfo) {
		ActivateField(""Quantity Received"");
		SetSearchSpec(""Order Id"",bcOrder.GetFieldValue(""Id""));
		SetSearchSpec(""Order Line Id"",bcOrderLine.GetFieldValue(""Id""));
		SetSearchSpec(""Input File Info Id"",msFileId);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord()) {
			SetFieldValue(""Quantity Received"",(ToNumber(GetFieldValue(""Quantity Received"")) + ToNumber(getArrayLength(marrOrdCnct))));
			WriteRecord();
		} else {
			NewRecord(1);
			SetFieldValue(""Input File Info Id"",msFileId);
			SetFieldValue(""Order Id"",bcOrder.GetFieldValue(""Id""));
			SetFieldValue(""Order Line Id"",bcOrderLine.GetFieldValue(""Id""));
			SetFieldValue(""Quantity Received"",getArrayLength(marrOrdCnct));
			WriteRecord();
		}
	}
	
	for(miCnt =0; miCnt < getArrayLength(marrOrdCnct);miCnt++) 
	   {
		with(bcOrderLineNumbers) 
		{
			ActivateField(""Status"");
			ActivateField(""File Id"");
			ActivateField(""Assoc Start Id"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",marrOrdCnct[miCnt]);
			var test9 = marrOrdCnct[miCnt];
//			SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""WITH SIM SUPPLIER""));
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) continue;
			
			miRecdItemCount++;
			SetFieldValue(""File Id"",msFileId);
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
		//	SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
			WriteRecord();
			
		}
		
		for(miPprCnt = 2;miPprCnt<getArrayLength(marrSIMIMSI[miCnt]);miPprCnt++) 
		{
			with(bcNumPaperItem)
			{
				ActivateField(""Paper Item Value"");
				ClearToQuery();
				SetSearchSpec(""Order Line Number Detail Id"",bcOrderLineNumbers.GetFieldValue(""Id"")); 
				SetSearchSpec(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt+iPprItemIndxL]));
				var test10 = mpsPprId.GetProperty(marrNumTypes[miPprCnt+iPprItemIndxL]);
				ExecuteQuery(ForwardOnly);
				blnsIsPaperItem = FirstRecord();
				if(!FirstRecord()) 
				{
					NewRecord(1);	
					SetFieldValue(""Order Line Number Detail Id"",bcOrderLineNumbers.GetFieldValue(""Id""));
					SetFieldValue(""Paper Item Id"",mpsPprId.GetProperty(marrNumTypes[miPprCnt+iPprItemIndxL]));
				}
				SetFieldValue(""Paper Item Value"",marrSIMIMSI[miCnt][miPprCnt]);
				WriteRecord();				
			}
		}

		with(bcNumberConcat) 
		{
				ActivateField(""Status"");
				ActivateField(""Associated Number"");
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",bcOrderLineNumbers.GetFieldValue(""Assoc Start Id""));
				//ExecuteQuery(1);
				ExecuteQuery(ForwardOnly);
				mbIsRecord = FirstRecord();
				while(mbIsRecord) {
					SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
				//	SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"")); KT 26-04-06
					WriteRecord();
					mbIsRecord = NextRecord();
				}
				
		}	
		
		with(bcNumberMaster) 
		{
			ActivateField(""SIM Card Id"");
			ActivateField(""Price"");			
			ActivateField(""Status"");
			ActivateField(""Block Id"");
			ActivateField(""Type Identifier"");
			ActivateField(""Number String With Checksum"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"", bcOrderLineNumbers.GetFieldValue(""Assoc Start Id""));
			ExecuteQuery(ForwardOnly);
			mbIsRecord = FirstRecord();
			if(!mbIsRecord) 
			{
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD016"",marrInputParams[""P0_ref_number""]);
				TheApplication().RaiseErrorText(strErrVal);
			}
			
			while(mbIsRecord) 
			{
				if(GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
				//SetFieldValue(""Number String With Checksum"",marrSIMIMSI[miCnt][1]);
				SetFieldValue(""Number String With Checksum"",marrSIMIMSI[miCnt][0]);  //  change  as per  new  file format
				SetFieldValue(""SIM Card Id"",strSIMCrdId);			
				SetFieldValue(""Price"",strSIMCrdPrice);			
				SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
				//SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"")); KT 26-04-06
				WriteRecord();
				
				if(blnBlkUpdate) {
					with(psBlkInputs)
					{
						SetProperty(""Object Id"",GetFieldValue(""Block Id""));
						SetProperty(""From Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""WITH SIM SUPPLIER""));
						SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""UNREGISTERED""));
					//	SetProperty(""To Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE""));
					}
					
					bsRMSBlk.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
				}
				mbIsRecord = NextRecord();
			}
		}
		
		
	}

//	Update the Order Line Table for Quantity Recieved and Status fields

	with(bcOrderLine)
	{
		SetUserProperty(""Suppress OrdPreSetField"",""Y"");
		SetUserProperty(""SuppressWrite"",""Y"");
		SetFieldValue(""Quantity Received"",ToInteger(GetFieldValue(""Quantity Received"")) + miRecdItemCount);
		var test9 = (ToInteger(GetFieldValue(""Quantity Received""))+miRecdItemCount) ;
		if(ToInteger(GetFieldValue(""Quantity Ordered"")) <= ToInteger(GetFieldValue(""Quantity Received""))) 
		{
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""FULFILLED""));
			SetFieldValue(""Fulfilled Date"",dtCurrentDate);
			WriteRecord();
//			bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED""));
//			bcOrderUpd.WriteRecord();
		}
		else if(ToInteger(GetFieldValue(""Quantity Received"")) != 0) 
		{
//			bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
//			bcOrderUpd.WriteRecord();
			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
			WriteRecord();
			
		}
		var mbIsRecord = FirstRecord();
		//MS 24-04-2006while(mbIsRecord) {
		if(mbIsRecord) {
			var mstrSrchExpr = ""[Status] <> '""+TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""FULFILLED"")+""'"";
			ClearToQuery();
			SetSearchExpr(mstrSrchExpr)
			ExecuteQuery();
			if(FirstRecord()) {
				bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""PARTIALLY FULFILLED""));
				bcOrderUpd.WriteRecord();
			
			}
			else {
				bcOrderUpd.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED""));
				bcOrderUpd.SetFieldValue(""Closed Date"",dtCurrentDate);
				bcOrderUpd.WriteRecord();
			}
		}
	}
	} catch(e){
		if(strErrVal == """") 
		{
			strErrVal = e.errText;
		} 
		
		throw (e);
		
	} finally {

		bcOrder				= null;
	    bcOrderUpd			= null;
	    bcOrderLine			= null;
	    bcOrderLineNumbers  = null;
	    bcNumberConcat		= null;
	    bcNumberMaster      = null;
	    bcOrderLineRecdInfo = null;
	    bcNumPaperItem		= null;
		bcOrderLineQuery	= null;
		boOrder 			= null;
		boOrderQuery		= null;
//below 1.1 
		bcSysPref           = null;
		boNMEnquiry         = null;
		boSIMNumber         = null;
		boSysPref           = null;
//above 1.1
		bsRMSBlk            = null;
	    psBlkInputs			= null;
	    psBlkOutputs		= null;
	}
	return(strErrVal);
}
"/**************************************************************************************
* Name          : SIM Order Business Service ValidateOrder Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 27/07/2005    1.1         MBT             Updated (Changes for    27/07/2005		  *	
      	                                     mulitples IMSI in same file)   
* 20060710      1.2         Kalyana          Commented   entire  function  for future  use    
**************************************************************************************/

function ValidateOrder(&marrInputParams,&marrSIMIMSI,&marrNumTypes,&marrOrdCnct,&mpsPprId,&marrError)
{
//below 1.2
/*	
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderHdr 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrderLine			= boOrder.GetBusComp(""RMS SIM Order Line"");
	var bcOrderLineNum		= boOrder.GetBusComp(""RMS SIM Order Line Num Info"");
	
	var boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumEnqUpdate	= boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update"");
	
	var boOrderQuery		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	= boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");

//  var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Number Paper Item"");
		
	var mbIsRecord 			= false;
	var mpsSIM 				= TheApplication().NewPropertySet();
	var mpsIMSI 			= TheApplication().NewPropertySet();
	
	var miCnt 				= 0;
	var msNumber 			= """";
	var miErrCnt			= 0;
	var mpsPprItem 			= TheApplication().NewPropertySet();
	var strStatus 			= """";
	var strErrVal			= """";
	var psError 			= TheApplication().NewPropertySet();
	var marrNumIMSI			= new Array();
//  var marrOrdCnct = new Array();
	var strOrderId			= """";
	var strNumHandle		= """";
	var intCheckSumLen		= 1;
	var mbError 			= false;
	var msSIM="""";
	
	try {

	with(bcOrderLineQuery) 
	{

		ActivateField(""Order Id"");
		ClearToQuery();
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
			TheApplication().RaiseErrorText(strErrVal);
		}
		strOrderId = GetFieldValue(""Order Id"");
	}

	//Query the database with the Order Number				
	with(bcOrderHdr) {
		SetViewMode(AllView);
		ActivateField(""Id"");
		ActivateField(""Status"");
		ActivateField(""Order Number"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId) 
		//SetSearchSpec(""Revision Number"",1);
  	    //SetSearchSpec(""Profile"",marrInputParams[""Profile""]); 
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]);
		
		ExecuteQuery();
	}
//  If query is returning no records then set the Comments property and exit
	if(!bcOrderHdr.FirstRecord()) 
	{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",marrInputParams[""P0_ref_number""]);
		marrError[miErrCnt++] = strErrVal;
		TheApplication().RaiseErrorText(strErrVal);
	} 
	else if(bcOrderHdr.GetFieldValue(""Status"") == TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED"")) 
	{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD017"",bcOrderHdr.GetFieldValue(""Order Number""));
		marrError[miErrCnt++] =  strErrVal;
		TheApplication().RaiseErrorText(strErrVal);
	} 
	else 
	{
		strStatus = bcOrderHdr.GetFieldValue(""Status"");
	}
	
//   Set the Status parameter

	with(bcOrderLine) {
		ActivateField(""Id"");
		ClearToQuery();
		var temp2 = marrInputParams[""Profile""];
		var temp4 =	marrInputParams[""Transport_Key""];
		//SetSearchSpec(""SIM Card Config Type"",marrInputParams[""Type""]);
		//SetSearchSpec(""Profile"",marrInputParams[""Profile""]);
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]);
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
	}
	
	if(!mbIsRecord) {
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD015"",marrInputParams[""P0_ref_number""]);
		marrError[miErrCnt++] =  strErrVal;
		TheApplication().RaiseErrorText(strErrVal);
	}
	
	var bcPaperItem	= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");	
	
//Query the Paper Item table corresponding to the Order Id

	with(bcPaperItem) {
		SetViewMode(AllView);
		ActivateField(""Paper Item Id"");
		ActivateField(""Length"");
		ActivateField(""Paper Item Name"");
		
		ClearToQuery();
		ExecuteQuery(1);
		mbIsRecord = FirstRecord();
		//if(!mbIsRecord) return """";
	}
	
	while(mbIsRecord) 
	{
		mpsPprItem.SetProperty(bcPaperItem.GetFieldValue(""Paper Item Name""),bcPaperItem.GetFieldValue(""Length""));
		mpsPprId.SetProperty(bcPaperItem.GetFieldValue(""Paper Item Name""),bcPaperItem.GetFieldValue(""Paper Item Id""));
		mbIsRecord = bcPaperItem.NextRecord();
	}
	
	with(bcOrderLineNum) 
	{
		//ActivateField(""Assoc Start Id"");
		ActivateField(""Id"");
		ActivateField(""Numbers"");
		ActivateField(""Concatenated Number Types"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Status"");
		ClearToQuery();
		ExecuteQuery();
		mbIsRecord = FirstRecord();
		
	}

/*	with(RMS SIM Number Paper Item) {
		ActivateField(); } */

//above 1.2
// below 1.2
/*	
var marrCnctNum = new Array();

	while(mbIsRecord) {
		msNumber = bcOrderLineNum.GetFieldValue(""Numbers"");
		marrCnctNum = msNumber.split("" / "");
		
		if(getArrayLength(marrCnctNum)>1) 
		{
//		Checking whether the input numbers are having delimiters. if yes then remove the delimiters
			if(isNaN(ToNumber(marrCnctNum[0])))
				mpsSIM.SetProperty(CleanNumber(marrCnctNum[0]),bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			else {
								
				mpsSIM.SetProperty(marrCnctNum[0],ToString(bcOrderLineNum.GetFieldValue(""Assoc Start Id"")));
			
			}
//		Checking whether the input numbers are having delimiters. if yes then remove the delimiters
			if(isNaN(ToNumber(marrCnctNum[1])))
				mpsIMSI.SetProperty(CleanNumber(marrCnctNum[1]),bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			else
				mpsIMSI.SetProperty(marrCnctNum[1],bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			
		}
		mbIsRecord = bcOrderLineNum.NextRecord();
	}
	var temp = marrInputParams[""IMSI""];
	marrNumIMSI = marrInputParams[""IMSI""].split("" / "");
	var msSIMLoc = getArrayLength(marrNumIMSI);
	//checking for SIM and IMSI numbers retrieved
	for(miCnt =0;miCnt < getArrayLength(marrSIMIMSI);miCnt++) 
	{
		marrError[miCnt] = """";
		var msSIM = marrSIMIMSI[miCnt][msSIMLoc];
		var msSIMNoCS = msSIM.substring(0,msSIM.length-1);

		
// Checking the SIM,Checksum,IMSI & SIM/IMSI Association

	
/*		if(!mpsSIM.PropertyExists(msSIMNoCS))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD010"") + msSIM;
			mbError = true;
			continue;
		}*/
		
//		var temp  = msSIM.substring(msSIM.length-1);
//		var temp1 =	ChecksumNumber(msSIMNoCS);
		
/*		if(msSIM.substring(msSIM.length-1) != ChecksumNumber(msSIMNoCS))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD011"") + msSIM;
			mbError = true;
			continue;		
		}
		if(!mpsIMSI.PropertyExists(marrSIMIMSI[miCnt][0]))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD012"") + marrSIMIMSI[miCnt][0];
			mbError = true;
			continue;
		
		}
		if(mpsSIM.GetProperty(msSIMNoCS) != (mpsIMSI.GetProperty(marrSIMIMSI[miCnt][0])))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][0];
			mbError = true;
			continue;		
		}*/
		

            //Check whether the numbers exists in RMS system
//above 1.2
//below 1.2
/*
		    with(bcNumEnqUpdate) {
			//ActivateField(""Number String With Checksum"");
			ActivateField(""Number String"");
			ActivateField(""Status"");
			for(var i = 0;i<getArrayLength(marrSIMIMSI[miCnt]);i++) {
					if(msSIMLoc >= i) {
					strNumHandle = marrSIMIMSI[miCnt][i];
					ClearToQuery();
					//SetSearchSpec(""Number String With Checksum"",marrSIMIMSI[miCnt][i]);
					if(msSIMLoc == i)
						SetSearchSpec(""Number String"",strNumHandle.substring(0,(strNumHandle.length - intCheckSumLen)));
					else 
						SetSearchSpec(""Number String"",strNumHandle);
					ExecuteQuery();
					if(!FirstRecord()) {
						marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][i];
						mbError = true;
						continue;
							}
				//Checking  whether some or all  number's are already received.
				else
				{
				if(bcNumEnqUpdate.GetFieldValue(""Status"")!= TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""WITH SIM SUPPLIER""))
				{
				marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder003"",marrSIMIMSI[miCnt][0]);
				mbError = true;
				}
				}	
				}
			    }
		        }	
			
/*			ClearToQuery();
			SetSearchSpec(""Number String With Checksum"",msSIM);
			ExecuteQuery();
			
			if(FirstRecord()) {
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",GetFieldValue(""Id""));
				ExecuteQuery();
				var mblnIsRecord = FirstRecord();
				var blnChkNumExists = false;
				while(mblnIsRecord) {
					for(var i = 0;i<getArrayLength(marrSIMIMSI[miCnt]);i++) {
						if(marrSIMIMSI[miCnt][i] == GetFieldValue(""Number String With Checksum"")) {
							blnChkNumExists = true;
							break;
						}
					}
					if(blnChkNumExists = false) {
						marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][i];
						mbError = true;
						continue;
					}
					mblnIsRecord = NextRecord();
				}
			}
		}*/

	
		//marrOrdCnct[miCnt] = mpsSIM.GetProperty(msSIM);
//abobe 1.2
//below 1.2
/*
		marrOrdCnct[miCnt] = mpsSIM.GetProperty(msSIMNoCS);
		
	}
			
	   		//Checking   whether all  Paper Item Values  are retrieved or not  KT 30-05-06
			for(var i=0;i<getArrayLength(marrOrdCnct);i++)
	   		var temp = marrOrdCnct[i];
	   		var miNumCnt = 0;
	  		for(miCnt =0;miCnt < getArrayLength(marrSIMIMSI);miCnt++) {
		 	var SImNum = marrSIMIMSI[miCnt][0];
			//if(getArrayLength(marrSIMIMSI[miCnt])< (getArrayLength(marrNumTypes)+2))
			if(getArrayLength(marrSIMIMSI[miCnt])< (getArrayLength(marrNumTypes)))
			{
			//var arrLengthDiff = (getArrayLength(marrNumTypes)+2)-getArrayLength(marrSIMIMSI[miCnt]);
			//var arrLengthDiff = (getArrayLength(marrNumTypes))-getArrayLength(marrSIMIMSI[miCnt]);
			var PprItemName ="""";
			/*if(arrLengthDiff > 1)
			{*/
//abobe 1.2
//below 1.2	
/*		
			for(var j=getArrayLength(marrSIMIMSI[miCnt]);j<getArrayLength(marrNumTypes);j++)
			{
			//var PprItemName ="""";
			//PprItemName = marrNumTypes[j-2]+ ""/""+marrNumTypes[j-1];
			if(PprItemName== """")
			{
            PprItemName= marrNumTypes[j];
			}
			else
			{
			PprItemName=PprItemName+"",""+marrNumTypes[j];
			}
			}
			marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder002"",PprItemName,SImNum)+ "":"";	
			mbError = true;
			}
			/*else
			{
			PprItemName = marrNumTypes[getArrayLength(marrNumTypes)-1];
			marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder002"",PprItemName,SImNum)+ "":"";
			mbError = true;
			}
			}*/
			//Checking for the length of paper items retrieved
//above 1.2 
//below 1.2
/*
			for(miNumCnt = 2;miNumCnt < getArrayLength(marrSIMIMSI[miCnt]);miNumCnt++) {
			msNumber = marrSIMIMSI[miCnt][miNumCnt];
			var testlength = mpsPprItem.GetProperty(marrNumTypes[miNumCnt-2]);
			var numlength = msNumber.length;
			//if(msNumber.length != mpsPprItem.GetProperty(marrNumTypes[miNumCnt-2])){// changed as per new file format
				if(msNumber.length != mpsPprItem.GetProperty(marrNumTypes[miNumCnt])){ 
				marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSORD018"",marrNumTypes[miNumCnt],msNumber,SImNum) + "":"";	
				mbError = true;
				continue;
			} 
		    }
		    }
	        } catch(e) {
		    mbError = true;
		    if(strErrVal != """") {
			throw (e);
		    } else {
			var temp = e.errText;
			marrError[miErrCnt++] =  e.errText;	
		    }
		
	        } finally {
		    bcOrderLineNum	= null;
		    bcOrderLine		= null;
		    bcOrderHdr		= null;
		    boOrder			= null;
		    mpsSIM			= null;
		    mpsIMSI			= null;
		    mpsPprItem		= null;
		    psError			= null;
	        }
	        //return bcOrderHdr.GetFieldValue(""Id"");
	        return (!mbError);
*/
//above 1.2
            }
"/**************************************************************************************
* Name          : SIM Order Business Service ValidateOrder Method 					  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 27/07/2005    1.1         MBT             Updated (Changes for    27/07/2005		  *	
*											mulitples IMSI in same file)   

* 20060710      1.2         Kalyana         Siebel ES SCR1, Objects Destroyed  
* 20061202      1.3         Kalyana         Added validation for invalid batch             
**************************************************************************************/

function ValidateOrderNew(&marrInputParams,&marrSIMIMSI,&marrNumTypes,&marrOrdCnct,&mpsPprId,&marrError)
{
	
	var boOrder 			= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderHdr 			= boOrder.GetBusComp(""RMS SIM Order"");
	var bcOrderLine			= boOrder.GetBusComp(""RMS SIM Order Line"");
	var bcOrderLineNum		= boOrder.GetBusComp(""RMS SIM Order Line Num Info"");
	var boNumEnq 			= TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumEnqUpdate	= boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update"");
	var boOrderQuery		= TheApplication().GetBusObject(""RMS SIM Order"");
	var bcOrderLineQuery	= boOrderQuery.GetBusComp(""RMS SIM Order Line Update"");
//  var bcNumPaperItem		= boOrder.GetBusComp(""RMS SIM Number Paper Item"");
	var mbIsRecord 			= false;
	var mpsSIM 				= TheApplication().NewPropertySet();
	var mpsIMSI 			= TheApplication().NewPropertySet();
	var miCnt 				= 0;
	var msNumber 			= """";
	var miErrCnt			= 0;
	var mpsPprItem 			= TheApplication().NewPropertySet();
	var strStatus 			= """";
	var strErrVal			= """";
	var psError 			= TheApplication().NewPropertySet();
	var marrNumIMSI			= new Array();
//  var marrOrdCnct = new Array();
	var strOrderId			= """";
	var strNumHandle		= """";
	var intCheckSumLen		= 1;
	var mbError 			= false;
	var msSIM="""";
	//1.4
	//var iArrErrCnt			= ToNumber(TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""ERROR_CNT""));
	//var sPORefId			= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_POREFID"");
	//var sOrdLineId			= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_ORD_LINEID"");
	//var sPprItemIndxL		= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_PPRITMIDXL"");
	//var sPprItemIndxR		= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_PPRITMIDXR"");
	//var sPprItemIndxCnt		= TheApplication().InvokeMethod(""LookupValue"",""RMS_ORDER_ADMIN"",""POS_PPRITMIDXCNT"");
	
	//var iPORefId			= ToNumber(sPORefId.substring(2));
	//var iOrdLineId			= ToNumber(sOrdLineId.substring(2));
	//var iPprItemIndxL		= ToNumber(sPprItemIndxL.substring(2));
	//var iPprItemIndxR		= ToNumber(sPprItemIndxR.substring(2));
	//var iPprItemIndxCnt		= ToNumber(sPprItemIndxCnt.substring(2));
	//1.4
//below  1.2	
	var bcPaperItem	= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");
//above  1.2
	try {

	with(bcOrderLineQuery) 
	{

		ActivateField(""Order Id"");
		ClearToQuery();
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		//SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		SetSearchSpec(""Order Line Id"",marrNumTypes[iOrdLineId]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		if(!mbIsRecord) {
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder010"",marrNumTypes[iOrdLineId]);
			marrError[miErrCnt++] = strErrVal;
			return (mbError);
			//TheApplication().RaiseErrorText(strErrVal);
		}
		strOrderId = GetFieldValue(""Order Id"");
	}

	//Query the database with the Order Number				
	with(bcOrderHdr) {
		SetViewMode(AllView);
		ActivateField(""Id"");
		ActivateField(""Status"");
		ActivateField(""Order Number"");
		ActivateField(""PO Requisition Ref Number"");
		ClearToQuery();
		SetSearchSpec(""Id"",strOrderId) 
		//SetSearchSpec(""Revision Number"",1);
  	    //SetSearchSpec(""Profile"",marrInputParams[""Profile""]); 
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]);
		//ExecuteQuery();
		ExecuteQuery(ForwardOnly);
	}
//  If query is returning no records then set the Comments property and exit
	if(!bcOrderHdr.FirstRecord()) 
	{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",strOrderId);
		marrError[miErrCnt++] = strErrVal;
		return (mbError);
		//TheApplication().RaiseErrorText(strErrVal);
	} 
	else if(bcOrderHdr.GetFieldValue(""Status"") == TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDER_STATUS"",""COMPLETED"")) 
	{
		//strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD017"",bcOrderHdr.GetFieldValue(""Order Number""));
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder011"",bcOrderHdr.GetFieldValue(""Order Number""));
		marrError[miErrCnt++] =  strErrVal;
		return (mbError);
		//TheApplication().RaiseErrorText(strErrVal);
	} 
	//else if(bcOrderHdr.GetFieldValue(""PO Requisition Ref Number"") != marrNumTypes[1])
	else if(bcOrderHdr.GetFieldValue(""PO Requisition Ref Number"") != marrNumTypes[iPORefId])
	{
	strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder008"",marrNumTypes[iPORefId],bcOrderHdr.GetFieldValue(""Order Number""));
	marrError[miErrCnt++] =  strErrVal;
	return (mbError);
	}
	else 
	{
		strStatus = bcOrderHdr.GetFieldValue(""Status"");
	}
	
//   Set the Status parameter

	with(bcOrderLine) {
		ActivateField(""Id"");
		ClearToQuery();
		//var temp2 = marrInputParams[""Profile""];
		//var temp4 =	marrInputParams[""Transport_Key""];
		//SetSearchSpec(""SIM Card Config Type"",marrInputParams[""Type""]);
		//SetSearchSpec(""Profile"",marrInputParams[""Profile""]);
		//SetSearchSpec(""Transport Key"",marrInputParams[""Transport_Key""]);
		//SetSearchSpec(""Id"",marrInputParams[""PO_ref_number""]);
		//SetSearchSpec(""Order Line Id"",marrInputParams[""Batch""]);
		//SetSearchSpec(""Order Line Id"",marrNumTypes[4]);//KT 15-06-06   for  new read
		SetSearchSpec(""Order Line Id"",marrNumTypes[iOrdLineId]);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
	}
	
	if(!mbIsRecord) {
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder010"",marrNumTypes[iOrdLineId]);
			marrError[miErrCnt++] = strErrVal;
			return (mbError);
	}
//below 1.2	
	//var bcPaperItem	= boOrder.GetBusComp(""RMS SIM Order Paper Item Display"");	
//above 1.2 
//Query the Paper Item table corresponding to the Order Id

	with(bcPaperItem) {
		SetViewMode(AllView);
		ActivateField(""Paper Item Id"");
		ActivateField(""Length"");
		ActivateField(""Paper Item Name"");
		ClearToQuery();
		//ExecuteQuery(1);
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		//if(!mbIsRecord) return """";
                       }
	
	while(mbIsRecord) 
	{
		mpsPprItem.SetProperty(bcPaperItem.GetFieldValue(""Paper Item Name""),bcPaperItem.GetFieldValue(""Length""));
		mpsPprId.SetProperty(bcPaperItem.GetFieldValue(""Paper Item Name""),bcPaperItem.GetFieldValue(""Paper Item Id""));
		mbIsRecord = bcPaperItem.NextRecord();
	}
	
	with(bcOrderLineNum) 
	{
		//ActivateField(""Assoc Start Id"");
		ActivateField(""Id"");
		ActivateField(""Numbers"");
		ActivateField(""Concatenated Number Types"");
		ActivateField(""Assoc Start Id"");
		ActivateField(""Status"");
		ClearToQuery();
		//1.4
		SetSearchSpec(""NumberString"","">='"" + msFileStartNum + ""' AND [NumberString] <= '"" + msFileEndNum +""'"");
		//1.4
		//ExecuteQuery();
		ExecuteQuery(ForwardOnly);
		mbIsRecord = FirstRecord();
		
	}

/*	with(RMS SIM Number Paper Item) {
		ActivateField(); } */
	var marrCnctNum = new Array();

	while(mbIsRecord) {
		msNumber = bcOrderLineNum.GetFieldValue(""Numbers"");
		marrCnctNum = msNumber.split("" / "");
		
		if(getArrayLength(marrCnctNum)>1) 
		{
//		Checking whether the input numbers are having delimiters. if yes then remove the delimiters
			if(isNaN(ToNumber(marrCnctNum[0])))
				mpsSIM.SetProperty(CleanNumber(marrCnctNum[0]),bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			else {
								
				mpsSIM.SetProperty(marrCnctNum[0],ToString(bcOrderLineNum.GetFieldValue(""Assoc Start Id"")));
			
			}
//		Checking whether the input numbers are having delimiters. if yes then remove the delimiters
			if(isNaN(ToNumber(marrCnctNum[1])))
				mpsIMSI.SetProperty(CleanNumber(marrCnctNum[1]),bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			else
				mpsIMSI.SetProperty(marrCnctNum[1],bcOrderLineNum.GetFieldValue(""Assoc Start Id""));
			
		}
		mbIsRecord = bcOrderLineNum.NextRecord();
	}
	//var temp = marrInputParams[""IMSI""];
	//marrNumIMSI = marrInputParams[""IMSI""].split("" / "");
	marrNumIMSI[0] = marrSIMIMSI[0][1];// change
	var msSIMLoc = getArrayLength(marrNumIMSI);
	//checking for SIM and IMSI numbers retrieved
	for(miCnt =0;miCnt < getArrayLength(marrSIMIMSI);miCnt++) 
	{
		if(miCnt == 0) //1.4 for avoiding error in getArrayCnt
			marrError[miCnt] = """";
		//var msSIM = marrSIMIMSI[miCnt][msSIMLoc];
		var msSIM = marrSIMIMSI[miCnt][0];
		var msSIMNoCS = msSIM.substring(0,msSIM.length-1);
		
		
// Checking the SIM,Checksum,IMSI & SIM/IMSI Association

	//below 1.3
		if(!mpsSIM.PropertyExists(msSIMNoCS))
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder012"",msSIMNoCS,marrNumTypes[iOrdLineId]);
			marrError[miErrCnt++] = strErrVal;
			mbError = true;
	    }
	//above 1.3	
//		var temp  = msSIM.substring(msSIM.length-1);
//		var temp1 =	ChecksumNumber(msSIMNoCS);
		
/*		if(msSIM.substring(msSIM.length-1) != ChecksumNumber(msSIMNoCS))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD011"") + msSIM;
			mbError = true;
			continue;		
		}
		if(!mpsIMSI.PropertyExists(marrSIMIMSI[miCnt][0]))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD012"") + marrSIMIMSI[miCnt][0];
			mbError = true;
			continue;
		
		}
		if(mpsSIM.GetProperty(msSIMNoCS) != (mpsIMSI.GetProperty(marrSIMIMSI[miCnt][0])))
		{
			marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][0];
			mbError = true;
			continue;		
		}*/
		

            //Check whether the numbers exists in RMS system
		    with(bcNumEnqUpdate) {
				//ActivateField(""Number String With Checksum"");
				ActivateField(""Number String"");
				ActivateField(""Status"");
				for(var i = 0;i<getArrayLength(marrSIMIMSI[miCnt]);i++) {
					if(msSIMLoc >= i) {
						strNumHandle = marrSIMIMSI[miCnt][i];
						//strNumHandle = marrSIMIMSI[miCnt][0];
						ClearToQuery();
						//SetSearchSpec(""Number String With Checksum"",marrSIMIMSI[miCnt][i]);
						if(msSIMLoc == i)
							//SetSearchSpec(""Number String"",strNumHandle.substring(0,(strNumHandle.length - intCheckSumLen)));
							SetSearchSpec(""Number String"",strNumHandle);  // Change for New  read 
						else 
							SetSearchSpec(""Number String"",strNumHandle.substring(0,(strNumHandle.length - intCheckSumLen)));
							//SetSearchSpec(""Number String"",strNumHandle);
						//ExecuteQuery();
						ExecuteQuery(ForwardOnly);
						if(!FirstRecord()) {
							marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD016"",marrSIMIMSI[miCnt][i]);
							mbError = true;
						} //End of if(!FirstRecord())
						//Checking  whether some or all  number's are already received.
						else
						{
							if(bcNumEnqUpdate.GetFieldValue(""Status"")!= TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""WITH SIM SUPPLIER""))
							{
								marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder003"",marrSIMIMSI[miCnt][0]);
								mbError = true;
							}
						} //if	
					}//if
					if(miErrCnt>iArrErrCnt) {
						TheApplication().RaiseErrorText(""ERROR"");
					}
			 	}//for
		 	}//with
			
/*			ClearToQuery();
			SetSearchSpec(""Number String With Checksum"",msSIM);
			ExecuteQuery();
			
			if(FirstRecord()) {
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",GetFieldValue(""Id""));
				ExecuteQuery();
				var mblnIsRecord = FirstRecord();
				var blnChkNumExists = false;
				while(mblnIsRecord) {
					for(var i = 0;i<getArrayLength(marrSIMIMSI[miCnt]);i++) {
						if(marrSIMIMSI[miCnt][i] == GetFieldValue(""Number String With Checksum"")) {
							blnChkNumExists = true;
							break;
						}
					}
					if(blnChkNumExists = false) {
						marrError[miErrCnt++] = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD013"") + marrSIMIMSI[miCnt][i];
						mbError = true;
						continue;
					}
					mblnIsRecord = NextRecord();
				}
			}
		}*/

	
		//marrOrdCnct[miCnt] = mpsSIM.GetProperty(msSIM);
		marrOrdCnct[miCnt] = mpsSIM.GetProperty(msSIMNoCS);
		var test786 = getArrayLength(marrOrdCnct);
		
	}
			
	   		//Checking   whether all  Paper Item Values  are retrieved or not  KT 30-05-06
			for(var i=0;i<getArrayLength(marrOrdCnct);i++)
			{
	   			var temp = marrOrdCnct[i];
	   			var miNumCnt = 0;
	  			for(miCnt =0;miCnt < getArrayLength(marrSIMIMSI);miCnt++) {
				var SImNum = marrSIMIMSI[miCnt][0];
				//if(getArrayLength(marrSIMIMSI[miCnt])< (getArrayLength(marrNumTypes)+2))
				if(getArrayLength(marrSIMIMSI[miCnt])< (getArrayLength(marrNumTypes)-iPprItemIndxCnt))//KT 23-06-06
				{
					//var arrLengthDiff = (getArrayLength(marrNumTypes)+2)-getArrayLength(marrSIMIMSI[miCnt]);
					//var arrLengthDiff = (getArrayLength(marrNumTypes))-getArrayLength(marrSIMIMSI[miCnt]);
					var PprItemName ="""";
					/*if(arrLengthDiff > 1)
					{*/
					for(var j=(getArrayLength(marrSIMIMSI[miCnt]))+iPprItemIndxL;(j<getArrayLength(marrNumTypes)-iPprItemIndxR);j++)//KT 23-06-06
					{
						//var PprItemName ="""";
						//PprItemName = marrNumTypes[j-2]+ ""/""+marrNumTypes[j-1];
						if(PprItemName== """")
						{
            				PprItemName= marrNumTypes[j];
						}
						else
						{
							PprItemName=PprItemName+"",""+marrNumTypes[j];
						}
						marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder002"",PprItemName,SImNum)+ "":"";	
						mbError = true;
						if(miErrCnt>iArrErrCnt) {
							TheApplication().RaiseErrorText(""ERROR"");
						}
					}
				}
				/*else
				{
					PprItemName = marrNumTypes[getArrayLength(marrNumTypes)-1];
					marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder002"",PprItemName,SImNum)+ "":"";
					mbError = true;
				}
				}*/
				//Checking for the length of paper items retrieved
				for(miNumCnt = 2;miNumCnt < getArrayLength(marrSIMIMSI[miCnt]);miNumCnt++) {
					msNumber = marrSIMIMSI[miCnt][miNumCnt];
					//if(msNumber.length != mpsPprItem.GetProperty(marrNumTypes[miNumCnt-2])){// changed as per new file format
					if(msNumber.length != mpsPprItem.GetProperty(marrNumTypes[miNumCnt+iPprItemIndxL]))
					{ 
						marrError[miErrCnt++] =  TheApplication().LookupMessage(""User Defined Errors"",""RMSORD018"",marrNumTypes[miNumCnt+iPprItemIndxL],msNumber,SImNum) + "":"";	
						mbError = true;
						continue;
					} 
					if(miErrCnt>iArrErrCnt) {
						TheApplication().RaiseErrorText(""ERROR"");
					}
		    	}
		    }
	        } 
			}catch(e) {
				mbError = true;
			    if(strErrVal != """") {
					//1.4 throw (e);
					marrError[miErrCnt++] =  e.errText;	
			    } else {
					marrError[miErrCnt++] =  e.errText;	
			    }
		
	        } finally {
			    bcOrderLineNum	  = null;
			    bcOrderLine		  = null;
			    bcOrderHdr		  = null;
	//below 1.2
			    bcNumEnqUpdate   = null;
				bcOrderLineQuery = null;
				bcPaperItem      = null;
				boNumEnq         = null;
				boOrderQuery     = null;
	//above 1.2
				boOrder			 = null;
			    mpsSIM			 = null;
			    mpsIMSI			 = null;
			    mpsPprItem		 = null;
			    psError		  	 = null;
	        }
	        //return bcOrderHdr.GetFieldValue(""Id"");
	        return (!mbError);
            }
"/*----------------------------------------------------------------------
Name                : [EECC BS IF COMMON], [WriteToFile]
Created By          : Prasad Bodas
Description         : Function to write plain text to debug log file
Input Parameters    : String to be written to file
Output Parameters   : none
-----------------------------------------------------------------------
Change History
---------------+------+--------+----------------------------------------------
Date(YYYYMMDD) | Ver  | By     | Description of Change
---------------+------+--------+----------------------------------------------
20031225       | 1.00 | Prasad | Creation
---------------+------+--------+----------------------------------------------
*/
function WriteToFile(msgstr,msFileSuffix){
	var msFileName = ""debug_BS_IF_COMMON"" + msFileSuffix + "".txt"";
	var fptr=Clib.fopen(msFileName,""a"");
	Clib.fputs(msgstr+""\n\r"",fptr);
	Clib.fclose(fptr);
}
"/**************************************************************************************
* Name          : SIM Order Interface Order			 	          					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Calculate Available Date                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 1/11/2003	1.0   		Mahindra British Telecom   	Created       05/11/2003          *
**************************************************************************************/
function CalcAvailableDate(QuarUOM, QuarPeriod,bcSIMOrdNumMastr)
{
	var dtSysDate 			= Clib.time();
	var dtSysDateObj 		= Date.fromSystem(dtSysDate);

	var dtQuarantineDate 	= bcSIMOrdNumMastr.GetFieldValue(""Quarantine Date"");
	var dtQuarantineDateObj = new Date(dtQuarantineDate);
 
    switch (QuarUOM) 
    {

  	    case ""Days"": 
			dtQuarantineDateObj.setDate(ToInteger(dtQuarantineDateObj.getDate()) + ToInteger(QuarPeriod));
        	break;
             	
   		case ""Months"": 
			dtQuarantineDateObj.setMonth(ToNumber(ToNumber(dtQuarantineDateObj.getMonth()) + ToNumber(QuarPeriod)));
			break;
		
    	case ""Weeks"":
			dtQuarantineDateObj.setDate(dtQuarantineDateObj.getDate() + (QuarPeriod * 7));
       		break;
   		
   		case ""Year"": 
  			dtQuarantineDateObj.setFullYear(ToNumber(ToNumber(dtQuarantineDateObj.getFullYear()) + ToNumber(QuarPeriod)));
			break;
   }
   return(dtQuarantineDateObj);
}
"/**************************************************************************************
* Name          : SIM Order Business Service CancelOrder Method			  	          *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			22/12/2003        *
**************************************************************************************/

function CancelOrder(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,bcSIMOrdAssNum,Inputs){

/*	var blnIsRecord;  //KT 21-06-06
	
	var dtSystem;
	var dtCancelByDate;
	var dtCancelledDate;

	var intDateTime;
	var intCancelDate;
	
	var strErrVal 		= """";
	var strSearchExpr 	= """";
	
	var bsUpdateBlock;
	
	var psBlkInputs 	= TheApplication().NewPropertySet();
	var psBlkOutputs 	= TheApplication().NewPropertySet();
	
	try
	{
	dtSystem 			= Clib.time();
	intDateTime 		= (Date.fromSystem(dtSystem)).getTime();

	bsUpdateBlock 		= TheApplication().GetService(""RMS RMS Block Calc"");
		
	dtCancelByDate  	= bcSIMOrder.GetFieldValue(""Cancel By Date"");
	dtCancelledDate 	= new Date(dtCancelByDate);
	intCancelDate 		= dtCancelledDate.getTime();
	
//------------------------------------------------------
// Checking the Cancelled Date with the Cancel By Date
//------------------------------------------------------	
	if((dtCancelByDate != """") && (intCancelDate < intDateTime)){
	//if((dtCancelByDate != """") && (intCancelDate > intDateTime)){
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD021"",intCancelDate);
		//TheApplication().RaiseErrorText(strErrVal);
		return(strErrVal);
	}
	else{
//-------------------------------------------------------
// If Cancel By Date is Greater then Today's Date,
// then only the following updations will take place.
//-------------------------------------------------------		
		with(bcSimOrdNumInfo){
			ClearToQuery();
			SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}
			
		while(blnIsRecord)
		{
			
//-----------------------------------------------------------			
// Setting the Status and Date fields in Number Master, Order.
// Order Line and in the Associsted Number BC's.			
//-----------------------------------------------------------
			with(bcSIMOrdNumMastr)
			{
				
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",bcSimOrdNumInfo.GetFieldValue(""Assoc Start Id""));
				ExecuteQuery();
			}	
			
			blnIsRecord = bcSIMOrdNumMastr.FirstRecord();
			
//-----------------------------------------------------------------------			
// Setting the status for the associated numbers back to 'Not Available'
//-----------------------------------------------------------------------
			while(blnIsRecord){	
				if(bcSIMOrdNumMastr.GetFieldValue(""Status"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER"")){		
					with(psBlkInputs){
						SetProperty(""Object Id"",bcSIMOrdNumMastr.GetFieldValue(""Block Id""));
						SetProperty(""From Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""));
						SetProperty(""To Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE""));
					}
					bsUpdateBlock.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
					bcSIMOrdNumMastr.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE""));
					bcSIMOrdNumMastr.SetFieldValue(""Status Date"",bcSIMOrdNumMastr.GetFieldValue(""Current Date""));
				}
				bcSIMOrdNumMastr.SetFieldValue(""With SIM Order"","""");
				bcSIMOrdNumMastr.WriteRecord();
				
				blnIsRecord = bcSIMOrdNumMastr.NextRecord();
			}

//--------------------------------------
// Updating the CX_NUM_ASS_CNCT table.
//--------------------------------------					
			with(bcSIMOrdAssNum){
				ActivateField(""Status"");
				ActivateField(""Assoc Start Id"");
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",bcSimOrdNumInfo.GetFieldValue(""Assoc Start Id""));
				ExecuteQuery(ForwardOnly);
			}
			
			blnIsRecord = bcSIMOrdAssNum.FirstRecord();
		
			while(blnIsRecord){
				bcSIMOrdAssNum.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE""));
				bcSIMOrdAssNum.WriteRecord();
				blnIsRecord = bcSIMOrdAssNum.NextRecord();
			}
			
			bcSimOrdNumInfo.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE""));
			bcSimOrdNumInfo.SetFieldValue(""Order Id"","""");
			bcSimOrdNumInfo.SetFieldValue(""Order Line Id"","""");
			bcSimOrdNumInfo.SetFieldValue(""Numbers"","""");
			bcSimOrdNumInfo.SetFieldValue(""Numbers Type"","""");
			bcSimOrdNumInfo.WriteRecord();
			
			blnIsRecord = bcSimOrdNumInfo.NextRecord();
		
		}
				
		with(bcSIMOrderLine){
			ClearToQuery();
			SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
			ExecuteQuery(ForwardOnly);
		}
			
		blnIsRecord = bcSIMOrderLine.FirstRecord();
			
		while(blnIsRecord){
			bcSIMOrderLine.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""CANCELLED""));
			bcSIMOrderLine.WriteRecord();
			blnIsRecord = bcSIMOrderLine.NextRecord();
		}	
							
		with(bcSIMOrder){
			SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""CANCELLED""));
			SetFieldValue(""Cancelled Date"",GetFieldValue(""Current Date""));
			WriteRecord();
		}
				
//-------------------------------------------------------------------------
//Searching for any other Order associated with same HLR and Batch Number
//and setting the field in Number Generation as NO or Partial.	
//-------------------------------------------------------------------------
		strSearchExpr = ""[HLR Id] ='"" + bcSIMOrder.GetFieldValue(""HLR ID"") +
		// AND [Batch Number] ='"" + bcSIMOrder.GetFieldValue(""Batch Number"") +""' 
				""' AND [With SIM Order] = 'Y'"" +
				""  AND [Type Identifier] ='"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") +
				""' AND [Status] <>'""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE"") + ""'"";
		

		with(bcSIMOrdNumMastr) {
			ClearToQuery();
			SetSearchExpr(strSearchExpr);
			ExecuteQuery(ForwardOnly);
		}	
		blnIsRecord = bcSIMOrdNumMastr.FirstRecord();
		
		strSearchExpr = ""[HLR Id] ='"" + bcSIMOrder.GetFieldValue(""HLR ID"") + 
		//    AND [Batch Number] = '""+ bcSIMOrder.GetFieldValue(""Batch Number"") +""' 
		""' AND [Type Identifier] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + ""'"";
					
		
		with(bcSIMOrdNumGen){
			ActivateField(""SIM Order Raised"");
			ClearToQuery();
			SetSearchExpr(strSearchExpr);
			ExecuteQuery(ForwardOnly);	
			FirstRecord();
		}
		
		if(blnIsRecord)
			bcSIMOrdNumGen.SetFieldValue(""SIM Order Raised"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""PARTIAL""));
		else
			bcSIMOrdNumGen.SetFieldValue(""SIM Order Raised"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""NO""));			
		
		bcSIMOrdNumGen.WriteRecord();
	}
	} catch(e) {
		if(strErrVal == """")
			strErrVal = e.errText;
	}
	
	psBlkInputs		= null;
	psBlkOutputs	= null;
	bsUpdateBlock	= null;
	
	return (strErrVal);*/
}
"/**************************************************************************************
* Name          : SIM Order Business Service CancelValidation Method			  	  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
*
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 02/11/2003 	1.0   		MBT		     	Created      			03/11/2003        *
**************************************************************************************/
function CancelValidation(bcSIMOrder,bcSIMOrderLine)
{
	var strSimOrdStatus;
	var strSimOrdLineStatus;
				
	var blnIsRecord;
		
	var dtCurrentDate;
	var dtSystem;
	var dtCancelByDate;
	var dtCancelledDate;

	var intDateTime;
	var intCancelDate;
		
	dtSystem 		= Clib.time();
	intDateTime 	= (Date.fromSystem(dtSystem)).getTime();

	dtCancelByDate  = bcSIMOrder.GetFieldValue(""Cancel By Date"");
	dtCancelledDate = new Date(dtCancelByDate);
	intCancelDate 	= dtCancelledDate.getTime();
		
	strSimOrdStatus = bcSIMOrder.GetFieldValue(""Status"");
	dtCurrentDate   = bcSIMOrder.GetFieldValue(""Current Date"");

//----------------------------------------------------------
//Checking whether CancelByDate is greater than CurrentDate	
//----------------------------------------------------------

	if(dtCancelByDate != """")
	{
		if(intCancelDate <= intDateTime){
			if(TheApplication().GetSharedGlobal(""Revision"")==""Y"")
			{
				TheApplication().SetSharedGlobal(""Revision"","""");
			
			TheApplication().RaiseError(""RMSORD008"");			
			}
			else
			 TheApplication().RaiseError(""RMSORD009"");				
		}	
	}
	
//	bcSIMOrderLine.SetSharedGlobal(""SuppressOrdLinePreSet"",""Y"");

//------------------------------------------------------------------------
//If status of order line is ""To Be Deleted"" ,status shouldn't be changed 
//otherwise set the status as ""Cancelled"".		
//------------------------------------------------------------------------

	if(bcSIMOrderLine.GetFieldValue(""Status"")!=""To Be Deleted""){
		bcSIMOrderLine.SetFieldValue(""Status"",""Cancelled"");
		bcSIMOrderLine.WriteRecord();
	}

//----------------------------------------------------------------------------
//Set the order status as ""Cancelled"" & assign today's date to ""CancelledDate""
//----------------------------------------------------------------------------
		
	with(bcSIMOrder)
	{
//		SetSharedGlobal(""Suppress PreSetField"",""Y"");
		SetFieldValue(""Status"",""Cancelled"");
		SetFieldValue(""Cancelled Date"",dtCurrentDate);	
		WriteRecord();
//		SetSharedGlobal(""Suppress PreSetField"","""");		
	}		
//	bcSIMOrderLine.SetSharedGlobal(""SuppressOrdLinePreSet"","""");						
}
"/**************************************************************************************
* Name          : SIM Order Business Service CreateOrderLine Method			  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order Line										  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/

function CreateOrderLine(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,Inputs){
	
	/*var intStartNum;
	var intEndNum;
	var intQuantity 	= 0;
	var strHLRId		= """";

//	var strBatchNum		= """";

	var strSearchExpr 	= """";
	var strErrVal 		= """";
	var strObjectId		= """";
	var strSIMId;
	
	var blnIsRecord;
	var mbIsAssocNum 	= false;
	
	var lboSIMOrder; 	
	var lbcSIMOrder;    
	var lbcSIMOrderLine;
	
	
	try	{

		lboSIMOrder 	        = TheApplication().GetBusObject(""RMS SIM Order"");
		lbcSIMOrder            	= lboSIMOrder.GetBusComp(""RMS SIM Order"");
		lbcSIMOrderLine        	= lboSIMOrder.GetBusComp(""RMS SIM Order Line"");
		
		strHLRId    			= bcSIMOrder.GetFieldValue(""HLR ID"");
	//	strBatchNum 			= bcSIMOrder.GetFieldValue(""Batch Number"");
		strObjectId 			= Inputs.GetProperty(""Object Id"");
	
	if(strObjectId == """") 
	{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",strObjectId);
		TheApplication().RaiseErrorText(strErrVal);
	}
		
	with(lbcSIMOrder)
	{
		ActivateField(""Status"");
		ClearToQuery();
		SetSearchSpec(""Id"",strObjectId);
		ExecuteQuery(ForwardOnly);
		FirstRecord();
	}
	
	with(lbcSIMOrderLine)
	{
		ClearToQuery();
		//SetSearchSpec(""Order Id"",strObjectId);
		ExecuteQuery();	
		var theRecord = FirstRecord();
	}	
	
	
	if(!(lbcSIMOrderLine.FirstRecord()))
	{
		
//------------------------------------------------------------------
// Retrieving the numbers using the specified HLR and batch number.
//------------------------------------------------------------------	
		
		
		
		strSearchExpr = 
			""[HLR Id] = '"" + strHLRId +
//			""' AND [Batch Number] = '"" + strBatchNum +
			""' AND [IMSI Assoc] = 'Y' ""+
			""  AND [Type Identifier] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") +
			""' AND [Status] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE"") + ""'"";
		
		 
		with(bcSIMOrdNumMastr) 
		{
			ClearToQuery();
			SetSearchExpr(strSearchExpr);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}	
		
//---------------------------------------------
// Informing user if no numbers are available.
//---------------------------------------------		
		if(!(blnIsRecord))
		{
			bcSIMOrder.SetUserProperty(""From BusService"",""Y"");
			bcSIMOrder.SetFieldValue(""Status"","""");
			bcSIMOrder.WriteRecord();
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD002"");
			TheApplication().RaiseErrorText(strErrVal);
		}	
		
/*		while(blnIsRecord)  
		{
//------------------------------------------------------------------------
// Setting the value of With SIM Order to True for the numbers retrieved.
// Also storing the quantity of numbers retrieved.
//------------------------------------------------------------------------		
			if(intQuantity == 0)
				intStartNum = bcSIMOrdNumMastr.GetFieldValue(""Number String"");	
			bcSIMOrdNumMastr.SetFieldValue(""With SIM Order"",""Y"");
			bcSIMOrdNumMastr.WriteRecord();
			intQuantity = intQuantity + 1;
			
			
			strSIMId = bcSIMOrdNumMastr.GetFieldValue(""Id"");											
//-------------------------------------------------------------------------------
// Getting the Assoc Start Id from Number Master and searching for the records in 
// Order Num Info and setting the Order Id against the Assoc Start Id
//-------------------------------------------------------------------------------						
			with(bcSimOrdNumInfo)
			{
				SetViewMode(AllView);				
				ClearToQuery();
				ActivateField(""SIM Id"");
				SetSearchSpec(""Assoc Start Id"",bcSIMOrdNumMastr.GetFieldValue(""Assoc Start Id""));
				ExecuteQuery();
				mbIsAssocNum = FirstRecord();
				if(mbIsAssocNum) 
				{
					SetUserProperty(""From BusService"",""Y"");
					bcSimOrdNumInfo.SetFieldValue(""Order Id"",Inputs.GetProperty(""Object Id""));
					bcSimOrdNumInfo.SetFieldValue(""SIM Id"",strSIMId);
					WriteRecord();
					SetUserProperty(""From BusService"",""N"");
				}
			}
			blnIsRecord = bcSIMOrdNumMastr.NextRecord();
		}*/

//-------------------------------------
// Taking the end number in the string
//-------------------------------------		
//		bcSIMOrdNumMastr.LastRecord();
//		intEndNum = bcSIMOrdNumMastr.GetFieldValue(""Number String"");
		
//------------------------------------------------------------------
// Checking if any numbers exist which arent associated.	
// If any number exist then set the generation record to partial
// else set to complete.
//------------------------------------------------------------------	
	/*	strSearchExpr = 
		""[HLR Id] ='"" + strHLRId + 
		//AND [Batch Number] ='"" + strBatchNum +""' 
		""' AND [IMSI Assoc] = 'N""+ 
		""' AND [Type Identifier] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + 
		""' AND [Status] ='""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE"") + ""'"";
		
		with(bcSIMOrdNumMastr) 
		{		
			ClearToQuery();
			SetSearchExpr(strSearchExpr);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}
				
		strSearchExpr = 
		""[HLR Id] ='"" + strHLRId +
//		""' AND [Batch Number] = '""+ strBatchNum +
		""' AND [Type Identifier] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + ""'"";
						
		with(bcSIMOrdNumGen)
		{
			ActivateField(""SIM Order Raised"");
			ClearToQuery();
			SetSearchExpr(strSearchExpr);
			ExecuteQuery();	
			FirstRecord();
		}	
		
		if(blnIsRecord)
			bcSIMOrdNumGen.SetFieldValue(""SIM Order Raised"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""PARTIAL""));
		else
			bcSIMOrdNumGen.SetFieldValue(""SIM Order Raised"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""COMPLETE""));			
		bcSIMOrdNumGen.WriteRecord();	
			
			
//----------------------------------------------------------
// Creating the Order Line and setting the required fields. 
//----------------------------------------------------------
		
		with(lbcSIMOrderLine)
		{
			NewRecord(1);
			SetFieldValue(""Order Id"",bcSIMOrder.GetFieldValue(""Id"")); 
			
		//	SetFieldValue(""Starting Number"",intStartNum);  	 //  27 APR
		//	SetFieldValue(""Ending Number"",intEndNum);  		 //  27 APR
		//	SetFieldValue(""Quantity Ordered"",intQuantity);   //  27 APR
			
			var temp = bcSIMOrder.GetFieldValue(""Organization Name"");
			var orgid = bcSIMOrder.GetFieldValue(""Organization Id"");
			var divid = bcSIMOrder.GetFieldValue(""Division Id"");
			

			var bcSalesChannel = GetPicklistBusComp(""Sales Channel Name"");
			
			with(bcSalesChannel) 
			{
				SetViewMode(AllView);
				ClearToQuery()
				SetSearchSpec(""Id"",bcSIMOrder.GetFieldValue(""Organization Id""));
				ExecuteQuery();
				if(FirstRecord())
					Pick();
			}

/*			SetFieldValue(""Sales Channel Name"",bcSIMOrder.GetFieldValue(""Organization Name""));

			SetFieldValue(""Sales Channel Id"",bcSIMOrder.GetFieldValue(""Organization Id""));
			SetFieldValue(""Sales Channel Div Name"",bcSIMOrder.GetFieldValue(""Division Name""));
			SetFieldValue(""Sales Channel Div Id"",bcSIMOrder.GetFieldValue(""Division Id""));
*/
			
//			SetFieldValue(""Ship To Address"",bcSIMOrder.GetFieldValue(""Bill To Address""));
//			SetFieldValue(""Ship To Address Id"",bcSIMOrder.GetFieldValue(""Bill To Address Id""));
			
//			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""PROCESSING""));   
		
//			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW""));   
			/*WriteRecord();
		}
		
		with(bcSimOrdNumInfo)
		{
			ClearToQuery();
			SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}
		
		while(blnIsRecord)
		{
			bcSimOrdNumInfo.SetFieldValue(""Order Line Id"",lbcSIMOrderLine.GetFieldValue(""Id""));
			bcSimOrdNumInfo.WriteRecord();
			blnIsRecord = bcSimOrdNumInfo.NextRecord();
		}
				
		bcSIMOrder.SetUserProperty(""From BusService"",""Y"");
		bcSIMOrder.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW"")); 
		bcSIMOrder.WriteRecord();
		bcSIMOrder.SetUserProperty(""From BusService"",""N"");
				
	}
	
	} catch(e) 	{
	
		if(strErrVal =="""")
			strErrVal = e.errText;
	} 
	finally
	{
	
		lbcSIMOrderLine = null;
		lbcSIMOrder		= null
		lboSIMOrder		= null;
	}
	
	
	if(strErrVal != """") 
	     TheApplication().RaiseError(strErrVal);  
	
	return(strErrVal);*/
	
}
"/**************************************************************************************
* Name          : SIM Order Business Service DateToString Method			  	      *
* Author        : Mahindra British Telecom                                            *
* Description   : DateToString Code File                      				          *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/10/2003	1.0   		Mahindra British Telecom   	Created       29/10/2003      *
**************************************************************************************/

//-------------------------------------------------------------------------------------
//Gets the 'Date','Month','Hours','Minutes','Second' and appends them to a string.
//-------------------------------------------------------------------------------------

function DateToString (dtCDate)
{
	var dtDatum = ((dtCDate.getMonth() + 1) + ""/"" + dtCDate.getDate() + ""/"" + dtCDate.getFullYear()
	+ "" "" + dtCDate.getHours() + "":"" + dtCDate.getMinutes()+ "":"" + dtCDate.getSeconds());
	return dtDatum;
}
"/**************************************************************************************
* Name          : SIM Order Business Service DeleteOrder Method			  	          *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/

function DeleteOrder(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,bcSIMOrdPaperDisplay,Inputs){
	
/*	var strSearchExpr 	= """";  //KT 21-06-06
	var strErrVal		= """";
	var blnIsRecord;
	
	try
	{
	if(Inputs.GetProperty(""Object Id"") == """") {
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",Inputs.GetProperty(""Object Id""));
		TheApplication().RaiseErrorText(strErrVal);
	}
	
	with(bcSimOrdNumInfo)
	{
		ClearToQuery();
		SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}
	
	
//------------------------------------------------------------------------------------
//Querying the Number Master with Assoc Start Id which we got from the Order Num Info
//and setting the With SIM Order and Order Id field in Num Info and Number Master
//------------------------------------------------------------------------------------ 		
	while(blnIsRecord && bcSimOrdNumInfo.GetFieldValue(""Order Id"") != """")
	{
	
		with(bcSIMOrdNumMastr)
		{
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",bcSimOrdNumInfo.GetFieldValue(""Assoc Start Id""));
			SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""));
			ExecuteQuery();
			bcSIMOrdNumMastr.SetFieldValue(""With SIM Order"","""");
		}
		bcSimOrdNumInfo.SetFieldValue(""Order Id"","""");
		bcSimOrdNumInfo.SetFieldValue(""Order Line Id"","""");
		bcSimOrdNumInfo.WriteRecord();
		blnIsRecord = bcSimOrdNumInfo.NextRecord();
	}

//--------------------------------------------------------------------------------------------
// Retreiving the generation record and setting the SIM ORDER RAISED to 'No' or 'Partial
// depending on the orders placed.
//--------------------------------------------------------------------------------------------
	strSearchExpr = ""[HLR Id] ='"" + bcSIMOrder.GetFieldValue(""HLR ID"") +
//					""' AND [Batch Number] = '""+ bcSIMOrder.GetFieldValue(""Batch Number"") +
					""' AND [Type Identifier] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + ""'"";
						
	with(bcSIMOrdNumGen)
	{
		ActivateField(""SIM Order Raised"");
		ClearToQuery();
		SetSearchExpr(strSearchExpr);
		ExecuteQuery();	
		FirstRecord();
	}	
//---------------------------------------------------------------------------
// Searching for any other Order associated with same HLR and Batch Number
//---------------------------------------------------------------------------		
	strSearchExpr = ""[HLR Id] ='"" + bcSIMOrder.GetFieldValue(""HLR ID"") +
//				""' AND [Batch Number] ='"" + bcSIMOrder.GetFieldValue(""Batch Number"") +
				""' AND [With SIM Order] = 'Y'"" +
				""  AND [Type Identifier] ='"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + ""'"";
		

	with(bcSIMOrdNumMastr)
	{
		ClearToQuery();
		SetSearchExpr(strSearchExpr);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}	

//----------------------------------------------------------
//Setting the SIM Order Raised in the Number Generation BC
//----------------------------------------------------------		
	if(blnIsRecord == ""Y"")
		bcSIMOrdNumGen.SetFieldValue(""SIM Order Raised"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""PARTIAL""));
	else
		bcSIMOrdNumGen.SetFieldValue(""SIM Order Raised"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""NO""));			
	bcSIMOrdNumGen.WriteRecord();
	
	with(bcSIMOrdPaperDisplay)
	{
		ActivateField(""SIM Order Id"");
		ClearToQuery();
		SetSearchSpec(""SIM Order Id"",Inputs.GetProperty(""Object Id""));
		ExecuteQuery();
	}
	
	blnIsRecord = bcSIMOrdPaperDisplay.FirstRecord();
	
	while(blnIsRecord)
	{
		bcSIMOrdPaperDisplay.DeleteRecord();
		blnIsRecord = bcSIMOrdPaperDisplay.FirstRecord();
	}
			
//-------------------------------------------------------
// Deleting the record from the Order Line and the Order.
//-------------------------------------------------------

	
	bcSIMOrder.SetUserProperty(""From BusService"",""Y"");
	
	with(bcSIMOrderLine)
	{
		ClearToQuery();
		SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
		ExecuteQuery();
	}
	
	blnIsRecord = bcSIMOrderLine.FirstRecord();
			
	while(blnIsRecord)
	{
		bcSIMOrderLine.DeleteRecord();
		blnIsRecord = bcSIMOrderLine.FirstRecord();
	}

	if(bcSIMOrder.GetFieldValue(""Id"") == Inputs.GetProperty(""Object Id"")) 
	{
		TheApplication().SetSharedGlobal(""From Delete"",""Y"");

		bcSIMOrder.DeleteRecord();
	
		TheApplication().SetSharedGlobal(""From Delete"",""N"");
	}
	
	} 
	catch(e) 
	{
		if(strErrVal == """") 
			strErrVal = e.errText;
	} 
	finally 
	{
		
	}
	return(strErrVal);*/
}
"/**************************************************************************************
* Name          : RMS SIM Order DeletePreviousLineItemNumbers 			 	      * 
* Author        : Kalyana Tangirala                                            *
* Description   : Deletes prevously  selected Line item numbers when  Quantity Or 
Starting  number is changed and the records   are not in
between Starting Number and Ending Number     				  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/07/2006	1.0   		  Kalyana Tangirala				Created     
* 20070821      1.1           Kalyana Tangirala   Changed the number type to IMSI in SS
**************************************************************************************/

function DeletePreviousLineItemNumbers(bcSIMNumInfo,bcNMNumberEnquiryForUpdate,SIMOrderNumberType,Inputs,Outputs)
{
	var blnIsRecord;
	var EndingNumber;   
	var StartingNumber;  
	var SIMNumber;
	StartingNumber = Inputs.GetProperty(""StartingNumber"");
	EndingNumber = Outputs.GetProperty(""EndingNumber"");
    with(bcSIMNumInfo)
	{
	  ActivateField(""Assoc Start Id"");
	  ActivateField(""SIM Id"");
	  ActivateField(""Order Id"");
	  ActivateField(""Order Line Id"");
	  ClearToQuery();
	  SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
	  SetSearchSpec(""Order Line Id"",Inputs.GetProperty(""RowId""));
	  ExecuteQuery(ForwardOnly);
      blnIsRecord = FirstRecord();	
	}
       while(blnIsRecord)
		{
		with(bcNMNumberEnquiryForUpdate)
		{
		ActivateField(""Number String"");
		ClearToQuery();
		SetSearchSpec(""Assoc Start Id"",bcSIMNumInfo.GetFieldValue(""Assoc Start Id""));
		//Below 1.1
		//SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""));
		SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", SIMOrderNumberType));
		//Above 1.1
		ExecuteQuery(ForwardOnly);
		var blnIsNumber = FirstRecord();
		}	
		if(blnIsNumber)
		{
		SIMNumber = bcNMNumberEnquiryForUpdate.GetFieldValue(""Number String"");
		if((SIMNumber < StartingNumber) || (SIMNumber > EndingNumber))
		{
	  	bcSIMNumInfo.DeleteRecord();
		}//End of  if 								
        else
		{
		blnIsRecord = bcSIMNumInfo.NextRecord();
		}
		}//End of if(blnIsNumber)
		//blnIsRecord = bcSIMNumInfo.NextRecord();
		}//End of  while
		}
"/**************************************************************************************
* Name          : SIM Order Business Service DisplayPaper Method			  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT		     	Created      			28/12/2003        *
**************************************************************************************/

function DisplayPaper(bcSIMOrder,bcSIMSupPaper,bcSIMOrdPaperDisplay,Inputs){

	var blnIsRecord;
	var strErrVal 	= """";
	
	try{
	if(Inputs.GetProperty(""Object Id"") == """") {
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",Inputs.GetProperty(""Object Id""));
		TheApplication().RaiseErrorText(strErrVal);
	}
	
	with(bcSIMOrdPaperDisplay){
		ActivateField(""SIM Order Id"");
		ClearToQuery();
		SetSearchSpec(""SIM Order Id"",Inputs.GetProperty(""Object Id""));
		ExecuteQuery();
	}
	
	blnIsRecord = bcSIMOrdPaperDisplay.FirstRecord();

//------------------------------------------------------------
// Deleting the previous paper items if supplier has changed.
//------------------------------------------------------------	
	while(blnIsRecord){
		bcSIMOrdPaperDisplay.DeleteRecord();
		blnIsRecord = bcSIMOrdPaperDisplay.FirstRecord();
	}
	
//------------------------------------------------------------------
// Retreiving the associated paper items for the selected supplier.	
//------------------------------------------------------------------
	if(Inputs.GetProperty(""Supplier Id"")!=""""){	
		with(bcSIMSupPaper){
			ActivateField(""Supplier Id"");
			ActivateField(""Paper Item Id"");
			ClearToQuery();
			SetSearchSpec(""Supplier Id"",Inputs.GetProperty(""Supplier Id""));
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}
		
//--------------------------------------------
// Associating the paper item with the order.
//--------------------------------------------		
		while(blnIsRecord){
			with(bcSIMOrdPaperDisplay){
				ActivateField(""Paper Item Id"");
				ActivateField(""SIM Order Id"");			
				NewRecord(1);
				SetFieldValue(""Paper Item Id"",bcSIMSupPaper.GetFieldValue(""Paper Item Id""));
				SetFieldValue(""SIM Order Id"",Inputs.GetProperty(""Object Id""));
				WriteRecord();
				}
			
			blnIsRecord = bcSIMSupPaper.NextRecord();
		}
	}
	} catch(e) {
		if(strErrVal == """") 
			strErrVal = e.errText;
	} finally {
		
	}
	return(strErrVal);
}
"/**************************************************************************************
* Name          : SIM Order Business Service FinaliseApproval Method			  	  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/
function FinaliseApproval(bcSIMOrdApprovalUpdate,bcSIMOrderLineApproval,strStatus){
/*
	var dtCurrentDate;
	var strOrdLineStatus;
	var strErrVal = """";
	
	dtCurrentDate 		= bcSIMOrdApprovalUpdate.GetFieldValue(""Current Date"");
	strOrdLineStatus    = bcSIMOrderLineApproval.GetFieldValue(""Status"");

//--------------------------------------------------------------------------------
//Raising an error if the existing status of the order line is 'Awaiting Approval'
//--------------------------------------------------------------------------------
	if(strOrdLineStatus == TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDERLINE_STATUS"", ""AWAITING APPROVAL""))
	{
		
		bcSIMOrderLineApproval.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""APPROVED""));
		bcSIMOrderLineApproval.WriteRecord();
		strOrdLineStatus = TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""APPROVED"");
		//strErrVal=""RMSSOR001"";	
		//return(strErrVal);
	}	
	//else 
	//{

//-----------------------------------------------------------------------------------------------
//Changing the status of the order if the status of the order line is either 'Approval Rejected '
//or 'Approved'
//-----------------------------------------------------------------------------------------------
		
		if(strOrdLineStatus == TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDERLINE_STATUS"", ""APPROVAL REJECTED"")){
			with(bcSIMOrdApprovalUpdate){
		 		SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""APPROVAL REJECTED""));
		  		WriteRecord();
		  	}
		}else if(strOrdLineStatus == TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDERLINE_STATUS"", ""APPROVED"")){
			with(bcSIMOrdApprovalUpdate){
				SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""APPROVED""));
				SetFieldValue(""Approved Date"",dtCurrentDate);
				WriteRecord();
			}
		}	
	//}
	return(strErrVal);*/
}
function GetSysPref(strPref)
{
	var bsSysPref	= TheApplication().GetService(""TECHM BS IF COMMON"");
	var psInp		= TheApplication().NewPropertySet();
	var psOut		= TheApplication().NewPropertySet();
	
	psInp.SetProperty(strPref,"""");
	
	bsSysPref.InvokeMethod(""Get SysPref"",psInp,psOut);
	
	return (psOut.GetProperty(strPref));

}
"/**************************************************************************************
* Name          : SIM Order Business Service PreInvoke Method Method			  	  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 02/11/2003 	1.0   		MBT		     	Created      			03/11/2003        *
**************************************************************************************/
function SIMRevision(strOrderId)
{
	var boSIMOrder;
	var boSIMOrderRev;

	var bcSIMOrder;
	var bcSIMOrderRev;

	var blnRecord;
	var intRevNum;
		
	boSIMOrderRev = TheApplication().ActiveBusObject();	
	bcSIMOrderRev = boSIMOrderRev.GetBusComp(""RMS SIM Order"");

	boSIMOrder = TheApplication().GetBusObject(""RMS SIM Order"");	
	bcSIMOrder = boSIMOrder.GetBusComp(""RMS SIM Order"");
			
	with(bcSIMOrderRev)
	{
		ActivateField(""Revision Number"");
		ActivateField(""Order Number"");
//--------------------------------------------------------------------------
//Copy record with same order number incrementing the revision number by one
//--------------------------------------------------------------------------			
		NewRecord(2);
//		SetSharedGlobal(""Suppress PreSetField"",""Y"");
		SetFieldValue(""Order Number"",bcSIMOrder.GetFieldValue(""Order Number""));
		intRevNum = ToInteger(bcSIMOrder.GetFieldValue(""Revision Number""));
		intRevNum = intRevNum+1;
		SetFieldValue(""Revision Number"",intRevNum);
//		SetSharedGlobal(""Suppress PreSetField"","""");
	}
	
	bcSIMOrder		= null;
	boSIMOrder		= null;
	
	bcSIMOrderRev	= null;
	boSIMOrderRev	= null;
}
"/**************************************************************************************
* Name          : SIM Order Business Service SendForApproval Method			  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/

function SendForApproval(bcSIMOrder,bcSIMOrderLine,Inputs){
  	
/*	var strOrdLineStatus;  // KT 21-06-06
	var intObjectId;
	var strErrVal = """";
		
	intObjectId = Inputs.GetProperty(""Object Id"");
	
	try
	{
	if(Inputs.GetProperty(""Object Id"") == """") 
	{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",Inputs.GetProperty(""Object Id""));
		TheApplication().RaiseErrorText(strErrVal);
	}	
	
	with(bcSIMOrderLine){
		ClearToQuery();
		SetSearchSpec(""Order Id"",intObjectId);
		ExecuteQuery();	
		FirstRecord();
	}
	

	if(bcSIMOrderLine.GetFieldValue(""SIM Card Config Id"") == """") {
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD003"");
		return(strErrVal);
	}
//---------------------------------------------------------------------------
// Changing status of order line item to ""Awaiting Approval"",if it was either 
// ""New"" or ""Approval Rejected"".
//---------------------------------------------------------------------------
  	strOrdLineStatus = bcSIMOrderLine.GetFieldValue(""Status"");
	
	if(strOrdLineStatus != TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""AWAITING APPROVAL"")){
   		bcSIMOrderLine.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""AWAITING APPROVAL""));
   		bcSIMOrderLine.WriteRecord();
   	}

//-------------------------------------------------------------------------------
// Changing status of order to ""Awaiting Approval"" and assigning Cancel By date 
// of corresponding order line to ""Cancel By Date"" of order.
//-------------------------------------------------------------------------------
	with(bcSIMOrder){
		ActivateField(""Cancel By Date"");
		ActivateField(""Status"");
		ClearToQuery();
		SetSearchSpec(""Id"",intObjectId);
		ExecuteQuery();
		FirstRecord();
		SetUserProperty(""From BusService"",""Y"");
		SetFieldValue(""Cancel By Date"",bcSIMOrderLine.GetFieldValue(""Cancel By Date""));
		SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""AWAITING APPROVAL""));
		WriteRecord();
		SetUserProperty(""From BusService"",""N"");
	}
	} catch(e) {
		if(strErrVal == """") 
			strErrVal = e.errText;
	} finally {
		
	}
	return(strErrVal);*/
}
"/**************************************************************************************
* Name          : SIM Order Business Service PreInvoke Method 					  	  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 28/06/2006 	1.1   		ARUNJ		    Siebel ES#40 Incorporated changes  
* 20060710      1.2         Kalyana         Siebel ES SCR1, Objects Destroyed
* 20061007      1.3         Kalyana         Created new method and changed code to make 
											SIM Order asnchronous
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var boSIMOrder;
	var boNMEnquiry; // Changed 02:06:2005
	var bcSIMOrder;
	var bcSIMOrderLine;
	var bcSimOrdNumInfo;
	var bcSIMOrdNumMastr;
	var bcSIMOrdNumGen;
	var bcSIMOrdAssNum;
	var bcSIMSupPaper;
	var bcSIMOrdPaperDisplay;
	var bcSIMNumStatus;
	var bcNumScheme;
// below 1.1	
//	var bcSIMPaperItem;
// above 1.1	
	var boSIMOrderApproval;
	var bcSIMOrderApproval;
	var bcSIMOrdApprovalUpdate;
	var bcSIMOrderLineApproval;
	var intObjectId;
	var blnOrdLineRecd;
	var blnIsRecord;
	var strErrVal = """";
	var strOrdStatus;
	var strStatus;
	var ErrMessage = """";
	var intReturn = ContinueOperation;
	if(TheApplication().GetSharedGlobal(""From Delete"") == ""Y"")
		return(CancelOperation);
    try	{
		if(Inputs.GetProperty(""Object Id"") == """") 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",Inputs.GetProperty(""Object Id""));
			TheApplication().RaiseErrorText(strErrVal);
		}
		boSIMOrder 	          = TheApplication().GetBusObject(""RMS SIM Order"");
		boNMEnquiry			  = TheApplication().GetBusObject(""RMS NM Number Enquiry""); //  Changed 02:06:2005
		bcSIMOrder            = boSIMOrder.GetBusComp(""RMS SIM Order for Update"");
		bcSIMOrderLine        = boSIMOrder.GetBusComp(""RMS SIM Order Line"");
		bcSimOrdNumInfo       = boSIMOrder.GetBusComp(""RMS SIM Order Line Num Info for Update"");
		//bcSIMOrdNumMastr      = boSIMOrder.GetBusComp(""RMS SIM Order NM Number Master"");
        bcSIMOrdNumMastr      = boNMEnquiry.GetBusComp(""RMS NM Number Enquiry For Update""); // Changed 02:06:2005
        bcSIMOrdNumGen	      = boSIMOrder.GetBusComp(""RMS SIM Order NM Number Generation"");
		bcSIMOrdAssNum	      = boSIMOrder.GetBusComp(""RMS SIM Order Association Number Type Display"");
		bcSIMSupPaper         = boSIMOrder.GetBusComp(""RMS SIM Order Supplier Paper Item"");
		bcSIMOrdPaperDisplay  = boSIMOrder.GetBusComp(""RMS SIM Order Paper Item Display"");
		//KT 10-06-06  added  to check whether KI is added  to Supplier or not
// below 1.1		
//		bcSIMPaperItem        = boSIMOrder.GetBusComp(""RMS SIM Paper Item"");  
//		bcSIMNumStatus		  = boSIMOrder.GetBusComp(""RMS SIM Number Status"");
//		bcNumScheme 		  = boSIMOrder.GetBusComp(""RMS NM Number Scheme"");
// above 1.1	
		boSIMOrderApproval     = TheApplication().GetBusObject(""RMS SIM Order Approval"");
		bcSIMOrdApprovalUpdate = boSIMOrderApproval.GetBusComp(""RMS SIM Order Approval for Update"");
		bcSIMOrderLineApproval = boSIMOrderApproval.GetBusComp(""RMS SIM Order Line Approval"");
		intObjectId = Inputs.GetProperty(""Object Id"");

//--------------------
// Code for SIM Order
//--------------------		
		if((MethodName != ""FinaliseApproval""))
		{
			with(bcSIMOrder)
			{
				SetViewMode(AllView);
				ActivateField(""Status"");
				ActivateField(""HLR ID"");
			//	ActivateField(""Batch Number"");
				ActivateField(""Organization Name"");
				ActivateField(""Organization Id"");
				ActivateField(""Division Name"");
				ActivateField(""Division Id"");
				ActivateField(""Bill To Address"");
				ActivateField(""Bill To Address Id"");
				ActivateField(""PO Generated Date"");
				ActivateField(""Current Date"");
			//	ActivateField(""Cancel By Date"");
			//	ActivateField(""Cancelled Date"");
			//	ActivateField(""Comments"");
				ActivateField(""Supplier Changed"");
				ActivateField(""Supplier Id"");
			//	ActivateField(""Image Id"");  //  20:07:05
				ClearToQuery();
				SetSearchSpec(""Id"",intObjectId);
				ExecuteQuery();
				blnIsRecord = FirstRecord();
			}
				
			if(blnIsRecord)
			{	

//---------------------------------------------------------------------------------------------
// Inform user if another user is trying to create an order at the same time using the same 
// the HLR ID and Batch Number.				
//---------------------------------------------------------------------------------------------
				with(bcSIMOrder)
				{
					ClearToQuery();
					SetSearchSpec(""HLR ID"",bcSIMOrder.GetFieldValue(""HLR ID""));
			//		SetSearchSpec(""Batch Number"",bcSIMOrder.GetFieldValue(""Batch Number""));
			//		SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""PROCESSING"")); 
					SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW"")); 
					ExecuteQuery();
					blnIsRecord = FirstRecord();
				}
												
			//	if(blnIsRecord && (strStatus == TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""PROCESSING"")))  
 
    			if(blnIsRecord && (strStatus == TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW"")))
				{
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD001"");
					TheApplication().RaiseErrorText(strErrVal);
				}
				else
				{
					with(bcSIMOrder)
					{
						ClearToQuery();
						SetSearchSpec(""Id"",intObjectId);
						ExecuteQuery();
						blnIsRecord=FirstRecord();
						strOrdStatus = GetFieldValue(""Status"");
						
						SetUserProperty(""From BusService"",""Y"");
						if((MethodName != ""UpdateStartEndNumber"") && (MethodName != ""SubmitToSupplier""))		
							SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""PROCESSING""));
						WriteRecord();
						SetUserProperty(""From BusService"",""N"");
					}
				}
				
				with(bcSimOrdNumInfo)
				{
					SetViewMode(AllView);
					ActivateField(""Order Id"");
					ActivateField(""Numbers"");
					ActivateField(""Numbers Type"");
					ActivateField(""Status"");
					ActivateField(""Assoc Start Id"");
					ActivateField(""Order Line Id"");

				}
						
				with(bcSIMOrderLine)
				{
					SetViewMode(AllView);
					ActivateField(""Order Id"");
					ActivateField(""Quantity Ordered"");
					ActivateField(""Status"");
					ActivateField(""Starting Number"");
					ActivateField(""Ending Number"");
					ActivateField(""Sales Channel Name"");
					ActivateField(""Sales Channel Id"");
					ActivateField(""Sales Channel Div Name"");
					ActivateField(""Sales Channel Div Id"");
					ActivateField(""Ship To Address"");
					ActivateField(""Ship To Address Id"");
					ActivateField(""Cancel By Date"");
					ActivateField(""SIM Card Config Id"");
				}
				
				with(bcSIMOrdNumMastr)  // Refers : RMS NM Number Enquiry For Update 
				{
					SetViewMode(AllView);
					ActivateField(""HLR Id"");
			//		ActivateField(""Batch Number"");
					ActivateField(""Number"");
					ActivateField(""Number String"");
					ActivateField(""Is Associated"");
					ActivateField(""Status"");
					ActivateField(""Type Identifier"");
					ActivateField(""Type"");
					ActivateField(""IMSI Assoc"");
					ActivateField(""With SIM Order"");
					ActivateField(""Assoc Start Id"");
					ActivateField(""Block Id"");
					ActivateField(""Artwork Id"");
					ActivateField(""Scheme Id"");
					ActivateField(""Available Date"");
					ActivateField(""Quarantine Date"");
					ActivateField(""Status Date"");
					ActivateField(""Current Date"");
					ActivateField(""Type Id"");
				}
													
				switch(MethodName)
				{
					case ""CreateOrderLine"":
						
						intReturn = CancelOperation;
						strErrVal = CreateOrderLine(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,Inputs);
						break;
						
//------------------------------------------------------------------------------						
//The method below updates the start and end number for all SIM order line items.
//------------------------------------------------------------------------------

					case ""UpdateStartEndNumber"":
						
						intReturn = CancelOperation;
						strErrVal = UpdateStartEndNumber(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,Inputs,Outputs);
						if(strErrVal != """") 
                        {
                       TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));
						break;
						}
						/*else 
						{
						strErrVal = ValidateLinItemNumbers(bcSIMOrder,bcSIMOrderLine,Inputs,Outputs);									
					    if(strErrVal != """") 
                        {
                       TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));
						break;
						}*/
						break;
						case ""DeleteOrder"":	
						
						intReturn = CancelOperation;
						strErrVal = DeleteOrder(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,bcSIMOrdPaperDisplay,Inputs);
						break;
						
					case ""ValidateLinItemNumbers"":
						
						intReturn = CancelOperation;
						strErrVal = ValidateLinItemNumbers(bcSIMOrder,bcSIMOrderLine,Inputs,Outputs);
						if(strErrVal != """") 
						TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));
						break;
					case ""UpdatePaperItem"":	
					
						intReturn = CancelOperation;
						strErrVal = DisplayPaper(bcSIMOrder,bcSIMSupPaper,bcSIMOrdPaperDisplay,Inputs);
						bcSIMOrder.SetUserProperty(""From BusService"",""Y"");
						// bcSIMOrder.ActivateField(""Supplier Changed"");
						bcSIMOrder.SetFieldValue(""Supplier Changed"",""N"");
						bcSIMOrder.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW""));
						bcSIMOrder.WriteRecord();
						bcSIMOrder.SetUserProperty(""From BusService"",""Y"");
						break;
					
					case ""SendForApproval"":
					
						intReturn = CancelOperation;
						strErrVal = SendForApproval(bcSIMOrder,bcSIMOrderLine,Inputs);
						if(strErrVal != """") 
						{
							bcSIMOrder.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""OPEN""));
							bcSIMOrder.WriteRecord();
							TheApplication().RaiseError(strErrVal);	
						}
						break;
										
					case ""SubmitToSupplier"": // Submit To ERP
							
						intReturn = CancelOperation;
						ErrMessage = SubmitToSupplier(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdAssNum,bcSIMOrdPaperDisplay,bcSIMSupPaper,Inputs);
						//Below 1.3 
						//if(strErrVal != """") 
						//TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));
						Outputs.SetProperty(""ErrMessage"",ErrMessage);
						Outputs.SetProperty(""FilePath"",Inputs.GetProperty(""FilePath""));
						Outputs.SetProperty(""OrderId"",Inputs.GetProperty(""OrderId""));
						if(ErrMessage != """")
						{
						with(bcSIMOrder)
						{
						ActivateField(""Comments"");
						ActivateField(""Status"");
						ClearToQuery();
						SetSearchSpec(""Id"",intObjectId);
						ExecuteQuery();
						blnIsRecord=FirstRecord();
						if(blnIsRecord)
						{
						SetFieldValue(""Comments"",ErrMessage);
						SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW""));
						WriteRecord();
						}
						}
						}
						//Above 1.3
						break;
					//below 1.3
					case ""ValidateSIMOrder"": // ValidateSIMOrder
					
						intReturn = CancelOperation;
						strErrVal = ValidateSIMOrder(bcSIMOrder,bcSIMOrderLine,bcSIMOrdPaperDisplay,bcSIMSupPaper,Inputs);
						 if(strErrVal != """") {
							bcSIMOrder.SetUserProperty(""From BusService"",""Y"");
							bcSIMOrder.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW""));
							bcSIMOrder.WriteRecord();
							bcSIMOrder.SetUserProperty(""From BusService"",""Y"");
							TheApplication().RaiseError(strErrVal);	
							}
						break;
					//above 1.3
					case ""CancelOrder"":
					
						intReturn = CancelOperation;
						strErrVal = CancelOrder(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,bcSIMOrdAssNum,Inputs);
						if(strErrVal != """") 
						{
							bcSIMOrder.SetFieldValue(""Status"",strOrdStatus);
							bcSIMOrder.WriteRecord();
							TheApplication().RaiseError(strErrVal);	
						}
						break;
						
					case ""TrashOrder"":
					
						intReturn = CancelOperation;
// below 1.1			
						bcSIMNumStatus		  = boSIMOrder.GetBusComp(""RMS SIM Number Status"");
						bcNumScheme 		  = boSIMOrder.GetBusComp(""RMS NM Number Scheme"");
// above 1.1			
						strErrVal = TrashOrder(bcSIMOrder,bcSIMNumStatus,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,bcSIMOrdAssNum,Inputs,bcNumScheme);
						if(strErrVal != """")
						{
							bcSIMOrder.SetFieldValue(""Status"",strStatus);
							bcSIMOrder.WriteRecord();
							//TheApplication().RaiseErrorText(strErrVal);	
						}
						break;
				}
			}
		
		else
			intReturn = CancelOperation;
		}

//------------------------------
// Code for SIM Order Approval.
//------------------------------		
		else{
		
			with(bcSIMOrdApprovalUpdate)
			{
				ActivateField(""Status"");
				ActivateField(""Approved Date"");
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(""Id"",intObjectId);
				ExecuteQuery();
			}
			
			with(bcSIMOrderLineApproval)
			{
				ActivateField(""Status"");
				ActivateField(""Id"");
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(""Order Id"",intObjectId);
				ExecuteQuery();
			}
			
			switch(MethodName)
			{
			
				case ""FinaliseApproval"":
	
					intReturn = CancelOperation;
					
					strErrVal = FinaliseApproval(bcSIMOrdApprovalUpdate,bcSIMOrderLineApproval,strOrdStatus);
					
					if(strErrVal != """")
						TheApplication().RaiseError(strErrVal);
					
					return(intReturn);		
			}
		}
			
	}catch(e){

		if(strErrVal == """")
			strErrVal = e.errText;

	} finally {

		bcSIMOrder 		         	= null;
		bcSIMOrderLine	         	= null;
		bcSimOrdNumInfo 	 	 	= null;
		bcSIMOrdNumMastr         	= null;
		bcSIMSupPaper            	= null;
		bcSIMOrdPaperDisplay     	= null;
		bcSIMOrdNumGen	      		= null;
		bcSIMOrdAssNum	      		= null;
		bcSIMNumStatus		  		= null;
		bcNumScheme					= null;
		boSIMOrder 		         	= null;
		bcSIMOrdApprovalUpdate	 	= null;
		bcSIMOrderLineApproval   	= null;
		bcSIMNumStatus				= null;
		boSIMOrderApproval   	 	= null;
//below 1.2 		
		boNMEnquiry                 = null;
//above 1.2
	}
		if(strErrVal != """")
			 TheApplication().RaiseErrorText(strErrVal); 
		return(intReturn);
}
"/**************************************************************************************
* Name          : SIM Order Business Service SubmitToSupplier Method			  	  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   			MBT		     Created      			23/12/2003        *
* 29/09/2004 	1.1   			MBT		     Modified      			29/09/2004        *
* 27/07/2006    1.2             Kalyana      Changed cursor mode to  process  more than
                                10,000 records in  in  one  single Order
* 20061007      1.3             Kalyana      Deleted and commnented some code to make 
								SIM Ordering asynchronous 							  *
**************************************************************************************/

function SubmitToSupplier(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdAssNum,bcSIMOrdPaperDisplay,bcSIMSupPaper,Inputs)
{

	var strSIMNum     = """";
	var strIMSINum    = """";
	var strIMSIRNum		= """";
	var strMSISDNNum  = """";
	var strSIMType    = """";
	var strIMSIType   = """";
	var strIMSIRType   = """";
	var strMSISDNType = """";
	var strFromStatus = """";
	var strToStatus	  = TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER"");
	var strErrVal 	  = """";
	var strFinalNum  = """";
	var strFinalType = """";
	var dtCurrentDate;
	var blnIsOrderLine;
	var blnIsRecord;
	var strFileName;
	var strFilePath;
	var bsUpdateBlock;
	var bsSIMFile;
	var prsInputs   = TheApplication().NewPropertySet();
	var prsOutputs  = TheApplication().NewPropertySet();
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
	var strIMSIRId	= GetSysPref(""RMS_IMSIR_SRCH_ID"");
	var strTypeId	= """";

	try {
	bsUpdateBlock = TheApplication().GetService(""RMS RMS Block Calc"");
	//Below 1.3
	//bsSIMFile	  = TheApplication().GetService(""Workflow Process Manager"");
	//Above 1.3
	dtCurrentDate = bcSIMOrder.GetFieldValue(""Current Date"");
	with(bcSIMOrdAssNum)
	{
		ActivateField(""Status"");
		ActivateField(""Assoc Start Id"");
	}
	var temp = Inputs.GetProperty(""Object Id"");
//-------------------------------------------------------------------------
// Retrieving all the numbers for the given order using the CX_SIM_ITM_NUM
//-------------------------------------------------------------------------
	with(bcSimOrdNumInfo)
	{
		ClearToQuery();
		SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
		//below 1.2
        //ExecuteQuery();
        ExecuteQuery(ForwardOnly);
        //above 1.2
		blnIsRecord = FirstRecord();
	}

//----------------------------------------------------------------------
// Retrieving each number and changing the status to 'With SIM Supplier'
//----------------------------------------------------------------------
  
	while(blnIsRecord)
	{
	
	with(bcSIMOrdNumMastr)
		{

			ClearToQuery();
	        SetSearchSpec(""Assoc Start Id"",bcSimOrdNumInfo.GetFieldValue(""Assoc Start Id""));
			//below 1.2
           //ExecuteQuery();
           ExecuteQuery(ForwardOnly);
           //above 1.2
    	}	
		blnIsRecord = bcSIMOrdNumMastr.FirstRecord();
		while(blnIsRecord)
		{	
			strFromStatus = bcSIMOrdNumMastr.GetFieldValue(""Status"");
			if(bcSIMOrdNumMastr.GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
			  {
				strSIMNum = strSIMNum + bcSIMOrdNumMastr.GetFieldValue(""Number String"");
//				strSIMType = strSIMType + TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"");
				strSIMType = strSIMType + bcSIMOrdNumMastr.GetFieldValue(""Type"");
			  }
			if(bcSIMOrdNumMastr.GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI""))
		      {
		      	strTypeId = bcSIMOrdNumMastr.GetFieldValue(""Type Id"");
		      	
		      	if(strTypeId == strIMSIRId){
		      		if(strIMSIRNum != """") {
						strIMSIRNum = strIMSIRNum + "" / ""+bcSIMOrdNumMastr.GetFieldValue(""Number String"");
						strIMSIRType = strIMSIRType + "" / ""+bcSIMOrdNumMastr.GetFieldValue(""Type"");
					}
					else {
						strIMSIRNum = strIMSIRNum + bcSIMOrdNumMastr.GetFieldValue(""Number String"");
						strIMSIRType = strIMSIRType + bcSIMOrdNumMastr.GetFieldValue(""Type"");					
					}
		      	} else {
		      	
					if(strIMSINum != """") {
						strIMSINum = strIMSINum + "" / ""+bcSIMOrdNumMastr.GetFieldValue(""Number String"");
						strIMSIType = strIMSIType + "" / ""+bcSIMOrdNumMastr.GetFieldValue(""Type"");
					}
					else {
						strIMSINum = strIMSINum + bcSIMOrdNumMastr.GetFieldValue(""Number String"");
						strIMSIType = strIMSIType + bcSIMOrdNumMastr.GetFieldValue(""Type"");					
					}
				}

//				strIMSIType = strIMSIType + TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"");
				
			  }
			if(bcSIMOrdNumMastr.GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""))
			  {
				strMSISDNNum = strMSISDNNum + bcSIMOrdNumMastr.GetFieldValue(""Number String"");
//				strMSISDNType = strMSISDNType + TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"");
				strMSISDNType = strMSISDNType + bcSIMOrdNumMastr.GetFieldValue(""Type"");
			  }
			
//20:07:05  bcSIMOrdNumMastr.SetFieldValue(""Artwork Id"",bcSIMOrder.GetFieldValue(""Image Id""));
			bcSIMOrdNumMastr.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""));
			bcSIMOrdNumMastr.WriteRecord();

//----------------------------------------------------------------------------------------------------------------
// Updating the block calc field for the number.
// MS:20040929: In case the same block is being updated by a different process, Block Calc BS will throw the error
// Handle the error (update the status of SIM Order to PO Suspended. The Status of associated numbers may
// not be in sync. The Order can be resubmitted again.
//----------------------------------------------------------------------------------------------------------------
		try	{
		
//			prsInputs.SetProperty(""From Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE""));

    		if(strFromStatus != strToStatus) 
				{
					prsInputs.SetProperty(""From Status"",strFromStatus);
					prsInputs.SetProperty(""To Status"",strToStatus);
					prsInputs.SetProperty(""Object Id"",bcSIMOrdNumMastr.GetFieldValue(""Block Id""));

					bsUpdateBlock.InvokeMethod(""UpdateNumberBlock"",prsInputs,prsOutputs);
				}
	} catch(e) {
		
				var temp = e.errText;
				bcSIMOrdNumMastr.SetFieldValue(""Status"",strFromStatus);
				bcSIMOrdNumMastr.WriteRecord();
				
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD022"");
				
				with(bcSIMOrder)
				{
					SetUserProperty(""From BusService"",""Y"");
					SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""PO SUSPENDED""));
				//  SetFieldValue(""Comments"",GetFieldValue(""Comments"") + ""::"" + strErrVal);
					WriteRecord();
					SetUserProperty(""From BusService"",""N"");
				}
		}		
			
		if(strErrVal == """") 
			blnIsRecord = bcSIMOrdNumMastr.NextRecord();
		else 	
			TheApplication().RaiseErrorText(""ERROR"");
		}
		
		strFinalNum = strSIMNum + "" / "" + strIMSINum;
		if(strIMSIRNum != """") {
			strFinalNum = strFinalNum + "" / "" + strIMSIRNum;
		}
		if(strMSISDNNum != """")
			strFinalNum = strFinalNum + "" / "" + strMSISDNNum;
				 
		strFinalType = strSIMType + "" / "" + strIMSIType;
		if(strIMSIRType != """") {
			strFinalType = strFinalType + "" / "" + strIMSIRType;
		}
		if(strMSISDNType != """")
			strFinalType = strFinalType + "" / "" + strMSISDNType;

//-------------------------------------------------------------------------
// Updating the status to 'With SIM Supplier' in the CX_NUM_ASS_CNCT table
//-------------------------------------------------------------------------
		with(bcSIMOrdAssNum)
		{
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",bcSimOrdNumInfo.GetFieldValue(""Assoc Start Id""));
			//below 1.2
            //ExecuteQuery();
            ExecuteQuery(ForwardOnly);
            //above 1.2
			blnIsRecord = bcSIMOrdAssNum.FirstRecord();
			while(blnIsRecord)
			{
				SetUserProperty(""From BusService"",""Y"");
				bcSIMOrdAssNum.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""));
				bcSIMOrdAssNum.WriteRecord();
				SetUserProperty(""From BusService"",""N"");
				blnIsRecord = bcSIMOrdAssNum.NextRecord();
			}	
		}
		bcSimOrdNumInfo.SetUserProperty(""From BusService"",""Y"");
		bcSimOrdNumInfo.SetFieldValue(""Numbers"",strFinalNum);
		bcSimOrdNumInfo.SetFieldValue(""Numbers Type"",strFinalType);
		bcSimOrdNumInfo.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""));
		bcSimOrdNumInfo.WriteRecord();
		bcSimOrdNumInfo.SetUserProperty(""From BusService"",""N"");
		strFinalNum = """";
		strFinalType = """";
		strSIMType = """";
		strMSISDNType = """";
		strIMSIType = """";
		strIMSIRType = """";
		strSIMNum = """";
		strIMSINum = """";
		strIMSIRNum = """";
		strMSISDNNum = """";
		blnIsRecord = bcSimOrdNumInfo.NextRecord();	
	}
	
//---------------------------------------------------------------------
// Calling the SIM File Business Service for Generating the Output file
//---------------------------------------------------------------------
	try	{

		bcSysPref.ActivateField(""Value"");
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""RMS_SIMORDER_OUTPUTPATH"");
		//below 1.2
		//bcSysPref.ExecuteQuery();
		bcSysPref.ExecuteQuery(ForwardOnly);
		//above 1.2
	   if(bcSysPref.FirstRecord()) 
	   {
	 	//Below 1.3
		Inputs.SetProperty(""FilePath"",bcSysPref.GetFieldValue(""Value""));
		Inputs.SetProperty(""OrderId"",Inputs.GetProperty(""Object Id""));
		/*
		//prsInputs.SetProperty(""OrderId"",Inputs.GetProperty(""Object Id""));
		prsInputs.SetProperty(""FilePath"",bcSysPref.GetFieldValue(""Value""));
		prsInputs.SetProperty(""Object Id"",Inputs.GetProperty(""Object Id""));
		prsInputs.SetProperty(""ProcessName"",""RMS SIM Submit To Supplier - Generate File"");
		//bsSIMFile.InvokeMethod(""GenerateFile"",prsInputs,prsOutputs);
		bsSIMFile.InvokeMethod(""RunProcess"",prsInputs,prsOutputs);
		*/
		//Above 1.3
	    }

	} catch(e){
		strErrVal = e.errText;
	}
	
//below 1.3 
/*KT Commneted this code .This functinality will be acheived in RMS SIM File BS in Service_PreInvokeMethod

//-------------------------------------------------------------------------
// Changing the status to 'PO GENERATED' and setting the corresponding date
//-------------------------------------------------------------------------	
	with(bcSIMOrder)
	{
		SetUserProperty(""From BusService"",""Y""); 
		SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""PO GENERATED""));
		SetFieldValue(""PO Generated Date"",dtCurrentDate);
		WriteRecord();
		SetUserProperty(""From BusService"",""N"");
	}
*/	
//Above 1.3
	} catch(e) {
	    //below 1.3
		// if(strErrVal == """")
		//Outputs.SetProperty(""ErrMessage"",strErrVal);
		strErrVal = e.errText;
		Inputs.SetProperty(""ErrMessage"",strErrVal);	
		//above 1.3
		return(strErrVal);		
		} finally {
		if(strErrVal != """")
		//be1ow 1.3
		//Outputs.SetProperty(""ErrMessage"",strErrVal);
		//return(strErrVal);
		//above 1.3
		Inputs.SetProperty(""ErrMessage"",strErrVal);
		bcSysPref 		= null;
		boSysPref		= null;
		prsInputs		= null;
		prsOutputs		= null;
    	bsUpdateBlock	= null;
		//Below 1.3
		//bsSIMFile		= null;
		//Above 1.3
	}
	return(strErrVal);
}
"/**************************************************************************************
* Name          : SIM Order Business Service TrashOrder Method			  	          *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			22/12/2003        *
**************************************************************************************/

function TrashOrder(bcSIMOrder,bcSIMNumStatus,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,bcSIMOrdAssNum,Inputs,bcNumScheme){

	var blnIsRecord;
	
	var dtSystem;
	var dtCancelByDate;
	var dtCancelledDate;
	var dtQuarantineDateObj = new Date();

	var intDateTime;
	var intCancelDate;
	
	var strErrVal 		= """";
	var strSearchExpr 	= """";
	
	var prsInputs   	= TheApplication().NewPropertySet();
	var prsOutputs  	= TheApplication().NewPropertySet();

	var bsUpdateBlock;
	
	try{
	bsUpdateBlock = TheApplication().GetService(""RMS RMS Block Calc"");

	strSearchExpr = ""[Order Id] ='"" + Inputs.GetProperty(""Object Id"") + 
			""' AND [Number Status] <>'""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER"") + 
			""' AND [Number Status] <>'""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""UNREGISTERED"") +
			""' AND [Number Status] <>'""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE"") + ""'""; 
		
	with(bcSIMNumStatus){
		ActivateField(""Order Id"");
		ActivateField(""Number Status"");
		ClearToQuery();
		SetSearchExpr(strSearchExpr);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}

//------------------------------------------------------
// Cannot trash the order if any number has been used.
//------------------------------------------------------
	
	if(blnIsRecord){
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD004"",bcSIMNumStatus.GetFieldValue(""Number Status""));
		TheApplication().RaiseErrorText(strErrVal);
	}

//-------------------------------------------------------------------------
// Retrieving all the records in CX_SIM_ITM_NUM associated with the order.
//-------------------------------------------------------------------------
	with(bcSimOrdNumInfo){
		ClearToQuery();
		SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}
			
	while(blnIsRecord){
			
//------------------------------------------------------------------------------------
// For each record in CX_SIM_ITM_NUM retrieving the numbers using the Assoc Start Id.
//------------------------------------------------------------------------------------
		with(bcSIMOrdNumMastr){
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",bcSimOrdNumInfo.GetFieldValue(""Assoc Start Id""));
			ExecuteQuery();
		}	
		
		blnIsRecord = bcSIMOrdNumMastr.FirstRecord();
	
//--------------------------------------------------
// Setting the status for the associated numbers.
//--------------------------------------------------					
		while(blnIsRecord){
			if((bcSIMOrdNumMastr.GetFieldValue(""Status"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""))
														||	
			 	(bcSIMOrdNumMastr.GetFieldValue(""Status"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""))
														||
				(bcSIMOrdNumMastr.GetFieldValue(""Status"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""UNREGISTERED""))){
//---------------------------------------------------------------------
// MSISDN numbers are quarantined. SIM and IMSI numbers are trashed.
//---------------------------------------------------------------------		
					if(bcSIMOrdNumMastr.GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")){												
						
						prsInputs.SetProperty(""To Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE""));
						
						if(bcSIMOrdNumMastr.GetFieldValue(""Status"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""UNREGISTERED""))
							prsInputs.SetProperty(""From Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""UNREGISTERED""));	
						else if(bcSIMOrdNumMastr.GetFieldValue(""Status"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""))
							prsInputs.SetProperty(""From Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""));
						else if(bcSIMOrdNumMastr.GetFieldValue(""Status"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""))
							prsInputs.SetProperty(""From Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));
									
						prsInputs.SetProperty(""Object Id"",bcSIMOrdNumMastr.GetFieldValue(""Block Id""));
				
						bsUpdateBlock.InvokeMethod(""UpdateNumberBlock"",prsInputs,prsOutputs);
					
						with(bcNumScheme) {
							ActivateField(""Max. Ter. Quarantine UOM"");
							ActivateField(""Max. Ter. Quarantine Period"");
							ClearToQuery();
							SetSearchSpec(""Id"", bcSIMOrdNumMastr.GetFieldValue(""Scheme Id""));
							ExecuteQuery();
							if(FirstRecord()){ 
								bcSIMOrdNumMastr.SetFieldValue(""Quarantine Date"",bcSIMOrdNumMastr.GetFieldValue(""Current Date""));
								dtQuarantineDateObj = CalcAvailableDate(GetFieldValue(""Max. Ter. Quarantine UOM""), GetFieldValue(""Max. Ter. Quarantine Period""), bcSIMOrdNumMastr);
								bcSIMOrdNumMastr.SetFieldValue(""Available Date"",DateToString(dtQuarantineDateObj));
							}
						}
					
						bcSIMOrdNumMastr.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE""));
						bcSIMOrdNumMastr.SetFieldValue(""Status Date"",bcSIMOrdNumMastr.GetFieldValue(""Current Date""));
						
					}
					else{
						prsInputs.SetProperty(""To Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED""));
							
						if(bcSIMOrdNumMastr.GetFieldValue(""Status"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""UNREGISTERED""))
							prsInputs.SetProperty(""From Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""UNREGISTERED""));	
						else if(bcSIMOrdNumMastr.GetFieldValue(""Status"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""))
							prsInputs.SetProperty(""From Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""));
						else if(bcSIMOrdNumMastr.GetFieldValue(""Status"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""))
							prsInputs.SetProperty(""From Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));
									
						prsInputs.SetProperty(""Object Id"",bcSIMOrdNumMastr.GetFieldValue(""Block Id""));
				
						bsUpdateBlock.InvokeMethod(""UpdateNumberBlock"",prsInputs,prsOutputs);
										
						bcSIMOrdNumMastr.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED""));
						bcSIMOrdNumMastr.SetFieldValue(""Status Date"",bcSIMOrdNumMastr.GetFieldValue(""Current Date""));
					}				

					bcSIMOrdNumMastr.SetFieldValue(""With SIM Order"","""");
					bcSIMOrdNumMastr.WriteRecord();
						
			}
			blnIsRecord = bcSIMOrdNumMastr.NextRecord();
		}
					
//-----------------------------------------
// Setting the status in CX_NUM_ASS_CNCT.
//-----------------------------------------					
		with(bcSIMOrdAssNum){
			ActivateField(""Status"");
			ActivateField(""Assoc Start Id"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",bcSimOrdNumInfo.GetFieldValue(""Assoc Start Id""));
			ExecuteQuery();
		}
			
		blnIsRecord = bcSIMOrdAssNum.FirstRecord();
					
		while(blnIsRecord){
			if(bcSIMOrdAssNum.GetFieldValue(""Status"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER"")
														||	
				bcSIMOrdAssNum.GetFieldValue(""Status"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE"")
														||
				bcSIMOrdAssNum.GetFieldValue(""Status"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""UNREGISTERED"")){
					bcSIMOrdAssNum.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED""));
					bcSIMOrdAssNum.WriteRecord();
			}
			blnIsRecord = bcSIMOrdAssNum.NextRecord();
		}
		
		bcSimOrdNumInfo.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED""));
		//commented by ms: need to show that sim cards were trashed in SIM Enquiry screen
		//bcSimOrdNumInfo.SetFieldValue(""Order Id"","""");
		//bcSimOrdNumInfo.SetFieldValue(""Order Line Id"","""");
		//bcSimOrdNumInfo.SetFieldValue(""Numbers"","""");
		//bcSimOrdNumInfo.SetFieldValue(""Numbers Type"","""");
		bcSimOrdNumInfo.WriteRecord();

		blnIsRecord = bcSimOrdNumInfo.NextRecord();
	
	}	
//----------------------------------------
// Setting the status in SIM Order Line.
//----------------------------------------				
	with(bcSIMOrderLine){
		ClearToQuery();
		SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
		ExecuteQuery();
	}
			
	blnIsRecord = bcSIMOrderLine.FirstRecord();
			
	while(blnIsRecord){
		bcSIMOrderLine.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""TRASHED""));
		bcSIMOrderLine.WriteRecord();
		blnIsRecord = bcSIMOrderLine.NextRecord();
	}	
							
	with(bcSIMOrder){
		SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""TRASHED""));
		WriteRecord();
	}
	
//-------------------------------------------------------------------------
//Searching for any other Order associated with same HLR and Batch Number
//and setting the field in Number Generation as NO or Partial.	
//-------------------------------------------------------------------------
	strSearchExpr = ""[HLR Id] ='"" + bcSIMOrder.GetFieldValue(""HLR ID"") +
	//		""' AND [Batch Number] ='"" + bcSIMOrder.GetFieldValue(""Batch Number"") +
			""' AND [With SIM Order] = 'Y'"" +
			""  AND [Type Identifier] ='"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") +
			""' AND [Status] <>'""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE"") + ""'"";
		
	with(bcSIMOrdNumMastr) {
		ClearToQuery();
		SetSearchExpr(strSearchExpr);
		ExecuteQuery();
	}	

	blnIsRecord = bcSIMOrdNumMastr.FirstRecord();
		
	strSearchExpr = ""[HLR Id] ='"" + bcSIMOrder.GetFieldValue(""HLR ID"") +
	//		""' AND [Batch Number] = '""+ bcSIMOrder.GetFieldValue(""Batch Number"") +
			""' AND [Type Identifier] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + ""'"";
					
		
	with(bcSIMOrdNumGen){
		ActivateField(""SIM Order Raised"");
		ClearToQuery();
		SetSearchExpr(strSearchExpr);
		ExecuteQuery();	
		FirstRecord();
	}
		
	if(blnIsRecord)
		bcSIMOrdNumGen.SetFieldValue(""SIM Order Raised"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""PARTIAL""));
	else
		bcSIMOrdNumGen.SetFieldValue(""SIM Order Raised"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""NO""));			
	
	bcSIMOrdNumGen.WriteRecord();
		
	}catch(e) {
		if(strErrVal == """")
			strErrVal = e.errText;
	} finally{
		prsInputs		= null;
		prsOutputs		= null;
		bsUpdateBlock	= null;
	}
	return (strErrVal);
}
"/**************************************************************************************
* Name          : SIM Order Business Service UpdateStartEndNumber Method			  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 26/07/2005 	1.0   		MBT		     	Created      			26/07/2005        *
* 27/07/2006    1.1         Kalyana Tangirala   Chaged  cursor mode  to  Forward Only     *	
* 20061123      1.2         Kalyana Tangirala   Included ""Scheme"" in  strSearchExpr    	
*20070821       1.3         Kalyana Tangirala   Changed the number type to IMSI in SS									GP										  *		
**************************************************************************************/
function UpdateStartEndNumber(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,Inputs,Outputs)
 {
	var boNMNumberEnquiry;
	var bcNMNumberEnquiryForUpdate;
	var boNMNumAssoc;
	var bcSIMNumInfo;
	var blnLinItemRec = false;
	var strSearchExpr = """";
	var strHLRId;
	var strErrVal = """";
	var intEndNum;
	var intStartNum;
	var intQuantity = 0;
	var StrCount;
	var strSIMId;
	var blnIsRecord;
	var EndingNumber = """";
	var StartingNumber;
	var Quantity;
	var CardCategory;
	boNMNumberEnquiry = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNMNumberEnquiryForUpdate = boNMNumberEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	boNMNumAssoc = TheApplication().GetBusObject(""RMS NM Number Association Service"");
	bcSIMNumInfo = boNMNumAssoc.GetBusComp(""RMS NM SIM ORDER LINE ITEM"");
	StartingNumber = Inputs.GetProperty(""StartingNumber"");
	
	Quantity = Inputs.GetProperty(""QuantityOrdered"");
	try {
with(bcNMNumberEnquiryForUpdate) {
		//ActivateField(""With SIM Order"");
		ActivateField(""Status"");	
		//ActivateField(""Type Identifier"");
		//ActivateField(""Card Ratio"");
		//ActivateField(""HLR Id"");
		//ActivateField(""HLR ID"");
	//	ActivateField(""Starting Number"");   KT 19042006 
		ActivateField(""Number String"");
		ActivateField(""IMSI Assoc"");
	//	ActivateField(""Ending Number""); KT 19042006 
		//ActivateField(""Service Plan Id"");
		//below 1.2
		//ActivateField(""Scheme Name"");
		//above 1.2
	}
	//Below 1.3
	   var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	   var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
	   bcSysPref.ActivateField(""Value"");
	   bcSysPref.ClearToQuery();
       bcSysPref.SetSearchSpec(""Name"",""RMS_SIM_ORDER_TYPE"");
	   bcSysPref.ExecuteQuery();
	   if(bcSysPref.FirstRecord()) 
	   {
	   var SIMOrderNumberType = bcSysPref.GetFieldValue(""Value"");
	   }
    //Above 1.3
//-----------------------------------------
//Query SIM order with the input Object id.
//-----------------------------------------

	with(bcSIMOrder) {
		SetViewMode(AllView);
		ActivateField(""HLR ID"")
		ClearToQuery();
		SetSearchSpec(""Id"",Inputs.GetProperty(""Object Id""));
		ExecuteQuery(ForwardOnly);
		strHLRId = GetFieldValue(""HLR ID"");		
	}

//-----------------------------------------
//Get all the line items for the SIM order
//-----------------------------------------
	intQuantity = 0;		
							
				/*if(GetFieldValue(""Gen. Supported"") != """")
					strSearchExpr = strSearchExpr + "" AND [SIM Generation Support] = '""+GetFieldValue(""Gen. Supported"")+""'"";
					
		  	    if(GetFieldValue(""Card Category"") == strHOT)
					strSearchExpr = strSearchExpr + "" AND [No. Of Assigned MSISDNs] = ""+GetFieldValue(""No of MSISDN No"")+"" AND [Service Plan Id] IS NOT NULL "";
			     if(GetFieldValue(""Card Category"") == strWARM)	
					strSearchExpr = strSearchExpr +	"" AND [No. Of Assigned MSISDNs] =""+GetFieldValue(""No of MSISDN No"")+"" AND [Service Plan Id] IS NULL "";	
		        if(GetFieldValue(""Card Category"") == strCOLD)
					strSearchExpr = strSearchExpr + "" AND [No. Of Assigned MSISDNs] =""+GetFieldValue(""No of MSISDN No"");*/ // KT19042006
			//MS	strSearchExpr = ""[HLR ID] = '"" + strHLRId + ""'"";	//KT 19042006 for testing purpose	
				/*with(bcNMNumberEnquiryForUpdate)    {
					SetSortSpec(""Number String(ASCENDING)"");
					SetSearchExpr(strSearchExpr);
					ExecuteQuery();
					if(FirstRecord()) {
				  	        
				  	    //bcSIMOrderLine.SetFieldValue(""Starting Number"",bcNMNumberEnquiryForUpdate.GetFieldValue(""Number String"")); KT19042006
				  	    //bcSIMOrderLine.WriteRecord(); KT 24-04-06
				  	         
				  	         
				  	                  }
//--------------------------------------------------------------------------------------------
//If start number is not found then set the Order Line error text with the appropriate mesage.
//--------------------------------------------------------------------------------------------
				  	 else {
				  	    //bcSIMOrderLine.SetFieldValue(""Error Text"",TheApplication().LookupMessage(""User Defined Errors"",""RMSORD002""));
				  	    //bcSIMOrderLine.WriteRecord();
				  	      }
				                                    }*/
//				strSearchExpr = """";
				//if(GetFieldValue(""Quantity Ordered"")>0)
						if(Quantity > 0)
                 {
				    
//------------------------------------------------------------------------------------------------
//Get the numeric start number for the SIM number to get the numbers greater than the start number.
//------------------------------------------------------------------------------------------------
	
					var mstrStartNum="""";
					var mstrScheme = """";
					var mstrBlockId ="""";
					with(bcNMNumberEnquiryForUpdate) 
					{
						ActivateField(""Number String"");
					    ActivateField(""Number"");
						ActivateField(""Block Id"");
						ActivateField(""Scheme Name"");
					    ClearToQuery();
					    //SetSearchSpec(""Number String"",bcSIMOrderLine.GetFieldValue(""Starting Number""));
					    SetSearchSpec(""Number String"",StartingNumber); //KT 24-05-06
						ExecuteQuery(ForwardOnly);
						if(FirstRecord())
						    mstrStartNum = GetFieldValue(""Number"");   
							mstrScheme     = GetFieldValue(""Scheme Name""); 
							mstrBlockId      = GetFieldValue(""Block Id"");
							
					}

					 if(mstrStartNum != """")
						   //strSearchExpr = strSearchExpr + "" AND [Number] >= '"" + mstrStartNum + ""'"";
                         strSearchExpr = ""[IMSI Assoc] = 'Y' ""+
                       //Below 1.3
						//KT 20070821 Changed Number type to IMSI
						// ""  AND [Type Identifier] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") +
					    ""  AND [Number Type Identifier Denorm] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", SIMOrderNumberType) +
						//Above 1.3
						""' AND [Status] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE"")+""'"";
						strSearchExpr= strSearchExpr+ ""AND [Number] >= '"" + mstrStartNum + ""'"";
						//below 1.2
						//below  1.3
						//strSearchExpr = strSearchExpr + ""AND [Scheme Name] = '"" + mstrScheme + ""'"";
						//strSearchExpr = strSearchExpr + ""AND [Scheme Name] = '"" + mstrScheme + ""'"";
						strSearchExpr = strSearchExpr + ""AND [Block Id] = '"" + mstrBlockId + ""'"";
						//above 1.3
						//above 1.2  
						with(bcNMNumberEnquiryForUpdate) {
								ClearToQuery();
								//ActivateField(""With SIM Order""); // Change  
								//ActivateField(""HLR Id"");
								//ActivateField(""HLR ID"");
								ActivateField(""Number String""); // Change 
								ActivateField(""Assoc Start Id""); // Change 
								ActivateField(""Status"");
								//ActivateField(""Card Ratio"");
								//StrCount = bcSIMOrderLine.GetFieldValue(""Quantity Ordered""); // Change 
								
								SetSearchExpr(strSearchExpr);
								SetSortSpec(""Number(ASC)"");
								//Changed cusrsor  mode to ForwardOnly to  process  more  than 10,000  records
								//below 1.1
								//ExecuteQuery();
								ExecuteQuery(ForwardOnly);
								//above 1.1
								blnIsRecord = FirstRecord();
								
						}
//-------------------------------------------------------------------------------------------
// Set the Order line with appropriate message to inform user that the numbers does not exist.
//--------------------------------------------------------------------------------------------
							/*if(!(blnIsRecord))	{
						  	    bcSIMOrderLine.SetFieldValue(""Error Text"",TheApplication().LookupMessage(""User Defined Errors"",""RMSORD002""));
						  	    bcSIMOrderLine.WriteRecord();  
							}*/   //KT 24-05-06	
							while(blnIsRecord) {
					
//---------------------------------------------------------------------------
// Setting the value of "" With SIM Order "" to TRUE for the numbers retrieved.
// Also storing the quantity of numbers retrieved.
//---------------------------------------------------------------------------		
								if(intQuantity == 0)
					    			intStartNum = bcNMNumberEnquiryForUpdate.GetFieldValue(""Number String"");	
							    	intQuantity = intQuantity + 1;
					       		    	StrCount = Quantity; 
									if(StrCount == intQuantity)  // Compares [Quantity Ordered]
									    
										break;
									strSIMId = bcNMNumberEnquiryForUpdate.GetFieldValue(""Id"");											
								blnIsRecord = bcNMNumberEnquiryForUpdate.NextRecord();
							}
//------------------------------------------------------------------------------------------------
// If the count requested is less than the quantity of numbers available
//then Set the Order line with appropriate message to inform user that the numbers does not exist.
//--------------------------------------------------------------------------------------------------
		
							if (StrCount > intQuantity) { // Desired No Of SIM Numbers Exists or Not - Checked Here
					  	    	//bcSIMOrderLine.SetFieldValue(""Error Text"",TheApplication().LookupMessage(""User Defined Errors"",""RMSALC002"",intQuantity));
						  	    //bcSIMOrderLine.WriteRecord();
	     						strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder013"",intQuantity,mstrScheme);
								TheApplication().RaiseErrorText(""RETURN"");
								}
					    	//	bcNMNumberEnquiryForUpdate.LastRecord();
					    	if(!(StrCount > intQuantity)) {
								intEndNum = bcNMNumberEnquiryForUpdate.GetFieldValue(""Number String"");

//----------------------------------------------------------------------------------
//If the quantity of numbers is available then set the ending number for order line.
//----------------------------------------------------------------------------------
								Outputs.SetProperty(""EndingNumber"",bcNMNumberEnquiryForUpdate.GetFieldValue(""Number String""));
							   //bcSIMOrderLine.SetFieldValue(""Ending Number"",bcNMNumberEnquiryForUpdate.GetFieldValue(""Number String""));
							   //bcSIMOrderLine.WriteRecord();
						   	   						
							   strErrVal = ValidateLinItemNumbers(bcSIMOrder,bcSIMOrderLine,Inputs,Outputs);
							    if(strErrVal != """") 
                                {
								TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));
								TheApplication().RaiseErrorText(""RETURN"");
								}
								
							   var intQty = 0;
							   //below 1.1
								DeletePreviousLineItemNumbers(bcSIMNumInfo,bcNMNumberEnquiryForUpdate,SIMOrderNumberType,Inputs,Outputs);
								with(bcNMNumberEnquiryForUpdate) {
								ClearToQuery();
								SetSearchExpr(strSearchExpr);
								SetSortSpec(""Number(ASC)"");
								ExecuteQuery(ForwardOnly);
								blnIsRecord = FirstRecord(); 
								}
							   //above 1.1
//-----------------------------------------------------------------------------
//For each number update the line item numbers with the order and line item id.
//-----------------------------------------------------------------------------

							   while(blnIsRecord) {
									//test
									var intStartNum1 = bcNMNumberEnquiryForUpdate.GetFieldValue(""Number String"");
									intQty = intQty + 1;
									//bcNMNumberEnquiryForUpdate.SetFieldValue(""With SIM Order"",""Y""); // Setting ""With SIM Order"" Status to ""Y""
									//bcNMNumberEnquiryForUpdate.WriteRecord(); 
						
						 		    // Below 1.3
									//strSIMId = bcNMNumberEnquiryForUpdate.GetFieldValue(""Id"");	
									strSIMId = bcNMNumberEnquiryForUpdate.GetFieldValue(""Assoc Start Id"");	  
									//Above 1.3 
						           with(bcSIMNumInfo)
									{
							            ActivateField(""Assoc Start Id"");
										ActivateField(""SIM Id"");
										ActivateField(""Order Id"");
										ActivateField(""Order Line Id"");
										ClearToQuery();
										SetSearchSpec(""Assoc Start Id"",strSIMId);
										ExecuteQuery(); 
						  				if(!FirstRecord()) 
						  				{
											NewRecord(1);
											SetFieldValue(""Assoc Start Id"",strSIMId);
											SetFieldValue(""SIM Id"",strSIMId);
											//SetFieldValue(""Order Line Id"", bcSIMOrderLine.GetFieldValue(""Id""));
						                    //SetFieldValue(""Order Id"",bcSIMOrderLine.GetFieldValue(""Order Id""));
											SetFieldValue(""Order Line Id"",Inputs.GetProperty(""RowId""));
											SetFieldValue(""Order Id"",Inputs.GetProperty(""Object Id""));
											WriteRecord();
						    			}
						    			else 
						    			{
											SetFieldValue(""Order Line Id"",Inputs.GetProperty(""RowId""));
											SetFieldValue(""Order Id"",Inputs.GetProperty(""Object Id""));
											//SetFieldValue(""Order Line Id"", bcSIMOrderLine.GetFieldValue(""Id""));
						                    //SetFieldValue(""Order Id"",bcSIMOrderLine.GetFieldValue(""Order Id""));
											WriteRecord();
						    			}
								    }		 
							
								  if(StrCount == intQty)   	// Compares [Quantity Ordered] -- Change
								    	break; 		   
						
								  blnIsRecord = bcNMNumberEnquiryForUpdate.NextRecord();
							}
						}
						
			//	}
			
			//}  KT19042006
			/*else {
//-----------------------------------------------------------------------------
//If card config is not selected then set appropriate message for the line item.
//-----------------------------------------------------------------------------			
		  	    bcSIMOrderLine.SetFieldValue(""Error Text"",""Please fill the Card Config for this line item."");
		  	    bcSIMOrderLine.WriteRecord();
			}
			*/ // KT19042006
			//blnLinItemRec = NextRecord();	
		  //}
      	} 
	return(strErrVal);

	}catch (e) {
		bcNMNumberEnquiryForUpdate = null;
		boNMNumberEnquiry = null;
		bcSIMNumInfo = null;
		boNMNumAssoc = null;
		throw(e);
	}finally{
		if(strErrVal != """")
		Outputs.SetProperty(""ErrMessage"",strErrVal);
		bcNMNumberEnquiryForUpdate = null;
		boNMNumberEnquiry = null;
		bcSIMNumInfo = null;
		boNMNumAssoc = null;
		//below 1.3
		bcSysPref    = null;
		boSysPref    = null; 
		return(strErrVal);
	    //above 1.3
	}
}
"/**************************************************************************************
* Name          : RMS SIM Order ValidateLineItemNumbers Function			 	      * 
* Author        : Tech Mahindra                                            *
* Description   : Checks if Starting Number is overlapping any SIM Order			 .      				  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 20060709		1.0   		  Kalyana     Created        
* 20061009      1.1           Kalyana     Changed Search Spec to make SIM Ordering asynchronous
**************************************************************************************/

function ValidateLinItemNumbers(bcSIMOrder,bcSIMOrderLine,Inputs,Outputs)
{

	var intStartNum;
	var intEndNum;
	var intPrevStartNum;
	var intPrevEndNum;
	var strStartNum;
	var strEndNum;
	var strErrVal = """";	
	var blnIsRecord;
	var blnLinItemRec = false;
	var EndingNumber;   
	var StartingNumber;  
	var strSearchExp = """";
	StartingNumber = Inputs.GetProperty(""StartingNumber"");
	EndingNumber = Outputs.GetProperty(""EndingNumber"");
	       
/*//-----------------------------------------
// Converting the string fields to integer
//-----------------------------------------
	
	intStartNum = ToInteger(StartingNumber);
	intEndNum  = ToInteger(EndingNumber);*/

//---------------------------------------------------------------------------------
//Get all the SIM orders of Status New  and get all Line items   of  status New 
//---------------------------------------------------------------------------------
with(bcSIMOrder) {
		SetViewMode(AllView);
		ClearToQuery();
		//below 1.1
		//SetSearchSpec(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW""));
		strSearchExp = strSearchExp+""[Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW"")+""'"";
		strSearchExp = strSearchExp + "" OR [Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""PROCESSING"")+""'"";
		strSearchExp = strSearchExp + "" OR [Status] = '""+TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""SUBMITTED"")+""'"";
		SetSearchExpr(strSearchExp);
		//above 1.1
		ExecuteQuery(ForwardOnly);
        blnIsRecord = FirstRecord();
	 	}
   while(blnIsRecord)
      {
        var SIMOrderId = bcSIMOrder.GetFieldValue(""Id"");
		with(bcSIMOrderLine) 
		{
		ActivateField(""Order Number"");
		ActivateField(""Starting Number"");
		ActivateField(""Ending Number"");
		ActivateField(""Error Text"");			
		ActivateField(""Order Line Number"");
		ClearToQuery();
		//SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
		var intLineItemId = Inputs.GetProperty(""RowId"");
		//SetSearchSpec(""Id"",""<> '"" + intLineItemId + ""'"");
		var strSearchExp =    ""[Id] <> '"" + intLineItemId + ""'""; 
		strSearchExp= strSearchExp+"" AND "" +""[Order Id] ='""+SIMOrderId+""'""; 
 		//SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
		SetSearchExpr(strSearchExp);
		//ExecuteQuery();
		ExecuteQuery(ForwardOnly);
		blnLinItemRec = bcSIMOrderLine.FirstRecord();
		}  // End  of with(bcSIMOrderLine) 
//---------------------------------------------------------------------------------
//If Line Item does not then check for Current Order 
//---------------------------------------------------------------------------------		
		/*if (!blnLinItemRec) 
		{
		/*if(SIMOrderId == Inputs.GetProperty(""Object Id""))
		{
		Outputs.SetProperty(""StartingNumber"",StartingNumber);
	    Outputs.SetProperty(""EndingNumber"",EndingNumber);
	    //Outputs.SetProperty(""Start Number"",intStartNum);
	    //Outputs.SetProperty(""End Number"",intEndNum);
		return(strErrVal);
		}
		else
		{*/
		//blnIsRecord = bcSIMOrderLine.NextRecord();
		//blnIsRecord = bcSIMOrder.NextRecord();
		//}
		//}  // End  if (!blnLinItemRec) */
        while(blnLinItemRec)
		{		
		var test =  bcSIMOrderLine.GetFieldValue(""Id"");
		intPrevStartNum 	= bcSIMOrderLine.GetFieldValue(""Starting Number"");
		intPrevEndNum   	= bcSIMOrderLine.GetFieldValue(""Ending Number"");
		var LineItemNo      = bcSIMOrderLine.GetFieldValue(""Order Line Number"");
		var SIMOrderNo      = bcSIMOrderLine.GetFieldValue(""Order Number"");
//----------------------------------------------------------------
// Raise an error if start number has been used in another Line Item.				
//----------------------------------------------------------------		
        if((StartingNumber >= intPrevStartNum) && (StartingNumber <= intPrevEndNum)){
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder009"",SIMOrderNo,LineItemNo);
		return(strErrVal);									
        }
//----------------------------------------------------------------
// Raise an error if end number has been used in Line Item.				
//----------------------------------------------------------------
        if((EndingNumber >= intPrevStartNum) && (EndingNumber <= intPrevEndNum)){
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder009"",SIMOrderNo,LineItemNo);
		return(strErrVal);	
		}
	    blnLinItemRec = bcSIMOrderLine.NextRecord();
	    } // End  of While
       //blnIsRecord = bcSIMOrderLine.NextRecord();
       blnIsRecord = bcSIMOrder.NextRecord();
		}
	   Outputs.SetProperty(""StartingNumber"",StartingNumber);
	   Outputs.SetProperty(""EndingNumber"",EndingNumber);
	 //Outputs.SetProperty(""Start Number"",intStartNum);
	 //Outputs.SetProperty(""End Number"",intEndNum);
	   if(strErrVal != """")
	   Outputs.SetProperty(""ErrMessage"",strErrVal);
	   return(strErrVal);
	   }
"/**************************************************************************************
* Name          : SIM Order Business Validate SIM Order Method			  	  *
* Author        : Tech Mahindra										  * 
* Description 	: Code to validate SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 200601007 	1.0   		Kalyana Tangirala	 Created      	        *
* 
**************************************************************************************/

function ValidateSIMOrder(bcSIMOrder,bcSIMOrderLine,bcSIMOrdPaperDisplay,bcSIMSupPaper,Inputs)
{

	var strErrVal 		= """";
	var blnIsOrderLine 	= false;
	var blnsISOrder     = false;
	var blnIsPprItm     = false;
//-------------------------------------------------------------------------
// Checking  wheteher Paper Item KI is added to the Order Or Not
//-------------------------------------------------------------------------	
	try{
	with(bcSIMOrder)
	{
	ActivateField(""Supplier Name"");
	ActivateField(""Supplier Changed"");
	SetViewMode(AllView);
    SetSearchSpec(""Id"",Inputs.GetProperty(""Object Id""));
	ExecuteQuery(ForwardOnly);
    blnsISOrder = FirstRecord();
	}
	if(blnsISOrder)
	{
	/*
	if(bcSIMOrder.GetFieldValue(""Supplier Changed"")==""Y"")
	{
	Inputs.SetProperty(""Supplier Id"",bcSIMOrder.GetFieldValue(""Supplier Id""));
    Inputs.SetProperty(""Object Id"",bcSIMOrder.GetFieldValue(""Id""));
	strErrVal = DisplayPaper(bcSIMOrder,bcSIMSupPaper,bcSIMOrdPaperDisplay,Inputs)
	}*/
	with(bcSIMOrdPaperDisplay)
	{
	SetViewMode(AllView);
	ActivateField(""Paper Item Name"");
    ActivateField(""SIM Order Id"");
	ClearToQuery();
	SetSearchSpec(""SIM Order Id"",Inputs.GetProperty(""Object Id""));
	SetSearchSpec(""Paper Item Name"",""KI"");  
	ExecuteQuery(ForwardOnly);
	blnIsPprItm = bcSIMOrdPaperDisplay.FirstRecord();
    }
    if(!blnIsPprItm)
    {
    strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder005"",bcSIMOrder.GetFieldValue(""Supplier Name""));
	return(strErrVal);
	}
	with(bcSIMOrderLine)
	{
		SetViewMode(AllView);
		ActivateField(""Order Id"");
		ActivateField(""SIM Card Config Id"");
		ClearToQuery();
		SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
		ExecuteQuery(ForwardOnly);
        blnIsOrderLine = FirstRecord();
		if(!blnIsOrderLine)
		{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder001"");
		return(strErrVal);
		}
		if(bcSIMOrderLine.GetFieldValue(""SIM Card Config Id"") == """")
		{
			bcSIMOrder.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW""));
			bcSIMOrder.WriteRecord();
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD023"");
			return(strErrVal); 
		}
	}
	}
	return(strErrVal);
	}//End of try
	
catch(e){
		strErrVal = e.errText;
		return(strErrVal);
	    }
}//End of function"
"/**************************************************************************************
* Name          : SIM Order Check Association Business Service PreInvoke Method       *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order Check Association							  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{

//	var boSIMOrder;  // Changed
	
	var boNMEnquiry; // Changed
	
	var bcSIMOrdNMMstr;
	var blnIsRecord;
	var intReturn;
	var strSearchExpr = """";
	
//	boSIMOrder 		= TheApplication().GetBusObject(""RMS SIM Order""); // Changed 02:06:2005
//	bcSIMOrdNMMstr	= boSIMOrder.GetBusComp(""RMS SIM Order NM Number Master"");// Changed 02:06:2005

    boNMEnquiry		= TheApplication().GetBusObject(""RMS NM Number Enquiry""); // Changed 02:06:2005
    bcSIMOrdNMMstr  = boNMEnquiry.GetBusComp(""RMS NM Number Enquiry For Update""); // Changed 02:06:2005

	intReturn		= ContinueOperation;	
	
	if(MethodName == ""Check Association"")
	{
		
		intReturn = CancelOperation;
    	strSearchExpr = ""[Gen Log Id] = '"" + Inputs.GetProperty(""Gen Log Id"") +
						""' AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE"") +
						""' AND [Is Associated] = 'Y'"" + "" AND [IMSI Assoc] = 'Y'"";
	
	with(bcSIMOrdNMMstr	)
		{
			ActivateField(""Is Associated"");
			ActivateField(""Status"");
			ActivateField(""IMSI Assoc"");
			ActivateField(""Gen Log Id"");
			ClearToQuery();
			SetSearchExpr(strSearchExpr);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}
		
		if(blnIsRecord)
			Outputs.SetProperty(""Is Associated"",""Y"");
		else
			Outputs.SetProperty(""Is Associated"",""N"");
	}
	
	
	bcSIMOrdNMMstr 	= null;	
//	boSIMOrder 		= null;
	boNMEnquiry		= null;
	return(intReturn);	
}
"/**************************************************************************************
* Name          : SIM Order Interface Order			 	          					  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Calculate Available Date                      				      *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 1/11/2003	1.0   		Mahindra British Telecom   	Created       05/11/2003          *
**************************************************************************************/
function CalcAvailableDate(QuarUOM, QuarPeriod,bcSIMOrdNumMastr)
{
	var dtSysDate 			= Clib.time();
	var dtSysDateObj 		= Date.fromSystem(dtSysDate);

	var dtQuarantineDate 	= bcSIMOrdNumMastr.GetFieldValue(""Quarantine Date"");
	var dtQuarantineDateObj = new Date(dtQuarantineDate);
 
    switch (QuarUOM) 
    {

  	    case ""Days"": 
			dtQuarantineDateObj.setDate(ToInteger(dtQuarantineDateObj.getDate()) + ToInteger(QuarPeriod));
        	break;
             	
   		case ""Months"": 
			dtQuarantineDateObj.setMonth(ToNumber(ToNumber(dtQuarantineDateObj.getMonth()) + ToNumber(QuarPeriod)));
			break;
		
    	case ""Weeks"":
			dtQuarantineDateObj.setDate(dtQuarantineDateObj.getDate() + (QuarPeriod * 7));
       		break;
   		
   		case ""Year"": 
  			dtQuarantineDateObj.setFullYear(ToNumber(ToNumber(dtQuarantineDateObj.getFullYear()) + ToNumber(QuarPeriod)));
			break;
   }
   return(dtQuarantineDateObj);
}
"/**************************************************************************************
* Name          : SIM Order Business Service CancelOrder Method			  	          *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			22/12/2003        *
**************************************************************************************/

function CancelOrder(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,bcSIMOrdAssNum,Inputs){

/*	var blnIsRecord;  //KT 21-06-06
	
	var dtSystem;
	var dtCancelByDate;
	var dtCancelledDate;

	var intDateTime;
	var intCancelDate;
	
	var strErrVal 		= """";
	var strSearchExpr 	= """";
	
	var bsUpdateBlock;
	
	var psBlkInputs 	= TheApplication().NewPropertySet();
	var psBlkOutputs 	= TheApplication().NewPropertySet();
	
	try
	{
	dtSystem 			= Clib.time();
	intDateTime 		= (Date.fromSystem(dtSystem)).getTime();

	bsUpdateBlock 		= TheApplication().GetService(""RMS RMS Block Calc"");
		
	dtCancelByDate  	= bcSIMOrder.GetFieldValue(""Cancel By Date"");
	dtCancelledDate 	= new Date(dtCancelByDate);
	intCancelDate 		= dtCancelledDate.getTime();
	
//------------------------------------------------------
// Checking the Cancelled Date with the Cancel By Date
//------------------------------------------------------	
	if((dtCancelByDate != """") && (intCancelDate < intDateTime)){
	//if((dtCancelByDate != """") && (intCancelDate > intDateTime)){
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD021"",intCancelDate);
		//TheApplication().RaiseErrorText(strErrVal);
		return(strErrVal);
	}
	else{
//-------------------------------------------------------
// If Cancel By Date is Greater then Today's Date,
// then only the following updations will take place.
//-------------------------------------------------------		
		with(bcSimOrdNumInfo){
			ClearToQuery();
			SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}
			
		while(blnIsRecord)
		{
			
//-----------------------------------------------------------			
// Setting the Status and Date fields in Number Master, Order.
// Order Line and in the Associsted Number BC's.			
//-----------------------------------------------------------
			with(bcSIMOrdNumMastr)
			{
				
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",bcSimOrdNumInfo.GetFieldValue(""Assoc Start Id""));
				ExecuteQuery();
			}	
			
			blnIsRecord = bcSIMOrdNumMastr.FirstRecord();
			
//-----------------------------------------------------------------------			
// Setting the status for the associated numbers back to 'Not Available'
//-----------------------------------------------------------------------
			while(blnIsRecord){	
				if(bcSIMOrdNumMastr.GetFieldValue(""Status"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER"")){		
					with(psBlkInputs){
						SetProperty(""Object Id"",bcSIMOrdNumMastr.GetFieldValue(""Block Id""));
						SetProperty(""From Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""));
						SetProperty(""To Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE""));
					}
					bsUpdateBlock.InvokeMethod(""UpdateNumberBlock"",psBlkInputs,psBlkOutputs);
					bcSIMOrdNumMastr.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE""));
					bcSIMOrdNumMastr.SetFieldValue(""Status Date"",bcSIMOrdNumMastr.GetFieldValue(""Current Date""));
				}
				bcSIMOrdNumMastr.SetFieldValue(""With SIM Order"","""");
				bcSIMOrdNumMastr.WriteRecord();
				
				blnIsRecord = bcSIMOrdNumMastr.NextRecord();
			}

//--------------------------------------
// Updating the CX_NUM_ASS_CNCT table.
//--------------------------------------					
			with(bcSIMOrdAssNum){
				ActivateField(""Status"");
				ActivateField(""Assoc Start Id"");
				ClearToQuery();
				SetSearchSpec(""Assoc Start Id"",bcSimOrdNumInfo.GetFieldValue(""Assoc Start Id""));
				ExecuteQuery(ForwardOnly);
			}
			
			blnIsRecord = bcSIMOrdAssNum.FirstRecord();
		
			while(blnIsRecord){
				bcSIMOrdAssNum.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE""));
				bcSIMOrdAssNum.WriteRecord();
				blnIsRecord = bcSIMOrdAssNum.NextRecord();
			}
			
			bcSimOrdNumInfo.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE""));
			bcSimOrdNumInfo.SetFieldValue(""Order Id"","""");
			bcSimOrdNumInfo.SetFieldValue(""Order Line Id"","""");
			bcSimOrdNumInfo.SetFieldValue(""Numbers"","""");
			bcSimOrdNumInfo.SetFieldValue(""Numbers Type"","""");
			bcSimOrdNumInfo.WriteRecord();
			
			blnIsRecord = bcSimOrdNumInfo.NextRecord();
		
		}
				
		with(bcSIMOrderLine){
			ClearToQuery();
			SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
			ExecuteQuery(ForwardOnly);
		}
			
		blnIsRecord = bcSIMOrderLine.FirstRecord();
			
		while(blnIsRecord){
			bcSIMOrderLine.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""CANCELLED""));
			bcSIMOrderLine.WriteRecord();
			blnIsRecord = bcSIMOrderLine.NextRecord();
		}	
							
		with(bcSIMOrder){
			SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""CANCELLED""));
			SetFieldValue(""Cancelled Date"",GetFieldValue(""Current Date""));
			WriteRecord();
		}
				
//-------------------------------------------------------------------------
//Searching for any other Order associated with same HLR and Batch Number
//and setting the field in Number Generation as NO or Partial.	
//-------------------------------------------------------------------------
		strSearchExpr = ""[HLR Id] ='"" + bcSIMOrder.GetFieldValue(""HLR ID"") +
		// AND [Batch Number] ='"" + bcSIMOrder.GetFieldValue(""Batch Number"") +""' 
				""' AND [With SIM Order] = 'Y'"" +
				""  AND [Type Identifier] ='"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") +
				""' AND [Status] <>'""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE"") + ""'"";
		

		with(bcSIMOrdNumMastr) {
			ClearToQuery();
			SetSearchExpr(strSearchExpr);
			ExecuteQuery(ForwardOnly);
		}	
		blnIsRecord = bcSIMOrdNumMastr.FirstRecord();
		
		strSearchExpr = ""[HLR Id] ='"" + bcSIMOrder.GetFieldValue(""HLR ID"") + 
		//    AND [Batch Number] = '""+ bcSIMOrder.GetFieldValue(""Batch Number"") +""' 
		""' AND [Type Identifier] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + ""'"";
					
		
		with(bcSIMOrdNumGen){
			ActivateField(""SIM Order Raised"");
			ClearToQuery();
			SetSearchExpr(strSearchExpr);
			ExecuteQuery(ForwardOnly);	
			FirstRecord();
		}
		
		if(blnIsRecord)
			bcSIMOrdNumGen.SetFieldValue(""SIM Order Raised"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""PARTIAL""));
		else
			bcSIMOrdNumGen.SetFieldValue(""SIM Order Raised"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""NO""));			
		
		bcSIMOrdNumGen.WriteRecord();
	}
	} catch(e) {
		if(strErrVal == """")
			strErrVal = e.errText;
	}
	
	psBlkInputs		= null;
	psBlkOutputs	= null;
	bsUpdateBlock	= null;
	
	return (strErrVal);*/
}
"/**************************************************************************************
* Name          : SIM Order Business Service CancelValidation Method			  	  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
*
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 02/11/2003 	1.0   		MBT		     	Created      			03/11/2003        *
**************************************************************************************/
function CancelValidation(bcSIMOrder,bcSIMOrderLine)
{
	var strSimOrdStatus;
	var strSimOrdLineStatus;
				
	var blnIsRecord;
		
	var dtCurrentDate;
	var dtSystem;
	var dtCancelByDate;
	var dtCancelledDate;

	var intDateTime;
	var intCancelDate;
		
	dtSystem 		= Clib.time();
	intDateTime 	= (Date.fromSystem(dtSystem)).getTime();

	dtCancelByDate  = bcSIMOrder.GetFieldValue(""Cancel By Date"");
	dtCancelledDate = new Date(dtCancelByDate);
	intCancelDate 	= dtCancelledDate.getTime();
		
	strSimOrdStatus = bcSIMOrder.GetFieldValue(""Status"");
	dtCurrentDate   = bcSIMOrder.GetFieldValue(""Current Date"");

//----------------------------------------------------------
//Checking whether CancelByDate is greater than CurrentDate	
//----------------------------------------------------------

	if(dtCancelByDate != """")
	{
		if(intCancelDate <= intDateTime){
			if(TheApplication().GetSharedGlobal(""Revision"")==""Y"")
			{
				TheApplication().SetSharedGlobal(""Revision"","""");
			
			TheApplication().RaiseError(""RMSORD008"");			
			}
			else
			 TheApplication().RaiseError(""RMSORD009"");				
		}	
	}
	
//	bcSIMOrderLine.SetSharedGlobal(""SuppressOrdLinePreSet"",""Y"");

//------------------------------------------------------------------------
//If status of order line is ""To Be Deleted"" ,status shouldn't be changed 
//otherwise set the status as ""Cancelled"".		
//------------------------------------------------------------------------

	if(bcSIMOrderLine.GetFieldValue(""Status"")!=""To Be Deleted""){
		bcSIMOrderLine.SetFieldValue(""Status"",""Cancelled"");
		bcSIMOrderLine.WriteRecord();
	}

//----------------------------------------------------------------------------
//Set the order status as ""Cancelled"" & assign today's date to ""CancelledDate""
//----------------------------------------------------------------------------
		
	with(bcSIMOrder)
	{
//		SetSharedGlobal(""Suppress PreSetField"",""Y"");
		SetFieldValue(""Status"",""Cancelled"");
		SetFieldValue(""Cancelled Date"",dtCurrentDate);	
		WriteRecord();
//		SetSharedGlobal(""Suppress PreSetField"","""");		
	}		
//	bcSIMOrderLine.SetSharedGlobal(""SuppressOrdLinePreSet"","""");						
}
"/**************************************************************************************
* Name          : SIM Order Business Service CreateOrderLine Method			  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order Line										  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/

function CreateOrderLine(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,Inputs){
	
	/*var intStartNum;
	var intEndNum;
	var intQuantity 	= 0;
	var strHLRId		= """";

//	var strBatchNum		= """";

	var strSearchExpr 	= """";
	var strErrVal 		= """";
	var strObjectId		= """";
	var strSIMId;
	
	var blnIsRecord;
	var mbIsAssocNum 	= false;
	
	var lboSIMOrder; 	
	var lbcSIMOrder;    
	var lbcSIMOrderLine;
	
	
	try	{

		lboSIMOrder 	        = TheApplication().GetBusObject(""RMS SIM Order"");
		lbcSIMOrder            	= lboSIMOrder.GetBusComp(""RMS SIM Order"");
		lbcSIMOrderLine        	= lboSIMOrder.GetBusComp(""RMS SIM Order Line"");
		
		strHLRId    			= bcSIMOrder.GetFieldValue(""HLR ID"");
	//	strBatchNum 			= bcSIMOrder.GetFieldValue(""Batch Number"");
		strObjectId 			= Inputs.GetProperty(""Object Id"");
	
	if(strObjectId == """") 
	{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",strObjectId);
		TheApplication().RaiseErrorText(strErrVal);
	}
		
	with(lbcSIMOrder)
	{
		ActivateField(""Status"");
		ClearToQuery();
		SetSearchSpec(""Id"",strObjectId);
		ExecuteQuery(ForwardOnly);
		FirstRecord();
	}
	
	with(lbcSIMOrderLine)
	{
		ClearToQuery();
		//SetSearchSpec(""Order Id"",strObjectId);
		ExecuteQuery();	
		var theRecord = FirstRecord();
	}	
	
	
	if(!(lbcSIMOrderLine.FirstRecord()))
	{
		
//------------------------------------------------------------------
// Retrieving the numbers using the specified HLR and batch number.
//------------------------------------------------------------------	
		
		
		
		strSearchExpr = 
			""[HLR Id] = '"" + strHLRId +
//			""' AND [Batch Number] = '"" + strBatchNum +
			""' AND [IMSI Assoc] = 'Y' ""+
			""  AND [Type Identifier] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") +
			""' AND [Status] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE"") + ""'"";
		
		 
		with(bcSIMOrdNumMastr) 
		{
			ClearToQuery();
			SetSearchExpr(strSearchExpr);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}	
		
//---------------------------------------------
// Informing user if no numbers are available.
//---------------------------------------------		
		if(!(blnIsRecord))
		{
			bcSIMOrder.SetUserProperty(""From BusService"",""Y"");
			bcSIMOrder.SetFieldValue(""Status"","""");
			bcSIMOrder.WriteRecord();
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD002"");
			TheApplication().RaiseErrorText(strErrVal);
		}	
		
/*		while(blnIsRecord)  
		{
//------------------------------------------------------------------------
// Setting the value of With SIM Order to True for the numbers retrieved.
// Also storing the quantity of numbers retrieved.
//------------------------------------------------------------------------		
			if(intQuantity == 0)
				intStartNum = bcSIMOrdNumMastr.GetFieldValue(""Number String"");	
			bcSIMOrdNumMastr.SetFieldValue(""With SIM Order"",""Y"");
			bcSIMOrdNumMastr.WriteRecord();
			intQuantity = intQuantity + 1;
			
			
			strSIMId = bcSIMOrdNumMastr.GetFieldValue(""Id"");											
//-------------------------------------------------------------------------------
// Getting the Assoc Start Id from Number Master and searching for the records in 
// Order Num Info and setting the Order Id against the Assoc Start Id
//-------------------------------------------------------------------------------						
			with(bcSimOrdNumInfo)
			{
				SetViewMode(AllView);				
				ClearToQuery();
				ActivateField(""SIM Id"");
				SetSearchSpec(""Assoc Start Id"",bcSIMOrdNumMastr.GetFieldValue(""Assoc Start Id""));
				ExecuteQuery();
				mbIsAssocNum = FirstRecord();
				if(mbIsAssocNum) 
				{
					SetUserProperty(""From BusService"",""Y"");
					bcSimOrdNumInfo.SetFieldValue(""Order Id"",Inputs.GetProperty(""Object Id""));
					bcSimOrdNumInfo.SetFieldValue(""SIM Id"",strSIMId);
					WriteRecord();
					SetUserProperty(""From BusService"",""N"");
				}
			}
			blnIsRecord = bcSIMOrdNumMastr.NextRecord();
		}*/

//-------------------------------------
// Taking the end number in the string
//-------------------------------------		
//		bcSIMOrdNumMastr.LastRecord();
//		intEndNum = bcSIMOrdNumMastr.GetFieldValue(""Number String"");
		
//------------------------------------------------------------------
// Checking if any numbers exist which arent associated.	
// If any number exist then set the generation record to partial
// else set to complete.
//------------------------------------------------------------------	
	/*	strSearchExpr = 
		""[HLR Id] ='"" + strHLRId + 
		//AND [Batch Number] ='"" + strBatchNum +""' 
		""' AND [IMSI Assoc] = 'N""+ 
		""' AND [Type Identifier] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + 
		""' AND [Status] ='""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE"") + ""'"";
		
		with(bcSIMOrdNumMastr) 
		{		
			ClearToQuery();
			SetSearchExpr(strSearchExpr);
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}
				
		strSearchExpr = 
		""[HLR Id] ='"" + strHLRId +
//		""' AND [Batch Number] = '""+ strBatchNum +
		""' AND [Type Identifier] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + ""'"";
						
		with(bcSIMOrdNumGen)
		{
			ActivateField(""SIM Order Raised"");
			ClearToQuery();
			SetSearchExpr(strSearchExpr);
			ExecuteQuery();	
			FirstRecord();
		}	
		
		if(blnIsRecord)
			bcSIMOrdNumGen.SetFieldValue(""SIM Order Raised"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""PARTIAL""));
		else
			bcSIMOrdNumGen.SetFieldValue(""SIM Order Raised"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""COMPLETE""));			
		bcSIMOrdNumGen.WriteRecord();	
			
			
//----------------------------------------------------------
// Creating the Order Line and setting the required fields. 
//----------------------------------------------------------
		
		with(lbcSIMOrderLine)
		{
			NewRecord(1);
			SetFieldValue(""Order Id"",bcSIMOrder.GetFieldValue(""Id"")); 
			
		//	SetFieldValue(""Starting Number"",intStartNum);  	 //  27 APR
		//	SetFieldValue(""Ending Number"",intEndNum);  		 //  27 APR
		//	SetFieldValue(""Quantity Ordered"",intQuantity);   //  27 APR
			
			var temp = bcSIMOrder.GetFieldValue(""Organization Name"");
			var orgid = bcSIMOrder.GetFieldValue(""Organization Id"");
			var divid = bcSIMOrder.GetFieldValue(""Division Id"");
			

			var bcSalesChannel = GetPicklistBusComp(""Sales Channel Name"");
			
			with(bcSalesChannel) 
			{
				SetViewMode(AllView);
				ClearToQuery()
				SetSearchSpec(""Id"",bcSIMOrder.GetFieldValue(""Organization Id""));
				ExecuteQuery();
				if(FirstRecord())
					Pick();
			}

/*			SetFieldValue(""Sales Channel Name"",bcSIMOrder.GetFieldValue(""Organization Name""));

			SetFieldValue(""Sales Channel Id"",bcSIMOrder.GetFieldValue(""Organization Id""));
			SetFieldValue(""Sales Channel Div Name"",bcSIMOrder.GetFieldValue(""Division Name""));
			SetFieldValue(""Sales Channel Div Id"",bcSIMOrder.GetFieldValue(""Division Id""));
*/
			
//			SetFieldValue(""Ship To Address"",bcSIMOrder.GetFieldValue(""Bill To Address""));
//			SetFieldValue(""Ship To Address Id"",bcSIMOrder.GetFieldValue(""Bill To Address Id""));
			
//			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""PROCESSING""));   
		
//			SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW""));   
			/*WriteRecord();
		}
		
		with(bcSimOrdNumInfo)
		{
			ClearToQuery();
			SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}
		
		while(blnIsRecord)
		{
			bcSimOrdNumInfo.SetFieldValue(""Order Line Id"",lbcSIMOrderLine.GetFieldValue(""Id""));
			bcSimOrdNumInfo.WriteRecord();
			blnIsRecord = bcSimOrdNumInfo.NextRecord();
		}
				
		bcSIMOrder.SetUserProperty(""From BusService"",""Y"");
		bcSIMOrder.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW"")); 
		bcSIMOrder.WriteRecord();
		bcSIMOrder.SetUserProperty(""From BusService"",""N"");
				
	}
	
	} catch(e) 	{
	
		if(strErrVal =="""")
			strErrVal = e.errText;
	} 
	finally
	{
	
		lbcSIMOrderLine = null;
		lbcSIMOrder		= null
		lboSIMOrder		= null;
	}
	
	
	if(strErrVal != """") 
	     TheApplication().RaiseError(strErrVal);  
	
	return(strErrVal);*/
	
}
"/**************************************************************************************
* Name          : SIM Order Business Service DateToString Method			  	      *
* Author        : Mahindra British Telecom                                            *
* Description   : DateToString Code File                      				          *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/10/2003	1.0   		Mahindra British Telecom   	Created       29/10/2003      *
**************************************************************************************/

//-------------------------------------------------------------------------------------
//Gets the 'Date','Month','Hours','Minutes','Second' and appends them to a string.
//-------------------------------------------------------------------------------------

function DateToString (dtCDate)
{
	var dtDatum = ((dtCDate.getMonth() + 1) + ""/"" + dtCDate.getDate() + ""/"" + dtCDate.getFullYear()
	+ "" "" + dtCDate.getHours() + "":"" + dtCDate.getMinutes()+ "":"" + dtCDate.getSeconds());
	return dtDatum;
}
"/**************************************************************************************
* Name          : SIM Order Business Service DeleteOrder Method			  	          *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/

function DeleteOrder(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,bcSIMOrdPaperDisplay,Inputs){
	
/*	var strSearchExpr 	= """";  //KT 21-06-06
	var strErrVal		= """";
	var blnIsRecord;
	
	try
	{
	if(Inputs.GetProperty(""Object Id"") == """") {
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",Inputs.GetProperty(""Object Id""));
		TheApplication().RaiseErrorText(strErrVal);
	}
	
	with(bcSimOrdNumInfo)
	{
		ClearToQuery();
		SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}
	
	
//------------------------------------------------------------------------------------
//Querying the Number Master with Assoc Start Id which we got from the Order Num Info
//and setting the With SIM Order and Order Id field in Num Info and Number Master
//------------------------------------------------------------------------------------ 		
	while(blnIsRecord && bcSimOrdNumInfo.GetFieldValue(""Order Id"") != """")
	{
	
		with(bcSIMOrdNumMastr)
		{
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",bcSimOrdNumInfo.GetFieldValue(""Assoc Start Id""));
			SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""));
			ExecuteQuery();
			bcSIMOrdNumMastr.SetFieldValue(""With SIM Order"","""");
		}
		bcSimOrdNumInfo.SetFieldValue(""Order Id"","""");
		bcSimOrdNumInfo.SetFieldValue(""Order Line Id"","""");
		bcSimOrdNumInfo.WriteRecord();
		blnIsRecord = bcSimOrdNumInfo.NextRecord();
	}

//--------------------------------------------------------------------------------------------
// Retreiving the generation record and setting the SIM ORDER RAISED to 'No' or 'Partial
// depending on the orders placed.
//--------------------------------------------------------------------------------------------
	strSearchExpr = ""[HLR Id] ='"" + bcSIMOrder.GetFieldValue(""HLR ID"") +
//					""' AND [Batch Number] = '""+ bcSIMOrder.GetFieldValue(""Batch Number"") +
					""' AND [Type Identifier] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + ""'"";
						
	with(bcSIMOrdNumGen)
	{
		ActivateField(""SIM Order Raised"");
		ClearToQuery();
		SetSearchExpr(strSearchExpr);
		ExecuteQuery();	
		FirstRecord();
	}	
//---------------------------------------------------------------------------
// Searching for any other Order associated with same HLR and Batch Number
//---------------------------------------------------------------------------		
	strSearchExpr = ""[HLR Id] ='"" + bcSIMOrder.GetFieldValue(""HLR ID"") +
//				""' AND [Batch Number] ='"" + bcSIMOrder.GetFieldValue(""Batch Number"") +
				""' AND [With SIM Order] = 'Y'"" +
				""  AND [Type Identifier] ='"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + ""'"";
		

	with(bcSIMOrdNumMastr)
	{
		ClearToQuery();
		SetSearchExpr(strSearchExpr);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}	

//----------------------------------------------------------
//Setting the SIM Order Raised in the Number Generation BC
//----------------------------------------------------------		
	if(blnIsRecord == ""Y"")
		bcSIMOrdNumGen.SetFieldValue(""SIM Order Raised"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""PARTIAL""));
	else
		bcSIMOrdNumGen.SetFieldValue(""SIM Order Raised"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""NO""));			
	bcSIMOrdNumGen.WriteRecord();
	
	with(bcSIMOrdPaperDisplay)
	{
		ActivateField(""SIM Order Id"");
		ClearToQuery();
		SetSearchSpec(""SIM Order Id"",Inputs.GetProperty(""Object Id""));
		ExecuteQuery();
	}
	
	blnIsRecord = bcSIMOrdPaperDisplay.FirstRecord();
	
	while(blnIsRecord)
	{
		bcSIMOrdPaperDisplay.DeleteRecord();
		blnIsRecord = bcSIMOrdPaperDisplay.FirstRecord();
	}
			
//-------------------------------------------------------
// Deleting the record from the Order Line and the Order.
//-------------------------------------------------------

	
	bcSIMOrder.SetUserProperty(""From BusService"",""Y"");
	
	with(bcSIMOrderLine)
	{
		ClearToQuery();
		SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
		ExecuteQuery();
	}
	
	blnIsRecord = bcSIMOrderLine.FirstRecord();
			
	while(blnIsRecord)
	{
		bcSIMOrderLine.DeleteRecord();
		blnIsRecord = bcSIMOrderLine.FirstRecord();
	}

	if(bcSIMOrder.GetFieldValue(""Id"") == Inputs.GetProperty(""Object Id"")) 
	{
		TheApplication().SetSharedGlobal(""From Delete"",""Y"");

		bcSIMOrder.DeleteRecord();
	
		TheApplication().SetSharedGlobal(""From Delete"",""N"");
	}
	
	} 
	catch(e) 
	{
		if(strErrVal == """") 
			strErrVal = e.errText;
	} 
	finally 
	{
		
	}
	return(strErrVal);*/
}
"/**************************************************************************************
* Name          : RMS SIM Order DeletePreviousLineItemNumbers 			 	      * 
* Author        : Kalyana Tangirala                                            *
* Description   : Deletes prevously  selected Line item numbers when  Quantity Or 
Starting  number is changed and the records   are not in
between Starting Number and Ending Number     				  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 28/07/2006	1.0   		  Kalyana Tangirala				Created          
**************************************************************************************/

function DeletePreviousLineItemNumbers(bcSIMNumInfo,bcNMNumberEnquiryForUpdate,Inputs,Outputs)
{
	var blnIsRecord;
	var EndingNumber;   
	var StartingNumber;  
	var SIMNumber;
	StartingNumber = Inputs.GetProperty(""StartingNumber"");
	EndingNumber = Outputs.GetProperty(""EndingNumber"");
    with(bcSIMNumInfo)
	{
	  ActivateField(""Assoc Start Id"");
	  ActivateField(""SIM Id"");
	  ActivateField(""Order Id"");
	  ActivateField(""Order Line Id"");
	  ClearToQuery();
	  SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
	  SetSearchSpec(""Order Line Id"",Inputs.GetProperty(""RowId""));
	  ExecuteQuery(ForwardOnly);
      blnIsRecord = FirstRecord();	
	}
       while(blnIsRecord)
		{
		with(bcNMNumberEnquiryForUpdate)
		{
		ActivateField(""Number String"");
		ClearToQuery();
		SetSearchSpec(""Assoc Start Id"",bcSIMNumInfo.GetFieldValue(""Assoc Start Id""));
		SetSearchSpec(""Type Identifier"",TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""));
		ExecuteQuery(ForwardOnly);
		var blnIsNumber = FirstRecord();
		}	
		if(blnIsNumber)
		{
		SIMNumber = bcNMNumberEnquiryForUpdate.GetFieldValue(""Number String"");
		if((SIMNumber < StartingNumber) || (SIMNumber > EndingNumber))
		{
	  	bcSIMNumInfo.DeleteRecord();
		}//End of  if 								
        else
		{
		blnIsRecord = bcSIMNumInfo.NextRecord();
		}
		}//End of if(blnIsNumber)
		//blnIsRecord = bcSIMNumInfo.NextRecord();
		}//End of  while
		}
"/**************************************************************************************
* Name          : SIM Order Business Service DisplayPaper Method			  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT		     	Created      			28/12/2003        *
**************************************************************************************/

function DisplayPaper(bcSIMOrder,bcSIMSupPaper,bcSIMOrdPaperDisplay,Inputs){

	var blnIsRecord;
	var strErrVal 	= """";
	
	try{
	if(Inputs.GetProperty(""Object Id"") == """") {
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",Inputs.GetProperty(""Object Id""));
		TheApplication().RaiseErrorText(strErrVal);
	}
	
	with(bcSIMOrdPaperDisplay){
		ActivateField(""SIM Order Id"");
		ClearToQuery();
		SetSearchSpec(""SIM Order Id"",Inputs.GetProperty(""Object Id""));
		ExecuteQuery();
	}
	
	blnIsRecord = bcSIMOrdPaperDisplay.FirstRecord();

//------------------------------------------------------------
// Deleting the previous paper items if supplier has changed.
//------------------------------------------------------------	
	while(blnIsRecord){
		bcSIMOrdPaperDisplay.DeleteRecord();
		blnIsRecord = bcSIMOrdPaperDisplay.FirstRecord();
	}
	
//------------------------------------------------------------------
// Retreiving the associated paper items for the selected supplier.	
//------------------------------------------------------------------
	if(Inputs.GetProperty(""Supplier Id"")!=""""){	
		with(bcSIMSupPaper){
			ActivateField(""Supplier Id"");
			ActivateField(""Paper Item Id"");
			ClearToQuery();
			SetSearchSpec(""Supplier Id"",Inputs.GetProperty(""Supplier Id""));
			ExecuteQuery();
			blnIsRecord = FirstRecord();
		}
		
//--------------------------------------------
// Associating the paper item with the order.
//--------------------------------------------		
		while(blnIsRecord){
			with(bcSIMOrdPaperDisplay){
				ActivateField(""Paper Item Id"");
				ActivateField(""SIM Order Id"");			
				NewRecord(1);
				SetFieldValue(""Paper Item Id"",bcSIMSupPaper.GetFieldValue(""Paper Item Id""));
				SetFieldValue(""SIM Order Id"",Inputs.GetProperty(""Object Id""));
				WriteRecord();
				}
			
			blnIsRecord = bcSIMSupPaper.NextRecord();
		}
	}
	} catch(e) {
		if(strErrVal == """") 
			strErrVal = e.errText;
	} finally {
		
	}
	return(strErrVal);
}
"/**************************************************************************************
* Name          : SIM Order Business Service FinaliseApproval Method			  	  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/
function FinaliseApproval(bcSIMOrdApprovalUpdate,bcSIMOrderLineApproval,strStatus){
/*
	var dtCurrentDate;
	var strOrdLineStatus;
	var strErrVal = """";
	
	dtCurrentDate 		= bcSIMOrdApprovalUpdate.GetFieldValue(""Current Date"");
	strOrdLineStatus    = bcSIMOrderLineApproval.GetFieldValue(""Status"");

//--------------------------------------------------------------------------------
//Raising an error if the existing status of the order line is 'Awaiting Approval'
//--------------------------------------------------------------------------------
	if(strOrdLineStatus == TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDERLINE_STATUS"", ""AWAITING APPROVAL""))
	{
		
		bcSIMOrderLineApproval.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""APPROVED""));
		bcSIMOrderLineApproval.WriteRecord();
		strOrdLineStatus = TheApplication().InvokeMethod(""LookupValue"",""SIM_ORDERLINE_STATUS"",""APPROVED"");
		//strErrVal=""RMSSOR001"";	
		//return(strErrVal);
	}	
	//else 
	//{

//-----------------------------------------------------------------------------------------------
//Changing the status of the order if the status of the order line is either 'Approval Rejected '
//or 'Approved'
//-----------------------------------------------------------------------------------------------
		
		if(strOrdLineStatus == TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDERLINE_STATUS"", ""APPROVAL REJECTED"")){
			with(bcSIMOrdApprovalUpdate){
		 		SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""APPROVAL REJECTED""));
		  		WriteRecord();
		  	}
		}else if(strOrdLineStatus == TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDERLINE_STATUS"", ""APPROVED"")){
			with(bcSIMOrdApprovalUpdate){
				SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""APPROVED""));
				SetFieldValue(""Approved Date"",dtCurrentDate);
				WriteRecord();
			}
		}	
	//}
	return(strErrVal);*/
}
"/**************************************************************************************
* Name          : RMS SIM Order Refresh BC Function        		                  * 
* Author        : Mahindra British Telecom                                            *
* Description   : Refreshes the BC to reflect the current / updated values.	          *	
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 22/12/2003 	1.0   		MBT						   	Created      22/12/2003       *
* 20060710      1.1         Kalyana                   Siebel ES SCR1, Objects Destroyed
**************************************************************************************/

function RefreshingBC()
{
	var psInputs;
	var psOutputs;
	var bsSIMNMRef;
	
	psInputs = TheApplication().NewPropertySet();
	psOutputs = TheApplication().NewPropertySet();
	
	bsSIMNMRef = TheApplication().GetService(""RMS SIM NM Refresh Business Component"");
										
	psInputs.SetProperty(""Business Component Name"",""RMS SIM Order"");
	psInputs.SetProperty(""Business Object Name"",""RMS SIM Order"");
	bsSIMNMRef.InvokeMethod(""Refresh Business Component"",psInputs,psOutputs);
//below 1.1	
	bsSIMNMRef  = null;
//above 1.1
	psInputs 	= null;
	psOutputs 	= null;
	
}
"/**************************************************************************************
* Name          : SIM Order Business Service PreInvoke Method Method			  	  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 02/11/2003 	1.0   		MBT		     	Created      			03/11/2003        *
**************************************************************************************/
function SIMRevision(strOrderId)
{
	var boSIMOrder;
	var boSIMOrderRev;

	var bcSIMOrder;
	var bcSIMOrderRev;

	var blnRecord;
	var intRevNum;
		
	boSIMOrderRev = TheApplication().ActiveBusObject();	
	bcSIMOrderRev = boSIMOrderRev.GetBusComp(""RMS SIM Order"");

	boSIMOrder = TheApplication().GetBusObject(""RMS SIM Order"");	
	bcSIMOrder = boSIMOrder.GetBusComp(""RMS SIM Order"");
			
	with(bcSIMOrderRev)
	{
		ActivateField(""Revision Number"");
		ActivateField(""Order Number"");
//--------------------------------------------------------------------------
//Copy record with same order number incrementing the revision number by one
//--------------------------------------------------------------------------			
		NewRecord(2);
//		SetSharedGlobal(""Suppress PreSetField"",""Y"");
		SetFieldValue(""Order Number"",bcSIMOrder.GetFieldValue(""Order Number""));
		intRevNum = ToInteger(bcSIMOrder.GetFieldValue(""Revision Number""));
		intRevNum = intRevNum+1;
		SetFieldValue(""Revision Number"",intRevNum);
//		SetSharedGlobal(""Suppress PreSetField"","""");
	}
	
	bcSIMOrder		= null;
	boSIMOrder		= null;
	
	bcSIMOrderRev	= null;
	boSIMOrderRev	= null;
}
"/**************************************************************************************
* Name          : SIM Order Business Service SendForApproval Method			  	      *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
**************************************************************************************/

function SendForApproval(bcSIMOrder,bcSIMOrderLine,Inputs){
  	
/*	var strOrdLineStatus;  // KT 21-06-06
	var intObjectId;
	var strErrVal = """";
		
	intObjectId = Inputs.GetProperty(""Object Id"");
	
	try
	{
	if(Inputs.GetProperty(""Object Id"") == """") 
	{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",Inputs.GetProperty(""Object Id""));
		TheApplication().RaiseErrorText(strErrVal);
	}	
	
	with(bcSIMOrderLine){
		ClearToQuery();
		SetSearchSpec(""Order Id"",intObjectId);
		ExecuteQuery();	
		FirstRecord();
	}
	

	if(bcSIMOrderLine.GetFieldValue(""SIM Card Config Id"") == """") {
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD003"");
		return(strErrVal);
	}
//---------------------------------------------------------------------------
// Changing status of order line item to ""Awaiting Approval"",if it was either 
// ""New"" or ""Approval Rejected"".
//---------------------------------------------------------------------------
  	strOrdLineStatus = bcSIMOrderLine.GetFieldValue(""Status"");
	
	if(strOrdLineStatus != TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""AWAITING APPROVAL"")){
   		bcSIMOrderLine.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""AWAITING APPROVAL""));
   		bcSIMOrderLine.WriteRecord();
   	}

//-------------------------------------------------------------------------------
// Changing status of order to ""Awaiting Approval"" and assigning Cancel By date 
// of corresponding order line to ""Cancel By Date"" of order.
//-------------------------------------------------------------------------------
	with(bcSIMOrder){
		ActivateField(""Cancel By Date"");
		ActivateField(""Status"");
		ClearToQuery();
		SetSearchSpec(""Id"",intObjectId);
		ExecuteQuery();
		FirstRecord();
		SetUserProperty(""From BusService"",""Y"");
		SetFieldValue(""Cancel By Date"",bcSIMOrderLine.GetFieldValue(""Cancel By Date""));
		SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""AWAITING APPROVAL""));
		WriteRecord();
		SetUserProperty(""From BusService"",""N"");
	}
	} catch(e) {
		if(strErrVal == """") 
			strErrVal = e.errText;
	} finally {
		
	}
	return(strErrVal);*/
}
"/**************************************************************************************
* Name          : SIM Order Business Service PreInvoke Method 					  	  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			23/12/2003        *
* 28/06/2006 	1.1   		ARUNJ		    Siebel ES#40 Incorporated changes  
* 20060710      1.2         Kalyana         Siebel ES SCR1, Objects Destroyed
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var boSIMOrder;
	var boNMEnquiry; // Changed 02:06:2005
	var bcSIMOrder;
	var bcSIMOrderLine;
	var bcSimOrdNumInfo;
	var bcSIMOrdNumMastr;
	var bcSIMOrdNumGen;
	var bcSIMOrdAssNum;
	var bcSIMSupPaper;
	var bcSIMOrdPaperDisplay;
	var bcSIMNumStatus;
	var bcNumScheme;
// below 1.1	
//	var bcSIMPaperItem;
// above 1.1	
	var boSIMOrderApproval;
	var bcSIMOrderApproval;
	var bcSIMOrdApprovalUpdate;
	var bcSIMOrderLineApproval;
	var intObjectId;
	var blnOrdLineRecd;
	var blnIsRecord;
	var strErrVal = """";
	var strOrdStatus;
	var strStatus;
	var intReturn = ContinueOperation;
	if(TheApplication().GetSharedGlobal(""From Delete"") == ""Y"")
		return(CancelOperation);
    try	{
		if(Inputs.GetProperty(""Object Id"") == """") 
		{
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD014"",Inputs.GetProperty(""Object Id""));
			TheApplication().RaiseErrorText(strErrVal);
		}
		boSIMOrder 	          = TheApplication().GetBusObject(""RMS SIM Order"");
		boNMEnquiry			  = TheApplication().GetBusObject(""RMS NM Number Enquiry""); //  Changed 02:06:2005
		bcSIMOrder            = boSIMOrder.GetBusComp(""RMS SIM Order for Update"");
		bcSIMOrderLine        = boSIMOrder.GetBusComp(""RMS SIM Order Line"");
		bcSimOrdNumInfo       = boSIMOrder.GetBusComp(""RMS SIM Order Line Num Info for Update"");
		//bcSIMOrdNumMastr      = boSIMOrder.GetBusComp(""RMS SIM Order NM Number Master"");
        bcSIMOrdNumMastr      = boNMEnquiry.GetBusComp(""RMS NM Number Enquiry For Update""); // Changed 02:06:2005
        bcSIMOrdNumGen	      = boSIMOrder.GetBusComp(""RMS SIM Order NM Number Generation"");
		bcSIMOrdAssNum	      = boSIMOrder.GetBusComp(""RMS SIM Order Association Number Type Display"");
		bcSIMSupPaper         = boSIMOrder.GetBusComp(""RMS SIM Order Supplier Paper Item"");
		bcSIMOrdPaperDisplay  = boSIMOrder.GetBusComp(""RMS SIM Order Paper Item Display"");
		//KT 10-06-06  added  to check whether KI is added  to Supplier or not
// below 1.1		
//		bcSIMPaperItem        = boSIMOrder.GetBusComp(""RMS SIM Paper Item"");  
//		bcSIMNumStatus		  = boSIMOrder.GetBusComp(""RMS SIM Number Status"");
//		bcNumScheme 		  = boSIMOrder.GetBusComp(""RMS NM Number Scheme"");
// above 1.1	
		boSIMOrderApproval     = TheApplication().GetBusObject(""RMS SIM Order Approval"");
		bcSIMOrdApprovalUpdate = boSIMOrderApproval.GetBusComp(""RMS SIM Order Approval for Update"");
		bcSIMOrderLineApproval = boSIMOrderApproval.GetBusComp(""RMS SIM Order Line Approval"");
		intObjectId = Inputs.GetProperty(""Object Id"");

//--------------------
// Code for SIM Order
//--------------------		
		if((MethodName != ""FinaliseApproval""))
		{
			with(bcSIMOrder)
			{
				SetViewMode(AllView);
				ActivateField(""Status"");
				ActivateField(""HLR ID"");
			//	ActivateField(""Batch Number"");
				ActivateField(""Organization Name"");
				ActivateField(""Organization Id"");
				ActivateField(""Division Name"");
				ActivateField(""Division Id"");
				ActivateField(""Bill To Address"");
				ActivateField(""Bill To Address Id"");
				ActivateField(""PO Generated Date"");
				ActivateField(""Current Date"");
			//	ActivateField(""Cancel By Date"");
			//	ActivateField(""Cancelled Date"");
			//	ActivateField(""Comments"");
				ActivateField(""Supplier Changed"");
				ActivateField(""Supplier Id"");
			//	ActivateField(""Image Id"");  //  20:07:05
				ClearToQuery();
				SetSearchSpec(""Id"",intObjectId);
				ExecuteQuery();
				blnIsRecord = FirstRecord();
			}
				
			if(blnIsRecord)
			{	

//---------------------------------------------------------------------------------------------
// Inform user if another user is trying to create an order at the same time using the same 
// the HLR ID and Batch Number.				
//---------------------------------------------------------------------------------------------
				with(bcSIMOrder)
				{
					ClearToQuery();
					SetSearchSpec(""HLR ID"",bcSIMOrder.GetFieldValue(""HLR ID""));
			//		SetSearchSpec(""Batch Number"",bcSIMOrder.GetFieldValue(""Batch Number""));
			//		SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""PROCESSING"")); 
					SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW"")); 
					ExecuteQuery();
					blnIsRecord = FirstRecord();
				}
												
			//	if(blnIsRecord && (strStatus == TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""PROCESSING"")))  
 
    			if(blnIsRecord && (strStatus == TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW"")))
				{
					strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD001"");
					TheApplication().RaiseErrorText(strErrVal);
				}
				else
				{
					with(bcSIMOrder)
					{
						ClearToQuery();
						SetSearchSpec(""Id"",intObjectId);
						ExecuteQuery();
						blnIsRecord=FirstRecord();
						strOrdStatus = GetFieldValue(""Status"");
						
						SetUserProperty(""From BusService"",""Y"");
						if((MethodName != ""UpdateStartEndNumber"") && (MethodName != ""SubmitToSupplier""))		
							SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""PROCESSING""));
						WriteRecord();
						SetUserProperty(""From BusService"",""N"");
					}
				}
				
				with(bcSimOrdNumInfo)
				{
					SetViewMode(AllView);
					ActivateField(""Order Id"");
					ActivateField(""Numbers"");
					ActivateField(""Numbers Type"");
					ActivateField(""Status"");
					ActivateField(""Assoc Start Id"");
					ActivateField(""Order Line Id"");
				}
						
				with(bcSIMOrderLine)
				{
					SetViewMode(AllView);
					ActivateField(""Order Id"");
					ActivateField(""Quantity Ordered"");
					ActivateField(""Status"");
					ActivateField(""Starting Number"");
					ActivateField(""Ending Number"");
					ActivateField(""Sales Channel Name"");
					ActivateField(""Sales Channel Id"");
					ActivateField(""Sales Channel Div Name"");
					ActivateField(""Sales Channel Div Id"");
					ActivateField(""Ship To Address"");
					ActivateField(""Ship To Address Id"");
					ActivateField(""Cancel By Date"");
					ActivateField(""SIM Card Config Id"");
				}
				
				with(bcSIMOrdNumMastr)  // Refers : RMS NM Number Enquiry For Update 
				{
					SetViewMode(AllView);
					ActivateField(""HLR Id"");
			//		ActivateField(""Batch Number"");
					ActivateField(""Number"");
					ActivateField(""Number String"");
					ActivateField(""Is Associated"");
					ActivateField(""Status"");
					ActivateField(""Type Identifier"");
					ActivateField(""Type"");
					ActivateField(""IMSI Assoc"");
					ActivateField(""With SIM Order"");
					ActivateField(""Assoc Start Id"");
					ActivateField(""Block Id"");
					ActivateField(""Artwork Id"");
					ActivateField(""Scheme Id"");
					ActivateField(""Available Date"");
					ActivateField(""Quarantine Date"");
					ActivateField(""Status Date"");
					ActivateField(""Current Date"");
				}
													
				switch(MethodName)
				{
					case ""CreateOrderLine"":
						
						intReturn = CancelOperation;
						strErrVal = CreateOrderLine(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,Inputs);
						RefreshingBC();
						break;
						
//------------------------------------------------------------------------------						
//The method below updates the start and end number for all SIM order line items.
//------------------------------------------------------------------------------

					case ""UpdateStartEndNumber"":
						
						intReturn = CancelOperation;
						strErrVal = UpdateStartEndNumber(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,Inputs,Outputs);
						if(strErrVal != """") 
                        {
                       TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));
						//RefreshingBC();
						break;
						}
						/*else 
						{
						strErrVal = ValidateLinItemNumbers(bcSIMOrder,bcSIMOrderLine,Inputs,Outputs);									
					    if(strErrVal != """") 
                        {
                       TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));
						//RefreshingBC();
						break;
						}*/
						break;
						case ""DeleteOrder"":	
						
						intReturn = CancelOperation;
						strErrVal = DeleteOrder(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,bcSIMOrdPaperDisplay,Inputs);
						break;
						
					case ""ValidateLinItemNumbers"":
						
						intReturn = CancelOperation;
						strErrVal = ValidateLinItemNumbers(bcSIMOrder,bcSIMOrderLine,Inputs,Outputs);
						if(strErrVal != """") 
                        TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));
						//RefreshingBC();
						break;
					case ""UpdatePaperItem"":	
					
						intReturn = CancelOperation;
						strErrVal = DisplayPaper(bcSIMOrder,bcSIMSupPaper,bcSIMOrdPaperDisplay,Inputs);
						bcSIMOrder.SetUserProperty(""From BusService"",""Y"");
						// bcSIMOrder.ActivateField(""Supplier Changed"");
						bcSIMOrder.SetFieldValue(""Supplier Changed"",""N"");
						bcSIMOrder.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW""));
						bcSIMOrder.WriteRecord();
						bcSIMOrder.SetUserProperty(""From BusService"",""Y"");
						RefreshingBC();
						 							
			
						break;
					
					case ""SendForApproval"":
					
						intReturn = CancelOperation;
						strErrVal = SendForApproval(bcSIMOrder,bcSIMOrderLine,Inputs);
						if(strErrVal != """") 
						{
							bcSIMOrder.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""OPEN""));
							bcSIMOrder.WriteRecord();
							TheApplication().RaiseError(strErrVal);	
						}
						break;
										
					case ""SubmitToSupplier"": // Submit To ERP
					
						intReturn = CancelOperation;
						strErrVal = SubmitToSupplier(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdAssNum,bcSIMOrdPaperDisplay,bcSIMSupPaper,Inputs);
						 if(strErrVal != """") 
							TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));
							
						RefreshingBC();				
						break;
				
					case ""CancelOrder"":
					
						intReturn = CancelOperation;
						strErrVal = CancelOrder(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,bcSIMOrdAssNum,Inputs);
						if(strErrVal != """") 
						{
							bcSIMOrder.SetFieldValue(""Status"",strOrdStatus);
							bcSIMOrder.WriteRecord();
							TheApplication().RaiseError(strErrVal);	
						}
						RefreshingBC();
						break;
						
					case ""TrashOrder"":
					
						intReturn = CancelOperation;
// below 1.1			
						bcSIMNumStatus		  = boSIMOrder.GetBusComp(""RMS SIM Number Status"");
						bcNumScheme 		  = boSIMOrder.GetBusComp(""RMS NM Number Scheme"");
// above 1.1			
						strErrVal = TrashOrder(bcSIMOrder,bcSIMNumStatus,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,bcSIMOrdAssNum,Inputs,bcNumScheme);
						if(strErrVal != """")
						{
							bcSIMOrder.SetFieldValue(""Status"",strStatus);
							bcSIMOrder.WriteRecord();
							//RefreshingBC();
							//TheApplication().RaiseErrorText(strErrVal);	
						}
						RefreshingBC();
						break;
				}
			}
		
		else
			intReturn = CancelOperation;
		}

//------------------------------
// Code for SIM Order Approval.
//------------------------------		
		else{
		
			with(bcSIMOrdApprovalUpdate)
			{
				ActivateField(""Status"");
				ActivateField(""Approved Date"");
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(""Id"",intObjectId);
				ExecuteQuery();
			}
			
			with(bcSIMOrderLineApproval)
			{
				ActivateField(""Status"");
				ActivateField(""Id"");
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(""Order Id"",intObjectId);
				ExecuteQuery();
			}
			
			switch(MethodName)
			{
			
				case ""FinaliseApproval"":
	
					intReturn = CancelOperation;
					
					strErrVal = FinaliseApproval(bcSIMOrdApprovalUpdate,bcSIMOrderLineApproval,strOrdStatus);
					
					if(strErrVal != """")
						TheApplication().RaiseError(strErrVal);
					
					return(intReturn);		
			}
		}
			
	}catch(e){

		if(strErrVal == """")
			strErrVal = e.errText;

	} finally {

		bcSIMOrder 		         	= null;
		bcSIMOrderLine	         	= null;
		bcSimOrdNumInfo 	 	 	= null;
		bcSIMOrdNumMastr         	= null;
		bcSIMSupPaper            	= null;
		bcSIMOrdPaperDisplay     	= null;
		bcSIMOrdNumGen	      		= null;
		bcSIMOrdAssNum	      		= null;
		bcSIMNumStatus		  		= null;
		bcNumScheme					= null;
		boSIMOrder 		         	= null;
		bcSIMOrdApprovalUpdate	 	= null;
		bcSIMOrderLineApproval   	= null;
		bcSIMNumStatus				= null;
		boSIMOrderApproval   	 	= null;
//below 1.2 		
		boNMEnquiry                 = null;
//above 1.2
	}
		if(strErrVal != """")
			 TheApplication().RaiseErrorText(strErrVal); 
		return(intReturn);
}
"/**************************************************************************************
* Name          : SIM Order Business Service SubmitToSupplier Method			  	  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   			MBT		     Created      			23/12/2003        *
* 29/09/2004 	1.1   			MBT		     Modified      			29/09/2004        *
* 27/07/2006    1.2             Kalyana      Changed cursor mode to  process  more than
                                10,000 records in  in  one  single Order
**************************************************************************************/

function SubmitToSupplier(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdAssNum,bcSIMOrdPaperDisplay,bcSIMSupPaper,Inputs)
{

	var strSIMNum     = """";
	var strIMSINum    = """";
	var strMSISDNNum  = """";
	var strSIMType    = """";
	var strIMSIType   = """";
	var strMSISDNType = """";
	var strFromStatus = """";
	var strToStatus	  = TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER"");
	var strErrVal 	  = """";
	var strFinalNum  = """";
	var strFinalType = """";
	var dtCurrentDate;
	var blnIsOrderLine;
	var blnIsRecord;
	var strFileName;
	var strFilePath;
	var bsUpdateBlock;
	var bsSIMFile;
	var prsInputs   = TheApplication().NewPropertySet();
	var prsOutputs  = TheApplication().NewPropertySet();
	var boSysPref = TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref = boSysPref.GetBusComp(""System Preferences"");
	try {
	bsUpdateBlock = TheApplication().GetService(""RMS RMS Block Calc"");
//	bsSIMFile     = TheApplication().GetService(""RMS SIM File""); 
//	bsSIMFile	  = TheApplication().GetService(""Workflow Process Manager (Server Request)"");
	bsSIMFile	  = TheApplication().GetService(""Workflow Process Manager"");
	dtCurrentDate = bcSIMOrder.GetFieldValue(""Current Date"");
//	var boSIMOrder 		= TheApplication().GetService(""RMS SIM Order"");
//	var bcSIMOrderLine  = boSIMOrder.GetBusComp(""RMS SIM Order Line"");

//-------------------------------------------------------------------------
// Checking  wheteher Paper Item KI is added to the Order Or Not //KT 10-06-06
//-------------------------------------------------------------------------	
	with(bcSIMOrder)
	{
	ActivateField(""Supplier Name"");
	ActivateField(""Supplier Changed"");
	SetViewMode(AllView);
    SetSearchSpec(""Id"",Inputs.GetProperty(""Object Id""));
	 //below 1.2
     //ExecuteQuery();
     ExecuteQuery(ForwardOnly);
     //above 1.2
	var blnsISOrder = FirstRecord();
	}
	if(blnsISOrder)
	{
	if(bcSIMOrder.GetFieldValue(""Supplier Changed"")==""Y"")
	{
	prsInputs.SetProperty(""Supplier Id"",bcSIMOrder.GetFieldValue(""Supplier Id""));
    prsInputs.SetProperty(""Object Id"",bcSIMOrder.GetFieldValue(""Id""));
	strErrVal = DisplayPaper(bcSIMOrder,bcSIMSupPaper,bcSIMOrdPaperDisplay,prsInputs)
	}
	with(bcSIMOrdPaperDisplay)
	{
	SetViewMode(AllView);
	ActivateField(""Paper Item Name"");
    ActivateField(""SIM Order Id"");
	//ActivateField(""Paper Item Value"");
	ClearToQuery();
	SetSearchSpec(""SIM Order Id"",Inputs.GetProperty(""Object Id""));
	SetSearchSpec(""Paper Item Name"",""KI"");  
	//below 1.2
	//ExecuteQuery();
	ExecuteQuery(ForwardOnly);
	//above 1.2
	var blnIsPprItm = bcSIMOrdPaperDisplay.FirstRecord();
    }
    if(!blnIsPprItm)
    {
    bcSIMOrder.SetFieldValue(""Supplier Changed"",""Y"");
	bcSIMOrder.WriteRecord();
	strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder005"",bcSIMOrder.GetFieldValue(""Supplier Name""));
	return(strErrVal);
	}
	}
	with(bcSIMOrderLine)
	{
		SetViewMode(AllView);
		ActivateField(""Order Id"");
		ActivateField(""SIM Card Config Id"");
/*		
		ActivateField(""Quantity Ordered"");
		ActivateField(""Status"");
		ActivateField(""Starting Number"");
		ActivateField(""Ending Number"");
		ActivateField(""Ship To Address"");
		ActivateField(""Ship To Address Id"");
		ActivateField(""Cancel By Date"");
*/
		ClearToQuery();
		SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
		//below 1.2
        //ExecuteQuery();
        ExecuteQuery(ForwardOnly);
        //above 1.2
		blnIsOrderLine = FirstRecord();
		if(!blnIsOrderLine)
		{
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder001"");
		//TheApplication().RaiseErrorText(""RETURN"");
		return(strErrVal);
		}
		if(bcSIMOrderLine.GetFieldValue(""SIM Card Config Id"") == """")
		{
			bcSIMOrder.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW""));
			bcSIMOrder.WriteRecord();
			strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD023"");
			return(strErrVal); 
		}
	}
	with(bcSIMOrdAssNum)
	{
		ActivateField(""Status"");
		ActivateField(""Assoc Start Id"");
	}
	var temp = Inputs.GetProperty(""Object Id"");
//-------------------------------------------------------------------------
// Retrieving all the numbers for the given order using the CX_SIM_ITM_NUM
//-------------------------------------------------------------------------
	with(bcSimOrdNumInfo)
	{
		ClearToQuery();
		SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
		//below 1.2
        //ExecuteQuery();
        ExecuteQuery(ForwardOnly);
        //above 1.2
		blnIsRecord = FirstRecord();
	}

//----------------------------------------------------------------------
// Retrieving each number and changing the status to 'With SIM Supplier'
//----------------------------------------------------------------------
  
	while(blnIsRecord)
	{
	
	with(bcSIMOrdNumMastr)
		{
			ClearToQuery();
	        //var test9 = bcSimOrdNumInfo.GetFieldValue(""Assoc Start Id"");
			SetSearchSpec(""Assoc Start Id"",bcSimOrdNumInfo.GetFieldValue(""Assoc Start Id""));
			//below 1.2
           //ExecuteQuery();
           ExecuteQuery(ForwardOnly);
           //above 1.2
    	}	
		blnIsRecord = bcSIMOrdNumMastr.FirstRecord();
		while(blnIsRecord)
		{	
			strFromStatus = bcSIMOrdNumMastr.GetFieldValue(""Status"");
			if(bcSIMOrdNumMastr.GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM""))
			  {
				strSIMNum = strSIMNum + bcSIMOrdNumMastr.GetFieldValue(""Number String"");
//				strSIMType = strSIMType + TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"");
				strSIMType = strSIMType + bcSIMOrdNumMastr.GetFieldValue(""Type"");
			  }
			if(bcSIMOrdNumMastr.GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI""))
		      {
				if(strIMSINum != """") {
					strIMSINum = strIMSINum + "" / ""+bcSIMOrdNumMastr.GetFieldValue(""Number String"");
					strIMSIType = strIMSIType + "" / ""+bcSIMOrdNumMastr.GetFieldValue(""Type"");
				}
				else {
					strIMSINum = strIMSINum + bcSIMOrdNumMastr.GetFieldValue(""Number String"");
					strIMSIType = strIMSIType + bcSIMOrdNumMastr.GetFieldValue(""Type"");					
				}

//				strIMSIType = strIMSIType + TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI"");
				
			  }
			if(bcSIMOrdNumMastr.GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""))
			  {
				strMSISDNNum = strMSISDNNum + bcSIMOrdNumMastr.GetFieldValue(""Number String"");
//				strMSISDNType = strMSISDNType + TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"");
				strMSISDNType = strMSISDNType + bcSIMOrdNumMastr.GetFieldValue(""Type"");
			  }
			
//20:07:05  bcSIMOrdNumMastr.SetFieldValue(""Artwork Id"",bcSIMOrder.GetFieldValue(""Image Id""));
			bcSIMOrdNumMastr.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""));
			bcSIMOrdNumMastr.WriteRecord();

//----------------------------------------------------------------------------------------------------------------
// Updating the block calc field for the number.
// MS:20040929: In case the same block is being updated by a different process, Block Calc BS will throw the error
// Handle the error (update the status of SIM Order to PO Suspended. The Status of associated numbers may
// not be in sync. The Order can be resubmitted again.
//----------------------------------------------------------------------------------------------------------------
		try	{
		
//			prsInputs.SetProperty(""From Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE""));

    		if(strFromStatus != strToStatus) 
				{
					prsInputs.SetProperty(""From Status"",strFromStatus);
					prsInputs.SetProperty(""To Status"",strToStatus);
					prsInputs.SetProperty(""Object Id"",bcSIMOrdNumMastr.GetFieldValue(""Block Id""));

					bsUpdateBlock.InvokeMethod(""UpdateNumberBlock"",prsInputs,prsOutputs);
				}
	} catch(e) {
		
				var temp = e.errText;
				bcSIMOrdNumMastr.SetFieldValue(""Status"",strFromStatus);
				bcSIMOrdNumMastr.WriteRecord();
				
				strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD022"");
				
				with(bcSIMOrder)
				{
					SetUserProperty(""From BusService"",""Y"");
					SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""PO SUSPENDED""));
				//  SetFieldValue(""Comments"",GetFieldValue(""Comments"") + ""::"" + strErrVal);
					WriteRecord();
					SetUserProperty(""From BusService"",""N"");
				}
		}		
			
		if(strErrVal == """") 
			blnIsRecord = bcSIMOrdNumMastr.NextRecord();
		else 	
			TheApplication().RaiseErrorText(""ERROR"");
		}
		strFinalNum = strSIMNum + "" / "" + strIMSINum;
		if(strMSISDNNum != """")
			strFinalNum = strFinalNum + "" / "" + strMSISDNNum;
				 
		strFinalType = strSIMType + "" / "" + strIMSIType;
		if(strMSISDNType != """")
			strFinalType = strFinalType + "" / "" + strMSISDNType;

//-------------------------------------------------------------------------
// Updating the status to 'With SIM Supplier' in the CX_NUM_ASS_CNCT table
//-------------------------------------------------------------------------
		with(bcSIMOrdAssNum)
		{
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",bcSimOrdNumInfo.GetFieldValue(""Assoc Start Id""));
			//below 1.2
            //ExecuteQuery();
            ExecuteQuery(ForwardOnly);
            //above 1.2
			blnIsRecord = bcSIMOrdAssNum.FirstRecord();
			while(blnIsRecord)
			{
				SetUserProperty(""From BusService"",""Y"");
				bcSIMOrdAssNum.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""));
				bcSIMOrdAssNum.WriteRecord();
				SetUserProperty(""From BusService"",""N"");
				blnIsRecord = bcSIMOrdAssNum.NextRecord();
			}	
		}
		bcSimOrdNumInfo.SetUserProperty(""From BusService"",""Y"");
		bcSimOrdNumInfo.SetFieldValue(""Numbers"",strFinalNum);
		bcSimOrdNumInfo.SetFieldValue(""Numbers Type"",strFinalType);
		bcSimOrdNumInfo.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""));
		bcSimOrdNumInfo.WriteRecord();
		bcSimOrdNumInfo.SetUserProperty(""From BusService"",""N"");
		strFinalNum = """";
		strFinalType = """";
		strSIMType = """";
		strMSISDNType = """";
		strIMSIType = """";
		strSIMNum = """";
		strIMSINum = """";
		strMSISDNNum = """";
		blnIsRecord = bcSimOrdNumInfo.NextRecord();	
	}
	
//---------------------------------------------------------------------
// Calling the SIM File Business Service for Generating the Output file
//---------------------------------------------------------------------
	try	{

		bcSysPref.ActivateField(""Value"");
		bcSysPref.ClearToQuery();
		bcSysPref.SetSearchSpec(""Name"",""RMS_SIMORDER_OUTPUTPATH"");
		//below 1.2
		//bcSysPref.ExecuteQuery();
		bcSysPref.ExecuteQuery(ForwardOnly);
		//above 1.2
	   if(bcSysPref.FirstRecord()) 
	   {
	 	prsInputs.SetProperty(""FilePath"",bcSysPref.GetFieldValue(""Value""));
		//prsInputs.SetProperty(""OrderId"",Inputs.GetProperty(""Object Id""));
		prsInputs.SetProperty(""Object Id"",Inputs.GetProperty(""Object Id""));
		prsInputs.SetProperty(""ProcessName"",""RMS SIM Submit To Supplier - Generate File"");
		//bsSIMFile.InvokeMethod(""GenerateFile"",prsInputs,prsOutputs);
		bsSIMFile.InvokeMethod(""RunProcess"",prsInputs,prsOutputs);
	    }

	} catch(e){
		strErrVal = e.errText;
	}
	


//-------------------------------------------------------------------------
// Changing the status to 'PO GENERATED' and setting the corresponding date
//-------------------------------------------------------------------------	
	with(bcSIMOrder)
	{
		SetUserProperty(""From BusService"",""Y""); 
		SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""PO GENERATED""));
		SetFieldValue(""PO Generated Date"",dtCurrentDate);
		WriteRecord();
		SetUserProperty(""From BusService"",""N"");
	}
	
	} catch(e) {
	    if(strErrVal == """")
		Outputs.SetProperty(""ErrMessage"",strErrVal);
		return(strErrVal);		
		} finally {
	
		if(strErrVal != """")
		Outputs.SetProperty(""ErrMessage"",strErrVal);
		return(strErrVal);
		bcSysPref 		= null;
		boSysPref		= null;
		prsInputs		= null;
		prsOutputs		= null;
    	bsUpdateBlock	= null;
		bsSIMFile		= null;
	}
	return(strErrVal);
}
"/**************************************************************************************
* Name          : SIM Order Business Service TrashOrder Method			  	          *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 12/12/2003 	1.0   		MBT		     	Created      			22/12/2003        *
**************************************************************************************/

function TrashOrder(bcSIMOrder,bcSIMNumStatus,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,bcSIMOrdAssNum,Inputs,bcNumScheme){

	var blnIsRecord;
	
	var dtSystem;
	var dtCancelByDate;
	var dtCancelledDate;
	var dtQuarantineDateObj = new Date();

	var intDateTime;
	var intCancelDate;
	
	var strErrVal 		= """";
	var strSearchExpr 	= """";
	
	var prsInputs   	= TheApplication().NewPropertySet();
	var prsOutputs  	= TheApplication().NewPropertySet();

	var bsUpdateBlock;
	
	try{
	bsUpdateBlock = TheApplication().GetService(""RMS RMS Block Calc"");

	strSearchExpr = ""[Order Id] ='"" + Inputs.GetProperty(""Object Id"") + 
			""' AND [Number Status] <>'""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER"") + 
			""' AND [Number Status] <>'""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""UNREGISTERED"") +
			""' AND [Number Status] <>'""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE"") + ""'""; 
		
	with(bcSIMNumStatus){
		ActivateField(""Order Id"");
		ActivateField(""Number Status"");
		ClearToQuery();
		SetSearchExpr(strSearchExpr);
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}

//------------------------------------------------------
// Cannot trash the order if any number has been used.
//------------------------------------------------------
	
	if(blnIsRecord){
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSORD004"",bcSIMNumStatus.GetFieldValue(""Number Status""));
		TheApplication().RaiseErrorText(strErrVal);
	}

//-------------------------------------------------------------------------
// Retrieving all the records in CX_SIM_ITM_NUM associated with the order.
//-------------------------------------------------------------------------
	with(bcSimOrdNumInfo){
		ClearToQuery();
		SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
		ExecuteQuery();
		blnIsRecord = FirstRecord();
	}
			
	while(blnIsRecord){
			
//------------------------------------------------------------------------------------
// For each record in CX_SIM_ITM_NUM retrieving the numbers using the Assoc Start Id.
//------------------------------------------------------------------------------------
		with(bcSIMOrdNumMastr){
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",bcSimOrdNumInfo.GetFieldValue(""Assoc Start Id""));
			ExecuteQuery();
		}	
		
		blnIsRecord = bcSIMOrdNumMastr.FirstRecord();
	
//--------------------------------------------------
// Setting the status for the associated numbers.
//--------------------------------------------------					
		while(blnIsRecord){
			if((bcSIMOrdNumMastr.GetFieldValue(""Status"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""))
														||	
			 	(bcSIMOrdNumMastr.GetFieldValue(""Status"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""))
														||
				(bcSIMOrdNumMastr.GetFieldValue(""Status"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""UNREGISTERED""))){
//---------------------------------------------------------------------
// MSISDN numbers are quarantined. SIM and IMSI numbers are trashed.
//---------------------------------------------------------------------		
					if(bcSIMOrdNumMastr.GetFieldValue(""Type Identifier"") == TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")){												
						
						prsInputs.SetProperty(""To Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE""));
						
						if(bcSIMOrdNumMastr.GetFieldValue(""Status"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""UNREGISTERED""))
							prsInputs.SetProperty(""From Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""UNREGISTERED""));	
						else if(bcSIMOrdNumMastr.GetFieldValue(""Status"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""))
							prsInputs.SetProperty(""From Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""));
						else if(bcSIMOrdNumMastr.GetFieldValue(""Status"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""))
							prsInputs.SetProperty(""From Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));
									
						prsInputs.SetProperty(""Object Id"",bcSIMOrdNumMastr.GetFieldValue(""Block Id""));
				
						bsUpdateBlock.InvokeMethod(""UpdateNumberBlock"",prsInputs,prsOutputs);
					
						with(bcNumScheme) {
							ActivateField(""Max. Ter. Quarantine UOM"");
							ActivateField(""Max. Ter. Quarantine Period"");
							ClearToQuery();
							SetSearchSpec(""Id"", bcSIMOrdNumMastr.GetFieldValue(""Scheme Id""));
							ExecuteQuery();
							if(FirstRecord()){ 
								bcSIMOrdNumMastr.SetFieldValue(""Quarantine Date"",bcSIMOrdNumMastr.GetFieldValue(""Current Date""));
								dtQuarantineDateObj = CalcAvailableDate(GetFieldValue(""Max. Ter. Quarantine UOM""), GetFieldValue(""Max. Ter. Quarantine Period""), bcSIMOrdNumMastr);
								bcSIMOrdNumMastr.SetFieldValue(""Available Date"",DateToString(dtQuarantineDateObj));
							}
						}
					
						bcSIMOrdNumMastr.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""QUARANTINE""));
						bcSIMOrdNumMastr.SetFieldValue(""Status Date"",bcSIMOrdNumMastr.GetFieldValue(""Current Date""));
						
					}
					else{
						prsInputs.SetProperty(""To Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED""));
							
						if(bcSIMOrdNumMastr.GetFieldValue(""Status"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""UNREGISTERED""))
							prsInputs.SetProperty(""From Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""UNREGISTERED""));	
						else if(bcSIMOrdNumMastr.GetFieldValue(""Status"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""))
							prsInputs.SetProperty(""From Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER""));
						else if(bcSIMOrdNumMastr.GetFieldValue(""Status"") == TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""))
							prsInputs.SetProperty(""From Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE""));
									
						prsInputs.SetProperty(""Object Id"",bcSIMOrdNumMastr.GetFieldValue(""Block Id""));
				
						bsUpdateBlock.InvokeMethod(""UpdateNumberBlock"",prsInputs,prsOutputs);
										
						bcSIMOrdNumMastr.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED""));
						bcSIMOrdNumMastr.SetFieldValue(""Status Date"",bcSIMOrdNumMastr.GetFieldValue(""Current Date""));
					}				

					bcSIMOrdNumMastr.SetFieldValue(""With SIM Order"","""");
					bcSIMOrdNumMastr.WriteRecord();
						
			}
			blnIsRecord = bcSIMOrdNumMastr.NextRecord();
		}
					
//-----------------------------------------
// Setting the status in CX_NUM_ASS_CNCT.
//-----------------------------------------					
		with(bcSIMOrdAssNum){
			ActivateField(""Status"");
			ActivateField(""Assoc Start Id"");
			ClearToQuery();
			SetSearchSpec(""Assoc Start Id"",bcSimOrdNumInfo.GetFieldValue(""Assoc Start Id""));
			ExecuteQuery();
		}
			
		blnIsRecord = bcSIMOrdAssNum.FirstRecord();
					
		while(blnIsRecord){
			if(bcSIMOrdAssNum.GetFieldValue(""Status"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""WITH SIM SUPPLIER"")
														||	
				bcSIMOrdAssNum.GetFieldValue(""Status"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""AVAILABLE"")
														||
				bcSIMOrdAssNum.GetFieldValue(""Status"") != TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""UNREGISTERED"")){
					bcSIMOrdAssNum.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED""));
					bcSIMOrdAssNum.WriteRecord();
			}
			blnIsRecord = bcSIMOrdAssNum.NextRecord();
		}
		
		bcSimOrdNumInfo.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""NM_NUMBER_STATUS"", ""TRASHED""));
		//commented by ms: need to show that sim cards were trashed in SIM Enquiry screen
		//bcSimOrdNumInfo.SetFieldValue(""Order Id"","""");
		//bcSimOrdNumInfo.SetFieldValue(""Order Line Id"","""");
		//bcSimOrdNumInfo.SetFieldValue(""Numbers"","""");
		//bcSimOrdNumInfo.SetFieldValue(""Numbers Type"","""");
		bcSimOrdNumInfo.WriteRecord();

		blnIsRecord = bcSimOrdNumInfo.NextRecord();
	
	}	
//----------------------------------------
// Setting the status in SIM Order Line.
//----------------------------------------				
	with(bcSIMOrderLine){
		ClearToQuery();
		SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
		ExecuteQuery();
	}
			
	blnIsRecord = bcSIMOrderLine.FirstRecord();
			
	while(blnIsRecord){
		bcSIMOrderLine.SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""TRASHED""));
		bcSIMOrderLine.WriteRecord();
		blnIsRecord = bcSIMOrderLine.NextRecord();
	}	
							
	with(bcSIMOrder){
		SetFieldValue(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""TRASHED""));
		WriteRecord();
	}
	
//-------------------------------------------------------------------------
//Searching for any other Order associated with same HLR and Batch Number
//and setting the field in Number Generation as NO or Partial.	
//-------------------------------------------------------------------------
	strSearchExpr = ""[HLR Id] ='"" + bcSIMOrder.GetFieldValue(""HLR ID"") +
	//		""' AND [Batch Number] ='"" + bcSIMOrder.GetFieldValue(""Batch Number"") +
			""' AND [With SIM Order] = 'Y'"" +
			""  AND [Type Identifier] ='"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") +
			""' AND [Status] <>'""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE"") + ""'"";
		
	with(bcSIMOrdNumMastr) {
		ClearToQuery();
		SetSearchExpr(strSearchExpr);
		ExecuteQuery();
	}	

	blnIsRecord = bcSIMOrdNumMastr.FirstRecord();
		
	strSearchExpr = ""[HLR Id] ='"" + bcSIMOrder.GetFieldValue(""HLR ID"") +
	//		""' AND [Batch Number] = '""+ bcSIMOrder.GetFieldValue(""Batch Number"") +
			""' AND [Type Identifier] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") + ""'"";
					
		
	with(bcSIMOrdNumGen){
		ActivateField(""SIM Order Raised"");
		ClearToQuery();
		SetSearchExpr(strSearchExpr);
		ExecuteQuery();	
		FirstRecord();
	}
		
	if(blnIsRecord)
		bcSIMOrdNumGen.SetFieldValue(""SIM Order Raised"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""PARTIAL""));
	else
		bcSIMOrdNumGen.SetFieldValue(""SIM Order Raised"",TheApplication().InvokeMethod(""LookupValue"", ""SIM_ORDER_RAISED"", ""NO""));			
	
	bcSIMOrdNumGen.WriteRecord();
		
	}catch(e) {
		if(strErrVal == """")
			strErrVal = e.errText;
	} finally{
		prsInputs		= null;
		prsOutputs		= null;
		bsUpdateBlock	= null;
	}
	return (strErrVal);
}
"/**************************************************************************************
* Name          : SIM Order Business Service UpdateStartEndNumber Method			  *
* Author        : Mahindra British Telecom											  * 
* Description 	: Code file for SIM Order 											  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     	Comments     			Reviewed Date     *
***************************************************************************************
*                                                                                     *
* 26/07/2005 	1.0   		MBT		     	Created      			26/07/2005        *
* 27/07/2006    1.1         Kalyana         Chaged  cursor mode  to  Forward Only     *											GP										  *		
**************************************************************************************/
function UpdateStartEndNumber(bcSIMOrder,bcSIMOrderLine,bcSimOrdNumInfo,bcSIMOrdNumMastr,bcSIMOrdNumGen,Inputs,Outputs)
 {
	var boNMNumberEnquiry;
	var bcNMNumberEnquiryForUpdate;
	var boNMNumAssoc;
	var bcSIMNumInfo;
	var blnLinItemRec = false;
	var strSearchExpr = """";
	var strHLRId;
	var strErrVal = """";
	var intEndNum;
	var intStartNum;
	var intQuantity = 0;
	var StrCount;
	var strSIMId;
	var blnIsRecord;
	var EndingNumber = """";
	var StartingNumber;
	var Quantity;
	var CardCategory;
	boNMNumberEnquiry = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	bcNMNumberEnquiryForUpdate = boNMNumberEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
	boNMNumAssoc = TheApplication().GetBusObject(""RMS NM Number Association Service"");
	bcSIMNumInfo = boNMNumAssoc.GetBusComp(""RMS NM SIM ORDER LINE ITEM"");
	StartingNumber = Inputs.GetProperty(""StartingNumber"");
	Quantity = Inputs.GetProperty(""QuantityOrdered"");
	try {
with(bcNMNumberEnquiryForUpdate) {
		ActivateField(""With SIM Order"");
		ActivateField(""Status"");		
		ActivateField(""Type Identifier"");
		ActivateField(""Card Ratio"");
		ActivateField(""HLR Id"");
		ActivateField(""HLR ID"");
	//	ActivateField(""Starting Number"");   KT 19042006 
		ActivateField(""Number String"");
		ActivateField(""IMSI Assoc"");
	//	ActivateField(""Ending Number""); KT 19042006 
		ActivateField(""Service Plan Id"");
	}
	
//-----------------------------------------
//Query SIM order with the input Object id.
//-----------------------------------------

	with(bcSIMOrder) {
		SetViewMode(AllView);
		ActivateField(""HLR ID"")
		ClearToQuery();
		SetSearchSpec(""Id"",Inputs.GetProperty(""Object Id""));
		ExecuteQuery(ForwardOnly);
		strHLRId = GetFieldValue(""HLR ID"");		
	}

//-----------------------------------------
//Get all the line items for the SIM order
//-----------------------------------------
	intQuantity = 0;		
	/*with(bcSIMOrderLine) {
		ActivateField(""Card Category"");
		ActivateField(""Starting Number"");
		ActivateField(""No of SIM No"");
		ActivateField(""No of IMSI No"");	
		ActivateField(""No of MSISDN No"");			
		ActivateField(""Error Text"");			
		//ClearToQuery();
		//SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));		
		var testId = Inputs.GetProperty(""RowId"");
		SetSearchSpec(""Id"",Inputs.GetProperty(""RowId""));
		ExecuteQuery();
		if(FirstRecord())
			blnLinItemRec = FirstRecord();
		else
			TheApplication().RaiseErrorText(""Please create line item"");
	}
   
    // var strHOT     = TheApplication().InvokeMethod(""LookupValue"", ""RMS_CARD_CATEGORY"", ""HOT"");  KT19042006
    // var strWARM    = TheApplication().InvokeMethod(""LookupValue"", ""RMS_CARD_CATEGORY"", ""WARM""); KT19042006
    //var strCOLD    = TheApplication().InvokeMethod(""LookupValue"", ""RMS_CARD_CATEGORY"", ""COLD"");  KT19042006

//----------------------------
//Loop thorugh Each Line Item.
//----------------------------
	with(bcSIMOrderLine) {
		
		while(blnLinItemRec){
					//intQuantity = 0;kt24-05-06
			  	    //bcSIMOrderLine.SetFieldValue(""Error Text"",""""); kt24-05-06
			  	    //bcSIMOrderLine.WriteRecord();kt24-05-06

//------------------------------------------------------------------------------------------------
//If Card category is filled in the line item then build a search expression based on
//Hot, Cold or Warm and execute the search expresion on number master to get the start SIM number.
//------------------------------------------------------------------------------------------------		
			//if(GetFieldValue(""Card Category"") != """") {  KT19042006
	       		var strSIMCnctRatio = """"+GetFieldValue(""No of SIM No"")+"":""+GetFieldValue(""No of IMSI No"")+"""";
	       		/*strSearchExpr = ""[HLR ID] = '"" + strHLRId + MS24042006 
	       				""' AND [IMSI Assoc] = 'Y' ""+*/
				/*strSearchExpr = ""[IMSI Assoc] = 'Y' ""+
						""  AND [Type Identifier] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") +
						""' AND [Card Ratio] = '""+ strSIMCnctRatio +
						""' AND [Status] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE"")+""'""; /*KT 19042006*/
						
				/*if(GetFieldValue(""Gen. Supported"") != """")
					strSearchExpr = strSearchExpr + "" AND [SIM Generation Support] = '""+GetFieldValue(""Gen. Supported"")+""'"";
					
		  	    if(GetFieldValue(""Card Category"") == strHOT)
					strSearchExpr = strSearchExpr + "" AND [No. Of Assigned MSISDNs] = ""+GetFieldValue(""No of MSISDN No"")+"" AND [Service Plan Id] IS NOT NULL "";
			     if(GetFieldValue(""Card Category"") == strWARM)	
					strSearchExpr = strSearchExpr +	"" AND [No. Of Assigned MSISDNs] =""+GetFieldValue(""No of MSISDN No"")+"" AND [Service Plan Id] IS NULL "";	
		        if(GetFieldValue(""Card Category"") == strCOLD)
					strSearchExpr = strSearchExpr + "" AND [No. Of Assigned MSISDNs] =""+GetFieldValue(""No of MSISDN No"");*/ // KT19042006
			//MS	strSearchExpr = ""[HLR ID] = '"" + strHLRId + ""'"";	//KT 19042006 for testing purpose	
				/*with(bcNMNumberEnquiryForUpdate)    {
					SetSortSpec(""Number String(ASCENDING)"");
					SetSearchExpr(strSearchExpr);
					ExecuteQuery();
					if(FirstRecord()) {
				  	        
				  	    //bcSIMOrderLine.SetFieldValue(""Starting Number"",bcNMNumberEnquiryForUpdate.GetFieldValue(""Number String"")); KT19042006
				  	    //bcSIMOrderLine.WriteRecord(); KT 24-04-06
				  	         
				  	         
				  	                  }
//--------------------------------------------------------------------------------------------
//If start number is not found then set the Order Line error text with the appropriate mesage.
//--------------------------------------------------------------------------------------------
				  	 else {
				  	    //bcSIMOrderLine.SetFieldValue(""Error Text"",TheApplication().LookupMessage(""User Defined Errors"",""RMSORD002""));
				  	    //bcSIMOrderLine.WriteRecord();
				  	      }
				                                    }*/
//				strSearchExpr = """";
				//if(GetFieldValue(""Quantity Ordered"")>0)
						if(Quantity > 0)
                 {
				    
//------------------------------------------------------------------------------------------------
//Get the numeric start number for the SIM number to get the numbers greater than the start number.
//------------------------------------------------------------------------------------------------
	
					var mstrStartNum;
					with(bcNMNumberEnquiryForUpdate) {
						ActivateField(""Number String"");
					    ActivateField(""Number"");
					    ClearToQuery();
					    //SetSearchSpec(""Number String"",bcSIMOrderLine.GetFieldValue(""Starting Number""));
					    SetSearchSpec(""Number String"",StartingNumber); //KT 24-05-06
						ExecuteQuery();
					    var mstrStartNum = GetFieldValue(""Number"");   
					}

					 if(mstrStartNum != """")
						   //strSearchExpr = strSearchExpr + "" AND [Number] >= '"" + mstrStartNum + ""'"";
                         strSearchExpr = ""[IMSI Assoc] = 'Y' ""+
						""  AND [Type Identifier] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""SIM"") +
						""' AND [Status] = '""+ TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""NOT AVAILABLE"")+""'"";
						  strSearchExpr= strSearchExpr+ ""AND [Number] >= '"" + mstrStartNum + ""'""
					 	with(bcNMNumberEnquiryForUpdate) {
								ClearToQuery();
								ActivateField(""With SIM Order""); // Change  
								ActivateField(""HLR Id"");
								ActivateField(""HLR ID"");
								ActivateField(""Number String""); // Change 
								ActivateField(""Assoc Start Id""); // Change 
								ActivateField(""Status"");
								ActivateField(""Card Ratio"");
								//StrCount = bcSIMOrderLine.GetFieldValue(""Quantity Ordered""); // Change 
								
								SetSearchExpr(strSearchExpr);
								SetSortSpec(""Number(ASC)"");
								//Changed cusrsor  mode to ForwardOnly to  process  more  than 10,000  records
								//below 1.1
								//ExecuteQuery();
								ExecuteQuery(ForwardOnly);
								//above 1.1
								blnIsRecord = FirstRecord();
								
						}
//-------------------------------------------------------------------------------------------
// Set the Order line with appropriate message to inform user that the numbers does not exist.
//--------------------------------------------------------------------------------------------
							/*if(!(blnIsRecord))	{
						  	    bcSIMOrderLine.SetFieldValue(""Error Text"",TheApplication().LookupMessage(""User Defined Errors"",""RMSORD002""));
						  	    bcSIMOrderLine.WriteRecord();  
							}*/   //KT 24-05-06	
							while(blnIsRecord) {
					
//---------------------------------------------------------------------------
// Setting the value of "" With SIM Order "" to TRUE for the numbers retrieved.
// Also storing the quantity of numbers retrieved.
//---------------------------------------------------------------------------		
								if(intQuantity == 0)
					    			intStartNum = bcNMNumberEnquiryForUpdate.GetFieldValue(""Number String"");	
							    	intQuantity = intQuantity + 1;
					       		    	StrCount = Quantity; 
									if(StrCount == intQuantity)  // Compares [Quantity Ordered]
									    
										break;
									strSIMId = bcNMNumberEnquiryForUpdate.GetFieldValue(""Id"");											
								blnIsRecord = bcNMNumberEnquiryForUpdate.NextRecord();
							}
//------------------------------------------------------------------------------------------------
// If the count requested is less than the quantity of numbers available
//then Set the Order line with appropriate message to inform user that the numbers does not exist.
//--------------------------------------------------------------------------------------------------
		
							if (StrCount > intQuantity) { // Desired No Of SIM Numbers Exists or Not - Checked Here
					  	    	//bcSIMOrderLine.SetFieldValue(""Error Text"",TheApplication().LookupMessage(""User Defined Errors"",""RMSALC002"",intQuantity));
						  	    //bcSIMOrderLine.WriteRecord();
	     						strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSALC002"",intQuantity);
								TheApplication().RaiseErrorText(""RETURN"");
								}
					    	//	bcNMNumberEnquiryForUpdate.LastRecord();
					    	if(!(StrCount > intQuantity)) {
								intEndNum = bcNMNumberEnquiryForUpdate.GetFieldValue(""Number String"");

//----------------------------------------------------------------------------------
//If the quantity of numbers is available then set the ending number for order line.
//----------------------------------------------------------------------------------
								Outputs.SetProperty(""EndingNumber"",bcNMNumberEnquiryForUpdate.GetFieldValue(""Number String""));
							   //bcSIMOrderLine.SetFieldValue(""Ending Number"",bcNMNumberEnquiryForUpdate.GetFieldValue(""Number String""));
							   //bcSIMOrderLine.WriteRecord();
						   	   						
							   strErrVal = ValidateLinItemNumbers(bcSIMOrder,bcSIMOrderLine,Inputs,Outputs);
							    if(strErrVal != """") 
                                {
								TheApplication().RaiseErrorText(Outputs.GetProperty(""ErrMessage""));
								TheApplication().RaiseErrorText(""RETURN"");
								}
								
							   var intQty = 0;
							   //below 1.1
								DeletePreviousLineItemNumbers(bcSIMNumInfo,bcNMNumberEnquiryForUpdate,Inputs,Outputs);
								with(bcNMNumberEnquiryForUpdate) {
								ClearToQuery();
								SetSearchExpr(strSearchExpr);
								SetSortSpec(""Number(ASC)"");
								ExecuteQuery(ForwardOnly);
								blnIsRecord = FirstRecord(); 
								}
							   //above 1.1
//-----------------------------------------------------------------------------
//For each number update the line item numbers with the order and line item id.
//-----------------------------------------------------------------------------

							   while(blnIsRecord) {
									//test
									var intStartNum1 = bcNMNumberEnquiryForUpdate.GetFieldValue(""Number String"");
									intQty = intQty + 1;
									bcNMNumberEnquiryForUpdate.SetFieldValue(""With SIM Order"",""Y""); // Setting ""With SIM Order"" Status to ""Y""
									bcNMNumberEnquiryForUpdate.WriteRecord(); 
						
						 		    strSIMId = bcNMNumberEnquiryForUpdate.GetFieldValue(""Id"");	  
							
						           with(bcSIMNumInfo)
									{
							            ActivateField(""Assoc Start Id"");
										ActivateField(""SIM Id"");
										ActivateField(""Order Id"");
										ActivateField(""Order Line Id"");
										ClearToQuery();
										SetSearchSpec(""Assoc Start Id"",strSIMId);
										ExecuteQuery(); 
						  				if(!FirstRecord()) 
						  				{
											NewRecord(1);
											SetFieldValue(""Assoc Start Id"",strSIMId);
											SetFieldValue(""SIM Id"",strSIMId);
											//SetFieldValue(""Order Line Id"", bcSIMOrderLine.GetFieldValue(""Id""));
						                    //SetFieldValue(""Order Id"",bcSIMOrderLine.GetFieldValue(""Order Id""));
											SetFieldValue(""Order Line Id"",Inputs.GetProperty(""RowId""));
											SetFieldValue(""Order Id"",Inputs.GetProperty(""Object Id""));
											WriteRecord();
						    			}
						    			else 
						    			{
											SetFieldValue(""Order Line Id"",Inputs.GetProperty(""RowId""));
											SetFieldValue(""Order Id"",Inputs.GetProperty(""Object Id""));
											//SetFieldValue(""Order Line Id"", bcSIMOrderLine.GetFieldValue(""Id""));
						                    //SetFieldValue(""Order Id"",bcSIMOrderLine.GetFieldValue(""Order Id""));
											WriteRecord();
						    			}
								    }		 
							
								  if(StrCount == intQty)   	// Compares [Quantity Ordered] -- Change
								    	break; 		   
						
								  blnIsRecord = bcNMNumberEnquiryForUpdate.NextRecord();
							}
						}
						
			//	}
			
			//}  KT19042006
			/*else {
//-----------------------------------------------------------------------------
//If card config is not selected then set appropriate message for the line item.
//-----------------------------------------------------------------------------			
		  	    bcSIMOrderLine.SetFieldValue(""Error Text"",""Please fill the Card Config for this line item."");
		  	    bcSIMOrderLine.WriteRecord();
			}
			*/ // KT19042006
			//blnLinItemRec = NextRecord();	
		  //}
      	} 
	return(strErrVal);

	}catch (e) {
		bcNMNumberEnquiryForUpdate = null;
		boNMNumberEnquiry = null;
		bcSIMNumInfo = null;
		boNMNumAssoc = null;
		throw(e);
	}finally{
		if(strErrVal != """")
		Outputs.SetProperty(""ErrMessage"",strErrVal);
		return(strErrVal);
		bcNMNumberEnquiryForUpdate = null;
		boNMNumberEnquiry = null;
		bcSIMNumInfo = null;
		boNMNumAssoc = null;
	}
}
"/**************************************************************************************
* Name          : RMS NM Number Scheme ValidateNumberBlock Function			 	      * 
* Author        : Mahindra British Telecom                                            *
* Description   : Checks if duplicate blocks have been specified.      				  *
*																					  *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 02/12/2003	1.0   		  MBT   					Created       03/12/2003      *
**************************************************************************************/

function ValidateLinItemNumbers(bcSIMOrder,bcSIMOrderLine,Inputs,Outputs)
{

	var intStartNum;
	var intEndNum;
	var intPrevStartNum;
	var intPrevEndNum;
	var strStartNum;
	var strEndNum;
	var strErrVal = """";	
	var blnIsRecord;
	var blnLinItemRec = false;
	var EndingNumber;   
	var StartingNumber;  
	StartingNumber = Inputs.GetProperty(""StartingNumber"");
	EndingNumber = Outputs.GetProperty(""EndingNumber"");
	       
/*//-----------------------------------------
// Converting the string fields to integer
//-----------------------------------------
	
	intStartNum = ToInteger(StartingNumber);
	intEndNum  = ToInteger(EndingNumber);*/

//---------------------------------------------------------------------------------
//Get all the SIM orders of Status New  and get all Line items   of  status New 
//---------------------------------------------------------------------------------
with(bcSIMOrder) {
		SetViewMode(AllView);
		ClearToQuery();
		SetSearchSpec(""Status"",TheApplication().InvokeMethod (""LookupValue"", ""SIM_ORDER_STATUS"", ""NEW""));
		ExecuteQuery();
        blnIsRecord = FirstRecord();
	 	}
   while(blnIsRecord)
      {
        var SIMOrderId = bcSIMOrder.GetFieldValue(""Id"");
		with(bcSIMOrderLine) 
		{
		ActivateField(""Order Number"");
		ActivateField(""Starting Number"");
		ActivateField(""Ending Number"");
		ActivateField(""Error Text"");			
		ActivateField(""Order Line Number"");
		ClearToQuery();
		//SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));		
		var intLineItemId = Inputs.GetProperty(""RowId"");
		//SetSearchSpec(""Id"",""<> '"" + intLineItemId + ""'"");
		var strSearchExp =    ""[Id] <> '"" + intLineItemId + ""'""; 
		strSearchExp= strSearchExp+"" AND "" +""[Order Id] ='""+SIMOrderId+""'""; 
 		//SetSearchSpec(""Order Id"",Inputs.GetProperty(""Object Id""));
		SetSearchExpr(strSearchExp);
		//ExecuteQuery();
		ExecuteQuery(ForwardOnly);
		blnLinItemRec = bcSIMOrderLine.FirstRecord();
		}  // End  of with(bcSIMOrderLine) 
//---------------------------------------------------------------------------------
//If Line Item does not then check for Current Order 
//---------------------------------------------------------------------------------		
		/*if (!blnLinItemRec) 
		{
		/*if(SIMOrderId == Inputs.GetProperty(""Object Id""))
		{
		Outputs.SetProperty(""StartingNumber"",StartingNumber);
	    Outputs.SetProperty(""EndingNumber"",EndingNumber);
	    //Outputs.SetProperty(""Start Number"",intStartNum);
	    //Outputs.SetProperty(""End Number"",intEndNum);
		return(strErrVal);
		}
		else
		{*/
		//blnIsRecord = bcSIMOrderLine.NextRecord();
		//blnIsRecord = bcSIMOrder.NextRecord();
		//}
		//}  // End  if (!blnLinItemRec) */
        while(blnLinItemRec)
		{		
		var test =  bcSIMOrderLine.GetFieldValue(""Id"");
		intPrevStartNum 	= bcSIMOrderLine.GetFieldValue(""Starting Number"");
		intPrevEndNum   	= bcSIMOrderLine.GetFieldValue(""Ending Number"");
		var LineItemNo      = bcSIMOrderLine.GetFieldValue(""Order Line Number"");
		var SIMOrderNo      = bcSIMOrderLine.GetFieldValue(""Order Number"");
//----------------------------------------------------------------
// Raise an error if start number has been used in another Line Item.				
//----------------------------------------------------------------		
        if((StartingNumber >= intPrevStartNum) && (StartingNumber <= intPrevEndNum)){
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder009"",SIMOrderNo,LineItemNo);
		return(strErrVal);									
        }
//----------------------------------------------------------------
// Raise an error if end number has been used in Line Item.				
//----------------------------------------------------------------
        if((EndingNumber >= intPrevStartNum) && (EndingNumber <= intPrevEndNum)){
		strErrVal = TheApplication().LookupMessage(""User Defined Errors"",""RMSSIMOrder009"",SIMOrderNo,LineItemNo);
		return(strErrVal);	
		}
	    blnLinItemRec = bcSIMOrderLine.NextRecord();
	    } // End  of While
       //blnIsRecord = bcSIMOrderLine.NextRecord();
       blnIsRecord = bcSIMOrder.NextRecord();
		}
	   Outputs.SetProperty(""StartingNumber"",StartingNumber);
	   Outputs.SetProperty(""EndingNumber"",EndingNumber);
	 //Outputs.SetProperty(""Start Number"",intStartNum);
	 //Outputs.SetProperty(""End Number"",intEndNum);
	   if(strErrVal != """")
	   Outputs.SetProperty(""ErrMessage"",strErrVal);
	   return(strErrVal);
	   }
"/********************************************************************************************
* Name          : RMS SIM Paper Item Service PreInvoke Method					 	        * 
* Author        : Mahindra British Telecom                                                  *
* Description   : RMS SIM Paper Item Code File            	                                *
*                                                                                           *
* Amendment Details                                                                         *
*********************************************************************************************
* Date    		Version  	AmendedBy Comments							        Reviewed Date*
*********************************************************************************************
*                                                                                            *
* 10/11/2003 	 1.0   		MBT		   Created							        10/11/2003   *
* 23/06/2006 	 1.1   		ARUNJ	   SiebelES#12 provided if condition before SetFieldValue*                                              *
***********************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs){

	var boPaperItem;

	var bcPaperItem;
	var bcSIMOrder;

	var intObjectId;
	var intReturn = ContinueOperation;

	var blnOrder;
// below 1.1
	var isRecord;
// above 1.1
	
	try{	
		intObjectId = Inputs.GetProperty(""Object Id"");
		boPaperItem = TheApplication().GetBusObject(""RMS SIM Paper Item"");
		bcPaperItem = boPaperItem.GetBusComp(""RMS SIM Paper Item"");
		bcSIMOrder  = boPaperItem.GetBusComp(""RMS SIM Order"");
				
		with(bcPaperItem){
			ClearToQuery();
			ActivateField(""Is Released"");
			SetSearchSpec(""Id"",intObjectId);
			ExecuteQuery();
// below 1.1
			isRecord = FirstRecord();
// above 1.1
		}
		
//-----------------------------------------------------------	
// Cannot unrelease a paper item if an order is associated.
//-----------------------------------------------------------
	
		if(MethodName == ""UnreleasePaperItem""){
			intReturn = CancelOperation;
			blnOrder = bcSIMOrder.FirstRecord();

			if(blnOrder){
				TheApplication().RaiseError(""RMSPPR001"");
			}
// below 1.1
			else if (isRecord){
// above 1.1
				bcPaperItem.SetFieldValue(""Is Released"",""N"");
				bcPaperItem.WriteRecord();
			}
		}
		
		bcPaperItem = null;	
		bcSIMOrder  = null;
		boPaperItem = null;
		
		return (intReturn);
		
				
	}
	catch(e)
	{// such a catch and throw has no meaning		
		throw e;
	}	
	finally
	{
		bcPaperItem = null;	
		bcSIMOrder  = null;
		boPaperItem = null;
	}
		
}
"/**************************************************************************************
* Name          : RMS SIM Supplier Service PreInvoke Method			 	          * 
* Author        : Mahindra British Telecom                                            *
* Description   : RMS SIM Supplier Code File            	                          *
*                                                                                     *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 11/09/2003 	1.0   		MBT   						Created       12/09/2003	  *
**************************************************************************************/

function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	
	var	boSIMSupplier;

	var bcSIMSupplier;
	var bcSIMOrder;

	var intSuppId;
	var intReturn = ContinueOperation;

	
	try{
		boSIMSupplier = TheApplication().GetBusObject(""RMS SIM Supplier"");
		bcSIMSupplier =	boSIMSupplier.GetBusComp(""RMS SIM Supplier"");
		bcSIMOrder    = boSIMSupplier.GetBusComp(""RMS SIM Order"");
		
		intSuppId = Inputs.GetProperty(""Object Id"");
		
		with(bcSIMSupplier){
			ClearToQuery();
			SetSearchSpec(""Id"",intSuppId);
			ExecuteQuery();
		}

//-----------------------------------------------------	
// Cannot delete a supplier if an order is associated.
//-----------------------------------------------------

		if(MethodName == ""Check Order""){
			intReturn = CancelOperation;
			if(bcSIMOrder.FirstRecord())
				TheApplication().RaiseError(""RMSSUP001"");
		}
		
		
		bcSIMSupplier = null;	
		bcSIMOrder	  = null;		
		boSIMSupplier = null;
		
		return (intReturn);
			
	}catch(e){
			
		
		bcSIMSupplier = null;	
		bcSIMOrder	  = null;
		boSIMSupplier = null;
		
		throw e;
	}
}
"/**************************************************************************************
* Name          : RMS Update ParingQuota Service_PreInvoke Method    	  *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS Update ParingQuota	    		          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 21/11/2006 	1.0   		Ramakrishna				   	Created      21/11/2006       *
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var intReturn 		= CancelOperation;
	var strErrVal 		= """";
		
	
	Outputs.SetProperty(""ErrCode"",""00000"");
	Outputs.SetProperty(""ErrMessage"","""");
	try{
		
		switch(MethodName) {
			case ""UpdateParingQuota"":
					if(Inputs.GetProperty(""PartnerMSISDN"") == """") {
						Outputs.SetProperty(""ErrCode"",""RMSINP001"");
						Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSINP001""));
					}
					if (Outputs.GetProperty(""ErrCode"")==""00000""){
						UpdateParingQuota(Inputs, Outputs);
					}
					break;
			case ""ValidateSubscripDetails"":
					if(Inputs.GetProperty(""MSISDN"") == """" || Inputs.GetProperty(""ICCID"") == """") {
						Outputs.SetProperty(""ErrCode"",""RMSINP001"");
						Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSINP001""));
					}
					if (Outputs.GetProperty(""ErrCode"")==""00000""){
						ValidateSubscripDetails(Inputs, Outputs);
					}
					break;
			case ""UpdateMSISDNCount"":
					if(Inputs.GetProperty(""SubcriptionId"") == """") {
						Outputs.SetProperty(""ErrCode"",""RMSINP001"");
						Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSINP001""));
					}
					if (Outputs.GetProperty(""ErrCode"")==""00000""){
						UpdateMSISDNCount(Inputs, Outputs);
					}
					break;
			default:
					intReturn	= ContinueOperation;
					break;
		}
	}catch(e){
			if(Outputs.GetProperty(""ErrCode"") == ""00000"") {
				Outputs.SetProperty(""ErrCode"",e.errCode);
				Outputs.SetProperty(""ErrMessage"",e.errText);
			}

	} finally {
				
			return(intReturn);
	}
	
}
"/**************************************************************************************
* Name          : UpdateParingQuota UpdateMSISDNCount Method    	  *
* Author        : Mahindra British Telecom                                            *
* Description   : UpdateMSISDNCount	    		          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 21/08/2007 	1.0   		Ramakrishna				   	Created      21/08/2007       *
**************************************************************************************/
function UpdateMSISDNCount(&Inputs, &Outputs)
{
	var blnIsRecord;
	var RMSChangeMSISDNCounter;
	var SubcriptionId = Inputs.GetProperty(""SubcriptionId"");
	var boSubscription = TheApplication().GetBusObject(""STC-Subscriptions Data"");
	var bcSubscription = boSubscription.GetBusComp(""CUT Service Sub Accounts"");
  try{
	with (bcSubscription){
    	SetViewMode(AllView);
    	ActivateField(""DUNS Number"");  
        ActivateField(""HCPT WAP Change MSISDN Counter"");
		ClearToQuery();
        SetSearchSpec(""Id"",SubcriptionId); 
        ExecuteQuery(ForwardOnly);
        blnIsRecord = FirstRecord();
	}
	if(blnIsRecord){
		RMSChangeMSISDNCounter = ToNumber(bcSubscription.GetFieldValue(""HCPT WAP Change MSISDN Counter""));
		if(RMSChangeMSISDNCounter > 0){
			RMSChangeMSISDNCounter = RMSChangeMSISDNCounter-1;
			bcSubscription.SetFieldValue(""HCPT WAP Change MSISDN Counter"",RMSChangeMSISDNCounter);
			bcSubscription.WriteRecord();
		}
	}
  }catch(e){
 		if(Outputs.GetProperty(""ErrCode"") == ""00000"") {
				Outputs.SetProperty(""ErrCode"",e.errCode);
				Outputs.SetProperty(""ErrMessage"",e.errText);
		}
  }finally{
 		bcSubscription = null;
 		boSubscription = null;
 
 		
  }

}
"/**************************************************************************************
* Name          : UpdateParingQuota Service_PreInvoke Method    	  *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS Update ParingQuota	    		          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 21/11/2006 	1.0   		Ramakrishna				   	Created      21/11/2006       *
  20070324      1.1         Prasad                      Changed to use new customer BC STC Partner Product
**************************************************************************************/
function UpdateParingQuota(&Inputs, &Outputs)
{
	var blnIsRecord;
	var blnIsRecord1;
	var boPartner = TheApplication().GetBusObject(""Channel Partner"");
	var bcPartner = boPartner.GetBusComp(""Channel Partner"");
	var bcPrtnrProd = boPartner.GetBusComp(""STC Partner Product"");//1.1 here
	var strMSISDN = Inputs.GetProperty(""PartnerMSISDN"");
	
 try{	
	with(bcPartner){
		SetViewMode(AllView);
		ActivateField(""CSN"");
		ActivateField(""DUNS Number"");
		ClearToQuery();
		SetSearchSpec(""DUNS Number"",strMSISDN);
		ExecuteQuery(ForwardOnly);
		blnIsRecord = FirstRecord();
	}//end with
	if(blnIsRecord){
		with(bcPrtnrProd){
			SetViewMode(AllView);
			ActivateField(""STC-Product Type"");
			ActivateField(""Name"");
			ActivateField(""Minimum Quantity"");
			ActivateField(""Vendor Id"");
			ClearToQuery();
			SetSearchSpec(""Vendor Id"",bcPartner.GetFieldValue(""Id""));
			SetSearchSpec(""Name"",TheApplication().InvokeMethod(""LookupValue"", ""STC_SALES_TYPE"", ""MSISDN Pairing""));
			ExecuteQuery(ForwardOnly);
			blnIsRecord1 = FirstRecord();
		}//end with
		if(blnIsRecord1) {
			var intQuantity = bcPrtnrProd.GetFieldValue(""Minimum Quantity"");
			bcPrtnrProd.SetFieldValue(""Minimum Quantity"",ToInteger(intQuantity)-1);
			bcPrtnrProd.WriteRecord();
		}else{
			Outputs.SetProperty(""ErrCode"",""RMSPTNR006"");
			Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSPTNR006""));
		}
		
	}else{
		Outputs.SetProperty(""ErrCode"",""RMSPTNR001"");
		Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSPTNR001""));
	}
 }catch(e){
 		if(Outputs.GetProperty(""ErrCode"") == ""00000"") {
				Outputs.SetProperty(""ErrCode"",e.errCode);
				Outputs.SetProperty(""ErrMessage"",e.errText);
		}
 }finally{
 		bcPrtnrProd = null;
 		bcPartner     = null;
 		boPartner     = null;
 		
 }
	
}
"/**************************************************************************************
* Name          : UpdateParingQuota UpdateMSISDNCount Method    	  *
* Author        : Mahindra British Telecom                                            *
* Description   : ValidateHLR	    		          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 10/09/2007 	1.0   		Ramakrishna				   	Created      10/09/2007       *
**************************************************************************************/
function ValidateHLR(&Inputs, &Outputs)
{
	var blnIsRecord;
	var fCurrentHLR;
	var fNewHLR;
	var strMSISDN = Inputs.GetProperty(""MSISDN"");
	var strNewMSISDN = Inputs.GetProperty(""NewMSISDN"");
 try{
	var boNumEnguiry = TheApplication().GetBusObject(""RMS NM Number Enquiry_Thin"");
    var bcNumEnquiry = boNumEnguiry.GetBusComp(""RMS NM Number Enquiry_Thin"");
    with(bcNumEnquiry){ 
    	SetViewMode(AllView);
    	ActivateField(""Number String"");
    	ActivateField(""Block Id"");
    	ActivateField(""MSISDN HLR ID"");
        ClearToQuery();
        SetSearchSpec(""Number String"", strMSISDN);
        ExecuteQuery(ForwardOnly);
        blnIsRecord = FirstRecord();
    }
    if(blnIsRecord)
    	fCurrentHLR = bcNumEnquiry.GetFieldValue(""MSISDN HLR ID"");
    with(bcNumEnquiry){ 
    	ClearToQuery();
        SetSearchSpec(""Number String"", strNewMSISDN);
        ExecuteQuery(ForwardOnly);
        blnIsRecord = FirstRecord();
    }
    if(blnIsRecord)
		//KT 20072311 below 1.1
		{
    	fNewHLR = bcNumEnquiry.GetFieldValue(""MSISDN HLR ID"");
    if(fNewHLR != fCurrentHLR){
    	Outputs.SetProperty(""ErrCode"",""RMSWAP008"");
		Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSWAP008"",fNewHLR,fCurrentHLR));
    } 
	}//End of if(blnIsRecord)
    else		// MSISDN Number Not Found
	{
	   Outputs.SetProperty(""ErrCode"",""RMS_MSISDN_Search"");
	   Outputs.SetProperty(""ErrMessage"", TheApplication().LookupMessage(""User Defined Errors"",""RMS_MSISDN_Search""));
	 }


 }catch(e){
 		if(Outputs.GetProperty(""ErrCode"") == ""00000"") {
				Outputs.SetProperty(""ErrCode"",e.errCode);
				Outputs.SetProperty(""ErrMessage"",e.errText);
		}
 }finally{
 		bcNumEnquiry	= null;
 		boNumEnguiry    = null;
 		
 }

}
function ValidateSubscripDetails(&Inputs, &Outputs)
{
	var blnIsRecord;
	var	strSearchExp;
	var vSTCReg;
	var blnIsRecord1;
	var fValidateHLR;
	var vRMSiccid;
	var boNumEnguiry = TheApplication().GetBusObject(""RMS NM Number Enquiry_Thin"");
    var bcNumEnquiry = boNumEnguiry.GetBusComp(""RMS NM Number Enquiry_Thin"");
	var boEbc = TheApplication().GetBusObject(""RMS AUC IMSI Pre Activation EBC BO"");
	var bcEbc = boEbc.GetBusComp(""RMS AUC IMSI  Pre Activation EBC"");
	var boSysPref  =  TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref   =  boSysPref.GetBusComp(""System Preferences"");
	var strMSISDN = Inputs.GetProperty(""MSISDN"");
	var strInputICCID = Inputs.GetProperty(""ICCID"");
	var vPreactId;
	var vNumStatus;
	Outputs.SetProperty(""SubcriptionId"","""");
 try{	
	strSearchExp	=	""[Number String] = '"" + strMSISDN + ""' AND "";
	strSearchExp	+=	""[Is Associated] = 'Y' AND "";
	strSearchExp	+=	""([Status] = '"" + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""AVAILABLE"") ;
	strSearchExp	+=  ""' OR [Status] = '""  + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ALLOCATED"") + ""' )"";
	//strSearchExp	+=  ""' OR [Status] = '""  + TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ASSIGNED"") + ""' )"";
	with(bcNumEnquiry){ 
    	SetViewMode(AllView);
    	ActivateField(""Number String"");
    	ActivateField(""Is Associated"");
    	ActivateField(""PreActivation Id"");
		ActivateField(""Status"");
        ClearToQuery();
		SetSearchExpr(strSearchExp);
        //SetSearchSpec(""Number String"", strMSISDN);
		//SetSearchSpec(""Is Associated"", ""Y"");
        ExecuteQuery(ForwardOnly);
        blnIsRecord = FirstRecord();
    }
    if(blnIsRecord){
    	vPreactId = bcNumEnquiry.GetFieldValue(""PreActivation Id"");
		vNumStatus = bcNumEnquiry.GetFieldValue(""Status"");
		
		if (vPreactId == """" || vPreactId == null){
			Outputs.SetProperty(""ErrCode"",""RMSWAP004"");
			Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSWAP004""));		
		}else{
			/*if (Outputs.GetProperty(""ErrCode"")==""00000""){
				if ( vNumStatus == TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"",""ASSIGNED"") ){
					Outputs.SetProperty(""ErrCode"",""RMSWAP003"");
					Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSWAP003""));
				}
			}*/
			if (Outputs.GetProperty(""ErrCode"")==""00000""){
				strSearchExp	=	""[Batch No] = '"" + vPreactId + ""' AND "";
				strSearchExp	+=	""[Clarity Response Code] = '00000' AND "";
				strSearchExp	+=	""[MSISDN] = '"" + strMSISDN + ""'"";
				with(bcEbc){
					SetViewMode(AllView);
					ActivateField(""Batch No"");
					ActivateField(""STC Registered"");
					ActivateField(""Clarity Response Code"");
					ActivateField(""MSISDN"");
					ActivateField(""SIM"");
					ClearToQuery();
					SetSearchExpr(strSearchExp);
					//SetSearchSpec(""Batch No"", vPreactId);
					//SetSearchSpec(""MSISDN"", strMSISDN);
					//SetSearchSpec(""Clarity Response Code"", ""00000"");
        			ExecuteQuery(ForwardOnly);
        			blnIsRecord1 = FirstRecord();
    			}
    			if(blnIsRecord1){
    				vRMSiccid = bcEbc.GetFieldValue(""SIM"");
					vSTCReg = bcEbc.GetFieldValue(""STC Registered"");
					vRMSiccid =	vRMSiccid.substring(19 - (strInputICCID.length),19);
					if (Outputs.GetProperty(""ErrCode"")==""00000""){
						if ( vSTCReg != ""N"" ){
							Outputs.SetProperty(""ErrCode"",""RMSWAP003"");
							Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSWAP003""));
						}else{
							if(vRMSiccid != strInputICCID){
			   					Outputs.SetProperty(""ErrCode"",""RMSWAP001"");
								Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSWAP001""));
							}
						}
					}
					if (Outputs.GetProperty(""ErrCode"")==""00000""){
						bcSysPref.ActivateField(""Value"");
				    	bcSysPref.ClearToQuery();
				    	bcSysPref.SetSearchSpec(""Name"",""RMS_WAP_VALIDATE_HLR"");
				    	bcSysPref.ExecuteQuery();
				    	if(bcSysPref.FirstRecord()){	 
							fValidateHLR = bcSysPref.GetFieldValue(""Value"");
			     		}
			     		if(fValidateHLR == ""Y""){
			     			ValidateHLR(Inputs, Outputs);	
			     		}
					}
				}else{
					Outputs.SetProperty(""ErrCode"",""RMSWAP004"");
					Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSWAP004""));		
				}
			}
		}
	}else{
		Outputs.SetProperty(""ErrCode"",""RMSWAP004"");
		Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSWAP004""));
	}

 }catch(e){
 		if(Outputs.GetProperty(""ErrCode"") == ""00000"") {
				Outputs.SetProperty(""ErrCode"",e.errCode);
				Outputs.SetProperty(""ErrMessage"",e.errText);
		}
 }finally{
		bcNumEnquiry = null;
		boNumEnguiry = null;
    	bcEbc = null;
		boEbc = null;
		bcSysPref   =  null;
		boSysPref  =  null;
		
 	
 }
	
}
function ValidateSubscripDetails_Old(&Inputs, &Outputs)
{
	var blnIsRecord;
	var blnIsRecord1;
	var strAccountStatus;
	var strRegistrationStatus;
	var fValidateHLR;
	var strICCID;
	var boAccount = TheApplication().GetBusObject(""Account"");
	var bcAccount = boAccount.GetBusComp(""Account"");
	var boSubscription = TheApplication().GetBusObject(""STC-Subscriptions Data"");
	var bcSubscription = boSubscription.GetBusComp(""CUT Service Sub Accounts"");
	var boSysPref  =  TheApplication().GetBusObject(""System Preferences"");
	var bcSysPref   =  boSysPref.GetBusComp(""System Preferences"");
	var strMSISDN = Inputs.GetProperty(""MSISDN"");
	var strInputICCID = Inputs.GetProperty(""ICCID"");
	var dtActivationDate;
	var dtCalcDateObj;
	var dtCurrSysObj;
	var strActivationDate;
	var strCurrSysDate;
	var intPeriod;
	//RK 31-Aug-2007
	Outputs.SetProperty(""SubcriptionId"","""");
	//RK 21-Aug-2007
	//KT 20070726
    var RMSChangeMSISDNCounter;
 try{	
		with (bcSubscription){
            SetViewMode(AllView);
    		ActivateField(""DUNS Number"");  
            ActivateField(""Account Status"");
            ActivateField(""Master Account Id"");
            ActivateField(""STC-ICCID"");
            ActivateField(""STC-Activation Date"");  
			//KT 20070726
			ActivateField(""STC WAP Change MSISDN Counter"");
			//
            ClearToQuery();
            SetSearchSpec(""DUNS Number"",strMSISDN); 
            //KT20070803REMOVED COMMENT ON 26FEB
			SetSearchSpec(""Account Status"",TheApplication().InvokeMethod(""LookupValue"", ""SERVICE_ACCOUNT_STATUS"", ""Active"")); 
            ExecuteQuery(ForwardOnly);
            blnIsRecord = FirstRecord();
        }
		if(blnIsRecord){
			//RK 21-Aug-2007
			Outputs.SetProperty(""SubcriptionId"",bcSubscription.GetFieldValue(""Id""));
			//RK 21-Aug-2007
			
			//-------------------------Match the ICCID from WAP to 19 digit ICCID from RMS--------------------------
			
			var vRMSiccid	=	bcSubscription.GetFieldValue(""STC-ICCID"");
			
			vRMSiccid		=	vRMSiccid.substring(19 - (strInputICCID.length),19);
			
			
			if(vRMSiccid != strInputICCID)
			{
			
			//---------------------------------------------------		

//			strICCID = bcSubscription.GetFieldValue(""STC-ICCID"");
//		    if(strICCID != strInputICCID){
		    	Outputs.SetProperty(""ErrCode"",""RMSWAP001"");
				Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSWAP001""));
			}
			if (Outputs.GetProperty(""ErrCode"")==""00000""){
			
				strAccountStatus = bcSubscription.GetFieldValue(""Account Status"");
							
				if(strAccountStatus != TheApplication().InvokeMethod(""LookupValue"", ""SERVICE_ACCOUNT_STATUS"", ""Active"")){
			    	Outputs.SetProperty(""ErrCode"",""RMSWAP002"");
					Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSWAP002""));
				}
			} 
			/* commented for wave5
			if (Outputs.GetProperty(""ErrCode"")==""00000""){
				bcSysPref.ActivateField(""Value"");
				bcSysPref.ClearToQuery();
				bcSysPref.SetSearchSpec(""Name"",""RMS_ChgMSISDN_Period_WAP"");
				bcSysPref.ExecuteQuery();
				if(bcSysPref.FirstRecord()){	 
					intPeriod = bcSysPref.GetFieldValue(""Value"");
				}
				
				dtActivationDate = bcSubscription.GetFieldValue(""STC-Activation Date"");
				dtCalcDateObj = new Date(dtActivationDate);
				dtCalcDateObj.setTime(dtCalcDateObj.getTime() + (intPeriod * 24 * 60 * 60 * 1000));
				strActivationDate = ((dtCalcDateObj.getMonth() + 1) + ""/"" + dtCalcDateObj.getDate() + ""/"" + dtCalcDateObj.getFullYear());
				dtCurrSysObj = Clib.localtime(Clib.time());
				Clib.strftime(strCurrSysDate,""%m/%d/%Y"",dtCurrSysObj);
//---------GB 13 jan 2007------------------------------------------------

var vCurrentDate 	= 	new Date(strCurrSysDate);
var vActivationDate	=	new Date(strActivationDate);

if(vActivationDate.getTime() < vCurrentDate.getTime())
{
//				if (strActivationDate < strCurrSysDate){
//-----------------------------------------------------------------------
					Outputs.SetProperty(""ErrCode"",""RMSWAP005"");
					Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSWAP005"",strMSISDN,intPeriod));
				}
					
			}*/
            	if (Outputs.GetProperty(""ErrCode"")==""00000""){
				with(bcAccount){
					SetViewMode(AllView);
					ActivateField(""STC Registration Status"");
					ClearToQuery();
					SetSearchSpec(""Id"",bcSubscription.GetFieldValue(""Master Account Id""));
					ExecuteQuery(ForwardOnly);
					blnIsRecord1 = FirstRecord();
				}//end with
				if(blnIsRecord1){
					strRegistrationStatus = bcAccount.GetFieldValue(""STC Registration Status"");
					if(strRegistrationStatus != TheApplication().InvokeMethod(""LookupValue"", ""STC_REG_STATUS"", ""Unregistered"")){
			    		Outputs.SetProperty(""ErrCode"",""RMSWAP003"");
						Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSWAP003""));
					}
				}
				}
				//RK 10-09-2007 New code Added for Maltiple HLR
				if (Outputs.GetProperty(""ErrCode"")==""00000""){
					bcSysPref.ActivateField(""Value"");
				    bcSysPref.ClearToQuery();
				    bcSysPref.SetSearchSpec(""Name"",""RMS_WAP_VALIDATE_HLR"");
				    bcSysPref.ExecuteQuery();
				    if(bcSysPref.FirstRecord()){	 
						fValidateHLR = bcSysPref.GetFieldValue(""Value"");
			     	}
			     	if(fValidateHLR == ""Y""){
			     		ValidateHLR(Inputs, Outputs);	
			     	}
				}
				//KT 20070726 New code Wave 4 Req #795
				/*RK commented for Wave5
				if (Outputs.GetProperty(""ErrCode"")==""00000""){
					
					RMSChangeMSISDNCounter = ToNumber(bcSubscription.GetFieldValue(""STC WAP Change MSISDN Counter""));
					if(RMSChangeMSISDNCounter == """" || RMSChangeMSISDNCounter == null)
					{
					RMSChangeMSISDNCounter = 0;
					}
					bcSysPref.ActivateField(""Value"");
				    bcSysPref.ClearToQuery();
				    bcSysPref.SetSearchSpec(""Name"",""RMS_WAP_CHANGE_MSISDN_LIMIT"");
				    bcSysPref.ExecuteQuery();
				    if(bcSysPref.FirstRecord()){	 
					var SysprefValueForChangeMSISDN = bcSysPref.GetFieldValue(""Value"");
			     	}
			       	if (RMSChangeMSISDNCounter < SysprefValueForChangeMSISDN)
					{
					RMSChangeMSISDNCounter = RMSChangeMSISDNCounter+1;
					bcSubscription.SetFieldValue(""STC WAP Change MSISDN Counter"",RMSChangeMSISDNCounter);
					bcSubscription.WriteRecord();
					}
					else
					{
					Outputs.SetProperty(""ErrCode"",""RMS_CHANGE_MSISDN_COUNT"");
					Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMS_CHANGE_MSISDN_COUNT"",SysprefValueForChangeMSISDN));
					}
				    }*/
				//End of New code
		}else{
			Outputs.SetProperty(""ErrCode"",""RMSWAP004"");
			Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSWAP004""));
		} 
        
 
	
 }catch(e){
 		if(Outputs.GetProperty(""ErrCode"") == ""00000"") {
				Outputs.SetProperty(""ErrCode"",e.errCode);
				Outputs.SetProperty(""ErrMessage"",e.errText);
		}
 }finally{
 		bcAccount 		= null;
 		bcSubscription  = null;
 		boSubscription  = null;
 		boAccount 		= null;
 }
	
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{ 
   try{
	var strErrval = """";
	if (MethodName == ""UpdateSubsriptionDetails"") {
	strErrval= UpdateSubsriptionDetails(Inputs,Outputs);
    if(strErrval!= """")
	{
	Outputs.SetProperty(""strErrval"",strErrval);
	//return(CancelOperation);
	}
	else
	{
	Outputs.SetProperty(""strErrval"","""");
	}	
	return(CancelOperation);
	}
	else {
	return (ContinueOperation);
	}
	}
    catch(e) {
    throw(e.toString());
         }
    finally
         {
		  }	
}
"/**********************************************************************************************************
Purpose 		: To  upadte  the  status all associatesd numbers from ALLOCATED TO ASSIGNED AND  also update 
Subsription Id in  the NUM_MSTR table.

Author 			: KALYANA TANGIRALA
Date 			: 29-June-2006
Input			: Input Property set includes  MSISDN Number,Subscription Id
Outputs		 	: Output property set contianing the err message
Change Log		: Changes made to the function
***********************************************************************************************************
Date(DD/MM/YYYY)	| By		| Description of Change																		
-----------------------------------------------------------------------------------------------------------
29/06/2006			| Tech Mahindra,KT	| Creation
----------------------------------------------------------------------------------------------------------*/

function UpdateSubsriptionDetails(&Inputs,&Outputs)
{
	var strMSISDNNumber 	     = Inputs.GetProperty(""MSISDNNumber"");
    var strSubscriptionId	     = Inputs.GetProperty(""SubsriptionId"");
	var blnIsRecord			     = false; 
	var blnIsAccount             = false; 
	var boNumberMaster 	         = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
	var bcNumberMaster	         = boNumberMaster.GetBusComp(""RMS NM Number Enquiry For Update"");
	var bcCnct				     = boNumberMaster.GetBusComp(""RMS NM Association Number Type Display"");
	var boAUCRegistration 	     = TheApplication().GetBusObject(""RMS AUC Registration"");
	var bcAUCSIMNumber		     = boAUCRegistration.GetBusComp(""RMS AUC SIM Number"");
	var boAccount                = TheApplication().GetBusObject(""HCPT-Subscriptions Data"");
	var bcAccount                = boAccount.GetBusComp(""CUT Service Sub Accounts"");
	var strSearchSpec            = """";
	var strAssociateId			 = """";
    var strErrval                = """";
	var blnIsCnct				 = false;
	var blnIsSimNumber  		 = false;
	try   {
					with (bcAccount){
	             	InvokeMethod(""SetAdminMode"",""TRUE"");
	            	SetViewMode(AllView);
	            	ClearToQuery();
	            	SetSearchSpec(""Id"",strSubscriptionId);  
	            	ExecuteQuery(ForwardOnly);
	            	blnIsAccount = FirstRecord();
	            	if(!blnIsAccount){
	              	strErrval = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC008"");  
	    		  	return(strErrval);	            
		            }
					InvokeMethod(""SetAdminMode"",""FALSE"");
					}// End of with (bcAccount)
					with (bcNumberMaster){
					ClearToQuery();
					SetViewMode(AllView);
					ActivateField(""Number String"");
					ActivateField(""Type Identifier"");
					ActivateField(""Status"");
					ActivateField(""Assoc Start Id"");
				    ActivateField(""Assigned Id"");
					/*SetSearchSpec(""Number String"",strMSISDNNumber); 
					SetSearchSpec(""Type Identifier"",""MSISDN""); 
					SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""ALLOCATED""));*/
					//		
				    strSearchSpec = ""[Type Identifier] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"") + ""'"";
				    strSearchSpec = strSearchSpec + "" AND [Number String] = '"" +strMSISDNNumber+ ""'"";
				    //strSearchSpec = strSearchSpec + "" AND [Status] = '"" + TheApplication().InvokeMethod(""LookupValue"", ""NM_NUMBER_STATUS"", ""ALLOCATED"") + ""'"";
				    strSearchSpec = strSearchSpec + "" AND [Assoc Start Id] IS NOT NULL "";
				    SetSearchExpr(strSearchSpec);
					//
					ExecuteQuery(ForwardOnly);
					blnIsRecord = FirstRecord();
					if(!blnIsRecord)
					{
					strErrval = TheApplication().LookupMessage(""User Defined Errors"",""RMSAUC009"");
					return(strErrval);
					// some code
					}
					else 
					{
					strAssociateId = bcNumberMaster.GetFieldValue(""Assoc Start Id"");
					ClearToQuery();
					SetSearchSpec(""Assoc Start Id"",strAssociateId);
					//SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""ALLOCATED""));
					ExecuteQuery(ForwardOnly);
					blnIsRecord = FirstRecord();
					}  // End of else
					}// End of with (bcNumberMaster)
					while(blnIsRecord)
					{
					bcNumberMaster.SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""ASSIGNED""));
					bcNumberMaster.SetFieldValue(""Assigned Id"",strSubscriptionId);
					bcNumberMaster.WriteRecord();
					blnIsRecord = bcNumberMaster.NextRecord();
					}
		//New Code
	          	
	                with (bcCnct) {
					SetViewMode(AllView);
					ActivateField(""Status"");
					ClearToQuery()
					SetSearchSpec(""Assoc Start Id"",strAssociateId);
					//SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""ALLOCATED""));
					ExecuteQuery(ForwardOnly);
					blnIsCnct = FirstRecord();
					while(blnIsCnct)
						 {
					SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""ASSIGNED""));
					WriteRecord();
					blnIsCnct = NextRecord();
					 	 }	
					}//End  of  with (bcCnct)
				    with(bcAUCSIMNumber){	
					SetViewMode(AllView);
					ActivateField(""Status"");
					ClearToQuery();
					SetSearchSpec(""Assoc Start Id"",strAssociateId);
					//SetSearchSpec(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""ALLOCATED""));
					ExecuteQuery(ForwardOnly);
					blnIsSimNumber = FirstRecord();
					while(blnIsSimNumber)
					{
					SetFieldValue(""Status"",TheApplication().InvokeMethod(""LookupValue"",""NM_NUMBER_STATUS"", ""ASSIGNED""));
					WriteRecord();
					blnIsSimNumber = NextRecord();
					}
					}
                    //End  of new 
                    } // End of try 
		  catch(e) {
				    bcAccount           = null; 
					boAccount           = null;
					bcNumberMaster   	= null;
					bcCnct           	= null;
					boNumberMaster   	= null; 
					bcAUCSIMNumber   	= null;
					boAUCRegistration 	= null;
					throw(e.toString());
					return(strErrval);
					} 
		  finally   {
		            bcAccount           = null; 
					boAccount           = null;
					bcNumberMaster   	= null;
					bcCnct           	= null;
					boNumberMaster   	= null; 
					bcAUCSIMNumber   	= null;
					boAUCRegistration 	= null;  
		            }
		            return(strErrval);
				}//End  of Function"
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
if (MethodName == ""Validate HLR"")
{
	var ErrMessage = """";
	ErrMessage = ValidateHLR(Inputs, Outputs);
	Outputs.SetProperty(""ErrMessage"",ErrMessage);
	return(CancelOperation);
}	
return (ContinueOperation);
}
"/**********************************************************************************************************
Purpose 		: Function used to validate HLR Id of IMSI and MSISDN before number association
Author 			: KALYANA TANGIRALA
Date 			: 07-SEP-2007
Input			: Input Property set includes  AssociationId
Outputs		 	: Output property set contianing the err message
Change Log		: Changes made to the function
***********************************************************************************************************
Date(DD/MM/YYYY)	| By		| Description of Change																		
-----------------------------------------------------------------------------------------------------------
20070907	   |1.0   | Kalyana         	| Creation
----------------------------------------------------------------------------------------------------------*/
function ValidateHLR(Inputs,Outputs)
{
var strAssocId = Inputs.GetProperty(""AssociationId"");
var ErrMessage ="""";
var blnsIsRecord = false;
var bIsAssocMstrRec = false;
var blnIsNumber     = false;
var blnIsScheme     = false;
var blnIsBlock      = false
var AssociatedNumber="""";
var StartNumber ="""";
var IMSIHLRId   = """";
var MSISDNHLRId = """";
var strTypeIdentifier ="""";
var boNumAssociation = TheApplication().GetBusObject(""RMS NM Number Association"");
var bcNumAssociationMstr = boNumAssociation.GetBusComp(""RMS NM Number Association Master"");
var bcNumAssociationStartNum = boNumAssociation.GetBusComp(""RMS NM Number Association Start Number"");
var b0NumberScheme = TheApplication().GetBusObject(""RMS NM Number Scheme"");
var bcNumberScheme = b0NumberScheme.GetBusComp(""RMS NM Number Scheme"");
var bcNumberBlock  = b0NumberScheme.GetBusComp(""RMS NM Number Block"");
var boNumberEnquiry = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
var bcNumberEnquiry = boNumberEnquiry.GetBusComp(""RMS NM Number Enquiry For Update"");
try {
	with (bcNumAssociationMstr)
    {
	 SetViewMode(AllView);
	 ClearToQuery();
     ActivateField(""Status"");
	 ActivateField(""Association Id"");
	 ActivateField(""Rule Id"");	
	 ActivateField(""Rule Type"");
	 SetSearchSpec(""Id"",strAssocId);
	 ExecuteQuery(ForwardOnly);
	 }
	 bIsAssocMstrRec = bcNumAssociationMstr.FirstRecord();
	 if(!bIsAssocMstrRec)
		{//MUST have a record else error out
			Outputs.SetProperty(""ErrMessage"",""RMS_NO_RECORD"");
			return(ErrMessage);
		}
		if (bIsAssocMstrRec)
		{
		if (""Child"" == bcNumAssociationMstr.GetFieldValue(""Rule Type""))
    	{
		//strAssocMstrStatus = bcNumAssociationMstr.GetFieldValue(""Status"");
		with (bcNumAssociationStartNum)
	    {
		ClearToQuery();
	    ActivateField(""Parent Ass Id"");
	 	ActivateField(""Assoc Start Id"");
	 	ActivateField(""Type Identifier"");
	 	ActivateField(""Associated Start Number"");
		ActivateField(""Rule Id"");
		ActivateField(""Type Id"");
      	ActivateField(""Number Id"");
      	ActivateField(""Number"");
		ActivateField(""Scheme Id"");
		ActivateField(""Block Id"");
		ActivateField(""Type"");
		SetSearchSpec(""Ass Id"",strAssocId);
  		ExecuteQuery(ForwardOnly);
	 	}
		blnsIsRecord  = bcNumAssociationStartNum.FirstRecord();
		while(blnsIsRecord)
		{
		if(bcNumAssociationStartNum.GetFieldValue(""Rule Id"") != """")
		{
		var AssociatedNumber ="""";
		AssociatedNumber = bcNumAssociationStartNum.GetFieldValue(""Associated Start Number"");
		if (AssociatedNumber == """"  || AssociatedNumber == null)
		{
		ErrMessage = ""Associated Start Number is a required field"";
		//TheApplication().RaiseErrorText(ErrMessage);
		return(ErrMessage);
		}
		var AssocStartId = bcNumAssociationStartNum.GetFieldValue(""Assoc Start Id"");
		if (AssocStartId != """" || AssocStartId != null)//To avoid FTS because of data problem
		{
		//Get the HLR Id of IMSI
		with(bcNumberEnquiry)
		{
		ClearToQuery();
		ActivateField(""Assoc Start Id"");
		ActivateField(""Scheme Id"");
		SetSearchSpec(""Assoc Start Id"",AssocStartId);
		SetSearchSpec(""Number Type Identifier Denorm"",TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI""));	
		ExecuteQuery(ForwardOnly);
		blnIsNumber  = FirstRecord();
		}
		if (blnIsNumber)
		{
		var strIMSISchemeId = bcNumberEnquiry.GetFieldValue(""Scheme Id"");
		with(bcNumberScheme)
		{
		ClearToQuery();
		ActivateField(""IMSI_HLR_ID"");
		SetSearchSpec(""Id"",strIMSISchemeId);
		ExecuteQuery(ForwardOnly);
		blnIsScheme = FirstRecord();
		}
		if (blnIsScheme)
		{
		IMSIHLRId = bcNumberScheme.GetFieldValue(""IMSI_HLR_ID"");
		}//End of if (blnIsScheme)
		}//End of if (blnIsNumber)
        }//if (AssocStartId != """"
		else 
		{
		ErrMessage = ""Associate Start Id is null for selected Associated Number"";
		return(ErrMessage);
        }
		}//End of If (bcNumAssociationStartNum.GetFieldValue(""Rule"") != """")
		else  //for parent rule
		{
    	//var test1 = bcNumAssociationStartNum.GetFieldValue(""Id"");
		StartNumber ="""";
		StartNumber = bcNumAssociationStartNum.GetFieldValue(""Number"");
	    if (StartNumber == """" || StartNumber == null)
		{
		ErrMessage = TheApplication().LookupMessage(""User Defined Errors"",""RMSASS015"",bcNumAssociationStartNum.GetFieldValue(""Type""));
		//TheApplication().RaiseErrorText(ErrMessage);
		return(ErrMessage);
		}
		else 
		{
		//  Get the block of number for MSIDN
		strTypeIdentifier = """";
		strTypeIdentifier = bcNumAssociationStartNum.GetFieldValue(""Type Identifier"");
        var strMSISDNType = TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN"")
		var strISMIType = TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""ISMI"")
		if (strTypeIdentifier == TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""MSISDN""))	
		{
		var strMSISDNSchemeId = """";
		var strBlockId        = """";
		strMSISDNSchemeId = bcNumAssociationStartNum.GetFieldValue(""Scheme Id"");
		strBlockId = bcNumAssociationStartNum.GetFieldValue(""Block Id"");
		if (strMSISDNSchemeId != """" || strMSISDNSchemeId != null)
		{
		if (strBlockId != """" || strBlockId != null)
		{
		with (bcNumberScheme)
		{
		blnIsScheme = false;
		ClearToQuery();
		SetSearchSpec(""Id"",strMSISDNSchemeId);
        ExecuteQuery(ForwardOnly);
		blnIsScheme = FirstRecord();
		}
		if (blnIsScheme)
		{
		with (bcNumberBlock)
		{
		ClearToQuery();
		ActivateField(""MSISDN_HLR_ID"");
		SetSearchSpec(""Id"",strBlockId);
		ExecuteQuery(ForwardOnly);
		blnIsBlock = FirstRecord();
		}//End of with (bcNumberBlock)
		if (blnIsBlock)
		{
        MSISDNHLRId = bcNumberBlock.GetFieldValue(""MSISDN_HLR_ID"");
		}
		}//End of strBlockId != """" 
		else 
		{
		ErrMessage = ""Block Id is null for selected MSISDN Number"";
		return(ErrMessage);
		}
		}//if (blnIsScheme)
		}//End of 	if (strMSISDNSchemeId !
		else
		{
		ErrMessage = ""Scheme Id is null for selected MSISDN Number"";
		return(ErrMessage);
		}
		}//End of if (strTypeIdentifier
		else if (strTypeIdentifier == TheApplication().InvokeMethod (""LookupValue"", ""NM_TYPE_IDENTIFIER"", ""IMSI""))
		{
		var strSchemeId = bcNumAssociationStartNum.GetFieldValue(""Scheme Id"");
        if (strSchemeId != """" || strSchemeId != null)
		{
		with(bcNumberScheme)
		{
		ClearToQuery();
		ActivateField(""IMSI_HLR_ID"");
		SetSearchSpec(""Id"",strSchemeId);
		ExecuteQuery(ForwardOnly);
		blnIsScheme = FirstRecord();
		}
		if (blnIsScheme)
		{
		IMSIHLRId = bcNumberScheme.GetFieldValue(""IMSI_HLR_ID"");
		}//End of if (blnIsScheme)
		}//End of (strSchemeId != """"
		else
		{
		ErrMessage = ""Scheme Id is null for selected IMSI Number"";
		return(ErrMessage);
        }//end of else
		}//end of else if 
		}//End of else
		}//End of while
		blnsIsRecord = bcNumAssociationStartNum.NextRecord();
		}//End of while 
		if (MSISDNHLRId == """" || MSISDNHLRId == null) 
		{
		ErrMessage = ""HLR Id is null for selected MSISDN Number"";
		return(ErrMessage);
		}
		if (IMSIHLRId == """" || IMSIHLRId == null) 
		{
		ErrMessage = ""HLR Id is null for associated IMSI Number"";
		return(ErrMessage);
		}
		if (MSISDNHLRId != IMSIHLRId)
		{
		ErrMessage = ""MSISDN HLR Id ""+MSISDNHLRId+"" is not matching with IMSI HLR Id ""+IMSIHLRId;
		return(ErrMessage);
		}
		//return(ErrMessage);
		}//Endo of if (bcNumAssociationMstr.GetFieldValue(""Rule Type"")
		return(ErrMessage);
		}//End of if (bIsAssocMstrRec)
        }//End of try 
		
catch(e) {
if (ErrMessage =="""") {
ErrMessage  = e.errText
}
throw(e);
return(ErrMessage);
}
finally {
		bcNumberEnquiry = null;
		bcNumberBlock   = null;	
		bcNumberScheme  = null;
		bcNumAssociationStartNum = null;
		bcNumAssociationMstr = null;
		boNumAssociation   = null;
		boNumberEnquiry  = null;
		b0NumberScheme   = null;
        }
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{

	switch (MethodName) 
	{
		case ""ValidateNumber"":
			Validate_Number(Inputs,Outputs);
			break;
		default:
			return (ContinueOperation);
	}
	
	return (CancelOperation);
}
function Validate_Number(&Inputs,&Outputs)
	{
		   var boNumEnq = TheApplication().GetBusObject(""RMS NM Number Enquiry"");
		   var bcNumEnqUpdate	= boNumEnq.GetBusComp(""RMS NM Number Enquiry For Update"");
	
		   var psOutputs;
		   psOutputs = TheApplication().NewPropertySet();
		   psOutputs.SetType(""MSISDN_NUM"");
	
		   var strErrVal="""";   
		   var mbIsRecord = false;
		   var Arr = new Array();
		   var intReturn = CancelOperation;
		   var InputLine = Inputs.GetProperty(""Number List""); // NumberList 
		   var Arr = InputLine.split("";""); 
		   var ArrLen = Arr.length; // Array Length
	  
	
		   for (var Initial = 0; Initial < Arr.length; Initial++)
		      {
			    for (var Next = 0; Next < Initial; Next++)
			       {
			          if( Arr[Initial] == Arr[Next] )
			              {
			                strErrVal = ""Duplicate Number in the List "";
		   	     		  	TheApplication().RaiseErrorText(strErrVal);
		   	     		  }	
		   	       }
		   	  }		
	 	   for (var Initial = 0; Initial < ArrLen; Initial++)
		   	{
			   	psOutputs = TheApplication().NewPropertySet();
			   	psOutputs.SetType(""MSISDN_NUM"");
			  with(bcNumEnqUpdate)  	   
				 {
				      SetViewMode(3);
		    		  ActivateField(""Number String"");
				      ClearToQuery();
				   	  SetSearchSpec(""Number String"",Arr[Initial]);  // Search for the desired MSISDN in the CX_NUM_MSTR Table
				   	  var temp = Arr[Initial];
				   	  ExecuteQuery(); 
				   	  mbIsRecord = FirstRecord();
				   	  if(!mbIsRecord)	   	     		 
				   	   {
							psOutputs.SetProperty(""MSISDN_Number"",Arr[Initial]);
							psOutputs.SetProperty(""Status"",""Valid"");
							psOutputs.SetProperty(""Reason"","" "");
		   	   		   }
		   	   		 else 
		   	   		   {
							psOutputs.SetProperty(""MSISDN_Number"",Arr[Initial]);
							psOutputs.SetProperty(""Status"",""InValid"");
							psOutputs.SetProperty(""Reason"",""Number Exists "");
		   	   		   }
		   	   	 }	
		   	   	 Outputs.AddChild(psOutputs);	   	  
	    	  } 
  	  
			boNumEnq  = null;
			bcNumEnqUpdate = null;
			psOutputs	= null;
		}
"/**************************************************************************************
* Name          : STC Validate Partner Credentials Service_PreInvoke Method    	  *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS Validate Partner Credentials	    		          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 21/11/2006 	1.0   		Ramakrishna				   	Created      21/11/2006       *
**************************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var intReturn 		= CancelOperation;
	var strErrVal 		= """";
		
	
	Outputs.SetProperty(""ErrCode"",""00000"");
	Outputs.SetProperty(""ErrMessage"","""");
	try{
		if(Inputs.GetProperty(""PartnerMSISDN"") == """") {
			Outputs.SetProperty(""ErrCode"",""RMSINP001"");
			Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSINP001""));
		}
		switch(MethodName) {
			case ""ValidateCredentialsForChangePIN"":
					if (Outputs.GetProperty(""ErrCode"")==""00000""){
						ValidateCredentialsForChangePIN(Inputs, Outputs);
					}
					break;
					
			case ""ValidateCredentials"":
					if (Outputs.GetProperty(""ErrCode"")==""00000""){
						ValidateCredentials(Inputs, Outputs);
					}
					break;
			default:
					intReturn	= ContinueOperation;
					break;
		}
	}catch(e){
			if(Outputs.GetProperty(""ErrCode"") == ""00000"") {
				Outputs.SetProperty(""ErrCode"",e.errCode);
				Outputs.SetProperty(""ErrMessage"",e.errText);
			}

	} finally {
				
			return(intReturn);
	}
	

}
"/**************************************************************************************
* Name          : ValidateCredentials Method    	  *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS Validate Partner Credentials	    		          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 21/11/2006 	1.0   		Ramakrishna				   	Created      21/11/2006       *
  20070324      1.1         Prasad                      Changed to use STC Partner Product BC
**************************************************************************************/
function ValidateCredentials(&Inputs, &Outputs)
{
	var blnIsRecord;
	var blnIsRecord1;
	var strAccountStatus;
	var strRecordPassword;
	var boPartner = TheApplication().GetBusObject(""Channel Partner"");
	var bcPartner = boPartner.GetBusComp(""Channel Partner"");
	var bcPrtnrProd = boPartner.GetBusComp(""STC Partner Product"");//1.1 here
	var boAccount = TheApplication().GetBusObject(""STC-Subscriptions Data"");
	var bcAccount = boAccount.GetBusComp(""CUT Service Sub Accounts"");
	var strMSISDN = Inputs.GetProperty(""PartnerMSISDN"");
	var strInputPassword = Inputs.GetProperty(""Password"");
	// KT 20071120 
	var boCustomer = TheApplication().GetBusObject(""Account"");
	var bcCustomer = boCustomer.GetBusComp(""Account"");
	var strRegistrationStatus = """";
    //
 try{	
	with(bcPartner){
		SetViewMode(AllView);
		ActivateField(""CSN"");
		ActivateField(""DUNS Number"");
		ActivateField(""Password"");
		ClearToQuery();
		SetSearchSpec(""DUNS Number"",strMSISDN);
		SetSearchSpec(""Partnership Stage"",TheApplication().InvokeMethod(""LookupValue"",""PARTNERSHIP_STAGE"",""Active""));
		ExecuteQuery(ForwardOnly);
		blnIsRecord = FirstRecord();
	}//end with
	if(blnIsRecord){
		with (bcAccount){
            SetViewMode(AllView);
    		ActivateField(""DUNS Number"");  
            ActivateField(""Account Status"");  
            ClearToQuery();
            SetSearchSpec(""DUNS Number"",strMSISDN); 
			//KT 20070803
			SetSearchSpec(""Account Status"",TheApplication().InvokeMethod(""LookupValue"", ""SERVICE_ACCOUNT_STATUS"", ""Active"")); 
            //KT 20070803
			ExecuteQuery(ForwardOnly);
            blnIsRecord1 = FirstRecord();
            if(blnIsRecord1){
            	strAccountStatus = GetFieldValue(""Account Status"");  
                if(strAccountStatus != TheApplication().InvokeMethod(""LookupValue"", ""SERVICE_ACCOUNT_STATUS"", ""Active"")){
                	Outputs.SetProperty(""ErrCode"",""RMSPTNR002"");
					Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSPTNR002""));
				}
            }else{
            	Outputs.SetProperty(""ErrCode"",""RMSPTNR005"");
				Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSPTNR005""));
			} 
			//KT20072011 Added to check Partner is Registered or not
	        if (Outputs.GetProperty(""ErrCode"")==""00000""){
			with(bcCustomer){
			SetViewMode(AllView);
			ActivateField(""STC Registration Status"");
			ClearToQuery();
			SetSearchSpec(""Id"",bcAccount.GetFieldValue(""Master Account Id""));
			ExecuteQuery(ForwardOnly);
			var blnIsRecord2  = bcCustomer.FirstRecord();
			}//end with
			if(blnIsRecord2){
			strRegistrationStatus = bcCustomer.GetFieldValue(""STC Registration Status"");
			if(strRegistrationStatus != TheApplication().InvokeMethod(""LookupValue"", ""STC_REG_STATUS"", ""Registered"")){
				Outputs.SetProperty(""ErrCode"",""RMSWAP010"");
				Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSWAP010""));
			}
	        }
			}
        // End KT20072011
        }
		
        if (Outputs.GetProperty(""ErrCode"")==""00000""){
        	strRecordPassword = bcPartner.GetFieldValue(""Password"");  
        	if(strRecordPassword != strInputPassword){
        		Outputs.SetProperty(""ErrCode"",""RMSPTNR003"");
				Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSPTNR003""));
			}
		}
		/* commented for Wave5 change
		if (Outputs.GetProperty(""ErrCode"")==""00000""){
			with(bcPrtnrProd){
				SetViewMode(AllView);
				ActivateField(""STC-Product Type"");
				ActivateField(""Name"");
				ActivateField(""Minimum Quantity"");
				ActivateField(""Vendor Id"");
				ClearToQuery();
				SetSearchSpec(""Vendor Id"",bcPartner.GetFieldValue(""Id""));
				SetSearchSpec(""Name"",TheApplication().InvokeMethod(""LookupValue"", ""STC_SALES_TYPE"", ""MSISDN Query""));
				ExecuteQuery(ForwardOnly);
				blnIsRecord1 = FirstRecord();
			}//end with
			if(blnIsRecord1) {
				var intQuantity = bcPrtnrProd.GetFieldValue(""Minimum Quantity"");
				if(ToInteger(intQuantity) <= 0) {
					Outputs.SetProperty(""ErrCode"",""RMSPTNR004"");
					Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSPTNR004""));
				}
			}else{
				Outputs.SetProperty(""ErrCode"",""RMSPTNR006"");
				Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSPTNR006""));
			}
		}
		*/
	}else{
		Outputs.SetProperty(""ErrCode"",""RMSPTNR001"");
		Outputs.SetProperty(""ErrMessage"",TheApplication().LookupMessage(""User Defined Errors"",""RMSPTNR001""));
	}
 }catch(e){
 		if(Outputs.GetProperty(""ErrCode"") == ""00000"") {
				Outputs.SetProperty(""ErrCode"",e.errCode);
				Outputs.SetProperty(""ErrMessage"",e.errText);
		}
 }finally{
 		bcAccount = null;
 		bcPrtnrProd = null;
 		bcPartner     = null;
 		boPartner     = null;
 		boAccount = null;
		bcCustomer = null;
		boCustomer = null;
 }
	
}
"/**************************************************************************************
* Name          : ValidateCredentials Method    	  *
* Author        : Mahindra British Telecom                                            *
* Description   : RMS Validate Partner Credentials	    		          *
* Amendment Details                                                                   *
***************************************************************************************
* Date    		Version  	AmendedBy     				Comments     Reviewed Date    *
***************************************************************************************
*                                                                                     *
* 21/11/2006 	1.0   		Ramakrishna				   	Created      21/11/2006       *
  20070324      1.1         Prasad                      Changed to use STC Partner Product BC
  22-10-2008	1.2			Ashu						Changed to make PIN Counter Configurable
**************************************************************************************/
function ValidateCredentialsForChangePIN(&Inputs, &Outputs)
{
	var blnIsRecord;
	var blnIsRecord1;
	var strAccountStatus;
	var strRecordPassword;
	var boPartner = TheApplication().GetBusObject(""Channel Partner"");
	var bcPartner = boPartner.GetBusComp(""Channel Partner"");
	var bcPrtnrProd = boPartner.GetBusComp(""STC Partner Product"");//1.1 here
	var boAccount = TheApplication().GetBusObject(""STC-Subscriptions Data"");
	var bcAccount = boAccount.GetBusComp(""CUT Service Sub Accounts"");
	var strMSISDN = Inputs.GetProperty(""PartnerMSISDN"");
	var strInputPassword = Inputs.GetProperty(""Password"");
	// KT 20071120 
	var boCustomer = TheApplication().GetBusObject(""Account"");
	var bcCustomer = boCustomer.GetBusComp(""Account"");
	var strRegistrationStatus = """";
	//1.2 Below
	var strNewPassword = Inputs.GetProperty(""NewPIN"");
    Outputs.SetProperty(""ResponseText"","""");
    
	//Outputs.SetProperty(""Partner Id"","""");
	//1.2 above
    //
 try{	
	with(bcPartner)
	{
		SetViewMode(AllView);
		ActivateField(""CSN"");
		ActivateField(""DUNS Number"");
		ActivateField(""Password"");
		ActivateField(""Invalid PIN Counter"");
		ActivateField(""Partner Lock Flag"");
		ClearToQuery();
		SetSearchSpec(""DUNS Number"",strMSISDN);
		SetSearchSpec(""Partnership Stage"",TheApplication().InvokeMethod(""LookupValue"",""PARTNERSHIP_STAGE"",""Active""));
		ExecuteQuery(ForwardOnly);
		blnIsRecord = FirstRecord();
	}//end with
	if(blnIsRecord)
	{
		with (bcAccount)
		{
            SetViewMode(AllView);
    		ActivateField(""DUNS Number"");
            ActivateField(""Account Status"");
            ClearToQuery();
            SetSearchSpec(""DUNS Number"",strMSISDN);
			//KT 20070803
			SetSearchSpec(""Account Status"",TheApplication().InvokeMethod(""LookupValue"", ""SERVICE_ACCOUNT_STATUS"", ""Active""));
            //KT 20070803
			ExecuteQuery(ForwardOnly);
            blnIsRecord1 = FirstRecord();
            if(blnIsRecord1)
            {
            	strAccountStatus = GetFieldValue(""Account Status"");  
                if(strAccountStatus != TheApplication().InvokeMethod(""LookupValue"", ""SERVICE_ACCOUNT_STATUS"", ""Active""))
                {
                	Outputs.SetProperty(""ErrCode"",""00002"");
					Outputs.SetProperty(""ErrMessage"",""No Retailer/Employee Found"");
				}
            }
            else
            {
            	Outputs.SetProperty(""ErrCode"",""00002"");
				Outputs.SetProperty(""ErrMessage"",""No Retailer/Employee Found"");
			} 
			//KT20072011 Added to check Partner is Registered or not
	        if (Outputs.GetProperty(""ErrCode"")==""00000"")
	        {
				with(bcCustomer)
				{
					SetViewMode(AllView);
					ActivateField(""STC Registration Status"");
					ClearToQuery();
					SetSearchSpec(""Id"",bcAccount.GetFieldValue(""Master Account Id""));
					ExecuteQuery(ForwardOnly);
					var blnIsRecord2  = bcCustomer.FirstRecord();
				}//end with
				if(blnIsRecord2)
				{
					strRegistrationStatus = bcCustomer.GetFieldValue(""STC Registration Status"");
					if(strRegistrationStatus != TheApplication().InvokeMethod(""LookupValue"", ""STC_REG_STATUS"", ""Registered""))
					{
						Outputs.SetProperty(""ErrCode"",""00002"");
						Outputs.SetProperty(""ErrMessage"",""No Retailer/Employee Found"");
					}
		        }
			}
        // End KT20072011
        }
		
        if (Outputs.GetProperty(""ErrCode"")==""00000"")
        {
        	var vCounter = ToNumber(""0"");
        	strRecordPassword = bcPartner.GetFieldValue(""Password"");
        	vCounter = bcPartner.GetFieldValue(""Invalid PIN Counter"");
              			        	
        	//Change by Achin
        	var vpartner_id = bcPartner.GetFieldValue(""CSN"");
        	//below 1.2
        	//Outputs.SetProperty(""Partner Id"",vpartner_id);
        	var vLockFlagStatus = bcPartner.GetFieldValue(""Partner Lock Flag"");
			var mpsInputs = TheApplication().NewPropertySet();
			var mpsOutputs = TheApplication().NewPropertySet();
			mpsInputs.SetProperty(""Parameter Name"",""Partner PIN Lockout Counter"");
			var mBsGetSysPref = TheApplication().GetService(""STC BS Startup""); 
			mBsGetSysPref.InvokeMethod(""Get SysPref"",mpsInputs,mpsOutputs);
			var vPINCounter = mpsOutputs.GetProperty(""Parameter Value"");
        	
        	mBsGetSysPref	= null;
        	mpsOutputs		= null;
        	mpsInputs		= null;
        	
        	if(vCounter >= vPINCounter || vLockFlagStatus == ""Y"")
        	{
        		if(bcPartner.GetFieldValue(""Partner Lock Flag"") == ""N"")
        		{
        			bcPartner.SetFieldValue(""Partner Lock Flag"",""Y"");
        			bcPartner.WriteRecord();
        		}
        		if(bcPartner.GetFieldValue(""Invalid PIN Counter"") != vPINCounter)
        		{
        			bcPartner.SetFieldValue(""Invalid PIN Counter"",vPINCounter);
        			bcPartner.WriteRecord();
        		}
        		Outputs.SetProperty(""ErrCode"",""00004"");
        		Outputs.SetProperty(""ErrMessage"",""Invalid PIN has reached Threshold"");
        	}
        	
	        else
	        {	
	        	if(strRecordPassword != strInputPassword)
	        	{
	        		var vPINCounter2 = ToNumber(vPINCounter) - 1;
	        		if(vCounter == vPINCounter2)
	        		{
	        			vCounter = ToNumber(vCounter) + 1;
	        			bcPartner.SetFieldValue(""Invalid PIN Counter"",vCounter);
	        			bcPartner.SetFieldValue(""Partner Lock Flag"",""Y"");
	        			bcPartner.WriteRecord();
	        			Outputs.SetProperty(""ErrCode"",""00004"");
						Outputs.SetProperty(""ErrMessage"",""Your Account has been Locked"");
	        		}
	        		else
	        		{
	        			vCounter = ToNumber(vCounter) + 1;
	        			bcPartner.SetFieldValue(""Invalid PIN Counter"",vCounter);
	        			bcPartner.WriteRecord();
						//var n = 3 - vCounter;
	        			Outputs.SetProperty(""ErrCode"",""00003"");
                        var n =  vPINCounter- vCounter;
                        var vErrMessage = ""PIN Submitted Not Valid. You are left with ""+n+"" more attempts""; 
						Outputs.SetProperty(""ErrMessage"",vErrMessage);
                        Outputs.SetProperty(""ResponseText"",n);
					}
	        	}
				else
				{
					vCounter = ""0"";
					bcPartner.SetFieldValue(""Invalid PIN Counter"",vCounter);
					bcPartner.SetFieldValue(""Partner Lock Flag"",""N"");
					bcPartner.SetFieldValue(""Password"",strNewPassword);
					bcPartner.WriteRecord();
					
					//Ashu: for ICMDB
					//Change by Achin
					//var vpartner_id = Inputs.GetProperty(""Partner Id"");
					var mpsInputs2 = TheApplication().NewPropertySet();
					var mpsOutputs2 = TheApplication().NewPropertySet();
				    mpsInputs2.SetProperty(""Parameter Name"",""UpdateICMTableforPINChange"");
					var mBsGetSysPref2 = TheApplication().GetService(""STC BS Startup""); 
					mBsGetSysPref2.InvokeMethod(""Get SysPref"",mpsInputs2,mpsOutputs2);
				    var icmChangePin = mpsOutputs2.GetProperty(""Parameter Value"");
				    
				    mBsGetSysPref2	= null;
		        	mpsOutputs2		= null;
        			mpsInputs2		= null;
				
				    if(icmChangePin == ""Y"")
				    {
				    	var bcICM = boPartner.GetBusComp(""STC ICM Pin Change EBC"");
				    	with(bcICM)
				    	{	
				 			SetViewMode(AllView);
							ActivateField(""PARTNER_ID"");
							ActivateField(""PIN"");
							ClearToQuery();
                            //KT:20082710:Changed to search expression to get proper sql for EBC
							//SetSearchSpec(""PARTNER_ID"",vpartner_id);
                             var strSearchExp="""";
                             strSearchExp  = strSearchExp + ""[PARTNER_ID] = '""+vpartner_id+""'"";
                             SetSearchExpr(strSearchExp);
                            //End KT:20082710
							ExecuteQuery(ForwardOnly);
							var icmRec = FirstRecord();
							if(icmRec)
							{
								SetFieldValue(""PIN"",strNewPassword);
								WriteRecord();
							}
						}//end of bcICM
						bcICM = null;
					}		
				}
			}
			//above 1.2
		}

	}else{
		Outputs.SetProperty(""ErrCode"",""00002"");
		Outputs.SetProperty(""ErrMessage"",""No Retailer/Employee Found"");
	}
 }catch(e){
 		if(Outputs.GetProperty(""ErrCode"") == ""00000"") {
				Outputs.SetProperty(""ErrCode"",e.errCode);
				Outputs.SetProperty(""ErrMessage"",e.errText);
		}
 }finally{
 		bcAccount	= null;
 		bcPrtnrProd	= null;
 		bcPartner	= null;
 		boPartner	= null;
 		boAccount	= null;
		bcCustomer	= null;
		boCustomer	= null;
 }

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function Resubmit()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_TERMINATION"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-02.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */

	//var file=Clib.fopen(""/siebelfs/hout.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
        {

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			MInputs.SetProperty(""Object Id"",MRowId);    
			MInputs.SetProperty(""CallTier"",""Add KSA Service"");
			MInputs.SetProperty(""ProcessName"",""STC Submit KSA Addon Request WF"");

			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

        }
    }
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
	{    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function Resubmit()
{
	var MRowId="""";
	
	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_TERMINATION"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-02.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/siebelfs/hout.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
		{
			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			MInputs.SetProperty(""Object Id"",MRowId);    

			MInputs.SetProperty(""ProcessName"",""STC GenServiceActivationResponse"");

			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);
		}
	}
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
	    Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function Resubmit()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_TERMINATION"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-02.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/siebelfs/hout.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
		{

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			MInputs.SetProperty(""Object Id"",MRowId);    

			MInputs.SetProperty(""ProcessName"",""STC Submit Order Wrapper"");

			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);
			
		}
    }
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
	   return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function Resubmit()
{

	var MRowId="""";

	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_TERMINATION"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-02.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/siebelfs/hout.csv"", ""rt"");

	if (file==null)
	{
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
	{
		while(!Clib.feof(file))
        {

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			MInputs.SetProperty(""Object Id"",MRowId);    

			MInputs.SetProperty(""ProcessName"",""STC GenPortOutAuthResult WF"");

			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

        }
    }
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null;
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function Resubmit()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_TERMINATION"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-02.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/siebelfs/hout.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
        {

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			MInputs.SetProperty(""Object Id"",MRowId);    

			MInputs.SetProperty(""ProcessName"",""STC GenPortIn Request WF"");

			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);
		
		}
    }
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null;
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function Resubmit()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_TERMINATION"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-02.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/siebelfs/hout.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
	}
	else
    {
		while(!Clib.feof(file))
		{

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			MInputs.SetProperty(""Object Id"",MRowId);    

			MInputs.SetProperty(""ProcessName"",""SISOMBillingSubmitOrderWebService"");

			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

        }
    }
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null;
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function Resubmit()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_RESUBMIT_ORDER"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-02.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/siebelfs/hout4.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
        {

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			MInputs.SetProperty(""Object Id"",MRowId);    

			MInputs.SetProperty(""ProcessName"",""SISOMBillingSubmitOrderWebService"");

			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

        }
    }
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null;
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{	
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function Resubmit()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_RESUBMIT_ORDER_AUTO_CHN"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-02.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/siebelfs/hout1.csv"", ""rt"");

	if (file==null)
	{
		TheApplication().RaiseErrorText(""Error in opening the file"");
	}
	else
	{
		while(!Clib.feof(file))
		{

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			MInputs.SetProperty(""Object Id"",MRowId);    

			MInputs.SetProperty(""ProcessName"",""STC SISOMBillingSubmitOrderWebService Bulk Order"");

			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

		}
	}
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null;

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
	    Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function Resubmit()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_RESUBMIT_ORDER2"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-02.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/siebelfs/hout3.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
        {

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			MInputs.SetProperty(""Object Id"",MRowId);    

			MInputs.SetProperty(""ProcessName"",""SISOMBillingSubmitOrderWebService"");

			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

        }
    }
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null;
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}

function Resubmit()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_RESUBMIT_PAYMENT"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-02.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/siebelfs/pout.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
        {

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);

			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			MInputs.SetProperty(""Object Id"",MRowId);

			MInputs.SetProperty(""ProcessName"",""STC Send Bill Payment WF"");

			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");
				
			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

        }
	}
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null;
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;
	
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function Resubmit()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_TERMINATION"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-02.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/siebelfs/hout.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
        {

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			MInputs.SetProperty(""Object Id"",MRowId);    
			MInputs.SetProperty(""CallTier"",""Auto Prepaid Registration"");
			MInputs.SetProperty(""ProcessName"",""STC Generic SR Submit WF"");

			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);
	
		}
    }
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null;
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}





function Resubmit()
{
	var MRow="""";
	var MAccountId="""";
	var MObjectId="""";
	var Action="""";
	
	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_SR_COMPLETE"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-02.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/siebelfs/SR.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
        {

			MRow = (Clib.fgets(file));  
			MRow = trim(MRow);
			var len = MRow.length;
			var ind1 = MRow.indexOf("","");
			MAccountId=MRow.substring(0,ind1);
			MRow = MRow.substring(ind1+1,len);
			var ind2 = MRow .indexOf("","");
			MObjectId = MRow .substring(0,ind2);
			//Action = MRow.substring(ind2+1,len);
			 
			//TheApplication().RaiseErrorText(NetPrice);

			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			if( MObjectId != '' || MObjectId != null)
			{
				MInputs.SetProperty(""ProcessName"",""STC Prepaid Registration WF"");
				MInputs.SetProperty(""Account Id"",MAccountId);    
				MInputs.SetProperty(""Object Id"",MObjectId);
				MInputs.SetProperty(""CallTier"",""Pre-Paid Registration"");
				//MInputs.SetProperty(""Action"",Action);

				var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

				MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

			}
		}
    }
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MAccountId=null;
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function Resubmit()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-02.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_RESUBMIT_ORDER_AUTO_CHN"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-02.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/siebelfs/hout1.csv"", ""rt"");

	if (file==null)
	{
		TheApplication().RaiseErrorText(""Error in opening the file"");
	}
	else
    {
		while(!Clib.feof(file))
        {

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			MInputs.SetProperty(""Object Id"",MRowId);    
			MInputs.SetProperty(""CallTier"",""SIMRelatedt"");
			MInputs.SetProperty(""ProcessName"",""STC Generic SR Submit WF"");

			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

        }
    }
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null;
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
	    Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function Resubmit()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-03.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_TERMINATION"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-03.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/siebelfs/hout.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
        {

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			MInputs.SetProperty(""Object Id"",MRowId);    
			MInputs.SetProperty(""CallTier"",""Billing Reso Alert - Port-In"");
			MInputs.SetProperty(""ProcessName"",""STC Generic SR Submit WF"");

			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

        }
    }
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null;
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}





function Resubmit()
{
	var MRow="""";
	var MAccountId="""";
	var MObjectId="""";
	var Action="""";
	var MCallTier="""";
	
	/*	WIPRO-Upgrade-03.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_SR_COMPLETE"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-03.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/siebelfs/SR.csv"", ""rt"");

	if (file==null)
	{
		TheApplication().RaiseErrorText(""Error in opening the file"");
	}
	else
	{
		while(!Clib.feof(file))
		{

			MRow = (Clib.fgets(file));  
			MRow = trim(MRow);
			var len = MRow.length;
			var ind1 = MRow.indexOf("","");
			MAccountId=MRow.substring(0,ind1);
			MRow = MRow.substring(ind1+1,len);
			var ind2 = MRow .indexOf("","");
			MObjectId = MRow .substring(0,ind2);
			MRow = MRow.substring(ind2+1,len);
			var ind3 = MRow .indexOf("","");
			MCallTier = MRow .substring(0,ind3);
			 
			//TheApplication().RaiseErrorText(NetPrice);

			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			if( MObjectId != '' || MObjectId != null)
			{
				MInputs.SetProperty(""ProcessName"",""STC Generic SR Submit WF"");
				MInputs.SetProperty(""Account Id"",MAccountId);    
				MInputs.SetProperty(""Object Id"",MObjectId);
				MInputs.SetProperty(""CallTier"",MCallTier);
				//MInputs.SetProperty(""Action"",Action);

				var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

				MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

			}
		}
	}
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MAccountId=null;
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}

function Resubmit()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-03.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_RESUBMIT_SER_REQ"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-03.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/siebelfs/sout.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
        {

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");
			MInputs.SetProperty(""ProcessName"",""STC Send Bill Payment WF"");
			MInputs.SetProperty(""Object Id"",MRowId);    
			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

        }
    }
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null;
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;

}
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{
	WritePS(MethodName, Inputs, ""Post_Input"");
	WritePS(MethodName, Outputs, ""Post_Output"");
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return (ContinueOperation);
}
function WritePS (MethodName, Inputs : PropertySet, Type)
{
	try
	{
		var Login="""", LogUser="""", sLogPath="""", filename="""";
		Login = TheApplication().LoginName();
		LogUser = TheApplication().InvokeMethod(""LookupValue"", ""STC_LOG_RSTT_USER"", Login).substring(0,4);
		if(LogUser == ""USER"")
		{
			sLogPath = TheApplication().InvokeMethod(""LookupValue"",""STC_LOG"",""XmlWriteToFilePathRSTT"");
			var oXMLFileWriter : Service = TheApplication().GetService(""EAI XML Write to File"");
			var iPS : PropertySet = TheApplication().NewPropertySet();
			var oPS : PropertySet = TheApplication().NewPropertySet();
			filename = sLogPath + Clib.time() + ""_"" + this.Name() + ""_"" + MethodName + ""_"" + Type + "".xml"";
			iPS = Inputs;
			iPS.SetProperty(""FileName"", filename);
			oXMLFileWriter.InvokeMethod(""WritePropSet"", iPS, oPS);
		}
	}
	catch (e)
	{
		//do nothing
	}
	finally
	{
		filename = null;
		oPS = null;
		iPS = null;
		oXMLFileWriter = null;
		Login = null;
	}
}
"///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 1999, Siebel Systems, Inc., All rights reserved.
//
//  $Revision: 4 $
//      $Date: 12/10/99 10:29a $
//    $Author: Achaudhr $ of last update
//
// CREATOR:    R.Lankinen
//
// DESCRIPTION
//    Multi-organization Javascript maps from Siebel Account to SAP entities
//
///////////////////////////////////////////////////////////////////////////////
#include ""eaisiebel.js""
"
function CreateDummyBAPICommit (inputMsg, outputMsg)
{
	/*
	 * Set up EAI Output Message Objects
	 */
	 var oCommitObj;	// BAPI instance
	 var oCommitComp;	// BAPI Component
	 
	oCommitObj	= outputMsg.CreateIntObj (""SAP 4x BAPI_TRANSACTION_COMMIT (BAPI Input)"");
    oCommitObj.NewInstance();
    oCommitComp = oCommitObj.CreatePrimaryIntComp (""Import Parameters"");
    oCommitComp.NewRecord ();
   
}
function CreateSAPAccount_BAPIToSiebel (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   BAPI Export (SAP 4x Account - Create SAP Customer (BAPI Output))
    *     Export Parameters (output)
    * 	    CUSTOMERNO
    *
    * Output Object's Integration Components:
    *   Account Object (SAP 4x Account)
    *     Integration Id (oAccount)
    */

   /*
    * Set up EAI Input Message objects
    */
   var iCreateAccountObj;   // BAPI Account instance
   var iCreateAccountComp; // BAPI Export Parameters

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Account Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oAccountObj;      // Siebel Account instance
   var oAccountComp;     // Account

   /*
    * Find and create top-level integration object
    */
   iCreateAccountObj = inputMsg.GetIntObj (""SAP 4x Account - Create SAP Customer (BAPI Output)"");
   oAccountObj = outputMsg.CreateIntObj (""SAP 4x Account"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iCreateAccountObj.NextInstance ())
   {
      /*
       * Create ""Account"" object
       */
      oAccountObj.NewInstance ();

      /*
       * Create ""Account"" component in output message
       */
      oAccountComp = oAccountObj.CreatePrimaryIntComp (""Account"");
      oAccountComp.NewRecord ();
      // Set ""Id"" so Siebel Adapter can synchronize
      oAccountComp.SetFieldValue (""Id"", inputId);

      /*
       * Read ""Export Parameters"" component
       */
      iCreateAccountComp = iCreateAccountObj.GetPrimaryIntComp (""Export Parameters"");

      if (iCreateAccountComp.NextRecord ())
      {
      	 oAccountComp.SetCopySource  (iCreateAccountComp);
      	 oAccountComp.CopyFieldValue (""EAI Sync Error Text"", ""RETURN-MESSAGE"");
      	 var ErrorType = iCreateAccountComp.GetFieldValue (""RETURN-TYPE"");
      	 
      	 if (ErrorType != ""E"")
      	 {
      	 
 		 /*
      	  * Update ""Account"" component
      	  */
        	oAccountComp.CopyFieldValue (""Integration Id"", ""CUSTOMERNO"");
        	var customerno = iCreateAccountComp.GetFieldValue (""CUSTOMERNO"");
        	var timenow = Timestamp();
         	var SyncStat = TheApplication().InvokeMethod (""LookupValue"", ""EAI_ACCOUNT_SYNC_STATUS"", ""Created in Back Office"");
	     	oAccountComp.SetFieldValue (""EAI Sync Status Code"",  SyncStat);
	     	oAccountComp.SetFieldValue (""EAI Sync Date"",timenow);
	     	
    	
	     	/*
	     	 *	Get Address Info
	     	 */
			var AccBusObject = TheApplication().GetBusObject(""Account"");
		 	var AccBusComp   = AccBusObject.GetBusComp(""Account"");
		 
			 // Set View Mode to 3 (or AllView)
		 	AccBusComp.SetViewMode(3);  
		 
		 	AccBusComp.ClearToQuery();
    	 	AccBusComp.SetSearchSpec(""Id"", inputId);
			AccBusComp.ActivateField(""Location"");
			
		 	AccBusComp.ExecuteQuery();
		 	if(AccBusComp.FirstRecord())
			{
	  		 var city        = AccBusComp.GetFieldValue(""City"");
	  		 var location    = AccBusComp.GetFieldValue(""Location"");
	  		 
	  		 /*
	  		  *		Site
	  		  */
	  		 if (location == """")
	  		 {
	  		 	location = AccBusComp.GetFieldValue(""City"");
	  		 }
	  		 location += "" "" + customerno;
	  		 oAccountComp.SetFieldValue (""Location"", location );
			}
			  	 
	     	   	
	     }
      }
   } //   while (iCreateAccountObj.NextInstance ())
} //function CreateSAPAccount_BAPIToSiebel"
function CreateSAPAccount_SiebelToBAPI (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   Account Object (SAP 4x Account)
    *     Account (Account)
    *       
    *
    * Output Object's Integration Components:
    *   BAPI Import Object (SAP 4x Account - Create SAP Account (BAPI Import))
    *     Import Parameters
    *       PI_PERSONALDATA (BAPIKNA101_1		Customer Personal Data)
    *       PI_COMPANYDATAI (BAPIKNA106)		Customer Company Data)
    *	    PI_COPYREFERENCE (BAPIKNA102)		Reference Data)
    */

	/* Set up EAI Lookup maps */
	var currencyLM = EAIGetValueMap (""SAP Currency Code"", ""Siebel Outbound"");
	var languageLM = EAIGetValueMap (""SAP Language 4x"", ""Siebel Outbound"");
	var countryLM  = EAIGetValueMap (""SAP Country"", ""Siebel Outbound"");
	var refCustLM  = EAIGetValueMap (""SAP Reference Customer"", ""Siebel Outbound"");
	var acctGrpLM  = EAIGetValueMap (""SAP Customer Acct Group Code"", ""Siebel Outbound"");
	var regCodeLM  = EAIGetValueMap (""Back Office Region"", ""Siebel Outbound""); //12-90S337

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Account Id"");

   /*
    * Set up EAI Input Message objects
    */
   var iAccountObj;  // Account object instance
   var iAccountComp; // Account

   /*
    * Set up EAI Output Message objects
    */
   var oCFDAccountObj;    // BAPI Account instance
   var oCFDImportComp;  // BAPI Import parameters
   
   /*
    * Variables
    */
   var regCode;    // SAP Country + Region Code (12-90S337)
   var sapCode;    // SAP Region Code			(12-90S337)

   /*
    * Find and create top-level integration object
    */
   iAccountObj = inputMsg.GetIntObj (""SAP 4x Account"");
   oCFDAccountObj = outputMsg.CreateIntObj (""SAP 4x Account - Create SAP Customer (BAPI Input)"");
   
   /*
    * Read int object instances from EAI message
    */
   while (iAccountObj.NextInstance ())
   {
      /*
       * Create ""Account"" object in output message
       */
      oCFDAccountObj.NewInstance ();

      /*
       * Read ""Account"" component
       */
      iAccountComp = iAccountObj.GetPrimaryIntComp (""Account"");
      oCFDImportComp = oCFDAccountObj.CreatePrimaryIntComp (""Import Parameters"");
      while (iAccountComp.NextRecord ())
      {
         /*
          * Return an error if Integration Id is not null
          */
         if (iAccountComp.GetFieldValue (""Integration Id"") != """")
	       {
			var IntId = iAccountComp.GetFieldValue (""Integration Id"");
			EAIRaiseError(LocalizeMessage(""ERR_MSG_ACCOUNT_EXISTS,""+IntId+""""));//nbc
	       }

         /*
          * Write ""Import Parameters"" component
          */
         oCFDImportComp.NewRecord ();
         oCFDImportComp.SetCopySource  (iAccountComp);
	     oCFDImportComp.CopyFieldValue (""PI_COMPANYDATA-NAME"", ""Name"");
         oCFDImportComp.CopyFieldValue (""PI_COMPANYDATA-TEL1_NUMBR"", ""Main Phone Number"");
         oCFDImportComp.CopyFieldValue (""PI_COMPANYDATA-FAX_NUMBER"", ""Main Fax Number"");
         oCFDImportComp.SetFieldValue  (""PI_COMPANYDATA-LANGU"",languageLM.Translate (iAccountComp.GetFieldValue (""Language Code"")));
         oCFDImportComp.SetFieldValue  (""PI_COMPANYDATA-CURRENCY"",currencyLM.Translate (iAccountComp.GetFieldValue (""Currency Code"")));
         
         var iAddrComp = iAccountComp.GetIntComp (""Account_Business Address"", iAccountComp );
         iAddrComp.FirstRecord ();

         oCFDImportComp.SetCopySource  (iAddrComp);
         oCFDImportComp.CopyFieldValue (""PI_COMPANYDATA-CITY"", ""City"");
         oCFDImportComp.CopyFieldValue (""PI_COMPANYDATA-DISTRICT"", ""Province"");
         oCFDImportComp.CopyFieldValue (""PI_COMPANYDATA-POSTL_COD1"", ""Postal Code"");
         oCFDImportComp.CopyFieldValue (""PI_COMPANYDATA-E_MAIL"", ""Email Address"");
         oCFDImportComp.CopyFieldValue (""PI_COMPANYDATA-STREET"", ""Street Address"");
         oCFDImportComp.SetFieldValue  (""PI_COMPANYDATA-COUNTRY"", countryLM.Translate (iAddrComp.GetFieldValue(""Country"")));
// nbc 11/10/01. CR#12-90S337 - The EAI value maps for State / Region is missing         
//       oCFDImportComp.CopyFieldValue (""PI_COMPANYDATA-REGION"", ""State"");     	//12-90S337    
         regCode = regCodeLM.Translate (iAddrComp.GetFieldValue (""State""));  	//12-90S337
		 sapCode = regCode.substring(3,5);										//12-90S337
         oCFDImportComp.SetFieldValue (""PI_COMPANYDATA-REGION"", sapCode);		//12-90S337
         
   	     var acctGroup = iAccountComp.GetFieldValue(""Customer Account Group"");
	     oCFDImportComp.SetFieldValue (""PI_COPYREFERENCE-REF_CUSTMR"", refCustLM.Translate(acctGroup));
         var iSalesAreaAccountComp = iAccountComp.GetIntComp (""SAP 4x Account Sales Area"");
			
		if (iSalesAreaAccountComp.NextRecord() )
		{

			/* Set sales organization */

			oCFDImportComp.SetCopySource  (iSalesAreaAccountComp);
			oCFDImportComp.CopyFieldValue (""PI_COPYREFERENCE-SALESORG"", ""Back Office Sales Organization"");
			oCFDImportComp.CopyFieldValue (""PI_COPYREFERENCE-DISTR_CHAN"", ""Back Office Distribution Channel"");
			oCFDImportComp.CopyFieldValue (""PI_COPYREFERENCE-DIVISION"", ""Back Office Sales Area Division Code"");
	
        }

      } //while (iAccountComp.NextRecord ())
   } //while (iAccountObj.NextInstance ())
} //function CreateSAPAccount_SiebelToBAPI"
function GetAccountName (Int_ID)
{
	var AccBusObject = TheApplication().GetBusObject(""Account"");
	var AccBusComp = AccBusObject.GetBusComp(""Account"");
		
	AccBusComp.ClearToQuery();
    AccBusComp.SetSearchSpec(""Integration Id"", Int_ID);
	AccBusComp.ActivateField(""Name"");
	AccBusComp.ExecuteQuery();
		
	if(AccBusComp.FirstRecord())
	{
	   return AccBusComp.GetFieldValue(""Name"");
	}
      	else
           return null;
}
function GetAccountStatus (oIntId)
{
	var AccBusObject = TheApplication().GetBusObject(""Account"");
	var AccBusComp = AccBusObject.GetBusComp(""Account"");
		
	AccBusComp.ClearToQuery();
    AccBusComp.SetSearchSpec(""Integration Id"", oIntId);
	AccBusComp.ActivateField(""Account Status"");
	AccBusComp.ExecuteQuery();
		
	if(AccBusComp.FirstRecord())
	{
	   return AccBusComp.GetFieldValue(""Account Status"");
	}
      	else
           return null;
}
function GetLangIndCode (Type, DisplayVal)
{
	var CatBusObject = TheApplication().GetBusObject(""PickList Generic"");
	var SABusComp = CatBusObject.GetBusComp(""PickList Generic"");
		
	SABusComp.ClearToQuery();
      SABusComp.SetSearchSpec(""Type"", Type);
      SABusComp.SetSearchSpec(""Value"", DisplayVal);

	SABusComp.ActivateField(""Name"");
	
	SABusComp.ExecuteQuery();
		
	if(SABusComp.FirstRecord())
	{
	   return SABusComp.GetFieldValue(""Name"");
	}
      else
         return null;
}
function GetSAPOrderList_BAPIToSiebel (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   BAPI Export (Account - Get SAP Order List (BAPI Output))
    *     Export Parameters (output)
    *       Order Header (header)
    *         Order Item (item)
    *
    * Output Object's Integration Components:
    *   Account Object (Account - Get SAP Order List (MO))
    *     Account (oAccount)
    *       Get List for Account Output
    *       Get List for Account Header
    *         Get List for Account Item
    */

   /*
    * Set up EAI Lookup objects
    */

   /*
    * Set up EAI Input Message objects
    */
   var iGLOrderObj;   // BAPI Order instance
   var iGLExportComp; // BAPI Export Parameters
   var iGLHeaderComp; // BAPI Order Header
   var iGLItemComp;   // BAPI Order Item

   // Store inputId to be denormalized to all RFC table rows
   var inputId = inputMsg.GetArgument (""Siebel Account Id"");

   /*
    * Set up EAI Output Message objects
    */
   var oAccountObj;   // Siebel Order instance
   var oAccountComp;  // Account
   var oGLOutputComp; // Get List Output
   var oGLHeaderComp; // Get List Header
   var oGLItemComp;   // Get List Item

   /*
    * Find and create top-level integration object
    */
   iGLOrderObj = inputMsg.GetIntObj (""Account - Get SAP Order List (BAPI Output)"");
   oAccountObj = outputMsg.CreateIntObj (""Account - Get SAP Order List (MO)"");

   /*
    * Read int object instances from EAI message
    */
   while (iGLOrderObj.NextInstance ())
   {
      /*
       * Create ""Account"" object in output message
       */
      oAccountObj.NewInstance ();

      /*
       * Create ""Account"" component
       */
      oAccountComp = oAccountObj.CreatePrimaryIntComp (""Account"");
      oAccountComp.NewRecord ();
      // Set ""Id"" so Siebel Adapter can synchronize
      oAccountComp.SetFieldValue (""Id"", inputId);

      /*
       * Read ""Export Parameters"" component
       */
      iGLExportComp = iGLOrderObj.GetPrimaryIntComp (""Export Parameters"");
      oGLOutputComp = oAccountComp.CreateIntComp (""Get List for Account Output"", oAccountComp);
      if (iGLExportComp.NextRecord ())
      {
         /*
          * Write ""Get List for Account Output"" component
          */
         oGLOutputComp.NewRecord ();
         oGLOutputComp.SetCopySource  (iGLExportComp);
         oGLOutputComp.SetFieldValue  (""Input Id"",          inputId);
         oGLOutputComp.CopyFieldValue (""Return Code"",       ""RETURN-CODE"");
         oGLOutputComp.CopyFieldValue (""Return Log Msg No"", ""RETURN-LOG_MSG_NO"");
         oGLOutputComp.CopyFieldValue (""Return Log No"",     ""RETURN-LOG_NO"");
         oGLOutputComp.CopyFieldValue (""Return Message"",    ""RETURN-MESSAGE"");
         oGLOutputComp.CopyFieldValue (""Return Type"",       ""RETURN-TYPE"");

         /*
          * Read ""Order Header"" component to 
          */
         iGLHeaderComp = iGLExportComp.GetIntComp (""Order Header"");
         oGLHeaderComp = oAccountComp.CreateIntComp (""Get List for Account Header"", oAccountComp);
         while (iGLHeaderComp.NextRecord ())
         {
            oGLHeaderComp.NewRecord ();
            oGLHeaderComp.SetCopySource  (iGLHeaderComp);
            oGLHeaderComp.SetFieldValue  (""Input Id"",         inputId);
            oGLHeaderComp.CopyFieldValue (""Currency"",             ""CURRENCY"");
            oGLHeaderComp.CopyFieldValue (""Distribution Channel"", ""DISTR_CHAN"");
            oGLHeaderComp.CopyFieldValue (""Division"",             ""DIVISION"");
            oGLHeaderComp.CopyFieldValue (""Order Date"",           ""DOC_DATE"");
            oGLHeaderComp.CopyFieldValue (""Order Number"",         ""SD_DOC"");
            oGLHeaderComp.CopyFieldValue (""Order Status"",         ""DOC_STATUS"");
            oGLHeaderComp.CopyFieldValue (""Order Type"",           ""DOC_TYPE"");
            oGLHeaderComp.CopyFieldValue (""Purchase Order"",       ""PURCH_NO"");
            oGLHeaderComp.CopyFieldValue (""Sales Organization"",   ""SALES_ORG"");
            oGLHeaderComp.CopyFieldValue (""Sold To Customer"",     ""SOLD_TO"");

            /*
             * Read the ""Order Item"" component
             */
            // to ""Get List for Account Item"" component
            iGLItemComp = iGLHeaderComp.GetIntComp (""Order Item"");
            oGLItemComp = oGLHeaderComp.CreateIntComp (""Get List for Account Item"", oGLHeaderComp);
            while (iGLItemComp.NextRecord ())
            {
               oGLItemComp.NewRecord ();
               oGLItemComp.SetCopySource  (iGLItemComp);
               oGLItemComp.SetFieldValue  (""Input Id"",         inputId);
               oGLItemComp.CopyFieldValue (""Item Number"",          ""ITM_NUMBER"");
               oGLItemComp.CopyFieldValue (""Material Part Number"", ""MATERIAL"");
               oGLItemComp.CopyFieldValue (""Material Short Text"",  ""SHORT_TEXT"");
               oGLItemComp.CopyFieldValue (""Net Price"",            ""NET_PRICE"");
               oGLItemComp.CopyFieldValue (""Net Value"",            ""NET_VALUE"");
               oGLItemComp.CopyFieldValue (""Sales Unit"",           ""SALES_UNIT"");
            }
         }
      }
   }
}
function GetSAPOrderList_SiebelToBAPI (inputMsg, outputMsg)
{
   /* Input Objects' Integration Components
    *   Account Object (Account - Get SAP Order List (MO))
    *     Account (iAccount)
	 *       Get List for Account Header
    *
    * Output Object's Integration Components:
    *   BAPI Import (Account - Get SAP Order List (BAPI Input))
    *     Import Parameters (output)
    */

   /*
    * Set up EAI Lookup objects
    */

   /*
    * Set up EAI Input Message objects
    */
   var iAccountObj;    // Siebel Account instance
   var iAccountComp;   // Account
	var iHeaderComp;    // Account Header

   /*
    * Set up EAI Output Message objects
    */
   var oGLObj;         // BAPI instance
   var oGLImportComp;  // Import Parameters

   /*
    * Find and create top-level integration object
    */
   iAccountObj = inputMsg.GetIntObj (""Account - Get SAP Order List (MO)"");
   oGLObj = outputMsg.CreateIntObj (""Account - Get SAP Order List (BAPI Input)"");

   /*
    * Read int object instances from EAI message
    */
   while (iAccountObj.NextInstance ())
   {
      /*
       * Create ""Get List for Account"" object
       */
      oGLObj.NewInstance ();

      /*
       * Read ""Account"" component
       */
      iAccountComp = iAccountObj.GetPrimaryIntComp (""Account"");
      oGLImportComp = oGLObj.CreatePrimaryIntComp (""Import Parameters"");
      if (iAccountComp.NextRecord ())
      {
         /*
          * Write ""Import Parameters"" component
          */
         oGLImportComp.NewRecord ();
         oGLImportComp.SetCopySource  (iAccountComp);

			var intId = iAccountComp.GetFieldValue( ""Integration Id"" );

         oGLImportComp.SetFieldValue( ""CUSTOMER_NUMBER"",intId );

         oGLImportComp.SetFieldValue  (""MATERIAL"", """");
         oGLImportComp.SetFieldValue  (""PURCHASE_ORDER"", """"); // ""Peter 1"";
         oGLImportComp.SetFieldValue  (""DOCUMENT_DATE"", """");    // Empty string means ""00000000""
         oGLImportComp.SetFieldValue  (""DOCUMENT_DATE_TO"", """"); // Empty string means ""00000000""
         oGLImportComp.CopyFieldValue( ""SALES_ORGANIZATION"",""Back Office Sales Organization"" );
      }
   }
}
"
function GetSalesArea (SalesOrg, DistChannel, DivCode)
{
	var OrgBusObject = TheApplication().GetBusObject(""PickList Generic"");
	var SABusComp = OrgBusObject.GetBusComp(""SAP Organization"");
		
	SABusComp.ClearToQuery();
//    SABusComp.SetSearchSpec(""Back Office Sales Organization"", TheApplication().InvokeMethod (""LookupValue"", ""SAP_SALES_ORG"", SalesOrg));
//    SABusComp.SetSearchSpec(""Back Office Distribution Channel"", TheApplication().InvokeMethod (""LookupValue"", ""SAP_DISTRIBUTION_CHANNEL"", DistChannel));
//    SABusComp.SetSearchSpec(""Back Office Division"", TheApplication().InvokeMethod (""LookupValue"", ""SAP_DIVN_CD"", DivCode));
      SABusComp.SetSearchSpec(""Back Office Sales Organization"", SalesOrg);
      SABusComp.SetSearchSpec(""Back Office Distribution Channel"", DistChannel);
      SABusComp.SetSearchSpec(""Back Office Division"", DivCode);

	SABusComp.ActivateField(""Organization Id"");
	
	SABusComp.ExecuteQuery();
	
	
	if(SABusComp.FirstRecord())
	{
	   return SABusComp.GetFieldValue(""Organization Id"");
	}
      else
         return null;
}
function ImportSAPOrder_GetSAPOrderListToSiebelOrder (inputMsg, outputMsg)
{
   /*
    * Input Objects' Integration Components
    *   Import Get List for Account (Account - Import SAP Order (Get SAP Order List) (MO))
    *     Get List for Account Header
    *
    * Output Object's Integration Components:
    *   Import (Account - Import SAP Order (Siebel Order) (MO))
    *     Order (oOrder)
    */

   /*
    * Set up EAI Lookup maps
    */
   var orderTypeLM = EAIGetValueMap (""SAP Order Types"", ""Siebel Inbound"");

   /*
    * Set up EAI Input Message objects
    */
   var iGLOrderObj;  // Get List instance
   var iGLOrderComp; // Get List Order

   /*
    * Set up EAI Output Message objects
    */
   var oOrderObj;      // Siebel Order instance
   var oOrderComp;     // Order

   /*
    * Find and create top-level integration object
    */
   iGLOrderObj = inputMsg.GetIntObj (""Account - Import SAP Order (Get SAP Order List) (MO)"");
   oOrderObj = outputMsg.CreateIntObj (""Account - Import SAP Order (Siebel Order) (MO)"");

   /*
    * Read int object instances from EAI message
    */
   while (iGLOrderObj.NextInstance ())
   {
      /*
       * Create ""Order"" object
       */
      oOrderObj.NewInstance ();

      /*
       * Read ""Get List Order"" component
       */
      iGLOrderComp = iGLOrderObj.GetPrimaryIntComp (""Get List for Account Header"");
      oOrderComp = oOrderObj.CreatePrimaryIntComp (""Order"");

      while (iGLOrderComp.NextRecord ())
      {
         /*
          * Write ""Order"" component
          */
         oOrderComp.NewRecord ();
         oOrderComp.SetCopySource  (iGLOrderComp);

         oOrderComp.CopyFieldValue (""Order Number"",           ""Order Number"");
         oOrderComp.SetFieldValue  (""Order Type"",
                                    orderTypeLM.Translate (iGLOrderComp.GetFieldValue (""Order Type"")));
         oOrderComp.CopyFieldValue (""Order Date"",             ""Order Date"");
         oOrderComp.CopyFieldValue (""Account Integration Id"", ""Sold To Customer"");
         oOrderComp.CopyFieldValue (""Bill To Account Integration Id"", ""Sold To Customer"");
         oOrderComp.CopyFieldValue (""Ship To Account Integration Id"", ""Sold To Customer"");
         oOrderComp.CopyFieldValue (""Integration Id"",         ""Order Number"");
         oOrderComp.CopyFieldValue (""SAP Sales Area (MO)"",         ""SAP Sales Area (MO)"");
         // PLim. ??? Set Organization until we can figure out how to fix dup key index problem
         // was: oOrderComp.CopyFieldValue  (""Organization"",         ""Organization"");
			oOrderComp.CopyFieldValue (""Account Location"",         ""Account Location"");
      }
   }
}
"
function LocalizeMessage(Message)
{
	// Function to perform message language translation and parameterization.
	//
	// Created by Richard Exley - November 2000
	//
	// Message is a string of comma separate tokens and parameters.  
	// Tokens begin with <prefix>.  
	// The tokens represent language independent LOV codes of type 
	// <LOVType> which in turn map to translated 
	// parameterized message texts.  If the input message does not start with
	// ERR_MSG the message is returned untranslated.  A message can have 
	// up to nine parameters, %1,%2,...,%9.  An example from the Oracle Connector:
	//
	// Message:
	//   ORA_MSG_MISSING_CONTACT,A. K. Parker,ORA_MSG_INVALID_STATUS,Re-opened,A. K. Parker
	// Parameterized text:
	//   ORA_MSG_MISSING_CONTACT=""Contact for account %1 is missing.""
	//   ORA_MSG_INVALID_STATUS=""%1 is an invalid status for %2.""
	// Result:
	//   ""Contact for account A. K. Parker is missing. Re-opened is an invalid status for A. K. Parker.""
	//
	// Warning!!!  The comma is the delimiter so commas in the parameters will 
	// cause undesirable results and so steps should be taken to avoid them.
	//
	// Note: LOV Display values are limited to 30 characters and so in some cases
	// you may need to combine two tokens to get the behavior you require.

	var prefix = ""ERR_MSG"";
	var LOVType = ""CONNECTOR_MESSAGE"";
	
	if (Message.substring(0,7) != prefix)
		// Don't translate
		return (Message);
	
	var pieces = Message.split(',');
	var tokeni=0;
	var i=1;
	var oMessage="""";
	
	while (tokeni < pieces.length)
	{
		i=tokeni + 1;

		// Lookup error token in LOV table to get translated error text
	 	var LOVText = TheApplication().InvokeMethod (
	 		""LookupValue"", LOVType, pieces[tokeni]);
		
		if (LOVText == """")
		{
	  		// No token in LOV table so append untranslated token and parameters
	  		oMessage=oMessage+pieces[tokeni]+"" "";
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				oMessage=oMessage+pieces[i]+"" "";
				i++;
			}
		}
		else
		{
			// Read parameters
			var params = new Array("""","""","""","""","""","""","""","""","""");
			var paramsi = 0;
	  		while(i < pieces.length)
	  		{
	    		if (pieces[i].substring(0,7) == prefix) break;
				params[paramsi]=pieces[i];
				paramsi++;
				i++;
			}

			// Insert parameters into message and append to output

			// Split LOVText to find parameter place holders %1,%2,...
			var msgpieces=LOVText.split(""%"");
			var mpi;
			oMessage = oMessage + msgpieces[0];

			for (mpi = 1; mpi < msgpieces.length; mpi++)
			{
				paramsi = msgpieces[mpi].substring(0,1);
				if ((Clib.isdigit(paramsi)) && (paramsi > 0))
					// Parameter place holder so append parameter and rest of message piece
					oMessage = oMessage + params[paramsi-1] + msgpieces[mpi].substring(1);
				else
					// Not a parameter place holder so just append % and piece
					oMessage = oMessage + ""%"" + msgpieces[mpi];
			}
			oMessage = oMessage + "" "";
		}
		
		// Set token to next piece
		tokeni=i;
	}
	
	return (oMessage);
}
"
function ReceiveSAPCustomer_IDOCToSiebel_4x (inputMsg, outputMsg)
{
	/* Input Objects' Integration Components	Output Object's Integration Components:
	*   Customer IDOC (DEBMAS02 (DEBMAS) 4x IDOC)			Account Object (SAP Account - Receive SAP Customer (MO))
	*     E2KNA1M										Account (oAccount)
	*       E2KNB1M002 (?)								Contact
	*       E2KNVKM (?)									Business Address
	*       E2KNVVM (?)
	*/

	/* Set up EAI Lookup maps */
	var currencyLM = EAIGetValueMap (""SAP Currency Code"", ""Siebel Inbound"");
	var languageLM = EAIGetValueMap (""SAP Language 4x"", ""Siebel Inbound"");
	var countryLM  = EAIGetValueMap (""SAP Country"", ""Siebel Inbound"");
	var defaultOrgLM = EAIGetValueMap (""Default Org"", ""Siebel Inbound"");
	var undefinedOrgLM = EAIGetValueMap (""Undefined SAP Org"", ""Siebel Inbound"");
	var acctGroupLM = EAIGetValueMap (""SAP Customer Acct Group Code"", ""Siebel Inbound"");
	var regCodeLM  = EAIGetValueMap (""Back Office Region"", ""Siebel Inbound"");

	/* Set up EAI Input Message objects */
	var iIDOCObj;   // IDOC instance
	var iIDOCComp;  // top level IDOC segment
	var iKNA1MComp; // IDOC Customer Header
	var iComp;      // for reading child components

	/* Set up EAI Output Message objects */
	var oAccountObj;    // Siebel Account instance
	var oAccountComp;   // Account
	var oAddrComp;      // Address
	var oContactComp;   // Contact

	var oCustAcctGrp;	// Customer Account Group
	var oIntId;			// SAP Customer Number
	var oAcctSts;		// Account Status
	var regCode;        // SAP Country + Region Code	(12-90S337)
	var sapCode;        // SAP Region Code				(12-90S337)
	var osiebReg;       // Siebel Region 				(12-90S337)
	
	var AcctIntId       // Account Integration Id for Contact (12-C34KYN)
	
	/* Find and create top-level integration object */
	iIDOCObj = inputMsg.GetIntObj (""Account - Receive SAP Customer (4x IDOC Input)"");
	oAccountObj = outputMsg.CreateIntObj (""SAP 4x Account"");

	/* Misc set up */
//	var generateMasterRecord = 1;   // Set to '0' to generate sub-organization records only

	/* Read int object instances from EAI message */
	enumObj: while (iIDOCObj.NextInstance ())
	{
		/* Read virtual root component that IDOC RFC Adapter populates */
		iIDOCComp = iIDOCObj.GetPrimaryIntComp (""Idoc Segments"");
		if( !iIDOCComp.NextRecord() ) continue enumObj;   // TODO: Root component is missing - log an error???

		/* Read ""KNA1M"" component */
		iKNA1MComp = iIDOCComp.GetIntComp (""E2KNA1M004"");
		if( !iKNA1MComp.NextRecord() ) continue enumObj;

		/* Create ""Account"" object */
		oAccountObj.NewInstance ();

		/* Create ""Account"" component in output message */
		oAccountComp = oAccountObj.CreatePrimaryIntComp (""Account"");
		oAccountComp.NewRecord ();	
		oAccountComp.SetCopySource (iKNA1MComp);

		/* Set Integration Id and Name */
		oIntId = iKNA1MComp.GetFieldValue (""KUNNR"");
		
		oAccountComp.CopyFieldValue (""Integration Id"", ""KUNNR"");
		oAccountComp.CopyFieldValue (""Name"",           ""NAME1"");
		
		AcctIntId = oIntId ;  // Account Integration Id for Contact (12-C34KYN)
		
		oCustAcctGrp = acctGroupLM.Translate (iKNA1MComp.GetFieldValue (""KTOKD""));
		var AcctGrp = TheApplication().InvokeMethod (""LookupValue"", ""ACCOUNT_GROUP_TYPE"", oCustAcctGrp);
		oAccountComp.SetFieldValue (""Customer Account Group"", AcctGrp);

		/* Set location to ""<City> KUNNR1"" If <City> is null, put ""No City"" */
		var location = iKNA1MComp.GetFieldValue (""ORT01"");
		if (location == null) location = ""No City"";
		location += "" "" + iKNA1MComp.GetFieldValue (""KUNNR"");
		oAccountComp.SetFieldValue (""Location"",   location);

		/* Check if customer is Marked for Deletion */
		if (iKNA1MComp.GetFieldValue (""LOEVM"") == ""X"") 
		{
			oAccountComp.SetFieldValue (""Account Status"", ""Marked For Deletion"");
		}
		else
		{
			oAcctSts = GetAccountStatus (oIntId);
			if (oAcctSts == ""Marked For Deletion"")
				oAccountComp.SetFieldValue (""Account Status"", ""Active"");
			else
				oAccountComp.SetFieldValue (""Account Status"", oAcctSts);
		}

		/* Set telephone numbers */
		oAccountComp.CopyFieldValue (""Main Phone Number"", ""TELF1"");
		oAccountComp.CopyFieldValue (""Main Fax Number"",   ""TELFX"");

		/* Set other fields ; Defaults from buscomp:*/
		oAccountComp.CopyFieldValue (""Row Status"", ""Y"");

		/* Set fields for SAP 4x */
		oAccountComp.CopyFieldValue (""Primary Industry Id"", ""BRSCH"");

		// Tax Exempt Number (not created in bus comp for VAT_REGN_NUM yet)
		// oAccountComp.CopyFieldValue ("""", ""STCEG"");
		
		oAccountComp.SetFieldValue (""Language Code"",languageLM.Translate (iKNA1MComp.GetFieldValue (""SPRAS_ISO"")));

		/* Set Parent Account Id - P Lim. 3/15/00. In our system, the component has trailing 002 */
		// iComp = iKNA1MComp.GetIntComp (""E2KNB1M005"");
		// findKNRZE: while (iComp.NextRecord ())
		// {
			//oAccountComp.SetFieldValue (""Parent Account Integration Id"", iComp.GetFieldValue (""KNRZE""));
			/* only get first row */
			//break findKNRZE;
		// }
			
		var timenow = Timestamp();
		var SyncStat = TheApplication().InvokeMethod (""LookupValue"", ""EAI_ACCOUNT_SYNC_STATUS"", ""Sync from Back Office"");
	   	oAccountComp.SetFieldValue (""EAI Sync Status Code"",  SyncStat);
		oAccountComp.SetFieldValue (""EAI Sync Date"",timenow);
			
		// Set operation to ""    "" since we are using the ""Execute"" method.
		oAccountComp.SetFieldValue (""operation"", ""sync"");
		
		/* Write ""Address"" component */
		oAddrComp = oAccountComp.CreateIntComp (""Account_Business Address"", false);
		oAddrComp.NewRecord ();
		oAddrComp.SetCopySource (iKNA1MComp);
		oAddrComp.CopyFieldValue (""Integration Id"", ""KUNNR"");

		// Set Street address
		var stras = iKNA1MComp.GetFieldValue (""STRAS""); // Street address
		var pfach = iKNA1MComp.GetFieldValue (""PFACH""); // PO Box
		var street;

		if (stras == """" && pfach == """") 	street = ""None"";
		else if (stras != """" && pfach == """")street = stras;
		else if (stras != """" && pfach != """")street = stras + "" P.O. Box "" + pfach;
		else if (stras == """" && pfach != """")street = ""P.O. Box "" + pfach;

		oAddrComp.SetFieldValue  (""Street Address"", street);
		oAddrComp.CopyFieldValue (""City"",    ""ORT01"", ""None"", ""None"");
		oAddrComp.SetFieldValue  (""Country"", countryLM.Translate (iKNA1MComp.GetFieldValue (""LAND1"")));
		var x = 0; x += 1; //temporarily fix until operation synchronize works
		var AddrName = street + x + ', ' + iKNA1MComp.GetFieldValue (""ORT01"") + ', ' + iKNA1MComp.GetFieldValue (""REGIO"") ;
		oAddrComp.SetFieldValue (""Address Name"", AddrName); 

// nbc 11/10/01. CR#12-90S337 - The EAI value maps for State / Region is missing
		sapCode  = iKNA1MComp.GetFieldValue (""REGIO"");	//12-90S337
		regCode  = iKNA1MComp.GetFieldValue (""LAND1"");	//12-90S337
		regCode  = regCode + ""_"" + sapCode;				//12-90S337
		osiebReg = regCodeLM.Translate (regCode);		//12-90S337
		var sRegion = TheApplication().InvokeMethod (""LookupValue"", ""STATE_ABBREV"", osiebReg);	//12-90S337
		oAddrComp.SetFieldValue (""State"",    sRegion);	//12-90S337
				
		oAddrComp.CopyFieldValue (""Postal Code"", ""PSTLZ"");
		oAddrComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
		oAddrComp.SetFieldValue (""operation"", ""sync"");

		/* Read ""KNVKM"" component */
		iComp   = iKNA1MComp.GetIntComp (""E2KNVKM"");
		oContactComp = oAccountComp.CreateIntComp (""Contact"", false);
		while (iComp.NextRecord ())
		{
			/* Write ""Contact"" component */
			oContactComp.NewRecord ();
			oContactComp.SetCopySource  (iComp);
			oContactComp.CopyFieldValue (""Integration Id"", ""PARNR"");
			oContactComp.CopyFieldValue (""Employee Number"", ""PARNR"");
			
			// Set First Name
			oContactComp.CopyFieldValue (""First Name"", ""NAMEV"", ""No First Name"", ""No First Name"");
			// Set Last name
			oContactComp.CopyFieldValue (""Last Name"", ""NAME1"");

			// Set job title
			oContactComp.CopyFieldValue (""Job Title"",    ""TITEL_AP"");
			oContactComp.CopyFieldValue (""M/M"",          ""ANRED"");
			oContactComp.CopyFieldValue (""Work Phone #"", ""TELF1"");
			
			// Account Integration Id for Contact (12-C34KYN)
			oContactComp.SetFieldValue ( ""Account Integration Id"", AcctIntId );
			
			// flags
			oContactComp.CopyFieldValue (""Personal Contact"",      ""N"");
			oContactComp.CopyFieldValue (""Suppress All Mailings"", ""Y"");
			oContactComp.CopyFieldValue (""Row Status"", ""Y"");

			oContactComp.SetFieldValue (""operation"", ""sync"");
		} // while (iComp.NextRecord ())

		/* Process the Sales Area Accounts */

		var e2knvvm004 = iKNA1MComp.GetIntComp (""E2KNVVM004"");
		var oSalesAreaAccountComp = oAccountComp.CreateIntComp (""SAP 4x Account Sales Area"", false);

		
		enumOrg: while( e2knvvm004.NextRecord() )
		{
			/* Create ""Sales Area Account"" component in output message	*/
			oSalesAreaAccountComp.NewRecord ();

			oSalesAreaAccountComp.SetCopySource (e2knvvm004);

			var SalesOrg = e2knvvm004.GetFieldValue(""VKORG"");
			var DistChannel= e2knvvm004.GetFieldValue(""VTWEG"");
			var DivCode = e2knvvm004.GetFieldValue(""SPART"");


			var OrgID = GetSalesArea(SalesOrg, DistChannel, DivCode);

			if (OrgID != null) 	
			   oSalesAreaAccountComp.SetFieldValue(""Organization Id"", OrgID);
			else
			   EAIRaiseError(LocalizeMessage(""ERR_MSG_SALES_AREA_NOT_FOUND,""+SalesOrg+"",""+DistChannel+"",""+DivCode+""""));
		   
		   	oSalesAreaAccountComp.SetFieldValue(""Integration Id"", oIntId);

			/* Check if sales area is marked as deleted */
			if ((e2knvvm004.GetFieldValue (""LOEVM"") == ""X"") || (iKNA1MComp.GetFieldValue (""LOEVM"") == ""X""))
			{
				oSalesAreaAccountComp.SetFieldValue (""Account Status"", ""Marked For Deletion"");
//				continue enumOrg;
			}
			else
			{
				oSalesAreaAccountComp.SetFieldValue (""Account Status"", """");
			}
				
			/* Set language code */
			oSalesAreaAccountComp.SetFieldValue (""Language Code"", languageLM.Translate (iKNA1MComp.GetFieldValue (""SPRAS_ISO"")));

			oSalesAreaAccountComp.CopyFieldValue (""Freight Terms"", ""INCO1"");
			oSalesAreaAccountComp.CopyFieldValue (""Freight Terms Info"", ""INCO2"");
			oSalesAreaAccountComp.SetFieldValue (""Type"", TheApplication().InvokeMethod (""LookupValue"", ""ACCOUNT_TYPE"", e2knvvm004.GetFieldValue(""KDGRP"")));
				
			oSalesAreaAccountComp.CopyFieldValue (""Primary Fulfillment InvLoc ID"", ""VWERK"");
			oSalesAreaAccountComp.CopyFieldValue (""Payment Terms"", ""ZTERM"");
			oSalesAreaAccountComp.CopyFieldValue (""Price List Type"", ""PLTYP"");
			oSalesAreaAccountComp.SetFieldValue (""Shipping Conditions"", TheApplication().InvokeMethod (""LookupValue"", ""SHIPPING_CONDITION"", e2knvvm004.GetFieldValue(""VSBED"")));
			// oSalesAreaAccountComp.CopyFieldValue (""Pricing Group Code"", ""KONDA"");

			/* Set currency code */
			oSalesAreaAccountComp.SetFieldValue (""Currency Code"", currencyLM.Translate (e2knvvm004.GetFieldValue (""WAERS"")));

			/* Block Credit Flag */
			var e2knkkm = iKNA1MComp.GetIntComp(""E2KNKKM001"");
			var oCrdtCtlAreaComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Credit Control Area"", false);
			while (e2knkkm.NextRecord () )
			{
				oCrdtCtlAreaComp.NewRecord ();
				oCrdtCtlAreaComp.SetCopySource (e2knkkm);
				oCrdtCtlAreaComp.CopyFieldValue (""Credit Control Area Code"", ""KKBER"");
				if (e2knkkm.GetFieldValue(""CRBLB"") == ""X"") 
					oCrdtCtlAreaComp.SetFieldValue (""Block Credit Flag"", ""Y"");
				else
					oCrdtCtlAreaComp.SetFieldValue (""Block Credit Flag"", ""N"");
				
				oCrdtCtlAreaComp.SetFieldValue (""operation"", ""upsert"");
			}

			/* Primary Partner Relationships of Sales Area Accounts  */
			var e2knvpm = e2knvvm004.GetIntComp (""E2KNVPM002"");
			var oShipToPartnerComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Account Partner Function (Ship To)"", false);	
			var oPayerPartnerComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Account Partner Function (Payer)"", false);
			var oBillToPartnerComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Account Partner Function (Bill To)"", false);
			var oSoldToPartnerComp = oSalesAreaAccountComp.CreateIntComp (""SAP 4x Account Sales Area_Account Partner Function (Sold To)"", false);

			var FirstShipTo, FirstPayer, FirstBillTo;
			FirstShipTo = true;
			FirstPayer = true;
			FirstBillTo = true;
			enumPartner: while (e2knvpm.NextRecord () )
			{
				// Default Ship To Partner 
				if ( e2knvpm.GetFieldValue(""PARVW"") == ""WE"" )
				{
					oShipToPartnerComp.NewRecord ();
					oShipToPartnerComp.SetCopySource( e2knvpm );
					oShipToPartnerComp.CopyFieldValue (""Integration Id"", ""KUNN2"");
					var Int_ID = e2knvpm.GetFieldValue (""KUNN2"");
					if ( Int_ID == oIntId )
					{
						var AccName = iKNA1MComp.GetFieldValue (""NAME1"");
					}
					else
					{
						var AccName = GetAccountName (Int_ID);
					}	
					oShipToPartnerComp.SetFieldValue (""Ship To Partner Function"", AccName);
					if ( e2knvpm.GetFieldValue(""DEFPA"") == ""X"" ) oShipToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					if (FirstShipTo) {
						FirstShipTo = false;
						oShipToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					}
					oShipToPartnerComp.SetFieldValue (""operation"", ""sync"");
				
				}	
				// Default Payer Partner 
				if ( e2knvpm.GetFieldValue(""PARVW"") == ""RG"" )
				{
					oPayerPartnerComp.NewRecord ();
					oPayerPartnerComp.SetCopySource (e2knvpm);
					oPayerPartnerComp.CopyFieldValue (""Integration Id"", ""KUNN2"");
					var Int_ID = e2knvpm.GetFieldValue (""KUNN2"");
					if ( Int_ID == oIntId )
					{
						var AccName = iKNA1MComp.GetFieldValue (""NAME1"");
					}
					else
					{
						var AccName = GetAccountName (Int_ID);
					}	
					oPayerPartnerComp.SetFieldValue (""Payer Partner Function"", AccName);
					if ( e2knvpm.GetFieldValue(""DEFPA"") == ""X"" ) oPayerPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					if (FirstPayer) {
						FirstPayer = false;
						oPayerPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					}
					oPayerPartnerComp.SetFieldValue (""operation"", ""sync"");
					
				}
				// Default Bill To Partner 
				if ( e2knvpm.GetFieldValue(""PARVW"") == ""RE"" )
				{
					oBillToPartnerComp.NewRecord ();
					oBillToPartnerComp.SetCopySource (e2knvpm);
					oBillToPartnerComp.CopyFieldValue (""Integration Id"", ""KUNN2"");
					var Int_ID = e2knvpm.GetFieldValue (""KUNN2"");
					if ( Int_ID == oIntId )
					{
						var AccName = iKNA1MComp.GetFieldValue (""NAME1"");
					}
					else
					{
						var AccName = GetAccountName (Int_ID);
					}	
					oBillToPartnerComp.SetFieldValue (""Bill To Partner Function"", AccName);
					if ( e2knvpm.GetFieldValue(""DEFPA"") == ""X"" ) oBillToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					if (FirstBillTo) {
						FirstBillTo = false;
						oBillToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					}
					oBillToPartnerComp.SetFieldValue (""operation"", ""sync"");

				}	
				// Sold To Partner
				if ( e2knvpm.GetFieldValue(""PARVW"") == ""AG"" )
				{
					oSoldToPartnerComp.NewRecord ();
					oSoldToPartnerComp.SetCopySource (e2knvpm);
					oSoldToPartnerComp.CopyFieldValue (""Integration Id"", ""KUNN2"");
					var Int_ID = e2knvpm.GetFieldValue (""KUNN2"");
					if ( Int_ID == oIntId )
					{
						var AccName = iKNA1MComp.GetFieldValue (""NAME1"");
					}
					else
					{
						var AccName = GetAccountName (Int_ID);
					}	
					oSoldToPartnerComp.SetFieldValue (""Sold To Partner Function"", AccName);
					if ( e2knvpm.GetFieldValue(""DEFPA"") == ""X"" ) oSoldToPartnerComp.SetFieldValue (""IsPrimaryMVG"", ""Y"");
					oSoldToPartnerComp.SetFieldValue (""operation"", ""sync"");

				}	
			}

			/* Set Parent Account Id - P Lim. 3/15/00. In our system, the component has trailing 002 */
			// iComp = iKNA1MComp.GetIntComp (""E2KNB1M005"");
			// findKNRZE: while (iComp.NextRecord ())
			// {
				// oSalesAreaAccountComp.SetFieldValue (""Parent Account Integration Id"", iComp.GetFieldValue (""KNRZE""));
				/* only get first row */
				//break findKNRZE;
			//}
		  // Set operation to ""upsert"" since we are using the ""Execute"" method
		  oSalesAreaAccountComp.SetFieldValue (""operation"", ""sync"");
		} // ... while( e2knvvm004.Ne...
	} // ... while (iIDOCObj.NextInstance ())
} // ... ReceiveSAPCustomer_IDOCToSiebel"
function SendSiebelAccount_ToIDOC_4x (inputMsg, outputMsg)
{
	/* Input Objects' Integration Components							Output Object's Integration Components:
	*   Account Object (SAP 4x Account - Receive SAP Customer (MO))			Customer IDOC (DEBMAS02 (DEBMAS))
	*     Account (oAccount)													E2KNA1M
	*     Contact																E2KNB1M002 (?)
	*     Business Address														E2KNVKM (?)
	*																			E2KNVVM (?)  
	*/
	
	/* Set up EAI Lookup maps */
	var currencyLM = EAIGetValueMap (""SAP Currency Code"", ""Siebel Outbound"");
	var languageLM = EAIGetValueMap (""SAP Language 4x"", ""Siebel Outbound"");
	var countryLM  = EAIGetValueMap (""SAP Country"", ""Siebel Outbound"");
	var acctGrpLM  = EAIGetValueMap (""SAP Customer Acct Group Code"", ""Siebel Outbound"");
	var regCodeLM  = EAIGetValueMap (""Back Office Region"", ""Siebel Outbound"");
	
	/* Set up EAI Input Message objects */
	var iAccountObj;    // Siebel Account instance
	var iAccountComp;   // Account
	var iAddrComp;      // Address
	var iContactComp;   // Contact

	/* Set up EAI Output Message objects */
	var oIDOCObj;   // IDOC instance
	var oIDOCComp;  // top level IDOC segment
	var oKNA1MComp; // IDOC Customer Header
	var oComp;      // for reading child components

	/* Find and create top-level integration object	*/
	iAccountObj = inputMsg.GetIntObj (""SAP 4x Account"");
	oIDOCObj =  outputMsg.CreateIntObj (""DEBMAS02 (DEBMAS) 4x IDOC"");

	/* Misc set up	*/
	var generateMasterRecord = 1;   // Set to '0' to generate sub-organization records only
	var custAccntGrp;
    var currencyCode;
    var ctr = 0;
    var countryCode;
    var regCode;
    var sapCode;
	
	/* Read int object instances from EAI message */
	enumObj: while (iAccountObj.NextInstance ())
	{
		/* Read root Account component */
		iAccountComp = iAccountObj.GetPrimaryIntComp (""Account"");
		if( !iAccountComp.NextRecord() ) continue enumObj;
		
		/*
         * Return an error if Integration Id is not null
         */
			if (iAccountComp.GetFieldValue (""Integration Id"") == """")
		    {
				var errMsg = iAccountComp.GetFieldValue (""EAI Sync Error Text"");
				EAIRaiseError ( errMsg );
	       	}

		/* Create ""IDOC"" object	*/
		oIDOCObj.NewInstance ();

		/* Create ""IDOC"" component in output message */
		oIDOCComp = oIDOCObj.CreatePrimaryIntComp (""Idoc Segments"");
		oIDOCComp.NewRecord ();
		oKNA1MComp = oIDOCComp.CreateIntComp (""E2KNA1M004"",false);
		oKNA1MComp.NewRecord ();	
		oKNA1MComp.SetCopySource (iAccountComp);

		/* Set Integration Id, Name	and Account Group*/
		oKNA1MComp.CopyFieldValue (""KUNNR"", ""Integration Id"");
		oKNA1MComp.CopyFieldValue (""NAME1"", ""Name"");
		oKNA1MComp.SetFieldValue (""KTOKD"", acctGrpLM.Translate (iAccountComp.GetFieldValue(""Customer Account Group"")));

		/* Set location	*/
		// oKNA1MComp.CopyFieldValue (""ORT01"", ""Location"");
	
		/* Account Status */
		// oKNA1MComp.CopyFieldValue (""AUFSD"", ""Account Status"" );
		oKNA1MComp.SetFieldValue (""LOEVM"", """");
		if (iAccountComp.GetFieldValue (""Account Status"") == ""Marked For Deletion"")
			oKNA1MComp.SetFieldValue (""LOEVM"", ""X""); 

		/* Primary Industry */
		// oKNA1MComp.CopyFieldValue (""BRSCH"", ""Primary Industry Id"");

		/* Tax Exempt Number (not created in bus comp for VAT_REGN_NUM yet) */
		// oKNA1MComp.CopyFieldValue (""STCEG"", """" );

		/* Search Term */
		oKNA1MComp.CopyFieldValue (""SORTL"", ""Name"");			

		/* Transportation Zone */
		// oKNA1MComp.SetFieldValue (""LZONE"", ""0000000001"");			

		/* Set language code */
		oKNA1MComp.SetFieldValue (""SPRAS"", languageLM.Translate (iAccountComp.GetFieldValue (""Language Code"")));
		
		/* Set main Phone/FAX numbers */
		oKNA1MComp.CopyFieldValue (""TELF1"", ""Main Phone Number"" );
		oKNA1MComp.CopyFieldValue (""TELFX"", ""Main Fax Number"" );
		
	
		/* Read ""KNVKM"" component */
		iContactComp = iAccountComp.GetIntComp (""Contact"");
		oComp = oKNA1MComp.CreateIntComp (""E2KNVKM"", false);
		while (iContactComp.NextRecord ())
		{
			/* Write ""Contact"" component */

			oComp.NewRecord ();
			oComp.SetCopySource  (iContactComp);
			// oComp.CopyFieldValue (""PARNR"", ""Integration Id"");
			// oComp.CopyFieldValue (""PARNR"", ""Employee Number"");

			/* Set First Name */
			oComp.CopyFieldValue (""NAMEV"", ""First Name"");

			/* Set Last name */
			oComp.CopyFieldValue (""NAME1"", ""Last Name"");

			/* Set job title */
			oComp.CopyFieldValue (""TITEL_AP"", ""Job Title"");
			oComp.CopyFieldValue (""ANRED"", ""M/M"");
			oComp.CopyFieldValue ( ""TELF1"", ""Work Phone #"");
		} // while (iContactComp.NextRecord ())

		/* Write ""Address"" component */
		iAddrComp = iAccountComp.GetIntComp (""Account_Business Address"");
		while (iAddrComp.NextRecord () )
		{
			oKNA1MComp.SetCopySource(iAddrComp);
			if (iAddrComp.GetFieldValue (""IsPrimaryMVG"") == ""Y"")
			{

			// Set telephone numbers
			// oKNA1MComp.CopyFieldValue (""TELF1"", ""Phone Number"" );
			// oKNA1MComp.CopyFieldValue (""TELFX"", ""Fax Number"" );

			// Set Street address
			oKNA1MComp.CopyFieldValue  (""STRAS"", ""Street Address"");
			oKNA1MComp.CopyFieldValue (""ORT01"", ""City"");
			countryCode = countryLM.Translate (iAddrComp.GetFieldValue (""Country""));
			oKNA1MComp.SetFieldValue (""LAND1"", countryLM.Translate (iAddrComp.GetFieldValue (""Country"")));
			
// nbc 11/10/01. CR#12-90S337 - The EAI value maps for State / Region is missing 
			regCode = regCodeLM.Translate (iAddrComp.GetFieldValue (""State""));	//12-90S337
			sapCode = regCode.substring(3,5);									//12-90S337
			oKNA1MComp.SetFieldValue (""REGIO"", sapCode );						//12-90S337
	
			oKNA1MComp.CopyFieldValue (""PSTLZ"", ""Postal Code"" );
			
		// Set operation to ""upsert"" since we are using the ""Execute"" method.
			oKNA1MComp.SetFieldValue (""operation"", ""upsert"");
			}
		}
		

/* Process Sales Area Account */

		var iSalesAreaAccountComp = iAccountComp.GetIntComp (""SAP 4x Account Sales Area"");
		var e2knvvm004 = oKNA1MComp.CreateIntComp (""E2KNVVM004"", false);
			
		enumOrg: while (iSalesAreaAccountComp.NextRecord() )
		{
			/* Create ""Account"" component in output message	*/

			e2knvvm004.NewRecord ();
			e2knvvm004.SetCopySource ( iSalesAreaAccountComp );


			/* Set sales organization */

			e2knvvm004.CopyFieldValue( ""VKORG"", ""Back Office Sales Organization"");
			e2knvvm004.CopyFieldValue( ""VTWEG"", ""Back Office Distribution Channel"");
			e2knvvm004.CopyFieldValue( ""SPART"", ""Back Office Sales Area Division Code"");
			
			/* Account Status (for Sales Area Accounts) */
			// e2knvvm004.CopyFieldValue (""AUFSD"", ""Account Status"");
			if (iSalesAreaAccountComp.GetFieldValue (""Account Status"") == ""Marked For Deletion"")
				e2knvvm004.SetFieldValue( ""LOEVM"", ""X"");

			/* Freight Terms a.k.a Incoterms 1 */
			// e2knvvm004.CopyFieldValue (""INCO1"", ""Freight Terms"");

			/* Freight Terms Info a.k.a Incoterms 2 */
			// e2knvvm004.CopyFieldValue (""INCO2"", ""Freight Terms Info"");

			/* Primary Fullfilment Inventory Location Id  */
			// e2knvvm004.CopyFieldValue (""VWERK"", ""Primary Fulfillment InvLoc ID"");

			/* Payment Terms */
			// e2knvvm004.CopyFieldValue (""ZTERM"", ""Payment Terms"");

			/* Price List Type */
			// e2knvvm004.CopyFieldValue (""PLTYP"", ""Price List Type"");

			/* Account Type / Customer Group  */
               e2knvvm004.SetFieldValue( ""KDGRP"", iSalesAreaAccountComp.GetFieldValue(""Type"" ));
			
			/* Customer Stats Group */
			   e2knvvm004.SetFieldValue (""VERSG"", ""1"");

			// e2knvvm004.SetFieldValue (""PERFK"", ""US"");

			/* Sales District Code */
			// e2knvvm004.SetFieldValue (""BZIRK"", ""CENTRE"");			

			/* Pricing Group Code */
			// e2knvvm004.SetFieldValue (""KONDA"", ""02"");

			/* Pricing Procedure */
 			e2knvvm004.SetFieldValue (""KALKS"", ""1"");

			/* Shipping Conditions */
			var shpCond = iSalesAreaAccountComp.GetFieldValue(""Shipping Conditions"");
			if ( shpCond == """" )
				e2knvvm004.SetFieldValue (""VSBED"", ""02""); // Change Me
			else
				e2knvvm004.SetFieldValue (""VSBED"", iSalesAreaAccountComp.GetFieldValue(""Shipping Conditions""));

			/* Set currency code */
			var sCurCode = iSalesAreaAccountComp.GetFieldValue (""Currency Code"");
			if ( sCurCode == """")
				currencyCode = TheApplication().CurrencyCode();
			else
				currencyCode = iSalesAreaAccountComp.GetFieldValue (""Currency Code"");
				
			e2knvvm004.SetFieldValue (""WAERS"", currencyLM.Translate (currencyCode));

			/* Set Block Credit Flag */
//			var e2knkkm = oKNA1MComp.CreateIntComp(""E2KNKKM001"",false);
//			var iCrdtCtlAreaComp = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Credit Control Area"");
//			while (iCrdtCtlAreaComp.NextRecord () )
//			{
//				e2knkkm.NewRecord ();
//				e2knkkm.SetCopySource (iCrdtCtlAreaComp);
//				e2knkkm.CopyFieldValue (""KKBER"", ""Credit Control Area Code"");
//				e2knkkm.CopyFieldValue (""CRBLB"", ""Block Credit Flag"");
//				e2knkkm.SetFieldValue (""operation"", ""upsert"");
//			}

			/* Tax classification */
			// var iTaxCode = e2knvvm004.CreateIntComp (""E2KNVIM"",false);
			// iTaxCode.NewRecord ();
			// iTaxCode.SetFieldValue (""TAXKD"",""0"");
			
			/* Set Primary Partner Relationships of Sales Area Accounts */
			var acctGrp = acctGrpLM.Translate (iAccountComp.GetFieldValue(""Customer Account Group""));
			var intId   = iAccountComp.GetFieldValue (""Integration Id"");
			if ( acctGrp == ""0001"" || acctGrp == ""0002"" )
			{
			
			var e2knvpm = e2knvvm004.CreateIntComp (""E2KNVPM002"",false);

			var iShipToPartnerComp = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Account Partner Function (Ship To)"");	
			var iPayerPartnerComp  = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Account Partner Function (Payer)"");
			var iBillToPartnerComp = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Account Partner Function (Bill To)"");
			var iSoldToPartnerComp = iSalesAreaAccountComp.GetIntComp (""SAP 4x Account Sales Area_Account Partner Function (Sold To)"");

			var i = 0;
			enumShipToPartner: while (iShipToPartnerComp.NextRecord () )
			{
				// Default Ship To Partner 
				if ( iShipToPartnerComp.GetFieldValue(""Ship To Partner Function"") )
				{
					e2knvpm.NewRecord ();
					e2knvpm.SetCopySource( iShipToPartnerComp );
					e2knvpm.CopyFieldValue (""KUNN2"", ""Integration Id"" );
   					e2knvpm.SetFieldValue (""PARVW"", ""WE"");
					e2knvpm.SetFieldValue (""operation"", ""upsert"");
					i++;
				}	
			}
			if ( i == 0 )
			{
				e2knvpm.NewRecord ();
		   		e2knvpm.SetFieldValue (""KUNN2"", intId);
				e2knvpm.SetFieldValue (""PARVW"", ""WE"");
				e2knvpm.SetFieldValue (""operation"", ""upsert"");
			}

			if ( acctGrp == ""0002"" )  goto SoldToPartner;

			i = 0;
			enumPayerPartner: while (iPayerPartnerComp.NextRecord () )
			{
				// Default Payer Partner 
				if ( iPayerPartnerComp.GetFieldValue(""Payer Partner Function"") )
				{
					e2knvpm.NewRecord ();
					e2knvpm.SetCopySource (iPayerPartnerComp);
					e2knvpm.CopyFieldValue (""KUNN2"", ""Integration Id"" );
					e2knvpm.SetFieldValue (""PARVW"", ""RG"");
					e2knvpm.SetFieldValue (""operation"", ""upsert"");
					i++;
				}	
			}
			if ( i == 0 && acctGrp == ""0001"" )
			{
				e2knvpm.NewRecord ();
	   			e2knvpm.SetFieldValue (""KUNN2"", intId);
				e2knvpm.SetFieldValue (""PARVW"", ""RG"");
				e2knvpm.SetFieldValue (""operation"", ""upsert"");
			}
	
			i = 0;
			enumBillToPartner: while (iBillToPartnerComp.NextRecord () )
			{
				// Default Bill To Partner 
				if ( iBillToPartnerComp.GetFieldValue(""Bill To Partner Function"")  )
				{
					e2knvpm.NewRecord ();
					e2knvpm.SetCopySource (iBillToPartnerComp);
					e2knvpm.CopyFieldValue (""KUNN2"", ""Integration Id"" );
					e2knvpm.SetFieldValue (""PARVW"", ""RE"");
					e2knvpm.SetFieldValue (""operation"", ""upsert"");
					i++;
				}	
			}
			if ( i == 0 && acctGrp == ""0001"" )
			{
				e2knvpm.NewRecord ();
	   			e2knvpm.SetFieldValue (""KUNN2"", intId);
				e2knvpm.SetFieldValue (""PARVW"", ""RE"");
				e2knvpm.SetFieldValue (""operation"", ""upsert"");
			}

			SoldToPartner:
			i = 0;
			enumSoldToPartner: while (iSoldToPartnerComp.NextRecord () )
			{
				// Default Sold To Partner 
				if ( iSoldToPartnerComp.GetFieldValue(""Sold To Partner Function"")  )
				{
					if (( iSoldToPartnerComp.GetFieldValue(""Integration Id"") != intId )) 
					{	
						e2knvpm.NewRecord ();
						e2knvpm.SetCopySource (iSoldToPartnerComp);
						e2knvpm.CopyFieldValue (""KUNN2"", ""Integration Id"" );
						e2knvpm.SetFieldValue (""PARVW"", ""AG"");
						e2knvpm.SetFieldValue (""operation"", ""upsert"");
						i++;
					}
				}	
			}
			if ( i == 0 && acctGrp == ""0001"" )
			{
				e2knvpm.NewRecord ();
	   			e2knvpm.SetFieldValue (""KUNN2"", intId);
				e2knvpm.SetFieldValue (""PARVW"", ""AG"");
				e2knvpm.SetFieldValue (""operation"", ""upsert"");
			}

			/* Set operation to ""upsert"" since we are using the ""Execute"" method. */
			e2knvvm004.SetFieldValue (""operation"", ""upsert"");
			}

		} // enumOrg: while( iSalesAreaAccountComp.NextRecord() )
		/* Set Company Code & Parent Account Id	*/
		// var oCoCodeComp = oKNA1MComp.CreateIntComp (""E2KNB1M005"",false);
		// oCoCodeComp.NewRecord ();
		// oCoCodeComp.SetCopySource(iAccountComp);
		// oCoCodeComp.CopyFieldValue (""KNRZE"", ""Parent Account Integration Id"");
		// oCoCodeComp.SetFieldValue (""BUKRS"", ""0010"");
		// oCoCodeComp.SetFieldValue (""AKONT"", ""121000"");

	} // ... while (iAccountObj.NextInstance ())
} // ... ReceiveSAPCustomer_IDOCToSiebel"
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{
}
function Service_PreCanInvokeMethod (MethodName, &CanInvoke)
{
	return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	return EAIExecuteMap(MethodName, Inputs, Outputs);
}
"
function Timestamp()
{
	var d = Date.fromSystem(Clib.time());

	// Return date in the format MM/DD/YYYY HH:MM:SS
	return Clib.rsprintf(""%02d/%02d/%04d %02d:%02d:%02d"", 
	  d.getMonth()+1, d.getDate(), d.getFullYear(), 
	  d.getHours(), d.getMinutes(), d.getSeconds());
}
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{
	return (ContinueOperation);
}
function GetCRLF(inputs, outputs)
{
  var crlf;
  crlf = String.fromCharCode(0x000D,0x000A);
  outputs.SetProperty(""CRLF"",crlf);
}
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{
	return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   GetCRLF(Inputs,Outputs);    
   return (CancelOperation);	
}
function GetDevice(Inputs,Outputs)
{
	try
	{
		var sActivityId = Inputs.GetProperty(""ActivityId"");	
		var sOrderId = Inputs.GetProperty(""OrderId"");	
		var sApp = TheApplication();
		var sBO = sApp.GetBusObject(""MACD Performance Order"");
		var sBC = sBO.GetBusComp(""MACD Order Entry - Line Items"");
		var sActionBO = sApp.GetBusObject(""Action"");
		var sActionBC = sActionBO.GetBusComp(""Action"");
		var sRec="""", sProdName="""",sRec1="""";
		var sExp = ""[Order Header Id] = '"" + sOrderId + ""' AND (([Product Part Number] LIKE 'MNCAT6DEVICEADD*' OR [Product Part Number] LIKE 'TDDMAINOUEQUIP*' OR [Product Part Number] LIKE 'RETTDDMAINOU*') OR ([STC Installation Required Flag] = 'Y') OR ([STC Install Flag] = 'Y')) AND [Action Code] = 'Add'"";
		with(sBC)
		{
			ActivateField(""Order Header Id"");
			ActivateField(""Product Part Number"");
			ActivateField(""STC Installation Required Flag"");
			ActivateField(""STC Install Flag"");
			ActivateField(""Action Code"");
			ActivateField(""Product"");
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(sExp);			
			ExecuteQuery(ForwardOnly);
			sRec = FirstRecord();
			while(sRec)
			{
				if(sProdName!="""")
				{
					sProdName = sProdName+"",""+GetFieldValue(""Product"");
				}
				else
				{
					sProdName = GetFieldValue(""Product"");
				}
				sRec = NextRecord();
			}
		}
		with(sActionBC)
		{
			ActivateField(""STC Old CBR Reference Number"");
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchSpec(""Id"", sActivityId);			
			ExecuteQuery(ForwardOnly);
			sRec1 = FirstRecord();
			if(sRec1)
			{
				SetFieldValue(""STC Old CBR Reference Number"", sProdName);
				WriteRecord();
			}
		}
		Outputs.SetProperty(""ProdName"", sProdName);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		sApp = null;
		sBO = null;
		sBC = null;
		sActionBC = null;
		sActionBO = null;
	}
}
function ProductCheck(Inputs,Outputs)
{
		
	try
	{
		var sOrderId = Inputs.GetProperty(""OrderId"");		
		var sApp = TheApplication();
		var sBO = sApp.GetBusObject(""List Of Values"");
		var sBC = sBO.GetBusComp(""List Of Values"");
		var sItemBO = sApp.GetBusObject(""Order Entry (Sales)"");
		var sItemBC = sItemBO.GetBusComp(""Order Entry - Line Items"");
		var sRec, sProductName, sPartCode, sOptionalInstallFlag, sRec1, sProdName="""";		
		with(sItemBC)
		{
			ActivateField(""Order Header Id"");
			ActivateField(""STC Installation Required Flag"");
			ActivateField(""Action Code"");
			ActivateField(""Product"");
			ActivateField(""Part Number"");
			ActivateField(""STC Install Flag"");
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchSpec(""Order Header Id"", sOrderId);
			SetSearchSpec(""STC Installation Required Flag"", ""Y"");
			SetSearchSpec(""Action Code"", ""Add"");
			ExecuteQuery(ForwardOnly);
			sRec = FirstRecord();
			while(sRec)
			{
				sOptionalInstallFlag =  GetFieldValue(""STC Install Flag"");
				sProductName =  GetFieldValue(""Product"");
				sPartCode =  GetFieldValue(""Part Number"");
				with(sBC)
				{
					ActivateField(""Type"");
					ActivateField(""Name"");
					ActivateField(""Target High"");
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchSpec(""Type"", ""STC_ABS_OPTIONAL_CHECK"");
					SetSearchSpec(""Name"", sPartCode);
					ExecuteQuery(ForwardOnly);
					sRec1 = FirstRecord();
					if(sRec1 && sOptionalInstallFlag == """")
					{
						if(sProdName!="""")
						{
							sProdName = sProdName+"",""+sProductName;
						}
						else
						{
							sProdName = sProductName;
						}
					}
				}
				sRec = NextRecord();
			}				
		 }		
	
		Outputs.SetProperty(""ProductName"", sProdName);
	  }
	  catch(e)
	  {
	  	throw(e);
	  }
	  finally
	  {
	  	sApp = null;
		sBO = null;
		sBC = null;

	  }

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var sReturn = ContinueOperation;

   try
   {
   
		switch(MethodName)
		{		
			case ""ProductCheck"":
				ProductCheck(Inputs,Outputs);
				return (CancelOperation);
				break;
			case ""GetDevice"":
				GetDevice(Inputs,Outputs);
				return (CancelOperation);
				break;			
			
			default:
				return (CancelOperation)
				break;
		}		
	return (ContinueOperation);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
	
	}
}
function Freeze(post,days)
{
 try
 {
  var freeze = ""Success"";
  var appObj		=	TheApplication();
  var dayLimitTL	=	appObj.InvokeMethod(""LookupValue"", ""STC_DAYSLIMIT_POS"", ""DAYSLIMIT_Freeze_CSME_TL"");
  var dayLimitOM	=	appObj.InvokeMethod(""LookupValue"", ""STC_DAYSLIMIT_POS"", ""DAYSLIMIT_Freeze_CSME_OM"");
  var dayLimitAM	=	appObj.InvokeMethod(""LookupValue"", ""STC_DAYSLIMIT_POS"", ""DAYSLIMIT_Freeze_CSME_AM"");
  var dayLimitBNC	=	appObj.InvokeMethod(""LookupValue"", ""STC_DAYSLIMIT_POS"", ""DAYSLIMIT_Freeze_CSME_BNC"");
  
  switch(post)
  {
   case ""TeamLead"":
    if (ToNumber(days)>ToNumber(dayLimitTL))
     freeze = post+"" can only select No. of days upto 5"";
    break;
   case ""OperationMng"":
    if (ToNumber(days)>ToNumber(dayLimitOM))
     freeze = post+"" can only select No. of days upto 10"";
    break;
   case ""AccountMng"":
    if (ToNumber(days)>ToNumber(dayLimitAM))
     freeze = post+"" can only select No. of days upto 15"";
    break;
   case ""BillCollect"":
    if (ToNumber(days)>ToNumber(dayLimitBNC))
     freeze = post+"" can only select No. of days upto 60"";
    break;
     
  }
 }
 catch(e)
 {
  freeze = e.errText;
 }
 return(freeze);
}
function Freeze_VIP(post,days)
{
 try
 {
  var freeze_vip = ""Success"";
  
  var appObj		=	TheApplication();
  var dayLimitVIP	=	appObj.InvokeMethod(""LookupValue"", ""STC_DAYSLIMIT_POS"", ""DAYSLIMIT_Freeze_VIP_VIPPos"");
  var dayLimitBNC	=	appObj.InvokeMethod(""LookupValue"", ""STC_DAYSLIMIT_POS"", ""DAYSLIMIT_Freeze_VIP_BNC"");
  
  switch(post)
  {
   case ""VIPPos"":
    if (ToNumber(days)>ToNumber(dayLimitVIP))
     freeze_vip = ""You can only select No. of days upto 60"";
    break;
   case ""BillCollect"":
    if (ToNumber(days)>ToNumber(dayLimitBNC))
     freeze_vip = ""You can only select No. of days upto 15"";
    break;
     
  }
 }
 catch(e)
 {
  freeze_vip = e.errText;
 }
 return(freeze_vip);
}
function PTP(post,days)
{
 try
 {
  var appObj		=	TheApplication();
  var dayLimitTL	=	appObj.InvokeMethod(""LookupValue"", ""STC_DAYSLIMIT_POS"", ""DAYSLIMIT_PTP_CSME_TL"");
  var dayLimitOM	=	appObj.InvokeMethod(""LookupValue"", ""STC_DAYSLIMIT_POS"", ""DAYSLIMIT_PTP_CSME_OM"");
  var dayLimitAM	=	appObj.InvokeMethod(""LookupValue"", ""STC_DAYSLIMIT_POS"", ""DAYSLIMIT_PTP_CSME_AM"");
  var dayLimitBNC	=	appObj.InvokeMethod(""LookupValue"", ""STC_DAYSLIMIT_POS"", ""DAYSLIMIT_PTP_CSME_BNC"");
  var ptp = ""Success"";
  
  switch(post)
  {
   case ""TeamLead"":
    if (ToNumber(days)>ToNumber(dayLimitTL))
     ptp = post+"" can only select No. of days upto 3"";
    break;
   case ""OperationMng"":
    if (ToNumber(days)>ToNumber(dayLimitOM))
     ptp = post+"" can only select No. of days upto 5"";
    break;
   case ""AccountMng"":
    if (ToNumber(days)>ToNumber(dayLimitAM))
     ptp = post+"" can only select No. of days upto 7"";
    break;
   case ""BillCollect"":
    if (ToNumber(days)>ToNumber(dayLimitBNC))
     ptp = post+"" can only select No. of days upto 60"";
    break;
     
  }
 }
 catch(e)
 {
  ptp = e.errText;
 }
 return(ptp);
}
"//[Mark:31122020: SD:PTP Enhancement Business]

function PTPLogin_Val(CustomerType,CustSegment,checkPOS,checkSR,checkDays,UserLogin,Tier3,CAPValue,BillingAccountId)
	{

	try
	{
		var testString = ""Success"";
		var appObj = TheApplication();
		var boLOV = appObj.GetBusObject(""List Of Values"");
		var bcLOV = boLOV.GetBusComp(""List Of Values"");	 
		var SysDate = Clib.time();
		var ObjDate = Date.fromSystem(SysDate);
		var currMnth = ObjDate.getMonth();
		var currYear = ObjDate.getFullYear();
		var dtLowDate = """"; 
		var dtHighDate = """"; 
		var OutBal=0;
		var AllowedAttempts =0;
		var NumDays =0;
		var Netwrkallow = """";
		var strSRSpec = """";
		var strSRSpec1 = """";
		var dtLowDatesys;
		var dtHighDatesys;
		var boSR = appObj.GetBusObject(""Service Request"");
		var bcSR = boSR.GetBusComp(""Service Request"");
		var SRCnt =0;
		var PPDays = 0;
		var LovcapAmount="""";
		var SANStatus = """";
		var sDunningFlg = ""N"";
		if (currMnth == 11)
		{
		dtLowDate = new Date(currYear,currMnth,1,0,0,0);
		dtHighDate = new Date(currYear+1,currMnth+1,1,0,0,0);
		}
		else 
		{
		dtLowDate = new Date(currYear,currMnth,1,0,0,0);
		dtHighDate = new Date(currYear,currMnth+1,1,0,0,0);
		}
		var temp;
		Clib.strftime(dtLowDatesys,""%m/%d/%Y %H:%M:%S"", dtLowDate);
		Clib.strftime(dtHighDatesys,""%m/%d/%Y %H:%M:%S"",dtHighDate);
		var callBS = appObj.GetService(""STC PTP SR Validate BS"");
		var bsInput = appObj.NewPropertySet();
		var bsOutput = appObj.NewPropertySet();
		bsInput.SetProperty(""USER"", UserLogin);
		bsInput.SetProperty(""CUST_TYPE"", CustomerType);
		callBS.InvokeMethod(""CheckPosition"", bsInput, bsOutput);
		var CheckAllow = bsOutput.GetProperty(""PTPAvailable"");
		var PositionName = bsOutput.GetProperty(""PositionName"");
		if (CheckAllow == ""No"")
		{
		testString =""You don’t have Permission to Raise this type SR, Please check the Position Name"";
		//return (CancelOperation);
		}
				with(bcLOV)
                    	{
						var LovData = PositionName+CustSegment;							
						ActivateField(""High"");
						ActivateField(""Target High"");
						ActivateField(""Target Low"");
						ActivateField(""Low"");
						SetViewMode(AllView);
						ClearToQuery();
						//SetSearchSpec(""Type"",""STC_PTP_DATA"");
						//SetSearchSpec(""Name"",LovData);
					   //SetSearchSpec(""Active"",""Y"");
						strSRSpec1 = ""[Type] = 'STC_PTP_DATA' and [Name]='"" + LovData  + ""' and [Active] = 'Y'"";
						SetSearchExpr(strSRSpec1);
			            ExecuteQuery(ForwardOnly); 
			            if(FirstRecord())
						{
					                AllowedAttempts = GetFieldValue(""Target Low"");
					                NumDays = GetFieldValue(""Target High"");
									LovcapAmount = GetFieldValue(""High"");
								    Netwrkallow = GetFieldValue(""Low"");
									if(ToNumber(checkDays) > ToNumber(NumDays) ||(ToNumber(CAPValue) > ToNumber(LovcapAmount)))
		                			{
		                				testString =""You cannot raise the SR  with given number of Days/ Entered CAP amount exceed the Max limit value:""+LovcapAmount+"""";
		                			}// end of if(PPDays > NumDays)
					
									strSRSpec =  ""[INS Sub-Area] = 'PTP - Corporate and SME' and [Account Id]='"" + BillingAccountId  + ""' and [Opened Date]>= '"" + dtLowDatesys  + ""' and [Opened Date]< '"" + dtHighDatesys  + ""'"";										
				                   with(bcSR)
				                   {
				                   			SetViewMode(AllView);
							                ClearToQuery();
							                SetSearchExpr(strSRSpec);
							                ExecuteQuery(ForwardOnly); 
				                   			SRCnt = CountRecords();
											
				                   } 
								
							if(SRCnt >1)
							{
							if(ToNumber(AllowedAttempts)>=ToNumber(SRCnt))
							{
							}
							//	if(ToNumber(SRCnt)< ToNumber(AllowedAttempts))
							else
							{
								testString =""You cannot raise the SR as you have already raised an SR in the same month"";
							}// end of if(AllowedAttempts>SRCnt)
						 } // if SRCnt
					}
					else
					{
						testString =""Please check Configuration Data to Process"";
					}
				}// bcLOV		
	}		
catch(e)
	 {
	  testString = e.errText;
	 }
	 return(testString);
}
function PTP_VIP(post,days)
{
 try
 {
  var ptp_vip = ""Success"";
  var appObj		=	TheApplication();
  var dayLimitVIP	=	appObj.InvokeMethod(""LookupValue"", ""STC_DAYSLIMIT_POS"", ""DAYSLIMIT_PTP_VIP_VIPPos"");
  var dayLimitBNC	=	appObj.InvokeMethod(""LookupValue"", ""STC_DAYSLIMIT_POS"", ""DAYSLIMIT_PTP_VIP_BNC"");
  
  switch(post)
  {
   case ""VIPPos"":
    if (ToNumber(days)>ToNumber(dayLimitVIP))
     ptp_vip = ""You can only select No. of days upto 60"";
    break;
   case ""BillCollect"":
    if (ToNumber(days)>ToNumber(dayLimitBNC))
     ptp_vip = ""You can only select No. of days upto 7"";
    break;
     
  }
 }
 catch(e)
 {
  ptp_vip = e.errText;
 }
 return(ptp_vip);
}
function Service_InvokeMethod (MethodName, Inputs, Outputs)
{

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
 var checkReturn = ""Success"";
 switch(MethodName)
 {
  case ""Login_Validations"":
   var appObj = TheApplication();
   var checkVIP = Inputs.GetProperty(""checkVip"");
   var checkPOS = Inputs.GetProperty(""checkPos"");
   var checkSR = Inputs.GetProperty(""checkSr"");
   var checkDays = Inputs.GetProperty(""daysLimit"");
   var teamLeadPos  = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""STC test CORP"");
   var oppManagPos  = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""Viva Manager"");
   var accntManagr  = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""SIT Partner csr"");
   var billCollect  = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""Executive - Collections"");
   var VIPPos   = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""Enterprise Sales Department"");
   if(checkVIP== ""A""||checkVIP== ""B""||checkVIP== ""C""||checkVIP== ""D"")
   {
    checkVIP = ""Y"";
   }
   else
   {
    checkVIP = ""N"";
   }
   switch(checkPOS)
   {
    case teamLeadPos:
     checkPOS = ""TeamLead"";
     break;
    case oppManagPos:
     checkPOS = ""OperationMng"";
     break;
    case accntManagr:
     checkPOS = ""AccountMng"";
     break;
    case billCollect:
     checkPOS = ""BillCollect"";
     break;
    case VIPPos:
     checkPOS = ""VIPPos"";
     break;
    default:
     break;
   }
   
   checkReturn = login_val(checkVIP,checkPOS,checkSR,checkDays);
   Outputs.SetProperty(""showError"", checkReturn);
  
   return (CancelOperation);
       break;
  
  default:
   return (ContinueOperation);
   break;
 }
 return (CancelOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
 var checkReturn = ""Success"";
 switch(MethodName)
 {
  case ""Login_Validations"":
   var appObj = TheApplication();
   var checkVIP = Inputs.GetProperty(""checkVip"");
   var CustSegment = Inputs.GetProperty(""CustSegment"");   
   var CustomerType = Inputs.GetProperty(""CustomerType"");
   var BillingAccountId = Inputs.GetProperty(""BillingAccountId"");
   var checkPOS = Inputs.GetProperty(""checkPos"");
   var checkSR = Inputs.GetProperty(""checkSr"");
   var checkDays = Inputs.GetProperty(""daysLimit"");
   var CAPValue = Inputs.GetProperty(""CAPValue"");
   var Tier3 = Inputs.GetProperty(""Tier3"");
   var UserLogin = Inputs.GetProperty(""UserLogin"");
   var teamLeadPos  = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""STC test CORP"");
   var oppManagPos  = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""Viva Manager"");
   var accntManagr  = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""SIT Partner csr"");
   var billCollect  = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""Executive - Collections"");
   var VIPPos   = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""Enterprise Sales Department"");
   if(checkVIP== ""A""||checkVIP== ""B""||checkVIP== ""C""||checkVIP== ""D"")
   {
    checkVIP = ""Y"";
   }
   else
   {
    checkVIP = ""N"";
   }
   switch(checkPOS)
   {
    case teamLeadPos:
     checkPOS = ""TeamLead"";
     break;
    case oppManagPos:
     checkPOS = ""OperationMng"";
     break;
    case accntManagr:
     checkPOS = ""AccountMng"";
     break;
    case billCollect:
     checkPOS = ""BillCollect"";
     break;
    case VIPPos:
     checkPOS = ""VIPPos"";
     break;
    default:
     break;
   }
     // if(Tier3 ==""PTP - Corporate and SME"") //[Mark:31122020: SD:PTP Enhancement Business]
  // {
//	checkReturn = PTPLogin_Val(CustomerType,CustSegment,checkPOS,checkSR,checkDays,UserLogin,Tier3,CAPValue,BillingAccountId);
   //}
  // else
  // {
  // checkReturn = login_val(checkVIP,checkPOS,checkSR,checkDays);
   //}
    
	checkReturn = login_val(checkVIP,checkPOS,checkSR,checkDays);
   Outputs.SetProperty(""showError"", checkReturn);
  
   return (CancelOperation);
       break;
  
  default:
   return (ContinueOperation);
   break;
 }
 return (CancelOperation);
}
function login_val (chckVIP,chckPOS,chckSR,chckDays)
{
 try
 {
  var appObj = TheApplication();
  var retval = ""Success"";
  switch(chckSR)
  {
   case ""PTP"":
    if (chckVIP == ""Y"")
    {
     retval = PTP_VIP(chckPOS,chckDays);
    }
    else
    {
     retval = PTP(chckPOS,chckDays);
    }   
    break;
    
   case ""Freeze"":
    if (chckVIP == ""Y"")
    {
     retval = Freeze_VIP(chckPOS,chckDays);
    }
    else
    {
     retval = Freeze(chckPOS,chckDays);
    } 
    break;
   
   default:
    retval = ""Success"";
    break;
  } 
 } 
 catch(e)
 {
  retval = e.errText;
 }
 finally
 {
  //retval =  retval+"" ""+chckPOS;
 }
 return (retval);
}
function login_val (chckVIP,chckPOS,chckSR,chckDays)
//login_val (chckVIP,chckPOS,chckSR,chckDays)

{
 try
 {
  var appObj = TheApplication();
  var retval = ""Success"";
  switch(chckSR)
  {
   case ""PTP"":
    if (chckVIP == ""Y"")
    {
     retval = PTP_VIP(chckPOS,chckDays);
    }
    else
    {
     retval = PTP(chckPOS,chckDays);
    }   
    break;
    
   case ""Freeze"":
    if (chckVIP == ""Y"")
    {
     retval = Freeze_VIP(chckPOS,chckDays);
    }
    else
    {
     retval = Freeze(chckPOS,chckDays);
    } 
    break;
   
   default:
    retval = ""Success"";
    break;
  } 
 } 
 catch(e)
 {
  retval = e.errText;
 }
 finally
 {
  //retval =  retval+"" ""+chckPOS;
 }
 return (retval);
}
function GetAccountDet(accountStatus, billingType, custType, cust_segment,sLoyFlag)
{
 var retMsg=""Success"";
 try
 {
  if (accountStatus == ""Terminated"")
  {
   retMsg = ""This SR is not allowed for Terminated Billing Accounts. "";
  }
  else if(custType == ""Individual"")
  {
   if (sLoyFlag ==""N"")
   {
    if(cust_segment != ""A"" && cust_segment != ""B"" && cust_segment != ""C"" && cust_segment != ""D"")
    {
    	retMsg = ""This SR is not allowed for Consumer customers. "";
    }
   } 
  }
 }
 catch(e)
 {
  retMsg = e.errText;
 } 
 finally
 {
 }
 return (retMsg);
}
function GetBanDet (blType, aId, paId, sName, ctype)
{
 var BanDet=""Success"";
 try
 {
   if (blType == ""Corporate"")
   {
      BanDet = GetCorpDet(aId, sName);  
   }//end if corporate
   else if (blType == ""Department"")
   {
      BanDet = GetDeptDet(aId,paId,sName);
   }
   else if ((blType == """" || blType == null) && ctype == ""Individual"")
   {
     BanDet = GetVIPDet(aId,paId,sName);
   }
   else
   {
      BanDet = GetEmpDet(aId,paId,sName);
   }
 }
 catch(e)
 {
  BanDet = e.errText;
 }
 finally
 {}
 return (BanDet);
}
function GetCorpDet(acId, sr_Name)
{
 var srBO;
 var srBC;
 var CorpDet=""Success"";
 var testStat = ""Executed"";
 var testSR = sr_Name;
 var srchexp;
 var accountId = acId;
 var checkTrue;
 try
 {
  srBO=TheApplication().GetBusObject(""STC Billing Account"");
  srBC = srBO.GetBusComp(""Service Request"");
  with (srBC)
  {
   SetViewMode(AllView);
   ClearToQuery();
   ActivateField(""Account Id"");
   ActivateField(""Sub-Status"");
   ActivateField(""STC INS Sub-Area"");
   ActivateField(""Opened Date"");
   ActivateField(""NumberOfDays"");
   ActivateField(""DaysLimit"");
   ActivateField(""DaysLimitWhiteList"");
   srchexp = ""[Account Id] = '"" + accountId + ""' AND [STC INS Sub-Area] = '"" + testSR+ ""' AND [Sub-Status] = '"" + testStat + ""'"";
   SetSearchExpr(srchexp);
   SetSortSpec(""Opened Date(Descending)"");
   ExecuteQuery(ForwardOnly);
   //checkTrue = FirstRecord();
   if(FirstRecord())
   {
    checkTrue = ToString(GetFieldValue(""Opened Date""));//sr date
    var nod = """";
    if(testSR == TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""PTP - Corporate and SME"")) 
        nod = GetFieldValue(""NumberOfDays"");
    else if(testSR == TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""Freeze Dunning""))
      nod = GetFieldValue(""DaysLimit"");
      else if(testSR == TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""White List""))
         nod = GetFieldValue(""DaysLimitWhiteList"");
    var opnDt = checkTrue;
    var xyz = checkDateMonth(opnDt, nod);
    if (xyz!=""Success"")
    {
     CorpDet = xyz;
    }
   }
  }//end with 
 }//end try 
 catch(e)
 {
  CorpDet = e.errText;
 }
 finally
 {
 }
 return (CorpDet);
}
function GetDeptDet(bId,pdId,srd_name)
{
 var DeptDet=""Success"";
 var DeptId = bId;
 var dBO;
 var dBC;
 var CorpId = pdId;
 var srName = srd_name;
 var srStat = ""Executed"";
 var srchexp;
 try
 {
  
  dBO=TheApplication().GetBusObject(""STC Billing Account"");
  dBC = dBO.GetBusComp(""Service Request"");
  with (dBC)
  {
   SetViewMode(AllView);
   ClearToQuery();
   ActivateField(""Account Id"");
   ActivateField(""Sub-Status"");
   ActivateField(""STC INS Sub-Area"");
   ActivateField(""Opened Date"");
   ActivateField(""NumberOfDays"");
   ActivateField(""DaysLimit"");
   ActivateField(""DaysLimitWhiteList"");
   srchexp = ""[Account Id] = '"" + DeptId + ""' AND [STC INS Sub-Area] = '"" + srName+ ""' AND [Sub-Status] = '"" + srStat + ""'"";
   SetSearchExpr(srchexp);
   SetSortSpec(""Opened Date(Descending)"");
   ExecuteQuery(ForwardOnly);
   //checkTrue = FirstRecord();
   if(FirstRecord())
   {
    var dOdt = ToString(GetFieldValue(""Opened Date""));//sr date
    var dNod = """";
    if(srName == TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""PTP - Corporate and SME"")) 
       dNod = GetFieldValue(""NumberOfDays"");
    else if(srName == TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""Freeze Dunning""))
      dNod = GetFieldValue(""DaysLimit"");
      else if(srName == TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""White List""))
        dNod = GetFieldValue(""DaysLimitWhiteList"");
    var xyz = checkDateMonth(dOdt, dNod);
    if (xyz!=""Success"")
    {
     DeptDet = xyz;
    }
   }
  }//end with 
  if (DeptDet==""Success"")
  {
   DeptDet = GetCorpDet(CorpId,srd_name);
  }
 }
 catch(e)
 {
  DeptDet = e.errText; 
 }
 finally
 {
 }
 return (DeptDet);
}
function GetEmpDet(eId,peId,sre_name)
{
 var empId = eId;
 var EmpDet = ""Success"";
 var eBO;
 var eBC;
 var DeptId = peId;
 var esrName = sre_name;
 var esrStat = ""Executed"";
 var srchexp;
 var corporateId=""Error"";
 try
 {
  eBO = TheApplication().GetBusObject(""STC Billing Account"");
  eBC = eBO.GetBusComp(""Service Request"");
  with (eBC)
  {
   SetViewMode(AllView);
   ClearToQuery();
   ActivateField(""Account Id"");
   ActivateField(""Sub-Status"");
   ActivateField(""STC INS Sub-Area"");
   ActivateField(""Opened Date"");
   ActivateField(""NumberOfDays"");
   ActivateField(""DaysLimit"");
   ActivateField(""DaysLimitWhiteList"");
   srchexp = ""[Account Id] = '"" + empId + ""' AND [STC INS Sub-Area] = '"" + esrName + ""' AND [Sub-Status] = '"" + esrStat + ""'"";
   SetSearchExpr(srchexp);
   SetSortSpec(""Opened Date(Descending)"");
   ExecuteQuery(ForwardOnly);
   //checkTrue = FirstRecord();
   if(FirstRecord())
   {
    //checkTrue = ToString(GetFieldValue(""Opened Date""));//sr date
    var eOdt = ToString(GetFieldValue(""Opened Date""));//sr date
    var eNod = """";
    if(esrName == TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""PTP - Corporate and SME"")) 
       eNod = GetFieldValue(""NumberOfDays"");
    else if(esrName == TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""Freeze Dunning""))
      eNod = GetFieldValue(""DaysLimit"");
      else if(esrName == TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""White List""))
        eNod = GetFieldValue(""DaysLimitWhiteList"");     
    var xyz = checkDateMonth(eOdt, eNod);
    if (xyz!=""Success"")
    {
     EmpDet = xyz;
    }
   }
  }//end with 
  if (EmpDet==""Success"")
  {
    var tempBO = TheApplication().GetBusObject(""STC Billing Account"");
    var tempBC = tempBO.GetBusComp(""CUT Invoice Sub Accounts"");
    with(tempBC)
    {
      SetViewMode(AllView);
      ClearToQuery();
      ActivateField(""Parent Account Id""); 
      SetSearchSpec(""Id"",DeptId);
      ExecuteQuery(ForwardOnly);
      if(FirstRecord())
      {
        corporateId = GetFieldValue(""Parent Account Id"");
      }
    }
    
    EmpDet = GetDeptDet(DeptId,corporateId,sre_name);
  } 
 }
 catch(e)
 {
  EmpDet = e.errText;
 }
 finally
 { 
 }
 return (EmpDet);
}
function GetSanDet(ctype)
{
 try
 {
  var SanDet = ""Success"";
  if (ctype == ""Individual"")
  {
   SanDet = ""This SR can be raised on SME and Corporate Accounts only."";
  }//end if
 }
 catch (e)
 {
  SanDet = e.errText;
 }
 finally
 {
 }
 return (SanDet);
}
function GetVIPDet(eId,peId,sre_name)
{
 var empId = eId;
 var VipDet = ""Success"";
 var eBO;
 var eBC;
 var DeptId = peId;
 var esrName = sre_name;
 var esrStat = ""Executed"";
 var srchexp;
 //var corporateId=""Error"";
 try
 {
   eBO = TheApplication().GetBusObject(""STC Billing Account"");
   eBC = eBO.GetBusComp(""Service Request"");
   with (eBC)
   {
     SetViewMode(AllView);
     ClearToQuery();
     ActivateField(""Account Id"");
     ActivateField(""Sub-Status"");
     ActivateField(""STC INS Sub-Area"");
     ActivateField(""Opened Date"");
     ActivateField(""NumberOfDays"");
     ActivateField(""DaysLimit"");
     ActivateField(""DaysLimitWhiteList"");
     srchexp = ""[Account Id] = '"" + empId + ""' AND [STC INS Sub-Area] = '"" + esrName + ""' AND [Sub-Status] = '"" + esrStat + ""'"";
     SetSearchExpr(srchexp);
     SetSortSpec(""Opened Date(Descending)"");
     ExecuteQuery(ForwardOnly);
     //checkTrue = FirstRecord();
     if(FirstRecord())
     {
       //checkTrue = ToString(GetFieldValue(""Opened Date""));//sr date
       var eOdt = ToString(GetFieldValue(""Opened Date""));//sr date
       var eNod = """";
       if(esrName == TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""PTP - Corporate and SME"")) 
        eNod = GetFieldValue(""NumberOfDays"");
       else if(esrName == TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""Freeze Dunning""))
        eNod = GetFieldValue(""DaysLimit"");
       else if(esrName == TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""White List""))
        eNod = GetFieldValue(""DaysLimitWhiteList"");     
       var xyz = checkDateMonth(eOdt, eNod);
       if (xyz!=""Success"")
       {
         VipDet = xyz;
       }
   }
   }//end with 
 }
 catch(e)
 {
   VipDet = e.errText;
 }
 finally
 { 
 }
 return (VipDet);
}
function SR_Validation (Inputs, Outputs)
{
   try
   {
   /* var actBusComp=TheApplication().ActiveBusObject().GetBusComp(""Service Request""); 
    var srType = actBusComp.GetFieldValue(""STC INS Sub-Area"");
    var accountId = actBusComp.ParentBusComp().GetFieldValue(""Id"");
    var paraccountId =actBusComp.ParentBusComp().GetFieldValue(""Parent Account Id"");
    var sReqId = actBusComp.GetFieldValue(""Id"");   
    var parBC = actBusComp.ParentBusComp().Name();
    var custType = actBusComp.GetFieldValue(""STC New Customer Type"");
    var acntStat = actBusComp.ParentBusComp().GetFieldValue(""Account Status"");
    var billType = actBusComp.ParentBusComp().GetFieldValue(""STC Corporate Type"");*/
  
    var srType    = Inputs.GetProperty(""srName"");
    var accountId   = Inputs.GetProperty(""accID"");
    var paraccountId  = Inputs.GetProperty(""p_Aid"");
    var sReqId    = Inputs.GetProperty(""srID"");
    var parBC    = Inputs.GetProperty(""par_BC"");
    var custType   = Inputs.GetProperty(""cust_Type"");
    var acntStat  = Inputs.GetProperty(""acnt_Stat"");
    var billType  = Inputs.GetProperty(""bill_Type"");
    var cust_segment = Inputs.GetProperty(""cust_segment"");
    var flag    = ""Success"";
    var usrPost   = TheApplication().PositionName();
    var sType   = """";
    var ErrDet   = """";
    var VIPPos   = TheApplication().InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""Enterprise Sales Department"");
    var freezeSR  = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""Freeze Dunning"");
    var UnfreezeSR  = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""Unfreeze Dunning"");
    var srPTP   = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""PTP - Corporate and SME"");
    var srPTPRemove  = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""PTP Remove - Corporate and SME"");
    var srWhiteList  = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""White List"");
    var srWhiteLRemove = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""White List Remove"");  
    var csrPosition  = TheApplication().InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""STC Front End CSR"");
    var accntManPos  = TheApplication().InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""SIT Partner csr"");
    var bncPos   = TheApplication().InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""Executive - Collections"");
    
    switch(srType)
   {
      case srPTP:
         var sLoyFlag = getLoyaltyClassSANCount(accountId);
         flag = GetAccountDet(acntStat,billType,custType,cust_segment,sLoyFlag);
         if (flag ==""Success"")
         {
          fn_FreezeUnfreezeSMECorpVIPAuthVal(Inputs, Outputs);
         }
       break;
      case srPTPRemove:
         flag = GetAccountDet(acntStat,billType,custType,cust_segment);
         if (flag == ""Success"")
         {
           if(cust_segment == ""A"" || cust_segment == ""B"" || cust_segment == ""C"" || cust_segment == ""D"")
           {
              if(usrPost != VIPPos && usrPost != bncPos)
              {
               TheApplication().RaiseErrorText(""You are not authorized to raise this SR"");
              }
           }
           else
           {
             if(usrPost != csrPosition && usrPost != accntManPos && usrPost != bncPos)
             {
              flag = ""You are not authorized to raise this SR"";
             }
         }
         sType = srPTP;
         ErrDet = GetBanDet(billType, accountId, paraccountId, sType, custType);
         if (ErrDet!=""Success"")
          {
               flag = ErrDet;
          }
       }
       break;
      case freezeSR:
        flag = GetAccountDet(acntStat,billType,custType,cust_segment);
        if (flag ==""Success"")
        {
         fn_FreezeUnfreezeSMECorpVIPAuthVal(Inputs, Outputs);
        }
       break;
      case UnfreezeSR: 
         flag = GetAccountDet(acntStat,billType,custType,cust_segment);
         if (flag == ""Success"")
         {
           if(usrPost != csrPosition && usrPost != accntManPos && usrPost != bncPos)
           {
            flag = ""You are not authorized to raise this SR"";
           }
           else
           {
             if(cust_segment == ""A"" || cust_segment == ""B"" || cust_segment == ""C"" || cust_segment == ""D"")
           {
              if(usrPost != VIPPos && usrPost != bncPos)
              {
               TheApplication().RaiseErrorText(""You are not authorized to raise this SR"");
              }
            }
         }
           sType = freezeSR;
           ErrDet = GetBanDet(billType, accountId, paraccountId, sType, custType);
           if (ErrDet!=""Success"")
           {
            flag = ErrDet;
           }     
       }
       break; 
      case srWhiteList:
        flag = GetAccountDet(acntStat,billType,custType,cust_segment);
        if (flag == ""Success"")
        {
          if(usrPost != bncPos)
          {
           flag = ""You are not authorized to raise this SR"";
          }
        }
       break;
      case srWhiteLRemove: 
         flag = GetAccountDet(acntStat,billType,custType,cust_segment);
         if(flag == ""Success"")
         {
           if(usrPost != csrPosition && usrPost != accntManPos && usrPost != bncPos)
           {
              flag = ""You are not authorized to raise this SR"";
           }
           else
           {
            if(cust_segment == ""A"" || cust_segment == ""B"" || cust_segment == ""C"" || cust_segment == ""D"")
          {
              if(usrPost != bncPos)
              {
                TheApplication().RaiseErrorText(""You are not authorized to raise this SR"");
              }
           }  
            }
          sType = srWhiteList;
            ErrDet = GetBanDet(billType, accountId, paraccountId, sType, custType);
           if(ErrDet!=""Success"")
           {
             flag = ErrDet;
           }
         }
       break; 
      default :
         return (ContinueOperation);
       break;
   }
   }
   catch(e)
   {
    flag = e.errText;
    //Outputs.SetProperty(""display_msg"", flag);
   }
   finally
   {
    Outputs.SetProperty(""display_msg"", flag );
   }
 return (CancelOperation);
}
function SR_Validation (Inputs, Outputs)
{
   try
   {
   /* var actBusComp=TheApplication().ActiveBusObject().GetBusComp(""Service Request""); 
    var srType = actBusComp.GetFieldValue(""STC INS Sub-Area"");
    var accountId = actBusComp.ParentBusComp().GetFieldValue(""Id"");
    var paraccountId =actBusComp.ParentBusComp().GetFieldValue(""Parent Account Id"");
    var sReqId = actBusComp.GetFieldValue(""Id"");   
    var parBC = actBusComp.ParentBusComp().Name();
    var custType = actBusComp.GetFieldValue(""STC New Customer Type"");
    var acntStat = actBusComp.ParentBusComp().GetFieldValue(""Account Status"");
    var billType = actBusComp.ParentBusComp().GetFieldValue(""STC Corporate Type"");*/
  
    var srType    = Inputs.GetProperty(""srName"");
    var accountId   = Inputs.GetProperty(""accID"");
    var paraccountId  = Inputs.GetProperty(""p_Aid"");
    var sReqId    = Inputs.GetProperty(""srID"");
    var parBC    = Inputs.GetProperty(""par_BC"");
    var custType   = Inputs.GetProperty(""cust_Type"");
    var acntStat  = Inputs.GetProperty(""acnt_Stat"");
    var billType  = Inputs.GetProperty(""bill_Type"");
    var cust_segment = Inputs.GetProperty(""cust_segment"");
    var flag    = ""Success"";
    var usrPost   = TheApplication().PositionName();
    var sType   = """";
    var ErrDet   = """";
    var VIPPos   = TheApplication().InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""Enterprise Sales Department"");
    var freezeSR  = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""Freeze Dunning"");
    var UnfreezeSR  = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""Unfreeze Dunning"");
    var srPTP   = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""PTP - Corporate and SME"");
    var srPTPRemove  = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""PTP Remove - Corporate and SME"");
    var srWhiteList  = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""White List"");
    var srWhiteLRemove = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""White List Remove"");  
    var csrPosition  = TheApplication().InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""STC Front End CSR"");
    var accntManPos  = TheApplication().InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""SIT Partner csr"");
    var bncPos   = TheApplication().InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""Executive - Collections"");
    
    switch(srType)
   {
      case srPTP:
         var sLoyFlag = getLoyaltyClassSANCount(accountId);
         flag = GetAccountDet(acntStat,billType,custType,cust_segment,sLoyFlag);
         if (flag ==""Success"")
         {
          fn_FreezeUnfreezeSMECorpVIPAuthVal(Inputs, Outputs);
         }
       break;
      case srPTPRemove:
         flag = GetAccountDet(acntStat,billType,custType,cust_segment);
         if (flag == ""Success"")
         {
           if(cust_segment == ""A"" || cust_segment == ""B"" || cust_segment == ""C"" || cust_segment == ""D"")
           {
              if(usrPost != VIPPos && usrPost != bncPos)
              {
              TheApplication().RaiseErrorText(""You are not authorized to raise this SR"");
              }
           }
           else
           {
             if(usrPost != csrPosition && usrPost != accntManPos && usrPost != bncPos)
             {
              flag = ""You are not authorized to raise this SR"";
             }
         }
         sType = srPTP;
         ErrDet = GetBanDet(billType, accountId, paraccountId, sType, custType);
         if (ErrDet!=""Success"")
          {
               flag = ErrDet;
          }
       }
       break;
      case freezeSR:
        flag = GetAccountDet(acntStat,billType,custType,cust_segment);
        if (flag ==""Success"")
        {
         fn_FreezeUnfreezeSMECorpVIPAuthVal(Inputs, Outputs);
        }
       break;
      case UnfreezeSR: 
         flag = GetAccountDet(acntStat,billType,custType,cust_segment);
         if (flag == ""Success"")
         {
           if(usrPost != csrPosition && usrPost != accntManPos && usrPost != bncPos)
           {
            flag = ""You are not authorized to raise this SR"";
           }
           else
           {
             if(cust_segment == ""A"" || cust_segment == ""B"" || cust_segment == ""C"" || cust_segment == ""D"")
           {
              if(usrPost != VIPPos && usrPost != bncPos)
              {
               TheApplication().RaiseErrorText(""You are not authorized to raise this SR"");
              }
            }
         }
           sType = freezeSR;
           ErrDet = GetBanDet(billType, accountId, paraccountId, sType, custType);
           if (ErrDet!=""Success"")
           {
            flag = ErrDet;
           }     
       }
       break; 
      case srWhiteList:
        flag = GetAccountDet(acntStat,billType,custType,cust_segment);
        if (flag == ""Success"")
        {
          if(usrPost != bncPos)
          {
          flag = ""You are not authorized to raise this SR"";
          }
        }

       break;
      case srWhiteLRemove: 
         flag = GetAccountDet(acntStat,billType,custType,cust_segment);
         if(flag == ""Success"")
         {
           if(usrPost != csrPosition && usrPost != accntManPos && usrPost != bncPos)
           {
             flag = ""You are not authorized to raise this SR"";
           }
           else
           {
            if(cust_segment == ""A"" || cust_segment == ""B"" || cust_segment == ""C"" || cust_segment == ""D"")
          {
              if(usrPost != bncPos)
              {
                TheApplication().RaiseErrorText(""You are not authorized to raise this SR"");
              }
           }  
            }
          sType = srWhiteList;
            ErrDet = GetBanDet(billType, accountId, paraccountId, sType, custType);
           if(ErrDet!=""Success"")
           {
             flag = ErrDet;
           }
         }
       break; 
      default :
         return (ContinueOperation);
       break;
   }
   }
   catch(e)
   {
    flag = e.errText;
    //Outputs.SetProperty(""display_msg"", flag);
   }
   finally
   {
    Outputs.SetProperty(""display_msg"", flag );
   }
 return (CancelOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
// var retMsg;
 switch(MethodName)
 {
  case ""SR Validations"":
   //  TheApplication().RaiseErrorText(""My BS is called"");
     SR_Validation(Inputs, Outputs);
     return (CancelOperation);
     break;
   
  default:
     return (ContinueOperation);
     break;
 }

 return (CancelOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
// var retMsg;
 switch(MethodName)
 {
  case ""SR Validations"":
   //  TheApplication().RaiseErrorText(""My BS is called"");
    SR_Validation(Inputs, Outputs);
     return (CancelOperation);
     break;
   
  default:
     return (ContinueOperation);
     break;
 }

 return (CancelOperation);
}
function checkDateMonth(Odt,Ldt)
{
 try
 {
 var dateObj = new Date();
 var toDay = ToString(dateObj.getDate());//sysdate
// var checkFld = ToString(GetFieldValue(""Opened Date""));//sr date
 var checkFld = Odt;//sr date
 var checkDate = ToNumber(checkFld.substring(3,5)) + ToNumber(Ldt);
 var checkMonth = ToNumber(checkFld.substring(0,2));
 var checkYear;
 var checkRet=""Success"";
 if (checkMonth == ""2"")
  {
   //month of Feb
   checkYear = ToNumber(checkFld.substring(6,10));
   var checkRem = ToNumber(checkYear)%4;
   if (checkRem)
   {
   // checkDate = ToNumber(checkDate) - 28;
    if (checkDate<toDay)
    {
     //TheApplication().RaiseErrorText(""This SR was allowed to raise before ""+checkDate+""th day of this month."");
     checkRet = ""This should not be raised after ""+checkDate+""th day of this month."";
     //return(CancelOperation);
    }
   }
   else
   {
    //checkDate = ToNumber(checkDate) - 29;
    checkRet = ""This should not be raised after ""+checkDate+""th day of this month."";
    
    /*TheApplication().RaiseErrorText(""This SR was allowed to raise before ""+checkDate+""th day of this month."");
    return(CancelOperation);*/
   } 
  }
 else if (checkMonth == ""4"" || checkMonth == ""6"" || checkMonth == ""9"" || checkMonth == ""11"")
  {
   //months of 30 days
   if (ToNumber(checkDate)>30)
   {
   // checkDate = ToNumber(checkDate) - 30;
    if (checkDate<toDay)
    {
     checkRet = ""This should not be raised after ""+checkDate+""th day of this month."";
     /*TheApplication().RaiseErrorText(""This SR was allowed to raise before ""+ checkDate +""th day of this month."");
     return(CancelOperation);*/
    }
   }
   else
   {
    if (checkDate<toDay)
    {
     checkRet = ""This should not be raised after ""+checkDate+""th day of this month."";
     /*TheApplication().RaiseErrorText(""This SR was allowed to raise before ""+ checkDate +""th day of this month."");
     return(CancelOperation);*/
    }
   }
  }
 else
  {
   //months of 31 days
   if (ToNumber(checkDate)>31)
   {
    //checkDate = ToNumber(checkDate) - 31;
    if (checkDate<toDay)
    {
     checkRet = ""This should not be raised after ""+checkDate+""th day of this month."";
     /*TheApplication().RaiseErrorText(""This SR was allowed to raise before ""+checkDate+""th day of this month."");
     return(CancelOperation);*/
    }
   }
   else
   {
    if (checkDate<toDay)
    {

     checkRet = ""This should not be raised after ""+checkDate+""th day of this month."";
     /*TheApplication().RaiseErrorText(""This SR was allowed to raise before ""+checkDate+""th day of this month."");
     return(CancelOperation);*/
    }
   }
   
  }
 }//end try
 catch(e)
 {
  checkRet = e.errText;
  //throw (e);
 }
 finally
 {
 }
 return (checkRet);
}
function fn_FreezeUnfreezeSMECorpVIPAuthVal(Inputs, Outputs)
{
 
  var flag     = """";
  var appObj     = TheApplication();
  var sPosition   = TheApplication().PositionName();
  var banBC     = appObj.GetBusObject(""STC Billing Account"").GetBusComp(""CUT Invoice Sub Accounts"");
  var srCount     = """";
  var srCountVIPBnc = """";
  var teamLeadPos   = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""STC test CORP"");
  var oppManagPos   = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""Viva Manager"");
  var accntManagr   = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""SIT Partner csr"");
  var billCollect   = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""Executive - Collections"");
  var VIPPos     = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""Enterprise Sales Department"");
  var freezeSR    = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""Freeze Dunning"");
  var UnfreezeSR   = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""Unfreeze Dunning"");
  var srPTP     = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""PTP - Corporate and SME"");
  var srPTPRemove   = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""PTP Remove - Corporate and SME"");
  var srWhiteList   = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""White List"");
  var srWhiteRemove  = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""White List Remove"");
 
  try
  {
    var billType   = Inputs.GetProperty(""bill_Type"");
    var AccntId      = Inputs.GetProperty(""accID"");
    var srType     = Inputs.GetProperty(""srName"");
    var custType    = Inputs.GetProperty(""cust_Type"");
    var cust_segment  = Inputs.GetProperty(""cust_segment"");
   // Get the number of SRs raised in BAN
    banBC.ActivateField(""STC Number of Dunning Freeze SR AccntMan"");
    banBC.ActivateField(""STC Number of Dunning Freeze SR OppMan"");
    banBC.ActivateField(""STC Number of Dunning Freeze SR TL"");
    banBC.ActivateField(""STC Number of PTP SR AccntMan"");
    banBC.ActivateField(""STC Number of PTP SR OppMan"");
    banBC.ActivateField(""STC Number of PTP SR TL"");
    banBC.ActivateField(""STC Number of PTP SR VIP BnC"");
    banBC.ActivateField(""STC Number of Freeze SR VIP BnC"");
    banBC.ActivateField(""STC Number of WhiteList SR VIP BnC"");
    banBC.ClearToQuery();
    banBC.SetViewMode(AllView);
    banBC.SetSearchSpec(""Id"", AccntId);
    banBC.ExecuteQuery(ForwardOnly);
    
    if(banBC.FirstRecord())
    {
        
        if(srType  == freezeSR || srType  == UnfreezeSR)
        { 
            if(sPosition == accntManagr)
             srCount = banBC.GetFieldValue(""STC Number of Dunning Freeze SR AccntMan"");
            else if(sPosition == oppManagPos)
             srCount = banBC.GetFieldValue(""STC Number of Dunning Freeze SR OppMan"");
            else if(sPosition == teamLeadPos)
             srCount = banBC.GetFieldValue(""STC Number of Dunning Freeze SR TL"");
            else if(sPosition == billCollect)
             srCountVIPBnc = banBC.GetFieldValue(""STC Number of Freeze SR VIP BnC"");
        }
        else if(srType  == srPTP || srType  == srPTPRemove) 
        {
           if(sPosition == accntManagr)
             srCount = banBC.GetFieldValue(""STC Number of PTP SR AccntMan"");
            else if(sPosition == oppManagPos)
             srCount = banBC.GetFieldValue(""STC Number of PTP SR OppMan"");
            else if(sPosition == teamLeadPos)
             srCount = banBC.GetFieldValue(""STC Number of PTP SR TL"");
            else if(sPosition == billCollect)
             srCountVIPBnc = banBC.GetFieldValue(""STC Number of Freeze SR VIP BnC"");
        }
        else if(srType  == srWhiteList || srType  == srWhiteRemove)
        {
          if(sPosition == billCollect)
             srCountVIPBnc = banBC.GetFieldValue(""STC Number of Freeze SR VIP BnC"");
        }
    }
    switch(sPosition)
    {
      case teamLeadPos:
         if(cust_segment != ""A"" && cust_segment != ""B"" && cust_segment != ""C"" && cust_segment != ""D"")
         {
           if(srType != srWhiteList && srType != srWhiteRemove)
           {
             if(""Individual"" != billType) // validation for Raising SR on BAN level for all below position
             {
               appObj.RaiseErrorText(""You are not authorized to raise SR on non Employee BAN"");
             }
             if(srCount >= ToNumber(appObj.InvokeMethod(""LookupValue"", ""STC_AUTO_DUNNING"", ""Freeze TL""))) // Validation for raising the SR(LOV values are same for PTP & Freeze) month level for all below position
             {
               appObj.RaiseErrorText(""You have already raised associated amount of SR in this month, please try next month"");
             }
           }
           else
             appObj.RaiseErrorText(""You are not authorized to raise White List SR"");
         }
         else
            appObj.RaiseErrorText(""You are not authorized to raise VIP SR""); 
         return (CancelOperation);
         break;
      case oppManagPos:
         if(cust_segment != ""A"" && cust_segment != ""B"" && cust_segment != ""C"" && cust_segment != ""D"")
         {
           if(srType != srWhiteList && srType != srWhiteRemove)
           {  
             if(srCount >= ToNumber(appObj.InvokeMethod(""LookupValue"", ""STC_AUTO_DUNNING"", ""Freeze Opp Manager"")))
             {
               appObj.RaiseErrorText(""You have already raised associated amount of SR in this month, please try next month"");
             }
           }
           else
             appObj.RaiseErrorText(""You are not authorized to raise White List SR"");
         }  
         else
            appObj.RaiseErrorText(""You are not authorized to raise VIP SR"");
         return (CancelOperation);
         break;
      case billCollect:
         if(cust_segment == ""A"" || cust_segment == ""B"" || cust_segment == ""C"" || cust_segment == ""D"")
         {
           if(srCountVIPBnc > ToNumber(appObj.InvokeMethod(""LookupValue"", ""STC_AUTO_DUNNING"", ""Freeze BnC VIP"")))
           {
            appObj.RaiseErrorText(""You have already raised associated amount of SR in this month, please try next month"");
           }
         }
         return (CancelOperation);
         break;
      case accntManagr:
         if(cust_segment != ""A"" && cust_segment != ""B"" && cust_segment != ""C"" && cust_segment != ""D"")
         {
           if(srType != srWhiteList && srType != srWhiteRemove)
           {
             if(srCount >= ToNumber(appObj.InvokeMethod(""LookupValue"", ""STC_AUTO_DUNNING"", ""Account Manager"")))
             {
               appObj.RaiseErrorText(""You have already raised associated amount of SR in this month, please try next month"");
             }
           }  
           else
             appObj.RaiseErrorText(""You are not authorized to raise White List SR"");
         } 
         else
            appObj.RaiseErrorText(""You are not authorized to raise VIP SR"");
         return (CancelOperation);
         break;
      case VIPPos:
         if(cust_segment != ""A"" && cust_segment != ""B"" && cust_segment != ""C"" && cust_segment != ""D"")
         {
          appObj.RaiseErrorText(""You are not authorized to raise this SR"");
         }
         else if(srType == srWhiteList && srType == srWhiteRemove)
         {
           appObj.RaiseErrorText(""You are not authorized to raise White List SR"");
         }
         return (ContinueOperation);
         break;
      default:
         appObj.RaiseErrorText(""You are not authorized to raise this SR"");
         return (ContinueOperation);
         break;
    }
  }
  catch(e)
  {
    throw(e);
  }
  finally
  {
    appObj = null;
    banBC   = null;
   // Outputs.SetProperty(""display_msg"", flag );
  }
 
}
function fn_FreezeUnfreezeSMECorpVIPAuthVal(Inputs, Outputs)
{
 
  var flag     = """";
  var appObj     = TheApplication();
  var sPosition   = TheApplication().PositionName();
  var banBC     = appObj.GetBusObject(""STC Billing Account"").GetBusComp(""CUT Invoice Sub Accounts"");
  var srCount     = """";
  var srCountVIPBnc = """";
  var teamLeadPos   = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""STC test CORP"");
  var oppManagPos   = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""Viva Manager"");
  var accntManagr   = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""SIT Partner csr"");
  var billCollect   = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""Executive - Collections"");
  var VIPPos     = appObj.InvokeMethod(""LookupValue"", ""STC_POSITION_ID_SR"", ""Enterprise Sales Department"");
  var freezeSR    = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""Freeze Dunning"");
  var UnfreezeSR   = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""Unfreeze Dunning"");
  var srPTP     = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""PTP - Corporate and SME"");
  var srPTPRemove   = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""PTP Remove - Corporate and SME"");
  var srWhiteList   = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""White List"");
  var srWhiteRemove  = TheApplication().InvokeMethod(""LookupValue"", ""STC_SR_AREA"", ""White List Remove"");
 
  try
  {
    var billType   = Inputs.GetProperty(""bill_Type"");
    var AccntId      = Inputs.GetProperty(""accID"");
    var srType     = Inputs.GetProperty(""srName"");
    var custType    = Inputs.GetProperty(""cust_Type"");
    var cust_segment  = Inputs.GetProperty(""cust_segment"");
   // Get the number of SRs raised in BAN
    banBC.ActivateField(""STC Number of Dunning Freeze SR AccntMan"");
    banBC.ActivateField(""STC Number of Dunning Freeze SR OppMan"");
    banBC.ActivateField(""STC Number of Dunning Freeze SR TL"");
    banBC.ActivateField(""STC Number of PTP SR AccntMan"");
    banBC.ActivateField(""STC Number of PTP SR OppMan"");
    banBC.ActivateField(""STC Number of PTP SR TL"");
    banBC.ActivateField(""STC Number of PTP SR VIP BnC"");
    banBC.ActivateField(""STC Number of Freeze SR VIP BnC"");
    banBC.ActivateField(""STC Number of WhiteList SR VIP BnC"");
    banBC.ClearToQuery();
    banBC.SetViewMode(AllView);
    banBC.SetSearchSpec(""Id"", AccntId);
    banBC.ExecuteQuery(ForwardOnly);
    
    if(banBC.FirstRecord())
    {
        
        if(srType  == freezeSR || srType  == UnfreezeSR)
        { 
            if(sPosition == accntManagr)
             srCount = banBC.GetFieldValue(""STC Number of Dunning Freeze SR AccntMan"");
            else if(sPosition == oppManagPos)
             srCount = banBC.GetFieldValue(""STC Number of Dunning Freeze SR OppMan"");
            else if(sPosition == teamLeadPos)
             srCount = banBC.GetFieldValue(""STC Number of Dunning Freeze SR TL"");
            else if(sPosition == billCollect)
             srCountVIPBnc = banBC.GetFieldValue(""STC Number of Freeze SR VIP BnC"");
        }
        else if(srType  == srPTP || srType  == srPTPRemove) 
        {
           if(sPosition == accntManagr)
             srCount = banBC.GetFieldValue(""STC Number of PTP SR AccntMan"");
            else if(sPosition == oppManagPos)
             srCount = banBC.GetFieldValue(""STC Number of PTP SR OppMan"");
            else if(sPosition == teamLeadPos)
             srCount = banBC.GetFieldValue(""STC Number of PTP SR TL"");
            else if(sPosition == billCollect)
             srCountVIPBnc = banBC.GetFieldValue(""STC Number of Freeze SR VIP BnC"");
        }
        else if(srType  == srWhiteList || srType  == srWhiteRemove)
        {
          if(sPosition == billCollect)
             srCountVIPBnc = banBC.GetFieldValue(""STC Number of Freeze SR VIP BnC"");
        }
    }
    switch(sPosition)
    {
      case teamLeadPos:
         if(cust_segment != ""A"" && cust_segment != ""B"" && cust_segment != ""C"" && cust_segment != ""D"")
         {
           if(srType != srWhiteList && srType != srWhiteRemove)
           {
             if(""Individual"" != billType) // validation for Raising SR on BAN level for all below position
             {
               appObj.RaiseErrorText(""You are not authorized to raise SR on non Employee BAN"");
             }
             if(srCount >= ToNumber(appObj.InvokeMethod(""LookupValue"", ""STC_AUTO_DUNNING"", ""Freeze TL""))) // Validation for raising the SR(LOV values are same for PTP & Freeze) month level for all below position
             {
               appObj.RaiseErrorText(""You have already raised associated amount of SR in this month, please try next month"");
             }
           }
           else
             appObj.RaiseErrorText(""You are not authorized to raise White List SR"");
         }
         else
            appObj.RaiseErrorText(""You are not authorized to raise VIP SR""); 
         return (CancelOperation);
         break;
      case oppManagPos:
         if(cust_segment != ""A"" && cust_segment != ""B"" && cust_segment != ""C"" && cust_segment != ""D"")
         {
           if(srType != srWhiteList && srType != srWhiteRemove)
           {  
             if(srCount >= ToNumber(appObj.InvokeMethod(""LookupValue"", ""STC_AUTO_DUNNING"", ""Freeze Opp Manager"")))
             {
               appObj.RaiseErrorText(""You have already raised associated amount of SR in this month, please try next month"");
             }
           }
           else
             appObj.RaiseErrorText(""You are not authorized to raise White List SR"");
         }  
         else
            appObj.RaiseErrorText(""You are not authorized to raise VIP SR"");
         return (CancelOperation);
         break;
      case billCollect:
         if(cust_segment == ""A"" || cust_segment == ""B"" || cust_segment == ""C"" || cust_segment == ""D"")
         {
           if(srCountVIPBnc > ToNumber(appObj.InvokeMethod(""LookupValue"", ""STC_AUTO_DUNNING"", ""Freeze BnC VIP"")))
           {
            appObj.RaiseErrorText(""You have already raised associated amount of SR in this month, please try next month"");
           }
         }
         return (CancelOperation);
         break;
      case accntManagr:
         if(cust_segment != ""A"" && cust_segment != ""B"" && cust_segment != ""C"" && cust_segment != ""D"")
         {
           if(srType != srWhiteList && srType != srWhiteRemove)
           {
             if(srCount >= ToNumber(appObj.InvokeMethod(""LookupValue"", ""STC_AUTO_DUNNING"", ""Account Manager"")))
             {
               appObj.RaiseErrorText(""You have already raised associated amount of SR in this month, please try next month"");
             }
           }  
           else
             appObj.RaiseErrorText(""You are not authorized to raise White List SR"");
         } 
         else
            appObj.RaiseErrorText(""You are not authorized to raise VIP SR"");
         return (CancelOperation);
         break;
      case VIPPos:
         if(cust_segment != ""A"" && cust_segment != ""B"" && cust_segment != ""C"" && cust_segment != ""D"")
         {
		 
          appObj.RaiseErrorText(""You are not authorized to raise this SR"");
		  
         }
         else if(srType == srWhiteList && srType == srWhiteRemove)
         {
           appObj.RaiseErrorText(""You are not authorized to raise White List SR"");
         }
         return (ContinueOperation);
         break;
      default:	 
	  appObj.RaiseErrorText(""You are not authorized to raise this SR"");

//	  if(srType != srPTP) // not required [Mark:31122020: SD:PTP Enhancement Business]
	//	{
     //   appObj.RaiseErrorText(""You are not authorized to raise this SR"");
	//	}
         return (ContinueOperation);
         break;
    }
  }
  catch(e)
  {
    throw(e);
  }
  finally
  {
    appObj = null;
    banBC   = null;
   // Outputs.SetProperty(""display_msg"", flag );
  }
 
}
function getLoyaltyClassSANCount(accountId)
{
	var sAccntBO, sAccntBC;
	var sLoyflag     = ""N"";
	var appObj     = TheApplication();

	try
	{
		sAccntBO = appObj.GetBusObject(""STC Thin Service Account BO"");
		sAccntBC = sAccntBO.GetBusComp(""STC Thin CUT Service Sub Accounts"");
		
		with (sAccntBC)
		{
			ActivateField(""Parent Account Id"");
			ActivateField(""Account Status"");
			ActivateField(""STC Loyality Tier Class"");
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchExpr(""[Parent Account Id] = '""+accountId+""' AND ([Account Status] <> 'Terminated' OR [Account Status] <> 'Inactive') AND [STC Loyality Tier Class] = 'Premier'"");
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
				sLoyflag =""Y"";			
		}
	}
	catch(e)
	{
		 throw(e);
	}
	finally
	{
		sAccntBC = null;
		sAccntBO = null;
		return (sLoyflag);
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""InsertNote"")
	{
		InsertNote();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}




function InsertNote()
{
	var MRowId="""";

	/*	WIPRO-Upgrade-15.06.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_TERMINATION"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-15.06.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/siebelfs/hout.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
        {

			MRowId = (Clib.fgets(file));  
			MRowId = trim(MRowId);
			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();
			
			MInputs.SetProperty(""Object Id"",MRowId);    
			
			MInputs.SetProperty(""ProcessName"",""STC Account Notes Insert Utility Process"");
			
			var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");
			
			MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

		}
	}
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null
	
}
function AssocateAccountAddress(Inputs, Outputs)
{
	var boAccount;
	var bcAccount;
	var bcAddMVG;
	var bcAddrAssoc;
	try{
		var sAccountId = Inputs.GetProperty(""AccountId"");
		var sAddressId = Inputs.GetProperty(""AddressId"");
		var sAccntType = Inputs.GetProperty(""AccountType"");
		if(sAccntType == ""CAN""){
			boAccount = TheApplication().GetBusObject(""Account"");
			bcAccount = boAccount.GetBusComp(""Account"");
		}
		if(sAccntType == ""BAN""){
			boAccount = TheApplication().GetBusObject(""STC Billing Account"");
			bcAccount = boAccount.GetBusComp(""CUT Invoice Sub Accounts"");
		}
		if(sAccntType == ""SAN""){
			boAccount = TheApplication().GetBusObject(""STC Service Account"");
			bcAccount = boAccount.GetBusComp(""CUT Service Sub Accounts"");
		}
		with(bcAccount){
			ActivateField(""Street Address"");
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchSpec(""Id"", sAccountId);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord()){
				bcAddMVG = GetMVGBusComp(""Street Address"");
				bcAddrAssoc = bcAddMVG.GetAssocBusComp();
				with(bcAddrAssoc){
					ActivateField(""Id"");
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchSpec(""Id"",sAddressId);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord()){
						Associate(NewBefore);
					}
				} //with(bcAddrAssoc)
			}
		} // with(bcAccount)

	}//End try
	catch(e){
		throw(e);
	}
	finally{
		bcAddrAssoc = null;
		bcAddMVG = null;
		bcAccount = null;
		boAccount = null;
	}
}
"
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	try
	{
		switch(MethodName)
		{
			case ""UpdateAccManager"":
				UpdateAccManager(Inputs, Outputs);
				return(CancelOperation);
				break;
			
			case ""AssociateAddress"":
				AssocateAccountAddress(Inputs, Outputs);
				return(CancelOperation);
				break;
			
			default:
				return (ContinueOperation);
		}
	}
	catch (exc)
	{
		throw(exc.toString());
	}
	finally 
	{
	}  
}
function UpdateAccManager(Inputs,Outputs)
{
var AccountBC = TheApplication().GetBusObject(""Account"").GetBusComp(""Account"");
var OldAccManager = Inputs.GetProperty(""OldAccManager"");
var NewAccManager = Inputs.GetProperty(""NewAccManager"");

with(AccountBC)
{
	ActivateField(""STC Account Manager Name"");
	ActivateField(""Tax ID Number"");
	SetViewMode(AllView);
	ClearToQuery();
	SetSearchSpec(""STC Account Manager Name"",OldAccManager);
	ExecuteQuery(ForwardOnly);
	var AccRec = FirstRecord();
	while(AccRec)
	{
	var taxnum = GetFieldValue(""Tax ID Number"");
		SetFieldValue(""STC Account Manager Name"", NewAccManager);
		WriteRecord();
		AccRec = NextRecord();
	}
}
var OptyBC = TheApplication().GetBusObject(""Opportunity"").GetBusComp(""Opportunity"");

with(OptyBC)
{
	ActivateField(""Account Manager"");
	SetViewMode(AllView);
	ClearToQuery();
	SetSearchSpec(""Account Manager"",OldAccManager);
	ExecuteQuery(ForwardOnly);
	var OptyRec = FirstRecord();
	while(OptyRec)
	{
	SetFieldValue(""Account Manager"", NewAccManager);
	WriteRecord();
	OptyRec = NextRecord();
	}


}

}
function GetFirstRec(Inputs,Outputs)
{
var appObj;
	var sQueueId;
	var boAction;
	var bcAction;
	var sSpec;
	var sNextRec;
	var sEmpId;
	var sCurrSubStat;
	var sCurrStat;
	var sSubstat;
	var sStatus;
	var sNextAct;
	var psInputs;
	var psOutputs;
	var sGotNextLast;
	var sMsg;
	try
	{
		appObj = TheApplication();
		sQueueId = Inputs.GetProperty(""QueueId"");
		sNextAct = ""N"";
		sEmpId = appObj.LoginId();
		boAction = appObj.GetBusObject(""Action"");
		bcAction = boAction.GetBusComp(""Action"");
		with(bcAction)	
		{
			    SetViewMode(AllView);
			 	ClearToQuery();
			 	ActivateField(""Status"");
			 	ActivateField(""Primary Owner Id"");
			 	sSpec =  ""[Primary Owner Id] = '"" + sQueueId  + ""' AND [Status] = 'Queued'"";
			 	SetSearchExpr(sSpec);
			 	SetSortSpec(""Creation Date(ASCENDING)"");
			 	ExecuteQuery(ForwardOnly);
			 	sNextRec = FirstRecord();
			 	if(sNextRec)
			 	{
			 		sCurrSubStat = GetFieldValue(""Status"");
			 		sNextAct =GetFieldValue(""Id"");
					SetFieldValue(""Primary Owner Id"",sEmpId);
					SetFieldValue(""Status"",'Assigned');
					WriteRecord();
			 	 }
			 	 if(sNextAct == ""N"")
			 	 {
			 	 	sMsg = ""There are no items Held in the Queue"";
			 	 	Outputs.SetProperty(""OutputMessage"",sMsg);
			 	 }
			 	 else
			 	 {
			 	    sMsg = ""Activity # "" + sNextAct + "" has been Assigned to you."";
			 	    Outputs.SetProperty(""OutputMessage"",sMsg);
			 	 }
			 	 
		 }//with(bcServiceRequest)
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcAction = null;
		boAction = null;
		appObj = null;
	}


}
function GetNextRec(Inputs,Outputs)
{
	var appObj;
	var sQueueId;
	var boAction;
	var bcAction;
	var sSpec;
	var sNextRec;
	var sEmpId;
	var sCurrSubStat;
	var sCurrStat;
	var sSubstat;
	var sStatus;
	var sNextAct;
	var psInputs;
	var psOutputs;
	var sGotNextLast;
	var sMsg;
	try
	{
		appObj = TheApplication();
		sQueueId = Inputs.GetProperty(""QueueId"");
		sNextAct = ""N"";
		sEmpId = appObj.LoginId();
		boAction = appObj.GetBusObject(""Action"");
		bcAction = boAction.GetBusComp(""Action"");
		with(bcAction)	
		{
			    SetViewMode(AllView);
			 	ClearToQuery();
			 	ActivateField(""Status"");
			 	ActivateField(""Primary Owner Id"");
			 	sSpec =  ""[Primary Owner Id] = '"" + sQueueId  + ""' AND [Status] = 'Queued'"";
			 	SetSearchExpr(sSpec);
			 	SetSortSpec(""Creation Date(DESCENDING)"");
			 	ExecuteQuery(ForwardOnly);
			 	sNextRec = FirstRecord();
			 	if(sNextRec)
			 	{
			 		sCurrSubStat = GetFieldValue(""Status"");
			 		sNextAct =GetFieldValue(""Id"");
					SetFieldValue(""Primary Owner Id"",sEmpId);
					SetFieldValue(""Status"",'Assigned');
					WriteRecord();
			 	 }
			 	 if(sNextAct == ""N"")
			 	 {
			 	 	sMsg = ""There are no items Held in the Queue"";
			 	 	Outputs.SetProperty(""OutputMessage"",sMsg);
			 	 }
			 	 else
			 	 {
			 	    sMsg = ""Activity # "" + sNextAct + "" has been Assigned to you."";
			 	    Outputs.SetProperty(""OutputMessage"",sMsg);
			 	 }
			 	 
		 }//with(bcServiceRequest)
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcAction = null;
		boAction = null;
		appObj = null;
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	switch(MethodName)
	{
	 case ""GetFirstRec"":
     GetFirstRec(Inputs, Outputs);
     return(CancelOperation);
     break;
     
     case ""GetNextRec"":
     GetNextRec(Inputs, Outputs);
     return(CancelOperation);
     break;
     
     default:
          return (ContinueOperation);
       }

	return (ContinueOperation);
}
function AddNewLineItem(Inputs,Outputs)
{
	var OrderBO = TheApplication().GetBusObject(""Order Entry (Sales)"");
	var OrdLineBC = OrderBO.GetBusComp(""Order Entry - Line Items (Simple)"");
	//var psPorts    = TheApplication().NewPropertySet();
	//var ProdPrice = ToNumber(ProductPrice);
	var vNewLineItemId = """";
	//var psRootPort    = TheApplication().NewPropertySet();
	
	try
	{
		//Outputs.SetProperty(""Error Message"",""SUCCESS"");
		//Outputs.SetProperty(""Error Code"",""0000"");
		with(OrdLineBC)
		{
			ActivateField(""Status"");
			ActivateField(""Cfg State Code"");
			ActivateField(""Billing Account Id"");
			ActivateField(""Billing Profile Id"");
			ActivateField(""Net Price"");
			ActivateField(""Order Header Id"");
			ActivateField(""Product Id"");
			ActivateField(""Id"");
			ActivateField(""Root Order Item Id"");
			ActivateField(""Service Account Id"");
			ActivateField(""Service Id"");
			ActivateField(""Product Port Id"");
			ActivateField(""Prod Item Id"");

			NewRecord(NewAfter);

			SetFieldValue(""Status"",Inputs.GetProperty(""Output0""));
			SetFieldValue(""Cfg State Code"",Inputs.GetProperty(""Output1""));
			SetFieldValue(""Billing Account Id"",Inputs.GetProperty(""Output2""));
			SetFieldValue(""Billing Profile Id"",Inputs.GetProperty(""Output3""));
			SetFieldValue(""Net Price"","""");
			SetFieldValue(""Order Header Id"",Inputs.GetProperty(""Output5""));
			SetFieldValue(""Parent Order Item Id"",Inputs.GetProperty(""Output7""));
			SetFieldValue(""Root Order Item Id"",Inputs.GetProperty(""Output8""));
			SetFieldValue(""Service Account Id"",Inputs.GetProperty(""Output9""));
			SetFieldValue(""Service Id"",Inputs.GetProperty(""Output10""));
			
			
			SetFieldValue(""Product Id"",Inputs.GetProperty(""Output12""));
			if(Inputs.GetProperty(""Output13"")==""""||Inputs.GetProperty(""Output13"")=='' ||Inputs.GetProperty(""Output13"")== null)
			{
				SetFieldValue(""Prod Item Id"",Inputs.GetProperty(""Output14""));
				SetFieldValue(""Product Port Id"",Inputs.GetProperty(""Output14""));
			}
			else if(Inputs.GetProperty(""Output14"")==""""||Inputs.GetProperty(""Output14"")=='' ||Inputs.GetProperty(""Output14"")== null)
			{
				SetFieldValue(""Prod Item Id"",Inputs.GetProperty(""Output13""));
				SetFieldValue(""Product Port Id"",Inputs.GetProperty(""Output13""));
			}
			else
			{
				SetFieldValue(""Prod Item Id"",Inputs.GetProperty(""Output13""));
				SetFieldValue(""Product Port Id"",Inputs.GetProperty(""Output14""));
			}


			WriteRecord();

		}
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Code"",e.errCode);
		Outputs.SetProperty(""Error Message"",e.errText);
	}
	finally
	{
			OrdLineBC = null;
			OrderBO = null;
	}
}
"
function AddProduct(Inputs,Outputs)
{

	var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");
	var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");
	var QBS=TheApplication().GetService(""STC Siebel Operation BS"");

	var portaloid=Inputs.GetProperty(""Portal Order Id"");
	var orderid=Inputs.GetProperty(""CRM Order Id"");
	var lineitemid=Inputs.GetProperty(""CRM Order Line Item Id"");

	var addprod=Inputs.GetProperty(""AddProdId"");
	var pName='',SearchSpec='',parName='',prodName='',prodId='',parItemId='',parId='',origId='',pparRelId='';
	var doDiscontinue=false;

	var cnt=0;

	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var inp1=TheApplication().NewPropertySet();
	var out1=TheApplication().NewPropertySet();

	try
	{
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"",""1111"");


		SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending') AND [Line Item.STC Parent Order Item Id] IS NOT NULL"";
		inp.SetProperty(""OutputIntObjectName"",""STC ECommerce Order IO"");
		inp.SetProperty(""SearchSpec"",SearchSpec);
		//To Get the Ecommerce Line Item Structure
		ESiebelAdapter.InvokeMethod(""Query"",inp,out);
		var NumChild=out.GetProperty(""NumOutputObjects"");
		if(out.GetChild(0).GetChild(0).GetChildCount()>=1)
		{
			if(out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
			{
				cnt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
			}
		}
		if (cnt>=1)
		{
			//TheApplication().RaiseErrorText(""No Child Item"");
		
			for(var i=0;i<cnt;i++)
			{
				prodName=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Name"");
				prodId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Id"");
				parItemId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Parent Order Item Id"");
			//Get the parent item name for the child
				
				inp1.Reset();
				out1.Reset();
	
				inp1.SetProperty(""BusinessObject"",""STC ECommerce Order BO"");
				inp1.SetProperty(""BusinessComponent"",""STC ECom Order Item BC"");
				inp1.SetProperty(""SearchExpression"",""[STC Parent Portal Order Id]='""+portaloid+""' AND [STC Portal Line Item Id]='""+parItemId+""'"");
				inp1.SetProperty(""Field0"",""STC Prod Name"");
				inp1.SetProperty(""Field1"",""STC Prod Id"");
		
				QBS.InvokeMethod(""SiebelQuery"",inp1,out1);
				parName=out1.GetProperty(""Output0"");
				parId=out1.GetProperty(""Output1"");
	
				if(parName ==''||parName==""""||parId ==''||parId=="""")
				{
					TheApplication().RaiseErrorText(""No parent Line Item for the mentioned Child Item"");
				}
			//Get the Relation of the Child product with the parent
				inp1.Reset();
				out1.Reset();
	
				SearchSpec=""[RCOIS Enhanced Chid Prd Structure BC.Sub Obj Id]='""+prodId+""' AND [RCOIS Enhanced Chid Prd Structure BC.Last Vers]='999999999' AND [RCOIS Enhanced Parent Prd Structure BC.Par Rel Id] IS NULL AND [RCOIS Enhanced Parent Prd Structure BC.Last Vers]='999999999' AND [RCOIS Enhanced PROD Admin BC.Name]='""+parName+""'"";
				inp1.SetProperty(""SearchSpec"",SearchSpec);
				inp1.SetProperty(""OutputIntObjectName"",""RCOIS Enhanced Admin ISS Product Deftn Custom"");
				ESiebelAdapter.InvokeMethod(""Query"",inp1,out1);
	
				var NumChild1=out1.GetProperty(""NumOutputObjects"");
				if(out1.GetChild(0).GetChild(0).GetChildCount()>=1)
				{
						NumChild1=out1.GetChild(0).GetChild(0).GetChildCount();
	
				}
				if (NumChild1<=0)
				{
					TheApplication().RaiseErrorText(""No Product Relationship"");
				}
	
				for(var j=0;j<NumChild1;j++)
				{
					if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChildCount()>=1)
					{
						if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChildCount()>=1)
						{
							if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
							{
								if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount() >=1)
								{
									if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
									{
										origId=out1.GetChild(0).GetChild(0).GetChild(j).GetProperty(""Orig Id"");
										pparRelId=out1.GetChild(0).GetChild(0).GetChild(j).GetProperty(""Par Rel Id"");
									}
								}
							}
						}
					}
				}
				if((origId =="""" || origId=='') && (pparRelId =="""" || pparRelId==''))
				{
					TheApplication().RaiseErrorText(""Null RelationShip IDs"");
				}
	//Get Parent Order To Insert the product
				inp1.Reset();
				out1.Reset();
	
				inp1.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
				inp1.SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
				inp1.SetProperty(""SearchExpression"",""[Order Header Id]='""+orderid+""' AND [Product]='""+parName+""' AND [Product Id]='""+parId+""' AND [Action Code]='Add' AND [STC Portal Line Id]='""+parItemId+""'"");
				inp1.SetProperty(""Field0"",""Status"");
				inp1.SetProperty(""Field1"",""Cfg State Code"");
				inp1.SetProperty(""Field2"",""Billing Account Id"");
				inp1.SetProperty(""Field3"",""Billing Profile Id"");
				inp1.SetProperty(""Field4"",""Net Price"");
				inp1.SetProperty(""Field5"",""Order Header Id"");
				inp1.SetProperty(""Field6"",""Product Id"");
				inp1.SetProperty(""Field7"",""Id"");
				inp1.SetProperty(""Field8"",""Root Order Item Id"");
				inp1.SetProperty(""Field9"",""Service Account Id"");
				inp1.SetProperty(""Field10"",""Service Id"");
		
				QBS.InvokeMethod(""SiebelQuery"",inp1,out1);
	
				out1.SetProperty(""Output11"",prodName);
				out1.SetProperty(""Output12"",prodId);
				out1.SetProperty(""Output13"",origId);
				out1.SetProperty(""Output14"",pparRelId);
	
				inp1.Reset();
				inp1.SetProperty(""Error Message"","""");
				inp1.SetProperty(""Error Code"",""1111"");
	
				AddNewLineItem(out1.Copy(),inp1);
	
				if(inp1.GetProperty(""Error Code"")!=""1111"")
				{
					TheApplication().RaiseErrorText(""Error While Adding the Line Item"");
				}
				
			}
		}


	}
	catch(e)
	{
		Outputs.SetProperty(""Error Code"",e.errCode);
		Outputs.SetProperty(""Error Message"",e.errText);
	}
	finally
	{
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{

	try
	{
		switch(MethodName)
		{
			case ""AddProduct"":
				Outputs.SetProperty(""Error Code"",""0000"");
				Outputs.SetProperty(""Error Message"",""SUCCESS"");
				AddProduct(Inputs , Outputs);
				if(Outputs.GetProperty(""Error Code"") != ""1111"")
				{
					Outputs.SetProperty(""Error Debug Message"",Outputs.GetProperty(""Error Message""));
					TheApplication().RaiseErrorText(""Add Product Function Execption"");
				}
				else
				{
					Outputs.SetProperty(""Error Code"",""0000"");
					Outputs.SetProperty(""Error Message"",""SUCCESS"");
				}
				return(CancelOperation);
			case ""UpdateDetails"":
				Outputs.SetProperty(""Error Code"",""0000"");
				Outputs.SetProperty(""Error Message"",""SUCCESS"");
				UpdateDetails(Inputs , Outputs);
				if(Outputs.GetProperty(""Error Code"") != ""1111"")
				{
					Outputs.SetProperty(""Error Debug Message"",Outputs.GetProperty(""Error Message""));
					TheApplication().RaiseErrorText(""Add Product Function Execption"");
				}
				else
				{
					Outputs.SetProperty(""Error Code"",""0000"");
					Outputs.SetProperty(""Error Message"",""SUCCESS"");
				}
				return(CancelOperation);

			default:
				return(ContinueOperation);

		
		}

	}
	catch(e)
	{
		Outputs.SetProperty(""Error Code"",e.errCode);
		Outputs.SetProperty(""Error Message"",e.errText);
	}
	finally
	{
		//Inputs.Reset();
		//Outputs.Reset();
	}
	return (ContinueOperation);
}
function UpdateDetails(Inputs,Outputs)
{
	var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");
	//var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");
	var QBS=TheApplication().GetService(""STC Siebel Operation BS"");

	var portaloid=Inputs.GetProperty(""Portal Order Id"");
	var orderid=Inputs.GetProperty(""CRM Order Id"");
	var updateType=Inputs.GetProperty(""UpdateType"");
	var cnt=0;

	//var addprod=Inputs.GetProperty(""AddProdId"");
	var pName='',SearchSpec='',parName='',prodName='',prodId='',action='',prodcat='',amt='',pparRelId='', sAdvPay, sIntNum, prodItemCat='';
	var vObjectId='', vDIAmt='', vDIDiscAmt='', vAccCashBack='', vVivaCashBack='', vDeviceRRP='';
	//var doDiscontinue=false;
	var sPartCode = '', sParentLinkId='', sPortalLineId='', sOrderLineId='';
	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var inp1=TheApplication().NewPropertySet();
	var out1=TheApplication().NewPropertySet();
	var out2=TheApplication().NewPropertySet();
	var inp3=TheApplication().NewPropertySet();
	var out3=TheApplication().NewPropertySet();
	var out4=TheApplication().NewPropertySet();
	var sInp1=TheApplication().NewPropertySet();
	var sOut1=TheApplication().NewPropertySet();
	var sInp=TheApplication().NewPropertySet();
	var sOut=TheApplication().NewPropertySet();

	try
	{
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"",""1111"");

		if(updateType==""Partial"")
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending') AND [Line Item.STC Parent Order Item Id] IS NULL"";
		}
		else if(updateType==""All"")
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending')"";
		}
		else
		{
			TheApplication().RaiseErrorText(""Update Type Specified is Wrong"");
		}
		inp.SetProperty(""OutputIntObjectName"",""STC ECommerce Order IO"");
		inp.SetProperty(""SearchSpec"",SearchSpec);
		//To Get the Ecommerce Line Item Structure
		ESiebelAdapter.InvokeMethod(""Query"",inp,out);
		var NumChild=out.GetProperty(""NumOutputObjects"");
		if(out.GetChild(0).GetChild(0).GetChildCount()>=1)
		{
			if(out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
			{
				cnt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
			}
		}
		if (cnt>=1)
		{
			//TheApplication().RaiseErrorText(""No Eshop Child Item"");
			
			for(var i=0;i<cnt;i++)
			{
				prodName=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Name"");
				prodId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Id"");
				action=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Action Code"");
				//action=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Action Code"");
				prodcat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Category"");
				prodItemCat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Item Category"");
				sPartCode=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Part Code"");
				sParentLinkId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Parent Link Id"");
				//Get the parent item name for the child
				
				inp1.Reset();
				out1.Reset();
	
				inp1.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
				inp1.SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
				SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND [STC Portal Line Id] IS NULL AND [STC Portal Session Id] IS NULL"";
				inp1.SetProperty(""SearchExpression"",SearchSpec);
				inp1.SetProperty(""Field0"",""Id"");
				QBS.InvokeMethod(""SiebelQuery"",inp1,out1);
	
				if(out1.GetProperty(""RecordCount"")>0)
				{
					sOrderLineId = out1.GetProperty(""Output0"");
					inp1.Reset();
					out1.Reset();
	
					inp1.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
					inp1.SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
				    
				    //SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND [STC Portal Line Id] IS NULL AND [STC Portal Session Id] IS NULL"";
				    
				    SearchSpec=""[Id]='""+sOrderLineId+""'"";
				    inp1.SetProperty(""SearchExpression"",SearchSpec);
	
					inp1.SetProperty(""STC POS Inventory Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Pos Inventory Id""));
					inp1.SetProperty(""STC Portal Session Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Session Id""));
					inp1.SetProperty(""STC Shop Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Shop Id""));
					inp1.SetProperty(""STC Portal Line Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id""));
					inp1.SetProperty(""STC POS Inventory Name"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Pos Inventory Name""));

					amt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Amount"");
					if(action==""Add"" && (prodcat==""Equipment"" || prodcat==""Accessories""))
					{
						inp1.SetProperty(""Unit Price"",amt);
						inp1.SetProperty(""Net Price"",amt);				
					}
					if(action==""Add"" && prodcat==""Discount"")
					{
						inp1.SetProperty(""Unit Price"",""-""+amt);
						inp1.SetProperty(""Net Price"",""-""+amt);
					}
		
					try
					{
						QBS.InvokeMethod(""SiebelUpdate"",inp1,out1);
					}
					catch(a)
					{
						out2.SetProperty(""Error Code"",a.errCode);
						out2.SetProperty(""Error Message"",a.errText);
					}
				}//end of if(out1.GetProperty(""RecordCount"")>0)

				if(action==""Add"" && ((prodcat==""Equipment"" && prodItemCat != 'Retail Device') || prodcat==""Accessories""))
				{
					inp3.Reset();
					out3.Reset();

					SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""'"";
					with(inp3){
						SetProperty(""BusinessObject"",""Order Entry (Sales)"");
						SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
						SetProperty(""SearchExpression"",SearchSpec);
					}

					sAdvPay=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Advance Payment"");
					sIntNum=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Number Installment"");						
					vDIAmt = out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC DI Amount"");
					vDIDiscAmt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC DI Discount Amount"");
					vAccCashBack=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Account Cash Back"");
					vVivaCashBack=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC VIVA Cash Back"");
					vDeviceRRP=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Device RRP"");
					with(inp3){
						SetProperty(""STC Advance Payment"",sAdvPay);
						SetProperty(""STC Number Installment"",sIntNum);
						SetProperty(""STC DI Discount Amount"", vDIDiscAmt);	
						SetProperty(""STC Account Cash Back"", vAccCashBack);	
						SetProperty(""STC VIVA Cash Back"", vVivaCashBack);
						SetProperty(""Cost"", vDeviceRRP);	
					}
					try
					{
						QBS.InvokeMethod(""SiebelUpdate"",inp3,out3);

						vObjectId = out3.GetProperty(""ObjectId"");
					}
					catch(b)
					{
						out4.SetProperty(""Error Code"",b.errCode);
						out4.SetProperty(""Error Message"",b.errText);
					}

					if ((vDIAmt != null && vDIAmt != """") || (vAccCashBack != null && vAccCashBack != """"))
					{
						sInp1.Reset();
						sOut1.Reset();
						with(sInp1){
							SetProperty(""ObjectId"", vObjectId);
							SetProperty(""orderid"", orderid);
							SetProperty(""prodId"", prodId);
							SetProperty(""prodName"", prodName);
							SetProperty(""action"", action);
							SetProperty(""DIAmount"", vDIAmt);
							SetProperty(""AccountCashBack"", vAccCashBack);
						}
						UpdateDeviceInstallment(sInp1,sOut1);
						//sInp1 = null; sOut1 = null;
					}
				}//if(action==""Add"" &&
				
				sPartCode = sPartCode.substr(0,15);
				if((sParentLinkId != null && sParentLinkId != """") && (sPartCode == ""DEVICEINSURANCE""))
				{//Navin/Jithin:eShop Insurance Option
					sInp.Reset();
					sOut.Reset();
					sPortalLineId= out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id"");
					amt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Amount"");
					with(sInp){
						SetProperty(""sParentLinkId"", sParentLinkId);
						SetProperty(""orderid"", orderid);
						SetProperty(""sPortalLineId"", sPortalLineId);
						//SetProperty(""DevInsAmount"", amt);
					}
					UpdateDeviceInsurance(sInp, sOut);
					//sInp = null; sOut = null;
				}
			}//end of for loop
		}//end of if (cnt>=1)
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Code"",e.errCode);
		Outputs.SetProperty(""Error Message"",e.errText);
	}
	finally
	{
		sInp = null; sOut = null;
		sInp1 = null; sOut1 = null;
		inp = null;	out = null;
		inp1 = null; out1 = null; out2 = null;
		inp3 = null; out3 = null;  out4 = null;
		QBS = null; ESiebelAdapter = null;
	}
}
function UpdateDetails(Inputs,Outputs)
{
	var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");
	//var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");
	var QBS=TheApplication().GetService(""STC Siebel Operation BS"");

	var portaloid=Inputs.GetProperty(""Portal Order Id"");
	var orderid=Inputs.GetProperty(""CRM Order Id"");
	var updateType=Inputs.GetProperty(""UpdateType"");
	var cnt=0;

	//var addprod=Inputs.GetProperty(""AddProdId"");
	var pName='',SearchSpec='',parName='',prodName='',prodId='',action='',prodcat='',amt='',pparRelId='', sAdvPay, sIntNum, prodItemCat='';
	var vObjectId='', vDIAmt='', vDIDiscAmt='', vAccCashBack='', vVivaCashBack='', vDeviceRRP='';
	//var doDiscontinue=false;
	var sPartCode = '', sParentLinkId='', sPortalLineId='', sOrderLineId='';
	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var inp1=TheApplication().NewPropertySet();
	var out1=TheApplication().NewPropertySet();
	var out2=TheApplication().NewPropertySet();
	var inp3=TheApplication().NewPropertySet();
	var out3=TheApplication().NewPropertySet();
	var out4=TheApplication().NewPropertySet();
	var sInp1=TheApplication().NewPropertySet();
	var sOut1=TheApplication().NewPropertySet();
	var sInp=TheApplication().NewPropertySet();
	var sOut=TheApplication().NewPropertySet();

	try
	{
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"",""1111"");

		if(updateType==""Partial"")
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending') AND [Line Item.STC Parent Order Item Id] IS NULL"";
		}
		else if(updateType==""All"")
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending')"";
		}
		else
		{
			TheApplication().RaiseErrorText(""Update Type Specified is Wrong"");
		}
		inp.SetProperty(""OutputIntObjectName"",""STC ECommerce Order IO"");
		inp.SetProperty(""SearchSpec"",SearchSpec);
		//To Get the Ecommerce Line Item Structure
		ESiebelAdapter.InvokeMethod(""Query"",inp,out);
		var NumChild=out.GetProperty(""NumOutputObjects"");
		if(out.GetChild(0).GetChild(0).GetChildCount()>=1)
		{
			if(out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
			{
				cnt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
			}
		}
		if (cnt>=1)
		{
			//TheApplication().RaiseErrorText(""No Eshop Child Item"");
			
			for(var i=0;i<cnt;i++)
			{
				prodName=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Name"");
				prodId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Id"");
				action=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Action Code"");
				//action=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Action Code"");
				prodcat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Category"");
				prodItemCat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Item Category"");
				sPartCode=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Part Code"");
				sParentLinkId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Parent Link Id"");
				//Get the parent item name for the child
				
				inp1.Reset();
				out1.Reset();
	
				inp1.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
				inp1.SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
				SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND [STC Portal Line Id] IS NULL AND [STC Portal Session Id] IS NULL"";
				inp1.SetProperty(""SearchExpression"",SearchSpec);
				inp1.SetProperty(""Field0"",""Id"");
				QBS.InvokeMethod(""SiebelQuery"",inp1,out1);
	
				if(out1.GetProperty(""RecordCount"")>0)
				{
					sOrderLineId = out1.GetProperty(""Output0"");
					inp1.Reset();
					out1.Reset();
	
					inp1.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
					inp1.SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
				    
				    //SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND [STC Portal Line Id] IS NULL AND [STC Portal Session Id] IS NULL"";
				    
				    SearchSpec=""[Id]='""+sOrderLineId+""'"";
				    inp1.SetProperty(""SearchExpression"",SearchSpec);
	
					inp1.SetProperty(""STC POS Inventory Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Pos Inventory Id""));
					inp1.SetProperty(""STC Portal Session Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Session Id""));
					inp1.SetProperty(""STC Shop Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Shop Id""));
					inp1.SetProperty(""STC Portal Line Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id""));
					inp1.SetProperty(""STC POS Inventory Name"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Pos Inventory Name""));

					amt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Amount"");
					if(action==""Add"" && (prodcat==""Equipment"" || prodcat==""Accessories"" || prodItemCat == ""Standard Charges Additional"" ||prodItemCat ==""Standard Charges"" || prodItemCat == ""Delivery Charges Additional"" ||prodItemCat ==""Delivery Charges"")) //Hardik:Added New item Category
					{
						inp1.SetProperty(""Unit Price"",amt);
						inp1.SetProperty(""Net Price"",amt);				
					}
					if(action==""Add"" && prodcat==""Discount"")
					{
						inp1.SetProperty(""Unit Price"",""-""+amt);
						inp1.SetProperty(""Net Price"",""-""+amt);
					}
		
					try
					{
						QBS.InvokeMethod(""SiebelUpdate"",inp1,out1);
					}
					catch(a)
					{
						out2.SetProperty(""Error Code"",a.errCode);
						out2.SetProperty(""Error Message"",a.errText);
					}
				}//end of if(out1.GetProperty(""RecordCount"")>0)

				if(action==""Add"" && ((prodcat==""Equipment"" && prodItemCat != 'Retail Device') || prodcat==""Accessories""))
				{
					inp3.Reset();
					out3.Reset();

					SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""'"";
					with(inp3){
						SetProperty(""BusinessObject"",""Order Entry (Sales)"");
						SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
						SetProperty(""SearchExpression"",SearchSpec);
					}

					sAdvPay=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Advance Payment"");
					sIntNum=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Number Installment"");						
					vDIAmt = out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC DI Amount"");
					vDIDiscAmt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC DI Discount Amount"");
					vAccCashBack=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Account Cash Back"");
					vVivaCashBack=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC VIVA Cash Back"");
					vDeviceRRP=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Device RRP"");
					with(inp3){
						SetProperty(""STC Advance Payment"",sAdvPay);
						SetProperty(""STC Number Installment"",sIntNum);
						SetProperty(""STC DI Discount Amount"", vDIDiscAmt);	
						SetProperty(""STC Account Cash Back"", vAccCashBack);	
						SetProperty(""STC VIVA Cash Back"", vVivaCashBack);
						SetProperty(""Cost"", vDeviceRRP);	
					}
					try
					{
						QBS.InvokeMethod(""SiebelUpdate"",inp3,out3);

						vObjectId = out3.GetProperty(""ObjectId"");
					}
					catch(b)
					{
						out4.SetProperty(""Error Code"",b.errCode);
						out4.SetProperty(""Error Message"",b.errText);
					}

					if ((vDIAmt != null && vDIAmt != """") || (vAccCashBack != null && vAccCashBack != """"))
					{
						sInp1.Reset();
						sOut1.Reset();
						with(sInp1){
							SetProperty(""ObjectId"", vObjectId);
							SetProperty(""orderid"", orderid);
							SetProperty(""prodId"", prodId);
							SetProperty(""prodName"", prodName);
							SetProperty(""action"", action);
							SetProperty(""DIAmount"", vDIAmt);
							SetProperty(""AccountCashBack"", vAccCashBack);
						}
						UpdateDeviceInstallment(sInp1,sOut1);
						//sInp1 = null; sOut1 = null;
					}
				}//if(action==""Add"" &&
				
				sPartCode = sPartCode.substr(0,15);
				if((sParentLinkId != null && sParentLinkId != """") && (sPartCode == ""DEVICEINSURANCE""))
				{//Navin/Jithin:eShop Insurance Option
					sInp.Reset();
					sOut.Reset();
					sPortalLineId= out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id"");
					amt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Amount"");
					with(sInp){
						SetProperty(""sParentLinkId"", sParentLinkId);
						SetProperty(""orderid"", orderid);
						SetProperty(""sPortalLineId"", sPortalLineId);
						//SetProperty(""DevInsAmount"", amt);
					}
					UpdateDeviceInsurance(sInp, sOut);
					//sInp = null; sOut = null;
				}
			}//end of for loop
		}//end of if (cnt>=1)
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Code"",e.errCode);
		Outputs.SetProperty(""Error Message"",e.errText);
	}
	finally
	{
		sInp = null; sOut = null;
		sInp1 = null; sOut1 = null;
		inp = null;	out = null;
		inp1 = null; out1 = null; out2 = null;
		inp3 = null; out3 = null;  out4 = null;
		QBS = null; ESiebelAdapter = null;
	}
}
function UpdateDeviceInstallment(Inputs, Outputs)
{//[HARDIK:26Apr2020:EcommerceAccessoriesBusinessDI]
//[NAVIN:27Apr2020:EcommerceOrderPriceOverride-Updated]
	try
	{
		var vObjectId='', orderid='', prodName='', action='', prodId='';
		var vDIAmt, vAccCashBack;
	//TheApplication().RaiseErrorText(orderid);
		var sBO = TheApplication().GetBusObject(""Order Entry (Sales)"");
	    var sBC = sBO.GetBusComp(""Order Entry - Line Items (Simple)"");
		var sRec=false, vSearchExpr='', vSearchExpr2='', sBCD1=null, vParentLineId='', sBCD2=null;

		with(Inputs){
			vObjectId = GetProperty(""ObjectId"");
			orderid = GetProperty(""orderid"");
		    prodName = GetProperty(""prodName"");
			action = GetProperty(""action"");
			prodId = GetProperty(""prodId"");
			vDIAmt = GetProperty(""DIAmount"");
			vAccCashBack = GetProperty(""AccountCashBack"");
		}
		with(sBC)
		{
			InvokeMethod(""SetAdminMode"", ""TRUE"");
			ActivateField(""Order Header Id"");    
			ActivateField(""STC Portal Line Id"");
			ActivateField(""STC Portal Line Id"");
			ActivateField(""STC Portal Line Id"");
			SetViewMode(""AllView"");
			ClearToQuery();

			if(vObjectId != null && vObjectId != """")
				vSearchExpr = ""[Id]='""+vObjectId+""'"";
			else
				vSearchExpr = ""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product Id]='""+prodId+""'"";
			SetSearchExpr(vSearchExpr);
			ExecuteQuery(ForwardOnly);
			sRec = FirstRecord();
			if(sRec)
			{
				vParentLineId = GetFieldValue(""Id"");
				//TheApplication().RaiseErrorText(AccessLintItem);
				sBCD1 = sBO.GetBusComp(""Order Entry - Line Items (Simple)"");
				with (sBCD1)
				{
					sRec = false;
					InvokeMethod(""SetAdminMode"", ""TRUE"");
					ActivateField(""Order Header Id"");    
					ActivateField(""Parent Order Item Id"");
					ActivateField(""STC Portal Line Id"");
					ActivateField(""Body Style"");
					ActivateField(""Unit Price"");
					ActivateField(""Net Price"");
					ActivateField(""STC Portal Line Id"");
					SetViewMode(""AllView"");		 
					ClearToQuery();

					vSearchExpr2 = ""[Order Header Id]='""+orderid+""' AND [Parent Order Item Id]='""+vParentLineId+""' AND ([STC Plan Segregation]='Installment' OR [STC Plan Segregation]='OtherInstallment' OR [Body Style]='DIAccessory')"";

					SetSearchExpr(vSearchExpr2);
					ExecuteQuery(ForwardOnly);
					sRec = FirstRecord();
					if(sRec)
					{
						SetFieldValue(""Unit Price"", vDIAmt);
						SetFieldValue(""Net Price"", vDIAmt);
						WriteRecord();
					}
				}//With DI

				if(vAccCashBack != null && vAccCashBack != """")
				{
					sBCD2 = sBO.GetBusComp(""Order Entry - Line Items (Simple)"");
					with (sBCD2)
					{
						sRec = false;
						InvokeMethod(""SetAdminMode"", ""TRUE"");
						ActivateField(""Order Header Id"");    
						ActivateField(""Parent Order Item Id"");
						ActivateField(""STC Portal Line Id"");
						ActivateField(""STC Plan Type"");
						ActivateField(""Unit Price"");
						ActivateField(""Net Price"");
						SetViewMode(""AllView"");		 
						ClearToQuery();

						vSearchExpr2 = ""[Order Header Id]='""+orderid+""' AND [Parent Order Item Id]='""+vParentLineId+""' AND ([STC Plan Type]='Account Cashback')"";

						SetSearchExpr(vSearchExpr2);
						ExecuteQuery(ForwardOnly);
						sRec = FirstRecord();
						if(sRec)
						{
							SetFieldValue(""Unit Price"", -1 * ToNumber(vAccCashBack));
							SetFieldValue(""Net Price"", -1 * ToNumber(vAccCashBack));
							WriteRecord();
						}
					}//With AccountCashBack
				}//end if(vAccCashBack != null
			}//Device sRec
		}
    }
	catch(e)
	{
		throw(e);
	}
	finally
	{
		sBCD1 = null; sBCD2 = null; sBC = null;
		sBO = null;
	}
}
function UpdateDeviceInsurance(Inputs, Outputs)
{//Navin/Jithin:eShop Insurance Option
	try
	{
		var sParentLinkId = Inputs.GetProperty(""sParentLinkId"");
		var orderid= Inputs.GetProperty(""orderid"");
		var sPortalLineId= Inputs.GetProperty(""sPortalLineId"");
		var sDevInsAmt = Inputs.GetProperty(""DevInsAmount"");
		var sRec, sAssetIntegId, sColor, sProduct, SearchSpec;
		var QBS=TheApplication().GetService(""STC Siebel Operation BS"");
		var sInp = TheApplication().NewPropertySet();
		var sOut = TheApplication().NewPropertySet();
		var sBO = TheApplication().GetBusObject(""Order Entry (Sales)"");
		var sBC = sBO.GetBusComp(""Order Entry - Line Items (Simple)"");
		with(sBC)
		{
			InvokeMethod(""SetAdminMode"", ""TRUE"") 
			ActivateField(""Asset Integration Id"");
			ActivateField(""Color"");    
			ActivateField(""Product"");
			ActivateField(""STC Portal Line Id"");
			ActivateField(""STC Is Device Picked"");
			ClearToQuery();
			SetSearchSpec(""Order Header Id"",orderid);
			SetSearchSpec(""STC Portal Line Id"",sParentLinkId);
			ExecuteQuery(ForwardOnly);
			sRec = FirstRecord();
			if(sRec)
			{
				sAssetIntegId = GetFieldValue(""Asset Integration Id"");
				sColor = GetFieldValue(""Color"");
				sProduct = GetFieldValue(""Product""); 
				SetFieldValue(""STC Is Device Picked"", ""Y"");
				WriteRecord();
			} 
		}

		SearchSpec=""[Order Header Id]='""+orderid+""' AND [STC Portal Line Id]='""+sPortalLineId+""'"";
		with(sInp){
			SetProperty(""BusinessObject"",""Order Entry (Sales)"");
			SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
			SetProperty(""SearchExpression"",SearchSpec);
			SetProperty(""STC Contract Par Asset Integ Id"",sAssetIntegId);
			SetProperty(""STC Parent Device Attribute"",sColor);
			SetProperty(""STC Parent Device Name"",sProduct);
			if(sDevInsAmt != null && sDevInsAmt != """"){
				SetProperty(""Unit Price"", sDevInsAmt);
				SetProperty(""Net Price"", sDevInsAmt);
			}
		}
			   
		QBS.InvokeMethod(""SiebelUpdate"",sInp,sOut);
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Code"",e.errCode);
		Outputs.SetProperty(""Error Message"",e.errText);
	}
	finally
	{
		QBS = null; sInp = null; sOut = null;
		sBC = null;
		sBO = null;
	}
}
function AddNewLineItem(Inputs,Outputs)
{
 var OrderBO = TheApplication().GetBusObject(""Order Entry (Sales)"");
 var OrdLineBC = OrderBO.GetBusComp(""Order Entry - Line Items (Simple)"");
 //var psPorts    = TheApplication().NewPropertySet();
 //var ProdPrice = ToNumber(ProductPrice);
 var vNewLineItemId = """";
 //var psRootPort    = TheApplication().NewPropertySet();
 
 try
 {
  //Outputs.SetProperty(""Error Message"",""SUCCESS"");
  //Outputs.SetProperty(""Error Code"",""0000"");
  with(OrdLineBC)
  {
   ActivateField(""Status"");
   ActivateField(""Cfg State Code"");
   ActivateField(""Billing Account Id"");
   ActivateField(""Billing Profile Id"");
   ActivateField(""Net Price"");
   ActivateField(""Order Header Id"");
   ActivateField(""Product Id"");
   ActivateField(""Id"");
   ActivateField(""Root Order Item Id"");
   ActivateField(""Service Account Id"");
   ActivateField(""Service Id"");
   ActivateField(""Product Port Id"");
   ActivateField(""Prod Item Id"");

   NewRecord(NewAfter);

   SetFieldValue(""Status"",Inputs.GetProperty(""Output0""));
   SetFieldValue(""Cfg State Code"",Inputs.GetProperty(""Output1""));
   SetFieldValue(""Billing Account Id"",Inputs.GetProperty(""Output2""));
   SetFieldValue(""Billing Profile Id"",Inputs.GetProperty(""Output3""));
   SetFieldValue(""Net Price"","""");
   SetFieldValue(""Order Header Id"",Inputs.GetProperty(""Output5""));
   SetFieldValue(""Parent Order Item Id"",Inputs.GetProperty(""Output7""));
   SetFieldValue(""Root Order Item Id"",Inputs.GetProperty(""Output8""));
   SetFieldValue(""Service Account Id"",Inputs.GetProperty(""Output9""));
   SetFieldValue(""Service Id"",Inputs.GetProperty(""Output10""));
   
   
   SetFieldValue(""Product Id"",Inputs.GetProperty(""Output12""));
   if(Inputs.GetProperty(""Output13"")==""""||Inputs.GetProperty(""Output13"")=='' ||Inputs.GetProperty(""Output13"")== null)
   {
    SetFieldValue(""Prod Item Id"",Inputs.GetProperty(""Output14""));
    SetFieldValue(""Product Port Id"",Inputs.GetProperty(""Output14""));
   }
   else if(Inputs.GetProperty(""Output14"")==""""||Inputs.GetProperty(""Output14"")=='' ||Inputs.GetProperty(""Output14"")== null)
   {
    SetFieldValue(""Prod Item Id"",Inputs.GetProperty(""Output13""));
    SetFieldValue(""Product Port Id"",Inputs.GetProperty(""Output13""));
   }
   else
   {
    SetFieldValue(""Prod Item Id"",Inputs.GetProperty(""Output13""));
    SetFieldValue(""Product Port Id"",Inputs.GetProperty(""Output14""));
   }


   WriteRecord();

  }
 }
 catch(e)
 {
  Outputs.SetProperty(""Error Code"",e.errCode);
  Outputs.SetProperty(""Error Message"",e.errText);
 }
 finally
 {
   OrdLineBC = null;
   OrderBO = null;
 }
}
"
function AddProduct(Inputs,Outputs)
{

 var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");
 var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");
 var QBS=TheApplication().GetService(""STC Siebel Operation BS"");

 var portaloid=Inputs.GetProperty(""Portal Order Id"");
 var orderid=Inputs.GetProperty(""CRM Order Id"");
 var lineitemid=Inputs.GetProperty(""CRM Order Line Item Id"");

 var addprod=Inputs.GetProperty(""AddProdId"");
 var pName='',SearchSpec='',parName='',prodName='',prodId='',parItemId='',parId='',origId='',pparRelId='';
 var doDiscontinue=false;

 var cnt=0;

 var inp=TheApplication().NewPropertySet();
 var out=TheApplication().NewPropertySet();
 var inp1=TheApplication().NewPropertySet();
 var out1=TheApplication().NewPropertySet();

 try
 {
  Outputs.SetProperty(""Error Message"","""");
  Outputs.SetProperty(""Error Code"",""1111"");


  SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending') AND [Line Item.STC Parent Order Item Id] IS NOT NULL"";
  inp.SetProperty(""OutputIntObjectName"",""STC ECommerce Order IO"");
  inp.SetProperty(""SearchSpec"",SearchSpec);
  //To Get the Ecommerce Line Item Structure
  ESiebelAdapter.InvokeMethod(""Query"",inp,out);
  var NumChild=out.GetProperty(""NumOutputObjects"");
  if(out.GetChild(0).GetChild(0).GetChildCount()>=1)
  {
   if(out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
   {
    cnt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
   }
  }
  if (cnt>=1)
  {
   //TheApplication().RaiseErrorText(""No Child Item"");
  
   for(var i=0;i<cnt;i++)
   {
    prodName=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Name"");
    prodId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Id"");
    parItemId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Parent Order Item Id"");
   //Get the parent item name for the child
    
    inp1.Reset();
    out1.Reset();
 
    inp1.SetProperty(""BusinessObject"",""STC ECommerce Order BO"");
    inp1.SetProperty(""BusinessComponent"",""STC ECom Order Item BC"");
    inp1.SetProperty(""SearchExpression"",""[STC Parent Portal Order Id]='""+portaloid+""' AND [STC Portal Line Item Id]='""+parItemId+""'"");
    inp1.SetProperty(""Field0"",""STC Prod Name"");
    inp1.SetProperty(""Field1"",""STC Prod Id"");
  
    QBS.InvokeMethod(""SiebelQuery"",inp1,out1);
    parName=out1.GetProperty(""Output0"");
    parId=out1.GetProperty(""Output1"");
 
    if(parName ==''||parName==""""||parId ==''||parId=="""")
    {
     TheApplication().RaiseErrorText(""No parent Line Item for the mentioned Child Item"");
    }
   //Get the Relation of the Child product with the parent
    inp1.Reset();
    out1.Reset();
 
    SearchSpec=""[RCOIS Enhanced Chid Prd Structure BC.Sub Obj Id]='""+prodId+""' AND [RCOIS Enhanced Chid Prd Structure BC.Last Vers]='999999999' AND [RCOIS Enhanced Parent Prd Structure BC.Par Rel Id] IS NULL AND [RCOIS Enhanced Parent Prd Structure BC.Last Vers]='999999999' AND [RCOIS Enhanced PROD Admin BC.Name]='""+parName+""'"";
    inp1.SetProperty(""SearchSpec"",SearchSpec);
    inp1.SetProperty(""OutputIntObjectName"",""RCOIS Enhanced Admin ISS Product Deftn Custom"");
    ESiebelAdapter.InvokeMethod(""Query"",inp1,out1);
 
    var NumChild1=out1.GetProperty(""NumOutputObjects"");
    if(out1.GetChild(0).GetChild(0).GetChildCount()>=1)
    {
      NumChild1=out1.GetChild(0).GetChild(0).GetChildCount();
 
    }
    if (NumChild1<=0)
    {
     TheApplication().RaiseErrorText(""No Product Relationship"");
    }
 
    for(var j=0;j<NumChild1;j++)
    {
     if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChildCount()>=1)
     {
      if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChildCount()>=1)
      {
       if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
       {
        if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount() >=1)
        {
         if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
         {
          origId=out1.GetChild(0).GetChild(0).GetChild(j).GetProperty(""Orig Id"");
          pparRelId=out1.GetChild(0).GetChild(0).GetChild(j).GetProperty(""Par Rel Id"");
         }
        }
       }
      }
     }
    }
    if((origId =="""" || origId=='') && (pparRelId =="""" || pparRelId==''))
    {
     TheApplication().RaiseErrorText(""Null RelationShip IDs"");
    }
 //Get Parent Order To Insert the product
    inp1.Reset();
    out1.Reset();
 
    inp1.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
    inp1.SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
    inp1.SetProperty(""SearchExpression"",""[Order Header Id]='""+orderid+""' AND [Product]='""+parName+""' AND [Product Id]='""+parId+""' AND [Action Code]='Add' AND [STC Portal Line Id]='""+parItemId+""'"");
    inp1.SetProperty(""Field0"",""Status"");
    inp1.SetProperty(""Field1"",""Cfg State Code"");
    inp1.SetProperty(""Field2"",""Billing Account Id"");
    inp1.SetProperty(""Field3"",""Billing Profile Id"");
    inp1.SetProperty(""Field4"",""Net Price"");
    inp1.SetProperty(""Field5"",""Order Header Id"");
    inp1.SetProperty(""Field6"",""Product Id"");
    inp1.SetProperty(""Field7"",""Id"");
    inp1.SetProperty(""Field8"",""Root Order Item Id"");
    inp1.SetProperty(""Field9"",""Service Account Id"");
    inp1.SetProperty(""Field10"",""Service Id"");
  
    QBS.InvokeMethod(""SiebelQuery"",inp1,out1);
 
    out1.SetProperty(""Output11"",prodName);
    out1.SetProperty(""Output12"",prodId);
    out1.SetProperty(""Output13"",origId);
    out1.SetProperty(""Output14"",pparRelId);
 
    inp1.Reset();
    inp1.SetProperty(""Error Message"","""");
    inp1.SetProperty(""Error Code"",""1111"");
 
    AddNewLineItem(out1.Copy(),inp1);
 
    if(inp1.GetProperty(""Error Code"")!=""1111"")
    {
     TheApplication().RaiseErrorText(""Error While Adding the Line Item"");
    }
    
   }
  }


 }
 catch(e)
 {
  Outputs.SetProperty(""Error Code"",e.errCode);
  Outputs.SetProperty(""Error Message"",e.errText);
 }
 finally
 {
 }
}
function AddProduct(Inputs,Outputs)
{

 var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");
 var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");
 var QBS=TheApplication().GetService(""STC Siebel Operation BS"");

 var portaloid=Inputs.GetProperty(""Portal Order Id"");
 var orderid=Inputs.GetProperty(""CRM Order Id"");
 var lineitemid=Inputs.GetProperty(""CRM Order Line Item Id"");

 var addprod=Inputs.GetProperty(""AddProdId"");
 var pName='',SearchSpec='',parName='',prodName='',prodId='',parItemId='',parId='',origId='',pparRelId='';
 var doDiscontinue=false;

 var cnt=0;

 var inp=TheApplication().NewPropertySet();
 var out=TheApplication().NewPropertySet();
 var inp1=TheApplication().NewPropertySet();
 var out1=TheApplication().NewPropertySet();

 try
 {
  Outputs.SetProperty(""Error Message"","""");
  Outputs.SetProperty(""Error Code"",""1111"");


  SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Order CRM Id]='""+orderid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending') AND [Line Item.STC Parent Order Item Id] IS NOT NULL"";
  inp.SetProperty(""OutputIntObjectName"",""STC ECommerce Order IO"");
  inp.SetProperty(""SearchSpec"",SearchSpec);
  //To Get the Ecommerce Line Item Structure
  ESiebelAdapter.InvokeMethod(""Query"",inp,out);
  var NumChild=out.GetProperty(""NumOutputObjects"");
  if(out.GetChild(0).GetChild(0).GetChildCount()>=1)
  {
   if(out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
   {
    cnt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
   }
  }
  if (cnt>=1)
  {
   //TheApplication().RaiseErrorText(""No Child Item"");
  
   for(var i=0;i<cnt;i++)
   {
    prodName=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Name"");
    prodId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Id"");
    parItemId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Parent Order Item Id"");
   //Get the parent item name for the child
    
    inp1.Reset();
    out1.Reset();
 
    inp1.SetProperty(""BusinessObject"",""STC ECommerce Order BO"");
    inp1.SetProperty(""BusinessComponent"",""STC ECom Order Item BC"");
    inp1.SetProperty(""SearchExpression"",""[STC Parent Portal Order Id]='""+portaloid+""' AND [STC Portal Line Item Id]='""+parItemId+""'"");
    inp1.SetProperty(""Field0"",""STC Prod Name"");
    inp1.SetProperty(""Field1"",""STC Prod Id"");
  
    QBS.InvokeMethod(""SiebelQuery"",inp1,out1);
    parName=out1.GetProperty(""Output0"");
    parId=out1.GetProperty(""Output1"");
 
    if(parName ==''||parName==""""||parId ==''||parId=="""")
    {
     TheApplication().RaiseErrorText(""No parent Line Item for the mentioned Child Item"");
    }
   //Get the Relation of the Child product with the parent
    inp1.Reset();
    out1.Reset();
 
    SearchSpec=""[RCOIS Enhanced Chid Prd Structure BC.Sub Obj Id]='""+prodId+""' AND [RCOIS Enhanced Chid Prd Structure BC.Last Vers]='999999999' AND [RCOIS Enhanced Parent Prd Structure BC.Par Rel Id] IS NULL AND [RCOIS Enhanced Parent Prd Structure BC.Last Vers]='999999999' AND [RCOIS Enhanced PROD Admin BC.Name]='""+parName+""'"";
    inp1.SetProperty(""SearchSpec"",SearchSpec);
    inp1.SetProperty(""OutputIntObjectName"",""RCOIS Enhanced Admin ISS Product Deftn Custom"");
    ESiebelAdapter.InvokeMethod(""Query"",inp1,out1);
 
    var NumChild1=out1.GetProperty(""NumOutputObjects"");
    if(out1.GetChild(0).GetChild(0).GetChildCount()>=1)
    {
      NumChild1=out1.GetChild(0).GetChild(0).GetChildCount();
 
    }
    if (NumChild1<=0)
    {
     TheApplication().RaiseErrorText(""No Product Relationship"");
    }
 
    for(var j=0;j<NumChild1;j++)
    {
     if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChildCount()>=1)
     {
      if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChildCount()>=1)
      {
       if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
       {
        if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount() >=1)
        {
         if(out1.GetChild(0).GetChild(0).GetChild(j).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
         {
          origId=out1.GetChild(0).GetChild(0).GetChild(j).GetProperty(""Orig Id"");
          pparRelId=out1.GetChild(0).GetChild(0).GetChild(j).GetProperty(""Par Rel Id"");
         }
        }
       }
      }
     }
    }
    if((origId =="""" || origId=='') && (pparRelId =="""" || pparRelId==''))
    {
     TheApplication().RaiseErrorText(""Null RelationShip IDs"");
    }
 //Get Parent Order To Insert the product
    inp1.Reset();
    out1.Reset();
 
    inp1.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
    inp1.SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
    inp1.SetProperty(""SearchExpression"",""[Order Header Id]='""+orderid+""' AND [Product]='""+parName+""' AND [Product Id]='""+parId+""' AND [Action Code]='Add' AND [STC Portal Line Id]='""+parItemId+""'"");
    inp1.SetProperty(""Field0"",""Status"");
    inp1.SetProperty(""Field1"",""Cfg State Code"");
    inp1.SetProperty(""Field2"",""Billing Account Id"");
    inp1.SetProperty(""Field3"",""Billing Profile Id"");
    inp1.SetProperty(""Field4"",""Net Price"");
    inp1.SetProperty(""Field5"",""Order Header Id"");
    inp1.SetProperty(""Field6"",""Product Id"");
    inp1.SetProperty(""Field7"",""Id"");
    inp1.SetProperty(""Field8"",""Root Order Item Id"");
    inp1.SetProperty(""Field9"",""Service Account Id"");
    inp1.SetProperty(""Field10"",""Service Id"");
  
    QBS.InvokeMethod(""SiebelQuery"",inp1,out1);
 
    out1.SetProperty(""Output11"",prodName);
    out1.SetProperty(""Output12"",prodId);
    out1.SetProperty(""Output13"",origId);
    out1.SetProperty(""Output14"",pparRelId);
 
    inp1.Reset();
    inp1.SetProperty(""Error Message"","""");
    inp1.SetProperty(""Error Code"",""1111"");
 
    AddNewLineItem(out1.Copy(),inp1);
 
    if(inp1.GetProperty(""Error Code"")!=""1111"")
    {
     TheApplication().RaiseErrorText(""Error While Adding the Line Item"");
    }
    
   }
  }


 }
 catch(e)
 {
  Outputs.SetProperty(""Error Code"",e.errCode);
  Outputs.SetProperty(""Error Message"",e.errText);
 }
 finally
 {
 }
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	try
	{
		switch(MethodName)
		{
			case ""AddProduct"":
				Outputs.SetProperty(""Error Code"",""0000"");
				Outputs.SetProperty(""Error Message"",""SUCCESS"");
				AddProduct(Inputs , Outputs);
				if(Outputs.GetProperty(""Error Code"") != ""1111"")
				{
					Outputs.SetProperty(""Error Debug Message"",Outputs.GetProperty(""Error Message""));
					TheApplication().RaiseErrorText(""Add Product Function Execption"");
				}
				else
				{
					Outputs.SetProperty(""Error Code"",""0000"");
					Outputs.SetProperty(""Error Message"",""SUCCESS"");
				}
				return(CancelOperation);
			case ""UpdateDetails"":
				Outputs.SetProperty(""Error Code"",""0000"");
				Outputs.SetProperty(""Error Message"",""SUCCESS"");
				UpdateDetails(Inputs , Outputs);
				if(Outputs.GetProperty(""Error Code"") != ""1111"")
				{
					Outputs.SetProperty(""Error Debug Message"",Outputs.GetProperty(""Error Message""));
					TheApplication().RaiseErrorText(""Add Product Function Execption"");
				}
				else
				{
					Outputs.SetProperty(""Error Code"",""0000"");
					Outputs.SetProperty(""Error Message"",""SUCCESS"");
				}
				return(CancelOperation);

			default:
				return(ContinueOperation);
		}
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Code"",e.errCode);
		Outputs.SetProperty(""Error Message"",e.errText);
	}
	finally
	{
		//Inputs.Reset();
		//Outputs.Reset();
	}
return (ContinueOperation);
}
function UpdateDetails(Inputs,Outputs)
{
	var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");
	//var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");
	var QBS=TheApplication().GetService(""STC Siebel Operation BS"");

	var portaloid=Inputs.GetProperty(""Portal Order Id"");
	var orderid=Inputs.GetProperty(""CRM Order Id"");
	var updateType=Inputs.GetProperty(""UpdateType"");
	var cnt=0;

	//var addprod=Inputs.GetProperty(""AddProdId"");
	var pName='',SearchSpec='',parName='',prodName='',prodId='',action='',prodcat='',amt='',pparRelId='', sAdvPay, sIntNum, prodItemCat='';
	var vObjectId='', vDIAmt='', vDIDiscAmt='', vAccCashBack='', vVivaCashBack='', vDeviceRRP='';
	//var doDiscontinue=false;
	var sPartCode = '', sParentLinkId='', sPortalLineId='', sOrderLineId='';
	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var inp1=TheApplication().NewPropertySet();
	var out1=TheApplication().NewPropertySet();
	var out2=TheApplication().NewPropertySet();
	var inp3=TheApplication().NewPropertySet();
	var out3=TheApplication().NewPropertySet();
	var out4=TheApplication().NewPropertySet();
	var sInp1=TheApplication().NewPropertySet();
	var sOut1=TheApplication().NewPropertySet();
	var sInp=TheApplication().NewPropertySet();
	var sOut=TheApplication().NewPropertySet();

	try
	{
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"",""1111"");

		if(updateType==""Partial"")
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending') AND [Line Item.STC Parent Order Item Id] IS NULL"";
		}
		else if(updateType==""All"")
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending')"";
		}
		else
		{
			TheApplication().RaiseErrorText(""Update Type Specified is Wrong"");
		}
		inp.SetProperty(""OutputIntObjectName"",""STC ECommerce Order IO"");
		inp.SetProperty(""SearchSpec"",SearchSpec);
		//To Get the Ecommerce Line Item Structure
		ESiebelAdapter.InvokeMethod(""Query"",inp,out);
		var NumChild=out.GetProperty(""NumOutputObjects"");
		if(out.GetChild(0).GetChild(0).GetChildCount()>=1)
		{
			if(out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
			{
				cnt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
			}
		}
		if (cnt>=1)
		{
			//TheApplication().RaiseErrorText(""No Eshop Child Item"");
			
			for(var i=0;i<cnt;i++)
			{
				prodName=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Name"");
				prodId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Id"");
				action=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Action Code"");
				//action=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Action Code"");
				prodcat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Category"");
				prodItemCat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Item Category"");
				sPartCode=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Part Code"");
				sParentLinkId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Parent Link Id"");
				//Get the parent item name for the child
				
				inp1.Reset();
				out1.Reset();
	
				inp1.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
				inp1.SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
				SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND [STC Portal Line Id] IS NULL AND [STC Portal Session Id] IS NULL"";
				inp1.SetProperty(""SearchExpression"",SearchSpec);
				inp1.SetProperty(""Field0"",""Id"");
				QBS.InvokeMethod(""SiebelQuery"",inp1,out1);
	
				if(out1.GetProperty(""RecordCount"")>0)
				{
					sOrderLineId = out1.GetProperty(""Output0"");
					inp1.Reset();
					out1.Reset();
	
					inp1.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
					inp1.SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
				    
				    //SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND [STC Portal Line Id] IS NULL AND [STC Portal Session Id] IS NULL"";
				    
				    SearchSpec=""[Id]='""+sOrderLineId+""'"";
				    inp1.SetProperty(""SearchExpression"",SearchSpec);
	
					inp1.SetProperty(""STC POS Inventory Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Pos Inventory Id""));
					inp1.SetProperty(""STC Portal Session Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Session Id""));
					inp1.SetProperty(""STC Shop Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Shop Id""));
					inp1.SetProperty(""STC Portal Line Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id""));
					inp1.SetProperty(""STC POS Inventory Name"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Pos Inventory Name""));

					amt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Amount"");
					if(action==""Add"" && (prodcat==""Equipment"" || prodcat==""Accessories""))
					{
						inp1.SetProperty(""Unit Price"",amt);
						inp1.SetProperty(""Net Price"",amt);				
					}
					if(action==""Add"" && prodcat==""Discount"")
					{
						inp1.SetProperty(""Unit Price"",""-""+amt);
						inp1.SetProperty(""Net Price"",""-""+amt);
					}
		
					try
					{
						QBS.InvokeMethod(""SiebelUpdate"",inp1,out1);
					}
					catch(a)
					{
						out2.SetProperty(""Error Code"",a.errCode);
						out2.SetProperty(""Error Message"",a.errText);
					}
				}//end of if(out1.GetProperty(""RecordCount"")>0)

				if(action==""Add"" && ((prodcat==""Equipment"" && prodItemCat != 'Retail Device') || prodcat==""Accessories""))
				{
					inp3.Reset();
					out3.Reset();

					SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""'"";
					with(inp3){
						SetProperty(""BusinessObject"",""Order Entry (Sales)"");
						SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
						SetProperty(""SearchExpression"",SearchSpec);
					}

					sAdvPay=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Advance Payment"");
					sIntNum=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Number Installment"");						
					vDIAmt = out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC DI Amount"");
					vDIDiscAmt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC DI Discount Amount"");
					vAccCashBack=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Account Cash Back"");
					vVivaCashBack=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC VIVA Cash Back"");
					vDeviceRRP=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Device RRP"");
					with(inp3){
						SetProperty(""STC Advance Payment"",sAdvPay);
						SetProperty(""STC Number Installment"",sIntNum);
						SetProperty(""STC DI Discount Amount"", vDIDiscAmt);	
						SetProperty(""STC Account Cash Back"", vAccCashBack);	
						SetProperty(""STC VIVA Cash Back"", vVivaCashBack);
						SetProperty(""Cost"", vDeviceRRP);	
					}
					try
					{
						QBS.InvokeMethod(""SiebelUpdate"",inp3,out3);

						vObjectId = out3.GetProperty(""ObjectId"");
					}
					catch(b)
					{
						out4.SetProperty(""Error Code"",b.errCode);
						out4.SetProperty(""Error Message"",b.errText);
					}

					if ((vDIAmt != null && vDIAmt != """") || (vAccCashBack != null && vAccCashBack != """"))
					{
						sInp1.Reset();
						sOut1.Reset();
						with(sInp1){
							SetProperty(""ObjectId"", vObjectId);
							SetProperty(""orderid"", orderid);
							SetProperty(""prodId"", prodId);
							SetProperty(""prodName"", prodName);
							SetProperty(""action"", action);
							SetProperty(""DIAmount"", vDIAmt);
							SetProperty(""AccountCashBack"", vAccCashBack);
						}
						UpdateDeviceInstallment(sInp1,sOut1);
						//sInp1 = null; sOut1 = null;
					}
				}//if(action==""Add"" &&
				
				sPartCode = sPartCode.substr(0,15);
				if((sParentLinkId != null && sParentLinkId != """") && (sPartCode == ""DEVICEINSURANCE""))
				{//Navin/Jithin:eShop Insurance Option
					sInp.Reset();
					sOut.Reset();
					sPortalLineId= out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id"");
					amt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Amount"");
					with(sInp){
						SetProperty(""sParentLinkId"", sParentLinkId);
						SetProperty(""orderid"", orderid);
						SetProperty(""sPortalLineId"", sPortalLineId);
						//SetProperty(""DevInsAmount"", amt);
					}
					UpdateDeviceInsurance(sInp, sOut);
					//sInp = null; sOut = null;
				}
			}//end of for loop
		}//end of if (cnt>=1)
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Code"",e.errCode);
		Outputs.SetProperty(""Error Message"",e.errText);
	}
	finally
	{
		sInp = null; sOut = null;
		sInp1 = null; sOut1 = null;
		inp = null;	out = null;
		inp1 = null; out1 = null; out2 = null;
		inp3 = null; out3 = null;  out4 = null;
		QBS = null; ESiebelAdapter = null;
	}
}
function UpdateDetails(Inputs,Outputs)
{
	var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");
	//var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");
	var QBS=TheApplication().GetService(""STC Siebel Operation BS"");

	var portaloid=Inputs.GetProperty(""Portal Order Id"");
	var orderid=Inputs.GetProperty(""CRM Order Id"");
	var updateType=Inputs.GetProperty(""UpdateType"");
	var cnt=0;

	//var addprod=Inputs.GetProperty(""AddProdId"");
	var pName='',SearchSpec='',parName='',prodName='',prodId='',action='',prodcat='',amt='',pparRelId='', sAdvPay, sIntNum, prodItemCat='';
	var vObjectId='', vDIAmt='', vDIDiscAmt='', vAccCashBack='', vVivaCashBack='', vDeviceRRP='';
	//var doDiscontinue=false;
	var sPartCode = '', sParentLinkId='', sPortalLineId='', sOrderLineId='',vPortalLineId='';
	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var inp1=TheApplication().NewPropertySet();
	var out1=TheApplication().NewPropertySet();
	var out2=TheApplication().NewPropertySet();
	var inp3=TheApplication().NewPropertySet();
	var out3=TheApplication().NewPropertySet();
	var out4=TheApplication().NewPropertySet();
	var sInp1=TheApplication().NewPropertySet();
	var sOut1=TheApplication().NewPropertySet();
	var sInp=TheApplication().NewPropertySet();
	var sOut=TheApplication().NewPropertySet();

	try
	{
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"",""1111"");

		if(updateType==""Partial"")
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Order CRM Id]='""+orderid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending') AND [Line Item.STC Parent Order Item Id] IS NULL"";
		}
		else if(updateType==""All"")
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Order CRM Id]='""+orderid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending')"";
		}
		else
		{
			TheApplication().RaiseErrorText(""Update Type Specified is Wrong"");
		}
		inp.SetProperty(""OutputIntObjectName"",""STC ECommerce Order IO"");
		inp.SetProperty(""SearchSpec"",SearchSpec);
		//To Get the Ecommerce Line Item Structure
		ESiebelAdapter.InvokeMethod(""Query"",inp,out);
		var NumChild=out.GetProperty(""NumOutputObjects"");
		if(out.GetChild(0).GetChild(0).GetChildCount()>=1)
		{
			if(out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
			{
				cnt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
			}
		}
		if (cnt>=1)
		{
			//TheApplication().RaiseErrorText(""No Eshop Child Item"");
			
			for(var i=0;i<cnt;i++)
			{
				prodName=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Name"");
				prodId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Id"");
				action=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Action Code"");
				//action=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Action Code"");
				prodcat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Category"");
				prodItemCat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Item Category"");
				sPartCode=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Part Code"");
				sParentLinkId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Parent Link Id"");
				//Get the parent item name for the child
				
				inp1.Reset();
				out1.Reset();
				Outputs.AddChild(out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i));
	
				inp1.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
				inp1.SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
				//SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND [STC Portal Line Id] IS NULL AND [STC Portal Session Id] IS NULL"";
				SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND (([STC Portal Line Id] IS NULL AND [STC Portal Session Id] IS NULL) OR ([STC Order Sub Type]='Retail' AND [STC Portal Session Id] IS NULL))""; //Abuzar:23062021- Handled for Retail eShop Orders.
				inp1.SetProperty(""SearchExpression"",SearchSpec);
				inp1.SetProperty(""Field0"",""Id"");
				QBS.InvokeMethod(""SiebelQuery"",inp1,out1);
	
				if(out1.GetProperty(""RecordCount"")>0)
				{
					sOrderLineId = out1.GetProperty(""Output0"");
					inp1.Reset();
					out1.Reset();
	
					inp1.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
					inp1.SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
				    
				    //SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND [STC Portal Line Id] IS NULL AND [STC Portal Session Id] IS NULL"";
				    
				    SearchSpec=""[Id]='""+sOrderLineId+""'"";
				    inp1.SetProperty(""SearchExpression"",SearchSpec);
	
					inp1.SetProperty(""STC POS Inventory Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Pos Inventory Id""));
					inp1.SetProperty(""STC Portal Session Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Session Id""));
					inp1.SetProperty(""STC Shop Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Shop Id""));
					inp1.SetProperty(""STC Portal Line Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id""));
					inp1.SetProperty(""STC POS Inventory Name"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Pos Inventory Name""));
					inp1.SetProperty(""Reservation Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Reservation Id""));			//Indrasen:31Jan2021:Stock Release POS
					
					amt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Amount"");
					if(action==""Add"" && (prodcat==""Equipment"" || prodcat==""Accessories"" || prodItemCat == ""Standard Charges Additional"" ||prodItemCat ==""Standard Charges"" || prodItemCat == ""Delivery Charges Additional"" ||prodItemCat ==""Delivery Charges"")) //Hardik:Added New item Category
					{
						inp1.SetProperty(""Unit Price"",amt);
						inp1.SetProperty(""Net Price"",amt);				
					}
					if(action==""Add"" && prodcat==""Discount"")
					{
						inp1.SetProperty(""Unit Price"",""-""+amt);
						inp1.SetProperty(""Net Price"",""-""+amt);
					}
		
					try
					{
						QBS.InvokeMethod(""SiebelUpdate"",inp1,out1);
					}
					catch(a)
					{
						out2.SetProperty(""Error Code"",a.errCode);
						out2.SetProperty(""Error Message"",a.errText);
					}
				}//end of if(out1.GetProperty(""RecordCount"")>0)

				if(action==""Add"" && ((prodcat==""Equipment"" && prodItemCat != 'Retail Device') || prodcat==""Accessories""))
				{
					inp3.Reset();
					out3.Reset();

					if(prodcat ==""Accessories""){
					vPortalLineId = out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id"");
					SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND [STC Portal Line Id] ='""+vPortalLineId+""'"";
					}
					else
					SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""'"";
					with(inp3){
						SetProperty(""BusinessObject"",""Order Entry (Sales)"");
						SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
						SetProperty(""SearchExpression"",SearchSpec);
					}

					sAdvPay=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Advance Payment"");
					sIntNum=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Number Installment"");						
					vDIAmt = out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC DI Amount"");
					vDIDiscAmt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC DI Discount Amount"");
					vAccCashBack=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Account Cash Back"");
					vVivaCashBack=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC VIVA Cash Back"");
					vDeviceRRP=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Device RRP"");
					with(inp3){
						SetProperty(""STC Advance Payment"",sAdvPay);
						SetProperty(""STC Number Installment"",sIntNum);
						SetProperty(""STC DI Discount Amount"", vDIDiscAmt);	
						SetProperty(""STC Account Cash Back"", vAccCashBack);	
						SetProperty(""STC VIVA Cash Back"", vVivaCashBack);
						SetProperty(""Cost"", vDeviceRRP);	
					}
					try
					{
						QBS.InvokeMethod(""SiebelUpdate"",inp3,out3);

						vObjectId = out3.GetProperty(""ObjectId"");
					}
					catch(b)
					{
						out4.SetProperty(""Error Code"",b.errCode);
						out4.SetProperty(""Error Message"",b.errText);
					}

					if ((vDIAmt != null && vDIAmt != """") || (vAccCashBack != null && vAccCashBack != """"))
					{
						sInp1.Reset();
						sOut1.Reset();
						with(sInp1){
							SetProperty(""ObjectId"", vObjectId);
							SetProperty(""orderid"", orderid);
							SetProperty(""prodId"", prodId);
							SetProperty(""prodName"", prodName);
							SetProperty(""action"", action);
							SetProperty(""DIAmount"", vDIAmt);
							SetProperty(""AccountCashBack"", vAccCashBack);
						}
						UpdateDeviceInstallment(sInp1,sOut1);
						//sInp1 = null; sOut1 = null;
					}
				}//if(action==""Add"" &&
				
				sPartCode = sPartCode.substr(0,15);
				if((sParentLinkId != null && sParentLinkId != """") && (sPartCode == ""DEVICEINSURANCE""))
				{//Navin/Jithin:eShop Insurance Option
					sInp.Reset();
					sOut.Reset();
					sPortalLineId= out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id"");
					amt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Amount"");
					with(sInp){
						SetProperty(""sParentLinkId"", sParentLinkId);
						SetProperty(""orderid"", orderid);
						SetProperty(""sPortalLineId"", sPortalLineId);
						//SetProperty(""DevInsAmount"", amt);
					}
					UpdateDeviceInsurance(sInp, sOut);
					//sInp = null; sOut = null;
				}
			}//end of for loop
		}//end of if (cnt>=1)
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Code"",e.errCode);
		Outputs.SetProperty(""Error Message"",e.errText);
	}
	finally
	{
		sInp = null; sOut = null;
		sInp1 = null; sOut1 = null;
		inp = null;	out = null;
		inp1 = null; out1 = null; out2 = null;
		inp3 = null; out3 = null;  out4 = null;
		QBS = null; ESiebelAdapter = null;
	}
}
function UpdateDetails(Inputs,Outputs)
{
	var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");
	//var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");
	var QBS=TheApplication().GetService(""STC Siebel Operation BS"");

	var portaloid=Inputs.GetProperty(""Portal Order Id"");
	var orderid=Inputs.GetProperty(""CRM Order Id"");
	var updateType=Inputs.GetProperty(""UpdateType"");
	var cnt=0;

	//var addprod=Inputs.GetProperty(""AddProdId"");
	var pName='',SearchSpec='',parName='',prodName='',prodId='',action='',prodcat='',amt='',pparRelId='', sAdvPay, sIntNum, prodItemCat='';
	var vObjectId='', vDIAmt='', vDIDiscAmt='', vAccCashBack='', vVivaCashBack='', vDeviceRRP='';
	//var doDiscontinue=false;
	var sPartCode = '', sParentLinkId='', sPortalLineId='', sOrderLineId='',vPortalLineId='';
	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var inp1=TheApplication().NewPropertySet();
	var out1=TheApplication().NewPropertySet();
	var out2=TheApplication().NewPropertySet();
	var inp3=TheApplication().NewPropertySet();
	var out3=TheApplication().NewPropertySet();
	var out4=TheApplication().NewPropertySet();
	var sInp1=TheApplication().NewPropertySet();
	var sOut1=TheApplication().NewPropertySet();
	var sInp=TheApplication().NewPropertySet();
	var sOut=TheApplication().NewPropertySet();

	try
	{
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"",""1111"");

		if(updateType==""Partial"")
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Order CRM Id]='""+orderid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending') AND [Line Item.STC Parent Order Item Id] IS NULL"";
		}
		else if(updateType==""All"")
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Order CRM Id]='""+orderid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending')"";
		}
		else
		{
			TheApplication().RaiseErrorText(""Update Type Specified is Wrong"");
		}
		inp.SetProperty(""OutputIntObjectName"",""STC ECommerce Order IO"");
		inp.SetProperty(""SearchSpec"",SearchSpec);
		//To Get the Ecommerce Line Item Structure
		ESiebelAdapter.InvokeMethod(""Query"",inp,out);
		var NumChild=out.GetProperty(""NumOutputObjects"");
		if(out.GetChild(0).GetChild(0).GetChildCount()>=1)
		{
			if(out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
			{
				cnt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
			}
		}
		if (cnt>=1)
		{
			//TheApplication().RaiseErrorText(""No Eshop Child Item"");
			
			for(var i=0;i<cnt;i++)
			{
				prodName=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Name"");
				prodId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Id"");
				action=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Action Code"");
				//action=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Action Code"");
				prodcat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Category"");
				prodItemCat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Item Category"");
				sPartCode=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Part Code"");
				sParentLinkId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Parent Link Id"");
				//Get the parent item name for the child
				
				inp1.Reset();
				out1.Reset();
				Outputs.AddChild(out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i));
	
				inp1.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
				inp1.SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
				//SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND [STC Portal Line Id] IS NULL AND [STC Portal Session Id] IS NULL"";
				SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND (([STC Portal Line Id] IS NULL AND [STC Portal Session Id] IS NULL) OR ([STC Order Sub Type]='Retail'))""; //Abuzar:23062021- Handled for Retail eShop Orders.
				inp1.SetProperty(""SearchExpression"",SearchSpec);
				inp1.SetProperty(""Field0"",""Id"");
				QBS.InvokeMethod(""SiebelQuery"",inp1,out1);
	
				if(out1.GetProperty(""RecordCount"")>0)
				{
					sOrderLineId = out1.GetProperty(""Output0"");
					inp1.Reset();
					out1.Reset();
	
					inp1.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
					inp1.SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
				    
				    //SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND [STC Portal Line Id] IS NULL AND [STC Portal Session Id] IS NULL"";
				    
				    SearchSpec=""[Id]='""+sOrderLineId+""'"";
				    inp1.SetProperty(""SearchExpression"",SearchSpec);
	
					inp1.SetProperty(""STC POS Inventory Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Pos Inventory Id""));
					inp1.SetProperty(""STC Portal Session Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Session Id""));
					inp1.SetProperty(""STC Shop Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Shop Id""));
					inp1.SetProperty(""STC Portal Line Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id""));
					inp1.SetProperty(""STC POS Inventory Name"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Pos Inventory Name""));
					inp1.SetProperty(""Reservation Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Reservation Id""));			//Indrasen:31Jan2021:Stock Release POS
					
					amt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Amount"");
					if(action==""Add"" && (prodcat==""Equipment"" || prodcat==""Accessories"" || prodItemCat == ""Standard Charges Additional"" ||prodItemCat ==""Standard Charges"" || prodItemCat == ""Delivery Charges Additional"" ||prodItemCat ==""Delivery Charges"")) //Hardik:Added New item Category
					{
						inp1.SetProperty(""Unit Price"",amt);
						inp1.SetProperty(""Net Price"",amt);				
					}
					if(action==""Add"" && prodcat==""Discount"")
					{
						inp1.SetProperty(""Unit Price"",""-""+amt);
						inp1.SetProperty(""Net Price"",""-""+amt);
					}
		
					try
					{
						QBS.InvokeMethod(""SiebelUpdate"",inp1,out1);
					}
					catch(a)
					{
						out2.SetProperty(""Error Code"",a.errCode);
						out2.SetProperty(""Error Message"",a.errText);
					}
				}//end of if(out1.GetProperty(""RecordCount"")>0)

				if(action==""Add"" && ((prodcat==""Equipment"" && prodItemCat != 'Retail Device') || prodcat==""Accessories""))
				{
					inp3.Reset();
					out3.Reset();

					if(prodcat ==""Accessories""){
					vPortalLineId = out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id"");
					SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND [STC Portal Line Id] ='""+vPortalLineId+""'"";
					}
					else
					SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""'"";
					with(inp3){
						SetProperty(""BusinessObject"",""Order Entry (Sales)"");
						SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
						SetProperty(""SearchExpression"",SearchSpec);
					}

					sAdvPay=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Advance Payment"");
					sIntNum=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Number Installment"");						
					vDIAmt = out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC DI Amount"");
					vDIDiscAmt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC DI Discount Amount"");
					vAccCashBack=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Account Cash Back"");
					vVivaCashBack=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC VIVA Cash Back"");
					vDeviceRRP=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Device RRP"");
					with(inp3){
						SetProperty(""STC Advance Payment"",sAdvPay);
						SetProperty(""STC Number Installment"",sIntNum);
						SetProperty(""STC DI Discount Amount"", vDIDiscAmt);	
						SetProperty(""STC Account Cash Back"", vAccCashBack);	
						SetProperty(""STC VIVA Cash Back"", vVivaCashBack);
						SetProperty(""Cost"", vDeviceRRP);	
					}
					try
					{
						QBS.InvokeMethod(""SiebelUpdate"",inp3,out3);

						vObjectId = out3.GetProperty(""ObjectId"");
					}
					catch(b)
					{
						out4.SetProperty(""Error Code"",b.errCode);
						out4.SetProperty(""Error Message"",b.errText);
					}

					if ((vDIAmt != null && vDIAmt != """") || (vAccCashBack != null && vAccCashBack != """"))
					{
						sInp1.Reset();
						sOut1.Reset();
						with(sInp1){
							SetProperty(""ObjectId"", vObjectId);
							SetProperty(""orderid"", orderid);
							SetProperty(""prodId"", prodId);
							SetProperty(""prodName"", prodName);
							SetProperty(""action"", action);
							SetProperty(""DIAmount"", vDIAmt);
							SetProperty(""AccountCashBack"", vAccCashBack);
						}
						UpdateDeviceInstallment(sInp1,sOut1);
						//sInp1 = null; sOut1 = null;
					}
				}//if(action==""Add"" &&
				
				sPartCode = sPartCode.substr(0,15);
				if((sParentLinkId != null && sParentLinkId != """") && (sPartCode == ""DEVICEINSURANCE""))
				{//Navin/Jithin:eShop Insurance Option
					sInp.Reset();
					sOut.Reset();
					sPortalLineId= out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id"");
					amt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Amount"");
					with(sInp){
						SetProperty(""sParentLinkId"", sParentLinkId);
						SetProperty(""orderid"", orderid);
						SetProperty(""sPortalLineId"", sPortalLineId);
						//SetProperty(""DevInsAmount"", amt);
					}
					UpdateDeviceInsurance(sInp, sOut);
					//sInp = null; sOut = null;
				}
			}//end of for loop
		}//end of if (cnt>=1)
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Code"",e.errCode);
		Outputs.SetProperty(""Error Message"",e.errText);
	}
	finally
	{
		sInp = null; sOut = null;
		sInp1 = null; sOut1 = null;
		inp = null;	out = null;
		inp1 = null; out1 = null; out2 = null;
		inp3 = null; out3 = null;  out4 = null;
		QBS = null; ESiebelAdapter = null;
	}
}
function UpdateDetails(Inputs,Outputs)
{
	var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");
	//var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");
	var QBS=TheApplication().GetService(""STC Siebel Operation BS"");

	var portaloid=Inputs.GetProperty(""Portal Order Id"");
	var orderid=Inputs.GetProperty(""CRM Order Id"");
	var updateType=Inputs.GetProperty(""UpdateType"");
	var cnt=0;

	//var addprod=Inputs.GetProperty(""AddProdId"");
	var pName='',SearchSpec='',parName='',prodName='',prodId='',action='',prodcat='',amt='',pparRelId='', sAdvPay, sIntNum, prodItemCat='';
	var vObjectId='', vDIAmt='', vDIDiscAmt='', vAccCashBack='', vVivaCashBack='', vDeviceRRP='';
	//var doDiscontinue=false;
	var sPartCode = '', sParentLinkId='', sPortalLineId='', sOrderLineId='';
	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var inp1=TheApplication().NewPropertySet();
	var out1=TheApplication().NewPropertySet();
	var out2=TheApplication().NewPropertySet();
	var inp3=TheApplication().NewPropertySet();
	var out3=TheApplication().NewPropertySet();
	var out4=TheApplication().NewPropertySet();
	var sInp1=TheApplication().NewPropertySet();
	var sOut1=TheApplication().NewPropertySet();
	var sInp=TheApplication().NewPropertySet();
	var sOut=TheApplication().NewPropertySet();

	try
	{
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"",""1111"");

		if(updateType==""Partial"")
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Order CRM Id]='""+orderid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending') AND [Line Item.STC Parent Order Item Id] IS NULL"";
		}
		else if(updateType==""All"")
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Order CRM Id]='""+orderid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending')"";
		}
		else
		{
			TheApplication().RaiseErrorText(""Update Type Specified is Wrong"");
		}
		inp.SetProperty(""OutputIntObjectName"",""STC ECommerce Order IO"");
		inp.SetProperty(""SearchSpec"",SearchSpec);
		//To Get the Ecommerce Line Item Structure
		ESiebelAdapter.InvokeMethod(""Query"",inp,out);
		var NumChild=out.GetProperty(""NumOutputObjects"");
		if(out.GetChild(0).GetChild(0).GetChildCount()>=1)
		{
			if(out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
			{
				cnt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
			}
		}
		if (cnt>=1)
		{
			//TheApplication().RaiseErrorText(""No Eshop Child Item"");
			
			for(var i=0;i<cnt;i++)
			{
				prodName=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Name"");
				prodId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Id"");
				action=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Action Code"");
				//action=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Action Code"");
				prodcat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Category"");
				prodItemCat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Item Category"");
				sPartCode=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Part Code"");
				sParentLinkId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Parent Link Id"");
				//Get the parent item name for the child
				
				inp1.Reset();
				out1.Reset();
				Outputs.AddChild(out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i));
	
				inp1.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
				inp1.SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
				SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND [STC Portal Line Id] IS NULL AND [STC Portal Session Id] IS NULL"";
				inp1.SetProperty(""SearchExpression"",SearchSpec);
				inp1.SetProperty(""Field0"",""Id"");
				QBS.InvokeMethod(""SiebelQuery"",inp1,out1);
	
				if(out1.GetProperty(""RecordCount"")>0)
				{
					sOrderLineId = out1.GetProperty(""Output0"");
					inp1.Reset();
					out1.Reset();
	
					inp1.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
					inp1.SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
				    
				    //SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND [STC Portal Line Id] IS NULL AND [STC Portal Session Id] IS NULL"";
				    
				    SearchSpec=""[Id]='""+sOrderLineId+""'"";
				    inp1.SetProperty(""SearchExpression"",SearchSpec);
	
					inp1.SetProperty(""STC POS Inventory Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Pos Inventory Id""));
					inp1.SetProperty(""STC Portal Session Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Session Id""));
					inp1.SetProperty(""STC Shop Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Shop Id""));
					inp1.SetProperty(""STC Portal Line Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id""));
					inp1.SetProperty(""STC POS Inventory Name"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Pos Inventory Name""));
					inp1.SetProperty(""Reservation Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Reservation Id""));			//Indrasen:31Jan2021:Stock Release POS
					
					amt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Amount"");
					if(action==""Add"" && (prodcat==""Equipment"" || prodcat==""Accessories"" || prodItemCat == ""Standard Charges Additional"" ||prodItemCat ==""Standard Charges"" || prodItemCat == ""Delivery Charges Additional"" ||prodItemCat ==""Delivery Charges"")) //Hardik:Added New item Category
					{
						inp1.SetProperty(""Unit Price"",amt);
						inp1.SetProperty(""Net Price"",amt);				
					}
					if(action==""Add"" && prodcat==""Discount"")
					{
						inp1.SetProperty(""Unit Price"",""-""+amt);
						inp1.SetProperty(""Net Price"",""-""+amt);
					}
		
					try
					{
						QBS.InvokeMethod(""SiebelUpdate"",inp1,out1);
					}
					catch(a)
					{
						out2.SetProperty(""Error Code"",a.errCode);
						out2.SetProperty(""Error Message"",a.errText);
					}
				}//end of if(out1.GetProperty(""RecordCount"")>0)

				if(action==""Add"" && ((prodcat==""Equipment"" && prodItemCat != 'Retail Device') || prodcat==""Accessories""))
				{
					inp3.Reset();
					out3.Reset();

					SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""'"";
					with(inp3){
						SetProperty(""BusinessObject"",""Order Entry (Sales)"");
						SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
						SetProperty(""SearchExpression"",SearchSpec);
					}

					sAdvPay=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Advance Payment"");
					sIntNum=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Number Installment"");						
					vDIAmt = out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC DI Amount"");
					vDIDiscAmt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC DI Discount Amount"");
					vAccCashBack=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Account Cash Back"");
					vVivaCashBack=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC VIVA Cash Back"");
					vDeviceRRP=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Device RRP"");
					with(inp3){
						SetProperty(""STC Advance Payment"",sAdvPay);
						SetProperty(""STC Number Installment"",sIntNum);
						SetProperty(""STC DI Discount Amount"", vDIDiscAmt);	
						SetProperty(""STC Account Cash Back"", vAccCashBack);	
						SetProperty(""STC VIVA Cash Back"", vVivaCashBack);
						SetProperty(""Cost"", vDeviceRRP);	
					}
					try
					{
						QBS.InvokeMethod(""SiebelUpdate"",inp3,out3);

						vObjectId = out3.GetProperty(""ObjectId"");
					}
					catch(b)
					{
						out4.SetProperty(""Error Code"",b.errCode);
						out4.SetProperty(""Error Message"",b.errText);
					}

					if ((vDIAmt != null && vDIAmt != """") || (vAccCashBack != null && vAccCashBack != """"))
					{
						sInp1.Reset();
						sOut1.Reset();
						with(sInp1){
							SetProperty(""ObjectId"", vObjectId);
							SetProperty(""orderid"", orderid);
							SetProperty(""prodId"", prodId);
							SetProperty(""prodName"", prodName);
							SetProperty(""action"", action);
							SetProperty(""DIAmount"", vDIAmt);
							SetProperty(""AccountCashBack"", vAccCashBack);
						}
						UpdateDeviceInstallment(sInp1,sOut1);
						//sInp1 = null; sOut1 = null;
					}
				}//if(action==""Add"" &&
				
				sPartCode = sPartCode.substr(0,15);
				if((sParentLinkId != null && sParentLinkId != """") && (sPartCode == ""DEVICEINSURANCE""))
				{//Navin/Jithin:eShop Insurance Option
					sInp.Reset();
					sOut.Reset();
					sPortalLineId= out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id"");
					amt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Amount"");
					with(sInp){
						SetProperty(""sParentLinkId"", sParentLinkId);
						SetProperty(""orderid"", orderid);
						SetProperty(""sPortalLineId"", sPortalLineId);
						//SetProperty(""DevInsAmount"", amt);
					}
					UpdateDeviceInsurance(sInp, sOut);
					//sInp = null; sOut = null;
				}
			}//end of for loop
		}//end of if (cnt>=1)
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Code"",e.errCode);
		Outputs.SetProperty(""Error Message"",e.errText);
	}
	finally
	{
		sInp = null; sOut = null;
		sInp1 = null; sOut1 = null;
		inp = null;	out = null;
		inp1 = null; out1 = null; out2 = null;
		inp3 = null; out3 = null;  out4 = null;
		QBS = null; ESiebelAdapter = null;
	}
}
function UpdateDetails(Inputs,Outputs)
{
	var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");
	//var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");
	var QBS=TheApplication().GetService(""STC Siebel Operation BS"");

	var portaloid=Inputs.GetProperty(""Portal Order Id"");
	var orderid=Inputs.GetProperty(""CRM Order Id"");
	var updateType=Inputs.GetProperty(""UpdateType"");
	var cnt=0;

	//var addprod=Inputs.GetProperty(""AddProdId"");
	var pName='',SearchSpec='',parName='',prodName='',prodId='',action='',prodcat='',amt='',pparRelId='', sAdvPay, sIntNum, prodItemCat='';
	var vObjectId='', vDIAmt='', vDIDiscAmt='', vAccCashBack='', vVivaCashBack='', vDeviceRRP='';
	//var doDiscontinue=false;
	var sPartCode = '', sParentLinkId='', sPortalLineId='', sOrderLineId='';
	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var inp1=TheApplication().NewPropertySet();
	var out1=TheApplication().NewPropertySet();
	var out2=TheApplication().NewPropertySet();
	var inp3=TheApplication().NewPropertySet();
	var out3=TheApplication().NewPropertySet();
	var out4=TheApplication().NewPropertySet();
	var sInp1=TheApplication().NewPropertySet();
	var sOut1=TheApplication().NewPropertySet();
	var sInp=TheApplication().NewPropertySet();
	var sOut=TheApplication().NewPropertySet();

	try
	{
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"",""1111"");

		if(updateType==""Partial"")
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Order CRM Id]='""+orderid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending') AND [Line Item.STC Parent Order Item Id] IS NULL"";
		}
		else if(updateType==""All"")
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Order CRM Id]='""+orderid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending')"";
		}
		else
		{
			TheApplication().RaiseErrorText(""Update Type Specified is Wrong"");
		}
		inp.SetProperty(""OutputIntObjectName"",""STC ECommerce Order IO"");
		inp.SetProperty(""SearchSpec"",SearchSpec);
		//To Get the Ecommerce Line Item Structure
		ESiebelAdapter.InvokeMethod(""Query"",inp,out);
		var NumChild=out.GetProperty(""NumOutputObjects"");
		if(out.GetChild(0).GetChild(0).GetChildCount()>=1)
		{
			if(out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
			{
				cnt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
			}
		}
		if (cnt>=1)
		{
			//TheApplication().RaiseErrorText(""No Eshop Child Item"");
			
			for(var i=0;i<cnt;i++)
			{
				prodName=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Name"");
				prodId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Id"");
				action=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Action Code"");
				//action=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Action Code"");
				prodcat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Category"");
				prodItemCat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Item Category"");
				sPartCode=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Part Code"");
				sParentLinkId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Parent Link Id"");
				//Get the parent item name for the child
				
				inp1.Reset();
				out1.Reset();
				Outputs.AddChild(out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i));
	
				inp1.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
				inp1.SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
				SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND [STC Portal Line Id] IS NULL AND [STC Portal Session Id] IS NULL"";
				inp1.SetProperty(""SearchExpression"",SearchSpec);
				inp1.SetProperty(""Field0"",""Id"");
				QBS.InvokeMethod(""SiebelQuery"",inp1,out1);
	
				if(out1.GetProperty(""RecordCount"")>0)
				{
					sOrderLineId = out1.GetProperty(""Output0"");
					inp1.Reset();
					out1.Reset();
	
					inp1.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
					inp1.SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
				    
				    //SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND [STC Portal Line Id] IS NULL AND [STC Portal Session Id] IS NULL"";
				    
				    SearchSpec=""[Id]='""+sOrderLineId+""'"";
				    inp1.SetProperty(""SearchExpression"",SearchSpec);
	
					inp1.SetProperty(""STC POS Inventory Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Pos Inventory Id""));
					inp1.SetProperty(""STC Portal Session Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Session Id""));
					inp1.SetProperty(""STC Shop Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Shop Id""));
					inp1.SetProperty(""STC Portal Line Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id""));
					inp1.SetProperty(""STC POS Inventory Name"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Pos Inventory Name""));
					inp1.SetProperty(""Reservation Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Reservation Id""));			//Indrasen:31Jan2021:Stock Release POS
					
					amt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Amount"");
					if(action==""Add"" && (prodcat==""Equipment"" || prodcat==""Accessories""))
					{
						inp1.SetProperty(""Unit Price"",amt);
						inp1.SetProperty(""Net Price"",amt);				
					}
					if(action==""Add"" && prodcat==""Discount"")
					{
						inp1.SetProperty(""Unit Price"",""-""+amt);
						inp1.SetProperty(""Net Price"",""-""+amt);
					}
		
					try
					{
						QBS.InvokeMethod(""SiebelUpdate"",inp1,out1);
					}
					catch(a)
					{
						out2.SetProperty(""Error Code"",a.errCode);
						out2.SetProperty(""Error Message"",a.errText);
					}
				}//end of if(out1.GetProperty(""RecordCount"")>0)

				if(action==""Add"" && ((prodcat==""Equipment"" && prodItemCat != 'Retail Device') || prodcat==""Accessories""))
				{
					inp3.Reset();
					out3.Reset();

					SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""'"";
					with(inp3){
						SetProperty(""BusinessObject"",""Order Entry (Sales)"");
						SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
						SetProperty(""SearchExpression"",SearchSpec);
					}

					sAdvPay=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Advance Payment"");
					sIntNum=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Number Installment"");						
					vDIAmt = out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC DI Amount"");
					vDIDiscAmt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC DI Discount Amount"");
					vAccCashBack=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Account Cash Back"");
					vVivaCashBack=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC VIVA Cash Back"");
					vDeviceRRP=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Device RRP"");
					with(inp3){
						SetProperty(""STC Advance Payment"",sAdvPay);
						SetProperty(""STC Number Installment"",sIntNum);
						SetProperty(""STC DI Discount Amount"", vDIDiscAmt);	
						SetProperty(""STC Account Cash Back"", vAccCashBack);	
						SetProperty(""STC VIVA Cash Back"", vVivaCashBack);
						SetProperty(""Cost"", vDeviceRRP);	
					}
					try
					{
						QBS.InvokeMethod(""SiebelUpdate"",inp3,out3);

						vObjectId = out3.GetProperty(""ObjectId"");
					}
					catch(b)
					{
						out4.SetProperty(""Error Code"",b.errCode);
						out4.SetProperty(""Error Message"",b.errText);
					}

					if ((vDIAmt != null && vDIAmt != """") || (vAccCashBack != null && vAccCashBack != """"))
					{
						sInp1.Reset();
						sOut1.Reset();
						with(sInp1){
							SetProperty(""ObjectId"", vObjectId);
							SetProperty(""orderid"", orderid);
							SetProperty(""prodId"", prodId);
							SetProperty(""prodName"", prodName);
							SetProperty(""action"", action);
							SetProperty(""DIAmount"", vDIAmt);
							SetProperty(""AccountCashBack"", vAccCashBack);
						}
						UpdateDeviceInstallment(sInp1,sOut1);
						//sInp1 = null; sOut1 = null;
					}
				}//if(action==""Add"" &&
				
				sPartCode = sPartCode.substr(0,15);
				if((sParentLinkId != null && sParentLinkId != """") && (sPartCode == ""DEVICEINSURANCE""))
				{//Navin/Jithin:eShop Insurance Option
					sInp.Reset();
					sOut.Reset();
					sPortalLineId= out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id"");
					amt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Amount"");
					with(sInp){
						SetProperty(""sParentLinkId"", sParentLinkId);
						SetProperty(""orderid"", orderid);
						SetProperty(""sPortalLineId"", sPortalLineId);
						//SetProperty(""DevInsAmount"", amt);
					}
					UpdateDeviceInsurance(sInp, sOut);
					//sInp = null; sOut = null;
				}
			}//end of for loop
		}//end of if (cnt>=1)
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Code"",e.errCode);
		Outputs.SetProperty(""Error Message"",e.errText);
	}
	finally
	{
		sInp = null; sOut = null;
		sInp1 = null; sOut1 = null;
		inp = null;	out = null;
		inp1 = null; out1 = null; out2 = null;
		inp3 = null; out3 = null;  out4 = null;
		QBS = null; ESiebelAdapter = null;
	}
}
function UpdateDetails(Inputs,Outputs)
{
	var ESiebelAdapter=TheApplication().GetService(""EAI Siebel Adapter"");
	//var DMExecute=TheApplication().GetService(""EAI Data Transformation Engine"");
	var QBS=TheApplication().GetService(""STC Siebel Operation BS"");

	var portaloid=Inputs.GetProperty(""Portal Order Id"");
	var orderid=Inputs.GetProperty(""CRM Order Id"");
	var updateType=Inputs.GetProperty(""UpdateType"");
	var cnt=0;

	//var addprod=Inputs.GetProperty(""AddProdId"");
	var pName='',SearchSpec='',parName='',prodName='',prodId='',action='',prodcat='',amt='',pparRelId='', sAdvPay, sIntNum, prodItemCat='';
	var vObjectId='', vDIAmt='', vDIDiscAmt='', vAccCashBack='', vVivaCashBack='', vDeviceRRP='';
	//var doDiscontinue=false;
	var sPartCode = '', sParentLinkId='', sPortalLineId='', sOrderLineId='';
	var inp=TheApplication().NewPropertySet();
	var out=TheApplication().NewPropertySet();
	var inp1=TheApplication().NewPropertySet();
	var out1=TheApplication().NewPropertySet();
	var out2=TheApplication().NewPropertySet();
	var inp3=TheApplication().NewPropertySet();
	var out3=TheApplication().NewPropertySet();
	var out4=TheApplication().NewPropertySet();
	var sInp1=TheApplication().NewPropertySet();
	var sOut1=TheApplication().NewPropertySet();
	var sInp=TheApplication().NewPropertySet();
	var sOut=TheApplication().NewPropertySet();

	try
	{
		Outputs.SetProperty(""Error Message"","""");
		Outputs.SetProperty(""Error Code"",""1111"");

		if(updateType==""Partial"")
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending') AND [Line Item.STC Parent Order Item Id] IS NULL"";
		}
		else if(updateType==""All"")
		{
			SearchSpec=""[Header.STC Portal Order Id] = '""+portaloid+""' AND [Line Item.STC Parent Portal Order Id] = '""+portaloid+""' AND ([Line Item.STC Status] = 'InProgress' OR [Line Item.STC Status] = 'Pending')"";
		}
		else
		{
			TheApplication().RaiseErrorText(""Update Type Specified is Wrong"");
		}
		inp.SetProperty(""OutputIntObjectName"",""STC ECommerce Order IO"");
		inp.SetProperty(""SearchSpec"",SearchSpec);
		//To Get the Ecommerce Line Item Structure
		ESiebelAdapter.InvokeMethod(""Query"",inp,out);
		var NumChild=out.GetProperty(""NumOutputObjects"");
		if(out.GetChild(0).GetChild(0).GetChildCount()>=1)
		{
			if(out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount()>=1)
			{
				cnt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
			}
		}
		if (cnt>=1)
		{
			//TheApplication().RaiseErrorText(""No Eshop Child Item"");
			
			for(var i=0;i<cnt;i++)
			{
				prodName=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Name"");
				prodId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Id"");
				action=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Action Code"");
				//action=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Action Code"");
				prodcat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Category"");
				prodItemCat=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Item Category"");
				sPartCode=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Prod Part Code"");
				sParentLinkId=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Parent Link Id"");
				//Get the parent item name for the child
				
				inp1.Reset();
				out1.Reset();
				Outputs.AddChild(out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i));
	
				inp1.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
				inp1.SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
				SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND [STC Portal Line Id] IS NULL AND [STC Portal Session Id] IS NULL"";
				inp1.SetProperty(""SearchExpression"",SearchSpec);
				inp1.SetProperty(""Field0"",""Id"");
				QBS.InvokeMethod(""SiebelQuery"",inp1,out1);
	
				if(out1.GetProperty(""RecordCount"")>0)
				{
					sOrderLineId = out1.GetProperty(""Output0"");
					inp1.Reset();
					out1.Reset();
	
					inp1.SetProperty(""BusinessObject"",""Order Entry (Sales)"");
					inp1.SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
				    
				    //SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""' AND [STC Portal Line Id] IS NULL AND [STC Portal Session Id] IS NULL"";
				    
				    SearchSpec=""[Id]='""+sOrderLineId+""'"";
				    inp1.SetProperty(""SearchExpression"",SearchSpec);
	
					inp1.SetProperty(""STC POS Inventory Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Pos Inventory Id""));
					inp1.SetProperty(""STC Portal Session Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Session Id""));
					inp1.SetProperty(""STC Shop Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Shop Id""));
					inp1.SetProperty(""STC Portal Line Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id""));
					inp1.SetProperty(""STC POS Inventory Name"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Pos Inventory Name""));
					inp1.SetProperty(""Reservation Id"",out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Reservation Id""));			//Indrasen:31Jan2021:Stock Release POS
					
					amt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Amount"");
					if(action==""Add"" && (prodcat==""Equipment"" || prodcat==""Accessories""))
					{
						inp1.SetProperty(""Unit Price"",amt);
						inp1.SetProperty(""Net Price"",amt);				
					}
					if(action==""Add"" && prodcat==""Discount"")
					{
						inp1.SetProperty(""Unit Price"",""-""+amt);
						inp1.SetProperty(""Net Price"",""-""+amt);
					}
		
					try
					{
						QBS.InvokeMethod(""SiebelUpdate"",inp1,out1);
					}
					catch(a)
					{
						out2.SetProperty(""Error Code"",a.errCode);
						out2.SetProperty(""Error Message"",a.errText);
					}
				}//end of if(out1.GetProperty(""RecordCount"")>0)

				if(action==""Add"" && ((prodcat==""Equipment"" && prodItemCat != 'Retail Device') || prodcat==""Accessories""))
				{
					inp3.Reset();
					out3.Reset();

					SearchSpec=""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product]='""+prodName+""' AND [Product Id]='""+prodId+""'"";
					with(inp3){
						SetProperty(""BusinessObject"",""Order Entry (Sales)"");
						SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
						SetProperty(""SearchExpression"",SearchSpec);
					}

					sAdvPay=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Advance Payment"");
					sIntNum=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Number Installment"");						
					vDIAmt = out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC DI Amount"");
					vDIDiscAmt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC DI Discount Amount"");
					vAccCashBack=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Account Cash Back"");
					vVivaCashBack=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC VIVA Cash Back"");
					vDeviceRRP=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Device RRP"");
					with(inp3){
						SetProperty(""STC Advance Payment"",sAdvPay);
						SetProperty(""STC Number Installment"",sIntNum);
						SetProperty(""STC DI Discount Amount"", vDIDiscAmt);	
						SetProperty(""STC Account Cash Back"", vAccCashBack);	
						SetProperty(""STC VIVA Cash Back"", vVivaCashBack);
						SetProperty(""Cost"", vDeviceRRP);	
					}
					try
					{
						QBS.InvokeMethod(""SiebelUpdate"",inp3,out3);

						vObjectId = out3.GetProperty(""ObjectId"");
					}
					catch(b)
					{
						out4.SetProperty(""Error Code"",b.errCode);
						out4.SetProperty(""Error Message"",b.errText);
					}

					if ((vDIAmt != null && vDIAmt != """") || (vAccCashBack != null && vAccCashBack != """"))
					{
						sInp1.Reset();
						sOut1.Reset();
						with(sInp1){
							SetProperty(""ObjectId"", vObjectId);
							SetProperty(""orderid"", orderid);
							SetProperty(""prodId"", prodId);
							SetProperty(""prodName"", prodName);
							SetProperty(""action"", action);
							SetProperty(""DIAmount"", vDIAmt);
							SetProperty(""AccountCashBack"", vAccCashBack);
						}
						UpdateDeviceInstallment(sInp1,sOut1);
						//sInp1 = null; sOut1 = null;
					}
				}//if(action==""Add"" &&
				
				sPartCode = sPartCode.substr(0,15);
				if((sParentLinkId != null && sParentLinkId != """") && (sPartCode == ""DEVICEINSURANCE""))
				{//Navin/Jithin:eShop Insurance Option
					sInp.Reset();
					sOut.Reset();
					sPortalLineId= out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Portal Line Item Id"");
					amt=out.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i).GetProperty(""STC Amount"");
					with(sInp){
						SetProperty(""sParentLinkId"", sParentLinkId);
						SetProperty(""orderid"", orderid);
						SetProperty(""sPortalLineId"", sPortalLineId);
						//SetProperty(""DevInsAmount"", amt);
					}
					UpdateDeviceInsurance(sInp, sOut);
					//sInp = null; sOut = null;
				}
			}//end of for loop
		}//end of if (cnt>=1)
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Code"",e.errCode);
		Outputs.SetProperty(""Error Message"",e.errText);
	}
	finally
	{
		sInp = null; sOut = null;
		sInp1 = null; sOut1 = null;
		inp = null;	out = null;
		inp1 = null; out1 = null; out2 = null;
		inp3 = null; out3 = null;  out4 = null;
		QBS = null; ESiebelAdapter = null;
	}
}
function UpdateDeviceInstallment(Inputs, Outputs)
{//[HARDIK:26Apr2020:EcommerceAccessoriesBusinessDI]
//[NAVIN:27Apr2020:EcommerceOrderPriceOverride-Updated]
	try
	{
		var vObjectId='', orderid='', prodName='', action='', prodId='';
		var vDIAmt, vAccCashBack;
	//TheApplication().RaiseErrorText(orderid);
		var sBO = TheApplication().GetBusObject(""Order Entry (Sales)"");
	    var sBC = sBO.GetBusComp(""Order Entry - Line Items (Simple)"");
		var sRec=false, vSearchExpr='', vSearchExpr2='', sBCD1=null, vParentLineId='', sBCD2=null;

		with(Inputs){
			vObjectId = GetProperty(""ObjectId"");
			orderid = GetProperty(""orderid"");
		    prodName = GetProperty(""prodName"");
			action = GetProperty(""action"");
			prodId = GetProperty(""prodId"");
			vDIAmt = GetProperty(""DIAmount"");
			vAccCashBack = GetProperty(""AccountCashBack"");
		}
		with(sBC)
		{
			InvokeMethod(""SetAdminMode"", ""TRUE"");
			ActivateField(""Order Header Id"");    
			ActivateField(""STC Portal Line Id"");
			ActivateField(""STC Portal Line Id"");
			ActivateField(""STC Portal Line Id"");
			SetViewMode(""AllView"");
			ClearToQuery();

			if(vObjectId != null && vObjectId != """")
				vSearchExpr = ""[Id]='""+vObjectId+""'"";
			else
				vSearchExpr = ""[Order Header Id]='""+orderid+""' AND [Action Code]='""+action+""' AND [Product Id]='""+prodId+""'"";
			SetSearchExpr(vSearchExpr);
			ExecuteQuery(ForwardOnly);
			sRec = FirstRecord();
			if(sRec)
			{
				vParentLineId = GetFieldValue(""Id"");
				//TheApplication().RaiseErrorText(AccessLintItem);
				sBCD1 = sBO.GetBusComp(""Order Entry - Line Items (Simple)"");
				with (sBCD1)
				{
					sRec = false;
					InvokeMethod(""SetAdminMode"", ""TRUE"");
					ActivateField(""Order Header Id"");    
					ActivateField(""Parent Order Item Id"");
					ActivateField(""STC Portal Line Id"");
					ActivateField(""Body Style"");
					ActivateField(""Unit Price"");
					ActivateField(""Net Price"");
					ActivateField(""STC Portal Line Id"");
					SetViewMode(""AllView"");		 
					ClearToQuery();

					vSearchExpr2 = ""[Order Header Id]='""+orderid+""' AND [Parent Order Item Id]='""+vParentLineId+""' AND ([STC Plan Segregation]='Installment' OR [STC Plan Segregation]='OtherInstallment' OR [Body Style]='DIAccessory')"";

					SetSearchExpr(vSearchExpr2);
					ExecuteQuery(ForwardOnly);
					sRec = FirstRecord();
					if(sRec)
					{
						SetFieldValue(""Unit Price"", vDIAmt);
						SetFieldValue(""Net Price"", vDIAmt);
						WriteRecord();
					}
				}//With DI

				if(vAccCashBack != null && vAccCashBack != """")
				{
					sBCD2 = sBO.GetBusComp(""Order Entry - Line Items (Simple)"");
					with (sBCD2)
					{
						sRec = false;
						InvokeMethod(""SetAdminMode"", ""TRUE"");
						ActivateField(""Order Header Id"");    
						ActivateField(""Parent Order Item Id"");
						ActivateField(""STC Portal Line Id"");
						ActivateField(""STC Plan Type"");
						ActivateField(""Unit Price"");
						ActivateField(""Net Price"");
						SetViewMode(""AllView"");		 
						ClearToQuery();

						vSearchExpr2 = ""[Order Header Id]='""+orderid+""' AND [Parent Order Item Id]='""+vParentLineId+""' AND ([STC Plan Type]='Account Cashback')"";

						SetSearchExpr(vSearchExpr2);
						ExecuteQuery(ForwardOnly);
						sRec = FirstRecord();
						if(sRec)
						{
							SetFieldValue(""Unit Price"", -1 * ToNumber(vAccCashBack));
							SetFieldValue(""Net Price"", -1 * ToNumber(vAccCashBack));
							WriteRecord();
						}
					}//With AccountCashBack
				}//end if(vAccCashBack != null
			}//Device sRec
		}
    }
	catch(e)
	{
		throw(e);
	}
	finally
	{
		sBCD1 = null; sBCD2 = null; sBC = null;
		sBO = null;
	}
}
function UpdateDeviceInsurance(Inputs, Outputs)
{//Navin/Jithin:eShop Insurance Option
	try
	{
		var sParentLinkId = Inputs.GetProperty(""sParentLinkId"");
		var orderid= Inputs.GetProperty(""orderid"");
		var sPortalLineId= Inputs.GetProperty(""sPortalLineId"");
		var sDevInsAmt = Inputs.GetProperty(""DevInsAmount"");
		var sRec, sAssetIntegId, sColor, sProduct, SearchSpec;
		var QBS=TheApplication().GetService(""STC Siebel Operation BS"");
		var sInp = TheApplication().NewPropertySet();
		var sOut = TheApplication().NewPropertySet();
		var sBO = TheApplication().GetBusObject(""Order Entry (Sales)"");
		var sBC = sBO.GetBusComp(""Order Entry - Line Items (Simple)"");
		with(sBC)
		{
			InvokeMethod(""SetAdminMode"", ""TRUE"") 
			ActivateField(""Asset Integration Id"");
			ActivateField(""Color"");    
			ActivateField(""Product"");
			ActivateField(""STC Portal Line Id"");
			ActivateField(""STC Is Device Picked"");
			ClearToQuery();
			SetSearchSpec(""Order Header Id"",orderid);
			SetSearchSpec(""STC Portal Line Id"",sParentLinkId);
			ExecuteQuery(ForwardOnly);
			sRec = FirstRecord();
			if(sRec)
			{
				sAssetIntegId = GetFieldValue(""Asset Integration Id"");
				sColor = GetFieldValue(""Color"");
				sProduct = GetFieldValue(""Product""); 
				SetFieldValue(""STC Is Device Picked"", ""Y"");
				WriteRecord();
			} 
		}

		SearchSpec=""[Order Header Id]='""+orderid+""' AND [STC Portal Line Id]='""+sPortalLineId+""'"";
		with(sInp){
			SetProperty(""BusinessObject"",""Order Entry (Sales)"");
			SetProperty(""BusinessComponent"",""Order Entry - Line Items (Simple)"");
			SetProperty(""SearchExpression"",SearchSpec);
			SetProperty(""STC Contract Par Asset Integ Id"",sAssetIntegId);
			SetProperty(""STC Parent Device Attribute"",sColor);
			SetProperty(""STC Parent Device Name"",sProduct);
			if(sDevInsAmt != null && sDevInsAmt != """"){
				SetProperty(""Unit Price"", sDevInsAmt);
				SetProperty(""Net Price"", sDevInsAmt);
			}
		}
			   
		QBS.InvokeMethod(""SiebelUpdate"",sInp,sOut);
	}
	catch(e)
	{
		Outputs.SetProperty(""Error Code"",e.errCode);
		Outputs.SetProperty(""Error Message"",e.errText);
	}
	finally
	{
		QBS = null; sInp = null; sOut = null;
		sBC = null;
		sBO = null;
	}
}
function AddNewAddRec(Vtel,SelectedProdId,OrderId,rootLineId,BillAccId,VmmsParentProdId,AddServiceLength,AddDisChargingType,AddDisPriceOveride,AddDisQuota,VaccountBillProfId)
{
	var StrOrdLine = TheApplication().GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Entry - Line Items (Simple)"");
	var psPorts    = TheApplication().NewPropertySet();
//var psRootPort    = TheApplication().NewPropertySet();
//MANUJ Added : BB Experience Addons - START
	var psInputs    = TheApplication().NewPropertySet();
	var psOutputs    = TheApplication().NewPropertySet();
	var PriceListId=TheApplication().InvokeMethod(""LookupValue"", ""STC_PRICELIST_ID"", ""Individual""); 
	var CalcNetPrice;
	var NetPrice;
	var AppObj = TheApplication(); 
	var CurrDate = new Date();
	var CurrDateSys = new Date(CurrDate);
	var EndDateSys = null;
	var EndOffset = """";
	
if(AddServiceLength == AppObj.InvokeMethod(""LookupValue"",""BBAND_EXP"",AddServiceLength) && !isNaN(AddServiceLength))
	{
	var CurrDate = new Date();
	var CurrDateSys = new Date(CurrDate);
	var EndDate = AddToDate(CurrDateSys, 0, AddServiceLength, 0, 0, 0, +1);
	EndDateSys = new Date(EndDate);
	EndDateSys = ((EndDateSys.getMonth() + 1) + ""/"" + EndDateSys.getDate() + ""/"" + EndDateSys.getFullYear()+ "" ""+ EndDateSys.getHours() + "":"" + EndDateSys.getMinutes()+"":"" + EndDateSys.getSeconds());
	EndOffset = AddServiceLength;
	}
if(AddServiceLength == AppObj.InvokeMethod(""LookupValue"",""BBAND_EXP"",""EndOfContract""))
	{//Check for Main Contract End Date and register the same for the BB Exp Addon.
	//Call STC Update BB Exp End Date WF to get EndDate
	var svcbsService = AppObj.GetService(""Workflow Process Manager"");		
	psInputs.SetProperty(""Object Id"",OrderId); //Order ID
	psInputs.SetProperty(""ProcessName"",""STC Update BB Exp End Date WF""); 
	svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
	EndDateSys = psOutputs.GetProperty(""EndDate"");//Get Main Contract End Date
	EndOffset = psOutputs.GetProperty(""SeviceLenDays"");//Get Offset b/w installed date & Contract End date
	
	}

if(AddDisChargingType == ""PriceOverride"")
{
CalcNetPrice = AddDisPriceOveride;
}

//MANUJ Added : BB Experience Addons - END
with(StrOrdLine)
{
   ActivateField(""Status"");
   ActivateField(""Cfg State Code"");
   ActivateField(""Service End Date"");//MANUJ Added for Broadband Experience Addons
   ActivateField(""Item Price List Id""); 
   ActivateField(""MRC CxTotal"");
   ActivateField(""Adjusted List Price"");
   ActivateField(""Previous Net Price"");
   ActivateField(""MRC CxTotal"");
   ActivateField(""Unit Price"");
   ActivateField(""Base Price"");
   ActivateField(""Billing Profile Id"");
   ActivateField(""Dynamic Discount Method"");
   ActivateField(""Pricing Commit Type"");
   ActivateField(""STC End Offset"");
   ActivateField(""Extended Quantity"");//Prod Addition
   ActivateField(""STC Voucher Promotion Flag"");//Prod Addition
   ActivateField(""Prod Item Id"");//Prod Addition
   psPorts = RCOIS_GetAllPorts(VmmsParentProdId);  
   var sToPortItemId = GetPortProperty(psPorts,""Port Item Id"",""Product Id"",SelectedProdId);
   NewRecord(NewAfter);
   SetFieldValue(""Order Header Id"",OrderId); //passed into BS on product pick.
   SetFieldValue(""Product Id"", SelectedProdId);  //Discount Prod Id  
   SetFieldValue(""Parent Order Item Id"",Vtel);   //Parent Order Item Id to hold the line items
   SetFieldValue(""Root Order Item Id"",rootLineId);  //Package Item Id
   SetFieldValue(""Billing Account Id"",BillAccId);  //BAN id
   SetFieldValue(""Product Port Id"",sToPortItemId);  //Relationship Item Id
   SetFieldValue(""Prod Item Id"",sToPortItemId);  //Relationship Item Id - Prod Addition
   SetFieldValue(""Item Price List Id"",PriceListId);
   SetFieldValue(""Status"",""In Progress"");
   SetFieldValue(""Cfg State Code"",""User Requested Item"");
   SetFieldValue(""Extended Quantity"",""1""); //Prod Addition
   SetFieldValue(""STC Voucher Promotion Flag"",""N"");// Prod Addition
 
   
 if((EndDateSys != null || EndDateSys != """" || EndDateSys != '' || EndDateSys.length > 0 ) && AddServiceLength != ""Unlimited"" && AddServiceLength != """")
   { //Applicable for EndOfContract
   
   SetFieldValue(""Service End Date"",EndDateSys);
  
   
   }
    
    if((CalcNetPrice != null || CalcNetPrice != """" || CalcNetPrice != '') && AddDisChargingType != ""Actual"" && AddDisChargingType != """")
   
   { 
   NetPrice = GetListPrice(PriceListId,SelectedProdId);  
   SetFieldValue(""Net Price"",CalcNetPrice);
   SetFieldValue(""MRC CxTotal"",CalcNetPrice);
   SetFieldValue(""Adjusted List Price"",NetPrice);
   SetFieldValue(""Previous Net Price"",NetPrice);
   SetFieldValue(""Unit Price"",CalcNetPrice);
   SetFieldValue(""Base Price"",CalcNetPrice);
   SetFieldValue(""STC End Offset"",EndOffset);
   //MANUJ: Added to restrict the flag set only when Charging Type is selected as would refer to only BBs
   SetFieldValue(""Billing Profile Id"",VaccountBillProfId);
   SetFieldValue(""Dynamic Discount Method"",""Amount"");
   SetFieldValue(""Pricing Commit Type"",""Committed"");
   
   }
   
       if(AddDisChargingType == ""Actual"" || AddDisChargingType == """"){//Get Net Price from Price List
   NetPrice = GetListPrice(PriceListId,SelectedProdId);  
   SetFieldValue(""Net Price"",NetPrice);
   SetFieldValue(""MRC CxTotal"",NetPrice);
   SetFieldValue(""Adjusted List Price"",NetPrice);
   SetFieldValue(""Previous Net Price"",NetPrice);
   SetFieldValue(""Unit Price"",NetPrice);
   SetFieldValue(""Base Price"",NetPrice);
   SetFieldValue(""STC End Offset"",EndOffset);
    //MANUJ: Added to restrict the flag set only when Charging Type is selected as would refer to only BBs
   SetFieldValue(""Billing Profile Id"",VaccountBillProfId);
   SetFieldValue(""Dynamic Discount Method"",""Amount"");
   SetFieldValue(""Pricing Commit Type"",""Committed"");
   }
   WriteRecord(); 
}

CallReprice(OrderId,AddDisChargingType);
}
"//Mayank: Added for Postpaid Vanity Number
function AddNewAddRecVanity(Vtel,SelectedProdId,OrderId,rootLineId,BillAccId,VmmsParentProdId,VaccountBillProfId,AddServiceLength,AddDisChargingType,AddDisPriceOveride,AddDisQuota)//MANUJ : Added for BB Experience Addons
{
	var StrOrdLine = TheApplication().GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Entry - Line Items (Simple)"");
	var psPorts    = TheApplication().NewPropertySet();
	var psInputs    = TheApplication().NewPropertySet();
	var psOutputs    = TheApplication().NewPropertySet();
	var CalcNetPrice;
	var CurrDate = new Date();
	var CurrDateSys = new Date(CurrDate);
	var EndDateSys;
	var NetPrice;
	var PriceListId=TheApplication().InvokeMethod(""LookupValue"", ""STC_PRICELIST_ID"", ""Individual""); 
	var EndOffset = """";//BRM: Calculated End Date depending on the same
	//var psRootPort    = TheApplication().NewPropertySet();
	//MANUJ Added : BB Experience Addons - START
	var AppObj = TheApplication(); 
	if(AddServiceLength == AppObj.InvokeMethod(""LookupValue"",""BBAND_EXP"",AddServiceLength) && !isNaN(AddServiceLength))
	{

	     var EndDate = AddToDate(CurrDateSys, 0, AddServiceLength, 0, 0, 0, +1);
	     EndDateSys = new Date(EndDate);
	     EndDateSys = ((EndDateSys.getMonth() + 1) + ""/"" + EndDateSys.getDate() + ""/"" + EndDateSys.getFullYear()+ "" ""+ EndDateSys.getHours() + "":"" + EndDateSys.getMinutes()+"":"" + EndDateSys.getSeconds());
	     EndOffset = AddServiceLength;
    }
	 if(AddServiceLength == AppObj.InvokeMethod(""LookupValue"",""BBAND_EXP"",""EndOfContract""))
	 {//Check for Main Contract End Date and register the same for the BB Exp Addon.
	  //Call STC Update BB Exp End Date WF to get EndDate
		 	var svcbsService = AppObj.GetService(""Workflow Process Manager"");		
			psInputs.SetProperty(""Object Id"",OrderId); //Order ID
			psInputs.SetProperty(""ProcessName"",""STC Update BB Exp End Date WF""); 
			svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
			EndDateSys = psOutputs.GetProperty(""EndDate"");//Get Main Contract End Date
			EndOffset = psOutputs.GetProperty(""SeviceLenDays"");//Get Offset b/w installed date & Contract End date
 	}
 
 if(AddDisChargingType == ""PriceOverride"")
 	 {
  			CalcNetPrice = AddDisPriceOveride;
   	 }
  /*if(AddDisChargingType == AppObj.InvokeMethod(""LookupValue"",""BBAND_EXP"",""Free""))
  	{
 
	 CalcNetPrice = 0; 
	 }*/
    //MANUJ Added : BB Experience Addons - END
	with(StrOrdLine)
	{
   ActivateField(""Status"");
   ActivateField(""Cfg State Code"");
   ActivateField(""Billing Profile Id"");
   ActivateField(""Item Price List Id""); 
   ActivateField(""Item Price List Id""); 
   ActivateField(""Adjusted List Price"");
   ActivateField(""Previous Net Price"");
   ActivateField(""Unit Price"");
   ActivateField(""Base Price"");
   ActivateField(""MRC CxTotal"");
   ActivateField(""Dynamic Discount Method"");
   ActivateField(""Pricing Commit Type"");
   ActivateField(""STC End Offset"");
   psPorts = RCOIS_GetAllPorts(VmmsParentProdId);  
   var sToPortItemId = GetPortProperty(psPorts,""Port Item Id"",""Product Id"",SelectedProdId);
   NewRecord(NewAfter);
   SetFieldValue(""Order Header Id"",OrderId); 
   SetFieldValue(""Product Id"", SelectedProdId);    
   SetFieldValue(""Parent Order Item Id"",Vtel);   
   SetFieldValue(""Root Order Item Id"",rootLineId);  
   SetFieldValue(""Billing Account Id"",BillAccId);  
   SetFieldValue(""Product Port Id"",sToPortItemId);  
   SetFieldValue(""Status"",""In Progress"");
   SetFieldValue(""Cfg State Code"",""User Requested Item"");
   SetFieldValue(""Billing Profile Id"",VaccountBillProfId);
 
   
  if((EndDateSys != null || EndDateSys != """" || EndDateSys != '' || EndDateSys.length > 0 ) && AddServiceLength != ""Unlimited"" && AddServiceLength != """")
  {
   SetFieldValue(""Service End Date"",EndDateSys);
   }
    if((CalcNetPrice != null || CalcNetPrice != """" || CalcNetPrice != '') && AddDisChargingType != ""Actual"" && AddDisChargingType != """")//For Price Override, apply price in discount matrix 
   {
   NetPrice = GetListPrice(PriceListId,SelectedProdId);
   SetFieldValue(""Net Price"",CalcNetPrice);
   SetFieldValue(""MRC CxTotal"",CalcNetPrice);
   SetFieldValue(""Adjusted List Price"",NetPrice);
   SetFieldValue(""Previous Net Price"",NetPrice);
   SetFieldValue(""Unit Price"",CalcNetPrice);
   SetFieldValue(""Base Price"",CalcNetPrice);
   SetFieldValue(""STC End Offset"",EndOffset);
   //MANUJ: Added to restrict the Price overideflags only when Charging Type is selected as Actual/PriceOveride would refer to only BBs
   SetFieldValue(""Dynamic Discount Method"",""Amount"");
   SetFieldValue(""Pricing Commit Type"",""Committed"");
   }
   if(AddDisChargingType == ""Actual"" || AddDisChargingType == """"){
   	SetFieldValue(""Item Price List Id"",PriceListId);
   	NetPrice = GetListPrice(PriceListId,SelectedProdId);
    SetFieldValue(""Net Price"",NetPrice);
    SetFieldValue(""MRC CxTotal"",NetPrice);
    SetFieldValue(""Adjusted List Price"",NetPrice);
    SetFieldValue(""Previous Net Price"",NetPrice);
    SetFieldValue(""Unit Price"",NetPrice);
   	SetFieldValue(""Base Price"",NetPrice);
   	SetFieldValue(""STC End Offset"",EndOffset);
   //MANUJ: Added to restrict the Price overideflags only when Charging Type is selected as Actual/PriceOveride would refer to only BBs
   SetFieldValue(""Dynamic Discount Method"",""Amount"");
   SetFieldValue(""Pricing Commit Type"",""Committed"");
   }
   WriteRecord(); 
}
CallReprice(OrderId,AddDisChargingType);
}
function AddToDate(sourceDate, nMonths, nDays, nHours, nMinutes, nSeconds, nsign)
 {

// Parameters : // sourceDate : Date object // nDays, nHours , nMinutes , nSeconds : Integer numbers // nsign : Can have two values : 1 or -1 // 1 indicates to ADD to the sourceDate // -1 indicates to SUBTRACT from the sourceDate // Returns : A date object, after adding/subtracting // ndays,hNours,nMinutes // and nseconds to the sourceDate. 
var retDate = sourceDate; 
retDate.setMonth(retDate.getMonth()+nsign*nMonths);
retDate.setDate(retDate.getDate()+nsign*nDays); 
retDate.setHours(retDate.getHours()+nsign*nHours); 
retDate.setMinutes(retDate.getMinutes()+nsign*nMinutes); 
retDate.setSeconds(retDate.getSeconds()+nsign*nSeconds); 
return (retDate);
}
function CallReprice(OrderId,AddDisChargingType)
{

	var AppObj = TheApplication(); 
	var svcbsService = AppObj.GetService(""Workflow Process Manager"");	
	var psInputs    = TheApplication().NewPropertySet();
	var psOutputs    = TheApplication().NewPropertySet();	
	psInputs.SetProperty(""Object Id"",OrderId); //Order ID
	psInputs.SetProperty(""AddDisChargingType"",AddDisChargingType); //Order ID
	psInputs.SetProperty(""ProcessName"",""STC BB Experience Reprice Addon""); 
	svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);



}
function FnAddLineItems(Inputs, Outputs) 
{ 
var OrderId = Inputs.GetProperty(""ObjectId""); 
var ProdId=Inputs.GetProperty(""ProductId"");
var BillSerType=Inputs.GetProperty(""BillingServiceType"");
//MANUJ Added: For BB Experience -- START
var AddServiceLength=Inputs.GetProperty(""AddServiceLength"");
var AddDisChargingType=Inputs.GetProperty(""AddDisChargingType"");
var AddDisPriceOveride=Inputs.GetProperty(""AddDisPriceOveride"");
var AddDisQuota=Inputs.GetProperty(""AddDisQuota"");
//MANUJ Added: For BB Experience -- END
var sRestrictAccess=Inputs.GetProperty(""RestrictAccess""); //Bala: 27Mar2016: Added for Retention S7 Renewal Offer
var AppObj = TheApplication(); 
var IsOrdLineRec; 
var IsOrderLineDel; 
var OrderType; 
var AddRootId; 
var ActionCode; 
var Vgprs; 
var Vtel; 
var Vsms; 
var Vmms;
var Vaccount;// Mayank: Added for Postpaid Vanity Number 
var ParentProdId; 
var VgprsParentProdId = """"; 
var VsmsParentProdId = """"; 
var VtelParentProdId = """"; 
var VmmsParentProdId = """";
var VaccountParentProdId = """";// Mayank: Added for Postpaid Vanity Number
var VaccountBillProfId = """";// Mayank: Added for Postpaid Vanity Number 
var BBDummyProdid;
//MANUJ: Check for BB Experience Products for which Dummy Discount needs to be added.---STARTED
var sProdId = AppObj.InvokeMethod(""LookupValue"",""STC_BB_APPLY_DISCOUNT"",ProdId);//Apply Dummy Discount : MANUJ
sProdId = sProdId.substr( 0,2 );//Apply Dummy Discount : MANUJ 
//MANUJ: Check for BB Experience Products for which Dummy Discount needs to be added.---STARTED
var sRetRenwlOffr = AppObj.InvokeMethod(""LookupValue"",""STC_RETN_RNWL_DISCOUNT"",ProdId);//Bala: 27Mar2016: Added for Retention S7 Renewal Offer
sRetRenwlOffr = sRetRenwlOffr.substr(0,5);
var sOnceOffProdId = AppObj.InvokeMethod(""LookupValue"",""STC_RETN_ONCEOFF_DISCOUNT"",ProdId);//Bala: 27Mar2016: Added for Retention S7 Renewal Offer
var sOnceOffflag = ""N""; var UnitPriceDiff = 0;
var sOrderTotal = 0;
var OrderBO = AppObj.GetBusObject(""Order Entry (Sales)""); 
var OrderEntry:BusComp = OrderBO.GetBusComp(""Order Entry - Orders""); 
//var OrderLineItem:BusComp =OrderBO.GetBusComp(""Order Entry - Line Items"");  
var OrderLineItem:BusComp =OrderBO.GetBusComp(""Order Entry - Line Items (Simple)"");  

var OrdType = AppObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Provide""); 
 
with(OrderEntry) 
{  
ActivateField(""STC Order SubType""); 
ActivateField(""Order Total"");
ClearToQuery(); 
SetViewMode(AllView); 
SetSearchSpec(""Id"",OrderId); 
ExecuteQuery(); 
var IsOrdRec= FirstRecord(); 
if(IsOrdRec) 
{ 
 OrderType = GetFieldValue(""STC Order SubType"");
 sOrderTotal = GetFieldValue(""Order Total"");
 if(sRetRenwlOffr == ""Allow"")
 {
 	var svcbsService = AppObj.GetService(""Workflow Process Manager"");
 	var psRetInputs = AppObj.NewPropertySet();
 	var psRetOutputs = AppObj.NewPropertySet();
 	psRetInputs.SetProperty(""ProcessName"", ""STC Retention Renewal Offer WF"");
 	psRetInputs.SetProperty(""Object Id"", OrderId);
 	psRetInputs.SetProperty(""ProdId"", ProdId);
 	svcbsService.InvokeMethod(""RunProcess"", psRetInputs, psRetOutputs);
 	psRetInputs = null; psRetOutputs = null;
 }
 //if(OrderType == OrdType) //MANUJ commented for including Modify Orders for dicsount
 //{ //MANUJ commented for including Modify Orders for dicsount
with(OrderLineItem) 
{
if(BillSerType == ""/account"")// Mayank: Added for Postpaid Vanity Number START
{
 var strsearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Root Order Item Id] = [Id])"";
 ActivateField(""Root Order Item Id"");
 ActivateField(""Product Id""); 
 ActivateField(""Billing Account Id"");
 ActivateField(""Billing Profile Id"");
 ActivateField(""Action Code"");
 ClearToQuery(); 
 SetViewMode(AllView); 
 SetSearchExpr(strsearch); 
 ExecuteQuery();
 Vaccount = GetFieldValue(""Id"");
 VaccountParentProdId = GetFieldValue(""Product Id"");
 var BillAccId = GetFieldValue(""Billing Account Id"")
 var rootLineId = GetFieldValue(""Root Order Item Id"");
 VaccountBillProfId = GetFieldValue(""Billing Profile Id"");
 AddNewAddRecVanity(Vaccount,ProdId,OrderId,rootLineId,BillAccId,VaccountParentProdId,VaccountBillProfId,AddServiceLength,AddDisChargingType,AddDisPriceOveride,AddDisQuota);//MANUJ Added: For BB Experience
	if(sProdId == ""BB""){//Found Addons
	
	BBDummyProdid = AppObj.InvokeMethod(""LookupValue"",""STC_BB_DUMMY_DISCOUNT"",ProdId);//Get Dummy Discount Prod Id
	AddNewAddRecVanity(Vaccount,BBDummyProdid,OrderId,rootLineId,BillAccId,VaccountParentProdId,VaccountBillProfId,AddServiceLength,null,null,null);//MANUJ Added: For BB Experience			
	
	}
 }// Mayank: Added for Postpaid Vanity Number END
 var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([STC Plan Type] = 'Service Plan') AND [Action Code]<>'Delete'""; 
 
 ActivateField(""Billing Service Type""); 
 ActivateField(""Action Code""); 
 ActivateField(""Product Id""); 
 ActivateField(""Product Type"");                                                 
 ActivateField(""Billing Account"");  
 ActivateField(""STC Plan Type""); 
 ActivateField(""Billing Account Id""); 
 ActivateField(""Billing Profile Id"");
 ActivateField(""Action Code"");
 ClearToQuery(); 
 SetViewMode(AllView); 
 SetSearchExpr(StrSearch); 
 ExecuteQuery(); 
 IsOrdLineRec= FirstRecord(); 
   if(IsOrdLineRec) 
   {     
     LastRecord(); 
     var recCount = CountRecords();    
     if(recCount == ""1"") 
     {      
     var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Type] = 'Compound') AND [Action Code]<>'Delete'""; //Took off Action Code = 'ADD' to loop through all compound products
     ClearToQuery(); 
     SetViewMode(AllView); 
     SetSearchExpr(StrSearch); 
     ExecuteQuery(); 
     var OrdLineRec = FirstRecord(); 
     while(OrdLineRec) 
     { 
      var AddBillType = GetFieldValue(""Billing Service Type""); //Get Item 
      var rootLineId = GetFieldValue(""Root Order Item Id""); 
      VaccountBillProfId = GetFieldValue(""Billing Profile Id""); 
                switch (AddBillType) 
                { 
                 case ""/service/telco/gprs"": 
                 Vgprs = GetFieldValue(""Id""); 
                 VgprsParentProdId = GetFieldValue(""Product Id"");
                 var BillAccId = GetFieldValue(""Billing Account Id"");
                 
                 break;                  
                 case ""/service/telco/gsm/sms"": 
                 Vsms = GetFieldValue(""Id""); 
                 VsmsParentProdId = GetFieldValue(""Product Id""); 
                 var BillAccId = GetFieldValue(""Billing Account Id"");

                 break;                   
                 case ""/service/telco/gsm/telephony"": 
                 Vtel = GetFieldValue(""Id""); 
                 VtelParentProdId = GetFieldValue(""Product Id""); 
                 var BillAccId = GetFieldValue(""Billing Account Id"");
 
                 break;                   
                 case ""/service/telco/gsm/mms"": 
                 Vmms = GetFieldValue(""Id""); 
                 VmmsParentProdId = GetFieldValue(""Product Id""); 
                 var BillAccId = GetFieldValue(""Billing Account Id"");

                 break;
                 default:                   
                }
                  OrdLineRec = NextRecord(); 
                  }// while(OrdLineRec)                   
				  StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND [Product Id] = '"" + ProdId + ""' AND [Action Code]<>'Delete'"";
                  ClearToQuery(); 
                  SetViewMode(AllView); 
                  SetSearchExpr(StrSearch); 
                  ExecuteQuery();  
                  IsOrderLineDel= FirstRecord(); 
                  if(IsOrderLineDel && BillSerType != ""/account"") //MANUJ: Only applicable for Bundle level prods 
                  {
                  TheApplication().RaiseErrorText(""The Selected product is already present against the customer's asset."");
                  }
                  else
					 {
                    if(BillSerType == ""/service/telco/gsm/mms"") 
                    { 
                     AddNewAddRec(Vmms,ProdId,OrderId,rootLineId,BillAccId,VmmsParentProdId,AddServiceLength,AddDisChargingType,AddDisPriceOveride,AddDisQuota,VaccountBillProfId);//MANUJ Added: For BB Experience); //prodId, OrderId passed.
                     if(sProdId == ""BB"")
                     	{//Found Addons
	
						BBDummyProdid = AppObj.InvokeMethod(""LookupValue"",""STC_BB_DUMMY_DISCOUNT"",ProdId);//Get Dummy Discount Prod Id
						 AddNewAddRec(Vmms,BBDummyProdid,OrderId,rootLineId,BillAccId,VmmsParentProdId,AddServiceLength,null,null,null,VaccountBillProfId);//MANUJ Added: For BB Experience); //prodId, OrderId passed.
						}
                    } 
                    else if(BillSerType == ""/service/telco/gsm/sms"") 
                    { 
                     AddNewAddRec(Vsms,ProdId,OrderId,rootLineId,BillAccId,VsmsParentProdId,AddServiceLength,AddDisChargingType,AddDisPriceOveride,AddDisQuota,VaccountBillProfId);//MANUJ Added: For BB Experience
                     	if(sProdId == ""BB"")
                     	{//Found Addons
	
						BBDummyProdid = AppObj.InvokeMethod(""LookupValue"",""STC_BB_DUMMY_DISCOUNT"",ProdId);//Get Dummy Discount Prod Id
						AddNewAddRec(Vsms,BBDummyProdid,OrderId,rootLineId,BillAccId,VsmsParentProdId,AddServiceLength,null,null,null,VaccountBillProfId);//MANUJ Added: For BB Experience
						}
                    } 
                    else if(BillSerType == ""/service/telco/gsm/telephony"") 
                    { 
                     AddNewAddRec(Vtel,ProdId,OrderId,rootLineId,BillAccId,VtelParentProdId,AddServiceLength,AddDisChargingType,AddDisPriceOveride,AddDisQuota,VaccountBillProfId);//MANUJ Added: For BB Experience 
                     if(sProdId == ""BB"")
                     	{//Found Addons
	
						BBDummyProdid = AppObj.InvokeMethod(""LookupValue"",""STC_BB_DUMMY_DISCOUNT"",ProdId);//Get Dummy Discount Prod Id
					 AddNewAddRec(Vtel,BBDummyProdid,OrderId,rootLineId,BillAccId,VtelParentProdId,AddServiceLength,null,null,null,VaccountBillProfId);//MANUJ Added: For BB Experience 
						}
                    } 
                    else if(BillSerType == ""/service/telco/gprs"") 
                    { 
                     AddNewAddRec(Vgprs,ProdId,OrderId,rootLineId,BillAccId,VgprsParentProdId,AddServiceLength,AddDisChargingType,AddDisPriceOveride,AddDisQuota,VaccountBillProfId);//MANUJ Added: For BB Experience
                     if(sProdId == ""BB"")
                     	{//Found Addons
	
						BBDummyProdid = AppObj.InvokeMethod(""LookupValue"",""STC_BB_DUMMY_DISCOUNT"",ProdId);//Get Dummy Discount Prod Id
						AddNewAddRec(Vgprs,BBDummyProdid,OrderId,rootLineId,BillAccId,VgprsParentProdId,AddServiceLength,null,null,null,VaccountBillProfId);//MANUJ Added: For BB Experience
						}
                    } 
                    IsOrderLineDel = NextRecord(); 
                   } //else        
                
                  }//         if(recCount == ""2"") 
      //          TheApplication().RaiseErrorText(recCount); 
        }//         if(IsOrdLineRec) 
     }//         with(OrderLineItem) 
  // }       //  if(OrderType == OrdType) MANUJ commented for including Modify Orders for dicsount.
  	if(sRetRenwlOffr == ""Allow"" && BillSerType == ""/account"")
  	{
  		with(OrderLineItem)
  		{
  			SetViewMode(AllView);
  			ActivateField(""Net Price"");
  			ActivateField(""Unit Price"");
  			ActivateField(""STC Voucher Promotion Flag"");
  			ActivateField(""NRC CxTotal"");
  			ClearToQuery();
  			SetSearchExpr(""[Order Header Id] = '""+OrderId+""' AND [Product Id] = '"" + ProdId + ""'"");
  			ExecuteQuery(ForwardOnly);
  			if(FirstRecord())
  			{
  				var sNegUnitprice = GetFieldValue(""Net Price"");
  				var sUnitprice = -(sNegUnitprice);
  				var sNegOrderTotal = -(sOrderTotal);
  				UnitPriceDiff =  sOrderTotal - sUnitprice;
  				if(sOrderTotal < sUnitprice)
  				{
  					SetFieldValue(""Unit Price"", sNegOrderTotal);
  					SetFieldValue(""Net Price"", sNegOrderTotal);
  					SetFieldValue(""NRC CxTotal"", sNegOrderTotal);
  					SetFieldValue(""STC Voucher Promotion Flag"", ""Y"");
  					WriteRecord();
  					AddNewAddRecVanity(Vaccount,sOnceOffProdId,OrderId,rootLineId,BillAccId,VaccountParentProdId,VaccountBillProfId,AddServiceLength,AddDisChargingType,AddDisPriceOveride,AddDisQuota);
  					sOnceOffflag = ""Y"";
  				}
  				else
  				{
  					SetFieldValue(""NRC CxTotal"", sNegUnitprice);
  					SetFieldValue(""STC Voucher Promotion Flag"", ""Y"");
  					WriteRecord();
  				}
  			}
  			if(sOnceOffflag == ""Y"")
  			{
  				SetViewMode(AllView);
  				ActivateField(""Net Price"");
  				ActivateField(""Unit Price"");
  				ActivateField(""STC Voucher Promotion Flag"");
  				ClearToQuery();
  				SetSearchExpr(""[Order Header Id] = '""+OrderId+""' AND [Product Id] = '"" + sOnceOffProdId + ""'"");
  				ExecuteQuery(ForwardOnly);
  				if(FirstRecord())
  				{
  					SetFieldValue(""Unit Price"", UnitPriceDiff);
  					SetFieldValue(""Net Price"", UnitPriceDiff);
  					SetFieldValue(""STC Voucher Promotion Flag"", ""Y"");
  					WriteRecord();
  				}
  				CallReprice(OrderId,AddDisChargingType);
  			}
  		}
  	}
  }//         if(IsOrdRec) 
}//with(OrderEntry) 
return(CancelOperation); 
}
function GetListPrice(PriceListId,SelectedProdId)
{

	var AppObj = TheApplication(); 
	var NetPrice;
	var svcbsService = AppObj.GetService(""Workflow Process Manager"");	
	var psInputs    = TheApplication().NewPropertySet();
	var psOutputs    = TheApplication().NewPropertySet();	
	psInputs.SetProperty(""Object Id"",PriceListId); //Order ID
	psInputs.SetProperty(""DiscountProdId"",SelectedProdId); //Order ID
	psInputs.SetProperty(""ProcessName"",""STC BB Experience GetNetPrice Pricelist""); 
	svcbsService.InvokeMethod(""RunProcess"", psInputs, psOutputs);
	NetPrice = psOutputs.GetProperty(""NetPrice"");//Get Main Contract End Date
    return(NetPrice);

}
function GetPortProperty(psInput,aPropName,aSearchField,aSearchValue)
{
 /** Entry point to this function is normal Product Id. **/
 /*
  Port
   Class Id, Class Name, DefCardinality, DefaultPortObject, MaxCardinality, MinCardinality,Name, 
   Port Display Name, Port Item Id
   
   PortObject
    Description, Name, Prod Item Id, Product Id, Version
 
 */
 
 var psPort   = TheApplication().NewPropertySet();
 var psPortObj = TheApplication().NewPropertySet();
 var iGotValue = "false"";

 try {
  for (var l=0;l<psInput.GetChildCount();l++) {
   psPort = psInput.GetChild(l);
   
   for (var i=0;i<psPort.GetChildCount();i++) {
    psPortObj = psPort.GetChild(i);
    if (psPortObj.GetProperty(aSearchField) == aSearchValue) {
     //return(psPortObj.GetProperty(aPropName));
     iGotValue = ""true"";
     break;
    }
   }
   if(""true"" == iGotValue) 
   {
    switch(aPropName) 
    {
     case ""Description"":
     case ""Name"":
     case ""Prod Item Id"":
     case ""Product Id"":
     case ""Version"":
      return(psPortObj.GetProperty(aPropName));
     default:
      return(psPort.GetProperty(aPropName));
     
    }
   }
  }
 } finally {
  psPort   = null;
  psPortObj = null;
 }
 return('');
}
function RCOIS_GetAllPorts(aProductId)
{
 /** Get All the Ports for a Product - 2IT-V1.0 **/
  var psInputs = null;
  var psOutputs  = null;
  var bsRCOIS  = TheApplication().GetService(""Remote Complex Object Instance Service"");
  psInputs = TheApplication().NewPropertySet();
  psOutputs  = TheApplication().NewPropertySet();
  psInputs.SetProperty(""Product Id"",aProductId);
  psInputs.SetProperty(""GetPortDomain"", ""Y"");
  bsRCOIS.InvokeMethod(""GetAllPorts"",psInputs,psOutputs);
  return(psOutputs.Copy());

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
 
  var iReturn;
 
 try  
 {
  iReturn = ContinueOperation;
  switch (MethodName)
  {
   case ""FnAddLineItems"":
     FnAddLineItems(Inputs, Outputs);
    iReturn = CancelOperation;
    break;
                    
   default: 
    iReturn = ContinueOperation;
    
  } //switch
  return (iReturn);
 } 
 catch (e)
 { 
  TheApplication().RaiseErrorText(e.toString());
 }

}
function AddNewAddRec(Vtel,ProdId,OrderId,rootLineId,BillAccId,BillProfId,VmmsParentProdId,ProductPrice)
{
	var OrderBO = TheApplication().GetBusObject(""Order Entry (Sales)"");
	var OrdLineBC = OrderBO.GetBusComp(""Order Entry - Line Items (Simple)"");
	var psPorts    = TheApplication().NewPropertySet();
	var ProdPrice = ToNumber(ProductPrice);
	var vNewLineItemId = """";
	//var psRootPort    = TheApplication().NewPropertySet();
	with(OrdLineBC)
	{
		ActivateField(""Status"");
		ActivateField(""Cfg State Code"");
		ActivateField(""Billing Account Id"");
		ActivateField(""Billing Profile Id"");
		ActivateField(""Net Price"");
		//ClearToQuery();
		//SetViewMode(AllView);
		//SetSearchSpec(""Id"",LineId);
		//ExecuteQuery();
		//var IsOrdLineUpdRec= FirstRecord();
		//if(!IsOrdLineUpdRec)
		//{

		psPorts = RCOIS_GetAllPorts(VmmsParentProdId);
		var sToPortItemId = GetPortProperty(psPorts,""Port Item Id"",""Product Id"",ProdId);
		var sProdItemId = GetPortProperty(psPorts,""Prod Item Id"",""Product Id"",ProdId);

		NewRecord(NewAfter);
		SetFieldValue(""Order Header Id"",OrderId);
		SetFieldValue(""Product Id"", ProdId);   
		SetFieldValue(""Parent Order Item Id"",Vtel); 
		SetFieldValue(""Root Order Item Id"",rootLineId);
		SetFieldValue(""Billing Profile Id"",BillProfId);
		SetFieldValue(""Product Port Id"",sToPortItemId);
		SetFieldValue(""Prod Item Id"", sProdItemId);
		SetFieldValue(""Status"",""In Progress"");
		SetFieldValue(""Cfg State Code"",""User Requested Item"");
		SetFieldValue(""Billing Account Id"",BillAccId);
		SetFieldValue(""Net Price"", ProdPrice);
		WriteRecord();

		vNewLineItemId = GetFieldValue(""Id"");
		OrdLineBC = null;
		OrderBO = null;
		
		return (vNewLineItemId);

		//}  
	}
}
function FnAddLineItems(Inputs, Outputs)
{
	var AppObj = TheApplication();
	var OrderId, Product, ActionCode, DeviceProdId, DeviceLineId;
	var vNewLineItemId = """";
	with(Inputs)
	{
		OrderId = GetProperty(""ObjectId"");
		Product = GetProperty(""Product"");
		ActionCode = GetProperty(""ActionCode"");
		DeviceProdId = GetProperty(""DeviceProdId"");
		DeviceLineId = GetProperty(""DeviceLineId"");
	}
	Outputs.SetProperty(""NewLineItemId"", """");

	var IsOrdLineRec, IsOrderLineDel, OrderType, AddRootId;
	var Vgprs, StrSearch="""", Vtel, Vsms, Vmms, ProductPrice;
	var disc1 = ""Product"", disc2 = ""Product"", disc3 = ""Product"";
	var ParentProdId, VgprsParentProdId = """", VsmsParentProdId = """", VtelParentProdId = """", VmmsParentProdId = """";
	var BillAccId, OrdLineRec, BillProfId, LineId, AddBillType, rootLineId;
	var OrderBO = AppObj.GetBusObject(""Order Entry (Sales)"");
	var OrderEntry:BusComp = OrderBO.GetBusComp(""Order Entry - Orders"");
	var OrderLineItem:BusComp =OrderBO.GetBusComp(""Order Entry - Line Items (Simple)"");
	var OrdType = AppObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Modify"");
	var LOVBC:BusComp = AppObj.GetBusObject(""List Of Values"").GetBusComp(""List Of Values"");
	var ProdBC = AppObj.GetBusObject(""Admin ISS Product Definition"").GetBusComp(""Internal Product - ISS Admin"");
	//[MANUJ] : [Postpaid Renewal Offer]
	var VPackage = """", VPackageParentProdId = """";
	//[MANUJ] : [Postpaid Renewal Offer]

	with(OrderEntry)
	{
		ActivateField(""STC Order SubType"");
		ClearToQuery();
		SetViewMode(AllView);
		SetSearchSpec(""Id"",OrderId);
		ExecuteQuery();
		var IsOrdRec= FirstRecord();
		if(IsOrdRec)
		{
			OrderType = GetFieldValue(""STC Order SubType"");
			//  if(OrderType == OrdType)
			/// {
			if(ActionCode == ""Add"")
			{
				with(OrderLineItem)
				{
					if(DeviceLineId !=null && DeviceLineId !="""")
							{
								StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND [Parent Order Item Id]='""+DeviceLineId+""' AND ([Product Id] = '"" + Product + ""') AND [Action Code] = 'Add'"";
							}
							else
							{
								StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + Product + ""') AND [Action Code] = 'Add'"";
							}
					ActivateField(""Billing Service Type"");
					ActivateField(""Action Code"");
					ActivateField(""Product Id"");
					ActivateField(""Product Type"");
					ActivateField(""Billing Account Id"");
					ActivateField(""Billing Profile Id"");
					//  ActivateField(""Billing Account"");
					ClearToQuery();
					SetViewMode(AllView);
					SetSearchExpr(StrSearch);
					//          SetSearchSpec(""Order Header Id"",OrderId);
					ExecuteQuery(ForwardOnly);
					IsOrdLineRec= FirstRecord();
					if(!IsOrdLineRec && ActionCode == ""Add"")
					{
						with(LOVBC)
						{//Add Product ROW_ID in this LOV if you want to override the price: Optional
							var LovSpec = ""[Value] = '""+ Product +""' AND [Type] = 'STC_ADD_PROD'"";
							SetViewMode(AllView);
							ActivateField(""High"");
							ActivateField(""Description"");
							ActivateField(""Low"");
							ClearToQuery();
							SetSearchExpr(LovSpec);
							ExecuteQuery(ForwardOnly);
							var islovRec = FirstRecord();
							if(islovRec)
							{
								ProductPrice = GetFieldValue(""Low"");
							}// end of if(islovRec)
						}// end of with(LOVBC)
						with(OrderLineItem)
						{
							//StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Type] = 'Compound') AND ([Action Code] <> 'Delete' )"";
							//[MANUJ] : [Postpaid Renewal Offer]
							StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Type] = 'Package') AND ([Action Code] <> 'Delete' )"";
							ClearToQuery();
							SetViewMode(AllView);
							SetSearchExpr(StrSearch);
							ExecuteQuery(ForwardOnly);
							OrdLineRec = FirstRecord();
							if(OrdLineRec)
							{
								AddBillType = GetFieldValue(""Billing Service Type"");
								rootLineId = GetFieldValue(""Id"");
								VPackageParentProdId = GetFieldValue(""Product Id"");
								BillAccId = GetFieldValue(""Billing Account Id"");
								BillProfId = GetFieldValue(""Billing Profile Id"");
							}// while(OrdLineRec)
						}
						with(OrderLineItem)
						{
							if(DeviceLineId !=null && DeviceLineId !="""")
							{
								StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND [Parent Order Item Id]='""+DeviceLineId+""' AND ([Product Id] = '"" + Product + ""') AND [Action Code] = 'Add'"";
							}
							else
							{
								StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + Product + ""') AND [Action Code] = 'Add'"";
							}
							ClearToQuery();
							SetViewMode(AllView);
							SetSearchExpr(StrSearch);
							ExecuteQuery();
							OrdLineRec = FirstRecord();
							if(!OrdLineRec)
							{
								vNewLineItemId = AddNewAddRec(DeviceLineId,Product,OrderId,rootLineId,BillAccId,BillProfId,DeviceProdId,ProductPrice);
								Outputs.SetProperty(""NewLineItemId"", vNewLineItemId);
							}
						}// end of 	with(OrderLineItem)
						//          TheApplication().RaiseErrorText(recCount);
					}//         if(IsOrdLineRec)
				}//         with(OrderLineItem)
			}//if(ActionCode == ""Add"")
			
			//  }//         if(OrderType == OrdType)
		}//         if(IsOrdRec)
	}//with(OrderEntry)
return(CancelOperation);
}
function FnAddLineItemsMultiple(Inputs, Outputs)
{
	var AppObj = TheApplication();
	var OrderId="""", Product="""", ActionCode="""", DeviceProdId="""", DeviceLineId="""";
	var vNewLineItemId = """";
	with(Inputs)
	{
		OrderId = GetProperty(""ObjectId"");
		Product = GetProperty(""Product"");
		ActionCode = GetProperty(""ActionCode"");
		DeviceProdId = GetProperty(""DeviceProdId"");
		DeviceLineId = GetProperty(""DeviceLineId"");
	}
	Outputs.SetProperty(""NewLineItemId"", """");

	var IsOrdLineRec, IsOrderLineDel, OrderType, AddRootId;
	var Vgprs, StrSearch="""", Vtel, Vsms, Vmms, ProductPrice;
	var disc1 = ""Product"", disc2 = ""Product"", disc3 = ""Product"";
	var ParentProdId, VgprsParentProdId = """", VsmsParentProdId = """", VtelParentProdId = """", VmmsParentProdId = """";
	var BillAccId, OrdLineRec, BillProfId, LineId, AddBillType, rootLineId;
	var OrderBO = AppObj.GetBusObject(""Order Entry (Sales)"");
	var OrderEntry:BusComp = OrderBO.GetBusComp(""Order Entry - Orders"");
	var OrderLineItem:BusComp =OrderBO.GetBusComp(""Order Entry - Line Items (Simple)"");
	var OrdType = AppObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Modify"");
	var LOVBC:BusComp = AppObj.GetBusObject(""List Of Values"").GetBusComp(""List Of Values"");
	var ProdBC = AppObj.GetBusObject(""Admin ISS Product Definition"").GetBusComp(""Internal Product - ISS Admin"");
	//[MANUJ] : [Postpaid Renewal Offer]
	var VPackage = """", VPackageParentProdId = """";
	//[MANUJ] : [Postpaid Renewal Offer]

	with(OrderEntry)
	{
		ActivateField(""STC Order SubType"");
		ClearToQuery();
		SetViewMode(AllView);
		SetSearchSpec(""Id"",OrderId);
		ExecuteQuery();
		var IsOrdRec= FirstRecord();
		if(IsOrdRec)
		{
			OrderType = GetFieldValue(""STC Order SubType"");
			//  if(OrderType == OrdType)
			/// {
			if(ActionCode == ""Add"")
			{
				with(LOVBC)
				{//Add Product ROW_ID in this LOV if you want to override the price: Optional
					var LovSpec = ""[Value] = '""+ Product +""' AND [Type] = 'STC_ADD_PROD'"";
					SetViewMode(AllView);
					ActivateField(""High"");
					ActivateField(""Description"");
					ActivateField(""Low"");
					ClearToQuery();
					SetSearchExpr(LovSpec);
					ExecuteQuery(ForwardOnly);
					var islovRec = FirstRecord();
					if(islovRec)
					{
						ProductPrice = GetFieldValue(""Low"");
					}// end of if(islovRec)
				}// end of with(LOVBC)
				with(OrderLineItem)
				{
					StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Type] = 'Package') AND ([Action Code] <> 'Delete' )"";
					ActivateField(""Billing Service Type"");
					ActivateField(""Product Id"");
					ActivateField(""Billing Account Id"");
					ActivateField(""Billing Profile Id"");
					ClearToQuery();
					SetViewMode(AllView);
					SetSearchExpr(StrSearch);
					ExecuteQuery(ForwardOnly);
					OrdLineRec = FirstRecord();
					if(OrdLineRec)
					{
						AddBillType = GetFieldValue(""Billing Service Type"");
						rootLineId = GetFieldValue(""Id"");
						VPackageParentProdId = GetFieldValue(""Product Id"");
						BillAccId = GetFieldValue(""Billing Account Id"");
						BillProfId = GetFieldValue(""Billing Profile Id"");
					}// while(OrdLineRec)
				}
				
				vNewLineItemId = AddNewAddRec(DeviceLineId,Product,OrderId,rootLineId,BillAccId,BillProfId,DeviceProdId,ProductPrice);
				Outputs.SetProperty(""NewLineItemId"", vNewLineItemId);
			}//if(ActionCode == ""Add"")
		}//if(IsOrdRec)
	}//with(OrderEntry)
return(CancelOperation);
}
function GetPortProperty(psInput,aPropName,aSearchField,aSearchValue)
{
 /** Entry point to this function is normal Product Id. **/
 /*
  Port
   Class Id, Class Name, DefCardinality, DefaultPortObject, MaxCardinality, MinCardinality,Name, 
   Port Display Name, Port Item Id
   
   PortObject
    Description, Name, Prod Item Id, Product Id, Version
 
 */
 
 var psPort   = TheApplication().NewPropertySet();
 var psPortObj = TheApplication().NewPropertySet();
 var iGotValue = "false"";

 try {
  for (var l=0;l<psInput.GetChildCount();l++) {
   psPort = psInput.GetChild(l);
   
   for (var i=0;i<psPort.GetChildCount();i++) {
    psPortObj = psPort.GetChild(i);
    if (psPortObj.GetProperty(aSearchField) == aSearchValue) {
     //return(psPortObj.GetProperty(aPropName));
     iGotValue = ""true"";
     break;
    }
   }
   if(""true"" == iGotValue) {
    switch(aPropName) {
     case ""Description"":
     case ""Name"":
     case ""Prod Item Id"":
     case ""Product Id"":
     case ""Version"":
      return(psPortObj.GetProperty(aPropName));
     default:
      return(psPort.GetProperty(aPropName));
     
    }
   }
  }
 } finally {
  psPort   = null;
  psPortObj = null;
 }
 return('');
}
function RCOIS_GetAllPorts(aProductId)
{
 /** Get All the Ports for a Product - 2IT-V1.0 **/

 var psInputs = null;
 var psOutputs  = null;


     var bsRCOIS  = TheApplication().GetService(""Remote Complex Object Instance Service"");
  psInputs = TheApplication().NewPropertySet();
  psOutputs  = TheApplication().NewPropertySet();

  psInputs.SetProperty(""Product Id"",aProductId);
  psInputs.SetProperty(""GetPortDomain"", ""Y"");

  bsRCOIS.InvokeMethod(""GetAllPorts"",psInputs,psOutputs);
  return(psOutputs.Copy());

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
 
var iReturn;
 
	try  
	{
		iReturn = ContinueOperation;
		switch (MethodName)
		{
			case ""FnAddLineItems"":
				FnAddLineItems(Inputs, Outputs);
				iReturn = CancelOperation;
				break;
			case ""FnAddLineItemsMultiple"":
				FnAddLineItemsMultiple(Inputs, Outputs);
				iReturn = CancelOperation;
				break;
			            
			default: 
				iReturn = ContinueOperation;
		
		} //switch
		return (iReturn);
	} 
	catch (e)
	{ 
		TheApplication().RaiseErrorText(e.toString());
	}

}
function AddNewAddRec(Vtel,ProdId,OrderId,rootLineId,BillAccId,BillProfId,VmmsParentProdId,ProductPrice)
{
var StrOrdLine = TheApplication().GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Entry - Line Items (Simple)"");
var psPorts    = TheApplication().NewPropertySet();
var ProdPrice = ToNumber(ProductPrice);
//var psRootPort    = TheApplication().NewPropertySet();
with(StrOrdLine)
{
ActivateField(""Status"");
ActivateField(""Cfg State Code"");
ActivateField(""Billing Account Id"");
ActivateField(""Billing Profile Id"");
ActivateField(""Net Price"");
//ClearToQuery();
//SetViewMode(AllView);
//SetSearchSpec(""Id"",LineId);
//ExecuteQuery();
//var IsOrdLineUpdRec= FirstRecord();
//if(!IsOrdLineUpdRec)
//{


  psPorts = RCOIS_GetAllPorts(VmmsParentProdId);
  
  var sToPortItemId = GetPortProperty(psPorts,""Port Item Id"",""Product Id"",ProdId);
  
  
  NewRecord(NewAfter);
   SetFieldValue(""Order Header Id"",OrderId);
   SetFieldValue(""Product Id"", ProdId);   
   SetFieldValue(""Parent Order Item Id"",Vtel); 
   SetFieldValue(""Root Order Item Id"",rootLineId);
   SetFieldValue(""Billing Profile Id"",BillProfId);
   SetFieldValue(""Product Port Id"",sToPortItemId);
   SetFieldValue(""Status"",""In Progress"");
   SetFieldValue(""Cfg State Code"",""User Requested Item"");
    SetFieldValue(""Billing Account Id"",BillAccId);
    SetFieldValue(""Net Price"", ProdPrice);
     WriteRecord();
    
   }
   
//}
}
function FnAddLineItems(Inputs, Outputs)
{
var OrderId = Inputs.GetProperty(""ObjectId"");
var Product = Inputs.GetProperty(""Product"");
var ActionCode = Inputs.GetProperty(""ActionCode"");
var AppObj = TheApplication();
var IsOrdLineRec;
var IsOrderLineDel;
var OrderType;
var AddRootId;
var Vgprs;var StrSearch
var Vtel;
var Vsms;
var Vmms;
var ProductPrice;
var disc1 = ""Product"";
var disc2 = ""Product"";
var disc3 = ""Product"";
var ParentProdId;
var VgprsParentProdId = """";
var VsmsParentProdId = """";
var VtelParentProdId = """";
var VmmsParentProdId = """";
var BillAccId;
var OrdLineRec;
var BillProfId;
var LineId;
var OrderBO = AppObj.GetBusObject(""Order Entry (Sales)"");
var OrderEntry:BusComp = OrderBO.GetBusComp(""Order Entry - Orders"");
var OrderLineItem:BusComp =OrderBO.GetBusComp(""Order Entry - Line Items (Simple)"");
var OrdType = AppObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Modify"");
var LOVBC:BusComp = AppObj.GetBusObject(""List Of Values"").GetBusComp(""List Of Values"");
var ProdBC = AppObj.GetBusObject(""Admin ISS Product Definition"").GetBusComp(""Internal Product - ISS Admin"");
//[MANUJ] : [Postpaid Renewal Offer]
var VPackage = """";
var VPackageParentProdId = """";
//[MANUJ] : [Postpaid Renewal Offer]
with(OrderEntry)
{
            ActivateField(""STC Order SubType"");
            ClearToQuery();
            SetViewMode(AllView);
            SetSearchSpec(""Id"",OrderId);
            ExecuteQuery();
            var IsOrdRec= FirstRecord();
            if(IsOrdRec)
            {
                        OrderType = GetFieldValue(""STC Order SubType"");
                      //  if(OrderType == OrdType)
                       /// {
                                    if(ActionCode == ""Add""){
                                    with(OrderLineItem)
                                    {
                                                var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + Product + ""') AND [Action Code] = 'Add'"";
                                                ActivateField(""Billing Service Type"");
                                                ActivateField(""Action Code"");
                                                ActivateField(""Product Id"");
                                                ActivateField(""Product Type"");
                                                ActivateField(""Billing Account Id"");
                                                ActivateField(""Billing Profile Id"");
                                              //  ActivateField(""Billing Account"");
                                                ClearToQuery();
                                                SetViewMode(AllView);
                                                SetSearchExpr(StrSearch);
                                    //          SetSearchSpec(""Order Header Id"",OrderId);
                                                ExecuteQuery();
                                                IsOrdLineRec= FirstRecord();
                                                if(!IsOrdLineRec && ActionCode == ""Add"")
                                                {
             with(LOVBC)
             {
             var LovSpec = ""[Value] = '""+ Product +""' AND [Type] = 'STC_ADD_PROD'"";
             SetViewMode(AllView);
             ActivateField(""High"");
             ActivateField(""Description"");
             ActivateField(""Low"");
             ClearToQuery();
             SetSearchExpr(LovSpec);
             ExecuteQuery(ForwardOnly);
             var islovRec = FirstRecord();
                                                           
                                                            if(islovRec)
                                                            {
                                                            ProductPrice = GetFieldValue(""Low"");
                                                     with(OrderLineItem)
                                                           {
                                                            //StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Type] = 'Compound') AND ([Action Code] <> 'Delete' )"";
															//[MANUJ] : [Postpaid Renewal Offer]
															StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Type] = 'Compound' OR [Product Type] = 'Package') AND ([Action Code] <> 'Delete' )"";
                                                            ClearToQuery();
                                                            SetViewMode(AllView);
                                                            SetSearchExpr(StrSearch);
                                                            ExecuteQuery();
                                                            OrdLineRec = FirstRecord();
                                                            while(OrdLineRec)
                                                            {
                                                             var AddBillType = GetFieldValue(""Billing Service Type"");
                 var rootLineId = GetFieldValue(""Root Order Item Id"");
                 switch (AddBillType)
                 {
                 case ""/service/telco/gprs"":
                 Vgprs = GetFieldValue(""Id"");
                 VgprsParentProdId = GetFieldValue(""Product Id"");
                 BillAccId = GetFieldValue(""Billing Account Id"");
                 BillProfId = GetFieldValue(""Billing Profile Id"");
                 break;
                 
                 case ""/service/telco/gsm/sms"":
                 Vsms = GetFieldValue(""Id"");
                 VsmsParentProdId = GetFieldValue(""Product Id"");
                 BillAccId = GetFieldValue(""Billing Account Id"");
                 BillProfId = GetFieldValue(""Billing Profile Id"");
                 break;
                 
                 case ""/service/telco/gsm/telephony"":
                 Vtel = GetFieldValue(""Id"");
                 VtelParentProdId = GetFieldValue(""Product Id"");
                 BillAccId = GetFieldValue(""Billing Account Id"");
                 BillProfId = GetFieldValue(""Billing Profile Id"");
                 break;
                 
                 case ""/service/telco/gsm/mms"":
                 Vmms = GetFieldValue(""Id"");
                 VmmsParentProdId = GetFieldValue(""Product Id"");
                 BillAccId = GetFieldValue(""Billing Account Id"");
                 BillProfId = GetFieldValue(""Billing Profile Id"");
                 break;
				 //[MANUJ]: [Postpaid  Renewal Offer]
                 case """":
                 VPackage = GetFieldValue(""Id"");
                 VPackageParentProdId = GetFieldValue(""Product Id"");
                 BillAccId = GetFieldValue(""Billing Account Id"");
                 BillProfId = GetFieldValue(""Billing Profile Id"");
                 break;
				 //[MANUJ]: [Postpaid  Renewal Offer]

                 default:
                 
                 }
                                                            
                                                              OrdLineRec = NextRecord();
                                                            }// while(OrdLineRec)
                                                           }
                                                           with(ProdBC)
                                                           {
                                                           var StrProdSearch = ""[Id] = '"" + Product + ""'"";
                                                            ActivateField(""Billing Service Type"");
                                                            ClearToQuery();
                                                            SetViewMode(AllView);
                                                            SetSearchExpr(StrProdSearch);
                                                            ExecuteQuery();
                                                            var IsProduct= FirstRecord();
                                                           while(IsProduct)
                                                            {
                                                             var ProdId = GetFieldValue(""Id"");
                                                             var BillSerType = GetFieldValue(""Billing Service Type"");
                                                             
                                                             
                                                             if(BillSerType == ""/service/telco/gsm/mms"")
                                                             {
                                                             with(OrderLineItem)
                                                             {
                var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND [Action Code] = 'Add'"";
                ClearToQuery();
                SetViewMode(AllView);
                SetSearchExpr(StrSearch);
                ExecuteQuery();
                var OrdLineRec = FirstRecord();
                if(!OrdLineRec){
               
                                                              AddNewAddRec(Vmms,ProdId,OrderId,rootLineId,BillAccId,BillProfId,VmmsParentProdId,ProductPrice);}
                                                             }
                                                             }
                                                             else if(BillSerType == ""/service/telco/gsm/sms"")
                                                             {
                                                               with(!OrderLineItem)
                                                             {
                var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND [Action Code] = 'Add'"";
                ClearToQuery();
                SetViewMode(AllView);
                SetSearchExpr(StrSearch);
                ExecuteQuery();
                var OrdLineRec = FirstRecord();
                if(!OrdLineRec){
               
                                                              AddNewAddRec(Vsms,ProdId,OrderId,rootLineId,BillAccId,BillProfId,VsmsParentProdId,ProductPrice);}}
                                                             }
                                                             else if(BillSerType == ""/service/telco/gsm/telephony"")
                                                             {
                                                                with(OrderLineItem)
                                                             {
                var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND [Action Code] = 'Add'"";
                ClearToQuery();
                SetViewMode(AllView);
                SetSearchExpr(StrSearch);
                ExecuteQuery();
                var OrdLineRec = FirstRecord();
                if(!OrdLineRec){
               
                                                              AddNewAddRec(Vtel,ProdId,OrderId,rootLineId,BillAccId,BillProfId,VtelParentProdId,ProductPrice);}}
                                                             }
				//[MANUJ] : [Postpaid Renewal Offer]
				else if(BillSerType == ""/account"")
                                                             {
                                                               with(OrderLineItem)
                                                             {
                var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND [Action Code] = 'Add'"";
                ClearToQuery();
                SetViewMode(AllView);
                SetSearchExpr(StrSearch);
                ExecuteQuery();
                var OrdLineRec = FirstRecord();
                if(!OrdLineRec){
               
                                                              AddNewAddRec(VPackage,ProdId,OrderId,rootLineId,BillAccId,BillProfId,VPackageParentProdId,ProductPrice);}}
                                                             }
				//[MANUJ] : [Postpaid Renewal Offer]
                                                             else if(BillSerType == ""/service/telco/gprs"")
                                                             {
                                                                with(OrderLineItem)
                                                             {
                var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND [Action Code] = 'Add'"";
                ClearToQuery();
                SetViewMode(AllView);
                SetSearchExpr(StrSearch);
                ExecuteQuery();
                var OrdLineRec = FirstRecord();
                if(!OrdLineRec){
               
                                                              AddNewAddRec(Vgprs,ProdId,OrderId,rootLineId,BillAccId,BillProfId,VgprsParentProdId,ProductPrice);}}
                                                             }
                                                             IsProduct = NextRecord();
                                                         }
                                                        }//with(ProdBC)
                                               
                                                            }// end of with(LOVBC)
                                                            }
                                                //          TheApplication().RaiseErrorText(recCount);
                                                }//         if(IsOrdLineRec)
                                    }//         with(OrderLineItem)
                                    }//if(ActionCode == ""Add"")
    if(ActionCode == ""Delete"")
    {
     with(LOVBC)
     {
      var LovSpec = ""[Value] = '""+ Product +""' AND [Type] = 'STC_DEL_PROD'"";
      SetViewMode(AllView);
      ActivateField(""High"");
      ActivateField(""Description"");
      ActivateField(""Low"");
      ClearToQuery();
      SetSearchExpr(LovSpec);
      ExecuteQuery(ForwardOnly);
      var islovRec = FirstRecord();
      
      if(islovRec)
      {
       disc1 = GetFieldValue(""High"");
       disc2 = GetFieldValue(""Description"");
       disc3 = GetFieldValue(""Low"");
        with(OrderLineItem)
        {
       StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND [Action Code] <> 'Delete' AND ([Product Id] = '"" + Product + ""')"";
        ActivateField(""Action Code"");
        InvokeMethod(""SetAdminMode"", ""TRUE"");
        ClearToQuery();
        SetViewMode(AllView);
        SetSearchExpr(StrSearch);
        ExecuteQuery();
        OrdLineRec = FirstRecord();
        while(OrdLineRec)
        {
         SetFieldValue(""Action Code"", ""Delete"");
         WriteRecord();
         OrdLineRec = NextRecord();
        }// end of while(OrdLineRec)
        }//end of with(OrderLineItem)
      }
     }
    }           
                      //  }//         if(OrderType == OrdType)
            }//         if(IsOrdRec)
}//with(OrderEntry)
return(CancelOperation);
}
function GetPortProperty(psInput,aPropName,aSearchField,aSearchValue)
{
 /** Entry point to this function is normal Product Id. **/
 /*
  Port
   Class Id, Class Name, DefCardinality, DefaultPortObject, MaxCardinality, MinCardinality,Name, 
   Port Display Name, Port Item Id
   
   PortObject
    Description, Name, Prod Item Id, Product Id, Version
 
 */
 
 var psPort   = TheApplication().NewPropertySet();
 var psPortObj = TheApplication().NewPropertySet();
 var iGotValue = "false"";

 try {
  for (var l=0;l<psInput.GetChildCount();l++) {
   psPort = psInput.GetChild(l);
   
   for (var i=0;i<psPort.GetChildCount();i++) {
    psPortObj = psPort.GetChild(i);
    if (psPortObj.GetProperty(aSearchField) == aSearchValue) {
     //return(psPortObj.GetProperty(aPropName));
     iGotValue = ""true"";
     break;
    }
   }
   if(""true"" == iGotValue) {
    switch(aPropName) {
     case ""Description"":
     case ""Name"":
     case ""Prod Item Id"":
     case ""Product Id"":
     case ""Version"":
      return(psPortObj.GetProperty(aPropName));
     default:
      return(psPort.GetProperty(aPropName));
     
    }
   }
  }
 } finally {
  psPort   = null;
  psPortObj = null;
 }
 return('');
}
function RCOIS_GetAllPorts(aProductId)
{
 /** Get All the Ports for a Product - 2IT-V1.0 **/

 var psInputs = null;
 var psOutputs  = null;


     var bsRCOIS  = TheApplication().GetService(""Remote Complex Object Instance Service"");
  psInputs = TheApplication().NewPropertySet();
  psOutputs  = TheApplication().NewPropertySet();

  psInputs.SetProperty(""Product Id"",aProductId);
  psInputs.SetProperty(""GetPortDomain"", ""Y"");

  bsRCOIS.InvokeMethod(""GetAllPorts"",psInputs,psOutputs);
  return(psOutputs.Copy());

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
 
  var iReturn;
 
 try  
 {
  iReturn = ContinueOperation;
  switch (MethodName)
  {
   case ""FnAddLineItems"":
     FnAddLineItems(Inputs, Outputs);
    iReturn = CancelOperation;
    break;
                    
   default: 
    iReturn = ContinueOperation;
    
  } //switch
  return (iReturn);
 } 
 catch (e)
 { 
  TheApplication().RaiseErrorText(e.toString());
 }

}
function EligiblePromotion(Inputs, Outputs)
{
try
{
	var OrdLineId = Inputs.GetProperty(""OrderHeaderId"");
	var OrderHeaderId = """";
	var strSubscriberId = """";
	var sBTLEligiblePln = """";
	var sOrderSubStat = """";
	var sServcieId = """";
	var sRootItemId = """";
	
	var appObj = TheApplication();
	TheApplication().SetProfileAttr(""ErrorEligibleProm"","""");
	var boOrder = appObj.GetBusObject(""CMU Order Line Item"");
	var bcOrder = boOrder.GetBusComp(""MACD Order Entry - Line Items"");
	var bcOrderRe = boOrder.GetBusComp(""MACD Order Entry - Line Items"");
	
	var sBO = TheApplication().GetBusObject(""Order Entry (Sales)"");
	var sBC = sBO.GetBusComp(""Order Entry - Orders"");
	var sLineBc = sBO.GetBusComp(""Order Entry - Line Items"");
	
	
	var sOrderLineBO = appObj.GetBusObject(""MACD Performance Order"");
	var sOrderLineBc = sOrderLineBO.GetBusComp(""MACD Order Entry - Line Items"");
	
	with(sOrderLineBc)
	{
		SetViewMode(AllView);
		ActivateField(""Order Header Id"");
		ActivateField(""Service Id"");
		ActivateField(""Root Order Item Id"");
		ClearToQuery();
		SetSearchSpec(""Id"", OrdLineId);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord())
		{
			OrderHeaderId = GetFieldValue(""Order Header Id"");
			sRootItemId = GetFieldValue(""Root Order Item Id"");
			sServcieId = GetFieldValue(""Service Id"");
			TheApplication().SetProfileAttr(""sEligibleOrderMSISDN"", sServcieId);
			TheApplication().SetProfileAttr(""sEligiblePromoOrderId"", OrderHeaderId);
		}
		if(sRootItemId != OrdLineId)
		{
			SetViewMode(AllView);
			ActivateField(""Service Id"");
			ActivateField(""Order Header Id"");
			ClearToQuery();
			SetSearchSpec(""Id"", sRootItemId);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				OrderHeaderId = GetFieldValue(""Order Header Id"");
				sServcieId = GetFieldValue(""Service Id"");
				TheApplication().SetProfileAttr(""sEligibleOrderMSISDN"", sServcieId);
				TheApplication().SetProfileAttr(""sEligiblePromoOrderId"", OrderHeaderId);
			}
		}
	}
	with(sBC)
	{
		SetViewMode(AllView);
		//ActivateField(""STC Subscriber Id"");//Mayank: Added For  LIBSHARA
		ActivateField(""STCCANIDNUM"");//Mayank: Added For  LIBSHARA
		ActivateField(""STC Order Sub Status"");
		ClearToQuery();
		SetSearchSpec(""Id"", OrderHeaderId);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord())
		{
			//strSubscriberId = GetFieldValue(""STC Subscriber Id"");//Mayank: Added For  LIBSHARA
			strSubscriberId = GetFieldValue(""STCCANIDNUM"");//Mayank: Added For  LIBSHARA
			sOrderSubStat = GetFieldValue(""STC Order Sub Status"")
			TheApplication().SetProfileAttr(""sEligibleOrderIDNum"", strSubscriberId);
			TheApplication().SetProfileAttr(""EligibleOrderSubStat"", sOrderSubStat);
		}
	}
	with(bcOrder)
	{
		ActivateField(""STC Plan Type"");
		ActivateField(""Action Code"");
		ActivateField(""Product"");
		ActivateField(""Product Part Number"");
		SetViewMode(AllView);
		ClearToQuery();
		var strExpr = ""[Order Header Id] = '""+ OrderHeaderId +""' AND [STC Plan Type] = 'Service Plan' AND [Action Code] <>	 'Delete'"";
		SetSearchExpr(strExpr);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord())
		{	
			var sServicePlan = GetFieldValue(""Product"");
			var sSrvcPlnPartNum = GetFieldValue(""Product Part Number"");
			with(bcOrderRe)
			{
				ActivateField(""Product Part Number"");
				ActivateField(""Action Code"");
				SetViewMode(AllView);
				ClearToQuery();
				strExpr = ""[Order Header Id] = '""+ OrderHeaderId +""' AND [Product Part Number] LIKE 'VIPCD*' AND [Action Code] = 'Add'"";
				SetSearchExpr(strExpr);
				ExecuteQuery(ForwardOnly);
				var VIPRec = FirstRecord()
				if(VIPRec)
					appObj.SetProfileAttr(""sEligibleServicePlanName"", sServicePlan);
				else
				{
					sBTLEligiblePln = TheApplication().InvokeMethod(""LookupValue"",""STC_BTL_PROMO_PLAN"",sSrvcPlnPartNum);
					sBTLEligiblePln = sBTLEligiblePln.substring(0,7);
					if(sBTLEligiblePln == ""BTLPLAN"")
						appObj.SetProfileAttr(""sEligibleServicePlanName"", sServicePlan);
					else	
						appObj.SetProfileAttr(""sEligibleServicePlanName"", ""NOSERVICEPLAN"");
				}
				if(!VIPRec && sBTLEligiblePln != ""BTLPLAN"")
				{
					appObj.SetProfileAttr(""sEligibleServicePlanName"", ""NOSERVICEPLAN"");
				}//end of if(!VIPRec
			}//end of with(bcOrderRe)
		}//end of if(FirstRecord())
		else
		{
			TheApplication().SetProfileAttr(""ErrorEligibleProm"",""Y"");
			TheApplication().RaiseErrorText(""Please Customizate the order"");
		}
	}//end of with(bcOrder)
}
catch(e)
{
	TheApplication().SetProfileAttr(""ErrorEligibleProm"",""Y"");
	throw(e);
}
finally
{
	bcOrderRe = null;  bcOrder = null; boOrder = null;
	sLineBc = null; sBC = null; sBO = null;
	sOrderLineBc = null; sOrderLineBO = null;
}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""EligiblePromotion"")
	{
		EligiblePromotion(Inputs, Outputs);
		return(CancelOperation);
	}
	
	return (ContinueOperation);
}
function AddNewAddRec(Vtel,ProdId,OrderId,rootLineId,BillAccId,BillProfId,VmmsParentProdId,ProductPrice)
{
var StrOrdLine = TheApplication().GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Entry - Line Items (Simple)"");
var psPorts    = TheApplication().NewPropertySet();
var ProdPrice = ToNumber(ProductPrice);
//var psRootPort    = TheApplication().NewPropertySet();
with(StrOrdLine)
{
ActivateField(""Status"");
ActivateField(""Cfg State Code"");
ActivateField(""Billing Account Id"");
ActivateField(""Billing Profile Id"");
ActivateField(""Net Price"");
//ClearToQuery();
//SetViewMode(AllView);
//SetSearchSpec(""Id"",LineId);
//ExecuteQuery();
//var IsOrdLineUpdRec= FirstRecord();
//if(!IsOrdLineUpdRec)
//{


  psPorts = RCOIS_GetAllPorts(VmmsParentProdId);
  
  var sToPortItemId = GetPortProperty(psPorts,""Port Item Id"",""Product Id"",ProdId);
  
  
  NewRecord(NewAfter);
   SetFieldValue(""Order Header Id"",OrderId);
   SetFieldValue(""Product Id"", ProdId);   
   SetFieldValue(""Parent Order Item Id"",Vtel); 
   SetFieldValue(""Root Order Item Id"",rootLineId);
   SetFieldValue(""Billing Profile Id"",BillProfId);
   SetFieldValue(""Product Port Id"",sToPortItemId);
   SetFieldValue(""Status"",""In Progress"");
   SetFieldValue(""Cfg State Code"",""User Requested Item"");
    SetFieldValue(""Billing Account Id"",BillAccId);
    SetFieldValue(""Net Price"", ProdPrice);
     WriteRecord();
    
   }
   
//}
}
function FnAddLineItems(Inputs, Outputs)
{
var OrderId = Inputs.GetProperty(""ObjectId"");
var Product = Inputs.GetProperty(""Product"");
var ActionCode = Inputs.GetProperty(""ActionCode"");
var AppObj = TheApplication();
var IsOrdLineRec;
var IsOrderLineDel;
var OrderType;
var AddRootId;
var Vgprs;var StrSearch
var Vtel;
var Vsms;
var Vmms;
var ProductPrice;
var disc1 = ""Product"";
var disc2 = ""Product"";
var disc3 = ""Product"";
var ParentProdId;
var VgprsParentProdId = """";
var VsmsParentProdId = """";
var VtelParentProdId = """";
var VmmsParentProdId = """";
var BillAccId;
var OrdLineRec;
var BillProfId;
var LineId;
var OrderBO = AppObj.GetBusObject(""Order Entry (Sales)"");
var OrderEntry:BusComp = OrderBO.GetBusComp(""Order Entry - Orders"");
var OrderLineItem:BusComp =OrderBO.GetBusComp(""Order Entry - Line Items (Simple)"");
var OrdType = AppObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Modify"");
var LOVBC:BusComp = AppObj.GetBusObject(""List Of Values"").GetBusComp(""List Of Values"");
var ProdBC = AppObj.GetBusObject(""Admin ISS Product Definition"").GetBusComp(""Internal Product - ISS Admin"");
//[MANUJ] : [Postpaid Renewal Offer]
var VPackage = """";
var VPackageParentProdId = """";
//[MANUJ] : [Postpaid Renewal Offer]
with(OrderEntry)
{
            ActivateField(""STC Order SubType"");
            ClearToQuery();
            SetViewMode(AllView);
            SetSearchSpec(""Id"",OrderId);
            ExecuteQuery();
            var IsOrdRec= FirstRecord();
            if(IsOrdRec)
            {
                        OrderType = GetFieldValue(""STC Order SubType"");
                      //  if(OrderType == OrdType)
                       /// {
                                    if(ActionCode == ""Add""){
                                    with(OrderLineItem)
                                    {
                                                var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + Product + ""')"";
                                                ActivateField(""Billing Service Type"");
                                                ActivateField(""Action Code"");
                                                ActivateField(""Product Id"");
                                                ActivateField(""Product Type"");
                                                ActivateField(""Billing Account Id"");
                                                ActivateField(""Billing Profile Id"");
                                              //  ActivateField(""Billing Account"");
                                                ClearToQuery();
                                                SetViewMode(AllView);
                                                SetSearchExpr(StrSearch);
                                    //          SetSearchSpec(""Order Header Id"",OrderId);
                                                ExecuteQuery();
                                                IsOrdLineRec= FirstRecord();
                                                if(!IsOrdLineRec && ActionCode == ""Add"")
                                                {
             with(LOVBC)
             {
             var LovSpec = ""[Value] = '""+ Product +""' AND [Type] = 'STC_ADD_PROD'"";
             SetViewMode(AllView);
             ActivateField(""High"");
             ActivateField(""Description"");
             ActivateField(""Low"");
             ClearToQuery();
             SetSearchExpr(LovSpec);
             ExecuteQuery(ForwardOnly);
             var islovRec = FirstRecord();
                                                           
                                                            if(islovRec)
                                                            {
                                                            ProductPrice = GetFieldValue(""Low"");
                                                     with(OrderLineItem)
                                                           {
                                                            //StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Type] = 'Compound') AND ([Action Code] <> 'Delete' )"";
															//[MANUJ] : [Postpaid Renewal Offer]
															//StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Type] = 'Compound' OR [Product Type] = 'Package') AND ([Action Code] <> 'Delete' )"";
                                                            
															//[NAVIN:25Apr2017:BusinessTOO]
															StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Type] = 'Compound' OR [Product Type] = 'Package') AND ([Action Code] <> 'Delete') AND NOT([Part Number] LIKE 'SPLITBUNDLE*')"";
															ClearToQuery();
                                                            SetViewMode(AllView);
                                                            SetSearchExpr(StrSearch);
                                                            ExecuteQuery();
                                                            OrdLineRec = FirstRecord();
                                                            while(OrdLineRec)
                                                            {
                                                             var AddBillType = GetFieldValue(""Billing Service Type"");
                 var rootLineId = GetFieldValue(""Root Order Item Id"");
                 switch (AddBillType)
                 {
                 case ""/service/telco/gprs"":
                 Vgprs = GetFieldValue(""Id"");
                 VgprsParentProdId = GetFieldValue(""Product Id"");
                 BillAccId = GetFieldValue(""Billing Account Id"");
                 BillProfId = GetFieldValue(""Billing Profile Id"");
                 break;
                 
                 case ""/service/telco/gsm/sms"":
                 Vsms = GetFieldValue(""Id"");
                 VsmsParentProdId = GetFieldValue(""Product Id"");
                 BillAccId = GetFieldValue(""Billing Account Id"");
                 BillProfId = GetFieldValue(""Billing Profile Id"");
                 break;
                 
                 case ""/service/telco/gsm/telephony"":
                 Vtel = GetFieldValue(""Id"");
                 VtelParentProdId = GetFieldValue(""Product Id"");
                 BillAccId = GetFieldValue(""Billing Account Id"");
                 BillProfId = GetFieldValue(""Billing Profile Id"");
                 break;
                 
                 case ""/service/telco/gsm/mms"":
                 Vmms = GetFieldValue(""Id"");
                 VmmsParentProdId = GetFieldValue(""Product Id"");
                 BillAccId = GetFieldValue(""Billing Account Id"");
                 BillProfId = GetFieldValue(""Billing Profile Id"");
                 break;
				 //[MANUJ]: [Postpaid  Renewal Offer]
                 case """":
                 VPackage = GetFieldValue(""Id"");
                 VPackageParentProdId = GetFieldValue(""Product Id"");
                 BillAccId = GetFieldValue(""Billing Account Id"");
                 BillProfId = GetFieldValue(""Billing Profile Id"");
                 break;
				 //[MANUJ]: [Postpaid  Renewal Offer]

                 default:
                 
                 }
                                                            
                                                              OrdLineRec = NextRecord();
                                                            }// while(OrdLineRec)
                                                           }
                                                           with(ProdBC)
                                                           {
                                                           var StrProdSearch = ""[Id] = '"" + Product + ""'"";
                                                            ActivateField(""Billing Service Type"");
                                                            ClearToQuery();
                                                            SetViewMode(AllView);
                                                            SetSearchExpr(StrProdSearch);
                                                            ExecuteQuery();
                                                            var IsProduct= FirstRecord();
                                                           while(IsProduct)
                                                            {
                                                             var ProdId = GetFieldValue(""Id"");
                                                             var BillSerType = GetFieldValue(""Billing Service Type"");
                                                             
                                                             
                                                             if(BillSerType == ""/service/telco/gsm/mms"")
                                                             {
                                                             with(OrderLineItem)
                                                             {
                var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""')"";
                ClearToQuery();
                SetViewMode(AllView);
                SetSearchExpr(StrSearch);
                ExecuteQuery();
                var OrdLineRec = FirstRecord();
                if(!OrdLineRec){
               
                                                              AddNewAddRec(Vmms,ProdId,OrderId,rootLineId,BillAccId,BillProfId,VmmsParentProdId,ProductPrice);}
                                                             }
                                                             }
                                                             else if(BillSerType == ""/service/telco/gsm/sms"")
                                                             {
                                                               with(!OrderLineItem)
                                                             {
                var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""')"";
                ClearToQuery();
                SetViewMode(AllView);
                SetSearchExpr(StrSearch);
                ExecuteQuery();
                var OrdLineRec = FirstRecord();
                if(!OrdLineRec){
               
                                                              AddNewAddRec(Vsms,ProdId,OrderId,rootLineId,BillAccId,BillProfId,VsmsParentProdId,ProductPrice);}}
                                                             }
                                                             else if(BillSerType == ""/service/telco/gsm/telephony"")
                                                             {
                                                                with(OrderLineItem)
                                                             {
                var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""')"";
                ClearToQuery();
                SetViewMode(AllView);
                SetSearchExpr(StrSearch);
                ExecuteQuery();
                var OrdLineRec = FirstRecord();
                if(!OrdLineRec){
               
                                                              AddNewAddRec(Vtel,ProdId,OrderId,rootLineId,BillAccId,BillProfId,VtelParentProdId,ProductPrice);}}
                                                             }
				//[MANUJ] : [Postpaid Renewal Offer]
				else if(BillSerType == ""/account"")
                                                             {
                                                               with(OrderLineItem)
                                                             {
                var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""')"";
                ClearToQuery();
                SetViewMode(AllView);
                SetSearchExpr(StrSearch);
                ExecuteQuery();
                var OrdLineRec = FirstRecord();
                if(!OrdLineRec){
               
                                                              AddNewAddRec(VPackage,ProdId,OrderId,rootLineId,BillAccId,BillProfId,VPackageParentProdId,ProductPrice);}}
                                                             }
				//[MANUJ] : [Postpaid Renewal Offer]
                                                             else if(BillSerType == ""/service/telco/gprs"")
                                                             {
                                                                with(OrderLineItem)
                                                             {
                var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""')"";
                ClearToQuery();
                SetViewMode(AllView);
                SetSearchExpr(StrSearch);
                ExecuteQuery();
                var OrdLineRec = FirstRecord();
                if(!OrdLineRec){
               
                                                              AddNewAddRec(Vgprs,ProdId,OrderId,rootLineId,BillAccId,BillProfId,VgprsParentProdId,ProductPrice);}}
                                                             }
                                                             IsProduct = NextRecord();
                                                         }
                                                        }//with(ProdBC)
                                               
                                                            }// end of with(LOVBC)
                                                            }
                                                //          TheApplication().RaiseErrorText(recCount);
                                                }//         if(IsOrdLineRec)
                                    }//         with(OrderLineItem)
                                    }//if(ActionCode == ""Add"")
    if(ActionCode == ""Delete"")
    {
     with(LOVBC)
     {
      var LovSpec = ""[Value] = '""+ Product +""' AND [Type] = 'STC_DEL_PROD'"";
      SetViewMode(AllView);
      ActivateField(""High"");
      ActivateField(""Description"");
      ActivateField(""Low"");
      ClearToQuery();
      SetSearchExpr(LovSpec);
      ExecuteQuery(ForwardOnly);
      var islovRec = FirstRecord();
      
      if(islovRec)
      {
       disc1 = GetFieldValue(""High"");
       disc2 = GetFieldValue(""Description"");
       disc3 = GetFieldValue(""Low"");
        with(OrderLineItem)
        {
       StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND [Action Code] <> 'Delete' AND ([Product Id] = '"" + Product + ""')"";
        ActivateField(""Action Code"");
        InvokeMethod(""SetAdminMode"", ""TRUE"");
        ClearToQuery();
        SetViewMode(AllView);
        SetSearchExpr(StrSearch);
        ExecuteQuery();
        OrdLineRec = FirstRecord();
        while(OrdLineRec)
        {
         SetFieldValue(""Action Code"", ""Delete"");
         WriteRecord();
         OrdLineRec = NextRecord();
        }// end of while(OrdLineRec)
        }//end of with(OrderLineItem)
      }
     }
    }           
                      //  }//         if(OrderType == OrdType)
            }//         if(IsOrdRec)
}//with(OrderEntry)
return(CancelOperation);
}
function GetPortProperty(psInput,aPropName,aSearchField,aSearchValue)
{
 /** Entry point to this function is normal Product Id. **/
 /*
  Port
   Class Id, Class Name, DefCardinality, DefaultPortObject, MaxCardinality, MinCardinality,Name, 
   Port Display Name, Port Item Id
   
   PortObject
    Description, Name, Prod Item Id, Product Id, Version
 
 */
 
 var psPort   = TheApplication().NewPropertySet();
 var psPortObj = TheApplication().NewPropertySet();
 var iGotValue = "false"";

 try {
  for (var l=0;l<psInput.GetChildCount();l++) {
   psPort = psInput.GetChild(l);
   
   for (var i=0;i<psPort.GetChildCount();i++) {
    psPortObj = psPort.GetChild(i);
    if (psPortObj.GetProperty(aSearchField) == aSearchValue) {
     //return(psPortObj.GetProperty(aPropName));
     iGotValue = ""true"";
     break;
    }
   }
   if(""true"" == iGotValue) {
    switch(aPropName) {
     case ""Description"":
     case ""Name"":
     case ""Prod Item Id"":
     case ""Product Id"":
     case ""Version"":
      return(psPortObj.GetProperty(aPropName));
     default:
      return(psPort.GetProperty(aPropName));
     
    }
   }
  }
 } finally {
  psPort   = null;
  psPortObj = null;
 }
 return('');
}
function RCOIS_GetAllPorts(aProductId)
{
 /** Get All the Ports for a Product - 2IT-V1.0 **/

 var psInputs = null;
 var psOutputs  = null;


     var bsRCOIS  = TheApplication().GetService(""Remote Complex Object Instance Service"");
  psInputs = TheApplication().NewPropertySet();
  psOutputs  = TheApplication().NewPropertySet();

  psInputs.SetProperty(""Product Id"",aProductId);
  psInputs.SetProperty(""GetPortDomain"", ""Y"");

  bsRCOIS.InvokeMethod(""GetAllPorts"",psInputs,psOutputs);
  return(psOutputs.Copy());

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
 
  var iReturn;
 
 try  
 {
  iReturn = ContinueOperation;
  switch (MethodName)
  {
   case ""FnAddLineItems"":
     FnAddLineItems(Inputs, Outputs);
    iReturn = CancelOperation;
    break;
                    
   default: 
    iReturn = ContinueOperation;
    
  } //switch
  return (iReturn);
 } 
 catch (e)
 { 
  TheApplication().RaiseErrorText(e.toString());
 }

}
function Init(Inputs,Outputs)
{
	try
	{
		with(Outputs)
		{
			SetProperty(""STC Redemption Type"","""");
			SetProperty(""STC Redemption Points"","""");
		}

	}
	catch(e)
	{
		LogException(e);
	}
	finally
	{
	}
}
function Insert(InputsIns,OutputsIns)
{
	try
	{

	}
	catch(e)
	{
		LogException(e);
	}
	finally
	{
	}	
	
	




}
function LogException(e)
{
	var appObj;
  	var psInput;
  	var psOutput;
  	var bsErrorHandler; 
	try
 	{
		  appObj = TheApplication();
		  with(appObj)
		  {
			  psInput = NewPropertySet();
			  psOutput = NewPropertySet();
			  bsErrorHandler = GetService(""STC Generic Error Handler"");
		  }
		  with(psInput)
		  {
			  SetProperty(""Error Code"", e.errCode);
			  SetProperty(""Error Message"", e.errText);
			  SetProperty(""Object Name"", ""STC Add LMS Manual Points Service"");
			  SetProperty(""Object Type"", ""Buisness Service"");
		  }
		  bsErrorHandler.InvokeMethod(""Log Message"", psInput, psOutput);
 	}
 	catch(e)
 	{
  		// do nothing	
 	}
 	finally
 	{
 
		  bsErrorHandler = null;
		  psOutput = null;
		  psInput = null;
		  appObj = null;
 	}
}
function Query(Inputs,Outputs)
{
	try
	{

	}
	
	catch(e)
	{
		LogException(e);
	}
	finally
	{
	}
	
	
	
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var ireturn=ContinueOperation;
	try
	{
		switch(MethodName)
		{
			case ""Init"":
					Init(Inputs,Outputs);
					ireturn = CancelOperation;
					break;
			case ""Query"":
					Query(Inputs,Outputs);
					ireturn = CancelOperation;
					break;
					
			case ""PreInsert"":
					ireturn = CancelOperation;
					break;
							
			case ""Insert"":
					Insert(Inputs,Outputs);
					ireturn = CancelOperation;
					break;

			case ""Update"":
					Update(Inputs,Outputs);
					ireturn = CancelOperation;
					break;
	
			case ""Delete"":
					ireturn = CancelOperation;
					break;

			default:
					ireturn = ContinueOperation;
		}
		return(ireturn);
	}
	catch(e)
	{
		LogException(e);
	}
	finally
	{
	}
	
}
function Update(InputsUpd,OutputsUpd)
{
	try
	{

	}
	catch(e)
	{
		LogException(e);
	}
	finally
	{
	}	
	
	
}
"//Your public declarations go here...  
"
"/**********************************************************************************************************
Purpose   : Function Add Product Non RCOIS/ No Customize
Author    : GURURAJ MADHAVARAO
Change Log  : New function
***********************************************************************************************************
Date(DD/MM/YYYY) | By  | Description of Change                  
-----------------------------------------------------------------------------------------------------------
14/12/2020  1.0   | GURURAJ MADHAVARAO | Created new to add atributes
12/01/2021  1.1   | GURURAJ MADHAVARAO  | Added logic to recieve part num from calling function
             And added logic to make attributes addition more generic
30/10/2021  1.2   | Mohammed Abuzar Ismail| Enhanced this function to search attribute id from Product Class
----------------------------------------------------------------------------------------------------------*/
function AddAttributes(Inputs,Outputs)
{
 var app=TheApplication();
 var vNewLineItemId=Inputs.GetProperty(""New Line Item Id"");
 var vAddProdName=Inputs.GetProperty(""Add ProdName"");
 var prodClassVodId=Inputs.GetProperty(""Add Prod ClassId""); // refer comment 1.2
 //Refer comments version 1.1
 var vAddProdPartNum=Inputs.GetProperty(""Add Prod PartNum"");
 var vSpec,isRecord=false,vAtrName="""",vAtrId="""",isrec=false;
 var lbc=app.GetBusObject(""List Of Values"").GetBusComp(""List Of Values"");
 var oAtr=app.GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Item XA"");
 var pAtr=app.GetBusObject(""ISS CP Loader"").GetBusComp(""Cfg ISS Obj Attributes"");

 var vAtrVal, vAtrValField;
 var inp,out;
 try
 {
   //Setting the Error Code and Message for parent function
  Outputs.SetProperty(""Error Message"","""");
  Outputs.SetProperty(""Error Code"","""");
  with(lbc)
  {
   SetViewMode(AllView);
   ActivateField(""Type"");
   ActivateField(""Value"");
   ActivateField(""Name"");
   ActivateField(""Active"");
   ActivateField(""Description"");
   ActivateField(""High"");
   ActivateField(""Low"");
   ActivateField(""Sub Type"");
  

   vSpec=""[Type] = 'STC_SASCMS_ATTRPROD' AND [Name] LIKE '"" + vAddProdPartNum +""_*' AND [Active] = 'Y'"";
   ClearToQuery();
   SetSearchExpr(vSpec);
   ExecuteQuery(ForwardOnly);
   isRecord=FirstRecord();
   if (isRecord)
   {
    if (prodClassVodId != null && prodClassVodId != """")
    {
     inp = app.NewPropertySet();
     out = app.NewPropertySet();
     inp.SetProperty(""Class Id"",prodClassVodId);       
     getProdClassVODDefId(inp,out);
     prodClassVodId = out.GetProperty(""Class Vod Id"");    
    }
   }
//TheApplication().RaiseErrorText(""AddAttributes"" +prodClassVodId );
   while(isRecord)
   {
    vAtrName=GetFieldValue(""High"");
    vAtrVal = GetFieldValue(""Low"");
    vAtrValField = GetFieldValue(""Sub Type"");
    with(oAtr)
    {
     //SetViewMode(AllView);
     with(pAtr)
     {
      SetViewMode(AllView);

      ActivateField(""Name"");
      ActivateField(""Last Version"");
      ActivateField(""Id"");
      vSpec=""[Local Name] = '""+ vAtrName + ""' AND [Last Version] = '999999999'"";      
      if (prodClassVodId != null && prodClassVodId != """")
       vSpec = vSpec + "" AND [VOD Id]='"" + prodClassVodId + ""'"";
      

      ClearToQuery();
      SetSearchExpr(vSpec);
      ExecuteQuery(ForwardOnly);
      isrec=FirstRecord();
       
      if(isrec)
      {
       vAtrId=GetFieldValue(""Id"");
      }
      else
      {
       UndoRecord();
      app.RaiseErrorText(""No Attribute with name: ""+vAtrName+""\n"");
      }
        
     }
     ActivateField(""Name"");
     ActivateField(""Object Id"");
     ActivateField(""Action Code"");
     ActivateField(""Attribute Id"");
     ActivateField(""Cfg State Code"");
     ActivateField(""Display Name"");
     if(vAtrValField != """" && vAtrValField != null)
     {
      ActivateField(vAtrValField);
     }
      
     NewRecord(NewAfter);
     SetFieldValue(""Display Name"",vAtrName);
     SetFieldValue(""Name"",vAtrName);
     SetFieldValue(""Object Id"",vNewLineItemId);
     SetFieldValue(""Action Code"",""Add"");
     SetFieldValue(""Attribute Id"",vAtrId);
     SetFieldValue(""Cfg State Code"",""Engine Picked Item"");

     

     if(vAtrValField != """" && vAtrValField != null)
     {
      SetFieldValue(vAtrValField,vAtrVal);
      
      if(vAtrValField == ""Numeric Value"")
       SetFieldValue(""Data Type"",""Number"");
      else if (vAtrValField == ""Date Value"")
       SetFieldValue(""Data Type"",""Date"");
      else
       SetFieldValue(""Data Type"",""Text"");
     }
       
     WriteRecord();
  
    }
    isRecord=NextRecord();
   }
  }
 }

 catch(e)
 {
//throw(e);
  with(oAtr)
  {
   ActivateField(""Object Id"");

   SetViewMode(AllView);
   vSpec=""[Object Id] = '""+ vNewLineItemId + ""'"";
   ClearToQuery();
   SetSearchExpr(vSpec);
   ExecuteQuery(ForwardOnly);
   while(FirstRecord())
   {
    DeleteRecord();
   }
  }
  Outputs.SetProperty(""Error Message"",e.errText);
  Outputs.SetProperty(""Error Code"",e.errCode);
 }
 finally
 {
  oAtr.WriteRecord();
 }
}
function AddNewAddRec(Vtel,ProdId,OrderId,rootLineId,BillAccId,VmmsParentProdId,EndDate)
{
var StrOrdLine = TheApplication().GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Entry - Line Items"");
var psPorts    = TheApplication().NewPropertySet();
with(StrOrdLine)
{
   ActivateField(""Status"");
   ActivateField(""Cfg State Code"");
  psPorts = RCOIS_GetAllPorts(VmmsParentProdId);
  
  var sToPortItemId = GetPortProperty(psPorts,""Port Item Id"",""Product Id"",ProdId);
   NewRecord(NewAfter);
   SetFieldValue(""Order Header Id"",OrderId);
   SetFieldValue(""Product Id"", ProdId);   
   SetFieldValue(""Parent Order Item Id"",Vtel); 
   SetFieldValue(""Root Order Item Id"",rootLineId);
   SetFieldValue(""Billing Account Id"",BillAccId);
   SetFieldValue(""Product Port Id"",sToPortItemId);
   SetFieldValue(""Service End Date"",EndDate);
  // SetFieldValue(""Status"",""In Progress"");
   SetFieldValue(""Cfg State Code"",""User Requested Item"");
   WriteRecord();
   var NewLineItemId = GetFieldValue(""Id"");
   return (NewLineItemId);
  
}
}
function AddNewAddRecGeneric(ParentItemId,ProdId,OrderId,rootLineId,BillAccId,BillProfId,ParentProdId,dynDiscMethod,pricCommitType,dueDate,ProductPrice)
{
	var OrderBO = TheApplication().GetBusObject(""Order Entry (Sales)"");
	var OrdLineBC = OrderBO.GetBusComp(""Order Entry - Line Items (Simple)"");
	var psPorts    = TheApplication().NewPropertySet();
	var ProdPrice = ToNumber(ProductPrice);
	var sPortItemId="""", sProdItemId="""", vNewLineItemId = """";
	with(OrdLineBC)
	{
		ActivateField(""Product Id"");
		ActivateField(""Root Order Item Id"");
		ActivateField(""Product Port Id"");
		ActivateField(""Prod Item Id"");
		ActivateField(""Status"");
		ActivateField(""Cfg State Code"");
		ActivateField(""Billing Account Id"");
		ActivateField(""Billing Profile Id"");
		ActivateField(""Dynamic Discount Method"");
		ActivateField(""Pricing Commit Type"");
		ActivateField(""Due Date"");
		ActivateField(""Net Price"");
		psPorts = RCOIS_GetAllPorts(ParentProdId);
		sPortItemId = GetPortProperty(psPorts,""Port Item Id"",""Product Id"",ProdId);
		sProdItemId = GetPortProperty(psPorts,""Prod Item Id"",""Product Id"",ProdId);

		NewRecord(NewAfter);
		SetFieldValue(""Order Header Id"", OrderId);
		SetFieldValue(""Product Id"", ProdId);   
		SetFieldValue(""Parent Order Item Id"", ParentItemId); 
		SetFieldValue(""Root Order Item Id"", rootLineId);
		SetFieldValue(""Product Port Id"", sPortItemId);
		SetFieldValue(""Prod Item Id"", sProdItemId);
		SetFieldValue(""Status"", ""In Progress"");
		SetFieldValue(""Cfg State Code"", ""User Requested Item"");
		SetFieldValue(""Billing Account Id"", BillAccId);
		SetFieldValue(""Billing Profile Id"", BillProfId);
		SetFieldValue(""Dynamic Discount Method"", dynDiscMethod);
		SetFieldValue(""Pricing Commit Type"", pricCommitType);
		SetFieldValue(""Due Date"", dueDate);
		SetFieldValue(""Net Price"", ProdPrice);
		WriteRecord();

		vNewLineItemId = GetFieldValue(""Id"");
		OrdLineBC = null;
		OrderBO = null;
		
		return (vNewLineItemId);
	}
}
function FnAddLineItems(Inputs, Outputs)
{
var OrderId = Inputs.GetProperty(""ObjectId"");
var NewLineItemId;
var AppObj = TheApplication();
var IsOrdLineRec;
var IsOrderLineDel;
var OrderType;
var AddRootId;
var ActionCode;
var Vgprs;
var Vtel;
var Vsms;
var Vmms;
var ParentProdId;
var VgprsParentProdId = """";
var VsmsParentProdId = """";
var VtelParentProdId = """";
var VmmsParentProdId = """";

var OrderBO = AppObj.GetBusObject(""Order Entry (Sales)"");
var OrderEntry:BusComp = OrderBO.GetBusComp(""Order Entry - Orders"");
var OrderLineItem:BusComp =OrderBO.GetBusComp(""Order Entry - Line Items"");
var OrdType = AppObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Modify"");

with(OrderEntry)
{
            ActivateField(""STC Order SubType"");
            ClearToQuery();
            SetViewMode(AllView);
            SetSearchSpec(""Id"",OrderId);
            ExecuteQuery();
            var IsOrdRec= FirstRecord();
            if(IsOrdRec)
            {
                        OrderType = GetFieldValue(""STC Order SubType"");
                        if(OrderType == OrdType)
                        {
                                    with(OrderLineItem)
                                    {
                                                var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Type] = 'Service Plan')"";
                                                
                                                ActivateField(""Billing Service Type"");
                                                ActivateField(""Action Code"");
                                                ActivateField(""Product Id"");
                                                ActivateField(""Product Type"");
                                                
                                                ActivateField(""Billing Account"");
                                                ClearToQuery();
                                                SetViewMode(AllView);
                                                SetSearchExpr(StrSearch);
                                    //          SetSearchSpec(""Order Header Id"",OrderId);
                                                ExecuteQuery();
                                                IsOrdLineRec= FirstRecord();
                                                if(IsOrdLineRec)
                                                {
                                                            LastRecord();
                                                            var recCount = CountRecords();
                                                            if(recCount == ""2"")
                                                            {
                                                           
                                                            var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Type] = 'Compound') AND ([Action Code] = 'Add')"";
                                                            ClearToQuery();
                                                            SetViewMode(AllView);
                                                            SetSearchExpr(StrSearch);
                                                            ExecuteQuery();
                                                            var OrdLineRec = FirstRecord();
                                                            while(OrdLineRec)
                                                            {
                                                             var AddBillType = GetFieldValue(""Billing Service Type"");
                var rootLineId = GetFieldValue(""Root Order Item Id"");
                switch (AddBillType)
                {
                 case ""/service/telco/gprs"":
                 Vgprs = GetFieldValue(""Id"");
                 VgprsParentProdId = GetFieldValue(""Product Id"");
                 break;
                 
                 case ""/service/telco/gsm/sms"":
                 Vsms = GetFieldValue(""Id"");
                 VsmsParentProdId = GetFieldValue(""Product Id"");
                 break;
                 
                 case ""/service/telco/gsm/telephony"":
                 Vtel = GetFieldValue(""Id"");
                 VtelParentProdId = GetFieldValue(""Product Id"");
                 break;
                 
                 case ""/service/telco/gsm/mms"":
                 Vmms = GetFieldValue(""Id"");
                 VmmsParentProdId = GetFieldValue(""Product Id"");
                 break;
                 
                 default:
                 
                }
                                                            
                                                              OrdLineRec = NextRecord();
                                                            }// while(OrdLineRec)
                                                           
                                                           StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Type Code] = 'Add-On') AND ([Action Code] = 'Delete')"";
                                                           
                                                           // StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Action Code] = 'Delete')"";
                                                            ClearToQuery();
                                                            SetViewMode(AllView);
                                                            SetSearchExpr(StrSearch);
                                                            ExecuteQuery();
                                                            IsOrderLineDel= FirstRecord();
                                                           while(IsOrderLineDel)
                                                            {
                                                             var ProdId = GetFieldValue(""Product Id"");
                                                             var BillSerType = GetFieldValue(""Billing Service Type"");
                                                             var BillAccId = GetFieldValue(""Billing Account Id"");
                                                             var EndDate = GetFieldValue(""Service End Date"");
                                                             
                                                             if(BillSerType == ""/service/telco/gsm/mms"")
                                                             {
                                                              NewLineItemId = AddNewAddRec(Vmms,ProdId,OrderId,rootLineId,BillAccId,VmmsParentProdId,EndDate);
															  Outputs.SetProperty(""NewLineItemId"", NewLineItemId);
                                                             }
                                                             else if(BillSerType == ""/service/telco/gsm/sms"")
                                                             {
                                                              NewLineItemId = AddNewAddRec(Vsms,ProdId,OrderId,rootLineId,BillAccId,VsmsParentProdId,EndDate);
															  Outputs.SetProperty(""NewLineItemId"", NewLineItemId);
                                                             }
                                                             else if(BillSerType == ""/service/telco/gsm/telephony"")
                                                             {
                                                              NewLineItemId = AddNewAddRec(Vtel,ProdId,OrderId,rootLineId,BillAccId,VtelParentProdId,EndDate);
															  Outputs.SetProperty(""NewLineItemId"", NewLineItemId);
                                                             }
                                                             else if(BillSerType == ""/service/telco/gprs"")
                                                             {
                                                              NewLineItemId = AddNewAddRec(Vgprs,ProdId,OrderId,rootLineId,BillAccId,VgprsParentProdId,EndDate);
															  Outputs.SetProperty(""NewLineItemId"", NewLineItemId);
                                                             }
                                                             IsOrderLineDel = NextRecord();
                                                         }
                                                        
                                                         
                                                         
                                                        /* var StrSearchDel = ""[Root Order Item Id] = '"" + DelRootId + ""' AND ([Product FLAG] = 'Y') AND ([Action Code] = 'Delete')"";
                                                            ClearToQuery();
                                                            SetViewMode(AllView);
                                                            SetSearchExpr(StrSearchDel);
                                                            ExecuteQuery();
                                                            IsOrderLineDel= FirstRecord();
                                                         while(IsOrderLineDel)
                                                         {
                                                            var DelProdId = GetFieldValue(""Product Id"");
                                                            var vRootItemId = GetFieldValue(""Root Order Item Id"");
                  var BillSerType = GetFieldValue(""Billing Service Type"");
                  
                
                                                                 
                                                      
                                                         }*/
                                                            
                                                            }//         if(recCount == ""2"")
                                                //          TheApplication().RaiseErrorText(recCount);
                                                }//         if(IsOrdLineRec)
                                    }//         with(OrderLineItem)
                        }//         if(OrderType == OrdType)
            }//         if(IsOrdRec)
}//with(OrderEntry)
return(CancelOperation);
}
function FnAddLineItemsGeneric(Inputs, Outputs)
{
/*
Ver 1.1 [Abuzar][28102021][Added changes for AddAttributes - If any attributes are defined for InboundProduct in LOV then they will be inserted in OLI XA]
*/
	var AppObj = TheApplication();
	var OrderId, Product, ActionCode, DeviceProdId, DeviceLineId, MultipleFlag;
	var vNewLineItemId = """";
	with(Inputs)
	{
		OrderId = GetProperty(""ObjectId"");//Order Id
		Product = GetProperty(""Product"");//New|Delte Product Part Number
		ActionCode = GetProperty(""ActionCode"");
		DeviceProdId = GetProperty(""DeviceProdId"");//Parent Product Row Id
		DeviceLineId = GetProperty(""DeviceLineId"");//Parent Order Item Id
		MultipleFlag = GetProperty(""MultipleFlag"");//Y if duplicate product allowed
	}
	Outputs.SetProperty(""NewLineItemId"", """");

	if(ActionCode == """" || ActionCode == null)
		ActionCode = ""Add"";

	var IsOrdRec=false, IsOrdLineRec=false, IsOrderLineDel, OrderType, AddRootId;
	var StrSearch="""", ProductPrice;
	var disc1 = ""Product"", disc2 = ""Product"", disc3 = ""Product"";
	var ParentItemId="""", ParentProdId="""";
	var BillAccId="""", OrdLineRec=false, BillProfId="""", LineId="""", AddBillType="""", rootLineId="""", dueDate="""";
	var OrderBO = AppObj.GetBusObject(""Order Entry (Sales)"");
	var OrderEntry:BusComp = OrderBO.GetBusComp(""Order Entry - Orders"");
	var OrderLineItem:BusComp =OrderBO.GetBusComp(""Order Entry - Line Items (Simple)"");
	var OrdType = AppObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Modify"");
	var LOVBC:BusComp = AppObj.GetBusObject(""List Of Values"").GetBusComp(""List Of Values"");
	var ProdBC = AppObj.GetBusObject(""Admin ISS Product Definition"").GetBusComp(""Internal Product - ISS Admin"");
	var VPackage = """", VPackageParentProdId = """";
	var StrProdSearch="""", IsProduct=false, ProdId="""", BillSerType="""", dynDiscMethod="""", pricCommitType="""";
	var inp,out,prodClassVodId,addattrSwitch;

	with(OrderEntry)
	{
		ActivateField(""STC Order SubType"");
		ActivateField(""Requested Ship Date"");
		ClearToQuery();
		SetViewMode(AllView);
		SetSearchSpec(""Id"",OrderId);
		ExecuteQuery(ForwardOnly);
		IsOrdRec = FirstRecord();
		
		if(IsOrdRec)
		{
			OrderType = GetFieldValue(""STC Order SubType"");
			dueDate = GetFieldValue(""Requested Ship Date"");
			if(ActionCode == ""Add"")
			{
				with(OrderLineItem)
				{
					if(DeviceLineId !=null && DeviceLineId !="""")
					{
						StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND [Parent Order Item Id]='""+DeviceLineId+""' AND ([Part Number] = '""+Product+""') AND [Action Code] = 'Add'"";
					}
					else
					{
						StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Part Number] = '""+Product+""') AND [Action Code] = 'Add'"";
					}
					ActivateField(""Billing Service Type"");
					ActivateField(""Action Code"");
					ActivateField(""Product Id"");
					ActivateField(""Product Type"");
					ActivateField(""Billing Account Id"");
					ActivateField(""Billing Profile Id"");
					//ActivateField(""Billing Account"");
					ClearToQuery();
					SetViewMode(AllView);
					SetSearchExpr(StrSearch);
					ExecuteQuery(ForwardOnly);
					IsOrdLineRec= FirstRecord();
					
					if((MultipleFlag == ""Y"" || !IsOrdLineRec) && ActionCode == ""Add"")	//Indrasen:Fy21_r13
					{
						with(ProdBC)
						{
							StrProdSearch = ""[Part #] = '""+Product+""'"";
							ActivateField(""Billing Service Type"");
							ActivateField(""Dynamic Discount Method"");
							ActivateField(""Pricing Commit Type"");
							ActivateField(""Part #"");
							ActivateField(""XA Class Id""); //Abuzar:30102021
							ClearToQuery();
							SetViewMode(AllView);
							SetSearchExpr(StrProdSearch);
							ExecuteQuery();
							IsProduct= FirstRecord();
							
							if(IsProduct)
							{
								ProdId = GetFieldValue(""Id"");
								BillSerType = GetFieldValue(""Billing Service Type"");
								dynDiscMethod = GetFieldValue(""Dynamic Discount Method"");
								pricCommitType = GetFieldValue(""Pricing Commit Type"");
								prodClassVodId = GetFieldValue(""XA Class Id"");
							}
							//TheApplication().RaiseErrorText(""ProdId:""+ProdId);
						}//end of with(ProdBC)
						if(ProdId != """" && ProdId != null)
						{
							if(DeviceLineId != null && DeviceLineId != """")
							{
								with(OrderLineItem) //with2
								{
									if(OrderType == ""Disconnect"")
										StrSearch = ""[Order Header Id] = '""+OrderId+""' AND ([Product Type] = 'Package')"";
									else
										StrSearch = ""[Order Header Id] = '""+OrderId+""' AND ([Product Type] = 'Package') AND ([Action Code] <> 'Delete')"";
									ClearToQuery();
									SetViewMode(AllView);
									SetSearchExpr(StrSearch);
									ExecuteQuery(ForwardOnly);
									OrdLineRec = FirstRecord();
									
									if(OrdLineRec)
									{
										AddBillType = GetFieldValue(""Billing Service Type"");
										rootLineId = GetFieldValue(""Id"");
										VPackageParentProdId = GetFieldValue(""Product Id"");
										BillAccId = GetFieldValue(""Billing Account Id"");
										BillProfId = GetFieldValue(""Billing Profile Id"");
									}// while(OrdLineRec)
								}//end of with1
							}//end of if(DeviceLineId != null...
							else
							{
								with(OrderLineItem) //with2
								{
									if(BillSerType == ""/account""){
										if(OrderType == ""Disconnect"")
											StrSearch = ""[Order Header Id] = '""+OrderId+""' AND [Product Type]='Package'"";
										else
											StrSearch = ""[Order Header Id] = '""+OrderId+""' AND [Product Type]='Package' AND ([Action Code] <> 'Delete')"";
									}
									else{
										if(OrderType == ""Disconnect"")
											StrSearch = ""[Order Header Id] = '""+OrderId+""' AND [Product Type] = 'Compound' AND ([Billing Service Type]='""+BillSerType+""')"";
										else
											StrSearch = ""[Order Header Id] = '""+OrderId+""' AND [Product Type] = 'Compound' AND ([Billing Service Type]='""+BillSerType+""') AND ([Action Code] <> 'Delete')"";
									}

									ClearToQuery();
									SetViewMode(AllView);
									SetSearchExpr(StrSearch);
									ExecuteQuery();
									OrdLineRec = FirstRecord();
									
									if(OrdLineRec)
									{
										AddBillType = GetFieldValue(""Billing Service Type"");
										rootLineId = GetFieldValue(""Root Order Item Id"");
										ParentItemId = GetFieldValue(""Id"");
										ParentProdId = GetFieldValue(""Product Id"");
										BillAccId = GetFieldValue(""Billing Account Id"");
										BillProfId = GetFieldValue(""Billing Profile Id"");
									}// if(OrdLineRec)
								}//end of with2
							}//end of else
							
							with(OrderLineItem) //with3
							{
								if(DeviceLineId !=null && DeviceLineId !="""")
								{
									StrSearch = ""[Order Header Id] = '""+OrderId+""' AND [Parent Order Item Id]='""+DeviceLineId+""' AND ([Product Id] = '""+ProdId+""') AND [Action Code] = 'Add'"";
								}
								else
								{
									StrSearch = ""[Order Header Id] = '""+OrderId+""' AND ([Product Id] = '""+ProdId+""') AND [Action Code] = 'Add'"";
								}
								ClearToQuery();
								SetViewMode(AllView);
								SetSearchExpr(StrSearch);
								ExecuteQuery();
								OrdLineRec = FirstRecord();
								
								if((MultipleFlag == ""Y"" || !IsOrdLineRec))//Indrasen:Fy21_r13
								{
									if(DeviceLineId !=null && DeviceLineId !="""")
									{
										vNewLineItemId = AddNewAddRecGeneric(DeviceLineId,ProdId,OrderId,rootLineId,BillAccId,BillProfId,DeviceProdId,dynDiscMethod,pricCommitType,dueDate,ProductPrice);
									}
									else{
										vNewLineItemId = AddNewAddRecGeneric(ParentItemId,ProdId,OrderId,rootLineId,BillAccId,BillProfId,ParentProdId,dynDiscMethod,pricCommitType,dueDate,ProductPrice);
									}
									Outputs.SetProperty(""NewLineItemId"", vNewLineItemId);
									//Abuzar:28102021-Refer comment version 1.1
									addattrSwitch = TheApplication().InvokeMethod(""LookupValue"", ""STC_SINGLEPROD_ATTR"", ""SWITCH"");
									if (addattrSwitch == ""ON"" && addattrSwitch != """" && addattrSwitch != null)
									{
										if (vNewLineItemId != null && vNewLineItemId != """")
										{
											inp = AppObj.NewPropertySet();
											out = AppObj.NewPropertySet();
											inp.SetProperty(""New Line Item Id"",vNewLineItemId);									
											inp.SetProperty(""Add Prod PartNum"",Product);
											inp.SetProperty(""Add Prod ClassId"",prodClassVodId);
											AddAttributes(inp,out);
										}
									}

								}
							}// end of 	with(OrderLineItem)
						}//end of if(ProdId != """" ...
					}//if(IsOrdLineRec)
				}//with(OrderLineItem)
			}//if(ActionCode == ""Add"")
		}//if(IsOrdRec)
	}//with(OrderEntry)
return(CancelOperation);
}
function GetPortProperty(psInput,aPropName,aSearchField,aSearchValue)
{
 /** Entry point to this function is normal Product Id. **/
 /*
  Port
   Class Id, Class Name, DefCardinality, DefaultPortObject, MaxCardinality, MinCardinality,Name, 
   Port Display Name, Port Item Id
   
   PortObject
    Description, Name, Prod Item Id, Product Id, Version
 
 */
 
 var psPort   = TheApplication().NewPropertySet();
 var psPortObj = TheApplication().NewPropertySet();
 var iGotValue = "false"";

 try {
  for (var l=0;l<psInput.GetChildCount();l++) {
   psPort = psInput.GetChild(l);
   
   for (var i=0;i<psPort.GetChildCount();i++) {
    psPortObj = psPort.GetChild(i);
    if (psPortObj.GetProperty(aSearchField) == aSearchValue) {
     //return(psPortObj.GetProperty(aPropName));
     iGotValue = ""true"";
     break;
    }
   }
   if(""true"" == iGotValue) {
    switch(aPropName) {
     case ""Description"":
     case ""Name"":
     case ""Prod Item Id"":
     case ""Product Id"":
     case ""Version"":
      return(psPortObj.GetProperty(aPropName));
     default:
      return(psPort.GetProperty(aPropName));
     
    }
   }
  }
 } finally {
  psPort   = null;
  psPortObj = null;
 }
 return('');
}
function RCOIS_GetAllPorts(aProductId)
{
 /** Get All the Ports for a Product - 2IT-V1.0 **/

 var psInputs = null;
 var psOutputs  = null;


     var bsRCOIS  = TheApplication().GetService(""Remote Complex Object Instance Service"");
  psInputs = TheApplication().NewPropertySet();
  psOutputs  = TheApplication().NewPropertySet();

  psInputs.SetProperty(""Product Id"",aProductId);
  psInputs.SetProperty(""GetPortDomain"", ""Y"");

  bsRCOIS.InvokeMethod(""GetAllPorts"",psInputs,psOutputs);
  return(psOutputs.Copy());

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
 
	var iReturn;
 
	try  
	{
		iReturn = ContinueOperation;
		switch (MethodName)
		{
		case ""FnAddLineItems"":
			FnAddLineItems(Inputs, Outputs);
			iReturn = CancelOperation;
			break;
		case ""FnAddLineItemsGeneric"":
			FnAddLineItemsGeneric(Inputs, Outputs);
			iReturn = CancelOperation;
			break;             
		default: 
			iReturn = ContinueOperation;
	
	} //switch
	return (iReturn);
	} 
	catch (e)
	{ 
	TheApplication().RaiseErrorText(e.toString());
	}

}
function getProdClassVODDefId(Inputs, Outputs){
try{
//

 var appObj= TheApplication();
 var classbo, classbc, vSpec, prodClassId, ClassVodId, isRecord;
 prodClassId = Inputs.GetProperty(""Class Id"");
 if (prodClassId != null && prodClassId != """")
 {
  classbo = appObj.GetBusObject(""Admin ISS Class Definition"");
  classbc = classbo.GetBusComp(""ISS Class VOD BusComp"");
  with(classbc)
   {
    SetViewMode(AllView);
    ActivateField(""VOD Id"");
   var strSearchSpec = ""[VOD Id]='"" + prodClassId + ""'"";
    ClearToQuery();
    SetSearchExpr(strSearchSpec);
    ExecuteQuery(ForwardOnly);
     
    isRecord=FirstRecord();
    if (isRecord)
    {
     ClassVodId = GetFieldValue(""Id"");
     Outputs.SetProperty(""Class Vod Id"",ClassVodId);
    }
     
   }
 }

return(CancelOperation);
}
catch(e)
{
 //throw(e);
}
finally{
classbc =null;
classbo =null;
appObj=null;
}

}
function AddMNPProduct(Inputs, Outputs)
{
try
{
	var sMNPNoProdFlg = """"; var sRootProdId = """"; var sRootPartNum = """";
	var sOrderId = Inputs.GetProperty(""OrderId"");
	var sApp = TheApplication();
	var sMacdOrderBO = sApp.GetBusObject(""MACD Performance Order"");
	var sMacdOrderBC = sMacdOrderBO.GetBusComp(""MACD Order Entry - Orders"");
	var sMacdOrderLine = sMacdOrderBO.GetBusComp(""MACD Order Entry - Line Items"");
	
	with(sMacdOrderBC)
	{
		SetViewMode(AllView);
		ClearToQuery();
		ActivateField(""STC MNP No Product Flg"");
		SetSearchSpec(""Id"", sOrderId);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord())
		{
			sMNPNoProdFlg = GetFieldValue(""STC MNP No Product Flg"");
			if(sMNPNoProdFlg != ""Y"")
			{
				with(sMacdOrderLine)
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(""Product Part Number"");
					ActivateField(""Product Id"");
					SetSearchExpr(""[Order Header Id] = '""+sOrderId+""' AND [Parent Order Item Id] IS NULL"");
					if(FirstRecord())
					{
						sRootRowId = GetFieldValue(""Id"");
						sRootProdId = GetFieldValue(""Product Id"");
						sRootPartNum = GetFieldValue(""Product Part Number"");
						if(sRootPartNum == ""STCPKGVOICE1"")
						{
							ClearToQuery();
							SetViewMode(AllView);
							SetSearchExpr(""[Order Header Id] = '""+sOrderId+""' AND [Root Order Item Id] = '""+sRootRowId+""' AND [Product Id] = '1-7NGBOF'"");
							ExecuteQuery(ForwardOnly);
							if(!FirstRecord())
							{
								NewRecord(NewAfter);
						//SetFieldValue
							}
						}
					}
				}
			}
		}
	}
	
}
catch(e)
{

}
finally
{

}
}
function GetPortId(Inputs, Outputs)
{
	var sParProdId = Inputs.GetProperty(""Parent Prod Id"");
	var sProdId = Inputs.GetProperty(""Product Id"");
	var psPorts    = TheApplication().NewPropertySet();
	psPorts = RCOIS_GetAllPorts(sParProdId);
	var sToPortItemId = GetPortProperty(psPorts,""Port Item Id"",""Product Id"",sProdId);
	Outputs.SetProperty(""Product Port Id"", sToPortItemId);
}
function GetPortProperty(psInput,aPropName,aSearchField,aSearchValue)
{
 /** Entry point to this function is normal Product Id. **/
 /*
  Port
   Class Id, Class Name, DefCardinality, DefaultPortObject, MaxCardinality, MinCardinality,Name, 
   Port Display Name, Port Item Id
   
   PortObject
    Description, Name, Prod Item Id, Product Id, Version
 
 */
 
 var psPort   = TheApplication().NewPropertySet();
 var psPortObj = TheApplication().NewPropertySet();
 var iGotValue = "false"";

 try {
  for (var l=0;l<psInput.GetChildCount();l++) {
   psPort = psInput.GetChild(l);
   
   for (var i=0;i<psPort.GetChildCount();i++) {
    psPortObj = psPort.GetChild(i);
    if (psPortObj.GetProperty(aSearchField) == aSearchValue) {
     //return(psPortObj.GetProperty(aPropName));
     iGotValue = ""true"";
     break;
    }
   }
   if(""true"" == iGotValue) {
    switch(aPropName) {
     case ""Description"":
     case ""Name"":
     case ""Prod Item Id"":
     case ""Product Id"":
     case ""Version"":
      return(psPortObj.GetProperty(aPropName));
     default:
      return(psPort.GetProperty(aPropName));
     
    }
   }
  }
 } finally {
  psPort   = null;
  psPortObj = null;
 }
 return('');
}
function RCOIS_GetAllPorts(aProductId)
{
 /** Get All the Ports for a Product - 2IT-V1.0 **/
 	var psInputs = null;
 	var psOutputs  = null;

	var bsRCOIS  = TheApplication().GetService(""Remote Complex Object Instance Service"");
	psInputs = TheApplication().NewPropertySet();
	psOutputs  = TheApplication().NewPropertySet();
	
	psInputs.SetProperty(""Product Id"",aProductId);
	psInputs.SetProperty(""GetPortDomain"", ""Y"");
	bsRCOIS.InvokeMethod(""GetAllPorts"",psInputs,psOutputs);
	return(psOutputs.Copy());

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
var ireturn;
try
{
	ireturn = ContinueOperation;
	switch(MethodName)
	{
		case ""AddMNPProduct"":
			AddMNPProduct(Inputs, Outputs);
			ireturn = CancelOperation;
			break;
			
		case ""GetPortId"":
     		GetPortId(Inputs, Outputs);
    		ireturn = CancelOperation;
    		break;
    		
    	case "fnSplitRec"":
    		fnSplitRec(Inputs, Outputs);
    		ireturn = CancelOperation;
    		break;
			
		default:
			ireturn = ContinueOperation;
			break;
	
	}
	return(ireturn);
	
}
catch(e)
{
	throw(e);
}
finally
{

}
}
function fnSplitRec(Inputs, Outputs)
{
	var sInpProdId = Inputs.GetProperty(""ProductId"");
	var sSplitProdId = sInpProdId.split(""_"");
	Outputs.SetProperty(""Product Id"", sSplitProdId[0]);
}
function AddNewAddRec(Vtel,ProdId,OrderId,rootLineId,BillAccId,VmmsParentProdId,billProfId,dynDiscMethod,pricCommitType,dueDate)
{
var StrOrdLine = TheApplication().GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Entry - Line Items (Simple)"");
var psPorts    = TheApplication().NewPropertySet();
//var psRootPort    = TheApplication().NewPropertySet();
with(StrOrdLine)
{
   ActivateField(""Status"");
   ActivateField(""Cfg State Code"");
   ActivateField(""Billing Profile Id"");
   ActivateField(""Dynamic Discount Method"");
   ActivateField(""Pricing Commit Type"");
   ActivateField(""Due Date"");
  psPorts = RCOIS_GetAllPorts(VmmsParentProdId);
  
  var sToPortItemId = GetPortProperty(psPorts,""Port Item Id"",""Product Id"",ProdId);
   NewRecord(NewAfter);
   SetFieldValue(""Order Header Id"",OrderId);
   SetFieldValue(""Product Id"", ProdId);   
   SetFieldValue(""Parent Order Item Id"",Vtel); 
   SetFieldValue(""Root Order Item Id"",rootLineId);
   SetFieldValue(""Billing Account Id"",BillAccId);
   SetFieldValue(""Product Port Id"",sToPortItemId);
   SetFieldValue(""Billing Profile Id"",billProfId);
   SetFieldValue(""Dynamic Discount Method"",dynDiscMethod);
   SetFieldValue(""Pricing Commit Type"",pricCommitType);
   SetFieldValue(""Due Date"",dueDate);
   SetFieldValue(""Status"",""In Progress"");
   SetFieldValue(""Cfg State Code"",""User Requested Item"");
   WriteRecord();
}
}
function FnAddLineItems(Inputs, Outputs)
{
var OrderId = Inputs.GetProperty(""ObjectId"");
var Product = Inputs.GetProperty(""Product"");
var ActionCode = Inputs.GetProperty(""ActionCode"");
var AppObj = TheApplication();
var IsOrdLineRec;
var IsOrderLineDel;
var OrderType;
var AddRootId;
//var ActionCode;
var Vgprs;
var Vtel;
var Vsms;
var Vmms;
var ParentProdId;
var VgprsParentProdId = """";
var VsmsParentProdId = """";
var VtelParentProdId = """";
var VmmsParentProdId = """";
var BillAccId, billProfId, dynDiscMethod, pricCommitType, dueDate;
var OrderBO = AppObj.GetBusObject(""Order Entry (Sales)"");
var OrderEntry:BusComp = OrderBO.GetBusComp(""Order Entry - Orders"");
var OrderLineItem:BusComp =OrderBO.GetBusComp(""Order Entry - Line Items (Simple)"");
var OrdType = AppObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Modify"");
var LOVBC:BusComp = AppObj.GetBusObject(""List Of Values"").GetBusComp(""List Of Values"");
var ProdBC = AppObj.GetBusObject(""Admin ISS Product Definition"").GetBusComp(""Internal Product - ISS Admin"");
with(OrderEntry)
{
            ActivateField(""STC Order SubType"");
			ActivateField(""Requested Ship Date"");
            ClearToQuery();
            SetViewMode(AllView);
            SetSearchSpec(""Id"",OrderId);
            ExecuteQuery();
            var IsOrdRec= FirstRecord();
            if(IsOrdRec)
            {
                        OrderType = GetFieldValue(""STC Order SubType"");
						dueDate = GetFieldValue(""Requested Ship Date"");
                        if(OrderType == OrdType)
                        {
                                    with(OrderLineItem)
                                    {
                                                var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Part Number] = '"" + Product + ""') AND ([Action Code] = '"" + ActionCode + ""')"";
                                                
                                                ActivateField(""Billing Service Type"");
                                                ActivateField(""Action Code"");
                                                ActivateField(""Product Id"");
                                                ActivateField(""Product Type"");
                                                ActivateField(""Billing Account Id"");
												ActivateField(""Billing Profile Id"");
                                              //  ActivateField(""Billing Account"");
                                                ClearToQuery();
                                                SetViewMode(AllView);
                                                SetSearchExpr(StrSearch);
                                    //          SetSearchSpec(""Order Header Id"",OrderId);
                                                ExecuteQuery();
                                                IsOrdLineRec= FirstRecord();
                                                if(!IsOrdLineRec)
                                                {
													with(LOVBC)
													{
													var LovSpec = ""[Value] = '""+ Product +""' AND [Type] = 'STC_SMSUSSDERROR'"";
													SetViewMode(AllView);
													ActivateField(""High"");
													ActivateField(""Description"");
													ActivateField(""Low"");
													ClearToQuery();
													SetSearchExpr(LovSpec);
													ExecuteQuery(ForwardOnly);
													var islovRec = FirstRecord();
                                                           
                                                            if(islovRec)
                                                            {
                                                           var disc1 = GetFieldValue(""High"");
                                                           var disc2 = GetFieldValue(""Description"");
                                                           var disc3 = GetFieldValue(""Low"");
                                                           with(OrderLineItem)
                                                           {
                                                            var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Type] = 'Compound')"";
                                                            ClearToQuery();
                                                            SetViewMode(AllView);
                                                            SetSearchExpr(StrSearch);
                                                            ExecuteQuery();
                                                            var OrdLineRec = FirstRecord();
                                                            while(OrdLineRec)
                                                            {
                                                             var AddBillType = GetFieldValue(""Billing Service Type"");
																	var rootLineId = GetFieldValue(""Root Order Item Id"");
																	switch (AddBillType)
																	{
																	case ""/service/telco/gprs"":
																	Vgprs = GetFieldValue(""Id"");
																	VgprsParentProdId = GetFieldValue(""Product Id"");
																	BillAccId = GetFieldValue(""Billing Account Id"");
																	billProfId = GetFieldValue(""Billing Profile Id"");
																	break;
																	
																	case ""/service/telco/gsm/sms"":
																	Vsms = GetFieldValue(""Id"");
																	VsmsParentProdId = GetFieldValue(""Product Id"");
																	BillAccId = GetFieldValue(""Billing Account Id"");
																	billProfId = GetFieldValue(""Billing Profile Id"");
																	break;
																	
																	case ""/service/telco/gsm/telephony"":
																	Vtel = GetFieldValue(""Id"");
																	VtelParentProdId = GetFieldValue(""Product Id"");
																	BillAccId = GetFieldValue(""Billing Account Id"");
																	billProfId = GetFieldValue(""Billing Profile Id"");
																	break;
																	
																	case ""/service/telco/gsm/mms"":
																	Vmms = GetFieldValue(""Id"");
																	VmmsParentProdId = GetFieldValue(""Product Id"");
																	BillAccId = GetFieldValue(""Billing Account Id"");
																	billProfId = GetFieldValue(""Billing Profile Id"");
																	break;
																	
																	default:
																	
																	}
                                                            
                                                              OrdLineRec = NextRecord();
                                                            }// while(OrdLineRec)
                                                           }
                                                           with(ProdBC)
                                                           {
                                                           var StrProdSearch = ""[Part #] = '"" + Product + ""'"";
                                                           if(disc1 != '' || disc1 != null)
                                                           {
                                                           	StrProdSearch+= ""OR [Part #] = '"" + disc1 + ""'"";
                                                           }
                                                           else if(!disc2)
                                                           {
                                                           	StrProdSearch+= ""OR [Part #] = '"" + disc2 + ""'"";
                                                           }
                                                           else if(!disc3)
                                                           {
                                                           	StrProdSearch+= ""OR [Part #] = '"" + disc3 + ""'"";
                                                           }
                                                            ActivateField(""Billing Service Type"");
															ActivateField(""Dynamic Discount Method"");
															ActivateField(""Pricing Commit Type"");
                                                            ClearToQuery();
                                                            SetViewMode(AllView);
                                                            SetSearchExpr(StrProdSearch);
                                                            ExecuteQuery();
                                                            var IsProduct= FirstRecord();
                                                           while(IsProduct)
                                                            {
                                                             var ProdId = GetFieldValue(""Id"");
                                                             var BillSerType = GetFieldValue(""Billing Service Type"");
															 dynDiscMethod = GetFieldValue(""Dynamic Discount Method"");
															 pricCommitType = GetFieldValue(""Pricing Commit Type"");
                                                             
                                                             if(BillSerType == ""/service/telco/gsm/mms"")
                                                             {
                                                             with(OrderLineItem)
                                                             {
																var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND ([Action Code] = '"" + ActionCode + ""')"";
																ClearToQuery();
																SetViewMode(AllView);
																SetSearchExpr(StrSearch);
																ExecuteQuery();
																var OrdLineRec = FirstRecord();
																if(!OrdLineRec){
                                                              AddNewAddRec(Vmms,ProdId,OrderId,rootLineId,BillAccId,VmmsParentProdId,billProfId,dynDiscMethod,pricCommitType,dueDate);}
                                                             }
                                                             }
                                                             else if(BillSerType == ""/service/telco/gsm/sms"")
                                                             {
                                                               with(OrderLineItem)
                                                             {
																var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND ([Action Code] = '"" + ActionCode + ""')"";
																ClearToQuery();
																SetViewMode(AllView);
																SetSearchExpr(StrSearch);
																ExecuteQuery();
																var OrdLineRec = FirstRecord();
																if(!OrdLineRec){
                                                              AddNewAddRec(Vsms,ProdId,OrderId,rootLineId,BillAccId,VsmsParentProdId,billProfId,dynDiscMethod,pricCommitType,dueDate);}}
                                                             }
                                                             else if(BillSerType == ""/service/telco/gsm/telephony"")
                                                             {
                                                                with(OrderLineItem)
                                                             {
																var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND ([Action Code] = '"" + ActionCode + ""')"";
																ClearToQuery();
																SetViewMode(AllView);
																SetSearchExpr(StrSearch);
																ExecuteQuery();
																var OrdLineRec = FirstRecord();
																if(!OrdLineRec){
                                                              AddNewAddRec(Vtel,ProdId,OrderId,rootLineId,BillAccId,VtelParentProdId,billProfId,dynDiscMethod,pricCommitType,dueDate);}}
                                                             }
                                                             else if(BillSerType == ""/service/telco/gprs"")
                                                             {
                                                                with(OrderLineItem)
                                                             {
																var StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND ([Action Code] = '"" + ActionCode + ""')"";
																ClearToQuery();
																SetViewMode(AllView);
																SetSearchExpr(StrSearch);
																ExecuteQuery();
																var OrdLineRec = FirstRecord();
																if(!OrdLineRec){
                                                              AddNewAddRec(Vgprs,ProdId,OrderId,rootLineId,BillAccId,VgprsParentProdId,billProfId,dynDiscMethod,pricCommitType,dueDate);}}
                                                             }
                                                             IsProduct = NextRecord();
                                                         }
                                                        }//with(ProdBC)
                                                            }// end of with(LOVBC)
                                                            }
                                                //          TheApplication().RaiseErrorText(recCount);
                                                }//         if(IsOrdLineRec)
                                    }//         with(OrderLineItem)
                        }//         if(OrderType == OrdType)
            }//         if(IsOrdRec)
}//with(OrderEntry)
return(CancelOperation);
}
function GetPortProperty(psInput,aPropName,aSearchField,aSearchValue)
{
 /** Entry point to this function is normal Product Id. **/
 /*
  Port
   Class Id, Class Name, DefCardinality, DefaultPortObject, MaxCardinality, MinCardinality,Name, 
   Port Display Name, Port Item Id
   
   PortObject
    Description, Name, Prod Item Id, Product Id, Version
 
 */
 
 var psPort   = TheApplication().NewPropertySet();
 var psPortObj = TheApplication().NewPropertySet();
 var iGotValue = "false"";

 try {
  for (var l=0;l<psInput.GetChildCount();l++) {
   psPort = psInput.GetChild(l);
   
   for (var i=0;i<psPort.GetChildCount();i++) {
    psPortObj = psPort.GetChild(i);
    if (psPortObj.GetProperty(aSearchField) == aSearchValue) {
     //return(psPortObj.GetProperty(aPropName));
     iGotValue = ""true"";
     break;
    }
   }
   if(""true"" == iGotValue) {
    switch(aPropName) {
     case ""Description"":
     case ""Name"":
     case ""Prod Item Id"":
     case ""Product Id"":
     case ""Version"":
      return(psPortObj.GetProperty(aPropName));
     default:
      return(psPort.GetProperty(aPropName));
     
    }
   }
  }
 } finally {
  psPort   = null;
  psPortObj = null;
 }
 return('');
}
function RCOIS_GetAllPorts(aProductId)
{
 /** Get All the Ports for a Product - 2IT-V1.0 **/

 var psInputs = null;
 var psOutputs  = null;


     var bsRCOIS  = TheApplication().GetService(""Remote Complex Object Instance Service"");
  psInputs = TheApplication().NewPropertySet();
  psOutputs  = TheApplication().NewPropertySet();

  psInputs.SetProperty(""Product Id"",aProductId);
  psInputs.SetProperty(""GetPortDomain"", ""Y"");

  bsRCOIS.InvokeMethod(""GetAllPorts"",psInputs,psOutputs);
  return(psOutputs.Copy());

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
 
  var iReturn;
 
 try  
 {
  iReturn = ContinueOperation;
  switch (MethodName)
  {
   case ""FnAddLineItems"":
     FnAddLineItems(Inputs, Outputs);
    iReturn = CancelOperation;
    break;
                    
   default: 
    iReturn = ContinueOperation;
    
  } //switch
  return (iReturn);
 } 
 catch (e)
 { 
  TheApplication().RaiseErrorText(e.toString());
 }

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
    {
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}





function Resubmit()
{
	var MRow="""";
	var MRowId="""";
	var Product="""";
	var Action="""";
	
	/*	WIPRO-Upgrade-03.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_ADD_PAPER_ITEM"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-03.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/siebelfs/PaperItem.csv"", ""rt"");
	
	//var file=Clib.fopen(""C:\Order.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
        {

			MRow = (Clib.fgets(file));  
			MRow = trim(MRow);
			var len = MRow.length;
			var ind1 = MRow.indexOf("","");
			MRowId=MRow.substring(0,ind1);
			MRow = MRow.substring(ind1+1,len);
			var ind2 = MRow .indexOf("","");
			Product = MRow .substring(0,ind2);
			Action = MRow.substring(ind2+1,len);
			 
			//TheApplication().RaiseErrorText(NetPrice);

			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			if( Product != '' || Product != null)
			{
				//MInputs.SetProperty(""ProcessName"",""STC Bulk Order Submit for Stuck orders"");
				//MInputs.SetProperty(""EntityId"",MRowId);    
				//MInputs.SetProperty(""ChildEntityId"",Product);
				//MInputs.SetProperty(""Action"",Action);

				//var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

				//MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

				var varOrlineId;
				var varPaperItemId;
				var varPaperItemVal;
				var boSIMNumber = TheApplication().GetBusObject(""RMS SIM Number"");
				var bcNumPaperItem = boSIMNumber.GetBusComp(""RMS SIM Number Paper Item"");

				varOrlineId=MRowId;
				varPaperItemId=Product;
				varPaperItemVal=Action;

				with(bcNumPaperItem)
				{ 
					ActivateField(""Paper Item Value"");
					ActivateField(""Paper Item Id"");
					ClearToQuery();
					NewRecord(1); 
					SetFieldValue(""Order Line Number Detail Id"",varOrlineId);
					SetFieldValue(""Paper Item Id"",varPaperItemId);
					SetFieldValue(""Paper Item Value"",varPaperItemVal);
					WriteRecord();    
				}

			}
        }
    }
	//MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null;
	varOrlineId=null;
	varPaperItemId=null;
	varPaperItemVal=null;
	boSIMNumber=null;
	bcNumPaperItem=null;
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;

}
function AddNewAddRec(Vtel,ProdId,OrderId,rootLineId,BillAccId,VmmsParentProdId,billProfId,dynDiscMethod,pricCommitType,dueDate,PromoIntegrationId)
{
var StrOrdLine = TheApplication().GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Entry - Line Items (Simple)"");
var psPorts    = TheApplication().NewPropertySet();
//var psRootPort    = TheApplication().NewPropertySet();
with(StrOrdLine)
{
	ActivateField(""Status"");
	ActivateField(""Cfg State Code"");
	ActivateField(""Billing Profile Id"");
	ActivateField(""Dynamic Discount Method"");
	ActivateField(""Pricing Commit Type"");
	ActivateField(""Due Date"");
	ActivateField(""STC Contract Par Asset Integ Id"");
	psPorts = RCOIS_GetAllPorts(VmmsParentProdId);
	
	var sToPortItemId = GetPortProperty(psPorts,""Port Item Id"",""Product Id"",ProdId);
	NewRecord(NewAfter);
	SetFieldValue(""Order Header Id"",OrderId);
	SetFieldValue(""Product Id"", ProdId);   
	SetFieldValue(""Parent Order Item Id"",Vtel); 
	SetFieldValue(""Root Order Item Id"",rootLineId);
	SetFieldValue(""Billing Account Id"",BillAccId);
	SetFieldValue(""Product Port Id"",sToPortItemId);
	SetFieldValue(""Billing Profile Id"",billProfId);
	SetFieldValue(""Dynamic Discount Method"",dynDiscMethod);
	SetFieldValue(""Pricing Commit Type"",pricCommitType);
	SetFieldValue(""Due Date"",dueDate);
	SetFieldValue(""Status"",""In Progress"");
	SetFieldValue(""Cfg State Code"",""User Requested Item"");
	SetFieldValue(""STC Contract Par Asset Integ Id"",PromoIntegrationId);
	WriteRecord();
}
}
function FnAddLineItems(Inputs, Outputs)
{
var OrderId = Inputs.GetProperty(""ObjectId"");
var Product = Inputs.GetProperty(""Product"");
var ActionCode = Inputs.GetProperty(""ActionCode"");
var MainProduct = Inputs.GetProperty(""MainProduct"");
var PromoIntegrationId = Inputs.GetProperty(""PromoIntegrationId"");
var ContractActionCode = Inputs.GetProperty(""ContractActionCode"");
var AppObj = TheApplication();
var IsOrdLineRec, IsOrderLineDel, OrderType, AddRootId, ParentProdId;
//var ActionCode;
var Vgprs="""", Vtel="""", Vsms="""", Vmms="""";
var disc1="""", disc2="""", disc3="""", disc4="""";
var VgprsParentProdId = """", VsmsParentProdId = """", VtelParentProdId = """", VmmsParentProdId = """";
var BillAccId, billProfId, dynDiscMethod, pricCommitType, dueDate;
var ProdId="""", BillSerType="""", ProdPart="""", ProdPartTemp="""", OrderTypeFlag="""";
var StrSearch = """", StrProdSearch = """", OrdLineRec=false;
var OrderBO = AppObj.GetBusObject(""Order Entry (Sales)"");
var OrderEntry:BusComp = OrderBO.GetBusComp(""Order Entry - Orders"");
var OrderLineItem:BusComp =OrderBO.GetBusComp(""Order Entry - Line Items (Simple)"");
var OrdType = AppObj.InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Modify"");
var LOVBC:BusComp = AppObj.GetBusObject(""List Of Values"").GetBusComp(""List Of Values"");
var ProdBC = AppObj.GetBusObject(""Admin ISS Product Definition"").GetBusComp(""Internal Product - ISS Admin"");
with(OrderEntry)
{
    ActivateField(""STC Order SubType"");
	ActivateField(""Requested Ship Date"");
    ClearToQuery();
    SetViewMode(AllView);
    SetSearchSpec(""Id"",OrderId);
    ExecuteQuery();
    var IsOrdRec= FirstRecord();
    if(IsOrdRec)
    {
        OrderType = GetFieldValue(""STC Order SubType"");
		dueDate = GetFieldValue(""Requested Ship Date"");
		OrderTypeFlag = AppObj.InvokeMethod(""LookupValue"",""STC_SOCIAL_CONTR_PROMO_ADMIN"",OrderType);
		OrderTypeFlag = OrderTypeFlag.substring(0,5).toUpperCase();
        //if(OrderType == OrdType)
		if(OrderTypeFlag == ""ALLOW"")
        {
			with(OrderLineItem)
			 {	
				if (PromoIntegrationId != """" && PromoIntegrationId != null)
					StrSearch = ""[Order Header Id]='""+OrderId+""' AND ([Part Number]='""+Product+""') AND ([STC Contract Par Asset Integ Id]='""+PromoIntegrationId+""') AND ([Action Code] <> 'Delete')"";
				else 
					StrSearch = ""[Order Header Id]='""+OrderId+""' AND ([Part Number]='""+Product+""') AND ([Action Code]='""+ActionCode+""')"";
					 
				ActivateField(""Billing Service Type"");
				ActivateField(""Action Code"");
				ActivateField(""Product Id"");
				ActivateField(""Product Type"");
				ActivateField(""Billing Account Id"");
				ActivateField(""Billing Profile Id"");
			  //  ActivateField(""Billing Account"");
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchExpr(StrSearch);
	//          SetSearchSpec(""Order Header Id"",OrderId);
				ExecuteQuery();
				IsOrdLineRec= FirstRecord();
				if(!IsOrdLineRec)
				{
					with(LOVBC)
					{
						var LovSpec = ""[Value] = '""+ MainProduct +""' AND [Type] = 'STC_PROMO_ADD_PROD'"";
						SetViewMode(AllView);
						ActivateField(""High"");
						ActivateField(""Description"");
						ActivateField(""Low"");
						ActivateField(""Name"");
						ClearToQuery();
						SetSearchExpr(LovSpec);
						ExecuteQuery(ForwardOnly);
						var islovRec = FirstRecord();
						   
						if(islovRec)
						{
							disc1 = GetFieldValue(""High"");
							disc2 = GetFieldValue(""Description"");
							disc3 = GetFieldValue(""Low"");
							disc4 = GetFieldValue(""Name"");
							with(OrderLineItem)
							{
								StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Type] = 'Compound') AND ([Action Code] <> 'Delete')"";
								ClearToQuery();
								SetViewMode(AllView);
								SetSearchExpr(StrSearch);
								ExecuteQuery();
								OrdLineRec = FirstRecord();
								while(OrdLineRec)
								{
									var AddBillType = GetFieldValue(""Billing Service Type"");
									var rootLineId = GetFieldValue(""Root Order Item Id"");
									switch (AddBillType)
									{
										case ""/service/telco/gprs"":
										Vgprs = GetFieldValue(""Id"");
										VgprsParentProdId = GetFieldValue(""Product Id"");
										BillAccId = GetFieldValue(""Billing Account Id"");
										billProfId = GetFieldValue(""Billing Profile Id"");
										break;
										
										case ""/service/telco/gsm/sms"":
										Vsms = GetFieldValue(""Id"");
										VsmsParentProdId = GetFieldValue(""Product Id"");
										BillAccId = GetFieldValue(""Billing Account Id"");
										billProfId = GetFieldValue(""Billing Profile Id"");
										break;
										
										case ""/service/telco/gsm/telephony"":
										Vtel = GetFieldValue(""Id"");
										VtelParentProdId = GetFieldValue(""Product Id"");
										BillAccId = GetFieldValue(""Billing Account Id"");
										billProfId = GetFieldValue(""Billing Profile Id"");
										break;
										
										case ""/service/telco/gsm/mms"":
										Vmms = GetFieldValue(""Id"");
										VmmsParentProdId = GetFieldValue(""Product Id"");
										BillAccId = GetFieldValue(""Billing Account Id"");
										billProfId = GetFieldValue(""Billing Profile Id"");
										break;
										
										default:
										
									}
								
									OrdLineRec = NextRecord();
								}// while(OrdLineRec)
							}
							
							with(ProdBC)
							{
								StrProdSearch = ""[Part #] = '"" + Product + ""'"";
								if(disc1 != '' && disc1 != null && disc1 != """")
								{
									StrProdSearch+= "" OR [Part #] = '"" + disc1 + ""'"";
								}
								else if(disc2 != '' && disc2 != null && disc2 != """")
								{
									StrProdSearch+= "" OR [Part #] = '"" + disc2 + ""'"";
								}
								else if(disc3 != '' && disc3 != null && disc3 != """")
								{
									StrProdSearch+= "" OR [Part #] = '"" + disc3 + ""'"";
								}
								else if((disc4 != '' && disc4 != null && disc4 != """") && disc4 != MainProduct)
								{
									StrProdSearch+= "" OR [Part #] = '"" + disc4 + ""'"";
								}
								ActivateField(""Billing Service Type"");
								ActivateField(""Dynamic Discount Method"");
								ActivateField(""Pricing Commit Type"");
								ActivateField(""Part #"");
								ClearToQuery();
								SetViewMode(AllView);
								SetSearchExpr(StrProdSearch);
								ExecuteQuery();
								var IsProduct= FirstRecord();
							   while(IsProduct)
								{
									ProdId = GetFieldValue(""Id"");
									BillSerType = GetFieldValue(""Billing Service Type"");
									dynDiscMethod = GetFieldValue(""Dynamic Discount Method"");
									pricCommitType = GetFieldValue(""Pricing Commit Type"");
									ProdPart = GetFieldValue(""Part #"");
									ProdPartTemp = ProdPart.substring(0, 14);

									if (!(ProdPartTemp == ""VIPCDPOSTPROMO"" && ContractActionCode == ""Update""))
									{
										if(BillSerType == ""/service/telco/gsm/mms"")
										{
											with(OrderLineItem)
											{
												if (ProdPartTemp == ""VIPCDPOSTPROMO"")
													StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND ([STC Contract Par Asset Integ Id]='""+PromoIntegrationId+""') AND ([Action Code] <> 'Delete')"";
												else
													StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND ([Action Code] = '"" + ActionCode + ""')"";
												ClearToQuery();
												SetViewMode(AllView);
												SetSearchExpr(StrSearch);
												ExecuteQuery();
												OrdLineRec = FirstRecord();
												if(!OrdLineRec){
													AddNewAddRec(Vmms,ProdId,OrderId,rootLineId,BillAccId,VmmsParentProdId,billProfId,dynDiscMethod,pricCommitType,dueDate,PromoIntegrationId);
												}

											}
										}
										else if(BillSerType == ""/service/telco/gsm/sms"")
										{
											with(OrderLineItem)
											{
												if (ProdPartTemp == ""VIPCDPOSTPROMO"")
													StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND ([STC Contract Par Asset Integ Id]='""+PromoIntegrationId+""') AND ([Action Code] <> 'Delete')"";
												else
													StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND ([Action Code] = '"" + ActionCode + ""')"";
												ClearToQuery();
												SetViewMode(AllView);
												SetSearchExpr(StrSearch);
												ExecuteQuery();
												OrdLineRec = FirstRecord();
												if(!OrdLineRec){
													AddNewAddRec(Vsms,ProdId,OrderId,rootLineId,BillAccId,VsmsParentProdId,billProfId,dynDiscMethod,pricCommitType,dueDate,PromoIntegrationId);
												}
											}
										}
										else if(BillSerType == ""/service/telco/gsm/telephony"")
										{
											with(OrderLineItem)
											{
												if (ProdPartTemp == ""VIPCDPOSTPROMO"")
													StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND ([STC Contract Par Asset Integ Id]='""+PromoIntegrationId+""') AND ([Action Code] <> 'Delete')"";
												else
													StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND ([Action Code] = '"" + ActionCode + ""')"";
												ClearToQuery();
												SetViewMode(AllView);
												SetSearchExpr(StrSearch);
												ExecuteQuery();
												OrdLineRec = FirstRecord();
												if(!OrdLineRec){
													AddNewAddRec(Vgprs,ProdId,OrderId,rootLineId,BillAccId,VgprsParentProdId,billProfId,dynDiscMethod,pricCommitType,dueDate,PromoIntegrationId);
												}
											}
										}
										else if(BillSerType == ""/service/telco/gprs"")
										{
											with(OrderLineItem)
											{
												if (ProdPartTemp == ""VIPCDPOSTPROMO"")
													StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND ([STC Contract Par Asset Integ Id]='""+PromoIntegrationId+""') AND ([Action Code] <> 'Delete')"";
												else
													StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND ([Action Code] = '"" + ActionCode + ""')"";
												ClearToQuery();
												SetViewMode(AllView);
												SetSearchExpr(StrSearch);
												ExecuteQuery();
												OrdLineRec = FirstRecord();
												if(!OrdLineRec){
													AddNewAddRec(Vgprs,ProdId,OrderId,rootLineId,BillAccId,VgprsParentProdId,billProfId,dynDiscMethod,pricCommitType,dueDate,PromoIntegrationId);
												}
											}
										}//end of else if(BillSerTyp ...
									}//end of if (!(ProdPartTemp == ""VIPCDPOSTPROMO"" && ContractActionCode == ""Update""))
									IsProduct = NextRecord();
								}
							}//with(ProdBC)
						}//end of if(islovRec)
					}// end of with(LOVBC)
					//TheApplication().RaiseErrorText(recCount);
				}//if(IsOrdLineRec)
			}//with(OrderLineItem)
        }//if(OrderType == OrdType)
    }//end of if(IsOrdRec)
}//with(OrderEntry)
return(CancelOperation);
}
function GetOrphanSocialContracts (Inputs, Outputs)
{
/*****************************************************************
Overview: //[NAVIN:14Nov2017:NewPostpaidSocialContractAddons]
Inputs: 
	ObjectId: Order Row Id
	BusinessObject:optional
	BusinessComponent:optional
	SearchExpression, SearchExpression2:optional
	ActionCode, ActionCode2 (optional)
	FieldName: Destination BC field name to be used to form SearchExpression.
Outputs:
	SearchExprOut: New SearchExpression that can be used to query in Asset or Line Item BCs.
	RecordCount: Cout of Records
	ErrorCode: 
	ErrorMessage:
*********************************************************************/
try
{
	var ObjectId = Inputs.GetProperty(""ObjectId"");
	var boname = Inputs.GetProperty(""BusinessObject"");
	var bcname = Inputs.GetProperty(""BusinessComponent"");
	var searchexpr = Inputs.GetProperty(""SearchExpression"");
	var searchexpr2 = Inputs.GetProperty(""SearchExpression2"");
	var ActionCode = Inputs.GetProperty(""ActionCode"");
	var ActionCode2 = Inputs.GetProperty(""ActionCode2"");
	//var viewmode = Inputs.GetProperty(""ViewMode"");
	var fieldName = Inputs.GetProperty(""FieldName"");
	
	var bo = null, bo2 = null, bc = null, bc2 = null;
	var viewmode = """", searchExprOut="""", searchexpr2temp="""";
	var recordCount = 0, recordCount2 = 0, isrec = false, isrec2=false;
	var maxCount = 50, i = 0, j = 0, val="""", part="""", vItemId="""";
	
	if (boname == """" || boname == null)
		boname = ""MACD Performance Order"";
	
	if (bcname == """" || bcname == null)
		bcname = ""Order Entry - Line Items (Simple)"";
	
	if (viewmode == """" || viewmode == null)
		viewmode = 3;
	
	if (fieldName == """" || fieldName == null)
		fieldName = ""Id"";
	
	if (ActionCode == """" || ActionCode == null)
		ActionCode = ""Add"";
	
	if (ActionCode2 == """" || ActionCode2 == null)
		ActionCode2 = ""Add"";
	
	if (searchexpr == """" || searchexpr == null)
		searchexpr = ""[Order Header Id]='""+ObjectId+""' AND ([Part Number] LIKE 'VIPCDPOSTPROMO*') AND ([STC Contract Par Asset Integ Id] IS NOT NULL) AND ([Action Code]='""+ActionCode+""')"";
	
	if (searchexpr2 == """" || searchexpr2 == null)
		searchexpr2 = ""[Order Header Id]='""+ObjectId+""' AND ([Action Code]='""+ActionCode2+""')"";
	
	bo = TheApplication().GetBusObject(boname);
	bo2 = TheApplication().GetBusObject(boname);
	bc = bo.GetBusComp(bcname);
	bc2 = bo2.GetBusComp(bcname);
	
	with (Outputs)
	{
		SetProperty(""SearchExprOut"", searchExprOut);
		SetProperty(""RecordCount"", 0);
		SetProperty(""ErrorCode"", ""1"");
		SetProperty(""ErrorMessage"", ""NO RECORD FOUND"");
	}

  	with(bc)
	{
		ClearToQuery();
		SetViewMode(viewmode);
		ActivateField(fieldName);
		ActivateField(""Order Header Id"");
		ActivateField(""Part Number"");
		ActivateField(""STC Contract Par Asset Integ Id"");
		ActivateField(""Action Code"");
		SetSearchExpr(searchexpr);
		ExecuteQuery(ForwardOnly);
		isrec = FirstRecord();
		if (isrec)
		{
			recordCount = CountRecords();
			
			for (j= 0; j < recordCount; j++)
			{
				vItemId = GetFieldValue(fieldName);
				val = GetFieldValue(""STC Contract Par Asset Integ Id"");
				part = GetFieldValue(""Part Number"");
				searchexpr2temp = searchexpr2 +"" AND ([Part Number]='""+val+""')""
				with(bc2)
				{
					ClearToQuery();
					SetViewMode(viewmode);
					ActivateField(""Order Header Id"");
					ActivateField(""Part Number"");
					ActivateField(""STC Contract Par Asset Integ Id"");
					ActivateField(""Action Code"");
					ActivateField(""STC Plan Type"");
					SetSearchExpr(searchexpr2temp);
					ExecuteQuery(ForwardOnly);
					isrec2 = FirstRecord();
					if (isrec2){
					}
					else{
						recordCount2 += 1;
						if (j == 0)
							searchExprOut = ""[""+fieldName+""]='""+vItemId+""'"";
						else
							searchExprOut = searchExprOut +"" OR [""+fieldName+""]='""+vItemId+""'"";
					}
				}//end of with(bc2)

				isrec = NextRecord();
			}
		}
	}//end of with(bc)
	//setting of the output arguments
	with (Outputs)
	{
		SetProperty(""SearchExprOut"", searchExprOut);
		SetProperty(""RecordCount"", recordCount2);
		SetProperty(""ErrorCode"", ""0"");
		SetProperty(""ErrorMessage"", ""SUCCESS"");
	}
	return(CancelOperation);
}
catch (e)
{
	throw (e);
}
finally
{
	bc = null;
	bc2 = null;
	bo = null;
}
}
function GetPortProperty(psInput,aPropName,aSearchField,aSearchValue)
{
 /** Entry point to this function is normal Product Id. **/
 /*
  Port
   Class Id, Class Name, DefCardinality, DefaultPortObject, MaxCardinality, MinCardinality,Name, 
   Port Display Name, Port Item Id
   
   PortObject
    Description, Name, Prod Item Id, Product Id, Version
 
 */
 
 var psPort   = TheApplication().NewPropertySet();
 var psPortObj = TheApplication().NewPropertySet();
 var iGotValue = "false"";

 try {
  for (var l=0;l<psInput.GetChildCount();l++) {
   psPort = psInput.GetChild(l);
   
   for (var i=0;i<psPort.GetChildCount();i++) {
    psPortObj = psPort.GetChild(i);
    if (psPortObj.GetProperty(aSearchField) == aSearchValue) {
     //return(psPortObj.GetProperty(aPropName));
     iGotValue = ""true"";
     break;
    }
   }
   if(""true"" == iGotValue) {
    switch(aPropName) {
     case ""Description"":
     case ""Name"":
     case ""Prod Item Id"":
     case ""Product Id"":
     case ""Version"":
      return(psPortObj.GetProperty(aPropName));
     default:
      return(psPort.GetProperty(aPropName));
     
    }
   }
  }
 } finally {
  psPort   = null;
  psPortObj = null;
 }
 return('');
}
function RCOIS_GetAllPorts(aProductId)
{
 /** Get All the Ports for a Product - 2IT-V1.0 **/

 var psInputs = null;
 var psOutputs  = null;


     var bsRCOIS  = TheApplication().GetService(""Remote Complex Object Instance Service"");
  psInputs = TheApplication().NewPropertySet();
  psOutputs  = TheApplication().NewPropertySet();

  psInputs.SetProperty(""Product Id"",aProductId);
  psInputs.SetProperty(""GetPortDomain"", ""Y"");

  bsRCOIS.InvokeMethod(""GetAllPorts"",psInputs,psOutputs);
  return(psOutputs.Copy());

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
 
  var iReturn;
 
 try  
 {
  iReturn = ContinueOperation;
  switch (MethodName)
  {
	case ""FnAddLineItems"":
		FnAddLineItems(Inputs, Outputs);
		iReturn = CancelOperation;
		break;
	case ""GetOrphanSocialContracts"":
		GetOrphanSocialContracts(Inputs, Outputs);  
		ireturn = CancelOperation;
		break; 
                    
   default: 
    iReturn = ContinueOperation;
    
  } //switch
  return (iReturn);
 } 
 catch (e)
 { 
  TheApplication().RaiseErrorText(e.toString());
 }

}
function AddNewAddRec(Vtel,ProdId,OrderId,rootLineId,BillAccId,BillProfileId,VmmsParentProdId,PricingCommitType,DynDiscMethod)
{
var StrOrdLine = TheApplication().GetBusObject(""Order Entry (Sales)"").GetBusComp(""Order Entry - Line Items (Simple)"");
var psPorts    = TheApplication().NewPropertySet();
//var psRootPort    = TheApplication().NewPropertySet();
var sToPortItemId="""", sToProdItemId="""", vNewLineItemId = """";
with(StrOrdLine)
{
   ActivateField(""Status"");
   ActivateField(""Cfg State Code"");
   ActivateField(""Billing Profile Id"");
   ActivateField(""Prod Item Id"");
   ActivateField(""Pricing Commit Type"");
   ActivateField(""Dynamic Discount Method"");
   psPorts = RCOIS_GetAllPorts(VmmsParentProdId);
  
   sToPortItemId = GetPortProperty(psPorts,""Port Item Id"",""Product Id"",ProdId);
   sToProdItemId = GetPortProperty(psPorts,""Prod Item Id"",""Product Id"",ProdId);
   NewRecord(NewAfter);
   SetFieldValue(""Order Header Id"",OrderId);
   SetFieldValue(""Product Id"", ProdId);   
   SetFieldValue(""Parent Order Item Id"",Vtel); 
   SetFieldValue(""Root Order Item Id"",rootLineId);
   SetFieldValue(""Billing Account Id"",BillAccId);
   SetFieldValue(""Billing Profile Id"",BillProfileId);
   SetFieldValue(""Product Port Id"",sToPortItemId);
   SetFieldValue(""Prod Item Id"",sToProdItemId);
   SetFieldValue(""Pricing Commit Type"",PricingCommitType);
   SetFieldValue(""Dynamic Discount Method"",DynDiscMethod);
   SetFieldValue(""Status"",""In Progress"");
   SetFieldValue(""Cfg State Code"",""User Requested Item"");
   WriteRecord();

   vNewLineItemId = GetFieldValue(""Id"");
   return vNewLineItemId;
}
}
function FnAddLineItems(Inputs, Outputs)
{
var OrderId="""", TargetProdId="""", Treatment="""", ParItemId="""", ParProdId="""";
var IsOrdLineRec, IsOrderLineDel, OrderType, AddRootId, OrdLineRec=false, IsProduct=false;
var ActionCode="""", StrSearch="""", StrProdSearch="""", VAcc="""", VAccParentProd="""";
var AddBillType="""", rootLineId="""", vParItemId="""", vParProdId="""";
var BillAccId="""", BillProfileId="""", vNewLineItemId="""", vNewLineItemFlag=""Y"";
var ProdId="""", BillSerType="""", PricingCommitType="""", DynDiscMethod="""";
var OrderBO = TheApplication().GetBusObject(""Order Entry (Sales)"");
var OrderEntry:BusComp = OrderBO.GetBusComp(""Order Entry - Orders"");
var OrderLineItem:BusComp =OrderBO.GetBusComp(""Order Entry - Line Items (Simple)"");
var OrdType = TheApplication().InvokeMethod(""LookupValue"",""STC_ORDER_SUB_TYPE"",""Modify"");
var LOVBC:BusComp = TheApplication().GetBusObject(""List Of Values"").GetBusComp(""List Of Values"");
var ProdBC = TheApplication().GetBusObject(""Admin ISS Product Definition"").GetBusComp(""Internal Product - ISS Admin"");
with(Inputs)
{
	OrderId = GetProperty(""OrderId"");
	TargetProdId = GetProperty(""TargetProdId"");
	Treatment = GetProperty(""TreatmentType"");
	ParItemId = GetProperty(""ParentItemId"");
	ParProdId = GetProperty(""ParentProdId"");
}
Outputs.SetProperty(""NewLineItemId"", """");

with(OrderEntry)
{
	ActivateField(""STC Order SubType"");
	ClearToQuery();
	SetViewMode(AllView);
	SetSearchSpec(""Id"",OrderId);
	ExecuteQuery();
	var IsOrdRec= FirstRecord();
	if(IsOrdRec)
	{
        OrderType = GetFieldValue(""STC Order SubType"");
        if(OrderType == OrdType)
        {
            with(OrderLineItem)
			{
				StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + TargetProdId + ""') AND [Action Code] = 'Add'"";
				ActivateField(""Billing Service Type"");
				ActivateField(""Action Code"");
				ActivateField(""Product Id"");
				ActivateField(""Product Type"");
				ActivateField(""Billing Account Id"");
				ActivateField(""Billing Profile Id"");
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchExpr(StrSearch);
				ExecuteQuery();
				IsOrdLineRec= FirstRecord();
				if(!IsOrdLineRec)
				{
					with(OrderLineItem)
					{
						StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Type] = 'Package')"";
						ClearToQuery();
						SetViewMode(AllView);
						SetSearchExpr(StrSearch);
						ExecuteQuery();
						OrdLineRec = FirstRecord();
						if(OrdLineRec)
						{
							VAcc = GetFieldValue(""Id"");
							rootLineId = GetFieldValue(""Root Order Item Id"");
							VAccParentProd = GetFieldValue(""Product Id"");
							BillAccId = GetFieldValue(""Billing Account Id"");
							BillProfileId = GetFieldValue(""Billing Profile Id"");
						}
					}
				
					with(ProdBC)
					{
						StrProdSearch = ""[Id] = '"" + TargetProdId + ""'"";
						ActivateField(""Billing Service Type"");
						ActivateField(""Pricing Commit Type"");
						ActivateField(""Dynamic Discount Method"");
						ClearToQuery();
						SetViewMode(AllView);
						SetSearchExpr(StrProdSearch);
						ExecuteQuery();
						IsProduct= FirstRecord();
						if(IsProduct)
						{
							ProdId = GetFieldValue(""Id"");
							BillSerType = GetFieldValue(""Billing Service Type"");
							PricingCommitType = GetFieldValue(""Pricing Commit Type"");
							DynDiscMethod = GetFieldValue(""Dynamic Discount Method"");
				
							if(ParItemId != """" && ParItemId != null)
							{
								with(OrderLineItem)
								{
									StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND ([Action Code] <> 'Delete')"";
									ClearToQuery();
									SetViewMode(AllView);
									SetSearchExpr(StrSearch);
									ExecuteQuery();
									OrdLineRec = FirstRecord();
									if(!OrdLineRec){
										vNewLineItemId = AddNewAddRec(ParItemId,ProdId,OrderId,rootLineId,BillAccId,BillProfileId,ParProdId,PricingCommitType,DynDiscMethod);
									}
								}
							}
							else if(BillSerType == ""/account"" || (BillSerType == """" || BillSerType == null))
							{
								with(OrderLineItem)
								{
									StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND ([Action Code] <> 'Delete')"";
									ClearToQuery();
									SetViewMode(AllView);
									SetSearchExpr(StrSearch);
									ExecuteQuery();
									OrdLineRec = FirstRecord();
									if(!OrdLineRec){
										vNewLineItemId = AddNewAddRec(VAcc,ProdId,OrderId,rootLineId,BillAccId,BillProfileId,VAccParentProd,PricingCommitType,DynDiscMethod);
									}
								}
							}
							else
							{
								if(BillSerType != """" && BillSerType != null)
								{
									with(OrderLineItem)
									{
										StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Type] = 'Compound') AND ([Billing Service Type]='""+BillSerType+""') AND ([Action Code] <> 'Delete')"";
										ClearToQuery();
										SetViewMode(AllView);
										SetSearchExpr(StrSearch);
										ExecuteQuery();
										OrdLineRec = FirstRecord();
										if(OrdLineRec)
										{
											AddBillType = GetFieldValue(""Billing Service Type"");
											rootLineId = GetFieldValue(""Root Order Item Id"");
											vParItemId = GetFieldValue(""Id"");
											vParProdId = GetFieldValue(""Product Id"");
											BillAccId = GetFieldValue(""Billing Account Id"");
											BillProfileId = GetFieldValue(""Billing Profile Id"");
										}//if(OrdLineRec)
									}
								}//end of f(BillSerType != """"...

								with(OrderLineItem)
								{
									StrSearch = ""[Order Header Id] = '"" + OrderId + ""' AND ([Product Id] = '"" + ProdId + ""') AND ([Action Code] <> 'Delete')"";
									ClearToQuery();
									SetViewMode(AllView);
									SetSearchExpr(StrSearch);
									ExecuteQuery();
									OrdLineRec = FirstRecord();
									if(!OrdLineRec){
										vNewLineItemId = AddNewAddRec(vParItemId,ProdId,OrderId,rootLineId,BillAccId,BillProfileId,vParProdId,PricingCommitType,DynDiscMethod);
									}
								}
							}
							//IsProduct = NextRecord();
						}//if(IsProduct)
					}//with(ProdBC)  
				}//if(IsOrdLineRec)
				else{
					vNewLineItemId = OrderLineItem.GetFieldValue(""Id"");
					vNewLineItemFlag = ""N"";
				}
            }//with(OrderLineItem)
        }//if(OrderType == OrdType)
	}//if(IsOrdRec)
	Outputs.SetProperty(""NewLineItemId"", vNewLineItemId);
	Outputs.SetProperty(""NewLineItemFlag"", vNewLineItemFlag);
}//with(OrderEntry)
return(CancelOperation);
}
function GetPortProperty(psInput,aPropName,aSearchField,aSearchValue)
{
 /** Entry point to this function is normal Product Id. **/
 /*
  Port
   Class Id, Class Name, DefCardinality, DefaultPortObject, MaxCardinality, MinCardinality,Name, 
   Port Display Name, Port Item Id
   
   PortObject
    Description, Name, Prod Item Id, Product Id, Version
 
 */
 
 var psPort   = TheApplication().NewPropertySet();
 var psPortObj = TheApplication().NewPropertySet();
 var iGotValue = "false"";

 try {
  for (var l=0;l<psInput.GetChildCount();l++) {
   psPort = psInput.GetChild(l);
   
   for (var i=0;i<psPort.GetChildCount();i++) {
    psPortObj = psPort.GetChild(i);
    if (psPortObj.GetProperty(aSearchField) == aSearchValue) {
     //return(psPortObj.GetProperty(aPropName));
     iGotValue = ""true"";
     break;
    }
   }
   if(""true"" == iGotValue) {
    switch(aPropName) {
     case ""Description"":
     case ""Name"":
     case ""Prod Item Id"":
     case ""Product Id"":
     case ""Version"":
      return(psPortObj.GetProperty(aPropName));
     default:
      return(psPort.GetProperty(aPropName));
     
    }
   }
  }
 } finally {
  psPort   = null;
  psPortObj = null;
 }
 return('');
}
function RCOIS_GetAllPorts(aProductId)
{
 /** Get All the Ports for a Product - 2IT-V1.0 **/

 var psInputs = null;
 var psOutputs  = null;


     var bsRCOIS  = TheApplication().GetService(""Remote Complex Object Instance Service"");
  psInputs = TheApplication().NewPropertySet();
  psOutputs  = TheApplication().NewPropertySet();

  psInputs.SetProperty(""Product Id"",aProductId);
  psInputs.SetProperty(""GetPortDomain"", ""Y"");

  bsRCOIS.InvokeMethod(""GetAllPorts"",psInputs,psOutputs);
  return(psOutputs.Copy());

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var iReturn;

	try  
	{
		iReturn = ContinueOperation;
		switch (MethodName)
		{
			case ""FnAddLineItems"":
				FnAddLineItems(Inputs, Outputs);
				iReturn = CancelOperation;
				break;		
			default: 
				iReturn = ContinueOperation;
		} //switch
		return (iReturn);
	} 
	catch (e)
	{ 
		TheApplication().RaiseErrorText(e.toString());
	}

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var iReturn;
	var svc ;
	
	try  
	{
		iReturn = ContinueOperation;
		switch (MethodName)
		{
			case ""InvokeISSApprovalService"":
		svc = TheApplication().GetService(""ISS Approval Bus Service"");
		Inputs.GetProperty(""ActionLIC"");
		Inputs.GetProperty(""InboxItemId"");
		Inputs.GetProperty(""ObjectId"");
		Inputs.GetProperty(""OwnerInfoId"");
		Inputs.GetProperty(""SendEmail"");
		Inputs.GetProperty(""SeqNum"");
		Inputs.GetProperty(""StageId"");
		svc.InvokeMethod(""SetApprovalDecision"", Inputs, Outputs);

				iReturn = CancelOperation;
				break;
							    								 
			default: 
				iReturn = ContinueOperation;
				
		} //switch
		return (iReturn);
	} 
	catch (e)
	{	
		
	}
}
"//Your public declarations go here...

var RootProductName;
//RootProductName=TheApplication().InvokeMethod(""LookupValue"",""STC_ASSET_MIGRATE_TOPKG"",""PACKAGE"");"
"//Your public declarations go here... 
function AsyncMigrateData ( Inputs,Outputs )
{
	try
	{
		var Inp1=TheApplication().NewPropertySet();
		var Out1=TheApplication().NewPropertySet();
		var MSISDNTag,MSISDNVal,PLANTag,PLANVal,cnt,j;
		var LBS=TheApplication().GetService(""Inbound E-mail Database Operations"");

		Inp1.SetProperty(""BusComp"",""List Of Values"");
		Inp1.SetProperty(""BusObj"",""List Of Values"");
		Inp1.SetProperty(""QueryFields"",""Type"");
		Inp1.SetProperty(""ValueFields"",""Description"");
		Inp1.SetProperty(""Type"",""STC_ASSET_MIGRATE_TOPKG"");

		LBS.InvokeMethod(""FindRecord"",Inp1,Out1);
		//var ABS=TheApplication().GetService(""TM BS ProcessAssets"");

		if (Out1.GetProperty(""Id"")!=null)
		 {
			RootProductName=Out1.GetProperty(""Description"");
		 }
		else
		{
			return CancelOperation;
		}
			cnt=Inputs.GetChild(0).GetChildCount();
			for (j=0;j<cnt;j++)
			{
				MSISDNTag=Inputs.GetChild(0).GetChild(j).GetChild(0).GetType();
				PLANTag=Inputs.GetChild(0).GetChild(j).GetChild(1).GetType();
							
				if(MSISDNTag==""MSISDN"")
					MSISDNVal=Inputs.GetChild(0).GetChild(j).GetChild(0).GetValue();
				if(PLANTag==""PLANNAME"")
					PLANVal=Inputs.GetChild(0).GetChild(j).GetChild(1).GetValue();

				Inp1.SetProperty(""IncludeSuspended"",""Y"");
				Inp1.SetProperty(""NumberList"",MSISDNVal);
				Inp1.SetProperty(""PlanName"",PLANVal);
				Inp1.SetProperty(""NewRootProductName"",RootProductName);
				ABS.InvokeMethod(""ProcessAsset"",Inp1,Out1);
			}
			j=0;
	}
	
	catch(e)
	{
		
	}
	finally
	{
		ABS=null;
		MSISDNTag=null;
		MSISDNVal=null;
		PLANTag=null;
		PLANVal=null;
		cnt=null;
		j=null;
		Inp1=null;
		Out1=null;
	}
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	try
	{
		switch(MethodName)
		{
			case ""AsyncMigrateData"":
				  AsyncMigrateData(Inputs,Outputs);
				  return (CancelOperation);
			default:
				  return (ContinueOperation);
		}
	}
	catch(e)
	{
		Outputs.SetProperty(""ErrorCode"",e.errCode());
		Outputs.SetProperty(""ErrorMessage"",e.errText());
	}
	finally
	{
	}

	return (ContinueOperation);
}
function CRMSmartReminder(OrderId)
{
//***********************************************************************************************************//
//[MANUJ] : [CRM Smart Reminder]

	var appObj;
	var bsValidCustomer;
	var sErrorCode;
	var sErrorMsg;
	var sPopMssgRemainder = """";

		appObj = TheApplication();
		with(appObj)
		{   
			var Message = """";
			var psInputsDep = NewPropertySet();
			var psOutputsDep = NewPropertySet();		
			psInputsDep.SetProperty(""ProcessName"", ""STC CRM Smart Reminder Process"");
			psInputsDep.SetProperty(""Object Id"", OrderId);
			psInputsDep.SetProperty(""Operation"", ""OrderValidate"");

			bsValidCustomer = GetService(""Workflow Process Manager"");
			bsValidCustomer.InvokeMethod(""RunProcess"",psInputsDep, psOutputsDep);
			Message = psOutputsDep.GetProperty(""Message Text"");
			if(Message != ""0"" && Message != 0 && Message != """" && Message != ""NO-MESSAGE"")
			{
				sPopMssgRemainder = Message;
			}		
		} 
			psInputsDep = null;
			psOutputsDep = null;
			bsValidCustomer = null;
			appObj = null;
			return (sPopMssgRemainder);
	


		
	
	
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	try
	{
		if(MethodName == ""Validate"")
		{
			var sOrderId = Inputs.GetProperty(""OrderId"");
			var sPopMssgRemainder = CRMSmartReminder(sOrderId);//[MANUJ : [CRM Remainder]
			var sobjAppln = TheApplication();  
			var sInps = sobjAppln.NewPropertySet();
			var sOutps = sobjAppln.NewPropertySet();
			var sPopMssg;

			var sWFSrvc = sobjAppln.GetService(""Workflow Process Manager"");   
			sInps.SetProperty(""Object Id"",sOrderId);
			sInps.SetProperty(""ProcessName"",""STC Auto Plan Migration Restriction WF"");   
			sWFSrvc.InvokeMethod(""RunProcess"",sInps,sOutps);

			var PlanName = sOutps.GetProperty(""PlanName"");
			var MainContractName = sOutps.GetProperty(""MainContractName"");
			var AddOnContractName = sOutps.GetProperty(""AddOnContractName"");
			var MainDevice = sOutps.GetProperty(""MainDevice"");
			var AddOnDevice = sOutps.GetProperty(""AddOnDevice"");
			var CANID = sOutps.GetProperty(""ID"");
			var CANName = sOutps.GetProperty(""CAN Name"");
			var emailBasic = sOutps.GetProperty(""EmailBasic"");//Mayank: Added for Boaster
			var OSNBasePackDelete = sOutps.GetProperty(""OSNBasePackDelete"");
			var EcomRegisteredFlag = sOutps.GetProperty(""EcomRegisteredFlag"");//Mayank: Added for Ecom
			if(EcomRegisteredFlag == ""Y"")//Mayank: Added for Ecom
			{//Mayank: Added for Ecom
				if(PlanName == """")
				PlanName = ""None""; 
				if(MainDevice == """")
				MainDevice = ""None"";
				if(MainContractName == """")
				MainContractName = ""None"";
				if(AddOnDevice == """")
				AddOnDevice = ""None"";
				if(AddOnContractName == """")
				AddOnContractName = ""None"";

				if(emailBasic == """" || emailBasic == null)
				{
					//var sPopMssg = ""Plan Name :""+PlanName+""\n""+""Device:""+ MainDevice+""\n""+""Contract:""+MainContractName+""\n""+""AddOn Device:""+AddOnDevice+""\n""+""AddOn Contract:""+AddOnContractName; --- Mayank: Inactivated for Payment Transfer
					sPopMssg = ""Name :""+CANName+""\n""+""CPR :""+CANID+""\n""+""Plan Name :""+PlanName+""\n""+""Device:""+ MainDevice+""\n""+""Contract:""+MainContractName+""\n""+""AddOn Device:""+AddOnDevice+""\n""+""AddOn Contract:""+AddOnContractName; //Mayank: Added for Payment Transfer
					if(sPopMssgRemainder != """" && sPopMssgRemainder != null)//[MANUJ] : [Smart remainder]
					{
					sPopMssg = sPopMssgRemainder +""\n"" + sPopMssg;
					}
					Outputs.SetProperty(""PopupMessage"",sPopMssg);
				}
				else
				{
					var EmailMessage = ""Please provision the free cloud services; ""+emailBasic+"" email (@viva.bh), business Basic website, domain name and Desktop Backup 100GB. Please make sure that these services are provisioned on Cloud Portal: portal.viva.bh/manage; for emails by visiting: portal.bomboozle.me"";
					//var sPopMssg = ""Plan Name :""+PlanName+""\n""+""Device:""+ MainDevice+""\n""+""Contract:""+MainContractName+""\n""+""AddOn Device:""+AddOnDevice+""\n""+""AddOn Contract:""+AddOnContractName+""\n""+EmailMessage; --- Mayank: Inactivated for Payment Transfer
					sPopMssg = ""Name :""+CANName+""\n""+""CPR :""+CANID+""\n""+""Plan Name :""+PlanName+""\n""+""Device:""+ MainDevice+""\n""+""Contract:""+MainContractName+""\n""+""AddOn Device:""+AddOnDevice+""\n""+""AddOn Contract:""+AddOnContractName+""\n""+EmailMessage;//Mayank: Added for Payment Transfer
						if(sPopMssgRemainder != """" && sPopMssgRemainder != null)//[MANUJ] : [Smart remainder]
					{
					sPopMssg = sPopMssg +""\n"" + sPopMssgRemainder;
					}
					Outputs.SetProperty(""PopupMessage"",sPopMssg);
				}
			}//Mayank: Added for Ecom
			else//Mayank: Added for Ecom
			{
				sPopMssg = ""Please Update Customer before validation the Order using Get Customer CPR Details on Customer View."";
				Outputs.SetProperty(""PopupMessage"",sPopMssg);
			}//Mayank: Added for Ecom
				Outputs.SetProperty(""OSNBasePackDelete"",OSNBasePackDelete);
			return CancelOperation;


		}//endif 
		//Hardik:Start Try and Buy Validate Order
		if(MethodName == ""ContactDetail"")
		{
			var vOrderId = Inputs.GetProperty(""OrderId"");
			var vInps = TheApplication().NewPropertySet();
			var vOutps = TheApplication().NewPropertySet();
			var vWFSrvc = TheApplication().GetService(""Workflow Process Manager"");   
			vInps.SetProperty(""Object Id"",vOrderId);
			vInps.SetProperty(""ProcessName"",""STC Trail Contact Detail WF"");   
			vWFSrvc.InvokeMethod(""RunProcess"",vInps,vOutps);
			var AuthNum = vOutps.GetProperty(""STCAuthorizedNumber"");
			var OrderRec =vOutps.GetProperty(""OrderRec"");
			var EmailId = vOutps.GetProperty(""PrmEmailId"");
			var AlternateNum = vOutps.GetProperty(""PrmContactMSISDN"");
			if (AuthNum ==null || AuthNum =="""")
			{
				AuthNum=""NotExists"";
			}
			if (EmailId ==null || EmailId =="""")
			{
				EmailId=""NotExists"";
			}
			if (AlternateNum ==null || AlternateNum =="""")
			{
				AlternateNum=""NotExists"";
			}
			sPopMssg = ""Authorized Number :""+AuthNum+""\n""+""Alternate Number :""+AlternateNum+""\n""+""Email ID :""+EmailId;
			Outputs.SetProperty(""PopupContact"",sPopMssg);
			Outputs.SetProperty(""OrderRec"",OrderRec);
			return CancelOperation;

		}
		//Hardik:End Try and Buy Validate Order
		if(MethodName == ""OSNValidate"")
		{
			var sOrderIdOSN = Inputs.GetProperty(""OrderId"");
			var sobjApplnOSN = TheApplication();  
			var sInpsOSN = sobjApplnOSN.NewPropertySet();
			var sOutpsOSN = sobjApplnOSN.NewPropertySet();
			var sWFSrvcOSN = sobjApplnOSN.GetService(""Workflow Process Manager"");   
			sInpsOSN.SetProperty(""Object Id"",sOrderIdOSN);
			sInpsOSN.SetProperty(""Process"",""OSNValidate"");
			sInpsOSN.SetProperty(""ProcessName"",""STC Auto Plan Migration Restriction WF"");   
			sWFSrvcOSN.InvokeMethod(""RunProcess"",sInpsOSN,sOutpsOSN);
			var OSNBasePackDelete = sOutpsOSN.GetProperty(""OSNBasePackDelete"");
			Outputs.SetProperty(""OSNBasePackDelete"",OSNBasePackDelete);
			return CancelOperation;
		}
		//Mayank: Added for MENA -------------- START -------------------------
		if(MethodName == ""BusinessBB"")
		{
			var sOrderIdBB = Inputs.GetProperty(""OrderId"");
			var sobjApplnBB = TheApplication();  
			var sInpsBB = sobjApplnBB.NewPropertySet();
			var sOutpsBB = sobjApplnBB.NewPropertySet();
			var sWFSrvcBB = sobjApplnBB.GetService(""Workflow Process Manager"");   
			sInpsBB.SetProperty(""Object Id"",sOrderIdBB);
			sInpsBB.SetProperty(""Process"",""BusinessBBAlert"");
			sInpsBB.SetProperty(""ProcessName"",""STC Business BB Validation WF"");   
			sWFSrvcBB.InvokeMethod(""RunProcess"",sInpsBB,sOutpsBB);
			var BusinessBBPlanChange = sOutpsBB.GetProperty(""BusinessBBPlanChange"");
			Outputs.SetProperty(""BusinessBBPlanChange"",BusinessBBPlanChange);
			return CancelOperation;
		}//Mayank: Added for MENA -------------- STOP -------------------------
		return (ContinueOperation);
	}
	finally
	{
	sWFSrvc = null;
	}
}
function CheckBTLRec(Inputs,Outputs)
{
	var sBTLBO = TheApplication().GetBusObject(""STC BTL Promotion Survey BO"");
	var sBTLBC = sBTLBO.GetBusComp(""STC BTL Promotion Survey BC"");
	var sMSISDN = Inputs.GetProperty(""MSISDN"");
	var sBTLRecId = """";
	with(sBTLBC){
		ClearToQuery();
		SetViewMode(AllView);
		SetSearchSpec(""STC MSISDN"",sMSISDN);
		SetSearchSpec(""STC Survey Status"",""Completed"");
		SetSortSpec(""STC Survey Date(DESCENDING)"");
		ExecuteQuery(ForwardOnly);
		var IsBTLRec = FirstRecord();
		if(IsBTLRec){
			sBTLRecId = GetFieldValue(""Id"");
		}	
	}//endwith sBTLBC
	
	Outputs.SetProperty(""BTLRecId"",sBTLRecId);
	
	return CancelOperation;
}
function CheckVoucherRec(Inputs,Outputs)
{
	var sVoucherBO = TheApplication().GetBusObject(""STC Data Voucher BO"");
	var sVoucherBC =  sVoucherBO.GetBusComp(""STC Voucher Management"");
	var sMSISDN = Inputs.GetProperty(""MSISDN"");
	var sVoucherId = """";
	
	with(sVoucherBC){
		ClearToQuery();
		SetViewMode(AllView);
		SetSearchSpec(""STC MSISDN"",sMSISDN);
		SetSortSpec(""Created(DESCENDING)"");
		ExecuteQuery(ForwardOnly);
		var IsVoucherRec = FirstRecord();
		if(IsVoucherRec){
			sVoucherId = GetFieldValue(""Id"");
		}
	}//endwith sVoucherBC	
	Outputs.SetProperty(""VoucherId"",sVoucherId);
		
	return CancelOperation;
}
function QueryLOVValues(Inputs,Outputs)
{
	//Query LOV Values and Return LOW value.
	var AppObj = TheApplication();
	var sListBO = AppObj.GetBusObject(""List Of Values"");
	var sListBC = sListBO.GetBusComp(""List Of Values"");
	var sType =  Inputs.GetProperty(""Type"");
	var sLIC = 	Inputs.GetProperty(""LIC"");
	var sDiscAmount = """";
	
	with(sListBC){
	   ActivateField(""Type"");    //Type
	   ActivateField(""Value"");   //Display Value
	   ActivateField(""Name"");    //Language Independent Code
	   ActivateField(""High"");
	   ActivateField(""Low"");
	   ActivateField(""Description"");// Description
	   ClearToQuery();
	   SetViewMode(AllView);  
	   SetSearchSpec(""Type"",sType);
	   SetSearchSpec(""Name"",sLIC);        
	   ExecuteQuery(ForwardOnly);
	   var isRecord = FirstRecord();
	   if(isRecord){
	   	sDiscAmount =GetFieldValue(""Low"");
	   }
	 }//withlistbc	 
	 Outputs.SetProperty(""DiscountPrice"",sDiscAmount);
	 
	return CancelOperation;
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""QueryLOVValues""){
		QueryLOVValues(Inputs,Outputs);
		return CancelOperation;
	}
	if(MethodName == ""CheckVoucherRec""){
		CheckVoucherRec(Inputs,Outputs);
		return CancelOperation;
	}
	if(MethodName == ""CheckBTLRec""){
		CheckBTLRec(Inputs,Outputs);
		return CancelOperation;
	}
	return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""BarcodeConvert"")
	{
		var BarcodeString = Inputs.GetProperty(""BarcodeString"");
		var MSISDN = parseInt(BarcodeString,""16""); 
		Outputs.SetProperty(""MSISDN"",MSISDN);
		return (CancelOperation);
	}
	return (ContinueOperation);
}
function CheckContactId(Inputs)
{
var ContactId = Inputs.GetProperty(""PrimaryContactId"");
var App = TheApplication();
var ContactBO = App.GetBusObject(""Contact"");
var ContactBC = ContactBO.GetBusComp(""Contact"");
with(ContactBC)
{
	ActivateField(""STC ID Type"");
	SetViewMode(AllView);
	ClearToQuery();
	SetSearchSpec(""Id"",ContactId);
	ExecuteQuery(ForwardOnly);
	var Contactrec = FirstRecord();
	
	if(Contactrec)
	{
		var IDType = GetFieldValue(""STC ID Type"");
		
		if(IDType == ""Employee Id"" || IDType == """" || IDType == null)
		{
			App.RaiseErrorText(""Please enter the relative address details and contact details  with CPR Id and make it as primary"");
		}
	}
	}
}
"//If Customer Segment in Employees or Contractor and count of Billing Account for Employee and Relative Bill Account Segment is as per rule then allow the //change of Bill Account Segment. No restriction for setting the Bill Account Segment to Standard.

function FieldValidations(Inputs, Outputs)
{
 try
 {
  var vBillAccId = Inputs.GetProperty(""BillAccId"");
  var vFieldName = Inputs.GetProperty(""FieldName"");
  var vFieldValue = Inputs.GetProperty(""FieldValue"");
  var ContactId = """"; // changes made for adding relative contact Details
  var vCreditScoreChange = ""N"";
    
  var vCustSegment = """";
  var vParentAccId = """";
  //var vBillAccSegment = """";
  var vBillAccCnt = """"
  var vOccupation = """";
  
  //-->Start--Validation for Customer Segment equal to Employees and count of billing account with Bill Segment Employee must be zero
  if (vFieldName == ""STC Billing Acc Segment"" && vFieldValue == ""Employee"")
  {
  var vSTCBillAccBO = TheApplication().GetBusObject(""STC Billing Account"");
  var vBillAccBC = vSTCBillAccBO.GetBusComp(""CUT Invoice Sub Accounts"");
  with(vBillAccBC)
   {
    ActivateField(""STC Contract Category"");
    ActivateField(""Credit Score"");
    ActivateField(""STC Billing Acc Segment"");
    ActivateField(""Parent Account Id"");
    ActivateField(""Occupation"");
    SetViewMode(AllView);
    ClearToQuery();
    SetSearchSpec(""Id"", vBillAccId);
    ExecuteQuery(ForwardOnly);
    
    if (FirstRecord())
    {
     vCustSegment = GetFieldValue(""STC Contract Category"");
     vParentAccId = GetFieldValue(""Parent Account Id"");
     vOccupation = GetFieldValue(""Occupation"");
     Inputs.SetProperty(""ParentAccId"", vParentAccId);
     //vBillAccSegment = GetFieldValue(""STC Billing Acc Segment"");
     vBillAccCnt = GetBillAccCount(Inputs);
     vBillAccCnt = ToNumber(vBillAccCnt);
     if (!((vCustSegment == ""Employees"" || vCustSegment == ""Contractor"") && vBillAccCnt == 0))
     TheApplication().RaiseErrorText(""Only one employee billing account is allowed for employee plan"");
     else
     {
      vCreditScoreChange = ""Y"";
      Inputs.SetProperty(""vOccupation"", vOccupation);
      GetCreditScore(Inputs,Outputs);
      Outputs.SetProperty(""vCreditScoreChange"", vCreditScoreChange);
      //WriteRecord();
     }
    }
   }//end with(vBillAccBC)
  } //end of if (vFieldName == ""STC Billing Acc Segment"" && vFieldValue == ""Employee"")
  //-->End--Validation for Customer Segment equal to Employees and count of billing account with Bill Segment Employee must be zero
  //-->Start--Validation for Customer Segment equal to Employees and count of billing account with Bill Segment Relative must be less than or equal to 5
  else if (vFieldName == ""STC Billing Acc Segment"" && vFieldValue == ""Relative"")
  {
   var STCBillAccBO = TheApplication().GetBusObject(""STC Billing Account"");
   var BillAccBC = STCBillAccBO.GetBusComp(""CUT Invoice Sub Accounts"");
   with(BillAccBC)
   {
    ActivateField(""STC Contract Category"");
    ActivateField(""Credit Score"");
    ActivateField(""STC Billing Acc Segment"");
    ActivateField(""Parent Account Id"");
    ActivateField(""Occupation"");
    ActivateField(""Primary Contact Id"");
    SetViewMode(AllView);
    ClearToQuery();
    SetSearchSpec(""Id"", vBillAccId);
    ExecuteQuery(ForwardOnly);
    
    if (FirstRecord())
    {
     vCustSegment = GetFieldValue(""STC Contract Category"");
     vParentAccId = GetFieldValue(""Parent Account Id"");
     vOccupation = GetFieldValue(""Occupation"");
     ContactId = GetFieldValue(""Primary Contact Id"");     
     Inputs.SetProperty(""ParentAccId"", vParentAccId);
     //vBillAccSegment = GetFieldValue(""STC Billing Acc Segment"");
    Inputs.SetProperty(""PrimaryContactId"", ContactId);
    CheckContactId(Inputs);
     vBillAccCnt = GetBillAccCount(Inputs);
     vBillAccCnt = ToNumber(vBillAccCnt);
     if (!((vCustSegment == ""Employees"" || vCustSegment == ""Contractor"") && vBillAccCnt < 5))
     TheApplication().RaiseErrorText(""Only five relative plans are allowed under one employee"");
     else
     {
      vCreditScoreChange = ""Y"";
      Inputs.SetProperty(""vOccupation"", vOccupation);
      GetCreditScore(Inputs,Outputs);
      Outputs.SetProperty(""vCreditScoreChange"", vCreditScoreChange);
            if(vCustSegment == ""Employees""){
      Outputs.SetProperty(""vBillSegmentRelative"", ""Y"");
      }
      //WriteRecord();
     }
    }
   }//end with(vBillAccBC)
  }// end of else if
  //-->End--Validation for Customer Segment equal to Employees and count of billing account with Bill Segment Relative must be less than or equal to 5
  //-->Start--When setting Bill Segment to Standard just update the credit limit back on bill account
  else if (vFieldName == ""STC Billing Acc Segment"" && vFieldValue == ""Standard"")
  {
   var BOBillAcc = TheApplication().GetBusObject(""STC Billing Account"");
   var BCBillAcc = BOBillAcc.GetBusComp(""CUT Invoice Sub Accounts"");
   with(BCBillAcc)
   {
    //ActivateField(""STC Contract Category"");
    ActivateField(""Credit Score"");
    ActivateField(""STC Billing Acc Segment"");
    //ActivateField(""Parent Account Id"");
    ActivateField(""Occupation"");
    SetViewMode(AllView);
    ClearToQuery();
    SetSearchSpec(""Id"", vBillAccId);
    ExecuteQuery(ForwardOnly);
    
    if (FirstRecord())
    {
     //vCustSegment = GetFieldValue(""STC Contract Category"");
     //vParentAccId = GetFieldValue(""Parent Account Id"");
     vOccupation = GetFieldValue(""Occupation"");
     vCreditScoreChange = ""Y"";
     Inputs.SetProperty(""vOccupation"", vOccupation);
     GetCreditScore(Inputs,Outputs);
     Outputs.SetProperty(""vCreditScoreChange"", vCreditScoreChange);
    }
   }//end with(vBillAccBC)
  }// end of else if
  //-->End--When setting Bill Segment to Standard just update the credit limit back on bill account
 }//end of try
 
 catch(e)
 {
  throw(e);
 }
 
 finally
 {
  vFieldName = null;
 }
}
function GetBillAccCount(Inputs)
{

  var reccnt = ""0"";
  var vBillId = Inputs.GetProperty(""BillAccId"");
  var vParAccId = Inputs.GetProperty(""ParentAccId"");
  var vBillSegment = Inputs.GetProperty(""FieldValue"");
  var BillAccBO = TheApplication().GetBusObject(""STC Billing Account"");
  var BillAccBC = BillAccBO.GetBusComp(""CUT Invoice Sub Accounts"");
  var SANBC = BillAccBO.GetBusComp(""CUT Service Sub Accounts"");
  with(BillAccBC)
   {
    //ActivateField(""Parent Account Id"");
    SetViewMode(AllView);
    ClearToQuery();
    var searchstr = ""[Parent Account Id] = '"" + vParAccId + ""' AND [STC Billing Acc Segment] = '"" + vBillSegment + ""'"";
    SetSearchExpr(searchstr);
    ExecuteQuery(ForwardOnly);
    reccnt = CountRecords();
    var BanRec = FirstRecord();
    while(BanRec)
    {
    	var browid = GetFieldValue(""Id"");
    	
    	with(SANBC)
    	{
    			ActivateField(""Account Status"");
				SetViewMode(AllView);
				ClearToQuery();
			//	var SANsearchstr = ""[Parent Account Id] = '"" + browid + ""' AND [Account Status] <> 'Terminated'"";
			//	SetSearchExpr(SANsearchstr);
				SetSearchSpec(""Parent Account Id"", browid);
				ExecuteQuery(ForwardOnly);
				var sanrec = FirstRecord();
				if(sanrec)
				{
				var stat = GetFieldValue(""Account Status"");
				if(stat == ""Terminated"")
				{
				reccnt = ToNumber(reccnt - 1);	
				
				}
				}
    	}
    BanRec = NextRecord();	
    	
    }
    
    //reccnt = CountRecords();
   }//end with(BillAccBC)
  return (reccnt);

}
function GetCreditScore(Inputs,Outputs)
{
 try
 {
  var vOccupation = Inputs.GetProperty(""vOccupation"");
  var vBillSeg = Inputs.GetProperty(""FieldValue"");
  var vEmpCreditLimit = """";
  var vRelCreditLimit = """";
  var vDefaultCreditLmt = """";
  var STCCreditLimitBO = TheApplication().GetBusObject(""STC Credit Limit"");
  var STCCreditLimitBC = STCCreditLimitBO.GetBusComp(""STC Credit Limit"");
  with(STCCreditLimitBC)
   {
    ActivateField(""Employee Credit Limit"");
    ActivateField(""Relative Credit Limit"");
    ActivateField(""Default Credit Limit"");
    SetViewMode(AllView);
    ClearToQuery();
    var searchstr = ""[Current Occupation] = '"" + vOccupation + ""' AND [Customer Class] = 'Bahraini'"";
    SetSearchExpr(searchstr);
    ExecuteQuery(ForwardOnly);
    
    if (FirstRecord())
    {
     vEmpCreditLimit = GetFieldValue(""Employee Credit Limit"");
     vRelCreditLimit = GetFieldValue(""Relative Credit Limit"");
     vDefaultCreditLmt = GetFieldValue(""Default Credit Limit"");
    }
   }//end with(STCCreditLimitBC)
   if(vBillSeg == ""Employee"")
    Outputs.SetProperty(""CreditLimit"", vEmpCreditLimit);
   else if(vBillSeg == ""Relative"")
    Outputs.SetProperty(""CreditLimit"", vRelCreditLimit);
   else //for Standard Bill Segment
   {
    Outputs.SetProperty(""CreditLimit"", vDefaultCreditLmt);
   }
    
 }//end of try
 
 catch(e)
 {
  throw(e);
 }
 
 finally
 {
  STCCreditLimitBC = null;
  STCCreditLimitBO = null;
 }
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if (MethodName == ""FieldValidations"")
	{
		FieldValidations(Inputs, Outputs);
		return (CancelOperation);
	}
	if (MethodName == ""ValidateChildEmployee"")
	{
		ValidateChildEmployee(Inputs, Outputs);
		return (CancelOperation);
	}
 return (ContinueOperation);
}
function ValidateChildEmployee(Inputs, Outputs)
{
	try
	{
		var recCount=0, isRecord=false, vSearchExpr="""", i=0;
		var vPriority="""", vPriorityCount=0, vPriorityArr = new Array();
		var vMSISDN="""", vMSISDNCount=0;
		var vParAccId = Inputs.GetProperty(""ParentBillAccId"");
		var BillAccBO = TheApplication().GetBusObject(""STC Billing Account"");
		//var BillAccBC = BillAccBO.GetBusComp(""CUT Invoice Sub Accounts"");
		var ChildEmpBC = BillAccBO.GetBusComp(""STC Child Employee Records BC"");
		var vMSISDNPS = TheApplication().NewPropertySet();

		with(Outputs){
			SetProperty(""RecordCount"", recCount);
			SetProperty(""ErrorCode"", ""0"");
			SetProperty(""ErrorMessage"", ""Success"");
		}

		with(ChildEmpBC)
		{
			ActivateField(""Parent Billing Account Id"");
			ActivateField(""Billing Account Id"");
			ActivateField(""Status"");
			ActivateField(""Priority"");
			ActivateField(""MSISDN"");
			SetViewMode(AllView);
			ClearToQuery();
			vSearchExpr = ""[Parent Billing Account Id]='""+vParAccId+""' AND ([Status]='In Progress' OR [Status]='Active')"";
			SetSearchExpr(vSearchExpr);
			ExecuteQuery(ForwardOnly);
			recCount = CountRecords();
			isRecord = FirstRecord();

			for (i=0; i <= recCount; i++)
			{
				vPriorityArr[i]=0;
			}

			while(isRecord){
				vPriority = ToNumber(GetFieldValue(""Priority""));
				vMSISDN = GetFieldValue(""MSISDN"");
				if (vPriority == null || vPriority == 0)
				{
					with(Outputs)
					{
						SetProperty(""ErrorCode"", ""EMP_BEN_PRIORITY_ERR1"");
						SetProperty(""ErrorMessage"", ""Please select Priority value for all Employee Child lines!"");
					}
				}
				vPriorityCount = vPriorityArr[vPriority]+1;
				vPriorityArr[vPriority] = vPriorityCount;

				vMSISDNCount = ToNumber(vMSISDNPS.GetProperty(vMSISDN));
				vMSISDNPS.SetProperty(vMSISDN, vMSISDNCount+1);

				if (vMSISDNCount >= 1)
				{
					with(Outputs)
					{
						SetProperty(""ErrorCode"", vMSISDN);
						SetProperty(""ErrorMessage"", ""DUPLICATE ERROR: Please select unique MSISDN for each Employee Child line!"");
					}
				}

				isRecord = NextRecord();
			}//while(isRecord)

			Outputs.SetProperty(""RecordCount"", recCount);
			for(i=0; i < recCount; i++)
			{
				vPriorityCount = vPriorityArr[i];
				if(vPriorityCount > 1)
				{
					with(Outputs){
						SetProperty(""ErrorCode"", vPriorityCount);
						SetProperty(""ErrorMessage"", ""Please select unique Priority value for Employee Child lines!"");
					}
				}                                                            
			}

		}//end with(BillAccBC)
		return (CancelOperation);
	}
	catch(e)
	{
		throw(e);
	}

	finally
	{
		vMSISDNPS = null;
		ChildEmpBC = null;
		//BillAccBC = null;
		BillAccBO = null;
	}
}
function GetStatus(Inputs, Outputs)
{
	
	try
	{
		var SubsAccountId = Inputs.GetProperty(""BillingParId"");
	//	var BillAccountId = Inputs.GetProperty(""BillingParId"");
	
		var ParAccountId;
		var AccountArray =  new Array();
		var boAccount;
		var bcBillAccount;
		var bcSubsAccount;
		var bcAccount;
		var SearchSpec;
		
		boAccount = TheApplication().GetBusObject(""STC Service Account"");
		//bcBillAccount = boAccount.GetBusComp(""CUT Invoice Sub Accounts"");	
		bcSubsAccount = boAccount.GetBusComp(""CUT Service Sub Accounts"");	
		
		with(bcSubsAccount)
		{
			SetViewMode(AllView);
			ActivateField(""Parent Account Id"");
			ActivateField(""Account Status"");
			ClearToQuery();
			SetSearchSpec(""Parent Account Id"", SubsAccountId);
			ExecuteQuery(ForwardOnly);
			var isRecord = FirstRecord();	
			var count=0;
			var status=null;
			var lFlag = ""Y"";
			while (isRecord)
			{

				count=count+1;
				status = GetFieldValue(""Account Status"");
				
				if(status == ""Active"")
				{
					lFlag = ""N"";
					break;
				}
				
				isRecord = NextRecord();

			}
				
			

		}
		
		Outputs.SetProperty(""Flag"",lFlag);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcBillAccount = null;
		bcSubsAccount = null;
	}

		
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	var iReturn;
	
	try  
	{
		iReturn = ContinueOperation;
		switch (MethodName)
		{
			case ""GetStatus"":
			 	GetStatus(Inputs, Outputs);
				iReturn = CancelOperation;
				break;
							    								 
			default: 
				iReturn = ContinueOperation;
				
		} //switch
		return (iReturn);
	} 
	catch (e)
	{	
		
	}
}
"var vErrorMessage = """";
var vErrorCode = """";"
function Import_Bulk_File( Inputs , Outputs)
{
   try
   {
      var vInputFile      = """";
      var vReadFromFile   = """";
      var vBulkDataArray  = """";
      
      var boBulkBO         =  TheApplication().GetBusObject(""STC Apps Query BO"");
      var bcBulkBC        =  boBulkBO.GetBusComp(""STC Apps Query BC"");
       
      bcBulkBC.SetViewMode(AllView); 
      bcBulkBC.ActivateField(""Product Id"");
      bcBulkBC.ActivateField(""Add Part Number"");
      bcBulkBC.ActivateField(""Add Prodcut Name"");
      bcBulkBC.ActivateField(""Pre Addon/Post Addon"");
      bcBulkBC.ActivateField(""Add Activate"");
      bcBulkBC.ActivateField(""Add On Type"");
      bcBulkBC.ActivateField(""Add One"");
       bcBulkBC.ActivateField(""Price"");
        bcBulkBC.ActivateField(""Parent Plan Name"");
         bcBulkBC.ActivateField(""STC Add Category"");
          bcBulkBC.ActivateField(""STC Add Display Name"");
           bcBulkBC.ActivateField(""STC Add Renew"");
      //bcBulkBC.ActivateField(""Status"");           
  var vFileName   = Inputs.GetProperty(""FileName"");
  var vFileType     = ToString(Inputs.GetProperty(""FileType""));
  vFileType       = Clib.strlwr(vFileType);
        
      if( vFileType != ""csv"")
      {
         TheApplication().RaiseErrorText(""Please check the File Type , It should be :  FileName.CSV"");
      }
      //vFileImportBC.SetFieldValue(""Import Type"",""Notes"");
      //vFileImportBC.WriteRecord();
      vInputFile     = Clib.fopen(vFileName , ""rt"");       
      vReadFromFile  = Clib.fgets(vInputFile);      
      while((vReadFromFile != null) && (vReadFromFile.length > 1)) 
      {
      
        vBulkDataArray = vReadFromFile.split("","");
          bcBulkBC.InvokeMethod(""SetAdminMode"", ""TRUE"");  
      with(bcBulkBC)
     {    
          bcBulkBC.NewRecord(NewAfter);  
          var objPickBusComp = GetPicklistBusComp(""Add One"");
              with(objPickBusComp)
         {
       SetViewMode(AllView);
       ClearToQuery();
       SetSearchSpec(""Id"", vBulkDataArray[0]);
       ExecuteQuery(ForwardOnly);
        if( FirstRecord() )
        {
        Pick();
        }
         }    
      var objPickBusComp = GetPicklistBusComp(""Product Id"");
      with(objPickBusComp)
         {
       SetViewMode(AllView);
       ClearToQuery();
       SetSearchSpec(""Product Id"", vBulkDataArray[1]);
       ExecuteQuery(ForwardOnly);
        if( FirstRecord() )
        {
        Pick();
        }
         }
    //}           
          bcBulkBC.SetFieldValue(""Add One"" ,vBulkDataArray[0]);//row_id of parent
          bcBulkBC.SetFieldValue(""Product Id""     ,vBulkDataArray[1]);//productid
          bcBulkBC.SetFieldValue(""Price"",vBulkDataArray[2]);//price
          //bcBulkBC.SetFieldValue(""Pre Addon/Post Addon"",vBulkDataArray[3]);
          bcBulkBC.SetFieldValue(""Parent Plan Name"",vBulkDataArray[3]);//parentPlan                   
          var temp = vBulkDataArray[3].length;    
          bcBulkBC.SetFieldValue(""Parent Plan Name"" ,vBulkDataArray[3].substr(0 ,(temp-1))); 
          bcBulkBC.WriteRecord(); 
          }                   
          vReadFromFile = Clib.fgets(vInputFile);           
      }
   }
   catch(m)
   {
      vErrorMessage = m.toString();
      vErrorCode    = m.errCode;
   }
 
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{

if( MethodName == ""Import"")
    {
      Import_Bulk_File( Inputs, Outputs );
      return(CancelOperation);
    }
 return (ContinueOperation);
}
"var vErrorMessage = """";
var vErrorCode    = """";"
function Import_Bulk_File( Inputs , Outputs)
{
	// 13/5/2014 ANS: Code optimized and updated.
   try
   {
     
      var vInputFile      = """";
      var vReadFromFile   = """";
      var vBulkDataArray  = """"; 
      var ImportFlg=TheApplication().SetProfileAttr(""ImportFlg"",""Y"");           
      var vBulkBO: BusObject =  TheApplication().GetBusObject(""STC CPR Black List BO"");
      var vBulkBC: BusComp = vBulkBO.GetBusComp(""STC CPR BlackList BC"");      
      vBulkBC.SetViewMode(AllView);
      vBulkBC.InvokeMethod(""SetAdminMode"",""TRUE"");
      vBulkBC.ActivateField(""CPR Number"");	
      vBulkBC.ActivateField(""Import Status"");
      vBulkBC.ActivateField(""Black Listed""); 
      vBulkBC.ActivateField(""Comment"");
      vBulkBC.ActivateField(""STC Archive Flag"");      
	var vFileName   = Inputs.GetProperty(""FileName"");
	var vFileType     = ToString(Inputs.GetProperty(""FileType""));
	vFileType       = Clib.strlwr(vFileType);	  
	if( vFileType != ""csv"")
	{
	   TheApplication().RaiseErrorText(""Please check the File Type , Is should be :  FileName.CSV"");
	}
	vInputFile     = Clib.fopen(vFileName , ""rt"");       
	vReadFromFile  = Clib.fgets(vInputFile);      
	while((vReadFromFile != null) && (vReadFromFile.length > 1))
	{	
	    vBulkDataArray = vReadFromFile.split("","");
	    vBulkBC.InvokeMethod(""SetAdminMode"", ""TRUE""); 	 
	    with(vBulkBC)
	    {	    
	    	var spec1 = """";
			ClearToQuery();		
			spec1 = ""[CPR Number]= '"" + vBulkDataArray[0] + ""' AND ([Black Listed]='ToBeBlacklisted')"";
			SetSearchExpr(spec1);
			ExecuteQuery(ForwardOnly);
			var isAccRecord = FirstRecord();
			if(isAccRecord)
			{
				NewRecord(NewAfter);
			    SetFieldValue(""CPR Number"",vBulkDataArray[0]);
			    SetFieldValue(""Black Listed"" ,""Failed"");
			    SetFieldValue(""Import Status"" ,""Duplicate"");				    
			    WriteRecord();
			}
			else
			{  	
		        var spec2 = """";
				ClearToQuery();		
				spec2 = ""[CPR Number]= '"" + vBulkDataArray[0] + ""' AND ([Black Listed]='Blacklisted' OR ([Black Listed]='Unblacklisted' AND [STC Archive Flag] = 'N'))"";
				SetSearchExpr(spec2);
				ExecuteQuery(ForwardOnly);
				var isAccRecord2 = FirstRecord();
				if(isAccRecord2)
				{				   
				    var vBlkStatus = GetFieldValue(""Black Listed"");
				    var vId = GetFieldValue(""Id"");
				    if(vBlkStatus == ""Blacklisted"")
				    {  
				        NewRecord(NewAfter);
					    SetFieldValue(""CPR Number"",vBulkDataArray[0]);
					    SetFieldValue(""Black Listed"" ,""Failed"");
					    SetFieldValue(""Import Status"" ,""Duplicate"");				    
					    WriteRecord();
				     }
				     else if(vBlkStatus == ""Unblacklisted"")				    
				     {
				     	SetFieldValue(""STC Archive Flag"",""Y"");
				     	WriteRecord();
					    NewRecord(NewAfter);
					    SetFieldValue(""CPR Number"",vBulkDataArray[0]);
					    SetFieldValue(""Black Listed"" ,""ToBeBlacklisted"");
						SetFieldValue(""Import Status"" ,""Success"");					
						WriteRecord();
					}
				}				
				else
				{
					NewRecord(NewAfter);
				    SetFieldValue(""CPR Number"",vBulkDataArray[0]);
				    SetFieldValue(""Black Listed"" ,""ToBeBlacklisted"");
				    SetFieldValue(""Import Status"" ,""Success"");			  
				    WriteRecord();
				}
			}		
		}	           
		 vReadFromFile = Clib.fgets(vInputFile);
      }//End While
      ImportFlg=TheApplication().SetProfileAttr(""ImportFlg"","""");
   }//try
   
   catch(m)
   { 
      vErrorMessage = m.toString();
      vErrorCode    = m.errCode;      
   }
   finally
   {
   	vBulkBC = null;
   	vBulkBC = null;
   }
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{

    if( MethodName == ""Import"")
    {
      Import_Bulk_File( Inputs, Outputs );
      return(CancelOperation);
    }
 return (ContinueOperation);
}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
    }
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}





function Resubmit()
{
	var MRow="""";
	var MRowId="""";
	var Product="""";
	var Action="""";
	
	/*	WIPRO-Upgrade-03.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_COMP_PROCESS"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-03.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/siebelfs/Order.csv"", ""rt"");
	
	//var file=Clib.fopen(""C:\Order.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
        {

			MRow = (Clib.fgets(file));  
			MRow = trim(MRow);
			var len = MRow.length;
			var ind1 = MRow.indexOf("","");
			MRowId=MRow.substring(0,ind1);
			MRow = MRow.substring(ind1+1,len);
			var ind2 = MRow .indexOf("","");
			Product = MRow .substring(0,ind2);
			//Action = MRow.substring(ind2+1,len);
			 
			//TheApplication().RaiseErrorText(NetPrice);

			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			if( Product != '' || Product != null)
			{
				MInputs.SetProperty(""ProcessName"",""STC Bulk Order Submit for Stuck orders"");
				MInputs.SetProperty(""EntityId"",MRowId);    
				MInputs.SetProperty(""ChildEntityId"",Product);
				//MInputs.SetProperty(""Action"",Action);

				var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

				MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

			}
        }
    }
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null;
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Resubmit"")
	{
		Resubmit();
		return(CancelOperation);    
	}
	else
    {    
		return(ContinueOperation);
	}
}
function trim(s) {
var r=/\b(.*)\b/.exec(s);
return (r==null)?"""":r[1];
}





function Resubmit()
{
	var MRow="""";
	var MRowId="""";
	var Product="""";
	var Action="""";
	
	/*	WIPRO-Upgrade-03.05.2016-TSINGHALC - Gets the Filename along with Filepath from LOV Description	*/
	
	var svc = TheApplication().GetService(""STC Get Filename"");
	var Inputs = TheApplication().NewPropertySet();
	var Outputs = TheApplication().NewPropertySet();
	Inputs.SetProperty(""Type"",""STC_FILE_NAME"");
	Inputs.SetProperty(""LIC"",""STC_BULK_COMP_PRO_OLD"");
	svc.InvokeMethod(""STC Get LOV Desc"", Inputs, Outputs);
	var filepath = Outputs.GetProperty(""Description"");
	
	var file = Clib.fopen(filepath, ""rt"");
	
	/* WIPRO-Upgrade-03.05.2016-TSINGHALC - Commented the below line as the filename is received from the above lines by invoking the Generic BS */
	
	//var file=Clib.fopen(""/crmapp/Order.csv"", ""rt"");
	//var file=Clib.fopen(""C:\Order.csv"", ""rt"");

	if (file==null)
    {
		TheApplication().RaiseErrorText(""Error in opening the file"");
    }
	else
    {
		while(!Clib.feof(file))
        {

			MRow = (Clib.fgets(file));  
			MRow = trim(MRow);
			var len = MRow.length;
			var ind1 = MRow.indexOf("","");
			MRowId=MRow.substring(0,ind1);
			MRow = MRow.substring(ind1+1,len);
			var ind2 = MRow .indexOf("","");
			Product = MRow .substring(0,ind2);
			//Action = MRow.substring(ind2+1,len);
			 
			//TheApplication().RaiseErrorText(NetPrice);

			var MInputs = TheApplication().NewPropertySet();
			var MOutputs = TheApplication().NewPropertySet();

			if( Product != '' || Product != null)
			{
				MInputs.SetProperty(""ProcessName"",""STC Bulk Order Submit for Stuck orders"");
				MInputs.SetProperty(""EntityId"",MRowId);    
				MInputs.SetProperty(""ChildEntityId"",Product);
				//MInputs.SetProperty(""Action"",Action);

				var MWorkflowProc = TheApplication().GetService(""Workflow Process Manager"");

				MWorkflowProc.InvokeMethod(""RunProcess"", MInputs, MOutputs);

			}
        }
    }
	MWorkflowProc=null;
	MOutputs=null;
	MInputs=null;
	MRowId=null;
	file = null;
	filepath = null;
	Outputs = null;
	Inputs = null;
	svc = null;

}
"//Your public declarations go here... 
	var vCANId;
	var vBANId;
	var sLoginId;
	var svc;
	var AccName = """";
	var BulkCount = 0;
	var BulkRequestId= """";
	var BulkRequestNumber = """";
	var vOrderType;
	var vBulkOrdFileName;
	var vErrorMessage = """";
	var vErrorCode    = """";
	var vServiceAccId;
	var vPackage;
	var vRootAssetId;
	var vMSISDN;
	var vSIM;
	var oAccountBO = TheApplication().GetBusObject(""Account"");
	var oAccountBC = oAccountBO.GetBusComp(""Account"");
	var oBulkReqBO = TheApplication().GetBusObject(""ABO Bulk Request"");
	var oBulkReqBC = oBulkReqBO.GetBusComp(""ABO Bulk Request Header"");
	var psSiebelMsg :PropertySet = TheApplication().NewPropertySet();"
"/*..................................................
Author: Nilesh Dhage
Functionality: Importing Bulk File
Date: 17/07/2016
Comments: 
..................................................*/

function ImportBulkData( Inputs, Outputs)
{
	var vInputFile      = """";
	var vReadFromFile   = """";
	var vBulkDataArray  = new Array; 
	var Out = TheApplication().NewPropertySet();


    try
    {
		var vFileName = Inputs.GetProperty(""FileName"");
		var vFileType = ToString(Inputs.GetProperty(""FileType""));
		vFileType = Clib.strlwr(vFileType);
		sLoginId = TheApplication().LoginId();
	
   
		if( vFileType != ""csv"")
		{
			TheApplication().RaiseErrorText(""Please check the File Type , Is should be :  FileName.CSV"");
		}
		vInputFile     = Clib.fopen(vFileName , ""r"");       
		vReadFromFile  = Clib.fgets(vInputFile); 

		var Header = ""Order"";

		var psSiebelActSetMsg:PropertySet = TheApplication().NewPropertySet();
		var psListOfActionSet:PropertySet = TheApplication().NewPropertySet();
		
		//Bulk Request Action Set configuration
		psSiebelActSetMsg.SetType(""SiebelMessage"");
		psSiebelActSetMsg.SetProperty(""MessageId"", ""1-4T7UTH"");
		psSiebelActSetMsg.SetProperty(""MessageType"", ""Integration Object"");
		psSiebelActSetMsg.SetProperty(""IntObjectName"", ""ABO Bulk Action Set IO"");
		psSiebelActSetMsg.SetProperty(""IntObjectFormat"", ""Siebel Hierarchical"");
		psListOfActionSet.SetType(""ListOfABO Bulk Action Set IO"");
		psSiebelActSetMsg.AddChild(psListOfActionSet);
	
			     
		while(!Clib.feof(vInputFile))
		{
			while((vReadFromFile != null) && (vReadFromFile.length > 0))
			{	
				var MRow = vReadFromFile; 
				var ind1 = MRow.indexOf("","");
				vBulkDataArray = MRow.split("","");
				var ArrLen = vBulkDataArray.length;
				for(var i=0; i<ArrLen; i++)  
				{
					vBulkDataArray[i] = trim(vBulkDataArray[i]);
				}
				vBulkOrdFileName = vBulkDataArray[0];
				vOrderType = vBulkOrdFileName.toUpperCase();
				var FileLen = vOrderType.length;
				var ind2 = vOrderType.indexOf(""K"") + 2;
				vOrderType = vOrderType.substring(ind2,FileLen);
				ind2 = vOrderType.indexOf(""_"");
				vOrderType = vOrderType.substring(0,ind2);
				ToProperCase();
				switch(vOrderType) 
				{
					case ""New"":
					NewBulkOrder(vBulkDataArray,ArrLen,psListOfActionSet,Header);
					break;
				
					case ""Modify"":
					ModifyBulkOrder(vBulkDataArray,ArrLen,psListOfActionSet,Header);
					break;
					
					case ""Suspend"":
					case ""Resume"":
					case ""Terminate"":
					SupendResumeTerminateBulkOrder(vBulkDataArray,ArrLen,psListOfActionSet,Header);
					break;
					
					
					
					default: return(CancelOperation);
				}
				
				vReadFromFile = Clib.fgets(vInputFile);
				BulkCount++;
			}//	while(ReadFromFile)  
		}//End While
		
				
			var wfBS = TheApplication().GetService(""EAI Siebel Adapter"");
			var InP = TheApplication().NewPropertySet();
			var OutP = TheApplication().NewPropertySet();
			var FaultMsg = TheApplication().NewPropertySet();
			InP.SetProperty(""ObjectLevelTransactions"", ""true"");
			InP.SetProperty(""StatusObject"", ""true"");
			InP.AddChild(psSiebelActSetMsg);
			wfBS.InvokeMethod(""Upsert"",InP,OutP);

			var FullMsg = OutP.GetChild(0).GetChild(0);
			var ChildCount = FullMsg.GetChildCount();
			var RecordCount = BulkCount - ChildCount;
			
			
			for (i = 0; i < ChildCount; i++)
			{
				var ActSetChildCount = FullMsg.GetChild(i).GetChildCount();
				if(ActSetChildCount >= 1)
				{
					var ActionSetChild = FullMsg.GetChild(i);
					var ErrMsg = ActionSetChild.GetProperty(""ErrorMessage"");
					var ErrCustomerId = ActionSetChild.GetProperty(""Customer Account Id"");
					var ErrBillAccId = ActionSetChild.GetProperty(""Billing Account Id"");
										
						var ActionsChild = ActionSetChild.GetChild(0).GetChild(0);
						var ActionSetChildCount = ActionSetChild.GetChild(0).GetChildCount();
	
						var ErrPackage = ActionsChild.GetProperty(""Base Product Name"");
						if(ActionSetChildCount == 1)
						{
							var InstanceChild = ActionSetChild.GetChild(1).GetChild(0);
							var ErrMSISDN = InstanceChild.GetProperty(""Service Id"");
						}
						var SiebMsgRequest = ErrCustomerId + "","" + ErrBillAccId +  "","" + ErrPackage + "","" + ErrMSISDN;
						var ErrHandlerBS = TheApplication().GetService(""STC Generic Error Handler""); 
						var HandlerIn = TheApplication().NewPropertySet();
						var HandlerOut = TheApplication().NewPropertySet();
						HandlerIn.SetProperty(""Error Code"", BulkRequestId);
						HandlerIn.SetProperty(""Error Message"", ErrMsg);
						HandlerIn.SetProperty(""Object Name"", ""STC Bulk File Import BS"");
						HandlerIn.SetProperty(""Object Type"", ""Buisness Service"");
						HandlerIn.SetProperty(""Siebel Message Request Text"", SiebMsgRequest);
						HandlerIn.SetProperty(""Siebel Message Response Text"", """");
						ErrHandlerBS.InvokeMethod(""Log Message"", HandlerIn, HandlerOut);
						
				}
								
				
			
	
		}

				

					

   }//try
   
   catch(e)
   { 
		vErrorMessage = e.toString();
		vErrorCode    = e.errCode; 
		LogException(e);
		TheApplication().RaiseErrorText(vErrorMessage);
	  
   }
   finally
   {
		oBulkReqBC = null;
		oAccountBC = null;
		oBulkReqBO = null;
		oAccountBO = null;
		vBulkDataArray = null;
		wfBS = null;
		InP = null;
		OutP = null;
		psSiebelActSetMsg = null;
		HandlerIn = null;
		HandlerOut = null;
		ErrHandlerBS= null;
		psListOfActionSet = null;






			

   }
}
function LogException(e)
{
	var appObj= TheApplication();
  	var Input;
  	var Output;
  	var CallMessageHandler; 
	try
 	{
		  
		  Input = appObj.NewPropertySet();
		  Output = appObj.NewPropertySet();
		  var SiebMsgRequest = vCANId + "","" + vBANId +  "","" + vMSISDN + "","" + vPackage;
		  CallMessageHandler = appObj.GetService(""STC Generic Error Handler""); 
		  Input.SetProperty(""Error Code"", BulkRequestId);
		  Input.SetProperty(""Error Message"", e.errText);
		  Input.SetProperty(""Object Name"", ""STC Bulk File Import BS"");
		  Input.SetProperty(""Object Type"", ""Buisness Service"");
		  Input.SetProperty(""Siebel Message Request Text"", SiebMsgRequest);
		  Input.SetProperty(""Siebel Message Response Text"", """");
		  CallMessageHandler.InvokeMethod(""Log Message"", Input, Output);
 	}
 	catch(e)
 	{
  		
 	}
 	finally
 	{
 
		  CallMessageHandler = null;
		  Output = null;
		  Input = null;
		  appObj = null;
 	}
 	
}
function ModifyBulkOrder(&vBulkDataArray,ArrLen,psListOfActionSet,Header)
{
	try
	{

		var vSeq:Number = 0;
		vMSISDN = vBulkDataArray[1];
		vRootAssetId = vBulkDataArray[2];
		var AddOn;
		var AddOn_ActCode;
		var oSvcAcctBO = TheApplication().GetBusObject(""STC Service Account"");
		var oSubAcctBC = oSvcAcctBO.GetBusComp(""CUT Service Sub Accounts"");
		var oAssetBC = oSvcAcctBO.GetBusComp(""Asset Mgmt - Asset (Order Mgmt)"");
		var strExpr;
		var vSvcName;
		var vSIMNumber:String = """";
		var psListOfActions:PropertySet = TheApplication().NewPropertySet();
		psListOfActions.SetType(""ListOfActions"");
		var psListOfInstance:PropertySet = TheApplication().NewPropertySet();
		psListOfInstance.SetType(""ListOfInstance"");
		var BillProfId="""";

		with(oSubAcctBC)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(""DUNS Number"");
			ActivateField(""Master Account Id"");
			ActivateField(""Parent Account Id"");
			strExpr = ""[DUNS Number] = '""+ vMSISDN +""' AND [Account Status] = 'Active'"";
			SetSearchExpr(strExpr);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				vBANId = GetFieldValue(""Parent Account Id"");
				vCANId = GetFieldValue(""Master Account Id"");
				vServiceAccId = GetFieldValue(""Id"");
				vSvcName = GetFieldValue(""Name"");
				vSIMNumber = GetFieldValue(""STC-ICCID"");
			}
		}
		with(oAccountBC)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(""Id"");
			ActivateField(""Name"");
			SetSearchSpec(""Id"",vCANId);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				AccName = GetFieldValue(""Name"");
			}
		}
		with(oAssetBC)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(""Id"");
			ActivateField(""Product Name"");
			SetSearchSpec(""Id"",vRootAssetId);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				vPackage = GetFieldValue(""Product Name"");
				BillProfId = GetFieldValue(""Billing Profile Id"");
			}
		}
			// Setting Bulk Request Header
		if(Header == ""Order"" && BulkCount == 0)
		{
			with(oBulkReqBC)
			{
				ActivateField(""BRFileName"");
				ActivateField(""Bulk Request Name"");
				ActivateField(""Status"");
				ActivateField(""User Id"");
				ActivateField(""Mode"");
				NewRecord(NewAfter);
				SetFieldValue(""BRFileName"","""");
				SetFieldValue(""Bulk Request Name"",vBulkOrdFileName);
				SetFieldValue(""Status"",""New"");
				SetFieldValue(""Mode"",Header);
				SetFieldValue(""User Id"",sLoginId);
				WriteRecord();
				BulkRequestId = GetFieldValue(""Id"");
				Header = null;

			}
			
			
		}
		
		//setting Action Set
		
		var psActionSet:PropertySet = TheApplication().NewPropertySet();
		
		psActionSet.SetType(""Action Set"");
		var i =1;
		psActionSet.SetProperty(""Id"",i);
		psActionSet.SetProperty(""Customer Account"",AccName);
		psActionSet.SetProperty(""Customer Account Id"",vCANId);
		psActionSet.SetProperty(""Billing Account Id"", vBANId);
		psActionSet.SetProperty(""Service Account Id"",vServiceAccId);
		psActionSet.SetProperty(""Service Account"",vSvcName);
		psActionSet.SetProperty(""Bulk Request Id"",BulkRequestId);
		psActionSet.SetProperty(""Order Type"",vOrderType);
		psActionSet.SetProperty(""SIM Number"",vSIMNumber);
		psActionSet.SetProperty(""Billing Profile Id"",BillProfId);
		psActionSet.SetProperty(""Type"",vOrderType);
		psActionSet.SetProperty(""Sequence"",i+BulkCount);
		psActionSet.SetProperty(""Active Flag"",""Y"");
	//	psActionSet.SetProperty(""Account"",AccName);
		psActionSet.SetProperty(""Child Instance Type"",""Service Id"");
		psActionSet.SetProperty(""Scope"",""Include""); 

		i++;
		
		//Setting Actions
		var vActionsCount = ArrLen-3;
		var a:Number = 3;
		var b:Number = 4
		var Count:Number= 0;
		var ArrVal;
		for(var j=0;j<=vActionsCount;j++)
		{
			var psActions:PropertySet = TheApplication().NewPropertySet();
			AddOn = vBulkDataArray[a];
			AddOn_ActCode = vBulkDataArray[b];
			if(AddOn == ""undefined"" || AddOn_ActCode == ""undefined""||AddOn == null || AddOn == """")
			{
				AddOn = """";
				AddOn_ActCode = """";
			}
			if(a<ArrLen && b<ArrLen && AddOn != """")
			{
				vSeq++;
				psActions.SetType(""Actions"");
				psActions.SetProperty(""Id"",""12""+j);
				psActions.SetProperty(""Sequence"",vSeq);
				psActions.SetProperty(""Base Product Name"",vPackage);
				psActions.SetProperty(""Action Code"",vBulkDataArray[b]);	
				psActions.SetProperty(""Active Flag"",""Y"");
				psActions.SetProperty(""Component Product Name"",vBulkDataArray[a]);
				psActions.SetProperty(""Field Name"","""");
				psActions.SetProperty(""Attribute Name"","""");
				psListOfActions.AddChild(psActions);
		
			}
			a = a+2;
			b= b+2;
			Count++;
			j = j+2;
			psActions = null;
			
		 }
		 psListOfActionSet.AddChild(psActionSet);
	// Setting Instance
			if(vMSISDN != null || vMSISDN != """")
			{
				var psInstance:PropertySet = TheApplication().NewPropertySet(); 
				psInstance.SetType(""Instance"");
				psInstance.SetProperty(""Service Id"",vMSISDN);
				psInstance.SetProperty(""Id"",""12345"");
				psInstance.SetProperty(""Sequence"",""1"");
	            psInstance.SetProperty(""Asset Id"",vRootAssetId);
				psInstance.SetProperty(""Root Asset Id"",vRootAssetId);
				psInstance.SetProperty(""Account"",AccName);
				psInstance.SetProperty(""Product Name"",vPackage);
				psListOfInstance.AddChild(psInstance);
				psActionSet.AddChild(psListOfActions);	 
				psActionSet.AddChild(psListOfInstance);
			}

			psListOfActions = null;
			psListOfInstance = null;
	
			return psListOfActionSet,Header;

	}
	catch(e)
	{
		LogException(e);
		if(BulkRequestId == null || BulkRequestId == """")
		{
			TheApplication().RaiseErrorText(""Request Name is already exists, Please enter unique request name"");
		}
	}
	finally
	{
		
		oSubAcctBC = null;
		oAssetBC = null;
		AccName = """";
		psInstance= null;
		psActions= null;
		psActionSet = null;
		psListOfActions = null;
		psListOfInstance = null;



	}
		
}
function NewBulkOrder(&vBulkDataArray,ArrLen,psListOfActionSet,Header)
{
	try
	{
		var AddOnProd1;
		var AddOnProd2;
		var AddOnProd3;
		var PortInFlg = ""No"";
		var vSeq:Number = 1;
		var vBillProfId = """";				
		var CustActNumber = vBulkDataArray[1];
		var BilActNumber = vBulkDataArray[2];
		vMSISDN = vBulkDataArray[3];
		vSIM = vBulkDataArray[4];
		var vMNPMSISDN = vBulkDataArray[5];
		var vDonorId = vBulkDataArray[6];
		var vDonorSIM = vBulkDataArray[7];
		vPackage = vBulkDataArray[8];
		var oBillAccBO = TheApplication().GetBusObject(""STC Billing Account"");
		var oBillAccBC = oBillAccBO.GetBusComp(""CUT Invoice Sub Accounts"");
		var psListOfActions:PropertySet = TheApplication().NewPropertySet();
		psListOfActions.SetType(""ListOfActions"");
		var psListOfInstance:PropertySet = TheApplication().NewPropertySet();
		psListOfInstance.SetType(""ListOfInstance"");
		with(oAccountBC)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(""Id"");
			ActivateField(""Name"");
			ActivateField(""Account Number"");
			SetSearchSpec(""Account Number"",CustActNumber);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				AccName = GetFieldValue(""Name"");
				vCANId	= GetFieldValue(""Id"");
			}
		}
		with(oBillAccBC)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(""Id"");
			ActivateField(""Account Number"");
			ActivateField(""Primary Billing Profile Id"");
			SetSearchSpec(""Account Number"",BilActNumber);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				vBANId	= GetFieldValue(""Id"");
				vBillProfId = GetFieldValue(""Primary Billing Profile Id"");
			}
		}
		// Checking MNP MSISDN value
		if(vMNPMSISDN == ""undefined"" || vMNPMSISDN == null || vMNPMSISDN == """")
		{
			vMNPMSISDN = """";
		}
		if(vMNPMSISDN != """" )
		{
			PortInFlg = ""Yes"";
		}
		// Setting Bulk Request Header
		if(Header == ""Order"" && BulkCount == 0)
		{
			with(oBulkReqBC)
			{
				ActivateField(""BRFileName"");
				ActivateField(""Bulk Request Name"");
				ActivateField(""Status"");
				ActivateField(""User Id"");
				ActivateField(""Mode"");
				NewRecord(NewAfter);
				SetFieldValue(""BRFileName"","""");
				SetFieldValue(""Bulk Request Name"",vBulkOrdFileName);
				SetFieldValue(""Status"",""New"");
				SetFieldValue(""Mode"",Header);
				SetFieldValue(""User Id"",sLoginId);
				WriteRecord();
				BulkRequestId = GetFieldValue(""Id"");
				Header = null;
			}
							
		}
		
		//setting Action Set
		 
		var psActionSet:PropertySet = TheApplication().NewPropertySet();
		
		psActionSet.SetType(""Action Set"");
		var i =1;
		psActionSet.SetProperty(""Id"",i);
		psActionSet.SetProperty(""Customer Account"",AccName);
		psActionSet.SetProperty(""Customer Account Id"",vCANId);
		psActionSet.SetProperty(""Billing Account Id"", vBANId);
		psActionSet.SetProperty(""Bulk Request Id"",BulkRequestId);
		psActionSet.SetProperty(""Billing Profile Id"",vBillProfId);
		psActionSet.SetProperty(""Service Account"","""");
		psActionSet.SetProperty(""Type"",vOrderType);
		psActionSet.SetProperty(""Order Type"",""Provide"");
		psActionSet.SetProperty(""Sequence"",i+BulkCount);
		psActionSet.SetProperty(""Active Flag"",""Y"");
	//	psActionSet.SetProperty(""Account"",AccName);
		psActionSet.SetProperty(""Child Instance Type"",""Service Id"");
		psActionSet.SetProperty(""Scope"",""Include""); 
		psActionSet.SetProperty(""Donor Id"",vDonorId); 
		psActionSet.SetProperty(""Donor SIM"",vDonorSIM); 
		psActionSet.SetProperty(""MNP MSISDN"",vMNPMSISDN); 
		psActionSet.SetProperty(""SIM Number"",vSIM);
		psActionSet.SetProperty(""Port In Flag"",PortInFlg);
		psActionSet.SetProperty(""AnyChildInError"",""N"");
		psActionSet.SetProperty(""Template Flag"",""N"");
		psActionSet.SetProperty(""Valid Flag"",""N"");
	
		i++;
		
		//Setting Actions
		var vActionsCount = ArrLen-8;
		//var psActions:PropertySet = TheApplication().NewPropertySet();
		var k:Number = 9;
		var Count= 0;
		var ArrVal;
		//psActions.SetType(""Actions"");
		for(var j=0;j<vActionsCount;j++)
		{
			var psActions:PropertySet = TheApplication().NewPropertySet();
			if(Count == j)
			{
			
				psActions.SetType(""Actions"");
				psActions.SetProperty(""Id"",vSeq+j);
				psActions.SetProperty(""Sequence"",vSeq+j);
				psActions.SetProperty(""Base Product Name"",vPackage);
				psActions.SetProperty(""Action Code"",""Add"");						 
				psActions.SetProperty(""Active Flag"",""Y"");
				psActions.SetProperty(""Allow Multiple Instance"",""N"");
				psActions.SetProperty(""Component Product Name"","""");
				psActions.SetProperty(""Field Name"","""");
				psActions.SetProperty(""Attribute Name"","""");
				psListOfActions.AddChild(psActions);
		
			}
			if(j>0)
			{
				ArrVal = vBulkDataArray[k];
				if(ArrVal == ""undefined"")
				{
					ArrVal = """";
				}
				if(k<ArrLen && ArrVal != """")
				{
					vSeq++;
					psActions.SetType(""Actions"");
					psActions.SetProperty(""Id"",""12""+j);
					psActions.SetProperty(""Sequence"",vSeq);
					psActions.SetProperty(""Base Product Name"",vPackage);
					psActions.SetProperty(""Action Code"",""Add"");	
					psActions.SetProperty(""Active Flag"",""Y"");
					psActions.SetProperty(""Allow Multiple Instance"",""N"");
					psActions.SetProperty(""Component Product Name"",vBulkDataArray[k]);
					psActions.SetProperty(""Field Name"","""");
					psActions.SetProperty(""Attribute Name"","""");
					psListOfActions.AddChild(psActions);
					
				
				}
				k++;
		
			} 
			psActions = null;
			
		}
		
		 
	// Setting Instance
				var psInstance:PropertySet = TheApplication().NewPropertySet(); 
				psInstance.SetType(""Instance"");
				if(vMNPMSISDN == null || vMNPMSISDN =="""")
				{
					psInstance.SetProperty(""Service Id"",vMSISDN);
				}
				else
				{
					psInstance.SetProperty(""Service Id"",vMNPMSISDN);
				}
				psInstance.SetProperty(""Id"",""12345"");
				psInstance.SetProperty(""Sequence"",""1"");
				psListOfInstance.AddChild(psInstance);
				psActionSet.AddChild(psListOfInstance);
			
            				
		
			psActionSet.AddChild(psListOfActions);
			psListOfActionSet.AddChild(psActionSet);
	
			return psListOfActionSet,Header;

	
	}
	catch(e)
	{
		LogException(e);
		if(BulkRequestId == null || BulkRequestId == """")
		{
			TheApplication().RaiseErrorText(""Request Name is already exists, Please enter unique request name"");
		}
	}
	finally
	{
		AccName = """";
		psInstance= null;
		psActions= null;
		psActionSet = null;
		psListOfActions = null;
		psListOfInstance = null;
		oBillAccBC = null;
		oBillAccBO = null;



	}

}
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == ""Import"")
	{
		ImportBulkData(Inputs,Outputs);
		return (CancelOperation);
	}
	
}